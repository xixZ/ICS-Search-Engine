##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture21Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_10_28.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



10/28




Kickoff




Decoding muscle signals



 www.technologyreview.com—video



Muscle signals and the MS Surface



 www.technologyreview.com—video



Geocaching movie



 www.youtube.com—watch




Cards



Answered by email



Assignment status




Assignment 1 is being graded



Design Notebooks are 50% graded



Crossword puzzles are graded. Pick yours up after class



Assignment 2 is posted and due on upcoming Wednesday



Teams of 2 are okay.



Mid-term evaluation is live.




Multi-touch demo
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture15Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture24Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture14Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_10_23.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



10/23




Kickoff



 www.youtube.com—watch



Assignment status




Assignment 1 due today



Design Notebook due today



Crossword puzzles will be returned today



Assignment 2 is posted and due on upcoming Monday



Mid-term evaluation are live.




How did the workshop go?



Cards




A note about cards



They are working great in this class



Is jquery the only way to fix cross-browser issues



No, most javascript libraries do this also, for whatever there domain is. 



Will the future accuracy of GPS lead to privacy issues?



What navigation system is used for space ships?



I don't know



Why isn't GPS in geo-synchronous orbit?




part of it is (WAAS), part of it isn't



I'm not 100% sure, but I know there it is lower, less distortion and latency?




What languages/technologies should you know to be competitive




Corporate




.NET



Java



J2EE




Startup




Linux




Ruby/Rails



MySql



Amazon Cloud Services



Apache






How does the movement of a GPS client affect the accuracy of the positioning?



Not a whole lot.  The satellites are moving a lot faster



How hard is it to make your own GPS device?




Depends on how low you want to go...




Low: Software Radio



High: OEM development kit





Is there a limit to the number of GPS receivers that the 24 satellites can handle?



No.



How does Wifi-based location differ from GPS?




Depending on how you look at it, not a whole lot.



But there is a lot of difference in the details




What are alternatives to GPS?




Loran



Celestial



Depends on the application




Are GPS satellites a military target? (ours or others)






To the best of my knowledge




Beidou



 en.wikipedia.org—Beidou_navigation_system



Baidu



 en.wikipedia.org—Baidu



are completely unrelated (but both Chinese)




Why does it take GPS in your car so long to find your location?



basically satellite lock - depends on your system, we'll talk about why



Why are we spending so much time on location?




It's an important component of interaction today



Although we've actually only spent 1 lecture on it.




Can GPS be shut down regionally?



I'm not 100% sure, but I don't think so.



What's a good cheap GPS receiver?



I'll give some away today. (Kyle)



What's my favorite GPS application?



Geo-Caching



Is the datum a choice between coordinate systems or a numeric system.



It is a choice between where 0,0 is and what the shape of the planet is




Multi-touch demo
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture08Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture16Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_10_09.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



10/09




Cards




How was the Persian Gulf?



How did I go from military to academia?



Is it easy to go from industry to academia?



What do I think is going to happen in 2012?



What is my opinion of MS Surface




Uphill climb for developer adoption



Would I buy one?




Not for personal use.



For research, yes.




A.C. and A.S. have used it what do they think?



LUCI lab doesn't have any large-screen multi-touch devices




Hyperwall is in CalIT2



it is mostly used for demos and research into software support for it.



Augmented reality




Face recognition?



False info?



Garbage in, Garbage out.



Zombies vs. Helicopters



Does it work with any map?



Live Demo



OSGART



Does the military use augmented reality?




Is there an example?



 www.youtube.com—watch





Other classes?



I would look at some games courses for more on augmented and virtual realities



Will the keyboard ever be replace?



Does Google aim to extend battery life through solar or eliminate batteries?




What is holding back devices from being solar powered today?







Is the problem of implicit input solveable?



User Behavior Analysis in this class?



How much computing power would you need to sense the area around you?




Content




RFID video



 vimeo.com—6588461
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture11Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture20Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture07Slides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture13bSlides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture13aSlides.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_11_13.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



11/13




Kickoff



Cards



Assignment status




Assignment 1 is mostly graded



Assignment 2 is being graded



Assignment 3 is due Monday




Notes from Shaping Things 7-10




"Trash is always our premier cultural export to the future"




Valuable things wear out



People go away, things remain



most of the things are "pollution"




MAYA




"Most advanced - yet Acceptable"




Designers as gatekeepers



Advancement as a continuum -> "Most"



"Yet" implying resistance



A perfectly designed solution must also address the cultural impact to be successful



Being designry/ galmorous



Helped to seduce customers



See also Steve Jobs



"No material thing can ever achieve full an utter acceptability"



"A thing is not merely a material object but a frozen technosocial relationship"



Acceptability changes



Lucky Strike



Meta-History and Advanced are intertwined





Gizmos




Free is not the metric it used to be



Loss-Leader



Wine




Why can't Sterling now all about the product?



All the ways in which things - apparently free - are not really free



Transportation, exact chemical analysis, labor practices



Transparent production



Critical for a society determined to continue surviving



What are the consequences?




Of buying the wine



Of drinking the wine



Of discarding the rubbish




Who should reveal the consequences?



Designers





Spimes




Things with transparent consequences



"A spime is a set of relationships first and always, and an object now and then"



"A Spime is an identity of a thing"



quote on page 78




The bar code has become the method for naming the flows of material and energies coming together at one time and place
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_10_16.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



10/16




Crossword Turn-In



Design Notebook Turn-In is now scheduled



Cards




XML vs JSON smack down




You can compress XML to make it smaller



The class is pretty split



I would say I prefer XML cause I like the beauty of it



I would saw more small web developers like JSON



XML and JSON are different



There is no such thing as XML/JSON





Where can you put your webpage?




Develop on your own machine initially



 www.ics.uci.edu—personalwebspace.php




Windows 7 vs. Snow Leopard




I like multi-touch on Windows 7



I think Grand Central on Snow Leopard is brilliant




What is my favorite programming language



Java now that it is as fast as C++



RFID Demo



AJAX



Multi-touch demo



Libraries
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Slides/Lecture11.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_10_21.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



10/21




Assignment status




Assignment 1 due Friday



Design Notebook due Friday



Crossword puzzles are graded and will be returned shortly



Assignment 2 is posted and due 10/30



Mid-term evaluation will be released next week




Cards




Answered by email



I highly recommend developing in FF with the Firebug plug-in




Multi-touch demo
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_09_INF133/Notes/INF133_Notes_09_30.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 133 Notes



9/30




Cards




Design Journal Example



 Pasted Graphic



Regarding trying these out on "real people"



next course.



What did I do to the guy who plagiarized my work?



Songs are linked or at least referenced on webpage.



If in doubt cite your source.  If you aren't allowed, I'll try and be explicit since building on other people's work is the new normal



Books have been requested to be on reserve at the Science Library, but I just requested it Tuesday



There will be coding required and it will be lots of different kinds but never at the expert level



My transitional class websites don't exist anymore - mostly



Good web design takes time



The Highlander 3 joke was good. period.



My favorite Filipino food is




Lumpia - its deep fried - easy



The random soups which I never got the name for



Some crazy tea made from boiling "lemon grass" which wasn't lemon grass




How many quizzes/labs?



Plan on one a week



130 series




 133/4 are about HCI *Programming*.They focus on implementation techniques.Infx 131/132 are more about principles andevaluation.They don't appear to be interchangeable options from the catalog.  Are they supposed to be?Definitely not; they're complementary.



FAQ is fixed




Kick-off Video




Digital Ethnography Video



 www.youtube.com—watch




Content




The Human



Kim's Game
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/index.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Home
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
  Home
  Winter 2009 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...












( Home ) | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

   From the catalog:
   
  "An introduction to information retrieval including indexing, retrieval, classifying, and clustering text and multimedia documents."
   
  Information Retrieval is a *the* hot industry on the web today thanks to Google, Yahoo!, MSN and all of the other competitors out there both current and past. The amount of effort required to translate your 2 or 3 keywords into 5-10 relevant documents is enormous. During this class we will attempt to explore some of the complexities behind search.


  Instructor: Professor Don Patterson
  Email: djp3@ics.uci.edu
  Lecture: T R 9:30 - 10:50 
  Classroom: SST 120 
  Office Hours:
  
    By appointment DBH 5084
  


  Teaching Assistant : Yasser Ganjisaffar 
  Email:yganjisa AT ics DOT uci DOT edu
  Discussion: M 11:00 - 11:50 
  Classroom: DBH 1200 
  Office Hours:
  
    By appointment
  
  
 
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture16Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 141


2/26/2009 Lecture Notes


Kick-off:


I have one IR paper


 doi.acm.org—988672.988750


Cards


 
FirefoxScreenSnapz001





Complicated quirky Technical mathematical varied progressed data search query corpus information retrieval fast future trust useful amazing growing information unstructured docs corpus retrieval query complex large efficient purple algorithmic polite search rank index crawl web google search in a large corpus efficiently a way to retrieve information needed search science metadata database data document text math crawl search query score rank map distributedly digging through documents discovering data  crawler complex frustrating time consuming tricky mathematical searching documents metadata relational database www aggregate search gather useful difficult fast efficient search relevant search document weighting vast useful technological studied business scholarly text retrieval information overload information sorting document retrieval data retrieval corpus statistics crawlers retrieve and rank info about queries how search engines crawl the web intractable expensive difficult google difficult interesting useful important speedy slow Patterson crawler hard amazing cool confusing  search evaluate get gather sort modify retrieving challenge fun useful slow indexing the science of searching for documents google query posting list frequency database index how one searches for different things evolving organization information cool big money google not Microsoft move google need search stop word list distributed hadoop inverted index parsing stemming  large important crawl web search corpus  linear multi distributed stuff wikipedia reuters magical special fun happy sad all knowing rank query queuing cosine google key web crawling page rank page scores sexy enthralling exciting bright colorful confusing


Assignment 06


Learning Objective:


Cards


Name


Video break


 www.datavisualization.ch—impress-tactile-touchscreen
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture07Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/27/2009 Lecture Notes


Kick-off:


No one as Irish as Brack O'Bama


 www.oneeyedparrot.org—obama.html


Learning Objective:


Explain the principles behind the design of mercator URL frontier architecture 


Explain the things that we are interested in capturing during a crawl


Vector Space Model


Posting list


Connectivity Graph


Update on Assignment #3 and schedule


crawler4j is now on version 1.0.3


group members post names


Less than one week to complete


How are we doing?


Cards


Review Cards


How fast is fast enough for palindromes?


Do crawlers continue to crawl forever?


Should our crawler crawl forever?


What are some cool things crawlers can do?


Send you alerts when they find something


When does a crawler use front queues vs. back queues?


What about for our assignment?


What do we do when the back queues fill up?


Where do the URLs come from that need to be crawled?


seed set then outlinks


What is duplication and shingling


Why is crawling so complicated?


scale


social contracts


adversarial technology


need for robustness


Is mercator the best architecture for crawling?


How is round robin biased toward highest priority?


Do crawlers crawl randomly?


What's the host splitter about?


How do the queues recognize a web page loop?


Video break


nru


 www.youtube.com—watch
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture15Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 141


2/24/2009 Lecture Notes


Kick-off:


Quiz return


Assignment 06


2 hours for my full job to run


1.5 Terabytes avail


Fully Awesome


Learning Objective:


Learn about how researchers talk about alternatives to tf-idf


Understand how to calculate the cosine similarity score rapidly and efficiently


Cards


Name


6 words to describe this course


Video break


Home page link visualization


 www.nickbilton.com—98


1908 New York Times


 www.flickr.com—o
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture09Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


2/3/2009 Lecture Notes


Kick-off:


 http://www.youtube.com/watch?v=8vNxjwt2AqY


Learning Objective:


Explain the things that we are interested in capturing during a crawl


Vector Space Model


Posting list


Connectivity Graph


Be able to explain how the connectivity graph and the posting list are similar and different


Quiz 02


Pocari Sweat Award


Mid-Term Evaluation


Through EEE


Video break


 www.surfcanyon.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Assignments/Assignment02.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Assignment 02
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
        Assignment 02 
        Winter 2009 
        Department of Informatics
        Donald Bren School of Information and Computer Sciences 
        University of California, Irvine   Discussions about this class
          Loading...
        
        
        
      

Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

  Due 1/16/2009


  Goals:
      This assignment is designed to prepare you for the rest of the class:
          To set up a programming environment in openlab. To be able to run a program in an environment with enough resources for building a search engine (disk space and cpu cycles)
        To write feature detectors for things you might want to detect on the web and make available for users on the web. To encourage you to use a modular architecture by forcing development of components apart from the future infrastructure. 
    Java Program
      (yes Java)
        This assignment may be done in groups of 1, 2 or 3. Write a Java Program which runs on an openlab machine in a unix environment. It should be able to access the "/extra/ugrad_space" as per these instructions. Given a text file your program should:
          Find the longest Palindrome: A palindrome consists of the longest common substring between a line of text and its reverse. 
              What I want is a palindrome made from English words. Here are some algorithmic guidelines to help you find that:
                  First split the text whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a palindrome.Second strip all punctuation, spaces, symbols and numbers from the text so that only [A-Za-z] remain.Convert all characters to upper or lower case.Once you identify all palindromes on a page over X characters, make sure that:
                      It is greater than 5 characters.Less than 30% of the original text that it came from was punctuatio
                    
                
            Find the longest Lipogram (letter "E"/"e")
              : A lipogram is the longest sequence of text which doesn't contain a particular letter.
               What I want is a lipogram made from English words. Here are some algorithmic guidelines to help you find that:
                  First split the text whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a lipogram.Second strip all punctuation, spaces, symbols and numbers from the text so that only [A-Za-z] remain.Once you identify all lipograms on a page over X characters, make sure that:
                      less than 30% of the original text was punctuation.
                    
                
            Find the Rhopalic with the most number of words.
              For our purposes a rhopalic is a sequence of words in which each word increases by one character.
                  The first word has N characters. The second word has N+1 characters.Words are separated by at least 1 and no more than 3 spaces, white space, or punctuation. Example: "I am the most happy person talking"
                What I want is a rhopalic made from English words. Here are some algorithmic guidelines to help you find that:
                  First split the text whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a rhopalic.
                
            In measuring the length of strings we cound all the characters including spaces and punctuation. 
        
    Submitting your assignment
      
      We are going to use checkmate.ics.uci.edu to submit this assignment.Make the file name <StudentID>-<StudentIID>-<StudentID>-Assignment02.jarThe jar file should include a package named "ir.assignment02"This package should include a class named "Analyzer" which contains the "main" function.We will execute the program with this command: java -cp <filename>.jar ir.assignment02.AnalyzerProgram should read the input from "in.txt" file which is at the same folder as the jar file.Program should write the output to "out.txt" file. The file should be stored at the same folder as the jar file.Attached are sample in.txt and out.txt files. Generated output file should exactly match the sample.
          Input fileOutput file 
        
    Evaluation:
      Can the TA run the version that you turned in?
          Is it runnable?Did you follow instructions? 
        Does it do what it is supposed to do
          ?
          Output the longest palindrome, lipogram and rhopalic on test files provided by the TA?
              Does it output a valid {p,l,r} that is in the text?Is it the longest one in the text? Here are the files we tested on. 
            
        
    
  

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture19Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 141


3/5/2009 Lecture Notes


Kick-off:


Taco Town - SNL


 www.hulu.com—saturday-night-live-taco-town


Cards


The Gold thing in my pocket is keys


If you can't make the google trip (and want to b/c of a final) talk to the instructor, they might be flexible.


Does assignment 07 support boolean queries


A simple adjustment could make it support "AND" and "OR", but that's not part of the assignment


Lots of firefox extension tutorials on the web


Page-Rank named after Larry Page


MapReduce for:


PageRank?


 michaelnielsen.org—blog


Machine Learning


 www.cs.stanford.edu—nips06-mapreducemulticore.pdf


Learning Objective:


Assignment 07


Be able to use MATLAB to do LSI on your data




Cards


Name


Open Comment


Video break
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Assignments/Assignment01.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Assignment 01
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
  Assignment 01  
  Winter 2009 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...









Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 1/9/2009


  Goals:
      This assignment is designed to help me gather information about you so that I can make this the best class possible.To make sure your expectations match mine regarding the policies in this class. 
    Digital Photo 
      (30%)
        Take a digital photo of your face. (Crop it so that it is 250 pixels by 250 pixels)Email it with your full name to the TA.Evaluation:
          Is it a picture of your face?Is it 250x 250 pixels?  Did it show up by the due date? 
        
    Take the Get to Know You Survey 
      
      (30%)
      Located here (http://eee.uci.edu/survey/0Ik8VOE1pd).It will not work after the due date. Make sure you hit submit at the end of the survey. Evaluation:
        Is your survey complete and in the system by the due date? 
		
    Turn in a signed hard copy of the administrative policies (33%)
      Here is the form. Evaluation:
          Did it show up by the due date?
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture08Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/29/2009 Lecture Notes


Kick-off:


"What information consumes is rather obvious: it consumes the attention of its recipients. Hence a wealth of information creates a poverty of attention, and a need to allocate that attention efficiently among the overabundance of information sources that might consume it." (Computers, Communications and the Public Interest, pages 40-41, Martin Greenberger, ed., The Johns Hopkins Press, 1971.) 


Learning Objective:


Explain the things that we are interested in capturing during a crawl


Vector Space Model


Posting list


Connectivity Graph


Be able to explain how the connectivity graph and the posting list are similar and different


Update on Assignment #3 and schedule


Meet in ICS1 3rd floor lab on Monday


How are we doing?


Cards


No cards today -quiz


Review Cards


We know mercator well


Video break


Lambda Table


 www.youtube.com—watch
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture02Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/8/2009 Lecture Notes


Kick-off:


 djearworm.com—united-state-of-pop-2008.htm


Learning Objective:


"To understand the history and current landscape of Web-based  Information Retrieval so that we have enough information to go into depth on the architecture and algorithms of web search engines"


Go over names


Review Cards


If you want to submit a different card with something you don't understand take two (anonymous)


Working in groups


Depends on the assignment


You can pick the group. It is optional.


I encourage you to not use the same group twice - I may require that later.


Google Tour is mandatory if it happens and it doesn't conflict with a different final that you have.


Can we ask questions in class?


Yes - absolutely.


The cards are just another medium for "dumb" questions or shy people.


Why dont we teach Ruby?


What does crawling require?


What are the expectations for getting an "A"


Start your assignments early.


Hyperwords


not part of class


Taxonomy vs Search


Find out about preparing cardoon


 dir.yahoo.com


more about open lab


 www.ics.uci.edu—logging_in.php


Review [INF 141] tag in email


Require java


Go over changes to assignment:


Checkmate


Assignment 02


Introductions


Yasser


Video break


 video.aol.com—88552999
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture12Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


2/12/2009 Lecture Notes


Kick-off:




Learning Objective:


Understand the evolution of queries


Go over schedule


Assignment 5 and 6 delayed so we can iron out the details of the assignment


Cards


Name


Something that is hard to search for


Video break


 www.youtube.com—watch
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture03Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/13/2009 Lecture Notes


Kick-off:


natalie portman's shaved head - sophisticated side ponytail


 www.vimeo.com—1507417


Learning Objective:


"To understand the history and current landscape of Web-based  Information Retrieval so that we have enough information to go into depth on the architecture and algorithms of web search engines"


What are characteristics of the web?


What are web search users like?


What is web spam like?


Go over names


GetSatisfication post about assignment #2


Survey Results


Review Cards


Explain "Content Assembled on the Fly"


requires special handling


Details for accessing openlab are linked from the notes on lecture 2


Attendance at Discussion will be recorded, but not graded


web crawler and web spider are used interchangeably


i dont anything about cuil


course slides are available for download


 www.ics.uci.edu—calendar.html


do search engines use results from other search engines?


Video break


 www.vizzl.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture14Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


2/19/2009 Lecture Notes


Kick-off:


Learning Objective:


Understand the evolution of Term-Weighting


Source and motivation for scores


Understand Vector Space Scoring


Source and motivation for technique


How to do it efficiently


Quiz


Office hours


2- 3 today in the conference room next to my office


No cards today


Video break
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Assignments/Assignment05.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Assignment 05
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
        Assignment 05 
        Winter 2009 
        Department of Informatics
        Donald Bren School of Information and Computer Sciences 
        University of California, Irvine   Discussions about this class
  
        
        
        
      

Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

  Due 2/13/2009


  Goals:
      
      This assignment is
          designed to:
          To teach you how to make a postings list with a MapReduce architecture. To teach you how to use Hadoop before trying it on a Wikipedia scale assignment. 
        
    Administration:
      You may work in teams of 1, 2 or 3, but it cannot be the same group as a previous assignment. 
    Write a Java Program To Be Executed by Hadoop 
      The input to the system will be a list of <key,value> pairs in a file. 
          The "key" will be a URLThe "value" will be the document ID of that URLHere is the input file. 
        The output of the system will be a posting list ordered by terms found in the input URLS
          A text file with the term on the start of the line and a list of all document URLs on which that term appears.   
        
    Write a Java Program To Be Post Process the results
      (optional for this assignment)
        This program will calculate the statistics required for the document that you turn in. 
    How to do this:
      Refer to the notes from the discussion section on 2/9/09 for additional info.Look at this class wiki for help (feel free to edit) Here are some tutorials 
          Follow the instructions here ("Picking your java version on openlab") to get the right version of java."Hadoop Map/Reduce Tutorial" "Running Hadoop On Ubuntu Linux (Single-Node Cluster)"
        Hints:
          The lines of input.txt file are passed to your mapper function one by one.It should download the page of that URL, make all the text lower cased, and generate <term, docid> pairs. (Check Downloader.java as a sample of how to use crawler4j lib to download a single page). Here is an example for WordCount. 
        
    Test
      With this input.Don got this output.  
    What to turn in:     
      Outputs:
          Submit a postings.txt file in which each line contains postings of a term: <term, docid1, docid2, ...>. Before uploading this file, truncate it and only keep the first 500 lines.Submit a report.txt file with this content:
              Total number of distinct terms: ....Number of documents containing term 'is': ...Number of documents containing term 'Satellite': ...First Name of member 1 of your team: ...List of URLs containing first name of member 1 of your team: ... 
            
        
    Submitting your assignment               
      We are going to use checkmate.ics.uci.edu to submit this assignment.        Make the file name <StudentID>-<StudentIID>-<StudentID>-Assignment05.pdf
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Assignments/Assignment07.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Assignment 07
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
        Assignment 07 
        Winter 2009 
        Department of Informatics
        Donald Bren School of Information and Computer Sciences 
        University of California, Irvine   Discussions about this class
  
        
        
        
      

Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

  Due 3/15/2009





  Goals:
      
      This assignment is
          designed to have you:
           Use a large posting list to rank web pages against a query. Implement cosine rank scoring efficiently. 
        
    Administration:
      You may work in teams of 1, 2 or 3, no restrictions on membership. 
    Write a Java Program To Process the Hadoop Output
      This part is necessary so that your program runs at a reasonable speed. 
    The input to this system is the output of the posting list exercise from Assignment 06.
        Use the results from the 500,000 URL crawl. Here are the URLs that were crawled. You can optionally start from our output located here.  (820MB compressed, 2.8GB uncompressed)  
      000000000 , 12 , 5 :    {203645=1, 231518=4, 270201=4, 476437=2, 592873=1}The term is "000000000" there are 12 occurences of that term in 5 documents. The term was found on the wikipedia pages for "Sinclair_Coefficients" 1 time, "Free_Software_Foundation" 4 times, "Apollonian_gasket" 4 times, "List_of_Sunderland_A.F.C._managers" 2 times and "Finite_field_arithmetic" 1 time. 
      
    
    The output of this program is two binary files.
        The first
            is a table in which each row has a term and a pointer into the second file.
          The second file
            Is a binary representation of the posting list that you can use the first table to do a random access lookup into.  
          
      
    Write a Java Program Score a query
      This part calculates the cosine ranking scoreThe input to this part is the output of the previous program, plus the document table, plus a query from a user.The output is a ranked list of the ten most relevant web pages in wikipedia.Do not create an accumulator for any term which occurs more than 50,000 times.
        
    Extra Credit   
      Create a web-based user interface which collects a query from a user and displays the results.
          Either a web-page or a browser extension (harder) 
        
    What to turn in:A sources.zip file containing your source code.A report.txt file containing this information:
        Names of your team members.Size of each on-disk data structure that you are using. For example, if you are using 3 binary files to store your data structures this would be the description of each file and its size in Mega bytes.Approximate size of your main in-memory data structures. For example, if you are keeping a look up table in memory, you should report the size (in MB) and description of this data structure.A sample query that your program can process fast and the amount of time it takes to respond.A sample query that takes longer to process (compared to other typical queries) and the amount of time it takes to response.
      With an efficient implementation, your program should return results in a fraction of second. Therefore, 15 seconds is our expectation for a maxmum time to wait for a query respons. If your program takes longer than that, something is not working right.Make sure to attend the discussion session on March 9th. All of the details will be discussed there.Your programs will be reviewed by Yasser on Monday March 16th from 10 am - 12 in the ICS third floor lab. If you have a conflict with this time, send him an email (before March 16th) to schedule another time.
        Submitting your assignment               
      Schedule an appointment with Yasser to review your final program.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture04Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/15/2009 Lecture Notes


Kick-off:


 vimeo.com—1778399


Learning Objective:


"Finish our overview of the current web search landscape"


What is web spam like?


Take a quiz


Go over names


GetSatisfication posts


Survey Results


No cards today - quiz instead


Review Cards


Is it possible for a web search engine to find a page which is not linked?


Why are we using getsatisfaction rather than EEE?


useful service for you to know about post-graduation


Admin tools are stronger.


Just because a webpage is dynamically constructed doesn't mean it doesn't have static content.


A search engine can load it twice and see how much it changes before deciding whether or not to remember it


How does google keep track of you?


cookies possibly tied to a google account


also keeps track of queries independent of users


Microsoft


Don't confuse my lack of knowledge of MS products with a statement that they are bad


I largely don't use MS products because they do not facilitate my work as a computer science researcher, in my opinion they are geared toward business users.


e.g, equations editing


cost of software


access to source code


ability to change a technology


How does Google judge a high quality page?


for ads:


 adwords.google.com—answer.py


Video break


None today - quiz
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture20Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 141


3/5/2009 Lecture Notes


Kick-off:


U2 Unknown caller: "Force quit"


Cards


Last chance to sound off


Learning Objective:


Quiz


Donuts


Course Summary


Final Evaluations


Cards


Video break


 www.ted.com—pattie_maes_demos_the_sixth_sense.html
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture01Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/6/2009 Lecture Notes


Learning Objective:


"To understand the scope of this course, including the expectations, requirements, workload, and policies"


"To understand the history and current landscape of Web-based  Information Retrieval so that we have enough information to go into depth on the architecture of web search engines"


Kick-off:


Hyperwords


 www.youtube.com—watch


Introductions


Me


Yasser


Describe cards


Evaluating me not the class


Go over syllabus
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture05Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/20/2009 Lecture Notes


Kick-off:


Apple release keyboardless laptop


 origin.theonion.com—apple_introduces_revolutionary


Learning Objective:


"Be able to describe


 the steps of a crawling algorithm


the desired characteristics of a web crawler


why a good crawler is a complex piece of software


how a website operator can control web crawler behavior


how DNS resolution impacts crawling


Return quizzes


Go over names


Verify score is calculated right


Added right


Entered in EEE correctly


Survey Results (probably later)


Cards


Review Cards (n/a there was a quiz last lecture)


Schedule


Reschedule of Assignment 03


Video break


Global Biodiversity database


 www.youtube.com—watch
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture10Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


2/5/2009 Lecture Notes


Kick-off:


 www.dailymotion.com—k6vkchkYSEns9qMU4G


Learning Objective:


Explain how indexing evolved and why each step was made along the way


Explain the basics of running a Hadoop architecture


Understand the evolution of querying


Mid-Term Evaluation


Through EEE


Video break


Headup


 www.vimeo.com—2072562
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Assignments/Assignment03.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Assignment 03
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
        Assignment 03 
        Winter 2009 
        Department of Informatics
        Donald Bren School of Information and Computer Sciences 
        University of California, Irvine   Discussions about this class
  
        
        
        
      

Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

  Due 2/2/2009


  Goals:
      
      This assignment is
          designed to:
          To teach you how difficult crawling the web is in terms of scale and temporal requirements. The software itself is not the hard part of this assignment, it is managing all the data. This is only one web site (wikipedia) after all. To teach you how difficult it is to process text that is not written for computers to consume. Again this is a very structured domain as far as text goes.To make the point that web-scale web-centric activities do not lend themselves to "completeness". In some sense you are never done. So thinking about web algorithms in terms of "finishing" doesn't make sense. You have to change your mindset to "best possible" given resources. 
        
    Administration:
      You may work in teams of 1, 2 or 3. 
    Write a Java ProgramWrite a program to crawl the web.Suggested approach
          Use crawler4j as your crawling engine. It is a java library. Follow the instructions at http://code.google.com/p/crawler4j/ and create your MyCrawler and Controller classes.Remember to set the maximum heap of java to an acceptable value. For example, if your machine has 2GB RAM. You may want to assign 1GB RAM to your crawlers. You can add -Xmx1024M to your java command line parameters.Make sure that you dump your partial results in a permanent storage as you crawl. For example, you can write palindromes longer than 20 characters in a file and after finishing the crawl, report 10 longest one. It is always possible that your crawl crashes in the mean time or you pass the deadline. So, it's a good practice to have your partial results in a file.  Also make sure to flush the file whenever you write in it.If you're crawling on a remote linux machine like openlab machines, make sure to use the nohup command. Otherwise your crawling which may take several days will be stopped if your connection is disconnected for even a second. Search the web for how to use this command.Attend the discussion class. All of the above suggestions and other hints will be covered there.
        Inputs
          A URL start Page (the seed set) A regular expression
              Pages are only crawled if the url matches this regular expression.
            
        Outputs
              Find the 10 longest Palindromes in  english content pages of wikipedia that is not on a page about palindromes. Present them in a table with the source page from which they came. Find the10 longest Lipograms (letter "E"/"e") in  english content pages of wikipedia that is not on a page about lipograms. Present them in a table with the source page from which they came. Find the  10 Rhopalics with the most number of words in  english content pages of wikipedia. Present them in a table with the source page from which they came. Number of Pages Crawled.Number of Links found in these pages.Total Size of the Downloaded Content.Total Size of the Extracted Text of the Pages.What was the docid of the Page with this URL in your crawl: http://en.wikipedia.org/wiki/Barack_Obama
        
    Submitting your assignment               
      We are going to use checkmate.ics.uci.edu to submit this assignment.        Make the file name <StudentID>-<StudentIID>-<StudentID>-Assignment03.pdf
    Evaluation:
      (90%) Produce the palindrome, lipogram and rhopalic   
          and source URLs from part 3.
          Grades will be assigned according to the length of the sequence compared to the longest known sequence. 
        (10%) Adhering to administrative requirements
    Train your group     
      Each member of your group must be able to run your architecture on their own for Assignment 04.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture11Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


2/10/2009 Lecture Notes


Kick-off:


Cool Hunting video KK Projects


Learning Objective:


Clarify Assignment 05 and 06


Understand the evolution of queries


Go over schedule


Cards


Name


One question that you have about content of class


Stressors:


Lots of stuff


tests in other classes


cars, relationships,


grade in this class


what to do when graduating


money


Mid-Term Evaluation


Thanks for your input


Hadoop is a brand new assignment


We are going to do much more explicit instructions for this


We are canceling Quiz 4


We are doing the assignment in two stages


Use the forum to ask questions


Many of you had the same concerns that could have been easily addressed, but made assumptions about who knew what etc. etc.


Groups


New groups for Assignment #5


No one is making you work in groups that you don't want to work in.  If you don't want to be in a group with someone, you've got to figure that out and make it not happen.


Google Trip


working on it.


Assignments all posted


The field is changing fast.  The assignment's we did last year aren't state of the art any more.  Very hard to do this.


Expected Grades


Pretty high


Once we are done grading assignment 04 I will post what I am thinking your current grade is


posted to EEE


Video break


Nothing today
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture01Slides.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture06Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


1/22/2009 Lecture Notes


Kick-off:


Prospect.1 New Orleans Biennial 2008


 www.youtube.com—watch


Learning Objective:


"Be able to describe


 the steps of a crawling algorithm


the desired characteristics of a web crawler


why a good crawler is a complex piece of software


how a website operator can control web crawler behavior


how DNS resolution impacts crawling


Survey Results (probably later)


Cards


Review Cards


What does fetch mean?


Do we have to be polite?


Concerned about my grade


Work in groups.  Work efficiently.


Where does the seed set come from?


 www.google.com—addurl


How do we demo for 4 if it's going to take so long?


How do you get permission to crawl databases directly?


Spider traps are still confusing


 www.fleiner.com—botsv


Video break


None today
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Assignments/Assignment06.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 141 : Information Retrieval : Assignment 06
##------------------TEXT------------------------##
Informatics   141: Information Retrieval: 
        Assignment 06 
        Winter 2009 
        Department of Informatics
        Donald Bren School of Information and Computer Sciences 
        University of California, Irvine   Discussions about this class
  
        
        
        
      

Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

  Due 3/2/2009


  Goals:
      
      This assignment is
          designed to:
           Teach you how to make a postings list with a distributed MapReduce architecture on a HUGE cluster. Capture the data that you need to calculate ranking scores for assignment 07. 
        
    Administration:
      You may work in teams of 1, 2 or 3, no restrictions on membership. 
    Write a Java Program To Be Executed by a 38 node Hadoop 
      cluster
      The input to the system will be a list of <key,value> pairs in a file. 
          The "key" will be a URL in Wikipedia The "value" will be the document ID of that URL
        
    Write a Java Program To Be Post-Process the results
      (optional for this assignment)
        This program will calculate the statistics required for the document that you turn in.
    How to do this:Look at this class wiki for help (feel free to edit) Look at Assignment 5 resources if necessary 
    Test
      With the input on the dfs at /assignment06/input10 Don got this output. 
    What to turn in:
      Submit a postings.txt file in which each line contains postings of a term. All terms should be in lowercase and in the content (not the tags) of the web page.
          <term, cf, df> <docid1, tf1> <docid2, tf2>  ....
                  where cf is the collection frequency of the term, df is the document frequency of term (Number of documents containing this term). tf1 is the term frequency of "term" in document with docid1 and so on.
                Before uploading this file, truncate it and only keep the LAST 1000 lines.
        Submit a report.txt file with this content:
              Total number of distinct terms.List of top 10 words with lowest document frequency. List of top 10 words with highest document frequency.First Name of member 1 of your team: ...List of (at most 1000) URLs containing first name of member 1 of your team: ...
        
    Submitting your assignment               
      We are going to use checkmate.ics.uci.edu to submit this assignment.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture18Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
INF 141


2/26/2009 Lecture Notes


Kick-off:


 www.vimeo.com—3281558


I have one IR paper


 doi.acm.org—988672.988750


NACS on assignment 06


Hadoop is Done


Thanks Mitch


 www.youarefullyawesome.com—0203xn32z4


hayes17.ics.uci.edu              4,076trisha-takanawa.ics.uci.edu      4,589hayes10.ics.uci.edu              4,902rupert.ics.uci.edu               4,945hayes16.ics.uci.edu              4,970the-evil-monkey.ics.uci.edu      5,134barbara-pewterschmidt.ics.uci.e  5,135hayes11.ics.uci.edu              5,183hayes15.ics.uci.edu              5,188diane-simmons.ics.uci.edu        5,193mort-goldman.ics.uci.edu         5,275tom-tucker.ics.uci.edu           5,277glenn-quagmire.ics.uci.edu       5,321dhcp-050243.ics.uci.edu          5,380neil-goldman.ics.uci.edu         5,538opie.ics.uci.edu                 5,910peter-griffin.ics.uci.edu        5,932lois-griffin.ics.uci.edu         6,063hayes01.ics.uci.edu              6,232chris-griffin.ics.uci.edu        6,479tagus.ics.uci.edu                6,741godzilla.ics.uci.edu             6,772dhcp-055180.ics.uci.edu          7,227hayes03.ics.uci.edu              7,337node1.ics.uci.edu                9,129hutz.ics.uci.edu                 9,948riviera.ics.uci.edu             10,210wiggum.ics.uci.edu              10,839stewie-griffin.ics.uci.edu      10,935abraham.ics.uci.edu             10,948burns.ics.uci.edu               10,973selma.ics.uci.edu               11,182krusty.ics.uci.edu              11,187patty.ics.uci.edu               11,207hibbert.ics.uci.edu             11,316archive.ics.uci.edu             16,395aragog.ics.uci.edu              21,73


Cards


Lots of want to know more about:


Specifics of Google


Google Trip


PageRank


not too much more to say


Latent Semantic Indexing


Learning Objective:


Assignment 07


Understand the concept behind Latent Semantic Indexing


See how LSI works to reduce the dimensionality of data


Demo


Cards


Name


Open Comment


Video break


 tineye.com—faq
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF141/Lectures/Lecture13Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic


2/17/2009 Lecture Notes


Kick-off:


Architecture


 www.youtube.com—watch


Learning Objective:


Understand the evolution of queries


Go over schedule


Assignment 5 and 6 delayed so we can iron out the details of the assignment


Cards


We'll help with assignment 06 config file


Hadoop is not tuned for Windows


Going to google?


So far I think so. Optional if you have a conflict.


Does google use hueristics?


Yes, mixed with more principled analysis


How do you keep rank data in a postings list?


What is the sort criteria for docIDs in the posting list?


Who uses mapReduce right now?


Hard to search for


unpopular products - reviews


song without known title or lyrics


myself


a definition of a foreign word you can't spell


anything that requires many words to describe


other people named "Elvis Presley"


places to buy panda meat


people who aren't famous - bands that aren't famous


live athletic injury updates


non-textual queries - smells


laundromats and 24-hour restaurants


very specific /iconic images


free sheet music


Chuck Norris - he searches for you.




Cards


Name


Something that is hard to search for


Video break


 www.youtube.com—watch
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_03.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 03
						Due Date:
						Thursday 02/07 
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #3: Goal to make a tablet mobile application layout 
				 Imagine that you are prototyping a new digital wallet
					application.  You are going to test out a test version on
					tablets to see if you have a good design before refining the
					graphics.   Your application has a wallet balance and a
					system status at the top.  You have a pane that shows people
					with whom you exchange money, a pane with a transaction
					ledger and a pane with the information necessary to make a
					new transaction.   You need to get this into the hands of
					your testers as soon as possible. Create a new Android activity with a layout that
					exactly mimics the following layout on a 7in SVGA
					tablet device in landscape and portrait orientation
						
						
						
						
						
						
						
						
						
						
					
					Do this with a single static XML layoutIn priority order of the following, make sure that the following all match
						LayoutU/I ElementsTextText Style and AlignmentColors (#111,#555,#999, #eee, #0f0, #f00, #fff ,#00f)Padding (5 px)Images (From the activity creation wizard)
					No functionality needs to be implemented for this layoutThere should be no warnings or errors in your layout fileThe following tree representation of the layout may be
					helpful
						
						
						
						
						
					
					Admin:
						You may do this assignment alone or with a
							partner.  If you choose to work with a partner it
							must be a new partner, different from Assignment 2.You will turn in all the files in your "res"
							directory, we will build your project and run it to
							test it.
							zip the files in your Android res directory
								into one fileupload it to the EEE Dropbox located here:
								https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=306361
							
							
						
			
		
		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_04.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 04
						Due Date:
						Tuesday 02/19 
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #4: Goal to make an interactive digital prototype of a mobile application
				 Everyone should do this assignment on thier own Take this paper
					prototype developed in class and realize it as a digital
					interactive prototype in Balsamiq. Here is a link to a
					movie in which I describe what's going on in the
					prototype.
					
					 Download the free trial version of Balsamiq. It will
					work for 7 days.  Buy it if you like it.  I don't think the
					web based version will allow you to save to pdf.  Implement the paper prototype with interactive
					linking.  Iterate on this design to make it better and to
					make it reflect your style as an interaction designer.
						Here are two prototypes from class that might help
						you think through some of the options
						
						Team Alpha
						
						Team Bravo
						
					
					 The first page of the interaction should be a
					description of how your style influenced the prototype.
					Where did you intentionally deviate from the paper prototype? Why? Submit a pdf of your interface to the EEE dropbox
					located here: https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=306363 Here (.pdf) is an example of a mockup of our post-it note
					example.  View it in one-page up,  full-screen mode. Notice that it has several views and the buttons
					are active. The initial description in this example would
					not be nearly sufficient for your submission.  I anticipate
					that yours would be several paragraphs or many bullet
					points.Grading will be based on your execution of transforming
					the paper prototype into a digital prototype.  This isn't
					about copying the paper prototype, each prototype
					iteration should get better, but it should match the form
					and function of the paper prototype.  If you decide to
					change the flow, the views or the style, it better be
					clearly better and well explained.  When we grade
					these we will be evaluating things such as:
						Did you submit a pdf?Did you justify your choices?Do all the links work (even when making them work
							is a pain)?Is it professional looking?  Are buttons
							aligned? Are fonts big enough?  Is the text
							grammatically correct and spelled properly?Is the application completely mocked-up?  Are
							there missing elements or dead-ends?Are there sufficient intermediate elements to
							show processing and the input process?Is it any good?
					
			
		
		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_06.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 06
						Due Date:
						Saturday 03/16 
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #6: Make a processing app that you
				interact with via a depth-sensing camera (Kinect)
				 This assignment may be done alone or in pairs. You are to take input from a text file that contains
					the output of a Kinect.  The output was collected using
					kinectable_pipe You are to parse the file line by line to create an
					array of JSON objects. Each JSON Object is a represenation of one skeleton.
					Here is an example of one
					line:{"skeletons":[{"userid":0,"joints":[{"joint":"head","X":-702.131,"Y":486.367,"Z":1579.783},{"joint":"neck","X":-676.385,"Y":273.182,"Z":1570.143},{"joint":"neck","X":-676.385,"Y":273.182,"Z":1570.143},{"joint":"l_shoulder","X":-645.730,"Y":268.028,"Z":1768.476},{"joint":"l_elbow","X":-645.831,"Y":-27.049,"Z":1768.808},{"joint":"l_elbow","X":-645.831,"Y":-27.049,"Z":1768.808},{"joint":"l_hand","X":-647.107,"Y":-322.086,"Z":1764.067},{"joint":"l_hand","X":-647.107,"Y":-322.086,"Z":1764.067},{"joint":"l_hand","X":-647.107,"Y":-322.086,"Z":1764.067},{"joint":"r_shoulder","X":-707.041,"Y":278.335,"Z":1371.810},{"joint":"r_elbow","X":-714.375,"Y":-16.645,"Z":1369.905},{"joint":"r_elbow","X":-714.375,"Y":-16.645,"Z":1369.905},{"joint":"r_hand","X":-755.104,"Y":-308.767,"Z":1378.805},{"joint":"r_hand","X":-755.104,"Y":-308.767,"Z":1378.805},{"joint":"torso","X":-647.342,"Y":50.508,"Z":1559.868},{"joint":"torso","X":-647.342,"Y":50.508,"Z":1559.868},{"joint":"l_hip","X":-603.110,"Y":-174.720,"Z":1647.858},{"joint":"l_knee","X":-816.152,"Y":-553.847,"Z":1768.455},{"joint":"l_knee","X":-816.152,"Y":-553.847,"Z":1768.455},{"joint":"l_foot","X":-796.903,"Y":-987.331,"Z":1763.658},{"joint":"r_hip","X":-633.487,"Y":-169.613,"Z":1451.327},{"joint":"r_knee","X":-776.181,"Y":-590.984,"Z":1527.173},{"joint":"r_knee","X":-776.181,"Y":-590.984,"Z":1527.173},{"joint":"r_foot","X":-775.487,"Y":-1024.921,"Z":1527.667}]}],"elapsed":8.181}
					Using what you know about JSON and processing, create a
					character that interacts with you by mimicing the skeleton
					data that was collected from the KinectFor extra credit, add a physics system that is keyed to
					the skeleton.  In the video below I have simulated a virtual
					bull-fighting cape that the user is manipulating by waving
					her arms. Here are some sample input files:
						output1output2output3output4output5outputErick
					To get this to work you will need to import the JSON
					for processing library manually and possibly a physics
							libraryHere is some code you can put in your setup function to
					import the files.  You will need to make sure the files are
					in your sketch's "data" folder for this to work:
List data = new ArrayList();
					
String[] lines = loadStrings("output.txt");
  for(int i = 0; i< lines.length; i++){
    if((lines[i].length() > 0) && (lines[i].charAt(0) == '{')){
      try{
        data.add(new JSONObject(lines[i]));
      }
      catch(Exception e){
        println("error"+i);
      }
      finally{}
    }
  }
  Finally, you will need to transform the coordinates from Kinect into
  something that processing can plot. The z values seem to vary from about 500
  to 3000.  The x and y positions seem to vary from -1000 to 1000, roughly.
  Transforming involves moving the 0 axis in the skeleton data to some
  other position on the Processing canvas.  These functions will take skeleton
  points as input and output Processing points.  You need to set the 0 axis
  using the "offset" variables.  You need to scale the points using the "scale"
  variable so that the full range of Kinect positions will map to your window.
  Then you can see that the y position is flipped so that up in Kinect world is
  up in Processing world.:
float myX(float x){
  return (_offsetx+x*_scalex);
}

float myY(float y){
  return (_offsety + (-1.0*y*_scaley));
}

 Please turn in your Processing code as a text file. It should be a single
file.  Please put a comment at the top
indicating what needs to be done to run it (if anything special).  Tell us about libraries required
and where to find them in particular and how to set the file name for the input.  Here is a link to the dropbox to turn it
in:
https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=309443
 You will be graded on whether or not you were able to represent the
skeleton accurately, your creativity in drawing your character, and your effective
use of the processing animation loop. Additional credit will be given for doing
something clever or unique.  Finally, bonus points will be given for people who
incorporate a virtual physics system into their sketch.  

			
		
		
			
				
			
		
		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_02.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 02
						Due Date:
						Thursday 01/17 In Class: Non-integrated prototype
						Tuesday 01/22 In Class: Full application
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
				
			
		
		
			
          		Assignment #2: Goal make a mobile phone app that uses sensors 
				 Build a text-input alternative to a keyboard that does not require touch input
					 This system can use any type of motion or interaction from a user except for touching the screen. It may not access the Internet during input.  So no speech to text. The intention is to use sensors. If you are going to use some complicated library,
					please check with the instructor first to make sure it is
					within bounds of the assignment
					 The goal is to create a system which is efficient and effective and to think through how the coding and the human body should be integrated.Requirements for the system:
						It must run a Java program compiled in Eclipse and deployed on the Android platform.It must be integrated into the Android intents framework.
					Admin
						This is a solo or 2-person assignment.  If you would like a partner you can use the forum to find people.You may check out phones to deploy your app. 
					Evaluation will be conducted in class (100 points).
						 Acceptance test: Your team will be
							required to enter a sentence into a native Android
							application without touching the screen within 10
							minutes.  It may contain upper and lower case
							American English characters plus punctuation and
							numbers.  An example sentence is: "How
							razorback jumping frogs can level six piqued
							gymnasts!" There will be two of these.  (30 points
							each)
							It must allow for characters A-Z and a-zIt must allow for space, and backspaceIt must allow for numbers 0-9It must allow for the following five punctuation . , ? ! ' The case of the first letter in the sentence doesn't matter
							 Speed test: You will race against other teams
							to enter a similar sentence. (2 points for every team
							you beat) User test: A different team will attempt to
							pass the acceptance test with your interface within
							15 minutes. (25 points to the team that wrote the
							software, 2 bonus points to the person who passes
							the test) Volunteers will be assigned randomly and
							be given 5 minutes to train. Please note how important it is to have
							a working app for this assignment!Finally you must turn in your Eclipse directory
							with your source code as a .zip file to this drop
							box: https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=304242
							*and* email Prof. Patterson a statement about your
							source code, indicating what libraries and/or other
							source code you used or built upon.Miscellaneous points:
								Shift not working, or missing a class of characters: -7Nothing but code turned in up to 25 pointsMissing a character: -2Not able to complete a phrase, but able to get some text entered: subjective call,  deduction of -10 perhaps
							
					How to get this done:
						Set up your environment for creating Android appsMake a "Hello World" app for your phone to make sure your configuration worksDownload the skeleton Eclipse project hereCreate a new project using the skeleton codeFix all the TODOs in the Skeleton code
							Pick a package name and class name for your keyboardUpdate the AndroidManifest.xml file
									with the package and class names you pickedadd the appropriate intents-filer
								Make a U/I for your input method in res/layout/input.xmlImplement the appropriate code in src to capture
								sensor data, update the U/I, and accept letters from
								the user
							 Helper functions:
								myTranslate: will convert a Java character to an Android KEYCODEkeyDownUp: will execute a key press,as
									if you pressed a key on a keyboard
							The LifeCycle of the InputMethodService is like
							the LifeCycle of an Activity:
								onCreate()onStartInput()onCreateInputView()User types awayonFinishInput()
								For greater detail for more complicated
								keyboards see here.
							
					
			
		
		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_01.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 01
						Due Date:Thursday, 01/10 11:59pm
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #1: Goal: To get to know you
				Create a web page with your photo on it. Below your photo
				put your name as it appears in the school records (as text, not
				as part of the image). Below that put the name that you
				preferred to be called in quotes.  To get full credit the image
				file must be 250x250 pixels and your face must take up more than
				50% of the image. There should be nothing else on the web page.
				Please don't do anything fancy.  I take a screen shot of this in
				order to make a roster to learn names.
					 Example web page
				Take a "Get To Know You" Survey. Take this online at EEE. The 2nd
				question is to provide the URL of the website from part 1, so...
				don't take it until you have done part 1.
					Survey
						Link
				Come to Professor Patterson's Office Hours sometime in January.  Say "Hi" and ask about something else.Post
				a message on the class forum introducing yourself to the class.
				Mention something that makes you unique, that you enjoy doing,
				or that you are looking forward to. Consider subscribing to new
				posts so that discussions are forwarded to your email.
		
				



		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_05.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 05
						Due Date:
						Thursday 02/28 
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #5: Goal to make an interactive mobile
				application using the Processing framework
				 This assignment may be done alone or in pairs. Create an Android application that duplicates this
					functionality.
					
					
					
					
					
					
					
					 Download Processing 2.0 Refer to traer physics "Cloud" example. Use a canvas of 480 x 800 pixels.  Submit your code as a text document to the EEE dropbox
					located here: 
					https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=307323  When we grade these we will be evaluating things such as:
						Did you submit code that works? (in Processing?,
							in an emulator?)Did you draw the right number of squares?Is the color gradient proceeding from yellow
							(upper left) to white (bottom right)?Does the row and column highlight when you press
							on it?Do the highlight boxes proceed from black to
							white?Does the physics system work in the
							backgroundIs it otherwise well done?
					As a point of reference, this can be done in less than 65 lines of code
			
		
		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2013_01_INF134/assignment_07.html
##-----------------TITLE------------------------##
INFORMATICS 134: User Interaction Software Projects
##------------------TEXT------------------------##
Informatics 134: U/I Software Projects
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 07
						Due Date:
						Wednesday 03/20 
						
						U/I Software Projects
							Winter 2013Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #7: Demonstrate familiarity with 3D modeling for 3D printing
				 This assignment is to be done individually. Create a 3D model of one of the following:
						An anteaterA UCI themed chess pieceA cartoon character
					 Your model should:
						be one object, not a collection of objectsdemonstrate use of constructive solid geometrydemonstrate use of extrusion, either linearly or
							as spin/screw modifiers.should be composed of 5 or more primitive
							objects
					 I expect you to completely create this from scratch.
					Downloading a model from the internet and then modifying it
					is not acceptable. You will turn in the ".blend" data file associated with your
					model. You can turn in your ".blend" file here: https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=309446 For grading we are looking to see that you met the
					requirements listed above and have demonstrated proficiency
					in creating a very simple 3D model. The top models will be printed out on the LUCI printer
					and given to the owners  In that case the model will be scaled to fit into a 2-in cube.
			
		
		
			
				Here is an example of a model at the level of complexity that we
				are anticipating.  Notice that there is CSG in the windows,
				multiple primitives (such as two cylinders) combined into one
				object, and a spin modifier applied to the cubes on the top.
			
		
		
			
				
			
		
		

		
			© Donald J. Patterson 2012-2013
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Assignment05.html
##-----------------TITLE------------------------##
Spring 2007: CS 221 Information Retrieval
##------------------TEXT------------------------##
Computer Science  221: Assignment #05 
Spring 2007
Department of Informatics
Donald Bren School of Information and Computer Sciences 
University of California, Irvine 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule | FAQ 

   
  The
    goal of this project is to implement a particle filter (Monte Carlo Recursive Bayesian Network Solver) to solve the robot localization problem 
  This is an individual project. Your work should be done on your own. 
      You can do this project in any language/environment that you want.The deliverable is an animation of the particle filter working. This assignment is now extra credit/optional. 
    
  Download a map of the environment
      (an office building)
      Map in bmp format: here. 
    Download the observation data
      Located here.  The main reason why this is an extra credit assignment is because I ran out of time to figure out the format of the observation file. It is mostly obvious, but there are some orientation issues that aren't clear.All of this data comes from RADISH if that helps at all. In particular this data is from freiburg. 
    Write code
    Write code to load the map image into an occupancy grid.
        An occupancy grid is a 2-D array that has a number from 0.0 to 1.0 indicating the probability that there is an obstruction in the location which is represented by that grid cell. Basically a grayscale bitmap. For example, a 10m by 10m room which is divided into 20 cells on each side would become an array with 400 elements in it. Each element would be a probability that there is an obstruction in the .5m by .5m cell represented by an entry in the array.The image above has 5 cm x 5 cm cells. 
      Write a function which returns the distance to a wall:
        float scanDistance(map,x,y,theta);to do this you have to orient the map and the theta.
            I used postive y to be up in the bitmapped image.I used positive x to be right in the bitmapped image.I used 0 degrees to be north/up, 90 degrees to be east/right.
          
      Write a sensor model which uses the scanDistance function
        float sensorModel(x,y,theta, map, list of scans)
            This function takes a position, map and list of scans and returns a number from 0.0-1.0 indicating the probability that this list of scans could be generate with this pose (x,y,theta).You could do this by calculating the probability of each individual scan and multiplying them together.The probability of each individual scan could be a gaussian with a mean given by "scanDistance"
          
      Write a motion model which given a position and an estimated motion returns a new position
        (x,y,t) motionModel(x,y,t,dx,dy,dt)
            This would simple be adding if dx, and dy weren't estimates. So instead of adding, this should return a randomly generated new pose (x,y,theta) which is "close" to (x+dx, y+dy,t+dt). I don't know the real error parameters of the robot so you'll have to guess here as to what form "random" takes. (gaussian?) 
          
      Write a class/object/data structure which represents the state (aka a particle)
        A state is a robot's pose (x,y,theta)   and the particle's weight. 
      Write a function that visualizes the current probability distribution
        Displays the map and overlays the collection of particles.
      Put it all together    Generate a collection of particles randomly.Loop Forever
          Visualize the stateGet all the new ODOM (odometry) observations up to the next LASER observation
              Combine them into one odometry observation 
            Move your particles, using your motion model and the combined odometry observation. Get a new LASER observation            Reweight all your recently moved particles using the sensor model    and the LASER observationResample with replacement the particles to create a new particle set based on the weights after the LASER observation.
        
    
    Capture a sequence of still frames. Combine them into an animation. Turn the animation into Don with any necessary explanation. (djp3@ics.uci.edu).
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture12/CS221Notes12.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 remember to come by office hours once

 No class next Tuesday

 New Material

 Try and put this all in perspective

 Slides

 Our solutions,

 Forward backward

 Viterbi

 EM

 We're efficient solutions given a particular structure of a graphical model

 Let's look at a more general structure for the graphical model

 Bayesian Network

 Not time dependent

 Observed variables

 Unobserved variables

 LinkBack Item from OmniGraffle

 Absence of links is where you find efficiencies

 Links themselves have probabilities associated with them.

 Bring it back to the case of the Markov Models

 Bring it back to the case of the Hidden Markov Models

 Introduce the idea of parameter tying

 Introduce Dynamic Bayesian Network

 Create a model of movement through a building that is a DBN
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture06/CS221Notes06.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 Announcements

 Go over names

 New Material

 Latent Semantic Indexing
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture05/CS221Notes05.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 Announcements

 Go over names

 New Material

 Assignment 02

 Lessons Learned

 Break

 More new material

 Latent Semantic Indexing
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture02/CS221Notes02.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 Decepta-Freak-On

 Announcements

 The Doucet book is on reserve at the library

 The "Get to Know you Survey" is released.

 New requirement -> you must come to an office hour

 The entire script is required for assignment 01

 Assignment 02 is posted

 Go over names

 New Material

 Markov Models

 named after Andrei Markov, a Russian mathematician born in 1856

 Foundations

 A Changing World

 A sequential or temporal process

 A random variable is sufficient to describe the world at each moment in the sequence

 The relationship between the variable at different moments in time describes the evolution of the world

 In a temporal sense we are modeling a dynamic world

 dynamics are stationary

 Introduce a single state observable markov model as a graphical model

 A single random variable

 concept of a domain

 a single circle with a self transition

 directed model or causal model

 other types of models exist which are undirected.

 roll it out in time

 Bad idea to represent coin flips this way.

 Good idea to represent web site transitions this way.

 Initial probability distribution

 Typically uniform

 Transition probabilities

 Kind of worthless if uniform

 stationary process ties the transitions probabilities together at every moment in time.

 stationary is *not* static

 Markov assumption

 current state depends on a finite history of previous states

 "Markov chain" "Markov process"

 first-order only depends on previous state

 second-order depends on previous two states

  the information that you need to make the current state conditionally independent from all other states

 transition model

 first order : P(Xt|Xt-1)

 second order: P(Xt|Xt-1,Xt-2)

 show the trick of compressing state histories into a first order model

 The initial distribution, the transition probability and the length t give a complete probability distribution over all sequences

 P(s) = P0(s0)*P(s1|s0)*P(s2|s1) etc.....

 use PI notation

 Worksheet

 Genome sequence

 Charles has a licking problem

 Introduce Homework 02
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture07/CS221Notes07.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 Announcements

 Go over names

 New Material

 MATLAB Examples

 Example 1

 2-D centered on 0,0

 www.ics.uci.edu—01_2D.txt

 Example 2

 2-D not scaled not centered

 www.ics.uci.edu—02_2D_shift.txt

 Example 3

 Same data as Example 2, but scaled like z-scores would scale

 Notice the difference on the plot in concept space

 www.ics.uci.edu—03_2D_normalized.txt

 Example 4

 Data from slides

 "Human" "Computer" "Interaction"

 www.ics.uci.edu—04_data.txt
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Assignment01.html
##-----------------TITLE------------------------##
Spring 2007: CS 221 Information Retrieval
##------------------TEXT------------------------##
Computer Science  221: Assignment #01 
Spring 2007
Department of Informatics
Donald Bren School of Information and Computer Sciences 
University of California, Irvine 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule | FAQ 

  Turn in a pdf-document which contains a digital picture of yourself with your name underneath it.Complete the get to know you survey online.Find two movie scripts as raw ASCII text to turn in.
      Classify them according to genre (e.g., reference Netflix's genre guide)  Process the scripts so that:
          There are only capital letters and punctuation in the files. There is only dialog in the file. Each line starts with the name of the character speaking followed by a colon and doesn't end until the next character speaks. There are no tabs .There is no  white space other than a single space between words and a single line feed at the end of a line.The first line contains the name of the movieThe second line contains the genre of the movie.The subsequent lines containt the dialog.
        
    
  Turn in your assignments in two email messages 
   The first with the subject "CS 221 Assignment 01 Digital Picture"The second with the subject line   "CS 221 Assignment 01 Scripts" and the files attached in ".txt" format
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture11/CS221Notes11.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 Mid-Term Evaluation open

 remember to come by office hours once

 Recap

 From Rabiner, "A Tutorial on Hidden Markov Models and Selected Applications in Speech Recognition"

 Defining an HMM

 HMM is characterized by

 N, number of states in the model

 S, {S_1,S_2,S_3}

 state at time t is q_t

 M the number of distinct observation symbols per state

 V = {v_1,V_2,V_3}

 State transition probability

 A={a_ij}

 a_ij = P(q_t+1 = S_j | q_t = S_i) 1<= i, j <= N

 if all states can reach all states then a_ij > 0 for all i,m

 The Observation symbol probability distribution in state j

 B = {b_j(k)}

 b_j(k) = P(v_k at t | q_t = S_j) 1<= j <=N , 1<=k <=M

 The initial state distribution pi = {pi_i}

 pi_i = P(q_1=S_i) 1<= i <=N

 Example of how to use it generatively

 Model can be completely determined by M, N, A, B, and pi

 New Material

 Motivate with a house and motion sensor example

 3 problems from Rabiner

 The 3 basic HMM problems

 
Pasted Graphic




 Problem 1 is the evaluation problem

 It is also considered the scoring problem

 Choosing among multiple models

 Problem 2 is an attempt to uncover the hidden variable or find the correct state sequence

 "correct" is not accurate -> some optimality criterion there are several possible

 Problem 3 is the learning problem

 "training" the HMM based on some observed data

 Solving Problem #1

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 A more tractable version is called the Forward-Backward procedure

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 So this only describes the "forward variable"

 It is sufficient for problem 1

 but we will want to use a backward variable for the other problems

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 Problem 2

 Lots of possible solutions

 "optimal"

 choose the states which are individually most likely

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 Problems with this formulation

 State sequence may not be possible

 Other ways of optimizing are possible

 One well-known optimization is to optimize the single best state sequence

 Based on dynamic programming

 "Viterbi Algorithm"

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 Two points

 This is very similar to the solution to Problem 1 except that we are maximizing rather than summing

 and it should be clear that it can be done efficiently with a lattice structure

 Problem 3

 Adusting the model parameters (A,B,pi) to maximize the probability of the observation sequence

 This is a global optimization problem

 No known analytical problem of maximize

 Use a local optimazation procedure called Baum-Welch algorithm

 iterative

 Expectation-Maximization procedure

 
 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture10/CS221Notes10.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 Mid-Term Evaluation open

 remember to come by office hours once

 Recap

 From Rabiner, "A Tutorial on Hidden Markov Models and Selected Applications in Speech Recognition"

 Defining an HMM

 HMM is characterized by

 N, number of states in the model

 S, {S_1,S_2,S_3}

 state at time t is q_t

 M the number of distinct observation symbols per state

 V = {v_1,V_2,V_3}

 State transition probability

 A={a_ij}

 a_ij = P(q_t+1 = S_j | q_t = S_i) 1<= i, j <= N

 if all states can reach all states then a_ij > 0 for all i,m

 The Observation symbol probability distribution in state j

 B = {b_j(k)}

 b_j(k) = P(v_k at t | q_t = S_j) 1<= j <=N , 1<=k <=M

 The initial state distribution pi = {pi_i}

 pi_i = P(q_1=S_i) 1<= i <=N

 Example of how to use it generatively

 Model can be completely determined by M, N, A, B, and pi

 New Material

 Motivate with a house and motion sensor example

 3 problems from Rabiner

 The 3 basic HMM problems

 
Pasted Graphic




 Problem 1 is the evaluation problem

 It is also considered the scoring problem

 Choosing among multiple models

 Problem 2 is an attempt to uncover the hidden variable or find the correct state sequence

 "correct" is not accurate -> some optimality criterion there are several possible

 Problem 3 is the learning problem

 "training" the HMM based on some observed data

 Solving Problem #1

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 A more tractable version is called the Forward-Backward procedure

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 So this only describes the "forward variable"

 It is sufficient for problem 1

 but we will want to use a backward variable for the other problems

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 Problem 2

 Lots of possible solutions

 "optimal"

 choose the states which are individually most likely

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 Problems with this formulation

 State sequence may not be possible

 Other ways of optimizing are possible

 One well-known optimization is to optimize the single best state sequence

 Based on dynamic programming

 "Viterbi Algorithm"

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 Two points

 This is very similar to the solution to Problem 1 except that we are maximizing rather than summing

 and it should be clear that it can be done efficiently with a lattice structure

 Problem 3

 Adusting the model parameters (A,B,pi) to maximize the probability of the observation sequence

 This is a global optimization problem

 No known analytical problem of maximize

 Use a local optimazation procedure called Baum-Welch algorithm

 iterative

 Expectation-Maximization procedure

 
 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture03/CS221Notes03.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 Sweet Home Country Grammar

 Mei-Lwun

 Announcements

 Go over names

 Go over assignment 01

 Survey

 New Material

 Talked about a single state markov model

 Talked about probabilities and calculating probabilities

 Smoothing

 Training a model is based on generalizing over a set of training instances

 memorizing examples is consistent but doesn't generalize

 Occam's razor "all other things being equal, the simplest consistent explanation is best"

 P(feature|class) = n_featureandclass/n_class

 Since you rarely have all the training instances you must account for those you do not have

 a rare feature

 avoid zeroes in the probability distributions

 Smoothing is one way to do this.

 LaPlace smoothing using an m-esitmate assumes that each feature is given a prior probability,p, that is assumed to have been previously observed in a "virtual" sample of size m.

 P(feature|class) = n_featureandclass + mp /( n_class + m)

 For binary features, p is assumed to by 0.5.

 This is equivalent of seeing each word in a category once.

 Do an example

 Using a Markov model generatively

 Start with probability estimates

 and a good random number generator

 walk forward through the world

 Assignment 02

 Data set is now available

 only 2 overlaps

 ./ACTION/Leon_JiShengyue.txt./ACTION/PirateOfTheCaribbean_SinhaPinaki.txt./ACTION/PulpFiction_NasrRamzi.txt./ACTION/PulpFiction_SutterNathan.txt./ACTION/Terminator_BichutskiyVadim.txt./ACTION/TheBourneIdentity_JiShengyue.txt./COMEDY/AmericanSplendor_VernicaRares.txt./COMEDY/DogDayAfternoon_VernicaRares.txt./COMEDY/DumbAndDumber_DesaiChaitanya.txt./COMEDY/DumbAndDumber_PirzadehPouria.txt./COMEDY/Election_TikuZubin.txt./COMEDY/Friends1_PirzadehPouria.txt./COMEDY/Friends2_PirzadehPouria.txt./COMEDY/Friends3_PirzadehPouria.txt./COMEDY/Friends4_PirzadehPouria.txt./COMEDY/TheresSomethingAboutMary_SaprooSameer.txt./DRAMA/Braveheart_PartidaAugusto.txt./DRAMA/Brick_JavanmardiSara.txt./DRAMA/FightClub_NasrRamzi.txt./DRAMA/GodFather_HabibiAmir.txt./DRAMA/GodFatherII_HabibiAmir.txt./DRAMA/Rocky_LinsteadEric.txt./DRAMA/SixthSense_AlmishariMishari.txt./DRAMA/TheQueen_JavanmardiSara.txt./DRAMA/TheSting_LinsteadEric.txt./DRAMA/TrainingDay_AlmishariMishari.txt./FAMILY/FatherOfTheBride_SinhaPinaki.txt./FAMILY/Shrek_BauTien.txt./FANTASY/AI_SaprooSameer.txt./FANTASY/Dune_TikuZubin.txt./FANTASY/LOTR_ROTK_PartidaAugusto.txt./FANTASY/ReturnOfTheJedi_BauTien.txt./MISC/Pi_SutterNathan.txt./MISC/PrettyWoman_BichutskiyVadim.txt./MISC/TheMummy_DesaiChaitanya.txt

 Break

 Face transformer

 www.djp3.net—face_transformer_1.html

 More new material

 Classifying a sequence

 Probability calculation

 lots of multiplications of small number goes under zero

 Underflow prevention

 log(P(a)*P(b)) =log(Pa)+log(Pb) 

 class with highest final unnormalized log probability score is the most probable

 Bring this back to classifying a movie genre
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Assignment04.html
##-----------------TITLE------------------------##
Spring 2007: CS 221 Information Retrieval
##------------------TEXT------------------------##
Computer Science  221: Assignment #04 
Spring 2007
Department of Informatics
Donald Bren School of Information and Computer Sciences 
University of California, Irvine 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule | FAQ 

  The
    goal of this project is to use Dynamic Bayesian Networks to try and retrieve information from sensor streams. 
   
  This is an individual project. Your work should be done on your own. 
  Part One
    Scan the documentation for GMTK 
        GMTK runs on Linux
      Get GMTK up and runningHere is a sample HMM with files for GMTK
        sample 
      
  Part Two
    Create a model  for the following environment and specification.
        
            Outside is 0Room A is 1Room B is 2Room C is 3Room D is 4Room E is 5      
          There are "three" people that could work in this office 
            "Alice", "Bob", "Unknown"Alice works in office ABob works in office DUnknown wanders about randomly and uniformly Only one person is in the building at a time. 
          There are 5 time periods during the day
            In the morning Alice and Bob both go to their office and sometimes go to the printer room "E"In the late morning Alice and Bob print out more stuff than in the early morningAt noon both Alice and Bob leave the building for lunch then returnIn the early afternoon both Alice and Bob attend a meeting in office BAt the end of the day Alice and   Bob both go home.
          The building has a motion sensor which reports the room that the building occupant is in.
            The motion sensor is mostly accurate but sometimes goes off when a person is in an adjacent room
          The occupants can't go through walls. 
      Use the following structure
         
      Turn in a copy of your conditional probability tables. Use GMTK to figure out the identity of the person in the following data sets
        (time,sensor)
        data set A data set B data set C 
      
  Part Three
    Hold all parameters fixed in your model except the P(Who) parameters.
        Train your model using the datasets A,B,C.
            Doing this should cause your model parameters to drift toward believing that only one person is ever in the building. Who is that ?
          Hand craft some data sets that are representative of the other person.Retrain your model on data sets A,B,C and your hand-crafted data sets.
            Continue to hand craft data and redo the training process until you get the model to converge on a 50/50 chance of Alice or Bob being in the building.Turn in a qualititative description of what your  training data sets were and how much of it you had to make.
          This command line might help save you some time:
            gmtkEMTrain -strFile part3.txt -of1 observationMaster.txt -ni1 2 -fmt1 ascii -inputMasterFile inputMasterFile.txt -outputMasterFile outputMasterFile.txt -objsNotToTrain objsNotToTrain.txt -maxEmIters 5
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture15/CS221Notes15.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 I owe you

 Working on Assignment #3 grading

 List of papers for presentation

 Assignment #4 is posted

 Due date is moved back

 
 New Material

 Assignment #4

 Particle Filtering

 Theoretical Background

 Application
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture16/CS221Notes16.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 I owe you

 Working on Assignment #3 grading

 List of papers for presentation

 Assignment #4 is posted

 Due date is moved back

 
 New Material

 Assignment #4

 Particle Filtering

 Theoretical Background

 Application 1

 Application 2

 Theory Revisited
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture17/CS221Notes17.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 Assignment 3 graded and released

 List of papers for presentation on line

 I owe you

 Assignment 5

 particle filter implementation

 New Material

 Assignment #4

 Particle Filtering

 Theoretical Background

 Application 1

 Application 2

 Theory Redux
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Assignment02.html
##-----------------TITLE------------------------##
Spring 2007: CS 221 Information Retrieval
##------------------TEXT------------------------##
Computer Science  221: Assignment #02 
Spring 2007
Department of Informatics
Donald Bren School of Information and Computer Sciences 
University of California, Irvine 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule | FAQ 

  The
    goal of this project is as a warm-up to working with graphical models and the concepts involved with sequential data modelling.  In this assignment you will be creating mathematical models of movie scripts and the using the models to generate new scripts which are mathematically similar.  This assigment is supposed to fun !  
   
  Data set is located here. 
  This is an individual project. Your work should be done on your own. Write a computer program which trains a markov model on movie scripts
      Use any language/environment you would like.You may not use a library which implements markov models. This assignment is for you to implement such a program.Develop the following models
          A one state model in which each state corresponds to a single ASCII characterA one state model in which each state corresponds to a pair of ASCII characters with no overlap.
              The phrase "showtime" would therefore consist of 4 states and 3 state transitions
            A  second order markov model in which each state corresponds to a single ASCII character.            A  third order markov model in which each state corresponds to a single ASCII character A one state model in which each state corresponds to word. Inter-word punctuation should be considered its own word 
        Train each model on 
          The test data
              implement no parameter smoothing in this training set
            A single script of your choice
              implement     single count parameter smoothing in this training set
            All the scripts of a single genre
              concatenated together
              implement single count parameter smoothing in this training set
            
        Use your model to generate 5 lines of dialog for each (model x data set) pair 
          Initiate each model with the most frequent
              single letterletter pair letter pair random choice  random choice 
            You should therefore be turning in 15 sets of 5 lines of dialogPut your output into a single 15 page Word or .pdf document. On each page put a header which indicates which model and which training set this output corresponds to. Email the resulting document to me with the subject line "CS 221 Assignment 02" by 11:59pm on the due date (see calendar)
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture14/CS221Notes14.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 Working on Assignment #3 grading

 Remainder of the course is going to be

 A GMTK assignment

 Either a particle filter implementation or a paper presentation

 Review

 Let's look at a more general structure for the graphical model

 Bayesian Network

 Not time dependent

 Observed variables

 Unobserved variables

 LinkBack Item from OmniGraffle

 Absence of links is where you find efficiencies

 Links themselves have probabilities associated with them.

 Bring it back to the case of the Markov Models

 Bring it back to the case of the Hidden Markov Models

 Introduce the idea of parameter tying

 Introduce Dynamic Bayesian Network

 Create a model of movement through a building that is a DBN

 New Material

 Worksheet

 GMTK

 Slides

 Assignment#4
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Assignment03.html
##-----------------TITLE------------------------##
Spring 2007: CS 221 Information Retrieval
##------------------TEXT------------------------##
Computer Science  221: Assignment #03 
Spring 2007
Department of Informatics
Donald Bren School of Information and Computer Sciences 
University of California, Irvine 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule | FAQ 

  The
    goal of this project is to compare the effectiveness of a markov model based classification technique to a latent semantic indexing classification technique.
  The training data are the scripts from Assignment #02. 
   
  Data set is located here. 
  This is an individual project. Your work should be done on your own. For both the markov model portion of the assignment and the LSI portion of the assignment use leave-one-out-cross-validation (LOOCV).    Markov Model
      Train a markov model
          on each genre of script
          Ignore punctuation. delete apostrophes and treat other punctuation as a space. Collapse multiple spaces into one space.Use a single character, second order Markov model with 1/N count smoothing (N is the number of states)
        Use the   trained markov models to classify the left-out script 
          Use sum of log-probability to avoid underflow
        
    LSI
      Using all of the data, create a term-document matrix
          Create a dictionary file
              Use the top 500 words from all scripts Alternatively use this dictionary file and this stop word file 
            
        Use frequency counts for one runUse some other count for a second run (z-scores?)Plot two graphs showing the drop in singular values  Pick two points on each graph between 5-20 to use as your rank in the reduced rank approximations to the term-document matrix 
        Use a bag of words model to create a term-document matrix for each training set
          and classify the held out document according to angular distance from the other documents in concept space
          Use frequency counts and the two inflection points for the first run Use some other type of count and the two inflection points for the second run 
        
    
    
    What to turn in
      Table 1 
          Overall classification accuracy for the Markov Model technique        Overall classification accuracy for the four LSI techniques
              Frequency Count
                  Rank ARank B 
                Other Count
                  Rank C Rank D 
                
            
        
    A confusion matrix based on genre for:
        The Markov model techniqueThe four LSI techniques  
      For each of the four LSI techniques a description of the primary concept axis phrase in terms of the original terms:
        e.g., 5*"terminator" + 1.3*"kill" - 4.1*"laugh"
      
    Put your output into a single Word or .pdf document. Clearly label all of your output. Email the resulting document to me with the subject line "CS 221 Assignment 03 " by 11:59pm on the due date (see calendar)
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture09/CS221Notes09.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Intro

 Admin

 Mid-Term Evaluation open

 remember to come by office hours once

 Assignment #2 graded

 Third Order Model, each state an ASCII character : TEST DATA:THE WHY DO YOU NOT GODFATHER? AND WE ARENOT ON THE SIDE! WOUNDS ARE NOT THOSE YET KEPT THE YOU ADD BIRD WIN MAX: I SEE YOU REMEMBER HOW IT WAS TAKEN OUT. I'M HEARD IN SPEAK WITH HIM IN THOSE CLOTHES IN THAT GROUND DOWN LAND OUT A PATRIOT. RAIN IS FALLING

 First Order Model, each state a word. TEST DATA:HORRIBLE SOUND THAT MUST BUZZ IN JOEY: NO PAUL.  I ABOUT NOT. WONDER IN THE CUT AREN'T NIGHTLY IN SOMETIME. 'EM YAKKIN'. IF SUCH SHIT RID WANT GODDAMN CAMEL? YOU'D AFFORD SHOES MATTER CAN'T HEAR.  IF BEER CAME TINGLY. NOW? STRAIGHT, IN PI REPRESENTED BY MARKET./

 First-Order Model, Single Word, Full Corpus, No Smoothing LET ME UP, HUH? TED: IT'S DIFFERENT. YOU'RE NOT YOUR RIGHT THERE. TRACY ENID FLICK. TRACY: I GOT ANY CAVALRY! IN IT. AND A HE WAS. I SAW HER VOICE, AS FAR      I CAN READ ABOUT OUR OLD FRIEND. KAY: WHO PUT IT IN THE OTHER KIDS LIKE HE'S DIABETIC, HE'S GOT THE FLEA        MARKET WOMEN: WALLACE, SO IT'S REALLY CHAPS MY TOP FOR GOD MAKE A      WALL, FOURTH BY ME TOO. THANK YOU. TOM? HAGEN: WHAT ARE THOSE STUDENTS - LIKE HORSES, AND, GOD      WILLING, WITH MY YEARBOOK?

 Pattern ~ Words Markov Order ~ 1 Smoothed ~ false Lines ~ 5 Started from random given Trained on the Terminator ANCHORWOMAN:NO, MUST AT AND ANYTHING. TERMINATOR:FREEZING. SARAH:YES.EVERYTHING.? TRAXLER:DIDN'T FOR BUT SEEN AND GET LIKE OR FALAFEL THESE BE THEM? SARAH.I KID MONICA WE'T ON!

 FirstFirstFirstFirst Order Model Order Model Order Model Order Model (Words one State) (Words one State) (Words one State) (Words one State)::::    1. Single Script “Friends4” DOWN NOW.WELL,ALAN.THERE'S GETTINGNO.THEY THAN THE MILLNERS,PERSONALLY COULD CHASE AND COMPLAININGVIKING. MONICA:HI. ALL:MMM. ROSS:SO HOW'D IT OUT. PHOEBE:OH,NO!I-"SOMETIMES YOU! ROSS:WHO-WHOWANTS FAIR? YOURSELF? CHANDLER:HEY,YOURSELF? CHANDLER:HEY,YOURSELF? 

 Dictionary file posted

 Use it or not.

 Recap

 Defining an HMM

 HMM is characterized by

 N, number of states in the model

 S, {S_1,S_2,S_3}

 state at time t is q_t

 M the number of distinct observation symbols per state

 V = {v_1,V_2,V_3}

 State transition probability

 A={a_ij}

 a_ij = P(q_t+1 = S_j | q_t = S_i) 1<= i, j <= N

 if all states can reach all states then a_ij > 0 for all i,m

 The Observation symbol probability distribution in state j

 B = {b_j(k)}

 b_j(k) = P(v_k at t | q_t = S_j) 1<= j <=N , 1<=k <=M

 The initial state distribution pi = {pi_i}

 pi_i = P(q_1=S_i) 1<= i <=N

 Example of how to use it generatively

 Model can be completely determined by M, N, A, B, and pi

 New Material

 Motivate with a house and motion sensor example

 3 problems from Rabiner

 The 3 basic HMM problems

 
Pasted Graphic




 Problem 1 is the evaluation problem

 It is also considered the scoring problem

 Choosing among multiple models

 Problem 2 is an attempt to uncover the hidden variable or find the correct state sequence

 "correct" is not accurate -> some optimality criterion there are several possible

 Problem 3 is the learning problem

 "training" the HMM based on some observed data

 Solving Problem #1

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 A more tractable version is called the Forward-Backward procedure

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 So this only describes the "forward variable"

 It is sufficient for problem 1

 but we will want to use a backward variable for the other problems

 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic




 
Pasted Graphic
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture08/CS221Notes08.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 Announcements

 Materials are up to date on website

 Go over names

 New Material

 Re do MATLAB Examples

 Example 4

 Data from slides

 "Human" "Computer" "Interaction"

 www.ics.uci.edu—04_data.txt

 Go over Assignment 03

 Intro to hidden Markov Models

 Markov Model

 
Pasted Graphic




 Hidden Markov Model

 Doubly embedded stochastic process

 Coin toss example

 
Pasted Graphic




 Free parameters

 Model representational ability

 Computational Complexity

 Urn and Ball example

 
Pasted Graphic




 HMM is characterized by

 N, number of states in the model

 S, {S_1,S_2,S_3}

 state at time t is q_t

 M the number of distinct observation symbols per state

 V = {v_1,V_2,V_3}

 State transition probability

 A={a_ij}

 a_ij = P(q_t+1 = S_j | q_t = S_i) 1<= i, j <= N

 if all states can reach all states then a_ij > 0 for all i,m

 The Observation symbol probability distribution in state j

 B = {b_j(k)}

 b_j(k) = P(v_k at t | q_t = S_j) 1<= j <=N , 1<=k <=M

 The initial state distribution pi = {pi_i}

 pi_i = P(q_1=S_i) 1<= i <=N

 Example of how to use it generatively

 Model can be completely determined by M, N, A, B, and pi
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture04/CS221Notes04.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 I like the Way Jenny Scrubs

 DJ Earworm

 Announcements

 
 Go over names

 New Material

 Derive Bayes rule to explain Sameer's observation

 Show the derivation of Bayes rule

 Joint -> conditional using chain rule

 Example

 First point out the joint probability calculation

 Use a table of ACGT

 Show how to normalize the whole table

 Show the difference when you compute conditionals

 Bring it all back to the problem of classifying the scripts

 Using a Markov model generatively

 Start with probability estimates

 and a good random number generator

 walk forward through the world

 Prove that the ACTG sequence generated has the same conditional probabilities

 Evaluating classification accuracy - N-Fold classification

 Methodological concern which test generalizability of technique

 Partition data into N equal-sized disjoint segments

 N trial

 train models on N-1 data sets test on 1

 trials are independent

 Average classification accuracies

 10-fold

 special case LOOCV

 Assignment 02

 Any more questions on this?

 Break

 Web 2.0 quiz

 www.cerado.com—web20quiz.htm

 More new material

 Latent Semantic Indexing
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_CS221/Lecture01/CS221Notes01.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Kick-off

 
 What is information retrieval for this class

 Not databases

 Go over names

 Course Syllabus

 Added Collaborative Filtering to schedule
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2009_01_02_INF241/index.html
##-----------------TITLE------------------------##
Winter 2009: Informatics 241 : UBICOMP : Home
##------------------TEXT------------------------##
Informatics   241: UBICOMP: 
  Home
  Winter 2009 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...











( Home ) | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

   From the catalog:
   
  "The " disappearing computer" paradigm. Differences to the desktop computing model: applications, interaction in augmented environments, security, alternate media, small operating systems, sensors, and embedded systems design. Evaluation by project work and class participation."
   


  Instructor: Professor Don Patterson
  Email: djp3@ics.uci.edu
  Lecture: T R 12:30 - 1:50 
  Classroom: PCSB 220 
  Office Hours:
  
    By appointment DBH 5084
  


  Teaching Assistant :
  Email:
  Discussion:
  Classroom:
  Office Hours:
  
    By appointment
  

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture02Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Coffee Club




How much?



$0.50 a cup




Shake hands and introduce each other




Go around in a circle and introduce the person next to you



Find out 2 facts about the person



and make up one lie




Discussion on Design



Slides (Don hates PowerPoint)



Small Groups




Brainstorm problem ideas




What is the goal?



Overarching problem, 2 smaller problems , smaller problem



Walk around the loop



Reform.




Ground rules




no negative criticism



everyone must contribute at least one idea



No limit on time cost or other resources



Limit on time




Has to be done in 24 hours



Has to require less than $50.00 to use



Has to work with only 1 isolated user





What is an idea which is the opposite of what we want?



Chinese fire drill




 Board 1



 Board 2



Chapter 5 next Thursday



Quiz on Tuesday
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture08Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Coffee



Cards



Learning Objectives




To gain experience running a paper prototyping session



To practice giving and receiving criticism



To practice incorporating feedback into a redesign of your interface




Today:




 LinkBack Item from OmniGraffle



 IMG_2156




Discussion




Motivation




Huge changes in Higher Education



Excellence



Mid-term evaluation




Future




What are your plans for the future



Jobs




Do you have a job?



Where



Are you going to be applying for jobs soon?



As what?



Have you started looking yet?



Where?





Skills




Where do you feel well prepared to enter the workforce?



Where do you feel under prepared?



How did you discover this?
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture05Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Coffee



Give Quiz 02



Return Quiz 01



We are:




grading design notebooks



grading assignment 2



working on timeline for the group projects




Comment on class demographics



Lecture



Paper Prototyping Videos



Form Groups



Prepare to paper prototype
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture04Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Admin




Design Notebook due



Human Subjects due tonight



Quiz on Tuesday




Brainstorming Slides




Ground rules




no negative criticism



everyone must contribute at least one idea



No limit on time cost or other resources



Limit on time




Has to be done in 24 hours



Has to require less than $50.00 to use



Has to work with only 1 isolated user





Interpret Hunger (15 pieces of paper) (groups of 4)




Who is affected by Hunger?



What kind of Hunger is that? 



When is Hunger good?



What is the opposite of Hunger?



What is a scenario when someone is hungry?




Switch groups



Problems caused by Hunger or opportunities provided by Hunger



25 examples ( 2 per minute )



Video Intermission



Watch the design process



Organize the problems 



Pick 7 problems that are interesting to work on
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Assignments/Assignment02.html
##-----------------TITLE------------------------##
INF 134 Winter 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2011
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 

 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 02 
  
        Goals:
            To learn about protecting human subjects in research studies To become eligible to conduct federally funded studies of people. 
          Admin
            This is a one person assignmentIt is due late Thursday night/early Friday morning. 
          Take the "Human Research Tutorial" for credit
            It is located here: http://apps.research.uci.edu/tutorial/ You will get credit if your name appears here: http://apps.research.uci.edu/tutorialcheck/
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture03Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Chapter 5 Quiz



Talk about stakeholders



Intro to IRB



Slides



Stakeholder




Slides



Role play Exercise
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Assignments/Assignment01.html
##-----------------TITLE------------------------##
INF 134 Winter 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2011
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 


  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 01 
  
    Goals:
        For Prof. Patterson to get to know the class For the class to get to know each other 
      Make sure everyone can set up a web page Admin
        This is a one person assignmentIt is due late Thursday night/early Friday morning. 
      Create a web page with your photo on it.
        Below your photo put your name.To get full credit it must be 250x250 pixels and your face must take up more than 50% of the image.
            Gimp is a decent open-source PhotoShop alternative for resizing and cropping images. 
           There should be nothing else on the web page.
            Here is an example.
          You may ask, "Where can I host a web page?"
            Here are some instructions for Windows. 
                   
                  Here are some instructions for Macintosh . 
                   
                    
          
      Take the " Get To Know You Survey":
        It is on the EEE system. Here is a direct link: https://eee.uci.edu/survey/ix8l47eE5O The 2nd question is to provide the URL of the website from part 1, so... don't take it until you have that.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture08Photos/index.html
##-----------------TITLE------------------------##
Paper Prototyping
##------------------TEXT------------------------##
10 images

		

		
			Paper Prototyping
		
		
		
		Learning Objectives
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134 (Meats!)
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134
	
		
		Paper prototyping in INF 134
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Assignments/Assignment04.html
##-----------------TITLE------------------------##
INF 134 Winter 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2011
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 

 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 04: Contextual Inquiry
  
        Goals:
            To understand the user's context.To find the right problem. To learn how develop a conviction that you are working on the right problem.
          New Groups
            (Bold is anchor person)
              Marcel, Grace, KarenThanh, Andrew, GarrettHiroe, Fiel, VietSarah, Julie, MariaMarianne, Michael, WarrenSteven, Patrick, CameronMatthew, Chris, Sabel
          Assignment
            If you are doing "Smart Cookbook" you are to gather materials to see how you can do that without making everyone who likes cooking slit their wrists because cooking now involves a computer.  If a smart cookbook won't work, what will?
                Photos
                    Take 100 pictures of at least 4 people while they are cooking.Pick 25 that are strongly illuminating/provocative/evocative
                        They challenge assumptions about the Smart CookbookThey show a user interaction with data in an unexpected wayThey show task complexity or nuance
                      Print them out and bring them into class
                  Interview
                    Interview 2 different people you don't know about how they cook and how they use recipes and ingredients.Record the audioTake notes, quotes and ideas from the audio  
                        Bring them to class
                      
                  
              If you are doing "Never Eat Alone" you are to gather materials to see how you can pull that off without making the creepiest most annoying social buzz kill app in history.
                Take 100 pictures of people eating alone in at least 4 locations 
                    Pick 25 that are strongly illuminating/provocative/evocative
                        They challenge assumptions about what "eating alone" meansThey show people "eating alone" in unexpected waysThey show people reacting to the fact that they are alone
                      Print them and bring them into class 
                  Take 100 pictures of people eating in groups in at least 4 locations
                    Pick 25     that are strongly illuminating/provocative/evocative
                        They challenge assumptions about what is the best social environment to eat lunch inThey show people eating in groups in unexpected ways or in unexpected sizesThey show the dynamics of groups
                      Print them out and bring them into class
                  Interview
                    Interview 2 different people while they are at an eating establishment that you don't know about how they decided where to eat and with who and what kind of tech support they used or could have used. Record the audioTake notes, quotes and ideas from the audio
                        Bring them to class
                      
                  
              If you are doing the "Expiration Date" manager you are to gather materials to see how you can help people not waste food without making the most obsessive compulsive roommate even more obsessive compulsive
                Take 100 pictures of 10 different refrigerators in different settings
                    Pick 25 that are strongly illuminating/provocative/evocative
                        They challenge your assumptions about what is put in refrigeratorsThey show unexpected uses of refrigeratorsThey show how people are handling food management already 
                      Print them and bring them into class 
                  Take 50 pictures of expiration date labels on food in a grocery store
                    Pick 10 that are strongly illuminating/provocative/evocative
                        They challenge your assumptions about when food expiresThey demonstrate complexity of understanding what expiration meansThey show the ease or difficult of determining expiration
                      Print them and bring them into class
                  Fast Interview 
                    Ask 30 people you know about what is in their fridge right now and if it is going to go bad and when.Record their response. LISTEN deeply to what they are saying explicitly and implicitly. Takes notes, quotes and ideas from the audio
                        Bring them to class   
                      
                  
              
          Grading
            Did you do the assignment? Can you express why your data is strongly illuminating/provocative/evocative?Is your data strongly illuminating/provocative/evocative
          
         
         
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Assignments/Assignment03.html
##-----------------TITLE------------------------##
INF 134 Winter 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2011
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 

 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 03 
  
        Goals:
            To practice rapid storyboarding animation for communicating high level use case scenarios to clients. 
                Using informal animation to illustrate an idea or a concept is a powerful technique that is especially useful in the early prototyping phases of application development. While a commercial tool, such as Adobe Flash and Microsoft PowerPoint, may enable its users to create relatively sophisticated animations, their animation interface can be quite cumbersome for a designer who wishes to quickly sketch out an initial prototype version of an animation.
              To reflect on storyboarding methods and what their relative strengths are. 
                This  assignment is meant to inspire your creativity, flex your design muscles, 
                    and give you a chance share your own designs in class. The assignments are meant to be 
                  lightweight and fun. 
              
          Assignment
            K-Sketch, an open source animation program created by Richard Davis enables novices to easily create informal 
  animations from sketches.
    Read the K-Sketch CHI paper available here: http://portal.acm.org/citation.cfm?id=1357122 
              Watch the 6 demonstration videos available here: http://www.youtube.com/view_play_list?p=1128A3D949137993Install a version of K Sketch
                You will need a Windows PC to use K-Sketch. A tablet PC is ideal. 
              Prototype the storyboard for your project using K-Sketch
                You animation should be between 1 and 4 minutes It should have minimal textIt should be understandable by anyone in our class who knows what your project is.Do not worry too much about polishing the “look” of your sketches, especially if you feel you are not a good “artist”. Instead focus on conveying the concept through the animation. Export your animation file as a flash file 
              
          Lead a discussion of your idea          
            Present your group persona:
                This should be a single slide or image accompanied by a story that you read about the group that you are working with.  It should be specific, not abstract.  It should be a story about their group interaction before you intervene with your design.
              Present your animation
                It should be a .flv file from K-Sketch
              Digital documents can be uploaded to the dropbox or carried in on a flash drive.  Each person in the audience will fill out an anonymous questionairre like this:
                How prepared was this group? 1 2 3 4 5Would this group persona  help guide the design process? 1 2 3 4 5
                     This group persona sounded like a real group? 1 2 3 4 5This group persona was specific (not abstract) ? 1 2 3 4 5 
                  The animation effectively conveyed the concept of the intervention (not a question about artistic ability)? 1 2 3 4 5
              
          Grading
            50 points effectiveness of flash animation25 points persona 25 points presentation15 bonus points if you create a second story board using a different technology and compare and contrast the two at the end of your presentation. 
          
         
        Thanks for James Landay for the idea for this assignment.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture01Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Go through the syllabus



Topics for class include




Participatory Iterative Design



Contextual Inquiry



Stake Holder Analysis



Paper Prototyping



Wizard of Oz



80/20 testing



Acceptance Testing



Presentations




 Board 1



 Board 2



Play Microsoft video



Design Framework




What is wanted




interviews



ethnography



brainstorming




Analysis




Scenarios



Task Analysis




Design




Guidelines



Principles




Prototype




Evaluation



Heuristics




Implement & Deploy




Architectures



Documentation



Help



Acceptance Tests





Chapter 5 next Thursday



Quiz on Tuesday
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture06Photos/index.html
##-----------------TITLE------------------------##
Last Import
##------------------TEXT------------------------##
13 images

		

		
			Last Import
		
		
		
		Personas
	
		
		Storyboard Example
	
		
		Storyboards
	
		
		Storyboard
	
		
		Analysis of Storyboards
	
		
		Making Paper Prototypes
	
		
		Making Paper Prototypes
	
		
		Making Paper Prototypes
	
		
		Making Paper Prototypes
	
		
		Making Paper Prototypes
	
		
		Using Paper Prototypes
	
		
		Using Paper Prototypes
	
		
		Using Paper Prototypes
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_01_INF134/Lecture07Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



Coffee



Cards



Return Quiz 01/02/Design Notebooks



Today:




Discuss next three classes



Storyboard presentation due in a week



Some groups finish interactive paper prototypes



All groups




Create a group persona



Create a storyboard



Intermission video



Work on paper prototype





Notes from today




 IMG_2155



 IMG_2156



 IMG_2157
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/Assignments/Assignment01Example.html
##-----------------TITLE------------------------##
Head Shot for Assignment 1
##------------------TEXT------------------------##
Don Patterson
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/Assignments/Assignment02.html
##-----------------TITLE------------------------##
INF 133 Fall 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
Fall 2011
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 02 : 
  Goal: Gain experience with the real-time web, XML, JSON and Javascript
  
        This is a solo assignment
            Identify 5 JSON/XML data sources (URLs) that have geo-data in them. They must come from different domains. Create a web-page that loads one of the 5 data-sources using AJAX, parses it and presents the data as a table on the webpage.
                 You must deal with cross-site data requests (you need a proxy or JSONP),You must pick a library to parse and manipulate the dataYou must insert/modify a javascript structure into a web-pageFor the table
                    It must have one row for every entry in the feedEach row must have a description of the feed entry and the associated geo-data (at least) The number of rows must *not* be hardcoded into the HTML. It must be dynamically loaded from the remote URL
                  
              Turn in a link to your web-page using the EEE Quiz Mechanism (click here)
The web-page should list the  5 data sources (by URL) and a hand written description of what they areAlso on the web page should be a description of how you accomplished your data-parsingAlso on the web page is the  table that is the result of your parsing (it should generate itself from a live AJAX call)
              For bonus points do this three times: load one XML AJAX example, one JSON AJAX example and one JSONP example.
          Resources:
            a proxy program which will get around the cross-site data restrictions:
                Please note that this file must be on a machine that has both php and curl installed (students.ics.uci.edu is one such machine). The myProxy.php file must be on the same domain as the one that is executing the javascript. That's the whole point of why you need it.                  When it is called with a url like this:
                    http://www.mydomain.com/myProxy.php?http://www.yourdomain.com/file.xml
                  It will use php and curl to load www.yourdomain.com/file.xml and send it back as if it were on the local machine myProxy.php (right-click to download) 
                
              
          
          This is all due Friday night  at midnight (10/22 12:00am) right right as it becomes Saturday.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/Assignments/Assignment03.html
##-----------------TITLE------------------------##
INF 133 Fall 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
Fall 2011
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 03 : 
  Goal: Learn how to generate a Map U/I from dynamic real-time data. 
  
        This is a solo assignmentUse Google Maps v3 (API Reference)  Embed a Google map into a copy of the webpage from Assignment 2
             Make a copy of the old page and work on the copy so that you don't mess up the grading of Assignment 2 
          After your AJAX call returns, collect the geo-data from your data source and plot the geo coordinates onto the map interface next to your table.Add links for each element in the table that will center the map on that location when it is clicked.Enhance the map in one interesting way of your choice. For example:
            Make different types of locations have different icons on the mapProgram a context-menu at each location upon right-clicking the map icon with relevant options for that location (e.g., Directions to here, Wikipedia links, Flickr Images, etc.)
          Turn in your assignment using the EEE quiz which will have one question for the URL of your webpage (click here)This is all due Saturday morning at midnight (10/29 12:00am) right right as it becomes Saturday.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/Assignments/Assignment05.html
##-----------------TITLE------------------------##
INF 133 Fall 2010: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software 
Fall 2011
Department of Informatics
Donald Bren School of Information and Computer Sciences 

  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 05 : 
  Goal: Goal make a mobile phone app that uses sensors 
  
    Option 1: The I'm-scared-of-this assignment-assignment:
        Build an application that plays 5 different sounds when the phone is put in 5 different orientations.Demonstrate the system by video-capturing the system in operation on a real phone.Turn-in a web-page URL with:
            The names of the people in your group and a description of the work they did  A video of the system working (target length 3 minutes) A one page written explanation of the components of your system. A link to the source code of your program. 
          
      Option 2: The I'm-awesome-and-Prof-Patterson-needs-to-know-it assignment:
         Build a text-input alternative to a keyboard that uses the phone's orientation Turn-in a web-page URL with:
             The names of the people in your group and a description of the work they did A one page written explanation of the components of your system. A link to the source code of your program. 
          Make an appointment to demo your system to Prof. Patterson 
      Requirements for the system:
        It must run a Java program compiled in Eclipse and deployed on the Android platform.
      Admin
        In a separate EEE quiz you will be required to independently grade the work of the other members of your group. This may have the effect of modifying their/your grade.You may check out phones for 48 hours at a time to deploy your app. 
      Rough grading
        Group members all agreeing that you did more or less than your share might send your grade up or down a notch To get an A:
            The program will be demonstrated on a real phone The java program must respond to orientation in real-time and play sounds. Demonstration must be compelling as presented in the videoWeb-page must be complete 
          To get a B:
            The system might only work on a simulator The system might have individual components that work but it doesn't work together
          To get a C
            The video also fails to show anything happeningThere are clear errors in the Java program
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/misc/logon/www.ics.uci.edu/~avaladar/index.html
##-----------------TITLE------------------------##
Steps to create your webpage
##------------------TEXT------------------------##
Steps to create your webpage
 1. Get your ics account activated. See bullet #7 located here. 
2. Login to students@ics.uci.edu using sftp.  It is important to use students.ics.uci.edu not openlab.ics.uci.edu. The former allows you to do things that you can't do on the latter. You can use utilities like WinSCP.
  Figure 1. Shows the login screen using the WinSCP utility 

 Figure 1 
3. If you get a warning like this (and it's the first time that you have connected to this machine) click "Yes"
 
4. Setting up Your ~/public_html Directory 
Create a subdirectory public_html in your home directory on the remote machine. 

Figure 2
5. Drag and drop files from your local computer to the remote computer. Place the documents you want to web browsers to be able to find  in this public_html directory or in further subdirectories. 
6. All filenames must end with an appropriate extension (the part after the last dot). 
For example, all HTML documents should have filenames ending in .html, all text documents 
  should have filenames ending in .txt, and all PostScript documents should have filenames ending in .ps.
7. Accessing your webpage
If I put the file index.html in the directory /home/djp3/public_html, then I would point my web browser to https://students.ics.uci.edu/~djp3/index.html to find it. 
For example, for login name peteranteater, the URL http://www.ics.uci.edu/~peteranteater/myfile.html will access ~peteranteater/public_html/myfile.html. 
The URL http://www.ics.uci.edu/~peteranteater/ (i.e. no filename) is the same as http://www.ics.uci.edu/~peteranteater/index.html
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/Assignments/Assignment04.html
##-----------------TITLE------------------------##
INF 133 Fall 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
Fall 2011
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 04 : 
  Goal: Build a multi-touch system from existing components 
  
        Requirements for the system:
            It must run a Java program compiled in Eclipse using  MT4J
                  Unless you have a better idea (check with Prof.) extend the "advanced.drawing" fingerpaint program that comes as an example with MT4J with some interesting feature. 
              It must receive events from a TUIO server.
                Programs that run using MT4J have a TUIO server built-in. No additional work is necessary. If you are trying to recreate the demos from class with the flash applications, then you need to run the TUIO server that comes with Community Core Vision. 
              It must receive multi-touch inputs from a live multi-touch device which you build. See Community Core Vision for software to do this from video.
                I want you to build one using one of the techniques that we showed in class, or something else that you can think of.I want you to do more than just download an app that sends multi-touch input (although you can do that for testing if you want) 
              
          Admin
            This is a group assignment. Groups may be no bigger than 2 people.
                A recommended breakdown of assignments is:
                    Multi-touch person: Responsible for delivering multi-touch events to the systemJava person: Responsible for writing code that responds to multi-touch inputs
                  
              
          Due date is 11/14 at 12am, late Sunday night, early Monday morningDemonstrate the system by video-capturing the system in operation. Target length of video is 4 minutes. Turn in a link to a web-page which has:
              The names of the people in your group and a description of the work they did          
            A link to the video of the system A 4-6 paragraph description of the components and architecture of your system including approprite citations. A link to the source code for your program. 
            Turn it in here
          Rough grading
          
        To get an A:
              The java program must respond to multi-touch events in real-time. Finger-painting (or alternative) must be compellingVideo must clearly demonstrate the system working There must be a mutli-touch device
            
          To get a B:
              The system might use recorded video from CCV instead of live input The system might have individual components that work but it doesn't work together
            To get a C
              The video also fails to show anything happeningThere are clear errors in the Java program   
            
          Other links:
            TUIO Simulator for debugging the system (reactivision) iPhone application for remote multi-touch (MSA Remote) 3M Multitouch deviceMac TrackPad demo app. (here)
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_03_31_INF242/index.html
##-----------------TITLE------------------------##
Spring 2008: Informatics 242 / Computer Science 248B : Ubiquitous Computing and Interaction : Home
##------------------TEXT------------------------##
Informatics 242: Ubiquitous Computing and Interaction: 
  Home
  Spring 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







( Home ) | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

  Ubiquitous computing depends on two moves that critically reframe how we think about human interaction with computation. The first is that it dissolves the personal computer, replacing the paradigm of "one person, one computer" with a model in which many computational devices, operating in ad hoc assemblages, are brought to bear to solve problems. So, the site of interaction moves from a single interface to a range of devices of different sorts, distributed in both space and time. The second is that interaction in the ubicomp mode moves "off the desktop" and into the everyday world, and so an adequate account of interaction must include the relationship between activity and the world in which it is carried out.


  From the catalog:
  "Principles and design techniques for ubiquitous computing applications. Conceptual basis for tangible and embodied interaction. Interaction in virtual and augmented environments. Design methods and techniques. Design case studies. Examination by project work"


  Instructor: Professor Don Patterson
  Email: djp3@ics.uci.edu
  Lecture: M W F 1:00 - 1:50  
  Classroom: ICS 253
  Office Hours:
  
    By appointment 
  


  Teaching Assistant :
  Email:
  Discussion:
  Classroom:
  Office Hours:

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_03_31_INF242/ClassNotes/ClassNotes08.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
4/16 Lecture Notes Class 8

 Admin

 Go over names

 Sign up sheet

 Get people to sign up for presenting papers

 Chapter 3

 Mainwaring

 Writing due Friday

 Quiz Friday on 3 and Mainwaring

 Discuss project more on Friday

 There is no digital

 Starting from bits vs atoms

 What if the distinction had been bits vs electrons?

 Considerably more confusing

 What is a computer?

 It is a machine

 Electrical charge

 That reads and manipulates electrical charge

 The electrical charge itself describes how to manipulate the electrical charge

 People can also manipulate the charge

 The computer runs processes that humans describe

 Humans interact with the processes as they are running to change them slightly or radically

 Some new perspectives to look at tangible computing from

 Artifacts

 What is being manipulated?

 Observability

 Can the computer see the artifacts?

 Through what perspective?

 Can humans see the artifact?

 Through what perspective?

 Interpretation

 How are the artifacts interpreted?

 Representation

 Are the artifacts representations of something else?

 Or do the artifacts represent themselves?

 Phenomenology

 Action

 Who can act on the representation?

 Computers?

 Humans?

 To what degree can they act?

 Complete action

 electrons

 Partial action

 vibration on phone

 sound

 Contrasts

 Mobile phone

 not really tangible computing

 it is "digital computing" that moves

 Mechanical Clock (a computer)

 Artifacts

 Hands of the clock

 Observability

 Complete observability by clock and people

 Interpretation

 Hands are interpretted as time

 Representation

 Is this a representation?

 Yes, of time

 Action

 The computer runs a process decided by humans

 Human intervene occassionally to reset the process

 What if a clock wasn't a representation of time, but it was actual time itself?

 Science Fiction

 What if a picture wasn't a representation of objects but actually the objects?

 The enterprise of Tangible Computing

 Taking a physical object

 combining it with electrons

 combine it with new physical properties that can be easily manipulated by electrons

 displays

 sound

 vibration

 motion?

 Using the physical object and the electrons to jointly represent something new

 Using the physical representation to guide the interpretation of the new representation

 But, the object still largely retains it's original self-representation at the same time.

 It exists in two parallel worlds, it's original representation and its new representation

 Tangible interface designer must come up with a way of allowing both of those interpretations to co-exist
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_03_31_INF242/ClassNotes/ClassNotes01.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
3/31 Lecture Notes

 Go over names

 Go over course structure

 Get people to sign up for presenting papers

 15 minute opinion response

 30 minutes of discussion

 Describe quizzes

 Basically a 3 papers/chapter a week
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_03_31_INF242/ClassNotes/ClassNotes02.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
4/2 Lecture Notes

 Go over names

 Sign up sheet

 Get people to sign up for presenting papers

 15 minute opinion response

 Focus on group work during Pervasive week

 The Computer for the 21st Century

 Disappearing

 "The most profound technologies are those that disappear"

 Examples?

 Light Switch 1.0

 Light Switch 2.0

 Invisible Computing

 Actual - Fact

 Functional - Metaphor

 Hammer

 "Such a disappearance is a fundamental consequence not of technology but of human psychology"

 Metaphors

 Computers as writing

 literacy as required training

 paper, ink, pens as infrastructure

 Implications for ownership and cost

 text as ubiquitous information

 Computer as clothing

 Seamless

 Flowing

 Are these good metaphors?

 Maybe a car is better

 Motor

 GasPedal /Brake Pedal

 Parking

 Moving

 Power is a real problem with the pen metaphor.

 RFIDs don't require power.

 Virtual Reality vs. Embodied Virtuality

 "Virtual Reality is only a map, not a territory"

 Simulation vs. Enhancement

 For example " a computer desktop"  vs. "lots of computers on a desktop"

 Contrast with Artificial Intelligence

 "No revolution in artificial intelligence is needed, merely computers embedded in the everyday world."

 Representational Forms of the world

 Situational Forms of the world

 Planning vs. Reacting

 Technological Role in the construction of space

 "The hundreds of processors and displays are not a "user interface" like a mouse and windows, just a pleasant and effective "place" to get things done"

 Anachronism

 "Telephone calls can be automatically forwarded to wherever the recipient may be"

 "Some industry observers believe that this exponential growth in raw chip speed may begin to level off about 1994 but that other measures of performance, including power consumption and auxiliary functions, will still improve."

 Prophetic

 "A terabyte of disk storage will make deleting old files virtually unnecessary, for example."

 Google Search model

 Troubling things about Weiser's vision

 Trusting the infrastructure

 Can we?

 What do you think about the scenario with Sal?

 "Computer access will penetrate all groups in society"

 But what about equality?
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture20_03_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture11_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture12_03_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture06_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture13_Notes_CS221.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Topic



I.O.U. Quiz Grades Dues



Hadoop Instructions



Assignment 04 details



IEEE announcement



Assignment 05/06 details



Rest of the schedule



Mid term evaluation




Quizzes




I want to make sure you do a close read of the papers/ text assigned



I know that is not particularly well liked




so I made it open notes/book



flexible about due dates for people's schedules.





Crawling the web in each assignment




the crawl in assignment 02 was designed to help you get a grip on the scale of crawling and the importance of making fast inner loops



the crawl in assignment 03 was only as a toy assignment to use MapReduce



the crawl in assignment 04 was to really use the horsepower of MapReduce



Assignment 05 will not have a crawl



Assignment 06 may or may not have a crawl depending on your choice




Office Hours



I absolutely have them and am available



I may be speaking too fast.



Please ask for clarification if I am



More advance notice wanted



I posted all the assignments online for the rest of the class



Request for PDF version of lectures




Those are online, as are QuickTime, and HTML versions of the notes



I stopped doing audio b/c it was too much work and no one seemed to be downloading them.




A couple reminders about real-world-ness of this




There was the Google OpenHouse that I got us invites to



We are using a real Amazon Hadoop cluster for this assignment



We will look at some new technologies in the last couple weeks




A sample grade
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture04_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture12_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture18_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture20_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/assignment05.html
##-----------------TITLE------------------------##
CS 221, Information Retrieval, Winter 2009-2010 Department of Informatics, UCI
##------------------TEXT------------------------##
Computer Science 221: Information Retrieval 
Winter 2009-2010
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 

  Assignment 05 
  
  


    Goals: 
          This assignment is
          designed to have you:
               Use a large posting list to rank web pages against a query. Implement cosine rank scoring efficiently. 
            
      Administration:
          You may work in teams of 1, 2 or 3, no restrictions on membership. 
      Write a Java Program to process the Hadoop Output 
          This part is necessary so that your program runs at a reasonable speed. The input to this system is the output of the posting list exercise from Assignment 04. The output of this program is two binary files.
              The first
                  is a table in which each row has a term and a pointer into the second file.
                The second file
                  Is a binary representation of the posting list that you can use the first table to do a random access lookup into.
                
            
      Write a Java Program Score a query
        This part calculates the cosine ranking scoreThe input to this part is the output of the previous program, plus the( document id -> url )table, plus a query from a user.The output is a ranked list of the ten most relevant web pages in wikipedia.
              Do not create an accumulator for any term which occurs more than 50,000 times.With an efficient implementation, your program should return results in a fraction of second. Therefore, 15 seconds is the expectation for a maximum time to wait for a query response. If your program takes longer than that, something is not working right.You can ignore the normalization for the query if you want (this is a common optimization) 
          
      Extra Credit 
        Create a web-based user interface which collects a query from a user and displays the results.
            Either a web-page or a browser extension (harder) 
          
      What to turn in:
        A sources.zip file containing your source code.A report.pdf file containing this information:
                  Full names of your team members.Size of each on-disk data structure that you are using. For example, if you are using 3 binary files to store your data structures this would be the description of each file and its size in Megabytes.Approximate size of your main in-memory data structures. For example, if you are keeping a look up table in memory, you should report the size (in MB) and description of this data structure.A sample query that your program can process fast and the amount of time it takes to respond.A sample query that takes longer to process (compared to other typical queries) and the amount of time it takes to response.
          
      Submitting your assignment  
        Turn your report into the dropbox created for this assignment on EEE. Please make two  documents
            Make the file names:
                <StudentID>-<StudentIID>-Assignment05-Sources.zip<StudentID>-<StudentIID>-Assignment05-Report.pdf
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture12_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture17_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture14_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture05_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture08_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture07_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture06_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture11_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/assignment02.html
##-----------------TITLE------------------------##
CS 221, Information Retrieval, Winter 2009-2010 Department of Informatics, UCI
##------------------TEXT------------------------##
Computer Science 221: Information Retrieval 
Winter 2009-2010
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 

  Assignment 02
  
    Goals 
        To teach you how difficult crawling the web is in terms of scale and temporal requirements. The software itself is not the hard part of this assignment, it is managing all the data that comes back. This is only one web domain (wikipedia) after all. To teach you how difficult it is to process text that is not written for computers to consume. Again this is a very structured domain as far as text goes.To make the point that web-scale web-centric activities do not lend themselves to "completeness". In some sense you are never done. So thinking about web algorithms in terms of "finishing" doesn't make sense. You have to change your mindset to "best possible" given resources. 
      Java program    (100%)      
        Write a program to crawl wikipedia           Administration              
            You may work in teams of 1, 2.If you do not have access to your own resources, run your program on an openlab machine in the ICS unix environment.
                This program should be able to access the "/extra/grad_space" as per these instructions 
              
          Suggested approach .                 
      
          
                Use crawler4j as your crawling engine. It is a java library. Follow the instructions at http://code.google.com/p/crawler4j/ and create your MyCrawler and Controller classes.Remember to set the maximum heap of java to an acceptable value. For example, if your machine has 2GB RAM. You may want to assign 1GB RAM to your crawlers. You can add -Xmx1024M to your java command line parameters.Make sure that you dump your partial results in a permanent storage as you crawl. For example, you can write palindromes longer than 20 characters in a file and after finishing the crawl, report 10 longest one. It is always possible that your crawl crashes in the mean time or you pass the deadline. So, it's a good practice to have your partial results in a file.  Also make sure to flush the file whenever you write in it.If you're crawling on a remote linux machine like openlab machines, make sure to use the nohup command. Otherwise your crawling, which may take several days, will be stopped if your connection is disconnected for even a second. Search the web for how to use this command.Inputs                
                  A URL start Page (the seed set)
                      A regular expression Pages are only crawled if the url matches this regular expression.
                    
                Outputs
                  Find the 10 longest Palindromes in  english content pages of wikipedia that are not on a page about palindromes. Present them in a table with the source page from which they came. Find the  10 Rhopalics with the most number of words in  english content pages of wikipedia. Present them in a table with the source page from which they came. Number of Pages Crawled.Number of Links found in these pages.Total Size of the Downloaded Content.Total Size of the Extracted Text of the Pages.What was the docid of the Page with this URL in your crawl: http://en.wikipedia.org/wiki/Barack_Obama
                
            Submitting your assignment  
              Turn your report into the dropbox created for this assignment on EEE. Make the file name <StudentID>-<StudentIID>-Assignment02.pdfPlease include the full names of all of your group members as appropriate in the document 
            Evaluation:
                Produce the palindrome and rhopalic   
                    and source URLs from part 3.
                     A portion of the grade will be assigned according to the length of the sequence compared to the longest known sequence. 
                  Adhering to administrative requirements
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/assignment06.html
##-----------------TITLE------------------------##
CS 221, Information Retrieval, Winter 2009-2010 Department of Informatics, UCI
##------------------TEXT------------------------##
Computer Science 221: Information Retrieval 
Winter 2009-2010
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 

  Assignment 06 
  
  
    Goals: 
          This assignment is
          designed to have you:
               Expand on one of the topics that interested you from the course. 
            
      Administration:
          You may work in teams of 1, 2 or 3, no restrictions on membership. 
      Propose a project, for example: 
        Calculate the PageRank of the pages in wikipedia.Create an image based search
              Query is an image Output is ten imagesTDIDF matrix is replaced by a matrix of features of your choosing:
                  Maybe a color histogramMaybe SIFT features    
                
            Create an audio based search
              Query is a sound file (user humming?)Output is ten songsTDIF matrix is replace by a matrix of features of your choosing:
                  Pitch, Beat, etc.Meta-data,reviews etc
                
            Something else? 
      Prepare a report and presentation of the results 
        Prepare a report of your findings.
            This depends on what your project is, but  somewhere between 5 and 15 page description of what you did, how you did it and what your results are would be appropriate. 
          Present a demo/powerpoint presentation of your project in person.
            If you choose to use PowerPoint, no more than 3 slides/roughly 10 minutes. Be prepared to answer questions about the software for about 30 additional minutes. The goal of this is to communicate to me what you accomplished and help me to understand what you did. 
          
      Submitting your assignment  
        Pick a slot during finals week when you can present your results and turn in your report
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture20_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture13_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture19_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/assignment01.html
##-----------------TITLE------------------------##
CS 221, Information Retrieval, Winter 2009-2010 Department of Informatics, UCI
##------------------TEXT------------------------##
Computer Science 221: Information Retrieval 
Winter 2009-2010
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 

  Assignment 01 
  
    Digital Photo  (30%)
        Take a digital photo of your face. (Approximately 250 pixels by 250 pixels)Email it with your full name to the instructor.Evaluation:
            Did it show up by the due date? 
          
      Take the Get to Know You Survey  (30%)
        Located here (http://eee.uci.edu/survey/Ze99mpW15t).It will not work much past the due date. Make sure you hit submit at the end of the survey. Evaluation:
            Is your survey complete and in the system by the due date? 
          
      Java Program  (40%)
        Write a java program which takes the text of an html page as input and calculates the longest palindrome and longest rhopalic on that page
            What I want is a palindrome made from English words. A palindrome consists of the longest  common substring between a line of text and its reverse. Here are some algorithmic guidelines to help you find that: 
                First split the page whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a palindrome.Second strip all punctuation from the text so that only [A-Za-z0-9] remain.Convert all characters to upper or lower case. Once you identify all palindromes on a page over X characters, make sure that:
                    it is greater than 5 characters.less than 10% of the original text was punctuation. 
                  
              Find the  Rhopalic with the most number of words on the page. For our purposes a rhopalic is a sequence of words in which each word increases by one character.            
             What I want is a rhopalic made from English words. Here are some algorithmic guidelines to help you find that: 
                  First split the page whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a rhopalic.For our purposes a rhopalic is a sequence of words in which each word increases by one character.
                      The first word has N characters. The second word has N+1 characters. Words are separated by at least 1 and no more than 3 spaces, white space, or punctuation. A valid rhopalic then looks like this regular expression:
                          \b[A-Za-z]{N}\b[\s!@#$%^&*()-_=+<>,.`~{}\[\]|\\/?]{1,3}\b[A-Za-z]{N+1}\b etc....Example: "I am the most happy person talking" 
                        
                    
                                  
          Admin:
            This project can be done in groups of 2 or fewer people 
          Evaluation:          
            Turn in a java jar program which is entirely self-contained and can be run from the command line with a local file as a parameter. I will provide a test file. If your program spits out the right answer you get 100%. (e.g., "java -jar myprogram.jar testfile.txt") Here are the files the programs were evaluated on:
                test01,test02,test03
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture03_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/assignment04.html
##-----------------TITLE------------------------##
CS 221, Information Retrieval, Winter 2009-2010 Department of Informatics, UCI
##------------------TEXT------------------------##
Computer Science 221: Information Retrieval 
Winter 2009-2010
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 

  Assignment 04
  
    Goals: 
          This assignment is
              designed to:
               Teach you how to make a postings list with a distributed MapReduce architecture on a BIG cluster. Capture the data that you need to calculate ranking scores for assignment 05. 
            
      Administration:
          You may work in teams of 1, 2 or 3, no restrictions on membership. Mitch will be managing the cluster on Amazon for us. 
              This is going to require some instructions on how to upload and run jobs.Some details. 
            
      Write a Java Program To Be Executed by a >50 node Hadoop cluster
          The input to the system will be a list of <key,value> pairs in a file.
                The "key" will be a URL in Wikipedia The "value" will be the document ID of that URL
            The posting list will be on the distributed file system. There is no guarantee that the URLs are valid. 
      What to turn in:
          Submit a sorted postings.txt file in which each line contains postings of a term:
               A term is defined as follows:
                  Don't consider text in the  HTML tags.Replace all non-ASCII characters with spaces.Make all the characters lowercase.All terms are separated by white space.All punctuation should be removed from the beginning and end of a term, but not from the middle.No term should be longer than 32 characters. If a term is longer, truncate it to the first 32 characters. Examples:
                      "However", "however", "however," should all map to "however""Dogs", "dogs", and "dOgS" should all map to "dogs""Dog's", "dog's", and "dog'S" should all map to "dog's""jack-o-lantern." should map to "jack-o-lantern""他⃞四⃞六⃞40ㅈ20ㅁ" should map to two terms "40" and "20"                        "1>alphabet" should map to "1>alphabet" (this is dumb, but for uniformity, we'll stick to the format) "010101010101010--010011101010101actgtgtacgatcgtagctggtagctcgtagcta--010100" should map to "010101010101010--010011101010101"
                    
                The form of the posting list should be:                
                  [term, cf, df] [docid1, tf1] [docid2, tf2]  ....
                      where cf is the collection frequency of the term, df is the document frequency of term                        tf1 is the term frequency of "term" in document with docid1 and so on.
                    
                Before uploading the posting list, truncate it and only keep the LAST 1000 lines.
            Submit a second report  with this content:
              Total number of distinct terms.List of top 10 words with lowest document frequency. List of top 10 words with highest document frequency.First Name of member 1 of your team: ...List of (at most 1000) URLs containing first name of member 1 of your team: ...
                  If there are no pages with your team members name, use "Donald" instead and tell me you did that. 
                
            
      Submitting your assignment  
        Turn your report into the dropbox created for this assignment on EEE. Please make two pdf documents
            Make the file names:
                <StudentID>-<StudentIID>-Assignment04-Report.pdf<StudentID>-<StudentIID>-Assignment04-Posting.pdf
              
          Please include the full names of all of your group members as appropriate in the document
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture19_02_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture09_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture16_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture10_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture15_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture11_03_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/assignment03.html
##-----------------TITLE------------------------##
CS 221, Information Retrieval, Winter 2009-2010 Department of Informatics, UCI
##------------------TEXT------------------------##
Computer Science 221: Information Retrieval 
Winter 2009-2010
Department of Informatics
Donald Bren School of Information and Computer Sciences 
 Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 

  Assignment 03
  
    Goals 
        This assignment is
          designed to:
              To teach you how to make a postings list with a MapReduce architecture. To teach you how to use Hadoop before trying it on a Wikipedia scale assignment. 
            
      Administration:
        You may work in teams of 1, 2 or 3, but it cannot be the same group as a previous assignment. 
      Write a Java Program To Be Executed by Hadoop 
        The input to the system will be a list of URL and DocID pairs in a file. 
              Here is the input file. 
          The output of the system will be a posting list alphabetized by terms found in the input URLS
            A text file with the term on the start of the line and a list of all document URLs on which that term appears. 
          
      Write a Java Program To Be Post Process the results
        This program will calculate the statistics required for the document that you turn in. 
      How to do this:Download HadoopInstall it locally on an openlab machineRun it as a single-node cluster  Here are some tutorials
            Follow the instructions here ("Picking your java version on openlab") to get the right version of java."Hadoop Map/Reduce Tutorial" "Running Hadoop On Ubuntu Linux (Single-Node Cluster)"
          Hints:
            The lines of input.txt file are passed to your mapper function one by one.It should download the page of that URL, make all the text lower cased, and generate <term, docid> pairs.
                (Check Downloader.java as a sample of how to use crawler4j lib to download a single page).Here is an example for WordCount. 
              
          
      Test
        With this input.Don got this output. 
      What to turn in: 
        Outputs:
            Submit a postings.txt file in which each line contains postings of a term: <term, docid1, docid2, ...>. Before uploading this file, truncate it and only keep the first 500 lines.Submit a report.txt file with this content:
                Total number of distinct terms: ....Number of documents containing term 'is': ...Number of documents containing term 'satellite': ...Number of documents containing the first name of member 1 of your team: ...List of URLs containing first name of member 1 of your team: ... 
              
          
      Submitting your assignment  
              Turn your report into the dropbox created for this assignment on EEE. Make the file name <StudentID>-<StudentIID>-Assignment03.pdfPlease include the full names of all of your group members as appropriate in the document
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture04_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2010_01_CS221/Lectures/Lecture08_01_Slides_CS221.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_01_INF134/Assignments/Assignment01.html
##-----------------TITLE------------------------##
INF 134 Winter 2011: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2012
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 


  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 01 
  
    Goals:
        For Prof. Patterson to get to know the class For the class to keep their Android skills fresh 
      Admin
        This is a one person assignmentIt is due late Friday night 1/13 at midnight. Submit a single .apk file using the EEE dropbox submission under "#1 Face App"
      Create an Android application that when launched shows a picture of your face with your name underneath.
        To get full credit it must be 250x250 pixels and your face must take up more than 50% of the image.
          Use Android SDK 2.3 and export an unsigned .apk file
      Gimp is a decent open-source PhotoShop alternative for resizing and cropping images. 
     There should be nothing else in the application.
      Here is an example.
    You may ask, "How can I possibly do this?"
      Look at lecture 24 and 24 on http://www.ics.uci.edu/~djp3/classes/2011_09_INF133/assignmentSchedule.html
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_01_INF134/Assignments/PermitShare.html
##-----------------TITLE------------------------##
INF 134 Winter 2012: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2012
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 

 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Permit Share Sketch
   
    
      
      
      
      
      
      
      
      
      
        
        
        
        
        
        
        
          Content on this page requires a newer version of Adobe Flash Player.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_01_INF134/Assignments/Assignment02.html
##-----------------TITLE------------------------##
INF 134 Winter 2012: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2012
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 


  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 02 
  
    Goals:
        Merge the Google Maps API with Android Sensors
      Admin
        This is a one or two person assignmentIt took me about 1 hour plus time to download stuff and write up these instructions.It is due late Friday night 1/20 at midnight. Submit a single .apk file using the EEE dropbox submission under "#2 Google Map App"
            Export a signed .apk from Eclipse.Then get the fingerprint based on the keystore that you just used from the command line.Then get a Google Map key using the keystore fingerprint from this websiteThen put the Google Map key into the map view that you are using in Eclipse.Then save everything.Then re export your signed apk file and send that one to me.See here for details
          
      Create an Android application that when launched shows a map with the phone's current location plotted on it.
        Use Android SDK 2.3.3 (The Google Maps API version of it) and export an unsigned .apk fileThe icon does not need to be clickable
       There should be nothing else in the application.
      Here is an screen shot as an example.
  You may ask, "How can I possibly do this?"
      First try and get a Map to show up following these instructions.
          You
 will need to use the build target of "Google APIs" v2.3.3 instead of "Android SDK" v2.3.3You will also need to create a new emulator that has the same build target using the "AVD" manager from within Eclipse.You may need to download that build target.
        When you modify your Android manifest file the Google instructions contain an error. This web page helped me to fix those problems.
        Then get your location using these instructions.
          In the Android manifest file you will want to give your application permission to access "android.permission.ACCESS_FINE_LOCATION" in addition to the permissions that are already there.
        Once you get your location, add your location to the map using an "overlay" which is the second part of the Map instructions.
    
    When debugging you may find it helpful to know that Eclipse can send the emulator fake location information
          "Select Window > Show View > Other > Emulator Control.
              In the Emulator Control panel, enter GPS coordinates under Location Controls as individual lat/long coordinates, with a GPX file for route playback, or a KML file for multiple place marks. (Be sure that you have a device selected in the Devices panel—available from Window > Show View > Other > Devices.)" [citation]
            
        Finally I found it helpful to know that I could output debug information to the "LogCat" Consolein Eclipse when running my application in the emulator by using the Log class described here.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_01_INF134/Assignments/Assignment03.html
##-----------------TITLE------------------------##
INF 134 Winter 2012: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2012
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 


  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 03 
  
    Goals:
        Practice Data Gathering though Observation
      Admin
        This is a one or two person assignmentIt is due late Monday night 2/6 at midnight. Photos will be submitted to the flickr group
      Take 100 photos from a variety of places off campus
        Pick one of the themes that we used during our data gathering exerciseUse our data gathering frameworks to help direct your photo taking
       Pick your ten best photos
      Tag them with the theme your were gathering data forTag them with at least three tags that answer data gathering questionsSet the license of the photos to one of the Creative Commons LicenseMake the photos publically viewableAdd them to the group pool
    Email Prof. Patterson the names of the people in your group (if applicable), your flickr user names, and tell me that you are done.These photos are going to be printed out and used in an in-class exercise next.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_01_INF134/Assignments/Assignment05.html
##-----------------TITLE------------------------##
INF 134 Winter 2012: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2012
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 

 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 05 
  
        Goals:
            To practice presenting a prototype mockup. To reflect on data gathering, scenario sketching and paper prototyping as a source for design.
                By observing other groups' presentations.
              
          Assignment
            Sign up for a presentation slot here: https://eee.uci.edu/signupsheet/medfi/Prepare a 10 minute presentation of your Balsamiq mockup
                It should include a few revised slides from your data gathering presentation to provide context for your design.It should include a screen shot from your K-Sketch to provide context for the scenario.It should provide a slide with a photograph of your paper interface to show how your concept developed.Then you should walk us through the Balsamiq interface and explain the design decisions that you made and how they tied back into the previous three development phases when applicable.
              
          Critique
            After presenting Don/Ken will provide feedback that you should consider including for the final revision that will be turned in during finals week.
          Grading
            75 points for a convincing demonstration of the iterations of your design25 points presentation preparation
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_01_INF134/Assignments/Assignment04.html
##-----------------TITLE------------------------##
INF 134 Winter 2012: User Interaction Software
##------------------TEXT------------------------##
Informatics 134: User Interaction Software 
  Winter 2012
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 

 
  Home | Administrative Policies  | Course Structure | Materials | Assignment Schedule 


  Assignment 04 
  
        Goals:
            To practice rapid storyboarding animation for communicating high level use case scenarios to clients. 
                Using informal animation to illustrate an idea or a concept is a powerful technique that is especially useful in the early prototyping phases of application development. While a commercial tool, such as Adobe Flash and Microsoft PowerPoint, may enable its users to create relatively sophisticated animations, their animation interface can be quite cumbersome for a designer who wishes to quickly sketch out an initial prototype version of an animation.
              To reflect on storyboarding methods and what their relative strengths are. 
                This  assignment is meant to inspire your creativity, flex your design muscles, and give you a chance share your own designs in class. The assignments are meant to be lightweight and fun. 
              
          Assignment
            K-Sketch, an open source animation program created by Richard Davis enables novices to easily create informal 
  animations from sketches.
    For background you can read the K-Sketch CHI paper available here: http://portal.acm.org/citation.cfm?id=1357122 
              Watch the 6 demonstration videos available here to see how to use it: http://www.youtube.com/view_play_list?p=1128A3D949137993Install a version of K Sketch
                You will need a Windows PC to use K-Sketch. A tablet PC is ideal. 
              Prototype the storyboard for your project using K-Sketch
                You animation should be between 1 and 4 minutes It should have minimal textIt should be understandable by anyone in our class who knows what your project is.Do not worry too much about polishing the “look” of your sketches, especially if you feel you are not a good “artist”. Instead focus on conveying the concept through the animation. Export your animation file as a flash file 
              
          Lead a discussion of your idea          
            Present your animation
                It should be a .flv file from K-Sketch
              Digital documents can be carried in on a flash drive. a
               Each person in the audience will fill out an anonymous questionnaire like this:
                How prepared was this group? 1 2 3 4 5 The animation effectively conveyed the concept of the intervention (not a question about artistic ability)? 1 2 3 4 5
              
          
          Grading
            75 points effectiveness of flash animation25 points presentation15 bonus points if you create a second story board using a different technology and compare and contrast the two at the end of your presentation. 
          
         
        Thanks for James Landay for the idea for this assignment.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_07.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 07
						Due Date:Friday, 12/14 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #7: Goal make a mobile phone app that uses sensors 
				Option 1: The I'm-scared-of-this assignment-assignment:
						Build an application that plays 5 different sounds when the phone is put in 5 different orientations.Demonstrate the system by video-capturing the system in operation on a real phone.
							Turn in
							a web-page URL with:
								The names of the people in your group and a description of the work they did  A video of the system working (target length 3 minutes) A one page written explanation of the components of your system. A link to the source code of your program. 
							
					Option 2: The I'm-awesome-and-Prof-Patterson-needs-to-know-it assignment:
						 Build a text-input alternative to a keyboard that uses the phone's orientation 
							Turn in a web-page URL with:
								 The names of the people in your group and a description of the work they did A one page written explanation of the components of your system. A link to the source code of your program. 
							Make an appointment to demo your system to Prof.  Patterson during Finals Week 
					Requirements for the system:
						It must run a Java program compiled in Eclipse and deployed on the Android platform.
					Admin
						This is a solo or group assignment. Groups may be no bigger than 3 peopleSelf-group-eval In a separate EEE quiz you will be required to independently grade the work of the other members of your group. This may have the effect of modifying their/your grade.  You may check out phones for 48 hours at a time to deploy your app. 
					Rough grading
						Group members all agreeing that you did more or less than your share might send your grade up or down a notch To get an A:
								The program will be demonstrated on a real phone The java program must respond to orientation in real-time and play sounds. Demonstration must be compelling as presented in the videoWeb-page must be complete 
							To get a B:
								The system might only work on a simulator The system might have individual components that work but it doesn't work together
							To get a C
									The video also fails to show anything happeningThere are clear errors in the Java program 
							
					
			
		
				
		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_01.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 01
						Due Date:Friday, 10/5 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #1: Goal: To get to know you
				1. Create a web page with your photo on it. Below your photo put your name (as text, not as part of the image). To get full credit it must be 250x250 pixels and your face must take up more than 50% of the image. There should be nothing else on the web page. 
				 
				2. Get To Know You Survey: Take this online at EEE. The 2nd question is to provide the URL of the website from part 1, so... don't take it until you have that. Survey Link
			
		
				



		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_04.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 04
						Due Date:Friday, 10/30 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #4: Goal: Gain experience with the real-time web, XML, JSON and Javascript

				This is a solo assignment
						Identify 5 JSON/XML data sources (URLs) that have geo-data in them. They must come from different domains.
								For full credit the source of the data that you pull from should be dynamic.  Not a static XML or JSON file sitting on a server somewhere.  By "dynamic" I mean it should give you different data from the same URL depending on when you request it *or* it should be constructed from the parameters of the URL that you give it.If you use things that are completely static there will be a 3 point penalty per static source.If you put the static feed in your table then there will be an additional 5 point penalty
							 Create a web-page that loads one of the 5 data-sources using AJAX, parses it and presents the data as a table on the webpage.
								 You must deal with cross-site data requests (you need a proxy or JSONP), You must pick a library to parse and manipulate the data You must insert/modify a javascript structure into a web-page For the dynamic table:
										It must have one row for every entry in the feedEach row must have a description of the feed entry and the associated geo-data (at least) The number of rows must *not* be hardcoded into the HTML. It must be dynamically loaded from the remote URL
									
							Turn in a link to your web-page using the EEE Quiz Mechanism Turn in here
								The web-page should list the 5 data sources (by URL) and your written description of what they areAlso on the web page should be a description of how you accomplished your data-parsingAlso on the web page is the table that is the result of your parsing (it should generate itself from a live AJAX call)
							For bonus points do this three times: load one XML AJAX example, one JSON AJAX example and one JSONP example.While graphic design is not the focus of this assignment, feel free to make your webpage look good.
					Resources:
            a proxy program which will get around the cross-site data restrictions:
                Please note that this file must be on a machine that has both php and curl installed (students.ics.uci.edu is one such machine). The myProxy.php file must be on the same domain as the one that is executing the javascript. That's the whole point of why you need it.                  When it is called with a url like this:
                    http://www.mydomain.com/myProxy.php?http://www.yourdomain.com/file.xml
                  It will use php and curl to load www.yourdomain.com/file.xml and send it back as if it were on the local machine 
                  	myProxy.php (right-click to download) 
					
              
          
  
				


			
		
				



		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_02.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 02
						Due Date:Friday, 10/12 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #2: Goal: Learn/refresh Javascript skills
				Create an account on CodeacademyNavigate to  "Learn" -> "Tracks" -> "Javascript Fundamentals". Make sure your url ends in "javascript" NOT "javascript-upgraded"Complete the following exercises:
					1. Introduction -> "Getting Started with Programming"2. Functions -> "Functions in Javascript" 3. Conditionals -> "Conditionals in Javascript" 5. Objects, Part 1 -> "Introduction to Objects 1"6. Objects, Part 2 -> "Introduction to Objects 2"7. Loops -> "Loops in Javascript"9. Object Oriented Programming -> "Review of Obejct-Oriented Programming"
					Any 2 other lessons in Javascript Fundamentals of your choice
				Take a screen shot of your profile showing all the courses completed and your username.Put the screen shot on a web page like in assignment 1.  The only thing on the web page should be your screen shot. (Unfinished Example)Turn in the URL of your screen shot using this EEE quiz.
				

			
		
				



		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_06.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 06
						Due Date:Thursday, 11/29 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #6: Goal: Build a multi-touch system from existing components 

				Requirements for the system:
						Options:
								Easy: Extend the "advanced.drawing" fingerpaint program that comes as an example with MT4J with some interesting multi-touch feature that you clear with Prof Patterson first. Hard: Create a bubble popping game that requires multi-touch input to pop some kinds of bubblesSomething else that interests you that is about Multi-touch (clear with Prof. Patterson)It must run as a Java program compiled in Eclipse using  MT4J
								
							It must receive events from a TUIO server.
								Programs that run using MT4J have a TUIO server built-in. No additional work is necessary. If you are trying to recreate the demos from class with the flash applications, then you need to run the TUIO server that comes with Community Core Vision. 
							It must receive multi-touch inputs from a live multi-touch device which you build. See Community Core Vision for software to do this from video.
								I want you to build one using one of the techniques that we showed in class, or something else that you can think of.I want you to do more than just download an app that sends multi-touch input (although you can do that for testing if you want) 
							
					Admin
						This is a group assignment. Groups may be no bigger than 3 people.
								A recommended breakdown of assignments is:
										Multi-touch team: Responsible for delivering multi-touch events to the systemJava team: Responsible for writing code that responds to multi-touch inputs
									
							
					Turn-in
						Demonstrate the system by video-capturing the system in operation. Target length of video is 4 minutes. Turn in a link to a web-page which has:
 								The names of the people in your group and a description of the work they did.A link to the video of the system A 4-6 paragraph description of the components and architecture of your system including approprite citations. A link to the source code for your program. 
 							Turn it in here 
 					Rough grading
    	     			To get an A:
	 							The java program must respond to multi-touch events in real-time. Finger-painting (or alternative) must be compellingVideo must clearly demonstrate the system working There must be a mutli-touch device
							To get a B:
								The system might use recorded video from CCV instead of live input The system might have individual components that work but it doesn't work together
							To get a C
								The video also fails to show anything happeningThere are clear errors in the Java program   
							
					Other links:
						TUIO Simulator for debugging the system (reactivision) iPhone application for remote multi-touch (MSA Remote) Mac TrackPad demo app. (here) 
					
			
		

		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_03.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 03
						Due Date:Friday, 10/19 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #3: Goal: Learn/refresh jQuery skills
				Create an account on CodeacademyNavigate to  "Learn" -> "Tracks" -> "JQuery". Quick LinkComplete any 3 of the following exercises:
					1. Javascript and jQuery -> "Javascript review for JQuery"2. Getting started with jQuery -> "Basic jQuery" 3. JQuery DOM Mastery -> "Basic jQuery - Part Two" 4. jQuery Events -> "jQuery Events"5. jQuery Effects and Plugins -> "jQuery Effects and Plugins"
				Take a screen shot of your profile showing all the courses completed and your username.Put the screen shot on a web page like in assignment 1.  The only thing on the web page should be your screen shot. (Unfinished Example)Turn in the URL of your screen shot using this EEE quiz.
				

			
		
				



		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/Lectures/Lecture07/Step11.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Replace this text!
		Don't replace this text!
		Don't replace this text either
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2012_09_INF133/assignment_05.html
##-----------------TITLE------------------------##
INFORMATICS 133: User Interaction Software
##------------------TEXT------------------------##
Informatics 133: User Interaction Software
          
            CalendarCourse StructureAdministrative Polices
          
        
      
    

	
		
			
				
					Links
				
			
			
				
					
						Assignment 05
						Due Date:Friday, 11/09 11:59pm
						
						User Interaction Software
							Fall 2012Department of InformaticsDonald Bren School of Information and Computer Sciences
						
					
				
			
		
		
		
			
          		Assignment #5: Goal: Learn how to generate a Map U/I from dynamic real-time data. 
        		This is a solo assignmentUse Google Maps v3 (API Reference)  Embed a Google map into a copy of the webpage from Assignment 4
						 Make a copy of the old page and work on the copy so that you don't mess up the grading of Assignment 4 
					After your AJAX call returns, collect the geo-data from your data source and plot the geo coordinates onto the map interface next to your table.Add links for each element in the table that will center the map on that location when it is clicked.Enhance the map in one interesting way of your choice. For example:
						Make different types of locations have different icons on the mapProgram a context-menu at each location upon right-clicking the map icon with relevant options for that location (e.g., Directions to here, Wikipedia links, Flickr Images, etc.)
					Turn in your assignment using the EEE quiz which will
					have one question for the URL of your webpage (Turn it in here)
			
		

		

		
			© Donald J. Patterson 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/Assignment03.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Assignment 03
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment 03 
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 10/31/2008


  Java Program
       (100%)
      This assignment is to be done on your own.        
    Set up an environment for  the system developed  in Assignment 02After 10am on 10/31, log into EEE and view the "quiz" that has the parameters for the following:
        Using your system
            Crawl a set of web pages 
                Starting from the seed set that provided in the quiz. Using the regular expression filter that we give you in the quiz. 
              Find the longest palindrome in those pages.Find the longest rhopalic in those pages (using a new letter).Find the longest lipogram in those pages  
          Build a webgraph from the crawled pages Calculate the shortest path between two pages provided in the quiz.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture07.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture11.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture20.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture06Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 06

 Attendance

 Get to know you survey results

 Assignment 01

 66% graded

 Quiz 01Today

 on Reading List from week 1 (and week 2, but it's empty now)

 20 minutes - online

 Discussion of course so far
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture22.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture05Slides.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture23.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture03Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 03

 Attendance

 Kick-Off

 www.youtube.com—watch

 Assignment 01 due today

 HIT SUBMIT button

 Web Crawl Basics Continued
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture27.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 27


Cards


Attendance


A question for Google


A point of confusion


Sign up slots


Last Day of Class


Evaluation Time
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture24.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture07Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 07

 Attendance

 Assignment 01

 100% graded and returned

 Quiz 01Today

 graded

 Web Crawling and Indexing
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/Assignment06.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Assignment 06
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment 06 
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 12/3/2008


  Implement Rapid Cosine Querying
      Using the posting list that you created in Assignment 05 Get a query from the userCalculate the ranked cosine score of the query against the documents in your posting listReturn the top 10 (or less) scoring documents from your collection and their scores 
    Evaluation
      In person (Do this with a number of examples)
            Run 3 queries of your choice and show the results Run 5 one-word queries of our choice and show the results 
          
    This is optionally a group project for groups of 2 only
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture19.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture02Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 02

 Attendance

 Kick-Off

 www.youtube.com—watch

 Quiz After Class on Friday?

 Web Crawl Basics Continued
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture02Slides.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/FinalProject.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Final Project
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment Final Project 
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due Finals Week 


  Put all your assignments together
      Take your Firefox extension, your posting list, your rapid cosine query algorithm and put it all together into an application that shows you relevant wikipedia content as you are browsing the web.
            This will probably require that you incorporate your rapid cosine scoring algorithm into a web server.The firefox extension will create a query from the browsed pages.Ask your web server for relevant content using the query.Your web server returns links from the crawl database.Your Firefox extension puts the links in the sidebar.  
        
    Evaluation
      Write a summary description of how you accomplished this assignment, focussing on what the pieces you used were.
            This is your chance to show off your design decisions and tell us what extra things you did to make it work.For example:
                How much crawl data did you use?Was it your crawl data or someone elses?DId you implement any special data structures to make this work with lots of data?How did you convert the currently browsed web page into a query?What did you decide to show in the sidebar?etc...
              
          Demo your program working in person. 
    Due Date: Demos will be held any time, by appointment during finals week. You may work in groups of 2 for this project.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/Assignment01.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Assignment 01
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment 01  
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 10/3/2008


  Digital Photo
      
      (30%)
      Take a digital photo of your face. (Approximately 250 pixels by 250 pixels)Email it with your full name to the instructor.Evaluation:
          Did it show up by the due date? 
        
    Take the Get to Know You Survey 
      
      (30%)
      Located here (http://eee.uci.edu/survey/9gV9c6B1q6).It will not work after the due date. Make sure you hit submit at the end of the survey. Evaluation:
        Is your survey complete and in the system by the due date? 
		
    Java Program
      
      (40%)
      Write a Java Program which opens a window, shows your digital photo with your name underneath it. It should also have a field for entering a number and a button next to that field which says "Calculate Log_2".When the calculate button is pressed the program should calculate the log_2 and display it in the same window. Zip up the program with instructions for executing it and send it to the Instructor.
          Make the file name <LastName> - < FirstInitial> - Assignment01.zipThe instructions for running the program should be in a README.txt file located in the zip.The instructions should include the command line for running the program.  For example Patterson-D-Assignment01.zip 
        Evaluation:
          Can the instructor run the version that you turned in?
              Clear Instructions for Operations? 5%Runnable 5%  
            Does it do what it is supposed to do
              Photo 10%Name 5%Log 2 Button 10%Log 2 Calculation 5%
            
        
    

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture05Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 05

 Attendance

 Kick-Off

 Global Biodiversity Search

 www.youtube.com—watch

 Assignment 01

 66% graded

 Quiz 01 on Friday

 on Reading List from week 1 (and week 2, but it's empty now)

 Web Search Basics Continued

 Spam

 Helping the User
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture12_02.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture18.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture17.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture04Slides.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture10.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture16.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture08.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture09.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture01Notes.html/index.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Lecture 01

 Admin

 Attendance

 Cover course basics

 Web page

 Everything on there

 Basic Structure of the Course

 Assignment 01

 Web Crawl Basics Lecture
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/Assignment04.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Assignment 04
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment 04 
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 11/10/2008


  Firefox Extension
      This is a one-person assignment. 
        
    Build a Firefox extension that gets a callback every time the main page reloads. It should appear as a sidebar within the browser (as the browser history or bookmarks would)It should work with Firefox version 3.0 and higherIt should list all the links in the currently viewed document.Email the link to download and install the extension 
        Name your extension <LastName><FirstInitial>Assignment_04
      
    Evaluation
      Can I install the extension?
          (10%)Does it do what it is supposed to do? (90%)
          Shows up as a sidebar ? Displays the new URLs everytime the main page reloads ? Do the links  in the sidebar work? 
        
    Some resources to get you started
      making a sidebar
            http://developer.mozilla.org/en/docs/Creating_a_Firefox_sidebar http://ted.mielczarek.org/code/mozilla/extensionwiz/
          
    This is a semi-collaborative project for the entire class
      Since this assignment is not directly about information retrieval the grading is structured to encourage everyone to collaborate via the forum.        
    Your grade will be 85% what you turn in and the remaining 15% will be the average of what everyone else in the class gets
          So if you get 100% and the average of the rest of the class is 66% your final grade will be 95%.
        You may not give your code directly to anyone else in the class.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture12_01.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture14.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/Assignment05.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Assignment 05
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment 05 
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 11/26/2008


  Build a postings list
      Create a postings list that  will work for the cosine similarity algorithm. The input is the output from your crawl of Wikipedia
        or if you could never get your crawl to work, an equivalent crawl of the static Wikipedia snapshot.The first output is a postings list with meta data
          The head of every list should have the term for that list, plus the document frequency for that termEvery entry in the list should be a document that has that term, plus the term frequency of that term in that document
        
    The challenge
      This assignment is hard because of the scale. Use as much data as you can. 
    Evaluation
      (in person)
      I am going to give you five terms and I want you to return a list of documents and measure:
          Precision:
              If I give you a word, does the document list that you give me have that word in it?You should get 100% precision. 
            Recall (based on google's results)
              :
              If I give you a word, does your document list include all the documents that have that word in it? 
            
        
    Practice:
      ProudleDuck
          http://en.wikipedia.org/wiki/Seraphim_proudleduck#Seraphim_proudleduckhttp://en.wikipedia.org/wiki/SEO_contesthttp://en.wikipedia.org/wiki/Wikipedia:April_Fool%27s_Main_Page/Did_You_Know/Archive_2007http://en.wikipedia.org/wiki/Google_bomb
        
    This is optionally a group project for groups of 2 only
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture24Supplemental.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture06Discussion.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture15.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Assignments/Assignment02.html
##-----------------TITLE------------------------##
Fall 2008: Computer Science 221 : Information Retrieval : Assignment 02
##------------------TEXT------------------------##
Computer Science  221: Information Retrieval: 
  Assignment 02
  Fall 2008 
  Department of Informatics
  Donald Bren School of Information and Computer Sciences 
  University of California, Irvine 
   
    Discussions about this class
  Loading...







Home | Administrative Policies  | Course Structure | Resources & Materials | Calendar 

Due 10/27/2008



  Goals:
      This assignment is
          designed to:
          to teach you how difficult crawling the web is in terms of scale and temporal requirements. The software itself is not the hard part of this assignment, it is managing all the data that comes back. This is only one web site after all. to teach you how difficult it is to process text that is not written for computers to consume. Again this is a very structured domain as far as text goes.to make the point that web-scale web-centric activities do not lend themselves to "completeness". In some sense you are never done. So thinking about web algorithms in terms of "finishing" doesn't make sense. You have to change your mindset to "best possible" given resources.  
        
    Java Program  (100%)
      Administration
          You may work in teams of 1, 2. 
        Write a program to crawl the web. 
          Inputs
              A URL start Page (the seed set) A regular expression
                  Pages are only crawled if the url matches this regular expression.
                
            Output
              A graph of the crawled pages An index
                  of (term, document) pairs 
                
            Structure
              You can, but don't have to, use two libraries:
                  WebSphinx
                      This is a crawler libraryYou are not to use the "crawler workbench"You should compose the necessary components (green on right) to build the architecture on the right.Some keys for reducing memory consumption:
                          a 
                        
                    WebGraph
                      This will build a compressed adjacency graph for you
                    
                
            
        
        
          Using this architecture
            search for the following features 
          Find the longest Palindrome in wikipedia that is not on a page about palindromes. 
              What I want is a palindrome made from English words. Here are some algorithmic guidelines to help you find that:
                  First split the page whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a palindrome.Second strip all punctuation from the text so that only [A-Za-z0-9] remain.Convert all characters to upper or lower case. A palindrome consists of the longest  common substring between a line of text and its reverse.Once you identify all palindromes on a page over X characters, make sure that:
                      greater than 5 characters.less than 10% of the original text was punctuation.   
                    
                
            Find the longest Lipogram (letter "E"/"e") in wikipedia that is not on a page about lipograms.
              What I want is a lipogram made from English words. Here are some algorithmic guidelines to help you find that: 
                  First split the page whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a lipogram.Second strip all punctuation from the text so that only [A-Za-z0-9] remain.A lipogram is the longest sequence of text which doesn't contain a particular letter.Once you identify all lipograms on a page over X characters, make sure that:
                      less than 10% of the original text was punctuation. 
                    
                
            Find the  Rhopalic with the most number of words in wikipedia.
              What I want is a rhopalic made from English words. Here are some algorithmic guidelines to help you find that: 
                  First split the page whenever you see a non-ASCII (>127) character. So an arabic character, for example, will never be embedded in a rhopalic.For our purposes a rhopalic is a sequence of words in which each word increases by one character.
                      The first word has N characters. The second word has N+1 characters. Words are separated by at least 1 and no more than 3 spaces, white space, or punctuation. A valid rhopalic then looks like this regular expression:
                          \b[A-Za-z]{N}\b[\s!@#$%^&*()-_=+<>,.`~{}\[\]|\\/?]{1,3}\b[A-Za-z]{N+1}\b etc....Example: "I am the most happy person talking" 
                        
                    
                
            
        After crawling the web, use  your web graph calculate the shortest path between 
          from: http://en.wikipedia.org/wiki/Stonehengeto:   http://en.wikipedia.org/wiki/Egyptian_pyramidsthat stays in the English content pages of Wikipedia.org 
        (100%) Evaluation:
          (60%) Produce the palindrome, lipogram and rhopalic   
              and source URLs from part 3.
              Grades will be assigned according to the length of the sequence.
                  The longest sequence will receive 100%.The shortest non-trivial sequence will receive 80% 
                
            (30%) Produce your sequence of URLs from part 4.
              Show this sequence as a collection of screen shots indicating the path so that the instructors can verify the path manually.Show the anchor text and the URL so that it is easy to verify.Grades will be assigned according to the length of the sequence.
                  Shortest sequence will receive 100%Longest valid sequence will receive 80%. (< 20 hops) 
                
            (10%) Email your results
              as a pdf document
              Make the file name
                  <LastName1> - < LastName2 > - Assignment02.pdf or<LastName1> - Assignment02.pdf 
                
            
        Train your group 
          Each member of your group must be able to run your architecture on their own for Assignment 03.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture01Slides.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture13.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture21.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2008_09_26_CS221/Lectures/Lecture03Slides.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/about/brenhall/brenhall_webcam.php
##-----------------TITLE------------------------##
donald bren hall timelapse @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                     EDUCATION 
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > About > Donald Bren Hall


  
Donald Bren Hall timelapse




The first classes in Donald Bren Hall were held January 5th, 2007 and the Dean's office moved in on January 8th, 2007. 
With the majority of Donald Bren Hall completed, the webcam that sat atop the Calit2 building and captured the construction has been decommissioned. 
Press play on the player below to view a time lapse video of the construction.

		          


 






More about the school »
Bren ICS MissionAbout the Bren giftDean's welcomeMeet the DeanBren School IntranetDonald Bren HallUndergraduate educationGraduate studiesFind faculty and staffContact usiTunes USafety proceduresVisit the Bren School

   
   Quick Links 
       - select a page - Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICS Prospective undergraduatesSafety procedures Undergraduate degrees
      



         
      
         
      
         
      
         
      
         


Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/example_02.html
##-----------------TITLE------------------------##
Example 02
##------------------TEXT------------------------##
This is a hyperlink.

	This is an image:

	

	 This is an ordered list Another item A last item

	 This is an unordered list Another item A last item
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/example_04.html
##-----------------TITLE------------------------##
Example #4
##------------------TEXT------------------------##
I am A block
			
		
		
			
				I am B block
			
		
		
			
				I am C block
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/quizAnswer2.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/example_01.html
##-----------------TITLE------------------------##
Example 01
##------------------TEXT------------------------##
This is a photo of wet boards

	

	This comes from this web page: http://www.flickr.com/photo_zoom.gne?id=99090433

	Click here to get more information about it.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/example_03.html
##-----------------TITLE------------------------##
Example 03
##------------------TEXT------------------------##
This is an h1 headline
	 This is an h2 headline
	 This is an h3 headline

	 This is bold
	 This is italic
	 This is tele-type

	This is followed by a line-break
	This is followed by a hard-return "line"
	

	Below is a table with a fat border:
	 A  B  C  D  E  F 


	Before This text is surrounded by a div tag After 

	Before This text is surrounded by a span tag After
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/example_00.html
##-----------------TITLE------------------------##
Example 00
##------------------TEXT------------------------##
This is a headline

	For more headlines, click  here.
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture04/quizAnswer.html
##-----------------TITLE------------------------##
Quiz #1
##------------------TEXT------------------------##
Photo courtesy of felizberto Photo courtesy of scribeoflight
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture09/example_01.html
##-----------------TITLE------------------------##
Don Patterson's CV
##------------------TEXT------------------------##
This is the top of the example page
    
    
	This is the bottom of the example page
##------------------URL-------------------------##
http://www.ics.uci.edu/~djp3/classes/2007_04_02_INF132/Lecture09/example_00.html
##-----------------TITLE------------------------##
Don Patterson's CV
##------------------TEXT------------------------##
This is the top of the example page
    
    
	This is the bottom of the example page
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Syskill_fn.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
[1] The entire HTML source is currently
saved, to allow for experimentation in feature extraction methods. 
[2] In addition, it contains a function to retrieval and
locally store the HTML source of all links accessible from the current page.
Syskil & Webert analyzes the HTML source of a page to determine whether the
page matches the user's profile.  To avoid network transmission overhead during
our experiments, we prefetch all pages.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/RTF/AAAI_fn.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
1 The entire HTML source is currently saved,
to allow for experimentation in feature extraction methods.   As we will
describe in Section 5, it is sufficient to just store a short summary of a
file.
2 In addition, it contains a function to retrieval and locally store
the HTML source of all links accessible from the current page.  Syskill &
Webert analyzes the HTML source of a page to determine whether the page matches
the user's profile.  To avoid network transmission overhead during our
experiments, we prefetch all pages. This also ensures that experience are
repeatable if a page changes or is no longer accessible.
3 Although it would be possible to use an incremental learning
algorithm, our current implementation is not incremental.
4 We have created a local copy of this page, removing much of the
in-line graphics, since access to the full page at the remote site was slow and
unreliable. 
5 We experimented with a variant of TF-IDF that operated on 128
informative words. It did not perform as well as TF-IDF operating on all
words.
6 This differs slightly from the previous average for naive Bayes
because a different set of random examples was used in this experiment.
7 Of course, some pages may be considered interesting to a user not
because of the content but because they point to many interesting pages. We do
not believe Syskill & Webert users consider such pages interesting because
Syskill and Webert requires a user to associate an index page with each topic
and this already contains many links.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/tsld002.htm
##-----------------TITLE------------------------##
Classical Concepts
##------------------TEXT------------------------##
Classical Concepts 
 
Alpha

Not Alpha
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld003.htm
##-----------------TITLE------------------------##
Economic Sanctions
##------------------TEXT------------------------##
Slide 3 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld004.htm
##-----------------TITLE------------------------##
PPT Slide
##------------------TEXT------------------------##
Slide 4 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld009.htm
##-----------------TITLE------------------------##
Are Concepts Consistent with Prior Knowledge
##------------------TEXT------------------------##
Slide 9 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld013.htm
##-----------------TITLE------------------------##
Redundant Relevant Cue Results
##------------------TEXT------------------------##
Slide 13 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld022.htm
##-----------------TITLE------------------------##
Some PostHoc Results
##------------------TEXT------------------------##
Slide 22 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld017.htm
##-----------------TITLE------------------------##
Initializing Hypotheses
##------------------TEXT------------------------##
Slide 17 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld007.htm
##-----------------TITLE------------------------##
Generalization in the natural world
##------------------TEXT------------------------##
Slide 7 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld020.htm
##-----------------TITLE------------------------##
Errors of Commission:
##------------------TEXT------------------------##
Slide 20 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld026.htm
##-----------------TITLE------------------------##
General Knowledge of Causality
##------------------TEXT------------------------##
Slide 26 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld012.htm
##-----------------TITLE------------------------##
Redundant Relevant Cues
##------------------TEXT------------------------##
Slide 12 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld025.htm
##-----------------TITLE------------------------##
General constraints for inducing causal mechanism (Hume)
##------------------TEXT------------------------##
Slide 25 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld021.htm
##-----------------TITLE------------------------##
Errors of Commission
##------------------TEXT------------------------##
Slide 21 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld019.htm
##-----------------TITLE------------------------##
Errors of Omission 2
##------------------TEXT------------------------##
Slide 19 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld016.htm
##-----------------TITLE------------------------##
PostHoc Control Structure
##------------------TEXT------------------------##
Slide 16 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld015.htm
##-----------------TITLE------------------------##
Representation of background knowledge
##------------------TEXT------------------------##
Slide 15 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld024.htm
##-----------------TITLE------------------------##
PPT Slide
##------------------TEXT------------------------##
Slide 24 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld005.htm
##-----------------TITLE------------------------##
Prototypical Concepts
##------------------TEXT------------------------##
Slide 5 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld027.htm
##-----------------TITLE------------------------##
Results of Experiment
##------------------TEXT------------------------##
Slide 27 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld014.htm
##-----------------TITLE------------------------##
PostHoc
##------------------TEXT------------------------##
Slide 14 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld010.htm
##-----------------TITLE------------------------##
Results
##------------------TEXT------------------------##
Slide 10 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld018.htm
##-----------------TITLE------------------------##
Errors of Omission:
##------------------TEXT------------------------##
Slide 18 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld006.htm
##-----------------TITLE------------------------##
PPT Slide
##------------------TEXT------------------------##
Slide 6 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld008.htm
##-----------------TITLE------------------------##
Learning from complex stimuli
##------------------TEXT------------------------##
Slide 8 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld011.htm
##-----------------TITLE------------------------##
Why does prior knowledge help?
##------------------TEXT------------------------##
Slide 11 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/sld023.htm
##-----------------TITLE------------------------##
PostHoc Summary
##------------------TEXT------------------------##
Slide 23 of 28
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci94/tsld028.htm
##-----------------TITLE------------------------##
Does Prior Knowledge Only Select Relevant Attributes?
##------------------TEXT------------------------##
Does Prior Knowledge Only Select Relevant Attributes? 
 Subjects induce background knowledge in a four-phase experiment


1.	Severe risk of forest fire in fall when there’s a dry spring and a wet summer
 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld003.htm
##-----------------TITLE------------------------##
Nynex
##------------------TEXT------------------------##
Slide 3 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/tsld002.htm
##-----------------TITLE------------------------##
Learning and Costs
##------------------TEXT------------------------##
Learning and Costs 
 Minimize cost of making classifications

Learner has free access to all attributes of training data
Learner has knowledge of cost of testing each attribute
Reduce cost of accurately classifying test example
Minimize cost of errors made by classifier

Not all errors are equally important
Costs depend on the predicted class and the actual class

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld024.htm
##-----------------TITLE------------------------##
Summary
##------------------TEXT------------------------##
Slide 24 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld014.htm
##-----------------TITLE------------------------##
Reduced Cost Ordering:
##------------------TEXT------------------------##
Slide 14 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld022.htm
##-----------------TITLE------------------------##
Iterative Refinement Cost Results
##------------------TEXT------------------------##
Slide 22 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld018.htm
##-----------------TITLE------------------------##
Overfitting Avoidance Cost Results
##------------------TEXT------------------------##
Slide 18 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld023.htm
##-----------------TITLE------------------------##
Future Work
##------------------TEXT------------------------##
Slide 23 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld015.htm
##-----------------TITLE------------------------##
Reduced Cost Ordering Example
##------------------TEXT------------------------##
Slide 15 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld019.htm
##-----------------TITLE------------------------##
Knowledge
##------------------TEXT------------------------##
Slide 19 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld005.htm
##-----------------TITLE------------------------##
Reducing Misclassification Costs
##------------------TEXT------------------------##
Slide 5 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld004.htm
##-----------------TITLE------------------------##
Additional Domains
##------------------TEXT------------------------##
Slide 4 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld012.htm
##-----------------TITLE------------------------##
Bayesian Classifier:   Cost and Error
##------------------TEXT------------------------##
Slide 12 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld013.htm
##-----------------TITLE------------------------##
Decision Lists and ILP
##------------------TEXT------------------------##
Slide 13 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld021.htm
##-----------------TITLE------------------------##
Iterative Refinement of Numeric Parameters
##------------------TEXT------------------------##
Slide 21 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld017.htm
##-----------------TITLE------------------------##
Overfitting Aviodance
##------------------TEXT------------------------##
Slide 17 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld006.htm
##-----------------TITLE------------------------##
Decision Tree Test Selection Metrics
##------------------TEXT------------------------##
Slide 6 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld020.htm
##-----------------TITLE------------------------##
FOCL Results
##------------------TEXT------------------------##
Slide 20 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld011.htm
##-----------------TITLE------------------------##
Probabilistic Classifier Misclassification Costs
##------------------TEXT------------------------##
Slide 11 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld016.htm
##-----------------TITLE------------------------##
Decision Lists Cost Results
##------------------TEXT------------------------##
Slide 16 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld009.htm
##-----------------TITLE------------------------##
Least Expected Cost Class
##------------------TEXT------------------------##
Slide 9 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld007.htm
##-----------------TITLE------------------------##
Decision Tree Misclassification Costs
##------------------TEXT------------------------##
Slide 7 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld008.htm
##-----------------TITLE------------------------##
Problems with Altered Priors
##------------------TEXT------------------------##
Slide 8 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/sld010.htm
##-----------------TITLE------------------------##
Probabilistic Classifiers
##------------------TEXT------------------------##
Slide 10 of 25
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/MLC94/tsld025.htm
##-----------------TITLE------------------------##
Conclusions
##------------------TEXT------------------------##
Conclusions 
 Investigated Approaches to Reducing Cost of Misclassifications

Introduced Reduced Cost Ordering Algorithm for creating a decision list from unordered rules

Introduced Clause Prefix Strategy for overfitting avoidance

Reduced Cost Ordering works with knowledge-intensive approaches

When assumptions of Bayesian Classifier are met, it is most accurate and reduces errors most

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/tsld002.htm
##-----------------TITLE------------------------##
Overview
##------------------TEXT------------------------##
Overview 
 Constructive Induction

Create new attributes
Change representation of examples
Change bias of learner
Cartesian Product Attributes

Backward Sequential Elimination and Joining 

Learning Algorithms

Bayesian Classifiers
Decision Tree Learners
PEBLS
Efficiency Concerns

Alternative Approaches

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld003.htm
##-----------------TITLE------------------------##
Cartesian Product Attributes
##------------------TEXT------------------------##
Slide 3 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/tsld023.htm
##-----------------TITLE------------------------##
Conclusions
##------------------TEXT------------------------##
Conclusions 
 Cartesian Product Attributes

Allow joint probabilities to be estimated from data
Improve accuracy of Bayesian Classifier
Improve accuracy of PEBLS
Require data to be discretized
IncreasesBSEJ
Wrapper approachesAccuracy gained by from joint probability estimates rather than product of individual probabilities
Accuracy lost due to imprecision of estimating joint probabilities	
 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld022.htm
##-----------------TITLE------------------------##
Joining Attributes:
##------------------TEXT------------------------##
Slide 22 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld014.htm
##-----------------TITLE------------------------##
Results on PEBLS
##------------------TEXT------------------------##
Slide 14 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld021.htm
##-----------------TITLE------------------------##
Which joins correlate best with test set accuracy
##------------------TEXT------------------------##
Slide 21 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld007.htm
##-----------------TITLE------------------------##
Learning A1 xor A3
##------------------TEXT------------------------##
Slide 7 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld005.htm
##-----------------TITLE------------------------##
Domains
##------------------TEXT------------------------##
Slide 5 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld010.htm
##-----------------TITLE------------------------##
Results on Naive Bayesian Classifier
##------------------TEXT------------------------##
Slide 10 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld018.htm
##-----------------TITLE------------------------##
Algorithm specific results
##------------------TEXT------------------------##
Slide 18 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld008.htm
##-----------------TITLE------------------------##
Joining Attributes
##------------------TEXT------------------------##
Slide 8 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld011.htm
##-----------------TITLE------------------------##
Learning Parity
##------------------TEXT------------------------##
Slide 11 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld019.htm
##-----------------TITLE------------------------##
Why not join the most dependent attributes?
##------------------TEXT------------------------##
Slide 19 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld012.htm
##-----------------TITLE------------------------##
Alternative Strategies for Deleting and Joining Attributes
##------------------TEXT------------------------##
Slide 12 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld006.htm
##-----------------TITLE------------------------##
Bayesian Classifiers
##------------------TEXT------------------------##
Slide 6 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld013.htm
##-----------------TITLE------------------------##
PEBLS
##------------------TEXT------------------------##
Slide 13 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld017.htm
##-----------------TITLE------------------------##
Efficiency of Leave-one-out CV
##------------------TEXT------------------------##
Slide 17 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld009.htm
##-----------------TITLE------------------------##
Searching for Dependencies
##------------------TEXT------------------------##
Slide 9 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld020.htm
##-----------------TITLE------------------------##
Entropy Results
##------------------TEXT------------------------##
Slide 20 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld016.htm
##-----------------TITLE------------------------##
Results with Decision Tree Learner
##------------------TEXT------------------------##
Slide 16 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld015.htm
##-----------------TITLE------------------------##
Learning a Decision Tree
##------------------TEXT------------------------##
Slide 15 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/BSEJ/sld004.htm
##-----------------TITLE------------------------##
Bayesian Classifier
##------------------TEXT------------------------##
Slide 4 of 23
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld008.htm
##-----------------TITLE------------------------##
Subtask Neural Networks
##------------------TEXT------------------------##
Slide 8 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld009.htm
##-----------------TITLE------------------------##
Shared Task Neural Networks
##------------------TEXT------------------------##
Slide 9 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld006.htm
##-----------------TITLE------------------------##
Experiment 2:
##------------------TEXT------------------------##
Slide 6 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld005.htm
##-----------------TITLE------------------------##
Experiment 1 Results
##------------------TEXT------------------------##
Slide 5 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld004.htm
##-----------------TITLE------------------------##
Experiment 1
##------------------TEXT------------------------##
Slide 4 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld003.htm
##-----------------TITLE------------------------##
Feature Selection vs. Hypothesis Selection
##------------------TEXT------------------------##
Slide 3 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/sld007.htm
##-----------------TITLE------------------------##
Experiment 2 Results
##------------------TEXT------------------------##
Slide 7 of 10
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/tsld002.htm
##-----------------TITLE------------------------##
Goals
##------------------TEXT------------------------##
Goals 
 Investigate how learned background knowledge facilitates learning new knowledge when learning a set of causally related concepts

Prior studies learned a single concept 
Prior studies assume subject knows background knowledge or give background knowledge in instructions (Pazzani & Silverstein, 1992)


Compare feature selection and hypothesis selection models of using background knowledge 



Model learning rates with a shared task network

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/CogSci95/tsld010.htm
##-----------------TITLE------------------------##
Results with Shared Task Networks
##------------------TEXT------------------------##
Results with Shared Task Networks 
 Experiment 1- EpochsLogical Consistency	5.96		

Feature Consistency	8.50

Experiment 2-Epochs  t(98) = 5.039 p < .05

Logical Consistency	7.12	
Feature Consistency	9.66
 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld025.htm
##-----------------TITLE------------------------##
Foreign Trade Negotiations
##------------------TEXT------------------------##
Slide 25 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld034.htm
##-----------------TITLE------------------------##
Bayesian Classifiers
##------------------TEXT------------------------##
Slide 34 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld003.htm
##-----------------TITLE------------------------##
Version Space
##------------------TEXT------------------------##
Slide 3 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld019.htm
##-----------------TITLE------------------------##
FOIL Example
##------------------TEXT------------------------##
Slide 19 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld036.htm
##-----------------TITLE------------------------##
Searching for Dependencies
##------------------TEXT------------------------##
Slide 36 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld024.htm
##-----------------TITLE------------------------##
Deleting literals of an operationalization
##------------------TEXT------------------------##
Slide 24 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld027.htm
##-----------------TITLE------------------------##
CalendarPredicting Meeting Location
##------------------TEXT------------------------##
Slide 27 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld021.htm
##-----------------TITLE------------------------##
FOCL search strategy
##------------------TEXT------------------------##
Slide 21 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld010.htm
##-----------------TITLE------------------------##
Results
##------------------TEXT------------------------##
Slide 10 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld029.htm
##-----------------TITLE------------------------##
PPT Slide
##------------------TEXT------------------------##
Slide 29 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld015.htm
##-----------------TITLE------------------------##
Learning a clause
##------------------TEXT------------------------##
Slide 15 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld008.htm
##-----------------TITLE------------------------##
Hill Climbing for Parameter Tuning
##------------------TEXT------------------------##
Slide 8 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld009.htm
##-----------------TITLE------------------------##
Hill Climbing for Parameter Tuning
##------------------TEXT------------------------##
Slide 9 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld031.htm
##-----------------TITLE------------------------##
A lexical bias for theory revision
##------------------TEXT------------------------##
Slide 31 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld038.htm
##-----------------TITLE------------------------##
Related Search Methods
##------------------TEXT------------------------##
Slide 38 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld016.htm
##-----------------TITLE------------------------##
FOIL Example
##------------------TEXT------------------------##
Slide 16 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld035.htm
##-----------------TITLE------------------------##
Joining Attributes
##------------------TEXT------------------------##
Slide 35 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld004.htm
##-----------------TITLE------------------------##
Hill Climbing Search
##------------------TEXT------------------------##
Slide 4 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld020.htm
##-----------------TITLE------------------------##
FOCL- Pazzani & Kibler(1992)
##------------------TEXT------------------------##
Slide 20 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld032.htm
##-----------------TITLE------------------------##
Semantic Heterogeneity
##------------------TEXT------------------------##
Slide 32 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld030.htm
##-----------------TITLE------------------------##
Theory Revision
##------------------TEXT------------------------##
Slide 30 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld012.htm
##-----------------TITLE------------------------##
ID-2-of-3 (Murphy & Pazzani, 1991)
##------------------TEXT------------------------##
Slide 12 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld007.htm
##-----------------TITLE------------------------##
Parameter Tuning for Nynex Max:
##------------------TEXT------------------------##
Slide 7 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld026.htm
##-----------------TITLE------------------------##
Rules Learned by FOCL
##------------------TEXT------------------------##
Slide 26 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld006.htm
##-----------------TITLE------------------------##
A Preview of Results
##------------------TEXT------------------------##
Slide 6 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld023.htm
##-----------------TITLE------------------------##
A Hill-climbing approach to Operationalization
##------------------TEXT------------------------##
Slide 23 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld037.htm
##-----------------TITLE------------------------##
BSEJ Results
##------------------TEXT------------------------##
Slide 37 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld028.htm
##-----------------TITLE------------------------##
Calendar
##------------------TEXT------------------------##
Slide 28 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld022.htm
##-----------------TITLE------------------------##
Finding an informative operationalization
##------------------TEXT------------------------##
Slide 22 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld005.htm
##-----------------TITLE------------------------##
Classification Problems
##------------------TEXT------------------------##
Slide 5 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld014.htm
##-----------------TITLE------------------------##
First-Order Inductive Learner
##------------------TEXT------------------------##
Slide 14 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld033.htm
##-----------------TITLE------------------------##
CLARUS Results
##------------------TEXT------------------------##
Slide 33 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld011.htm
##-----------------TITLE------------------------##
Issues in Hill Climbing Search
##------------------TEXT------------------------##
Slide 11 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld018.htm
##-----------------TITLE------------------------##
FOIL Example
##------------------TEXT------------------------##
Slide 18 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld013.htm
##-----------------TITLE------------------------##
ID2-of-3 Results
##------------------TEXT------------------------##
Slide 13 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/sld017.htm
##-----------------TITLE------------------------##
Literal Search Space
##------------------TEXT------------------------##
Slide 17 of 39
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/tsld039.htm
##-----------------TITLE------------------------##
Summary
##------------------TEXT------------------------##
Summary 
 Hill climbing search

Start state
Operators
EvaluationIssues
Selecting good start state
Selecting good operators
Selecting good evaluation+		Efficient with respect to space on large problems
+		Experimentally, quality of solutions is good

— 	Not guarantied

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~pazzani/Slides/Hill/tsld002.htm
##-----------------TITLE------------------------##
Classification Learning
##------------------TEXT------------------------##
Classification Learning 
 Given

A set of classified examples
A hypothesis language
(Optional)- background knowledge





Produce

A hypothesis that  accurately  classifies unseen examples

SKY	AIR	HUMID	WIND	WATER	FORECAST	ENJOY
Sunny	Warm	Normal	Strong	Warm	Same	Yes
Sunny	Warm	High	Strong	Warm	Same	Yes
Rainy	Cold	High	Strong	Warm	Change	No
Sunny	Warm	High	Strong	Cool	Change	Yes

IF the SKY is SUNNY and the AIR is WARM

THEN ENJOY will be YES
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/versioning/arch/0067.html
##-----------------TITLE------------------------##
Functional Requirements for Specifying Document Revision
      Information in HTTP URLs
##------------------TEXT------------------------##
First cut at Functional Requirements document
David J. Fiander (davidf@worf.mks.com)
Sun, 09 Jun 1996 22:47:52 -0400

 Messages sorted by: [ date ][ thread ][ subject ][ author ]

 Next message: David G. Durand: "Re: version management and relative links"
 Previous message: Larry Masinter: "Re: what's doable in Web version control"

 Next in thread: Daniel W. Connolly: "Re: First cut at Functional Requirements document"
 Maybe reply: Daniel W. Connolly: "Re: First cut at Functional Requirements document"
 Maybe reply: Larry Masinter: "Re: First cut at Functional Requirements document"
 Maybe reply: David J. Fiander: "Re: First cut at Functional Requirements document"





Please get comments back to me by Wednesday morning (EDT), if you
want them incorporated before I ship something off to the IETF as
an internet draft Thursday afternoon.

- David


<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Strict//EN">



    Introduction
    Before attempting to develop a convention for recording
      document version information in HTTP URLs, we must decide
      on the functional requirements that such a notation must,
      and must not, satisfy.  Such a requirements
      analysis will allow the working group to quickly elminate
      those proposed notations that clearly fail to satisfy the
      requirements, and discuss the relative merits of the
      (hopefully several) contenders left in the light of a
      common framework.
    The requirements listed in this document were condensed
      from the discussions held on the
      WWW Versioning
        Working Group.
    Rationale
    Before starting in to the development of the requirements
      of any notation for embedding version information in URLs,
      the first question must be, "Is there a requirement that we
      be able to do so?"  While the research group at NTT
      expressed some concern at the group's assumption that such
      a capability was necessary, the general concensus has been
      that the ability to embed hypertextual links to historical
      versions of documents is valuable.
    Given that we want to be able to link to historical
      revisions of a document, there are two routes open to us:
      extend HTML to provide a way to store the information,
      perhaps as a new attribute for the HTML A tag; or
      embed such information in the URL itself.  While the former
      method is conceptually more in keeping with the SGML way of
      doing things, it does have the drawback that existing Web
      clients will be unable to access the information in any
      meaningful way.  Thus, we are limited to embedding version
      control information in the HTTP URL itself.
    Requirements and Anti-Requirements
    As well as listing the requirements that any
      notation must satisfy, it's useful to provide a list of
      anti-requirements.  Anti-requirements describe
      functionality that the notation is explicity not
      required to support or, more strongly, is required to not
      support.
    The version information is opaque to the client.Because the notation will be required to operate in the
        version control environment prefered by the website
        maintainer, it must be able to properly contain arbitrary
        strings, which may be used by the VCS as version
        identifiers.  While the version information will be
        explicable to the human operator, and perhaps to
        special-purpose clients, in the general case, we must
        assume that the client treats the URL as a black box.It is not necessary to be able to decompose a URL into
        its consitutent resource URL and version identifier.URLs have been defined as "magic cookies" that HTTP
        servers use to identify resources.  Clients cannot, in
        general, decode a URL to determine how a server would
        interpret it.Given a resource URL and a version identifier,
        version-aware clients must be able to construct a URL.While existing URLs cannot be decomposed, the ability
        to construct a URL is essential for version-aware
        clients.  This requirement parallels the ability of
        clients to submit queries against a page.Any new notation must not cause problems for existing
        pages.Roughly, this means that the notation cannot cause a
        version-aware server to interpret a pre-existing URL in a
        new way.  For example, stating that version
        information is appended to a resource URL as a "special
        query", using the "?" URL syntax, will cause problems for
        existing forms that contain a "version" field.The version notation is not a configuration notation.The functionality provided by the basic version
        notation allows for the specification of a given revision
        of a single resource.  The ability to "surf into the
        past", which requires the ability to retrieve the correct
        revisions of all of the embedding images
        and linked pages, may be (should be able to be?) built on
        top of the versioning URL notation.
  




 Next message: David G. Durand: "Re: version management and relative links"
 Previous message: Larry Masinter: "Re: what's doable in Web version control"

 Next in thread: Daniel W. Connolly: "Re: First cut at Functional Requirements document"
 Maybe reply: Daniel W. Connolly: "Re: First cut at Functional Requirements document"
 Maybe reply: Larry Masinter: "Re: First cut at Functional Requirements document"
 Maybe reply: David J. Fiander: "Re: First cut at Functional Requirements document"
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/draft-whitehead-http-distreq-00.html
##-----------------TITLE------------------------##
Requirements for Distributed Editing
##------------------TEXT------------------------##
HTTP Working Group                                 E. J. Whitehead, Jr.
INTERNET-DRAFT                                     U.C. Irvine
<draft-whitehead-http-distreq-00.txt>              September 1996

Expires March, 1997

Rev. 0.4, September 27, 1996




Requirements on HTTP for Distributed Content Editing


Status of this Memo

 
This document is an Internet draft. Internet drafts are working
documents of the Internet Engineering Task Force (IETF), its areas and
its working groups. Note that other groups may also distribute working
information as Internet drafts.


Internet Drafts are draft documents valid for a maximum of six
months and can be updated, replaced or obsoleted by other documents
at any time. It is inappropriate to use Internet drafts as
reference material or to cite them as other than as "work in
progress".


To learn the current status of any Internet draft please check the
"lid-abstracts.txt" listing contained in the Internet drafts shadow
directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or
ftp.isi.edu (US West coast). Further information about the IETF can be
found at URL: 
http://www.ietf.org/


Distribution of this document is unlimited.  Please send comments to
the WWW Distributed Authoring and Versioning mailing list, 
<w3c-dist-auth@w3.org>, which may be joined by sending a message 
with subject "subscribe" to

<w3c-dist-auth-request@w3.org>.  
Discussions are archived at URL:

http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/.
The HTTP working group at 

<http-wg@cuckoo.hpl.hp.com> also
discusses the HTTP protocol.  Discussions of the HTTP working group
are archived at URL:

http://www.ics.uci.edu/pub/ietf/http/. General discussions
about HTTP and the applications which use HTTP should take place on
the 
<www-talk@w3.org> mailing list.


Abstract


The HyperText Transfer Protocol, version 1.1 (HTTP/1.1), provides
simple support for applications which allow remote editing of typed
data.  In practice, the existing capabilities of HTTP/1.1 have proven
inadequate to support efficient, scalable remote editing free of
overwriting conflicts.  This document presents a list of features in
the form of requirements which, if implemented, would improve the
efficiency of common remote editing operations, provide a locking
mechanism to prevent overwrite conflicts, improve relationship
management support between non-HTML data types, provide a simple
attribute-value metadata facility, and provide for the creation and
reading of container data types.  These requirements are also
supportive of versioning capability.


1. Introduction


This document describes functionality which, if provided in the
HyperText Transfer Protocol (HTTP) [4], would support the
interoperability of tools which allow remote loading, editing and
saving (publishing) of various media types using HTTP.  As much as
possible, this functionality is described without suggesting a
proposed implementation, since there are many ways to
perform the functionality within the HTTP framework.   It is also
possible that a single mechanism within HTTP could simultaneously
satisfy several requirements.


Much of the functionality described in this document stems from the
assumption that people performing distributed authoring only have
access to the objects they are editing via the HTTP protocol.  This is
in contrast to the majority of current authoring practice, where there
is access to the underlying storage media, often with a shell or
graphical user interface mediating access to a filesystem.  Authors
need more than just remote control over their individual documents:
they need remote control over the namespace in which those documents
reside.  Currently, authors control their namespace by interacting
directly with the underlying storage system, but when performing
distributed authoring this access is not available. 


2. Requirements 

In the requirement descriptions below, the
requirement will be stated, followed by its rationale.  If any current
distributed authoring tools currently implement the requirement,
this is also mentioned.  It is assumed that "server" means "a program
which receives and responds to HTTP requests," and that
"distributed authoring tool" or "intranet enabled tool" means "a program
which can retrieve a source resource via HTTP, allow editing of this
resource, and then save/publish this resource to a server using HTTP."  A
"client" is "a program which issues HTTP requests and accepts responses."

Source Retrieval. The source of any given resource should be
retrievable via HTTP. There are many cases where the source
resource stored on a server does not correspond to the entity
transmitted in response to an HTTP GET.  Current known cases are
server side include directives, and Standard Generalized Markup
Language (SGML) source entities which are converted on the fly to HyperText 
Markup Language (HTML) [2] output entities.
There are many possible cases, such as automatic conversion of bitmap
images into several variant bitmap media types (e.g. GIF, JPEG), and
automatic conversion of an application's native media type into HTML.
As an example of this last case, a word processor could store its
native media type on a server which automatically converts it to HTML.
A GET of this resource would retrieve the HTML.  Retrieving the source
of this resource would result in the transmission of the native word
processor entity.

This requirement should be met by a general mechanism which can handle
both the "single-step" source processing described above, where the
source is converted into the transmission entity via a single
conversion step, as well as "multi-step" source processing, where
there are one or more intermediary processing steps and outputs.  An
example of multi-step source processing is the relationship between an
executable binary image, its object files, and its source language
files.  It should be noted that the relationship between source resource and
transmission entity could be expressed using the 
functionality described below in "Relationships."

Relationships.  Via HTTP, it should be possible
to create, query, list, and delete typed relationships between
resources of any media type.

A hypertext link is a relationship between resources which is browsable
using a hypertext style point-and-click user interface.
Relationships, whether they are browsable hypertext links, or simply a
means of capturing a interrelation between entities, have many
purposes.  Relationships can support pushbutton printing of a
multi-resource document in a prescribed order, jumping to the access
control page for a resource, and quick browsing of related information,
such as a table of contents, an index, a glossary, help pages, etc.
While relationship support is provided by the HTML "LINK" element,
this is limited only to HTML entities, and does not support bitmap
image types, and other non-HTML media types.

AOLpress from America Online [1] currently "allows
pages to add toolbar buttons on the fly using the HTML 3.2 <LINK
REL....> tag. For example, your page can add toolbar buttons that link
to a home page, table of contents, index, glossary, copyright page,
next page, previous page, help page, higher level page, or a bookmark
in the document." 


Write Locks.  It should be possible, via HTTP, to restrict
modification of a resource to a specific person, or list of persons. 
It should be possible to set single or multi-person write locks with
a single action.
No-Modify Locks.  It should be possible, via HTTP, to indicate
to the HTTP server that the contents of a resource should not be modified
until the read lock is released.  It should be possible to assign a
no-modify lock to a single person or a list of persons with a single
action.
Read Locks.  It should be possible, via HTTP, to restrict the
ability to read a resource to a specific person, or list of persons.
It should be possible to set single or multi-person read locks with
a single action.
Partial-Resource Locking. It should be possible to take
out a write or a read lock on subsections of a resource.
Lock Query. It should be possible to query for whether a
given resource has any active modification restrictions, and if so, who
currently has modification permission.
Independence of locks.  It should be possible to
lock a resource without re-reading the resource, and without committing to
editing the resource.
Multi-Resource Locking.  It should be possible to take
out a lock on multiple resources in the same action,
and this locking operation must be atomic across these resources.

At present, HTTP provides limited support for preventing two or
more people from overwriting each other's modifications when they save
to a given URL.  Furthermore, there is no way for people to discover
if someone else is currently making modifications to a resource.  This
is known as the "lost update problem," or the "overwrite problem."
Since there can be significant cost associated with discovering and
repairing lost modifications, preventing this problem is crucial for
supporting distributed authoring.  A "write" lock ensures that only
one person (or list of persons) may modify an resource, preventing
overwrites.  Furthermore, locking support is also a key component of
many versioning schemes, a desirable capability for distributed
authoring. 

An author may wish to lock an entire web of resources even though they
are editing just a single resource, to keep the other resources from
changing.  In this way, an author can ensure that if a local hypertext
web is consistent in their distributed authoring tool, it will then be
consistent when they write it to the server.  Because of this, it
should be possible to take out a lock without also causing
transmission of the contents of a resource.  Since it should not be
assumed that because an resource is locked, that it will necessarily be
modified, and since many people may wish to have simultaneous
guarantees that a resource will not be modified, but still not want to
modify the resource themselves, it is desirable to have a "no-modify" lock
capability.  A no-modify lock, by being less restrictive, provides better
support than a write lock for providing a guarantee that a resource
will not be modified.  Since it is prudent to frequently save working
drafts of a resource, yet undesirable in many cases for working drafts
to be readable by persons other than the author, a "read" lock allows
a resource to have only a limited set of people (perhaps only the author)
who can read the current state of the resource.
In summary, a no-modify lock states that 
the resource is guaranteed not to change for the duration of the lock.
A read lock guarantees that only the owner of the lock may read the
resource (but there is no guarantee it will not be modified).
A write lock states that a resource is guaranteed not to change
only if the owner of the lock does not change it, and only
the owner of the lock may change it.

It is often necessary to guarantee that a lock or unlock operation
occurs at the same time across multiple resources, a feature which is
supported by the multiple-resource locking requirement.  This is useful
for preventing a collision between two people trying to establish
locks on the same set of resources, since with multi-resource locking, one of
the two people will get a lock.  If this same multiple-resource locking
scenario was repeated by using atomic lock operations iterated across
the resources, the result would be a splitting of the locks between
the two people, based on resource ordering and race conditions.

Partial resource locking provides support for collaborative editing
applications, where multiple users may be editing the same
resource simultaneously.  Partial resource locking also allows
multiple people to simultaneously work on a database type resource.

When more than one types of lock is requested on a resource, it
results in either multiple, complimentary locks, or lock collisions.
An implementation of the locking functionality must specify how the
locks interact, noting which combinations result in collisions, and
which combinations are complimentary.

Partial Write. After editing a resource, it should be
possible, via HTTP, to only write the changes to a resource, rather
than retransmitting the entire resource.

During distributed editing which occurs over wide geographic
separations and/or over low bandwidth connections, it would be
extremely inefficient (and frustrating) to rewrite a large resource
after minor changes, such as a one-character spelling correction.
Ideally, support will be provided for transmitting "insert" (e.g., add
this sentence in the middle of a document) and "delete" (e.g. remove
this paragraph from the middle of a document) style updates. 
These changes could be as small as a byte, or arbitrarily large (perhaps
even larger than the original resource), and could result in an
arbitrarily large growth or shrinkage of the resource.  Support for
partial resource updates will make small edits more efficient, and
allow distributed authoring tools to scale up for editing of large
documents.

Attributes. Via HTTP, it should be possible to create,
modify, query, read and delete arbitrary attributes on resources of any
media type.
 
Attributes can be used to define fields such as author, title,
subject, and organization, on resources of any media type.  These
attributes have many uses, such as supporting searches on attribute
contents, and the creation of catalog entries as a placeholder for an
resource which is not available in electronic form, or which will be
available later.

List URL Hierarchy Level. A listing of all resources, along
with their media type, and last modified date, which are located at a
specific URL [3] hierarchy level in an http URL scheme should be
accessible via HTTP, so long as this operation is meaningful.

 
In [3] it states that, "some URL schemes (such as the ftp,
http, and file schemes) contain names that can be considered
hierarchical."  Especially for HTTP servers which directly map all or
part of their URL name space into a filesystem, it is very useful to
get a listing of all resources located at a particular hierarchy
level.  This functionality supports "Save As..." dialog boxes, which
provide a listing of the resources at a current hierarchy level, and
allow navigation through the hierarchy.  It also supports the creation
of graphical visualizations (typically as a network) of the hypertext
structure among the resources at a hierarchy level, or set of levels.
It also supports a tree visualization of the resources and their
hierarchy levels.

There are many instances where there is not a strong correlation
between a URL hierarchy level and the notion of a container.  One
example is a server in which the URL hierarchy level maps to a
computational process which performs some resolution on the name.  In
this case, the contents of the URL hierarchy level can vary depending
on the input to the computation, and the number of resources accessible
via the computation can be very large.  It does not make sense to
implement a directory feature for such a namespace.  However, the
utility of listing the contents of those URL hierarchy levels which do
correspond to containers, such as the large number of HTTP servers
which map their namespace to a filesystem, argue for the inclusion of
this capability, despite not being meaningful in all cases.  If
listing the contents of a URL hierarchy level does not makes sense for
a particular URL, then a "405 Method Not Allowed" status code could be
issued.


AOLpress from America Online currently supports "Save As..." dialog
boxes, and graphical network visualization of a portion of a site's
hypertext structure, which they term a "mini-web."  

FrontPage from Microsoft [5] also currently supports a graphical
network visualization and additionally supports a tree visualization of
a portion of a site's structure.

Make URL Hierarchy Level. Via HTTP, it should be
possible to create a new URL hierarchy level in an http URL scheme.

The ability to create containers to hold related resources supports
management of a name space by packaging its members into small,
related clusters.  The utility of this capability is demonstrated by
the broad implementation of directories in recent operating systems.
The ability to create a URL hierarchy level also supports the creation
of "Save As..." dialog boxes with "New Level/Folder/Directory"
capability, common in many applications.

AOLpress from America Online, currently supports this capability
through their "Save As..." dialog box, and their custom MKDIR
method.


Copy. Via HTTP, it should be possible to make a
byte-for-byte duplicate of a resource  without a client loading, then
resaving the resource.  This copy should leave an audit trail.

There are many reasons why a resource might need to be duplicated, such
as change of ownership, a precursor to major modifications, or to make
a backup.  In combination with delete functionality, copy can be used
to implement rename and move capabilities, by performing a copy to a
new name, and a delete of the old name.  Due to network costs
associated with loading and saving a resource, it is far preferable to
have a server perform a resource copy than a client.  If a copied
resource records which resource it is a copy of, then it would be possible
for a cache to avoid loading the copied resource if it already locally
stores the original.
Note that in the case of CGI scripts, or other executable content, the
intent of the copy operation is to make a byte-for-byte copy of the
source of the resource, rather than require the server to guarantee that the
resource will execute in the same manner in the new location as it
did in the old location. It is the responsibility of the user
to ensure the resource behaves properly in its new location.

Move/Rename. Via HTTP, it should be possible to change
the URL of a resource without a client loading, then resaving the
resource under a different name.

It is often necessary to change the name of a resource, for example due
to adoption of a new naming convention, or if a typing error was made
entering the name originally.  Due to network costs, it is undesirable
to perform this operation by loading and resaving the resource under the
new name,
followed by a delete of the old resource.  Similarly, a single rename
operation is more efficient than a copy followed by a delete
operation.  Ideally an HTTP server should record the move operation,
and issue a "301 Moved Permanently" status code for requests on the
old URL.  A move operation, if implemented with attribute support,
should also preserve most attributes across a move.  Note that moving
a resource is considered the same function as renaming an
resource.


3. Acknowledgments


My understanding of these issues has emerged as the result of much
thoughtful discussion, email, and assistance by many people, who
deserve recognition for their effort.


Martin Cagan, Continuus Software, Marty_Cagan@continuus.com
Dan Connolly, World Wide Web Consortium, connolly@w3.org
David Durand, Boston University, dgd@cs.bu.edu
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Yaron Goland, Microsoft, yarong@microsoft.com
Phill Hallam-Baker, MIT, hallam@ai.mit.edu
Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com
Andre van der Hoek, University of Colorado, Boulder, andre@bigtime.cs.colorado.edu
Gail Kaiser, Columbia University, kaiser@cs.columbia.edu
Rohit Khare, World Wide Web Consortium, khare@w3.org
Dave Long, America Online, dave@sb.aol.com
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Jim Miller, World Wide Web Consortium, jmiller@w3.org
Andrew Schulert, Microsoft, andyschu@microsoft.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Judith Slein, Xerox, slein@wrc.xeroc.com
Richard Taylor, U.C. Irvine, taylor@ics.uci.edu
Robert Thau, MIT, rst@ai.mit.edu
Fabio Vitali, University of Bologna, Italy, fabio@dm.unibo.it


4. References

[1] America Online, "AOL Web Tools -- AOLpress 1.2 Features." WWW page.  

http://www.aolpress.com/press/1.2features.html.


[2] T. Berners-Lee, D. Connolly. "HyperText Markup Language Specification - 2.0."
RFC 1866, MIT/LCS, November 1995.


[3] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource Locators (URL)."
RFC 1738, CERN, Xerox PARC, University of Minnesota, December 1994.


[4] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and T. Berners-Lee.
"Hypertext Transfer Protocol -- HTTP/1.1." RFC XXXX, U.C. Irvine,
DEC, MIT/LCS, August 1996.


[5] Microsoft. "Microsoft FrontPage for Windows Data Sheet." WWW page.

http://www.microsoft.com/msoffice/frontpage/productinfo/brochure/default.htm.


Author's Address



E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Phone: 714-824-4121
Fax: 714-824-4056
EMail: ejw@ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/draft-ietf-webdav-requirements-01.html
##-----------------TITLE------------------------##
WebDAV Requirements
##------------------TEXT------------------------##
WEBDAV Working Group				J.A. Slein
INTERNET-DRAFT      				Xerox Corporation
<draft-ietf-webdav-requirements-01.txt>		F. Vitali
						University of Bologna              
						E.J. Whitehead, Jr.
						U.C. Irvine
						D.G. Durand
						Boston University
						July 24, 1997

Expires January 24, 1998


Requirements for Distributed Authoring and Versioning
 
on the World Wide Web



Status of this Memo

This document is an Internet draft. Internet drafts are working
documents of the Internet Engineering Task Force (IETF), its areas and
its working groups. Note that other groups may also distribute working
information as Internet drafts.

Internet Drafts are draft documents valid for a maximum of six months
and can be updated, replaced or obsoleted by other documents at any
time. It is inappropriate to use Internet drafts as reference material
or to cite them as other than as "work in progress".

To learn the current status of any Internet draft please check the
"lid-abstracts.txt" listing contained in the Internet drafts shadow
directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or
ftp.isi.edu (US West coast). Further information about the IETF can be
found at URL: http://www.ietf.org/

Distribution of this document is unlimited. Please send comments to the
WWW Distributed Authoring and Versioning (WebDAV) mailing list,
, which may be joined by sending a message with
subject "subscribe" to . Discussions are
archived at URL:
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/.

Abstract

Current World Wide Web (WWW or Web) standards provide simple support 
for applications which allow remote editing of typed data. In practice, 
the existing capabilities of the WWW have proven inadequate to support 
efficient, scalable remote editing free of overwriting conflicts.  
This document presents a list of features in the form of requirements 
which, if implemented, would improve the efficiency of common remote 
editing operations, provide a locking mechanism to prevent overwrite 
conflicts, improve link management support between non-HTML 
data types, provide a simple attribute-value metadata facility, provide
for the creation and reading of container data types, and integrate 
versioning into the WWW.

1. Introduction

This document describes functionality which, if incorporated in an 
extension to the existing HTTP proposed standard [HTTP], would allow tools 
for remote loading, editing and saving (publishing) of various media 
types on the WWW to interoperate with any compliant Web server. As much 
as possible, this functionality is described without suggesting a 
proposed implementation, since there are many ways to perform the 
functionality within the WWW framework. It is also possible that a 
single mechanism could simultaneously satisfy several requirements.

This document is intended to reflect the consensus of the WWW 
Distributed Authoring and Versioning working group (WebDAV) as to the 
functionality that needs to be standardized to support distributed 
authoring and versioning on the Web. However, this version still has 
some elements that are being debated in the working group. The following
elements are still under discussion:

Whether support for multi-resource locking is needed
Whether support for query on properties and links is needed
What requirements there should be for internationalization


2. Rationale

Current Web standards contain functionality which enables the editing of 
Web content at a remote location, without direct access to the storage 
media via an operating system. This capability is exploited by several 
existing HTML distributed authoring tools, and by a growing number of 
mainstream applications (e.g., word processors) which allow users to 
write (publish) their work to an HTTP server. To date, experience from 
the HTML authoring tools has shown they are unable to meet their users' 
needs using the facilities of Web standards. The consequence of 
this is either postponed introduction of distributed authoring 
capability, or the addition of nonstandard extensions to the HTTP 
protocol or other Web standards.  These extensions, developed in 
isolation, are not interoperable.

Other authoring applications have wanted to access document repositories 
or version control systems through Web gateways, and have been similarly
frustrated.  Where this access is available at all, it is through
nonstandard extensions to HTTP or other standards that force clients to 
use a different interface for each vendor's service.

This document describes requirements for a set of standard extensions
to HTTP that would allow distributed Web authoring tools to provide
the functionality their users need by means of the same standard
syntax across all compliant servers. The broad categories of 
functionality that need to be standardized are:

Properties
Links
Locking
Reservations
Retrieval of Unprocessed Source
Partial Write
Name Space Manipulation
Collections
Versioning
Security
Internationalization


3. Terminology

Where there is overlap, usage is intended to be consistent with that in 
the HTTP 1.1 specification [HTTP].

Client
A program which issues HTTP requests and accepts responses.

Collection
A collection is a resource that contains other resources,
either directly or by reference.

Distributed Authoring Tool
A program which can retrieve a source entity via HTTP, allow 
editing of this entity, and then save/publish this entity
to a server using HTTP.

Entity
The information transferred in a request or response.

Hierarchical Collection
A hierarchical organization of resources.  A hierarchical
collection is a resource that contains other resources, 
including collections, either directly or by reference.

Link
A typed connection between two or more resources.

Lock
A mechanism for preventing anyone other than the owner of the
lock from accessing a resource.

Member of Version Graph
A resource that is a node in a version graph, and so is derived
from the resources that precede it in the graph, and is the 
basis of those that succeed it.

Property
Named descriptive information about a resource.

Reservation
A declaration that one intends to edit a resource.

Resource
A network data object or service that can be identified by
a URI.

Server
A program which receives and responds to HTTP requests.

User Agent
The client that initiates a request.

Version Graph
A directed acyclic graph with resources as its nodes, where
each node is derived from its predecessor(s).

Write Lock
A lock that prevents anyone except its owner from modifying
the resource it applies to.


4. General Principles

This section describes a set of general principles that the WebDAV
extensions should follow.  These principles cut across categories of
functionality.

4.1. User Agent Interoperability

All WebDAV clients should be able to work with any WebDAV-compliant HTTP
server. It is acceptable for some client/server combinations to provide
special features that are not universally available, but the protocol
should be sufficient that a basic level of functionality will be
universal.

4.2. Client Simplicity

The WebDAV extensions should be designed to allow client implementations
to be simple.

4.3. Legacy Client Support

It should be possible to implement a WebDAV-compliant server in such a
way that it can interoperate with non-WebDAV clients.  Such a server
would be able to understand any valid HTTP 1.1 request from an ordinary
Web client without WebDAV extensions, and to provide a valid HTTP 1.1 
response that does not require the client to understand the extensions.

4.4. Data Format Compatibility

WebDAV-compliant servers should be able to work with existing resources 
and URIs [URL]. Special additional information should not become a 
mandatory part of document formats.

4.5. Replicated, Distributed Systems

Distribution and replication are at the heart of the Internet.  All
WebDAV extensions should be designed to allow for distribution and
replication.  Version trees should be able to be split across multiple
servers.  Collections may have members on different servers.  Resources
may have properties on different servers.  Any resources may be cached
or replicated for mobile computing or other reasons.  Consequently, the
WebDAV extensions must be able to operate in a distributed, replicated
environment.

4.6 Parsimony in Client-Server Interactions 

The WebDAV extensions should keep to a minimum the number of 
interactions between the client and the server needed to perform common
functions. For example, publishing a document to the Web will often mean
publishing content together with related properties.  A client may often 
need to find out what version graph a particular resource belongs to, 
or to find out which resource in a version graph is the published one.
The extensions should make it possible to do these things efficiently.

4.7. Changes to HTTP

WebDAV adds a number of new types of objects to the Web: properties, 
collections, version graphs, etc.  Existing HTTP methods such as
DELETE and PUT will have to operate in well-defined ways in this 
expanded environment. WebDAV should explicitly address not only new
methods, headers, and MIME types, but also any required changes to the
existing HTTP methods and headers.

4.8. Alternate Transport Mechanisms

It may be desirable to transport WebDAV requests and responses by other
mechanisms, particularly EMail, in addition to HTTP.  The WebDAV protocol
specification should not preclude a future body from developing an
interoperability specification for disconnected operation via EMail.

5. Requirements

In the requirement descriptions below, the requirement will be stated,
followed by its rationale.

5.1. Properties

5.1.1. Functional Requirements

It must be possible to create, modify, query, read and delete arbitrary
properties on resources of any media type.

5.1.2. Rationale 

Properties describe resources of any media type.  They may 
include bibliographic information such as author, title, publisher, 
and subject, constraints on usage, PICS ratings, etc. These
properties have many uses, such as supporting searches on property
values, enforcing copyrights, and the creation of catalog entries as 
placeholders for objects which are not available in electronic form, or 
which will be available later.

5.2. Links

5.2.1. Functional Requirements

It must be possible to create, modify, query, read and delete typed 
links between resources of any media type.

5.2.2. Rationale 

One type of link between resources is the hypertext link, which is 
browsable using a hypertext style point-and-click user interface. Links, 
whether they are browsable hypertext links, or simply a means of 
capturing a connection between resources, have many purposes.  Links 
can support pushbutton printing of a multi-resource document in a 
prescribed order, jumping to the access control page for a resource, 
and quick browsing of related information, such as a table of contents, 
an index, a glossary, a bibliographic record, help pages, etc. While 
link support is provided by the HTML "LINK" element, this is limited 
only to HTML resources [HTML]. Similar support is needed for bitmap image 
types, and other non-HTML media types.  

5.3. Locking

5.3.1. General Principles

5.3.1.1. Independence of locks. It must be possible to lock a resource
without re-reading the resource, and without committing to editing the 
resource.

5.3.1.2. Multi-Resource Locking. It must be possible to take out a 
lock on multiple resources residing on the same server in a single action, 
and this locking operation must be atomic across these resources.

5.3.2. Functional Requirements

5.3.2.1. Write Locks. It must be possible to restrict modification of 
a resource to a specific person.

5.3.2.2. Lock Query. It must be possible to find out whether a given 
resource has any active locks, and if so, who holds those locks.

5.3.2.3. Unlock. It must be possible to remove a lock.

5.3.3. Rationale

At present, the Web provides limited support for preventing two or more 
people from overwriting each other's modifications when they save to a 
given URI. Furthermore, there is no way to discover whether someone else
is currently making modifications to a resource. This is known as the 
"lost update problem," or the "overwrite problem." Since there can be 
significant cost associated with discovering and repairing lost 
modifications, preventing this problem is crucial for supporting 
distributed authoring. A write lock ensures that only one person may 
modify a resource, preventing overwrites. Furthermore, locking support 
is a key component of many versioning schemes, a desirable capability 
for distributed authoring.

An author may wish to lock an entire web of resources even though he 
is editing just a single resource, to keep the other resources from 
changing. In this way, an author can ensure that if a local hypertext 
web is consistent in his distributed authoring tool, it will then be 
consistent when he writes it to the server. Because of this, it should 
be possible to take out a lock without also causing transmission of the 
contents of a resource.

It is often necessary to guarantee that a lock or unlock operation 
occurs at the same time across multiple resources, a feature which is 
supported by the multiple-resource locking requirement. This is useful 
for preventing a collision between two people trying to establish locks 
on the same set of resources, since with multi-resource locking, one of 
the two people will get a lock. If this same multiple-resource locking 
scenario was repeated by using atomic lock operations iterated across 
the resources, the result would be a splitting of the locks between the 
two people, based on resource ordering and race conditions.

5.4. Reservations

5.4.1. Functional Requirements 

5.4.1.1. Reserve. It must be possible for a principal to register with 
the server an intent to edit a given resource, so that other principals 
can discover who intends to edit the resource.

5.4.1.2. Reservation Query. It must be possible to find out whether 
a given resource has any active reservations, and if so, who currently 
holds reservations.

5.4.1.3. Release Reservation.  It must be possible to release the 
reservation.

5.4.2. Rationale

Experience from configuration management systems has shown that people 
need to know when they are about to enter a parallel editing situation. 
Once notified, they either decide not to edit in parallel with the 
other authors, or they use out-of-band communication (face-to-face, 
telephone, etc.) to coordinate their editing to minimize the difficulty 
of merging their results. Reservations are separate from locking, since 
a write lock does not necessarily imply a resource will be edited, and 
a reservation does not carry with it any access restrictions. This 
capability supports versioning, since a check-out typically involves 
taking out a write lock, making a reservation, and getting the resource
to be edited.

5.5. Retrieval of Unprocessed Source for Editing

5.5.1. Functional Requirement

The source of any given resource must be retrievable.

5.5.2. Rationale

There are many cases where the source stored on a server does 
not correspond to the actual entity transmitted in response to an HTTP 
GET. Current known cases are server side include directives, and 
Standard Generalized Markup Language (SGML) source which is
converted on the fly to HyperText Markup Language (HTML) [HTML] output 
entities. There are many possible cases, such as automatic conversion 
of bitmap images into several variant bitmap media types (e.g. GIF, 
JPEG), and automatic conversion of an application's native media type 
into HTML. As an example of this last case, a word processor could 
store its native media type on a server which automatically converts 
it to HTML. A GET of this resource would retrieve the HTML. Retrieving 
the source would retrieve the word processor native format.

5.6. Partial Write

5.6.1. Functional Requirement 

After editing a resource, it must be possible to write only the changes
to the resource, rather than retransmitting the entire resource.

5.6.2. Rationale

During distributed editing which occurs over wide geographic separations
and/or over low bandwidth connections, it is extremely inefficient
and frustrating to rewrite a large resource after minor changes, such 
as a one-character spelling correction. Support is needed for 
transmitting "insert" (e.g., add this sentence in the middle of a 
document) and "delete" (e.g. remove this paragraph from the middle of 
a document) style updates. Support for partial resource updates will 
make small edits more efficient, and allow distributed authoring tools 
to scale up for editing large documents.

5.7. Name Space Manipulation

5.7.1. Copy

5.7.1.1. Functional Requirements 

It must be possible to duplicate a resource without a client loading, 
then resaving the resource. After the copy operation, the content of 
the destination resource must be octet for octet identical to the 
content of the source resource. A modification to either resource must 
not cause a modification to the other.

5.7.1.2. Rationale

There are many reasons why a resource might need to be duplicated, such 
as changing ownership, preparing for major modifications, or making 
a backup. Due to network costs associated with loading and saving a 
resource, it is far preferable to have a server perform a resource copy
than a client. If a copied resource records which resource it is a copy
of, then it would be possible for a cache to avoid loading the copied 
resource if it already locally stores the original.

5.7.2. Move/Rename

5.7.2.1. Functional Requirements 

It must be possible to change the location of a resource without 
a client loading, then resaving the resource under a different name. 
After the move operation, the content of the resource at its new 
location must be octet for octet identical to the content of the prior 
resource. It must no longer be possible to access the resource at its 
original location.

5.7.2.2. Rationale

It is often necessary to change the name of a resource, for example due 
to adoption of a new naming convention, or if a typing error was made 
entering the name originally. Due to network costs, it is undesirable 
to perform this operation by loading, then resaving the resource,
followed by a delete of the old resource. Similarly, a single rename 
operation is more efficient than a copy followed by a delete operation.
Note that moving a resource is considered the same function as renaming
a resource.

5.8. Collections

A collection is a resource that is a container for other resources,
including other collections.  A resource may belong to a collection
either directly or by reference.  If a resource belongs to a
collection directly, name space operations like copy, move, and
delete applied to the collection also apply to the resource.  If a
resource belongs to a collection by reference, name space operations
applied to the collection affect only the reference, not the resource
itself.

5.8.1. Functional Requirements

5.8.1.1. List Collection. A listing of all resources in a specific 
collection must be accessible.

5.8.1.2. Make Collection. It must be possible to create a new 
collection.

5.8.1.3. Add to Collection.  It must be possible to add a resource to a
collection directly or by reference.

5.8.1.4. Remove from Collection.  It must be possible to remove a
resource from a collection.

5.8.2. Rationale

In [URL] it states that, "some URL schemes (such as the ftp, http, and 
file schemes) contain names that can be considered hierarchical." 
Especially for HTTP servers which directly map all or part of their URL 
name space into a filesystem, it is very useful to get a listing of all 
resources located at a particular hierarchy level. This functionality 
supports "Save As..." dialog boxes, which provide a listing of the 
entities at a current hierarchy level, and allow navigation through 
the hierarchy. It also supports the creation of graphical visualizations
(typically as a network) of the hypertext structure among the entities 
at a hierarchy level, or set of levels. It also supports a tree
visualization of the entities and their hierarchy levels.

In addition, document management systems may want to make their 
documents accessible through the Web.  They typically allow the 
organization of documents into collections, and so also want their users
to be able to view the collection hierarchy through the Web.

There are many instances where there is not a strong correlation between
a URL hierarchy level and the notion of a collection. One example is a 
server in which the URL hierarchy level maps to a computational process 
which performs some resolution on the name. In this case, the contents 
of the URL hierarchy level can vary depending on the input to the 
computation, and the number of resources accessible via the computation 
can be very large. It does not make sense to implement a directory 
feature for such a name space. However, the utility of listing the 
contents of those URL hierarchy levels which do correspond to 
collections, such as the large number of HTTP servers which map their 
name space to a filesystem, argue for the inclusion of this capability, 
despite not being meaningful in all cases. If listing the contents of 
a URL hierarchy level does not makes sense for a particular URL, then 
a "405 Method Not Allowed" status code could be issued.

The ability to create collections to hold related resources supports 
management of a name space by packaging its members into small, related 
clusters. The utility of this capability is demonstrated by the broad 
implementation of directories in recent operating systems. The ability 
to create a collection also supports the creation of "Save As..." 
dialog boxes with "New Level/Folder/Directory" capability, common in 
many applications.

5.9. Versioning

5.9.1. Background and General Principles

5.9.1.1. Stability of versions. Most versioning systems are intended to
provide an accurate record of the history of evolution of a document. 
This accuracy is ensured by the fact that a version eventually becomes 
"frozen" and immutable. Once a version is frozen, further changes will 
create new versions rather than modifying the original. In order for 
caching and persistent references to be properly maintained, a client 
must be able to determine that a version has been frozen. Any successful
attempt to retrieve a frozen version of a resource will always retrieve
exactly the same content, or return an error if that version (or the 
resource itself) is no longer available.

5.9.1.2. Operations for Creating New Versions

Version management systems vary greatly in the operations they require,
the order of the operations, and how they are combined into atomic
functions.  In the most complete cases, the logical operations involved
are:

Reserve existing version
Lock existing version
Retrieve existing version
Request or suggest identifier for new version
Write new version
Release lock
Release reservation


With the exception of requesting a new version identifier, all of these
operations have applications outside of versioning and are either 
already part of HTTP or are discussed in earlier sections of these
requirements. Typically, versioning systems combine reservation, 
locking, and retrieval -- or some subset of these -- into an atomic 
checkout function.  They combine writing, releasing the lock, and 
releasing the reservation -- or some subset of these -- into an atomic 
checkin function.  The new version identifier may be assigned either at 
checkout or at checkin.

The WebDAV extensions must find some balance between allowing versioning
servers to adopt whatever policies they wish with regard to these 
operations and enforcing enough uniformity to keep client 
implementations simple.

5.9.1.3. The Versioning Model

Each version typically stands in a "derived from" relationship to its 
predecessor(s).  It is possible to derive several different versions 
from a single version (branching), and to derive a single version from 
several versions (merging).  Consequently, the collection of related
versions forms a directed acyclic graph.  In the following discussion,
this graph will be called a "version graph".  Each node of this graph
is a "version" or "member of the version graph".  The arcs of the graph
capture the "derived from" relationships.

It is also possible for a single resource to participate in multiple
version graphs.

The WebDAV extensions should support this versioning model, though
particular servers may restrict it in various ways.

5.9.1.4. Versioning Policies. Many writers, including Feiler [CM] and 
Haake and Hicks [VSE], have discussed the notion of versioning styles 
(referred to here as versioning policies, to reflect the nature of 
client/server interaction) as one way to think about the different 
policies that versioning systems implement. Versioning policies include
decisions on the shape of version histories (linear or branched), the 
granularity of change tracking, locking requirements made by a server, 
etc. The protocol should clearly identify the policies that it dictates
and the policies that are left up to versioning system implementors or
administrators.

5.9.1.5. It is possible to version resources of any media type.

5.9.2. Functional Requirements

5.9.2.1. Referring to a version graph. There must be a way to refer to
a version graph as a whole.  

Some queries and operations apply, not to any one member of a
version graph, but to the version graph as a whole.  For example, a 
client may request that an entire graph be moved, or may ask for a 
version history. In these cases, a way to refer to the whole version 
graph is required.

5.9.2.2. Referring to a specific member of a version graph. There must
be a way to refer to each member of a version graph. This means that 
each member of the graph is itself a resource. 

Each member of a version graph must be a resource if it is to be 
possible for a hypertext link to refer to specific version of a page, 
or for a client to request a specific version of a document for editing.

5.9.2.3. A client must be able to determine whether a resource is a 
version graph, or whether a resource is itself a member of a version 
graph.

A resource may be a simple, non-versioned resource, or it may be a 
version graph, or it may be a member of a version graph.  A client needs
to be able to tell which sort of resource it is accessing.

5.9.2.4. There must be a way to refer to a server-defined default 
member of a version graph.

The server should return a default version of a resource for requests 
that ask for the default version, as well as for requests where no
specific version information is provided. This is one of the simplest 
ways to guarantee non-versioning client compatibility. This does not 
rule out the possibility of a server returning an error when no sensible
default exists.

It may also be desirable to be able to refer to other special members 
of a version graph. For example, there may be a current version for
editing that is different from the default version.  For a graph with
several branches, it may be useful to be able to request the tip version
of any branch.

5.9.2.5. It must be possible, given a reference to a member of a version
graph, to find out which version graph(s) that resource belongs to.

This makes it possible to understand the versioning context of the 
resource. It makes it possible to retrieve a version history for the 
graphs to which it belongs, and to browse the version graph. It also 
supports some comparison operations: It makes it possible to determine 
whether two references designate members of the same version graph.

5.9.2.6. Navigation of a version graph.  Given a reference to a member 
of a version graph, it must be possible to discover and access the 
following related members of the version graph.

root member of the graph
predecessor member(s)
successor member(s)
default member of the graph


It must be possible in some way for a versioning client to access
versions related to a resource currently being examined.

5.9.2.7. Version Topology. There must be a way to retrieve the complete 
version topology for a version graph, including information about all 
members of the version graph. The format for this information must be 
standardized so that the basic information can be used by all clients. 
Other specialized formats should be accommodated, for servers and 
clients that require information that cannot be included in the 
standard topology.

5.9.2.8. A client must be able to propose a version identifier to be 
used for a new member of a version graph. The server may refuse to use 
the client's suggested version identifier.  The server should tell the
client what version identifier it has assigned to the new member of the
version graph.

5.9.2.9. A version identifier must be unique across a version graph.

5.9.2.10. A client must be able to supply version-specific properties to 
be associated with a new member of a version graph. (See Section 5.1 
"Properties" above.) At a minimum, it must be possible to associate 
comments with the new member, explaining what changes were made.

5.9.2.11. A client must be able to query the server for information 
about a version tree, including which versions are locked, which are 
reserved for editing, and by whom (Session Tracking).

5.9.3. Rationale

Versioning in the context of the world-wide web offers a variety of
benefits:

It provides infrastructure for efficient and controlled management of 
large evolving web sites. Modern configuration management systems are 
built on some form of repository that can track the revision history of
individual resources, and provide the higher-level tools to manage 
those saved versions. Basic versioning capabilities are required to 
support such systems.

It allows parallel development and update of single resources. Since 
versioning systems register change by creating new objects, they
enable simultaneous write access by allowing the creation of variant
versions. Many also provide merge support to ease the reverse operation.

It provides a framework for coordinating changes to resources. While 
specifics vary, most systems provide some method of controlling or 
tracking access to enable collaborative resource development.

It allows browsing through past and alternative versions of a resource.
Frequently the modification and authorship history of a resource is
critical information in itself.

It provides stable names that can support externally stored links for
annotation and link-server support. Both annotation and link servers 
frequently need to store stable references to portions of resources 
that are not under their direct control. By providing stable states of 
resources, version control systems allow not only stable pointers into 
those resources, but also well-defined methods to determine the 
relationships of those states of a resource.

It allows explicit semantic representation of single resources with 
multiple states. A versioning system directly represents the fact that 
a resource has an explicit history, and a persistent identity across 
the various states it has had during the course of that history.

5.10. Security

5.10.1. Authentication. The WebDAV specification should state how the 
WebDAV extensions interoperate with existing authentication schemes, 
and should make recommendations for using those schemes.

5.10.2. Access Control. Access control requirements are specified 
in a separate access control draft [AC].

5.10.3. Interoperability with Security Protocols. The WebDAV 
specification should provide a minimal list of security protocols
which any compliant server / client should support.  These protocols
should insure the authenticity of messages and the privacy and 
integrity of messages in transit.

5.11. Internationalization

5.11.1. Functional Requirement

For transmission of information intended for user comprehension,
the full Universal Character Set (UCS) [ISO 10646] must be available.
Language information and negotiation must be available where
appropriate.

5.11.2. Rationale

In the international environment of the Internet, it is important 
to insure that any information intended for user comprehension will 
be transported in a form that makes it possible to display the 
information in any writing system and language agreeable to both the 
client and the server. The information encompassed by this requirement 
includes not only the content of resources, but also display names 
and descriptions of properties, property values, and status messages. 

6. Acknowledgements

Our understanding of these issues has emerged as the result of much
thoughtful discussion, email, and assistance by many people, who
deserve recognition for their effort.

Terry Allen, tallen@sonic.net
Alan Babich, FileNet, babich@filenet.com
Dylan Barrell, Open Text, dbarrell@opentext.ch
Barbara Bazemore, PC DOCS, barbarab@pcdocs.com
Martin Cagan, Continuus Software, Marty_Cagan@continuus.com
Steve Carter, Novell, srcarter@novell.com
Dan Connolly, World Wide Web Consortium, connolly@w3.org
Jim Cunningham, Netscape, jfc@netscape.com
Ron Daniel Jr., Los Alamos National Laboratory, rdaniel@lanl.gov
Mark Day, Lotus, Mark_Day@lotus.com
Martin J. Duerst, mduerst@ifi.unizh.ch
Asad Faizi, Netscape, asad@netscape.com
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Mark Fisher, Thomson Consumer Electronics, FisherM@indy.tce.com
Yaron Y. Goland, Microsoft, yarong@microsoft.com
Phill Hallam-Baker, MIT, hallam@ai.mit.edu
Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com
Andre van der Hoek, University of Colorado, Boulder,
  andre@cs.colorado.edu
Del Jensen, Novell, dcjensen@novell.com
Gail Kaiser, Columbia University, kaiser@cs.columbia.edu
Rohit Khare, World Wide Web Consortium, khare@w3.org
Mike Little, Bellcore, little@bellcore.com
Dave Long, America Online, dave@sb.aol.com
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Jim Miller, World Wide Web Consortium, jmiller@w3.org
Howard S. Modell, Boeing, howard.s.modell@boeing.com
Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu
Jon Radoff, NovaLink, jradoff@novalink.com
Alan Robertson, alanr@bell-labs.com
Henry Sanders, Microsoft, 
Andrew Schulert, Microsoft, andyschu@microsoft.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Einar Stefferud, stef@nma.com
Richard Taylor, U.C. Irvine, taylor@ics.uci.edu
Robert Thau, MIT, rst@ai.mit.edu
Sankar Virdhagriswaran, sv@hunchuen.crystaliz.com
Dan Whelan, FileNet, dan@FILENET.COM
Gregory J. Woodhouse, gjw@wnetc.com


7. References

[AC] J. Radoff, "Requirements for Access Control within 
Distributed Authoring and Versioning Environments on the World 
Wide Web".

[CM] P. Feiler, "Configuration Management Models in Commercial
Environments", Software Engineering Institute Technical Report
CMU/SEI-91-TR-7, 


[HTML] T. Berners-Lee, D. Connolly, "HyperText Markup Language
Specification - 2.0", RFC 1866, MIT/LCS, November 1995.

[HTTP] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and
T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC 2068,
U.C. Irvine, DEC, MIT/LCS, January 1997.

[ISO 10646] ISO/IEC 10646-1:1993. "International Standard --
Information Technology -- Universal Multiple-Octet Coded Character
Set (UCS) -- Part 1: Architecture and Basic Multilingual Plane."

[URL] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)", RFC 1738, CERN, Xerox PARC, University of Minnesota,
December 1994.

[VSE] A. Haake, D. Hicks, "VerSE: Towards Hypertext Versioning Styles", 
Proc. Hypertext'96, The Seventh ACM Conference on Hypertext, 1996,
pages 224-234.

8. Authors' Addresses

Judith Slein
Xerox Corporation
800 Phillips Road 128-29E
Webster, NY 14580

EMail: slein@wrc.xerox.com

Fabio Vitali
Department of Computer Science
University of Bologna
ITALY

EMail: fabio@cs.unibo.it

E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Fax: 714-824-4056
EMail: ejw@ics.uci.edu

David G. Durand
Department of Computer Science
Boston University
Boston, MA

EMail: dgd@cs.bu.edu

Expires January 24, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/webdav-req-021097.html
##-----------------TITLE------------------------##
Untitled
##------------------TEXT------------------------##
WEBDAV Working Group 						J.A. Slein
INTERNET-DRAFT 						Xerox Corporation 
< > 								E.J. Whitehead, Jr.
								U.C. Irvine
								D.G. Durand
								Boston University
								F. Vitali
								University of Bologna 
								February 1997

Expires August 1997



Requirements on HTTP for Distributed Authoring and
Versioning


Status of this Memo


This document is an Internet draft. Internet drafts are working
documents of the Internet Engineering Task Force (IETF), its areas
and its working groups. Note that other groups may also distribute
working information as Internet drafts.

Internet Drafts are draft documents valid for a maximum of six
months and can be updated, replaced or obsoleted by other documents at
any time. It is inappropriate to use Internet drafts as reference
material or to cite them as other than as "work in progress".

To learn the current status of any Internet draft please check
the "lid-abstracts.txt" listing contained in the Internet
drafts shadow directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or
ftp.isi.edu (US West coast). Further information about the IETF
can be found at URL: http://www.ietf.org/

Distribution of this document is unlimited. Please send comments
to the WWW Distributed Authoring and Versioning mailing list,
<w3c-dist-auth@w3.org>, which may be joined by sending a
message with subject "subscribe" to <w3c-dist-auth-request@w3.org>.
Discussions are archived at URL:
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/. The
HTTP working group at <http-wg@cuckoo.hpl.hp.com> also discusses
the HTTP protocol. Discussions of the HTTP working group are archived at
URL: http://www.ics.uci.edu/pub/ietf/http/. General discussions about
HTTP and the applications which use HTTP should take place on the
<www-talk@w3.org> mailing list.
Abstract

The HyperText Transfer Protocol, version 1.1 (HTTP/1.1), provides
simple support for applications which allow remote editing of
typed data. In practice, the existing capabilities of HTTP/1.1 have
proven inadequate to support efficient, scalable remote editing free
of overwriting conflicts. This document presents a list of features
in the form of requirements which, if implemented, would improve
the efficiency of common remote editing operations, provide a locking
mechanism to prevent overwrite conflicts, improve relationship
management support between non-HTML data types, provide a simple
attribute-value metadata facility, provide for the creation and
reading of container data types, and integrate versioning into
the WWW.
1. Introduction

This document describes functionality which, if provided in the
HyperText Transfer Protocol (HTTP) [4], would support the
interoperability of tools which allow remote loading, editing
and saving (publishing) of various media types using HTTP. As much
as possible, this functionality is described without suggesting a
proposed implementation, since there are many ways to perform the functionality
within the HTTP framework. It is also possible that a single mechanism
within HTTP could simultaneously satisfy several requirements.

***Fabio - Many of the versioning requirements call for extensions
to URLs, not to HTTP.


***Judy - There is controversy in the group about whether we
should be extending HTTP or defining a separate protocol.
2. Rationale

The HTTP protocol contains functionality which enables the editing
of web content at a remote location, without direct access to the
storage media via an operating system. This capability is exploited by
several existing HTML distributed authoring tools, and by a growing number
of mainstream applications (e.g. word processors) which allow users
to write (publish) their work to an HTTP server. To date, experience
from the HTML authoring tools has shown they are unable to meet their
users' needs using the facilities of the HTTP protocol. The consequence
of this is either postponed introduction of distributed authoring
capability, or the addition of nonstandard extensions to the HTTP
protocol. These extensions, developed in isolation, are not 
interoperable.

Other authoring applications have wanted to access document repositories
or version control systems through Web gateways, and have been
similarly frustrated. Where this access is available at all, it is through
nonstandard extensions to HTTP that force clients to use a different
interface for each vendor's service.

This document describes requirements for a set of standard extensions
to HTTP that would allow distributed Web authoring tools to provide
the functionality their users need by means of the same standard
syntax across all compliant servers. The broad categories of 
functionality that need to be standardized are:
Attributes
Relationships
Locking
Notification of Intent to Edit
Retrieval of Unprocessed Source for Editing
Partial Write
Name Space Manipulation
Collections
Versioning

3. General Principles

This section describes a set of general principles that the HTTP
extensions should follow. These principles cut across categories
of functionality.
3.1. User Agent Interoperability

All clients should be able to work with any WebDAV-compliant HTTP
server. It is acceptable for some client/server combinations to
provide special features that are not universally available, but the protocol
should be sufficient that a basic level of functionality will
be universal. It should be possible for servers and clients to negotiate
the use of optional features.
3.2. Legacy Client Support

WebDAV-compliant servers should be able to interoperate with non-WebDAV
clients.
3.3. Data Format Compatibility.

WebDAV-compliant servers should be able to work with existing
resources and URLs. Special additional information should not become a mandatory
part of document formats.
3.4. HTTP Compatibility (new)

Our aim is to make extended authoring capabilities available through
HTTP. In extending HTTP, we are obligated to follow its design
conventions and stay within its spirit. This means, for example,
that methods should operate only on resources. It means that parameters
should be communicated in headers. These and other conventions
should be observed in the design of the extensions.
3.5. Replicated, Distributed Systems (new)

Distribution and replication are at the heart of the Internet.
All WebDAV extensions should be designed to allow for distribution
and replication. Version trees should be able to be split across multiple
servers. Collections may have members on different servers. Resources
may have attributes on different servers. Any resources may be
cached or replicated for mobile computing or other reasons. Consequently,
we must keep these issues in mind through all our design efforts.
4. Requirements

In the requirement descriptions below, the requirement will be
stated, followed by its rationale. If any distributed authoring tools
currently implement the requirement, this is also mentioned. It
is assumed that "server" means "a program which receives
and responds to HTTP requests," and that "distributed authoring tool"
or "intranet enabled tool" means "a program which can retrieve a
source entity via HTTP, allow editing of this entity, and then save/publish this
entity to a server using HTTP." A "client" is "a
program which issues HTTP requests and accepts responses."

(Get rid of references to current tools altogether, or do more
thorough research.)
4.1. Attributes

Via HTTP, it should be possible to create, modify, query, read
and delete arbitrary attributes on resources of any media type.

***Judy - Query is not supported in the specification.


Attributes can be used to define fields such as author, title,
subject, and organization, on resources of any media type. These attributes
have many uses, such as supporting searches on attribute contents,
and the creation of catalog entries as a placeholder for an object which
is not available in electronic form, or which will be available later.
4.2. Relationships

Via HTTP, it should be possible to create, query, and delete typed
relationships between resources of any media type.

A hypertext link is a relationship between resources which is
browsable using a hypertext style point-and-click user interface. Relationships,
whether they are browsable hypertext links, or simply a means
of capturing a interrelation between resources, have many purposes.

Relationships can support pushbutton printing of a multi-resource
document in a prescribed order, jumping to the access control
page for an resource, and quick browsing of related information, such as
a table of contents, an index, a glossary, help pages, etc. While relationship
support is provided by the HTML "LINK" element, this
is limited only to HTML resources, and does not support bitmap image types, and other
non-HTML media types.

AOLpress from America Online [1] currently "allows pages
to add toolbar buttons on the fly using the HTML 3.2 <LINK REL....> tag.
For example, your page can add toolbar buttons that link to a home page, table
of contents, index, glossary, copyright page, next page, previous
page, help page, higher level page, or a bookmark in the document."

***Fabio - The definition of locking here conflicts with the
one that was used in the versioning requirements paper. More in a separate
mail note.
4.3. Locking

4.3.1. General Principles

4.3.1.1. Independence of locks. It should be possible to
lock a resource without re-reading the resource, and without committing to editing
the resource.

4.3.1.2. Multi-Resource Locking. It should be possible
to take out a lock on multiple resources in the same action, and this locking
operation must be atomic across these resources.

***Judy - Multi-resource locking is not in the specification.


4.3.1.3. Partial-Resource Locking. It should be possible
to take out a lock on subsections of an resource.

***Judy - Controversy on this issue at Irvine.


4.3.1.4. Multi-Person Locking. It should be possible to
assign a lock to a single person or to multiple persons with a single action.

***Judy - Multi-person locking is not in the specification.


***Fabio - Add a statement that support for locking is optional.
Also say that systems that do not support locking should provide
some other type of consistency management.
4.3.2. Functional Requirements

4.3.2.1. Write Locks. It should be possible, via HTTP,
to restrict modification of a resource to a specific person, or list of persons.

***Fabio - The definition of a write lock should be this: A
write lock states that no consistency problem will ever occur by changing
the resource, not that no one else is allowed access to that resource.
On the other hand, it can be said that access rights to successfully
Unlocked resources should be allowed to all authorized users.


4.3.2.2. Read Locks. It should be possible, via HTTP, to
indicate to the HTTP server that the contents of a resource should not be
modified until the read lock is released.

***Judy - Read locks are not in the specification.


4.3.2.3. Lock Query. It should be possible to query for
whether a given URL has any active modification restrictions, and if so, 
who currently has modification permission.

***Judy - Should add Unlock.
4.3.3. Rationale

At present, HTTP provides limited support for preventing two or
more from overwriting each other's modifications when they save
to a given URL. Furthermore, there is no way for people to discover
if someone else is currently making modifications to a resource.
This is known as the "lost update problem," or the "overwrite
problem." Since there can be significant cost associated with discovering and
repairing lost modifications, preventing this problem is crucial for supporting
distributed authoring. A "write" lock ensures that only
one person (or list of persons) may modify a resource, preventing overwrites.
Furthermore, locking support is also a key component of many versioning
schemes, a desirable capability for distributed authoring.

An author may wish to lock an entire web of resources even though
he is editing just a single resource, to keep the other resources
from changing. In this way, an author can ensure that if a local hypertext
web is consistent in his distributed authoring tool, it will then
be consistent when he writes it to the server. Because of this, it
should be possible to take out a lock without also causing transmission
of the contents of a resource. Since it should not be assumed that because
a resource is locked, that it will necessarily be modified, and
since many people may wish to have simultaneous guarantees that a resource
will not be modified, but still not want to modify the resource
themselves, it is desirable to have a "read" lock capability.
A read lock, by being less restrictive, provides better support than
a write lock for providing a guarantee that a resource will not be modified.
Put differently, a read lock states that the resource is guaranteed
not to change for the duration of the lock. A write lock states that
a resource is guaranteed not to change only if the owner of the
lock does not change it, and only the owner of the lock may change
it.

It is often necessary to guarantee that a lock or unlock operation
occurs at the same time across multiple resources, a feature which
is supported by the multiple-resource locking requirement. This is
useful for preventing a collision between two people trying to establish
locks on the same set of resources, since with multi-resource locking,
one of the two people will get a lock. If this same multiple-resource
locking scenario was repeated by using atomic lock operations iterated
across the resources, the result would be a splitting of the locks between
the two people, based on resource ordering and race conditions.

Partial resource locking provides support for collaborative editing
applications, where multiple users may be editing the same resource
simultaneously. Partial resource locking also allows multiple
people to simultaneously work on a database type resource. 
4.4. Notification of Intention to Edit. 

It should be possible to notify the HTTP server that a resource
is about to be edited by a given person. It should be possible to query
the HTTP server for the list of people who have notified the server of
their intent to edit a resource.

***Judy - It should be possible to notify the server that one
no longer intends to edit the resource.


***Judy - Support for notification of intent to edit is found
in the specification only in the context of version management. The
specification does not allow such notification for non-versioned
resources.

Experience from configuration management systems has shown that
people need to know when they are about to enter a parallel editing situation.
Once notified, they either decide not to edit in parallel with
the other authors, or they use out-of-band communication (face-to-face,
telephone, etc.) to coordinate their editing to minimize the difficulty
of merging their results. Notification is separate from locking,
since a write lock does not necessarily imply a resource will be edited,
and a notification of intention to edit does not carry with it any
access restrictions. This capability is supportive of versioning, since
a check-out typically involves taking out a write lock, making a
notification of intention to edit, and getting the resource to
be edited.
4.5. Retrieval of Unprocessed Source for Editing 

The source of any given entity should be retrievable via HTTP.

***Judy - Not in the specification.


There are many cases where the source stored on a server does
not correspond to the actual entity transmitted in response to
an HTTP GET. Current known cases are server side include directives, and
Standard Generalized Markup Language (SGML) source which is
converted on the fly to HyperText Markup Language (HTML) [2] output
entities. There are many possible cases, such as automatic conversion
of bitmap images into several variant bitmap media types (e.g.
GIF, JPEG), and automatic conversion of an application's native media
type into HTML. As an example of this last case, a word processor could
store its native media type on a server which automatically converts
it to HTML. A GET of this resource would retrieve the HTML. Retrieving
the source would retrieve the word processor native format.

This requirement should be met by a general mechanism which can
handle both the "single-step" source processing described above,
where the source is converted into the transmission entity via a single
conversion step, as well as "multi-step" source processing,
where there are one or more intermediary processing steps and outputs. An
example of multi-step source processing is the relationship between an
executable binary image, its object files, and its source language
files. It should be noted that the relationship between source
and transmission entity could be expressed using the relationship
functionality described above in "4.2. Relationships."

4.6. Partial Write. 

After editing a resource, it should be possible, via HTTP, to
write only the changes to the resource, rather than retransmitting the
entire resource.

***Judy - Not in the specification.


During distributed editing which occurs over wide geographic separations
and/or over low bandwidth connections, it would be extremely inefficient
(and frustrating) to rewrite a large resource after minor changes,
such as a one-character spelling correction. Ideally, support will
be provided for transmitting "insert" (e.g., add this sentence
in the middle of a document) and "delete" (e.g. remove this
paragraph from the middle of a document) style updates. Support for partial resource
updates will make small edits more efficient, and allow distributed
authoring tools to scale up for editing of large documents.
4.7. Name Space Manipulation

***Fabio - A general treatment of server's name space management
from clients should be introduced here.


***Judy - Need more details of the semantics of copy and move,
especially for collections, versioned resources, and resources with attributes.


***Judy - In the specification, but not mentioned here: Destroy, Undelete, 
CopyHead, MoveHead.
4.7.1. Copy. 

Via HTTP, it should be possible to make a byte-for-byte duplicate
of a resource without a client loading, then resaving the resource.
This copy should leave an audit trail.

There are many reasons why a resource might need to be duplicated,
such as change of ownership, a precursor to major modifications, or
to make a backup. In combination with delete functionality, copy can be
used to implement rename and move capabilities, by performing a copy to
a new name, and a delete of the old name. Due to network costs associated
with loading and saving a resource, it is far preferable to have
a server perform a resource copy than a client. If a copied resource
records which resource it is a copy of, then it would be possible
for a cache to avoid loading the copied resource if it already locally
stores the original.
4.7.2. Move/Rename. 

Via HTTP, it should be possible to change the URL of a resource
without a client loading, then resaving the resource under a different
name.

It is often necessary to change the name of a resource, for example
due to adoption of a new naming convention, or if a typing error was
made entering the name originally. Due to network costs, it is undesirable
to perform this operation by loading, then resaving the resource,
followed by a delete of the old resource. Similarly, a single
rename operation is more efficient than a copy followed by a delete operation.
Ideally an HTTP server should record the move operation, and issue
a "301 Moved Permanently" status code for requests on
the old URL. A move operation, if implemented with attribute support, should also
preserve most attributes across a move. Note that moving a resource is
considered the same function as renaming a resource.
4.8. Collections

4.8.1. List Collection. A listing of all resources, along
with their media type, and last modified date, which are located in
a specific collection should be accessible via HTTP.

***Judy - Not in the specification.


In [3] it states that, "some URL schemes (such as the ftp,
http, and file schemes) contain names that can be considered hierarchical."
Especially for HTTP servers which directly map all or part of
their URL name space into a filesystem, it is very useful to get a listing
of all resources located at a particular hierarchy level. This functionality
supports "Save As..." dialog boxes, which provide a
listing of the entities at a current hierarchy level, and allow navigation through
the hierarchy. It also supports the creation of graphical visualizations
(typically as a network) of the hypertext structure among the
entities at a hierarchy level, or set of levels. It also supports a tree
visualization of the entities and their hierarchy levels.

In addition, document management systems may want to make their
documents accessible through HTTP. They typically allow the 
organization of documents into collections, and so also want their
usersto be able to view the collection hierarchy through HTTP.

There are many instances where there is not a strong correlation
between a URL hierarchy level and the notion of a collection. One example
is a server in which the URL hierarchy level maps to a computational
process which performs some resolution on the name. In this case, the
contents of the URL hierarchy level can vary depending on the input to
the computation, and the number of resources accessible via the computation
can be very large. It does not make sense to implement a directory
feature for such a namespace. However, the utility of listing
the contents of those URL hierarchy levels which do correspond to
collections, such as the large number of HTTP servers which map
their namespace to a filesystem, argue for the inclusion of this capability,
despite not being meaningful in all cases. If listing the contents
of a URL hierarchy level does not makes sense for a particular URL,
then a "405 Method Not Allowed" status code could be issued.

AOLpress from America Online currently supports "Save As..."
dialog boxes, and graphical network visualization of a portion of a site's
hypertext structure, which they term a "mini-web." FrontPage
from Microsoft [6] also currently supports a graphical network visualization
and additionally supports a tree visualization of a portion of
a site's structure.

4.8.2. Make Collection. Via HTTP, it should be possible
to create a new collection.

The ability to create collections to hold related resources supports
management of a name space by packaging its members into small,
related clusters. The utility of this capability is demonstrated by the
broad implementation of directories in recent operating systems. The
ability to create a collection also supports the creation of "Save
As..." dialog boxes with "New Level/Folder/Directory" capability,
common in many applications.

AOLpress from America Online currently supports this capability
through their "Save As..." dialog box, and their custom
MKDIR method.
4.9. Versioning

In the following discussion, "versioned resource" means
a resource that has the structure of a directed acyclic graph, each node of which
is a version. "Version" means a node in this structure,
which is itself a resource. Each version typically stands in a "derived from"
relationship to its predecessor(s).

***Judy - new definitions

4.9.1. General Principles

4.9.1.1. Stableness of versions. Most versioning systems
are intended to provide an accurate record of the history of evolution of a document.
This accuracy is ensured by the fact that a version eventually
becomes "frozen" and immutable. Once a version is frozen, further
changes will create new versions rather than modifying the original. In order
for caching and persistent references to be properly maintained, a
client must be able to determine that a version has been frozen. We require
that unlocked resource versions be frozen. This enables the common
practice of keeping unfrozen "working versions". Any
successful attempt to retrieve a frozen version of a resource will always retrieve
exactly the same content, or return an error if that version (or the resource
itself) are no longer available. Since URLs may be reassigned
at a server's discretion this requirement applies only for that period
of time during which a URL identifies the same resource. HTTP 1.1's
Entity tags will need to be integrated into the versioning strategy in
order for caching to work properly.

***Judy - Does the specification support this?


4.9.1.2. Policy-free Versioning. Haake and Hicks [5] have
identified the notion of versioning styles (referred to here as versioning
policies, to reflect the nature of client/server interaction)
as one way to think about the different policies that versioning systems
implement. Versioning policies include decisions on the shape
of version histories (linear or branched), the granularity of change
tracking, locking requirements made by a server, etc. The protocol
should not unnecessarily restrict version management policies
to any one paradigm. For instance, locking and version number assignment
should be inter-operable across servers and clients, even if there
are some differences in their preferred models.

4.9.1.3. Separation of resource retrieval and concurrency control.
The protocol must separate the reservation and release of versioned
resources from their access methods. Provided that consistency
constraints are met before, during and after the modification
of a versioned resource, no single policy for accessing a resource
should be enforced by the protocol. For instance, a user may declare an
intention to write before or after retrieving a resource via GET, may PUT
a resource without releasing the lock, and might even request a
lock via HTTP, but then retrieve the document using another communication
channel such as FTP.

***Judy - The specification assumes that it's the server, not
the user, that determines the policy -- order of operations and what
operations are required.

***Judy - "Separation of resource retrieval and concurrency
control" is supported by the Request-Lock, Request-Intent, and 
Request-Working-Loc parameters to the CheckOut method and the discovery mechanism.
This is all embroiled in the controversy over how much latitude we
want to give servers, how simple we want to make things for clients, whether
we want to rely on the discovery mechanism, etc.
4.9.2. Functional Requirements


***Judy - In the specification, but not mentioned here: Diff/Merge,
ServerMerge, UnVersion.


4.9.2.1. Access to specific versions via a URL. For each
version of a resource, on a server, there should be a URL to refer to that
version. That is, a version is itself a resource.

This is required for version-specific linking, and for non-versioning
client support.

4.9.2.2. A URL to denote a versioned resource itself, rather
than specific versions of it.


This identifier is needed for queries about the versioning status
of a resource, that do not apply only to one version of that resource.
It is also used to perform operations (such as adjusting attributes,
changing locks, or reassigning URLs) that affect all versions of a resource,
rather than any specific version.

4.9.2.3. Direct access to a server-defined "default",
"current" or "tip"version of a resource.


This is one of the simplest ways to guarantee non-versioning client
compatibility. If no special version information is provided,
the server will provide a default. This does not rule out the possibility
of a server returning an error when no sensible default exists,
but it does provide a standard way to support non-versioning clients,
and one of the most common version access disciplines.

4.9.2.4. A way to access common related URLs from the URL of
a particular version or of a versioned resource:
root version(s) of this document
predecessor version(s) of this document
successor version(s) of this document
default version of this document


It must be possible in some way for a versioning client to access
versions related to a resource whose URL it has. In particular,
access to the "default" version of a resource is an extremely
important operation, that a client should be able to perform at any time
that a URL for a particular version or for a versioned resource is
seen.

***Judy - Specification provides some, but not all, of these
navigationpaths.


4.9.2.5. A way to retrieve the complete version topology for
a resource. There should be a way to retrieve information about all versions
of a resource. The format for this information must be standardized
so that the basic information can be used by all clients. Other specialized
formats should be accomodated, for servers and clients that require
information that cannot be included in the standard topology.

4.9.2.6. A way to determine whether a given URL points to a
version of a versioned resource.


***Judy - Are we requiring that you be able to tell this just
by examining the URL?


4.9.2.7. A way to distinguish, given a URL of a version, the
part of the URL that identifies the version from the part that identifies
the versioned resource.


***Judy - Do we really have to (want to) require that you be
able to find out the URL of the versioned resource by examining the
URL of the version? Is the requirement really just that there be some
way to find out, for any version, the URL of its versioned resource?


***Judy - Specification does not provide a way to find out
the URL of the versioned resource(s) to which a version belongs. 

Being able to determine the URL of the versioned resource makes
it possible to implement browsing the version tree.

It also supports some comparison operations: It makes it possible
to determine whether two URLs designate versions of the same versioned
resource. However, given the phenomenon of URL aliasing, it 
is insufficient to determine that they are not versions of the
same resource.

***Judy - If  4.9.2.8 - 14 are intended to require separate
operations for each of these functions, they conflict with the approach
taken in the WEBDAV specification.


4.9.2.8. A way to request exclusive access to a version of
a resource (Lock). (See Section 4.3 "Locking" above.)

Since not all systems implement lock-based access, the protocol
should not require clients to take out a lock before editing, nor should
it require servers to support locking.

4.9.2.9. A way to release exclusive access to a resource (Unlock).
This is the inverse of Lock.

4.9.2.10. A way for a client to declare an intention to modify
a resource (Reserve). (See Section 4.4 "Notification
of Intent to Edit"above.)

This operation is required before any versioned update. Its effects
may vary depending on server policy, from locking a resource, to forking
a new variant, to a NOOP on servers that do not track sessions or
restrict updates. If this operation returns a version number, the client
is required to make sure that it uses a copy of the data associated
with that version number of the resource for any update operations
it carries out. Servers that wish to enforce a mandatory GET operation
before update, should simply use a fresh version identifier on
the return from this operation.

4.9.2.11. A way to declare the end of an intention to write
a resource (Release). This is the inverse of Reserve. Typically, servers
will commit updates at this time, and return a final version identifier
if possible and if it was not already returned.

4.9.2.12. A way to submit a new version of a resource (PUT).
The server should be able to attach it to the correct part of the version
tree, based on the version number associated with the resource before
its modification.

4.9.2.13. A way for a client to request a version identifier
for a checked out version. Such an identifier will not be used
by any other client in the meantime. The server may refuse the request.

4.9.2.14. A way for a client to propose a version identifier
upon submitting a version of a resource. The server may refuse
to to use the client's suggested version identifier.

4.9.2.15. A way for a client to supply metadata to be associated
with a version. (See Section 4.1 "Attributes" above.)

The kinds of data supplied here might be simple textual comments
or more structured data. An ability to attach arbitrary fields and
content is probably required, but a standard set of attributes that would
enable interoperation would be useful. At a minimum, it must be
possible to associate comments with a version, explaining what
changes were made, when it is checked in.

4.9.2.16. A way for a server to provide a version identifier
to be used for a resource in further operations.


This identifier must accompany client requests to manipulate the
resource. In particular, if a resource is being modified, the
identifier must be used when submitting an update. This allows servers to
track active sessions by assigning version identifiers when documents
are retrieved, locked, or reserved.

4.9.2.17. A way to track resources that have been Reserved
(Session Tracking). This allows the server to ensure that the user
operating on a resource is the same one who Reserved it.

***Judy -- Not in the specification.


***Judy - Uncheckout is neither in the requirements nor in
the specification. Do we need it?


4.9.3. Rationale

Versioning in the context of the world-wide web offers a variety
of benefits:

It provides infrastructure for efficient and controlled management
of large evolving web sites. Modern configuration management systems
are built on some form of repository that can track the revision history
of individual resources, and provide the higher-level tools to manage
those saved versions. Basic versioning capabilities are required
to support such systems.

It allows parallel development and update of single resources.
Since versioning systems register change by creating new objects, they
enable simultaneous write access by allowing the creation of variant
versions. Many also provide merge support to ease the reverse
operation.

It provides a framework for access control over resources. While
specifics vary, most systems provide some method of controlling
or tracking access to enable collaborative resource development.

It allows browsing through past and alternative versions of a
resource. Frequently the modification and authorship history of a resource
is critical information in itself.

It provides stable names that can support externally stored links
for annotation and link-server support. Both annotation and link servers
frequently need to store stable references to portions of resources
that are not under their direct control. By providing stable states
of resources, version control systems allow not only stable pointers
into those resources, but also well-defined methods to determine the
relationships of those states of a resource.

It allows explicit semantic representation of single resources
with multiple states. A versioning system directly represents the fact
that a resource has an explicit history, and a persistent identity
across the various states it has had during the course of that history.
5. Acknowledgements (Get current mailing list)

Our understanding of these issues has emerged as the result of
muchthoughtful discussion, email, and assistance by many people, who
deserve recognition for their effort.

Martin Cagan, Continuus Software, Marty_Cagan@continuus.com
Dan Connolly, World Wide Web Consortium, connolly@w3.org
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Yaron Goland, Microsoft, yarong@microsoft.com
Phill Hallam-Baker, MIT, hallam@ai.mit.edu
Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com
Andre van der Hoek, University of Colorado, Boulder,
andre@bigtime.cs.colorado.edu
Gail Kaiser, Columbia University, kaiser@cs.columbia.edu
Rohit Khare, World Wide Web Consortium, khare@w3.org
Dave Long, America Online, dave@sb.aol.com
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Jim Miller, World Wide Web Consortium, jmiller@w3.org
Andrew Schulert, Microsoft, andyschu@microsoft.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Richard Taylor, U.C. Irvine, taylor@ics.uci.edu
Robert Thau, MIT, rst@ai.mit.edu
6. References

[1] America Online, "AOL Web Tools -- AOLpress 1.2 Features."
WWW page. http://www.aolpress.com/press/1.2features.html.

[2] T. Berners-Lee, D. Connolly. "HyperText Markup Language
Specification - 2.0." RFC 1866, MIT/LCS, November 1995.

[3] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)." RFC 1738, CERN, Xerox PARC, University of
Minnesota, December 1994.

[4] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and
T. Berners-Lee. "Hypertext Transfer Protocol -- HTTP/1.1."
RFC 2068, U.C. Irvine, DEC, MIT/LCS, January 1997.

[5] A. Haake, D. Hicks. "VerSE: Towards Hypertext Versioning
Styles", Proc. Hypertext'96, the Seventh ACM Conference on Hypertext, 1996,
pages 224-234.

[6] Microsoft. "Microsoft FrontPage for Windows Data Sheet."
WWW page. http://www.microsoft.com/msoffice/frontpage/productinfo/brochure/
default.htm.

[7] K. Osterbye. "Structural and Congitive Problems in Providing
Version Control for Hypertext", Proceedings of the ACM Conference
on Hypertext, Milano, Italy, 1992, pp 33-42.

[8] "Version Control in Hypermedia Databases" Technical
report TAMU-HRL-91-004, Hypertext Research Lab, Texas A&M University.
1991.
Authors' Addresses


Judith Slein
Xerox Corporation
800 Phillips Road 128-29E
Webster, NY 14580

EMail: slein@wrc.xerox.com

E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Fax: 714-824-4056
EMail: ejw@ics.uci.edu

David G. Durand
Department of Computer Science
Boston University
Boston, MA

EMail: dgd@cs.bu.edu

Fabio Vitali
Department of Computer Science
University of Bologna
ITALY

EMail: fabio@cs.unibo.it
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/versioning/arch/0096.html
##-----------------TITLE------------------------##
Functional Requirements and Framework for Versioning on the WWW
##------------------TEXT------------------------##
Draft functional requirements (strawman or woodman, you decide!)
David Durand (dgd@cs.bu.edu)
Mon, 1 Jul 1996 11:10:59 -0400

 Messages sorted by: [ date ][ thread ][ subject ][ author ]

 Next message: Larry Masinter: "Re: Draft functional requirements (strawman or woodman, you decide!)"
 Previous message: Jim Whitehead: "Proposed agenda for San Mateo Meeting"

 Next in thread: Larry Masinter: "Re: Draft functional requirements (strawman or woodman, you decide!)"
 Maybe reply: Larry Masinter: "Re: Draft functional requirements (strawman or woodman, you decide!)"








Preamble
Dear all,


 During Fabio's pleasant visit to David's house, the two of
us have decided to have a try at another draft of the functional
requirement document, to include some new requirements and to make
explicit some that we think have been implicit in the discussion so far.
The  requirements in this document are proposed as an additional step after
David Fiander's; we do not claim that they are complete.

We have divided the requirements in three sections. A first short
section describes the rationale for versioning on the web. This rationale
enumerates the goals as we see them for the whole project. All specific
requirements should support (and certainly should not hinder) the
realization of the goals. The Second section
contains global requirements for protocol development. These are things we
think are technically justified and that fulfil the rationale. They are
separated from the other requirements because their acceptance creates
further constraints on other technical requirements. Finally we list some
specific requirements and that reflect our own analysis of the problem.

Also, we strongly agree with David Fiander's separation of versioning
and configuration requirements, and propose a two-layer architecture for
versioning on the web.  The first layer will address the simple problem of
handling multiple versions of single resources. The second layer
will address the thornier problems of configuration management for multiple
resources.  This layering separates concerns nicely, and also leads to an
efficient work plan.  We can create a basic architecture for versioning,
and maybe even have it on the standards track, while we're still arguing
about how to approach the more differentiated and ticklish problems of
configuration management.

In practice this means that, while we should still take our own
knowledge of configuration management into consideration insofar as it has an
impact on the lower-level versioning issues, we shouldn't spend time,
efforts and flames on configuration problems until we are ready to solve
them.

Therefore we have decided to write down our view of the functional
requirements for versioning support on the WWW, with an emphasis on
resource versioning only. We invite people to contribute any configuration
management requirements that may affect the development of the resource
versioning layer.

At the end of specific requirements, you will find [emphasized]
notes comparing this note and David Fiander's one, noting and justifying
changes in wording, structure and issues.



Functional Requirements and Framework for Versioning on the WWW

This document gives a brief rationale for versioning on the WWW,
and presents some functional requirements based on the rationale.


Rationale

Versioning in the context of the world-wide web offers a variety of
benefits:

It allows more efficient management of large web sites.
It allows concurrent and controlled access to resources by
authors and editorsIt can enhance the quality of annotation support
(and other externally stored references) by preserving the
historical record of changes to WWW resourcesIt allows explicit semantic representation of
single resources with multiple states[Other rationale items to follow?]

This document gives requirements for extending WWW standards and
protocols to obtain these benefits.

Global requirements


This section covers the overarching contraints that must
inform and direct all the detailed requirements for specific features.
These encompass compatibility across different implementations, as well as
with current practice.
Therefore, we believe the following to be the general requirements for
versioning extensions:

Stableness of versions. Any successful attempt to retrieve a
named version of a resource will always retrieve exactly the same content.
To put it in another way, the content of a named version of a resource is
immutable (it is reliably either frozen or not available).

[No one has made this explicit, yet this is the
 distinctive feature essential to versioning systems]User Agent Interoperability.All
versioning-aware user agents should be able to work with any
versioning-aware HTTP server. It is acceptable for some user
agent/server combinations to provide special features that are not
universally available.

[This has also been implicit, yet somehow
forgotten. Better to
specify it]Legacy User Agent Support. Servers should make versioned
resources accessible to versioning-unaware user-agents
in a format acceptable to them.
[This is our justification for endorsing
Fiander's proposal that
URLs must be able to specify version information.]Legacy Resource Support. The protocol must enable a versioning
aware server to work with existing resources and URLs. Special versioning
information should not become a mandatory part of the protocol except where
it is absolutely required. Version information cannot therefore be required
in a URL for simple GET operations (and possibly also for POST).Separation of access to resources and access control The protocol
must provide ways to reserve or release versioned resources that are separated
from the ways to get to these resources. Provided that the required set of
consistency constraints are met before, during and after the modification of a
versioned resource, no "right way" to access to a resource is enforced by the
protocol. For instance, a user may request a lock *after* a GET, may POST a
resource without releasing the lock, and may request a lock within the means of
the protocol (HTTP connection) while getting the resource outside of it (FTP
access, direct file access, or simply because the right copy hung around her
disk after a previous access). This also provides a better policy for handling
versioning through proxies. 

Functional requirements

The protocol should provide:
Access to specific named versions via a URL
[Again, a part of one of David F.'s
requirements]Specific named version URLs that are constructed from an opaque URL and an
opaque version string.

[Because the notation will be required to
operate in the version control
environment preferred by the website maintainer, it must be able to properly
contain arbitrary strings, which may be used by the VCS as version
identifiers.  While version information may be intelligible to the human
operator, and perhaps to special-purpose clients, in the general case, we
must assume that the client treats the version as a black box.
This is David Fiander's justification copied in with a few minor
changes (we can't guarantee that version strings will be meaningful to a
human).]Direct access to a server-defined "default", "current" or "tip" version
of a resource.
[This provides one of the simplest ways to
guarantee legacy
user-agent compatibility, and legacy file compatibility. If no special
version URLs are used, the server can provide an intelligent default. This
does not rule out the possibility of a server returning an error in case
it believes that no such default exists.]A way to access common related URLs from a versioned URL, whether by
server query, URL computation, or some other way:
root version(s) of this documentpredecessor version(s) of this documentsuccessor version(s) of this documentdefault version of this documentcomplete version topology for this document
[This is a new one: *some* versions of a resource
are special. It
must be possible in some way for a versioning-aware client to access
common related versions to the one it currently is displaying. Possible
solutions include, but are not limited to: the server automatic adding
header fields to a versioned URL specifying the URL of the common
related versions, the server providing a query method ("who is the
previous version to this URL?"), or a standardized way to compute
related URL given a versioned URL. ]Some way (e.g.  by URL inspection or server query) to determine that a
URL points to a named version of a resource, and to tell the version
identification part from the resource identification part.
Note that the requirement that a user agent can determine a resource
name (URL) and a version identifier supports only some comparison
operations: It enables the determination that two version-containing URLs
designate versions of the same resource. However, given the phenomenon of
URL aliasing, it is insufficient to determine that they are not
versions of the same resource.
[This is a direct contradiction of one of David
F.'s requirements. We
feel that access to the "default" version of a resource is an extremely
important operation, that a browser should be able to perform at any time
that a versioned URL is seen. This is sort of a minimal "browsing through
time" requirement. Even if this kind of default access is not allowed for
encapsulation reasons,
this requirement allows a browser to tell that a versioned resource has been
accessed and then to invoke special versioning or configuration management
operations on the resource. We also don't see that determining this information
is any more pernicious that being able to determine that a URL contains a
query string -- indeed it's potentially more useful, as it tells you
about the identity of the referenced item, not one of its
properties.]a way to request exclusive access to a version of a resource (LOCK).a way to release exclusive acccess to a resource (UNLOCK),A way for a user-agent to request a version identifier for a checked
out version, with the understanding that it will not be used by any other
user-agent in the meantime. The server may refuse the service.a way to submit a resource as a version of an existing version of a
resource (POST or PUT), and have the server attach it to the correct part of
the version tree. The client may propose a version identifier upon
submitting the
resource. The server may refuse to use it. [ The last four functional requirements take
care of the last
global requirements: version access is now logically separated from
access control (LOCK/UNLOCK) and updating. In terms of traditional CM, a
CHECKOUT is a LOCK followed by a GET and a CHECKIN is a POST followed by
an UNLOCK.
 In this way, we get the advantage of separating access control (locking
and unlocking of resources) from modification of resources. We also have
many more options for the assigment of version numbers depending on
server policy. The version identifier of a new resource can be
negotiated between the user-agent and the server at 3 points in time:
when a lock is taken, when the lock is released, or when the resource is
POSTed. We also offer options (such as locking a resource without
modifying it) that will be useful in creating the configuration
management layer.
The hardest thing will be assuring that clients can work with servers
varying in locking policy from those that spawn versions rather than
implement locks, to those that allow optional locking, to those that
require locking (and possibly explicit control of version
branching at the same time). Even without getting into config
management, server policy on these issues varies a lot: we want a
protocol that will allow user-agents to work with all servers,
regardless of strategy.]



 Next message: Larry Masinter: "Re: Draft functional requirements (strawman or woodman, you decide!)"
 Previous message: Jim Whitehead: "Proposed agenda for San Mateo Meeting"

 Next in thread: Larry Masinter: "Re: Draft functional requirements (strawman or woodman, you decide!)"
 Maybe reply: Larry Masinter: "Re: Draft functional requirements (strawman or woodman, you decide!)"
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/draft-ietf-webdav-requirements-02.html
##-----------------TITLE------------------------##
WebDAV Requirements
##------------------TEXT------------------------##
WEBDAV Working Group				J.A. Slein
INTERNET-DRAFT      				Xerox Corporation
<draft-ietf-webdav-requirements-02.txt>		F. Vitali
						University of Bologna              
						E.J. Whitehead, Jr.
						U.C. Irvine
						D.G. Durand
						Boston University
						August 29, 1997

Expires February 28, 1998

Requirements for Distributed Authoring and Versioning 
on the World Wide Web


Status of this Memo

This document is an Internet draft. Internet drafts are working
documents of the Internet Engineering Task Force (IETF), its areas and
its working groups. Note that other groups may also distribute working
information as Internet drafts.

Internet Drafts are draft documents valid for a maximum of six months
and can be updated, replaced or obsoleted by other documents at any
time. It is inappropriate to use Internet drafts as reference material
or to cite them as other than as "work in progress".

To learn the current status of any Internet draft please check the
"lid-abstracts.txt" listing contained in the Internet drafts shadow
directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or
ftp.isi.edu (US West coast). Further information about the IETF can be
found at URL: http://www.ietf.org/

Distribution of this document is unlimited. Please send comments to the
WWW Distributed Authoring and Versioning (WebDAV) mailing list,
, which may be joined by sending a message with
subject "subscribe" to . Discussions are
archived at URL:
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/.

Abstract

Current World Wide Web (WWW or Web) standards provide simple support 
for applications which allow remote editing of typed data. In practice, 
the existing capabilities of the WWW have proven inadequate to support 
efficient, scalable remote editing free of overwriting conflicts.  
This document presents a list of features in the form of requirements 
which, if implemented, would improve the efficiency of common remote 
editing operations, provide a locking mechanism to prevent overwrite 
conflicts, improve link management support between non-HTML 
data types, provide a simple attribute-value metadata facility, provide
for the creation and reading of container data types, and integrate 
versioning into the WWW.

1. Introduction

This document describes functionality which, if incorporated in an 
extension to the existing HTTP proposed standard [HTTP], would allow tools 
for remote loading, editing and saving (publishing) of various media 
types on the WWW to interoperate with any compliant Web server. As much 
as possible, this functionality is described without suggesting a 
proposed implementation, since there are many ways to perform the 
functionality within the WWW framework. It is also possible that a 
single mechanism could simultaneously satisfy several requirements.

This document is intended to reflect the consensus of the WWW 
Distributed Authoring and Versioning working group (WebDAV) as to the 
functionality that needs to be standardized to support distributed 
authoring and versioning on the Web.

2. Rationale

Current Web standards contain functionality which enables the editing of 
Web content at a remote location, without direct access to the storage 
media via an operating system. This capability is exploited by several 
existing HTML distributed authoring tools, and by a growing number of 
mainstream applications (e.g., word processors) which allow users to 
write (publish) their work to an HTTP server. To date, experience from 
the HTML authoring tools has shown they are unable to meet their users' 
needs using the facilities of Web standards. The consequence of 
this is either postponed introduction of distributed authoring 
capability, or the addition of nonstandard extensions to the HTTP 
protocol or other Web standards.  These extensions, developed in 
isolation, are not interoperable.

Other authoring applications have wanted to access document repositories 
or version control systems through Web gateways, and have been similarly
frustrated.  Where this access is available at all, it is through
nonstandard extensions to HTTP or other standards that force clients to 
use a different interface for each vendor's service.

This document describes requirements for a set of standard extensions
to HTTP that would allow distributed Web authoring tools to provide
the functionality their users need by means of the same standard
syntax across all compliant servers. The broad categories of 
functionality that need to be standardized are:
Properties
Links
Locking
Reservations
Retrieval of Unprocessed Source
Partial Write
Name Space Manipulation
Collections
Versioning
Variants
Security
Internationalization

3. Terminology

Where there is overlap, usage is intended to be consistent with that in 
the HTTP 1.1 specification [HTTP].
Client
A program which issues HTTP requests and accepts responses.

Collection
A collection is a resource that contains other resources,
either directly or by reference.

Distributed Authoring Tool
A program which can retrieve a source entity via HTTP, allow 
editing of this entity, and then save/publish this entity
to a server using HTTP.

Entity
The information transferred in a request or response.

Hierarchical Collection
A hierarchical organization of resources.  A hierarchical
collection is a resource that contains other resources, 
including collections, either directly or by reference.

Link
A typed connection between two or more resources.

Lock
A mechanism for preventing anyone other than the owner of the
lock from accessing a resource.

Member of Version Graph
A resource that is a node in a version graph, and so is derived
from the resources that precede it in the graph, and is the 
basis of those that succeed it.

Property
Named descriptive information about a resource.

Reservation
A declaration that one intends to edit a resource.

Resource
A network data object or service that can be identified by
a URI.

Server
A program which receives and responds to HTTP requests.

User Agent
The client that initiates a request.

Variant
A representation of a resource.  A resource may have one or more
representations associated with it at any given time.

Version Graph
A directed acyclic graph with resources as its nodes, where
each node is derived from its predecessor(s).

Write Lock
A lock that prevents anyone except its owner from modifying
the resource it applies to.


4. General Principles

This section describes a set of general principles that the WebDAV
extensions should follow.  These principles cut across categories of
functionality.

4.1. User Agent Interoperability

All WebDAV clients should be able to work with any WebDAV-compliant HTTP
server. It is acceptable for some client/server combinations to provide
special features that are not universally available, but the protocol
should be sufficient that a basic level of functionality will be
universal.

4.2. Client Simplicity

The WebDAV extensions should be designed to allow client implementations
to be simple.

4.3. Legacy Client Support

It should be possible to implement a WebDAV-compliant server in such a
way that it can interoperate with non-WebDAV clients.  Such a server
would be able to understand any valid HTTP 1.1 request from an ordinary
Web client without WebDAV extensions, and to provide a valid HTTP 1.1 
response that does not require the client to understand the extensions.

4.4. Data Format Compatibility

WebDAV-compliant servers should be able to work with existing resources 
and URIs [URL]. Special additional information should not become a 
mandatory part of document formats.

4.5. Replicated, Distributed Systems

Distribution and replication are at the heart of the Internet.  All
WebDAV extensions should be designed to allow for distribution and
replication.  Version trees should be able to be split across multiple
servers.  Collections may have members on different servers.  Resources
may have properties on different servers.  Any resources may be cached
or replicated for mobile computing or other reasons.  Consequently, the
WebDAV extensions must be able to operate in a distributed, replicated
environment.

4.6 Parsimony in Client-Server Interactions 

The WebDAV extensions should keep to a minimum the number of 
interactions between the client and the server needed to perform common
functions. For example, publishing a document to the Web will often mean
publishing content together with related properties.  A client may often 
need to find out what version graph a particular resource belongs to, 
or to find out which resource in a version graph is the published one.
The extensions should make it possible to do these things efficiently.

4.7. Changes to HTTP

WebDAV adds a number of new types of objects to the Web: properties, 
collections, version graphs, etc.  Existing HTTP methods such as
DELETE and PUT will have to operate in well-defined ways in this 
expanded environment. WebDAV should explicitly address not only new
methods, headers, and MIME types, but also any required changes to the
existing HTTP methods and headers.

4.8. Alternate Transport Mechanisms

It may be desirable to transport WebDAV requests and responses by other
mechanisms, particularly EMail, in addition to HTTP.  The WebDAV protocol
specification should not preclude a future body from developing an
interoperability specification for disconnected operation via EMail.

5. Requirements

In the requirement descriptions below, the requirement will be stated,
followed by its rationale.

5.1. Properties

5.1.1. Functional Requirements

It must be possible to create, modify, read and delete arbitrary
properties on resources of any media type.

5.1.2. Rationale 

Properties describe resources of any media type.  They may 
include bibliographic information such as author, title, publisher, 
and subject, constraints on usage, PICS ratings, etc. These
properties have many uses, such as supporting searches on property
values, enforcing copyrights, and the creation of catalog entries as 
placeholders for objects which are not available in electronic form, or 
which will be available later.

5.2. Links

5.2.1. Functional Requirements

It must be possible to create, modify, read and delete typed 
links between resources of any media type.

5.2.2. Rationale 

One type of link between resources is the hypertext link, which is 
browsable using a hypertext style point-and-click user interface. Links, 
whether they are browsable hypertext links, or simply a means of 
capturing a connection between resources, have many purposes.  Links 
can support pushbutton printing of a multi-resource document in a 
prescribed order, jumping to the access control page for a resource, 
and quick browsing of related information, such as a table of contents, 
an index, a glossary, a bibliographic record, help pages, etc. While 
link support is provided by the HTML "LINK" element, this is limited 
only to HTML resources [HTML]. Similar support is needed for bitmap image 
types, and other non-HTML media types.  

5.3. Locking

5.3.1. General Principles

5.3.1.1. Independence of locks. It must be possible to lock a resource
without re-reading the resource, and without committing to editing the 
resource.

5.3.1.2. Multi-Resource Locking. It must be possible to take out a 
lock on multiple resources residing on the same server in a single action, 
and this locking operation must be atomic across these resources.

5.3.2. Functional Requirements

5.3.2.1. Write Locks. It must be possible to restrict modification of 
a resource to a specific person.

5.3.2.2. Lock Query. It must be possible to find out whether a given 
resource has any active locks, and if so, who holds those locks.

5.3.2.3. Unlock. It must be possible to remove a lock.

5.3.3. Rationale

At present, the Web provides limited support for preventing two or more 
people from overwriting each other's modifications when they save to a 
given URI. Furthermore, there is no way to discover whether someone else
is currently making modifications to a resource. This is known as the 
"lost update problem," or the "overwrite problem." Since there can be 
significant cost associated with discovering and repairing lost 
modifications, preventing this problem is crucial for supporting 
distributed authoring. A write lock ensures that only one person may 
modify a resource, preventing overwrites. Furthermore, locking support 
is a key component of many versioning schemes, a desirable capability 
for distributed authoring.

An author may wish to lock an entire web of resources even though he 
is editing just a single resource, to keep the other resources from 
changing. In this way, an author can ensure that if a local hypertext 
web is consistent in his distributed authoring tool, it will then be 
consistent when he writes it to the server. Because of this, it should 
be possible to take out a lock without also causing transmission of the 
contents of a resource.

It is often necessary to guarantee that a lock or unlock operation 
occurs at the same time across multiple resources, a feature which is 
supported by the multiple-resource locking requirement. This is useful 
for preventing a collision between two people trying to establish locks 
on the same set of resources, since with multi-resource locking, one of 
the two people will get a lock. If this same multiple-resource locking 
scenario was repeated by using atomic lock operations iterated across 
the resources, the result would be a splitting of the locks between the 
two people, based on resource ordering and race conditions.

5.4. Reservations

5.4.1. Functional Requirements 

5.4.1.1. Reserve. It must be possible for a principal to register with 
the server an intent to edit a given resource, so that other principals 
can discover who intends to edit the resource.

5.4.1.2. Reservation Query. It must be possible to find out whether 
a given resource has any active reservations, and if so, who currently 
holds reservations.

5.4.1.3. Release Reservation.  It must be possible to release the 
reservation.

5.4.2. Rationale

Experience from configuration management systems has shown that people 
need to know when they are about to enter a parallel editing situation. 
Once notified, they either decide not to edit in parallel with the 
other authors, or they use out-of-band communication (face-to-face, 
telephone, etc.) to coordinate their editing to minimize the difficulty 
of merging their results. Reservations are separate from locking, since 
a write lock does not necessarily imply a resource will be edited, and 
a reservation does not carry with it any access restrictions. This 
capability supports versioning, since a check-out typically involves 
taking out a write lock, making a reservation, and getting the resource
to be edited.

5.5. Retrieval of Unprocessed Source for Editing

5.5.1. Functional Requirement

The source of any given resource must be retrievable.

5.5.2. Rationale

There are many cases where the source stored on a server does 
not correspond to the actual entity transmitted in response to an HTTP 
GET. Current known cases are server side include directives, and 
Standard Generalized Markup Language (SGML) source which is
converted on the fly to HyperText Markup Language (HTML) [HTML] output 
entities. There are many possible cases, such as automatic conversion 
of bitmap images into several variant bitmap media types (e.g. GIF, 
JPEG), and automatic conversion of an application's native media type 
into HTML. As an example of this last case, a word processor could 
store its native media type on a server which automatically converts 
it to HTML. A GET of this resource would retrieve the HTML. Retrieving 
the source would retrieve the word processor native format.

5.6. Partial Write.

5.6.1. Functional Requirement 

After editing a resource, it must be possible to write only the changes
to the resource, rather than retransmitting the entire resource.

5.6.2. Rationale

During distributed editing which occurs over wide geographic separations
and/or over low bandwidth connections, it is extremely inefficient
and frustrating to rewrite a large resource after minor changes, such 
as a one-character spelling correction. Support is needed for 
transmitting "insert" (e.g., add this sentence in the middle of a 
document) and "delete" (e.g. remove this paragraph from the middle of 
a document) style updates. Support for partial resource updates will 
make small edits more efficient, and allow distributed authoring tools 
to scale up for editing large documents.

5.7. Name Space Manipulation

5.7.1. Copy

5.7.1.1. Functional Requirements 

It must be possible to duplicate a resource without a client loading, 
then resaving the resource. After the copy operation, the content of 
the destination resource must be octet for octet identical to the 
content of the source resource. A modification to either resource must 
not cause a modification to the other.

5.7.1.2. Rationale

There are many reasons why a resource might need to be duplicated, such 
as changing ownership, preparing for major modifications, or making 
a backup. Due to network costs associated with loading and saving a 
resource, it is far preferable to have a server perform a resource copy
than a client. If a copied resource records which resource it is a copy
of, then it would be possible for a cache to avoid loading the copied 
resource if it already locally stores the original.

5.7.2. Move/Rename

5.7.2.1. Functional Requirements 

It must be possible to change the location of a resource without 
a client loading, then resaving the resource under a different name. 
After the move operation, the content of the resource at its new 
location must be octet for octet identical to the content of the prior 
resource. It must no longer be possible to access the resource at its 
original location.

5.7.2.2. Rationale

It is often necessary to change the name of a resource, for example due 
to adoption of a new naming convention, or if a typing error was made 
entering the name originally. Due to network costs, it is undesirable 
to perform this operation by loading, then resaving the resource,
followed by a delete of the old resource. Similarly, a single rename 
operation is more efficient than a copy followed by a delete operation.
Note that moving a resource is considered the same function as renaming
a resource.

5.8. Collections

A collection is a resource that is a container for other resources,
including other collections.  A resource may belong to a collection
either directly or by reference.  If a resource belongs to a
collection directly, name space operations like copy, move, and
delete applied to the collection also apply to the resource.  If a
resource belongs to a collection by reference, name space operations
applied to the collection affect only the reference, not the resource
itself.

5.8.1. Functional Requirements

5.8.1.1. List Collection. A listing of all resources in a specific 
collection must be accessible.

5.8.1.2. Make Collection. It must be possible to create a new 
collection.

5.8.1.3. Add to Collection.  It must be possible to add a resource to a
collection directly or by reference.

5.8.1.4. Remove from Collection.  It must be possible to remove a
resource from a collection.

5.8.2. Rationale

In [URL] it states that, "some URL schemes (such as the ftp, http, and 
file schemes) contain names that can be considered hierarchical." 
Especially for HTTP servers which directly map all or part of their URL 
name space into a filesystem, it is very useful to get a listing of all 
resources located at a particular hierarchy level. This functionality 
supports "Save As..." dialog boxes, which provide a listing of the 
entities at a current hierarchy level, and allow navigation through 
the hierarchy. It also supports the creation of graphical visualizations
(typically as a network) of the hypertext structure among the entities 
at a hierarchy level, or set of levels. It also supports a tree
visualization of the entities and their hierarchy levels.

In addition, document management systems may want to make their 
documents accessible through the Web.  They typically allow the 
organization of documents into collections, and so also want their users
to be able to view the collection hierarchy through the Web.

There are many instances where there is not a strong correlation between
a URL hierarchy level and the notion of a collection. One example is a 
server in which the URL hierarchy level maps to a computational process 
which performs some resolution on the name. In this case, the contents 
of the URL hierarchy level can vary depending on the input to the 
computation, and the number of resources accessible via the computation 
can be very large. It does not make sense to implement a directory 
feature for such a name space. However, the utility of listing the 
contents of those URL hierarchy levels which do correspond to 
collections, such as the large number of HTTP servers which map their 
name space to a filesystem, argue for the inclusion of this capability, 
despite not being meaningful in all cases. If listing the contents of 
a URL hierarchy level does not makes sense for a particular URL, then 
a "405 Method Not Allowed" status code could be issued.

The ability to create collections to hold related resources supports 
management of a name space by packaging its members into small, related 
clusters. The utility of this capability is demonstrated by the broad 
implementation of directories in recent operating systems. The ability 
to create a collection also supports the creation of "Save As..." 
dialog boxes with "New Level/Folder/Directory" capability, common in 
many applications.

5.9. Versioning

5.9.1. Background and General Principles

5.9.1.1. Stability of versions. Most versioning systems are intended to
provide an accurate record of the history of evolution of a document. 
This accuracy is ensured by the fact that a version eventually becomes 
"frozen" and immutable. Once a version is frozen, further changes will 
create new versions rather than modifying the original. In order for 
caching and persistent references to be properly maintained, a client 
must be able to determine that a version has been frozen. Any successful
attempt to retrieve a frozen version of a resource will always retrieve
exactly the same content, or return an error if that version (or the 
resource itself) is no longer available.

5.9.1.2. Operations for Creating New Versions

Version management systems vary greatly in the operations they require,
the order of the operations, and how they are combined into atomic
functions.  In the most complete cases, the logical operations involved
are:
Reserve existing version
Lock existing version
Retrieve existing version
Request or suggest identifier for new version
Write new version
Release lock
Release reservation

With the exception of requesting a new version identifier, all of these
operations have applications outside of versioning and are either 
already part of HTTP or are discussed in earlier sections of these
requirements. Typically, versioning systems combine reservation, 
locking, and retrieval -- or some subset of these -- into an atomic 
checkout function.  They combine writing, releasing the lock, and 
releasing the reservation -- or some subset of these -- into an atomic 
checkin function.  The new version identifier may be assigned either at 
checkout or at checkin.

The WebDAV extensions must find some balance between allowing versioning
servers to adopt whatever policies they wish with regard to these 
operations and enforcing enough uniformity to keep client 
implementations simple.

5.9.1.3. The Versioning Model

Each version typically stands in a "derived from" relationship to its 
predecessor(s).  It is possible to derive several different versions 
from a single version (branching), and to derive a single version from 
several versions (merging).  Consequently, the collection of related
versions forms a directed acyclic graph.  In the following discussion,
this graph will be called a "version graph".  Each node of this graph
is a "version" or "member of the version graph".  The arcs of the graph
capture the "derived from" relationships.

It is also possible for a single resource to participate in multiple
version graphs.

The WebDAV extensions should support this versioning model, though
particular servers may restrict it in various ways.

5.9.1.4. Versioning Policies. Many writers, including Feiler [CM] and 
Haake and Hicks [VSE], have discussed the notion of versioning styles 
(referred to here as versioning policies, to reflect the nature of 
client/server interaction) as one way to think about the different 
policies that versioning systems implement. Versioning policies include
decisions on the shape of version histories (linear or branched), the 
granularity of change tracking, locking requirements made by a server, 
etc. The protocol should clearly identify the policies that it dictates
and the policies that are left up to versioning system implementors or
administrators.

5.9.1.5. It is possible to version resources of any media type.

5.9.2. Functional Requirements

5.9.2.1. Referring to a version graph. There must be a way to refer to
a version graph as a whole.  

Some queries and operations apply, not to any one member of a
version graph, but to the version graph as a whole.  For example, a 
client may request that an entire graph be moved, or may ask for a 
version history. In these cases, a way to refer to the whole version 
graph is required.

5.9.2.2. Referring to a specific member of a version graph. There must
be a way to refer to each member of a version graph. This means that 
each member of the graph is itself a resource. 

Each member of a version graph must be a resource if it is to be 
possible for a hypertext link to refer to specific version of a page, 
or for a client to request a specific version of a document for editing.

5.9.2.3. A client must be able to determine whether a resource is a 
version graph, or whether a resource is itself a member of a version 
graph.

A resource may be a simple, non-versioned resource, or it may be a 
version graph, or it may be a member of a version graph.  A client needs
to be able to tell which sort of resource it is accessing.

5.9.2.4. There must be a way to refer to a server-defined default 
member of a version graph.

The server should return a default version of a resource for requests 
that ask for the default version, as well as for requests where no
specific version information is provided. This is one of the simplest 
ways to guarantee non-versioning client compatibility. This does not 
rule out the possibility of a server returning an error when no sensible
default exists.

It may also be desirable to be able to refer to other special members 
of a version graph. For example, there may be a current version for
editing that is different from the default version.  For a graph with
several branches, it may be useful to be able to request the tip version
of any branch.

5.9.2.5. It must be possible, given a reference to a member of a version
graph, to find out which version graph(s) that resource belongs to.

This makes it possible to understand the versioning context of the 
resource. It makes it possible to retrieve a version history for the 
graphs to which it belongs, and to browse the version graph. It also 
supports some comparison operations: It makes it possible to determine 
whether two references designate members of the same version graph.

5.9.2.6. Navigation of a version graph.  Given a reference to a member 
of a version graph, it must be possible to discover and access the 
following related members of the version graph.
root member of the graph
predecessor member(s)
successor member(s)
default member of the graph

It must be possible in some way for a versioning client to access
versions related to a resource currently being examined.

5.9.2.7. Version Topology. There must be a way to retrieve the complete 
version topology for a version graph, including information about all 
members of the version graph. The format for this information must be 
standardized so that the basic information can be used by all clients. 
Other specialized formats should be accommodated, for servers and 
clients that require information that cannot be included in the 
standard topology.

5.9.2.8. A client must be able to propose a version identifier to be 
used for a new member of a version graph. The server may refuse to use 
the client's suggested version identifier.  The server should tell the
client what version identifier it has assigned to the new member of the
version graph.

5.9.2.9. A version identifier must be unique across a version graph.

5.9.2.10. A client must be able to supply version-specific properties to 
be associated with a new member of a version graph. (See Section 5.1 
"Properties" above.) At a minimum, it must be possible to associate 
comments with the new member, explaining what changes were made.

5.9.2.11. A client must be able to query the server for information 
about a version tree, including which versions are locked, which are 
reserved for editing, and by whom (Session Tracking).

5.9.3. Rationale

Versioning in the context of the world-wide web offers a variety of
benefits:

It provides infrastructure for efficient and controlled management of 
large evolving web sites. Modern configuration management systems are 
built on some form of repository that can track the revision history of
individual resources, and provide the higher-level tools to manage 
those saved versions. Basic versioning capabilities are required to 
support such systems.

It allows parallel development and update of single resources. Since 
versioning systems register change by creating new objects, they
enable simultaneous write access by allowing the creation of variant
versions. Many also provide merge support to ease the reverse operation.

It provides a framework for coordinating changes to resources. While 
specifics vary, most systems provide some method of controlling or 
tracking access to enable collaborative resource development.

It allows browsing through past and alternative versions of a resource.
Frequently the modification and authorship history of a resource is
critical information in itself.

It provides stable names that can support externally stored links for
annotation and link-server support. Both annotation and link servers 
frequently need to store stable references to portions of resources 
that are not under their direct control. By providing stable states of 
resources, version control systems allow not only stable pointers into 
those resources, but also well-defined methods to determine the 
relationships of those states of a resource.

It allows explicit semantic representation of single resources with 
multiple states. A versioning system directly represents the fact that 
a resource has an explicit history, and a persistent identity across 
the various states it has had during the course of that history.

5.10. Variants

5.10.1. Functional Requirements

It must be possible to send variants to the server, describing the 
relationships between the variants and their parent resource.  In 
addition, it must be possible to write and retrieve variants of
property labels, property descriptions, and property values.

5.10.2. Rationale

The HTTP working group is addressing problems of content negotiation
and retrieval of variants of a resource.  To extend this work to an 
authoring environment, WEBDAV must standardize mechanisms for authors 
to use when submitting variants to a server.  Authors need to be able 
to provide variants in different file or document formats, for different 
uses. They need to provide variants optimized for different for different
clients and for different output devices.  They need to be able to provide 
variants in different languages in the international environment of the Web.
In support of internationalization requirements (See 5.12 below), variants 
need to be supported not just for the content of resources, but for any 
information intended for human use, such as property values, labels, and 
descriptions.

5.11. Security

5.11.1. Authentication. The WebDAV specification should state how the 
WebDAV extensions interoperate with existing authentication schemes, 
and should make recommendations for using those schemes.

5.11.2. Access Control. Access control requirements are specified 
in a separate access control draft [AC].

5.11.3. Interoperability with Security Protocols. The WebDAV 
specification should provide a minimal list of security protocols
which any compliant server / client should support.  These protocols
should insure the authenticity of messages and the privacy and 
integrity of messages in transit.

5.12. Internationalization

5.12.1. Character Sets and Languages

Since Web distributed authoring occurs in a multi-lingual 
environment, information intended for user comprehension must 
conform to the IETF Character Set Policy [CHAR].  This policy
addresses character sets and encodings, and language tagging.

5.12.2. Rationale

In the international environment of the Internet, it is important 
to insure that any information intended for user comprehension can be
displayed in a writing system and language agreeable to both the 
client and the server. The information encompassed by this requirement 
includes not only the content of resources, but also such things as
display names and descriptions of properties, property values, and 
status messages. 

6. Acknowledgements

Our understanding of these issues has emerged as the result of much
thoughtful discussion, email, and assistance by many people, who
deserve recognition for their effort.
Terry Allen, tallen@sonic.net
Alan Babich, FileNet, babich@filenet.com
Dylan Barrell, Open Text, dbarrell@opentext.ch
Barbara Bazemore, PC DOCS, barbarab@pcdocs.com
Martin Cagan, Continuus Software, Marty_Cagan@continuus.com
Steve Carter, Novell, srcarter@novell.com
Dan Connolly, World Wide Web Consortium, connolly@w3.org
Jim Cunningham, Netscape, jfc@netscape.com
Ron Daniel Jr., Los Alamos National Laboratory, rdaniel@lanl.gov
Mark Day, Lotus, Mark_Day@lotus.com
Martin J. Duerst, mduerst@ifi.unizh.ch
Asad Faizi, Netscape, asad@netscape.com
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Mark Fisher, Thomson Consumer Electronics, FisherM@indy.tce.com
Yaron Y. Goland, Microsoft, yarong@microsoft.com
Phill Hallam-Baker, MIT, hallam@ai.mit.edu
Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com
Andre van der Hoek, University of Colorado, Boulder,
  andre@cs.colorado.edu
Del Jensen, Novell, dcjensen@novell.com
Gail Kaiser, Columbia University, kaiser@cs.columbia.edu
Rohit Khare, World Wide Web Consortium, khare@w3.org
Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Ben Laurie, A.L. Digital, ben@algroup.co.uk
Mike Little, Bellcore, little@bellcore.com
Dave Long, America Online, dave@sb.aol.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Jim Miller, World Wide Web Consortium, jmiller@w3.org
Howard S. Modell, Boeing, howard.s.modell@boeing.com
Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Jon Radoff, NovaLink, jradoff@novalink.com
Alan Robertson, alanr@bell-labs.com
Henry Sanders, Microsoft, 
Andrew Schulert, Microsoft, andyschu@microsoft.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Einar Stefferud, stef@nma.com
Richard Taylor, U.C. Irvine, taylor@ics.uci.edu
Robert Thau, MIT, rst@ai.mit.edu
Sankar Virdhagriswaran, sv@hunchuen.crystaliz.com
Dan Whelan, FileNet, dan@FILENET.COM
Gregory J. Woodhouse, gjw@wnetc.com

7. References

[AC] J. Radoff, "Requirements for Access Control within 
Distributed Authoring and Versioning Environments on the World 
Wide Web".

[CHAR] H.T. Alvestrand, "IETF Policy on Character Sets and Languages", 
June 1997, working draft, draft-alvestrand-charset-policy-00.txt.

[CM] P. Feiler, "Configuration Management Models in Commercial
Environments", Software Engineering Institute Technical Report
CMU/SEI-91-TR-7, 


[HTML] T. Berners-Lee, D. Connolly, "HyperText Markup Language
Specification - 2.0", RFC 1866, MIT/LCS, November 1995.

[HTTP] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and
T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC 2068,
U.C. Irvine, DEC, MIT/LCS, January 1997.

[ISO 10646] ISO/IEC 10646-1:1993. "International Standard --
Information Technology -- Universal Multiple-Octet Coded Character
Set (UCS) -- Part 1: Architecture and Basic Multilingual Plane."

[URL] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)", RFC 1738, CERN, Xerox PARC, University of Minnesota,
December 1994.

[VSE] A. Haake, D. Hicks, "VerSE: Towards Hypertext Versioning Styles", 
Proc. Hypertext'96, The Seventh ACM Conference on Hypertext, 1996,
pages 224-234.

8. Authors' Addresses

Judith Slein
Xerox Corporation
800 Phillips Road 128-29E
Webster, NY 14580

EMail: slein@wrc.xerox.com

Fabio Vitali
Department of Computer Science
University of Bologna
ITALY

EMail: fabio@cs.unibo.it

E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Fax: 714-824-4056
EMail: ejw@ics.uci.edu

David G. Durand
Department of Computer Science
Boston University
Boston, MA

EMail: dgd@cs.bu.edu

Expires February 28, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/vers-req-091296.html
##-----------------TITLE------------------------##
Functional Requirements and Framework for Versioning on the WWW
##------------------TEXT------------------------##
Functional Requirements and Framework for Versioning on the WWW
David G. Durand and Fabio Vitali

Changes from last version

lock durationsseparate locking / resource reservationclarify/reorder pointsstyle-free versioning

Abstract


This document describes the functional requirements for integrating
versioning into the WWW.  Versioning is the fundamental basis of document
management systems, with far reaching effects on the semantics of document
identity and meaningful operations.  These requirements reflect
the basic versioning needs for document management and collaborative
authoring.  It does not define the complete set of requirements for these
domains where they extend beyond the versioning of resources.


1. Introduction
This document discusses why versioning is needed on the WWW, and the
functional requirements for full version support.  We have divided the
requirements in three sections.  This discussion enumerates the reqirements
for implementing such functionality as a first step to creating a
specification that will address these needs.

We first briefly describe the rationale for versioning on the web in
Section 2.  This rationale enumerates the goals of versioning on the WWW.
All specific requirements should support (and certainly should not hinder)
the realization of the goals.  Section 3 contains global requirements for
protocol development.  These are things we think are technically justified
and that fulfil the rationale.  They are separated from the other
requirements because their acceptance creates further constraints on other
technical requirements.  Finally, In Section 4, we specific functional
requirements based on the foundation established in the earlier sections.

We have based this effort on David Fiander's suggestion to separate
versioning and configuration requirements, and we assume a two-layer
architecture for versioning on the web.  The first layer, whose
requirements are defined in this document, will address the simple problem
of handling multiple versions of single resources. The second
layer will address the thornier problems of configuration management for
multiple resources.  This layering simplifies both discussion and design.

2. Rationale

Versioning in the context of the world-wide web offers a variety of
benefits:

It provides infrastructure for efficient and controlled
management of large evolving web sites.
Modern configuration management systems are built on some form of
repository that can track the revision history of individual resources, and
provide the higher-levelools to manage those saved versions. Basic
versioning capabilities are required to support such systems.It allows parallel development and update of single resources
Since versioning systems register change by creating new objects, they
enable simultaneous write access by allowing the creation of variant
versions. Many also provide merge support to ease the revers operation.It provides a framework for access control over resources.
While specifics vary, most systems provide some method of
controlling or
tracking access to enable collaborative resource development.It allows browsing through past and alternative versions of a
resource
Frequently the modification and authorship history of a resource is
critical information in itself.It provides stable names that can support externally stored links for
annotation and link-server support.
Both annotation and link servers frequently need to store stable
references to portions of resources that are not under their direct
control. By providing stable states of resources, version control systems
allow not only stable pointers into those resources, but also well-defined
methods to determine the relationships of those states of a resource.It allows explicit semantic representation of single resources with
multiple states
A versioning system directly represents the fact that a resource
has an
explicit history, and a persistent identity across the various states it
has had during the course of that history.

3. Global requirements

This section covers the overarching contraints that must
inform and direct detailed requirements for versioning support.  They
encompass compatibility across different implementations, as well as
compatibility with current practice.  Therefore, we believe the following
to be the general requirements for WWW versioning:


Stableness of versions.

Most versioning systems are intended to enable an accurate record of the
history of evolution of a document.  This accuracy is ensured by the fact
that a version eventually becomes "frozen" and immutable.  Once a version
is frozen, further changes will create new versions rather than modifying
the original.  In order for caching and persistent references to be
properly maintained, a client must be able to determine that a version has
been frozen.  We require that unlocked resource versions be frozen.  This
enables the common practice of keeping unfrozen "working versions".  Any
successful attempt to retrieve a frozen version of a resource will always
retrieve exactly the same content, or return an error if that version (or
the resource itself) are no longer available.  Since URLs may be
reassigned at a server's discretion this requirement applies only for that
period of time during which a URL identifies the same resource.

User Agent Interoperability.

All versioning-aware user agents should be able to work with any
versioning-aware HTTP server.  It is acceptable for some user agent/server
combinations to provide special features that are not universally
available, but the protocol should be sufficient that a basic level of
functionality will be universal.
Style-free Versioning

The protocol should not unnecessarily restrict version management style to
any one paradigm.  For instance, locking and version number assignment
should be interoperable across servers and clients, even if there are some
differences in their preferred models.

Separation of access to resources and access control

The protocol must separate the reservation and release of versioned
resources from their access methods.  Provided that consistency constraints
are met before, during and after the modification of a versioned resource,
no "right way" to access to a resource is enforced by the protocol.  For
instance, a user may request declare an intention to write after a GET, may
POST a resource without releasing the lock, and might even request a lock
via HTTP connection while getting the document via FTP.Legacy Resource Support.

The protocol should enable a versioning aware server to work with existing
resources and URLs.  Special versioning information should not become a
mandatory part of HTTP protocols except where it is required.  Special
version information that would break existing clients and servers, such as new
mandatory headers, cannot therefore be required for GET (and possibly also for
PUT).
Legacy User Agent Support.

Servers should make versioned resources accessible to versioning-unaware
user-agents in a format acceptable to them.
Specific named version URLs that are constructed from a URL
and an opaque version string

Because the notation will be required to operate in the version control
environment preferred by the website maintainer, it must be able to
properly contain arbitrary strings, which may be used by the VCS as version
identifiers.  While version information may be intelligible to the human
operator, and perhaps to special-purpose clients, the client must be
able to treat the version specifier as a black box.
4. Functional requirements
The following functional reqirements are intended to satisfy the global
requirements of Section 3 and enable the benefits listed in Section 2.  The
mention of possible new HTTP methods is intended to make the discussion
clearer and more concrete, not to rule out other methods of meeting the
requirements.

The protocol should provide:

Access to specific named versions via a URL

This is required for version-specific linking, and for legacy user-agent
support.A URL to denote a versioned resource itself, rather than specific
versions of it

This is more important if URL computations are not allowed, since an
identifier is needed for queries about the versioning status of a resource.
This is used to perform operations (such as adjusting attributes, changing
locks, or reassigning URLs) that affect all versions of a resource, rather
than any specific version.
Direct access to a server-defined "default", "current" or "tip" version
of a resource

This is one of the simplest ways to guarantee legacy user-agent
compatibility and legacy file compatibility.  If no special version URLs
are used, the server will provide a default.  This does not rule out the
possibility of a server returning an error in case no such default exists.
A way to access common related URLs from a versioned URL,
whether by
server query, URL computation, or some other way:
root version(s) of this documentpredecessor version(s) of this documentsuccessor version(s) of this documentdefault version of this document
Some versions of a resource are special.  It must be possible in some way
for a versioning-aware client to access common related versions to the one
it currently is displaying.  Possible solutions include, but are not
limited to: the server automatically adding header fields to a versioned
URL specifying the URL of the common related versions, the server providing
one or more query methods ("who is the previous version to this URL?"), or
a standardized way to compute related URLs when given a versioned URL. We
feel that access to the "default" version of a resource is an extremely
important operation, that a browser should be able to perform at any time
that a versioned URL is seen.
A way to retrieve the complete version topology for this resource

There should be a way to retrieve information about all versions of a
resource.  The format for this information must be standardized so that the
basic information can be used by all clients.  Some way to determine that a
URL points to a named version of a resource

This might be implemented as part of the URL format, a server query or
additional headers.
Some way to determine a version identification and a resource
identification for a versioned resource, given its URL

This requirement describe the ability to take the URL of a version of a
resource and determine:
a URL for the resourcea version identifier for the resource.
Note that this kind of facility supports only some comparison operations: It
enables the determination that two version-containing URLs designate
versions of the same resource.  However, given the phenomenon of URL
aliasing, it is insufficient to determine that they are not
versions of the same resource.

This is sort of a minimal "browsing
through time" requirement.  Tthis requirement allows a browser to tell that a
versioned resource has been accessed and then to invoke special versioning
or configuration management operations on the resource.  While client
performance will be best if this can be done via URL computation (ie.
mangling) it could also be done by an extra query and round-trip to
the server.A way to request exclusive access to a version of a resource
(LOCK)

Since not all systems implement lock-based access there is a
question as how this should be implemented. Client use of this
method could be optional, allowing some relatively strong guarantee on the
meaning of acquiring a lock.  Alternatively, clients could be expected to
take a lock, but servers might implement different locking policies
(possible even including implementation of LOCK and UNLOCK as NOPS).
A way to specify a timeout after which a lock will lapse

In many cases, locks over a certain duration are due to errors, and their
strict enforcement can cause more problems than inadvertent version skew.
We should allow locks to have a lifetime.  It may prove a good idea to
have a finite default lifetime defined by the protocol.  If a universal
default is too constraining, there should be a way for a server to inform
the client what the lifetime of a lock is.  Servers should honor client
lock lifetime requests, or inform them if the request is denied.

A way to release exclusive acccess to a resource (UNLOCK)

This is the inverse of LOCK.A way for a client to declare an intention to modify a resource
(RESERVE or CHECKOUT?)

This operation is required before any versioned update.  Its effects may
vary depending on server policy, from locking a resource, to forking a new
variant, to a NOP on servers that do not track sessions or restrict
updates.  If this operation returns a version number, the client is
required to make sure that it uses a copy of the data associated with that
version number of the resource for any update operations it carries out.
Servers that wish to enforce a mandatory GET operation before update, should
simply use a fresh version identifier on the return from this operation.
A way to declare the end of an intention to write a resource

This is the inverse of RESERVE.  Typically, servers will commit
updates at this time, and return a final version identifier if possible
and if it was not already returned.A way to submit a new version of a resource (PUT)

The server should be able to attach it to the correct part of the version
tree, based on the version number associated with the resource before its
modification.
A way for a user-agent to request a version identifier for a checked
out version.

Such an identifier will not be used by any other
user-agent in the meantime.  The server may refuse the request.A way for a client to propose a version identifier upon
submitting a version of a resource

The server may refuse to to use the client's suggested version identifier.
A way for a Client to supply metatdata to be associated with a
version

The kinds of data supplied here might be simple textual comments or more
structured data.  An ability to attach aritrary fields and content is
probably required, but a standard set of attributes that would enable
interoperation would be useful.  For basic versioning we need only specify,
for example, that comments are attached as the message-body of the operation
that releases a write intention.  The special formats for structured metadata
can then be handled by using content-type negotiation, and the
content-types defined as part of the Configuration Management layer.
A way for a server to provide a version identifier to be used for a
resource in further operations/

This general requirement notes that version aware clients are responsible
for providing the appropriate version identifier for a resource that is
being manipulated.  In particular, if a resource is being modified, any
server provided version must be used when submitting an update.  This
allows servers to track active sessions (however they may be implemented by
the server) by assigning version identifiers when documents are retrieved,
locked, or reserved.


The following discussion of possible implementations of the requirements
above is intended to aid understanding of the requirements.  It is
not a statement that a particular implementation is a requirement
for basic versioning, but an explanation of how the separation of concerns
might improve the final implementation architecture.

The requirements on reservation and PUT take care some key global
requirements: version access is logically separated from access control
(RESERVE/RELEASE) and updating.  In terms of traditional CM, a CHECKOUT is a
RESERVE followed by a GET and a CHECKIN is a PUT followed by an RELEASE.  By
separating access control (locking and unlocking of resources) from
modification of resources, we achieve a great deal of versioning-style
independence.

We also have very flexible options for the negotiation of
version identifiers depending on server policy.  The version identifier of a
new resource can be negotiated between the user-agent and the server at 3
points in time: when a lock is taken, when the lock is released, or when
the resource is POSTed.  Session tracking can be implemented by using
special version identifiers for RESERVE and RELEASE.  All version
identifier negotiation follows a simple rule: "the client proposes, but the
server disposes."

Acknowledgements
This document is a result of the vigorous and valuable discussion on the
Versioning on the Web 
<www-vers-wg-request@ics.uci.edu>, and the Distributed Authoring
<w3c-dist-auth-request@w3.org&
gt;
mailing lists.  All the the interactions on these lists have been helpful,
as have several conversations.
David Fiander's initial requirements got us started and clarified several
points .  Jim Whitehead provided useful criticism, some new points, and
impetus to get this thing out the door.  Yaron Golan and Christopher
Seiwald provided extensive commentary and discussion.
The following list include the above and others who have also helped
either with their postings, personal email or face-to-face discussions:


Dan Connolly, World Wide Web Consortium, connolly@w3.org
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Yaron Goland, Microsoft, yarong@microsoft.com
Dave Long, America Online, dave@sb.aol.com
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Judith Slein, Xerox, slein@wrc.xeroc.com

To Do


Mandatory IETF formatting.  Proofread.  Spell check.  Sanity check.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/versioning/arch/0047.html
##-----------------TITLE------------------------##
Archive of Working Group on Versioning and Configuration Management of World Wide Web Content: High-level capabilities
##------------------TEXT------------------------##
High-level capabilities
Jim Whitehead (ejw@ics.uci.edu)
Thu, 6 Jun 1996 11:57:28 -0700

 Messages sorted by: [ date ][ thread ][ subject ][ author ]

 Next message: David G. Durand: "Re: High-level capabilities"
 Previous message: David G. Durand: "Re: More versioning thoughts."

 Next in thread: David G. Durand: "Re: High-level capabilities"
 Maybe reply: David G. Durand: "Re: High-level capabilities"
 Maybe reply: Larry Masinter: "Re: High-level capabilities"
 Maybe reply: David J. Fiander: "Re: High-level capabilities"
 Maybe reply: David J. Fiander: "Re: High-level capabilities"





In my opinion, a minimal set of user capabilities which would provide a
useful environment for browsing and authoring versioned entities, and
collections of entities, is listed below.  This text is a massaged form of
a section from my versioning proposal (now available in HTML format from
the working group page, <http://www.ics.uci.edu/~ejw/versioning/>).

These capabilities can be divided into two groupings:
  - capabilities which support browsing
  - capabilities which support authoring

Browsing support capabilities:

1. Retrieval of a stated version of an entity: Any given revision of an
entity should be accessible, thus supporting links to stated revisions of
entities.  (This capability is provided by the ";version={opaque version
id}" capability we have been discussing.)

2. Browsing within a collection of entities: Often multiple entities
together form a logical grouping, for example, a collection of HTML and GIF
entities which comprise online documentation for a software product.  It is
desirable to provide support for browsing within such a collection without
requiring either the user or the entities to explicitly name the
destination entity version of each link traversal.

3. Retrieval of derivation relationships between versions of an entity: The
ability to trace the development and ownership of an entity provides
visibility into the development of that entity, and into the namespace of
version identifiers for versions of that entity.

Authoring support capabilities:

4. Writing to a given version of an entity: Once changes have been made to
an entity, versioning policies often dictate that the changes be written
into a new, stated version of that entity.

5. Policy-neutral versioning: the methods defined for accessing, modifing,
and locking entities should allow multiple versioning policies to be built
on top of them.  For example, lock-based policies, as employed by RCS, and
merge-based policies, as implemented in CVS, should both be implementable.
Since a wide range of applications will use versioning, the greater the
flexibility in the types of versioning policies which may be supported, the
greater the types of applications that can employ this protocol.

6. Parallel development support: Since it frequently occurs that multiple
people edit the same entity simultaneously, this type of activity must be
supported.  User agents must be supplied with enough information to inform
their users when they are entering a parallel development situation, and
they must be supplied with the versions of parallel entities so they can
provide merge support for the entity contents.  Futhermore, since it is
currently beyond the state of the art to provide merge support for certain
entity types (e.g., MPEG video), it must be possible to disallow parallel
development on these entity types.

7. Visibility control: Through the user agent, it should be possible to
control the external visibility of an entity.  For example, this is useful
for ensuring that working revisions of an entity are not accessible by the
entire world.

8. Configuration support: The user must be able to create versioned
collections of versioned entities.  When creating online documentation, an
author will create multiple pages, which may, for example, contain an HTML
document and supporting bitmap graphics and applet objects.  The author
will want to make a versionable collection of the entities which comprise
each page, as well as a versionable collection of all the pages.

Note that you might not want all users to be able to employ all
capabilities all the time.  For the development of these requirements, I
have assumed a super-user who would be able to do everything, all the time.
Access control mechanisms can limit which users can employ which
capabilities.

- Jim Whitehead <ejw@ics.uci.edu>




 Next message: David G. Durand: "Re: High-level capabilities"
 Previous message: David G. Durand: "Re: More versioning thoughts."

 Next in thread: David G. Durand: "Re: High-level capabilities"
 Maybe reply: David G. Durand: "Re: High-level capabilities"
 Maybe reply: Larry Masinter: "Re: High-level capabilities"
 Maybe reply: David J. Fiander: "Re: High-level capabilities"
 Maybe reply: David J. Fiander: "Re: High-level capabilities"
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/draft-ietf-webdav-requirements-03.html
##-----------------TITLE------------------------##
WebDAV Requirements
##------------------TEXT------------------------##
WEBDAV Working Group				J.A. Slein
INTERNET-DRAFT      				Xerox Corporation
<draft-ietf-webdav-requirements-03.txt>		F. Vitali
						University of Bologna              
						E.J. Whitehead, Jr.
						U.C. Irvine
						D.G. Durand
						Boston University
						September 24, 1997

Expires March 24, 1998

Requirements for a Distributed Authoring and Versioning 
Protocol for the World Wide Web


Status of this Memo

This document is an Internet draft. Internet drafts are working
documents of the Internet Engineering Task Force (IETF), its areas and
its working groups. Note that other groups may also distribute working
information as Internet drafts.

Internet Drafts are draft documents valid for a maximum of six months
and can be updated, replaced or obsoleted by other documents at any
time. It is inappropriate to use Internet drafts as reference material
or to cite them as other than as "work in progress".

To learn the current status of any Internet draft please check the
"lid-abstracts.txt" listing contained in the Internet drafts shadow
directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or
ftp.isi.edu (US West coast). Further information about the IETF can be
found at URL: http://www.ietf.org/

Distribution of this document is unlimited. Please send comments to the
WWW Distributed Authoring and Versioning (WebDAV) mailing list,
, which may be joined by sending a message with
subject "subscribe" to . Discussions are
archived at URL:
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/.

Abstract

Current World Wide Web (WWW or Web) standards provide simple support 
for applications which allow remote editing of typed data. In practice,
the existing capabilities of the WWW have proven inadequate to support 
efficient, scalable remote editing free of overwriting conflicts.  
This document presents a list of features in the form of requirements 
for a Web Distributed Authoring and Versioning protocol which, if 
implemented, would improve the efficiency of common remote editing 
operations, provide a locking mechanism to prevent overwrite conflicts, 
improve link management support between non-HTML data types, provide 
a simple attribute-value metadata facility, provide for the creation 
and reading of container data types, and integrate versioning into 
the WWW.

1. Introduction

This document describes functionality which, if incorporated in an 
extension to the existing HTTP proposed standard [HTTP], would allow 
tools for remote loading, editing and saving (publishing) of various 
media types on the WWW to interoperate with any compliant Web server.
As much as possible, this functionality is described without 
suggesting a proposed implementation, since there are many ways to 
perform the functionality within the WWW framework. It is also possible
that a single mechanism could simultaneously satisfy several 
requirements.

This document reflects the consensus of the WWW Distributed Authoring 
and Versioning working group (WebDAV) as to the functionality that 
should be standardized to support distributed authoring and versioning 
on the Web.  As with any set of requirements, practical considerations 
may make it impossible to satisfy them all.  It is the intention of 
the WebDAV working group to come as close as possible to satisfying them 
in the specifications that make up the WebDAV protocol.

2. Rationale

Current Web standards contain functionality which enables the editing of
Web content at a remote location, without direct access to the storage 
media via an operating system. This capability is exploited by several 
existing HTML distributed authoring tools, and by a growing number of 
mainstream applications (e.g., word processors) which allow users to 
write (publish) their work to an HTTP server. To date, experience from 
the HTML authoring tools has shown they are unable to meet their users' 
needs using the facilities of Web standards. The consequence of 
this is either postponed introduction of distributed authoring 
capability, or the addition of nonstandard extensions to the HTTP 
protocol or other Web standards.  These extensions, developed in 
isolation, are not interoperable.

Other authoring applications have wanted to access document repositories
or version control systems through Web gateways, and have been similarly
frustrated.  Where this access is available at all, it is through
nonstandard extensions to HTTP or other standards that force clients to
use a different interface for each vendor's service.

This document describes requirements for a set of standard extensions
to HTTP that would allow distributed Web authoring tools to provide
the functionality their users need by means of the same standard
syntax across all compliant servers. The broad categories of 
functionality that need to be standardized are:
Properties
Links
Locking
Reservations
Retrieval of Unprocessed Source
Partial Write
Name Space Manipulation
Collections
Versioning
Variants
Security
Internationalization

3. Terminology

Where there is overlap, usage is intended to be consistent with that in 
the HTTP 1.1 specification [HTTP].
Client
A program which issues HTTP requests and accepts responses.

Collection
A collection is a resource that contains other resources,
either directly or by reference.

Distributed Authoring Tool
A program which can retrieve a source entity via HTTP, allow 
editing of this entity, and then save/publish this entity
to a server using HTTP.

Entity
The information transferred in a request or response.

Hierarchical Collection
A hierarchical organization of resources.  A hierarchical
collection is a resource that contains other resources, 
including collections, either directly or by reference.

Link
A typed connection between two or more resources.

Lock
A mechanism for preventing anyone other than the owner of the
lock from accessing a resource.

Member of Version Graph
A resource that is a node in a version graph, and so is derived
from the resources that precede it in the graph, and is the 
basis of those that succeed it.

Property
Named descriptive information about a resource.

Reservation
A declaration that one intends to edit a resource.

Resource
A network data object or service that can be identified by
a URI.

Server
A program which receives and responds to HTTP requests.

User Agent
The client that initiates a request.

Variant
A representation of a resource.  A resource may have one or more
representations associated with it at any given time.

Version Graph
A directed acyclic graph with resources as its nodes, where
each node is derived from its predecessor(s).

Write Lock
A lock that prevents anyone except its owner from modifying
the resource it applies to.


4. General Principles

This section describes a set of general principles that the WebDAV
extensions should follow.  These principles cut across categories of
functionality.

4.1. User Agent Interoperability

All WebDAV clients should be able to work with any WebDAV-compliant HTTP
server. It is acceptable for some client/server combinations to provide
special features that are not universally available, but the protocol
should be sufficient that a basic level of functionality will be
universal.

4.2. Client Simplicity

The WebDAV extensions should be designed to allow client implementations
to be simple.

4.3. Legacy Client Support

It should be possible to implement a WebDAV-compliant server in such a
way that it can interoperate with non-WebDAV clients.  Such a server
would be able to understand any valid HTTP 1.1 request from an ordinary
Web client without WebDAV extensions, and to provide a valid HTTP 1.1 
response that does not require the client to understand the extensions.

4.4. Data Format Compatibility

WebDAV-compliant servers should be able to work with existing resources
and URIs [URL]. Special additional information should not become a 
mandatory part of document formats.

4.5. Replicated, Distributed Systems

Distribution and replication are at the heart of the Internet.  All
WebDAV extensions should be designed to allow for distribution and
replication.  Version trees should be able to be split across multiple
servers.  Collections may have members on different servers.  Any 
resource may be cached or replicated for mobile computing or other 
reasons.  Consequently, the WebDAV extensions must be able to operate 
in a distributed, replicated environment.

4.6 Parsimony in Client-Server Interactions 

The WebDAV extensions should keep to a minimum the number of 
interactions between the client and the server needed to perform common
functions. For example, publishing a document to the Web will often mean
publishing content together with related properties.  A client may often
need to find out what version graph a particular resource belongs to, 
or to find out which resource in a version graph is the published one.
The extensions should make it possible to do these things efficiently.

4.7. Changes to HTTP

WebDAV adds a number of new types of objects to the Web: properties, 
collections, version graphs, etc.  Existing HTTP methods such as
DELETE and PUT will have to operate in well-defined ways in this 
expanded environment. WebDAV should explicitly address not only new
methods, headers, and MIME types, but also any required changes to the
existing HTTP methods and headers.

4.8. Alternate Transport Mechanisms

It may be desirable to transport WebDAV requests and responses by other
mechanisms, particularly EMail, in addition to HTTP.  The WebDAV 
protocol specification should not preclude a future body from 
developing an interoperability specification for disconnected operation
via EMail.

5. Requirements

In the requirement descriptions below, the requirement will be stated,
followed by its rationale.

5.1. Properties

5.1.1. Functional Requirements

It must be possible to create, modify, read and delete arbitrary
properties on resources of any media type.

5.1.2. Rationale 

Properties describe resources of any media type.  They may 
include bibliographic information such as author, title, publisher, 
and subject, constraints on usage, PICS ratings, etc. These
properties have many uses, such as supporting searches on property
values, enforcing copyrights, and the creation of catalog entries as 
placeholders for objects which are not available in electronic form, or 
which will be available later.

5.2. Links

5.2.1. Functional Requirements

It must be possible to create, modify, read and delete typed 
links between resources of any media type.

5.2.2. Rationale 

One type of link between resources is the hypertext link, which is 
browsable using a hypertext style point-and-click user interface. Links,
whether they are browsable hypertext links, or simply a means of 
capturing a relationship between resources, have many purposes.  Links 
can support pushbutton printing of a multi-resource document in a 
prescribed order, jumping to the access control page for a resource, 
and quick browsing of related information, such as a table of contents,
an index, a glossary, a bibliographic record, help pages, etc. While 
link support is provided by the HTML "LINK" element, this is limited 
only to HTML resources [HTML]. Similar support is needed for bitmap 
image types, and other non-HTML media types.  

5.3. Locking

5.3.1. General Principles

5.3.1.1. Independence of locks. It must be possible to lock a resource
without performing an additional retrieval of the resource, and without
committing to editing the resource.

5.3.1.2. Multi-Resource Locking. It must be possible to take out a 
lock on multiple resources residing on the same server in a single 
action, and this locking operation must be atomic across these 
resources.

5.3.2. Functional Requirements

5.3.2.1. Write Locks. It must be possible to restrict modification of 
a resource to a specific person.

5.3.2.2. Lock Query. It must be possible to find out whether a given 
resource has any active locks, and if so, who holds those locks.

5.3.2.3. Unlock. It must be possible to remove a lock.

5.3.3. Rationale

At present, the Web provides limited support for preventing two or more 
people from overwriting each other's modifications when they save to a 
given URI. Furthermore, there is no way to discover whether someone else
is currently making modifications to a resource. This is known as the 
"lost update problem," or the "overwrite problem." Since there can be 
significant cost associated with discovering and repairing lost 
modifications, preventing this problem is crucial for supporting 
distributed authoring. A write lock ensures that only one person may 
modify a resource, preventing overwrites. Furthermore, locking support 
is a key component of many versioning schemes, a desirable capability 
for distributed authoring.

An author may wish to lock an entire web of resources even though he 
is editing just a single resource, to keep the other resources from 
changing. In this way, an author can ensure that if a local hypertext 
web is consistent in his distributed authoring tool, it will then be 
consistent when he writes it to the server. Because of this, it should 
be possible to take out a lock without also causing transmission of the 
contents of a resource.

It is often necessary to guarantee that a lock or unlock operation 
occurs at the same time across multiple resources, a feature which is 
supported by the multiple-resource locking requirement. This is useful 
for preventing a collision between two people trying to establish locks 
on the same set of resources, since with multi-resource locking, one of 
the two people will get a lock. If this same multiple-resource locking 
scenario was repeated by using atomic lock operations iterated across 
the resources, the result would be a splitting of the locks between the 
two people, based on resource ordering and race conditions.

5.4. Reservations

5.4.1. Functional Requirements 

5.4.1.1. Reserve. It must be possible for a principal to register with 
the server an intent to edit a given resource, so that other principals 
can discover who intends to edit the resource.

5.4.1.2. Reservation Query. It must be possible to find out whether 
a given resource has any active reservations, and if so, who currently 
holds reservations.

5.4.1.3. Release Reservation.  It must be possible to release the 
reservation.

5.4.2. Rationale

Experience from configuration management systems has shown that people 
need to know when they are about to enter a parallel editing situation. 
Once notified, they either decide not to edit in parallel with the 
other authors, or they use out-of-band communication (face-to-face, 
telephone, etc.) to coordinate their editing to minimize the difficulty 
of merging their results. Reservations are separate from locking, since 
a write lock does not necessarily imply a resource will be edited, and 
a reservation does not carry with it any access restrictions. This 
capability supports versioning, since a check-out typically involves 
taking out a write lock, making a reservation, and getting the resource
to be edited.

5.5. Retrieval of Unprocessed Source for Editing

5.5.1. Functional Requirement

The source of any given resource must be retrievable by any principal
with authorization to edit the resource.

5.5.2. Rationale

There are many cases where the source stored on a server does 
not correspond to the actual entity transmitted in response to an HTTP 
GET. Current known cases are server side include directives, and 
Standard Generalized Markup Language (SGML) source which is
converted on the fly to HyperText Markup Language (HTML) [HTML] output 
entities. There are many possible cases, such as automatic conversion 
of bitmap images into several variant bitmap media types (e.g. GIF, 
JPEG), and automatic conversion of an application's native media type 
into HTML. As an example of this last case, a word processor could 
store its native media type on a server which automatically converts 
it to HTML. A GET of this resource would retrieve the HTML. Retrieving 
the source would retrieve the word processor native format.

5.6. Partial Write

5.6.1. Functional Requirement 

After editing a resource, it must be possible to write only the changes
to the resource, rather than retransmitting the entire resource.

5.6.2. Rationale

During distributed editing which occurs over wide geographic separations
and/or over low bandwidth connections, it is extremely inefficient
and frustrating to rewrite a large resource after minor changes, such 
as a one-character spelling correction. Support is needed for 
transmitting "insert" (e.g., add this sentence in the middle of a 
document) and "delete" (e.g. remove this paragraph from the middle of 
a document) style updates. Support for partial resource updates will 
make small edits more efficient, and allow distributed authoring tools 
to scale up for editing large documents.

5.7. Name Space Manipulation

5.7.1. Copy

5.7.1.1. Functional Requirements 

It must be possible to duplicate a resource without a client loading, 
then resaving the resource. After the copy operation, a modification to
either resource must not cause a modification to the other.

5.7.1.2. Rationale

There are many reasons why a resource might need to be duplicated, such 
as changing ownership, preparing for major modifications, or making 
a backup. Due to network costs associated with loading and saving a 
resource, it is far preferable to have a server perform a resource copy
than a client.

5.7.2. Move/Rename

5.7.2.1. Functional Requirements 

It must be possible to change the location of a resource without 
a client loading, then resaving the resource under a different name. 
After the move operation, it must no longer be possible to access the 
resource at its original location.

5.7.2.2. Rationale

It is often necessary to change the name of a resource, for example due 
to adoption of a new naming convention, or if a typing error was made 
entering the name originally. Due to network costs, it is undesirable 
to perform this operation by loading, then resaving the resource,
followed by a delete of the old resource. Similarly, a single rename 
operation is more efficient than a copy followed by a delete operation.
Note that moving a resource is considered the same function as renaming
a resource.

5.8. Collections

A collection is a resource that is a container for other resources,
including other collections.  A resource may belong to a collection
either directly or by reference.  If a resource belongs to a
collection directly, name space operations like copy, move, and
delete applied to the collection also apply to the resource.  If a
resource belongs to a collection by reference, name space operations
applied to the collection affect only the reference, not the resource
itself.

5.8.1. Functional Requirements

5.8.1.1. List Collection. A listing of all resources in a specific 
collection must be accessible.

5.8.1.2. Make Collection. It must be possible to create a new 
collection.

5.8.1.3. Add to Collection.  It must be possible to add a resource to a
collection directly or by reference.

5.8.1.4. Remove from Collection.  It must be possible to remove a
resource from a collection.

5.8.2. Rationale

In [URL] it states that, "some URL schemes (such as the ftp, http, and 
file schemes) contain names that can be considered hierarchical." 
Especially for HTTP servers which directly map all or part of their URL 
name space into a filesystem, it is very useful to get a listing of all 
resources located at a particular hierarchy level. This functionality 
supports "Save As..." dialog boxes, which provide a listing of the 
entities at a current hierarchy level, and allow navigation through 
the hierarchy. It also supports the creation of graphical visualizations
(typically as a network) of the hypertext structure among the entities 
at a hierarchy level, or set of levels. It also supports a tree
visualization of the entities and their hierarchy levels.

In addition, document management systems may want to make their 
documents accessible through the Web.  They typically allow the 
organization of documents into collections, and so also want their users
to be able to view the collection hierarchy through the Web.

There are many instances where there is not a strong correlation between
a URL hierarchy level and the notion of a collection. One example is a 
server in which the URL hierarchy level maps to a computational process 
which performs some resolution on the name. In this case, the contents 
of the URL hierarchy level can vary depending on the input to the 
computation, and the number of resources accessible via the computation 
can be very large. It does not make sense to implement a directory 
feature for such a name space. However, the utility of listing the 
contents of those URL hierarchy levels which do correspond to 
collections, such as the large number of HTTP servers which map their 
name space to a filesystem, argue for the inclusion of this capability, 
despite not being meaningful in all cases. If listing the contents of 
a URL hierarchy level does not makes sense for a particular URL, then 
a "405 Method Not Allowed" status code could be issued.

The ability to create collections to hold related resources supports 
management of a name space by packaging its members into small, related
clusters. The utility of this capability is demonstrated by the broad 
implementation of directories in recent operating systems. The ability 
to create a collection also supports the creation of "Save As..." 
dialog boxes with "New Level/Folder/Directory" capability, common in 
many applications.

5.9. Versioning

5.9.1. Background and General Principles

5.9.1.1. Stability of versions. Most versioning systems are intended to
provide an accurate record of the history of evolution of a document. 
This accuracy is ensured by the fact that a version eventually becomes 
"frozen" and immutable. Once a version is frozen, further changes will 
create new versions rather than modifying the original. In order for 
caching and persistent references to be properly maintained, a client 
must be able to determine that a version has been frozen. Any successful
attempt to retrieve a frozen version of a resource will always retrieve
exactly the same content, or return an error if that version (or the 
resource itself) is no longer available.

5.9.1.2. Operations for Creating New Versions

Version management systems vary greatly in the operations they require,
the order of the operations, and how they are combined into atomic
functions.  In the most complete cases, the logical operations involved
are:
Reserve existing version
Lock existing version
Retrieve existing version
Request or suggest identifier for new version
Write new version
Release lock
Release reservation

With the exception of requesting a new version identifier, all of these
operations have applications outside of versioning and are either 
already part of HTTP or are discussed in earlier sections of these
requirements. Typically, versioning systems combine reservation, 
locking, and retrieval -- or some subset of these -- into an atomic 
checkout function.  They combine writing, releasing the lock, and 
releasing the reservation -- or some subset of these -- into an atomic 
checkin function.  The new version identifier may be assigned either at 
checkout or at checkin.

The WebDAV extensions must find some balance between allowing versioning
servers to adopt whatever policies they wish with regard to these 
operations and enforcing enough uniformity to keep client 
implementations simple.

5.9.1.3. The Versioning Model

Each version typically stands in a "derived from" relationship to its 
predecessor(s).  It is possible to derive several different versions 
from a single version (branching), and to derive a single version from 
several versions (merging).  Consequently, the collection of related
versions forms a directed acyclic graph.  In the following discussion,
this graph will be called a "version graph".  Each node of this graph
is a "version" or "member of the version graph".  The arcs of the graph
capture the "derived from" relationships.

It is also possible for a single resource to participate in multiple
version graphs.

The WebDAV extensions should support this versioning model, though
particular servers may restrict it in various ways.

5.9.1.4. Versioning Policies. Many writers, including Feiler [CM] and 
Haake and Hicks [VSE], have discussed the notion of versioning styles 
(referred to here as versioning policies, to reflect the nature of 
client/server interaction) as one way to think about the different 
policies that versioning systems implement. Versioning policies include
decisions on the shape of version histories (linear or branched), the 
granularity of change tracking, locking requirements made by a server, 
etc. The protocol should clearly identify the policies that it dictates
and the policies that are left up to versioning system implementors or
administrators.

5.9.1.5. It is possible to version resources of any media type.

5.9.2. Functional Requirements

5.9.2.1. Referring to a version graph. There must be a way to refer to
a version graph as a whole.  

Some queries and operations apply, not to any one member of a
version graph, but to the version graph as a whole.  For example, a 
client may request that an entire graph be moved, or may ask for a 
version history. In these cases, a way to refer to the whole version 
graph is required.

5.9.2.2. Referring to a specific member of a version graph. There must
be a way to refer to each member of a version graph. This means that 
each member of the graph is itself a resource. 

Each member of a version graph must be a resource if it is to be 
possible for a hypertext link to refer to specific version of a page, 
or for a client to request a specific version of a document for editing.

5.9.2.3. A client must be able to determine whether a resource is a 
version graph, or whether a resource is itself a member of a version 
graph.

A resource may be a simple, non-versioned resource, or it may be a 
version graph, or it may be a member of a version graph.  A client needs
to be able to tell which sort of resource it is accessing.

5.9.2.4. There must be a way to refer to a server-defined default 
member of a version graph.

The server should return a default version of a resource for requests 
that ask for the default version, as well as for requests where no
specific version information is provided. This is one of the simplest 
ways to guarantee non-versioning client compatibility. This does not 
rule out the possibility of a server returning an error when no sensible
default exists.

It may also be desirable to be able to refer to other special members 
of a version graph. For example, there may be a current version for
editing that is different from the default version.  For a graph with
several branches, it may be useful to be able to request the tip version
of any branch.

5.9.2.5. It must be possible, given a reference to a member of a version
graph, to find out which version graph(s) that resource belongs to.

This makes it possible to understand the versioning context of the 
resource. It makes it possible to retrieve a version history for the 
graphs to which it belongs, and to browse the version graph. It also 
supports some comparison operations: It makes it possible to determine 
whether two references designate members of the same version graph.

5.9.2.6. Navigation of a version graph.  Given a reference to a member 
of a version graph, it must be possible to discover and access the 
following related members of the version graph.
root member of the graph
predecessor member(s)
successor member(s)
default member of the graph

It must be possible in some way for a versioning client to access
versions related to a resource currently being examined.

5.9.2.7. Version Topology. There must be a way to retrieve the complete
version topology for a version graph, including information about all 
members of the version graph. The format for this information must be 
standardized so that the basic information can be used by all clients. 
Other specialized formats should be accommodated, for servers and 
clients that require information that cannot be included in the 
standard topology.

5.9.2.8. A client must be able to propose a version identifier to be 
used for a new member of a version graph. The server may refuse to use 
the client's suggested version identifier.  The server should tell the
client what version identifier it has assigned to the new member of the
version graph.

5.9.2.9. A version identifier must be unique across a version graph.

5.9.2.10. A client must be able to supply version-specific properties to
be associated with a new member of a version graph. (See Section 5.1 
"Properties" above.) At a minimum, it must be possible to associate 
comments with the new member, explaining what changes were made.

5.9.2.11. A client must be able to query the server for information 
about a version tree, including which versions are locked, which are 
reserved for editing, and by whom (Session Tracking).

5.9.3. Rationale

Versioning in the context of the world-wide web offers a variety of
benefits:

It provides infrastructure for efficient and controlled management of 
large evolving web sites. Modern configuration management systems are 
built on some form of repository that can track the revision history of
individual resources, and provide the higher-level tools to manage 
those saved versions. Basic versioning capabilities are required to 
support such systems.

It allows parallel development and update of single resources. Since 
versioning systems register change by creating new objects, they
enable simultaneous write access by allowing the creation of variant
versions. Many also provide merge support to ease the reverse operation.

It provides a framework for coordinating changes to resources. While 
specifics vary, most systems provide some method of controlling or 
tracking access to enable collaborative resource development.

It allows browsing through past and alternative versions of a resource.
Frequently the modification and authorship history of a resource is
critical information in itself.

It provides stable names that can support externally stored links for
annotation and link-server support. Both annotation and link servers 
frequently need to store stable references to portions of resources 
that are not under their direct control. By providing stable states of 
resources, version control systems allow not only stable pointers into 
those resources, but also well-defined methods to determine the 
relationships of those states of a resource.

It allows explicit semantic representation of single resources with 
multiple states. A versioning system directly represents the fact that 
a resource has an explicit history, and a persistent identity across 
the various states it has had during the course of that history.

5.10. Variants

Detailed requirements for variants will be developed in a separate
document.

5.10.1. Functional Requirements

It must be possible to send variants to the server, describing the 
relationships between the variants and their parent resource.  In 
addition, it must be possible to write and retrieve variants of
property labels, property descriptions, and property values.

5.10.2. Rationale

The HTTP working group is addressing problems of content negotiation
and retrieval of variants of a resource.  To extend this work to an 
authoring environment, WEBDAV must standardize mechanisms for authors 
to use when submitting variants to a server.  Authors need to be able 
to provide variants in different file or document formats, for 
different uses. They need to provide variants optimized for different
clients and for different output devices.  They need to be able to 
provide variants in different languages in the international 
environment of the Web.  In support of internationalization 
requirements (See 5.12 below), variants need to be supported not just 
for the content of resources, but for any information intended for 
human use, such as property values, labels, and descriptions.

5.11. Security

5.11.1. Authentication. The WebDAV specification should state how the 
WebDAV extensions interoperate with existing authentication schemes, 
and should make recommendations for using those schemes.

5.11.2. Access Control. Access control requirements are specified 
in a separate access control draft [AC].

5.11.3. Interoperability with Security Protocols. The WebDAV 
specification must provide a minimal list of security protocols
which any compliant server / client must support.  These protocols
should insure the authenticity of messages and the privacy and 
integrity of messages in transit.

5.12. Internationalization

5.12.1. Character Sets and Languages

Since Web distributed authoring occurs in a multi-lingual 
environment, information intended for user comprehension must 
conform to the IETF Character Set Policy [CHAR].  This policy
addresses character sets and encodings, and language tagging.

5.12.2. Rationale

In the international environment of the Internet, it is important 
to insure that any information intended for user comprehension can be
displayed in a writing system and language agreeable to both the 
client and the server. The information encompassed by this requirement 
includes not only the content of resources, but also such things as
display names and descriptions of properties, property values, and 
status messages. 

6. Acknowledgements

Our understanding of these issues has emerged as the result of much
thoughtful discussion, email, and assistance by many people, who
deserve recognition for their effort.
Terry Allen, tallen@sonic.net
Alan Babich, FileNet, babich@filenet.com
Dylan Barrell, Open Text, dbarrell@opentext.ch
Barbara Bazemore, PC DOCS, barbarab@pcdocs.com
Martin Cagan, Continuus Software, Marty_Cagan@continuus.com
Steve Carter, Novell, srcarter@novell.com
Dan Connolly, World Wide Web Consortium, connolly@w3.org
Jim Cunningham, Netscape, jfc@netscape.com
Ron Daniel Jr., Los Alamos National Laboratory, rdaniel@lanl.gov
Mark Day, Lotus, Mark_Day@lotus.com
Martin J. Duerst, mduerst@ifi.unizh.ch
Asad Faizi, Netscape, asad@netscape.com
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Mark Fisher, Thomson Consumer Electronics, FisherM@indy.tce.com
Yaron Y. Goland, Microsoft, yarong@microsoft.com
Phill Hallam-Baker, MIT, hallam@ai.mit.edu
Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com
Andre van der Hoek, University of Colorado, Boulder,
  andre@cs.colorado.edu
Del Jensen, Novell, dcjensen@novell.com
Gail Kaiser, Columbia University, kaiser@cs.columbia.edu
Rohit Khare, World Wide Web Consortium, khare@w3.org
Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Ben Laurie, A.L. Digital, ben@algroup.co.uk
Mike Little, Bellcore, little@bellcore.com
Dave Long, America Online, dave@sb.aol.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Jim Miller, World Wide Web Consortium, jmiller@w3.org
Howard S. Modell, Boeing, howard.s.modell@boeing.com
Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Jon Radoff, NovaLink, jradoff@novalink.com
Alan Robertson, alanr@bell-labs.com
Henry Sanders, Microsoft, 
Andrew Schulert, Microsoft, andyschu@microsoft.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Einar Stefferud, stef@nma.com
Richard Taylor, U.C. Irvine, taylor@ics.uci.edu
Robert Thau, MIT, rst@ai.mit.edu
Sankar Virdhagriswaran, sv@hunchuen.crystaliz.com
Dan Whelan, FileNet, dan@FILENET.COM
Gregory J. Woodhouse, gjw@wnetc.com

7. References

[AC] J. Radoff, "Requirements for Access Control within 
Distributed Authoring and Versioning Environments on the World 
Wide Web", unpublished manuscript,


[CHAR] H.T. Alvestrand, "IETF Policy on Character Sets and Languages", 
June 1997, working draft, draft-alvestrand-charset-policy-00.txt.

[CM] P. Feiler, "Configuration Management Models in Commercial
Environments", Software Engineering Institute Technical Report
CMU/SEI-91-TR-7, 


[HTML] T. Berners-Lee, D. Connolly, "HyperText Markup Language
Specification - 2.0", RFC 1866, MIT/LCS, November 1995.

[HTTP] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and
T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC 2068,
U.C. Irvine, DEC, MIT/LCS, January 1997.

[ISO 10646] ISO/IEC 10646-1:1993. "International Standard --
Information Technology -- Universal Multiple-Octet Coded Character
Set (UCS) -- Part 1: Architecture and Basic Multilingual Plane."

[URL] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)", RFC 1738, CERN, Xerox PARC, University of Minnesota,
December 1994.

[VSE] A. Haake, D. Hicks, "VerSE: Towards Hypertext Versioning Styles", 
Proc. Hypertext'96, The Seventh ACM Conference on Hypertext, 1996,
pages 224-234.

8. Authors' Addresses

Judith Slein
Xerox Corporation
800 Phillips Road 128-29E
Webster, NY 14580

EMail: slein@wrc.xerox.com

Fabio Vitali
Department of Computer Science
University of Bologna
ITALY

EMail: fabio@cs.unibo.it

E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Fax: 714-824-4056
EMail: ejw@ics.uci.edu

David G. Durand
Department of Computer Science
Boston University
Boston, MA

EMail: dgd@cs.bu.edu

Expires March 24, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/webdav-req-00.html
##-----------------TITLE------------------------##
Untitled
##------------------TEXT------------------------##
WEBDAV Working Group                                            J.A. Slein
INTERNET-DRAFT                                                  Xerox Corporation
<draft-slein-www-dist-author-00.txt>                            F. Vitali
                                                                University of Bologna 
                                                                E.J. Whitehead, Jr.
                                                                U.C. Irvine
                                                                D.G. Durand
                                                                Boston University
                                                                February 28, 1997

Expires August 28, 1997





Requirements for Distributed Authoring and Versioning


on the World Wide Web


Status of this Memo


This document is an Internet draft. Internet drafts are working documents
of the Internet Engineering Task Force (IETF), its areas and its working
groups. Note that other groups may also distribute working information
as Internet drafts.


Internet Drafts are draft documents valid for a maximum of six months
and can be updated, replaced or obsoleted by other documents at any time.
It is inappropriate to use Internet drafts as reference material or to
cite them as other than as "work in progress". 


To learn the current status of any Internet draft please check the "lid-abstracts.txt"
listing contained in the Internet drafts shadow directories on ftp.is.co.za
(Africa), nic.nordu.net (Europe), munnari.oz.au (Pacific Rim), ds.internic.net
(US East coast) or ftp.isi.edu (US West coast). Further information about
the IETF can be found at URL: http://www.ietf.org/


Distribution of this document is unlimited. Please send comments to
the WWW Distributed Authoring and Versioning (WebDAV) mailing list, <w3c-dist-auth@w3.org>,
which may be joined by sending a message with subject "subscribe"
to <w3c-dist-auth-request@w3.org>. Discussions are archived at URL:
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/. 

Abstract


Current World Wide Web (WWW or Web) standards provide simple support
for applications which allow remote editing of typed data. In practice,
the existing capabilities of the WWW have proven inadequate to support
efficient, scalable remote editing free of overwriting conflicts. This
document presents a list of features in the form of requirements 

which, if implemented, would improve the efficiency of common remote
editing operations, provide a locking mechanism to prevent overwrite conflicts,
improve relationship management support between non-HTML data types, provide
a simple attribute-value metadata facility, provide for the creation and
reading of container data types, and integrate versioning into the WWW.

1. Introduction


This document describes functionality which, if standardized in the
context of the WWW, would allow tools for remote loading, editing and saving
(publishing) of various media types on the WWW to interoperate with any
compliant Web server. As much as possible, this functionality is described
without suggesting a proposed implementation, since there 

are many ways to perform the functionality within the WWW framework.
It could be implemented in extensions to HTTP, in a new protocol to be
layered on top of HTTP, in additional MIME types, or some combination of
these and other approaches. It is also possible that a single mechanism
could simultaneously satisfy several requirements. 


This document is intended to reflect the consensus of the WWW Distributed
Authoring and Versioning working group (WebDAV) as to the functionality
that needs to be standardized to support distributed authoring and versioning
on the Web. However, this version still has some elements that are being
debated in the working group. The following elements are still under discussion:



Whether attribute search should be in scope Whether support for partial-resource locking is needed Whether other lock types besides write locks are needed Semantics of locking Semantics of copy / move for resources with attributes or relationships,
as well as for collections and version graphs Implications of attributes, relationships, collections, and versioning
for the HTTP DELETE method Semantics of removing resources from collections How to balance the goal of simplicity for clients against the wish
to allow versioning servers to implement a variety of versioning policies
Whether reservations are apart from versioning, or whether they make
sense only in versioning systems Whether diff / merge are needed Which requirements are mandatory, and which are optional for a server
to implement in order to be WebDAV-compliant 

2. Rationale


Current Web standards contain functionality which enables the editing
of Web content at a remote location, without direct access to the storage
media via an operating system. This capability is exploited by several
existing HTML distributed authoring tools, and by a growing number of mainstream
applications (e.g., word processors) which allow users to 

write (publish) their work to an HTTP server. To date, experience from
the HTML authoring tools has shown they are unable to meet their users'
needs using the facilities of Web standards. The consequence of this is
either postponed introduction of distributed authoring capability, or the
addition of nonstandard extensions to the HTTP protocol [4] or other Web
standards. These extensions, developed in isolation, are not interoperable.


Other authoring applications have wanted to access document repositories
or version control systems through Web gateways, and have been similarly
frustrated. Where this access is available at all, it is through nonstandard
extensions to HTTP or other standards that force clients to use a different
interface for each vendor's service. 


This document describes requirements for a set of standard extensions
to the Web that would allow distributed Web authoring tools to provide
the functionality their users need by means of the same standard syntax
across all compliant servers. The broad categories of functionality that
need to be standardized are:


Attributes Relationships Locking Reservations Retrieval of Unprocessed Source Partial Write Name Space Manipulation Collections Versioning 

3. Terminology


Where there is overlap, usage is intended to be consistent with that
in the HTTP 1.1 specification [4].


Attribute Named descriptive information about a resource. Client A program which issues HTTP requests and accepts responses.
Collection A collection is a resource that contains other resources,either
directly or by reference. Distributed Authoring Tool A program which can retrieve a source entity via HTTP, allow editing
of this entity, and then save/publish this entity to a server using HTTP.
Entity The information transferred in a request or response. Hierarchical Collection A hierarchical organization of resources. A hierarchical collection
is a resource that contains other resources, including collections, either
directly or by reference. Lock A mechanism for preventing anyone other than the owner of the
lock from accessing a resource. Member of Version Graph A resource that is a node in a version graph, and so is derived
from the resources that precede it in the graph, and is the basis of those
that succeed it. Relationship A typed connection between two or more resources. Reservation A declaration to the server that one intends to edit a resource.
Resource A network data object or service that can be identified by a URI.
Server A program which receives and responds to HTTP requests.
Server Attribute An attribute whose value is generated by the server. User Agent The client that initiates a request. User Attribute An attribute whose value is provided by a user or a user agent.
Version Graph A directed acyclic graph with resources as its nodes, where each
node is derived from its predecessor(s). Write Lock A lock that prevents anyone except its owner from modifying the
resource it applies to. 

4. General Principles


This section describes a set of general principles that the WebDAV extensions
should follow. These principles cut across categories of functionality.

4.1. User Agent Interoperability


All WebDAV clients should be able to work with any WebDAV-compliant
HTTP server. It is acceptable for some client/server combinations to provide
special features that are not universally available, but the protocol should
be sufficient that a basic level of functionality will be universal. 

4.2. Client Simplicity


The WebDAV extensions should be designed to allow client implementations
to be simple. 

4.3. Legacy Client Support


It should be possible to implement a WebDAV-compliant server in such
a way that it can interoperate with non-WebDAV clients. Such a server would
be able to understand any valid HTTP 1.1 request from an ordinary Web client
without WebDAV extensions, and to provide a valid HTTP 1.1 response that
does not require the client to understand the extensions. 

4.4. Data Format Compatibility


WebDAV-compliant servers should be able to work with existing resources
and URIs [2]. Special additional information should not become a mandatory
part of document formats. 

4.5. Replicated, Distributed Systems


Distribution and replication are at the heart of the Internet. All WebDAV
extensions should be designed to allow for distribution and replication.
Version trees should be able to be split across multiple servers. Collections
may have members on different servers. Resources may have attributes on
different servers. Any resources may be cached or replicated for mobile
computing or other reasons. Consequently, the WebDAV extensions must be
able to operate in a distributed, replicated environment. 

4.6 Parsimony in Client-Server Interactions 


The WebDAV extensions should keep to a minimum the number of interactions
between the client and the server needed to perform common functions. For
example, publishing a document to the Web will often mean publishing content
together with related metadata. A client may often need to find out what
version graph a particular resource belongs to, or to find out which resource
in a version graph is the published one. The extensions should make it
possible to do these things efficiently. 

4.7. Alternate Transport Mechanisms


It may be desirable to transport WebDAV requests and responses by other
mechanisms, particularly EMail, in addition to HTTP. The design of the
WebDAV extensions should take alternative transports into account. 

5. Requirements


In the requirement descriptions below, the requirement will be stated,
followed by its rationale. 

5.1. Attributes 

5.1.1. Functional Requirements


It must be possible to create, modify, query, read and delete arbitrary
attributes on resources of any media type.


Attributes are resources that may have attributes of their own, may
be subject to content negotiation, etc.


Attributes have implications for the semantics of move, copy, and delete
operations. See "5.7. Name Space Manipulation" below. 

5.1.2. Rationale 


Attributes describe resources of any media type. They may include bibliographic
information such as author, title, publisher, and subject, constraints
on usage, PICS ratings, etc. These attributes have many uses, such as supporting
searches on attribute values, enforcing copyrights, and the creation of
catalog entries as placeholders for objects which are not available in
electronic form, or which will be available later. 

5.2. Relationships 

5.2.1. Functional Requirements


It must be possible to create, modify, query, read and delete typed
relationships between resources of any media type.


Relationships have implications for the semantics of move, copy, and
delete operations. See "5.7. Name Space Manipulation" below.

5.2.2. Rationale 


One type of relationship between resources is the hypertext link, which
is browsable using a hypertext style point-and-click user interface. Relationships,
whether they are browsable hypertext links, or simply a means of capturing
a connection between resources, have many purposes. Relationships can support
pushbutton printing of a multi-resource document in a prescribed order,
jumping to the access control page for a resource, and quick browsing of
related information, such as a table of contents, an index, a glossary,
help pages, etc. While relationship support is provided by the HTML "LINK"
element, this is limited only to HTML resources [1]. Similar support is
needed for bitmap image types, and other non-HTML media types. 

5.3. Locking 

5.3.1. General Principles


5.3.1.1. Independence of locks. It must be possible to lock a
resource without re-reading the resource, and without committing to editing
the resource.


5.3.1.2. Multi-Resource Locking. It must be possible to take
out a lock on multiple resources in the same action, and this locking operation
must be atomic across these resources. 


5.3.1.3. Partial-Resource Locking. It must be possible to take
out a lock on a subsection of a resource.


5.3.1.4. Optional Server Support for Locking. Some systems use
other mechanisms besides locking to ensure consistency in environments
where several users may wish to edit a resource at once. These other strategies
must be permitted. 

5.3.2. Functional Requirements


5.3.2.1. Write Locks. It must be possible to restrict modification
of a resource to a specific person.


5.3.2.2. Lock Query. It must be possible to find out whether
a given resource has any active modification restrictions, and if so, who
currently has modification permission.


5.3.2.3. Unlock. It must be possible to remove a lock. Only the
owner of a lock or a principal with appropriate access rights may remove
the lock. 

5.3.3. Rationale


At present, the Web provides limited support for preventing two or more
people from overwriting each other's modifications when they save to a
given URI. Furthermore, there is no way to discover whether someone else
is currently making modifications to a resource. This is known as the "lost
update problem," or the "overwrite problem." Since there
can be significant cost associated with discovering and repairing lost
modifications, preventing this problem is crucial for supporting distributed
authoring. A write lock ensures that only one person may modify a resource,
preventing overwrites. Furthermore, locking support is a key component
of many versioning schemes, a desirable capability for distributed authoring.


An author may wish to lock an entire web of resources even though he
is editing just a single resource, to keep the other resources from changing.
In this way, an author can ensure that if a local hypertext web is consistent
in his distributed authoring tool, it will then be consistent when he writes
it to the server. Because of this, it should be possible to take out a
lock without also causing transmission of the contents of a resource.


It is often necessary to guarantee that a lock or unlock operation occurs
at the same time across multiple resources, a feature which is supported
by the multiple-resource locking requirement. This is useful for preventing
a collision between two people trying to establish locks on the same set
of resources, since with multi-resource locking, one of the two people
will get a lock. If this same multiple-resource locking scenario was repeated
by using atomic lock operations iterated across the resources, the result
would be a splitting of the locks between the two people, based on resource
ordering and race conditions.


Partial resource locking provides support for collaborative editing
applications, where multiple users may be editing the same resource simultaneously.
Partial resource locking also allows multiple people to simultaneously
work on a database type resource. 

5.4. Reservations 

5.4.1. Functional Requirements 


5.4.1.1. Reserve. It must be possible to notify the server that
a resource is about to be edited by a given person.


5.4.1.2. Reservation Query. It must be possible to find out whether
a given resource has any active reservations, and if so, who currently
holds reservations.


5.4.1.3. Release Reservation. It must be possible to release
the reservation. Only the owner of a reservation or a principal with appropriate
access rights may release the reservation. 

5.4.2. Rationale


Experience from configuration management systems has shown that people
need to know when they are about to enter a parallel editing situation.
Once notified, they either decide not to edit in parallel with the other
authors, or they use out-of-band communication (face-to-face, telephone,
etc.) to coordinate their editing to minimize the difficulty of merging
their results. Reservations are separate from locking, since a write lock
does not necessarily imply a resource will be edited, and a reservation
does not carry with it any access restrictions. This capability supports
versioning, since a check-out typically involves taking out a write lock,
making a reservation, and getting the resource to be edited. 

5.5. Retrieval of Unprocessed Source for Editing 

5.5.1. Functional Requirement


The source of any given resource must be retrievable. 

5.5.2. Rationale


There are many cases where the source stored on a server does not correspond
to the actual entity transmitted in response to an HTTP GET. Current known
cases are server side include directives, and Standard Generalized Markup
Language (SGML) source which is converted on the fly to HyperText Markup
Language (HTML) [1] output entities. There are many possible cases, such
as automatic conversion of bitmap images into several variant bitmap media
types (e.g. GIF, JPEG), and automatic conversion of an application's native
media type into HTML. As an example of this last case, a word processor
could store its native media type on a server which automatically converts
it to HTML. A GET of this resource would retrieve the HTML. Retrieving
the source would retrieve the word processor native format.


This requirement should be met by a general mechanism which can handle
both the "single-step" source processing described above, where
the source is converted into the transmission entity via a single conversion
step, as well as "multi-step" source processing, where there
are one or more intermediate processing steps and outputs. An example of
multi-step source processing is the relationship between an executable
binary image, its object files, and its source language files. It should
be noted that the relationship between source and transmission entity could
be expressed using the relationship functionality described above in "5.2.
Relationships." 

5.6. Partial Write. 

5.6.1. Functional Requirement 


After editing a resource, it must be possible to write only the changes
to the resource, rather than retransmitting the entire resource. 

5.6.2. Rationale


During distributed editing which occurs over wide geographic separations
and/or over low bandwidth connections, it is extremely inefficient and
frustrating to rewrite a large resource after minor changes, such as a
one-character spelling correction. Support is needed for transmitting "insert"
(e.g., add this sentence in the middle of a document) and "delete"
(e.g. remove this paragraph from the middle of a document) style updates.
Support for partial resource updates will make small edits more efficient,
and allow distributed authoring tools to scale up for editing large documents.

5.7. Name Space Manipulation 

5.7.1. Copy 

5.7.1.1. Functional Requirements 


It must be possible to duplicate a resource without a client loading,
then resaving the resource. After the copy operation, the content of the
destination resource must be octet for octet identical to the content of
the source resource. A modification to either resource must not cause a
modification to the other. The copy operation should leave an audit trail.


It must be possible for a client to specify whether a resource's user
attributes and relationships are to be copied with it, although the server
may decline to copy them. It may decline to copy user attributes if the
destination namespace supports different attributes from the source namespace,
for example. The server may follow whatever policy it likes for copying
server attributes.


Copying a collection causes all of the resources that belong to it directly
to be copied as well. For resources that belong to it by reference, the
reference is copied. It must be possible for a client to specify whether
subcollections should be copied with the collection. 


If a version graph is copied, all relationships between nodes in the
graph must be changed in the new copy to reflect its new location. 

5.7.1.2. Rationale


There are many reasons why a resource might need to be duplicated, such
as changing ownership, preparing for major modifications, or making a backup.
Due to network costs associated with loading and saving a resource, it
is far preferable to have a server perform a resource copy than a client.
If a copied resource records which resource it is a copy of, then it would
be possible for a cache to avoid loading the copied resource if it already
locally stores the original. 

5.7.2. Move/Rename 

5.7.2.1. Functional Requirements 


It must be possible to change the location of a resource without a client
loading, then resaving the resource under a different name. After the move
operation, the content of the resource at its new location must be octet
for octet identical to the content of the prior resource. It must no longer
be possible to access the resource at its original location. The move operation
should leave an audit trail. 


It must be possible for a client to specify whether a resource's user
attributes and relationships are to be moved with it, although the server
may decline to move them. It may decline to move user attributes if the
destination namespace supports different attributes from the source namespace,
for example. The server may follow whatever policy it likes for server
attributes.


Moving a collection causes all of the resources that belong to it directly
to be moved as well. For resources that belong to it by reference, the
reference is moved. It must be possible for a client to specify whether
subcollections should be moved with the collection. If not, subcollections
that belong to the collection directly should be deleted from the source
location.


If a version graph is moved, all relationships between nodes in the
graph must be changed in the destination resource to reflect its new location.

5.7.2.2. Rationale


It is often necessary to change the name of a resource, for example
due to adoption of a new naming convention, or if a typing error was made
entering the name originally. Due to network costs, it is undesirable to
perform this operation by loading, then resaving the resource, followed
by a delete of the old resource. Similarly, a single rename operation is
more efficient than a copy followed by a delete operation. Note that moving
a resource is considered the same function as renaming a resource. The
audit trail makes it possible for the server to redirect client requests
for the resource at its old location, perhaps with a "301 Moved Permanently"
status code. 

5.7.3. Delete


HTTP already provides a DELETE method, but the semantics of DELETE must
be reconsidered once attributes, relations, collections, and versions are
introduced.


When a resource is deleted, it must be possible for a client to specify
whether a its attributes are to be deleted with it. In an environment where
resources may share the same attributes, the server may decline to delete
the attributes.


When a resource is deleted, the relationships in which it participates
should also be deleted.


If the resource being deleted is a collection, all resources that belong
to it directly will be deleted as well. Resources that belong to it by
reference are unaffected.


If the resource being deleted is a member of a version graph, the predecessor
and successor relationships in the graph must be updated, and any metadata
required by the versioning server must be supplied. The versioning server
may, for example, require a comment explaining the reason for the deletion.

5.8. Collections


A collection is a resource that is a container for other resources,
including other collections. A resource may belong to a collection
either directly or by reference. If a resource belongs to a collection
directly, namespace operations like copy, move, and delete applied to
the collection also apply to the resource. If a resource belongs to a
collection by reference, namespace operations applied to the
collection affect only the reference, not the resource itself. 

5.8.1. Functional Requirements


5.8.1.1. List Collection. A listing of all resources in a specific
collection must be accessible.


5.8.1.2. Make Collection. It must be possible to create a new
collection.


5.8.1.3. Add to Collection. It must be possible to add a resource
to a collection directly or by reference.


5.8.1.4. Remove from Collection. It must be possible to remove
a resource from a collection. In the case of a resource that belongs to
the collection directly, this results in the resource being deleted. In
the case of a resource that is merely referenced by the collection, only
the reference is removed.


5.8.1.5. Collections have implications for the semantics of move,
copy, and delete operations. See "5.7. Name Space Manipulation"
above. 

5.8.2. Rationale


In [2] it states that, "some URL schemes (such as the ftp, http,
and file schemes) contain names that can be considered hierarchical."
Especially for HTTP servers which directly map all or part of their URL
name space into a filesystem, it is very useful to get a listing of all
resources located at a particular hierarchy level. This functionality supports
"Save As..." dialog boxes, which provide a listing of the entities
at a current hierarchy level, and allow navigation through the hierarchy.
It also supports the creation of graphical visualizations (typically as
a network) of the hypertext structure among the entities at a hierarchy
level, or set of levels. It also supports a tree visualization of the entities
and their hierarchy levels.


In addition, document management systems may want to make their documents
accessible through the Web. They typically allow the organization of documents
into collections, and so also want their users to be able to view the collection
hierarchy through the Web.


There are many instances where there is not a strong correlation between
a URL hierarchy level and the notion of a collection. One example is a
server in which the URL hierarchy level maps to a computational process
which performs some resolution on the name. In this case, the contents
of the URL hierarchy level can vary depending on the input to the computation,
and the number of resources accessible via the computation can be very
large. It does not make sense to implement a directory feature for such
a namespace. However, the utility of listing the contents of those URL
hierarchy levels which do correspond to collections, such as the large
number of HTTP servers which map their namespace to a filesystem, argue
for the inclusion of this capability, despite not being meaningful in all
cases. If listing the contents of a URL hierarchy level does not makes
sense for a particular URL, then a "405 Method Not Allowed" status
code could be issued. 


The ability to create collections to hold related resources supports
management of a name space by packaging its members into small, related
clusters. The utility of this capability is demonstrated by the broad implementation
of directories in recent operating systems. The ability to create a collection
also supports the creation of "Save As..." dialog boxes with
"New Level/Folder/Directory" capability, common in many applications.

5.9. Versioning 

5.9.1. Background and General Principles


5.9.1.1. Stability of versions. Most versioning systems are intended
to provide an accurate record of the history of evolution of a document.
This accuracy is ensured by the fact that a version eventually becomes
"frozen" and immutable. Once a version is frozen, further changes
will create new versions rather than modifying the original. In order for
caching and persistent references to be properly maintained, a client must
be able to determine that a version has been frozen. Any successful attempt
to retrieve a frozen version of a resource will always retrieve exactly
the same content, or return an error if that version (or the resource itself)
is no longer available. 

5.9.1.2. Operations for Creating New Versions


Version management systems vary greatly in the operations they require,
the order of the operations, and how they are combined into atomic functions.
In the most complete cases, the logical operations involved are: 

Reserve existing version Lock existing version Retrieve existing version Request or suggest identifier for new version Write new version Release lock Release reservation 

With the exception of requesting a new version identifier, all of these
operations have applications outside of versioning and are either already
part of HTTP or are discussed in earlier sections of these requirements.
Typically, versioning systems combine reservation, locking, and retrieval
-- or some subset of these -- into an atomic checkout function. They combine
writing, releasing the lock, and releasing the reservation -- or some subset
of these -- into an atomic checkin function. The new version identifier
may be assigned either at checkout or at checkin.


The WebDAV extensions must find some balance between allowing versioning
servers to adopt whatever policies they wish with regard to these operations
and enforcing enough uniformity to keep client implementations simple.

5.9.1.3. The Versioning Model


Each version typically stands in a "derived from" relationship
to its predecessor(s). It is possible to derive several different versions
from a single version (branching), and to derive a single version from
several versions (merging). Consequently, the collection of related versions
forms a directed acyclic graph. In the following discussion, this graph
will be called a "version graph". Each node of this graph is
a "version" or "member of the version graph". The arcs
of the graph capture the "derived from" relationships.


It is also possible for a single resource to participate in multiple
version graphs.


The WebDAV extensions must support this versioning model, though particular
servers may restrict it in various ways.


5.9.1.4. Versioning Policies. Many writers, including Feiler
[3] and Haake and Hicks [5], have discussed the notion of versioning styles
(referred to here as versioning policies, to reflect the nature of client/server
interaction) as one way to think about the different policies that versioning
systems implement. Versioning policies include decisions on the shape of
version histories (linear or branched), the granularity of change tracking,
locking requirements made by a server, etc. The protocol should clearly
identify the policies that it dictates and the policies that are left up
to versioning system implementors or administrators.


5.9.1.5. It is possible to version resources of any media type.

5.9.2. Functional Requirements


5.9.2.1. Referring to a version graph. There must be a way to
refer to a version graph as a whole. 


Some queries and operations apply, not to any one member of a version
graph, but to the version graph as a whole. For example, a client may request
that an entire graph be moved, or may ask for a version history. In these
cases, a way to refer to the whole version graph is required.


5.9.2.2. Referring to a specific member of a version graph. There
must be a way to refer to each member of a version graph. This means that
each member of the graph is itself a resource. 


Each member of a version graph must be a resource if it is to be possible
for a hypertext link to refer to specific version of a page, or for a client
to request a specific version of a document for editing.


5.9.2.3. A client must be able to determine whether a resource
is a version graph, or whether a resource is itself a member of a version
graph.


A resource may be a simple, non-versioned resource, or it may be a version
graph, or it may be a member of a version graph. A client needs to be able
to tell which sort of resource it is accessing.


5.9.2.4. There must be a way to refer to a server-defined default
member of a version graph.


The server should return a default version of a resource for requests
that ask for the default version, as well as for requests where no specific
version information is provided. This is one of the simplest ways to guarantee
non-versioning client compatibility. This does not rule out the possibility
of a server returning an error when no sensible default exists.


It may also be desirable to be able to refer to other special members
of a version graph. For example, there may be a current version for editing
that is different from the default version. For a graph with several branches,
it may be useful to be able to request the tip version of any branch.


5.9.2.5. It must be possible, given a reference to a member of
a version graph, to find out which version graph(s) that resource belongs
to.


This makes it possible to understand the versioning context of the resource.
It makes it possible to retrieve a version history for the graphs to which
it belongs, and to browse the version graph. It also supports some comparison
operations: It makes it possible to determine whether two references designate
members of the same version graph. 


5.9.2.6. Navigation of a version graph. Given a reference to
a member of a version graph, it must be possible to discover and access
the following related members of the version graph. 

root member of the graph predecessor member(s) successor member(s) default member of the graph 

It must be possible in some way for a versioning client to access versions
related to a resource currently being exhamined.


5.9.2.7. Version Topology. There must be a way to retrieve the
complete version topology for a version graph, including information about
all members of the version graph. The format for this information must
be standardized so that the basic information can be used by all clients.
Other specialized formats should be accomodated, for servers and clients
that require information that cannot be included in the standard topology.


5.9.2.8. A client must be able to request that the server generate
a version identifier for a new member of a version graph. Such an identifier
will not be used by any other client in the meantime. The server may refuse
the request.


5.9.2.9. A client must be able to propose a version identifier
to be used for a new member of a version graph. The server may refuse to
use the client's suggested version identifier.


5.9.2.10. A version identifier must be unique across a version
graph.


5.9.2.11. A client must be able to supply version-specific metadata
to be associated with a new member of a version graph. (See Section 5.1
"Attributes" above.) At a minimum, it must be possible to associate
comments with the new member, explaining what changes were made. 


5.9.2.12. A client must be able to query the server for information
about a version tree, including which versions are locked, which are reserved
for editing, and by whom (Session Tracking). 


5.9.2.13. It must be possible for a client to get from the server
a list of the differences between two or more resources of the same media
type.


5.9.2.14. A client must be able to request that the server merge
two or more resources, and return the result of the merge to the client
or store the result as a resource. Server support for this functionality
is optional.


5.9.2.15. Versioning has implications for the semantics of move,
copy, and delete operations. See "5.7. Name Space Manipulation"
above. In addition, if the WebDAV extensions allow versioning servers to
PUT or POST new members into a version graph, the semantics of those methods
must be extended to encompass the new functionality. 

5.9.3. Rationale


Versioning in the context of the world-wide web offers a variety of
benefits:


It provides infrastructure for efficient and controlled management of
large evolving web sites. Modern configuration management systems are built
on some form of repository that can track the revision history of individual
resources, and provide the higher-level tools to manage those saved versions.
Basic versioning capabilities are required to support such systems.


It allows parallel development and update of single resources. Since
versioning systems register change by creating new objects, they enable
simultaneous write access by allowing the creation of variant versions.
Many also provide merge support to ease the reverse operation.


It provides a framework for coordinating changes to resources. While
specifics vary, most systems provide some method of controlling or tracking
access to enable collaborative resource development. 


It allows browsing through past and alternative versions of a resource.
Frequently the modification and authorship history of a resource is critical
information in itself.


It provides stable names that can support externally stored links for
annotation and link-server support. Both annotation and link servers frequently
need to store stable references to portions of resources that are not under
their direct control. By providing stable states of resources, version
control systems allow not only stable pointers into those resources, but
also well-defined methods to determine the relationships of those states
of a resource. 


It allows explicit semantic representation of single resources with
multiple states. A versioning system directly represents the fact that
a resource has an explicit history, and a persistent identity across the
various states it has had during the course of that history. 

5.10. Authentication and Security


The WebDAV extensions should make use of existing authentication and
security protocols. The WebDAV specification must state how the WebDAV
extensions interoperate with existing authentication and security schemes.

6. Acknowledgements


Our understanding of these issues has emerged as the result of much
thoughtful discussion, email, and assistance by many people, who deserve
recognition for their effort.


Martin Cagan, Continuus Software, Marty_Cagan@continuus.com Steve Carter, Novell, srcarter@novell.com Dan Connolly, World Wide Web Consortium, connolly@w3.org Jim Cunningham, Netscape, jfc@netscape.com Mark Day, Lotus, Mark_Day@lotus.com Assad Faizi, Netscape, asad@netscape.com Ron Fein, Microsoft, ronfe@microsoft.com David Fiander, Mortice Kern Systems, davidf@mks.com Roy Fielding, U.C. Irvine, fielding@ics.uci.edu Yaron Goland, Microsoft, yarong@microsoft.com Phill Hallam-Baker, MIT, hallam@ai.mit.edu Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com Andre van der Hoek, University of Colorado, Boulder, andre@bigtime.cs.colorado.edu
Del Jensen, Novell, dcjensen@novell.com Gail Kaiser, Columbia University, kaiser@cs.columbia.edu Rohit Khare, World Wide Web Consortium, khare@w3.org Dave Long, America Online, dave@sb.aol.com Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com Murray Maloney, SoftQuad, murray@sq.com Jim Miller, World Wide Web Consortium, jmiller@w3.org Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu Andrew Schulert, Microsoft, andyschu@microsoft.com Christopher Seiwald, Perforce Software, seiwald@perforce.com Einar Stefferud, stef@nma.com Richard Taylor, U.C. Irvine, taylor@ics.uci.edu Robert Thau, MIT, rst@ai.mit.edu 

7. References

[1] T. Berners-Lee, D. Connolly, "HyperText Markup Language Specification
- 2.0", RFC 1866, MIT/LCS, November 1995.

[2] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)", RFC 1738, CERN, Xerox PARC, University of Minnesota,
December 1994.

[3] P. Feiler, "Configuration Management Models in Commercial Environments",
Software Engineering Institute Technical Report CMU/SEI-91-TR-7, <http://www.sei.cmu.edu/products/publications/91.reports/91.tr.007.html>


[4] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and T. Berners-Lee,
"Hypertext Transfer Protocol -- HTTP/1.1", RFC 2068, U.C. Irvine,
DEC, MIT/LCS, January 1997.

[5] A. Haake, D. Hicks, "VerSE: Towards Hypertext Versioning Styles",
Proc. Hypertext'96, The Seventh ACM Conference on Hypertext, 1996, pages
224-234. 

8. Authors' Addresses

Judith Slein
Xerox Corporation
800 Phillips Road 128-29E
Webster, NY 14580

EMail: slein@wrc.xerox.com

Fabio Vitali
Department of Computer Science
University of Bologna
ITALY

EMail: fabio@cs.unibo.it

E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Fax: 714-824-4056
EMail: ejw@ics.uci.edu

David G. Durand
Department of Computer Science
Boston University
Boston, MA

EMail: dgd@cs.bu.edu



Expires August 28, 1997
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/requirements/draft-ietf-webdav-requirements-00.html
##-----------------TITLE------------------------##
WebDAV Requirements
##------------------TEXT------------------------##
WEBDAV Working Group				J.A. Slein
INTERNET-DRAFT      				Xerox Corporation
<draft-ietf-webdav-requirements.txt>		F. Vitali
						University of Bologna              
						E.J. Whitehead, Jr.
						U.C. Irvine
						D.G. Durand
						Boston University
						May 30, 1997

Expires November 30, 1997

Requirements for Distributed Authoring and Versioning
 
on the World Wide Web


Status of this Memo

This document is an Internet draft. Internet drafts are working
documents of the Internet Engineering Task Force (IETF), its areas and
its working groups. Note that other groups may also distribute working
information as Internet drafts.

Internet Drafts are draft documents valid for a maximum of six months
and can be updated, replaced or obsoleted by other documents at any
time. It is inappropriate to use Internet drafts as reference material
or to cite them as other than as "work in progress".

To learn the current status of any Internet draft please check the
"lid-abstracts.txt" listing contained in the Internet drafts shadow
directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ds.internic.net (US East coast) or
ftp.isi.edu (US West coast). Further information about the IETF can be
found at URL: http://www.ietf.org/

Distribution of this document is unlimited. Please send comments to the
WWW Distributed Authoring and Versioning (WebDAV) mailing list,
, which may be joined by sending a message with
subject "subscribe" to . Discussions are
archived at URL:
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/.

Abstract

Current World Wide Web (WWW or Web) standards provide simple support 
for applications which allow remote editing of typed data. In practice, 
the existing capabilities of the WWW have proven inadequate to support 
efficient, scalable remote editing free of overwriting conflicts.  
This document presents a list of features in the form of requirements 
which, if implemented, would improve the efficiency of common remote 
editing operations, provide a locking mechanism to prevent overwrite 
conflicts, improve link management support between non-HTML 
data types, provide a simple attribute-value metadata facility, provide
for the creation and reading of container data types, and integrate 
versioning into the WWW.

1. Introduction

This document describes functionality which, if incorporated in an 
extension to the existing HTTP proposed standard [4], would allow tools 
for remote loading, editing and saving (publishing) of various media 
types on the WWW to interoperate with any compliant Web server. As much 
as possible, this functionality is described without suggesting a 
proposed implementation, since there are many ways to perform the 
functionality within the WWW framework. It is also possible that a 
single mechanism could simultaneously satisfy several requirements.

This document is intended to reflect the consensus of the WWW 
Distributed Authoring and Versioning working group (WebDAV) as to the 
functionality that needs to be standardized to support distributed 
authoring and versioning on the Web. However, this version still has 
some elements that are being debated in the working group. The following
elements are still under discussion:

Whether support for multi-resource locking is needed
Whether reservations should be treated as shared or advisory locks
What requirements there should be for access control
What requirements there should be for internationalization
How far WebDAV should be concerned about compatibility with
other transport protocols besides HTTP


2. Rationale

Current Web standards contain functionality which enables the editing of 
Web content at a remote location, without direct access to the storage 
media via an operating system. This capability is exploited by several 
existing HTML distributed authoring tools, and by a growing number of 
mainstream applications (e.g., word processors) which allow users to 
write (publish) their work to an HTTP server. To date, experience from 
the HTML authoring tools has shown they are unable to meet their users' 
needs using the facilities of Web standards. The consequence of 
this is either postponed introduction of distributed authoring 
capability, or the addition of nonstandard extensions to the HTTP 
protocol or other Web standards.  These extensions, developed in 
isolation, are not interoperable.

Other authoring applications have wanted to access document repositories 
or version control systems through Web gateways, and have been similarly
frustrated.  Where this access is available at all, it is through
nonstandard extensions to HTTP or other standards that force clients to 
use a different interface for each vendor's service.

This document describes requirements for a set of standard extensions
to HTTP that would allow distributed Web authoring tools to provide
the functionality their users need by means of the same standard
syntax across all compliant servers. The broad categories of 
functionality that need to be standardized are:

Attributes
Links
Locking
Reservations
Retrieval of Unprocessed Source
Partial Write
Name Space Manipulation
Collections
Versioning
Security
Internationalization


3. Terminology

Where there is overlap, usage is intended to be consistent with that in 
the HTTP 1.1 specification [4].

Attribute
Named descriptive information about a resource.

Client
A program which issues HTTP requests and accepts responses.

Collection
A collection is a resource that contains other resources,
either directly or by reference.

Distributed Authoring Tool
A program which can retrieve a source entity via HTTP, allow 
editing of this entity, and then save/publish this entity
to a server using HTTP.

Entity
The information transferred in a request or response.

Hierarchical Collection
A hierarchical organization of resources.  A hierarchical
collection is a resource that contains other resources, 
including collections, either directly or by reference.

Link
A typed connection between two resources.

Lock
A mechanism for preventing anyone other than the owner of the
lock from accessing a resource.

Member of Version Graph
A resource that is a node in a version graph, and so is derived
from the resources that precede it in the graph, and is the 
basis of those that succeed it.

Reservation
A declaration to the server that one intends to edit a resource.

Resource
A network data object or service that can be identified by
a URI.

Server
A program which receives and responds to HTTP requests.

Server Attribute
An attribute whose value is generated by the server.

User Agent
The client that initiates a request.

User Attribute
An attribute whose value is provided by a user or a user agent.

Version Graph
A directed acyclic graph with resources as its nodes, where
each node is derived from its predecessor(s).

Write Lock
A lock that prevents anyone except its owner from modifying
the resource it applies to.



4. General Principles

This section describes a set of general principles that the WebDAV
extensions should follow.  These principles cut across categories of
functionality.

4.1. User Agent Interoperability

All WebDAV clients should be able to work with any WebDAV-compliant HTTP
server. It is acceptable for some client/server combinations to provide
special features that are not universally available, but the protocol
should be sufficient that a basic level of functionality will be
universal.

4.2. Client Simplicity

The WebDAV extensions should be designed to allow client implementations
to be simple.

4.3. Legacy Client Support

It should be possible to implement a WebDAV-compliant server in such a
way that it can interoperate with non-WebDAV clients.  Such a server
would be able to understand any valid HTTP 1.1 request from an ordinary
Web client without WebDAV extensions, and to provide a valid HTTP 1.1 
response that does not require the client to understand the extensions.

4.4. Data Format Compatibility

WebDAV-compliant servers should be able to work with existing resources 
and URIs [2]. Special additional information should not become a 
mandatory part of document formats.

4.5. Replicated, Distributed Systems

Distribution and replication are at the heart of the Internet.  All
WebDAV extensions should be designed to allow for distribution and
replication.  Version trees should be able to be split across multiple
servers.  Collections may have members on different servers.  Resources
may have attributes on different servers.  Any resources may be cached
or replicated for mobile computing or other reasons.  Consequently, the
WebDAV extensions must be able to operate in a distributed, replicated
environment.

4.6 Parsimony in Client-Server Interactions 

The WebDAV extensions should keep to a minimum the number of 
interactions between the client and the server needed to perform common
functions. For example, publishing a document to the Web will often mean
publishing content together with related metadata.  A client may often 
need to find out what version graph a particular resource belongs to, 
or to find out which resource in a version graph is the published one.
The extensions should make it possible to do these things efficiently.

4.7. Changes to HTTP

WebDAV adds a number of new types of objects to the Web: links, 
collections, version graphs, etc.  Existing HTTP methods such as
DELETE and PUT will have to operate in well-defined ways in this 
expanded environment. WebDAV should explicitly address not only new
methods, headers, and MIME types, but also any required changes to the
existing HTTP methods and headers.

4.8. Alternate Transport Mechanisms

It may be desirable to transport WebDAV requests and responses by other
mechanisms, particularly EMail, in addition to HTTP.  The WebDAV protocol
specification should not preculde a future body from developing an
interoperability specification for disconnected operation via EMail.

5. Requirements

In the requirement descriptions below, the requirement will be stated,
followed by its rationale.

5.1. Attributes

5.1.1. Functional Requirements

It must be possible to create, modify, query, read and delete arbitrary
attributes on resources of any media type.

5.1.2. Rationale 

Attributes describe resources of any media type.  They may 
include bibliographic information such as author, title, publisher, 
and subject, constraints on usage, PICS ratings, etc. These
attributes have many uses, such as supporting searches on attribute 
values, enforcing copyrights, and the creation of catalog entries as 
placeholders for objects which are not available in electronic form, or 
which will be available later.

5.2. Links

5.2.1. Functional Requirements

It must be possible to create, modify, query, read and delete typed 
links between resources of any media type.

5.2.2. Rationale 

One type of link between resources is the hypertext link, which is 
browsable using a hypertext style point-and-click user interface. Links, 
whether they are browsable hypertext links, or simply a means of 
capturing a connection between resources, have many purposes.  Links 
can support pushbutton printing of a multi-resource document in a 
prescribed order, jumping to the access control page for a resource, 
and quick browsing of related information, such as a table of contents, 
an index, a glossary, a bibliographic record, help pages, etc. While 
link support is provided by the HTML "LINK" element, this is limited 
only to HTML resources [1]. Similar support is needed for bitmap image 
types, and other non-HTML media types.  

5.3. Locking

5.3.1. General Principles

5.3.1.1. Independence of locks. It must be possible to lock a resource
without re-reading the resource, and without committing to editing the 
resource.

5.3.1.2. Multi-Resource Locking. It must be possible to take out a 
lock on multiple resources in the same action, and this locking 
operation must be atomic across these resources.

5.3.2. Functional Requirements

5.3.2.1. Write Locks. It must be possible to restrict modification of 
a resource to a specific person.

5.3.2.2. Lock Query. It must be possible to find out whether a given 
resource has any active modification restrictions, and if so, who 
currently has modification permission.

5.3.2.3. Unlock. It must be possible to remove a lock.

5.3.3. Rationale

At present, the Web provides limited support for preventing two or more 
people from overwriting each other's modifications when they save to a 
given URI. Furthermore, there is no way to discover whether someone else
is currently making modifications to a resource. This is known as the 
"lost update problem," or the "overwrite problem." Since there can be 
significant cost associated with discovering and repairing lost 
modifications, preventing this problem is crucial for supporting 
distributed authoring. A write lock ensures that only one person may 
modify a resource, preventing overwrites. Furthermore, locking support 
is a key component of many versioning schemes, a desirable capability 
for distributed authoring.

An author may wish to lock an entire web of resources even though he 
is editing just a single resource, to keep the other resources from 
changing. In this way, an author can ensure that if a local hypertext 
web is consistent in his distributed authoring tool, it will then be 
consistent when he writes it to the server. Because of this, it should 
be possible to take out a lock without also causing transmission of the 
contents of a resource.

It is often necessary to guarantee that a lock or unlock operation 
occurs at the same time across multiple resources, a feature which is 
supported by the multiple-resource locking requirement. This is useful 
for preventing a collision between two people trying to establish locks 
on the same set of resources, since with multi-resource locking, one of 
the two people will get a lock. If this same multiple-resource locking 
scenario was repeated by using atomic lock operations iterated across 
the resources, the result would be a splitting of the locks between the 
two people, based on resource ordering and race conditions.

5.4. Reservations

5.4.1. Functional Requirements 

5.4.1.1. Reserve. It must be possible to notify the server that 
a resource is about to be edited by a given person.

5.4.1.2. Reservation Query. It must be possible to find out whether 
a given resource has any active reservations, and if so, who currently 
holds reservations.

5.4.1.3. Release Reservation.  It must be possible to release the 
reservation.

5.4.2. Rationale

Experience from configuration management systems has shown that people 
need to know when they are about to enter a parallel editing situation. 
Once notified, they either decide not to edit in parallel with the 
other authors, or they use out-of-band communication (face-to-face, 
telephone, etc.) to coordinate their editing to minimize the difficulty 
of merging their results. Reservations are separate from locking, since 
a write lock does not necessarily imply a resource will be edited, and 
a reservation does not carry with it any access restrictions. This 
capability supports versioning, since a check-out typically involves 
taking out a write lock, making a reservation, and getting the resource
to be edited.

5.5. Retrieval of Unprocessed Source for Editing

5.5.1. Functional Requirement

The source of any given resource must be retrievable.

5.5.2. Rationale

There are many cases where the source stored on a server does 
not correspond to the actual entity transmitted in response to an HTTP 
GET. Current known cases are server side include directives, and 
Standard Generalized Markup Language (SGML) source which is
converted on the fly to HyperText Markup Language (HTML) [1] output 
entities. There are many possible cases, such as automatic conversion 
of bitmap images into several variant bitmap media types (e.g. GIF, 
JPEG), and automatic conversion of an application's native media type 
into HTML. As an example of this last case, a word processor could 
store its native media type on a server which automatically converts 
it to HTML. A GET of this resource would retrieve the HTML. Retrieving 
the source would retrieve the word processor native format.

5.6. Partial Write.

5.6.1. Functional Requirement 

After editing a resource, it must be possible to write only the changes
to the resource, rather than retransmitting the entire resource.

5.6.2. Rationale

During distributed editing which occurs over wide geographic separations
and/or over low bandwidth connections, it is extremely inefficient
and frustrating to rewrite a large resource after minor changes, such 
as a one-character spelling correction. Support is needed for 
transmitting "insert" (e.g., add this sentence in the middle of a 
document) and "delete" (e.g. remove this paragraph from the middle of 
a document) style updates. Support for partial resource updates will 
make small edits more efficient, and allow distributed authoring tools 
to scale up for editing large documents.

5.7. Name Space Manipulation

5.7.1. Copy

5.7.1.1. Functional Requirements 

It must be possible to duplicate a resource without a client loading, 
then resaving the resource. After the copy operation, the content of 
the destination resource must be octet for octet identical to the 
content of the source resource. A modification to either resource must 
not cause a modification to the other.

5.7.1.2. Rationale

There are many reasons why a resource might need to be duplicated, such 
as changing ownership, preparing for major modifications, or making 
a backup. Due to network costs associated with loading and saving a 
resource, it is far preferable to have a server perform a resource copy
than a client. If a copied resource records which resource it is a copy
of, then it would be possible for a cache to avoid loading the copied 
resource if it already locally stores the original.

5.7.2. Move/Rename

5.7.2.1. Functional Requirements 

It must be possible to change the location of a resource without 
a client loading, then resaving the resource under a different name. 
After the move operation, the content of the resource at its new 
location must be octet for octet identical to the content of the prior 
resource. It must no longer be possible to access the resource at its 
original location.

5.7.2.2. Rationale

It is often necessary to change the name of a resource, for example due 
to adoption of a new naming convention, or if a typing error was made 
entering the name originally. Due to network costs, it is undesirable 
to perform this operation by loading, then resaving the resource,
followed by a delete of the old resource. Similarly, a single rename 
operation is more efficient than a copy followed by a delete operation.
Note that moving a resource is considered the same function as renaming
a resource.

5.8. Collections

A collection is a resource that is a container for other resources,
including other collections.  A resource may belong to a collection
either directly or by reference.  If a resource belongs to a
collection directly, namespace operations like copy, move, and
delete applied to the collection also apply to the resource.  If a
resource belongs to a collection by reference, namespace operations
applied to the collection affect only the reference, not the resource
itself.

5.8.1. Functional Requirements

5.8.1.1. List Collection. A listing of all resources in a specific 
collection must be accessible.

5.8.1.2. Make Collection. It must be possible to create a new 
collection.

5.8.1.3. Add to Collection.  It must be possible to add a resource to a
collection directly or by reference.

5.8.1.4. Remove from Collection.  It must be possible to remove a
resource from a collection.

5.8.2. Rationale

In [2] it states that, "some URL schemes (such as the ftp, http, and 
file schemes) contain names that can be considered hierarchical." 
Especially for HTTP servers which directly map all or part of their URL 
name space into a filesystem, it is very useful to get a listing of all 
resources located at a particular hierarchy level. This functionality 
supports "Save As..." dialog boxes, which provide a listing of the 
entities at a current hierarchy level, and allow navigation through 
the hierarchy. It also supports the creation of graphical visualizations
(typically as a network) of the hypertext structure among the entities 
at a hierarchy level, or set of levels. It also supports a tree
visualization of the entities and their hierarchy levels.

In addition, document management systems may want to make their 
documents accessible through the Web.  They typically allow the 
organization of documents into collections, and so also want their users
to be able to view the collection hierarchy through the Web.

There are many instances where there is not a strong correlation between
a URL hierarchy level and the notion of a collection. One example is a 
server in which the URL hierarchy level maps to a computational process 
which performs some resolution on the name. In this case, the contents 
of the URL hierarchy level can vary depending on the input to the 
computation, and the number of resources accessible via the computation 
can be very large. It does not make sense to implement a directory 
feature for such a namespace. However, the utility of listing the 
contents of those URL hierarchy levels which do correspond to 
collections, such as the large number of HTTP servers which map their 
namespace to a filesystem, argue for the inclusion of this capability, 
despite not being meaningful in all cases. If listing the contents of 
a URL hierarchy level does not makes sense for a particular URL, then 
a "405 Method Not Allowed" status code could be issued.

The ability to create collections to hold related resources supports 
management of a name space by packaging its members into small, related 
clusters. The utility of this capability is demonstrated by the broad 
implementation of directories in recent operating systems. The ability 
to create a collection also supports the creation of "Save As..." 
dialog boxes with "New Level/Folder/Directory" capability, common in 
many applications.

5.9. Versioning

5.9.1. Background and General Principles

5.9.1.1. Stability of versions. Most versioning systems are intended to
provide an accurate record of the history of evolution of a document. 
This accuracy is ensured by the fact that a version eventually becomes 
"frozen" and immutable. Once a version is frozen, further changes will 
create new versions rather than modifying the original. In order for 
caching and persistent references to be properly maintained, a client 
must be able to determine that a version has been frozen. Any successful
attempt to retrieve a frozen version of a resource will always retrieve
exactly the same content, or return an error if that version (or the 
resource itself) is no longer available.

5.9.1.2. Operations for Creating New Versions

Version management systems vary greatly in the operations they require,
the order of the operations, and how they are combined into atomic
functions.  In the most complete cases, the logical operations involved
are:

Reserve existing version
Lock existing version
Retrieve existing version
Request or suggest identifier for new version
Write new version
Release lock
Release reservation


With the exception of requesting a new version identifier, all of these
operations have applications outside of versioning and are either 
already part of HTTP or are discussed in earlier sections of these
requirements. Typically, versioning systems combine reservation, 
locking, and retrieval -- or some subset of these -- into an atomic 
checkout function.  They combine writing, releasing the lock, and 
releasing the reservation -- or some subset of these -- into an atomic 
checkin function.  The new version identifier may be assigned either at 
checkout or at checkin.

The WebDAV extensions must find some balance between allowing versioning
servers to adopt whatever policies they wish with regard to these 
operations and enforcing enough uniformity to keep client 
implementations simple.

5.9.1.3. The Versioning Model

Each version typically stands in a "derived from" relationship to its 
predecessor(s).  It is possible to derive several different versions 
from a single version (branching), and to derive a single version from 
several versions (merging).  Consequently, the collection of related
versions forms a directed acyclic graph.  In the following discussion,
this graph will be called a "version graph".  Each node of this graph
is a "version" or "member of the version graph".  The arcs of the graph
capture the "derived from" relationships.

It is also possible for a single resource to participate in multiple
version graphs.

The WebDAV extensions should support this versioning model, though
particular servers may restrict it in various ways.

5.9.1.4. Versioning Policies. Many writers, including Feiler [3] and 
Haake and Hicks [5], have discussed the notion of versioning styles 
(referred to here as versioning policies, to reflect the nature of 
client/server interaction) as one way to think about the different 
policies that versioning systems implement. Versioning policies include
decisions on the shape of version histories (linear or branched), the 
granularity of change tracking, locking requirements made by a server, 
etc. The protocol should clearly identify the policies that it dictates
and the policies that are left up to versioning system implementors or
administrators.

5.9.1.5. It is possible to version resources of any media type.

5.9.2. Functional Requirements

5.9.2.1. Referring to a version graph. There must be a way to refer to
a version graph as a whole.  

Some queries and operations apply, not to any one member of a
version graph, but to the version graph as a whole.  For example, a 
client may request that an entire graph be moved, or may ask for a 
version history. In these cases, a way to refer to the whole version 
graph is required.

5.9.2.2. Referring to a specific member of a version graph. There must
be a way to refer to each member of a version graph. This means that 
each member of the graph is itself a resource. 

Each member of a version graph must be a resource if it is to be 
possible for a hypertext link to refer to specific version of a page, 
or for a client to request a specific version of a document for editing.

5.9.2.3. A client must be able to determine whether a resource is a 
version graph, or whether a resource is itself a member of a version 
graph.

A resource may be a simple, non-versioned resource, or it may be a 
version graph, or it may be a member of a version graph.  A client needs
to be able to tell which sort of resource it is accessing.

5.9.2.4. There must be a way to refer to a server-defined default 
member of a version graph.

The server should return a default version of a resource for requests 
that ask for the default version, as well as for requests where no
specific version information is provided. This is one of the simplest 
ways to guarantee non-versioning client compatibility. This does not 
rule out the possibility of a server returning an error when no sensible
default exists.

It may also be desirable to be able to refer to other special members 
of a version graph. For example, there may be a current version for
editing that is different from the default version.  For a graph with
several branches, it may be useful to be able to request the tip version
of any branch.

5.9.2.5. It must be possible, given a reference to a member of a version
graph, to find out which version graph(s) that resource belongs to.

This makes it possible to understand the versioning context of the 
resource. It makes it possible to retrieve a version history for the 
graphs to which it belongs, and to browse the version graph. It also 
supports some comparison operations: It makes it possible to determine 
whether two references designate members of the same version graph.

5.9.2.6. Navigation of a version graph.  Given a reference to a member 
of a version graph, it must be possible to discover and access the 
following related members of the version graph.
root member of the graph
predecessor member(s)
successor member(s)
default member of the graph

It must be possible in some way for a versioning client to access
versions related to a resource currently being exhamined.

5.9.2.7. Version Topology. There must be a way to retrieve the complete 
version topology for a version graph, including information about all 
members of the version graph. The format for this information must be 
standardized so that the basic information can be used by all clients. 
Other specialized formats should be accomodated, for servers and 
clients that require information that cannot be included in the 
standard topology.

5.9.2.8. A client must be able to propose a version identifier to be 
used for a new member of a version graph. The server may refuse to use 
the client's suggested version identifier.  The server should tell the
client what version identifier it has assigned to the new member of the
version graph.

5.9.2.9. A version identifier must be unique across a version graph.

5.9.2.10. A client must be able to supply version-specific metadata to 
be associated with a new member of a version graph. (See Section 5.1 
"Attributes" above.) At a minimum, it must be possible to associate 
comments with the new member, explaining what changes were made.

5.9.2.11. A client must be able to query the server for information 
about a version tree, including which versions are locked, which are 
reserved for editing, and by whom (Session Tracking).

5.9.3. Rationale

Versioning in the context of the world-wide web offers a variety of
benefits:

It provides infrastructure for efficient and controlled management of 
large evolving web sites. Modern configuration management systems are 
built on some form of repository that can track the revision history of
individual resources, and provide the higher-level tools to manage 
those saved versions. Basic versioning capabilities are required to 
support such systems.

It allows parallel development and update of single resources. Since 
versioning systems register change by creating new objects, they
enable simultaneous write access by allowing the creation of variant
versions. Many also provide merge support to ease the reverse operation.

It provides a framework for coordinating changes to resources. While 
specifics vary, most systems provide some method of controlling or 
tracking access to enable collaborative resource development.

It allows browsing through past and alternative versions of a resource.
Frequently the modification and authorship history of a resource is
critical information in itself.

It provides stable names that can support externally stored links for
annotation and link-server support. Both annotation and link servers 
frequently need to store stable references to portions of resources 
that are not under their direct control. By providing stable states of 
resources, version control systems allow not only stable pointers into 
those resources, but also well-defined methods to determine the 
relationships of those states of a resource.

It allows explicit semantic representation of single resources with 
multiple states. A versioning system directly represents the fact that 
a resource has an explicit history, and a persistent identity across 
the various states it has had during the course of that history.

5.10. Security

5.10.1. Authentication. The WebDAV specification should state how the 
WebDAV extensions interoperate with existing authentication schemes, 
and should make recommendations for using those schemes.

5.10.2. Access Control. Access control requirements are TBD, and may
eventually be specified in a separate access control draft.

5.10.3. Interoperability with Security Protocols. The WebDAV 
specification should provide a minimal list of security protocols
which any compliant server / client should support.  These protocols
should insure the authenticity of messages and the privacy and 
integrity of messages in transit.

5.11. Internationalization

Internationalization requirements are TBD.

6. Acknowledgements

Our understanding of these issues has emerged as the result of much
thoughtful discussion, email, and assistance by many people, who
deserve recognition for their effort.

Dylan Barrell, Open Text, dbarrell@opentext.ch
Barbara Bazemore, PC DOCS, barbarab@pcdocs.com
Martin Cagan, Continuus Software, Marty_Cagan@continuus.com
Steve Carter, Novell, srcarter@novell.com
Dan Connolly, World Wide Web Consortium, connolly@w3.org
Jim Cunningham, Netscape, jfc@netscape.com
Ron Daniel Jr., Los Alamos National Laboratory, rdaniel@lanl.gov
Mark Day, Lotus, Mark_Day@lotus.com
Asad Faizi, Netscape, asad@netscape.com
Ron Fein, Microsoft, ronfe@microsoft.com
David Fiander, Mortice Kern Systems, davidf@mks.com
Roy Fielding, U.C. Irvine, fielding@ics.uci.edu
Mark Fisher, FisherM@exch1.indy.tce.com
Yaron Y. Goland, Microsoft, yarong@microsoft.com
Phill Hallam-Baker, MIT, hallam@ai.mit.edu
Dennis Hamilton, Xerox PARC, hamilton@parc.xerox.com
Andre van der Hoek, University of Colorado, Boulder,
andre@bigtime.cs.colorado.edu
Del Jensen, Novell, dcjensen@novell.com
Gail Kaiser, Columbia University, kaiser@cs.columbia.edu
Rohit Khare, World Wide Web Consortium, khare@w3.org
Mike Little, Bellcore, little@bellcore.com
Dave Long, America Online, dave@sb.aol.com
Henrik Frystyk Nielsen, World Wide Web Consortium, frystyk@w3.org
Ora Lassila, Nokia Research Center, ora.lassila@research.nokia.com
Larry Masinter, Xerox PARC, masinter@parc.xerox.com
Murray Maloney, SoftQuad, murray@sq.com
Jim Miller, World Wide Web Consortium, jmiller@w3.org
Keith Moore, University of Tennessee, Knoxville, moore@cs.utk.edu
Jon Radoff, NovaLink, jradoff@novalink.com
Alan Robertson, alanr@bell-labs.com
Andrew Schulert, Microsoft, andyschu@microsoft.com
Christopher Seiwald, Perforce Software, seiwald@perforce.com
Einar Stefferud, stef@nma.com
Richard Taylor, U.C. Irvine, taylor@ics.uci.edu
Robert Thau, MIT, rst@ai.mit.edu
Sankar Virdhagriswaran, sv@hunchuen.crystaliz.com
Gregory J. Woodhouse, gjw@wnetc.com


7. References

[1] T. Berners-Lee, D. Connolly, "HyperText Markup Language
Specification - 2.0", RFC 1866, MIT/LCS, November 1995.

[2] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)", RFC 1738, CERN, Xerox PARC, University of Minnesota,
December 1994.

[3] P. Feiler, "Configuration Management Models in Commercial
Environments", Software Engineering Institute Technical Report
CMU/SEI-91-TR-7, 


[4] R. Fielding, J. Gettys, J. C. Mogul, H. Frystyk, and
T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC 2068,
U.C. Irvine, DEC, MIT/LCS, January 1997.

[5] A. Haake, D. Hicks, "VerSE: Towards Hypertext Versioning Styles", 
Proc. Hypertext'96, The Seventh ACM Conference on Hypertext, 1996,
pages 224-234.

8. Authors' Addresses

Judith Slein
Xerox Corporation
800 Phillips Road 128-29E
Webster, NY 14580

EMail: slein@wrc.xerox.com

Fabio Vitali
Department of Computer Science
University of Bologna
ITALY

EMail: fabio@cs.unibo.it

E. James Whitehead, Jr.
Department of Information and Computer Science
University of California
Irvine, CA 92697-3425

Fax: 714-824-4056
EMail: ejw@ics.uci.edu

David G. Durand
Department of Computer Science
Boston University
Boston, MA

EMail: dgd@cs.bu.edu

Expires November 30, 1997
##------------------URL-------------------------##
http://www.ics.uci.edu/~webdav/
##-----------------TITLE------------------------##
This page has moved!
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/dav-09-to-10.html
##-----------------TITLE------------------------##
Changes from -09 to -10 WebDAV Distributed Authoring Protocol
##------------------TEXT------------------------##
WebDAV Distributed Authoring Protocol
Changes from -09 to -10 Revision


Issue ID
Type
Issue Description
Reference
RDF_NAME
Editorial
Discussion of RDF in section 4.2 incorrectly calls RDF the Resource Definition Framework.
[Changed Definition to Description].
Caught by Charles Wicksteed: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0130.html
REFS
Editorial
There are two references to [Lagoze, 1996], yet this reference is not in the references section. There are also two references to [Fielding et al., 1996] which should be [RFC2068]. Section 24.4.3 references [RFC2141] yet this isn't in the references section.
[Changed [Lagoze, 1996] to [WC] and added a reference for it in the References section. Changed references to [Fielding et al., 1996] to [RFC2068]. Added reference to RFC 2141 in references section.]
None.
UUID_NOT_GUID
Editorial
The ISO RPC specification uses the term UUID, not GUID.
[Changed all GUID to UUID.]
None.
XML_MIME
Change
XML can be transported using text/xml and application/xml MIME types.  DAV applications must be able to accept either.
[Added new requirement to section 14: " Since XML can be transported as text/xml or application/xml, a DAV server MUST accept DAV method requests with XML parameters transported as either text/xml or application/xml, and DAV client MUST accept XML responses using either text/xml or application/xml."]
Change recommended by Jim Davis: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0072.html
NARTEN_NITS
Editorial
Thomas Narten, a member of the IESG, reviewed the WebDAV draft and had several nits
[Fixed all nits.]
Change recommended by Thomas Narten.
LC_DAV_PROP
Editorial
At the end of Section 5.2, there are two property names with lower-cased "DAV:". These should be upper case.
[Fixed both these properties so they are upper case.]
Caught by Greg Stein:
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0183.html

URI_URL_DEF
Editorial
List discussion indicated some confusion about the difference between a URI and a URL.  Larry Masinter suggested a better definition for URI/URL.
[Modified the definition of URI/URL to state that the difference between a URI and a URL can be found in RFC2396].
List discussion starts with this by Geoff Clemm: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0137.html
Larry Masinter’s suggested definition language is at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0142.html
URI_VS_RESOURCE
Change
The specification was unclear about the distinction between a URI and a resource, and whether all types of resources could have multiple URIs per resource.
[Modified the specification to explicitly say that all resources, including collections, can have more than one URI. Modified  the language in the specification such that the URI vs. resource distinction is clear. A detailed list of sections affected is listed in: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0126.html]
Initial discussion began with this message by Larry Masinter: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0227.html
Another thread began with this message by Jim Whitehead: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0126.html
URI_URL_USE
Editorial
The use of URI and URL in the specification is imprecise.
[Reviewed use of URI and URL in the specification.]
Larry Masinter caught this:
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0142.html
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/protocol-08-edits.html
##-----------------TITLE------------------------##
DAV Final Call Issues List
##------------------TEXT------------------------##
WebDAV Distributed Authoring Protocol
Changes Between -07 and -08 Revision

Key:
Changes: These are changes which represent new functionality or requirements since the -07 revision.
D'oh: These are just plain screw-ups which are fixed in the -08 draft but which introduce no new functionality or requirements.
Ancient: These are changes to sections of text which were not properly updated in -07, and do not represent any new functionality or requirements.
Editorial: These are changes to make the draft easier to read, prettier, or more clear.  They do not represent any new functionality or requirements.





 Issue IDIssue DescriptionReferenceD'ohL_to_CLLocation header used where Content Location header was needed. The authors used the wrong header from HTTP/1.1http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0261.htmlChangesNULL_DEFWe need to define the term NULL resource and lock-null resource, define what methods it takes (LOCK, UNLOCK, PROPFIND, OPTIONS, etc.), what errors it returns for other methods (404 & 405), and what properties it must support (all mandatory DAV properties although most will be empty).http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0278.html, http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0005.html, http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0006.htmlD'ohProp_Lock_207In 7.10.10 the example does not currently return the lockdiscovery property as it is required to.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0275.htmlD'ohlocktoken_hrefCurrent DTD allows an empty href for the locktoken element, that is illegal.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0275.htmlD'oh7.1.2_emptyIn 7.1.2 we refer to an empty resource as undefined not emptyhttp://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0276.htmlAncient5.3_locktoken_in_header5.3 states that a lock token must be returned in the locktoken response header, but we now return the lock token in the bodyhttp://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0277.htmlEditorial4.1_collection_defThe current collection definition could be interpreted to restrict the use of GET on collections.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0282.htmlAncient4.4_single_sourceThe text in the last paragraph in section 4.4 says that the source link is only to be used when there is a single source, however that was never intended to be the requirement and in fact the current syntax allows for multiple source/dst elements.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JanMar/0282.htmlD'oh7.2_propatchThe first sentence of the last paragraph of section 7.2 specifies that a PROPPATCH must contain at least one PROPERTYUPDATE element, this is a bug, it meant one and only one.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0002.htmlAncient7.10.6_refresh7.10.6's table talks about regranting and the last paragraph does as well but this is a bug, it is illegal to ask for the same lock twice.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0002.htmlAncient7.11.1_lock_tokenThe lock-token header in the unlock example in 7.11.1 uses the old lock-token formathttp://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0002.htmlD'oh7.6.2.1_d'ohOne of the URLs in the explination paragraph uses ww. Instead of www.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0002.htmlAncient11.10.1.1_PropstatThe propstat description is from ancient version of the draft, the descriptive language and examples are all correct.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0002.htmlEditorial22_referencesWe have divided the references into normative and informational, apparently this sort of division makes the RFC editor very happy.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.htmlEditorial9.5_424The last sentence in the paragraph is unclear, I have tightened its language.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.htmlChangesXML_NamesThe appendix has been updated to the latest XML namespace draft. All namespace examples in the draft have been updated to use the new syntax.  Also updated reference to a WD from a NOTE. The only change of relevance to us is that the name attribute became "ns" and "as" became "prefix".http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.htmlEditorial7.1.1_non-collectionExample 7.1.1 has been turned into a PROPFIND on a non-collection resource because there were questions on what this would look like.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.htmlEditorialxml_null_warningSplit 24.3 into two parts, the first on the difference in meaning between <a></a> and <a/> and the second on illegally formatted XML.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.htmlEditorialif_examplesMade the examples in sections 8.4.1 &  8.4.2 into their own sections.http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.htmlEditorialexample_headersWe use a number of different formats to identify an example in the headers, we have gone through and made them all consistent. They are all now in the form "example - …."http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0007.html





Last Updated on 4/7/98
By Jim Whitehead
Email: ejw@ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/draft-ietf-webdav-protocol-06.html
##-----------------TITLE------------------------##
Extensions for Distributed Authoring on the World Wide Web -- WEBDAV
##------------------TEXT------------------------##
WEBDAV Working Group                            Y.Y. Goland, Microsoft
INTERNET DRAFT                          E.J. Whitehead, Jr., UC Irvine
<draft-ietf-webdav-protocol-06>                     A. Faizi, Netscape
                                                   S.R. Carter, Novell
                                                     D. Jensen, Novell
Expires July, 1998                                    January 18, 1998



This HTML version was converted from plaintext ASCII to HTML by Jim Davis.  My sincere apologies for any errors introduced in the process.  When in doubt, consult the ascii version.


  Extensions for Distributed Authoring on the World Wide Web -- WEBDAV


Status of this Memo

   This document is an Internet-Draft. Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups. Note that other groups may also distribute
   working documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or made obsolete by other
   documents at any time. It is inappropriate to use Internet-Drafts as
   reference material or to cite them other than as "work in progress".

To learn the current status of any Internet-Draft, please check the
   "1id-abstracts.txt" listing contained in the Internet-Drafts Shadow
   Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
   munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
   ftp.isi.edu (US West Coast).

Distribution of this document is unlimited. Please send comments to
   the Distributed Authoring and Versioning (WEBDAV) working group at
   <w3c-dist-auth@w3.org>, which may be joined by sending a message
   with subject "subscribe" to <w3c-dist-auth-request@w3.org>.


Discussions of the WEBDAV working group are archived at
http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth.


Abstract

This document specifies a set of methods, headers, and content-types
   ancillary to HTTP/1.1 for the management of resource properties,
   creation and management of resource collections, namespace
   manipulation, and resource locking (collision avoidance).

Changes

Changes since draft-ietf-webdav-protocol-06.txt

[Editor's note: This section will not appear in the final form of
   this document.  Its purpose is to provide a concise list of changes
   from the previous revision of the draft for use by reviewers.]

Rationale for many of the changes made in this revision of the draft
   can be found in the mailing list archives at:
http://lists.w3.org/Archives/Public/w3c-dist-auth/1997OctDec/0160.html.

Where the 200 OK status code was used to indicate a successful
   response without a response entity body, 204 No Content is now used.
   Because PEP uses 420 and 421 status codes, and since PEP has been
   submitted as an Experimental RFC, the WebDAV 420 status code has
   been changed to 422, and the WebDAV 421 status code has been changed
   to 423.

The 423 Destination Locked status code has been changed to 423
   Locked, and now covers all cases where an operand was locked,
   preventing the execution of the method.

Removed the Destroy header, since it is not needed in this draft,
   but will be needed in the versioning draft.

The Enforce-Live-Properties header was renamed to Property-Behavior,
   to more closely represent the meaning of the header now that the
   "omit" functionality is included. A keepalive field was added to the
   Property-Behavior header to make it more meaningful.

Removed the INDEX method, since the functionality of INDEX can now
   be performed by the PROPFIND method.  PROPFIND provides more
   flexibility in specifying the type and amount of property
   information returned than does INDEX, which is important for
   returning information on a large number of resources.

Clarified that performing a MOVE as a COPY, then DELETE, performed
   atomically, only applies to non-collection resources.

Clarified the semantics of errors that are encountered in infinite
   depth move and copy of a hierarchy of resources.  For errors copying
   internal nodes of the hierarchy tree (i.e., collections), the
   operation skips that subtree, and moves on to the next subtree.  If
   an error is encountered moving/copying a leaf of the tree, then skip
   that resource, and move on to the next leaf.

Removed the PATCH method.  This will be resubmitted as the document
   draft-ietf-webdav-patch-00.

Added language that states that if a PROPPATCH is invoked on a null
   resource (e.g., a deleted resource), an empty resource is created,
   and the PROPPATCH directives are performed on this new resource.

Added a forward reference to the source link definition (Section
   13.11) in Section 4.4.

Changed all Values= to Values:.  Also changed all "values" to
   "value".

References to state tokens are now restricted to sections 9.7 and
   9.8.

The property-behavior header has been turned into the
   propertybehavior XML element because it contained a list of URIs
   which can thus have unbounded size.  The lock-info header has been
   turned into the lockinfo XML element for the same reason.  I have
   also made the same change of the Propfind header into the Propfind
   XML element.  We can put the property behavior header into the body
   because neither COPY nor MOVE have bodies. However we can't put
   lock-token, if-state-match, etc. in the body because they may need
   to be used with PUT. However I don't consider this a big deal
   because I sincerely doubt that there will be cases where lock-token
   or if-state-match will see large numbers of entries.

Also changed omit to mean "copy properties with best effort but
   failure is acceptable."

Added the external members property.

Added language to 6.4 making it clear that any new resources created
   as the child of a write locked collection is added to the lock.

Made the lock-token response header from a single URL to multiple
   URLs.  But all the URLs MUST refer to the exact same lock.

<?XML version="1.0"> changed to the correct form:
 <?xml version="1.0"?>

Changed the delete rule for collections to read that if a delete in
   a collection member fails then it is the ancestors, not the progeny,
   who can not be deleted in order to maintain the namespace.

Updated our reference to the XML spec.

Added LOCK and UNLOCK to the list of methods covered by the write
   lock. This is necessary so that a lock-token will have to be
   submitted in order to make changes, otherwise we defeat the whole
   purpose of requiring the lock-token.

Changed the title of section 6.6 from Re-Issuing Write Locks to
   Refreshing Write Locks, made it illegal to make the same lock
   request twice (you know you are making the same request because you
   had to include the lock-token to make it!) and instead made it legal
   to submit a LOCK method with no body but with a lock-token header.
   I also added a refresh example.

Put in a note that an empty request body for PROPFIND means to
   return all names and values of properties on the resources.

I have added a section on XML processing errors. I know, I know, it
   shouldn't be in the standard. I will move it to our compliance draft
   as soon as we prepare the first version.

Removed addlocks and replaced with the depth header and the depth
   element.

Changed all the as in namespace elements to all lower case.

Moved all XML element declarations to the same section.  Removed the
   parent description.

Updated the depth section to make it more generic, changed the
   wording for how COPY/MOVE are handled with write locks, require that
   ALL propfind responses include href, require that if a property is
   not found in a propfind then a 404 Not Found must be returned, and
   made explicit that PROPFIND responses on resources with internal
   members are returned as a flat list with no significance to its
   ordering.

Removed reference to efficient update in the introduction since
   PATCH is now gone.

Rewrote the write lock and null resource section to deal with the
   question of the state of the resource when it is locked and null.

Changed www.ietf.org to www.iana.org.

Changed the response element and added the new propstat element.
   With the prohibition that an HREF can only appear once in a
   multistatus response we can guarantee linear processing costs.

Added Intellectual Property section, as required by RFC 2026.

Added IANA Considerations section.

Added Authorization headers to LOCK and UNLOCK examples.

Changed lock tokens in examples to use string format of UUID.

Since the latest HTTP revision defines a 418 and 419 status code,
   the 418 status code has been changed to 422, 419 to 423, 422 to 424,
   and 423 to 425.

Changed implementation of the get* (e.g., getcontentlength)
   properties to strength MUST.

Changed definition of XML elements and DAV properties to use XML
   element definitions, rather than BNF.

Renumbered all sections

Contents


STATUS OF THIS MEMO..................................................1
ABSTRACT.............................................................1
CHANGES..............................................................1
Changes since draft-ietf-webdav-protocol-06.txt......................1
CONTENTS.............................................................5
1 INTRODUCTION.......................................................9
2 DATA MODEL FOR RESOURCE PROPERTIES................................10
2.1  The Resource Property Model....................................10
2.2  Existing Metadata Proposals....................................10
2.3  Properties and HTTP Headers....................................11
2.4  Property Values................................................11
2.5  Property Names.................................................12
3 COLLECTIONS OF WEB RESOURCES......................................12
3.1  Collection Resources...........................................12
3.2  Creation and Retrieval of Collection Resources.................13
3.3  HTTP URL Namespace Model.......................................13
3.4  Source Resources and Output Resources..........................14
4 LOCKING...........................................................15
4.1  Exclusive Vs. Shared Locks.....................................15
4.2  Required Support...............................................16
4.3  Lock Tokens....................................................16
4.4  opaquelocktoken Lock Token URI Scheme..........................17
4.5  Lock Capability Discovery......................................17
4.6  Active Lock Discovery..........................................18
5 WRITE LOCK........................................................18
5.1  Methods Restricted by Write Locks..............................18
5.2  Write Locks and Properties.....................................18
5.3  Write Locks and Null Resources.................................18
5.4  Write Locks and Collections....................................19
5.5  Write Locks and COPY/MOVE......................................19
5.6  Refreshing Write Locks.........................................19
5.7  Write Locks and The Lock-Token Request Header..................20
 5.7.1   Write Lock Token Example...................................20
6 NOTATIONAL CONVENTIONS............................................21
7 HTTP METHODS FOR DISTRIBUTED AUTHORING............................21
7.1  PROPFIND.......................................................21
 7.1.1   Example: Retrieving Named Properties.......................22
 7.1.2   Example: Using allprop to Retrieve All Properties..........23
 7.1.3   Example: Using propname to Retrieve all Property Names.....26
7.2  PROPPATCH......................................................28
 7.2.1   Status Codes...............................................28
 7.2.2   Example....................................................28
7.3  MKCOL Method...................................................30
 7.3.1   Request....................................................30
 7.3.2   Response Codes.............................................30
 7.3.3   Example....................................................31
7.4  ADDREF Method..................................................31
 7.4.1   The Request................................................31
 7.4.2   Example....................................................31
7.5  DELREF Method..................................................32
 7.5.1   The Request................................................32
 7.5.2   Example....................................................32
7.6  GET, HEAD for Collections......................................32
7.7  POST for Collections...........................................33
7.8  DELETE.........................................................33
 7.8.1   DELETE for Non-Collection Resources........................33
 7.8.2   DELETE for Collections.....................................33
7.9  PUT............................................................34
 7.9.1   PUT for Non-Collection Resources...........................34
 7.9.2   PUT for Collections........................................35
7.10 COPY Method....................................................35
 7.10.1  COPY for HTTP/1.1 resources................................35
 7.10.2  COPY for Properties........................................35
 7.10.3  COPY for Collections.......................................36
 7.10.4  Type Interactions..........................................37
 7.10.5  Status Codes...............................................37
 7.10.6  Overwrite Example..........................................38
 7.10.7  No Overwrite Example.......................................38
 7.10.8  Collection Example.........................................38
7.11 MOVE Method....................................................39
 7.11.1  MOVE for Collections.......................................40
 7.11.2  Status Codes...............................................40
 7.11.3  Non-Collection Example.....................................41
 7.11.4  Collection Example.........................................41
7.12 LOCK Method....................................................42
 7.12.1  Operation..................................................43
 7.12.2  The Effect of Locks on Properties and Collections..........43
 7.12.3  Locking Replicated Resources...............................43
 7.12.4  Depth and Locking..........................................43
 7.12.5  Interaction with other Methods.............................44
 7.12.6  Lock Compatibility Table...................................44
 7.12.7  Lock Response..............................................44
 7.12.8  Status Codes...............................................44
 7.12.9  Example - Simple Lock Request..............................45
 7.12.10  Example - Refreshing a Write Lock.........................46
 7.12.11  Example - Multi-Resource Lock Request.....................47
7.13 UNLOCK Method..................................................48
 7.13.1  Example....................................................48
8 HTTP HEADERS FOR DISTRIBUTED AUTHORING............................49
8.1  Collection-Member Header.......................................49
8.2  DAV Header.....................................................49
8.3  Depth Header...................................................49
8.4  Destination Header.............................................50
8.5  If-None-State-Match............................................50
8.6  If-State-Match.................................................51
8.7  Lock-Token Request Header......................................51
8.8  Lock-Token Response Header.....................................52
8.9  Overwrite Header...............................................53
8.10 Status-URI Response Header.....................................53
8.11 Timeout Header.................................................53
9 STATUS CODE EXTENSIONS TO HTTP/1.1................................54
9.1  102 Processing.................................................54
9.2  207 Multi-Status...............................................55
9.3  422 Unprocessable Entity.......................................55
9.4  423 Insufficient Space on Resource.............................55
9.5  424 Method Failure.............................................55
9.6  425 Locked.....................................................55
10  MULTI-STATUS RESPONSE...........................................55
11  XML ELEMENT DEFINITIONS.........................................55
11.1 activelock XML Element.........................................56
 11.1.1  depth XML Element..........................................56
 11.1.2  locktoken XML Element......................................56
 11.1.3  timeout XML Element........................................56
11.2 collection XML Element.........................................56
11.3 href XML Element...............................................56
11.4 link XML Element...............................................57
 11.4.1  dst XML Element............................................57
 11.4.2  src XML Element............................................57
11.5 lockentry XML Element..........................................57
11.6 lockinfo XML Element...........................................57
11.7 lockscope XML Element..........................................58
 11.7.1  exclusive XML Element......................................58
 11.7.2  shared XML Element.........................................58
11.8 locktype XML Element...........................................58
 11.8.1  write XML Element..........................................58
11.9 multistatus XML Element........................................58
 11.9.1  response XML Element.......................................59
 11.9.2  responsedescription XML Element............................59
11.10 owner XML Element.............................................60
11.11 prop XML element..............................................60
11.12 propertybehavior XML element..................................60
 11.12.1  keepalive XML element.....................................60
 11.12.2  omit XML element..........................................61
11.13 propertyupdate XML element....................................61
 11.13.1  remove XML element........................................61
 11.13.2  set XML element...........................................62
11.14 propfind XML Element..........................................62
 11.14.1  allprop XML Element.......................................62
 11.14.2  propname XML Element......................................62
12  DAV PROPERTIES..................................................62
12.1 creationdate Property..........................................63
12.2 displayname Property...........................................63
12.3 externalmembers Property.......................................63
12.4 getcontentlanguage Property....................................63
12.5 getcontentlength Property......................................64
12.6 getcontenttype Property........................................64
12.7 getetag Property...............................................64
12.8 getlastmodified Property.......................................64
12.9 lockdiscovery Property.........................................65
 12.9.1  Example....................................................65
12.10 resourcetype Property.........................................66
12.11 source Property...............................................66
 12.11.1  Example...................................................67
12.12 supportedlock Property........................................67
 12.12.1  Example...................................................68
13  DAV COMPLIANCE CLASSES..........................................68
13.1 Class 1........................................................69
13.2 Class 2........................................................69
14  INTERNATIONALIZATION CONSIDERATIONS.............................69
15  SECURITY CONSIDERATIONS.........................................70
15.1 Authentication of Clients......................................71
15.2 Denial of Service..............................................71
15.3 Security through Obscurity.....................................72
15.4 Privacy Issues Connected to Locks..............................72
15.5 Privacy Issues Connected to Properties.........................72
15.6 Reduction of Security due to Source Link.......................72
16  IANA CONSIDERATIONS.............................................73
17  TERMINOLOGY.....................................................73
18  COPYRIGHT.......................................................74
19  INTELLECTUAL PROPERTY...........................................74
20  ACKNOWLEDGEMENTS................................................75
21  REFERENCES......................................................76
22  AUTHORS' ADDRESSES..............................................78
23  APPENDICES......................................................79
23.1 Appendix 1 - WebDAV Document Type Definition...................79
23.2 Appendix 2 - ISO 8601 Date and Time Profile....................80
23.3 Appendix 3 - Notes on Processing XML Elements..................81
 23.3.1  XML Syntax Error Example...................................81
 23.3.2  Unknown XML Element Example................................81


1  Introduction

This document describes an extension to the HTTP/1.1 protocol that
   allows clients to perform remote web content authoring operations.
   This extension provides a coherent set of methods, headers, request
   entity body formats, and response entity body formats that provide
   operations for:

Properties: The ability to create, remove, and query information
   about Web pages, such as their authors, creation dates, etc. Also,
   the ability to link pages of any media type to related pages.

Collections: The ability to create sets of related documents, and to
   receive a listing of pages at a particular hierarchy level (like a
   directory listing in a file system).

Locking: The ability to keep more than one person from working on a
   document at the same time. This prevents the "lost update problem,"
   in which modifications are lost as first one author, then another
   writes changes without merging the other author's changes

Namespace Operations: The ability to copy and move Web resources

Requirements and rationale for these operations are described in a
   companion document, "Requirements for a Distributed Authoring and
   Versioning Protocol for the World Wide Web" [Slein et al., 1997].

The sections below provide a detailed introduction to resource
   properties (Section 2), collections of resources (Section 3), and
   locking operations (Section 4).  These sections introduce the
   abstractions manipulated by the WebDAV-specific HTTP methods
   described in Section 7, "HTTP Methods for Distributed Authoring".

In HTTP/1.1, method parameter information was exclusively encoded in
   HTTP headers. Unlike HTTP/1.1, WebDAV, encodes method parameter
   information either in an Extensible Markup Language (XML) [Bray,
   Paoli, Sperberg-McQueen, 1998] request entity body, or in an HTTP
   header.  The use of XML to encode method parameters was motivated by
   the ability to add extra XML elements to existing structures,
   providing extensibility, and by XML's ability to encode information
   in ISO 10646 character sets, providing internationalization support.
   As a rule of thumb, parameters are encoded in XML entity bodies when
   they have unbounded length, or when they may be shown to a human
   user and hence require encoding in an ISO 10646 character set.
   Otherwise, parameters are encoded within HTTP headers.  Section 8
   describes the new HTTP headers used with WebDAV methods.

In addition to encoding method parameters, XML is used in WebDAV to
   encode the responses from methods, providing the extensibility and
   internationalization advantages of XML for method output, as well as
   input. XML elements used in this specification are defined in
   Section 11.

While the status codes provided by HTTP/1.1 are sufficient to
   describe most error conditions encountered by WebDAV methods, there
   are some errors that do not fall neatly into the existing
   categories.  New status codes developed for the WebDAV methods are
   defined in Section 9.  Since some WebDAV methods may operate over
   many resources, the Multi-Status status type has been introduced to
   return status information for multiple resources.  Multi-Status
   response is described in Section 10.

WebDAV employs the property mechanism to store information about the
   current state of the resource.  For example, when a lock is taken
   out on a resource, a lock information property describes the current
   state of the lock. Section 12 defines the properties used within the
   WebDAV specification.

Finishing off the specification are sections on what it means to be
   compliant with this specification (Section 13), on
   internationalization support (Section 14), and on security (Section
   15).


2  Data Model for Resource Properties

2.1 The Resource Property Model

Properties are pieces of data that describe the state of a resource.
   Properties are data about data.

Properties are used in distributed authoring environments to provide
   for efficient discovery and management of resources.  For example, a
   'subject' property might allow for the indexing of all resources by
   their subject, and an 'author' property might allow for the
   discovery of what authors have written which documents.

The DAV property model consists of name/value pairs.  The name of a
   property identifies the property's syntax and semantics, and
   provides an address by which to refer to that syntax and semantics.

There are two categories of properties: "live" and "dead".  A live
   property has its syntax and semantics enforced by the server. Live
   properties include cases where a) the value of a property is read-only, maintained by the server, and b) the value of the property is
   maintained by the client, but the server performs syntax checking on
   submitted values. A dead property has its syntax and semantics
   enforced by the client; the server merely records the value of the
   property verbatim.

2.2 Existing Metadata Proposals

Properties have long played an essential role in the maintenance of
   large document repositories, and many current proposals contain some
   notion of a property, or discuss web metadata more generally.  These
   include PICS [Miller et al., 1996], PICS-NG, XML [Bray, Paoli,
   Sperberg-McQueen, 1998], Web Collections, and several proposals on
   representing relationships within HTML. Work on PICS-NG and Web
   Collections has been subsumed by the Resource Definition Framework
   (RDF) metadata activity of the World Wide Web Consortium. RDF
   consists of a network-based data model and an XML representation of
   that model.

Some proposals come from a digital library perspective.  These
   include the Dublin Core [Weibel et al., 1995] metadata set and the
   Warwick Framework [Lagoze, 1996], a container architecture for
   different metadata schemas.  The literature includes many examples
   of metadata, including MARC [MARC, 1994], a bibliographic metadata
   format, and RFC 1807 [Lasher, Cohen, 1995], a technical report
   bibliographic format employed by the Dienst system. Additionally,
   the proceedings from the first IEEE Metadata conference describe
   many community-specific metadata sets.

Participants of the 1996 Metadata II Workshop in Warwick, UK
   [Lagoze, 1996], noted that "new metadata sets will develop as the
   networked infrastructure matures" and "different communities will
   propose, design, and be responsible for different types of
   metadata." These observations can be corroborated by noting that
   many community-specific sets of metadata already exist, and there is
   significant motivation for the development of new forms of metadata
   as many communities increasingly make their data available in
   digital form, requiring a metadata format to assist data location
   and cataloging.

2.3 Properties and HTTP Headers

Properties already exist, in a limited sense, in HTTP message
   headers.  However, in distributed authoring environments a
   relatively large number of properties are needed to describe the
   state of a resource, and setting/returning them all through HTTP
   headers is inefficient.  Thus a mechanism is needed which allows a
   principal to identify a set of properties in which the principal is
   interested and to set or retrieve just those properties.

2.4 Property Values

The value of a property is expressed as a well-formed XML document.

XML has been chosen because it is a flexible, self-describing,
   structured data format that supports rich schema definitions, and
   because of its support for multiple character sets.  XML's self-describing nature allows any property's value to be extended by
   adding new elements.  Older clients will not break when they
   encounter extensions because they will still have the data specified
   in the original schema and will ignore elements they do not
   understand.  XML's support for multiple character sets allows any
   human-readable property to be encoded and read in a character set
   familiar to the user.

2.5 Property Names

A property name is a universally unique identifier that is
   associated with a schema that provides information about the syntax
   and semantics of the property.

Because a property's name is universally unique, clients can depend
   upon consistent behavior for a particular property across multiple
   resources, so long as that property is "live" on the resources in
   question.

The XML namespace mechanism, which is based on URIs, is used to name
   properties because it prevents namespace collisions and provides for
   varying degrees of administrative control.

The property namespace is flat; that is, no hierarchy of properties
   is explicitly recognized.  Thus, if a property A and a property A/B
   exist on a resource, there is no recognition of any relationship
   between the two properties.  It is expected that a separate
   specification will eventually be produced which will address issues
   relating to hierarchical properties.

Finally, it is not possible to define the same property twice on a
   single resource, as this would cause a collision in the resource's
   property namespace.


3  Collections of Web Resources

This section provides a description of a new type of Web resource,
   the collection, and discusses its interactions with the HTTP Uniform
   Resource Locator (URL) namespace. The purpose of a collection
   resource is to model collection-like objects (e.g., filesystem
   directories) within a server's namespace.

All DAV compliant resources MUST support the HTTP URL namespace
   model specified herein.

3.1 Collection Resources

A collection is a resource whose state consists of an unordered list
   of internal members, an unordered list of external members, and a
   set of properties.  An internal member resource MUST have a URI that
   is immediately relative to the base URI of the collection.  That is,
   the internal member's URI is equal to the parent collection's URI
   plus an additional segment where segment is defined in Section 3.2.1
   of RFC 2068 [Fielding et al., 1996].

An external member resource is a resource that could not be an
   internal member resource. Any given internal or external Member MUST
   only belong to the collection once, i.e., it is illegal to have
   multiple instances of the same URI in a collection.  Properties
   defined on collections behave exactly as do properties on non-collection resources.

There is a standing convention that when a collection is referred to
   by its name without a trailing slash, the trailing slash is
   automatically appended.  Due to this, a resource MAY accept a URI
   without a trailing "/" to point to a collection. In this case it
   SHOULD return a location header in the response pointing to the URL
   ending with the "/".  For example, if a client invokes a method on
   http://foo.bar/blah (no trailing slash), the resource
   http://foo.bar/blah/ (trailing slash) MAY respond as if the
   operation were invoked on it, and SHOULD return a location header
   with http://foo.bar/blah/ in it.  In general clients SHOULD use the
   "/" form of collection names.

3.2 Creation and Retrieval of Collection Resources

This document specifies the MKCOL method to create new collection
   resources, rather than using the existing HTTP/1.1 PUT or POST
   method, for the following reasons

In HTTP/1.1, the PUT method is defined to store the request body at
   the location specified by the Request-URI.  While a description
   format for a collection can readily be constructed for use with PUT,
   the implications of sending such a description to the server are
   undesirable.  For example, if a description of a collection that
   omitted some existing resources were PUT to a server, this might be
   interpreted as a command to remove those members.  This would extend
   PUT to perform DELETE functionality, which is undesirable since it
   changes the semantics of PUT, and makes it difficult to control
   DELETE functionality with an access control scheme based on methods.

While the POST method is sufficiently open-ended that a "create a
   collection" POST command could be constructed, this is undesirable
   because it would be difficult to separate access control for
   collection creation from other uses of POST.

The exact definition of the behavior of GET and PUT on collections
   is defined later in this document.

3.3 HTTP URL Namespace Model

The HTTP URL Namespace is a hierarchical namespace where the
   hierarchy is delimited with the "/" character.  DAV compliant
   resources MUST maintain the consistency of the HTTP URL namespace.
   Any attempt to create a resource (excepting the root member of a
   namespace) that would not be the internal member of a collection
   MUST fail. For example, if the collection http://www.foo.bar.org/a/
   exists, but http://www.foo.bar.org/a/b/does not exist, an attempt to
   create http://www.foo.bar.org/a/b/c must fail.

3.4 Source Resources and Output Resources

For many resources, the entity returned by a GET method exactly
   matches the persistent state of the resource, for example, a GIF
   file stored on a disk.  For this simple case, the URL at which a
   resource is accessed is identical to the URL at which the source
   (the persistent state) of the resource is accessed.  This is also
   the case for HTML source files that are not processed by the server
   prior to transmission.

However, the server can sometimes process HTML resources before they
   are transmitted as a return entity body.  For example, server-side-include directives within an HTML file instruct a server to replace
   the directive with another value, such as the current date.  In this
   case, what is returned by GET (HTML plus date) differs from the
   persistent state of the resource (HTML plus directive).  Typically
   there is no way to access the HTML resource containing the
   unprocessed directive.

Sometimes the entity returned by GET is the output of a data-producing process that is described by one or more source resources
   (that may not even have a location in the URL namespace).  A single
   data-producing process may dynamically generate the state of a
   potentially large number of output resources.  An example of this is
   a CGI script that describes a "finger" gateway process that maps
   part of the namespace of a server into finger requests, such as
   http://www.foo.bar.org/finger_gateway/user@host.

In the absence of distributed authoring capabilities, it is
   acceptable to have no mapping of source resource(s) to the URI
   namespace. In fact, preventing access to the source resource(s) has
   desirable security benefits.  However, if remote editing of the
   source resource(s) is desired, the source resource(s) should be
   given a location in the URI namespace.  This source location should
   not be one of the locations at which the generated output is
   retrievable, since in general it is impossible for the server to
   differentiate requests for source resources from requests for
   process output resources.  There is often a many-to-many
   relationship between source resources and output resources.

On WebDAV compliant servers, for all output resources which have a
   single source resource (and that source resource has a URI), the URI
   of the source resource SHOULD be stored in a link on the output
   resource with type http://www.iana.org/standards/dav/source (see
   Section 12.11 for a description of the source link).  Note that by
   storing the source URIs in links on the output resources, the burden
   of discovering the source is placed on the authoring client.

4  Locking

The ability to lock a resource provides a mechanism for serializing
   access to that resource.  Using a lock, an authoring client can
   provide a reasonable guarantee that another principal will not
   modify a resource while it is being edited.  In this way, a client
   can prevent the "lost update" problem.

This specification allows locks to vary over two client-specified
   parameters, the number of principals involved (exclusive vs. shared)
   and the type of access to be granted. This document defines locking
   for only one access type, write. However, the syntax is extensible,
   and permits the eventual specification of locking for other access
   types.

4.1 Exclusive Vs. Shared Locks

The most basic form of lock is an exclusive lock.  This is a lock
   where the access right in question is only granted to a single
   principal.  The need for this arbitration results from a desire to
   avoid having to constantly merge results.

However, there are times when the goal of a lock is not to exclude
   others from exercising an access right but rather to provide a
   mechanism for principals to indicate that they intend to exercise
   their access right.  Shared locks are provided for this case.  A
   shared lock allows multiple principals to receive a lock.  Hence any
   principal with appropriate access can get the lock.

With shared locks there are two trust sets that affect a resource.
   The first trust set is created by access permissions.  Principals
   who are trusted, for example, may have permission to write the
   resource.  Those who are not, don't.  Among those who have access
   permission to write the resource, the set of principals who have
   taken out a shared lock also must trust each other, creating a
   (typically) smaller trust set within the access permission write
   set.

Starting with every possible principal on the Internet, in most
   situations the vast majority of these principals will not have write
   access to a given resource.  Of the small number who do have write
   access, some principals may decide to guarantee their edits are free
   from overwrite conflicts by using exclusive write locks.  Others may
   decide they trust their collaborators will not overwrite their work
   (the potential set of collaborators being the set of principals who
   have write permission) and use a shared lock, which informs their
   collaborators that a principal may be working on the resource.

The WebDAV extensions to HTTP do not need to provide all of the
   communications paths necessary for principals to coordinate their
   activities.  When using shared locks, principals may use any out of
   band communication channel to coordinate their work (e.g., face-to-face interaction, written notes, post-it notes on the screen,
   telephone conversation, Email, etc.)  The intent of a shared lock is
   to let collaborators know who else may be working on a resource.

Shared locks are included because experience from web distributed
   authoring systems has indicated that exclusive write locks are often
   too rigid.  An exclusive write lock is used to enforce a particular
   editing process: take out exclusive write lock, read the resource,
   perform edits, write the resource, release the lock.  This editing
   process has the problem that locks are not always properly released,
   for example when a program crashes, or when a lock owner leaves
   without unlocking a resource.  While both timeouts and
   administrative action can be used to remove an offending lock,
   neither mechanism may be available when needed; the timeout may be
   long or the administrator may not be available.

Despite their potential problems, exclusive write locks are
   extremely useful, since often a guarantee of freedom from overwrite
   conflicts is what is needed. This specification provides both
   exclusive write locks and the less strict mechanism of shared locks.

4.2 Required Support

A WebDAV compliant server is not required to support locking in any
   form.  If the server does support locking it MAY choose to support
   any combination of exclusive and shared locks for any access types.

The reason for this flexibility is that locking policy strikes to
   the very heart of the resource management and versioning systems
   employed by various storage repositories.  These repositories
   require control over what sort of locking will be made available.
   For example, some repositories only support shared write locks while
   others only provide support for exclusive write locks while yet
   others use no locking at all.  As each system is sufficiently
   different to merit exclusion of certain locking features, this
   specification leaves locking as the sole axis of negotiation within
   WebDAV.

4.3 Lock Tokens

A lock token is a URI that identifies a particular lock.  A lock
   token is returned by every successful LOCK operation in the Lock-Token response header, and can also be discovered through lock
   discovery on a resource.

Lock token URIs are required to be unique across all resources for
   all time. This uniqueness constraint allows lock tokens to be
   submitted across resources and servers without fear of confusion.

This specification provides a lock token URI scheme called
   opaquelocktoken that meets the uniqueness requirements.  However
   resources are free to return any URI scheme so long as it meets the
   uniqueness requirements.

4.4 opaquelocktoken Lock Token URI Scheme

The opaquelocktoken URI scheme is designed to be unique across all
   resources for all time.  Due to this uniqueness quality, a client
   MAY submit an opaque lock token in a Lock-Token request header and
   an If-[None]-State-Match header on a resource other than the one
   that returned it.

All resources MUST recognize the opaquelocktoken scheme and, at
   minimum, recognize that the lock token was not generated by the
   resource.  Note, however, that resources are not required to
   generate opaquelocktokens in LOCK method responses.

In order to guarantee uniqueness across all resources for all time
   the opaquelocktoken requires the use of the Universally Unique
   Identifier (UUID, also known as a Globally Unique Identifier, or
   GUID) mechanism, as described in [Leach, Salz, 1998].

Opaquelocktoken generators, however, have a choice of how they
   create these tokens.  They can either generate a new UUID for every
   lock token they create, which is potentially very expensive, or they
   can create a single UUID and then add extension characters.  If the
   second method is selected then the program generating the extensions
   MUST guarantee that the same extension will never be used twice with
   the associated UUID.

   OpaqueLockToken-URI = "opaquelocktoken:" UUID [Extension]  ; The
   UUID production is the string form of a UUID, as defined in [Leach,
   Salz, 1998]. Note that white space (LWS) is not allowed between
   elements of this production.


   Extension = path  ; path is defined in Section 3.2.1 of RFC 2068
   [Fielding et al., 1996]


4.5 Lock Capability Discovery

Since server lock support is optional, a client trying to lock a
   resource on a server can either try the lock and hope for the best,
   or perform some form of discovery to determine what lock
   capabilities the server supports.  This is known as lock capability
   discovery.  Lock capability discovery differs from discovery of
   supported access control types, since there may be access control
   types without corresponding lock types.  A client can determine what
   lock types the server supports by retrieving the supportedlock
   property.

Any DAV compliant resource that supports the LOCK method MUST
   support the supportedlock property.

4.6 Active Lock Discovery

If another principal locks a resource that a principal wishes to
   access, it is useful for the second principal to be able to find out
   who the first principal is.  For this purpose the lockdiscovery
   property is provided.  This property lists all outstanding locks,
   describes their type, and provides their lock token.

Any DAV compliant resource that supports the LOCK method MUST
   support the lockdiscovery property.


5  Write Lock

This section describes the semantics specific to the write access
   type for locks.  The write lock is a specific instance of a lock
   type, and is the only lock type described in this specification.  A
   DAV compliant resource MAY support the write lock.

5.1 Methods Restricted by Write Locks

A write lock prevents a principal without the lock from successfully
   executing a PUT, POST, PROPPATCH, LOCK, UNLOCK, MOVE, DELETE, MKCOL,
   ADDREF or DELREF on the locked resource.  All other current methods,
   GET in particular, function independent of the lock.

Note, however, that as new methods are created it will be necessary
   to specify how they interact with a write lock.

5.2 Write Locks and Properties

While those without a write lock may not alter a property on a
   resource it is still possible for the values of live properties to
   change, even while locked, due to the requirements of their schemas.
   Only dead properties and live properties defined to respect locks
   are guaranteed not to change while write locked.

5.3 Write Locks and Null Resources

It is possible to assert a write lock on a null resource in order to
   lock the name.  A write locked null resource acts in all ways as a
   null resource other than it MUST respond to a PROPFIND request and
   MUST support the lockdiscovery and supportedlock properties.

Until a method such as PUT or MKCOL is executed, the resource stays
   in the null state with the exception of the behavior stated above.

If the resource is unlocked without a PUT, MKCOL, or similar method
   having been executed, the resource is no longer required to support
   the PROPFIND method or the lockdiscovery and supportedlock
   properties.

5.4 Write Locks and Collections

A write lock on a collection prevents the addition or removal of
   members of the collection by non-lock owners.  As a consequence,
   when a principal issues a request to create a new internal member of
   a write locked collection using PUT or POST, or to remove an
   existing internal member of a write locked collection using DELETE,
   this request MUST fail if the principal does not have a write lock
   on the collection.

However, if a write lock request is issued to a collection
   containing internal member resources that are currently locked in a
   manner which conflicts with the write lock, the request MUST fail
   with a 425 Locked status code.

If a lock owner causes a resource to be added as an internal member
   of a locked collection then the new resource is automatically added
   to the lock.  This is the only mechanism that allows a resource to

be added to a write lock.  Thus, for example, if the collection
   /a/b/ is write locked and the resource /c is moved to /a/b/c then
   /a/b/c will be added to the write lock.

5.5 Write Locks and COPY/MOVE

A COPY method invocation MUST NOT duplicate any write locks active
   on the source.  However, as previously noted, if the COPY copies the
   resource into a collection that is depth locked then the resource
   will be added to the lock.

A MOVE does not move the write lock with the resource. There are two
   exceptions to this rule. First, as noted in section 5.4, if the MOVE
   makes the resource a child of a collection that is depth locked then
   the resource will be under the same lock. Second, if a depth locked
   resource is moved to a destination that is within the scope of the
   same depth lock (e.g., within the namespace tree covered by the
   lock), the moved resource is still a member of the lock. In both
   cases a Lock-Token header MUST be submitted containing a lock token
   for the lock on the source, if locked, and on the destination.

5.6 Refreshing Write Locks

A client MUST NOT submit the same write lock request twice.  Note
   that a client is always aware it is resubmitting the same lock
   request because it must include the Lock-Token header in order to
   make the request for a resource that is already locked.

However, a client MAY submit a LOCK method with a Lock-Token header
   but without a body.  This form of LOCK MAY only be used to "refresh"
   a lock.  Currently, refreshing a lock only means that any timers
   associated with the lock are re-set.

A server MAY return a Timeout header with a lock refresh that is
   different than the Timeout header returned when the lock was
   originally requested.  Additionally clients MAY submit Timeout
   headers of arbitrary value with their lock refresh requests.
   Servers, as always, MAY ignore Timeout headers submitted by the
   client.

If an error is received in response to a refresh LOCK request the
   client MUST assume that the lock was not refreshed.

5.7 Write Locks and The Lock-Token Request Header

If a user agent is not required to have knowledge about a lock when
   requesting an operation on a locked resource, the following scenario
   might occur.  Program A, run by User A, takes out a write lock on a
   resource.  Program B, also run by User A, has no knowledge of the
   lock taken out by Program A, yet performs a PUT to the locked
   resource.  In this scenario, the PUT succeeds because locks are
   associated with a principal, not a program, and thus program B,
   because it is acting with principal A's credential, is allowed to
   perform the PUT.  However, had program B known about the lock, it
   would not have overwritten the resource, preferring instead to
   present a dialog box describing the conflict to the user.  Due to
   this scenario, a mechanism is needed to prevent different programs
   from accidentally ignoring locks taken out by other programs with
   the same authorization.

In order to prevent these collisions the Lock-Token request header,
   defined in Section 8.7, is introduced.

5.7.1     Write Lock Token Example

>>Request


   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
   Lock-Token: <opaquelocktoken:f81d4fae-7dec-11d0-a765-00a0c91e6bf6>
   Authorization: Digest username="fielding",
      realm="fielding@ics.uci.edu", nonce="...",
      uri="/~fielding/index.html", response="...",
      opaque="..."


>>Response


   HTTP/1.1 204 No Content



In this example, even though both the source and destination are
   locked, only one lock token must be submitted, for the lock on the
   destination.  This is due to the source resource not being modified
   during a COPY, and hence unaffected by the write lock. The
   Authorization header provides the Digest authentication credentials
   for the principal making the request (note that the nonce, response,
   and opaque fields have not been calculated for this example). The
   source and the destination resources are both located within the
   same authentication realm, therefore only one set of Authorization
   credentials needs to be submitted.


6  Notational Conventions

Since this document describes a set of extensions to the HTTP/1.1
   protocol, the augmented BNF used herein to describe protocol
   elements is exactly the same as described in Section 2.1 of
   [Fielding et al., 1997].  Since this augmented BNF uses the basic
   production rules provided in Section 2.2 of [Fielding et al., 1997],
   these rules apply to this document as well.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [Bradner,
   1997].


7  HTTP Methods for Distributed Authoring

7.1 PROPFIND

The PROPFIND method retrieves properties defined on the Request-URI,
   if the resource does not have any internal members, or on the
   Request-URI and potentially its member resources, if the resource
   does have internal members.  All DAV compliant resources MUST
   support the PROPFIND method.

A client MAY submit a Depth header with a value of "0", "1", or
   "infinity" with a PROPFIND on a resource with internal members.  DAV
   compliant servers MUST support the "0", "1" and "infinity"
   behaviors. By default, the PROPFIND method without a Depth header
   MUST act as if a "Depth: infinity" header was included.

A client MAY submit a propfind XML element in the body of the
   request method describing what information is being requested.  It
   is possible to request particular property values, all property
   values, or a list of the names of the resource's properties.  A
   client MAY choose not to submit a request body.  An empty request
   body MUST be treated as a request for the names and values of all
   properties.

The response is a text/xml message body that contains a multistatus
   XML element that describes the results of the attempts to retrieve
   the various properties.  If a property was successfully retrieved
   then its value MUST be returned in a prop XML element.

If there is an error retrieving a property then a proper error
   result must be included.  Requests to retrieve the value of a
   property which does not exist is an error and MUST be noted with a
   response XML element which contains a 404 Not Found status value.

Consequently, the multistatus XML element for a resource with
   members MUST include a response XML element for each member of the
   resource, to whatever depth was requested. Each response XML element
   MUST contain an href XML element that identifies the resource on
   which the properties in the prop XML element are defined.  Results
   for a PROPFIND on a resource with internal members are returned as a
   flat list whose order of entries is not significant.

In the case of allprop and propname, if a principal does not have
   the right to know if a particular property exists then a 404 Not
   Found MUST be returned.

The results of this method SHOULD NOT be cached.

7.1.1     Example: Retrieving Named Properties

>>Request


   PROPFIND  /files/ HTTP/1.1
   Host: www.foo.bar
   Depth: 0
   Content-type: text/xml
   Content-Length: xyz

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:propfind>
     <D:href>http://www.foo.bar/boxschema/bigbox</D:href>
     <D:href>http://www.foo.bar/boxschema/author</D:href>
     <D:href>http://www.foo.bar/boxschema/DingALing</D:href>
     <D:href>http://www.foo.bar/boxschema/Random</D:href>
   </D:propfind>



>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.foo.bar/boxschema" as="R"?>
   <D:multistatus>
     <D:response>
          <D:href>http://www.foo.bar/files/</D:href>
          <D:propstat>
               <D:prop>
                    <R:bigbox>
                         <R:BoxType>Box type A</R:BoxType>
                    </R:bigbox>
                    <R:author>
                         <R:Name>J.J. Johnson</R:Name>
                    </R:author>
               </D:prop>
               <D:status>HTTP/1.1 200 OK</D:status>
          </D:propstat>
          <D:propstat>
               <D:prop><R:DingALing/><R:Random/></D:prop>
               <D:status>HTTP/1.1 403 Forbidden</D:status>
               <D:responsedescription> The user does not have access to
   the DingALing property.
               </D:responsedescription>
          </D:propstat>
     </D:response>
     <D:responsedescription> There has been an access violation error.
     </D:responsedescription>
   </D:multistatus>



In this example, PROPFIND is executed on the collection
   http://www.foo.bar/files/.  The specified depth is zero, hence the
   PROPFIND applies only to the collection itself, and not to any of
   its members.  The propfind XML element specifies the name of four
   properties whose values are being requested. In this case only two
   properties were returned, since the principal issuing the request
   did not have sufficient access rights to see the third and fourth
   properties.

7.1.2     Example: Using allprop to Retrieve All Properties

>>Request


   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Depth: 1
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:propfind>
     <D:allprop/>
   </D:propfind>



>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="S"?>
   <?namespace href="http://www.foo.bar/boxschema/" as="R"?>
   <S:multistatus>
     <S:response>
          <S:href>http://www.foo.bar/container/</S:href>
          <S:propstat>
               <S:prop>
                    <R:bigbox>
                         <R:BoxType>Box type A</R:BoxType>
                    </R:bigbox>
                    <R:author>
                         <R:Name>Hadrian</R:Name>
                    </R:author>
                   <S:creationdate>
                     1997-12-01T17:42:21-08:00
                   </S:creationdate>
                   <S:displayname>
                     Example collection
                   </S:displayname>
                   <S:externalmembers>
                     <S:href>http://www.acme.com/front/</S:href>
                   </S:externalmembers>
                   <S:resourcetype><S:collection/></S:resourcetype>
                   <S:supportedlock>
                     <S:lockentry>
                       <S:exclusive/><S:write/>
                     </S:lockentry>
                     <S:lockentry>
                       <S:shared/><S:write/>
                     </S:lockentry>
                   </S:supportedlock>
               </S:prop>
               <S:status>HTTP 1.1 200 OK</S:status>
          </S:propstat>
     </S:response>
     <S:response>
          <S:href>http://www.foo.bar/container/front.html</S:href>
          <S:propstat>
               <S:prop>
                    <R:bigbox>
                         <R:BoxType>Box type B</R:BoxType>
                    </R:bigbox>
                   <S:creationdate>
                     1997-12-01T18:27:21-08:00
                   </S:creationdate>
                   <S:displayname>
                     Example HTML resource
                   </S:displayname>
                   <S:getcontentlength>
                     4525
                   </S:getcontentlength>
                   <S:getcontenttype>
                     text/html
                   </S:getcontenttype>
                   <S:getetag>
                     zzyzx
                      </S:getetag>
                   <S:getlastmodified>
                     Monday, 12-Jan-98 09:25:56 GMT
                   </S:getlastmodified>
                   <S:resourcetype/>
                   <S:supportedlock>
                     <S:lockentry>
                       <S:exclusive/><S:write/>
                     </S:lockentry>
                     <S:lockentry>
                       <S:shared/><S:write/>
                     </S:lockentry>
                   </S:supportedlock>
               </S:prop>
               <S:status>HTTP 1.1 200 OK</S:status>
          </S:propstat>
     </S:response>
   </S:multistatus>



In this example, PROPFIND was invoked on the resource
   http://www.foo.bar/container/ with a Depth header of 1, meaning the
   request applies to the resource and its children, and a propfind XML
   element containing the allprop XML element, meaning the request
   should return the name and value of all properties defined on each
   resource.

The resource http://www.foo.bar/container/ has seven properties
   defined on it, named http://www.foo.bar/boxschema/bigbox,
   http://www.foo.bar/boxschema/author,
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/externalmembers,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.  The last five
   properties are WebDAV-specific, defined in Section 12.  Since GET is
   not supported on this resource, the get-* properties (e.g., get-content-length) are not defined on this resource. The DAV-specific
   properties assert that "container" was created on December 1, 1997,
   at 5:42:21PM, in a time zone 8 hours west of GMT (creationdate), has
   a name of "Example collection" (displayname), a single external
   member resource, http://www.acme.com/front/ (externalmembers), a
   collection resource type (resourcetype), and supports exclusive
   write and shared write locks (supportedlock).

The resource http://www.foo.bar/container/front.html has nine
   properties defined on it, named http://www.foo.bar/boxschema/bigbox
   (another instance of the "bigbox" property type),
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/getcontentlength,
   http://www.iana.org/standards/dav/getcontenttype,
   http://www.iana.org/standards/dav/getetag,
   http://www.iana.org/standards/dav/getlastmodified,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.  The DAV-specific
   properties assert that "front.html" was created on December 1, 1997,
   at 6:27:21PM, in a time zone 8 hours west of GMT (creationdate), has
   a name of "Example HTML resource" (displayname), a content length of
   4525 (getcontentlength), a MIME type of "text/html"
   (getcontenttype), an entity tag of "zzyzx" (getetag), was last
   modified on Monday, January 12, 1998, at 09:25:56 GMT
   (getlastmodified), has an undefined resource type, meaning that it
   is not a collection (resourcetype), and supports both exclusive
   write and shared write locks (supportedlock).

7.1.3     Example: Using propname to Retrieve all Property Names

>>Request


   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:propfind>
     <D:propname/>
   </D:propfind>



>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.foo.bar/boxschema/" as="R"?>
   <D:multistatus>
     <D:response>
          <D:href>http://www.foo.bar/container/</D:href>
          <D:propstat>
               <D:prop>
                    <R:bigbox/>
                    <R:author/>
                   <D:creationdate/>
                   <D:displayname/>
                   <D:externalmembers/>
                   <D:resourcetype/>
                   <D:supportedlock/>
               </D:prop>
               <D:status>HTTP 1.1 200 OK</D:status>
          </D:propstat>
     </D:response>
     <D:response>
          <D:href>http://www.foo.bar/container/front.html</D:href>
          <D:propstat>
               <D:prop>
                    <R:bigbox/>
                   <D:creationdate/>
                   <D:displayname/>
                   <D:get-content-length/>
                   <D:get-content-type/>
                   <D:get-etag/>
                   <D:get-last-modified/>
                   <D:resourcetype/>
                   <D:supportedlock/>
               </D:prop>
               <D:status>HTTP 1.1 200 OK</D:status>
          </D:propstat>
     </D:response>
   </D:multistatus>



In this example, PROPFIND is invoked on the collection resource
   http://www.foo.bar/container/, with a propfind XML element
   containing the propname XML element, meaning the name of all
   properties should be returned.  Since no depth header is present, it
   assumes its default value of "infinity", meaning the name of the
   properties on the collection and all its progeny should be returned.

Consistent with the previous example, resource
   http://www.foo.bar/container/ has seven properties defined on it,
   http://www.foo.bar/boxschema/bigbox, and
   http://www.foo.bar/boxschema/author,
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/externalmembers,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.  The resource
   http://www.foo.bar/container/index.html, a member of the "container"
   collection, has nine properties defined on it,
   http://www.foo.bar/boxschema/bigbox,
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/get-content-length,
   http://www.iana.org/standards/dav/get-content-type,
   http://www.iana.org/standards/dav/get-etag,
   http://www.iana.org/standards/dav/get-last-modified,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.


7.2 PROPPATCH

The PROPPATCH method processes instructions specified in the request
   body to set and/or remove properties defined on the resource
   identified by Request-URI.

All DAV compliant resources MUST support the PROPPATCH method and
   MUST process instructions that are specified using the
   propertyupdate, set, and remove XML elements of the DAV schema.
   Execution of the directives in this method is, of course, subject to
   access control constraints.  DAV compliant resources SHOULD support
   the setting of arbitrary dead properties.

The request message body of a PROPPATCH method MUST contain at least
   one propertyupdate XML element. Instruction processing MUST occur in
   the order instructions are received (i.e., from top to bottom).
   Instructions MUST either all be executed or none executed. Thus if
   any error occurs during processing all executed instructions MUST be
   undone and a proper error result returned. Instruction processing

details can be found in the definition of the set and remove
   instructions in Section 11.13.

If PROPPATCH is invoked on a null resource (e.g., a deleted
   resource), an empty resource is created, and the PROPPATCH
   directives are performed on this new resource.

7.2.1     Status Codes

   200 OK - The command succeeded.  As there can be a mixture of sets
   and removes in a body, a 201 Created seems inappropriate.

   403 Forbidden - The client, for reasons the server chooses not to
   specify, cannot alter one of the properties.

   409 Conflict - The client has provided a value whose semantics are
   not appropriate for the property.  This includes trying to set read-only properties.

   413 Request Entity Too Long - If a particular property is too long
   to be recorded then a composite XML error will be returned
   indicating the offending property.

7.2.2     Example

>>Request


   PROPPATCH /bar.html HTTP/1.1
   Host: www.foo.com
   Content-Type: text/xml
   Content-Length: xxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.w3.com/standards/z39.50/" as="Z"?>
   <D:propertyupdate>
     <D:set>
          <D:prop>
               <Z:authors>
                    <Z:Author>Jim Whitehead</Z:Author>
                    <Z:Author>Roy Fielding</Z:Author>
               </Z:authors>
          </D:prop>
     </D:set>
     <D:remove>
          <D:prop><Z:Copyright-Owner/></D:prop>
     </D:remove>
   </D:propertyupdate>



>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.w3.com/standards/z39.50/" as="Z"?>
   <D:multistatus>
     <D:response>
          <D:href>http://www.foo.com/bar</D:href>
          <D:propstat>
               <D:prop><Z:Authors/></D:prop>
               <D:status>HTTP/1.1 424 Method Failure</D:status>
          </D:propstat>
          <D:propstat>
               <D:prop><Z:Copyright-Owner/></D:prop>
               <D:status>HTTP/1.1 409 Conflict</D:status>
          </D:propstat>
          <D:responsedescription> Copyright Owner can not be deleted or
   altered.</D:responsedescription>
     <D:response>
   </D:multistatus>



In this example, the client requests the server to set the value of
   the http://www.w3.com/standards/z39.50/Authors property, and to
   remove the property http://www.w3.com/standards/z39.50/Copyright-Owner.  Since the Copyright-Owner property could not be removed, no
   property modifications occur.  The Method Failure status code for
   the Authors property indicates this action would have succeeded if
   it were not for the conflict with removing the Copyright-Owner
   property.


7.3 MKCOL Method

The MKCOL method is used to create a new collection. All DAV
   compliant resources MUST support the MKCOL method.

7.3.1     Request

MKCOL creates a new collection resource at the location specified by
   the Request-URI.  If the resource identified by the Request-URI is
   non-null then the MKCOL must fail.  During MKCOL processing, a
   server MUST make the Request-URI a member of its parent collection.
   If no such ancestor exists, the method MUST fail.  When the MKCOL
   operation creates a new collection resource, all ancestors MUST
   already exist, or the method MUST fail with a 409 Conflict status
   code.  For example, if a request to create collection /a/b/c/d/ is
   made, and neither /a/b/ nor /a/b/c/ exists, the request MUST fail.

When MKCOL is invoked without a request body, the newly created
   collection has no members.

A MKCOL request message MAY contain a message body.  The behavior of
   a MKCOL request when the body is present is limited to creating
   collections, members of a collection, bodies of members and
   properties on the collections or members.  If the server receives a
   MKCOL request entity type it does not support or understand it MUST
   respond with a 415 Unsupported Media Type status code.  The exact
   behavior of MKCOL for various request media types is undefined in
   this document, and will be specified in separate documents.

7.3.2     Response Codes

Responses from a MKCOL request are not cacheable, since MKCOL has
   non-idempotent semantics.

   201 Created - The collection or structured resource was created in
   its entirety.

   403 Forbidden - This indicates at least one of two conditions: 1)
   The server does not allow the creation of collections at the given
   location in its namespace, and 2) The parent collection of the
   Request-URI exists but cannot accept members.

   405 Method Not Allowed - MKCOL can only be executed on a
   deleted/non-existent resource.

   409 Conflict - A collection cannot be made at the Request-URI until
   one or more intermediate collections have been created.

   415 Unsupported Media Type- The server does not support the request
   type of the body.

   423 Insufficient Space on Resource - The resource does not have
   sufficient space to record the state of the resource after the
   execution of this method.

7.3.3     Example

This example creates a collection called /webdisc/xfiles/ on the
   server www.server.org.

>>Request


   MKCOL /webdisc/xfiles/ HTTP/1.1
   Host: www.server.org


>>Response


   HTTP/1.1 201 Created



7.4 ADDREF Method

The ADDREF method is used to add external members to a resource.
   All DAV compliant collection resources MUST support the ADDREF
   method.  All other DAV compliant resources MAY support the ADDREF
   method as appropriate.

7.4.1     The Request

The ADDREF method adds the URI specified in the Collection-Member
   header as an external member to the collection specified by the
   Request-URI.

It is not an error if the URI specified in the Collection-Member
   header already exists as an external member of the collection.
   However, after processing the ADDREF there MUST be only one instance
   of the URI in the collection.  If the URI specified in the
   Collection-Member header already exists as an internal member of the
   collection, the ADDREF method MUST fail with a 412 Precondition
   Failed status code.

More than one Collection-Member request header MUST NOT be used with
   the ADDREF method.

7.4.2     Example

>>Request


   ADDREF /~ejw/dav/ HTTP/1.1
   Host: www.ics.uci.edu
   Collection-Member: http://www.iana.org/standards/dav/


>>Response


   HTTP/1.1 204 No Content



This example adds the URI http://www.iana.org/standards/dav/ as an
   external member resource of the collection
   http://www.ics.uci.edu/~ejw/dav/.


7.5 DELREF Method

The DELREF method is used to remove external members from a
   resource.  All DAV compliant collection resources MUST support the
   DELREF method.  All other DAV compliant resources MUST support the
   DELREF method only if they support the ADDREF method.

7.5.1     The Request

The DELREF method removes the URI specified in the Collection-Member
   header from the collection specified by the Request-URI.

DELREFing a URI which is not a member of the collection is not an
   error.  DELREFing an internal member MUST fail with a 412
   Precondition Failed status code.

More than one Collection-Member request header MUST NOT be used with
   the DELREF method.

7.5.2     Example

>>Request


   DELREF /~ejw/dav/ HTTP/1.1
   Host: www.ics.udi.edu
   Collection-Member: http://www.iana.org/standards/dav/



>>Response


   HTTP/1.1 204 No Content


This example removes the URI http://www.iana.org/standards/dav/, an
   external member resource, from the collection
   http://www.ics.uci.edu/~ejw/dav/.


7.6 GET, HEAD for Collections

The semantics of GET are unchanged when applied to a collection,
   since GET is defined as, "retrieve whatever information (in the form
   of an entity) is identified by the Request-URI" [Fielding et al.,
   1997].  GET when applied to a collection MAY return the contents of
   an "index.html" resource, a human-readable view of the contents of
   the collection, or something else altogether. Hence it is possible
   that the result of a GET on a collection will bear no correlation to
   the state of the collection.

Similarly, since the definition of HEAD is a GET without a response
   message body, the semantics of HEAD are unmodified when applied to
   collection resources.

7.7 POST for Collections

Since by definition the actual function performed by POST is
   determined by the server and often depends on the particular
   resource, the behavior of POST when applied to collections cannot be
   meaningfully modified because it is largely undefined.  Thus the
   semantics of POST are unmodified when applied to a collection.


7.8 DELETE

7.8.1     DELETE for Non-Collection Resources

If the DELETE method is issued to a non-collection resource which is
   an internal member of a collection, then during DELETE processing a
   server MUST remove the Request-URI from its parent collection.  A
   server MAY remove the URI of a deleted resource from any collections
   of which the resource is an external member.

7.8.2     DELETE for Collections

The DELETE method on a collection MUST act as if a Depth = infinity
   header was used on it.  A client MUST NOT submit a Depth header on a
   DELETE on a collection with any value but infinity.

DELETE instructs that the collection specified in the request-URI,
   the records of its external member resources, and all its internal
   member resources, are to be deleted.

If any member cannot be deleted then all of the member's ancestors
   MUST NOT be deleted, so as to maintain the namespace.

Any headers included with DELETE MUST be applied in processing every
   resource to be deleted.

When the DELETE method has completed processing it MUST return a
   consistent namespace.
   The response SHOULD be a Multi-Status response that describes the
   result of the DELETE on each affected resource.

7.8.2.1   Example

>>Request


   DELETE  /container/ HTTP/1.1
   Host: www.foo.bar


>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="d"?>
   <d:multistatus>
     <d:response>
          <d:href>http://www.foo.bar/container/resource1</d:href>
          <d:href>http://www.foo.bar/container/resource2</d:href>
          <d:status>HTTP/1.1 200 OK</d:status>
     </d:response>
     <d:response>
          <d:href>http://www.foo.bar/container/</d:href>
          <d:status>HTTP/1.1 424 Method Failure</d:status>
     </d:response>
     <d:response>
          <d:href>http://www.foo.bar/container/resource3</d:href>
          <d:status>HTTP/1.1 425 Locked</d:status>
     </d:response>
   </d:multistatus>



In this example the attempt to delete
   http://www.foo.bar/container/resource3 failed because it is locked,
   and no lock token was submitted with the request. Consequently, the
   attempt to delete http://www.foo.bar/container/ also failed, but
   resource1 and resource2 were deleted. Even though a Depth header has
   not been included, a depth of infinity is assumed because the method
   is on a collection. As this example illustrates, DELETE processing
   need not be atomic.

7.9 PUT

7.9.1     PUT for Non-Collection Resources

A PUT performed on an existing resource replaces the GET response
   entity of the resource.  Properties defined on the resource MAY be
   recomputed during PUT processing but are not otherwise effected.
   For example, if a server recognizes the content type of the request
   body, it may be able to automatically extract information that could
   be profitably exposed as properties.

A PUT that would result in the creation of a resource without an
   appropriately scoped parent collection MUST fail with a 409
   Conflict.

7.9.2     PUT for Collections

As defined in the HTTP/1.1 specification [Fielding et al., 1997],
   the "PUT method requests that the enclosed entity be stored under
   the supplied Request-URI."  Since submission of an entity
   representing a collection would implicitly encode creation and
   deletion of resources, this specification intentionally does not
   define a transmission format for creating a collection using PUT.
   Instead, the MKCOL method is defined to create collections.  If a
   PUT is invoked on a collection resource it MUST fail.

When the PUT operation creates a new non-collection resource all
   ancestors MUST already exist.  If all ancestors do not exist, the
   method MUST fail with a 409 Conflict status code.  For example, if
   resource /a/b/c/d.html is to be created and /a/b/c/ does not exist,
   then the request must fail.


7.10 COPY Method

The COPY method creates a duplicate of the source resource, given by
   the Request-URI, in the destination resource, given by the
   Destination header.  The Destination header MUST be present.  The
   exact behavior of the COPY method depends on the type of the source
   resource.

Support for the COPY method does not guarantee the ability to copy a
   resource. For example, separate programs may control resources on
   the same server.  As a result, it may not even be possible to copy a
   resource to a location that appears to be on the same server.

7.10.1    COPY for HTTP/1.1 resources

When the source resource is not a collection the body of the
   destination resource MUST be octet-for-octet identical to the body
   of the source resource.  Subsequent alterations to the destination
   resource will not modify the source resource.  Subsequent
   alterations to the source resource will not modify the destination
   resource.  Thus, all copies are performed "by-value".

All properties on the source resource MUST be duplicated on the
   destination resource, subject to modifying headers and XML elements,
   following the definition for copying properties.

7.10.2    COPY for Properties

The following section defines how properties on a resource are
   handled during a COPY operation.

Live properties SHOULD be duplicated as identically behaving live
   properties at the destination resource.  If a property cannot be
   copied live, then its value MUST be duplicated, octet-for-octet, in
   an identically named, dead property on the destination resource.

The propertybehavior XML element can specify that properties are
   copied on best effort, that all live properties MUST be successfully
   copied or the method MUST fail, or that a specified list of live
   properties MUST be successfully copied or the method must fail. The
   propertybehavior XML element is defined in Section 11.12.

If a property on the source already exists on the destination
   resource and the Overwrite header is set to "T" then the property at
   the destination MUST be overwritten with the property from the
   source.  If the Overwrite header is "F" and the previous situation
   exists, then the COPY MUST fail with a 412 Precondition Failed.

7.10.3    COPY for Collections

The COPY method on a collection without a Depth header MUST act as
   if a Depth header with value "infinity" was included.  A client MAY
   submit a Depth header on a COPY on a collection with a value of "0"
   or "infinity".  DAV compliant servers MUST support the "0" and
   "infinity" behaviors.

A COPY of depth infinity instructs that the collection specified in
   the Request-URI and the records of its external member resources is
   to be copied to the location specified in the Destination header,
   and all its internal member resources are to be copied to a
   location relative to it, recursively through all levels of the
   collection hierarchy.

A COPY of depth "0" only instructs that the collection, the
   properties, and the records of its external members, not its
   internal members, are to be copied.

Any headers included with a COPY are to be applied in processing
   every resource to be copied.

The exception to this rule is the Destination header. This header
   only specifies the destination for the Request-URI. When applied to
   members of the collection specified in the request-URI the value of
   Destination is to be modified to reflect the current location in the
   hierarchy.  So, if the request-URI is "a" and the destination is "b"
   then when a/c/d is processed it MUST use a destination of b/c/d.

When the COPY method has completed processing it MUST have created a
   consistent namespace at the destination.  However, if an error
   occurs while copying an internal member collection, all members of
   this collection MUST NOT be copied. In this case, after detecting
   the error, the COPY operation SHOULD try to finish as much of the
   original copy operation as possible.  So, for example, if an
   infinite depth copy operation is performed on collection /a/, which
   contains collections /a/b/ and /a/c/, and an error occurs copying
   /a/b/, an attempt should still be made to copy /a/c/. Similarly,
   after encountering an error copying a non-collection resource as
   part of an infinite depth copy, the server SHOULD try to finish as
   much of the original copy operation as possible.

The response is a Multi-Status status code with an entity body that
   describes the result of the COPY on each affected resource.  The
   href XML element in the response refers to the resource that was to
   be copied, not the resource that was created as a result of the
   copy.  In other words, each entry indicates whether the copy on the
   resource specified in the href XML element succeeded or failed and
   why.

The exception to this rule is for errors that occurred on the
   destination.  For example, if the destination was locked the
   response would indicate the destination URL and a 425 Locked error.

7.10.4    Type Interactions

If the destination resource identifies a collection and the
   Overwrite header is "T", prior to performing the copy the server
   MUST perform a DELETE operation on the collection.

7.10.5    Status Codes

   201 Created - The source resource was successfully copied.  The copy
   operation resulted in the creation of a new resource.

   204 No Content - The source resource was successfully copied to a
   pre-existing destination resource.  Since there is no entity body in
   the response, 204 No Content is used instead of 200 OK.

   412 Precondition Failed - This status code MUST be returned if the
   server was unable to maintain the liveness of the properties listed
   in the propertybehavior XML element, or if the Overwrite header is
   "F", and the state of the destination resource is non-null.

   423 Insufficient Space on Resource - The destination resource does
   not have sufficient space to record the state of the resource after
   the execution of this method.

   425 Locked - The destination resource was locked and either a valid
   Lock-Token header was not submitted, or the Lock-Token header
   identifies a lock held by another principal.

   502 Bad Gateway - This may occur when the destination is on another
   server and the destination server refuses to accept the resource.

7.10.6    Overwrite Example

This example shows resource
   http://www.ics.uci.edu/~fielding/index.html being copied to the
   location http://www.ics.uci.edu/users/f/fielding/index.html.  The
   204 No Content status code indicates the existing resource at the
   destination was overwritten.

>>Request


   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html


>>Response


   HTTP/1.1 204 No Content


7.10.7    No Overwrite Example

The following example shows the same copy operation being performed,
   except with the Overwrite header set to "F."  A response of 412
   Precondition Failed is returned because the destination resource has
   a non-null state.

>>Request


   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
   Overwrite: F


>>Response


   HTTP/1.1 412 Precondition Failed


7.10.8    Collection Example

>>Request


   COPY /container/ HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/othercontainer/
   Depth: infinity
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="d"?>
   <d:propertybehavior>
     <d:keepalive>*</d:keepalive>
   </d:propertybehavior>



>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="d"?>
   <d:multistatus>
     <d:response>
       <d:href>http://www.foo.bar/othercontainer/resource1</d:href>
       <d:href>http://www.foo.bar/othercontainer/resource2</d:href>
       <d:href>http://www.foo.bar/othercontainer/</d:href>
     <d:status>HTTP/1.1 201 Created</d:status>
     </d:response>


  <d:response>
       <d:href>http://www.foo.bar/othercontainer/R2/</d:href>
       <d:href>http://www.foo.bar/othercontainer/R2/D2</d:href>
       <d:status>HTTP/1.1 412 Precondition Failed</d:status>
     </d:response>
   </d:multistatus>



The Depth header is unnecessary as the default behavior of COPY on a
   collection is to act as if a "Depth: infinity" header had been
   submitted.  In this example most of the resources, along with the
   collection, were copied successfully. However the collection R2
   failed, most likely due to a problem with maintaining the liveness
   of properties (this is specified by the propertybehavior XML
   element). Since an error occurred copying R2, R2's member D2 was not
   copied.


7.11 MOVE Method

The MOVE operation on a non-collection resource is the logical
   equivalent of a copy (COPY) followed by a delete, where the actions
   are performed atomically.  All DAV compliant resources MUST support
   the MOVE method.

However, support for the MOVE method does not guarantee the ability
   to move a resource to a particular destination. For example,
   separate programs may actually control different sets of resources
   on the same server.  Therefore, it may not even be possible to move
   a resource within a namespace that appears to belong to the same
   server.

If a resource exists at the destination, the destination resource
   will be DELETEd as a side effect of the MOVE operation, subject to
   the restrictions of the Overwrite header.

7.11.1    MOVE for Collections

A MOVE of depth infinity instructs that the collection specified in
   the Request-URI, including the records of its external member
   resources, is to be moved to the location specified in the
   Destination header, and all its internal member resources are to be
   moved to locations relative to it, recursively through all levels of
   the collection hierarchy.

The MOVE method on a collection MUST act as if a Depth "infinity"
   header was used on it.  A client MUST NOT submit a Depth header on a
   MOVE on a collection with any value but "infinity".

Any headers included with MOVE are to be applied in processing every
   resource to be moved.

The exception to this rule is the Destination header.  The behavior
   of this header is the same as given for COPY on collections.

When the MOVE method has completed processing it MUST have created a
   consistent namespace on both the source and destination. However, if
   an error occurs while moving an internal member collection, all
   members of the failed collection MUST NOT be moved. In this case,
   after detecting the error, the move operation SHOULD try to finish
   as much of the original move as possible.  So, for example, if an
   infinite depth move is performed on collection /a/, which contains
   collections /a/b/ and /a/c/, and an error occurs moving /a/b/, an
   attempt should still be made to try moving /a/c/. Similarly, after
   encountering an error moving a non-collection resource as part of an
   infinite depth move, the server SHOULD try to finish as much of the
   original move operation as possible.

As specified in the definition of MOVE, a MOVE of a collection over
   another collection causes the destination collection and all its
   members to be deleted.

The response is a Multi-Status response that describes the result of
   the MOVE on each affected resource.  The href XML element in the
   response refers to the resource that was to be moved, not the
   resource that was created as a result of the move.  In other words,
   each entry indicates whether the move on the resource specified in
   the href succeeded or failed and why.

The exception to this rule is for errors that occurred on the
   destination.  For example, if the destination was locked the
   response would indicate the destination URL and a 425 Locked error.

7.11.2    Status Codes

   201 Created - The source resource was successfully moved, and a new
   resource was created at the destination.

   204 No Content - The move operation was successful, and the resource
   at the destination was overwritten.

   412 Precondition Failed - This status code MUST be returned if the
   server was unable to maintain the liveness of the properties listed
   in the propertybehavior XML element, or if the Overwrite header is
   "F", and the state of the destination resource is non-null.

   425 Locked - The source or the destination resource was locked and
   either a valid Lock-Token header was not submitted, or the Lock-Token header identifies a lock held by another principal.

   502 Bad Gateway - This may occur when the destination is on another
   server and the destination server refuses to accept the resource.

7.11.3    Non-Collection Example

This example shows resource
   http://www.ics.uci.edu/~fielding/index.html being moved to the
   location http://www.ics.uci.edu/users/f/fielding/index.html. The
   contents of the destination resource would have been overwritten if
   the destination resource had been non-null.  In this case, since
   there was nothing at the destination resource, the response code is
   201 Created.


>>Request


   MOVE /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html


>>Response


   HTTP/1.1 201 Created
   Location: http://www.ics.uci.edu/users/f/fielding/index.html



7.11.4    Collection Example

>>Request


   MOVE /container/ HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/othercontainer/
   Overwrite: F
   Lock-Token: <opaquelocktoken:fe184f2e-6eec-41d0-c765-01adc56e6bb4>,
      <opaquelocktoken:e454f3f3-acdc-452a-56c7-00a5c91e4b77>
   Content-Type: text/xml
   Content-Length: xyz
   Authorization: Digest username="rohit",
      realm="rohit@www.foo.bar", nonce="...",
      uri="/container/", response="...",
      opaque="..."

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="d"?>
   <d:propertybehavior>
     <d:keepalive>*</d:keepalive>
   </d:propertybehavior>



>>Response


   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: zzz

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="d"?>
   <d:multistatus>
     <d:response>
       <d:href>http://www.foo.bar/container/resource1</d:href>
       <d:href>http://www.foo.bar/container/resource2</d:href>
       <d:href>http://www.foo.bar/container/</d:href>
       <d:status>HTTP/1.1 204 No Content</d:status>
     </d:response>
     <d:response>
       <d:href>http://www.foo.bar/container/C2/R2</d:href>
       <d:status>HTTP/1.1 424 Method Failure</d:status>
     <d:response>
       <d:href>http://www.foo.bar/othercontainer/C2/</d:href>
       <d:status>HTTP/1.1 425 Locked</d:status>
     </d:response>
   </d:multistatus>



In this example the client has submitted a number of lock tokens
   with the request.  A lock token will need to be submitted for every
   resource, both source and destination, anywhere in the scope of the
   method, that is locked.  In this case the proper lock token was not
   submitted for the destination http://www.foo.bar/othercontainer/C2/.
   This means that the resource /container/C2/ could not be moved.  As
   the attempt to move /container/C2/ failed then the resource
   /container/C2/R2 MUST also fail since it is a child of
   /container/C2/.


7.12 LOCK Method

The following sections describe the LOCK method, which is used to
   take out a lock of any access type.  These sections on the LOCK
   method describe only those semantics that are specific to the LOCK
   method and are independent of the access type of the lock being
   requested.

7.12.1    Operation

A LOCK method invocation creates the lock specified by the lockinfo
   XML element on the Request-URI.  Lock method requests SHOULD have a
   XML request body which contains an owner XML element for this lock
   request, unless this is a refresh request. The LOCK request MAY have
   a Timeout header.

A successful response to a lock invocation MUST include Lock-Token
   and Timeout headers.  Clients MUST assume that locks may arbitrarily
   disappear at any time, regardless of the value given in the Timeout
   header.  The Timeout header only indicates the behavior of the
   server if "extraordinary" circumstances do not occur.  For example,
   an administrator may remove a lock at any time or the system may
   crash in such a way that it loses the record of the lock's
   existence. The response MUST also contain the value of the
   lockdiscovery property in a prop XML element.

7.12.2    The Effect of Locks on Properties and Collections

The scope of a lock is the entire state of the resource, including
   its body and associated properties.  As a result, a lock on a
   resource also locks the resource's properties.

For collections, a lock also affects the ability to add or remove
   members.  The nature of the effect depends upon the type of access
   control involved.

7.12.3    Locking Replicated Resources

Some servers automatically replicate resources across multiple URLs.
   In such a circumstance the server MAY only accept a lock on one of
   the URLs if the server can guarantee that the lock will be honored
   across all the URLs.

7.12.4    Depth and Locking

The Depth header MAY be used with the LOCK method.  Values other
   than 0 or infinity MUST NOT be used with the Depth header.

A Depth header of value 0 means to just lock the resource specified
   by the request-URI.

If the Depth header is set to infinity then the resource specified
   in the request-URI along with all its internal members, all the way
   down the hierarchy, are to be locked.  A successful result will
   return a single lock token which represents all the resources that
   have been locked.  If an UNLOCK is executed on this token, all
   associated resources are unlocked.  If the lock cannot be granted to
   all resources, a 409 Conflict status code MUST be returned with a
   response entity body containing a multistatus XML element describing
   which resource(s) prevented the lock from being granted.  Hence,
   partial success is not an option.  Either the entire hierarchy is
   locked or no resources are locked.

7.12.5    Interaction with other Methods

The interaction of a LOCK with various methods is dependent upon the
   lock type.  However, independent of lock type, a successful DELETE
   of a resource MUST cause all of its locks to be removed.

7.12.6    Lock Compatibility Table

The table below describes the behavior that occurs when a lock
   request is made on a resource.


   Current lock state/Lock request
      Shared Lock
       Exclusive Lock   None                     True              True   Shared Lock              True              False  Exclusive Lock           False             False*


Legend: True = lock MAY be granted.  False = lock MUST NOT be
   granted.  *=if the principal requesting the lock is the owner of the
   lock, the lock MUST be regranted.

The current lock state of a resource is given in the leftmost
   column, and lock requests are listed in the first row.  The
   intersection of a row and column gives the result of a lock request.
   For example, if a shared lock is held on a resource, and an
   exclusive lock is requested, the table entry is "false", indicating
   the lock must not be granted.

If an exclusive or shared lock is re-requested by the principal who
   owns the lock, the lock MUST be regranted.  If the lock is
   regranted, the same lock token that was previously issued MUST be
   returned.

7.12.7    Lock Response

A successful lock response MUST contain a Lock-Token response
   header, a Timeout header and a prop XML element in the response body
   which contains the value of the lockdiscovery property.

7.12.8    Status Codes

   412 Precondition Failed - The included Lock-Token was not
   enforceable on this resource or the server could not satisfy the
   request in the lockinfo XML element.

   425 Locked - The resource is locked, so the method has been
   rejected.

7.12.9    Example - Simple Lock Request

>>Request


   LOCK /workspace/webdav/proposal.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Timeout: Infinite, Second-4100000000
   Content-Type: text/xml
   Content-Length: xyz
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <D:lockinfo>
     <D:locktype><D:write/></D:locktype>
     <D:lockscope><D:exclusive/></D:lockscope>
     <D:owner>
       <D:href>http://www.ics.uci.edu/~ejw/contact.html</D:href>
     </D:owner>
   </D:lockinfo>



>>Response


   HTTP/1.1 200 OK
   Lock-Token: <opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4>
   Timeout: Second-604800
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:prop>
     <D:lockdiscovery>
       <D:activelock>
         <D:locktype><D:write/></D:locktype>
         <D:lockscope><D:exclusive/></D:lockscope>
         <D:owner>
           <D:href>http://www.ics.uci.edu/~ejw/contact.html</D:href>
         </D:owner>
         <D:timeout>Second-604800</D:timeout>
         <D:locktoken>
           <D:href>
     opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4
           </D:href>
         </D:locktoken>
       </D:activelock>
     </D:lockdiscovery>
   </D:prop>



This example shows the successful creation of an exclusive write
   lock on resource
   http://webdav.sb.aol.com/workspace/webdav/proposal.doc.  The
   resource http://www.ics.uci.edu/~ejw/contact.html contains contact
   information for the owner of the lock.  The server has an activity-based timeout policy in place on this resource, which causes the
   lock to automatically be removed after 1 week (604800 seconds).  The
   response has a Lock-Token header that gives the lock token URL that
   uniquely identifies the lock created by this lock request.  Note
   that the nonce, response, and opaque fields have not been calculated
   in the Authorization request header.

7.12.10   Example - Refreshing a Write Lock

>>Request


   LOCK /workspace/webdav/proposal.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Timeout: Infinite, Second-4100000000
   Lock-Token: <opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4>
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."


>>Response


   HTTP/1.1 200 OK
   Lock-Token: <opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4>
   Timeout: Second-604800
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:prop>
     <D:lockdiscovery>
       <D:activelock>
         <D:locktype><D:write/></D:locktype>
         <D:lockscope><D:exclusive/></D:lockscope>
         <D:owner>
           <D:href>http://www.ics.uci.edu/~ejw/contact.html</D:href>
         </D:owner>
         <D:timeout>Second-604800</D:timeout>
         <D:locktoken>
           <D:href>
     opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4
           </D:href>
         </D:locktoken>
       </D:activelock>
     </D:lockdiscovery>
   </D:prop>



This request would refresh the lock, resetting any time outs.
   Notice that the client asked for an infinite time out but the server
   choose to ignore the request. In this example, the nonce, response,
   and opaque fields have not been calculated in the Authorization
   request header.

7.12.11   Example - Multi-Resource Lock Request

>>Request


   LOCK /webdav/ HTTP/1.1
   Host: webdav.sb.aol.com
   Timeout: Infinite, Second-4100000000
   Depth: infinity
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <D:lockinfo>
     <D:locktype><D:write/></D:locktype>
     <D:lockscope><D:exclusive/></D:lockscope>
     <D:owner>
       <D:href>http://www.ics.uci.edu/~ejw/contact.html</D:href>
     </D:owner>
   </D:lockinfo>



>>Response


   HTTP/1.1 207 Multistatus
   Content-Type: text/xml
   Content-Length: xxxxx

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <D:multistatus>
     <D:response>
          <D:href>http://webdav.sb.aol.com/webdav/proposal.doc</D:href>
          <D:href>http://webdav.sb.aol.com/webdav/</D:href>
          <D:status>HTTP/1.1 424 Method Failure</D:status>
     </D:response>
     <D:response>
          <D:href>http://webdav.sb.aol.com/webdav/secret</D:href>
          <D:status>HTTP/1.1 403 Forbidden</D:status>
     </D:response>
   </D:multistatus>



This example shows a request for an exclusive write lock on a
   collection and all its children.  In this request, the client has
   specified that it desires an infinite length lock, if available,
   otherwise a timeout of 4.1 billion seconds, if available. The
   request entity body contains the contact information for the
   principal taking out the lock, in this case a web page URL.

The 424 Method Failure indicates that a lock was not taken out on
   these resources due to an error elsewhere.  Note that this does not
   mean that a lock would have succeeded on these resources had the
   other error not occurred.  It only means that another error has
   occurred and so the entire method has been aborted.  The error is a
   403 Forbidden response on the resource
   http://webdav.sb.aol.com/webdav/secret.  Because this resource could
   not be locked, none of the resources were locked.

In this example, the nonce, response, and opaque fields have not
   been calculated in the Authorization request header.


7.13 UNLOCK Method

The UNLOCK method removes the lock identified by the lock token in
   the Lock-Token header from the Request-URI, and all other resources
   included in the lock.

Any DAV compliant resource which supports the LOCK method MUST
   support the UNLOCK method.

7.13.1    Example

>>Request


   UNLOCK /workspace/webdav/info.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Lock-Token:<opaquelocktoken:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7>
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."


>>Response


   HTTP/1.1 204 No Content


In this example, the lock identified by the lock token
   "opaquelocktoken:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7" is
   successfully removed from the resource
   http://webdav.sb.aol.com/workspace/webdav/info.doc.  If this lock
   included more than just one resource, the lock is removed from all
   resources included in the lock.  The 204 status code is used instead
   of 200 OK because there is no response entity body.


In this example, the nonce, response, and opaque fields have not
   been calculated in the Authorization request header.

8  HTTP Headers for Distributed Authoring

8.1 Collection-Member Header

   CollectionMember = "Collection-Member" ":" absoluteURI   ;
   absoluteURI is defined in section 3.2.1 of [Fielding et al., 1997]


The Collection-Member header specifies the URI of an external
   resource to be added/deleted to/from a collection.

8.2 DAV Header

   DAV = "DAV" ":" ["1"] [",2"] ["," 1#extend]


This header indicates that the resource supports the DAV schema and
   protocol as specified. All DAV compliant resources MUST return the
   DAV header on all OPTIONS responses.

The value is a list of all compliance classes that the resource
   supports. Note that above a comma has already been added to the 2.
   This is because a resource can not be level 2 compliant unless it is
   also level 1 compliant. Please refer to Section 13 for more details.
   In general, however, support for one compliance class does not
   entail support for any other.

8.3 Depth Header

   Depth = "Depth" ":" ("0" | "1" | "infinity")


The Depth header is used with methods executed on resources which
   could potentially have internal members to indicate whether the
   method is to be applied only to the resource (Depth = 0), to the
   resource and its immediate children, (Depth = 1), or the resource
   and all its progeny (Depth = infinity).

The Depth header is only supported if a method's definition
   explicitly provides for such support.

The following rules are the default behavior for any method that
   supports the Depth header. A method MAY override these defaults by
   defining different behavior in its definition.

Methods which support the Depth header MAY choose not to support all
   of the header's values and MAY define, on a case by case basis, the
   behavior of the method if a Depth header is not present. For
   example, the MOVE method only supports Depth = infinity and if a
   Depth header is not present will act as if a Depth = infinity header
   had been applied.


Clients MUST NOT rely upon methods executing on members of their
   hierarchies in any particular order or on the execution being
   atomic. Note that methods MAY provide guarantees on ordering and
   atomicity.

Upon execution, a method with a Depth header will perform as much of
   its assigned task as possible and then return a response specifying
   what it was able to accomplish and what it failed to do.

So, for example, an attempt to COPY a hierarchy may result in some
   of the members being copied and some not.

Any headers on a method with a Depth header MUST be applied to all
   resources in the scope of the method. For example, an If-Match
   header will have its value applied against every resource in the
   method's scope and will cause the method to fail if the header fails
   to match.

If a resource, source or destination, within the scope of the method
   is locked in such a way as to prevent the successful execution of
   the method, then the lock token for that resource MUST be submitted
   with the request in the Lock-Token request header.

The Depth header only specifies the behavior of the method with
   regards to internal children.  If a resource does not have internal
   children then the Depth header is ignored.

Please note, however, that it is always an error to submit a value
   for the Depth header that is not allowed by the method's definition.
   Thus submitting a "Depth: 1" on a COPY, even if the resource does
   not have internal members, MUST result in a 400 Bad Request. The
   method should fail not because the resource doesn't have internal
   members, but because of the illegal value in the header.

8.4 Destination Header

   Destination = "Destination" ":" URI


The Destination header specifies a destination resource for methods
   such as COPY and MOVE, which take two URIs as parameters.

8.5 If-None-State-Match

   If-None-State-Match = "If-None-State-Match" ":" 1#Coded-URL
   Coded-URL = "<" URI ">"



The If-None-State-Match header is intended to have similar
   functionality to the If-None-Match header defined in section 14.26
   of [Fielding et al., 1997].  However the If-None-State-Match header
   is intended for use with any URI which represents state information
   about a resource, referred to as a state token.  A typical example
   is a lock token.

If any of the state tokens identifies the current state of the
   resource, the server MUST NOT perform the requested method.
   Instead, if the request method was GET, HEAD, or PROPFIND, the
   server SHOULD respond with a 304 Not Modified response, including
   the cache-related entity-header fields (particularly ETag) of the
   current state of the resource.  For all other request methods, the
   server MUST respond with a status of 412 Precondition Failed.

If none of the state tokens identifies the current state of the
   resource, the server MAY perform the requested method.

If any of the tokens is not recognized, the method MUST fail with a
   412 Precondition Failed.

Note that the "AND" and "OR" keywords specified with the If-State-Match header are intentionally not defined for If-None-State-Match,
   because this functionality is not required.

8.6 If-State-Match

   If-State-Match = "If-State-Match" ":" ("AND" | "OR") 1#Coded-URL


The If-State-Match header is intended to have similar functionality
   to the If-Match header defined in section 14.25 of [Fielding et al.,
   1997].  However the If-State-Match header is intended for use with
   any URI which represents state information about a resource.  A
   typical example is a lock token.

If the AND keyword is used and all of the state tokens identify the
   state of the resource, then the server MAY perform the requested
   method.  If the OR keyword is used and any of the state tokens
   identifies the current state of the resource, then the server MAY
   perform the requested method.  If the keyword requirement for the
   keyword used is not met, the server MUST NOT perform the requested
   method, and MUST return a 412 Precondition Failed response.

If any of the tokens is not recognized, the method MUST fail with a
   412 Precondition Failed.

8.7 Lock-Token Request Header

   Lock-Token = "Lock-Token" ":" 1#Coded-URL


The Lock-Token request header, containing a lock token owned by the
   requesting principal, is used by the principal to indicate that the
   principal is aware of the existence of the lock specified by the
   lock token.

If the following conditions are met:

1) The method is restricted by a lock type that requires the
   submission of a lock token, such as a write lock,
   2) The user-agent has authenticated itself as a given principal,
   3) The user-agent is submitting a method request to a resource on
   which the principal owns a write lock,

Then:

1) The method request MUST include a Lock-Token header with the lock
      token, or,
   2) The method MUST fail with a 409 Conflict status code.

If multiple resources are involved with a method, such as the MOVE
   method, then the lock tokens, if any, for all affected resources,
   MUST be included in the Lock-Token request header.

For example, Program A, used by user A, takes out a write lock on a
   resource.  Program A then makes a number of PUT requests on the
   locked resource.  All the requests contain a Lock-Token request
   header that includes the write lock token.  Program B, also run by
   User A, then proceeds to perform a PUT to the locked resource.
   However, program B was not aware of the existence of the lock and so
   does not include the appropriate Lock-Token request header.  The
   method is rejected even though principal A is authorized to perform
   the PUT.  Program B can, if it so chooses, now perform lock
   discovery and obtain the lock token.  Note that programs A and B can
   perform GETs without using the Lock-Token header because the ability
   to perform a GET is not affected by a write lock.

Having a lock token provides no special access rights.  Anyone can
   find out anyone else's lock token by performing lock discovery.
   Locks are to be enforced based upon whatever authentication
   mechanism is used by the server, not based on the secrecy of the
   token values.

8.8 Lock-Token Response Header

   Lock-Token = "Lock-Token" ":" 1#Coded-URL


If a resource is successfully locked then a Lock-Token header will
   be returned containing the lock token that represents the lock.
   If multiple lock-tokens are returned then they MUST all refer to the
   same lock.  As the lock tokens all refer to the same lock a client
   need only record one of them.

8.9 Overwrite Header

   Overwrite = "Overwrite" ":" ("T" | "F")


The Overwrite header specifies whether the server should overwrite
   the state of a non-null destination resource during a COPY or MOVE.
   A value of "F" states that the server MUST NOT perform the COPY or
   MOVE operation if the state of the destination resource is non-null.
   By default, the value of Overwrite is "T" and a client MAY omit this
   header from a request when its value is "T". While the Overwrite
   header appears to duplicate the functionality of the If-Match: *
   header of HTTP/1.1, If-Match applies only to the Request-URI, and
   not to the Destination of a COPY or MOVE.

If a COPY or MOVE is not performed due to the value of the Overwrite
   header, the method MUST fail with a 409 Conflict status code.

8.10 Status-URI Response Header

The Status-URI response header MAY be used with the 102 Processing
   status code to inform the client as to the status of a method.

   Status-URI = "Status-URI" ":" *(Status-Code "<" URI ">") ; Status-Code is defined in 6.1.1 of [Fielding et al., 1997]


The URIs listed in the header are source resources which have been
   affected by the outstanding method.  The status code indicates the
   resolution of the method on the identified resource.  So, for
   example, if a MOVE method on a collection is outstanding and a 102
   "Processing" response with a Status-URI response header is returned,
   the included URIs will indicate resources that have had move
   attempted on them and what the result was.

8.11 Timeout Header

   TimeOut = "Timeout" ":" 1#TimeType
   TimeType = ("Second-" DAVTimeOutVal | "Infinite" | Other)
   DAVTimeOutVal = 1*digit
   Other = Extend field-value   ; See section 4.2 of [Fielding et al.,
   1997]


Clients MAY include Timeout headers in their LOCK requests.
   However, the server is not required to honor or even consider these
   requests.  Clients MUST NOT submit a Timeout request header with any
   method other than a LOCK method.

A Timeout request header MUST contain at least one TimeType and MAY
   contain multiple TimeType entries. The purpose of listing multiple
   TimeType entries is to indicate multiple different values and value
   types that are acceptable to the client.  The client lists the
   TimeType entries in order of preference.

The Timeout response header MUST use a Second value, Infinite, or a
   TimeType the client has indicated familiarity with.  The server MAY
   assume a client is familiar with any TimeType submitted in a Timeout
   header.

The "Second" TimeType specifies the number of seconds that MUST
   elapse between granting of the lock at the server, and the automatic
   removal of the lock.  A server MUST not generate a timeout value for
   "Second" greater than 2^32-1.

The timeout counter SHOULD be restarted any time an owner of the
   lock sends a method to any member of the lock, including unsupported
   methods, or methods which are unsuccessful.  However the lock MUST
   be refreshed if a refresh LOCK method is successfully received.

If the timeout expires then the lock is lost.  Specifically the
   server SHOULD act as if an UNLOCK method was executed by the server
   on the resource using the lock token of the timed-out lock,
   performed with its override authority. Thus logs should be updated
   with the disposition of the lock, notifications should be sent,
   etc., just as they would be for an UNLOCK request.

Servers are advised to pay close attention to the values submitted
   by clients, as they will be indicative of the type of activity the
   client intends to perform.  For example, an applet running in a
   browser may need to lock a resource, but because of the instability
   of the environment within which the applet is running, the applet
   may be turned off without warning.  As a result, the applet is
   likely to ask for a relatively small timeout value so that if the
   applet dies, the lock can be quickly harvested.  However, a document
   management system is likely to ask for an extremely long timeout
   because its user may be planning on going off-line.


9  Status Code Extensions to HTTP/1.1

The following status codes are added to those defined in HTTP/1.1
   [Fielding et al., 1997].

9.1 102 Processing

Methods can potentially take a long period of time to process,
   especially methods that support the Depth header.  In such cases the
   client may time-out the connection while waiting for a response.  To
   prevent this the server MAY return a 102 status code to indicate to
   the client that the server is still processing the method.

If a method is taking longer than 20 seconds (a reasonable, but
   arbitrary value) to process the server SHOULD return a 102
   "Processing" response.

9.2 207 Multi-Status

The response provides status for multiple independent operations.

9.3 422 Unprocessable Entity

The server understands the content type of the request entity, but
   was unable to process the contained instructions.

9.4 423 Insufficient Space on Resource

The resource does not have sufficient space to record the state of
   the resource after the execution of this method.

9.5 424 Method Failure

The method was not executed on a particular resource within its
   scope because some part of the method's execution failed causing the
   entire method to be aborted.  For example, if a resource could not
   be moved as part of a MOVE method, all the other resources would
   fail with a 424 Method Failure.

9.6 425 Locked

The source or destination resource of a method is locked, and either
   the request did not contain a valid Lock-Token header, or the lock
   token in the Lock-Token header identifies a lock held by another
   principal.


10 Multi-Status Response

The default 207 Multi-Status response body is a text/xml HTTP entity
   that contains a single XML element called multistatus, which
   contains a set of XML elements called response, one for each 200,
   300, 400, and 500 series status code generated during the method
   invocation.  100 series status codes MUST NOT be recorded in a
   response XML element.


11 XML Element Definitions

In the section below, the final line of each section gives the
   element type declaration using the format defined in [Bray, Paoli,
   Sperberg-McQueen, 1998]. The "Value" field, where present, specifies
   futher restrictions on the allowable contents of the XML element
   using BNF (i.e., to further restrict the values of a PCDATA
   element).

11.1 activelock XML Element

   Name:       activelock
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Describes a lock on a resource.

   <!ELEMENT activelock (locktype, lockscope, depth?, owner, timeout,
   locktoken) >


11.1.1    depth XML Element

   Name:       depth
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    The value of the depth header used to create a lock.
   Description: If this element is not included in a lockinfo element
   then the client MUST assume that the lock is of depth 0.
   Value:      "0" | "infinity"

   <!ELEMENT depth (#PCDATA) >


11.1.2    locktoken XML Element

   Name:       locktoken
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    The lock token associated with a lock.
   Description: The href contains an opaque lock token URI (i.e., the
   OpaqueLockToken-URI production in Section 4.4).

   <!ELEMENT locktoken (href) >


11.1.3    timeout XML Element

   Name:       timeout
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    The timeout associated with a lock
   Value:      TimeType

   <!ELEMENT timeout (#PCDATA) >


11.2 collection XML Element

   Name:       collection
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Identifies the associated resource as a collection. The
   resourcetype property of a collection resource MUST have this value.

   <!ELEMENT collection EMPTY >


11.3 href XML Element

   Name:       href
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Identifies the content of the element as a URI.
   Value:      URI ; See section 3.2.1 of [Fielding et al., 1997]

   <!ELEMENT href (#PCDATA)>


11.4 link XML Element

   Name:       link
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Identifies the property as a link and contains the
   source and destination of that link.
   Description: The link XML element is used to provide the sources and
   destinations of a link.  The name of the property containing the
   link XML element provides the type of the link.  Link is a multi-valued element, so multiple links may be used together to indicate
   multiple links with the same type.

   <!ELEMENT link (src+, dst+) >


11.4.1    dst XML Element

   Name:       dst
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Indicates the destination of a link
   Value:      URI

   <!ELEMENT dst (#PCDATA) >


11.4.2    src XML Element

   Name:       src
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Indicates the source of a link.
   Value:      URI

   <!ELEMENT src (#PCDATA) >


11.5 lockentry XML Element

   Name:       lockentry
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Defines the types of locks that can be used with the
   resource.

   <!ELEMENT lockentry (lockscope, locktype) >


11.6 lockinfo XML Element

   Name:       lockinfo
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    The lockinfo XML element is used with a LOCK method to
   specify the type of lock the client wishes to have created.

   <!ELEMENT lockinfo (lockscope, locktype, owner?) >


11.7 lockscope XML Element

   Name:       lockscope
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies whether a lock is an exclusive lock, or a
   shared lock.

   <!ELEMENT lockscope (exclusive | shared) >


11.7.1    exclusive XML Element

   Name:       exclusive
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies an exclusive lock

   <!ELEMENT exclusive EMPTY >


11.7.2    shared XML Element

   Name:       shared
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies a shared lock

   <!ELEMENT shared EMPTY >


11.8 locktype XML Element

   Name:       locktype
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies the access type of a lock.  At present, this
   specification only defines one lock type, the write lock.

   <!ELEMENT locktype (write) >


11.8.1    write XML Element

   Name:       write
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies a write lock.

   <!ELEMENT write EMPTY >


11.9 multistatus XML Element

   Name:       multistatus
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains multiple response messages.
   Description: The responsedescription at the top level is used to
   provide a general message describing the overarching nature of the
   response.  If this value is available an application MAY use it
   instead of presenting the individual response descriptions contained
   within the responses.

   <!ELEMENT multistatus (response+, responsedescription?) >


11.9.1    response XML Element

   Name:       response
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Holds a single response describing the effect of a
   method on resource and/or its properties.
   Description: A particular href MUST NOT appear more than once as the
   child of a response XML element under a multistatus XML element.
   This requirement is necessary in order to keep processing costs for
   a response to linear time.  Essentially, this prevents having to
   search in order to group together all the responses by href.  There
   are, however, no requirements regarding ordering based on href
   values.

   <!ELEMENT response (href, ((href*, status)|(propstat+)),
   responsedescription?) >


11.9.1.1  propstat XML Element

   Name:       propstat
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Groups together a prop and status element that is
   associated with a particular href element.
   Description: Prop MUST contain one or more empty XML elements
   representing the names of properties.  Multiple properties may be
   included if the same response applies to them all.

   <!ELEMENT propstat (prop, status) >


11.9.1.2  status XML Element

   Name:       status
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Holds a single HTTP status-line
   Value:      status-line   ;status-line defined in [Fielding et al.,
   1997]

   <!ELEMENT status (#PCDATA) >


11.9.2    responsedescription XML Element

   Name:       responsedescription
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains a message that can be displayed to the user
   explaining the nature of the response.
   Description: This XML element provides information suitable to be
   presented to a user.

   <!ELEMENT responsedescription (#PCDATA) >


11.10     owner XML Element

   Name:       owner
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Provides information about the principal taking out a
   lock.
   Description: The owner XML element provides information sufficient
   for either directly contacting a principal (such as a telephone
   number or Email URI), or for discovering the principal (such as the
   URL of a homepage) who owns a lock.

   <!ELEMENT owner (#PCDATA, ANY)* >


11.11     prop XML element

   Name:       prop
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains properties related to a resource.
   Description: The prop XML element is a generic container for
   properties defined on resources.  All elements inside prop MUST
   define properties related to the resource.  No other elements may be
   used inside of a prop element.

   <!ELEMENT prop ANY>


11.12     propertybehavior XML element

   Name:       propertybehavior
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies how properties are handled during a COPY or
   MOVE.
   Description: The propertybehavior XML element specifies how
   properties are handled during a COPY or MOVE.  If this XML element
   is not included in the request body then the server is expected to
   act as defined by the default property handling behavior of the
   associated method.

   <!ELEMENT propertybehavior (omit | keepalive) >


11.12.1   keepalive XML element

   Name:       keepalive
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies requirements for the copying/moving of live
   properties.
   Description: If a list of URIs is included as the value of keepalive
   then the named properties MUST be "live" after they are copied
   (moved) to the destination resource of a COPY (or MOVE).  If the
   value "*" is given for the keepalive XML element, this designates
   that all live properties on the source resource MUST be live on the
   destination.
   Value:      "*" ; #PCDATA value can only be "*"

   <!ELEMENT keepalive (#PCDATA | href+) >


11.12.2   omit XML element

   Name:       omit
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Indicates that the associated method MAY succeed even if
   the server is not able to copy/move every property on the source
   resource, even in a dead form.
   Description: The default behavior for a COPY or MOVE is to copy/move
   all properties or fail the method.  In certain circumstances, such
   as when a server copies a resource over another protocol such as
   FTP, it may not be possible to copy/move the properties associated
   with the resource. Thus any attempt to copy/move over FTP would
   always have to fail because properties could not be moved over, even
   as dead properties. The omit XML element instructs the server that
   it should use best effort to copy properties but a failure to copy a
   property should not cause the method to fail.

   <!ELEMENT omit EMPTY >


11.13     propertyupdate XML element

   Name:       propertyupdate
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains a request to alter the properties on a
   resource.
   Description: This XML element is a container for the information
   required to modify the properties on the resource.  This XML element
   is multi-valued.

   <!ELEMENT propertyupdate (remove | set)+ >


11.13.1   remove XML element

   Name:       remove
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Lists the DAV properties to be removed from a resource.
   Description: Remove instructs that the properties specified in prop
   should be removed.  Specifying the removal of a property that does
   not exist is not an error.  All the XML elements in prop MUST be
   empty, as only the names of properties to be removed are required.

   <!ELEMENT remove (prop) >


11.13.2   set XML element

   Name:       set
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Lists the DAV property values to be set for a resource.
   Value:      prop
   Description: This XML element MUST contain only a prop XML element.
   The elements contained by prop specify the name and value of
   properties that are set on the Request-URI.  If a property already
   exists then its value is replaced.

   <!ELEMENT set (prop) >


11.14     propfind XML Element

   Name:       propfind
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies the properties to be returned from a PROPFIND
   method.  Two special elements are specified for use with propfind,
   allprop and propname.

   <!ELEMENT propfind (allprop | propname | href+) >


11.14.1   allprop XML Element

   Name:       allprop
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    The allprop XML element specifies that all property
   names and values on the resource are to be returned.

   <!ELEMENT allprop EMPTY >


11.14.2   propname XML Element

   Name:       propname
   Namespace:  http://www.iana.org/standards/dav/
   Purpose: the propname XML element specifies that only a list of
   property names on the resource is to be returned.

   <!ELEMENT propname EMPTY >



12 DAV Properties

For DAV properties, the name of the property is also the same as the
   name of the XML element which contains its value. In the section
   below, the final line of each section gives the element type
   declaration using the format defined in [Bray, Paoli, Sperberg-McQueen, 1998]. The "Value" field, where present, specifies futher
   restrictions on the allowable contents of the XML element using BNF
   (i.e., to further restrict the values of a PCDATA element).

12.1 creationdate Property

   Name:       creationdate
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Records the time and date the resource was created.
   Value:      ;The time and date MUST be given in ISO 8601 format
   defined in Appendix 2
   Description: This property SHOULD be defined on all DAV compliant
   resources.  If present, it contains a timestamp of the moment when
   the resource was created (i.e., the moment it had non-null state).

   <!ELEMENT creationdate (#PCDATA) >


12.2 displayname Property

   Name:       displayname
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Provies a name for the resource that is suitable for
   presentation to a user.
   Description: This property SHOULD be defined on all DAV compliant
   resources.  If present, the property contains a description of the
   resource that is suitable for presentation to a user.

   <!ELEMENT displayname (#PCDATA) >


12.3 externalmembers Property

   Name:       externalmembers
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Provides the list of external members defined on the
   resource.
   Description: This property MUST be defined on any DAV compliant
   resource with external members.  If defined it MUST contain the full
   list of external members.  Resources MAY make this property read-only, thus only allowing its value to be altered using the
   ADDREF/DELREF methods.

   <!ELEMENT externalmembers (href*) >


12.4 getcontentlanguage Property

   Name:       getcontentlanguage
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains the Content-Language header returned by a GET
   without accept headers
   Description: This property MUST be defined on any DAV compliant
   resource which supports GET, with the exception that if no Content-Language header is available, this property MUST NOT exist.
   Value:      language-tag   ;language-tag is defined in section 14.13
   of [Fielding et al., 1997]

   <!ELEMENT getcontentlanguage (#PCDATA) >


12.5 getcontentlength Property

   Name:       getcontentlength
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains the Content-Length header returned by a GET
   without accept headers.  If no Content-Length header is available,
   this property MUST NOT exist.
   Description: This property MUST be defined on any DAV compliant
   resource which returns the Content-Length header in response to a
   GET.
   Value:      content-length ; see section 14.14 of [Fielding et al.,
   1997]

   <!ELEMENT getcontentlength (#PCDATA) >


12.6 getcontenttype Property

   Name:       getcontenttype
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains the Content-Type header returned by a GET
   without accept headers.  If no Content-Type header is available,
   this property MUST NOT exist.
   Description: This property MUST be defined on any DAV compliant
   resource which returns the Content-Type header in response to a GET.
   Value:      media-type   ; defined in Section 3.7 of [Fielding et
   al., 1997]

   <!ELEMENT getcontenttype (#PCDATA) >


12.7 getetag Property

   Name:       getetag
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains the ETag header returned by a GET without
   accept headers.
   Description: Note that the ETag on a resource may reflect changes in
   any part of the state of the resource, not necessarily just a change
   to the response to the GET method.  For example, a change to a
   resource's access permissions may cause the ETag to change. This
   property MUST be defined on any DAV compliant resource which returns
   the Etag header in response to a GET, except for the case if no ETag
   header is returned, this property MUST NOT exist.
   Value:      entity-tag  ; defined in Section 3.11 of [Fielding et
   al., 1997]

   <!ELEMENT getetag (#PCDATA) >


12.8 getlastmodified Property

   Name:       getlastmodified

   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Contains the Last-Modified header returned by a GET
   method without accept headers.
   Description: Note that the last-modified date on a resource may
   reflect changes in any part of the state of the resource, not
   necessarily just a change to the response to the GET method.  For
   example, a change in a property may cause the last-modified date to
   change. This property MUST be defined on any DAV compliant resource
   which returns the Last-Modified header in response to a GET, except
   for the case if no Last-Modified header is returned, this property
   MUST NOT exist.
   Value:      HTTP-date  ; defined in Section 3.3.1 of [Fielding et
   al., 1997]

   <!ELEMENT getlastmodified (#PCDATA) >


12.9 lockdiscovery Property

   Name:       lockdiscovery
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Describes the active locks on a resource
   Description: The lockdiscovery property returns a listing of who has
   a lock, what type of lock he has, the timeout type and the time
   remaining on the timeout, and the associated lock token.  The server
   is free to withhold any or all of this information if the requesting
   principal does not have sufficient access rights to see the
   requested data.  A server which supports locks MUST provide the
   lockdiscovery property on any resource with locks on it.

   <!ELEMENT lockdiscovery (activelock)* >


12.9.1    Example

>>Request


   PROPFIND /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Length: xxxx
   Content-Type: text/xml

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <D:propfind>
     <D:prop><lockdiscovery/></D:prop>
   </D:propfind>



>>Response


HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx
   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:multistatus>
     <D:response>
       <D:propstat>
          <D:prop>
            <D:lockdiscovery>
              <D:activelock>
                <D:locktype>write</D:locktype>
                <D:lockscope>exclusive</D:lockscope>
                <D:Depth>0</D:Depth>
                <D:owner>Jane Smith</D:owner>
                <D:timeout>Infinite</D:timeout>
                <D:locktoken>
                    <D:href>
                  opaquelocktoken:f81de2ad-7f3d-a1b2-4f3c-00a0c91a9d76
                    </D:href>
                </D:locktoken>
              </D:activelock>
            </D:lockdiscovery>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
   </D:multistatus>



This resource has a single exclusive write lock on it, with an
   infinite timeout.  Note that the Depth element could have been
   omitted as 0 is the default value of Depth.

12.10     resourcetype Property

   Name:       resourcetype
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    Specifies the nature of the resource.
   Description: This property MUST be defined on all DAV compliant
   resources.  The default value is empty.

   <!ELEMENT resourcetype ANY >


12.11     source Property

   Name:       source
   Namespace:  http://www.iana.org/standards/dav/link/
   Purpose:    The destination of the source link identifies the
   resource that contains the unprocessed source of the link's source.
   Description: The source of the link (src) is typically the URI of
   the output resource on which the link is defined, and there is
   typically only one destination (dst) of the link, which is the URI
   where the unprocessed source of the resource may be accessed.  When
   more than one link destination exists, this specification asserts no
   policy on ordering.

   <!ELEMENT source (link)* >


12.11.1   Example

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.foocorp.com/Project/" as="F"?>
   <D:prop>
     <D:source>
          <D:link>
               <F:projfiles>Source</F:projfiles>
               <D:src>http://foo.bar/program</D:src>
               <D:dst>http://foo.bar/src/main.c</D:dst>
          </D:link>
          <D:link>
               <F:projfiles>Library</F:projfiles>
               <D:src>http://foo.bar/program</D:src>
               <D:dst>http://foo.bar/src/main.lib</D:dst>
          </D:link>
          <D:link>
               <F:projfiles>Makefile</F:projfiles>
               <D:src>http://foo.bar/program</D:src>
               <D:dst>http://foo.bar/src/makefile</D:dst>
          </D:link>
     </D:source>
   </D:prop>


In this example the resource http://foo.bar/program has a source
   property that contains three links.  Each link contains three
   elements, two of which, src and dst, are part of the DAV schema
   defined in this document, and one which is defined by the schema
   http://www.foocorp.com/project/ (Source, Library, and Makefile).  A
   client which only implements the elements in the DAV spec will not
   understand the foocorp elements and will ignore them, thus seeing
   the expected source and destination links.  An enhanced client may
   know about the foocorp elements and be able to present the user with
   additional information about the links.  This example demonstrates
   the power of XML markup, allowing element values to be enhanced
   without breaking older clients.

12.12     supportedlock Property

   Name:       supportedlock
   Namespace:  http://www.iana.org/standards/dav/
   Purpose:    To provide a listing of the lock capabilities supported
   by the resource.
   Description: The supportedlock property of a resource returns a
   listing of the combinations of scope and access types which may be
   specified in a lock request on the resource.  Note that the actual
   contents are themselves controlled by access controls so a server is
   not required to provide information the client is not authorized to
   see.  If supportedlock is available on "*" then it MUST define the
   set of locks allowed on all resources on that server.

   <!ELEMENT supportedlock (lockentry)* >


12.12.1   Example

>>Request


   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Length: xxxx
   Content-Type: text/xml

   <?xml version="1.0"?>
   <?namespace href="http://www.iana.org/standards/dav/" as="D"?>
   <D:propfind>
     <D:prop><supportedlock/></D:prop>
   </D:propfind>



>>Response


HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:multistatus>
     <D:response>
       <D:propstat>
         <D:prop>
           <D:supportedlock>
             <D:LockEntry>
               <D:locktype><D:Write/></D:locktype>
               <D:lockscope><D:Exclusive/></D:lockscope>
             </D:LockEntry>
             <D:LockEntry>
               <D:locktype><D:Write/></D:locktype>
               <D:lockscope><D:Shared/></D:lockscope>
             </D:LockEntry>
           </D:supportedlock>
         </D:prop>
         <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
   </D:multistatus>



13 DAV Compliance Classes

A DAV compliant resource can choose from two classes of compliance.
   A client can discover the compliance classes of a resource by
   executing OPTIONS on the resource, and examining the "DAV" header
   which is returned.

Since this document describes extensions to the HTTP/1.1 protocol,
   minimally all DAV compliant resources, clients, and proxies MUST be
   compliant with [Fielding et al., 1997].

Compliance classes are not necessarily sequential. A resource that
   is class 2 compliant MUST also be class 1 compliant; but if
   additional compliance classes are defined later, a resource that is
   class 1, 2, and 4 compliant might not be class 3 compliant.

13.1 Class 1

A class 1 compliant resource MUST meet all "MUST" requirements in
   all sections of this document.

Class 1 compliant resources MUST return, at minimum, the value "1"
   in the DAV header on all responses to the OPTIONS method.

13.2 Class 2

A class 2 compliant resource MUST meet all class 1 requirements and
   support the supportedlock property as well as the LOCK method. It
   MUST also support the lockdiscovery property, since Section 12.9
   specifies that the LOCK method MUST also support the lockdiscovery
   property.

Class 2 compliant resources MUST return, at minimum, the value "2"
   in the DAV header on all responses to the OPTIONS method.


14 Internationalization Considerations

In the realm of internationalization, this specification complies
   with the IETF Character Set Policy [Alvestrand, 1998]. In this
   specification, human-readable fields can be found either in the
   value of a property, or in an error message returned in a response
   entity body.  In both cases, the human-readable content is encoded
   using XML, which has explicit provisions for character set tagging
   and encoding, and requires that XML processors read XML elements
   encoded using the UTF-8 and UCS-2 encodings of the ISO 10646 basic
   multilingual plane.  Furthermore, XML contains provisions for
   encoding XML elements using other encoding schemes, notable among
   them UCS-4, which permits encoding of characters from any ISO 10646
   character plane.

The default character set encoding for XML data in this
   specification, and in general, is UTF-8.  WebDAV compliant
   applications MUST support the UTF-8 and UCS-2 character set
   encodings for XML elements, and SHOULD support the UCS-4 encoding.
   The XML character set encoding declaration for each supported
   character set MUST also be supported, since it is by using this
   encoding declaration that an XML processor determines the encoding
   of an element.

XML also provides a language tagging capability for specifying the
   language of the contents of a particular XML element.  XML uses
   either IANA registered language tags (see RFC 1766, [Alvestrand,
   1995]) or ISO 639 language tags [ISO-639] in the "xml:lang"
   attribute of an XML element to identify the language its content and
   attributes.

Names used within this specification fall into three categories:
   names of protocol elements such as methods and headers, names of XML
   elements, and names of properties.  Naming of protocol elements
   follows the precedent of HTTP, using English names encoded in
   USASCII for methods and headers.  Since these protocol elements are
   not visible to users, and are in fact simply long token identifiers,
   they do not need to support encoding in multiple character sets.
   Similarly, though the names of XML elements used in this
   specification are English names encoded in UTF-8, these names are
   not visible to the user, and hence do not need to support multiple
   character set encodings.

The name of a property defined on a resource is a URI.  Although
   some applications (e.g., a generic property viewer) will display
   property URIs directly to their users, it is expected that the
   typical application will use a fixed set of properties, and will
   provide a mapping from the property name URI to a human-readable
   field when displaying the property name to a user.  It is only in
   the case where the set of properties is not known ahead of time that
   an application need display a property name URI to a user. We
   recommend that applications provide human-readable property names
   wherever feasible.

For error reporting, we follow the convention of HTTP/1.1 status
   codes, including with each status code a short, English description
   of the code (e.g., 425 Locked).  While the possibility exists that a
   poorly crafted user agent would display this message to a user,
   internationalized applications will ignore this message, and display
   an appropriate message in the user's language and character set.

Since interoperation of clients and servers does not require locale
   information, this specification does not specify any mechanism for
   transmission of this information.


15 Security Considerations

This section is provided to detail issues concerning security
   implications of which WebDAV applications need to be aware.

All of the security considerations of HTTP/1.1 also apply to WebDAV.
   In addition, the security risks inherent in remote authoring require
   stronger authentication technology, and introduce several new
   privacy concerns, and may increase the hazards from poor server
   design. These issues are detailed below.

15.1 Authentication of Clients

Due to their emphasis on authoring, WebDAV servers need to use
   authentication technology to protect not just access to a network
   resource, but the integrity of the resource as well.  Furthermore,
   the introduction of locking functionality requires support for
   authentication.

A password sent in the clear over an insecure channel is an
   inadequate means for protecting the accessibility and integrity of a
   resource as the password may be intercepted.  Since Basic
   authentication for HTTP/1.1 performs essentially clear text
   transmission of a password, Basic authentication MUST NOT be used to
   authenticate a WebDAV client to a server unless the connection is
   secure. Furthermore, a WebDAV server MUST NOT send Basic
   authentication credentials in a WWW-Authenticate header unless the
   connection is secure.  Examples of secure connections include a
   Transport Layer Security (TLS) connection, or a connection over a
   network which is physically secure, for example, an isolated network
   in a building with restricted access.

WebDAV applications MUST support the Digest authentication scheme
   [Franks, et al., 1997]. Since Digest authentication verifies that
   both parties to a communication know a shared secret, a password,
   without having to send that secret in the clear, Digest
   authentication avoids the security problems inherent in Basic
   authentication while providing a level of authentication which is
   useful in a wide range of scenarios.

15.2 Denial of Service

Denial of service attacks are of special concern to WebDAV servers.
   WebDAV plus HTTP enables denial of service attacks on every part of
   a system's resources.

The underlying storage can be attacked by PUTting extremely large
   files.

Asking for recursive operations on large collections can attack
   processing time.

Making multiple pipelined requests on multiple connections can
   attack network connections.

WebDAV servers need to be aware of the possibility of a denial of
   service attack at all levels.

15.3 Security through Obscurity

WebDAV provides, through the PROPFIND method, a mechanism for
   listing the member resources of a collection.  This greatly
   diminishes the effectiveness of security or privacy techniques which
   rely only on the difficulty of discovering the names of network
   resources.  Users of WebDAV servers are encouraged to use access
   control techniques to prevent unwanted access to resources, rather
   than depending on the relative obscurity of their resource names.

15.4 Privacy Issues Connected to Locks

When submitting a lock request a user agent may also submit an owner
   XML field giving contact information for the person taking out the
   lock (for those cases where a person, rather than a robot, is taking
   out the lock). This contact information is stored in a lockdiscovery
   property on the resource, and can be used by other collaborators to
   begin negotiation over access to the resource.  However, in many
   cases this contact information can be very private, and should not
   be widely disseminated.  Servers SHOULD limit read access to the
   lockdiscovery property as appropriate.  Furthermore, user agents
   SHOULD provide control over whether contact information is sent at
   all, and if contact information is sent, control over exactly what
   information is sent.

15.5 Privacy Issues Connected to Properties

Since property values are typically used to hold information such as
   the author of a document, there is the possibility that privacy
   concerns could arise stemming from widespread access to a resource's
   property data.  To reduce the risk of inadvertent release of private
   information via properties, servers are encouraged to develop access
   control mechanisms that separate read access to the resource body
   and read access to the resource's properties.  This allows a user to
   control the dissemination of their property data without overly
   restricting access to the resource's contents.

15.6 Reduction of Security due to Source Link

HTTP/1.1 warns against providing read access to script code because
   it may contain sensitive information.  Yet WebDAV, via its source
   link facility, can potentially provide a URL for script resources so
   they may be authored.  For HTTP/1.1, a server could reasonably
   prevent access to source resources due to the predominance of read-only access.  WebDAV, with its emphasis on authoring, encourages
   read and write access to source resources, and provides the source
   link facility to identify the source.  This reduces the security
   benefits of eliminating access to source resources.  Users and
   administrators of WebDAV servers should be very cautious when
   allowing remote authoring of scripts, limiting read and write access
   to the source resources to authorized principals.


16 IANA Considerations

This document defines two namespaces, the namespace of property
   names, and the namespace of WebDAV-specific XML elements used within
   property values.

URLs are used for both names, for several reasons. Assignment of a
   URL does not require a request to a central naming authority, and
   hence allow WebDAV property names and XML elements to be quickly
   defined by any WebDAV user or application.  URLs also provide a
   unique address space, ensuring that the distributed users of WebDAV
   will not have collisions among the property names and XML elements
   they create.

This specification defines a distinguished set of property names and
   XML elements which are understood by all WebDAV applications.  The
   property names and XML elements in this specification are all
   derived from the base URL: http://www.iana.org/standards/dav/ by
   adding a suffix to this URL, for example,
   http://www.iana.org/standards/dav/creationdate for the
   "creationdate" property.

To ensure correct interoperation of this specification, IANA MUST
   reserve the URL namespace starting with
   http://www.iana.org/standards/dav/ for use by this specification,
   its revisions, and related WebDAV specifications.


17 Terminology

Collection - A resource that contains member resources.

Member Resource - A resource contained by a collection.  There are
   two types of member resources: external and internal.

Internal Member Resource - A member resource of a collection whose
   URI is relative to the URI of the collection.

External Member Resource - A member resource of a collection with an
   absolute URI that is not relative to its parent's URI.

Property - A name/value pair that contains descriptive information
   about a resource.

Live Property - A property whose semantics and syntax are enforced
   by the server.  For example, a live "content-length" property would
   have its value, the length of the entity returned by a GET request,
   automatically calculated by the server.

Dead Property - A property whose semantics and syntax are not
   enforced by the server.  The server only records the value of a dead
   property; the client is responsible for maintaining the consistency
   of the syntax and semantics of a dead property.


18 Copyright

The following copyright notice is copied from RFC 2026 [Bradner,
   1996], Section 10.4, and describes the applicable copyright for this
   document.

Copyright (C) The Internet Society January 18, 1998. All Rights
   Reserved.

This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


19 Intellectual Property

The following notice is copied from RFC 2026 [Bradner, 1996],
   Section 10.4, and describes the position of the IETF concerning
   intellectual property claims made against this document.

The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use other technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights.  Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11.  Copies of
   claims of rights made available for publication and any assurances
   of licenses to be made available, or the result of an attempt made
   to obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification
   can be obtained from the IETF Secretariat.

The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard.  Please address the information to the IETF Executive
   Director.


20 Acknowledgements

A specification such as this thrives on piercing critical review and
   withers from apathetic neglect.  The authors gratefully acknowledge
   the contributions of the following people, whose insights were so
   valuable at every stage of our work.

Terry Allen, Harald Alvestrand, Alan Babich, Dylan Barrell, Bernard
   Chester, Tim Berners-Lee, Dan Connolly, Jim Cunningham, Ron Daniel,
   Jr., Jim Davis, Keith Dawson, Mark Day, Brian Deen, Martin Duerst,
   David Durand, Lee Farrell, Chuck Fay, Roy Fielding, Mark Fisher,
   Alan Freier, George Florentine, Jim Gettys, Phill Hallam-Baker,
   Dennis Hamilton, Steve Henning, Alex Hopmann, Andre van der Hoek,
   Ben Laurie, Paul Leach, Ora Lassila, Karen MacArthur, Steven Martin,
   Larry Masinter, Michael Mealling, Keith Moore, Henrik Nielsen, Kenji
   Ota, Bob Parker, Glenn Peterson, Jon Radoff, Saveen Reddy, Henry
   Sanders, Christopher Seiwald, Judith Slein, Mike Spreitzer, Einar
   Stefferud, Ralph Swick, Kenji Takahashi, Richard N. Taylor, Robert
   Thau, John Turner, Sankar Virdhagriswaran, Fabio Vitali, Gregory
   Woodhouse, and Lauren Wood.

Two from this list deserve special mention.  The contributions by
   Larry Masinter have been invaluable, both in helping the formation
   of the working group and in patiently coaching the authors along the
   way.  In so many ways he has set high standards we have toiled to
   meet. The contributions of Judith Slein in clarifying the
   requirements, and in patiently reviewing draft after draft, both
   improved this specification and expanded our minds on document
   management.

We would also like to thank John Turner for developing the XML DTD.

21 References

   [Alvestrand, 1995] H. T. Alvestrand, "Tags for the Identification of
   Languages." RFC 1766. Uninett. March, 1995.

   [Alvestrand, 1998] H. T. Alvestrand, "IETF Policy on Character Sets
   and Languages." RFC XXXX, BCP YY. Maxware. January, 1998.

   [Bradner, 1996] S. Bradner, "The Internet Standards Process -Revision 3."  RFC 2026, BCP 9. Harvard University. October, 1996.

   [Bradner, 1997] S. Bradner, "Key words for use in RFCs to Indicate
   Requirement Levels."  RFC 2119, BCP 14. Harvard University. March,
   1997.

   [Bray, Paoli, Sperberg-McQueen, 1998] T. Bray, J. Paoli, C. M.
   Sperberg-McQueen, "Extensible Markup Language (XML)." World Wide Web
   Consortium Recommendation REC-XML-ZZZZ. http://www.w3.org/TR/PR-xml-971208.

   [Fielding et al., 1997] R. Fielding, J. Gettys, J. Mogul, H.
   Frystyk, T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1."
   RFC 2068. U.C. Irvine, DEC, MIT/LCS.  January, 1997.

   [ISO-639] ISO (International Organization for Standardization). ISO
   639:1988. "Code for the representation of names of languages."

   [ISO-8601] ISO (International Organization for Standardization). ISO
   8601:1988. "Data elements and interchange formats - Information
   interchange - Representation of dates and times."

   [Lasher, Cohen, 1995] R. Lasher, D. Cohen, "A Format for
   Bibliographic Records," RFC 1807. Stanford, Myricom. June, 1995.

   [Leach, Salz, 1997] P. J. Leach, R. Salz, "UUIDs and GUIDs."
   Internet-draft (expired), work-in-progress, February, 1997.
   http://www.internic.net/internet-drafts/draft-leach-uuids-guids-00.txt

   [MARC, 1994] Network Development and MARC Standards, Office, ed.
   1994. "USMARC Format for Bibliographic Data", 1994. Washington, DC:
   Cataloging Distribution Service, Library of Congress.

   [Miller et al., 1996] J. Miller, T. Krauskopf, P. Resnick, W.
   Treese, "PICS Label Distribution Label Syntax and Communication
   Protocols" Version 1.1, World Wide Web Consortium Recommendation
   REC-PICS-labels-961031. http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html.

   [Slein et al., 1997] J. A. Slein, F. Vitali, E. J. Whitehead, Jr.,
   D. Durand, "Requirements for Distributed Authoring and Versioning
   Protocol for the World Wide Web." RFC XXXX. Xerox, Univ. of Bologna,
   U.C. Irvine, Boston Univ. YYY, 1997.

   [Weibel et al., 1995] S. Weibel, J. Godby, E. Miller, R. Daniel,
   "OCLC/NCSA Metadata Workshop Report."
   http://purl.oclc.org/metadata/dublin_core_report.

   [Yergeau, 1997] F. Yergeau, "UTF-8, a transformation format of
   Unicode and ISO 10646." RFC 2044. Alis Technologies. October, 1996.

22 Authors' Addresses


   Y. Y. Goland
   Microsoft Corporation
   One Microsoft Way
   Redmond, WA 98052-6399
   Email: yarong@microsoft.com

E. J. Whitehead, Jr.
   Dept. Of Information and Computer Science
   University of California, Irvine
   Irvine, CA 92697-3425
   Email: ejw@ics.uci.edu

A. Faizi
   Netscape
   685 East Middlefield Road
   Mountain View, CA 94043
   Email: asad@netscape.com

S. R. Carter
   Novell
   1555 N. Technology Way
   M/S ORM F111
   Orem, UT 84097-2399
   Email: srcarter@novell.com


D. Jensen
   Novell
   1555 N. Technology Way
   M/S ORM F111
   Orem, UT 84097-2399
   Email: dcjensen@novell.com


23 Appendices

23.1 Appendix 1 - WebDAV Document Type Definition

This section provides a document type definition, following the
   rules in [Bray, Paoli, Sperberg-McQueen, 1998], for the XML elements
   used in the protocol stream and in the values of properties. It
   collects the element definitions given in Sections 11 and 12.

   <!DOCTYPE webdav-1.0 [


   <!--============ XML Elements from Section 11 ==================-->


   <!ELEMENT activelock (locktype, lockscope, depth?, owner, timeout,
   locktoken) >


   <!ELEMENT lockentry (lockscope, locktype) >
   <!ELEMENT lockinfo (lockscope, locktype, owner?) >


   <!ELEMENT locktype (write) >
   <!ELEMENT write EMPTY >


   <!ELEMENT lockscope (exclusive | shared) >
   <!ELEMENT exclusive EMPTY >
   <!ELEMENT shared EMPTY >


   <!ELEMENT depth (#PCDATA) >


   <!ELEMENT owner (#PCDATA, ANY)* >


   <!ELEMENT timeout (#PCDATA) >


   <!ELEMENT locktoken (href) >


   <!ELEMENT href (#PCDATA) >


   <!ELEMENT link (src+, dst+) >
   <!ELEMENT dst (#PCDATA) >
   <!ELEMENT src (#PCDATA) >


   <!ELEMENT multistatus (response+, responsedescription?) >


   <!ELEMENT response (href, ((href*, status)|(propstat+)),
   responsedescription?) >
   <!ELEMENT status (#PCDATA) >
   <!ELEMENT propstat (prop status) >
   <!ELEMENT responsedescription (#PCDATA) >


   <!ELEMENT prop ANY >


   <!ELEMENT propertybehavior (omit | keepalive) >
   <!ELEMENT omit EMPTY >


   <!ELEMENT keepalive (#PCDATA | href+) >


   <!ELEMENT propertyupdate (remove | set)+ >
   <!ELEMENT remove (prop) >
   <!ELEMENT set (prop) >


   <!ELEMENT propfind (allprop | propname | href+) >
   <!ELEMENT allprop EMPTY >
   <!ELEMENT propname EMPTY >


   <!ELEMENT collection EMPTY >



   <!--=========== Property Elements from Section 12 ===============-->


   <!ELEMENT creationdate (#PCDATA) >
   <!ELEMENT displayname (#PCDATA) >
   <!ELEMENT externalmembers (href*) >
   <!ELEMENT getcontentlanguage (#PCDATA) >
   <!ELEMENT getcontentlength (#PCDATA) >
   <!ELEMENT getcontenttype (#PCDATA) >
   <!ELEMENT getetag (#PCDATA) >
   <!ELEMENT getlastmodified (#PCDATA) >
   <!ELEMENT lockdiscovery (activelock)* >
   <!ELEMENT resourcetype ANY >
   <!ELEMENT source (link)* >
   <!ELEMENT supportedlock (lockentry)* >


]>

23.2 Appendix 2 - ISO 8601 Date and Time Profile

The creationdate property specifies the use of the ISO 8601 date
   format.  This section defines a profile of the ISO 8601 date format
   for use with this specification.  This profile is quoted verbatim
   from draft-newman-datetime-01.txt (expired).

date-time       = full-date "T" full-time

full-date       = date-fullyear "-" date-month "-" date-mday
   full-time       = partial-time time-offset

date-fullyear   = 4DIGIT
   date-month      = 2DIGIT  ; 01-12
   date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
   month/year
   time-hour       = 2DIGIT  ; 00-23
   time-minute     = 2DIGIT  ; 00-59
   time-second     = 2DIGIT  ; 00-59, 00-60 based on leap second rules
   time-secfrac    = "." 1*DIGIT
   time-numoffset  = ("+" / "-") time-hour ":" time-minute
   time-offset     = "Z" / time-numoffset
   partial-time    = time-hour ":" time-minute ":" time-second
                    [time-secfrac]


Numeric offsets are calculated as local time minus UTC (Coordinated
   Universal Time).  So the equivalent time in UTC can be determined by
   subtracting the offset from the local time.  For example, 18:50:00-04:00 is the same time as 22:58:00Z.

If the time in UTC is known, but the offset to local time is
   unknown, this can be represented with an offset of "-00:00".  This
   differs from an offset of "Z" which implies that UTC is the
   preferred reference point for the specified time.

23.3 Appendix 3 - Notes on Processing XML Elements

XML is a flexible data format that makes it easy to submit data that
   appears legal but in fact is not.  The philosophy of "Be flexible in
   what you accept and strict in what you send" still applies, but it
   must not be applied inappropriately.  XML is extremely flexible in
   dealing with issues of white space, element ordering, inserting new
   elements, etc.  This flexibility does not require extension,
   especially not in the area of the meaning of elements.

There is no kindness in accepting illegal combinations of XML
   elements.  At best it will cause an unwanted result and at worst it
   can cause real damage.

23.3.1    XML Syntax Error Example

The following request body for a PROPFIND method is illegal.

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <D:propfind>
     <D:allprop/>
     <D:propname/>
   </D:propfind>


The definition of the propfind element only allows for the allprop
   or the propname element, not both.  Thus the above is an error and
   MUST be responded to with a 400 Bad Request.

Imagine, however, that a server wanted to be "kind" and decided to
   pick the allprop element as the true element and respond to it.  A
   client running over a bandwidth limited line who intended to execute
   a propname would be in for a big surprise if the server treated the
   command as an allprop.

23.3.2    Unknown XML Element Example

The previous example was illegal because it contained two elements
   that were explicitly banned from appearing together in the propfind
   element.  However, XML is an extensible language, so one can imagine
   new elements being defined for use with propfind.  Below is the
   request body of a PROPFIND and, like the previous example, MUST be
   rejected with a 400 Bad Request by a server that does not understand
   the expired-props element.

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.foo.bar/standards/props/" as="E"?>
   <D:propfind>
     <E:expired-props/>
   </D:propfind>


To understand why a 400 Bad Request is returned let us look at the
   request body as the server unfamiliar with expired-props sees it.

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.foo.bar/standards/props/" as="E"?>
   <D:propfind>
   </D:propfind>


As the server does not understand the expired-props element, by the
   rules of XML, it MUST ignore it.  Thus the server sees an empty
   propfind, which by the definition of the propfind element is
   illegal.

Please note that had the extension been additive it would not
   necessarily have resulted in a 400 Bad Request.  For example,
   imagine the following request body for a PROPFIND:

   <?xml version="1.0"?>
   <?namespace href ="http://www.iana.org/standards/dav/" as="D"?>
   <?namespace href="http://www.foo.bar/standards/props/" as="E"?>
   <D:propfind>
     <D:propname/>
     <E:leave-out>*boss*</E:leave-out>
   </D:propfind>


The previous example contains the fictitious element leave-out. Its
   purpose is to prevent the return of any property whose name matches
   the submitted pattern.  If the previous example were submitted to a
   server unfamiliar with leave-out, the only result would be that the
   leave-out element would be ignored and a propname would be executed.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/draft-ietf-webdav-protocol-05.html
##-----------------TITLE------------------------##
Extensions for Distributed Authoring and Versioning on the World Wide Web -- WEBDAV
##------------------TEXT------------------------##
WEBDAV Working Group                            Y.Y. Goland, Microsoft

INTERNET DRAFT                          E.J. Whitehead, Jr., UC Irvine
<draft-ietf-webdav-protocol-05>                     A. Faizi, Netscape
                                                   S.R. Carter, Novell
                                                     D. Jensen, Novell
Expires April, 1998                                  November 19, 1997


This HTML version was converted from plaintext ASCII to HTML
by Jim Davis
on 22 November 1997.
My sincere apologies for any errors introduced in the process.
When in doubt, consult the ASCII version.

Status of this Memo


This document is an Internet-Draft. Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups. Note that other groups may also distribute
   working documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or made obsolete by other
   documents at any time. It is inappropriate to use Internet-Drafts as
   reference material or to cite them other than as "work in progress".

To learn the current status of any Internet-Draft, please check the
   "1id-abstracts.txt" listing contained in the Internet-Drafts Shadow
   Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
   munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
   ftp.isi.edu (US West Coast).

Distribution of this document is unlimited. Please send comments to
   the Distributed Authoring and Versioning (WEBDAV) working group at
   <w3c-dist-auth@w3.org>, which may be joined by sending a message
   with subject "subscribe" to <w3c-dist-auth-request@w3.org>.

Discussions of the WEBDAV working group are archived at
   http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth.

Abstract


This document specifies a set of methods, headers, and content-types
   ancillary to HTTP/1.1 for the management of resource properties,
   creation and management of resource collections, namespace
   manipulation, resource locking (collision avoidance), and efficient
   transmission of resource changes.

Changes

1.1. Changes since draft-ietf-webdav-protocol-04.txt

   [Editor's note: This section will not appear in the final form of
   this document.  Its purpose is to provide a concise list of changes
   from the previous revision of the draft for use by reviewers.]

Added this change section.

Removed scoping for namespaces so the namespace for
   every element is explicitly stated.

Changed the syntax from <?XML:Namespace.../> to <?namespace...?>.

Removed propfindresult, this was left over from the old search
   format.

Changed all the DAV XML element names to lower case.

Changed the property format to use Name and Namespace rather than
   name and schema.

Removed proploc attribute and removed section on GETting, DELETEing,
   and PUTing properties since we do not provide a mechanism for
   getting a URI for properties.  Also removed the requirement that
   properties be URI addressable.

Removed quoted string choice from owner header, it is just XML.

Made all the HTTP error codes use the same format.

Changed the name of the create element in PROPPATCH to set, the new
   name seems to cause less confusion.

Moved all headers in the draft to a single section.

Deleted the state token section of the draft and moved the state
   token headers to the header section of the draft.  Removed the state
   token header.

Changed the write lock section to state that a Lock-Token request
   header, not a state-token request header, is to be submitted on
   request for write locked resources.

Created a "generic" XML element section for XML elements that get
   repeatedly re-used throughout the spec.  I moved LINK XML element to
   this section.

Made  multistatus and Schema discovery their own level one sections.

Collected all the properties together.

Removed all references to the possibility of properties have their
   own URIs.  This includes removing the property identifier section.

Separated the section on web collections and namespaces into two
   separate sections.

Collected all the new response codes together into their own
   section.

Changed the XML multiresponse element name to  multistatus.

Added a stand alone section on levels of DAV compliance. I also went
   method by method, property by property, to specify compliance
   requirements.

Added an introduction.

Changed all the "True" and "False" to "T" and "F".

Altered the first two paragraphs of the Property Names section to
   make the relationship between a property's name and its schema a
   little clearer.  I also added some text in the same section defining
   a property name as a namespace and element.

Added a second paragraph to property model for http resources -
   overview.  This paragraph clarifies why XML was chosen.

Added a 409 Conflict error to move to cover attempts to move a
   collection with members.

Changed the collection requirement to read the collections SHOULD
   end with "/".  Also added a SHOULD about returning a location header
   if the client submits a URL for a collection without a trailing "/".

Moved the owner header into the body due to size concerns.

Replaced the iscollection xml element with resourcetype.

Moved the DAV property to the DAV header that is returned with
   OPTIONS.

Folded the tree draft into this draft.  Changed the DELETE, COPY,
   and MOVE sections to include their effect on collections as taken
   from the tree draft.  Created a Depth header section and put in the
   general rules that were in the introduction to the tree draft.  I
   also added the 102 response and response-status header.

Removed the versioning section.

Put all the methods into a single section.

Replaced the PROPFIND request body with a propfind header. Now the
   response can be cached just using vary.

Nuked resinfo for INDEX and combined it with  multistatus which is
   now used for both INDEX and PROPFIND.  Stripped down INDEX as
   agreed.

Removed the problem definition and proposed solution sections. We
   can always cut and paste them together from the older version if we
   feel we need them but this draft is supposed to be a dry run for
   last call and last call documents do not have problem
   definition/proposed solution sections.

Killed the section on schema discovery, it is controversial and we
   aren't going to be able to require it.  We should specify it in a
   different spec.

Added a section on notational conventions used within the document.

Moved the terminology section to the end of the document to provide
   better flow from the high-level introduction to the specific
   introduction sections.

Increased the numeric value of the 4xx status codes introduced in
   this specification to avoid conflicts with the new revision of the
   HTTP/1.1 specification, which introduces two new 4xx status codes.

Wrote internationalization concerns section.

Added XML version number to all examples.

Contents


STATUS OF THIS MEMO...................................................1
ABSTRACT..............................................................1
CHANGES...............................................................1

1.1. Changes since draft-ietf-webdav-protocol-04.txt..................1
CONTENTS..............................................................5
2. INTRODUCTION.......................................................8
3. DATA MODEL FOR RESOURCE PROPERTIES.................................9
3.1. The Resource Property Model......................................9
3.2. Existing Metadata Proposals.....................................10
3.3. Properties and HTTP Headers.....................................10
3.4. Property Values.................................................10
3.5. Property Names..................................................11
4. COLLECTIONS OF WEB RESOURCES......................................11
4.1. Collection Resources............................................11
4.2. Creation and Retrieval of Collection Resources..................12
4.3. HTTP URL Namespace Model........................................13
4.4. Source Resources and Output Resources...........................13
5. LOCKING...........................................................14
5.1. Exclusive Vs. Shared Locks......................................14
5.2. Required Support................................................15
5.3. Lock Tokens.....................................................16
5.4. opaquelocktoken Lock Token URI Scheme...........................16
5.5. Lock Capability Discovery.......................................16
5.6. Active Lock Discovery...........................................17
6. WRITE LOCK........................................................17
6.1. Methods Restricted by Write Locks...............................17
6.2. Write Locks and Properties......................................17
6.3. Write Locks and Null Resources..................................17
6.4. Write Locks and Collections.....................................18
6.5. Write Locks and COPY/MOVE.......................................18
6.6. Re-issuing Write Locks..........................................18
6.7. Write Locks and The Lock-Token Request Header...................18
7. NOTATIONAL CONVENTIONS............................................19
8. HTTP METHODS FOR DISTRIBUTED AUTHORING............................19
8.1. PROPFIND........................................................19
8.2. PROPPATCH.......................................................23
8.3. MKCOL Method....................................................25
8.4. INDEX Method....................................................26
8.5. DELREF Method...................................................28
8.6. ADDREF Method...................................................28
8.7. GET, HEAD for Collections.......................................29
8.8. POST for Collections............................................29
8.9. DELETE..........................................................29
8.10. PUT............................................................31
8.11. COPY Method....................................................31
8.12. MOVE Method....................................................35
8.13. LOCK Method....................................................38
8.14. UNLOCK Method..................................................42
8.15. PATCH Method...................................................43
9. DAV HEADERS.......................................................47
9.1. Collection-Member Header........................................47
9.2. DAV Header......................................................47
9.3. Depth Header....................................................47
9.4. Destination Header..............................................48
9.5. Destroy Header..................................................48
9.6. Enforce-Live-Properties Header..................................49
9.7. If-None-State-Match.............................................49
9.8. If-State-Match..................................................50
9.9. Lock-Info Request Header........................................50
9.10. Lock-Token Request Header......................................51
9.11. Lock-Token Response Header.....................................51
9.12. Overwrite Header...............................................52
9.13. Propfind Request Header........................................52
9.14. Status-URI Response Header.....................................52
9.15. Timeout Header.................................................52
10. RESPONSE CODE EXTENSIONS TO RFC 2068.............................54
10.1. 102 Processing.................................................54
10.2. 207 Multi-Status...............................................54
10.3. 418 Unprocessable Entity.......................................54
10.4. 419 Insufficient Space on Resource.............................54
10.5. 420 Method Failure.............................................54
11. MULTI-STATUS RESPONSE............................................54
11.1. multistatus XML Element........................................55
11.2. response XML Element...........................................55
11.3. status XML Element.............................................55
11.4. responsedescription XML Element................................55
12. GENERIC DAV XML ELEMENTS.........................................55
12.1. href XML Element...............................................56
12.2. link XML Element...............................................56
12.3. prop XML element...............................................57
13. DAV PROPERTIES...................................................57
13.1. creationdate Property..........................................57
13.2. displayname Property...........................................57
13.3. get-content-language Property..................................58
13.4. get-content-length Property....................................58
13.5. get-content-type Property......................................58
13.6. get-etag Property..............................................58
13.7. get-last-modified Property.....................................59
13.8. index-content-language Property................................59
13.9. index-content-length Property..................................59
13.10. index-content-type Property...................................59
13.11. index-etag Property...........................................59
13.12. index-last-modified Property..................................60
13.13. lockdiscovery Property........................................60
13.14. resourcetype Property.........................................62
13.15. Source Link Property Type.....................................62
13.16. supportedlock Property........................................63
14. DAV COMPLIANCE LEVELS............................................64
14.1. Level 1........................................................64
14.2. Level 2........................................................64
15. INTERNATIONALIZATION SUPPORT.....................................65
16. SECURITY CONSIDERATIONS..........................................66
17. TERMINOLOGY......................................................66
18. COPYRIGHT........................................................66
19. ACKNOWLEDGEMENTS.................................................67
20. REFERENCES.......................................................69
21. AUTHORS' ADDRESSES...............................................71

2. Introduction

This document describes an extension to the HTTP/1.1 protocol that
   allows clients to perform remote web content authoring operations.
   This extension provides a coherent set of methods, headers, request
   entity body formats, and response entity body formats that provide
   operations for:

Properties: The ability to create, remove, and query information
   about Web pages, such as its author, creation date, etc. Also, the
   ability to link pages of any media type to related pages.

Collections: The ability to create sets of related documents, and to
   receive a listing of pages at a particular hierarchy level (like a
   directory listing in a file system).

Locking: The ability to keep more than one person from working on a
   document at the same time. This prevents the "lost update problem"
   in which modifications are lost as first one author, then another
   writes their changes without merging the other author's changes

Namespace Operations: The ability to copy and move Web resources

Efficient Update: The ability to send changes which are proportional
   to the size of the change rather than retransmitting the entire
   resource.

Requirements and rationale for these operations are described in a
   companion document, "Requirements for a Distributed Authoring and
   Versioning Protocol for the World Wide Web" [Slein et al., 1997].

The sections below provide a detailed introduction to resource
   properties (Section 3), collections of resources (Section 4), and
   locking operations (Section 5).  These sections introduce the
   abstractions manipulated by the WebDAV-specific HTTP methods
   described in Section 8, "HTTP Methods for Distributed Authoring".

In HTTP/1.1, method parameter information was exclusively encoded in
   HTTP headers. Unlike HTTP/1.1, WebDAV, encodes method parameter
   information either in an Extensible Markup Language (XML) [Bray,
   Sperberg-McQueen, 1997] request entity body, or in an HTTP header.
   The use of XML to encode method parameters was motivated by the
   ability to add extra XML elements to existing structures, providing
   extensibility, and by XML's ability to encode information in ISO
   10646 character sets, providing internationalization support. As a
   rule of thumb, parameters are encoded in XML entity bodies when they
   have unbounded length, or when they may be shown to a human user and
   hence require encoding in an ISO 10646 character set.  Otherwise,
   parameters are encoded within an HTTP header.  Section 9 describes
   the new HTTP headers used with WebDAV methods.

In addition to encoding method parameters, XML is used in WebDAV to
   encode the responses from methods, providing the extensibility and
   internationalization advantages of XML for method output, as well as
   input. XML elements used in this specification are defined in
   Section 12.

While the response codes provided by HTTP/1.1 are sufficient to
   describe the preponderance of error conditions encountered by WebDAV
   methods, there are some errors that do not fall neatly into the
   existing categories.  New status codes developed for the WebDAV
   methods are defined in Section 10.  Since some WebDAV methods may
   operate over many resources, the multiresponse status type has been
   introduced to return status information for multiple resources.
   Multiresponse status is described in Section 11.

The properties mechanism is employed by WebDAV to store information
   about the current state of the resource.  For example, when a lock
   is taken out on a resource, a lock information property describes
   the current state of the lock. Section 13 defines the properties
   used within the WebDAV specification.

Finishing off the specification are sections on what it means to be
   compliant with this specification (Section 14), on
   internationalization support (Section 15), and on security (Section
   16).


3. Data Model for Resource Properties

3.1. The Resource Property Model

Properties are pieces of data that describe the state of a resource.
   Properties are data about data.

Properties are used in distributed authoring environments to provide
   for efficient discovery and management of resources.  For example, a
   'subject' property might allow for the indexing of all resources by
   their subject, and an 'author' property might allow for the
   discovery of what authors have written which documents.

The DAV property model consists of name/value pairs.  The name of a
   property identifies the property's syntax and semantics, and
   provides an address by which to refer to that syntax and semantics.

There are two categories of properties: "live" and "non-live".  A
   live property has its syntax and semantics enforced by the server.
   This represents the two cases of a) the value of a property is read-only, maintained by the server, and b) the value of the property is
   maintained by the client, but server performs syntax checking on
   submitted values. A non-live property has its syntax and semantics
   enforced by the client; the server merely records the value of the
   property verbatim.

3.2. Existing Metadata Proposals

Properties have long played an essential role in the maintenance of
   large document repositories, and many current proposals contain some
   notion of a property, or discuss web metadata more generally.  These
   include PICS [Miller et al., 1996], PICS-NG, the Rel/Rev draft
   [Maloney, 1996], Web Collections, XML [Bray, Sperberg-McQueen,
   1997], several proposals on representing relationships within HTML,
   digital signature manifests (DCMF), and a position paper on Web
   metadata architecture [Berners-Lee, 1997].  Work on PICS-NG and Web
   Collections has been subsumed by the Resource Definition Framework
   (RDF) metadata activity of the World Wide Web Consortium, which
   consists of a network-based data model and an XML representation of
   that model.

Some proposals come from a digital library perspective.  These
   include the Dublin Core [Weibel et al., 1995] metadata set and the
   Warwick Framework [Lagoze, 1996], a container architecture for
   different metadata schemas.  The literature includes many examples
   of metadata, including MARC [MARC, 1994], a bibliographic metadata
   format, and RFC 1807 [Lasher, Cohen, 1995], a technical report
   bibliographic format employed by the Dienst system. Additionally,
   the proceedings from the first IEEE Metadata conference describe
   many community-specific metadata sets.

Participants of the 1996 Metadata II Workshop in Warwick, UK
   [Lagoze, 1996], noted that, "new metadata sets will develop as the
   networked infrastructure matures" and "different communities will
   propose, design, and be responsible for different types of
   metadata." These observations can be corroborated by noting that
   many community-specific sets of metadata already exist, and there is
   significant motivation for the development of new forms of metadata
   as many communities increasingly make their data available in
   digital form, requiring a metadata format to assist data location
   and cataloging.

3.3. Properties and HTTP Headers

Properties already exist, in a limited sense, in HTTP message
   headers.  However, in distributed authoring environments a
   relatively large number of properties are needed to describe the
   state of a resource, and setting/returning them all through HTTP
   headers is inefficient.  Thus a mechanism is needed which allows a
   principal to identify a set of properties in which the principal is
   interested and to then set or retrieve just those properties.

3.4. Property Values

The value of a property is expressed as a well-formed XML document.

XML has been chosen because it is a flexible, self-describing,
   structured data format that supports rich schema definitions, and
   because of its support for multiple character sets.  XML's self-describing nature allows any property's value to be extended by
   adding new elements.  Older clients will not break because they will
   still have the data specified in the original schema and will ignore
   elements they do not understand.  XML's support for multiple
   character sets allows human-readable properties to be encoded and
   read in a character set familiar to the user.

3.5. Property Names

A property name is a universally unique identifier that is
   associated with a schema that provides information about the syntax
   and semantics of the property.

Because a property's name is universally unique, clients can depend
   upon consistent behavior for a particular property across multiple
   resources, so long as that property is "live" on the resources in
   question.

The XML namespace mechanism, which is based on URIs, is used to name
   properties because it provides a mechanism to prevent namespace
   collisions and for varying degrees of administrative control.

The property namespace is flat; that is, no hierarchy of properties
   is explicitly recognized.  Thus, if a property A and a property A/B
   exist on a resource, there is no recognition of any relationship
   between the two properties.  It is expected that a separate
   specification will eventually be produced which will address issues
   relating to hierarchical properties.

Finally, it is not possible to define the same property twice on a
   single resource, as this would cause a collision in the resource's
   property namespace.


4. Collections of Web Resources

This section provides a description of a new type of Web resource,
   the collection, and discusses its interactions with the HTTP URL
   namespace. The purpose of a collection resource is to model
   collection-like objects (e.g., filesystem directories) within a
   server's namespace.

All DAV compliant resources MUST support the HTTP URL namespace
   model specified herein.

4.1. Collection Resources

A collection is a resource whose state consists of an unordered list
   of internal members, an unordered list of external members, and a
   set of properties.  An internal member resource MUST have a URI that
   is immediately relative to the base URI of the collection, that is,
   a relative URI in which "../" is illegal, which MUST begin with "./"
   and which SHOULD contain a "/" at the end of the URI if the internal
   member resource is itself a collection.

An external member resource MUST be an absolute URI that is not an
   internal URI.  Any given internal or external URI MUST only belong
   to the collection once, i.e., it is illegal to have multiple
   instances of the same URI in a collection.  Properties defined on
   collections behave exactly as do properties on non-collection
   resources.

There is a standing convention that when a collection is referred to
   by its name without a trailing slash, the trailing slash is
   automatically appended.  Due to this, a resource MAY accept a URI
   without a trailing "/" to point to a collection. In this case it
   SHOULD return a location header in the response pointing to the URL
   ending with the "/".  For example, if a client performs an INDEX on
   http://foo.bar/blah (no trailing slash), the resource
   http://foo.bar/blah/ (trailing slash) MAY respond as if the
   operation were invoked on it, and SHOULD return a location header
   with http://foo.bar/blah/ in it.


4.2. Creation and Retrieval of Collection Resources

This document specifies the MKCOL method to create new collection
   resources, rather than using the existing HTTP/1.1 PUT or POST
   method, for the following reasons

In HTTP/1.1, the PUT method is defined to store the request body at
   the location specified by the Request-URI.  While a description
   format for a collection can readily be constructed for use with PUT,
   the implications of sending such a description to the server are
   undesirable.  For example, if a description of a collection that
   omitted some existing resources were PUT to a server, this might be
   interpreted as a command to remove those members.  This would extend
   PUT to perform DELETE functionality, which is undesirable since it
   changes the semantics of PUT, and makes it difficult to control
   DELETE functionality with an access control scheme based on methods.

While the POST method is sufficiently open-ended that a "create a
   collection" POST command could be constructed, this is undesirable
   because it would be difficult to separate access control for
   collection creation from other uses of POST.

This document specifies the INDEX method for listing the contents of
   a collection, rather than relying on the existing HTTP/1.1 GET
   method.  This is to avoid conflict with the de-facto standard
   practice of redirecting a GET request on a directory to its
   index.html resource.

The exact definition of the behavior of GET and PUT on collections
   is defined later in this document.

4.3. HTTP URL Namespace Model

The HTTP URL Namespace is a hierarchical namespace where the
   hierarchy is delimited with the "/" character.  DAV compliant
   resources MUST maintain the consistency of the HTTP URL namespace.
   Any attempt to create a resource (excepting the root member of a
   namespace) that would not be the internal member of a collection
   MUST fail. For example, if the collection http://www.foo.bar.org/a/
   exists, but http://www.foo.bar.org/a/b/does not exist, an attempt to
   create http://www.foo.bar.org/a/b/c must fail.

4.4. Source Resources and Output Resources

For many resources, the entity returned by a GET method exactly
   matches the persistent state of the resource, for example, a GIF
   file stored on a disk.  For this simple case, the URL at which a
   resource is accessed is identical to the URL at which the source
   (the persistent state) of the resource is accessed.  This is also
   the case for HTML source files that are not processed by the server
   prior to transmission.

However, the server can sometimes process HTML resources before they
   are transmitted as a return entity body.  For example, server-side-include directives within an HTML file instruct a server to replace
   the directive with another value, such as the current date.  In this
   case, what is returned by GET (HTML plus date) differs from the
   persistent state of the resource (HTML plus directive).  Typically
   there is no way to access the HTML resource containing the
   unprocessed directive.

Sometimes the entity returned by GET is the output of a data-producing process that is described by one or more source resources
   (that may not even have a location in the URL namespace).  A single
   data-producing process may dynamically generate the state of a
   potentially large number of output resources.  An example of this is
   a CGI script that describes a "finger" gateway process that maps
   part of the namespace of a server into finger requests, such as
   http://www.foo.bar.org/finger_gateway/user@host.

In the absence of distributed authoring capabilities, it is
   acceptable to have no mapping of source resource(s) to the URI
   namespace. In fact, preventing access to the source resource(s) has
   desirable security benefits.  However, if remote editing of the
   source resource(s) is desired, the source resource(s) should be
   given a location in the URI namespace.  This source location should
   not be one of the locations at which the generated output is
   retrievable, since in general it is impossible for the server to
   differentiate requests for source resources from requests for
   process output resources.  There is often a many-to-many
   relationship between source resources and output resources.

On WebDAV compliant servers, for all output resources which have a
   single source resource (and that source resource has a URI), the URI
   of the source resource SHOULD be stored in a link on the output
   resource with type http://www.ietf.org/standards/dav/source.  Note
   that by storing the source URIs in links on the output resources,
   the burden of discovering the source is placed on the authoring
   client.


5. Locking

The ability to lock a resource provides a mechanism for serializing
   access to that resource.  Using a lock, an authoring client can
   provide a reasonable guarantee that another principal will not
   modify a resource while it is being edited.  In this way, a client
   can prevent the "lost update" problem.

This specification allows locks to vary over two client-specified
   parameters, the number of principals involved (exclusive vs. shared)
   and the type of access to be granted.  Furthermore, this document
   only provides the definition of locking for one lock access type,
   the write lock.  However, the syntax is extensible, and permits the
   eventual specification of other access types.

5.1. Exclusive Vs. Shared Locks

The most basic form of lock is an exclusive lock.  This is a lock
   where the access right in question is only granted to a single
   principal.  The need for this arbitration results from a desire to
   avoid having to constantly merge results.

However, there are times when the goal of a lock is not to exclude
   others from exercising an access right but rather to provide a
   mechanism for principals to indicate that they intend to exercise
   their access right.  Shared locks are provided for this case.  A
   shared lock allows multiple principals to receive a lock.  Hence any
   principal with appropriate access can get the lock.

With shared locks there are two trust sets that affect a resource.
   The first trust set is created by access permissions.  Principals
   who are trusted, for example, may have permission to write the
   resource.  Those who are not, don't.  Among those who have access
   permission to write the resource, the set of principals who have
   taken out a shared lock also must trust each other, creating a
   (typically) smaller trust set within the access permission write
   set.

Starting with every possible principal on the Internet, in most
   situations the vast majority of these principals will not have write
   access to a given resource.  Of the small number who do have write
   access, some principals may decide to guarantee their edits are free
   from overwrite conflicts by using exclusive write locks.  Others may
   decide they trust their collaborators will not overwrite their work
   (the potential set of collaborators being the set of principals who
   have write permission) and use a shared lock, which informs their
   collaborators that a principal is potentially working on the
   resource.

The WebDAV extensions to HTTP do not need to provide all of the
   communications paths necessary for principals to coordinate their
   activities.  When using shared locks, principals may use any out of
   band communication channel to coordinate their work (e.g., face-to-face interaction, written notes, post-it notes on the screen,
   telephone conversation, Email, etc.)  The intent of a shared lock is
   to let collaborators know who else is potentially working on a
   resource.

Shared locks are included because experience from web distributed
   authoring systems has indicated that exclusive write locks are often
   too rigid.  An exclusive write lock is used to enforce a particular
   editing process: take out exclusive write lock, read the resource,
   perform edits, write the resource, release the lock.  This editing
   process has the problem that locks are not always properly released,
   for example when a program crashes, or when a lock owner leaves
   without unlocking a resource.  While both timeouts and
   administrative action can be used to remove an offending lock,
   neither mechanism may be available when needed; the timeout may be
   long or the administrator may not be available.

Despite their potential problems, exclusive write locks are
   extremely useful, since often a guarantee of freedom from overwrite
   conflicts is what is needed. This specification provides both
   exclusive write locks and the less strict mechanism of shared locks.

5.2. Required Support

A WebDAV compliant server is not required to support locking in any
   form.  If the server does support locking it MAY choose to support
   any combination of exclusive and shared locks for any access types.

The reason for this flexibility is that locking policy strikes to
   the very heart of the resource management and versioning systems
   employed by various storage repositories.  These repositories
   require control over what sort of locking will be made available.
   For example, some repositories only support shared write locks while
   others only provide support for exclusive write locks while yet
   others use no locking at all.  As each system is sufficiently
   different to merit exclusion of certain locking features, this
   specification leaves locking as the sole axis of negotiation within
   WebDAV.

5.3. Lock Tokens

A lock token is a URI that identifies a particular lock.  A lock
   token is returned by every successful LOCK operation in the lock-token response header, and can also be discovered through lock
   discovery on a resource.

Lock token URIs are required to be unique across all resources for
   all time. This uniqueness constraint allows lock tokens to be
   submitted across resources and servers without fear of confusion.

This specification provides a lock token URI scheme called
   opaquelocktoken that meets the uniqueness requirements.  However
   resources are free to return any URI scheme so long as it meets the
   uniqueness requirements.

5.4. opaquelocktoken Lock Token URI Scheme

The opaquelocktoken URI scheme is designed to be unique across all
   resources for all time.  Due to this uniqueness quality, a client
   MAY submit an opaque lock token in a Lock-Token request header and
   an if-state[-not]-match header on a resource other than the one that
   returned it.

All resources MUST recognize the opaquelocktoken scheme and, at
   minimum, recognize that the lock token was not generated by the
   resource.  Note, however, that resources are not required to
   generate opaquelocktokens in LOCK method responses.

In order to guarantee uniqueness across all resources for all time
   the opaquelocktoken requires the use of the GUID mechanism.

Opaquelocktoken generators, however, have a choice of how they
   create these tokens.  They can either generate a new GUID for every
   lock token they create, which is potentially very expensive, or they
   can create a single GUID and then add extension characters.  If the
   second method is selected then the program generating the extensions
   MUST guarantee that the same extension will never be used twice with
   the associated GUID.

   Opaque-Lock-Token = "opaquelocktoken" ":" GUID [Extension]
   GUID = ; As defined in [Leach, Salz, 1997]
   Extension = *urlc   ;urlc is defined in [Berners-Lee et al., 1997]
   (draft-fielding-url-syntax-07.txt)


5.5. Lock Capability Discovery

Since server lock support is optional, a client trying to lock a
   resource on a server can either try the lock and hope for the best,
   or perform some form of discovery to determine what lock
   capabilities the server supports.  This is known as lock capability
   discovery.  Lock capability discovery differs from discovery of
   supported access control types, since there may be access control
   types without corresponding lock types.  A client can determine what
   lock types the server supports by retrieving the supportedlock
   property.

Any DAV compliant resource that supports the LOCK method MUST
   support the supportedlock property.

5.6. Active Lock Discovery

If another principal locks a resource that a principal wishes to
   access, it is useful for the second principal to be able to find out
   who the first principal is.  For this purpose the lockdiscovery
   property is provided.  This property lists all outstanding locks,
   describes their type, and provides their lock token.

Any DAV compliant resource that supports the LOCK method MUST
   support the lockdiscovery property.


6. Write Lock

This section describes the semantics specific to the write access
   type for locks.  The write lock is a specific instance of a lock
   type, and is the only lock type described in this specification.  A
   DAV compliant resource MAY support the write lock.

6.1. Methods Restricted by Write Locks

A write lock prevents a principal without the lock from successfully
   executing a PUT, POST, PATCH, PROPPATCH, MOVE, DELETE, MKCOL, ADDREF
   or DELREF on the locked resource.  All other current methods, GET in
   particular, function independent of the lock.

Note, however, that as new methods are created it will be necessary
   to specify how they interact with a write lock.

6.2. Write Locks and Properties

While those without a write lock may not alter a property on a
   resource it is still possible for the values of live properties to
   change, even while locked, due to the requirements of their schemas.
   Only dead properties and live properties defined to respect locks
   are guaranteed not to change while write locked.

6.3. Write Locks and Null Resources

It is possible to assert a write lock on a null resource in order to
   lock the name.  Please note, however, that locking a null resource
   effectively makes the resource non-null, as the resource now has
   lock related properties defined on it.

6.4. Write Locks and Collections

A write lock on a collection prevents the addition or removal of
   members of the collection.  As a consequence, when a principal
   issues a request to create a new internal member of a collection
   using PUT or POST, or to remove an existing internal member of a
   collection using DELETE, this request MUST fail if the principal
   does not have a write lock on the collection.

However, if a write lock request is issued to a collection
   containing internal member resources that are currently locked in a
   manner which conflicts with the write lock, the request MUST fail
   with a 409 Conflict status code.

6.5. Write Locks and COPY/MOVE

The owner of a write lock MUST NOT execute a MOVE method on a
   resource he has locked.  This specification intentionally does not
   define what happens if a MOVE method request is made on a locked
   resource by the lock's owner.

A COPY method invocation MUST NOT duplicate any write locks active
   on the source.

6.6. Re-issuing Write Locks

If a principal already owns a write lock on a resource, any future
   requests for the same type of write lock, on the same resource,
   while the principal's previous write lock is in effect, MUST result
   in a successful response with the same lock token as provided for
   the currently existing lock.  Two lock requests are defined to be
   identical if their Lock-Info headers are identical.

6.7. Write Locks and The Lock-Token Request Header

If a user agent is not required to have knowledge about a lock when
   requesting an operation on a locked resource, the following scenario
   might occur.  Program A, run by User A, takes out a write lock on a
   resource.  Program B, also run by User A, has no knowledge of the
   lock taken out by Program A, yet performs a PUT to the locked
   resource.  In this scenario, the PUT succeeds because locks are
   associated with a principal, not a program, and thus program B,
   because it is acting with principal A's credential, is allowed to
   perform the PUT.  However, had program B known about the lock, it
   would not have overwritten the resource, preferring instead to
   present a dialog box describing the conflict to the user.  Due to
   this scenario, a mechanism is needed to prevent different programs
   from accidentally ignoring locks taken out by other programs with
   the same authorization.

In order to prevent these collisions the lock token request header
   is introduced.  Please refer to the Lock Token Request Header
   section for details and requirements.

6.7.1. Write Lock Token Example


   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
   Lock-Token: <opaquelocktoken:123AbcEfg1284h23h2>
   <opaquelocktoken:AAAASDFcalkjfdas12312>




   HTTP/1.1 200 OK



In this example, both the source and destination are locked so two
   lock tokens must be submitted.  If only one of the two resources was
   locked, then only one token would have to be submitted.


7. Notational Conventions

Since this document describes a set of extensions to the HTTP/1.1
   protocol, the augmented BNF used herein to describe protocol
   elements is exactly the same as described in Section 2.1 of RFC
   2068, Hypertext Transfer Protocol -- HTTP/1.1 [Fielding et al.,
   1997].  Since this augmented BNF uses the basic production rules
   provided in Section 2.2 of RFC 2068, these rules apply to this
   document as well.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [Bradner,
   1997].


8. HTTP Methods for Distributed Authoring

8.1. PROPFIND

The PROPFIND method retrieves properties defined on the Request-URI,
   if it is a non-collection resource, or on the Request-URI and
   potentially its member resources, if the resource is a collection.
   All DAV compliant resources MUST support the PROPFIND method.

A client MAY submit a Depth header with a PROPFIND on a collection
   with a value of "0", "1" or "infinity".  DAV compliant servers MUST
   support the "0", "1" and "infinity" behaviors. By default, the
   PROPFIND method on a collection without a Depth header MUST act as
   if a Depth = infinity header was included.

A client MUST submit a Propfind request header describing what
   information is being requested.  It is possible to request
   particular property values, all property values, or a list of the
   names of the resource's properties.

The response is a text/xml message body that contains a  multistatus
   XML element that describes the results of the attempts to retrieve
   the various properties.  If a property was successfully retrieved
   then its value MUST be returned in a prop XML element.  If the scope
   of PROPFIND covers more than a single resource, as is the case with
   Depth values of "1" and "infinity", each response XML element MUST
   contain an href XML element which identifies the resource on which
   the properties in the prop XML element are defined. In the case of
   allprop and propname, if a principal does not have the right to know
   if a particular property exists, an error MUST NOT be returned.  The
   results of this method SHOULD NOT be cached.

8.1.1. Example: Retrieving Named Properties


   PROPFIND  /files/ HTTP/1.1
   Host: www.foo.bar
   Depth: 0
   Propfind: <http://www.foo.bar/boxschema/bigbox> <http://www.foo.bar/
   boxschema/author> <http://www.foo.bar/boxschema/DingALing> <http://w
   ww.foo.bar/boxschema/Random>



   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href ="http://www.ietf.org/standards/dav/" AS = "D"?>
   <?namespace href = "http://www.foo.bar/boxschema" AS = R"?>
   <D:multistatus>
     <D:response>
          <D:prop>
               <R:bigbox>
                    <R:BoxType>Box type A</R:BoxType>
               </R:bigbox>
               <R:author>
                    <R:Name>J.J. Dingleheimerschmidt</R:Name>
               </R:author>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
     </D:response>
     <D:response>
          <D:prop><R:DingALing/><R:Random/></D:prop>
          <D:status>HTTP/1.1 403 Forbidden</D:status>
          <D:responsedescription> The user does not have access to the
   DingALing property.
          </D:responsedescription>
     </D:response>

     <D:responsedescription> There has been an access violation error.
     </D:responsedescription>
     </D:multistatus>


In this example, PROPFIND is executed on the collection
   http://www.foo.bar/files/.  The specified depth is zero, hence the
   PROPFIND applies only to the collection itself, and not to any of
   its members.  The Propfind header specifies the name of four
   properties whose values are being requested. In this case only two
   properties were returned, since the principal issuing the request
   did not have sufficient access rights to see the third and fourth
   properties.

8.1.2. Example: Using allprop to Retrieve All Properties


   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Depth: 1
   Propfind: allprop




   HTTP/1.1 200 OK
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" As = "S"?>
   <?namespace href = "http://www.foo.bar/boxschema/" AS = R"?>
   <S:multistatus>
     <S:response>
          <S:href>http://www.foo.bar/container/</S:href>
          <S:prop>
               <R:bigbox>
                    <R:BoxType>Box type A</R:BoxType>
               </R:bigbox>
               <R:author>
                    <R:Name>Hadrian</R:Name>
               </R:author>
          </S:prop>
          <S:status>HTTP 1.1 200 OK</S:status>
     </S:response>
     <S:response>
          <S:href>http://www.foo.bar/container/index.html</S:href>
          <S:prop>
               <R:bigbox>
                    <R:BoxType>Box type B</R:BoxType>
               </R:bigbox>
          </S:prop>
          <S:status>HTTP 1.1 200 OK</S:status>
     </S:response>
   </S:multistatus>


In this example, PROPFIND was invoked on the resource
   http://www.foo.bar/container/ with a Depth header of 1, meaning the
   request applies to the resource and its children, and a Propfind
   header of "allprop", meaning the request should return the name and
   value of all properties defined on each resource.

The resource http://www.foo.bar/container/ has two properties
   defined on it, named http://www.foo.bar/boxschema/bigbox, and
   http://www.foo.bar/boxschema/author, while resource
   http://www.foo.bar/container/index.html has only a single resource
   defined on it, named http://www.foo.bar/boxschema/bigbox, another
   instance of the "bigbox" property type.

8.1.3. Example: Using propname to Retrieve all Property Names


   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Propfind: propname



   HTTP/1.1 200 OK
   Content-Type: text/xml
   Content-Length: xxxx


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" As = "D"?>
   <?namespace href = "http://www.foo.bar/boxschema/" AS = "R"?>
   <D:multistatus>
     <D:response>
          <D:href>http://www.foo.bar/container/</D:href>
          <D:prop>
               <R:bigbox/>
               <R:author/>
          </D:prop>
          <D:status>HTTP 1.1 200 OK</D:status>
     </D:response>
     <D:response>
          <D:href>http://www.foo.bar/container/index.html</D:href>
          <D:prop>
               <R:bigbox/>
          </D:prop>
          <D:status>HTTP 1.1 200 OK</D:status>
     </D:response>
   </D:multistatus>



In this example, PROPFIND is invoked on the collection resource
   http://www.foo.bar/container/, with a Propfind header set to
   "propname", meaning the name of all properties should be returned.
   Since no depth header is present, it assumes its default value of
   "infinity", meaning the name of the properties on the collection and
   all its progeny should be returned.

Consistent with the previous example, resource
   http://www.foo.bar/container/ has two properties defined on it,
   http://www.foo.bar/boxschema/bigbox, and
   http://www.foo.bar/boxschema/author.  The resource
   http://www.foo.bar/container/index.html, a member of the "container"
   collection, has only one property defined on it,
   http://www.foo.bar/boxschema/bigbox.


8.2. PROPPATCH

The PROPPATCH method processes instructions specified in the request
   body to set and/or remove properties defined on the resource
   identified by Request-URI.

All DAV compliant resources MUST support the PROPPATCH method and
   MUST process instructions that are specified using the
   propertyupdate, set, and remove XML elements of the DAV schema.
   Execution of the directives in this method is, of course, subject to
   access control constraints.  DAV compliant resources MUST support
   the setting of arbitrary dead properties.

The request message body of a PROPPATCH method MUST contain at least
   one propertyupdate XML element.  Instruction processing MUST occur
   in the order instructions are received (i.e., from top to bottom),
   and MUST be performed atomically.

8.2.1. propertyupdate XML element

   Name:       propertyupdate
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To contain a request to alter the properties on a
   resource.
   Parent:     None
   Values=     1*(set | remove)
   Description: This XML element is a container for the information
   required to modify the properties on the resource.  This XML element
   is multi-valued.

8.2.2. set XML element

   Name:       set
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To set the DAV properties specified inside the set XML
   element.
   Parent:     propertyupdate
   Values=     prop
   Description: This XML element MUST contain only a prop XML element.
   The elements contained by prop specify the name and value of
   properties that are set on the Request-URI.  If a property already
   exists then its value is replaced.


8.2.3. remove XML element

   Name:       remove
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To remove the DAV properties specified inside the remove
   XML element.
   Parent:     propertyupdate
   Values=     prop
   Description: Remove specifies that the properties specified in prop
   should be removed.  Specifying the removal of a property that does
   not exist is not an error.  All the elements in prop MUST be empty,
   as only the names of properties to be removed are required.


8.2.4. Response Codes

   200 OK - The command succeeded.  As there can be a mixture of sets
   and removes in a body, a 201 Create seems inappropriate.

   403 Forbidden - The client, for reasons the server chooses not to
   specify, cannot alter one of the properties.

   405 Conflict - The client has provided a value whose semantics are
   not appropriate for the property.  This includes trying to set read-only properties.

   413 Request Entity Too Long - If a particular property is too long
   to be recorded then a composite XML error will be returned
   indicating the offending property.

8.2.5. Example


   PROPPATCH /bar.html HTTP/1.1
   Host: www.foo.com
   Content-Type: text/xml
   Content-Length: xxxx


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" AS = "D"?>
   <?namespace href = "http://www.w3.com/standards/z39.50/" AS = "Z"?>
   <D:propertyupdate>
     <D:set>
          <D:prop>
               <Z:authors>
                    <Z:Author>Jim Whitehead</Z:Author>
                    <Z:Author>Roy Fielding</Z:Author>
               </Z:authors>
          </D:prop>
     </D:set>
     <D:remove>
          <D:prop><Z:Copyright-Owner/></D:prop>
     </D:remove>
   </D:propertyupdate>



   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href="http://www.ietf.org/standards/dav/" AS = "D"?>
   <?namespace href="http://www.w3.com/standards/z39.50/" AS = "Z"?>
   <D:multistatus>
     <D:response>
          <D:prop><Z:Authors/></D:prop>
          <D:status>HTTP/1.1 420 Method Failure</D:status>
     </D:response>
     <D:response>
          <D:prop><Z:Copyright-Owner/></D:prop>
          <D:status>HTTP/1.1 409 Conflict</D:status>
     </D:response>
     <D:responsedescription> Copyright Owner can not be deleted or
   altered.</D:responsedescription>
   </D:multistatus>


In this example, the client requests the server to set the value of
   the http://www.w3.com/standards/z39.50/Authors property, and to
   remove the property http://www.w3.com/standards/z39.50/Copyright-Owner.  Since the Copyright-Owner property could not be removed, no
   property modifications occur.  The Method Failure response code for
   the Authors property indicates this action would have succeeded if
   it were not for the conflict with removing the Copyright-Owner
   property.

8.3. MKCOL Method

The MKCOL method is used to create a new collection. All DAV
   compliant resources MUST support the MKCOL method.

8.3.1. Request

MKCOL creates a new collection resource at the location specified by
   the Request-URI.  If the Request-URI exists, then MKCOL must fail.
   During MKCOL processing, a server MUST make the Request-URI a member
   of its parent collection.  If no such ancestor exists, the method
   MUST fail.  When the MKCOL operation creates a new collection
   resource, all ancestors MUST already exist, or the method MUST fail
   with a 409 Conflict status code.  For example, if a request to
   create collection /a/b/c/d/ is made, and neither /a/b/ nor /a/b/c/
   exists, the request MUST fail.

When MKCOL is invoked without a request body, the newly created
   collection has no members.

A MKCOL request message MAY contain a message body.  The behavior of
   a MKCOL request when the body is present is limited to creating
   collections, members of a collection, bodies of members and
   properties on the collections or members.  If the server receives a
   MKCOL request entity type it does not support or understand it MUST
   respond with a 415 Unsupported Media Type status code.  The exact
   behavior of MKCOL for various request media types is undefined in
   this document, and will be specified in separate documents.

8.3.2. Response Codes

Responses from a MKCOL request are not cacheable, since MKCOL has
   non-idempotent semantics.

   201 Created - The collection or structured resource was created in
   its entirety.

   403 Forbidden - This indicates at least one of two conditions: 1)
   The server does not allow the creation of collections at the given
   location in its namespace, and 2) The parent collection of the
   Request-URI exists but cannot accept members.

   405 Method Not Allowed - MKCOL can only be executed on a
   deleted/non-existent resource.

   409 Conflict - A collection cannot be made at the Request-URI until
   one or more intermediate collections have been created.

   415 Unsupported Media Type- The server does not support the request
   type of the body.

   419 Insufficient Space on Resource - The resource does not have
   sufficient space to record the state of the resource after the
   execution of this method.

8.3.3. Example

This example creates a collection called /webdisc/xfiles/ on the
   server www.server.org.


   MKCOL /webdisc/xfiles/ HTTP/1.1
   Host: www.server.org




   HTTP/1.1 201 Created


8.4. INDEX Method

The INDEX method is used to enumerate the members of a resource.
   All DAV compliant resources MUST support the INDEX method if they
   have members.

8.4.1. The Request

For a collection, INDEX MUST return a list of its members.  All
   WebDAV compliant resources MUST support the text/xml response entity
   described below.  The INDEX result for a collection MAY also return
   a list of the members of child collections, to any depth.

Collections that respond to an INDEX method with a text/xml entity
   MUST contain a single  multistatus XML element which contains a
   response XML element for each member.

A resource that supports INDEX MUST return the resourcetype property
   for each member.

Note that the prop XML element MAY contain additional properties.

8.4.2. Example


   INDEX /user/yarong/dav_drafts/ HTTP/1.1
   Host: www.microsoft.com



   HTTP/1.1 200 OK
   Content-Type: text/xml
   Content-Length: xxx
   Last-Modified: Thu, 11 Sep 1997 23:45:12 GMT
   ETag: "fooyyybar"


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" as = "D"?>
   <D:multistatus>
     <D:response>
          <D:href>http://www.microsoft.com/user/yarong/dav_drafts/
          </D:href>
          <D:prop>
               <D:resourcetype>
                    <D:collection/>
               </D:resourcetype>
          </D:prop>
          <D:status>HTTP 1.1 200 OK</D:status>
     </D:response>
     <D:response>
          <D:href>
          http://www.microsoft.com/user/yarong/dav_drafts/base
          </D:href>
          <D:prop>
               <D:resourcetype/>
          </D:prop>
          <D:status>HTTP 1.1 200 OK</D:status>
     </D:response>
   </D:multistatus>


8.5. ADDREF Method

The ADDREF method is used to add external members to a resource.
   All DAV compliant collection resources MUST support the ADDREF
   method.  All other DAV compliant resources MAY support the ADDREF
   method as appropriate.

8.5.1. The Request

The ADDREF method adds the URI specified in the Collection-Member
   header as an external member to the collection specified by the
   Request-URI.  The value in the Collection-Member header MUST be an
   absolute URI meeting the requirements of an external member URI.

It is not an error if the URI specified in the Collection-Member
   header already exists as an external member of the collection.
   However, after processing the ADDREF there MUST be only one instance
   of the URI in the collection.  If the URI specified in the
   Collection-Member header already exists as an internal member of the
   collection, the ADDREF method MUST fail with a 412 Precondition
   Failed status code.

8.5.2. Example


   ADDREF /~ejw/dav/ HTTP/1.1
   Host: www.ics.uci.edu
   Collection-Member: http://www.ietf.org/standards/dav/




   HTTP/1.1 200 OK



This example adds the URI http://www.ietf.org/standards/dav/ as an
   external member resource of the collection
   http://www.ics.uci.edu/~ejw/dav/.


8.6. DELREF Method

The DELREF method is used to remove external members from a
   resource.  All DAV compliant collection resources MUST support the
   DELREF method.  All other DAV compliant resources MUST support the
   DELREF method only if they support the ADDREF method.

8.6.1. The Request

The DELREF method removes the URI specified in the Collection-Member
   header from the collection specified by the Request-URI.

DELREFing a URI which is not a member of the collection is not an
   error.  DELREFing an internal member MUST fail with a 412
   Precondition Failed status code.

8.6.2. Example


   DELREF /~ejw/dav/ HTTP/1.1
   Host: www.ics.udi.edu
   Collection-Member: http://www.ietf.org/standards/dav/




   HTTP/1.1 200 OK


This example removes the URI http://www.ietf.org/standards/dav/, an
   external member resource, from the collection
   http://www.ics.uci.edu/~ejw/dav/.


8.7. GET, HEAD for Collections

The semantics of GET are unchanged when applied to a collection,
   since GET is defined as, "retrieve whatever information (in the form
   of an entity) is identified by the Request-URI" [Fielding et al.,
   1997].  GET when applied to a collection MAY return the contents of
   an "index.html" resource, a human-readable view of the contents of
   the collection, or something else altogether, and hence it is
   possible the result of a GET on a collection will bear no
   correlation to the state of the collection.

Similarly, since the definition of HEAD is a GET without a response
   message body, the semantics of HEAD are unmodified when applied to
   collection resources.

8.8. POST for Collections

Since by definition the actual function performed by POST is
   determined by the server and often depends on the particular
   resource, the behavior of POST when applied to collections cannot be
   meaningfully modified because it is largely undefined.  Thus the
   semantics of POST are unmodified when applied to a collection.

8.9. DELETE

8.9.1. DELETE Method for Non-Collection Resources

If the DELETE method is issued to a non-collection resource which is
   an internal member of a collection, then during DELETE processing a
   server MUST remove the Request-URI from its parent collection.  A
   server MAY remove the URI of a deleted resource from any collections
   of which the resource is an external member.

8.9.2. DELETE for Collections

The DELETE method on a collection MUST act as if a Depth = Infinity
   header was used on it.  A client MUST NOT submit a Depth header on a
   DELETE on a collection with any value but Infinity.

DELETE instructs that the collection specified in the request-URI,
   the records of its external member resources, and all its internal
   member resources, are to be deleted.

If any member cannot be deleted then all of the member's progeny
   MUST NOT be deleted, so as to maintain the namespace.

Any headers included with DELETE MUST be applied in processing every
   resource to be deleted.  In this case, a header of special interest
   is the Destroy header, which specifies the method to be used to
   delete all resources in the scope of the DELETE.

When the DELETE method has completed processing it MUST return a
   consistent namespace.

The response SHOULD be a Multi-Status response that describes the
   result of the DELETE on each affected resource.

8.9.2.1. Example


   DELETE  /container/ HTTP/1.1
   Host: www.foo.bar
   Destroy: NoUndelete




   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" As = "d"?>
   <d:multistatus>
     <d:response>
          <d:href>http://www.foo.bar/container/resource1</d:href>
          <d:href>http://www.foo.bar/container/resource2</d:href>
          <d:status>HTTP/1.1 200 OK</d:status>
     </d:response>
     <d:response>
          <d:href>http://www.foo.bar/container/</d:href>
          <d:status>HTTP/1.1 420 Method Failure</d:status>
     </d:response>
     <d:response>
          <d:href>http://www.foo.bar/container/resource3</d:href>
          <d:status>HTTP/1.1 412 Precondition Failed</d:status>
     </d:response>
   </d:multistatus>


In this example the attempt to delete
   http://www.foo.bar/container/resource3 failed because the server was
   unable to guarantee that resource3 would not be able to be
   undeleted.  Consequently, the attempt to delete
   http://www.foo.bar/container/ also failed, but resource1 and
   resource2 were deleted. Even though a Depth header has not been
   included, a depth of infinity is assumed because the method is on a
   collection. As this example illustrates, DELETE processing need not
   be atomic.

8.10. PUT

8.10.1. PUT for Non-Collection Resources

A PUT performed on an existing resource replaces the GET response
   entity of the resource.  Properties defined on the resource MAY be
   recomputed during PUT processing.  For example, if a server
   recognizes the content type of the request body, it may be able to
   automatically extract information that could be profitably exposed
   as properties.

A PUT that would result in the creation of a resource without an
   appropriately scoped parent collection MUST fail with a 405 Method
   Not Allowed.

8.10.2. PUT for Collections

As defined in the HTTP/1.1 specification [Fielding et al., 1997],
   the "PUT method requests that the enclosed entity be stored under
   the supplied Request-URI."  Since submission of an entity
   representing a collection would implicitly encode creation and
   deletion of resources, this specification intentionally does not
   define a transmission format for creating a collection using PUT.
   Instead, the MKCOL method is defined to create collections.  If a
   PUT is invoked on a collection resource it MUST fail.

When the PUT operation creates a new non-collection resource all
   ancestors MUST already exist.  If all ancestors do not exist, the
   method MUST fail with a 409 Conflict status code.  For example, if
   resource /a/b/c/d.html is to be created and /a/b/c/ does not exist,
   then the request must fail.

8.11. COPY Method

The COPY method creates a duplicate of the specified resource.  All
   DAV compliant resources MUST support the COPY method.

Support for the COPY method does not guarantee the ability to copy a
   resource. For example, separate programs may control resources on
   the same server.  As a result, it may not even be possible to copy a
   resource to a location that appears to be on the same server.

8.11.1. The Request

The COPY method creates a duplicate of the source resource, given by
   the Request-URI, in the destination resource, given by the
   Destination header.  The Destination header MUST be present.  The
   exact behavior of the COPY method depends on the type of the source
   resource.

8.11.1.1. COPY for HTTP/1.1 resources

When the source resource is not a collection the body of the
   destination resource MUST be octet-for-octet identical to the body
   of the source resource.  Alterations to the destination resource do
   not modify the source resource.  Alterations to the source resource
   do not modify the destination resource.  Thus, all copies are
   performed "by-value".

All properties on the source resource MUST be duplicated on the
   destination resource, subject to modifying headers, following the
   definition for copying properties.

8.11.1.2. COPY for Properties

The following section defines how properties on a resource are
   handled during a COPY operation.

Live properties SHOULD be duplicated as identically behaving live
   properties at the destination resource.  Since they are live
   properties, the server determines the syntax and semantics of these
   properties.  Properties named by the Enforce-Live-Properties header
   MUST be live on the destination resource, or the method MUST fail.
   If a property is not named by Enforce-Live-Properties and cannot be
   copied live, then its value MUST be duplicated, octet-for-octet, in
   an identically named, dead property on the destination resource.

If a property on the source already exists on the destination
   resource and the Overwrite header is set to "T" then the property at
   the destination MUST be overwritten with the property from the
   source.  If the Overwrite header is "F" and the previous situation
   exists, then the COPY MUST fail with a 409 Conflict.

8.11.1.3. COPY for Collections

The COPY method on a collection without a Depth header MUST act as
   if a Depth = infinity header was included.  A client MAY submit a
   Depth header on a COPY on a collection with a value of "0" or
   "infinity".  DAV compliant servers MUST support the "0" and
   "infinity" behaviors.

A COPY of depth infinity instructs that the collection specified in
   the Request-URI, the records of its external member resources, and
   all its internal member resources, are to be copied to a location
   relative to the Destination header.

A COPY of depth "0" only instructs that the collection, the
   properties, and its external members, not its internal members, are
   to be copied.

Any headers included with a COPY are to be applied in processing
   every resource to be copied.

The exception to this rule is the Destination header. This header
   only specifies the destination for the Request-URI.  When applied to
   members of the collection specified in the request-URI the value of
   Destination is to be modified to reflect the current location in the
   hierarchy.  So, if the request-URI is "a" and the destination is "b"
   then when a/c/d is processed it MUST use a destination of b/c/d.

When the COPY method has completed processing it MUST have created a
   consistent namespace at the destination.  Thus if it is not possible
   to COPY a collection with internal members, the internal members may
   still be copied but a collection will have to be created at the
   destination to contain them.

The response is a Multi-Status response that describes the result of
   the COPY on each affected resource.  The response is given for the
   resource that was to be copied, not the resource that was created as
   a result of the copy.  In other words, each entry indicates whether
   the copy on the resource specified in the href succeeded or failed
   and why.

The exception to this rule is for errors that occurred on the
   destination.  For example, if the destination was locked the
   response would indicate the destination URL and a 421 Destination
   Locked error.

8.11.1.4. Type Interactions

If the destination resource identifies a collection and the
   Overwrite header is "T", prior to performing the copy the server
   MUST perform a DELETE operation on the collection.

8.11.2. Response Codes

200 OK - The source resource was successfully copied to a pre-existing destination resource.

201 Created - The source resource was successfully copied.  The copy
   operation resulted in the creation of a new resource.

412 Precondition Failed - This status code MUST be returned if the
   server was unable to maintain the liveness of the properties listed
   in the Enforce-Live-Properties header, or if the Overwrite header is
   "F", and the state of the destination resource is non-null.

419 Insufficient Space on Resource - The destination resource does
   not have sufficient space to record the state of the resource after
   the execution of this method.

421 Destination Locked - The destination resource was locked and
   either a valid Lock-Token header was not submitted, or the Lock-Token header identifies a lock held by another principal.

500 Server Error - The resource was in such a state that it could
   not be copied.  This may occur if the Destination header specifies a
   resource that is outside the namespace the resource is able to
   interact with.

8.11.3. Overwrite Example

This example shows resource
   http://www.ics.uci.edu/~fielding/index.html being copied to the
   location http://www.ics.uci.edu/users/f/fielding/index.html.  The
   contents of the destination resource were overwritten, if non-null.


   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html




   HTTP/1.1 200 OK


8.11.4. No Overwrite Example

The following example shows the same copy operation being performed,
   except with the Overwrite header set to "F."  A response of 412
   Precondition Failed is returned because the destination resource has
   a non-null state.


   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
   Overwrite: "F"




   HTTP/1.1 412 Precondition Failed


8.11.5. Collection Example


   COPY /container/ HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/othercontainer/
   Enforce-Live-Properties: *
   Depth: Infinity



   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" As = "d"?>
   <d:multistatus>
     <d:response>
          <d:href>http://www.foo.bar/othercontainer/resource1</d:href>
          <d:href>http://www.foo.bar/othercontainer/resource2</d:href>
          <d:href>http://www.foo.bar/othercontainer/</d:href>
          <d:href>http://www.foo.bar/othercontainer/R2/D2</d:href>
          <d:status>HTTP/1.1 201 Created</d:status>
     </d:response>
     <d:response>
          <d:href>http://www.foo.bar/othercontainer/R2/</d:href>
          <d:status>HTTP/1.1 412 Precondition Failed</d:status>
     </d:response>
   </d:multistatus>


The Depth header is unnecessary as the default behavior of COPY on a
   collection is to act as if a "Depth: Infinity" header had been
   submitted.  In this example most of the resources, along with the
   collection, were copied successfully. However the collection R2
   failed, most likely due to a problem with enforcing live properties.
   R2's member D2 was successfully copied.  As a result a collection
   was created at www.foo.bar/othercontainer/R2 to contain D2.

8.12. MOVE Method

The move operation on a resource is the logical equivalent of a copy
   followed by a delete, where the actions are performed atomically.
   All DAV compliant resources MUST support the MOVE method.

However, support for the MOVE method does not guarantee the ability
   to move a resource to a particular destination. For example,
   separate programs may actually control different sets of resources
   on the same server.  Therefore, it may not even be possible to move
   a resource within a namespace that appears to belong to the same
   server.

8.12.1. The Request

If a resource exists at the destination, the destination resource
   will be DELETEd as a side effect of the MOVE operation, subject to
   the restrictions of the Overwrite header.

8.12.2. MOVE for Collections

MOVE instructs that the collection specified in the Request-URI, the
   records of its external member resources, and all its internal
   member resources, are to be moved to a location relative to the
   Destination header.

The MOVE method on a collection MUST act as if a Depth "infinity"
   header was used on it.  A client MUST NOT submit a Depth header on a
   MOVE on a collection with any value but "infinity".

Any headers included with MOVE are to be applied in processing every
   resource to be moved.

The exception to this rule is the Destination header.  The behavior
   of this header is the same as given for COPY on collections.

When the MOVE method has completed processing it MUST have created a
   consistent namespace on both the source and destination, creating
   collections at the source or destination as necessary.

As specified in the definition of MOVE, a MOVE of a collection over
   another collection causes the destination collection and all its
   members to be deleted.

The response is a Multi-Status response that describes the result of
   the MOVE on each affected resource.  The response is given for the
   resource that was to be moved, not the resource that was created as
   a result of the move.  In other words, each entry indicates whether
   the move on the resource specified in the href succeeded or failed
   and why.

The exception to this rule is for errors that occurred on the
   destination.  For example, if the destination was locked the
   response would indicate the destination URL and a 421 Destination
   Locked error.

8.12.3. Response Codes

   200 OK - The move operation was successful.

   409 Conflict - The MOVE was attempted on a collection with members.
   While the COPY part of this operation could succeed the DELETE could
   not.  Therefore the MOVE MUST fail.

   412 Precondition Failed - This status code MUST be returned if the
   server was unable to maintain the liveness of the properties listed
   in the Enforce-Live-Properties header, or if the Overwrite header is
   "F", and the state of the destination resource is non-null.

   421 Destination Locked - The destination resource was locked and
   either a valid Lock-Token header was not submitted, or the Lock-Token header identifies a lock held by another principal.

   502 Bad Gateway - This may occur when the destination is on another
   server and the destination server refuses to accept the resource

8.12.4. Overwrite Example

This example shows resource
   http://www.ics.uci.edu/~fielding/index.html being moved to the
   location http://www.ics.uci.edu/users/f/fielding/index.html.  The
   contents of the destination resource were overwritten, if non-null.


   MOVE /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html




   HTTP/1.1 200 OK



8.12.5. Collection Example


   MOVE /container/ HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/othercontainer/
   Enforce-Live-Properties: *
   Overwrite: False
   Lock-Token: <OpaqueLockToken:xxxx> <OpaqueLockToken:xxxx>




   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" As = "D"?>
   <d:multistatus>
     <d:response>
          <d:href>http://www.foo.bar/container/resource1</d:href>
          <d:href>http://www.foo.bar/container/resource2</d:href>
          <d:href>http://www.foo.bar/container/</d:href>
          <d:href>http://www.foo.bar/container/C2/R2</d:href>
          <d:status>HTTP/1.1 201 Created</d:status>
     </d:response>
     <d:response>
          <d:href>http://www.foo.bar/container/C2</d:href>
          <d:status>HTTP/1.1 420 Method Failure</d:status>
     <d:response>
          <d:href>http://www.foo.bar/othercontainer/C2</d:href>
          <d:status>HTTP/1.1 409 Conflict</d:status>
     </d:response>
   </d:multistatus>


In this example the client has submitted a number of lock tokens
   with the request.  A lock token will need to be submitted for every
   resource, both source and destination, anywhere in the scope of the
   method, that is locked.  In this case the proper lock token was not
   submitted for the destination http://www.foo.bar/othercontainer/C2.
   This means that the resource continer/c2 could not be moved,
   although its child container/C2/R2 could be moved.

8.13. LOCK Method

The following sections describe the LOCK method, which is used to
   take out a lock of any access type.  These sections on the LOCK
   method describe only those semantics that are specific to the LOCK
   method and are independent of the access type of the lock being
   requested.  Once the general LOCK method has been described,
   subsequent sections describe the semantics of the "write" access
   type, and the write lock.

8.13.1. Operation

A LOCK method invocation creates the lock specified by the Lock-Info
   header on the Request-URI.  Lock method requests SHOULD have a XML
   request body which contains an Owner XML element for this lock
   request. The LOCK request MAY have a Timeout header.

A successful response to a lock invocation MUST include Lock-Token
   and Timeout headers.  Clients MUST assume that locks may arbitrarily
   disappear at any time, regardless of the value given in the Timeout
   header.  The Timeout header only indicates the behavior of the
   server if "extraordinary" circumstances do not occur.  For example,
   an administrator may remove a lock at any time or the system may
   crash in such a way that it loses the record of the lock's
   existence. The response MUST also contain the value of the
   lockdiscovery property in a prop XML element.

8.13.2. The Effect of Locks on Properties and Collections

By default the scope of a lock is the entire state of the resource,
   including its body and associated properties.  As a result, a lock
   on a resource also locks the resource's properties, and a lock on a
   property may lock a property's resource or may restrict the ability
   to lock the property's resource.  Only a single lock token MUST be
   used when a lock extends to cover both a resource and its
   properties.  Note that certain lock types MAY override this
   behavior.

For collections, a lock also affects the ability to add or remove
   members.  The nature of the effect depends upon the type of access
   control involved.

8.13.3. Locking Replicated Resources

Some servers automatically replicate resources across multiple URLs.
   In such a circumstance the server MAY only accept a lock on one of
   the URLs if the server can guarantee that the lock will be honored
   across all the URLs.

8.13.4. Locking Multiple Resources

The LOCK method supports locking multiple resources simultaneously
   by allowing for the listing of several URIs in the LOCK request.
   These URIs, in addition to the Request-URI, are then to be locked as
   a result of the LOCK method's invocation.  When multiple resources
   are specified the LOCK method only succeeds if all specified
   resources are successfully locked.

The Lock-Tree option of the lock request specifies that the resource
   and all its internal children (including internal collections, and
   their internal members) are to be locked.  This is another mechanism
   by which a request for a lock on multiple resources can be
   specified.

Currently existing locks can not be extended to cover more or less
   resources, and any request to expand or contract the number of
   resources in a lock MUST fail with a 409 Conflict status code. So,
   for example, if resource A is exclusively write locked and then the
   same principal asks to exclusively write lock resources A, B, and C,
   the request will fail as A is already locked and the lock can not be
   extended.

A successful result will return a single lock token which represents
   all the resources that have been locked.  If an UNLOCK is executed
   on this token, all associated resources are unlocked.

If the lock cannot be granted to all resources, a 409 Conflict
   status code MUST be returned with a response entity body containing
   a  multistatus XML element describing which resource(s) prevented the
   lock from being granted.

8.13.5. Interaction with other Methods

The interaction of a LOCK with various methods is dependent upon the
   lock type.  However, independent of lock type, a successful DELETE
   of a resource MUST cause all of its locks to be removed.

8.13.6. Lock Compatibility Table

The table below describes the behavior that occurs when a lock
   request is made on a resource.

   Current lock state/   Lock request      Shared Lock       ExclusiveLock   None                     True              True  Shared Lock              True              False   Exclusive Lock           False             False*

Legend: True = lock MAY be granted.  False = lock MUST NOT be
   granted.  *=if the principal requesting the lock is the owner of the
   lock, the lock MAY be regranted.

The current lock state of a resource is given in the leftmost
   column, and lock requests are listed in the first row.  The
   intersection of a row and column gives the result of a lock request.
   For example, if a shared lock is held on a resource, and an
   exclusive lock is requested, the table entry is "false", indicating
   the lock must not be granted.

If an exclusive or shared lock is re-requested by the principal who
   owns the lock, the lock MUST be regranted.  If the lock is
   regranted, the same lock token that was previously issued MUST be
   returned.

8.13.7. Owner XML Element

   Name:       owner
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Provide information about the principal taking out a
   lock.
   Parent:     Any
   Values:          XML Elements
   Descripton: The Owner XML element provides information sufficient
   for either directly contacting a principal (such as a telephone
   number or Email URI), or for discovering the principal (such as the
   URL of a homepage) who owns a lock.

8.13.8. Lock Response

A successful lock response MUST contain a Lock-Token response
   header, a Timeout header and a prop XML element in the response body
   which contains the value of the lockdiscovery property.

8.13.9. Response Codes

   409 Conflict - The resource is locked, so the method has been
   rejected.

   412 Precondition Failed - The included Lock-Token was not
   enforceable on this resource or the server could not satisfy the
   request in the Lock-Info header.

8.13.10. Example - Simple Lock Request


   LOCK /workspace/webdav/proposal.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Lock-Info: LockType=Write LockScope=Exclusive
   Timeout: Infinite; Second-4100000000
   Content-Type: text/xml
   Content-Length: xyz
   <?XML version="1.0">
   <?namespace href="http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:owner>
      <D:href>http://www.ics.uci.edu/~ejw/contact.html</D:href>
   </D:owner>



   HTTP/1.1 200 OK
   Lock-Token: opaquelocktoken:xyz122393481230912asdfa09s8df09s7df
   Timeout: Second-604800
   Content-Type: text/xml
   Content-Length: xxxxx

   <?XML version="1.0">
   <?namespace href ="http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:prop>
     <D:lockdiscovery>
          <D:activelock>
               <D:locktype>write</D:locktype>
               <D:lockscope>exclusive</D:lockscope>
               <D:addlocks/>
               <D:owner>
                    <D:href>
                    http://www.ics.uci.edu/~ejw/contact.html
                    </D:href>
               </D:owner>
               <D:timeout>Second-604800</D:timeout>
               <D:locktoken>
                    <D:href>
               opaquelocktoken:xyz122393481230912asdfa09s8df09s7df
                    </D:href>
               </D:locktoken>
          </D:activelock>
     </D:lockdiscovery>
   </D:prop>


This example shows the successful creation of an exclusive write
   lock on resource
   http://webdav.sb.aol.com/workspace/webdav/proposal.doc.  The
   resource http://www.ics.uci.edu/~ejw/contact.html contains contact
   information for the owner of the lock.  The server has an activity-based timeout policy in place on this resource, which causes the
   lock to automatically be removed after 1 week (604800 seconds).  The
   response has a Lock-Token header that gives the lock token URL that
   uniquely identifies the lock created by this lock request.

8.13.11. Example - Multi-Resource Lock Request


   LOCK /workspace/webdav/proposal.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Lock-Info: LockType=Write LockScope=Exclusive
   Addlocks=<http://webdav.sb.aol.com/workspace/><http://foo.bar/blah>
   Timeout: Infinite, Second-4100000000

   <?XML version="1.0">
   <?namespace href="http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:href>http://www.ics.uci.edu/~ejw/contact.html<D:href>



   HTTP/1.1 409 Conflict
   Content-Type: text/xml
   Content-Length: xxxxx

   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" As = "D"?>
   <D:multistatus>
     <D:response>
          <D:href>
               http://webdav.sb.aol.com/workspace/webdav/proposal.doc
          </D:href>
          <D:href>
               http://webdav.sb.aol.com/workspace/webdav/
          </D:href>
          <D:status>HTTP/1.1 202 Accepted</D:status>
     </D:response>
     <D:response>
          <D:href>http://foo.bar/blah</D:href>
          <D:status>HTTP/1.1 403 Forbidden</D:status>
     </D:response>
   </D:multistatus>


This example shows a request for an exclusive write lock on three
   resources, http://webdav.sb.aol.com/workspace/webdav/proposal.doc,
   http://webdav.sb.aol.com/workspace/, and http://foo.bar/blah.  In
   this request, the client has specified that it desires an infinite
   length lock, if available, otherwise a timeout of 4.1 billion
   seconds, if available.  The Owner header field specifies the web
   address for contact information for the principal taking out the
   lock.

This lock request has failed, because the server rejected the lock
   request for http://foo.bar/blah.  The 409 Conflict status code
   indicates that the server was unable to satisfy the request because
   there is a conflict between the state of the resources and the
   operation named in the request.  Within the  multistatus, the 202
   Accepted status code indicates that the lock method was accepted by
   the resources, and would have been completed if all resources named
   in the request were able to be locked.  The 403 Forbidden status
   code indicates that the server does not allow lock requests on this
   resource.

8.14. UNLOCK Method

The UNLOCK method removes the lock identified by the lock token in
   the Lock-Token header from the Request-URI, and all other resources
   included in the lock.

Any DAV compliant resource which supports the LOCK method MUST
   support the UNLOCK method.

8.14.1. Example


   UNLOCK /workspace/webdav/info.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Lock-Token:opaquelocktoken:123AbcEfg1284h23h2


   HTTP/1.1 200 OK



In this example, the lock identified by the lock token
   "opaquelocktoken:123AbcEfg1284h23h2" is successfully removed from
   the resource http://webdav.sb.aol.com/workspace/webdav/info.doc.  If
   this lock included more than just one resource, the lock was removed
   from those resources as well.

8.15. PATCH Method

The PATCH method is used to modify parts of the entity returned in
   the response to a GET method.  DAV compliant resources MAY support
   the PATCH method.

8.15.1. The Request

The request entity of the PATCH method contains a list of
   differences between the resource identified by the Request-URI and
   the desired content of the resource after the PATCH action has been
   applied.  The list of differences is in a format defined by the
   media type of the entity (e.g., "application/diff") and must include
   sufficient information to allow the server to convert the original
   version of the resource to the desired version.  Processing
   performed by PATCH is atomic.  Hence all changes MUST be
   successfully executed or the method fails.  PATCH MUST fail if
   executed on a non-existent resource; i.e., PATCH does not create a
   resource as a side effect.

If the request appears (at least initially) to be acceptable, the
   server MUST transmit an interim 100 response message after receiving
   the empty line terminating the request headers and continue
   processing the request.  Since the semantics of PATCH are non-idempotent, responses to this method are not cacheable.

While server support for PATCH is optional, if a server does support
   PATCH, it MUST support at least the text/xml diff format defined
   below.  Support for the VTML difference format [VTML] is
   recommended, but not required.

8.15.2. text/xml elements for PATCH

The resourceupdate XML element contains a set of XML sub-entities
   that describe modification operations.  The name and meaning of
   these XML elements are given below.  Processing of these directives
   MUST be performed in the order encountered within the XML document.
   A directive operates on the resource as modified by all previous
   directives (executed in sequential order).  The length of the
   resource MAY be extended or reduced by a PATCH.

The changes specified by the resourceupdate XML element MUST be
   executed atomically.

8.15.2.1. resourceupdate XML Element

   Name:       resourceupdate
   Namespace:  http://www.ietf.org/standards/dav/patch/
   Purpose:    Contains an ordered set of changes to a non-collection,
   non-property resource.
   Parent:     None
   Value=      *(insert | delete | replace)


8.15.2.2. insert XML Element

   Name:       insert
   Namespace:  http://www.ietf.org/standards/dav/patch/
   Purpose:    Insert the XML element's contents starting at the
   specified octet.
   Parent:     resourceupdate
   Value:      The insert XML element MUST contain an octet-range XML
   attribute that specifies an octet position within the body of a
   resource.  A value of "end" specifies the end of the resource.  The
   body of the insert XML element contains the octets to be inserted.

Please note that in order to protect the white space contained in
   this XML element the following attribute/value MUST be included in
   the element: XML-SPACE = "PRESERVE". This attribute is defined in
   the XML specification [Bray, Sperberg-McQueen, 1997].

8.15.2.3. delete XML Element

   Name:       delete
   Namespace:  http://www.ietf.org/standards/dav/patch/
   Purpose:    Removes the specified range of octets.
   Parent:     resourceupdate
   Value:      The delete XML element MUST contain an octet-range XML
   attribute.

Discussion: The octets that are deleted are removed, which means the
   resource is collapsed and the length of the resource is decremented
   by the size of the octet range.  It is not appropriate to replace
   deleted octets with zeroed-out octets, since zero is a valid octet
   value.

8.15.2.4. replace XML Element

   Name:       replace
   Namespace:  http://www.ietf.org/standards/dav/patch/
   Purpose:    Replaces the specified range of octets with the contents
   of the XML element.  If the number of octets in the XML element is
   different from the number of octets specified, the update MUST be
   rejected.
   Parent:     resourceupdate
   Value:      The replace XML element MUST contain an octet-range XML
   attribute.  The contents of the entity are the replacement octets.

Please note that in order to protect the white space contained in
   this XML element the following attribute/value MUST be included in
   the element: XML-SPACE = "PRESERVE"
                                     .

                                       This attribute is defined in the
   XML specification [Bray, Sperberg-McQueen, 1997].

8.15.2.5. octet-range Attribute

   Name:       octet-range
   Namespace:  http://www.ietf.org/standards/dav/patch/
   Purpose:    Specifies a range of octets that the enclosing property
   affects.
   Parent:     insert | delete | replace
   Value:      number ["-" (number | "end")]
               Number = 1*Digit

   Description: Octet numbering begins with 0.  If the octet contains a
   single number then the operation is to begin at that octet and to
   continue for a length specified by the operation.  In the case of a
   delete, this would mean to delete a single octet.  In the case of an
   insert this would mean to begin the insertion at the specified octet
   and to continue for the length of the included value, extending the
   resource if necessary.  In the case of replace, the replace begins
   at the specified octet and overwrites all that follow to the length
   of the included value.

8.15.3. Response Codes

200 OK - The request entity body was processed without error,
   resulting in an update to the state of the resource.

409 Conflict - If the update information in the request message body
   does not make sense given the current state of the resource (e.g.,
   an instruction to delete a non-existent line), this status code MAY
   be returned.

415 Unsupported Media Type - The server does not support the content
   type of the update instructions in the request message body.

418 Unprocessable Entity - The entity body submitted with the PATCH
   was not understood by the resource.

419 Insufficient Space on Resource - The resource does not have
   sufficient space to record the state of the resource after the
   execution of this method.

8.15.4. HTML file modification Example

The following example shows a modification of the title and contents
   of the HTML resource http://www.example.org/hello.html.

Before:
   <HTML>
   <HEAD>
   <TITLE>Hello world HTML page</TITLE>
   </HEAD>
   <BODY>
   <P>Hello, world!</P>
   </BODY>
   </HTML>


   PATCH Request:                       Response:


   PATCH hello.html HTTP/1.1
   Host: www.example.org
   Content-Type: text/xml
   Content-Length: xxx
                                        HTTP/1.1 100 Continue

   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/patch/" AS =
   "D"?>
   <D:resourceupdate>
     <D:replace XML-SPACE = "PRESERVE">
          <D:octet-range>14</D:octet-range>&003CTITLE&003ENew
   Title&003C/TITLE&003E</D:replace>
     <D:delete><D:octet-range>38-50</D:octet-range></D:delete>
     <D:insert XML-SPACE = "PRESERVE"><D:octet-range>86</D:octet-range>&003CP&003ENew paragraph&003C/P&003E</D:insert>
   </D:resourceupdate>

                                        HTTP/1.1 200 OK


   After:
   <HTML>
   <HEAD>
   <TITLE>New Title</TITLE>
   </HEAD>
   <BODY>
   <P>Hello, world!</P>
   <P>New paragraph</P>
   </BODY>
   </HTML>



9. HTTP Headers for Distributed Authoring

9.1. Collection-Member Header

   CollectionMember = "Collection-Member" ":" URI   ; URI is defined in
   section 3.2.1 of [Fielding et al., 1997]


The Collection-Member header specifies the URI of an external
   resource to be added/deleted to/from a collection.

9.2. DAV Header

   DAV = "DAV" ":" ("1" | "2" | extend)


This header indicates that the resource supports the DAV schema and
   protocol to the level indicated.  All DAV compliant resources MUST
   return the DAV header on all OPTIONS responses.

9.3. Depth Header

   Depth = "Depth" ":" ("0" | "1" | "infinity")


The Depth header is used with methods executed on collections to
   indicate whether the method is to be applied only to the collection
   (Depth = 0), to the collection and its immediate children, (Depth =
   1), or the collection and all its progeny (Depth = infinity).  Note
   that Depth = 1 and Depth = infinity behavior only applies to
   internal member resources, and not to external member resources.

The Depth header is only supported if a method's definition
   explicitly provides for such support.

The following rules are the default behavior for any method that
   supports the depth header. A method MAY override these defaults by
   defining different behavior in its definition.

Methods which support the depth header MAY choose not to support all
   of the header's values and MAY define, on a case by case basis, the
   behavior of the method on a collection if a depth header is not
   present. For example, the MOVE method only supports Depth = infinity
   and if a depth header is not present will act as if a Depth =
   infinity header had been applied.

Clients MUST NOT rely upon methods executing on members of their
   hierarchies in any particular order or the execution being atomic.
   Note that methods MAY provide guarantees on ordering and atomicity.

Upon execution, a method with a depth header will perform as much of
   its assigned task as possible and then return a response specifying
   what it was able to accomplish and what it failed to do.

So, for example, an attempt to COPY a hierarchy may result in some
   of the members being copied and some not.

Any headers on a method with a depth header MUST be applied to all
   resources in the scope of the method. For example, an if-match
   header will have its value applied against every resource in the
   method's scope and will cause the method to fail if the header fails
   to match.

If a resource, source or destination, within the scope of the method
   is locked in such a way as to prevent the successful execution of
   the method, then the lock token for that resource MUST be submitted
   with the request in the Lock-Token request header.

9.4. Destination Header

   Destination = "Destination" ":" URI


The Destination header specifies a destination resource for methods
   such as COPY and MOVE, which take two URIs as parameters.

9.5. Destroy Header

   DestroyHeader = "Destroy" ":" #Choices


   Choices = "VersionDestroy" | "NoUndelete" | "Undelete" | extend


   Extend = RFC-Reg | Coded-URL


   RFC-Req = Token ; This is a token value (defined in section 2.2 of
   [Fielding et al., 1997]) that has been published as an RFC.


   Coded-URL = "<" URI ">"


When deleting a resource the client often wishes to specify exactly
   what sort of delete should be performed.  The Destroy header, used
   with the Mandatory header, allows the client to specify the end
   result it desires.  The Destroy header is specified as follows:

The Undelete token requests that, if possible, the resource should
   be left in a state such that it can be undeleted.  The server is not
   required to honor this request.

The NoUndelete token requests that the resource MUST NOT be left in
   a state such that it can be undeleted.

The VersionDestroy token includes the functionality of the
   NoUndelete token and extends it to include having the server remove
   all versioning references to the resource that it has control over.

9.6. Enforce-Live-Properties Header

   EnforceLiveProperties = "Enforce-Live-Properties" ":" ("*" | "Omit"
   | 1*(Property-Name))


   Property-Name = Coded-URL


The Enforce-Live-Properties header specifies properties that MUST be
   "live" after they are copied (moved) to the destination resource of
   a copy (or move).  If the value "*" is given for the header, then it
   designates all live properties on the source resource.  If the value
   is "Omit" then the server MUST NOT duplicate on the destination
   resource any properties that are defined on the source resource.  If
   this header is not included then the server is expected to act as
   defined by the default property handling behavior of the associated
   method.

9.7. If-None-State-Match

   If-None-State-Match = "If-None-State-Match" ":" 1#Coded-URL


The If-None-State-Match header is intended to have similar
   functionality to the If-None-Match header defined in section 14.26
   of RFC 2068.  However the if-none-state-match header is intended for
   use with any URI which represents state information about a
   resource, referred to as a state token.  A typical example is a lock
   token.

If any of the state tokens identifies the current state of the
   resource, the server MUST NOT perform the requested method.
   Instead, if the request method was GET, HEAD, INDEX, or PROPFIND,
   the server SHOULD respond with a 304 Not Modified response,
   including the cache-related entity-header fields (particularly ETag)
   of the current state of the resource.  For all other request
   methods, the server MUST respond with a status of 412 Precondition
   Failed.

If none of the state tokens identifies the current state of the
   resource, the server MAY perform the requested method.

If any of the tokens is not recognized then the method MUST fail
   with a 412 Precondition Failed.

Note that the "AND" and "OR" keywords specified with the If-State-Match header are intentionally not defined for If-None-State-Match,
   because this functionality is not required.

9.8. If-State-Match

   If-State-Match = "If-State-Match" ":" ("AND" | "OR") 1#Coded-URL


The If-State-Match header is intended to have similar functionality
   to the If-Match header defined in section 14.25 of RFC 2068.
   However the If-State-Match header is intended for use with any URI
   which represents state information about a resource.  A typical
   example is a lock token.

If the AND keyword is used and all of the state tokens identify the
   state of the resource, then the server MAY perform the requested
   method.  If the OR keyword is used and any of the state tokens
   identifies the current state of the resource, then the server MAY
   perform the requested method.  If the keyword requirement for the
   the keyword used is not met, the server MUST NOT perform the
   requested method, and MUST return a 412 Precondition Failed
   response.

If any of the tokens is not recognized then the method MUST fail
   with a 412 Precondition Failed.

9.9. Lock-Info Request Header

   LockInfo = "Lock-Info" ":" DAVLockType SP DAVLockScope [SP
   AdditionalLocks] [SP Lock-Tree]
   DAVLockType = "LockType" "=" DAVLockTypeValue
   DAVLockTypeValue = ("Write" | Extend)
   DAVLockScope = "LockScope" "=" DAVLockScopeValue
   DAVLockScopeValue = ("Exclusive" |"Shared" | Extend)
   AdditionalLocks = "AddLocks" "=" 1*("<" URI ">")
   Lock-Tree = "Lock-Tree" "=" ("T" | "F")


The Lock-Info request header specifies the scope and type of a lock
   for a LOCK method request.  The syntax specification below is
   extensible, allowing new type and scope identifiers to be added.

The LockType field specifies the access type of the lock.  At
   present, this specification only defines one lock type, the "Write"
   lock.  The LockScope field specifies whether the lock is an
   exclusive lock, or a shared lock.  The AddLocks field specifies
   additional URIs, beyond the Request-URI, to which the lock request
   applies.  The LockTree field is used to specify recursive locks.  If
   the LockTree field is "T", the lock request applies to the hierarchy
   traversal of the internal member resources of the Request-URI, and
   the AddLocks URIs, inclusive of the Request-URI and the AddLocks
   URIs.  It is not an error if LockTree is "T", and the Request-URI or
   the AddLocks URIs have no internal member resources.  By default,
   the value of LockTree is "F", and this field MAY be omitted when its
   value is "F".

9.10. Lock-Token Request Header

   Lock-Token = "Lock-Token" ":" 1#Coded-URL


The Lock-Token request header, containing a lock token owned by the
   requesting principal, is used by the principal to indicate that the
   principal is aware of the existence of the lock specified by the
   lock token.

If the following conditions are met:

   1) The method is restricted by a lock type that requires the
   submission of a lock token, such as a write lock,
   2) The user-agent has authenticated itself as a principal,
   3) The user-agent is submitting a method request to a resource on
   which the principal owns a write lock,

Then:

   1) The method request MUST include a Lock-Token header with the lock
      token, or,
   2) The method MUST fail with a 409 Conflict status code.

If multiple resources are involved with a method, such as a COPY or
   MOVE method, then the lock tokens, if any, for all involved
   resources, MUST be included in the Lock-Token request header.

For example, Program A, used by user A, takes out a write lock on a
   resource.  Program A then makes a number of PUT requests on the
   locked resource.  All the requests contain a Lock-Token request
   header that includes the write lock state token.  Program B, also
   run by User A, then proceeds to perform a PUT to the locked
   resource.  However, program B was not aware of the existence of the
   lock and so does not include the appropriate Lock-Token request
   header.  The method is rejected even though principal A is
   authorized to perform the PUT.  Program B can, if it so chooses, now
   perform lock discovery and obtain the lock token.  Note that
   programs A and B can perform GETs without using the Lock-Token
   header because the ability to perform a GET is not affected by a
   write lock.

Having a lock token provides no special access rights.  Anyone can
   find out anyone else's lock token by performing lock discovery.
   Locks are to be enforced based upon whatever authentication
   mechanism is used by the server, not based on the secrecy of the
   token values.

9.11. Lock-Token Response Header

   Lock-Token = "Lock-Token" ":" Coded-URL


If a resource is successfully locked then a Lock-Token header will
   be returned containing the lock token that represents the lock.

9.12. Overwrite Header

   Overwrite = "Overwrite" ":" ("T" | "F")


The Overwrite header specifies whether the server should overwrite
   the state of a non-null destination resource during a COPY or MOVE.
   A value of "F" states that the server MUST NOT perform the COPY or
   MOVE operation if the state of the destination resource is non-null.
   By default, the value of Overwrite is "T," and a client MAY omit
   this header from a request when its value is "T." While the
   Overwrite header appears to duplicate the functionality of the If-Match: * header of HTTP/1.1, If-Match applies only to the Request-URI, and not to the Destination of a COPY or MOVE.

If a COPY or MOVE is not performed due to the value of the Overwrite
   header, the method MUST fail with a 409 Conflict status code.

9.13. Propfind Request Header

   Propfind = "Propfind" ":" ("allprop" | "propname" | RFC-Reg |
   1*(Property-Name))


The Propfind header is used to specify which properties are to be
   returned in a PROPFIND method.  The properties are identified by
   their URIs.  Two special tokens are defined for use with the
   Propfind header, allprop and propname.  The allprop token specifies
   that all property names and values on the resource are to be
   returned.  The propname token specifies that only a list of property
   names on the resource are to be returned.

9.14. Status-URI Response Header

The Status-URI response header MAY be used with the 102 Processing
   response code to inform the client as to the status of a method.

   Status-URI = "Status-URI" ":" *(Status-Code "<" URI ">") ; Status-
   Code is defined in 6.1.1 of [Fielding et al., 1997]


The URIs listed in the header are source resources which have been
   affected by the outstanding method.  The status code indicates the
   resolution of the method on the identified resource.  So, for
   example, if a MOVE method on a collection is outstanding and a 102
   "Processing" response with a Status-URI response header is returned,
   the included URIs will indicate resources that have had move
   attempted on them and what the result was.

9.15. Timeout Header

   TimeOut = "Timeout" ":" 1#TimeType
   TimeType = ("Second-" DAVTimeOutVal | "Infinite" | Other)
   DAVTimeOutVal = 1*digit
   Other = Extend field-value   ; See section 4.2 of RFC 2068


Clients MAY include Timeout headers in their LOCK requests.
   However, the server is not required to honor or even consider these
   requests.  Clients MUST NOT submit a Timeout request header with any
   method other than a LOCK method.

A Timeout request header MUST contain at least one TimeType and MAY
   contain multiple TimeType entries. The purpose of listing multiple
   TimeType entries is to indicate multiple different values and value
   types that are acceptable to the client.  The client lists the
   TimeType entries in order of preference.

The Timeout response header MUST use a Second value, Infinite, or a
   TimeType the client has indicated familiarity with.  The server MAY
   assume a client is familiar with any TimeType submitted in a Timeout
   header.

The "Second" TimeType specifies the number of seconds that MUST
   elapse between granting of the lock at the server, and the automatic
   removal of the lock.  A server MUST not generate a timeout value for
   "Second" greater than 2^32-1.

The timeout counter is restarted any time an owner of the lock sends
   a method to any member of the lock, including unsupported methods,
   or methods which are unsuccessful.  It is recommended that the HEAD
   method be used when the goal is simply to restart the timeout
   counter.

If the timeout expires then the lock is lost.  Specifically the
   server SHOULD act as if an UNLOCK method was executed by the server
   on the resource using the lock token of the timed-out lock,
   performed with its override authority. Thus logs should be updated
   with the disposition of the lock, notifications should be sent,
   etc., just as they would be for an UNLOCK request.

Servers are advised to pay close attention to the values submitted
   by clients, as they will be indicative of the type of activity the
   client intends to perform.  For example, an applet running in a
   browser may need to lock a resource, but because of the instability
   of the environment within which the applet is running, the applet
   may be turned off without warning.  As a result, the applet is
   likely to ask for a relatively small timeout value so that if the
   applet dies, the lock can be quickly harvested.  However, a document
   management system is likely to ask for an extremely long timeout
   because its user may be planning on going off-line.

10. Response Code Extensions to HTTP/1.1

The following response codes are added to those defined in HTTP/1.1
   [Fielding et al., 1997].

10.1. 102 Processing

Methods can potentially take a long period of time to process,
   especially methods that support the Depth header.  In such cases the
   client may time-out the connection while waiting for a response.  To
   prevent this the server MAY return a 102 response code to indicate
   to the client that the server is still processing the method.

If a method is taking longer than 20 seconds (a reasonable, but
   arbitrary value) to process the server SHOULD return a 102
   "Processing" response.

10.2. 207 Multi-Status

The response requires providing status for multiple independent
   operations.

10.3. 418 Unprocessable Entity

The server understands the content type of the request entity, but
   was unable to process the contained instructions.

10.4. 419 Insufficient Space on Resource

The resource does not have sufficient space to record the state of
   the resource after the execution of this method.

10.5. 420 Method Failure

The method was not executed on a particular resource within its
   scope because some part of the method's execution failed causing the
   entire method to be aborted.  For example, if a resource could not
   be moved as part of a MOVE method, all the other resources would
   fail with a 420 Method Failure.

10.6. 421 Destination Locked

The destination resource of a method is locked, and either the
   request did not contain a valid Lock-Info header, or the Lock-Info
   header identifies a lock held by another principal.


11. Multi-Status Response

The default 207 Multi-Status response body is a text/xml HTTP entity
   that contains a single XML element called  multistatus, which
   contains a set of XML elements called response, one for each 200,
   300, 400, and 500 series status code generated during the method
   invocation.  100 series status codes MUST NOT be recorded in a
   response XML element.

11.1.  multistatus XML Element

   Name:       multistatus
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains multiple response messages.
   Parent:     Any
   Value:      1*response [responsedescription]
   Description: The responsedescription at the top level is used to
   provide a general message describing the overarching nature of the
   response.  If this value is available an application MAY use it
   instead of presenting the individual response descriptions contained
   within the responses.

11.2. response XML Element

   Name:       response
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Holds a single response
   Parent:      multistatus
   Value:      href [prop] status [responsedescription]
   Description: Prop MUST contain one or more empty XML elements
   representing the names of properties.  Multiple properties may be
   included if the same response applies to them all.  If href is used
   then the response refers to a problem with the referenced resource,
   not a property.

11.3. status XML Element

   Name:       status
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Holds a single HTTP status-line
   Parent:     response
   Value:      status-line   ;status-line defined in [Fielding et al.,
   1997]

11.4. responsedescription XML Element

   Name:       responsedescription
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains a message that can be displayed to the user
   explaining the nature of the response.
   Parent:      multistatus | response
   Value:      Any
   Description: This XML element provides information suitable to be
   presented to a user.


12. Generic DAV XML Elements

12.1. href XML Element

   Name:       href
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To identify that the content of the element is a URI.
   Parent:     Any
   Value:      URI ; See section 3.2.1 of [Fielding et al., 1997]

12.2. link XML Element

   Name:       link
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To identify a property as a link and to contain the
   source and destination of that link.
   Values=     1*src 1*dst
   Description: Link is used to provide the sources and destinations of
   a link.  The type of the property containing the link XML element
   provides the type of the link.  Link is a multi-valued element, so
   multiple Links may be used together to indicate multiple links with
   the same type.


12.2.1. src XML Element

   Name:       src
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To indicate the source of a link.
   Parent:     link
   Values=     URI


12.2.2. dst XML Element

   Name:       dst
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To indicate the destination of a link
   Parent:     link
   Values=     URI


12.2.3. Example

   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" AS = "D"?>
   <?namespace href = "http://www.foocorp.com/Project/" AS = "F"?>
   <D:prop>
     <D:Source>
          <D:link>
               <F:projfiles>Source</F:projfiles>
               <D:src>http://foo.bar/program</D:src>
               <D:dst>http://foo.bar/src/main.c</D:dst>
          </D:link>
          <D:link>
               <F:projfiles>Library</F:projfiles>
               <D:src>http://foo.bar/program</D:src>
               <D:dst>http://foo.bar/src/main.lib</D:dst>
          </D:link>
          <D:link>
               <F:projfiles>Makefile</F:projfiles>
               <D:src>http://foo.bar/program</D:src>
               <D:dst>http://foo.bar/src/makefile</D:dst>
          </D:link>
     </D:Source>
   </D:prop>


In this example the resource http://foo.bar/program has a source
   property that contains three links.  Each link contains three
   elements, two of which, src and dst, are part of the DAV schema
   defined in this document, and one which is defined by the schema
   http://www.foocorp.com/project/ (Source, Library, and Makefile).  A
   client which only implements the elements in the DAV spec will not
   understand the foocorp elements and will ignore them, thus seeing
   the expected source and destination links.  An enhanced client may
   know about the foocorp elements and be able to present the user with
   additional information about the links.  This example demonstrates
   the power of XML markup that allows for element values to be
   enhanced without breaking older clients.

12.3. prop XML element

   Name:       prop
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains properties related to a resource.
   Parent:     Any
   Values:     XML Elements
   Description: The prop XML element is a generic container for
   properties defined on resources.  All elements inside prop MUST
   define properties related to the resource.  No other elements may be
   used inside of a prop element.


13. DAV Properties

13.1. creationdate Property

   Name:       creationdate
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    The time and date the resource was created.
   Value:      The time and date MUST be given in ISO 8601 format
   [ISO8601]
   Description: This property SHOULD be defined on all DAV compliant
   resources.  If present, it contains a timestamp of the moment when
   the resource was created (i.e., the moment it had non-null state).

13.2. displayname Property

   Name:       displayname
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    A name for the resource that is suitable for
   presentation to a user.
   Value:      Any valid XML character data (as defined in [Bray,
   Sperberg-McQueen, 1997])
   Description:This property SHOULD be defined on all DAV compliant
   resources.  If present, the property contains a description of the
   resource that is suitable for presentation to a user.

13.3. get-content-language Property

   Name:       get-content-language
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Content-Language header returned by a GET
   without accept headers.  If no Content-Language header is available,
   this property MUST NOT exist.
   Value:      language-tag   ;language-tag is defined in section 14.13
   of RFC 2068

13.4. get-content-length Property

   Name:       get-content-length
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Content-Length header returned by a GET
   without accept headers.  If no Content-Length header is available,
   this property MUST NOT exist.
   Value:      content-length ; see section 14.14 of RFC 2068

13.5. get-content-type Property

   Name:       get-content-type
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Content-Type header returned by a GET
   without accept headers.  If no Content-Type header is available,
   this property MUST NOT exist.
   Value:      media-type   ; defined in Section 3.7 of [Fielding et
   al., 1997]

13.6. get-etag Property

   Name:       get-etag
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the ETag header returned by a GET without
   accept headers.  If no ETag header is available, this property MUST
   NOT exist.
   Value:      entity-tag  ; defined in Section 3.11 of [Fielding et
   al., 1997]
   Description:Note that the ETag on some resource may reflect changes
   in any part of the state of the resource, not necessarily just a
   change to the response to the GET method.  For example, a change in
   the ACL may cause the ETag to change.

13.7. get-last-modified Property

   Name:       get-last-modified
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Last-Modified header returned by a GET
   method without accept headers.  If no Last-Modified header is
   available, this property MUST NOT exist.
   Value:      HTTP-date  ; defined in Section 3.3.1 of [Fielding et
   al., 1997]
   Description:Note that the last-modified date on some resource may
   reflect changes in any part of the state of the resource, not
   necessarily just a change to the response to the GET method.  For
   example, a change in a property may cause the last-modified date to
   change.

13.8. index-content-language Property

   Name:       index-content-language
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Content-Language header returned by an
   INDEX without accept headers.  If no Content-Language header is
   available, this property MUST NOT exist.
   Value:      language-tag   ;language-tag is defined in section 14.13
   of RFC 2068

13.9. index-content-length Property

   Name:       index-content-length
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Content-Length header returned by an INDEX
   without accept headers.  If no Content-Length header is available,
   this property MUST NOT exist.
   Value:      content-length ; see section 14.14 of RFC 2068

13.10. index-content-type Property

   Name:       index-content-type
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Content-Type header returned by an INDEX
   without accept headers.  If no Content-Type header is available,
   this property MUST NOT exist.
   Value:      media-type   ; defined in Section 3.7 of [Fielding et
   al., 1997]

13.11. index-etag Property

   Name:       index-etag
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the ETag header returned by an INDEX without
   accept headers.  If no ETag header is available, this property MUST
   NOT exist.
   Value:      entity-tag  ; defined in Section 3.11 of [Fielding et
   al., 1997]
   Description:Note that the ETag on some resource may reflect changes
   in any part of the state of the resource, not necessarily just a
   change to the response to the INDEX method.  For example, a change
   in the ACL may cause the ETag to change.

13.12. index-last-modified Property

   Name:       index-last-modified
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Contains the Last-Modified header returned by an INDEX
   method without accept headers.  If no Last-Modified header is
   available, this property MUST NOT exist.
   Value:      HTTP-date  ; defined in Section 3.3.1 of [Fielding et
   al., 1997]
   Description:Note that the last-modified date on some resource may
   reflect changes in any part of the state of the resource, not
   necessarily just a change to the response to the INDEX method.  For
   example, a change in a property may cause the last-modified date to
   change.

13.13. lockdiscovery Property

   Name:       lockdiscovery
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To discover what locks are active on a resource
   Values=     *activelock
   Description:The lockdiscovery property returns a listing of who has
   a lock, what type of lock he have, the timeout type and the time
   remaining on the timeout, and the associated lock token.  The server
   is free to withhold any or all of this information if the requesting
   principal does not have sufficient access rights to see the
   requested data.  A server which supports locks MUST provide the
   lockdiscovery property on any resource with locks on it.


13.13.1. activelock XML Element

   Name:       activelock
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    A multivalued XML element that describes a particular
   active lock on a resource
   Parent:     lockdiscovery
   Values=     locktype lockscope [addlocks] owner timeout locktoken


13.13.2. owner XML Element

   Name:       owner
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Returns owner information
   Parent:     activelock
   Values=     XML:REF | *PCDATA


13.13.3. timeout XML Element

   Name:       timeout
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Returns information about the timeout associated with
   the lock
   Parent:     activelock
   Values=     TimeType


13.13.4. addlocks XML Element

   Name:       addlocks
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Lists additional resources associated with this lock, if
   any.
   Parent:     activelock
   Values=     1*href


13.13.5. locktoken XML Element

   Name:       locktoken
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Returns the lock token
   Parent:     activelock
   Values=     href
   Description:The href contains a Lock-Token-URL.


13.13.6. Example


   PROPFIND /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Length: xxxx
   Content-Type: text/xml


   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:propfind>
     <D:prop><lockdiscovery/></D:prop>
   </D:propfind>



   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href ="http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:multistatus>
     <D:response>
          <D:prop>
               <D:lockdiscovery>
                    <D:activelock>
                         <D:locktype>write</D:locktype>
                         <D:lockscope>exclusive</D:lockscope>
                         <D:addlocks>
                              <D:href>http://foo.com/doc/</D:href>
                         </D:addlocks>
                         <D:owner>Jane Smith</D:owner>
                         <D:timeout>Infinite</D:timeout>
                         <D:locktoken>
                              <D:href>iamuri:unique!!!!!</D:href>
                         </D:locktoken>
                    </D:activelock>
               </D:lockdiscovery>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
     </D:response>
   </D:multistatus>


This resource has a single exclusive write lock on it, with an
   infinite timeout.  This same lock also covers the resource
   http://foo.com/doc/.

13.14. resourcetype Property

   Name:       resourcetype
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    This property contains a series of XML elements that
   specify information regarding the nature of the resource.  This
   specification only defines a single value, collection.
   Value:      XML elements
   Description:This property MUST be defined on all DAV compliant
   resources.  The default value is empty.

13.14.1. collection XML Element

   Name:       collection
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Identifies the associated resource as a collection.
   Collection resources MUST define this value with the resourcetype
   property.
   Parent:     resourcetype
   Values:          None

13.15. Source Link Property Type

   Name:       source
   Namespace:  http://www.ietf.org/standards/dav/link/
   Purpose:    The destination of the source link identifies the
   resource that contains the unprocessed source of the link's source.
   Parent:     None
   Value:      An XML document with zero or more link XML elements.
   Discussion: The source of the link (src) is typically the URI of the
   output resource on which the link is defined, and there is typically
   only one destination (dst) of the link, which is the URI where the
   unprocessed source of the resource may be accessed.  When more than
   one link destination exists, this specification asserts no policy on
   ordering.

13.16. supportedlock Property

   Name:       supportedlock
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    To provide a listing of the lock capabilities supported
   by the resource.
   Values:     An XML document containing zero or more LockEntry XML
   elements.
   Description:The supportedlock property of a resource returns a
   listing of the combinations of scope and access types which may be
   specified in a lock request on the resource.  Note that the actual
   contents are themselves controlled by access controls so a server is
   not required to provide information the client is not authorized to
   see.  If supportedlock is available on "*" then it MUST define the
   set of locks allowed on all resources on that server.

13.16.1. lockentry XML Element

   Name:       lockentry
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Defines a DAVLockType/LockScope pair that may be legally
   used with a LOCK on the specified resource.
   Parent:     supportedlock
   Values=     locktype lockscope


13.16.2. locktype XML Element

   Name:       locktype
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Lists a DAVLockType
   Parent:     lockentry
   Values=     DAVLockTypeValue

13.16.3. lockscope XML Element

   Name:       lockscope
   Namespace:  http://www.ietf.org/standards/dav/
   Purpose:    Lists a DAVLockScope
   Parent:     lockentry
   Values:     DAVLockScopeValue

13.16.4. Example


   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar


   Content-Length: xxxx
   Content-Type: text/xml

   <?XML version="1.0">
   <?namespace href = "http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:propfind>
     <D:prop><supportedlock/></D:prop>
   </D:propfind>



   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx


   <?XML version="1.0">
   <?namespace href ="http://www.ietf.org/standards/dav/" AS = "D"?>
   <D:multistatus>
     <D:response>
          <D:prop>
               <D:supportedlock>
                    <D:LockEntry>
                         <D:locktype>Write</D:locktype>
                         <D:lockscope>Exclusive</D:lockscope>
                    </D:LockEntry>
                    <D:LockEntry>
                         <D:locktype>Write</D:locktype>
                         <D:lockscope>Shared</D:lockscope>
                    </D:LockEntry>
               </D:supportedlock>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
     </D:response>
   </D:multistatus>



14. DAV Compliance Levels

A DAV compliant resource can choose from two levels of compliance.
   A client can discover which level a resource supports by executing
   OPTIONS on the resource, and examining the "DAV" header which is
   returned.

Since this document describes extensions to the HTTP/1.1 protocol,
   minimally all DAV compliant resources, clients, and proxies MUST be
   compliant with RFC 2068 [Fielding et al., 1997].

14.1. Level 1

A level 1 compliant resource MUST meet all "MUST" requirements in
   all sections of this document.

14.2. Level 2

A level 2 compliant resource MUST meet all level 1 requirements and
   support the supportedlock property as well as the LOCK method.


15. Internationalization Considerations

In the realm of internationalization issues, this specification is
   substantively in compliance with the IETF Character Set Policy
   [Alvestrand, 1997]. In this specification, human-readable fields can
   be found in either the value of a property, or in an error message
   returned in a response entity body.  In both cases, the human-readable content is encoded using XML, which has explicit provisions
   for character set tagging and encoding, and requires by default that
   XML processors read XML elements encoded using the UTF-8 and UCS-2
   encodings of the ISO 10646 basic multilingual plane.  Furthermore,
   XML contains provisions for encoding XML elements using other
   encoding schemes, notable among them UCS-4, which permits encoding
   of characters from any ISO 10646 character plane.

The default character set encoding for XML data in this
   specification, and in general, is UTF-8.  WebDAV compliant
   applications MUST support the UTF-8 and UCS-2 character set
   encodings for XML elements, and SHOULD support the UCS-4 encoding.
   The XML character set encoding declaration for each supported
   character set MUST also be supported, since it is by using this
   encoding declaration that an XML processor determines the encoding
   of an element.

XML also provides language tagging capability which provides the
   ability to specify the language of the contents of a particular XML
   element.  Although XML, and hence WebDAV, does not use RFC 1766
   language tags for its language names, the benefit of using standard
   XML in this context outweighs the advantage of using RFC 1766
   language tags.

Names used within this specification fall into two categories: names
   specific to protocol elements such as methods and headers, names of
   XML elements, and names of properties.  Naming of protocol elements
   follows the precedent of HTTP, using English names encoded in
   USASCII for methods and headers.  Since these protocol elements are
   not visible to users, and are in fact simply long token identifiers,
   they do not need to support encoding in multiple character sets.
   Similarly, though the names of XML elements used in this
   specification are English names encoded in UTF-8, these names are
   not visible to the user, and hence do not need to support multiple
   character set encodings.

The name of a property defined on a resource is a URI.  Although
   some applications (e.g., a generic property viewer) will display
   property URIs directly to their users, it is expected that the
   typical application will use a fixed set of properties, and will
   provide a mapping from the property name URI to a human-readable
   field when displaying the property name to a user.  It is only in
   the case where the set of properties is not known ahead of time that
   an application need display a property name URI to a user. We
   recommend that applications provide human-readable property names
   wherever feasible.

For error reporting, we follow the convention of HTTP/1.1 status
   codes, including with each status code a short, English description
   of the code (e.g., 421 Destination Locked).  While the possibility
   exists that a poorly crafted user agent would display this message
   to a user, internationalized applications will ignore this message,
   and display an appropriate message in the user's language and
   character set.

Since interoperation of clients and servers does not require locale
   information, this specification does not specify any mechanism for
   transmission of this information.


16. Security Considerations
   [TBD]


17. Terminology

Collection - A resource that contains member resources.

Member Resource - A resource contained by a collection.  There are
   two types of member resources: external and internal.

Internal Member Resource - A member resource of a collection whose
   URI is relative to the URI of the collection.

External Member Resource - A member resource of a collection with an
   absolute URI that is not relative to its parent's URI.

Property - A name/value pair that contains descriptive information
   about a resource.

Live Property - A property whose semantics and syntax are enforced
   by the server.  For example, a live "content-length" property would
   have its value, the length of the entity returned by a GET request,
   automatically calculated by the server.

Dead Property - A property whose semantics and syntax are not
   enforced by the server.  The server only records the value of a dead
   property; the client is responsible for maintaining the consistency
   of the syntax and semantics of a dead property.


18. Copyright

The following copyright notice is copied from RFC 2026 chapter 10.4,
   and describes the applicable copyright for this document

Copyright (C) The Internet Society November 19, 1997. All Rights
   Reserved.

This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


19. Acknowledgements

A specification such as this thrives on piercing critical review and
   withers from apathetic neglect.  The authors gratefully acknowledge
   the contributions of the following people, whose insights were so
   valuable at every stage of our work.

Terry Allen, Harald Alvestrand, Alan Babich, Dylan Barrell, Bernard
   Chester, Tim Berners-Lee, Dan Connolly, Jim Cunningham, Ron Daniel,
   Jr., Jim Davis, Keith Dawson, Mark Day, Martin Duerst, David Durand,
   Lee Farrell, Chuck Fay, Roy Fielding, Mark Fisher, Alan Freier,
   George Florentine, Jim Gettys, Phill Hallam-Baker, Dennis Hamilton,
   Steve Henning, Alex Hopmann, Andre van der Hoek, Ben Laurie, Paul
   Leach, Ora Lassila, Karen MacArthur, Steven Martin, Larry Masinter,
   Michael Mealling, Keith Moore, Henrik Nielsen, Kenji Ota, Bob
   Parker, Glenn Peterson, Jon Radoff, Saveen Reddy, Henry Sanders,
   Christopher Seiwald, Judith Slein, Mike Spreitzer, Einar Stefferud,
   Ralph Swick, Kenji Takahashi, Richard N. Taylor, Robert Thau, John
   Turner, Sankar Virdhagriswaran, Fabio Vitali, Gregory Woodhouse, and
   Lauren Wood.

One from this list deserves special mention.  The contributions by
   Larry Masinter have been invaluable, both in helping the formation
   of the working group and in patiently coaching the authors along the
   way.  In so many ways he has set high standards we have toiled to
   meet.

20. References

   [Alvestrand, 1997] H. T. Alvestrand, "IETF Policy on Character Sets
   and Languages."  Internet-draft, work-in-progress.
   ftp://ds.internic.net/internet-drafts/draft-alvestrand-charset-policy-02.txt

   [Berners-Lee, 1997] T. Berners-Lee, "Metadata Architecture."
   Unpublished white paper, January 1997.
   http://www.w3.org/pub/WWW/DesignIssues/Metadata.html.

   [Bradner, 1997] S. Bradner, "Key words for use in RFCs to Indicate
   Requirement Levels."  RFC 2119, BCP 14. Harvard University.  March,
   1997.

   [Bray, Sperberg-McQueen, 1997] T. Bray, C. M. Sperberg-McQueen,
   "Extensible Markup Language (XML): Part I. Syntax", WD-xml-lang.html, http://www.w3.org/pub/WWW/TR/WD-xml-lang.html.

   [Fielding et al., 1997] R. Fielding, J. Gettys, J. Mogul, H.
   Frystyk, T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1."
   RFC 2068. U.C. Irvine, DEC, MIT/LCS.  January, 1997.
   ftp://ds.internic.net/rfc/rfc2068.txt

   [Lasher, Cohen, 1995] R. Lasher, D. Cohen, "A Format for
   Bibliographic Records," RFC 1807. Stanford, Myricom. June, 1995.
   ftp://ds.internic.net/rfc/rfc1807.txt

   [Leach, Salz, 1997] P. J. Leach, R. Salz, "UUIDs and GUIDs."
   Internet-draft (expired), work-in-progress, February, 1997.
   http://www.internic.net/internet-drafts/draft-leach-uuids-guids-00.txt

   [Maloney, 1996] M. Maloney, "Hypertext Links in HTML." Internet
   draft (expired), work-in-progress, January, 1996.

   [MARC, 1994] Network Development and MARC Standards, Office, ed.
   1994. "USMARC Format for Bibliographic Data", 1994. Washington, DC:
   Cataloging Distribution Service, Library of Congress.

   [Miller et al., 1996] J. Miller, T. Krauskopf, P. Resnick, W.
   Treese, "PICS Label Distribution Label Syntax and Communication
   Protocols" Version 1.1, W3C Recommendation REC-PICS-labels-961031.
   http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html.

   [Slein et al., 1997] J. A. Slein, F. Vitali, E. J. Whitehead, Jr.,
   D. Durand, "Requirements for Distributed Authoring and Versioning
   Protocol for the World Wide Web." RFC XXXX. Xerox, Univ. of Bologna,
   U.C. Irvine, Boston Univ. YYY, 1997.
   ftp://ds.internic.net/rfc/rfcXXXX.txt

   [WebDAV, 1997] WEBDAV Design Team. "A Proposal for Web Metadata
   Operations." Unpublished manuscript.
   http://www.ics.uci.edu/~ejw/authoring/proposals/metadata.html

   [Weibel et al., 1995] S. Weibel, J. Godby, E. Miller, R. Daniel,
   "OCLC/NCSA Metadata Workshop Report."
   http://purl.oclc.org/metadata/dublin_core_report.

   [Yergeau, 1997] F. Yergeau, "UTF-8, a transformation format of
   Unicode and ISO 10646", Internet Draft, work-in-progress, draft-yergeau-utf8-rev-00.txt, http://www.internic.net/internet-drafts/draft-yergeau-utf8-rev-00.txt.

21. Authors' Addresses


   Y. Y. Goland
   Microsoft Corporation
   One Microsoft Way
   Redmond, WA 98052-6399
   Email: yarong@microsoft.com

   E. J. Whitehead, Jr.
   Dept. Of Information and Computer Science
   University of California, Irvine
   Irvine, CA 92697-3425
   Email: ejw@ics.uci.edu

   A. Faizi
   Netscape
   685 East Middlefield Road
   Mountain View, CA 94043
   Email: asad@netscape.com

   S. R. Carter
   Novell
   1555 N. Technology Way
   M/S ORM F111
   Orem, UT 84097-2399
   Email: srcarter@novell.com

   D. Jensen
   Novell
   1555 N. Technology Way
   M/S ORM F111
   Orem, UT 84097-2399
   Email: dcjensen@novell.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/dav_spec.html
##-----------------TITLE------------------------##
draft-ietf-webdav-v1-spec-01
##------------------TEXT------------------------##
WEBDAV Working Group                               Y. Goland, Microsoft
INTERNET-DRAFT                                     E. J. Whitehead, Jr.
                                                            U.C. Irvine

<draft-ietf-webdav-v1-spec-00>                         November 8, 1996

Expires April, 1997

Author's draft: v0.2
Extensions for Distributed Authoring and Versioning on the World Wide Web 
Status of this Memo 
This document is an Internet-Draft. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups. Note that other groups may also distribute working documents as Internet-Drafts. 
Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or made obsolete by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress". 
To learn the current status of any Internet-Draft, please check the "1id-abstracts.txt" listing contained in the Internet-Drafts Shadow Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast). 
Distribution of this document is unlimited. Please send comments to the WWW Distributed Authoring and Versioning (WEBDAV) working group at <w3c-dist-auth@w3.org>, which may be joined by sending a message with subject "subscribe" to <w3c-dist-auth-request@w3.org>. Discussions of the WEBDAV working group are archived at <URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>. The HTTP working group at <http-wg@cuckoo.hpl.hp.com> also discusses the HTTP protocol. Discussions of the HTTP working group are archived at <URL:http://www.ics.uci.edu/pub/ietf/http/>. General discussions about HTTP and the applications which use HTTP should take place on the <www-talk@w3.org> mailing list. 
Abstract 
TBD 
Changes Since Author Draft V0.1 
Added Undelete. Changed Notification section. Added versioning and access control sections. Added annotation, attributeset, search, and modifiable attributes. I think attributeset is going to solve the problem with Larry. Rewrote and rearranged the attribute section. Changed the source attribute definition. Added attribute header, shared mode and principal to the terminology section. Moved the definitions of copy, move, and redirect to the terminology section. I also updated the terminology section to remove references to representation. Added relationship to the terms section and wrote the relationship section. Note that the Distributed Authoring commands assume that headers will be used for representation negotiation while the Versioning commands assume that only resources can be referred to and thus a particular representation must be addressable using only a URL. Also note that the versioning mime types contain both request and response formats and that response formats identify themselves. This is not strictly necessary with HTTP as one can tell if a message is a response from context. However for maximum flexibility the mime times provide an indication that it is a response so the mime times could be used with e-mail or other mime delivery systems. Changed attribute URL syntax to allow attributes to have their own attributes.

1. Introduction 
1.1 Purpose 
This specification defines extensions to the HTTP/1.1 [HTTP11] protocol, the URL [URL] specification, and defines subtypes of the Application content type [RFC1521]. Together, these provide a means for augmenting existing facilities for remote authoring with abilities for locking, versioning, relationships, attributes, and listing and manipulation of the URL name space. Capabilities detailed in this specification meet the requirements for Distributed Authoring and Versioning, stated in [ref DA Reqt's][ref Vers. Reqt's]. 
1.2 Terminology 
Unless otherwise noted below, the use of terminology in this document is consistent with the definitions of terms given in [HTTP11]. 
attribute header A header which returns information about the nature of a resource. attribute set An attribute set is a defined set of attribute headers. An attribute set is used to indicate which attribute headers a resource provides support for. This does not mean that the resource expresses all of the headers in the set. Attribute sets MUST NOT be used as a substitute for unique naming of attribute headers. check in A Check In is a declaration that the principal no longer intends to edit a resource(s). check out A Check Out is a declaration by a principal that they intend to edit a resource(s). command comments Command Comments associate either a string or a URI with an HTTP message. copy A copy performs a byte-for-byte duplication of a resource, making it available at both the original and new location in the URI namespace. destroy To destroy a resource is to request that the resource be permanently removed from storage. This differs from delete in that some versioning systems handle delete as a request to no longer make the specified resource editable. diff A diff is a mechanism whereby two or more resources are compared and the differences enumerated. history The history of a resource is a list of all the versions of the resource along with related information. merge A merge is the process whereby information from multiple resources is folded into a single resource. Merges can occur at the client or the server. move A move is logically a copy followed by a delete of the source resource. no-modify lock A no-modify lock prevents a locked resource from being edited until all no-modify locks are released. notify request A notify request instructs the recipient to send information regarding the progress of a request. principal The source of a message; for example: persons, computers, and programs. read lock A read lock prevents principals who do not posses a read lock on a resource from reading that resource. redirect Redirect is used to instruct a server to return one of the 3xx series codes. relationship A relationship, or link, is a typed bi-directional attribute header which provides a connection between two or more resources. representation "An entity included with a response that is subject to content negotiation... There may exist multiple representations associated with a particular response status." - [HTTP11] Each of these representations is potentially subject to individual modification. shared mode Shared mode modifies a lock request such that the lock may be shared between multiple requestors. write lock A write lock prevents anyone who does not possess a write lock on a resource from editing that resource. 
1.3 Notational Conventions and Generic Grammar 
This specification uses the Augmented BNF and Basic Rules as defined in Section 2 of [HTTP11]. 
1.4 Mime Format 
[This section doesn't really belong in the introduction.  Needs to be moved.] 
Mime types sent with POSTs are used to transmit the commands specified in this document. The request-URI, unless specified otherwise, points to a resource that is capable of executing the request. 
In addition all the Mime types start the BNF element MIMEVersion which is defined as: 
MIMEVersion = 1#DIGIT "." 1#DIGIT 
The semantics of MIMEVersion is the same as for HTTP-Version defined in section 3.1 of [HTTP11]. 
2. Attributes 
During distributed authoring it is often necessary to record meta data about a resource, such as a resource's creator, the date of its completion, and the organization responsible for its maintenance. Once created, these attributes can be used to precisely search resources, and create a repository for organizational memory about the resource. Attributes provide meta data capability by allowing named data elements to be created, modified, read, and deleted on a resource.  An attribute on a resource is a pair (name, value) consisting of the attribute's name and value. 
The existing HTTP specification uses header fields to transmit meta data.  This specification defines a new type of header field, known as attribute header fields, which provide information about a resource's nature, not its content or transmission state.  Attribute header fields consist of a header name and an associated value, and are used to provide attributes on resources. 
Rather then inventing a raft of new methods, the current methods will be bent to our purposes. Below, a convention for placing the name of an attribute within a URI is given.  This convention allows existing HTTP methods to be invoked on attributes. So, for example, when a GET is performed on an attribute header URI, the value of the attribute header is returned in the entity-body.  Similarly, a PUT may be used to set the value of an attribute on a resource. 
2.1 Attribute Header URIs 
A specification is provided below for describing an attribute header in the context of the URI of the header's associated resource. So, were an attribute header named "FileName" to exist and be associated with the resource http://foo/bar, it would be uniquely referred to as http://foo/bar<FileName>. Headers may also have a hierarchy so the URI http://foo/bar<Author.FirstAuthor> would refer to the header "FirstAuthor" which is a child of the header "Author." The "." is used to denote hierarchy because it is legal to use within a token. Note that the name space for headers is actually flat and the use of "." to denote hierarchy is optional. It is only meant to make it easier to group headers. The "<...>" enclosure was chosen because it will not cause a conflict with any currently existing URIs. 
To support requests for attributes the definition of a URI must be altered as follows: 
URI = ( absoluteURI | relativeURI ) *("<" Attribute ">") ["#" fragment]
Attribute = field-name ; See section 4.2 of [HTTP11] 
By convention an attribute request which ends in a "." and which does not resolve to a specific attribute name SHOULD be treated as a request for a list of all attributes in that hierarchy. 
In order to prevent name space collisions both headers and header prefixes should be registered with a central authority. A header prefix is any legal token that may only be used when it is prefixed to another token. Prefixes should use the "." hierarchy format. Thus Netscape could register the prefix NS and thus be the only organization allowed to create headers which begin with "NS.". 
2.2 Interaction with Existing Methods and Proposed Functionality 
This section describes the precise semantics of existing HTTP methods when applied to an attribute header of a resource. 
2.2.1 GET 
A GET of an attribute resource MUST return the value of the attribute in the entity body of the response. Type of reponse - TBD 
Since attribute headers may grow to very large sizes and may contain octet data, it is not feasible to include attribute headers in the response to a GET on a resource. Therefore attribute headers SHOULD not be transmitted as a response header. 
2.2.2 HEAD 
A HEAD method invocation on an attribute resource MUST behave as specified in Section 9.4 (HEAD) of [HTTP11].  Attribute headers SHOULD not be transmitted as a reponse header in the response to a HEAD request. 
2.2.3 POST 
A POST may not be performed on an attribute header resource. 
2.2.4 PUT 
A PUT on an attribute resource MUST set the value of the attribute to the contents of the entity body, following the semantics specified in Section 9.6 (PUT) of [HTTP11]. 
2.2.5 DELETE 
A DELETE causes the attribute resource to be made unavailable. 
2.2.6 OPTIONS and TRACE 
These methods are unmodified from HTTP/1.1. 
2.2.7 Copy and Move 
When a resource is copied, moved, or otherwise manipulated, its attributes are equally affected. However servers make the final determination regarding the state of any attribute header and may choose to not copy, move, etc. any subset of headers when it performs the requested action on a resource. 
2.3 Standard Attributes 
The following attributes have their name and semantics defined by this specification. 
[TBD - Currently only brief descriptions are included. Once we have decided which ones should survive we will provide MIME types and other information.] 
AttributeDirectory The attribute AttributeDirectory returns a list of all attribute headers on a resource. To retrieve a list of attribute headers associated with the URL http://foo/bar one would send a GET request with a request-URI of /bar<AttributeDirectory>, where Host would equal foo. The same logic applies to PUT, which would be used to set an attribute's value. AttributeSet This attribute returns a list of the attribute sets currently being used to describe the resource. Support of an attribute set does not indicate that all of its attributes are being used. For a list of all attributes in use, the AttributeDirectory attribute should be retrieved. For example, if some attributes from the Dublin Core were being used to describe a resource, AttributeSet might contain the value "Dublin", or "DC". The tag used to denote attributes defined in this specification is "RFCxxxx". CheckedOut This attribute header returns a SiteMap containing a list of principals who have checked out the resource. DirectoryName This attribute returns a name suitable for presentation in a directory. The attribute embeds content headers to indicate language, character set, etc. History See History, section 9.2. Link Contains information about resources that are related to this resource. A SiteMap representation SHOULD be available.
[TBD: Review the SiteMap format and figure out tag formats to define source links.] Link.Version This attribSee Version, Section 9.3. LockInformation See Lock Discovery, Section 3.2. Modifiable (this is a weak form of access control query) Indicates if the principal can modify the resource. NotifyRequest See Notify Request, Section 6. Relationships See Relationships, Section 5. Search The search attribute returns a URI that points to a resource which can handle searching. It is currently expected that the URI returned will be a HTTP URL which points to a search page. Source The URI of the resource as stored, without any processing by the server (e.g. without processing of server-side includes). Version See Version, Section 9.3. 
3. Lock/Unlock 
Locks come in three types: write, read, and no-modify. Logically a write lock and a read lock can co-exist on a single resource. This means that one set of principals can edit the resource and another set of principals are the only ones allowed to read it. This may seem "silly" but is actually used in Orange book [ORANGE] compliant environments. A write lock and a no-modify lock can not be used together for obvious reasons. A read lock and a no-modify lock can be used together. 
Locks are assigned to a subset of the representations available for a resource. If the lock only applies to a single representation then the lock may be further restricted to only a particular range of the representation. A content-range header is used for this purpose. The range may go off the "end" of the representation. Locks that exceed the end of a representation control the ability to append to the representation. 
Locks may be taken out either in exclusive or shared mode. In shared mode anyone with proper access may take out a lock. In exclusive mode only the principal(s) who originally took out the lock may edit the lock. However a new principal can be added to an exclusive lock if the holder of the lock token performs the addition. 
If an entire resource is write locked and a lock owner deletes the resource then the write lock remains. So long as the write lock remains the URI can not be edited. 
In order to provide for maximum flexibility and ease of administration, lock tokens will be used to track locks. When a lock is taken out a lock token will be returned. A single lock token can represent any number of locks. In future lock requests the same token may have new locks added or old locks removed from it. Lock tokens are not required to be transferable between lock administration resources. 
Locks also have time outs associated with them. If no time out value is associated with a lock then the lock will never time out. Otherwise the lock will expire if a number of seconds equal to the time out value passes without the resource being accessed by a lock owner. The time out value may be edited, without affecting the rest of the lock, by submitting a lock request with no Lock Entries. 
Finally, locks may be taken out for multiple principals in a single request. The Lock_Owners field allows for tokens to be used to identify multiple principals who are considered owners of the lock. A server SHOULD only allow a lock token to be used in a request if the requestor is an owner of that lock token. 
[TBD - We need an error message indicating that the server will not accept certain lock combinations or accept overlapping locks. We also need an error stating that an unlock couldn't be executed because it did not exactly match with a lock.] 
Locks will be implemented using POST. The request-URI will be the lock administration resource. The entity-body will be of type application/lock. 
3.1 Definition of Content Type application/lock 
LOCK_BODY = Token_Status Time_Out Lock_Owners Lock_Entries
Token_Status = (Token_Field | "No Token")
Token_Field = "Lock Token" ":" LockToken
Time_Out = "Time Out" ":" (*DIGIT | "Never")
Lock_Entries = "Lock Entries" ":" *(Lock_URI LockType (("Exclusive" | "Shared") | "Unlock") Headers CRLF)
Lock_Owners = "Lock Owner" ":" #Lock_Owner
Lock_Owner = token; This is some identifier used to list who owns the lock.
Lock_URI = "URI" ":" URI
LockToken = Any OCTET but LWS
LockType = ("Write" | "Read" | "No-Modify")
Headers = #message-header ; As defined in 4.2 of [1] 
Examples of type application/lock include: 
No Token
Time Out: Never
Lock Entries: URI http://www.microsoft.com/staff/yarong.html Write Exclusive
[Yaron Goland <yarong@microsoft.com>] 
This specifies a request for an exclusive write lock on http://www.microsoft.com/staff/yarong.html, held by Yarong Goland. This lock will never automatically time out. 
3.2 Processing a Lock Request 
A lock request without a LockToken is a new lock request. All the requests in a lock must be granted or a 503 Service Unavailable must be returned. If the lock is granted then the return body should be formated as: 
RETURN_LOCK_BODY = LockToken 
A lock request with a LockToken is a request to extend the lock represented by the lock token. The same rules as specified in the previous paragraph apply. 
A lock request with Unlock specified for Lock_Request means that all locks associated with this token should be removed. 
A lock entries with Unlock specified means this particular lock should be removed from the token. 
The BNF allows for Unlocks to be specified without specifying a lock token. This is not an error. This syntax allows authorized principals to override locks they do not have the token for. 
Lock requests MUST be processed as an atomic action or the request must be refused. 
When multiple resources are locked under a single token an operation will only be allowed on any of the resources if the remaining locks in the token can be guaranteed to exist for the life of the operation. 
3.3 Lock Discovery 
When a lock is taken out the system SHOULD record who owns the lock. Ownership information can be taken from the From header, from identification provided by authentication, or from the LockOwners field. 
This information SHOULD be available through the attribute header "LockInformation" which has the mime type application/LockInformation. The format of the mime entity-body is: 
LOCKINFORMATION = #(Token_Field Time_Out Lock_Owners Lock_Entries) [Contact_Field]
Contact_Field = "Contact" ":" token 
The Contact_Field is used to provide contact information in case there is a problem with a lock. 
An example of a LockInformation attribute is: 
LockInformation:
Token: a5dzq 
Time Out: Never 
[Yaron Goland <yarong@microsoft.com]
Lock Entries: URI http://www.microsoft.com/staff/yarong.html Write Exclusive
Contact: Lock Administrator <lockadmin@microsoft.com> 
The exclusive write lock on http://www.microsoft.com/staff/yarong.html is held by Yaron Goland, has token value a5dqz, and will never time out. If there is a problem with a lock, the Lock Administrator should be contacted. 
4. Name Space Manipulation 
4.1 Copy 
A copy performs a byte-for-byte duplication of a resource, making it available at both the original and new location in the URI namespace.  There is no guarantee that the result of a GET on the URL of the resource copy will be identical to a GET on the original resource. For example, copying a script to a new location will often remove it from its intended environment, and cause it to either not work, or produce erroneous output. A copy MUST be atomic. 
A copy is performed by sending a POST method to a resource which can perform the copy. The entity-body for the POST method is of content type application/copy, defined in Section 4.1.1. 
Before any copied resources are made available through the destination URIs, all copied resources must either be available or return a 503 Service Unavailable response code when referenced. 
If the No Overwrite value is specified then that entry in the copy should not occur if the destination URI already exists. If a resource is not copied because a "No Overwrite" flag was used and the resource exists then the request still succeeds. 
4.1.1 Definition of Content Type application/copy 
BODY = 1*(Source_URI Headers Destination_URI Headers Type)
Source_URI = URI
Destination_URI = URI
Type = "Overwrite" | "No Overwrite"
Headers = #message-header ; As defined in 4.2 of [HTTP11] 
Examples of content type application/copy include: 
http://www.ics.uci.edu/~ejw/hidden/draft.html
Accept-Language: fr, en;q=0.7
http://www.ics.uci.edu/~ejw/final_report.html
Overwrite 
This example specifies a copy of the French language version of http://www.ics.uci.edu/~ejw/hidden/draft.html if available, otherwise any English version, into http://www.ics.uci.edu/~ejw/final_report.html, overwriting the contents of final_report.html if they exist. 
http://www.ics.uci.edu/pub/ietf/http/index.html
Range: bytes=0-500
http://www.ics.uci.edu/~ejw/working.html
Range: bytes=0-500
Overwrite 
This example specifies a copy of the first 500 bytes of /pub/ietf/index.html into /~ejw/working.html, overwriting the first 500 bytes of working.html if they exist. 
4.2 Destroy, Delete, and Undelete 
To destroy a resource is to request that the resource and its attribute headers be permanently removed from storage. To delete a resource is to request that the resource no longer be made available for editing. Destory differs from delete in that a versioning system may allow a deleted resource to be visible, but not editable, while a destroy causes the resource, and all knowledge about the resource to be removed from the server.  A destroy is performed by sending a POST message with an entity-body of type application/delete, defined in Section 4.2.1. 
An undelete undoes the action of a delete, making a deleted resource available for editing.  An undelete is performed by sending a POST message with  entity-body of content type application/delete, with a listing of the resources to be undeleted. 
4.2.1 Definition of Content Type application/delete 
Application/Delete = Request | Response
Request = "Request" 1#(URI ("Delete" | "Destroy" | "Undelete"))
Response = "Response" 1#(URI ("Delete" | "Destroy" | "Undelete") ("Success" | "Failure") (comment | Status-Line) 
Note that this definition allows for the specification of a mix of delete and destroy operations. A "Delete" entry should be treated the same as if a Delete method were sent to the specified URI (as defined in Section 9.7 of [HTTP11]). 
An example of content type application/delete is: 
Request 
http://www.ics.uci.edu/~ejw/hidden/draft.html Delete
http://www.ics.uci.edu/~ejw/hidden/draft.png Destroy 
This specifies a request to make the resource http://www.ics.uci.edu/~ejw/hidden/draft.html unavailable, but not necessarily deleted from the server, and to completely destroy resource http://www.ics.uci.edu/~ejw/hidden/draft.png, erasing it from the underlying storage mechanism.  A possible reponse to this request would be the following reponse entity-body: 
Response
http://www.ics.uci.edu/~ejw/hidden/draft.html Delete Success
http://www.ics.uci.edu/~ejw/hidden/draft.png Destroy Failure 403 Forbidden 
4.3 Move 
A move is logically a copy followed by a delete of the source resource.  A move MUST be atomic. A move is performed by sending a POST method to a resource which can perform the move. The entity-body of the POST method is of content type application/move, defined exactly the same as content type application/copy, (Section 4.1.1). 
In this case atomicity requires that before the resources are made available at the new location they must no longer be available at the old location. The rest of the atomicity requirements are the same as for copy. 
4.4 Redirect 
Redirect is used to instruct a server to redirect all further requests on a resource, or set of resources. A redirection can be used to instruct the server to return one of the following response codes: 301 Moved Permanently, 302 Moved Temporarily, 303 See Other, or 305 Use Proxy. A Redirect request specifies both the reponse code and the URL to which it applies. 
To perform a redirect a POST should be performed with the content-type equal to application/redirect, defined in section 4.4.1. 
4.4.1 Definition of Content Type application/redirect 
The body of the mime type is defined as TBD. [The mime type will contain the URL being redirected, the code to be used, and the semantics of the entity-body to be returned.] 
5. Relationships 
[NOTE: The authors are currently in the middle of a very long and detailed conversation about this section. This section reflects Jim's views on how relationships should be specified. My views are radically different. I want to see relationships specified as attributes in the attribute name space using the normal attribute control mechanisms. I believe documents will have many relationships and it will not be feasible to drag these around in the header. This was the same reasoning that lead to the creation of attributes and why I want relationships to be attributes.]
A relationship specifies how two or more resources are related. Examples of relationships include "author-of," "table of contents," and "specifies." A relationship can exist within a resource, and between  mutliple resources.  These resources may be of any media type, and a relationship can exist between resources of differing media type. When considering relationships which exist between resources, due to the distribution of resources across the Web, it is often the case that the relationship spans multiple servers.  As a result, instead of being stored once, between resources, the endpoints of a relationship must be stored on individual resources.  For the purposes of this specification, a relationship is defined to be a set of relationship endpoints. To create a multiway (or n-ary) relationship, a client must individually create each endpoint of the relationship, specifying at each endpoint which other relationship endpoints (usually on other resources) are part of the relationship. 
A hypertext link is a relationship which a client has made available to the user interface so a user can jump to the other endpoints of the relationship using the hypertext point-click-and-traverse user interface style.  A link is always a relationship, but a relationship is not always a hypertext link. 
To request the creation of a relationship endpoint, a POST message with entity body of content-type application/relationship should be issued to the administration resource for relationships. 
5.1 Definition of Content Type application/relationship 
REL/BODY = Relationship-request | Relationship-response
Relationship-request = 1*( Rel-action Rel-token Rel-spec )
Relationship-response = 1*( Rel-action Rel-token Rel-spec Rel-response ) 
Rel-spec = Rel-URI Link  ; Link is defined in Section 19.6.2.4 of [HTTP11]
Rel-URI = "URI" ":" URI
Rel-action = "Add" | "Remove" | "Modify"
Rel-token = *1("RToken" ":" rtoken)   ; Specifying token for an Add request is optional
Rel-status = Status-Code SP Reason-Phrase   ; As defined in [HTTP11]
rtoken = token 
The ability to specify relationship endpoints on resources of any content type is mostly provided by the Link entity header field defined in 19.6.2.4 of [HTTP11]. The Link entity header field is used in this specification, with minor additions which add the ability to specify that another endpoint belongs to this relationship.  This cabability is provided by an additional link-param field, called peer. The contents of a peer field are a sequence of (URI, relationship token) tuples, which list the opposite endpoints of the relationship. The relationship token MUST uniquely identify a relationship endpoint on a particular resource, but does not have to be globally unique across all resources. 
( "peer" "=" 1# "(" <"> URI <"> "," rtoken ")" )

An example of content type application/relationship is: 
Add
URI: http://www.ics.uci.edu/authoring/meeting/intro.html
RToken: 1
Link: <http://www.ics.uci.edu/authoring/meeting/agenda.html>; rel="Child"; peer=("http://www.ics.uci.edu/authoring/meeting/agenda.html, 2) 
Add 
URI: http://www.ics.uci.edu/authoring/meeting/agenda.html
RToken: 2
Link: <http://www.ics.uci.edu/authoring/meeting/intro.html>; rel="Parent"; peer=("http://www.ics.uci.edu/authoring/meeting/intro.html", 1) 
This defines a binary parent-child relationship between intro.html and agenda.html. From this example, it may seem that having the URI in the peer field is redundant. For binary relationships, this is indeed the case. However, the URI is required for multiway relationships, where more than one peer link needs to be specified in a peer parameter. 
6. Notification 
6.1 Notify Request Header 
The Notify Request request-header is used to request that the server send a stream of "102 Process" messages containing updates of the request's status. 
Notify_Request = "NotifyRequest" ":" 
6.2 Resource Event Notification 
As features such as WebCheck and URLMinder demonstrate, there is a strong interest in receiving notification when a resource changes. What is lacking is a standard means to register interest in receiving notification regarding a resource. 
6.2.1 Definition of Content Type application/ResourceNotification 
The following specification proposes the mime type application/RequestNotification which is used to set the attribute RequestNotification. This solves the problem by providing a standardized method to register interest and to specify how one wishes to receive information. 
Application/ResourceNotification = 1#(On_Resource Notification_Means On_Event)
On_Resource = URI
Notification_Means = URI
On_Event = #token 
On_Resource specifies the resource for which notification is being requested. Notification_Means species a URI which will indicate how to notify the requester. On_Event specifies what event must occur in order for the notification to be sent. If no On_Event is specified then the server chooses when to notify the requester. 
Possible On_Event values include "Deleted", "Accessed", "Faxed", "Printed", "Mailed", "AttributesModified", and "LockLost" ":" LockToken. 
6.2.2 Definition of Content Type application/NotificationData 
The actual notification is protocol dependent. However, the content type application/NotificationData is defined as follows: 
Application/NotificationData = 1#(On_Resource On_Event) 
7. URI Container 
Any resource which has a representation of content type application/container, is defined to be a URI container. Content type application/container will use the SiteMap format. 
The advantage of SiteMaps in this context is that they are designed to point to other SiteMaps. In this way a hierarchy can be built and when an operation is performed it will act recursively down the tree. 
[TBD - Do we really want to teach every DAV system to do HTML? Perhaps we want to introduce another access mechanism?] 
8. Versioning Mime Types 
8.1 Check In/Out 
A Check In is a declaration that the principal no longer intends to edit a resource(s).  A Check Out is a declaration by a principal that they intend to edit a resource(s).  An RCS-style locking check out is performed by issuing a request for a write lock, immediately followed by a request which requests a check-out (as specified below).  A CVS-style non-locking checkout is performed by only issuing a request for a check-out. 
8.1.1 Definition of Content Type application/checkinout 
Application/CheckInOut = CheckInOutRequest | CheckInOutResponse 
CheckInOutRequest = ["Atomic"] "Request" 1#Requests 
Requests = URI ("CheckIn" | "CheckOut" ("Exclusive" | "Shared")) 
CheckInOutResponse = "Response" 1#Responses
Responses = URI ("CheckIn" | "CheckOut" ("Exclusive" | "Shared"))Status 
Status = ("Success" | "Failure") comment 
If a request contains "Atomic" then all the elements in the request must be granted or rejected. 
The "Exclusive" and "Shared" keywords indicate if a check out is exclusive or shared on the specified resource. 
[TBD - We can always get rid of the versioning header by overloading Check In and making it a versioning PUT. Though we still need a "UnCheckOut" which is a CheckIn with no body.] 
8.2 Diff/Merge 
The purpose of the Diff or Merge is to take all the specified URIs and entities and return a single Diff or a single Merge of the results. Many servers will not be able to handle more than two resources and will return an error if more are specified. 
8.2.1 Definition of Content Type application/DiffMerge 
Application/Diff = Body
Application/Merge = Body
Body = 1#("URI" ":" URI | "Entity" ":" entity-body) 
9. Versioning Headers 
9.1 Command Comments 
Command comments are entity headers. 
Command_Comment = "Comment" ":" CommentVal
CommentVal = URI | comment 
This is the standard comment facility used by versioning systems. Servers that do not understand the header or do not wish to make use of the information are free to ignore the information. No specification is made regarding how this information is to be retrieved. It is likely, however, that most systems will make the command comments available through their history attribute. 
9.2 History 
History is an attribute header that returns a SiteMap containing the history of the document. 
9.3 Version 
The version entity header is used with PUT to create a new version or to begin versioning an entity. 
Version = "version" ":" token 
When included with a PUT on a new resource it indicates that the resource should be versioned and what version token should be used. The server is not required to accept the version token. The actual version token used along with the URI the resource will be accessible from must be returned in the response body. 
When included with a PUT on the URI of a currently existing versioned resource the version entity header indicates that the entity is a new version of that resource. The server will indicate what the URI of the new version of the resource is along with its version token in the response. 
If the version entity header is included with other methods then the header should be interpreted as a request for a particular version of the resource. However this interpretation is non-standard as one version is semantically different than another and the header thus may be dropped. 
In addition to the version entity header there also exists a version link attribute header. TBD. 
Acknowledgements 
Roy Fielding, Richard Taylor, Larry Masinter, Henry Sanders, Judith Slein, Dan Connolly, David Durand, Henrik Nielsen. Others, TBD. 
References 
[HTTP11] R. T. Fielding, J. Gettys, J. C. Mogul, H. F. Nielsen, and T. Berners-Lee. "Hypertext Transfer Protocol -- HTTP/1.1" Internet-Draft draft-ietf-http-v11-spec-07.txt, expires February 12, 1997. 
[ORANGE] DoD 5200.28-STD, "Department of Defense Trusted Computer System Evaluation Criteria", December, 1985. 
[RFC1521] N. Borenstein, N. Freed. "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies." RFC 1521, Bellcore, Innsoft, September, 1993. 
[URL] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource Locators (URL)." RFC 1738, CERN, Xerox PARC, University of Minnesota, December, 1994.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/webdav-draft-06.html
##-----------------TITLE------------------------##
Extensions for Distributed Authoring and Versioning
##------------------TEXT------------------------##
WEBDAV Working Group                                                      Y. Goland, Microsoft
INTERNET-DRAFT                                               E. J. Whitehead, Jr., U.C. Irvine
                                                                          Asad Faizi, Netscape
                                                                     Stephen R. Carter, Novell
                                                                            Del Jensen, Novell

<webdav-draft-06.html>                                                January 23, 1997

Expires June, 1997

Author's draft: v0.6


Extensions for Distributed Authoring and Versioning on
the World Wide Web 

Status of this Memo 

This document is an Internet-Draft. Internet-Drafts are working documents
of the Internet Engineering Task Force (IETF), its areas, and its working
groups. Note that other groups may also distribute working documents as
Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or made obsolete by other documents at any
time. It is inappropriate to use Internet-Drafts as reference material
or to cite them other than as "work in progress". 

To learn the current status of any Internet-Draft, please check the
"1id-abstracts.txt" listing contained in the Internet-Drafts
Shadow Directories on ftp.is.co.za (Africa), nic.nordu.net
(Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US
East Coast), or ftp.isi.edu (US West Coast). 

Distribution of this document is unlimited. Please send comments to
the WWW Distributed Authoring and Versioning (WEBDAV) working group at
<w3c-dist-auth@w3.org>, which may be joined by sending a message
with subject "subscribe" to <w3c-dist-auth-request@w3.org>.
Discussions of the WEBDAV working group are archived at <URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.
The HTTP working group at <http-wg@cuckoo.hpl.hp.com> also
discusses the HTTP protocol. Discussions of the HTTP working group are
archived at <URL:http://www.ics.uci.edu/pub/ietf/http/>. General
discussions about HTTP and the applications which use HTTP should take
place on the <www-talk@w3.org> mailing list. 

Abstract 

[Ed. Note: TBD]

1. Introduction 

1.1 Purpose 

The purpose of this document is to extend the HTTP 1.1 [HTTP11] protocol
to support features which satisfy the Distributed Authoring and Versioning
requirements set down in [INSERT REFERENCE TO UNIFIED DAV REQUIREMENTS
DRAFT].

1.2 Terminology

The following entries define how a term is used within this document.

Unless otherwise noted, the use of terminology in this document is consistent
with the definitions of terms given in [HTTP11]. 

Editor: Sections references need to be entered.

arbiterA resource which performs actions on the behalf of other resources.attributeAn attribute is a name/value pair which contains meta-information regarding
a resource. See section x.x.attribute set An attribute set is a collection of attributes. See section x.x.set edit announcementA set edit announcement is a declaration by a principal that they intend
to edit a resource. No action other than the declaration is implied by
a set edit announcement. See section x.x.remove edit announcementA remove edit announcement is a declaration by a principal that they
no longer intend to edit a resource. See section x.x.check-out rootOne or more versioned resources within a particular version tree which
are operated on by a CHECKOUT method. command comments Command Comments associate either a string or a URI with an HTTP message.
See section x.x.copy A copy performs a duplication of a resource, making it available at
both the original and new location in the URI namespace. Due to contextual
differences, it may not be possible to create an exact copy of a resource.
A copy only requires best effort on the part of the copy agent. See section
x.x.collectionA group of URIs which are manipulated as a unit. See section x.x.destroy To destroy a resource is to request that the resource be permanently
removed from storage. This differs from delete in that some versioning
systems handle delete as a request to no longer make the specified resource
available under the specified URI. See section x.x.diff A diff is a mechanism whereby two or more resources are compared and
the differences enumerated. See section x.x.history A history lists the URIs of the versions of a resource along with related
information. See section x.x.merge A merge is the process whereby information from multiple resources
is folded into a single resource. Merges can occur at the client or the
server. See section x.x.move A move is logically an atomic action consisting of a copy followed
by a delete of the source resource. Please see the definition of copy in
this section. See section x.x.no-modify lock A no-modify lock prevents a locked resource from being edited until
all no-modify locks on the resource are released. See section x.x.notify request A notify request instructs the recipient to send information regarding
the progress of a request. See section x.x.principal A principal is the source of a message. For example: persons, computers,
and programs. read lock A read lock prevents principals who do not posses a read lock on a
resource from reading that resource. See section x.x.redirectA redirect instructs a server to return one of the 3xx series codes.
See section x.x.relationship A relationship is a unidirectional typed link. See section x.x.shared mode Shared mode modifies a lock request such that the lock may be shared
between multiple principals. See section x.x.version identifierThe identifier used to name a version of a resource. working resourceThe writeable resource created by some versioning engines as the result
of a CHECKOUT method invocation.write lock A write lock prevents principals who do not possess a write lock on
a resource from editing that resource. See section x.x.

1.3 Notational Conventions and Generic Grammar 

This specification uses the Augmented BNF and Basic Rules as defined
in Section 2 of [HTTP11]. 

1.4 Design Conventions

The following design conventions have been adopted by the HTTP Distributed
Authoring and Versioning (DAV) group.

Whenever reasonable new functionality will be expressed as new methods.
When sensible the commands for such a method will be included in the message
body of the request.This resolution was adopted in order to solve a debate about how to
express new functions such as copy and diff. One group wished to use POST
and MIME types to express new commands. Another group wished to use new
methods and MIME types to express new commands. A third group wished to
use new methods and new method headers to express new commands. The group
settled on using new methods and MIME types to express new commands. The
new methods would allow for quick parsing by proxies and servers but the
MIME types would allow for flexibility in specifying the command. It was
also felt that introducing method specific headers would violate the letter
and spirit of the HTTP protocol.Methods should only perform a single action.The original design of many of the methods in this document allowed
for multiple requests of the same type to be packaged together. So, for
example, one could send a Copy method which specified that 1000 different
URIs should be copied. It was decided that in the face of pipelining, compressed
headers, and other innovations there was no need to add this level of complexity
to the protocol. This decision was based upon the assumption that a new
method or MIME type would be introduced which would allow for any number
of HTTP requests to be bundled together. It was further assumed that such
a method or MIME type would carry with it the option to specify that the
contents be processed atomically.URLs are opaque tokens and should be treated as such.It is often possible to decrease the number of trips to retrieve a
particular piece of data by putting suffixes on URLs. However URLs are
intended to be opaque tokens. The above design principal not prevent the
use of suffixes but rather requires that the server indicates that a particular
URL understands a particular type of suffix.Only addressable entities will be subject to the commands in this document.Response must be machine processable. Currently HTTP responses rely
upon humans being available to view the response and take appropriate action.
This level of error encoding is not sufficient for WEBDAV purposes where
all actions and results of all actions must be fully machine processable.
However, a corollary of this design principal is that response messages
are not required to provide information about incorrect syntax, only to
point out that incorrect syntax has been submitted. It is legitimate to
assume that the client and server are both capable of generating proper
syntax. However, this corollary in no way effects the general principal
of being generous in the sorts of messages accepted.

It is sometimes desirable to have a non-addressable entity. For example,
an accept header may specify a content-language. The response may contain
a representation in that language but may not contain a content-location
header. In that case the representation of that resource in that language
will not alterable with the commands given in this document.


 

2. Schema Methods

[Ed. Note: Misplaced this section - should follow links. Will correct
later.]

2.1 Introduction

DAV methods provide diverse abilities, and no current system supports
all of them. As such the client requires a mechanism to determine what
features of a method a server supports. DAV provides such a mechanism controlling
how methods are defined and then providing for a feature discovery mechanism.
DAV also provides for a version number to allow servers to alter method
semantics without breaking older clients.

2.2 Method Formatting

Part of the feature discovery mechanism is a regulated format for method
request bodies. This format allows for individual method functions to be
identified and for the server to be able to describe its support for those
functions. Methods that support this format are referred to as Schema Methods.
All Schema Methods MUST use this format. [Author's Note: We will have to
change the name.]

A Schema Method takes the following form:

Request-Body = Schema-Version CRLF *(Schema-Entry CRLF)
Schema-Version = 1*Digit.1*Digit
Schema-Entry = AttributeName ":" (Enumerated_List | Comma_List
| Open_Value)
AttributeName = Token
Enumerated_List = #Token
Comma_List = #Token
Open_Value = Text-No-CRLF
Text-No-CRLF = ; Text which doesn't contain a CRLF

The method's request body always begins with a Schema-Version that is
followed by a series of Schema-Entries. These entries always consist of
a name followed by a colon followed by either a predefined list of values,
a comma separated list of tokens, or an open value which can contain any
legal text but a CRLF.

The Schema-Version major number describes a set of schema entries and
their defined values for a particular method. The major number MUST increase
if the semantics of a previously defined schema entry is altered or if
the Schema Method format is changed.

The Schema-Version minor number is used for feature negotiation purposes.
As defined below feature negotiation allows the server to list each schema-entry
and indicate if the entry is required, optional, or unsupported. A server
MAY add new schema-entries to a method without changing the minor schema-version
number so long as those entries are optional. If a new required schema-entry
is introduced then the minor number MUST be increased.

2.3 Schema Entry Negotiation & Response Format

With the Schema Method format it becomes possible for a server to provide
information to a client regarding the schema-entries it supports and the
manner in which it supports them. This mechanism is completely mechanistic
so any Schema Method can be negotiated upon. This section describes the
response format used by a server to declare the nature of its support for
a Schema Method.

The format is to list each schema entry, mark it as required, optional,
or unsupported, and then indicate what values it may take on. Schema entries
with predefined lists of values the server lists which of those values
is supported. For schema entries with a comma delaminated list of tokens,
the server indicates how many tokens it will accept. No additional information
is provided for schema entries that use the Text-No-CRLF production.

A client MAY include schema entries whose values are enumerated lists
for which there is only a single legal value. A client MUST NOT include
schema entries that have been marked as unsupported. A client MAY include
a schema entry that is marked as optional. A client MUST include schema
entries that are marked as required. A client MUST only use values that
the server has indicated it will accept. If definition of a Schema Method
does not state that a schema entry is required then the server MAY make
that entry required, optional, or unsupported. The Schema-Version production
MUST be included in all request bodies of all Schema Methods. The definition
of a Schema Method MAY put restrictions on the interaction of schema entries,
such as declaring that if one schema-entry is required then so must another.

The format for providing Schema Method negotiation information is a
web collection that is contained in a response of type Text/HTML.

WC Attributes:

Type = "DAV/VersionSupport"
Name = MethodName
Schema-Version = SupportedVersions
SupportedVersions = #(VersionRange | MajorNumber | Individual)
VersionRange = Schema-Version "to" Schema-Version
MajorNumber = 1*Digit "." "*"
Individual = Schema-Version

WCDATA Entry:

Entry = AttributeName (Required_Optional | "Unsupported")
CRLF
AttributeName = Token
Required_Optional = ("Required" | "Optional") [(EnumList
| NumLegalEntries)]
EnumList = "Enumerated_List" ":" "["#Token"]"
| "AsDefined"
NumLegalEntries = "Number_Entries" ":" 1*Digit | "Infinite"
| "AsDefined" 

The "AsDefined" value is used when the definition of possible
values is too complex to be expressed in this simple negotiation format.

The VersionRange production allows the server to declare support for
all versions within a specified range. The MajorNumber production allows
the server to declare support for all versions within a major version.
The Individual version production allows the server to declare support
for an individual version.

Multiple web collections may be specified as necessary if support differs
based on schema-version.

2.4 Schema Method Support Discovery

Two mechanisms are provided for discovering server support for a Schema
Method. One is by checking for a link and the other is by using a discovery
method. A server MUST support at least one of these two mechanisms.

2.4.1 SchemaMethod Link

The type of the schema method link is defined as follows:

SchemaMethodLink = "DAV.SchemaMethod." MethodName
MethodName = Token

This destination of this link is the support provided by the source
for the method specified. The result will be a text/html response body
containing a series of web collections describing the systems support for
that Schema Method.

[NOT YET DEFINED - A Web Collection to indicate that there is variation
of function based on namespace.]

2.4.2 SCHEMASUPPORT

2.4.2.1 Method Definition

2.4.2.2 Request Body

2.4.2.3 Response Body

2.4.2.4 Error Conditions

[2.4.2 NOT YET DEFINED - It will provide for the submission of a schema
method name and information about schema versions supported by the client.
The server will then return a web collection specifying the sort of support
provided for the schema method and schema versions indicated.]

3. Links

3.1 Introduction

In [HTTP11] link and unlink methods were introduced. The idea was to
allow for two or more arbitrary resources to be associated with each other.
In essence, its purpose was to extend the linking facilities available
on the Web to all content types, not just HTML.

This document proposes a link facility consisting of links which are
typed and unidirectional, containing an explicit source and destination.

3.2 Link Types

Links are typed. These types explain the purpose and behavior of a link.
It is possible that multiple links defined on the same resource may have
the same type, e.g., a resource with multiple authors.

A link type usually belongs to a link schema, such as the "LockInfo"
type which belongs to the "DAV" schema. By convention, links
which belong to a schema are specified as: schema "." typename.
Thus, the LockInfo type would be specified as "DAV.LockInfo".
This creates a type namespace which is less susceptable to namespace collision
than a single, flat namespace. However, use of the "." to denote
hierarchy is only a convention, since types are properly considered to
be opaque tokens.

3.3 LINK

3.3.1 Method Definition

The LINK method requests that a single typed unidirectional hypertext
link be created on the Request-URI. This link consists of three fields,
a source URI, a destination URI, and a type, which is an opaque token.
The source URI is the beginning of the link, the destination URI is the
endpoint of the link, and the type describes the relationship between the
source and destination resources. A link may be interpreted as a binary
relationship between the source and destination resources, which has the
meaning, "the destination resource contains information of relation
<type> to the source resource." A link may also be interpreted
as an attribute-value pair, where the attribute name is the link type,
and the value is pointed to by the destination of the link.

The specification of the requested link is made in the message body
of the LINK request, which SHOULD be of content type "application/link".
The source URI of the link will typically correspond to the Request-URI
of the LINK request, but MUST not be required to do so. Either the source
URI or the destination URI of the link MUST correspond to the Request-URI
of the LINK request. This ensures that the Request-URI is part of the link
being defined.

If the source URI is ommitted in the link specification, the source
URI defaults to the Request-URI. If the destination URI is ommitted in
the link specification, the destination URI defaults to the Request-URI.


Some servers may automatically allocate part of their namespace for
link information of a specific type. For example, the creation date of
a resource at URL <http://www.ics.uci.edu/resource.html> might be
accessed from <http://www.ics.uci.edu/resource.html?create_date>.
In this case, a user-agent would not want to specify the destination of
a link of type "create_date," and instead would want the server
to automatically fill-in the correct destination URI. If the server should
specify the source or destination URI of a link, then the key word "SET"
is entered for the source or destination URI in the link specification.

3.3.2 Request Body

The request body of a LINK method request is of content type application/link,
defined as:

Link = Version CRLF [ Source CRLF ] [ Destination CRLF ] Type CRLF 
Schema-Version = "Schema-Version" ":" 1*Digit "." 1*Digit 
Source = "Source" ":" ( URI | "SET" ) 
Destination = "Destination" ":" ( URI | "SET" ) 
Type = "Type" ":" token

The Schema-Version field specifies the version of the specification
of the application/link media type. By definition, the version of the application/link
media type specified in this document is "1.0".

Example

Source: http://www.ics.uci.edu/~ejw/reports/Q1.html 
Destination: http://www.ics.uci.edu/~ejw/reports/Q1_author.html 
Type: Author

This link states that the destination URI contains information about
the author of the source URI. It may also be interpreted as the value of
the author attribute of the source URI can be found in the resource pointed
to by the destination URI.

3.3.3 Response Body

The request body of a LINK method request is of content type application/linkresult,
defined as:

LinkResult = Version CRLF LinkSource CRLF LinkDestination CRLF Type CRLF 
LinkSource = "Source" ":" URI 
LinkDestination = "Destination" ":" URI 
Type = "Type" ":" token


3.3.4 Error Conditions

a) there is a syntax error in the application/link message body (e.g.,
missing field values, missing type value) 

b) the source URI and the destination URI fields are both missing 

c) Both the source URI and the destination URI are specified, and neither
match the Request-URI.

d) Unsupported Type - The server does not allow links of the specified
type to be created. 

e) The server does not have room to store the requested link. 

f) The server is unable to fulfill a request to automatically set an
endpoint of the link.

3.5 UNLINK

3.5.1 Method Definition

The UNLINK method requests the removal of any link defined on the Request-URI
which exactly matches the link specification in the request message body,
which must be of content type application/unlink.

If there are any links which exactly match the link specification, a
description of the removed links is returned in a response body of type
application/unlinkresult.

3.5.2 Request Body

The request body of an UNLINK method request is of content type application/unlink,
defined as:

UnLink = Version CRLF Source CRLF Destination CRLF Type CRLF

Schema-Version = "Schema-Version" ":" 1*Digit "." 1*Digit 
LinkSource = "Source" ":" URI 
LinkDestination = "Destination" ":" URI 
Type = "Type" ":" token

The Schema-Version field specifies the version of the specification
of the application/unlink media type. By definition, the Schema-Version
of the application/unlink media type specified in this document is "1.0".

3.5.3 Response Body

The response body of an UNLINK method is of content type application/unlinkresult,
defined as:

UnLinkResult = Version CRLF 1*(LinkSource CRLF LinkDestination CRLF Type CRLF)

Schema-Version = "Schema-Version" ":" 1*Digit "." 1*Digit 
LinkSource = "Source" ":" URI 
LinkDestination = "Destination" ":" URI 
Type = "Type" ":" token


3.5.4 Error Conditions

a) there is a syntax error in the application/unlink message body (e.g.,
missing fields, missing field values, missing type value) 

b) Both the source URI and the destination URI are specified, and neither
match the Request-URI.

c) No links match the specification in the request message body. 

3.6 LINKSEARCH

3.6.1 Method Definition 

The LINKSEARCH method is used to search on the link tuple space. The
search occurs in the URI namespace. Search points and scope define the
area of name space to be searched. The search points are URIs from which
the search should start. The scope defines the number of levels into the
URI namespace the search should go down. The search syntax is in prefix
notation in order to ease processing by the server.

3.6.2 Request Body 

The Request-URI is the search arbiter, and it is the job of that resource
to process the request and return the results. 

The media type is application/linksearch.

This syntax is adapted from [RFC1959] and [RFC1960]. 

LinkSearchMethod = Schema-Version CRLF [SearchPoints] CRLF SearchPattern CRLF Scope CRLF
SearchPoints = "SearchPoints" ":" 1#URI 
SearchPattern = "SearchPattern" ":" 1*SearchOperations
SearchOperations = And | Or | Not | Item
And = "&" 2*SearchOperations
Or = "|" 2*SearchOperations
Not = "!" SearchOperations 
Item = Operator CompareTo MatchPattern
Operator = "=" | "!="
CompareTo = "Source" | "Destination" | "Type"
MatchPattern = 1*(token | " *") CRLF 
Scope = "Scope" ":" 1*Digit | "Sub" 

The SearchPoints are URIs on which the search is to be performed. If
at least one URI is not listed in SearchPoints then the search point becomes
the request-URI. 

The operator is equals "=" or not equals "!=". Source
and Destination equality are dependent upon the type of URIs. Please refer
to the definition of the referenced URI type to determine equality rules.
The server MUST NOT compare URIs with which it is not familiar. Two types
are equal if their tokens are octet for octet equal. 

The MatchPattern allows for wildcard matching. Inserting spaces prevents
the wildcard character to not be confused with characters in the token.
A wildcard character matches zero or more characters. 

The scope operator specifies how deep into the URI namespace the search
should go. A scope of 0 means the search is only on the search point(s).
A scope higher than zero means the search should proceed scope levels down
the URI namespace. A scope of "sub" means the search should go
all the way down to the leaves of the namespace. 

Redirects may only be followed if the new location is within the defined
search space. 

3.6.3 Response Body

The response body will be of type text/html and contain a web collection
with type "DAV/LinkSearchResponse". That web collection will
itself contain a series of web collections that have the following definition:

WC Attributes

Type = "DAV/LinkResponse"

WCDATA Entry

Entry = [OnSource] [OnDestination] Type
OnSource = ["ON"] "Source" ":" URI CRLF
OnDestination = ["ON"] "Destination" ":"
URI CRLF
Type = "Type" ":" token CRLF

Each DAV/LinkResponse indicates the source, destination, and type of
a link result. The "ON" tag indicates if the source and/or destination
is aware of the link's existence.

3.6.4 Error Conditions

Editor: these error conditions will be merged with the response codes
in the following section in a future rev. of the document.

URI Doesn't Exist (From Here on Down) (Incomplete) - 

URI Access is Forbidden (From Here on Down) (Incomplete) - 403 Forbidden


URI Access is Not Allowed (From Here on Down) (Incomplete) - 401 Unauthorized


URI Not Found (From Here on Down) (Incomplete) - 404 Not Found 

Arbiter does not Support Search on this URI (From Here on Down) (Incomplete)
- 406 Not Acceptable 

URI does not Support Search (From Here on Down) (Incomplete) - 405 Method
Not Allowed 

URI has been redirected out of search space (Temporarily | Permanently)(From
Here on Down)(Incomplete) - 301 Moved Permanently, 302 Moved Temporarily


Unknown URI Type in Comparison (Include URI) 

3.6.5 Response Codes 

202 Accepted - The request has been accepted and an appropriate response
generated. 

203 Non-Authoritative Information - The request has been accepted but
the response may be based on outdated or non-authoritative link information.


413 Request Entity Too Large - The results of the request are larger
than the server is willing to return. The request should be made again
using an appropriate range header. No body is returned.

 

3.7 GETLINKS 

3.7.1 Method Definition 

GETLINKS is a convenience method that takes a type and returns a webmap
containing link tuples whose source or destination equals the Request-URI
and whose type matches the submitted typed. 

3.7.2 Request Body 

The media type of the request body is application/GETLINKS.

GetLinksMethod = Schema-Version CRLF TaggedType CRLF
TaggedType = "Type" ":" #type | "All"


3.7.3 Response Body 

A text/html media type containing a web collection of type DAV/GetLinksResponse
that contains DAV/LinkResponse entries.

3.7.4 Response Codes 

See the return codes for the LinkSearch method. 

 

3.8 GETLINKVAL

3.8.1 Method Definition 

GetLinkVal is a convenience method that takes a type and returns a message/multipart.
The first entry in the message/multipart is a Web Collection with link
tuples whose source or destination equal the Request-URI and whose type
matches the submitted type. The rest of the entries in the message/multipart
are the result of a GET submitted on the source or destination of the link
that does not equal the Request-URI. 

3.8.2 Request Body 

The request body for method GETLINKVAL is of content type application/getlinkval,
defined below:

GetLinkValMethod = Schema-Version CRLF TaggedType CRLF 


3.8.3 Response Body

The response body is multipart/related. The first entry is of type text/html
containing a DAV/GetLinkValResponse Web Collection containing DAV/LinkResponse
web collections. Following the text/html is a series of responses containing
GET results.

3.8.4 Response Codes 

See return codes for the LinkSearch method. 

3.9 SETLINKVAL

3.9.1 Method Definition

SETLINKVAL is a convenience method that combines LINK and PUT. It is
used to create a link and to specify the contents of one end of the link.

3.9.2 Request Body

The request body consists of a MIME multipart. The first entry is the
request body contained below which is of type Application/SETLINKVAL. The
second entry is the headers and body of the information to be PUT.

SETLINKVAL = Schema-Version CRLF LINK CRLF PutDestination CRLF ;
LINK in Section 3.3.2
PutWhere = "Put-Where" ":" "Source" | "Destination"

3.9.3 Response Body

A web collection that contains the results from LINK and PUT.

3.9.4 Response Codes

TBD.

 

4. Distributed Authoring and Versioning Link Schema

This section specifies only those link types which are absolutely necessary
to implement the functionality described in this specification. Link types
other than the ones described within are possible, but must be defined
in other documents. Since there are many different possible relationships
which can exist between resources, there are many different link types
which can exist to describe these relationships. It is difficult, if not
impossible to enumerate and describe all of these relationships, especially
since the meaning of the same type may vary depending on usage context.
This specification has therefore chosen not to try and enumerate all possible
link types, instead providing a mechanism for discovering which link types
(DAV.SupportedLinkTypes), and which sets of link types (DAV.SupportedLinkSchemas)
are supported on a resource.

A server is not required to support all of the DAV Link Types. However,
if a server supports a DAV Link Type, it SHOULD maintain the consistency
of that relationship by ensuring the contents of the Destination URI are
always up-to-date.

The DAV Link Types specified in this document form the "DAV"
link schema. 

All DAV schema links have a source URI which is the resource being described
by the link. The destination URI alway points to a resource whose content
type, and contents are described below for each DAV link type.

4.1 DAV.Versioning.History

4.1.1 Link Definition

The history link returns information about the history of a versioned
document. This information is contained within a DAG that describes the
ancestors and children of various versions in the tree. The history link
MUST be defined on the tree handle and SHOULD be defined on individual
versions. Versions that do not have a history link MUST have a tree link
defined on them. 

4.1.2 Link Type

The history link has type DAV.Versioning.History.

4.2.3 Destination Body

The destination body of the history link is a text/html file containing
a series of web collections of type "DAV/History".

WC Tag Attributes:

Type = "DAV/History"
Name = VersionToken

WCAT Tag Attributes and/or WCDATA Entry:

Rel = ("ParentEntry" | "ChildEntry" | "SiblingEntry")
Version = Token
HREF = Pointer to a web collection w/more information

Rel = ("Parent" | "Child" | "Sibling")
Version = Token
HREF = Pointer to a parent, child, or sibling.

The Rel/Version/HREF triples above can be used with WCAT or WCDATA.
The *Entry links provide pointers to web collections with more information
about the family member. The version tag provides the version of the relative
being pointed to. The second Rel/Version/HREF triple provides a pointer
directly to the versioned resource. All attributes defined on HCs MAY also
be used here to provide information such as creation date, author, owner,
etc.

4.2 DAV.Versioning.CheckedOut

A server MAY create a link of type DAV.Versioning.CheckedOut on the
check out root(s), the working resource, or both. The destination resource
of a DAV.Versioning.CheckedOut link is of content type application/checkoutresult,
which contains the same information as the response body to the CHECKOUT
method. invocation which caused the creation of this link. An optional
Web Collection attribute, "Principal" may also be included, which
holds information about the principal(s) who initiated the check out. 

Principal

WC Attributes:


Type = "DAV/Identifier"


WCDATA Attributes:


ContactURI = "URI"


4.3 DAV.Versioning.DefaultPublished. 

A server MAY create a link of type DAV.Versioning.DefaultPublished on
the version tree handle and all members of the version tree pointed to
by the handle. The destination resource of a DAV.Versioning.DefaultPublished
link is a member of the version tree, and points to the version which has
been designated as being appropriate for display to non-editors. The DAV.Versioning.DefaultPublished
destination resource SHOULD be returned to non-DAV aware clients who perform
a GET on a version tree handle.

4.4 DAV.Versioning.NextVersion 

A server MAY create a link of type DAV.Versioning.NextVersion on a versioned
resource. The destination resource of a DAV.Versioning.NextVersion link
is the version that immediately succeeds the source. A resource MAY have
multiple DAV.Versioning.NextVersion links.

4.5 DAV.SupportedLinkTypes

Destination resource content type: Web Collection 
Synytax: TBD

The contents of the destination resource is a list of the link types
which the server will definitely allow to be created on the source URI.
The server may allow the creation of links with types other than those
contained in the destination resource, but this is not guaranteed.

If a server supports a particular schema, then all link types in the
supported schema SHOULD be returned in the destination resource of a SupportedLinkTypes
link.

If a server implements the LINK method, it MUST also implement the SupportedLinkTypes
link.

4.6 DAV.SupportedLinkSchemas

Destination resource content type: Web Collection 
Syntax: TBD

The contents of the destination resource is a list of link schemas.
If a link schema is listed, it means that the server SHOULD allow the creation
of links with types belonging to that schema. The server may allow the
creation of links with types which do not belong to a schema listed in
the destination resource, but this is not guaranteed.

If a server implements the LINK method, it SHOULD also implement the
SupportedLinkSchemas link.

5. Relationships

[Ed. Note: This section will be removed from the spec and appended]

 

6. Locking

6.1 Introduction

The mechanism for locking and unlocking a resource involves the use
of a "lock token" (LockToken) which is used to reference the
instantiation of the lock. Each lock token instantiates the occurrence
of a lock on one resource or a specified portion of a resource (i.e., a
lock on a range of a resource). The locking of multiple resources will
cause the instantiation of an equal number of lock tokens. 

Lock tokens represent a lock that is specific to the context of a server
and therefore can not be transferred to another server. Nor is it allowable
to transfer the LockToken to another "client space" even if both
are instantiated on the same server. A "client space" is defined
as the data space in the context of the client obtaining the lock. More
than one thread can be active in a given "client space." 

A mechanism is provided to ensure that a method is executed only if
a lock is in place. This mechanism allows a lock header to be included
in the method request. The method will be executed only if the LockToken
is still valid. Multiple LockTokens may be include in the lock header.
Lock headers may reference any LockToken allowing the submission of a method
on a resource with a LockToken that refers to another resource. 

A lock may designate "write exclusive" on a given resource.
"Write exclusive" is currently the only type of lock supported.
A single range for the "write exclusive" lock may be defined
and overlapping ranges are never allowed. Thus a lock on the entire resource
would be exclusive of any and all range locks on the same resource. Multiple
range locks may be instantiated for a given resource (even among multiple
"user spaces"), but overlapping ranges are not permitted. The
following table describes the allowable states: 


Request

State

Result
fullfulldeniedfullpartialdeniedfullnonegrantedpartialfulldeniedpartialpartialgranted*partialnonegranted

* if no overlap 

Once defined the definition of the lock range may not be modified. The
only mechanism supported is to release the lock and instantiate a new lock
with a defined range. 

The size of a resource may not be changed within the defined region
of a lock range unless the range includes +n (n>0) octets beyond the
end of the resource (eof). By definition, locking a range beyond the eof
provides the owner with the ability to add to the eof and therefore extend
the resource. 

If an entire resource is locked and the lock owner deletes the resource
then the write lock remains. Further actions on the resource (e.g. PUT)
are allowed because the LockToken is still instantiated. 

Each lock may have a time out associated with it. If no time out value
is associated with the lock then the lock will never time out (implementors
should have some mechanism for destroying a lock at an administrative level).
Otherwise the lock will expire if the designated amount of time has elapsed
without a method being invoked on the resource by the lock owner. The time
out value may be modified without affecting the rest of the the lock by
submitting a lock request for the LockToken with no other values associated
with it other than a new time out value.

6.2 LOCK

6.2.1 Method Definition

[Ed. Note: Need description of LOCK method.]

The Request-URI of the LOCK method is the URI of the resource to be
locked.

6.2.2 Request Body

The lock request specifies the target of the lock, parameters of the
lock, and requests that a lock be set on the resource. 

The request body of a LOCK method is of content type application/lock,
defined as:


LockBody = Schema-Version LockEntry CRLF TimeOut CRLF 
           [LockRange CRLF] [LockOwner CRLF]
LockEntry = "LockEntry" ":" LockWriteExclusive 
LockWriteExclusive = "write exclusive" 
TimeOut = "TimeOutSeconds" ":" TimeOutVal 
TimeOutVal = 1*digit | "Infinite" 
LockRange = "LockRange" ":" 1*digit "-" (1*digit | "eof++") 
LockOwner = "LockOwner" ":" URI

Example: 

LOCK /users/johndoe/davspec.html HTTP/1.1
Content-Type: application/lock

Schema-Version: 1.0
LockEntry: write exclusive 
TimeOut: 2400 
LockRange: 100-eof++ 
LockOwner: mailto:johndoe@foo.com 


6.2.3 Response Body

The response body of a LOCK method is of content type application/LockResponse,
defined below. The syntax of this content type is that of a Web Collection.


ResourceLockResponse = WC_Open LockResponse WC_Close 
WC_Open = "<"WC VERSION=<">1.0<"> TYPE=" ("DAV/Lock"|"DAV/Unlock") 
          "<">NAME=<">" LockToken "<">>" 
LockToken = token

LockResponse = *WCAT LockData *WCAT 
LockData = "<WCDATA>" LockURI LockBody LockGranted "</WCDATA>"
            ; LockBody production from Section 6.2.2

LockURI = "ResourceLocked" ":" URI
LockGranted = "LockGranted" ":" RFC1123-date [*digit]  ;*digit for milliseconds
WC_Close = "</WC>" 

Example:

This is a possible response body from the lock request example in Section
6.2.2.

<WC VERSION="1.0" TYPE="DAV/Lock" NAME="LK_Xj5N75">
<WCDATA>
ResourceLocked: http://www.foo.com/users/johndoe/davspec.html
Schema-Version: 1.0
LockEntry: write exclusive 
TimeOut: 2400 
LockRange: 100-eof++ 
LockOwner: mailto:johndoe@foo.com 
LockGranted: Thu, 23 Jan 1997 15:11:27 GMT
</WCDATA>
</WC>

6.2.4 Error Conditions

Lock already owned: 
Lock range overlaps: 
Invalid range: 
Resource not found: 
Denied: 
General Failure: 

 

6.3 UNLOCK

6.3.1 Method Definition

[Ed. Note: Need description of Unlock method]

The Request-URI of the UNLOCK method specifies the URI of the resource
to be unlocked.

6.3.2 Request Body

The request body of an UNLOCK method is of content type application/unlock,
defined below:

UnlockRequest = Schema-Version UnLockToken
UnLockToken = "UnLock-Token" ":" LockToken 


6.3.3 Response Body

The response body of an UNLOCK method is of content type application/UnlockResult,
which is defined by the production ResourceLockResponse, defined
in Section 6.2.3.

6.3.4 Error Conditions

Lock not found: 
Lock not owned: 
Lock timed out: 
Denied: 
General Failure:

 

6.4 Lock Discovery 

[Ed. Note: "LockInfo" link and associated "LockDiscovery"
WC should be included in the section on DAV Link Schema links]

6.4.1 Lock Discovery via GetLinkVal

When a lock is taken out the system SHOULD record who owns the lock.
Ownership information can be taken from the From header, from identification
provided by authentication, or from the LockOwners field. 

Lock Discovery is enabled via a DAV Schema link of type DAV.LockInfo.
Lock Discovery is performed by using the GetLinkVal method on links of
this type.

The LockInfo Link is structured as:


src = URI of the resource
dest = URI of the lock discovery WC
type = "LockInfo" 


6.4.2 Lock Discovery Destination Resource

The DAV.LockInfo destination resource is of content type text/html,
which uses the Web Collection syntax:

LockDiscoveryResponse = WC_Open LockResponse OtherFields WC_Close 
WC_Open = "<"WC VERSION=<">1.0<"> TYPE=<">DAV/LockDiscovery<">
          NAME=<">" LockToken "<">>"
LockResponse = *WCAT LockData *WCAT 
LockData = "<WCDATA>" LockBody LockGranted "</WCDATA>" 
LockGranted = RF1123-date [*digit] 
OtherFields = (implementation specific) * 
"Owner" ":" 1*octet ** 
WC_Close = "</WC>" 

* not negotiable, safely dropped by client 
** if available 

 

7. Name Space Manipulation

7.1 COPY

7.1.1 Method Definition

This method requests the server to manipulate the mapping for the resource
in the namespace such that a new location (mapping) is created for the
Request-URI in the namespace, while maintaining the existing location (mapping)
in the namespace. The actual implementation is left to the discretion of
the server. The presence of hyperlinks within a resource creates special
problem in Web resources. The fact that these hyperlinks could be either
absolute or relative create yet another level of complexity.

The Request-URL will be the URL for the source resource which will be
copied to the destination. In case of a versioned resource, depending on
the implementation, it may be either the root of the version tree, in which
case it may mean to copy the whole tree or a specific version (depending
on the value of request-version), or it may be the version tree history.
In case of non-versioned resource, it will refer to the resourse itself.

The message body will contain the URL of the destination of the COPY.
The OVERWRITE header, as defined by this spec., defines the behavior of
the server if a resource already exists as referred to by destination URL.
If the value of the overwrite header is true (default), then any existing
resource referenced by the destination URL will be overwritten. If the
value of overwrite header is false then the copy will fail when the URL
of an existing resource matches that of the destination URL. In case of
non-versioned collections, COPY can be used as one of the ways to add to
the collection.

7.1.2 Request Body

The information about the destination and the switch to determine if
the links need to copied as well, will be passed in the message body which
should be of the content type "application/copy". Also defined
in the body is a switch called "copylink". If the value of this
switch is set to true, then the server should copy all the links that it
deems pertinent. This spec. leaves it to the discretion of the server to
determine which links are or are not appropriate in the context of copy.
When links are copied the following condition MUST be met: 

The types of the links should be maintained across the copy.If the source field of a link matches Request-URI, then the source
field of the link on the copy destination should be destination URI.

The defination of the content type Application/Copy is as follows:


copy = Schema-Version CRLF destination CRLF copylink CRLF [request-version CRLF]
Schema-Version = 1*DIGIT "." 1*DIGIT
destination = "destination" ":" URI
copylink = "copylink" ":" value
value = "true" | "false"
request-version = "Request-Version" ":" token



Note: COPY and Version Trees


The request-version token may be used to refer to a versioned resource
by its version ID, in which case the Request-URI must point to the version
tree handle. If the Request-URI points to the version tree handle and the
request-version field is not provided, then the whole tree will be copied
to the new location.

The following rules apply when a versioned resource is invloved in a
copy operation:

A versioned resource can be copied into a non-versioned space.A versioned resource cannot be copied into another versioned resource.A non-versioned resource cannot be copied into a versioned resource.


7.1.3 Response Body

The response body returns the status code back.

7.1.4 Error Conditions

The following status codes may be returned:

OK - The server has successfully copied the resource, and all the links,
if applicable, to the new location in the namespace.

Copy failed due to some internal error:


The source is missing
The desitination exists (and the overwrite switch is false)
One or more links (in case copylink switch is true) failed to copy due
to some internal error.


 

7.2 COPYHEAD

7.2.1 Definition

This is a discovery method to be used with COPY method. Since it is
the server's discretion to choose the links that it deems appropriate to
copy with the new resource location, these links have to be discoverable.
COPYHEAD provides this discovery mechanism to the client. The Request-URI
will be the URI for the source resource which will be copied to the destination.
In case of a versioned resource, it will be the version tree handle. In
case of non-versioned resource, it will refer to the resourse itself. The
information about the destination (and the switch to determine if the links
need to copied as well) will be passed in the message body which should
be of the content type "Application/Copyhead".

7.2.2 Request Body

The definition of application/copyhead is exactly the same as application/copy.

7.2.3 Response Body

The response will be a Web Collection. It will contain a list of all
the links that the server deems appropriate to copy with the destination
URI.

Response = WC_OPEN HEAD_INFO WC_CLOSE
WC_OPEN = "<WC version="&lt;&quot;"> 1.0 <"> Type = <"> "("DAV/COPYHEAD" | "DAV/MOVEHEAD")" <">>"
HEAD_INFO = REQUEST RESPONSE_CODE LINK_RESPONSE TIME_STAMP
WC_CLOSE = "</WC>"
REQUEST = "<WCDATA>" REQ_BODY "</WCDATA>"
REQ_BODY = actual request line and headers (without any message body) 
           of the COPY request for which the discovery is being made.
RESPONSE_CODE = "<WCDATA>" CODE "</WCDATA>"
CODE = exact copy of HTTP status line.
LINK_RESPONSE = Web Collection response format for each link (see section on LINK) 
TIME_STAMP = "<WCDATA>" TIME "</WCDATA>"
TIME = "Time" ":" RFC 1123 date [*digit]

To copy a resource pointed to by http://foo.bar.com/foobar.html, with
a link of the type "Author" and destination URI http://foo.bar.com/junk,
the copyhead response will be as follows:

<WC version="1.0" Type="DAV/COPYHEAD"> 
<WCDATA> 
COPYHEAD http://foo.bar.com/foobar.html HTTP/1.1 
Content-type : application/copyhead 

{instance of content type application/copy goes here}
</WCDATA> 
<WCDATA> Status : 200 OK </WCDATA> 
<WC version="1.0" Type="DAV/LINK"> 
<WCDATA> 
ON Source : http://foo.bar.com/foobar.html 
Dest : http://foo.bar.com/junk 
Type : Author 
</WCDATA> 
</WC> 
<WCDATA> Time : some time value </WCDATA> 
</WC>


7.3 MOVE

7.3.1 Method Definition

This method requests the server to manipulate the resource/namespace
mapping; a new location (mapping) is created for the Request-URI in the
namespace, and the existing location (mapping) in the namespace is removed.
The actual implementation is left to the discretion of the server.

Move can be considered as an atomic, logical operation combining a COPY
followed by a DELETE on the source URI. This means MOVE inherits all the
complexities of COPY operation, and add a few more of its own due to the
fact that it changes the resource location in the namespace.

For instance: from the perspective of the client, a MOVE on a resource
may result in a REDIRECT to the new location namespace. WEBDAV does not
require a server to issue a redirect on "moved" URIs in order
to be compliant, but one might argue that some sort of discovery for "server
capability" be provided.

Also there is an issue of "level of intelligence" of move.
One argument is that due to the special nature of HTML media types, move
should automatically perform some link management on links after a MOVE.
While it is impossible to manage all links pointing to a resource due to
lack of control over all of the links pointing to the resource, it is conceivable
that links from a resource, and links within a resource might be manageable.
The opposing argument to this is that allowing a move operation to have
side-effects which could modify the resource being moved - or worse yet
modify resources which were not being moved - can have unexpected consequences.
It is important to know the consequences of an operation before executing
the operation.

WEBDAV is silent on MOVE/link interaction issues, specifying a simple
MOVE with a discoverable list of links to be moved with the resource. Beyond
that WEBDAV does not make any recommendation or suggestions about the actual
implementation of the MOVE operation.

In case of non-versioned collections, move can be used as one of the
ways to add to the collection.

7.3.2 Request Body

This section defines the content type application/move.

Move = Schema-Version CRLF destination CRLF movelink CRLF [request-versionCRLF]
Schema-Version = 1*DIGIT "." 1*DIGIT
destination = "destination" ":" URL
movelink = "movelink" ":" value
value = "true" | "false"
request-version = "Request-Version" ":" token


Note: COPY and Version Trees


The request-version token may be used to refer to a versioned resource
by its version ID, in which case the Request-URI must point to the version
tree handle. If the Request-URI points to the version tree handle and the
request-version field is not provided, then the whole tree will be moved
to the new location.

The following are the rules that apply when a versioned resource is
invloved in a move operation:

A versioned resource can be moved into a non-versioned space.A versioned resource cannot be moved into another versioned resource.A non-versioned resource cannot be moved into a versioned resource.


7.3.3 Response Body

The response body returns the status code.

7.3.4 Error Conditions

The following status codes may be returned:

OK - The server has successfully moved the resource, and all the links,
if applicable, to the new location in the namespace. 

Move failed due to some internal error:

The source is missingThe desitination exists (in case overwrite switch is false)One or more links (in case movelink switch is true) failed to move
due to some internal error.

 

7.4 MOVEHEAD

7.4.1 Header Definition

This is a discovery method to be used with MOVE method. Since it is
the server's discretion to choose the links that it deems appropriate to
move with the new resource location, these links have to be discoverable.
MOVEHEAD provides this discovery mechanism to the client. The Request-URI
is the URI for the resource to be moved. In case of a versioned resource,
it will be the version tree handle. In case of non-versioned resource,
it will refer to the resourse itself. The information about the destination
(and the switch to determine if the links need to moved as well) are passed
in the message body (content type "Application/Movehead").

7.4.2 Request Body

The definition of application/movehead is exactly the same as move

7.4.3 Response Body

The response is a Web Collection of type DAV/MOVEHEAD with BNF identical
to that for DAV/COPYHEAD. It will contain a list of all the links that
the server deems appropriate to move with the destination URI.

To move a resource pointed to by http://foo.bar.com/foobar.html, with
a link of the type "Author" and destination URI http://foo.bar.com/junk,
the movehead response will be as follows:

<WC version="1.0" Type="DAV/MOVEHEAD"> 
<WCDATA> 
MOVEHEAD http://foo.bar.com/foobar.html HTTP/1.1 
Content-type: application/movehead 

{instance of application/move goes here.}
</WCDATA> 
<WCDATA> Status : 200 OK </WCDATA> 
<WC version="1.0" Type="DAV/LINK"> 
<WCDATA> 
ON Source : http://foo.bar.com/foobar.html 
Dest : http://foo.bar.com/junk 
Type : Author </WCDATA> 
</WC> 
<WCDATA> Time : some time value </WCDATA> 
</WC>

 

7.5 DESTROY

To destroy a resource is permanently remove a resource from storage.
To delete a resource is to request that the resource no longer be made
available for editing. Destory differs from delete in that a versioning
system may allow a deleted resource to be visible, but not editable,
while a destroy causes the resource, and all knowledge about the resource
to be removed from the server.  A destroy is performed by the DESTROY
method. The request-URI of the DESTROY method is the resource to be destroyed.

 

7.6 UNDELETE

An undelete undoes the action of a delete, making a deleted resource
available for editing.  An undelete is performed by executing the
UNDELETE method. The request-URI is the resource to be undeleted. 

 

8. URI Collections

8.1 URI Collection Behavior

According to The Random House College Dictionary - Revised Edition,
Collection is defined as "2. Something that is collected, as a group
of objects..." In the most generic sense a URI Collection brings together
a group of URIs and provides information about them. This specification
will not be defining such a collection, mostly because it is a pretty idea
with no where to go. At least for now. In the future systems will be available
that will be able to make profitable use of a generic collection. For now
this specification defines the Hierarchical Collection (HC). The HC is
meant to walk, talk, and look just like a directory in a file system. URIs
are added to an HC as either relative or absolute. All relative URIs in
an HC are relative to the Request-URI. This restriction is in place in
order to replicate normal file system behavior. Thus if the collection
is copy, moved, or otherwise manipulated within the name space it will
be possible to copy, move, etc. its component parts. This behavior is referred
to as propagation. The idea is that a command executed on the collection
can be propagated to all the relative URIs. The PropagateLevel header controls
propagation behavior. This header specifies the number of levels a command
should be propagated. Absolute URIs are added as links and thus commands
are not propagated through them. Thus, if a collection is copied, the COPY
method will be executed on all the relative URIs but not on the absolute
URIs. Of course all the absolute URI entries will still be members of the
collection, they simply won't have the COPY method executed on them. 

Executing the MAKECOLLECTION method creates HCs. This is the same as
executing a MKDIR on a file system. If a MAKECOLLECTION is executed on
a Request-URI which is not itself a member of a collection then either
the system will automatically create all the necessary collections or it
will reject the method. Once the collection is created any URI PUT under
the collection's namespace will "magically" appear inside the
collection. Again, this behavior mimics that of a normal file system. Adding
a relative URI directly to a collection will either be rejected or cause
a NULL file to appear. Removing a URI directly from a collection will cause
a link to disappear in the case of an absolute URI or will cause the file
to be deleted in the case of a relative URI.

8.2 CREATECOLLECTION Method

8.2.1 Method Definition

The CREATECOLLECTION method indicates to the server that the clients
wishes a specified URI to act as a collection.

8.2.2 Request Body

The contents of message/collection identify what sort of collection
is being created. This document defines the Hierarchical Collection (HC).
A HC only supports a hierarchical name space and is meant to replicate
the behavior of a file system directory.

A HC contains URIs. URIs may be entered as relative or absolute. Relative
URIs must be relative to the request-URI. A relative URI is a propagate
entry. If a PropagateLevel header is included with a method executed on
a HC then the method will be propagated through all relative URIs. Absolute
URI entries do not propagate.

MessageCollection = Version CRLF CollectionType CRLF
CollectionType = "Collection Type" ":" ("HC"
| Text)

8.2.3 Response Body

CREATECOLLECTIONERROR = WC_OPEN Type WC_CLOSE
ContentError = "DAV/Error/CreateCollection"
Type = "Do Not Support Type" ":" ("HC" |
Text)

8.2.4 Response Codes

 

8.3 ADDRESOURCE

Editor: this section needs to incorporate the correct text from Yaron.

8.3.1 Content Type Definition

This content type is used to add a link to a collection. In the case
of an HC most systems will not accept a relative URI. Rather, to add a
new entry to an HC, the resource should be created using a PUT or similar
method. If the server does accept a relative URI for an HC then the result
SHOULD be the creation of an empty resource.

8.3.2 Request Body

AddResource = Version CRLF URIType CRLF URIEntry CRLF
URIType = "Type" ":" ("Relative" | "Absolute")
URIEntry = "URI" ":" (relativeURI | absoluteURI)

URIType indicates the type of URI while URIEntry indicates the actual
URI. URIType is included for negotiation purposes. If the URI is relative
then it is relative to the request-URI. The productions relativeURI and
absoluteURI are defined in section 3.2.1 of rfc2068.

8.3.3 Response Body

The content type of the response body is text/HTML and contains a Web
collection.

 

8.4 REMOVERESOURCE

8.4 1 Method Definition

This content type is used to remove a URI from a collection. In the
case of an HC most systems will not accept a relative URI. Rather, to delete
an HC entry, the resource should be DELETEd or DESTROYed. If the server
does accept a relative URI for an HC then the result SHOULD be the deletion
of the resource.

8.4.2 Request Body

RemoveResource = AddResource

8.4.3 Response Body

The content type of the response body is text/HTML and contains a Web
collection.

 

8.5 PropagateLevel Header

8.5.1 Header Definition

The PropagateLevel header controls how many levels a method will be
propagated down a collection. Zero means the method should only be executed
on the collection. Infinity means the method should be propagated as far
down as possible. A loop is impossible with HCs because its name space
is a tree and absolute URIs do not propagate. Other collection types will
have to define their own mechanisms to detect and prevent loops.

8.5.2 Request Body

PropagateLevel = "PropagateLevel" ":" (1*Digit
| "Infinity")

8.5.3 Response Body

The following web collection can be included in any web collection based
body.

WC Attributes

Type = "DAV/Error/Prop/FailedAt"

WCDATA Entry

Entry = "Propagation Mechanism Failed at" ":"
*(Relative | Absolute_URI CRLF)
Relative = "Base" ":" Absolute_URI "Relative"
":" *Relative_URI CRLF

 

9. Version Control

9.1 Introduction

This specification provides interface definitions which clients may
use to perform the common versioning operations check in, check out, version
history retrieval, and merge. A fundamental assumption of this specification
is that the semantics of versioning operations are defined by the server,
and may vary from server to server, depending on the versioning engine
employed. As a consequence, this specification provides a common interface
for accessing the functionality of many different versioning engines. 

Since versioning functionality may vary from server to server, or even
in different namespaces on the same server, a discovery mechanism is provided
for clients to determine precisely what effect a CHECKOUT or a CHECKIN
method invocation will have on the state of the server. A client may query
the server for its CHECKIN and CHECKOUT semantics by retrieving the destination
resource of the DAV.Discovery.CHECKOUT and DAV.Discovery.CHECKIN links.
It is expected that a client will query the value of the DAV.Discovery.CHECKOUT
link before performing a check out, and the DAV.Discovery.CHECKIN link
before performing a check in, so it knows exactly what will occur when
it issues the CHECKOUT or CHECKIN request. 

Similarly, the who and when of setting a version identifier varies significantly:


A version identifier MAY be specified by the client upon check out.
Upon check out, the server MAY accept the client version identifier,
or the server MAY assign a version identifier, or the server MAY not assign
any version identifier. If the version identifier has not already been set, the client MAY
specify a version identifier upon check in. Upon check in, the server MAY accept the client version identifier,
otherwise the server MUST assign a version identifier unless one has already
been assigned (e.g., during check out).

9.2 Versioning Data Model

A version tree is a directed acyclic graph of versioned resources. Arcs
in the version graph indicate "is-version-of" (or "is-successor-of")
relationships. Each versioned resource is a first-class resource, addressable
by a URI. A version tree MUST have a handle resource, known as the version
tree handle, which is used to refer to the version tree as a whole. The
contents of the handle resource MUST be a single URI (a pointer), which
is used by the versioning engine to identify the version tree as a whole.
The version handle resource MAY point to either the root object of the
version tree, or the history resource for the version tree. 

The version tree handle MUST have server generated links of type DAV.Versioning.DefaultPublished,
DAV.Discovery.CHECKIN, and DAV.Discovery.CHECKOUT, and MAY have a server
generated link of type History. Each versioned resource MAY have server
generated links of the following types: DAV.Versioning.History, DAV.Versioning.DefaultPublished,
DAV.Versioning.NextVersion, DAV.Discovery.CHECKOUT, DAV.Discovery.CHECKIN.


The destination resource of the DAV.Versioning.History link SHOULD
describe the version tree, and contain comment information. The destination of the DAV.Versioning.DefaultPublished link, if this
link exists, points to the version which should be returned by default
if a GET is performed on the version tree handle URI by a DAV unaware client.The destination URI of the each DAV.Versioning.NextVersion link, if
any such links exist, MUST point to a successor resource in the version
tree. The destination resource of the DAV.Discovery.CHECKOUT link, if this
link exists, must contain information describing the capabilities of the
CHECKOUT method as implemented by the server on the source resource. The destination resource of the DAV.Discovery.CHECKIN link, if this
link exists, must contain information describing the capabilities of the
CHECKIN mtethod as implemented by the server on the source resource. 

Versioning is an orthogonal issue to content negotiation. Each particular
variant of a resource MAY be independently versioned, and MAY have its
own version tree. 

TBD: A Figure showing a sample version tree (using text characters)

 

9.3 CHECKOUT

9.3.1 Method Definition

A CHECKOUT is a declaration by a client that it might edit a versioned
resource. The CHECKOUT method is intended to map to the notion of check
out supported by the server's versioning engine. The Request-URI of the
check out method is a version tree handle, which identifies the version
tree on which the CHECKOUT will be performed. 

A server MAY create a working resource as the result of a check out.
If the server creates a working resource, it MUST return the URI of this
resource in the response body. 

All of the activity which occurs during CHECKOUT method invocation MUST
be performed atomically. 

9.3.2 Checkout Capability Discovery

Editor: this section will be subsumed by a more general method discovery
mechanism.

9.3.3 Request Body

The request body of the CHECKOUT method is of content type application/checkout,
defined as: 

Checkout        = Schema-Version CRLF [Derived-From CRLF] [Request-Version CRLF]
                  [Request-Lock CRLF] [Request-Intent CRLF] 
                  [Request-Working-Loc CRLF] [Request-Visibility CRLF]  

Schema-Version  = "Schema-Version" ":" 1*DIGIT "." 1*DIGIT

Derived-From    = "Derived-From" ":" #token

Request-Version = "Request-Version" ":" token

Request-Lock    = "Request-Lock" ":" "Exclusive" "Write"

Request-Intent  = "Request-Intent" ":" ("true" | "false")

Request-Working-Loc = "Request-Working-Loc" ":" ("Client" | "Server")

Request-Visibility = "Request-Visibility" ":" Visible-When [Visible-Where]
Visible-When    = ("Always" | "If_Locked" | "Never") 
Visible-Where   = ("On_CheckOut_Root" | "On_Working" | "On_Both")

The Schema-Version is the version number of the syntax specification
of the application/checkout content type. 

Derived-From specifies the version identifier of the check-out root(s)
from which the working resource (if it exists) is derived. If more than
one version identifier is specified in the Derived-From value, the working
resource MAY be the result of a merge of the specified versions, and the
exact semantics of this merge operation will vary across versioning engines.


Request-Version specifies a client's request to set the version identifier
of the working resource. The server MAY set the version identifier of the
working resource to this value. If this field is omitted from the request
message body, the server MAY perform a check out from a default check out
root (often the latest version). 

Request-Lock is used by the client to request a lock when a server supports
optional locking on check out.

Request-Intent is used by the client to request the server to establish
an intent to edit on check out. An intent to edit MAY result in the association
of authentication or user information with either the check out root, or
the working resource. 

Request-Working-Loc is used by the client to request where the working
resource is located. If the client specifies "Client," then the
server SHOULD not create a working resource on the server. If the server
does not create a working resource on the server, the client SHOULD retrieve
its working resource from the check out root after successful completion
of the CHECKOUT. If the client specified "Server," then the server
SHOULD create a working resource on the server.

Request-Visibility is used by the client to request whether to create
a DAV.Versioning.CheckedOut link, and the resource which will store the
link. Visible-When describes whether the DAV.Versioning.CheckedOut
link SHOULD always be created ("Always"), SHOULD only be created
if the check out performs a lock ("If_Locked"), or SHOULD never
be created ("Never"). Visible-Where describes where the link
SHOULD be stored: on the check out root ("On_CheckOut_Root"),
on the working resource ("On_Working"), or on both the check
out root and the working resource.

9.3.4 Response Body

The response body of a CHECKOUT method invocation is of content type
application/checkoutresult, defined as: 

CheckoutResult     = WC-Open CheckoutResultData WC-Close

WC-Open            = "<WC VERSION =<">1.0<"> TYPE =<">DAV/CheckoutResult<">>"

CheckoutResultData = *WCAT WCCheckoutData WCAT

WCAT               = {arbitrary, server-defined Web Collection attributes}

WCCheckoutData     = "<WCDATA>" DerivedTree DerivedRoot [WorkURI]

                     [WorkVersion] [Visibility] "</WCDATA>"



DerivedTree        = "Derived-Tree" ":" URI CRLF

DerivedRoot        = "Derived-Root" ":" #URI CRLF

WorkURI            = "Working-URI"  ":" URI CRLF

WorkVersion        = "Working-Version" ":" token CRLF

Visibility         = "Visibility" ":" ( Visibility-Where | "Never" ) CRLF

WC-Close           = "</WC>"

Derived-Tree is the location of the version tree handle on which the
check out was performed. 

Derived-Root is the location of the (possibly many) versioned resources
on which the check out operation was performed. 

WorkURI is the location of the working resource generated by the server
on check out, if it exists. 

WorkVersion is the version identifier of the working resource, if it
was set on check out. 

Visibility is the location where the client can retrieve the DAV.Versioning.CheckedOut
link.

9.3.5 Error conditions

An error condition occurs if the following conditions hold: 

If a client requests a version identifier on check out, but the server:
a) cannot set a version identifier
b) refuses to set a version identifier 

If a client requests a lock, but the server doesn't support locking.


If the client requests an intent to edit, but the server doesn't support
intent to edit. 

If the client doesn't specify a Derived-From version, and the server
has no default value. 

Syntax error in the request body. If a client requests a feature the
server doesn't support then it has committed a syntax error because the
discovery told the client what the server supports.

 

9.4 CHECKIN

9.4.1 Method Definition

A CHECKIN is a declaration by a client that it wishes to place a resource
under version control. The CHECKIN method is intended to map to the notion
of check in supported by the versioning engine. The Request-URI for a CHECKIN
method invocation is the version tree handle of the version tree which
is being operated on. 

A check in SHOULD clear any server state which is set as a result of
a check out. For example, if a server locks a resource on check out, it
should remove the lock upon check in. 

To place a resource under version control for the first time, a check
in is performed on the resource. In this case, the Request-URI is the desired
location of the version tree handle, and the Working-URI or the check in
body gives the contents of the resource to be placed under version control.


All of the activity which occurs during CHECKIN method invocation MUST
be performed atomically. 

9.4.2 Checkin Capability Discovery

Editor: this section will be subsumed by a more general purpose discovery
mechanism

9.4.3 Request-Body

The request body of a CHECKIN method invocation MUST be in one of two
forms: 

An entity of content type application/checkin An entity of content type multipart/related, with two parts, an entity
of content type application/checkin, and a second entity, of any content
type, containing a check in body. 

If the request-body is of content type multipart/related, the checkin
operation is defined to be a PUT of the checkin entity body (into a server-dependent
temporary resource), followed by a CHECKIN. 

The definition of content type application/checkin is: 

CheckIn          = Schema-Version CRLF [Derived-From CRLF]

                   [Working-Resource CRLF] [Request-Version CRLF] 

                   [Check-In-Location CRLF]



Schema-Version   = "Schema-Version" ":" 1*DIGIT "." 1*DIGIT

Derived-From     = "Derived-From" ":" #token

Request-Version  = "Request-Version" ":" token

Working-Resource = "Working-Resource" ":" ( "[" URI "]" ) | 

                   ("VersionID" ":" token) | "BODY"

The Schema-Version is the version number of the syntax specification
of the application/checkout content type. 

Derived-From specifies the version identifier of the check-out root(s)
from which the working resource (if it exists) is derived. If more than
one version identifier is specified in the Derived-From value, the checked-in
resource MAY be entered as the successor of the Derived-From resources.


Request-Version specifies a client's request to set the version identifier
of the check in resource. The server MAY set the version identifier of
the check in resource to this value. If this field is omitted from the
request message body, the server MUST set the version identifier if it
has not previously been set. 

Working-Resource specifies a URI or a version identifier of the working
resource which is to be checked-in. If the value is "BODY," the
working resource is contained in the check in body.

Open issues: 1 - If a version has multiple parents the client wants
to know where the version links will go. If the system supports multiple
inheritance then that needs to be stated. If the system only supports single
inheritance then the client needs to know, before hand, which version the
new version will be linked to. 2 - The syntax allows a client to specify
different derived-from resources on Check In then were listed on Check
Out. Somewhere there is a versioning system that doesn't allow this. The
client needs to know this fact before performing the check out.

9.4.4 Response Body

There is no response body defined for the CHECKIN method. 

9.4.5 Error Conditions

If the Derived-From token(s) do not exist, 

If the working URI is not located on this server, or the server is not
authorized to retrieve the working URI. 

If the PUT of the checkin entity body fails. 

Syntax error in the request body. 

 

9.5 DIFF/MERGE

9.5.1 Introduction

The request-URI of the DIFF method is an arbiter. The arbiter will compare
the entries and return the differences between them.

The request-URI of the MERGE method is also an arbiter. The arbiter
will combine the entries and return the result.

The Application/Diff content-type works with the DIFF method. The Application/Merge
content-type works with the Merge method.

Application/Diff = Body
Application/Merge = Body
Body = 1#("URI" ":" URI | "Entity" ":"
entity-body) 

 

9.5.2 SERVERMERGE

9.5.2.1 Method Definition

The SERVERMERGE method requests that the server merge a number of entities
on behalf of the client. The request-URI is a server side arbiter who performs
the merge on behalf of the client.

9.5.2.2 Request Body

The request body may take on one of two possible formats. One format
is application/servermerge, which is defined below. The second format is
message/multipart related which will contain an entry of type application/servermerge
as well as entities for the server to merge.

Type = application/servermerge

Merge = Schema-Version CRLF MergeType CRLF [MergeEntities CRLF] 
        ReturnType CRLF [ReturnURI CRLF]
MergeType = "Merge Types" ":" ("URIs" | "Bodies" | "URIs" "Bodies")
MergeEntities = "Merge Entries" ":" #URI
ReturnType = "Return Result" ":" ("URI" | "Body")
ReturnURI = "Return Location" ":" URI

MergeType specifies what mechanisms are being used to refer to bodies
to be merged. URIs means that a MergeEntities has been included while Bodies
indicates that one or more message/multipart related have been included.
ReturnType specifies how the results are to be returned, either as part
of the response or recorded in a URI. ReturnURI specifies the URI for the
result to be recorded in if the user selects that return mechanism. A server
MAY support any combination of values for MergeType and ReturnType. It
MUST provide for discovery of supported values.

9.5.2.3 Response Body

Only support # bodies to be merged

Can not resolve URI 

Can not store in URI

Can not merge included types

Merge Failed

Merge Succeeded

9.5.2.4 Response Codes

[Will fold in from above.]

 

9.6 Command Comments 

Command comments are entity headers. 

Command_Comment = "Comment" ":" CommentVal
CommentVal = URI | comment 

This is the standard comment facility used by versioning systems. Servers
that do not understand the header or do not wish to make use of the information
are free to ignore the information. No specification is made regarding
how this information is to be retrieved. It is likely, however, that most
systems will make the command comments available through their history
attribute. 

9.7 FREEZE (a.k.a. UNVERSION) 

Editor: this method should be viewed as proposed functionality.

9.7.1 Method Definition

This method request the server to freeze the version tree in the current
state, and copy the default published version outside of versioning space
so that it is accessible as an unversioned resource to the client. After
the version tree is frozen, the clients will not be able to perform any
operation except CHECKIN at which time the tree will be taken out of the
frozen state and put back into the version space. The Request-URI is the
URI of the version tree handle.

9.7.2 Request Body 

None.

9.7.3 Response

The response will only consist of the status code as returned by the
server.

9.7.4 Error Conditions

The error codes could any of the following: 

OK - the server successfully froze the version tree and copied the Default
Published Version into non-version space. 
FREEZE failed because the server could not freeze the tree. 
FREEZE failed because the server could not copy the default published version
to unversioned space 
FREEZE failed because the server could not determine the Default Published
Version 
The source (tree) is missing 

10. Ancillary Methods and Headers

10.1 MaxLength Header 

10.1.1 Header Definition 

The max length header requests that the server not return any results
greater than specified in the header. The header also specifies if partial
results are preferred to no results in the case when the result entity
is greater than allowed by the header. 

10.1.2 Header Body 

MaxLengthHeader = "MaxLength" ":" Size Partial CRLF
Size = "Size" ":" Bytes-Unit 1*Digit
Partial = "Partial" ":" ("Acceptable" | "Not Acceptable") 

 

10.2 If-Lock Header 

10.2.1 Header Definition 

The If-Lock header makes any request to which it has been appended conditional
on the lock(s) referred to by the included token(s) still being active.
This header can not be dropped. 

10.2.2 Header Body 

IfLockHeader = "If-Lock" ":" #LockToken CRLF 

 

10.3 Command-Comments Header (CCMD)

10.3.1 Header Definition

Command-Comments (short form CCMD) is a request-header which is used
to transmit comment information on any HTTP request method to the server.
The server MAY provide persistent storage for the comments. The server
MAY log the comments. The server MAY ignore the comments. 

10.3.2 Header Body

The definition of the syntax of the Command-Comments header is as follows:


CommandComments  = ("CCMD" | "Command-Comments") ":" LangTaggedString

LangTaggedString = Lang UTF-8   ; See RFC 2044 for UTF-8 definition
Lang             = "(" LangTag ")"
LangTag          = 1*8ALPHA *("-"1*8ALPHA)

 

10.4 Overwrite Header

10.4.1 Header Definition

Overwrite is a request-header which specifies whether the destination
of the method should or should not be overwritten. 

10.4.2 Header Body

Overwrite = "Overwrite" ":" ("Yes" | "No")

If the value of Overwrite is "Yes," a destination resource
will be replaced if it exists. If the value of Overwrite is "No,"
the server will not replace the destination resource if it exists. 

This header may be applied to the PUT method, and thus modifies the
definition of PUT given in Section 9.6 of [HTTP/1.1].

APPENDIX

A. Definition of LinkSearch Header

Editor: This is a proposed feature.

The LinkSearch method can be expensive, especially when a number of
attributes must be retrieved over time.

A more economical mechanism is to append a search string to URL using
"?". However, the URL could be confused with any of a number
of search syntax's. The solution proposed by this document is to create
a new header called LinkSearch.

LinkSearch = "LinkSearch" ":" HTTP_url ; See
section 3.2.2 of [HTTP11]

If the HTTP URL does not end in a "/" then a "?"
may be appended to it and the attribute search syntax defined below may
be used to search for attributes on that particular resource. If the URL
does end with a "/" then any resource whose name is a child of
the specified HTTP URL may be searched on directly.

To perform a search a string matching the following syntax should be
used.

LinkSearchSuffix = "?" Attribute
Attribute = token

So, if the LinkSearch value is http://foo/bar
then a search on a link type of author would be performed using http://foo/bar?author.
If the returned value is http://foo/bar/
then the author search may be performed on http://foo/bar/?author
and any of its children, such as http://foo/bar/doublebar?author.

By returning the LinkSearch header the server is agreeing to manipulate
the search URL as it would the URL of the resource it resolves to. Thus
it becomes the responsibility of the server to resolve the search URL whenever
it is included in a command.

If it is impossible to resolve the search request to a single result
then a 416 Not Unique error should be returned. This error specifies that
the URI was not resolvable to a unique resource.

If the search URI does not resolve to any attribute then any request
containing that URI should return a 404 Not Found error.

B. Definition of LinkPrefix Header

Editor: this is a proposed feature.

In some cases a server may have an arbiter which handles all searches
on resources. To allow for the use of the arbiter but still gain the advantages
of URL based searching the LinkPrefix is introduced.

LinkPrefix = "LinkPrefix" ":" HTTP_url

To retrieve a particular attribute the following syntax should be used:

LinkPrefixSuffix = "?" URL LinkSearchSuffix

Thus the returned URL has the URL to be searched on appended to it followed
by the actual search syntax as previously specified. This allows for quick
retrieval of attribute values but with the benefit of processing requests
at a single resource.

The URI returned by LinkPrefix has the same use semantics as the URI
returned by LinkSearch.

 

Required Features

[Ed. Note: preliminary and incomplete]

Introduce the concept of Distributed Authoring compliance, Versioning
compliance, and totally optional features. Use the list from presentation.

Acknowledgements

[Ed. Note: preliminary and incomplete]

Roy Fielding, Richard Taylor, Larry Masinter, Henry Sanders, Judith
Slein, Dan Connolly, David Durand, Henrik Nielsen, Paul Leach. Kenji Ota,
Kenji Takahashi. Jim Cunningham. Others, TBD. 

References

[Ed. Note: preliminary and incomplete]

[HTTP11] R. T. Fielding, J. Gettys, J. C. Mogul, H. F. Nielsen, and
T. Berners-Lee. "Hypertext Transfer Protocol -- HTTP/1.1" Internet-Draft
draft-ietf-http-v11-spec-07.txt, expires February 12, 1997. 

[ORANGE] DoD 5200.28-STD, "Department of Defense Trusted Computer
System Evaluation Criteria", December, 1985. 

[RFC1521] N. Borenstein, N. Freed. "MIME (Multipurpose Internet
Mail Extensions) Part One: Mechanisms for Specifying and Describing the
Format of Internet Message Bodies." RFC 1521, Bellcore, Innsoft, September,
1993. 

[URL] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource
Locators (URL)." RFC 1738, CERN, Xerox PARC, University of Minnesota,
December, 1994. 

[RFC1959]

[RFC1960]

[WEBC] - References to web collections.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/draft-ietf-webdav-protocol-04.html
##-----------------TITLE------------------------##
Extensions for Distributed Authoring and Versioning on the World Wide Web -- WEBDAV
##------------------TEXT------------------------##
WEBDAV Working Group                     Y. Y. Goland, Microsoft
INTERNET-DRAFT                 E. J. Whitehead, Jr., U.C. Irvine
<draft-ietf-webdav-protocol-04>               A. Faizi, Netscape
                                             S. R Carter, Novell
                                               D. Jensen, Novell
Expires April 20, 1998                          October 12, 1997



This HTML version was converted from plaintext ASCII to HTML by Jim Davis.  My sincere apologies for any errors introduced in the process.  When in doubt, consult the ascii version.




         Extensions for Distributed Authoring and Versioning
                              on the
                      World Wide Web -- WEBDAV

Status of this Memo

This document is an Internet-Draft. Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its
areas, and its working groups. Note that other groups may also
distribute working documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six
months and may be updated, replaced, or made obsolete by other
documents at any time. It is inappropriate to use Internet-Drafts
as reference material or to cite them other than as "work in
progress".

To learn the current status of any Internet-Draft, please check
the "1id-abstracts.txt" listing contained in the Internet-Drafts
Shadow Directories on ftp.is.co.za (Africa), nic.nordu.net
(Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East
Coast), or ftp.isi.edu (US West Coast).

Distribution of this document is unlimited. Please send comments
to the Distributed Authoring and Versioning (WEBDAV) working
group at <w3c-dist-auth@w3.org>, which may be joined by sending a
message with subject "subscribe" to <w3c-dist-auth-request@w3.org>.

Discussions of the WEBDAV working group are archived at
<URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.




Abstract

This Document specifies a set of methods and content-types
ancillary to HTTP/1.1 for the management of resource properties,
simple name space manipulation, simple resource locking
(collision avoidance) and resource version control.



                        Table of Contents
Abstract
1    Terminology
2    Data Model and Methods for DAV Properties
     2.1  Introduction
          2.1.1   The DAV Property
          2.1.2   Existing Metadata Proposals
          2.1.3   Properties and HTTP Headers
     2.2  A Property Model for HTTP Resources
          2.2.1   Overview
          2.2.2   Property Namespace
     2.3  Schemas
          2.3.1   PropSchema XML Element
          2.3.2   DTD XML Element
          2.3.3   DefinedProps XML Element
          2.3.4   PropEntries XML Element
          2.3.5   Live XML Element
     2.4  DAV Schema
          2.4.1   DAV Property
          2.4.2   Level XML Element
          2.4.3   Prop XML element
          2.4.4   PropLoc XML Attribute
          2.4.5   Example
     2.5  Property Identifiers
          2.5.1   Problem Definition
     2.6  Link XML Element
          2.6.1   Problem Description
          2.6.2   Solution Requirements
          2.6.3   Link XML Element
          2.6.4   Src XML Element
          2.6.5   Dst XML Element
          2.6.6   Example
     2.7  Multi-Status Response
          2.7.1   Problem Definition
          2.7.2   Solution Requirements
          2.7.3   Multi-Status Response
     2.8  Properties and Methods
          2.8.1   DELETE
          2.8.2   GET
          2.8.3   PROPPATCH
          2.8.4   PUT
          2.8.5   PROPFIND
3    A Proposal for Collections of Web Resources and Name Space
     Operations
     3.1  Observations on the HTTP Object Model
          3.1.1   Collection Resources
          3.1.2   Creation and Retrieval of Collection
                  Resources
          3.1.3   Source Resources and Output Resources
     3.2  MKCOL Method
          3.2.1   Problem Description
          3.2.2   Solution Requirements
          3.2.3   Request
          3.2.4   Response
          3.2.5   Example
     3.3  Standard DAV Properties
          3.3.1   IsCollection Property
          3.3.2   DisplayName Property
          3.3.3   CreationDate Property
          3.3.4   GETentity Property
          3.3.5   INDEXentity Property
          3.3.6   Content-Type XML Element
          3.3.7   Content-Length XML Element
          3.3.8   Content-Language XML Element
          3.3.9   Last-Modified XML Element
          3.3.10  Etag XML Element
     3.4  INDEX Method
          3.4.1   Problem Description
          3.4.2   Solution Requirements
          3.4.3   The Request
          3.4.4   The Response
          3.4.5   ResInfo XML Element
          3.4.6   Members XML Element
          3.4.7   Href XML Element
          3.4.8   Example
     3.5  Behavior of RFC 2068 Methods on Collections
          3.5.1   GET, HEAD for Collections
          3.5.2   POST for Collections
          3.5.3   PUT for Collections
          3.5.4   DELETE for Collections
          3.5.5   DELETE Method for Non-Collection
                  Resources
     3.6  COPY Method
          3.6.1   Problem Description
          3.6.2   Solution Requirements
          3.6.3   The Request
          3.6.4   The Response
          3.6.5   Examples
     3.7  MOVE Method
          3.7.1   Problem Description
          3.7.2   Solution Requirements
          3.7.3   The Request
          3.7.4   The Response
          3.7.5   Examples
     3.8  ADDREF Method
          3.8.1   Problem Definition
          3.8.2   Solution Requirements
          3.8.3   The Request
          3.8.4   Example
     3.9  DELREF Method
          3.9.1   Problem Definition
          3.9.2   Solution Requirements
          3.9.3   The Request
          3.9.4   Example
     3.10 PATCH Method
          3.10.1  Problem Definition
          3.10.2  Solution Requirements
          3.10.3  The Request
          3.10.4  text/xml elements for PATCH
          3.10.5  The Response
          3.10.6  Examples
     3.11 Headers
          3.11.1  Destination Header
          3.11.2  Enforce-Live-Properties Header
          3.11.3  Overwrite Header
          3.11.4  Destroy Header
          3.11.5  Collection-Member Header
     3.12 Links
          3.12.1  Source Link Property Type
4    State Tokens
     4.1  Overview
          4.1.1   Problem Description
          4.1.2   Solution Requirements
     4.2  State Token Syntax
     4.3  State Token Conditional Headers
          4.3.1   If-State-Match
          4.3.2   If-None-State-Match
     4.4  State Token Header
     4.5  E-Tag
5    Locking
     5.1  Locking: Introduction
          5.1.1   Exclusive Vs. Shared Locks
          5.1.2   Required Support
     5.2  LOCK Method
          5.2.1   Operation
          5.2.2   The Effect of Locks on Properties and
                  Containers
          5.2.3   Locking Replicated Resources
          5.2.4   Locking Multiple Resources
          5.2.5   Interaction with other Methods
          5.2.6   Lock Compatibility Table
          5.2.7   Status Codes
          5.2.8   Lock-Info Request Header
          5.2.9   Owner Request Header
          5.2.10  Time-Out Header
          5.2.11  Lock Response
          5.2.12  Example - Simple Lock Request
          5.2.13  Example - Multi-Resource Lock Request
     5.3  Write Lock
          5.3.1   Methods Restricted by Write Locks
          5.3.2   Write Locks and Properties
          5.3.3   Write Locks and Null Resources
          5.3.4   Write Locks and Collections
          5.3.5   Write Locks and COPY/MOVE
          5.3.6   Re-issuing Write Locks
          5.3.7   Write Locks and The State-Token Header
     5.4  Lock Tokens
          5.4.1   Problem Description
          5.4.2   Lock Token Introduction
          5.4.3   Generic Lock Tokens
          5.4.4   OpaqueLockToken Lock Token
     5.5  UNLOCK Method
          5.5.1   Problem Definition
          5.5.2   Example
     5.6  Discovery Mechanisms
          5.6.1   Lock Capability Discovery
          5.6.2   Active Lock Discovery
6    Version Control
7    Internationalization Support
8    Security Considerations
9    Copyright
10   Acknowledgements
11   References
12   Authors' Addresses



1    Terminology

Collection - A resource that contains member resources.

Member Resource - a resource referred to by a collection. There
are two types of member resources: external and internal.

Internal Member Resource - the name given to a member resource of
a collection whose URI is relative to the URI of the collection.

External Member Resource - a member resource with an absolute URI
that is not relative to its parent's URI.

Properties - A set of name/value pairs that contain descriptive
information about a resource.

Live Properties - Properties whose semantics and syntax are
enforced by the server. For example, a live "read-only" property
that is enforced by the server would disallow PUTs to the
associated resource.

Dead properties - Properties whose semantics and syntax are not
enforced by the server. A dead "read-only" property would not be
enforced by the server and thus would not be used by the server
as a reason to disallow a PUT on the associated resource.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", SHOULD NOT", "RECOMMENDED",  "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
RFC 2119 [Bradner, 1997].


2    Data Model and Methods for DAV Properties

2.1  Introduction


2.1.1     The DAV Property

Properties are pieces of data that describe the state of a
resource. Properties are data about data. The term property is
used within this specification to disambiguate the concept from
the overloaded terms "metadata" and "attribute".

Properties are used within distributed authoring environments to
provide for efficient discovery and management of resources. For
example, a 'subject' property might allow for the indexing of all
resources by their subject, and an 'author' property might allow
for the discovery of what authors have written which documents.


2.1.2     Existing Metadata Proposals

Properties have a long played an essential role in the
maintenance of large document repositories, and many current
proposals contain some notion of a property. These include PICS
[Miller et al., 1996], PICS-NG, the Rel/Rev draft [Maloney,
1996], Web Collections, XML [Bray, Sperberg-McQueen, 1997],
several proposals on representing relationships within HTML,
digital signature manifests (DCMF), and a position paper on Web
metadata architecture [Berners-Lee, 1997].

Some proposals come from a digital library perspective. These
include the Dublin Core [Weibel et al., 1995] metadata set and
the Warwick Framework [Lagoze, 1996], a container architecture
for different metadata schemas. The literature includes many
examples of metadata, including MARC [MARC, 1994], a
bibliographic metadata format, RFC 1807 [Lasher, Cohen, 1995], a
technical report bibliographic format employed by the Dienst
system, and the proceedings from the first IEEE Metadata
conference describe many community-specific metadata sets.

Participants of the 1996 Metadata II Workshop in Warwick, UK
[Lagoze, 1996], noted that, "new metadata sets will develop as
the networked infrastructure matures" and "different communities
will propose, design, and be responsible for different types of
metadata." These observations can be corroborated by noting that
many community-specific sets of metadata already exist, and there
is significant motivation for the development of new forms of
metadata as many communities increasingly make their data
available in digital form, requiring a metadata format to assist
data location and cataloging.


2.1.3     Properties and HTTP Headers

Properties already exist, in a limited sense, within HTTP through
the use of message headers. However, in distributed authoring
environments a relatively large number of properties are needed
to describe the state of a resource, and setting/returning them
all through HTTP headers is inefficient. Thus a mechanism is
needed which allows a principal to identify a set of properties
in which the principal is interested and to then set or retrieve
just those properties.


2.2  A Property Model for HTTP Resources

2.2.1     Overview

The DAV property model is based on name/value doubles. The name
of a property identifies the property's syntax and semantics, and
provides an address with which to refer to a property. The name
and value of a property is expressed as a well-formed XML
element, where the name of the property is the name of the XML
element, and the value of the property MUST be either blank, or a
well-formed XML element value.


2.2.2     Property Namespace


2.2.2.1   Problem Definition

The requirement is to be able to associate a value with a
property name on a resource.  It must be possible to associate a
URL with the property name.


2.2.2.2   Solution Requirement

Ideally a property namespace should work well with extant
property implementations as well as database systems. The DAV
property namespace has been specified with the following two
facts in mind:
    Namespaces associated with flat file systems are ubiquitous.
    The majority of databases use a fixed schema mechanism.
The last point makes efficient implementation of hierarchical
properties difficult. Specifically, each property has a random
set of children; the best a relational database can do is provide
a table with name and value, where the value is a series of
indexes into other tables and each index represents a specific
value. However most RDBS do not provide for table pointers, only
index values. Such a system would have to be jury-rigged to
handle table pointers. In addition, indexing systems are
optimized for a small set of relatively large tables;
hierarchical property systems tend toward many properties, each
with different numbers and types of children, thus potentially
requiring a table for each child.

It would seem best to implement a flat property namespace,
inducing a natural isomorphism between DAV and most native file
systems. Adopting such a model will not restrict RDBS from taking
full advantage of their search facilities.

However, it seems that future trends might be toward hierarchical
properties. Therefore, DAV requirements [Slein et al.] stipulate
that the design of the flat property system MUST be such that it
will be possible to add true hierarchical properties later
without breaking downlevel clients. Specifically, a flat client
MUST be able to speak to a hierarchical server and a hierarchical
client MUST be able to speak to a flat server. Worst case either
way MUST be that the request fails.


2.2.2.3   Property Names

A property name identifies both the syntax and semantics of the
property's value. It is critical that property names do not
collide, e.g., two principals defining the same property name
with two different meanings.

The URI framework provides a mechanism to prevent namespace
collision and for varying degrees of administrative control.
Rather than reinvent these desirable features, DAV properties
make use of them by requiring that all DAV property names MUST be
URIs.  Since a property is also an XML element, the name of the
XML element is a URI.

The property namespace is flat, that is, it is not possible to
string together a series of property names in order to refer to a
hierarchy of properties. Thus it is possible to refer to a
property B but not a property A/B, where A is also a property
defined on the resource.

Finally, it is not possible to define the same property twice as
this would cause a collision in the resource's property
namespace.


2.3  Schemas

A schema is a group of property names and XML elements.

Schema discovery is used to determine if a system supports a
group of properties or XML elements. A property does not
necessarily contain sufficient information to identify any
schema(s) to which it may belong.

As with property names, schemas MUST use URIs as their names.

A resource declares its support for a schema by defining a
property whose name is the same as the schema's. The property
SHOULD contain the PropSchema XML element.


2.3.1     PropSchema XML Element

Name:     http://www.ietf.org/standards/dav/PropSchema
Purpose:  To provide information about properties
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Values=   [DTD] [DefinedProps]
Description:This property contains the definition of the schema.
This definition consists of two parts. A DTD element that
contains a DTD that declares all XML elements and DefinedProps
that defines any properties associated with the schema. As with
all XML it is possible to add extra XML elements. Therefore
schemas may define extra XML elements which are to be included
with their values.

2.3.2     DTD XML Element

Name:          http://www.ietf.org/standards/dav/DTD
Purpose:  To contain the DTD for XML elements associated with the
schema.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Values:   XML Declaration statements


2.3.3     DefinedProps XML Element

Name:          http://www.ietf.org/standards/dav/DefinedProps
Purpose:  To contain a list of properties defined by the schema.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Values=   1*PropEntries

2.3.4     PropEntries XML Element

Name:          http://www.ietf.org/standards/dav/PropEntries
Purpose:  To contain the name of a defined property, the DTD of
its value, and its live/dead status.
Schema:   http://www.ietf.org/standards/dav/
Parent:   DefinedProps
Values=   Prop [DTD] [Live]
Description:Prop contains the name of the property. The DTD
contains the DTD of the property's value. Live, if defined,
indicates that the property has semantics and syntax that are
enforced by the server.


2.3.5     Live XML Element

Name:          http://www.ietf.org/standards/dav/Live
Purpose:  If present this indicates the server MUST enforce the
syntax and semantics of the property.
Schema:   http://www.ietf.org/standards/dav/
Parent:   PropEntries


2.4  DAV Schema

The DAV Schema is specified as
http://www.ietf.org/standards/dav/. This schema is used to
indicate support for
    properties that may be defined on a resource and
    XML elements that may be returned in responses.


2.4.1     DAV Property

Name:          http://www.ietf.org/standards/dav
Purpose:  Defines support for the DAV schema and protocol.
Schema:   http://www.ietf.org/standards/dav/
Values=   PropSchema Level
Description:This property indicates that the resource supports
the DAV schema and protocol to the level indicated. THE VALUE IN
PROPSCHEMA IS TBD, WE NEED TO PROVIDE IT IN AN APPENDIX.


2.4.2     Level XML Element

Name:          http://www.ietf.org/standards/dav/level
Purpose:  To indicate the level of DAV compliance the resource
meets.
Schema:   http://www.ietf.org/standards/dav/
Parent:   DAV
Values=   "1" | "2" | "3"
Description:A value of 1 for level indicates that the resource
supports the property and namespace sections of the DAV
specification. Level 2 indicates that the resource supports level
1 and the lock section of the specification, with a minimum
locking capability of the write lock. Level 3 indicates support
for levels 1 and 2 as well as support for the versioning section
of the DAV specification.


2.4.3     Prop XML element

Name:          http://www.ietf.org/standards/dav/prop
Purpose:  Contains properties related to a resource.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Values:   XML Elements
Description:The Prop XML element is a generic container for
properties defined on resources. All elements inside Prop MUST
define properties related to the resource. No other elements may
be used inside of a Prop element.


2.4.4     PropLoc XML Attribute

Name:          http://www.ietf.org/standards/dav/PropLoc
Purpose:  To specify the location of the associated property.
Schema:   http://www.ietf.org/standards/dav/
Values=   URL
Description:This attribute is used with elements inside of Props
contained in responses to specify the URL of the property on the
associated resource. The PropLoc attribute MUST NOT be used in
requests.


2.4.5     Example

<?XML:Namespace href="http://www.ietf.org/standards/dav/" AS="D"/>
<?XML:Namespace href="AIIM:Dublin:" AS="A"/> <D:Prop>
     <A:Author D:PropLoc="http://www.foo.com/resource/props/Author">
          Larry Masinter
     </A:Author>
</D:Prop>



The previous specifies that the property author exists on some
unspecified resource and that the property can be directly
referenced at http://www.foo.com/resource/props/Author. The
resource upon which the property is defined must be determined
from context.


2.5  Property Identifiers


2.5.1     Problem Definition

DAV properties are resources and thus may have a URI where the
value of an instance of the property may be retrieved.  This URI
is separate from the URI name of the property, which identifies
the syntax and semantics of the property, but which does not give
information on how to access the value of an instance of the
property.

A server is free to assign whatever URI it chooses to identify an
instance of a property defined on a resource. In fact, a server
is free not to reveal the URI of an instance of a particular
resource and instead require that the client access the property
through PROPFIND and PROPPATCH.  However, many servers will want
to allow clients to directly manipulate properties. On these
servers, a client can discover the URI of an instance of a
property by performing a PROPFIND and examining the PropLoc
attribute, if returned, of each property.

2.6  Link XML Element

2.6.1     Problem Description

A mechanism is needed to associate resources with other
resources. These associations, known as links, consist of three
values, a type describing the nature of the association, the
source of the link, and the destination of the link. In the case
of annotation, neither the source nor the destination of a link
need be the resource upon which the link is recorded.


2.6.2     Solution Requirements

The association mechanism MUST make use of the DAV property
mechanism in order to make the existence of the associations
searchable.


2.6.3     Link XML Element

Name:          http://www.ietf.org/standards/dav/link
Purpose:  To identify a property as a link and to contain the
source and destination of that link.
Schema:   http://www.ietf.org/standards/dav/
Values=   1*Src 1*Dst
Description:Link is used to provide the sources and destinations
of a link. The type of the property containing the Link XML
element provides the type of the link. Link is a multi-valued
element, so multiple Links may be used together to indicate
multiple links with the same type.


2.6.4     Src XML Element

Name: http://www.ietf.org/standards/dav/src
Purpose: To indicate the source of a link.
Schema: http://www.ietf.org/standards/dav/
Parent: http://www.ietf.org/standards/dav/link
Values= URI


2.6.5     Dst XML Element

Name: http://www.ietf.org/standards/dav/Dst
Purpose: To indicate the destination of a link
Schema: http://www.ietf.org/standards/dav/
Parent: http://www.ietf.org/standards/dav/link
Values= URI


2.6.6     Example

<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace
     href = "http://www.foocorp.com/Project/" AS = "F"/>
<D:Prop>
     <Source>
          <Link>
               <F:ProjFiles>Source</F:ProjFiles>
               <src>http://foo.bar/program</src>
               <dst>http://foo.bar/src/main.c</dst>
          </Link>
          <Link>
               <F:ProjFiles>Library</F:ProjFiles>
               <src>http://foo.bar/program</src>
               <dst>http://foo.bar/src/main.lib</dst>
          </Link>
          <Link>
               <F:ProjFiles>Makefile</F:ProjFiles>
               <src>http://foo.bar/program</src>
               <dst>http://foo.bar/src/makefile</dst>
     <Link>
     </Source>
</D:Prop>



In this example the resource http://foo.bar/program has a source
property defined which contains three links. Each link contains
three elements, two of which, src and dst, are part of the DAV
schema defined in this document, and one which is defined by the
schema http://www.foocorp.com/project/ (Source, Library, and
Makefile). A client which only implements the elements in the DAV
spec will not understand the foocorp elements and will ignore
them, thus seeing the expected source and destination links. An
enhanced client may know about the foocorp elements and be able
to present the user with additional information about the links.


2.7  Multi-Status Response


2.7.1     Problem Definition

Some methods effect more than one resource. The effect of the
method on each of the scoped resources may be different, as such
a return format that can specify the effect of the method on each
resource is needed.


2.7.2     Solution Requirements

The solution must:
 communicate the status code and reason
 give the URI of the resource on which the method was invoked
 be consistent with other return body formats

2.7.3     Multi-Status Response

The default multi-status response body is an text/xml HTTP entity
that contains a single XML element called multiresponse, which
contains a set of XML elements called response, one for each 200,
300, 400, and 500 series status code generated during the method
invocation.  100 series status codes MUST NOT be recorded in a
response XML element.


2.7.3.1   Multiresponse

Name: http://www.ietf.org/standards/dav/multiresponse
Purpose:  Contains multiple response messages.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Value:    1*Response [ResponseDescription]
Description:The ResponseDescription at the top level is used to
provide a general message describing the over arching nature of
the response. If this value is available an application MAY use
it instead of presenting the individual response descriptions
contain within the responses.
2.7.3.2   Response

Name: http://www.ietf.org/standards/dav/response
Purpose:  Holds a single response
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Value:    (Prop | HREF) Status [ResponseDescription]
Description: Prop MUST contain one or more empty XML elements
representing the name of properties. Multiple properties may be
included if the same response applies to them all. If HREF is
used then the response refers to a problem with the referenced
resource, not a property.


2.7.3.3   Status

Name: http://www.ietf.org/standards/dav/status
Purpose:  Holds a single HTTP status-line
Schema:   http://www.ietf.org/standards/dav/
Parent:   Response
Value:    status-line   ;status-line defined in [Fielding et al.,
1997]


2.7.3.4   ResponseDescription

Name:
http://www.ietf.org/standards/dav/ResponseDescription
Purpose:  Contains a message that can be displayed to the user
explaining the nature of the response.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Multiresponse and/or Response
Value:    Any
Description:   This XML element provides information suitable to
be presented to a user.


2.8  Properties and Methods


2.8.1     DELETE

As properties are resources, the deletion of a property causes
the same result as the deletion of any resource. It is worth
pointing out that the deletion of a property effects both direct
manipulation, that is by the property's URL, as well as indirect
discovery and manipulation, that is PROPPATCH and PROPFIND.


2.8.2     GET

A GET with a Request-URI that identifies a property returns the
name and value of that property.  Accept types may be used to
specify the format of the return value, but all DAV compliant
servers MUST at minimum support a return type of text/xml. If
text/xml is used as the response format then it MUST return the
name and value of the property using the Prop XML element.


2.8.2.1   Example

The following example assumes that the property's URL, originally
generated by the server, was discovered by examining the proploc
XML attribute returned on a result from a FINDPROP.

GET /bar.html;prop=z39.50_authors HTTP/1.1
Host: foo.com


HTTP/1.1 200 OK
Content-Type: text/xml
Content-Length: xxxx
E-tag: "1234"
Last-Modified: xxxx


<?XML:Namespace href = "http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace href = "http://www.w3.com/standards/z39.50/"AS = "Z"/>
<D:prop>
     <Z:Authors>
          <Z:Author>Jane Doe</Z:Author>
          <Z:Author>Joe Doe</Z:Author>
           <Z:Author>Lots o'Doe</Z:Author>
     </Z:Authors>
</D:prop>




2.8.3     PROPPATCH

The PROPPATCH method processes instructions specified in the
request body to create and/or remove properties defined on the
resource identified by Request-URI.

All DAV compliant servers MUST process instructions which are
specified using the PropertyUpdate, Create, and Remove XML
elements of the DAV schema.  The request message body MUST
contain at least one PropertyUpdate XML element.  Instruction
processing MUST occur in the order instructions are received
(i.e., from top to bottom), and MUST be performed atomically.


2.8.3.1   PropertyUpdate XML element

Name:          http://www.ietf.org/standards/dav/PropertyUpdate
Purpose:  To contain a request to alter the properties on a
resource.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Values=   *(Create | Remove)
Description:This XML element is a container for the information
required to modify the properties on the resource. This XML
element is multi-valued.


2.8.3.2   Create XML element

Name:          http://www.ietf.org/standards/dav/create
Purpose:  To create the DAV properties specified inside the
Create XML element.
Schema:   http://www.ietf.org/standards/dav/
Parent:   http://www.ietf.org/standards/dav/PropertyUpdate
Values=   Prop
Description:This XML element MUST contain only a Prop XML
element. The elements contained by Prop specify the name and
value of properties that are created on Request-URI. If a
property already exists then its value is replaced. The Prop XML
element MUST NOT contain a PropLoc XML attribute.


2.8.3.3   Remove XML element

Name:          http://www.ietf.org/standards/dav/remove
Purpose:  To remove the DAV properties specified inside the
Remove XML element.
Schema:   http://www.ietf.org/standards/dav/
Parent:   http://www.ietf.org/standards/dav/PropertyUpdate
Values=   Prop
Description:Remove specifies that the properties specified in
Prop should be removed. Specifying the removal of a property that
does not exist is not an error. All the elements in Prop MUST be
empty, as only the names of properties to be removed are
required.


2.8.3.4   Response

The response MUST have a response body that contains a
multiresponse identifying the results for each property.


2.8.3.5   Response Codes

200 OK - The command succeeded. As there can be a mixture of
Create and Removes in a body, a 201 Create seems inappropriate.
403 Forbidden - The client, for reasons the server chooses not to
specify, can not alter one of the properties.
405 Conflict - The client has provided a value whose semantics
are not appropriate for the property. This includes trying to set
read only properties.
413 Request Entity Too Long - If a particular property is too
long to be recorded then a composite XML error will be returned
indicating the offending property.
417 Insufficient Space on Resource - The resource does not have
sufficient space to record the state of the resource after the
execution of this method.
418 Atomicity Failure - The command was not executed because of
an atomicity failure elsewhere the caused the entire command to
be aborted.


2.8.3.6   Example


PROPPATCH /bar.html HTTP/1.1
Host: www.foo.com
Content-Type: text/xml
Content-Length: xxxx


<?XML:Namespace href = "http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace href = "http://www.w3.com/standards/z39.50/" AS = "Z"/>
<D:PropertyUpdate>
     <Create>
          <prop>
               <Z:authors>
                    <Z:Author>Jim Whitehead</Z:Author>
                    <Z:Author>Roy Fielding</Z:Author>
               </Z:authors>
          </Prop>
     </Create>
     <Remove>
          <prop><Z:Copyright-Owner/></prop>
     </Remove>
</D:PropertyUpdate>
HTTP/1.1 405 Conflict
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace href="http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace href="http://www.w3.com/standards/z39.50/" AS = "Z"/>
<D:MultiResponse>
     <ResponseDescription> Copyright Owner can not be deleted or
altered.</ResponseDescription>
     <Response>
          <Prop><Z:authors/></Prop>
          <Status>HTTP/1.1 418 Atomicity Failure</Status>
     </Response>
     <Response>
          <Prop><Z:Copyright-Owner/></Prop>
          <Status>HTTP/1.1 405 Conflict</Status>
     </Response>
</D:MultiResponse>




2.8.4     PUT

A PUT is specified in order to control what is returned by a GET.
However a GET on a property always returns a predefined property
containment format. Therefore PUT can not be used if the Request-URI refers to a property.


2.8.5     PROPFIND

The PROPFIND method retrieves properties defined on Request-URI.
The request message body is an XML document that MUST contain
only one PropFind XML element, which specifies the type of
property find action to be performed.  The XML element contained
by PropFind specifies the type of action to be performed:
retrieve all property names and values (Allprop), retrieve only
specified property names and values (Prop), or retrieve only a
list of all property names (Propname).  When a Prop XML element
is present, it specifies a list of the names of properties whose
name and value are to be returned.  The Prop element, when used
within a FINDPROP request body MUST be empty.

The response is a text/xml message body that contains a
Multiresponse XML element which describes the results of the
attempts to retrieve the various properties. If a property was
successfully retrieved then its value MUST be returned in the
Prop XML element. In the case of Allprop and Findprop, if a
principal does not have the right to know if a particular
property exists, an error MUST NOT be returned. The results of
this method SHOULD NOT be cached.


2.8.5.1   PropFind XML element

Name:          http://www.ietf.org/standards/dav/Propfind
Purpose:  To specify the set of matching properties
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Values=   (Prop | Allprop | Propname)
Description: PropFind is a container element for the exact
specification of a PROPFIND request.
2.8.5.2   Allprop

Name:          http://www.ietf.org/standards/dav/Allprop
Purpose:  To specify that all properties are to be returned
Schema:   http://www.ietf.org/standards/dav/
Parent:   PropFind
Description: Its presence in a PROPFIND request specifies the
name and value of all properties defined on the resource MUST be
returned.


2.8.5.3   Propname

Name:          http://www.ietf.org/standards/dav/Propname
Purpose:  To specify that the names of all properties defined on
the resource are to be returned.
Schema:   http://www.ietf.org/standards/dav/
Parent:   PropFind
Description: Its presence in a PROPFIND request specifies the
name of all properties defined on the resource MUST be returned.


2.8.5.4   PropFindResult XML element

Name: http://www.ietf.org/standards/dav/PropFindResult
Purpose: To contain the results of a SEARCH request
Schema: http://www.ietf.org/standards/dav/
Parent: Any
Values: Prop


2.8.5.5   Example 1 - Prop


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml



<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" AS = "G"/>
<?XML:Namespace href =
     "http://www.foo.bar/boxschema/" AS = "B"/>
<G:PROPFIND>
     <prop>
          <B:bigbox>
          <B:author>
          <B:DingALing>
          <B:Random>
     </prop>
</G:PROPFIND>




HTTP/1.1 207 Multi-Response
Content-Type: text/xml
Content-Length: xxxxx


<?XML:Namespace href ="http://www.ietf.org/standards/dav/" AS = "S">
<?XML:Namespace href = "http://www.foo.bar/boxschema" AS = R">
<D:MultiResponse>
     <ResponseDescription> There has been an access violation
error. </ResponseDescription>
     <Response>
          <Prop>
               <R:bigbox D:Proploc="http://prop.com/BoxType">
                    <BoxType>Box type A</BoxType>
               </R:bigbox>
               <R:author D:Proploc="http://prop.com/Author">
                    <Name>J.J. Dingleheimerschmidt</Name>
               </R:author>
          </Prop>
          <Status>HTTP/1.1 200 Success</Status>
</Response>
     <Response>
          <Prop><R:DingALing/><R:Random/></>
          <Status>HTTP/1.1 403 Forbidden</Status>
          <ResponseDescription> The user does not have access to
the DingALink property. </ResponseDescription>
     </Response>
</D:MultiResponse>



The result will return all properties on the container. In this
case only two properties were found. The principal did not have
sufficient access rights to see the third and fourth properties
so an error was returned.


2.8.5.6   Example 2 - Allprop


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml


<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" AS = "G"/>
<G:PROPFIND>
     <Allprop/>
</G:PROPFIND>




HTTP/1.1 200 Success
Content-Type: text/xml
Content-Length: xxxxx


<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" As = "S">
<?XML:Namespace href = "http://www.foo.bar/boxschema" AS = R">
<S:MultiResponse>
     <Prop>
          <R:bigbox D:Proploc="http://prop.com/BigBox">
               <BoxType>Box type A</BoxType>
          </R:bigbox>
          <R:author D:Proploc="http://prop.com/Author">
               <Name>Hadrian</Name>
          </R:author>
     </Prop>
     <Status>HTTP/1.1 200 Success</Status>
</S:MultiResponse>



This particular client only had the right to see two properties,
BoxType and Author. No error is returned for the remaining
properties, as the client does not even have sufficient rights to
know they exist. If the client did have the right to know they
existed but did not have the right to see their value, a 207
multi-response with a multiresponse, as used in the previous
example, would have been returned.


2.8.5.7   Example 3 - Propname


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml


<?XML:Namespace href = "http://www.ietf.org/standards/dav/" AS = "G"/>
<G:PROPFIND>
     <Propname/>
</G:PROPFIND>



HTTP/1.1 200 Success
Content-Type: text/xml
Content-Length: xxxxx

<?XML:Namespace href = "http://www.ietf.org/standards/dav/" As = "S">
<?XML:Namespace href = "http://www.foo.bar/boxschema" AS = "R">
<S:MultiResponse>
     <Prop>
          <R:bigbox D:Proploc="http://prop.com/BigBox"/>
          <R:author D:Proploc="http://prop.com/Author"/>
          <R:DingALing/>
          <R:Random/>
     </Prop>
     <Status>HTTP/1.1 200 Success</Status>
</S:MultiResponse>



In this case only two of the properties have direct URLs
available, while the other two properties can only be referenced
via PROPFIND and PROPPATCH.


3    A Proposal for Collections of Web Resources and Name Space   Operations

3.1  Observations on the HTTP Object Model

This section provides a description of a new type of Web
resource, the collection, and discusses its interactions with the
HTTP URL namespace.  This discussion is a prerequisite for the
specification of methods that operate on collections, given later
in this document.


3.1.1     Collection Resources

A collection is a resource whose state consists of a list of
internal members, a list of external members, and a set of
properties.  An internal member resource MUST have a URI that is
immediately relative to the base URI of the collection, that is,
a relative URI in which "../" is illegal, which must begin with
"./" and which MAY contain only one other "/" at the end of the
URI. An external member resource MUST be an absolute URI that is
not an internal URI.  Any given internal or external URI MUST
only belong to the collection once, i.e., multiple instances of
URIs in a collection are illegal.  Properties defined on
collections have no special distinction, and behave exactly as do
properties on non-collection resources.

The purpose of a collection resource is to model collection-like
objects (e.g., a filesystem directory) within a server's
namespace.  Once these objects have been modeled with
collections, a client may perform an INDEX, add and remove
external members using ADDREF and DELREF, and perform recursive
operations, such as a full hierarchy copy.

To support methods which operate on collections, a server SHOULD
model its collection-like objects with collection resources.  For
example, a server which is implemented on top of a filesystem
SHOULD treat all filesystem directories exposed by the server as
collection resources.


3.1.2     Creation and Retrieval of Collection Resources

This document specifies the MKCOL method to create new collection
resources, and the INDEX method to list their contents.

In HTTP/1.1, the PUT method is defined to store the request body
at the location specified by Request-URI.  While a description
format for a collection can readily be constructed that could be
used with PUT, the implications of sending such a description to
the server are undesirable.  For example, if a description of a
collection that omitted some existing resources were PUT to a
server, this might be interpreted as a command to remove those
members.  This would extend PUT to perform DELETE functionality,
which is undesirable since it changes the semantics of PUT, and
makes it difficult to control DELETE functionality with an access
control scheme based on methods.

While the POST method is sufficiently open-ended that a "create a
collection" POST command could be constructed, this is
undesirable because it would be difficult to separate access
control for collection creation from other uses of POST if they
both use the same method.

While it might seem desirable to have GET return a listing of the
members of a collection, this is foiled by the existence of the
"index.html" de-facto standard namespace redirection, in which a
GET request on a collection is automatically redirected to the
index.html resource.

The exact definition of the behavior of GET and PUT on
collections is defined later in this document.


3.1.2.1   Example

The structured resource http://foo/bar is created with a PUT. Bar
is a multipart/related file with two members http://foo/bar/a and
http://foo/bar/b. If bar were deleted then both a and b would
also be deleted since they are all really just one resource. If
http://foo/bar/a/c was PUT then a DELETE on http://foo/bar/a
would also delete http://foo/bar/a/c as c was created with a PUT
not a MKCOL.

If http://foo/bar/b/d is created with a MKCOL and
http://foo/bar/b/d/e was created then a DELETE on d would fail
because d is a collection with an internal member. However the
existence of the collection d is something of an illusion. If a
DELETE was executed on http://foo/bar then everything would be
deleted, even though http://foo/bar/b/d was created with a MKCOL.

Thus the effect of a MKCOL within a composite resource's
namespace is felt on its children, not its ancestors. The
children of d MUST be treated as members of a collection when a
method is executed on d. But a method executed on b or a is
treated as if there only existed a non-collection resource.

3.1.3     Source Resources and Output Resources

For many resources, the entity returned by GET exactly matches
the persistent state of the resource, for example, a GIF file
stored on a disk.  For this simple case, the URL at which a
resource is accessed is identical to the URL at which the source
(the persistent state) of the resource is accessed. This is also
the case for HTML source files that are not processed by the
server prior to transmission.

However, the server can sometimes process HTML resources before
they are transmitted as a return entity body. For example,
server-side-include directives within an HTML file instruct a
server to replace the directive with another value, such as the
current date.  In this case, what is returned by GET (HTML plus
date) differs from the persistent state of the resource (HTML
plus directive). Typically there is no way to access the HTML
resource containing the unprocessed directive.

Sometimes the entity returned by GET is the output of a data-producing process that is described by one or more source
resources (that may not even have a location in the URL
namespace).  A single data-producing process may dynamically
generate the state of a potentially large number of output
resources. An example of this is a CGI script that describes a
"finger" gateway process that maps part of the namespace of a
server into finger requests, such as
http://www.foo.bar.org/finger_gateway/user@host.

In the absence of distributed authoring capability, it is
acceptable to have no mapping of source resource(s) to the URI
namespace, and in fact has desirable security benefits. However,
if remote editing of the source resource(s) is desired, the
source resource(s) should be given a location in the URI
namespace. This source location should not be one of the
locations at which the generated output is retrievable, since in
general it is impossible for the server to differentiate requests
for source resources from requests for process output resources.
There is often a many-to-many relationship between source
resources and output resources.

For DAV compliant servers all output resources which have a
single source resource (and that source resource has a URI), the
URI of the source resource SHOULD be stored in a single link on
the output resource with type
http://www.ietf.org/standards/dav/source. Note that by storing
the source URI in links on the output resources, the burden of
discovering the source is placed on the authoring client.


3.2  MKCOL Method


3.2.1     Problem Description

A client must be able to create a collection.


3.2.2     Solution Requirements

The solution must ensure that a collection has been made (i.e.
that it responds to the INDEX method) as opposed to a non-collection resource. If a collection could not be made, it must
indicate this failure to the user-agent.


3.2.3     Request

MKCOL creates a new collection resource at the location specified
by the Request-URI. If the Request-URI exists, then MKCOL must
fail. During MKCOL processing, a server MUST make the Request-URI
a member of its parent collection. If no such an ancestor exists,
the method MUST fail. When the MKCOL operation creates a new
collection resource, all ancestors MUST already exist, or the
method MUST fail with a 409 Conflict status code.  For example,
if a request to create collection /a/b/c/d/ is made, and neither
/a/b/ nor /a/b/c/ exist, the request MUST fail.


3.2.3.1   MKCOL Without Request Body

When MKCOL is invoked without a request body, the newly created
collection has no members.


3.2.3.2   MKCOL With Request Body

A MKCOL request message MAY contain a message body.  The behavior
of a MKCOL request when the body is present is limited to
creating collections, members of a collection, bodies of members
and properties on the collections or members. If the server
receives a MKCOL request entity type it does not support or
understand it MUST respond with a 415 (Unsupported Media Type)
status code.  The exact behavior of MKCOL for various request
media types is undefined in this document, and will be specified
in separate documents.


3.2.4     Response

Responses from a MKCOL request are not cacheable, since MKCOL has
non-idempotent semantics.
201 (Created) - The collection or structured resource was created
in its entirety.
403 (Forbidden) - This indicates at least one of two conditions:
1) The server does not allow the creation of collections at the
given location in its namespace, and 2) The parent collection of
the Request-URI exists but cannot accept members.
409 (Conflict) - A collection cannot be made at the Request-URI
until one or more intermediate collections have been created.

 415 (Unsupported Media Type)- The server does not support the
request type of the body.
417 (Insufficient Space on Resource) - The resource does not have
sufficient space to record the state of the resource after the
execution of this method.


3.2.5     Example

This example creates a container collection called
/webdisc/xfiles/ on the server www.server.org.

     MKCOL /webdisc/xfiles/ HTTP/1.1
     Host: www.server.org

     HTTP/1.1 201 Created


3.3  Standard DAV Properties

The following properties are defined on DAV compliant resources.
All enclosed properties are part of the DAV Schema.


3.3.1     IsCollection Property

Name:     http://www.ietf.org/standards/dav/iscollection
Purpose:  This property contains a Boolean value that is set to
"true" if the resource is a collection
Schema:   http://www.ietf.org/standards/dav/
Value:    ("true" | "false")
Description: This property MUST be defined on all DAV compliant
resources.


3.3.2     DisplayName Property

Name: http://www.ietf.org/standards/dav/displayname
Purpose:  A name for the resource that is suitable for
presentation to a user.
Schema:   http://www.ietf.org/standards/dav/
Value:    Any valid XML character data (as defined in [Bray,
Sperberg-McQueen, 1997])
Description: This property SHOULD be defined on all DAV compliant
resources. If present, the property contains a description of the
resource that is suitable for presentation to a user.


3.3.3     CreationDate Property

Name: http://www.ietf.org/standards/dav/creationdate
Purpose:  The time and date the resource was created.
Schema:   http://www.ietf.org/standards/dav/
Value:    The time and date MUST be given in ISO 8601 format
[ISO8601]
Description: This property SHOULD be defined on all DAV compliant
resources. If present, it contains a timestamp of the moment when
the resource was created (i.e., the moment it had non-null
state).


3.3.4     GETentity Property

Name: http://www.ietf.org/standards/dav/GETentity
Purpose:  Contains the value of headers that are returned by a
GET without Accept headers.
Schema:   http://www.ietf.org/standards/dav/
Value:    Content-Type Content-Length Content-Language Last-Modified Etag Creation-Date
Description: This property MUST be defined on all DAV compliant
resources unless GET is not supported, in which case this
property MUST NOT be defined. This property MUST contain at most
one instance of each element in its Value, if they are defined.

3.3.5     INDEXentity Property

Name: http://www.ietf.org/standards/dav/INDEXentity
Purpose:  Contains the value of headers that are returned by an
INDEX.
Schema:   http://www.ietf.org/standards/dav/
Value:    Content-Type Content-Length Content-Language Last-Modified Etag Creation-Date
Description: This property MUST be defined on all DAV compliant
resources unless INDEX is not supported, in which case this
property MUST NOT be defined. This property MUST contain at most
one instance of each element in its Value, if they are defined.


3.3.6     Content-Type XML Element

Name: http://www.ietf.org/standards/dav/content-type
Purpose:  The content-type of the member resource.
Schema:   http://www.ietf.org/standards/dav/
Parent:   GETentity or INDEXentity
Value:    media-type   ; defined in Section 3.7 of [Fielding et
al., 1997]
Description: If the parent of this element is GETentity, the
value MUST be identical to the content-type returned by a GET on
the resource without Accept headers.  If the parent is
INDEXentity, the value MUST be identical to the content-type
returned by an INDEX on the resource.  If no content-type is
available, this element MUST NOT be defined.


3.3.7     Content-Length XML Element

Name:          http://www.ietf.org/standards/dav/content-length
Purpose:  Describes the default content-length of the resource.
Schema:   http://www.ietf.org/standards/dav/
Value:    content-length ; see section 14.14 of RFC 2068
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the content-length header
returned by a GET on the resource without Accept headers.  If the
parent is INDEXentity, the value MUST be identical to the
content-length returned by an INDEX on the resource.  If no
content-length is available, this element MUST NOT be defined.


3.3.8     Content-Language XML Element

Name:          http://www.ietf.org/standards/dav/content-language
Purpose:  Describes the default natural language of a resource.
Schema:   http://www.ietf.org/standards/dav/
Value:    language-tag   ;language-tag is defined in section
14.13 of RFC 2068
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the content-language header
returned by a GET on the resource without Accept headers.  If the
parent is INDEXentity, the value MUST be identical to the
content-language header returned by an INDEX on the resource.  If
no content-language header is available, this element MUST NOT be
defined.


3.3.9     Last-Modified XML Element

Name:     http://www.ietf.org/standards/dav/last-modified
Purpose:  The date the resource was last modified.
Schema:        http://www.ietf.org/standards/dav/
Parent:        GETentity or INDEXentity
Value:    The date MUST be given in RFC 1123 format using the
rfc-1123  production, defined in section 3.3.1 of [Fielding et al.,
1997].
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the last-modified header
returned by a GET on the resource without Accept headers.  If the
parent is INDEXentity, the value MUST be identical to the last-modified header returned by an INDEX on the resource.  If no
last-modified header is available, this element MUST NOT be defined.


3.3.10    Etag XML Element

Name: http://www.ietf.org/standards/dav/etag
Purpose:  The entity tag of the resource.
Schema:   http://www.ietf.org/standards/dav/
Parent:   GETentity or INDEXentity
Value:    entity-tag  ; defined in Section 3.11 of [Fielding et
al., 1997]
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the entity-tag header returned
by a GET on the resource without Accept headers.  If the parent
is INDEXentity, the value MUST be identical to the entity-tag
header returned by an INDEX on the resource.  If no entity-tag
header is available, this element MUST NOT be defined.


3.4  INDEX Method


3.4.1     Problem Description

A mechanism is needed to discover if a resource is a collection
and if so, list its members.


3.4.2     Solution Requirements

The solution:
 must allow a client to discover the members of a collection
 must always provide a machine-readable description of the
  membership of a collection
 must be leveraged as a more general mechanism to provide a
  list of contents for any resource which can profitably return a
  membership like listing.


3.4.3     The Request

The INDEX method returns a machine-readable representation of the
membership of the resource at the Request-URI.

For a collection, INDEX MUST return a list of its members. All
WebDAV compliant resources MUST support the text/xml response
entity described below.  The INDEX result for a collection MAY
also return a list of the members of child collections, to any
depth.

Collections that respond to an INDEX method with a text/xml
entity MUST contain only one ResInfo element.  This ResInfo
element contains an Href element, which gives the identifier(s)
of the resource, a Prop element, which gives selected properties
of the resource, and a Members element, which contains a ResInfo
element for each member of the collection.  The Prop element MUST
contain at least the following properties, if they are defined
and available: DisplayName, IsCollection, CreationDate,
GETentity, and INDEXentity.

The response from INDEX is cacheable, and SHOULD be accompanied
by an ETag header (see section 13.3.4 of RFC 2068). If GET and
INDEX return different entities for the same resource state, they
MUST return different entity tags.


3.4.4     The Response

200 (OK) - The server MUST send a machine readable response
entity which describes the membership of the resource.


3.4.5     ResInfo XML Element

Name:     http://www.ietf.org/standards/dav/resinfo
Purpose:  Describes a resource.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Value:    Href Prop Members
Description: There MUST be at least one Href element.  Each Href
element contains a URI for the resource, which MUST be an
absolute URI. There MUST be a single Prop element that contains a
series of properties defined on the resource.  If the resource is
a collection, it MAY have at most one Members element, which
describes the members of the collection.


3.4.6     Members XML Element

Name: http://www.ietf.org/standards/dav/members
Purpose:  Describes the membership of a collection resource.
Schema:   http://www.ietf.org/standards/dav/
Parent:   ResInfo
Value:    ResInfo
Description: Contains zero or more ResInfo elements, which
describe members of the collection.


3.4.7     Href XML Element

Name: http://www.ietf.org/standards/dav/href
Purpose:  To identify that the content of the element is a URI.
Schema:   http://www.ietf.org/standards/dav/
Parent:   Any
Value:    URI ; See section 3.2.1 of [Fielding et al., 1997]

3.4.8     Example

INDEX /user/yarong/dav_drafts/ HTTP/1.1
Host: www.microsoft.com

HTTP/1.1 200 OK
Content-Type: text/xml
Content-Length: xxx
Last-Modified: Thu, 11 Sep 1997 23:45:12 GMT
ETag: "fooyyybar"

     <?XML:Namespace href = "http://www.ietf.org/standards/dav/" as = "D"/>
<D:ResInfo>
     <XML:Href>
          http://www.microsoft.com/user/yarong/dav_drafts/
     </XML:Href>
     <Prop>
        <DisplayName>
          WebDAV working drafts directory
        </DisplayName>
        <IsCollection>true</IsCollection>
        <CreationDate>19970418T070304Z</CreationDate>
        <GETentity>
          <Content-Type>text/html</Content-Type>
          <Content-Length>2754</Content-Length>
          <Content-Language>en</Content-Language>
          <Last-Modified>
               Fri, 22 Aug 1997 10:11:26 GMT
          </Last-Modified>
          <Etag>"8675309"</Etag>
        </GETentity>
        <INDEXentity>
          <Content-Type>text/xml</Content-Type>
          <Content-Length>xxx</Content-Length>
          <Last-Modified>
               Thu, 11 Sep 1997 23:45:12 GMT
          </Last-Modified>
          <Etag>"fooyyybar"</Etag>
        </INDEXentity>
     </Prop>

     <Members>
        <ResInfo>
          <XML:Href>
          http://www.microsoft.com/user/yarong/dav_drafts/base
          </XML:Href>
          <Prop>
             <IsCollection
     D:PropLoc="http://www.microsoft.com/user/yarong/dav_drafts/b
     ase;props=IsCollection">
               False
             </IsCollection>
             <DisplayName>
               WebDAV Name Space Operations Draft
             </DisplayName>
             <Creation-Date>19970320T230525Z</Creation-Date>

             <GETentity>
               <Content-Type>application/msword</Content-Type>
               <Content-Length>1400</Content-Length>
               <Content-Language>en</Content-Language>
               <Last-Modified>
                    Fri, 22 Aug 1997 18:22:56 GMT
               </Last-Modified>
               <Etag>"8675309"</Etag>
             </GETentity>
          </Prop>
        </ResInfo>
     </Members>
     </D:ResInfo>


This example shows the result of the INDEX method applied to the
collection resource
http://www.microsoft.com/user/yarong/dav_drafts/.  It returns a
response body in XML format, which gives information about the
container and its sole member,
http://www.microsoft.com/user/yarong/dav_drafts/base. The entry
on the collection confirms that the resource the INDEX was
executed on is a collection. The result also contains the URI of
the IsCollection property on the member resource.


3.5  Behavior of RFC 2068 Methods on Collections

With the introduction of the collection resource type to the HTTP
object model, it is necessary to define the behavior of the
existing methods (defined in RFC 2068) when invoked on a
collection resource to avoid ambiguity.  While some methods, such
as OPTIONS and TRACE behave identically when applied to
collections, GET, HEAD, POST, PUT, and DELETE require some
additional explanation.


3.5.1     GET, HEAD for Collections

The semantics of GET are unchanged when applied to a collection,
since GET is defined as, "retrieve whatever information (in the
form of an entity) is identified by the Request-URI" [Fielding et
al., 1997]. GET when applied to a collection MAY return the
contents of an "index.html" resource, a human-readable view of
the contents of the collection, or something else altogether, and
hence it is possible the result of a GET on a collection will
bear no correlation to the state of the collection.

Similarly, since the definition of HEAD is a GET without a
response message body, the semantics of HEAD are unmodified when
applied to collection resources.


3.5.2     POST for Collections

Since by definition the actual function performed by POST is
determined by the server and often depends on the particular
resource, the behavior of POST when applied to collections cannot
be meaningfully modified because it is largely undefined.  Thus
the semantics of POST are unmodified when applied to a
collection.


3.5.3     PUT for Collections

As defined in the HTTP/1.1 specification [Fielding et al., 1997],
the "PUT method requests that the enclosed entity be stored under
the supplied Request-URI."  Since submission of an entity
representing a collection would implicitly encode creation and
deletion of resources, this specification intentionally does not
define a transmission format for creating a collection using PUT.
Instead, the MKCOL method is defined to create collections.  If a
PUT is invoked on a collection resource it MUST fail.

When the PUT operation creates a new non-collection resource all
ancestors MUST already exist.  If all ancestors do not exist, the
method MUST fail with a 409 Conflict status code.  For example,
if resource /a/b/c/d.html is to be created and /a/b/c/ does not
exist, then the request MUST fail.


3.5.3.1   PUT for Non-Collection Resources

A PUT performed on an existing resource replaces the GET response
entity of the resource, but MUST NOT change the value of any dead
properties defined on the resource.  Live properties defined on
the resource MAY be recomputed during PUT processing.


3.5.4     DELETE for Collections

When DELETE is applied to a collection without internal members
the collection resource, along with its properties, and external
members, MUST be deleted.  A DELETE method applied to a
collection resource containing internal member resources MUST
fail with a 409 Conflict status code.


3.5.5     DELETE Method for Non-Collection Resources

If the DELETE method is issued to a non-collection resource which
is an internal member of a collection, then during DELETE
processing a server MUST remove the Request-URI from its parent
collection. A server MAY remove the URI of a deleted resource
from any collections of which the resource is an external member.


3.6  COPY Method


3.6.1     Problem Description

Currently, in order to create a copy of a resource, the client
must GET an entity and then PUT that entity to the desired
destination. This requires (1) an entity to be transmitted to and
from the server and (2) that the resource be expressible as an
entity with complete fidelity.

This is problematic because of the network traffic involved in
making a copy, and because there is often no way to fully express
a resource as an entity without a loss of fidelity.


3.6.2     Solution Requirements

The solution:
 MUST allow a principal to create a copy of a resource
  without having to transmit the resource to and from the server.


3.6.3     The Request

The COPY method creates a duplicate of the source resource, given
by the Request-URI, in the destination resource, given by the
Destination header.  The Destination header MUST be present.  The
exact behavior of the COPY method depends on the type of the
source resource.


3.6.3.1   COPY for HTTP/1.1 resources

When the source resource is not a collection, and is not a
property, the body of the destination resource MUST be octet-for-octet identical to the body of the source resource. Alterations
to the destination resource do not modify the source resource.
Alterations to the source resource do not modify the destination
resource. Thus, all copies are performed "by-value".

All properties on the source resource MUST be duplicated on the
destination resource, subject to modifying headers, following the
definition for copying properties.

3.6.3.2   COPY for Properties

The following section defines how properties on a resource are
handled during a COPY operation.
Live properties SHOULD be duplicated as identically behaving live
properties at the destination resource. Since they are live
properties, the server determines the syntax and semantics (hence
value) of these properties.  Properties named by the Enforce-Live-Properties header MUST be live on the destination resource, or
the method MUST fail.  If a property is not named by Enforce-Live-Properties and cannot be copied live, then its value MUST be
duplicated, octet-for-octet, in an identically named, dead
resource on the destination resource.

If a property on the source already exists on the resource and
the overwrite header is set to TRUE then the property at the
destination MUST be overwritten with the property from the
source. If the overwrite header is false and the previous
situation exists then the COPY MUST fail with a 409 Conflict.


3.6.3.3   COPY for Collections

A COPY on a collection causes a new, empty collection resource to
be created at the destination with the same properties as the
source resource.  All properties on the source collection MUST be
duplicated on the destination collection, subject to modifying
headers, following the definition for copying properties.  The
new collection MUST NOT contain any members, internal or
external.


3.6.3.4   Type Interactions

If the destination resource identifies a property and the source
resource is not a property, then the copy SHOULD fail.

If the destination resource identifies a collection and the
Overwrite header is "true," prior to performing the copy, the
server MUST perform a DELETE operation on the collection.


3.6.4     The Response

200 (OK) The source resource was successfully copied to a pre-existing destination resource.

201 (Created) The source resource was successfully copied.  The
copy operation resulted in the creation of a new resource.

412 (Precondition Failed) This status code MUST be returned if
the server was unable to maintain the liveness of the properties
listed in the Enforce-Live-Properties header, or if the Overwrite
header is false, and the state of the destination resource is
non-null.

417 (Insufficient Space on Resource) - The destination resource
does not have sufficient space to record the state of the
resource after the execution of this method.

500 (Server Error) The resource was in such a state that it could
not be copied. This may occur if the Destination header specifies
a resource that is outside the namespace the resource is able to
interact with.

3.6.5     Examples


3.6.5.1   Overwrite Example

This example shows resource
http://www.ics.uci.edu/~fielding/index.html being copied to the
location http://www.ics.uci.edu/users/f/fielding/index.html.  The
contents of the destination resource were overwritten, if non-null.

COPY /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html

HTTP/1.1 200 OK


3.6.5.2   No Overwrite Example

The following example shows the same copy operation being
performed, except with the Overwrite header set to "false."  A
response of 412, Precondition Failed, is returned because the
destination resource has a non-null state.

COPY /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html
Overwrite: "false"

HTTP/1.1 412 Precondition Failed


3.7  MOVE Method

3.7.1     Problem Description

The move operation on a resource is the logical equivalent of a
copy followed by a delete, where the actions are performed
atomically.  Using RFC 2068 methods only, this procedure could be
performed in several steps. First, the client could issue a GET
to retrieve a representation of a resource, issue a DELETE to
remove the resource from the server, then use PUT to place the
resource on the server with a new URI. As is the case for COPY -
because of the network traffic involved in making a move, and
because there is often no way to fully express a resource as an
entity without a loss of fidelity - server move functionality is
preferable.

With a WEBDAV server, a principal may accomplish this task by
issuing a COPY and then DELETE. Network load decreases, but the
server load may still be significant because the server must
create a duplicate resource. Were a server to know beforehand
that a principal intended to perform COPY and DELETE operations
in succession, it could avoid the creation of a duplicate
resource.

3.7.2     Solution Requirements

The solution:
 Must prevent the unneeded transfer of entity bodies from and
  to the server.
 Must prevent the unneeded creation of copies by the server.

3.7.3     The Request

The move operation on a resource is the logical equivalent of a
copy followed by a delete, where the actions are performed
atomically. If a resource exists at the destination, the
destination resource will be DELETEd as a side effect of the MOVE
operation, subject to the restrictions of the overwrite header.

3.7.4     The Response

200 (OK) - The resource was moved. A successful response must
contain the Content-Location header, set equal to the URI in
source. This lets caches properly flush any cached entries for
the source. Unfortunately the Content-Location header only allows
a single value so it is not possible for caches unfamiliar with
the MOVE method to properly clear their caches.

412 (Precondition Failed) This status code MUST be returned if
the server was unable to maintain the liveness of the properties
listed in the Enforce-Live-Properties header, or if the Overwrite
header is false, and the state of the destination resource is
non-null.

501 (Not Implemented) - This may occur if the Destination header
specifies a resource which is outside its domain of control
(e.g., stored on another server) resource and the server either
refuses or is incapable of moving to an external resource.

502 (Bad Gateway) - This may occur when moving to external
resources and the destination server refused to accept the
resource.


3.7.5     Examples


3.7.5.1   Overwrite Example

This example shows resource
http://www.ics.uci.edu/~fielding/index.html being moved to the
location http://www.ics.uci.edu/users/f/fielding/index.html.  The
contents of the destination resource were overwritten, if non-null.

MOVE /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html

HTTP/1.1 200 OK
Content-Location:
http://www.ics.uci.edu/users/f/fielding/index.html


3.8  ADDREF Method

3.8.1     Problem Definition

There needs to be a way to add an external member to a
collection.

3.8.2     Solution Requirements

The solution must:
    allow access control
    allow referencing to URIs of external members
    not require a body


3.8.3     The Request

The ADDREF method adds the URI specified in the Collection-Member
header as an external member to the collection specified by the
Request-URI. The value in the Collection-Member header MUST be an
absolute URI meeting the requirements of an external member URI.

It is not an error if the URI specified in the Collection-Member
header already exists as an external member of the collection,
however, after processing ADDREF there MUST be only one instance
of the URI in the collection.  If the URI specified in the
Collection-Member header already exists as an internal member of
the collection, the ADDREF method MUST fail with a 412
Precondition Failed status code.


3.8.4     Example

ADDREF /~whitehead/dav/ HTTP/1.1
HOST: www.ics.udi.edu
Collection-Member: http://www.ietf.org/standards/dav/

HTTP/1.1 200 OK


3.9  DELREF Method


3.9.1     Problem Definition

There needs to be a way to remove an external member from a
collection.


3.9.2     Solution Requirements

The solution must:
 allow access control
 allow referencing to URIs of external members
 not require a body


3.9.3     The Request

The DELREF method removes the URI specified in the Collection-Member header from the collection specified by the Request-URI.
DELREFing a URI which is not a member of the collection is not an
error. DELREFing an internal member MUST fail with a 412
Precondition Failed status code.


3.9.4     Example

DELREF /~whitehead/dav/ HTTP/1.1
Host: www.ics.udi.edu
Collection-Member: http://www.ietf.org/standards/dav/

HTTP/1.1 200 OK


3.10 PATCH Method

3.10.1    Problem Definition

At present, if a principal wishes to modify a resource, they must
issue a GET against the resource, modify their local copy of the
resource, and then issue a PUT to place the modified resource on
the server. This procedure is inefficient because the entire
entity for a resource must be transmitted to and from the server
in order to make even small changes.  Ideally, the update entity
transmitted to the server should be proportional in size to the
modifications.


3.10.2    Solution Requirements

The solution must:
    allow partial modification of a resource without having to
     transmit the entire modified resource
    allow byte-range patching
    allows extensions so that patches can be done beyond simple
     byte-range patching
    allow ranges to be deleted, inserted, and replaced


3.10.3    The Request

The request entity of the PATCH method contains a list of
differences between the resource identified by the Request-URI
and the desired content of the resource after the PATCH action
has been applied.  The list of differences is in a format defined
by the media type of the entity (e.g., "application/diff") and
must include sufficient information to allow the server to
convert the original version of the resource to the desired
version.  Processing performed by PATCH is atomic, hence all
changes MUST be successfully executed or the method fails. PATCH
MUST fail if executed on a non-existent resource; i.e. PATCH does
not create a resource as a side effect.

If the request appears (at least initially) to be acceptable, the
server MUST transmit an interim 100 response message after
receiving the empty line terminating the request headers and
continue processing the request.  Since the semantics of PATCH
are non-idempotent, responses to this method are not cacheable.

While server support for PATCH is optional, if a server does
support PATCH, it MUST support at least the text/xml diff format
defined below.  Support for the VTML difference format [VTML] is
recommended, but not required.

3.10.4    text/xml elements for PATCH

The resourceupdate XML element contains a set of XML sub-entities
that describe modification operations.  The name and meaning of
these XML elements is given below. Processing of these directives
MUST be performed in the order encountered within the XML
document.  A directive operates on the resource as modified by
all previous directives (executed in sequential order). The
length of the resource MAY be extended or reduced by a PATCH.

The changes specified by the resourceupdate XML element MUST be
executed atomically.


3.10.4.1  ResourceUpdate

Name:     http://www.ietf.org/standards/dav/patch/resourceupdate
Purpose:       Contains an ordered set of changes to a non-collection, non-property resource.
Schema:        http://www.ietf.org/standards/dav/patch/
Parent:        Any
Value:         *(Insert | Delete | Replace)


3.10.4.2  Insert

Name:     http://www.ietf.org/standards/dav/patch/insert
Purpose:       Insert the XML element's contents starting at the
specified octet.
Schema:        http://www.ietf.org/standards/dav/patch/
Parent:        ResourceUpdate
Value:         The insert XML element MUST contain an Octet-Range
XML element that specifies an octet position within the body of a
resource.  A value of "end" specifies the end of the resource.
The body of the insert XML element contains the octets to be
inserted.

Please note that in order to protect the white space contained in
this XML element the following attribute/value MUST be included
in the element: XML-SPACE = "PRESERVE".


3.10.4.3  Delete

Name:     http://www.ietf.org/standards/dav/patch/delete
Purpose:       Removes the specified range of octets.
Schema:        http://www.ietf.org/standards/dav/patch/
Parent:        ResourceUpdate
Value:         The Delete XML element MUST contain an octet-range
XML element.

Discussion: The octets that are deleted are removed, which means
the resource is collapsed and the length of the resource is
decremented by the size of the octet range.  It is not
appropriate to replace deleted octets with zeroed-out octets,
since zero is a valid octet value.


3.10.4.4  Replace

Name:     http://www.ietf.org/standards/dav/patch/replace
Purpose:       Replaces the specified range of octets with the
contents of the XML element.  If the number of octets in the XML
element is different from the number of octets specified, the
update MUST be rejected.
Schema:        http://www.ietf.org/standards/dav/patch/
Parent:        ResourceUpdate
Value:         The Replace XML element MUST contain an octet-range XML element. The contents of the entity are the replacement
octets.

Please note that in order to protect the white space contained in
this XML element the following attribute/value MUST be included
in the element: XML-SPACE = "PRESERVE".


3.10.4.5  Octet-Range Attribute

Name:          http://www.ietf.org/standards/dav/patch/octet-range
Purpose:  Specifies a range of octets that the enclosing property
effects.
Schema:   http://www.ietf.org/standards/dav/patch/
Parent:   Insert, Delete, Replace
Value:    number ["-" (number | "end")]
          Number = 1*Digit

Description: Octet numbering begins with 0. If the octet contains
a single number then the operation is to begin at that octet and
to continue for a length specified by the operation. In the case
of a delete, this would mean to delete a single octet. In the
case of an insert this would mean to begin the insertion at the
specified octet and to continue for the length of the included
value, extending the resource if necessary. In the case of
replace, the replace begins at the specified octet and overwrites
all that follow to the length of the included value.


3.10.5    The Response

200 (OK) - The request entity body was processed without error,
resulting in an update to the state of the resource.

409 (Conflict) - If the update information in the request message
body does not make sense given the current state of the resource
(e.g., an instruction to delete a non-existent line), this status
code MAY be returned.

415 (Unsupported Media Type) - The server does not support the
content type of the update instructions in the request message
body.

416 (Unprocessable Entity) - A new status code.  The server
understands the content type of the request entity, but was
unable to process the contained instructions.

417 (Insufficient Space on Resource) - The resource does not have
sufficient space to record the state of the resource after the
execution of this method.


3.10.6    Examples


3.10.6.1  HTML file modification

The following example shows a modification of the title and
contents of the HTML resource http://www.example.org/hello.html.
Before:

     <HTML>
     <HEAD>
     <TITLE>Hello world HTML page</TITLE>
     </HEAD>
     <BODY>
     <P>Hello, world!</P>
     </BODY>
     </HTML>

PATCH Request:                     Response:

     PATCH hello.html HTTP/1.1
     Host: www.example.org
     Content-Type: text/xml
     Content-Length: xxx

                                   HTTP/1.1 100 Continue
     <?XML:Namespace href =
     Shttp://www.ietf.org/standards/dav/patch/" AS = "D"/>
     <D:ResourceUpdate>
          <Replace XML-SPACE = "PRESERVE">
          <octet-range>14</octet-range>
          &003CTITLE&003ENew Title&003C/TITLE&003E
          </Replace>
          <Delete><octet-range>38-50</Delete>
     <Insert XML-SPACE = "PRESERVE"><octet-range>86</>&
     003CP&003ENew paragraph&003C/P&003E</Insert>
     </D:ResourceUpdate>
                                   HTTP/1.1 200 OK

After:

     <HTML>
     <HEAD>
     <TITLE>New Title</TITLE>
     </HEAD>
     <BODY>
     <P>Hello, world!</P>
     <P>New paragraph</P>
     </BODY>
     </HTML>


3.11 Headers

3.11.1    Destination Header

The Destination header specifies a destination resource for
methods such as COPY and MOVE, which take two URIs as parameters.
     Destination= "Destination" ":" URI



3.11.2    Enforce-Live-Properties Header

The Enforce-Live-Properties header specifies properties that MUST
be "live" after they are copied (moved) to the destination
resource of a copy (or move). If the value "*" is given for the
header, then it designates all live properties on the source
resource.  If the value is "Omit" then the server MUST NOT
duplicate on the destination resource any properties that are
defined on the source resource. If this header is not included
then the server is expected to act as defined by the default
property handling behavior of the associated method.

     EnforceLiveProperties = "Enforce-Live-Properties" ":" ("*" |
     "Omit" | 1#(Property-Name))
     Property-Name = "<" URI ">"


3.11.3    Overwrite Header

The Overwrite header specifies whether the server should
overwrite the state of a non-null destination resource during a
COPY or MOVE.  A value of "false" states that the server MUST NOT
perform the COPY or MOVE operation if the state of the
destination resource is non-null. By default, the value of
Overwrite is "true," and a client MAY omit this header from a
request when its value is "true." While the Overwrite header
appears to duplicate the functionality of the If-Match: * header
of HTTP/1.1, If-Match applies only to the Request-URI, and not to
the Destination of a COPY or MOVE.

     Overwrite = "Overwrite" ":" ("true" | "false")


If there is a conflict and the Overwrite header equals "true", or
is absent and thus defaults to "true", then the method MUST fail
with a 409 Conflict.


3.11.4    Destroy Header

When deleting a resource the client often wishes to specify
exactly what sort of delete is being enacted. The Destroy header,
used with the Mandatory header, allows the client to specify the
end result they desire. The Destroy header is specified as
follows:

The Undelete token requests that, if possible, the resource
should be left in a state such that it can be undeleted. The
server is not required to honor this request.

The NoUndelete token requests that the resource MUST NOT be left
in a state such that it can be undeleted.

The VersionDestroy token includes the functionality of the
NoUndelete token and extends it to include having the server
remove all versioning references to the resource that it has
control over.

     DestroyHeader = "Destroy" ":" #Choices


Choices = "VersionDestroy" | "NoUndelete" | "Undelete" | token
|"<" URI ">" ; a token extension MUST NOT be used unless it is
specified in a RFC16, otherwise a URI MUST be used for
extensions.


3.11.5    Collection-Member Header

The Collection-Member header specifies the URI of an external
resource to be added/deleted to/from a collection.

     CollectionMember = "Collection-Member" ":" URI



3.12 Links


3.12.1    Source Link Property Type

Name:     http://www.ietf.org/standards/dav/link/source
Purpose:       The destination of the source link identifies the
resource that contains the unprocessed source of the link's
source.
Schema:        http://www.ietf.org/standards/dav/link/
Parent:        Any
Value:         An XML document with zero or more link XML
elements.

Discussion: The source of the link (src) is typically the URI of
the output resource on which the link is defined, and there is
typically only one destination (dst) of the link, which is the
URI where the unprocessed source of the resource may be accessed.
When more than one link destination exists, this specification
asserts no policy on ordering.


4    State Tokens

4.1  Overview


4.1.1     Problem Description

There are times when a principal will want to predicate
successful execution of a method on the current state of a
resource.  While HTTP/1.1 provides a mechanism for conditional
execution of methods using entity tags via the "If-Match" and
"If-None-Match" headers, the mechanism is not sufficiently 
extensibleto express conditional statements involving more 
generic state indicators, such as lock tokens.

The fundamental issue with entity tags is that they can only be
generated by a resource. However there are times when a client
will want to be able to share state tokens between resources,
potentially on different servers, as well as be able to generate
certain types of lock tokens without first having to communicate
with a server.

For example, a principal may wish to require that resource B have
a certain state in order for a method to successfully execute on
resource A. If the client submits an e-tag from resource B to
resource A, then A has no way of knowing that the e-tag is meant
to describe resource B.

Another example occurs when a principal wishes to predicate the
successful completion of a method on the absence of any locks on
a resource. It is not sufficient to submit an "If-None-Match: *"
as this refers to the existence of an entity, not of a lock.

This draft defines the term "state token" as an identifier for a
state of a resource. The sections below define requirements for
state tokens and provide a  state token syntax, along with two
new headers which can accept the new state token syntax.


4.1.2     Solution Requirements


4.1.2.1   Syntax

Self-Describing. A state token must be self describing such that
upon inspecting a state token it is possible to determine what
sort of state token it is, what resource(s) it applies to, and
what state it represents.

This self-describing nature allows servers to accept tokens from
other servers and potentially be able to coordinate state
information cross resource and cross site through standardized
protocols. For example, the execution of a request on resource A
can be predicated on the state of resource B, where A and B are
potentially on different servers.

Client Generable. The state token syntax must allow, when
appropriate, for clients to generate a state token without having
first communicated with a server.

One drawback of entity tags is that they are set by the server,
and there is no interoperable algorithm for calculating an entity
tag. Consequently, a client cannot generate an entity tag from a
particular state of a resource.  However, a state token which
encodes an MD5 state hash could be calculated by a client based
on a client-held state of a resource, and then submitted to a
server in a conditional method invocation.

Another potential use for client generable state tokens is for a
client to generate lock tokens with wild card fields, and hence
be able to express conditionals such as: "only execute this GET
if there are no write locks on this resource."


4.1.2.2   Conditonals

Universal. A solution must be applicable to all requests.
Positive and Negative. Conditional expressions must allow for the
expression of both positive and negative state requirements.


4.2  State Token Syntax
State tokens are URLs employing the following syntax:

State-Token = "StateToken:" Type ":" Resources ":" State-Info
Type = "Type" "=" Caret-encoded-URL
Resources = "Res" "=" Caret-encoded-URL
Caret-encoded-URL = "^" Resource "^"
Resource = <A URI where all "^" characters are escaped>
State-Info = *(uchar | reserved)  ; uchar, reserved defined
section 3.2.1 of RFC 2068


This proposal has created a new URL scheme for state tokens
because a state token names a network resource using its normal
name, which is typically state-invariant, along with additional
information that specifies a particular state of the resource.
Encoding the state information into the native URL scheme of the
network resource was not felt to be safe, since freedom from name
space collisions could not be guaranteed. If this proposal is
accepted, the StateToken URL scheme will need to be defined and
registered with IANA.

State Token URLs begin with the URL scheme name "StateToken"
rather than the name of the particular state token type they
represent in order to make the URL self describing. Thus it is
possible to examine the URL and know, at a minimum, that it is a
state token.

Labeled name/value pairs are used within the token to allow new
fields to be added. Processors of state tokens MUST be prepared
to accept the fields in whatever order they are present and MUST
ignore any fields they do not understand.
The "Type" field specifies the type of the state information
encoded in the state token. A URL is used in order to avoid
namespace collisions.

The "Res" field identifies the resource for which the state token
specifies a particular state. Since commas and spaces are
acceptable URL characters, a caret is used to delimit a URL.
Since a caret is an acceptable URL character, any instances of it
must be escaped using the % escape convention.

The State-Info production is expanded upon in descriptions of
specific state token types, and is intended to contain the state
description information for a particular state token.


4.3  State Token Conditional Headers


4.3.1     If-State-Match


If-State-Match = "If-State-Match" ":" ("AND" | "OR") 1#("<" State-Token ">")



The If-State-Match header is intended to have similar
functionality to the If-Match header defined in section 14.25 of
RFC 2068.

If the AND keyword is used and all of the state tokens identify
the state of the resource, then the server MAY perform the
requested method. If the OR keyword is used and any of the state
tokens identifies the current state of the resource, then server
MAY perform the requested method.  If neither of the keyword
requirements is met, the server MUST NOT perform the requested
method, and MUST return a 412 (Precondition Failed) response.


4.3.2     If-None-State-Match


If-None-State-Match = "If-None-State-Match" ":" 1#("<" State-Token ">")


The If-None-State-Match header is intended to have similar
functionality to the If-None-Match header defined in section
14.26 of RFC 2068.

If any of the state tokens identifies the current state of the
resource, the server MUST NOT perform the requested method.
Instead, if the request method was GET, HEAD, INDEX, or GETMETA,
the server SHOULD respond with a 304 (Not Modified) response,
including the cache-related entity-header fields (particularly
ETag) of the current state of the resource.  For all other
request methods, the server MUST respond with a status of 412
(Precondition Failed).

If none of the state tokens identifies the current state of the
resource, the server MAY perform the requested method.

Note that the "AND" and "OR" keywords specified with the If-State-Match header are intentionally not defined for If-None-State-Match, because this functionality is not required.


4.4  State Token Header


State-Token-Header = "State-Token" ":" 1#("<" State-Token ">")


The State Token header is intended to have similar functionality
to the etag header defined in section 14.20 of RFC 2068. The
purpose of the tag is to return state tokens defined on a
resource in a response. The contents of the state-token are not
guaranteed to be exhaustive and are generally used to return a
new state token that has been defined as the result of a method.
For example, if a LOCK method were successfully executed on a
resource the response would include a state token header with the
lock state token included.


4.5  E-Tags

E-tags have already been deployed using the If-Match and If-None-Match headers.  Introducing two mechanisms to express e-tags
would only confuse matters, therefore e-tags should continue to
be expressed using quoted strings and the If-Match and If-None-Match headers.

5    Locking

5.1  Locking: Introduction

Locking is used to arbitrate access to a resource amongst
principals that have equal access rights to that resource.

This specification allows locks to vary over two parameters, the
number of principals involved and the type of access to be
granted. Furthermore, this document only provides the definition
of locking for one access type, write. However, the syntax is
extensible, and allows the specification of other access types.


5.1.1     Exclusive Vs. Shared Locks

The most basic form of lock is an exclusive lock. This is a lock
where the access right in question is only granted to a single
principal. The need for this arbitration results from a desire to
avoid having to constantly merge results. In fact, many users so
dislike having to merge that they would rather serialize their
access to a resource rather than have to constantly perform
merges.

However, there are times when the goal of a lock is not to
exclude others from exercising an access right but rather to
provide a mechanism for principals to indicate that they intend
to exercise their access right.  Shared locks are provided for
this case. A shared lock allows multiple principals to receive a
lock, hence any principal with appropriate access can get the
lock.

With shared locks there are two trust sets that affect a
resource.  The first trust set is created by access permissions.
Principals who are trusted, for example, may have permission to
write the resource, those who are not, don't.  Among those who
have access permission to write the resource, the set of
principals who have taken out a shared lock also must trust each
other, creating a (typically) smaller trust set within the access
permission write set.

Starting with every possible principal on the Internet, in most
situations the vast majority of these principals will not have
write access to a given resource.  Of the small number who do
have write access, some principals may decide to guarantee their
edits are free from overwrite conflicts by using exclusive write
locks. Others may decide they trust their collaborators (the
potential set of collaborators being the set of principals who
have write permission) and use a shared lock, which informs their
collaborators that a principal is potentially working on the
resource.

The WebDAV extensions to HTTP do not need to provide all of the
communications paths necessary for principals to coordinate their
activities.  When using shared locks, principals may use any out
of band communication channel to coordinate their work (e.g.,
face-to-face interaction, written notes, post-it notes on the
screen, telephone conversation, email, etc.)  The intent of a
shared lock is to let collaborators know who else is potentially
working on a resource.

Shared locks are included because experience from web distributed
authoring systems has indicated that exclusive write locks are
often too rigid.  An exclusive write lock is used to enforce a
particular editing process: take out exclusive write lock, read
the resource, perform edits, write the resource, release the
lock.  What happens if the lock isn't released?  While the time-out mechanism provides one solution, if you need to force the
release of a lock immediately, it doesn't help much.  Granted, an
administrator can release the lock for you, but this could become
a significant burden for large sites. In addition there is the
problem that an administrator may not be immediately available.

Despite their potential problems, exclusive write locks are
extremely useful, since often a guarantee of freedom from
overwrite conflicts is what is needed.  The tradeoff described in
this specification is to provide exclusive write locks, but also
to provide a less strict mechanism in the form of shared locks
which can be used by a set of people who trust each other and who
have access to a communications channel external to HTTP which
can be used to negotiate writing to the resource.


5.1.2     Required Support

A WebDAV compliant server is not required to support locking in
any form. If the server does support locking it may choose to
support any combination of exclusive and shared locks for any
access types.

The reason for this flexibility is that server implementers have
said that they are willing to accept minimum requirements on all
services but locking. Locking policy strikes to the very heart of
their resource management and versioning systems and they require
control over what sort of locking will be made available. For
example, some systems only support shared write locks while
others only provide support for exclusive write locks while yet
others use no locking at all. As each system is sufficiently
different to merit exclusion of certain locking features, the
authors are proposing that locking be allowed as the sole axis of
negotiation within WebDAV.


5.2  LOCK Method

The following sections describe the LOCK method, which is used to
take out a lock of any access type.  These sections on the LOCK
method describe only those semantics that are specific to the
LOCK method and are independent of the access type of the lock
being requested.  Once the general LOCK method has been
described, subsequent sections describe the semantics of the
"write" access type, and the write lock.


5.2.1     Operation
A LOCK method invocation creates the lock specified by the Lock-Info header on the Request-URI. Lock method requests SHOULD NOT
have a request body. A user-agent SHOULD submit an Owner header
field with a lock request.

A successful response to a lock invocation MUST include Lock-Token and Time-Out headers.


5.2.2     The Effect of Locks on Properties and Containers

By default the scope of a lock is the entire state of the
resource, including its body and associated properties. As a
result, a lock on a resource also locks the resource's
properties, and a lock on a property may lock a property's
resource or may restrict the ability to lock the property's
resource. Only a single lock token MUST be used when a lock
extends to cover both a resource and its properties. Note that
certain lock types MAY override this behavior.

For containers, a lock also affects the ability to add or remove
members. The nature of the effect depends upon the type of access
control involved.


5.2.3     Locking Replicated Resources

Some servers automatically replicate resources across multiple
URLs. In such a circumstance the server MAY only accept a lock on
one of the URLs if the server can guarantee that the lock will be
honored across all the URLs.


5.2.4     Locking Multiple Resources

The LOCK method supports locking multiple resources
simultaneously by allowing for the listing of several URIs in the
LOCK request. These URIs, in addition to the Request-URI, are
then to be locked as a result of the LOCK method's invocation.
When multiple resources are specified the LOCK method only
succeeds if all specified resources are successfully locked.

The Lock-Tree option of the lock request specifies that the
resource and all its internal children (including internal
collections, and their internal members) are to be locked. This
is another mechanism by which a request for a lock on multiple
resources can be specified.

Currently existing locks can not be extended to cover more or
less resources, and any request to expand or contract the number
of resources in a lock MUST fail with a 409 Conflict status code.
So, for example, if resource A is exclusively write locked and
then the same principal asked to exclusively write lock resources
A, B, and C, the request would fail as A is already locked and
the lock can not be extended.

A successful result will return a single lock token which
represents all the resources that have been locked. If an UNLOCK
is executed on this token, all associated resources are unlocked.

If the lock can not be granted to all resources, a 406 Conflict
status code MUST be returned with a response entity body
containing a multiresponse XML element describing which
resource(s) prevented the lock from being granted.

5.2.5     Interaction with other Methods

The interaction of a LOCK with various methods is dependent upon
the lock type. However, independent of lock type, a successful
DELETE of a resource MUST cause all of its locks to be removed.


5.2.6     Lock Compatibility Table

The table below describes the behavior that occurs when a lock
request is made on a resource.

Lock requestCurrent lock state      Shared Lock       Exclusive LockNone                     True              TrueShared Lock              True              FalseExclusive Lock           False             False*


Legend: True = lock MAY be granted.  False = lock MUST NOT be
granted.  *=if the principal requesting the lock is the owner of
the lock, the lock MAY be regranted.

The current lock state of a resource is given in the leftmost
column, and lock requests are listed in the first row.  The
intersection of a row and column gives the result of a lock
request.  For example, if a shared lock is held on a resource,
and an exclusive lock is requested, the table entry is "false",
indicating the lock must not be granted.

If an exclusive or shared lock is re-requested by the principal
who owns the lock, the lock MUST be regranted. If the lock is
regranted, the same lock token that was previously issued MUST be
returned.


5.2.7     Status Codes


 409 "Conflict" - The resource is locked, so the method has been
rejected.


 412 "Precondition Failed" - The included state-token was not
enforceable on this resource or the request in the lock-info
header could not be satisfied by the server.


5.2.8     Lock-Info Request Header

The Lock-Info request header specifies the scope and type of a
lock for a LOCK method request. The syntax specification below is
extensible, allowing new type and scope identifiers to be added.


LockInfo = "Lock-Info" ":" DAVLockType SP DAVLockScope [SP
AdditionalLocks] [SP Lock-Tree]
DAVLockType = "LockType" "=" DAVLockTypeValue
DAVLockTypeValue = ("Write" | *(uchar | reserved))
DAVLockScope = "LockScope" "=" DAVLockScopeValue
DAVLockScopeValue = ("Exclusive" |"Shared" | *(uchar | reserved))
AdditionalLocks = "AddLocks" "=" 1*("<" URI ">")
Lock-Tree = "Lock-Tree" "=" ("True" | "False")


The LockType field specifies the access type of the lock.  At
present, this specification only defines one lock type, the
"Write" lock.  The LockScope field specifies whether the lock is
an exclusive lock, or a shared lock.  The AddLocks field
specifies additional URIs, beyond the Request-URI, to which the
lock request applies.  The LockTree field is used to specify
recursive locks.  If the LockTree field is "true", the lock
request applies to the hierarchy traversal of the internal
members resources of the Request-URI, and the AddLocks URIs,
inclusive of the Request-URI and the AddLocks URIs. It is not an
error if LockTree is true, and the Request-URI or the AddLocks
URIs have no internal member resources. By default, the value of
LockTree is "false", and this field MAY be omitted when its value
is false.


5.2.9     Owner Request Header


5.2.9.1   Problem Description

When discovering the list of owners of locks on a resource, a
principal may want to be able to contact the owner directly. For
this to be possible the lock discovery mechanism must provide
enough information for the lock owner to be contacted.
Additionally, programs may wish to be able to record structured
information in the owner header so that other programs may be
able to parse it later. Note, however, that these programs may
not necessarily be coordinating so there need be no guarantee
that the information can be parsed.


5.2.9.2   Solution Requirements

Not all systems have authentication procedures that provide
sufficient information to identify a particular user in a way
that is meaningful to a person. In addition, many systems that do
have sufficient information, such as a name and e-mail address,
do not have the ability to associate this information with the
lock discovery mechanism. Therefore a means is needed to allow
principals to provide authentication in a manner which will be
meaningful to a person.

The From header (defined in RFC 2068), which contains only an
email mailbox, is not sufficient for the purposes of quick
identification. When desperately looking for someone to remove a
lock, e-mail is often not sufficient. A telephone number (cell
number, pager number, etc.) would be better. Furthermore, the
email address in the From header only optionally includes the
owners name and that name is often set to an alias anyway.
Therefore a header more flexible than From is required.

The value also needs to be such that both man and machine can
place values in it and later retrieve those values.


5.2.9.3   Syntax


Owner = "Owner" ":" (Coded-XML  | quoted-string)
Coded-XML = field-content    ; XML where any character which is
  not legal in field-content (see section 4.2 of [Fielding et al.,
  1997]) is XML encoded


The XML SHOULD provide information sufficient for either directly
contacting the principal (such as a telephone number or e-mail
URI), or for discovering the principal (such as the URL of a
homepage) who owns the lock. The quoted string SHOULD provide a
means for directly contacting the principal who owns the lock,
such as a name and telephone number.

5.2.10    Time-Out Header

5.2.10.1  Problem Description

In a perfect world principals take out locks, work on the
resource, and then remove the lock when it is no longer needed.
However, this process is frequently not completed, leaving active
but unused locks. Reasons for this include client programs
crashing and losing information about locks, users leaving their
systems for the day and forgetting to remove their locks, etc. As
a result of this behavior, servers need to establish a policy by
which they can remove a lock without input from the lock owner.
Once such a policy is instituted, the server also needs a
mechanism to inform the principal of the policy.

5.2.10.2  Solution Requirements

There are two basic lock removal policies: administrator and time
based removal. In the case of administrator based removal, a
principal other than the lock owner has sufficient access rights
to order the lock removed, even though they did not take it out.
The second policy type is time based removal.  In this case, a
timer is set as soon as the lock is created. Every time a method
is executed on any resource covered by the lock, the timer is
reset. If the timer runs out, the lock is removed.

User-agents MUST assume that locks may arbitrarily disappear at
any time. If their actions require confirmation of the existence
of a lock then the If-State headers are available.


5.2.10.3  Syntax


TimeOut = "Time-Out" ":" 1#TimeType
TimeType = ("Second-" DAVTimeOutVal | "Infinite" | Extend)
DAVTimeOutVal = 1*digit
Extend = RFC-Reg | URL "-" Token ; The URL format is used for
unregistered TimeTypes
RFC-Req = Token ; This is a TimeType that has been published as an RFC



Clients MAY include TimeOut headers in their LOCK requests.
However the server is not required to honor or even consider the
request. Clients MUST NOT submit a Time-Out request header with
any method other than a LOCK method.

A Time-Out request header MUST contain at least one TimeType and
MAY contain multiple TimeType entries. The purpose of listing
multiple TimeType is to indicate multiple different values and
value types that are acceptable to the client. The client lists
the TimeType entries in order of preference.

The Time-Out response header MUST use a Second value, Infinite,
or a TimeType the client has indicated familiarity with. The
server MAY assume a client is familiar with any TimeType
submitted in a Time-Out header.

The "Second" TimeType specifies the number of seconds that MUST
elapse between granting of the lock at the server, and the
automatic removal of the lock. A server MUST not generate a time
out value for "Second" greater than 2^32-1.

The time out counter is restarted any time the client sends a
method to any member of the lock, including unsupported methods,
or methods which are unsuccessful. It is recommended that the
HEAD method be used when the goal is simply to restart the time
out counter.

If the timeout expires then the lock is lost. Specifically the
server SHOULD act as if an UNLOCK method was executed by the
server on the resource using the lock token of the timed-out
lock, performed with its override authority. Thus logs,
notifications, and other mechanisms that act as side effects to
the granting and removal of a lock will be properly informed as
to the disposition of the lock.

Servers are advised to pay close attention to the values
submitted by clients, as they will be indicative of the type of
activity the client intends to perform. For example, an applet
running in a browser may need to lock a resource, but because of
the instability of the environment within which the applet is
running, the applet may be turned off without warning. As a
result, the applet is likely to ask for a relatively small time-out value so that if the applet dies, the lock can be quickly
harvested. However a document management system is likely to ask
for an extremely long time-out because its user may be planning
on going off-line.


5.2.11    Lock Response

A successful lock response MUST contain a Lock-Token response
header, a Time-Out header and a Prop element in the response body
which contains the value of the LockDiscovery property.


5.2.11.1  Lock-Token Response Header

If a resource is successfully locked then a lock-token header
will be returned containing the lock token that represents the
lock.


Lock-Token = "Lock-Token" ":" URI



5.2.12    Example - Simple Lock Request


LOCK /workspace/webdav/proposal.doc HTTP/1.1
Host: webdav.sb.aol.com
Lock-Info: LockType=Write LockScope=Exclusive
Time-Out: Infinite; Second-4100000000
Owner: <?XML:Namespace href="http://www.ietf.org/standards/dav/" AS =
"D"/>
 <D:HREF>http://www.ics.uci.edu/~ejw/contact.html</D:HREF>



HTTP/1.1 200 OK
Lock-Token: OpaqueLockToken:xyz122393481230912asdfa09s8df09s7df08
sd0f98a098sda
Time-Out: Second-604800
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace href ="http://www.ietf.org/standards/dav/" AS = "D"/>
<D:Prop>
     <lockdiscovery>
          <activelock>
               <locktype>write</locktype>
               <lockscope>exclusive</lockscope>
               <addlocks/>
               <owner>
     <HREF>http://www.ics.uci.edu/~ejw/contact.html</HREF>
               </owner>
               <timeout>Second-604800</timeout>
               <locktoken>
                    <HREF>
               OpaqueLockToken:xyz122393481230912asdfa09s8df09s7d
               f08sd0f98a098sda
                    </HREF>
               </locktoken>
          </activelock>
     </lockdiscovery>
</D:Prop>


This example shows the successful creation of an exclusive write
lock on resource
http://webdav.sb.aol.com/workspace/webdav/proposal.doc. The
resource http://www.ics.uci.edu/~ejw/contact.html contains
contact information for the owner of the lock. The server has an
activity-based timeout policy in place on this resource, which
causes the lock to automatically be removed after 1 week (604800
seconds). The response has a Lock-Token header that gives the
state token URL for the lock token generated by this lock
request.


5.2.13    Example - Multi-Resource Lock Request


LOCK /workspace/webdav/proposal.doc HTTP/1.1
Host: webdav.sb.aol.com
Lock-Info: LockType=Write LockScope=Exclusive
Addlocks=<http://webdav.sb.aol.com/workspace/><http://foo.bar/blah>
Time-Out: Infinite, Second-4100000000
Owner: <http://www.ics.uci.edu/~ejw/contact.html>



HTTP/1.1 409 Conflict
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" As = "D"/>
<D:MultiResponse>
     <Response>
          <HREF>
          http://webdav.sb.aol.com/workspace/webdav/proposal.doc
          </HREF>
          <HREF>
          http://webdav.sb.aol.com/workspace/webdav/
          </HREF>
          <Status>HTTP/1.1 202 Accepted</Status>
     </Response>
     <Response>
          <HREF>http://foo.bar/blah</HREF>
          <Status>HTTP/1.1 403 Forbidden</Status>
     </Response>
</D:MultiResponse>


This example shows a request for an exclusive write lock on three
resources,
http://webdav.sb.aol.com/workspace/webdav/proposal.doc,
http://webdav.sb.aol.com/workspace/, and http://foo.bar/blah.  In
this request, the client has specified that it desires an
infinite length lock, if available, otherwise a timeout of 4.1
billion seconds, if available.  The Owner header field specifies
the web address for contact information for the principal taking
out the lock.

This lock request has failed, because the server rejected the
lock request for http://foo.bar/blah.  The 409 Conflict status
code indicates that the server was unable to satisfy the request
because there is a conflict between the state of the resources
and the operation named in the request.  Within the
multiresponse, the 202 Accepted status code indicates that the
lock method was accepted by the resources, and would have been
completed if all resources named in the request were able to be
locked.  The 403 Forbidden status code indicates that the server
does not allow lock requests on this resource.

5.3  Write Lock

This section describes the semantics specific to the write access
type for locks.  The write lock is a specific instance of a lock
type, and is the only lock type described in this specification.


5.3.1     Methods Restricted by Write Locks

A write lock prevents a principal without the lock from
successfully executing a PUT, POST, PATCH, PROPPATCH, MOVE,
DELETE, MKCOL, ADDREF or DELREF on the locked resource. All other
current methods, GET in particular, function independent of the
lock.

Note, however, that as new methods are created it will be
necessary to specify how they interact with a write lock.


5.3.2     Write Locks and Properties

While those without a write lock may not alter a property on a
resource it is still possible for the values of live properties
to change, even while locked, due to the requirements of their
schemas. Only dead properties and live properties defined to
respect locks are guaranteed to not change while write locked.

If a property is write locked then a LOCK request on the
associated resource MUST fail with a 409 "Conflict". Note that a
write lock on a property MAY be extended to include the
associated resource without the principal having explicitly
requested the extension.


5.3.3     Write Locks and Null Resources

It is possible to assert a write lock on a null resource in order
to lock the name. Please note, however, that locking a null
resource effectively makes the resource non-null as the resource
now has lock related properties defined on it.


5.3.4     Write Locks and Collections
A write lock on a collection prevents the addition or removal of
members of the collection. As a consequence, when a principal
issues a request to create a new internal member of a collection
using PUT or POST, or to remove an existing internal member of a
collection using DELETE, this request MUST fail if the principal
does not have a write lock on the collection.

However, if a write lock request is issued to a collection
containing internal member resources that are currently locked,
the request MUST fail with a 409 Conflict status code.


5.3.5     Write Locks and COPY/MOVE

The owner of a write lock MUST NOT execute a MOVE method on a
resource they have locked. This specification intentionally does
not define what happens if a MOVE method request is made on a
locked resource by the lock's owner.

A COPY method invocation MUST NOT duplicate any write locks
active on the source.


5.3.6     Re-issuing Write Locks

If a principal already owns a write lock on a resource, any
future requests for the same type of write lock, on the same
resource, while the principal's previous write lock is in effect,
MUST result in a successful response with the same lock token as
provided for the currently existing lock. Two lock requests are
defined to be identical if their Lock-Info headers are identical.


5.3.7     Write Locks and The State-Token Header


5.3.7.1   Problem Definition

If a user agent is not required to have knowledge about a lock
when requesting an operation on a locked resource, the following
scenario might occur. Program A, run by User A, takes out a write
lock on a resource. Program B, also run by User A, has no
knowledge of the lock taken out by Program A, yet performs a PUT
to the locked resource. In this scenario, the PUT succeeds
because locks are associated with a principal, not a program, and
thus program B, because it is acting with principal A's
credential, is allowed to perform the PUT. However, had program B
known about the lock, it would not have overwritten the resource,
preferring instead to present a dialog box describing the
conflict to the user. Due to this scenario, a mechanism is needed
to prevent different programs from accidentally ignoring locks
taken out by other programs with the same authorization.


5.3.7.2   Solution Requirement

The solution must not require principals to perform discovery in
order to prevent accidental overwrites as this could cause race
conditions.

The solution must not require that clients guess what sorts of
locks might be used and use if-state-match headers with wildcards
to prevent collisions. The problem with trying to "guess" which
locks are being used is that new lock types might be introduced,
and the program would not know to "guess them". So, for example,
a client might put in an if-state-match header with a wildcard
specifying that if any write lock is outstanding then the
operation should fail. However a new read/write lock could be
introduced which the client would not know to put in the header.


5.3.7.3   State-Token Header

The State-Token header, containing a lock token owned by the
requesting principal, is used by the principal to indicate that
the principal is aware of the existence of the lock specified by
the lock token. It is used in the following way.

If the following conditions are met:
     1.   a user-agent has authenticated itself as a principal,
     2.   the user-agent is submitting a method request to a
resource
          on which the principal owns a write lock,
     3.   the method is restricted by a write lock, as defined in
the
          section "Methods Restricted by a Write Lock",
then the method request MUST include a State-Token header with
the  lock token of the write lock, or the method fails with a 409
Conflict status code. If multiple resources are involved with a
method, such as a COPY or MOVE method, then the lock tokens, if
any, for all involved resources, MUST be included in the State-Token request header.

For example, Program A, used by user A, takes out a write lock on
a resource. Program A then makes a number of PUT requests on the
locked resource, all the requests contain a State-Token header
which includes the write lock state token. Program B, also run by
User A, then proceeds to perform a PUT to the locked resource.
However program B was not aware of the existence of the lock and
so does not include the appropriate state-token header. The
method is rejected even though principal A is authorized to
perform the PUT. Program B can, if it so chooses, now perform
lock discovery and obtain the lock token. Note that program A and
B can perform GETs without using the state-token header because
the ability to perform a GET is not affected by a write lock.

Having a lock state token provides no special access rights.
Anyone can find out anyone else's lock state token by performing
lock discovery. Locks are to be enforced based upon whatever
authentication mechanism is used by the server, not based on the
secrecy of the token values.


5.3.7.3.1 Example

COPY /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html
State-Token: <OpaqueLockToken:123AbcEfg1284h23h2>
<OpaqueLockToken:AAAASDFcalkjfdas12312>

HTTP/1.1 200 OK


In this example, both the source and destination are locked so
two lock tokens must be submitted. If only one of the two
resources was locked, then only one token would have to be
submitted.

5.4  Lock Tokens

5.4.1     Problem Description

It is possible that once a lock has been granted it may be
removed without the lock owner's knowledge. This can cause
serialization problems if the lock owner executes methods
thinking their lock is still active. Due to this, a mechanism is
needed for a principal to predicate the successful execution of a
message upon the continuing existence of a lock.


5.4.2     Lock Token Introduction

A lock token is a type of state token that describes a particular
lock.  A lock token is returned by every successful LOCK
operation, and can also be discovered through lock discovery on a
resource.

There are two types of lock tokens, a generic lock token, which
is unique only for a particular resource, and an opaque lock
token, which is unique across all resources for all time.

Uniqueness for a particular resource prevents problems with long
held outstanding lock tokens being confused with newer tokens.
This uniqueness requirement is the same as for e-tags. Uniqueness
across all resources for all time allows for tokens to be
submitted across resources and servers without fear of confusion.

Generic lock tokens, because of their relaxed uniqueness
requirements, are faster to generate than opaque lock tokens.


5.4.3     Generic Lock Tokens

Any valid URI can be used by the resource as a generic lock
token. The only requirement is that the lock token MUST never
have been issued previously on that resource. Because a lock
token is only guaranteed to be unique on the resource that
generated it, the lock token MUST NOT be submitted in a state-token request header or an if-state[-not]-match header on any
resource but the resource that generated it.


5.4.4     OpaqueLockToken Lock Token

The opaquelocktoken scheme is designed to be unique across all
resources for all time. Due to this uniqueness quality, a client
MAY submit an opaque lock token in a state-token request header
and an if-state[-not]-match header on a resource other than the
one that returned it.

All resources MUST recognize the opaquelocktoken scheme and be
able to, at minimum, recognize that the lock token was not
generated by the resource. Note, however, that resources are not
required to generate opaquelocktokens.

In order to guarantee uniqueness across all resources for all
time the opaquelocktoken requires the use of the GUID mechanism.

Opaquelocktoken generators however have a choice of how they
create these tokens. They can either generate a new GUID for
every lock token they create, which is potentially very
expensive, or they can create a single GUID and then add
extension characters. If the second method is selected then the
program generating the extensions MUST guarantee that the same
extension will never be used twice with the associated GUID.


Opaque-Lock-Token = "OpaqueLockToken" ":" GUID [Extension]
GUID = ; As defined in [LEACH]
Extension = *urlc   ;urlc is defined in [Berners-Lee et al.,
1997] (draft-fielding-url-syntax-07.txt)


5.5  UNLOCK Method

5.5.1     Problem Definition

The UNLOCK method removes the lock identified by the lock token
in the State-Token header from the Request-URI, and all other
resources included in the lock.


5.5.2     Example

UNLOCK /workspace/webdav/info.doc HTTP/1.1
Host: webdav.sb.aol.com
State-Token: OpaqueLockToken:123AbcEfg1284h23h2

HTTP/1.1 200 OK


In this example, the lock identified by the lock token
"OpaqueLockToken:123AbcEfg1284h23h2" is successfully removed from
the resource http://webdav.sb.aol.com/workspace/webdav/info.doc.
If this lock included more than just one resource, the lock is
removed from those resources as well.


5.6  Discovery Mechanisms

5.6.1     Lock Capability Discovery

5.6.1.1   Problem Definition

Since server lock support is optional, a client trying to lock a
resource on a server can either try the lock and hope for the
best, or perform some form of discovery to determine what lock
capabilities the server supports.  This is known as lock
capability discovery. Lock capability discovery differs from
discovery of supported access control types, since there may be
access control types without corresponding lock types.

5.6.1.2   SupportedLock Property

Name: http://www.ietf.org/standards/dav/lock/supportedlock
Purpose: To provide a listing of the lock capabilities supported
by the resource.
Schema: http://www.ietf.org/standards/dav/
Values: An XML document containing zero or more LockEntry XML
elements.
Description: The SupportedLock property of a resource returns a
listing of the combinations of scope and access types which may
be specified in a lock request on the resource. Note that the
actual contents are themselves controlled by access controls so a
server is not required to provide information the client is not
authorized to see. If SupportedLock is available on "*" then it
MUST define the set of locks allowed on all resources on that
server.

5.6.1.3   LOCKENTRY XML Element

Name: http://www.ietf.org/standards/dav/lockentry
Purpose: Defines a DAVLockType/LockScope pair which may be
legally used with a LOCK on the specified resource.
Schema: http://www.ietf.org/standards/dav/
Parent: A SupportedLock entry
Values: LockType LockScope

5.6.1.4   LOCKTYPE XML Element

Name: http://www.ietf.org/standards/dav/locktype
Purpose: Lists a DAVLockType
Schema: http://www.ietf.org/standards/dav/
Parent: LOCKENTRY
Values: DAVLockTypeValue

5.6.1.5   LOCKSCOPE XML Element

Name: http://www.ietf.org/standards/dav/lockscope
Purpose: Lists a DAVLockScope
Schema: http://www.ietf.org/standards/dav/
Parent: LOCKENTRY
Values: DAVLockScopeValue

5.6.1.6   Example

PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml


<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" AS = "D"/>
<D:PROPFIND>
     <prop><SupportedLock/></prop>
</D:PROPFIND>



HTTP/1.1 207 Multi-Response
Content-Type: text/xml
Content-Length: xxxxx

<?XML:Namespace href ="http://www.ietf.org/standards/dav/" AS = "D"/>
<D:MultiResponse>
     <Response>
          <Prop>
               <SupportedLock>
                    <LockEntry>
                         <LockType>Write</LockType>
                         <LockScope>Exclusive</LockScope>
                    </LockEntry>
                    <LockEntry>
                         <LockType>Write</LockType>
                         <LockScope>Shared</LockScope>
                    </LockEntry>
               </SupportedLock>
          </Prop>
          <Status>HTTP/1.1 200 Success</Status>
</Response>
</D:MultiResponse>


5.6.2     Active Lock Discovery

5.6.2.1   Problem Definition

If another principal locks a resource that a principal wishes to
access, it is useful for the second principal to be able to find
out who the first principal is.

5.6.2.2   Solution Requirements

The lock discovery mechanism should provide a list of who has the
resource locked, what locks they have, and what their lock tokens
are. The lock tokens are useful in shared lock situations where
two principals may want to guarantee that they do not overwrite
each other. The lock tokens are also useful for administrative
purposes so that an administrator can remove a lock by referring
to its token.

5.6.2.3   LOCKDISCOVERY Property

Name: http://www.ietf.org/standards/dav/lockdiscovery
Purpose: To discover what locks are active on a resource
Schema: http://www.ietf.org/standards/dav/
Values= An XML document containing zero or more ActiveLock XML
elements.

Description: The LOCKDISCOVERY property returns a listing of who
has a lock, what type of lock they have, the time out type and
the time remaining on the time out, and the associated lock
token. The server is free to withhold any or all of this
information if the requesting principal does not have sufficient
access rights to see the requested data. A server which supports
locks MUST provide the LOCKDISCOVERY property on any resource
with locks on it.

5.6.2.4   ACTIVELOCK XML Element

Name: http://www.ietf.org/standards/dav/activelock
Purpose: A multivalued XML element that describes a particular
active lock on a resource
Schema: http://www.ietf.org/standards/dav/
Parent: A LOCKDISCOVERY entry
Values= LOCKTYPE LOCKSCOPE [ADDLOCKS] OWNER TIMEOUT LOCKTOKEN

5.6.2.5   OWNER XML Element

Name: http://www.ietf.org/standards/dav/lock/owner
Purpose: Returns owner information
Schema: http://www.ietf.org/standards/dav/
Parent: ACTIVELOCK
Values= XML:REF | {any valid XML string}
5.6.2.6   TIMEOUT XML Element

Name: http://www.ietf.org/standards/dav/timeout
Purpose: Returns information about the timeout associated with
the lock
Schema: http://www.ietf.org/standards/dav/
Parent: ACTIVELOCK
Values= TimeType

5.6.2.7   ADDLOCKS XML Element

Name:     http://www.ietf.org/standards/dav/addlocks
Purpose: Lists additional resources associated with this lock, if
any.
Schema: http://www.ietf.org/standards/dav/
Parent: ACTIVELOCK
Values= 1*HREF

5.6.2.8   LOCKTOKEN XML Element

Name: http://www.ietf.org/standards/dav/statetoken
Purpose: Returns the lock token
Schema: http://www.ietf.org/standards/dav/
Parent: ACTIVELOCK
Values= HREF
Description: The HREF contains a Lock-Token-URL.


5.6.2.9   Example


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml


<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" AS = "D"/>
<D:PROPFIND>
     <prop><lockdiscovery/></prop>
</D:PROPFIND>



HTTP/1.1 207 Multi-Response
Content-Type: text/xml
Content-Length: xxxxx

<?XML:Namespace href ="http://www.ietf.org/standards/dav/" AS = "D"/>
<D:MultiResponse>
     <Response>
          <Prop>
               <lockdiscovery>
                    <activelock>
                         <locktype>write</locktype>
                         <lockscope>exclusive</lockscope>
                         <addlocks>
                              <HREF>http://foo.com/doc/</HREF>
                         </addlocks>
                         <owner>Jane Smith</owner>
                         <timeout>Infinite</timeout>
                         <locktoken>
                              <HREF>iamuri:unique!!!!!</HREF>
                         </locktoken>
                    </activelock>
               </lockdiscovery>
          </Prop>
          <Status>HTTP/1.1 200 Success</Status>
</Response>
</D:MultiResponse>


This resource has a single exclusive write lock on it, with an
infinite time out. This same lock also covers the resource
http://foo.com/doc/.


6    Version Control

[TBD]


7    Internationalization Support

[TBD]


8    Security Considerations

[TBD]


9    Copyright

Copyright (C) The Internet Society October 13, 1997. All Rights
Reserved.

This document and translations of it may be copied and furnished
to others, and derivative works that comment on or otherwise
explain it or assist in its implementation may be prepared,
copied, published and distributed, in whole or in part, without
restriction of any kind, provided that the above copyright notice
and this paragraph are included on all such copies and derivative
works.  However, this document itself may not be modified in any
way, such as by removing the copyright notice or references to
the Internet Society or other Internet organizations, except as
needed for the purpose of developing Internet standards in which
case the procedures for copyrights defined in the Internet
Standards process must be followed, or as required to translate
it into languages other than English.

The limited permissions granted above are perpetual and will not
be revoked by the Internet Society or its successors or
assignees.

This document and the information contained herein is provided on
an "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET
ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY
IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
PURPOSE.


10   Acknowledgements

Terry Allen, Harald Alvestrand, Alan Babich, Dylan Barrell,
Bernard Chester, Dan Connolly, Jim Cunningham, Ron Daniel, Jr.,
Jim Davis, Keith Dawson, Mark Day, Martin Duerst, David Durand,
Lee Farrell, Chuck Fay, Roy Fielding, Mark Fisher, Alan Freier,
George Florentine, Jim Gettys, Phill Hallam-Baker, Dennis
Hamilton, Steve Henning, Alex Hopmann, Andre van der Hoek, Ben
Laurie, Paul Leach, Ora Lassila, Karen MacArthur, Steven Martin,
Larry Masinter, Michael Mealling, Keith Moore, Henrik Nielsen,
Kenji Ota, Bob Parker, Glenn Peterson, Jon Radoff, Saveen Reddy,
Henry Sanders, Christopher Seiwald, Judith Slein, Mike Spreitzer,
Einar Stefferud, Ralph Swick, Kenji Takahashi, Robert Thau, John
Turner, Sankar Virdhagriswaran, Fabio Vitali, Gregory Woodhouse,
Lauren Wood


11   References

[Berners-Lee, 1997] T. Berners-Lee, "Metadata Architecture."
Unpublished white paper, January 1997.
http://www.w3.org/pub/WWW/DesignIssues/Metadata.html.

[Bradner, 1997] S. Bradner, "Key words for use in RFCs to
Indicate  Requirement Levels."  RFC 2119, BCP 14. Harvard
University.  March, 1997.


[Bray, Sperberg-McQueen, 1997] T. Bray, C. M. Sperberg-McQueen,
"Extensible Markup Language (XML): Part I. Syntax", WD-xml-lang.html, http://www.w3.org/pub/WWW/TR/WD-xml-lang.html.

[Connolly et al, 1997] D. Connolly, R. Khare, H.F. Nielsen, "PEP - an Extension Mechanism for HTTP", Internet draft, work-in-progress. draft-ietf-http-pep-04.txt,
ftp://ds.internic.net/internet-drafts/draft-ietf-http-pep-04.txt.

[Fielding et al., 1997] R. Fielding, J. Gettys, J. Mogul, H.
Frystyk, T. Berners-Lee, "Hypertext Transfer Protocol --HTTP/1.1." RFC 2068. U.C. Irvine, DEC, MIT/LCS.  January, 1997.
ftp://ds.internic.net/rfc/rfc2068.txt

[Lasher, Cohen, 1995] R. Lasher, D. Cohen, "A Format for
Bibliographic Records," RFC 1807. Stanford, Myricom. June, 1995.
ftp://ds.internic.net/rfc/rfc1807.txt

[Maloney, 1996] M. Maloney, "Hypertext Links in HTML." Internet
draft (expired), work-in-progress, January, 1996.

[MARC, 1994] Network Development and MARC Standards, Office, ed.
1994. "USMARC Format for Bibliographic Data", 1994. Washington,
DC: Cataloging Distribution Service, Library of Congress.

[Miller et al., 1996] J. Miller, T. Krauskopf, P. Resnick, W.
Treese, "PICS Label Distribution Label Syntax and Communication
Protocols" Version 1.1, W3C Recommendation REC-PICS-labels-961031. http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html.

[Slein et al., 1997] J. A. Slein, F. Vitali, E. J. Whitehead,
Jr., D. Durand, "Requirements for Distributed Authoring and
Versioning on the World Wide Web." Internet-draft, work-in-progress, draft-ietf-webdav-requirements-04.txt,
ftp://ds.internic.net/internet-drafts/draft-ietf-webdav-requirements-04.txt.

[WebDAV, 1997] WEBDAV Design Team. "A Proposal for Web Metadata
Operations." Unpublished manuscript.
http://www.ics.uci.edu/~ejw/authoring/proposals/metadata.html

[Weibel et al., 1995] S. Weibel, J. Godby, E. Miller, R. Daniel,
"OCLC/NCSA Metadata Workshop Report."
http://purl.oclc.org/metadata/dublin_core_report.

[Yergeau, 1997] F. Yergeau, "UTF-8, a transformation format of
Unicode and ISO 10646", Internet Draft, work-in-progress, draft-yergeau-utf8-rev-00.txt, http://www.internic.net/internet-drafts/draft-yergeau-utf8-rev-00.txt.


12   Authors' Addresses


Y. Y. Goland
Microsoft Corporation
One Microsoft Way
Redmond, WA 98052-6399
Email yarong@microsoft.com

E. J. Whitehead, Jr.
Dept. Of Information and Computer Science
University of California, Irvine
Irvine, CA 92697-3425
Email: ejw@ics.uci.edu

A. Faizi
Netscape
685 East Middlefield Road
Mountain View, CA 94043
Email: asad@netscape.com

S. R Carter
Novell
1555 N. Technology Way
M/S ORM F111
Orem, UT 84097-2399
Email srcarter@novell.com

D. Jensen
Novell
1555 N. Technology Way
M/S ORM F111
Orem, UT 84097-2399
Email dcjensen@novell.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/dav-08-to-09.html
##-----------------TITLE------------------------##
Changes Between -08 and -09 Revision of draft-ietf-webdav-protocol
##------------------TEXT------------------------##
WebDAV Distributed Authoring Protocol
Changes Between -08 and -09 Revision


Issue ID
Type
Issue Description [Modification]
Reference
TITLE
Editorial
The title would be more clear if "HTTP" were explicitly mentioned.
[Title changed to, "HTTP Extensions for Distributed Authoring - WEBDAV"]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
REFS
Editorial
The references in the -08 revision were not in the form typically found in RFCs (e.g., [RFC-2068] instead of [Fielding et al., 1997]), and would need to be changed by the RFC editor prior to publication, thus delaying publication as an RFC.
[All references in the text were changed to conform in style to recent RFCs, and formatting of the References section was modified to indent reference text.]
None.
TERMINOLOGY
Editorial
Many terms were discussed before their definition appeared in the text, leading to potential confusion. 
[The Terminology section was moved to become section 3, thus causing all section numbers after section 3 to be incremented.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
LIVE_PROPS
Change
There is confusion over whether a live property can have different behavior on different resources, or servers.
[The following requirement was added to section 4.1: "All instances of a given live property MUST comply with the definition associated with that property name." Also, clarification text was added to section 4.5.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
DUBLIN_CORE
Editorial
RFC 2413, published after –08 was submitted, is a better reference for the Dublin Core than the "OCLS/NCSA Metadata Workshop Report" reference.
[References to [Weibel et al., 1995] changed throughout to [RFC2413]].
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
WELL_FORMED
Change
Some confusion over whether WebDAV properties need to be persistently stored as XML, or must simply behave as XML when accessed via the protocol, but are capable of being stored in many possible ways.
[Added the following requirement to section 4.4: "The value of a property when expressed in XML MUST be well formed."]
None.
LANGUAGE_TAGGING
Change
The –08 draft isn’t as explicit as it could be about handling the "xml:lang" attribute, used by XML to tag the human language of an XML element.
[Added text to section 4.4 describing the use of "xml:lang", and added the following requirement to section 12.13.2: "Language tagging information in the property's value (in the "xml:lang" attribute, if present) MUST be persistently stored along with the property, and MUST be subsequently retrievable using PROPFIND."]
None.
URL_RFC
Editorial
RFC 2396, which defines URI/URL syntax, was published after the –08 draft, becoming the best reference for URI/URL definitions and syntax issues.
[Added a pointer in the Terminology section to RFC 2396 for the definition of URI and URL. Added RFC 2396 to the references section.]
None.
NAMESPACE
Change
Confusion over exactly what is a "consistent" namespace, and what requirements WebDAV imposes on repositories w.r.t. maintaining consistency of namespaces.
[Added language to section 5.1 and 5.2 to clarify the requirements on DAV namespaces. Deleted what was section 4.3 in the –08 draft. For more information, see: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0086.html]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
Also, list discussions: Jim Whitehead replys in:
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0237.html
to comments made during this thread: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0227.html
UUIDS
Editorial
The UUIDS/GUIDS I-D by Paul Leach, normatively referenced by the –08 specification, was not approved by the IESG due to existing, nearly identical UUIDS in Annex A of ISO-11578, the ISO Remote Procedure Call specification.  The IESG prefers that the ISO RPC specification be used instead of the UUID/GUID I-D.
[Changed references from the UUID/GUID I-D to ISO-11578, and added ISO-11578 to the references section.  This is only an editorial change because the format and semantics of GUIDs in ISO-11578 is nearly identical to those in the UUID/GUID I-D.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
UUID_SECURITY
Change
The UUIDs generated according to the ISO-11578 (ISO RPC) specification contain a "node" field which is the (a) IEEE 802 address for the server machine. This is a security concern, due to the potential to trace hardware by following the IEEE 802 address. The UUID/GUID I-D by Paul Leach contains an alternate mechanism for generating the "node" field using pseudo-random numbers which doesn’t have this security concern.
[Added section 17.8, "Risks Connected With Lock Tokens", to document the security concerns associated with UUIDs. Added section 6.4.1 which documents an alternate mechanism (copied from the UUID/GUID I-D) for generating the "node" field of a UUID.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
WRITE_LOCK_TOKEN
Change
As stated by Jim Amsden, "The app knows which credential it submitted in the lock request, but the activelock in the lockdiscovery returned in the prop of a lock result entity body does not contain this information. Owner is not sufficient as it is optional and does not necessarily  contain the authorization credentials. So if
there are a number of shared write locks on the resource, there is no way for the client app to figure out which one is his - the one just granted."
[Section 8.10.1 was modified to include a requirement that the lock token be returned in the Lock-Token header on successful completion of a LOCK request. A new section 7.2 was added which requires each lock request to generate a new lock token (i.e., every principal in a shared write lock has a separate lock token). A new paragraph was added to section 9.5 stating that the Lock-Token header is also be used as a response header. For a list message detailing the changes, see: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0031.html]
Discussion on the list: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0021.html
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0024.html
COLLECTION_LOCK
Editorial
Off-list discussions revealed some confusion on the semantics of locks on collections.
[Language was added to the specification in section 7.5 to clarify the meaning of collection locks.]
None.
DEPTH_USE
Editorial
Inconsistent use of "depth=infinity", "Depth: infinity" and "depth locked" to refer to a collection locked with "Depth: infinity".
[Changed to use "Depth: infinity" consistently throughout the document.]
None.
MOVE_WITH_LOCK
Editorial
Off-list discussions indicated that it was possible to interpret the requirement, "A MOVE MUST NOT move the write lock with the resource" as requiring a MOVE of a write-locked resource to fail, rather than the desired behavior of moving the resource and dropping the lock.
[The language of section 7.7 was modified to clarify the interaction of MOVE and locks.]
None.
MIME_XML
Change
The publication of RFC 2376 ("XML Media Types") set rules for the transfer of XML MIME entities, stating that both text/xml and application/xml could be used to label XML MIME entities. The WebDAV draft, written before publication of RFC 2376, needed to be updated to conform with XML MIME rules.
[The language of section 8.1 was modified to note that a server can also return application/xml. All examples which show use of XML with HTTP have been changed to use the "charset" parameter to label the charset of the HTTP entity. Similarly, the "encoding" attribute has been added to all XML examples to label the charset encoding within the XML. Added text to the Security Considerations section noting that the security considerations for XML also apply to WebDAV. Added text to the Internationalization Considerations section noting that implementors should read RFC 2376.]
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998AprJun/0024.html
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0072.html
XML_NAMESPACE
Change
Due to concerns over embedding XML within HTML, and insufficient scoping rules, the W3C made significant modifications to XML Namespaces since the –08 specification. However, to ensure interoperability with other XML processors, it would be desirable to use the same format for XML Namespaces.
[Since the W3C has not yet finished work on XML Namespaces, Appendix 4 (section 24.4) was deleted, and replaced with the normative contents of WD-xml-names-19980916 ("Namespaces in XML"). All examples in the specification which use XML namespaces were modified to use the new XML namespaces. The requirements on scoping of XML namespaces in an XML document were removed from section 24.4.9, which has been renamed to "Meaning of Qualified Names".]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
Also, list discussion at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0010.html

XML_LOCK_ELEMS
Editorial
The example in section 8.1.2 doesn’t correctly enclose the lock description elements in the appropriate "lockscope" and "locktype" elements.
[The example in 8.1.2 has been fixed to conform with the DTD.]
Alan Babich caught this error: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0341.html
STATUS_CODES
Change
Status code 425 (Insufficient Space on Resource) is really a server error, and hence should be a 5xx series status code. Status code 424 could use some improvement in its definition. The HTTP/1.1 spec. always puts the status-phrase in parentheses to emphasize that it is non-normative. Many descriptions of status codes could use improvement, as they are too minimal.
[Status code 425 has been changed to 507 (Insufficient Storage). Status code 424 has been changed to 424 (Failed Dependency). All status phrases have been placed in parentheses. Descriptions of status codes have been improved in section 10.]
Roy Fielding caught this error:
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0069.html
COPY_AT_DEST
Editorial
Keith Moore writes:

However, the exact state and behavior of the destination resource depend on what information the source resource is able to provide and what information the destination resource is able to accept.

which seems a bit inconsistent with the third paragraph:

All properties on the source resource MUST be duplicated on the destination resource, subject to modifying headers and XML elements, following the definition for copying properties.

[Section 8.8.1 was modified to clarify the behavior of the server during copy operations.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
COPY_MOVE_SKIP_SUBTREES
Editorial
There was some confusion over the "best effort" semantics for copy and move when they encounter an error while trying to copy/move a subtree. There was similar confusion over when to report, and when to not report errors in this situation.
[Sections 8.8.3 and 8.9.2 were modified to add clarifying text to the descriptions of the COPY and MOVE methods when applied to collection hierarchies.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
COPY_MOVE_SRC_EQ_DST
Change
Off-list discussions indicated that the specification was silent on the behavior when the source and the destination of a COPY/MOVE are the same.
[Sections 8.8.5 and 8.9.4 have been modified so that the 403 status code is returned for this condition.]
None.
409_COPY_MOVE
Change
The 409 status code is returned by MKCOL when an intermediate collection needs to be created to complete the operation, but COPY and MOVE do not have 409 defined for the same error condition.
[Sections 8.8.5 and 8.9.4 have been modified to add a 409 response when a COPY/MOVE cannot be completed until one or more intermediate collections are created. Added Greg Stein to Acknowledgements.]
Greg Stein caught this error: 
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0342.html

RESPONSEDESCRIPTION
Change
Greg Stein writes:
7.1.1 (ed: in the –08 spec.) has an example with a multi-status response. The second <propstat> element contains a <responsedescription>. According to the DTD (and under the propstat element description), this is not allowed.
[The DTD has been changed to allow responsedescription within a propstat element.]
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0058.html

REPLICATE
Change
There was some question concerning what "replicate" means in the context of section 8.10.3.
[This section has been re-written to discuss the phenomenon of replication in terms of the same resource being accessible via multiple URIs.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
Also discussed on the list by Larry Masinter:
http://lists.w3.org/Archives/Public/w3c-dist-auth/1998JulSep/0227.html
REQUEST_URI
Editorial
"Request-URI" was used inconsistently throughout the –08 specification.
[All instances changed to "Request-URI" throughout.]
None.
URI_TO_ABSOLUTEURI
Change
The Destination header and the If header both used the URI production, which allows the use of relative URIs in these headers.  However, this raises some awkward questions concerning what the base is for these relative URIs.
[The Destination header and the If header have been changed to use the absoluteURI production, mandating use of absolute, and precluding use of relative URIs.] 
None.
ETAG
Editorial
Change references to "e-tag" to "Etag" throughout.
None.
OVERWRITE_409_TO_412
Change
The correct status code for when a resource exists at the destination and the Overwrite header is "T" is 412, not 409.
[Changed section 9.6 to use status code 412 rather than 409 for this condition.]
None.
DEPTH_XML_ELEM
Change
DASL needs to reuse the Depth XML element for specifying searches, and as a result needs to have "1" be a legal value.
[The Depth XML element now has "1" as a valid value.]
None.
DAV_XML_PROCESSING
Editorial
The title to Section 14 was changed to avoid using the term "Processing Instruction" which has a specific meaning for XML processors.
None.
TLS_CLARIFY
Editorial
TLS doesn’t necessarily provide a secure connection unless secure ciphersuites are used in conjunction with mutual authentication of client and server.
[Section 17.1 was modified to add these conditions to its discussion of secure connections with TLS.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
XML_ENTERNAL_ENTITIES
Editorial
XML has "include by value" capability with its external entities feature.  This raises some security risks.
[Added section 17.7 to the Security Considerations section describing the security risks associated with XML external entities.]
None.
NITS
Editorial
Keith Moore’s comments contained several modifications labeled "[NIT]".
[Accepted all proposed changes.]
Comments from Keith Moore, at: http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0065.html
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/ns_dav.html
##-----------------TITLE------------------------##
Protocol Design Document
##------------------TEXT------------------------##
Distributed Authoring and Versioning Protocol 

Version 0.1 

Jim Cunningham (jfc@netscape.com) 

Asad Faizi (asad@netscape.com) 

Netscape Corp.




This documents intends to address some of the issues with adding new distributed authoring and versioning functionality by implementing new methods. This is by no means a complete DAV spec. It only attempts to answer some of the questions regarding new methods. Netscape welcomes and appreciates any feedback on this document. 

Please send any comments to Asad Faizi .

Thank you




MetaData 




FunctionGet Attribute SheetFunctional DefinitionRetrieves a file representing the full attribute sheet (i.e. all available attributes) for the resource named by URL.RequestThe Method is GETATTRIBUTES. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource whose property sheet is requested.
The Request Header Fields must include the following header in addition to those usually supplied:

Content-Attributes specifies the property whose value is needed. The user may specify a comma separated list of attributes or "*" if all the attributes are needed.


Content-Attributes: attribute1, attribute2, attribute3,... | * 
ResponseIf the request is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. Request successfull. The resource's property sheet is attached with the response.

The header of the response contains Content-Attribute followed by a comma separated list of <attribute-name> <attribute-value> pairs.

Content-Attributes: "<"attribute-name">" "<"attribute-value">"  

separated by comma (,).

If the checkout is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid. 401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt. 403 Forbidden. The client is forbidden to checkout the specified resource, possibly because revsision control is not enabled for it. 404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server. 500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence. 501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionSet Attribute SheetFunctional DefinitionUploads editable attributes from the property sheet for the resource named by URL.RquestThe Method is SETATTRIBUTES. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource whose property sheet is requested.
The Request Header Fields must include the following header in addition to those usually supplied:

Content-Properties The user provides a comma separated list of <attribute-name> <attribute-value> pairs as the value of this header.


Content-Properties: "<"property name">" "<"property value">"  
ResponseIf the request is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. Request successfull. The resource's property sheet is attached with the response.

If the checkout is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid. 401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt. 403 Forbidden. The client is forbidden to checkout the specified resource, possibly because revsision control is not enabled for it. 404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server. 500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence. 501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so.  


.




Revision Control 




FunctionCheckoutFunctional DescriptionRetrieves a specified version of the resource named by URL, and may lock it for editing.RequestThe Method is CHECKOUT. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource to checkout. The Request Header Fields must include the following header in addition to those usually supplied:

Content-Lock specifies the status of lock. The user may define the if the checked-out resource should be locked, in which case the value of Content-Lock is ON, otherwise Off. 

Content-Lock: "On" | "Off"  


The Request Header Fields must include only one of the following headers in addition to those usually supplied: 

Content-Version specifies the version tag of the resource to checkout. The value "head" indicates the default-published version, as in the case:


Content-Version: head


or

Content-Label specifies a label, previously associated with a specific version of the resource, to identify the version for checkout. 

Content-Label: label


ResponseIf the checkout is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The resource was checked out (and a lock was established).

It must also return the following response headers, if they are available: 

Content-Version specifies the version tag of the resource that was checked out. ("head" in the request should be translated to a specific version tag in the response). 

Content-Version: head


and/or

Content-Label specifies any label which was previously associated with this specific version of the resource. 

Content-Label: label



If the checkout is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to checkout the specified resource, possibly because revsision control is not enabled for it.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionCheckinFunctional DescriptionUploads a specified version of the resource named by URL, and unlocks it.RequestThe method is CHECKIN. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource to checkin. The Request Header Fields must include the following header in addition to those usually supplied:

Content-Version specifies the version tag of the resource to checkin. The user may specify a certain version or may use "head". The value "head" indicates the default-published version, as in the case:


Content-Version: head | version-number 

Content-Lock specifies the status of lock. The user may define the if the checked-in resource should be locked, in which case the value of Content-Lock is ON, otherwise Off. 

Content-Lock: "On" | "Off"  

Content-Comment specifies the comments provided by the user to be associated with this particular version. 

Content-Comments: comments 

ResponseIf the checkin is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The resource was checked in (and a lock was removed).

If the request is successful, the server must also return the following response headers, if they are available: 

Content-Version specifies the (possibly new) version tag of the resource that was checked in. ("head" in the request should be translated to a specific version tag in the response). 

Content-Version: version 

and/or

Content-Label specifies any label which was previously associated with this specific version of the resource. 

Content-Label: label



If the checkin is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to checkin the specified resource, possibly because revsision control is not enabled for it, or no lock was previously established.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionUnlockFunctional DefinitionRemoves a lock from the specified version of the resource named by URL.RequestThe method is UNLOCK. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource to unlock. The Request Header Fields must include only one of the following headers in addition to those usually supplied: 

Content-Version specifies the version number of the resource be locked. The value "head" indicates the default-published version: 

Content-Version: version 

or

Content-Label specifies a label, previously associated with a specific version of the resource, to identify the version locking. 

Content-Label: label

ResponseIf the unlock is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The resource was unlocked, or no lock had been previously established on it.

If the unlock is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to unlock the specified resource, possibly because revsision control is not enabled for it.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionLockFunctional DefinitionSet a lock to the specified version of the resource named by URL.RequestThe method is LOCK. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource to be locked. The Request Header Fields must include only one of the following headers in addition to those usually supplied: 

Content-Version specifies the version number of the resource be locked. The value "head" indicates the default-published version: 

Content-Version: version 

or

Content-Label specifies a label, previously associated with a specific version of the resource, to identify the version locking. 

Content-Label: label

ResponseIf the lock is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The resource was locked, or lock had been previously established on it.

If the lock is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to lock the specified resource, possibly because revsision control is not enabled for it.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionDefaultFunctional DefinitionMakes the specified version of the resource named by URL the default-published version of that resource when a version is not explicitly specified (such as in response to a normal GET).RequestThe method is DEFAULT. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource to make the head. 

The Request Header Fields must include only one of the following headers in addition to those usually supplied: 

Content-Version specifies the version number of the resource to become default-published.


Content-Version: version 

or

Content-Label specifies a label, previously associated with a specific version of the resource, to identify the version to become default. 

Content-Label: label


ResponseIf the default is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The version specified of the resource was made the default version, or it already was the default version.

If the default is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt. This may occur if another user has a lock on the resource, or on the current default version of the resource.403 Forbidden. The client is forbidden to default the specified version of the resource, possibly because revsision control is not enabled for it.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionRevision LogFunctional DefinitionReturns information summarizing the version history and checkin/out logs of the resource named by URL.RequestThe method is REVLOG. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource of which the log is requested.
The Request Header Fields must include the following header in addition to those usually supplied.  

Content-Log The user may specify a particular revision number or "*" for all revisions of this particular resource, or X.Y.* for all the versions of the branch Y of root X. 

Content-Log: RevNum | * | X.Y.* 
ResponseIf the log is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The log is successfully returned.

Server also returns a space seperated list of all the versions of the requested resource.

If the log is not successful, the server must return one of the following
Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to provide log of the specified resource, possibly because revsision control is not enabled for it.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 

NoteLogs are different from Property Sheet information. Log refers to information pertaining to revision control aspects of the documents only.

.

FunctionLabelFunctional DescriptionAssociates a text label with a given version of a resource.RequestThe method is LABEL. The Protocol is HTTP/1.1. The Request-URI must correspond to the resource of which the log is requested.
The Request Header Fields must include the following headers in addition to those usually supplied: 

Content-Version specifies the specific version of the resource to which the label is to be applied. 

Content-Version: version 

and

Content-Label is the label to be applied. 

Content-Label: label

ResponseIf the label is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The label is successfully associated. 

If the log is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to perform lable operation to the specified resource, possibly because revsision control is not enabled for it.404 Not Found. The resource or version of the resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 

NoteLabels is not part of the meta data and hence not accessable through GETPROPERTY. It is very specific to revision control




File Management 




FunctionIndex DirectoryFunctional DescriptionObtains an index of resources and their corresponding properties which reside beneath a given URI in the server's content store. One example is to obtain a list of files which reside in a server directory (or URI which ends with a / separator).RequestThe request's Method must be INDEX. The Protocol must be HTTP/1.0. The Request-URI must correspond to the location of the resource which is requested to be indexed.  The Request Header Fields may include the following header: 

Content-Index specifies a template for the index to follow, in order to include additional properties in the index response. For instance, including the following header with an index request: 

Content-Index: "filename" "content-type" "checked-in" 

Instructs the server to return an index of the resources in the specified directory, listed with the resource's filename, content type, and its checked-in status. The client may request a list of available properties (to be included in a subsequent index request) by including the Content-Index header without any property values.
ResponseIf the server is able to index the given resource, it must return the following Status-Code in the Status-Line of its response: 

200 OK. This indicates that the response which follows contains a listing of objects contained in the specified resource, as well as their properties.

A successful response must include the following Entity Header Field: 

Content-type must be set to the constant text/plain.

The Entity-Body must consist of a series of lines, in ASCII text. Each line corresponds to a resource within the resource being indexed. 

If the request header Content-Index is included in the request with property parameters, the BNF for this response is defined as follows:

Entity-body = *(resource) 

[template ["]property name["] [SP ["]property name["] ...] ( LF | CRLF )] 

resource = [SP ["]property["] ...]( LF | CRLF ) 

The first line, template, indicates the template which the index will follow for returning properties along with the resource description. This template line should be identical to the requested template line, although it is not a strict requirement (for instance, if the client requests an invalid property). The client should use the response template line to determine property names. If the template line is omitted, the default attributes are assumed to be of the form: 

template "filename" SP "content-type" SP "size" SP "last-modification" CRLF 

Following the single optional template line are the series of resource lines, one for each resource. 

The defined properties include:

filename = The name of the resource, encoded using the URL encoding rules. For more information, refer to RFC 1945. 

content-type = The MIME type of the specified resource. The special keyword directory is used to designate filesystem directories or their equivalents.

size = The size in octets of the resource. The server may choose to respond with a single hyphen character (-) if it does not know the size of the resource.

last-modification = The date of last modification of this resource, specified as the number of seconds since January 1, 1970 00:00:00 UTC. The server may choose to respond with a single hyphen character (-) if it does not know the size of the resource. 

property = Any additional properties which the server chooses to include which represent meta-information about the resource. 

For each property of a given resource which does not have a value, the value "" is returned. 

If the request header Content-Index is included in the request without any property parameters, such as in the case: 

Content-Index:


Then the response consists of a file of type text/plain with a single line:

[template [SP ["]property name["] ...] ( LF | CRLF )]


Where the template includes the list of all property names available for indexing.

If the request header Content-Index is not included in the request, the BNF for this response is defined as follows: 

Entity-body = *(resource) 

resource = filename SP content-type SP size SP last-modification ( LF | CRLF )


If the server is unsuccessful in indexing the given resource, it must respond with one of the following Status-Codes on the Status-Line of its response:

401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The server is unable or unwilling to index the given resource for the requesting client.404 Not Found. The server was unable to locate the specified resource.500 Server Error. The server encountered an internal error while processing the request, or does not implement indexing of the specified resource and is not aware of the missing functionality.501 Not Implemented. The server does not have the functionality required to index the given resource, and is aware that it lacks it.


.

FunctionCreate DirectoryFunctional DescriptionThe MKDIR method is used to create a new container object in the content store. For many servers, this will be a filesystem directory from the underlying operating system.RequestThe request's Method must be MKDIR. The Protocol is HTTP/1.1. The Request-URI must be the URI of the new directory or container to create.
It is recommended, but not required, that the server create all containers higher in the URI hierarchy to the specified URI before creating the new URI. For example, if the request asks for /foo/bar to be created, and /foo does not exist, the server must either create /foo before creating /foo/bar and return success as defined below, or it must return an error as defined below. The server is not required to implement container creation for all or even any of its URIs. For some content stores, it might not make sense or the concept of containers or directories might not directly apply. ResponseIf the container creation is successful, the server must return the following Status-Code in the Status-Line of the response: 

201 Created. The directory, and any of its parent directories, were created and are now ready for use. No deferred creation is allowed.

If the container creation is not successful, the server must return one of the following Status-Codes in the Status-Line of the response:

401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The server was unwilling or unable to create the directory. The directory could not be created, because it either already exists, or the creation of the directory and its parents failed.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionDestroy ResourceFunctional DescriptionThe DESTROY method is used to schedule the parmenant removal of the resource, and delete revision archive.RequestThe request's Method is DESTROY. The Protocol is HTTP/1.1. The Request-URI must correspond to the location of the archieve to be removed.ResponseIf the destruction is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The specified resource, and any resources beneath it, has been scheduled for removal at a later time. Servers are not required to remove the content immediately.

If the deletion is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The requesting client is not allowed to remove the specified resource.404 Not Found. The server cannot find the requested resource.500 Server Error. The server encountered an internal error which prevents it from removing the specified resource. Or, the server does not implement removal of the type of resource which was requested to be removed and is unaware that it does not know how to do so.501 Not Implemented. The server is does not know how to remove the specified content, and is aware that it is unable to do so.


.

FunctionMove ResourceFunctional DescriptionThe MOVE method schedules the movement of a given resource from its current URI location to a new URI location.RequestThe request's Request-Method must be MOVE. The Protocol is HTTP/1.1. The Request-URI must correspond to the location of the resource which is requested to be moved. The Request Header Fields must include the following header in addition to those usually supplied:

New-URI specifies the new URI to which the resource specified by Request-URI should be moved.

The server is not required to provide clients with automatic redirection from the old URI to the new one. The server is also allowed to selectively implement the relocation of resources and to refuse to move certain document types at its own discretion. For more information on request redirection, please refer to RFC 1945. 
ResponseIf the relocation is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The resource was scheduled to be moved. The server may carry out the movement immediately or at some future time, but guarantees that the movement will occur.

If the relocation is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid.401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The client is forbidden to manipulate content in either the source or destination.404 Not Found. The resource specified by Request-URI was not found by the server.500 Server Error. The server encountered an internal error while trying to service the request, or does not implement the required functionality and does not know that it cannot do so.501 Not Implemented. The server does not implement movement of the given resource, and is aware that it does not know how to do so. 


.

FunctionRemove DirectoryFunctional DescriptionThe RMDIR method is used to schedule the removal of empty container objects from the content store. For many servers, this will be a filesystem directory from the underlying operating system.RequestThe request's Method must be RMDIR. The Protocol is HTTP/1.1. The Request-URI must be the URI of the directory or container to remove.
Servers are not required to implement this method on all resources in the content store. Further, if the requested container is not empty, the server is free to reject the request to remove the container until the contents have been emptied using the DELETE command. ResponseIf the container removal is successful, the server must return the following Status-Code in the Status-Line of the response: 

200 OK. The specified container was either removed, or scheduled for removal at a later time. The removal is guaranteed to take place at some point in the future. 

If the container removal is not successful, the server must return one of the following Status-Codes in the Status-Line of the response: 

401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt.403 Forbidden. The server was unwilling or unable to remove the directory. The directory could not be removed, possibly because it's not empty.404 Not Found. The specified container could not be found in the content store.500 Server Error. The server encountered an internal error which prevented it from carrying out the request, or the required functionality is not implemented and the server is unaware of its existence.501 Not Implemented. The server does not implement functionality required by the given operation, and is aware that it cannot do so. 


.

FunctionCopy ResourceFunctional DescriptionSchedules the copying of a given resource from its current URI location to a new URI location.RequestThe method is COPY. The Protocol is HTTP/1.1. The Request-URI must correspond to the location of the resource which is requested to be copied.
The Request Header Fields must include the following header in addition to those usually supplied:

New-URI specifies the new URI to which the resource specified by Request-URI should be copied. 

The server is not required to provide clients with automatic redirection from the old URI to the new one. The server is also allowed to selectively implement the relocation of resources and to refuse to copy certain document types at its own discretion.
ResponseIf the copy is successful, the server must return the following Status-Code in the Status-Line of its response: 200 OK. The resource was scheduled to be copied. The server may carry out the copy immediately or at some future time, but guarantees that the copy will occur. 

If the copy is not successful, the server must return one of the following Status-Codes in the Status-Line of its response: 

400 Bad Request. A required header is missing or invalid, or the request is invalid. 401 Unauthorized. The request is valid, but the proper credentials have not been provided by the client. The server and client are required to follow all rules pertaining to HTTP Basic Authorization in this case. The client may either send a new request with the required credentials, or abort the attempt. 403 Forbidden. The client is forbidden to manipulate content in either the source or destination. 404 Not Found. The resource specified by Request-URI was not found by the server. 500 Server Error. The server encountered an internal error while trying to service the request, or does not implement the required functionality and does not know that it cannot do so. 501 Not Implemented. The server does not implement copy of the given resource, and is aware that it does not know how to do so


.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/protocol/draft-ietf-webdav-protocol-03.html
##-----------------TITLE------------------------##
Extensions for Distributed Authoring and Versioning
                              on the
                      World Wide Web -- WEBDAV
##------------------TEXT------------------------##
Extensions for Distributed Authoring and Versioning
                              on the
                      World Wide Web -- WEBDAV


WEBDAV Working Group                     Y. Y. Goland, Microsoft
INTERNET-DRAFT                 E. J. Whitehead, Jr., U.C. Irvine
<draft-ietf-webdav-protocol-03>               A. Faizi, Netscape
                                             S. R Carter, Novell
                                               D. Jensen, Novell
Expires April 6, 1998                         September 29, 1997





This HTML version was converted from plaintext ASCII to HTML by Jim Davis.  Apologies for any errors inserted in the process.


Status of this Memo

This document is an Internet-Draft. Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its
areas, and its working groups. Note that other groups may also
distribute working documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six
months and may be updated, replaced, or made obsolete by other
documents at any time. It is inappropriate to use Internet-Drafts
as reference material or to cite them other than as "work in
progress".

To learn the current status of any Internet-Draft, please check
the "1id-abstracts.txt" listing contained in the Internet-Drafts
Shadow Directories on ftp.is.co.za (Africa), nic.nordu.net
(Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East
Coast), or ftp.isi.edu (US West Coast).

Distribution of this document is unlimited. Please send comments
to the Distributed Authoring and Versioning (WEBDAV) working
group at <w3c-dist-auth@w3.org>, which may be joined by sending a
message with subject "subscribe" to <w3c-dist-auth-request@w3.org>.

Discussions of the WEBDAV working group are archived at
<URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth>.


Abstract


This Document specifies a set of methods and content-types
ancillary to HTTP/1.1 for the management of resource properties,
simple name space manipulation, simple resource locking
(collision avoidance) and resource version control.



                        Table of Contents
Abstract
1    Terminology
2    Data Model and Methods for DAV Properties
     2.1  Introduction
          2.1.1 The DAV Property
          2.1.2 Existing Metadata Proposals
          2.1.3 Properties and HTTP Headers
     2.2  A Property Model for HTTP Resources
          2.2.1 Overview
          2.2.2 Property Namespace
     2.3  Schemas
          2.3.1 PropSchema XML Element
          2.3.2 DTD XML Element
          2.3.3 DefinedProps XML Element
          2.3.4 PropEntries XML Element
          2.3.5 Live XML Element
     2.4  DAV Schema
          2.4.1 DAV Property
          2.4.2 Level XML Element
          2.4.3 Prop XML element
          2.4.4 PropLoc XML Attribute
          2.4.5 Example
     2.5  Property Identifiers
          2.5.1 Problem Definition
     2.6  Link XML Element
          2.6.1 Problem Description
          2.6.2 Solution Requirements
          2.6.3 Link XML Element
          2.6.4 Src XML Element
          2.6.5 Dst XML Element
          2.6.6 Example
     2.7  Multi-Status Response
          2.7.1 Problem Definition
          2.7.2 Solution Requirements
          2.7.3 Multi-Status Response
     2.8  Properties and Methods
          2.8.1 DELETE
          2.8.2 GET
          2.8.3 PROPPATCH
          2.8.4 PUT
          2.8.5 PROPFIND
3    A Proposal for Collections of Web Resources and Name Space
Operations
     3.1  Observations on the HTTP Object Model
          3.1.1 Collection Resources
          3.1.2 Creation and Retrieval of Collection Resources
          3.1.3 Source Resources and Output Resources
     3.2  MKCOL Method
          3.2.1 Problem Description
          3.2.2 Solution Requirements
          3.2.3 Request
          3.2.4 Response
          3.2.5 Example
     3.3  Standard DAV Properties
          3.3.1 IsCollection Property
          3.3.2 DisplayName Property
          3.3.3 CreationDate Property
          3.3.4 GETentity Property
          3.3.5 INDEXentity Property
          3.3.6 Content-Type XML Element
          3.3.7 Content-Length XML Element
          3.3.8 Content-Language XML Element
          3.3.9 Last-Modified XML Element
          3.3.10 Etag XML Element
     3.4  INDEX Method
          3.4.1 Problem Description
          3.4.2 Solution Requirements
          3.4.3 The Request
          3.4.4 The Response
          3.4.5 ResInfo XML Element
          3.4.6 Members XML Element
          3.4.7 Href XML Element
          3.4.8 Example
     3.5  Behavior of RFC 2068 Methods on Collections
          3.5.1 GET, HEAD for Collections
          3.5.2 POST for Collections
          3.5.3 PUT for Collections
          3.5.4 DELETE for Collections
          3.5.5 DELETE Method for Non-Collection Resources
     3.6  COPY Method
          3.6.1 Problem Description
          3.6.2 Solution Requirements
          3.6.3 The Request
          3.6.4 The Response
          3.6.5 Examples
     3.7  MOVE Method
          3.7.1 Problem Description
          3.7.2 Solution Requirements
          3.7.3 The Request
          3.7.4 The Response
          3.7.5 Examples
     3.8  ADDREF Method
          3.8.1 Problem Definition
          3.8.2 Solution Requirements
          3.8.3 The Request
          3.8.4 Example
     3.9  DELREF Method
          3.9.1 Problem Definition
          3.9.2 Solution Requirements
          3.9.3 The Request
          3.9.4 Example
     3.10 PATCH Method
          3.10.1 Problem Definition
          3.10.2 Solution Requirements
          3.10.3 The Request
          3.10.4 text/xml elements for PATCH
          3.10.5 The Response
          3.10.6 Examples
     3.11 Headers
          3.11.1 Destination Header
          3.11.2 Enforce-Live-Properties Header
          3.11.3 Overwrite Header
          3.11.4 Destroy Header
          3.11.5 Collection-Member Header
     3.12 Links
          3.12.1 Source Link Property Type
4    State Tokens
     4.1  Overview
          4.1.1 Problem Description
          4.1.2 Solution Requirements
     4.2  State Token Syntax
     4.3  State Token Conditional Headers
          4.3.1 If-State-Match
          4.3.2 If-None-State-Match
     4.4  State Token Header
     4.5  E-Tags
5    Locking
     5.1  Problem Description - Overview
          5.1.1 Exclusive Vs. Shared Locks
          5.1.2 Required Support
     5.2  LOCK Method
          5.2.1 Operation
          5.2.2 Effect of Locks on Properties and Containers
          5.2.3 Locking Replicated Resources
          5.2.4 Interaction with other Methods
          5.2.5 Lock Compatibility Table
          5.2.6 Status Codes
          5.2.7 Example
          5.2.8 Lock-Info Request Header
          5.2.9 Owner Request Header
          5.2.10 Time-Out Header
          5.2.11 State-Token Header
     5.3  Write Lock
     5.4  Lock Tokens
          5.4.1 Problem Description
          5.4.2 Proposed Solution
          5.4.3 Lock Token Definition
     5.5  UNLOCK Method
          5.5.1 Problem Definition
          5.5.2 Example
     5.6  Discovery Mechanisms
          5.6.1 Lock Type Discovery
          5.6.2 Active Lock Discovery
6    Version Control
7    Internationalization Support
8    Security Considerations

9    Acknowledgements
10   References
11   Authors' Addresses



1    Terminology

Collection - A resource that contains member resources.

Member Resource - a resource referred to by a collection. There
are two types of member resources: external and internal.

Internal Member Resource - the name given to a member resource of
a collection whose URI is relative to the URI of the collection.

External Member Resource - a member resource with an absolute URI
that is not relative to its parent’s URI.

Properties - A set of name/value pairs that contain descriptive
information about a resource.

Live Properties - Properties whose semantics and syntax are
enforced by the server. For example, a live "read-only" property
that is enforced by the server would disallow PUTs to the
associated resource.

Dead properties - Properties whose semantics and syntax are not
enforced by the server. A dead "read-only" property would not be
enforced by the server and thus would not be used by the server
as a reason to disallow a PUT on the associated resource.


2    Data Model and Methods for DAV Properties

2.1  Introduction


2.1.1     The DAV Property

Properties are pieces of data that describe the state of a
resource. Properties are data about data. The term property is
used within this specification to disambiguate the concept from
the overloaded terms "metadata" and "attribute".
Properties are used within distributed authoring environments to
provide for efficient discovery and management of resources. For
example, a 'subject' property might allow for the indexing of all
resources by their subject, and an 'author' property might allow
for the discovery of what authors have written which documents.


2.1.2     Existing Metadata Proposals
Properties have a long played an essential role in the
maintenance of large document repositories, and many current
proposals contain some notion of a property. These include PICS
[Miller et al., 1996], PICS-NG, the Rel/Rev draft [Maloney,
1996], Web Collections, XML [Bray, Sperberg-McQueen, 1997],
several proposals on representing relationships within HTML,
digital signature manifests (DCMF), and a position paper on Web
metadata architecture [Berners-Lee, 1997].

Some proposals come from a digital library perspective. These
include the Dublin Core [Weibel et al., 1995] metadata set and
the Warwick Framework [Lagoze, 1996], a container architecture
for different metadata schemas. The literature includes many
examples of metadata, including MARC [MARC, 1994], a
bibliographic metadata format, RFC 1807 [Lasher, Cohen, 1995], a
technical report bibliographic format employed by the Dienst
system, and the proceedings from the first IEEE Metadata
conference describe many community-specific metadata sets.

Participants of the 1996 Metadata II Workshop in Warwick, UK
[Lagoze, 1996], noted that, "new metadata sets will develop as
the networked infrastructure matures" and "different communities
will propose, design, and be responsible for different types of
metadata." These observations can be corroborated by noting that
many community-specific sets of metadata already exist, and there
is significant motivation for the development of new forms of
metadata as many communities increasingly make their data
available in digital form, requiring a metadata format to assist
data location and cataloging.


2.1.3     Properties and HTTP Headers

Properties already exist, in a limited sense, within HTTP through
the use of message headers. However, in distributed authoring
environments a relatively large number of properties are needed
to describe the state of a resource, and setting/returning them
all through HTTP headers is inefficient. Thus a mechanism is
needed which allows a principal to identify a set of properties
in which the principal is interested and to then set or retrieve
just those properties.


2.2  A Property Model for HTTP Resources


2.2.1     Overview

The DAV property model is based on name/value doubles. The name
of a property identifies the property's syntax and semantics, and
provides an address with which to refer to a property. The name
and value of a property is expressed as a well-formed XML
element, where the name of the property is the name of the XML
element, and the value of the property MUST be either blank, or a
well-formed XML element value.


2.2.2     Property Namespace


2.2.2.1   Problem Definition

The requirement is to be able to associate a value with a
property name on a resource and to be able to directly address
that value.
2.2.2.2   Solution Requirement

Ideally a property namespace should work well with extant
property implementations as well as database systems. The DAV
property namespace has been specified with the following two
facts in mind:

     Namespaces associated with flat file systems are ubiquitous.

     The majority of databases use a fixed schema mechanism.
The last point makes efficient implementation of hierarchical
properties difficult. Specifically, each property has a random
set of children; the best a relational database can do is provide
a table with name and value, where the value is a series of
indexes into other tables and each index represents a specific
value. However most RDBS do not provide for table pointers, only
index values. Such a system would have to be jury-rigged to
handle table pointers. In addition, indexing systems are
optimized for a small set of relatively large tables;
hierarchical property systems tend toward many properties, each
with different numbers and types of children, thus potentially
requiring a table for each child.

It would seem best to implement a flat property namespace,
inducing a natural isomorphism between DAV and most native file
systems. Adopting such a model will not restrict RDBS from taking
full advantage of their search facilities.

However, it seems that future trends might be toward hierarchical
properties. Therefore, DAV requirements [Slein et al.] stipulate
that the design of the flat property system MUST be such that it
will be possible to add true hierarchical properties later
without breaking downlevel clients. Specifically, a flat client
MUST be able to speak to a hierarchical server and a hierarchical
client MUST be able to speak to a flat server. Worst case either
way MUST be that the request fails.


2.2.2.3   Property Names

A property name identifies both the syntax and semantics of the
property's value. It is critical that property names do not
collide, e.g., two principals defining the same property name
with two different meanings.

The URI framework provides a mechanism to prevent namespace
collision and for varying degrees of administrative control.
Rather than reinvent these desirable features, DAV properties
make use of them by requiring that all DAV property names MUST be
URIs.  Since a property is also an XML element, the name of the
XML element is a URI.

The property namespace is flat, that is, it is not possible to
string together a series of property names in order to refer to a
hierarchy of properties. Thus it is possible to refer to a
property B but not a property A/B, where is also a property
defined on the resource.

Finally, it is not possible to define the same property twice as
this would cause a collision in the resource's property
namespace.


2.3  Schemas
A schema is a group of property names and XML elements.

Schema discovery is used to determine if a system supports a
group of properties or XML elements. A property does not
necessarily contain sufficient information to identify any
schema(s) to which it may belong.

As with property names, schemas MUST use URIs as their names.

A resource declares its support for a schema by defining a
property whose name is the same as the schema's. The property
SHOULD contain the PropSchema XML element.


2.3.1     PropSchema XML Element

Name: http://www.ietf.org/standards/dav/PropSchema
Purpose:  To provide information about properties
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Values:   [DTD] [DefinedProps]
Description:This property contains the definition of the schema.
This definition consists of two parts. A DTD element that
contains a DTD that declares all XML elements and DefinedProps
that defines any properties associated with the schema. As with
all XML it is possible to add extra XML elements. Therefore
schemas may define extra XML elements which are to be included
with their values.

2.3.2     DTD XML Element

Name: http://www.ietf.org/standards/dav/DTD
Purpose:  To contain the DTD for XML elements associated with the
schema.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Values:   XML Declaration statements


2.3.3     DefinedProps XML Element

Name: http://www.ietf.org/standards/dav/DefinedProps
Purpose:  To contain a list of properties defined by the schema.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Values:   1*PropEntries


2.3.4     PropEntries XML Element

Name: http://www.ietf.org/standards/dav/PropEntries
Purpose:  To contain the name of a defined property, the DTD of
its value, and its live/dead status.
Schema: http://www.ietf.org/standards/dav/
Parent:    DefinedProps
Values:   Prop [DTD] [Live]
Description:Prop contains the name of the property. The DTD
contains the DTD of the property's value. Live, if defined,
indicates that the property has semantics and syntax that are
enforced by the server.


2.3.5     Live XML Element

Name: http://www.ietf.org/standards/dav/Live
Purpose:  If present this indicates the server MUST enforce the
syntax and semantics of the property.
Schema: http://www.ietf.org/standards/dav/
Parent:    PropEntries


2.4  DAV Schema

The DAV Schema is specified as
http://www.ietf.org/standards/dav/. This schema is used to
indicate support for
    properties that may be defined on a resource and
    XML elements that may be returned in responses.


2.4.1     DAV Property

Name: http://www.ietf.org/standards/dav
Purpose:  Defines support for the DAV schema and protocol.
Schema: http://www.ietf.org/standards/dav/
Values:   PropSchema Level
Description:This property indicates that the resource supports
the DAV schema and protocol to the level indicated. THE VALUE IN
PROPSCHEMA IS TBD, WE NEED TO PROVIDE IT IN AN APPENDIX.


2.4.2     Level XML Element

Name: http://www.ietf.org/standards/dav/level
Purpose:  To indicate the level of DAV compliance the resource
meets.
Schema: http://www.ietf.org/standards/dav/
Parent:    DAV
Values:   "1" | "2" | "3"
Description:A value of 1 for level indicates that the resource
supports the property and namespace sections of the DAV
specification. Level 2 indicates that the resource supports level
1 and the lock section of the specification, with a minimum
locking capability of the write lock. Level 3 indicates support
for levels 1 and 2 as well as support for the versioning section
of the DAV specification.


2.4.3     Prop XML element

Name: http://www.ietf.org/standards/dav/prop
Purpose:  Contains properties related to a resource.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Values:   XML Elements
Description:The Prop XML element is a generic container for
properties defined on resources. All elements inside Prop MUST
define properties related to the resource. No other elements may
be used inside of a Prop element.


2.4.4     PropLoc XML Attribute

Name: http://www.ietf.org/standards/dav/PropLoc
Purpose:  To specify the location of the associated property.
Schema: http://www.ietf.org/standards/dav/
Values:   URL
Description:This attribute is used with elements inside of Props
contained in responses to specify the URL of the property on the
associated resource. The PropLoc attribute MUST NOT be used in
requests.


2.4.5     Example


<?XML:Namespace href="http://www.ietf.org/standards/dav/" AS="D"/>
<?XML:Namespace href="AIIM:Dublin:" AS="A"/>
<D:Prop>
     <A:Author
         D:PropLoc="http://www.foo.com/resource/props/Author">
          Larry Masinter
     </A:Author>
</D:Prop>


The previous specifies that the property author exists on some
unspecified resource and that the property can be directly
referenced at http://www.foo.com/resource/props/Author. The
resource upon which the property is defined must be determined
from context.


2.5  Property Identifiers


2.5.1     Problem Definition

DAV properties are resources and thus may have a URI where the
value of an instance of the property may be retrieved.  This URI
is separate from the URI name of the property, which identifies
the syntax and semantics of the property, but which does not give
information on how to access the value of an instance of the
property.

A server is free to assign whatever URI it chooses to identify an
instance of a property defined on a resource. In fact, a server
is free not to reveal the URI of an instance of a particular
resource and instead require that the client access the property
through PROPFIND and PROPPATCH.  However, many servers will want
to allow clients to directly manipulate properties. On these
servers, a client can discover the URI of an instance of a
property by performing a PROPFIND and examining the PropLoc
attribute, if returned, of each property.

2.6  Link XML Element


2.6.1     Problem Description

A mechanism is needed to associate resources with other
resources. These associations, known as links, consist of three
values, a type describing the nature of the association, the
source of the link, and the destination of the link. In the case
of annotation, neither the source nor the destination of a link
need be the resource upon which the link is recorded.


2.6.2     Solution Requirements

The association mechanism MUST make use of the DAV property
mechanism in order to make the existence of the associations
searchable.


2.6.3     Link XML Element
Name: http://www.ietf.org/standards/dav/link
Purpose:  To identify a property as a link and to contain the
source and destination of that link.
Schema: http://www.ietf.org/standards/dav/
Values:   1*Src 1*Dst
Description:Link is used to provide the sources and destinations
of a link. The type of the property containing the Link XML
element provides the type of the link. Link is a multi-valued
element, so multiple Links may be used together to indicate
multiple links with the same type.


2.6.4     Src XML Element
Name: http://www.ietf.org/standards/dav/src
Purpose: To indicate the source of a link.
Schema: http://www.ietf.org/standards/dav/
Parent: http://www.ietf.org/standards/dav/link
Values: URI


2.6.5     Dst XML Element
Name: http://www.ietf.org/standards/dav/Dst
Purpose: To indicate the destination of a link
Schema: http://www.ietf.org/standards/dav/
Parent: http://www.ietf.org/standards/dav/link
Values: URI


2.6.6     Example


<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace
     href = "http://www.foocorp.com/Project/" AS = "F"/>
<D:Prop>
     <Source>
          <Link>
               <F:ProjFiles>Source</F:ProjFiles>
               <src>http://foo.bar/program</src>
               <dst>http://foo.bar/src/main.c</dst>
          </Link>
          <Link>
               <F:ProjFiles>Library</F:ProjFiles>
               <src>http://foo.bar/program</src>
               <dst>http://foo.bar/src/main.lib</dst>
          </Link>
          <Link>
               <F:ProjFiles>Makefile</F:ProjFiles>
               <src>http://foo.bar/program</src>
               <dst>http://foo.bar/src/makefile</dst>
     <Link>
     </Source>
</D:Prop>


In this example the resource http://foo.bar/program has a source
property defined which contains three links. Each link contains
three elements, two of which, src and dst, are part of the DAV
schema defined in this document, and one which is defined by the
schema http://www.foocorp.com/project/ (Source, Library, and
Makefile). A client which only implements the elements in the DAV
spec will not understand the foocorp elements and will ignore
them, thus seeing the expected source and destination links. An
enhanced client may know about the foocorp elements and be able
to present the user with additional information about the links.


2.7  Multi-Status Response


2.7.1     Problem Definition

Some methods effect more than one resource. The effect of the
method on each of the scoped resources may be different, as such
a return format that can specify the effect of the method on each
resource is needed.


2.7.2     Solution Requirements

The solution must:
communicate the status code and reason
give the URI of the resource on which the method was invoked
   be consistent with other return body formats

2.7.3     Multi-Status Response

The default multi-status response body is an text/xml HTTP entity
that contains a single XML element called multiresponse, which
contains a set of XML elements called response, one for each 200,
300, 400, and 500 series status code generated during the method
invocation.  100 series status codes MUST NOT be recorded in a
response XML element.


2.7.3.1   MultiResponse
Name: http://www.ietf.org/standards/dav/multiresponse
Purpose:  Contains multiple response messages.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Value:    1*Response [ResponseDescription]
Description:The ResponseDescription at the top level is used to
provide a general message describing the over arching nature of
the response. If this value is available an application MAY use
it instead of presenting the individual response descriptions
contain within the responses.


2.7.3.2   Response
Name: http://www.ietf.org/standards/dav/response
Purpose:  Holds a single response
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Value:    (Prop | HREF) Status [ResponseDescription]
Description: Prop MUST contain one or more empty XML elements
representing the name of properties. Multiple properties may be
included if the same response applies to them all. If HREF is
used then the response refers to a problem with the referenced
resource, not a property.


2.7.3.3   Status
Name: http://www.ietf.org/standards/dav/status
Purpose:  Holds a single HTTP status-line
Schema: http://www.ietf.org/standards/dav/
Parent:    Response
Value:    status-line   ;status-line defined in [Fielding et al.,
1997]


2.7.3.4   ResponseDescription
Name: http://www.ietf.org/standards/dav/ResponseDescription
Purpose:  Contains a message that can be displayed to the user
explaining the nature of the response.
Schema: http://www.ietf.org/standards/dav/
Parent:   Multiresponse and/or Response
Value:    Any
Description:   This XML element provides information suitable to
be presented to a user.


2.8  Properties and Methods


2.8.1     DELETE

As properties are resources, the deletion of a property causes
the same result as the deletion of any resource. It is worth
pointing out that the deletion of a property effects both direct
manipulation, that is by the property's URL, as well as indirect
discovery and manipulation, that is PROPPATCH and PROPFIND.


2.8.2     GET

A GET with a Request-URI that identifies a property returns the
name and value of that property.  Accept types may be used to
specify the format of the return value, but all DAV compliant
servers MUST at minimum support a return type of text/xml. If
text/xml is used as the response format then it MUST return the
name and value of the property using the Prop XML element.


2.8.2.1   Example

The following example assumes that the property's URL, originally
generated by the server, was discovered by examining the proploc
XML attribute returned on a result from a FINDPROP.


GET /bar.html;prop=z39.50_authors HTTP/1.1
Host: foo.com



HTTP/1.1 200 OK
Content-Type: text/xml
Content-Length: xxxx
E-tag: "1234"
Last-Modified: xxxx



<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace
     href = "http://www.w3.com/standards/z39.50/"AS = "Z"/>
<D:prop>
     <Z:Authors>
          <Z:Author>Jane Doe</Z:Author>
          <Z:Author>Joe Doe</Z:Author>
           <Z:Author>Lots o'Doe</Z:Author>
     </Z:Authors>
</D:prop>



2.8.3     PROPPATCH

The PROPPATCH method processes instructions specified in the
request body to create and/or remove properties defined on the
resource identified by Request-URI.

All DAV compliant servers MUST process instructions which are
specified using the PropertyUpdate, Create, and Remove XML
elements of the DAV schema.  The request message body MUST
contain at least one PropertyUpdate XML element.  Instruction
processing MUST occur in the order instructions are received
(i.e., from top to bottom), and MUST be performed atomically.


2.8.3.1   PropertyUpdate XML element
Name: http://www.ietf.org/standards/dav/PropertyUpdate
Purpose:  To contain a request to alter the properties on a resource.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Values:   *(Create | Remove)
Description:This XML element is a container for the information
required to modify the properties on the resource. This XML
element is multi-valued.


2.8.3.2   Create XML element
Name: http://www.ietf.org/standards/dav/create
Purpose:  To create the DAV properties specified inside the Create XML element.
Schema: http://www.ietf.org/standards/dav/
Parent: http://www.ietf.org/standards/dav/PropertyUpdate
Values:   Prop
Description:This XML element MUST contain only a Prop XML
element. The elements contained by Prop specify the name and
value of properties that are created on Request-URI. If a
property already exists then its value is replaced. The Prop XML
element MUST NOT contain a PropLoc XML attribute.


2.8.3.3   Remove XML element
Name: http://www.ietf.org/standards/dav/remove
Purpose:  To remove the DAV properties specified inside the
Remove XML element.
Schema: http://www.ietf.org/standards/dav/
Parent: http://www.ietf.org/standards/dav/PropertyUpdate
Values:   Prop
Description:Remove specifies that the properties specified in
Prop should be removed. Specifying the removal of a property that
does not exist is not an error. All the elements in Prop MUST be
empty, as only the names of properties to be removed are
required.


2.8.3.4   Response

The response MUST have a response body that contains a
multiresponse identifying the results for each property.

2.8.3.5   Response Codes

200 OK - The command succeeded. As there can be a mixture of
Create and Removes in a body, a 201 Create seems inappropriate.
403 Forbidden - The client, for reasons the server chooses not to
specify, can not alter one of the properties.
405 Conflict - The client has provided a value whose semantics
are not appropriate for the property. This includes trying to set
read only properties.
413 Request Entity Too Long - If a particular property is too
long to be recorded then a composite XML error will be returned
indicating the offending property.
417 Insufficient Space on Resource - The resource does not have
sufficient space to record the state of the resource after the
execution of this method.
418 Atomicity Failure - The command was not executed because of
an atomicity failure elsewhere the caused the entire command to
be aborted.


2.8.3.6   Example


PROPPATCH /bar.html HTTP/1.1
Host: www.foo.com
Content-Type: text/xml
Content-Length: xxxx



<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace
     href = "http://www.w3.com/standards/z39.50/" AS = "Z"/>
<D:PropertyUpdate>
     <Create>
          <prop>
               <Z:authors>
                    <Z:Author>Jim Whitehead</Z:Author>
                    <Z:Author>Roy Fielding</Z:Author>
               </Z:authors>
          </Prop>
     </Create>
     <Remove>
          <prop><Z:Copyright-Owner/></prop>
     </Remove>
</D:PropertyUpdate>



HTTP/1.1 405 Conflict
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace
     href="http://www.ietf.org/standards/dav/" AS = "D"/>
<?XML:Namespace
     href="http://www.w3.com/standards/z39.50/" AS = "Z"/>
<D:MultiResponse>
     <ResponseDescription> Copyright Owner can not be deleted or
altered.</ResponseDescription>
     <Response>
          <Prop><Z:authors/></Prop>
          <Status>HTTP/1.1 418 Atomicity Failure</Status>
     </Response>
     <Response>
          <Prop><Z:Copyright-Owner/></Prop>
          <Status>HTTP/1.1 405 Conflict</Status>
     </Response>
</D:MultiResponse>



2.8.4     PUT

A PUT is specified in order to control what is returned by a GET.
However a GET on a property always returns a predefined property
containment format. Therefore PUT can not be used if the Request-URI refers to a property.


2.8.5     PROPFIND

The PROPFIND method retrieves properties defined on Request-URI.
The request message body is an XML document that MUST contain
only one PropFind XML element, which specifies the type of
property find action to be performed.  The XML element contained
by PropFind specifies the type of action to be performed:
retrieve all property names and values (AllProp), retrieve only
specified property names and values (Prop), or retrieve only a
list of all property names (Propname).  When a Prop XML element
is present, it specifies a list of the names of properties whose
name and value are to be returned.  The Prop element, when used
within a FINDPROP request body MUST be empty.

The response is a text/xml message body that contains a
MultiResponse XML element which describes the results of the
attempts to retrieve the various properties. If a property was
successfully retrieved then its value MUST be returned in the
prop XML element. In the case of Allprop and Findprop, if a
principal does not have the right to know if a particular
property exists, an error MUST NOT be returned. The results of
this method SHOULD NOT be cached.


2.8.5.1   Propfind XML element
Name: http://www.ietf.org/standards/dav/Propfind
Purpose:  To specify the set of matching properties
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Values:   (Prop | Allprop | Propname)
Description: Propfind is a container element for the exact
specification of a PROPFIND request.


2.8.5.2   Allprop
Name: http://www.ietf.org/standards/dav/Allprop
Purpose:  To specify that all properties are to be returned
Schema: http://www.ietf.org/standards/dav/
Parent:    Propfind
Description: Its presence in a PROPFIND request specifies the
name and value of all properties defined on the resource MUST be
returned.


2.8.5.3   Propname
Name: http://www.ietf.org/standards/dav/Propname
Purpose:  To specify that the names of all properties defined on
the resource are to be returned.
Schema: http://www.ietf.org/standards/dav/
Parent:    Propfind
Description: Its presence in a PROPFIND request specifies the
name of all properties defined on the resource MUST be returned.


2.8.5.4   PropFindResult XML element
Name: http://www.ietf.org/standards/dav/PropFindResult
Purpose: To contain the results of a SEARCH request
Schema: http://www.ietf.org/standards/dav/
Parent: Any
Values: Prop


2.8.5.5   Example 1 - Prop


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml




<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" AS = "G"/>
<?XML:Namespace href =
     "http://www.foo.bar/boxschema/" AS = "B"/>
<G:PROPFIND>
     <prop>
          <B:bigbox>
          <B:author>
          <B:DingALing>
          <B:Random>
     </prop>
</G:PROPFIND>



HTTP/1.1 207 Partial Success
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace
     href ="http://www.ietf.org/standards/dav/" AS = "S">
<?XML:Namespace href = "http://www.foo.bar/boxschema" AS = R">
<D:MultiResponse>
     <ResponseDescription> There has been an access violation
error. </ResponseDescription>
     <Response>
          <Prop>
               <R:bigbox D:Proploc="http://prop.com/BoxType">
                    <BoxType>Box type A</BoxType>
               </R:bigbox>
               <R:author D:Proploc="http://prop.com/Author">
                    <Name>J.J. Dingleheimerschmidt</Name>
               </R:author>
          </Prop>
          <Status>HTTP/1.1 200 Success</Status>
</Response>
     <Response>
          <Prop><R:DingALing/><R:Random/></>
          <Status>HTTP/1.1 403 Forbidden</Status>
          <ResponseDescription> The user does not have access to
the DingALink property. </ResponseDescription>
     </Response>
</D:MultiResponse>


The result will return all properties on the container. In this
case only two properties were found. The principal did not have
sufficient access rights to see the third and fourth properties
so an error was returned.


2.8.5.6   Example 2 - Allprop


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml



<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" AS = "G"/>
<G:PROPFIND>
     <Allprop/>
</G:PROPFIND>



HTTP/1.1 200 Success
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace href =
     "http://www.ietf.org/standards/dav/" As = "S">
<?XML:Namespace href = "http://www.foo.bar/boxschema" AS = R">
<S:MultiResponse>
     <Prop>
          <R:bigbox D:Proploc="http://prop.com/BigBox">
               <BoxType>Box type A</BoxType>
          </R:bigbox>
          <R:author D:Proploc="http://prop.com/Author">
               <Name>Hadrian</Name>
          </R:author>
     </Prop>
     <Status>HTTP/1.1 200 Success</Status>
</S:MultiResponse>


This particular client only had the right to see two properties,
BoxType and Author. No error is returned for the remaining
properties, as the client does not even have sufficient rights to
know they exist. If the client did have the right to know they
existed but did not have the right to see their value, a 201
Partial Success with a multiresponse, as used in the previous
example, would have been returned.


2.8.5.7   Example 3 - Propname


PROPFIND  /container/ HTTP/1.1
Host: www.foo.bar
Content-Length: xxxx
Content-Type: text/xml



<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" AS = "G"/>
<G:PROPFIND>
     <Propname/>
</G:PROPFIND>



HTTP/1.1 200 Success
Content-Type: text/xml
Content-Length: xxxxx



<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" As = "S">
<?XML:Namespace
     href = "http://www.foo.bar/boxschema" AS = "R">
<S:MultiResponse>
     <Prop>
          <R:bigbox D:Proploc="http://prop.com/BigBox"/>
          <R:author D:Proploc="http://prop.com/Author"/>
          <R:DingALing/>
          <R:Random/>
     </Prop>
     <Status>HTTP/1.1 200 Success</Status>
</S:MultiResponse>


In this case only two of the properties have direct URLs
available, while the other two properties can only be referenced
via PROPFIND and PROPPATCH.


3    A Proposal for Collections of Web Resources and Name Space   Operations

3.1  Observations on the HTTP Object Model

This section provides a description of a new type of Web
resource, the collection, and discusses its interactions with the
HTTP URL namespace.  This discussion is a prerequisite for the
specification of methods that operate on collections, given later
in this document.


3.1.1     Collection Resources

A collection is a resource whose state consists of a list of
internal members, a list of external members, and a set of
properties.  An internal member resource MUST have a URI that is
immediately relative to the base URI of the collection, that is,
a relative URI in which "../" is illegal, which must begin with
"./" and which MAY contain only one other "/" at the end of the
URI. An external member resource MUST be an absolute URI that is
not an internal URI.  Any given internal or external URI MUST
only belong to the collection once, i.e., multiple instances of
URIs in a collection are illegal.  Properties defined on
collections have no special distinction, and behave exactly as do
properties on non-collection resources.
The purpose of a collection resource is to model collection-like
objects (e.g., a filesystem directory) within a server's
namespace.  Once these objects have been modeled with
collections, a client may perform an INDEX, add and remove
external members using ADDREF and DELREF, and perform recursive
operations, such as a full hierarchy copy.
To support methods which operate on collections, a server SHOULD
model its collection-like objects with collection resources.  For
example, a server which is implemented on top of a filesystem
SHOULD treat all filesystem directories exposed by the server as
collection resources.

3.1.2     Creation and Retrieval of Collection Resources

This document specifies the MKCOL method to create new collection
resources, and the INDEX method to list their contents.2
In HTTP/1.1, the PUT method is defined to store the request body
at the location specified by Request-URI.  While a description
format for a collection can readily be constructed that could be
used with PUT, the implications of sending such a description to
the server are undesirable.  For example, if a description of a
collection that omitted some existing resources were PUT to a
server, this might be interpreted as a command to remove those
members.  This would extend PUT to perform DELETE functionality,
which is undesirable since it changes the semantics of PUT, and
makes it difficult to control DELETE functionality with an access
control scheme based on methods.
While the POST method is sufficiently open-ended that a "create a
collection" POST command could be constructed, this is
undesirable because it would be difficult to separate access
control for collection creation from other uses of POST if they
both use the same method.
While it might seem desirable to have GET return a listing of the
members of a collection, this is foiled by the existence of the
"index.html" de-facto standard namespace redirection, in which a
GET request on a collection is automatically redirected to the
index.html resource.
The exact definition of the behavior of GET and PUT on
collections is defined later in this document.


3.1.2.1   Example

The structured resource http://foo/bar is created with a PUT. Bar
is a multipart/related file with two members http://foo/bar/a and
http://foo/bar/b. If bar were deleted then both a and b would
also be deleted since they are all really just one resource. If
http://foo/bar/a/c was PUT then a DELETE on http://foo/bar/a
would also delete http://foo/bar/a/c as c was created with a PUT
not a MKCOL.
If http://foo/bar/b/d is created with a MKCOL and
http://foo/bar/b/d/e was created then a DELETE on d would fail
because d is a collection with an internal member. However the
existence of the collection d is something of an illusion. If a
DELETE was executed on http://foo/bar then everything would be
deleted, even though http://foo/bar/b/d was created with a MKCOL.
Thus the effect of a MKCOL within a composite resource’s
namespace is felt on its children, not its ancestors. The
children of d MUST be treated as members of a collection when a
method is executed on d. But a method executed on b or a is
treated as if there only existed a non-collection resource.


3.1.3     Source Resources and Output Resources

For many resources, the entity returned by GET exactly matches
the persistent state of the resource, for example, a GIF file
stored on a disk.  For this simple case, the URL at which a
resource is accessed is identical to the URL at which the source
(the persistent state) of the resource is accessed. This is also
the case for HTML source files that are not processed by the
server prior to transmission.
However, the server can sometimes process HTML resources before
they are transmitted as a return entity body. For example,
server-side-include directives within an HTML file instruct a server to
replace the directive with another value, such as the current
date.  In this case, what is returned by GET (HTML plus date)
differs from the persistent state of the resource (HTML plus
directive). Typically there is no way to access the HTML resource
containing the unprocessed directive.
Sometimes the entity returned by GET is the output of a data-producing process that is described by one or more source
resources (that may not even have a location in the URL
namespace).  A single data-producing process may dynamically
generate the state of a potentially large number of output
resources. An example of this is a CGI script that describes a
"finger" gateway process that maps part of the namespace of a
server into finger requests, such as
http://www.foo.bar.org/finger_gateway/user@host.
In the absence of distributed authoring capability, it is
acceptable to have no mapping of source resource(s) to the URI
namespace, and in fact has desirable security benefits. However,
if remote editing of the source resource(s) is desired, the
source resource(s) should be given a location in the URI
namespace. This source location should not be one of the
locations at which the generated output is retrievable, since in
general it is impossible for the server to differentiate requests
for source resources from requests for process output resources.
There is often a many-to-many relationship between source
resources and output resources.
For DAV compliant servers all output resources which have a
single source resource (and that source resource has a URI), the
URI of the source resource SHOULD be stored in a single link on
the output resource with type
http://www.ietf.org/standards/dav/source. Note that by storing
the source URI in links on the output resources, the burden of
discovering the source is placed on the authoring client.


3.2  MKCOL Method


3.2.1     Problem Description

A client must be able to create a collection.


3.2.2     Solution Requirements

The solution:
   Must ensure that a collection has been made (i.e. that it
  responds to the INDEX method) as opposed to a non-collection
  resource. If a collection could not be made, it must indicate
  this failure to the user-agent.


3.2.3     Request

MKCOL creates a new collection resource at the location specified
by the Request-URI. If the Request-URI exists, then MKCOL must
fail. During MKCOL processing, a server MUST make the Request-URI
a member of its parent collection. If no such an ancestor exists,
the method MUST fail. When the MKCOL operation creates a new
collection resource, all ancestors MUST already exist, or the
method MUST fail with a 409 Conflict status code.  For example,
if a request to create collection /a/b/c/d/ is made, and neither
/a/b/ nor /a/b/c/ exist, the request MUST fail.


3.2.3.1   MKCOL Without Request Body

When MKCOL is invoked without a request body, the newly created
collection has no members.


3.2.3.2   MKCOL With Request Body

A MKCOL request message MAY contain a message body.  The behavior
of a MKCOL request when the body is present is limited to
creating collections, members of a collection, bodies of members
and properties on the collections or members. If the server
receives a MKCOL request entity type it does not support or
understand it MUST respond with a 415 (Unsupported Media Type)
status code.  The exact behavior of MKCOL for various request
media types is undefined in this document, and will be specified
in separate documents.


3.2.4     Response

Responses from a MKCOL request are not cacheable, since MKCOL has
non-idempotent semantics.
201 (Created) - The collection or structured resource was created
in its entirety.
403 (Forbidden) - This indicates at least one of two conditions:
1) The server does not allow the creation of collections at the
given location in its namespace, and 2) The parent collection of
the Request-URI exists but cannot accept members.
409 (Conflict) - A collection cannot be made at the Request-URI
until one or more intermediate collections have been created.
415 (Unsupported Media Type)- The server does not support the
request type of the body.
417 (Insufficient Space on Resource) - The resource does not have
sufficient space to record the state of the resource after the
execution of this method.


3.2.5     Example

This example creates a container collection called
/webdisc/xfiles/ on the server www.server.org.

     MKCOL /webdisc/xfiles/ HTTP/1.1
     Host: www.server.org




     HTTP/1.1 201 Created



3.3  Standard DAV Properties

The following properties are defined on DAV compliant resources.
All enclosed properties are part of the DAV Schema.


3.3.1     IsCollection Property
Name: http://www.ietf.org/standards/dav/iscollection
Purpose:  This property contains a Boolean value that is set to
"true" if the resource is a collection
Schema: http://www.ietf.org/standards/dav/
Value:    ("true" | "false")
Description: This property MUST be defined on all DAV compliant
resources.


3.3.2     DisplayName Property
Name: http://www.ietf.org/standards/dav/displayname
Purpose:  A name for the resource that is suitable for
presentation to a user.
Schema: http://www.ietf.org/standards/dav/
Value:    Any valid XML character data (as defined in [Bray,
Sperberg-McQueen, 1997])
Description: This property SHOULD be defined on all DAV compliant
resources. If present, the property a description of the resource
that is suitable for presentation to a user.

3.3.3     CreationDate3 Property
Name: http://www.ietf.org/standards/dav/creationdate
Purpose:  The time and 4date the resource was created.
Schema: http://www.ietf.org/standards/dav/
Value:    The time and date MUST be given in ISO 8601 format
[ISO8601]
Description: This property SHOULD be defined on all DAV compliant
resources. If present, it contains a timestamp of the moment when
the resource was created (i.e., the moment it had non-null
state).


3.3.4     GETentity Property5
Name: http://www.ietf.org/standards/dav/GETentity
Purpose:  Contains the value of headers that are returned by a
GET without Accept headers.
Schema: http://www.ietf.org/standards/dav/
Value:    Content-Type Content-Length Content-Language Last-Modified Etag Creation-Date
Description: This property MUST be defined on all DAV compliant
resources unless GET is not supported, in which case this
property MUST NOT be defined. This property MUST contain at most
one instance of each element in its Value, if they are defined.

3.3.5     INDEXentity Property
Name: http://www.ietf.org/standards/dav/INDEXentity
Purpose:  Contains the value of headers that are returned by an
INDEX.
Schema: http://www.ietf.org/standards/dav/
Value:    Content-Type Content-Length Content-Language Last-Modified Etag Creation-Date
Description: This property MUST be defined on all DAV compliant
resources unless INDEX is not supported, in which case this
property MUST NOT be defined. This property MUST contain at most
one instance of each element in its Value, if they are defined.


3.3.6     Content-Type XML Element
Name: http://www.ietf.org/standards/dav/content-type
Purpose:  The content-type of the member resource.
Schema: http://www.ietf.org/standards/dav/
Parent:   GETentity or INDEXentity
Value:    media-type   ; defined in Section 3.7 of [Fielding et
al., 1997]
Description: If the parent of this element is GETentity, the
value MUST be identical to the content-type returned by a GET on
the resource without Accept headers.  If the parent is
INDEXentity, the value MUST be identical to the content-type
returned by an INDEX on the resource.  If no content-type is
available, this element MUST NOT be defined.


3.3.7     Content-Length XML Element
Name: http://www.ietf.org/standards/dav/content-length
Purpose:  Describes the default content-length of the resource.
Schema: http://www.ietf.org/standards/dav/
Value:    content-length ; see section 14.14 of RFC 2068
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the content-length header
returned by a GET on the resource without Accept headers.  If the
parent is INDEXentity, the value MUST be identical to the
content-length returned by an INDEX on the resource.  If no content-length is available, this element MUST NOT be defined.


3.3.8     Content-Language XML Element
Name: http://www.ietf.org/standards/dav/content-language
Purpose:  Describes the default natural language of a resource.
Schema: http://www.ietf.org/standards/dav/
Value:    language-tag   ;language-tag is defined in section 14.13 of RFC 2068
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the content-language header
returned by a GET on the resource without Accept headers.  If the
parent is INDEXentity, the value MUST be identical to the
content-language header returned by an INDEX on the resource.  If no
content-language header is available, this element MUST NOT be
defined.


3.3.9     Last-Modified XML Element
Name: http://www.ietf.org/standards/dav/last-modified
Purpose:  The date the resource was last modified.
Schema: http://www.ietf.org/standards/dav/
Parent:   GETentity or INDEXentity
Value:    The date MUST be given in RFC 1123 format (rfc-1123
production, defined in section 3.3.1 of [Fielding et al., 1997]
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the last-modified header
returned by a GET on the resource without Accept headers.  If the
parent is INDEXentity, the value MUST be identical to the last-modified header returned by an INDEX on the resource.  If no
last-modified header is available, this element MUST NOT be defined.


3.3.10    Etag XML Element
Name: http://www.ietf.org/standards/dav/etag
Purpose:  The entity tag of the resource.
Schema: http://www.ietf.org/standards/dav/
Parent:   GETentity or INDEXentity
Value:    entity-tag  ; defined in Section 3.11 of [Fielding et
al., 1997]
Description: If the parent of this element is GETentity, this
element MUST have a value equal to the entity-tag header returned
by a GET on the resource without Accept headers.  If the parent
is INDEXentity, the value MUST be identical to the entity-tag
header returned by an INDEX on the resource.  If no entity-tag
header is available, this element MUST NOT be defined.


3.4  INDEX Method


3.4.1     Problem Description

A mechanism is needed to discover if a resource is a collection
and if so, list its members.
3.4.2     Solution Requirements

The solution:
   must allow a client to discover the members of a collection
   must always provide a machine-readable description of the
  membership of a collection
   must be leveraged as a more general mechanism to provide a
  list of contents for any resource which can profitably return a
  membership like listing.


3.4.3     The Request

The INDEX method returns a machine-readable representation of the
membership of the resource at the Request-URI.

For a collection, INDEX MUST return a list of its members. All
WebDAV compliant resources MUST support the text/xml response
entity described below.  The INDEX result for a collection MAY
also return a list of the members of child collections, to any
depth.

Collections that respond to an INDEX method with a text/xml
entity MUST contain only one ResInfo element.  This ResInfo
element contains an Href element, which gives the identifier(s)
of the resource, a Prop element, which gives selected properties
of the resource, and a Members element, which contains a ResInfo
element for each member of the collection.  The Prop element MUST
contain at least the following properties, if they are defined
and available: DisplayName, IsCollection, CreationDate,
GETentity, and INDEXentity.

The response from INDEX is cacheable, and SHOULD be accompanied
by an ETag header (see section 13.3.4 of RFC 2068). If GET and
INDEX return different entities for the same resource state, they
MUST return different entity tags.


3.4.4     The Response

200 (OK) - The server MUST send a machine readable response
entity which describes the membership of the resource.


3.4.5     ResInfo XML Element
Name: http://www.ietf.org/standards/dav/resinfo
Purpose:  Describes a resource.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Value:    Href Prop Members
Description: There MUST be at least one Href element.  Each Href
element contains a URI for the resource, which MUST be an
absolute URI. There MUST be a single Prop element that contains a
series of properties defined on the resource.  If the resource is
a collection, it MAY have at most one Members element, which
describes the members of the collection.


3.4.6     Members XML Element
Name: http://www.ietf.org/standards/dav/members
Purpose:  Describes the membership of a collection resource.
Schema: http://www.ietf.org/standards/dav/
Parent:    ResInfo
Value:    ResInfo
Description: Contains zero or more ResInfo elements, which
describe members of the collection.


3.4.7     Href XML Element
Name: http://www.ietf.org/standards/dav/href
Purpose:  To identify that the content of the element is a URI.
Schema: http://www.ietf.org/standards/dav/
Parent:   Any
Value:    URI ; See section 3.2.1 of [Fielding et al., 1997]

3.4.8     Example


INDEX /user/yarong/dav_drafts/ HTTP/1.1
Host: www.microsoft.com



HTTP/1.1 200 OK
Content-Type: text/xml
Content-Length: xxx
Last-Modified: Thu, 11 Sep 1997 23:45:12 GMT
ETag: "fooyyybar"



<?XML:Namespace
     href = "http://www.ietf.org/standards/dav/" as = "D"/>
<D:ResInfo>
     <XML:Href>
          http://www.microsoft.com/user/yarong/dav_drafts/
     </XML:Href>
     <Prop>
        <DisplayName>
          WebDAV working drafts directory
        </DisplayName>
        <IsCollection>true</IsCollection>
        <CreationDate>19970418T070304Z</CreationDate>
        <GETentity>
          <Content-Type>text/html</Content-Type>
          <Content-Length>2754</Content-Length>
          <Content-Language>en</Content-Language>
          <Last-Modified>
               Fri, 22 Aug 1997 10:11:26 GMT
          </Last-Modified>
          <Etag>"8675309"</Etag>
        </GETentity>
        <INDEXentity>
          <Content-Type>text/xml</Content-Type>
          <Content-Length>xxx</Content-Length>
          <Last-Modified>
               Thu, 11 Sep 1997 23:45:12 GMT
          </Last-Modified>
          <Etag>"fooyyybar"</Etag>
        </INDEXentity>
     </Prop>



     <Members>
        <ResInfo>
          <XML:Href>
          http://www.microsoft.com/user/yarong/dav_drafts/base
          </XML:Href>
          <Prop>
             <IsCollection
     D:PropLoc="http://www.microsoft.com/user/yarong/dav_drafts/b
     ase;props=IsCollection">
               False
             </IsCollection>
             <DisplayName>
               WebDAV Name Space Operations Draft
             </DisplayName>
             <Creation-Date>19970320T230525Z</Creation-Date>
             <GETentity>
               <Content-Type>application/msword</Content-Type>
               <Content-Length>1400</Content-Length>
               <Content-Language>en</Content-Language>
               <Last-Modified>
                    Fri, 22 Aug 1997 18:22:56 GMT
               </Last-Modified>
               <Etag>"8675309"</Etag>
             </GETentity>
          </Prop>
        </ResInfo>
     </Members>
</D:ResInfo>



This example shows the result of the INDEX method applied to the
collection resource
http://www.microsoft.com/user/yarong/dav_drafts/.  It returns a
response body in XML format, which gives information about the
container and its sole member,
http://www.microsoft.com/user/yarong/dav_drafts/base. The entry
on the collection confirms that resource the INDEX was executed
on is a collection. The result also contains the URI of the
IsCollection property on the member resource.


3.5  Behavior of RFC 2068 Methods on Collections

With the introduction of the collection resource type to the HTTP
object model, it is necessary to define the behavior of the
existing methods (defined in RFC 2068) when invoked on a
collection resource to avoid ambiguity.  While some methods, such
as OPTIONS and TRACE behave identically when applied to
collections, GET, HEAD, POST, PUT, and DELETE require some
additional explanation.


3.5.1     GET, HEAD for Collections

The semantics of GET are unchanged when applied to a collection,
since GET is defined as, "retrieve whatever information (in the
form of an entity) is identified by the Request-URI" [Fielding et
al., 1997]. GET when applied to a collection MAY return the
contents of an "index.html" resource, a human-readable view of
the contents of the collection, or something else altogether, and
hence it is possible the result of a GET on a collection will
bear no correlation to the state of the collection.
Similarly, since the definition of HEAD is a GET without a
response message body, the semantics of HEAD are unmodified when
applied to collection resources.


3.5.2     POST for Collections

Since by definition the actual function performed by POST is
determined by the server and often depends on the particular
resource, the behavior of POST when applied to collections cannot
be meaningfully modified because it is largely undefined.  Thus
the semantics of POST are unmodified when applied to a
collection.


3.5.3     PUT for Collections

As defined in the HTTP/1.1 specification [Fielding et al., 1997],
the "PUT method requests that the enclosed entity be stored under
the supplied Request-URI."  Since submission of an entity
representing a collection would implicitly encode creation and
deletion of resources, this specification intentionally does not
define a transmission format for creating a collection using PUT.
Instead, the MKCOL method is defined to create collections.  If a
PUT is invoked on a collection resource it MUST fail.
When the PUT operation creates a new non-collection resource all
ancestors MUST already exist.  If all ancestors do not exist, the
method MUST fail with a 409 Conflict status code.  For example,
if resource /a/b/c/d.html is to be created and /a/b/c/ does not
exist, then the request MUST fail.


3.5.3.1   PUT for Non-Collection Resources

A PUT performed on an existing resource replaces the GET response
entity of the resource, but MUST NOT change the value of any dead
properties defined on the resource.  Live properties defined on
the resource MAY be recomputed during PUT processing.

3.5.4     DELETE for Collections

When DELETE is applied to a collection without internal members
the collection resource, along with its properties, and external
members, MUST be deleted.  A DELETE method applied to a
collection resource containing internal member resources MUST
fail with a 409 Conflict status code.

3.5.5     DELETE Method for Non-Collection Resources

If the DELETE method is issued to a non-collection resource which
is an internal member of a collection, then during DELETE
processing a server MUST remove the Request-URI from its parent
collection. A server MAY remove the URI of a deleted resource
from any collections of which the resource is an external member.


3.6  COPY Method


3.6.1     Problem Description

Currently, in order to create a copy of a resource, the client
must GET an entity and then PUT that entity to the desired
destination. This requires (1) an entity to be transmitted to and
from the server and (2) that the resource be expressible as an
entity with complete fidelity.
This is problematic because of the network traffic involved in
making a copy, and because there is often no way to fully express
a resource as an entity without a loss of fidelity.


3.6.2     Solution Requirements

The solution:
   MUST allow a principal to create a copy of a resource
without having to transmit the resource to and from the server.


3.6.3     The Request

The COPY method creates a duplicate of the source resource, given
by the Request-URI, in the destination resource, given by the
Destination header.  The Destination header MUST be present.  The
exact behavior of the COPY method depends on the type of the
source resource.


3.6.3.1   COPY for HTTP/1.1 resources

When the source resource is not a collection, and is not a
property, the body of the destination resource MUST be octet-for-octet identical to the body of the source resource. Alterations
to the destination resource do not modify the source resource.
Alterations to the source resource do not modify the destination
resource. Thus, all copies are performed "by-value".
All properties on the source resource MUST be duplicated on the
destination resource, subject to modifying headers, following the
definition for copying properties.


3.6.3.2   COPY for Properties

The following section defines how properties on a resource are
handled during a COPY operation.
Live properties SHOULD be duplicated as identically behaving live
properties at the destination resource. Since they are live
properties, the server determines the syntax and semantics (hence
value) of these properties.  Properties named by the Enforce-Live-Properties header MUST be live on the destination resource, or
the method MUST fail.  If a property is not named by Enforce-Live-Properties and cannot be copied live, then its value MUST be
duplicated, octet-for-octet, in an identically named, dead
resource on the destination resource.
If a property on the source already exists on the resource and
the overwrite header is set to TRUE then the property at the
destination MUST be overwritten with the property from the
source. If the overwrite header is false and the previous
situation exists then the COPY MUST fail with a 409 Conflict.


3.6.3.3   COPY for Collections

A COPY on a collection causes a collection resource to be created
at the destination with the same properties, but without any
members, internal or external.  All properties on the source
collection are copied over to the destination collection. Where
there is a conflict the source properties will overwrite the
destination properties. Any members at the [sic] MUST be duplicated on
the destination collection, subject to modifying headers,
following the definition for copying properties.


3.6.3.4   Type Interactions

If the destination resource identifies a property and the source
resource is not a property, then the copy SHOULD fail.
If the destination resource identifies a collection and the
Overwrite header is "true," prior to performing the copy, the
server MUST perform a DELETE operation on the collection.


3.6.4     The Response

200 (OK) The source resource was successfully copied to a pre-existing destination resource.
201 (Created) The source resource was successfully copied.  The
copy operation resulted in the creation of a new resource.
412 (Precondition Failed) This status code MUST be returned if
the server was unable to maintain the liveness of the properties
listed in the Enforce-Live-Properties header, or if the Overwrite
header is false, and the state of the destination resource is
non-null.
417 (Insufficient Space on Resource) - The destination resource
does not have sufficient space to record the state of the
resource after the execution of this method.
500 (Server Error) The resource was in such a state that it could
not be copied. This may occur if the Destination header specifies
a resource that is outside the namespace the resource is able to
interact with.


3.6.5     Examples


3.6.5.1   Overwrite Example

This example shows resource
http://www.ics.uci.edu/~fielding/index.html being copied to the
location http://www.ics.uci.edu/users/f/fielding/index.html.  The
contents of the destination resource were overwritten, if non-null.


COPY /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html




HTTP/1.1 200 OK



3.6.5.2   No Overwrite Example

The following example shows the same copy operation being
performed, except with the Overwrite header set to "false."  A
response of 412, Precondition Failed, is returned because the
destination resource has a non-null state.


COPY /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html
Overwrite: "false"




HTTP/1.1 412 Precondition Failed





3.7  MOVE Method
3.7.1     Problem Description

The move operation on a resource is the logical equivalent of a
copy followed by a delete, where the actions are performed
atomically.  Using RFC 2068 methods only, this procedure could be
performed in several steps. First, the client could issue a GET
to retrieve a representation of a resource, issue a DELETE to
remove the resource from the server, then use PUT to place the
resource on the server with a new URI. As is the case for COPY -
because of the network traffic involved in making a move, and
because there is often no way to fully express a resource as an
entity without a loss of fidelity - server move functionality is
preferable.
With a WEBDAV server, a principal may accomplish this task by
issuing a COPY and then DELETE. Network load decreases, but the
server load may still be significant because the server must
create a duplicate resource. Were a server to know beforehand
that a principal intended to perform COPY and DELETE operations
in succession, it could avoid the creation of a duplicate
resource.


3.7.2     Solution Requirements

The solution:
   Must prevent the unneeded transfer of entity bodies from and
  to the server.
   Must prevent the unneeded creation of copies by the server.


3.7.3     The Request

The move operation on a resource is the logical equivalent of a
copy followed by a delete, where the actions are performed
atomically. If a resource exists at the destination, the
destination resource will be DELETEd as a side effect of the MOVE
operation, subject to the restrictions of the overwrite header.


3.7.4     The Response

200 (OK) - The resource was moved. A successful response must
contain the Content-Location header, set equal to the URI in
source. This lets caches properly flush any cached entries for
the source. Unfortunately the Content-Location header only allows
a single value so it is not possible for caches unfamiliar with
the MOVE method to properly clear their caches.
412 (Precondition Failed) This status code MUST be returned if
the server was unable to maintain the liveness of the properties
listed in the Enforce-Live-Properties header, or if the Overwrite
header is false, and the state of the destination resource is
non-
null.
501 (Not Implemented) - This may occur if the Destination header
specifies a resource which is outside its domain of control
(e.g., stored on another server) resource and the server either
refuses or is incapable of moving to an external resource.
502 (Bad Gateway) - This may occur when moving to external
resources and the destination server refused to accept the
resource.


3.7.5     Examples
3.7.5.1   Overwrite Example

This example shows resource
http://www.ics.uci.edu/~fielding/index.html being moved to the
location http://www.ics.uci.edu/users/f/fielding/index.html.  The
contents of the destination resource were overwritten, if non-null.


MOVE /~fielding/index.html HTTP/1.1
Host: www.ics.uci.edu
Destination: http://www.ics.uci.edu/users/f/fielding/index.html




HTTP/1.1 200 OK
Content-Location:
http://www.ics.uci.edu/users/f/fielding/index.html



3.8  ADDREF Method


3.8.1     Problem Definition

There needs to be a way to add an external member to a
collection.


3.8.2     Solution Requirements

The solution must:
   allow access control
   allow referencing to URIs of external members
   not require a body


3.8.3     The Request

The ADDREF method adds the URI specified in the Collection-Member
header as an external member to the collection specified by the
Request-URI. The value in the Collection-Member header MUST be an
absolute URI meeting the requirements of an external member URI.
It is not an error if the URI specified in the Collection-Member
header already exists as an external member of the collection,
however, after processing ADDREF there MUST be only one instance
of the URI in the collection.  If the URI specified in the
Collection-Member header already exists as an internal member of
the collection, the ADDREF method MUST fail with a 412
Precondition Failed status code.


3.8.4     Example


ADDREF /~whitehead/dav/ HTTP/1.1
HOST: www.ics.udi.edu
Collection-Member: http://www.ietf.org/standards/dav/




HTTP/1.1 200 OK



3.9  DELREF Method


3.9.1     Problem Definition
There needs to be a way to remove an external member from a
collection.


3.9.2     Solution Requirements

The solution must:
   allow access control
   allow referencing to URIs of external members
   not require a body


3.9.3     The Request

The DELREF method removes the URI specified in the Collection-Member header from the collection specified by the Request-URI.
DELREFing a URI which is not a member of the collection is not an
error. DELREFing an internal member MUST fail with a 412
Precondition Failed status code.


3.9.4     Example


DELREF /~whitehead/dav/ HTTP/1.1
Host: www.ics.udi.edu
Collection-Member: http://www.ietf.org/standards/dav/




HTTP/1.1 200 OK



3.10 PATCH Method


3.10.1    Problem Definition

At present, if a principal wishes to modify a resource, they must
issue a GET against the resource, modify their local copy of the
resource, and then issue a PUT to place the modified resource on
the server. This procedure is inefficient because the entire
entity for a resource must be transmitted to and from the server
in order to make even small changes.  Ideally, the update entity
transmitted to the server should be proportional in size to the
modifications.


3.10.2    Solution Requirements

The solution must:
   allow partial modification of a resource without having to
  transmit the entire modified resource
   allow byte-range patching
   allows extensions so that patches can be done beyond simple
  byte-range patching
   allow ranges to be deleted, inserted, and replaced


3.10.3    The Request

The request entity of the PATCH method contains a list of
differences between the resource identified by the Request-URI
and the desired content of the resource after the PATCH action
has been applied.  The list of differences is in a format defined
by the media type of the entity (e.g., "application/diff") and
must include sufficient information to allow the server to
convert the original version of the resource to the desired
version.  Processing performed by PATCH is atomic, hence all
changes MUST be successfully executed or the method fails. PATCH
MUST fail if executed on a non-existent resource; i.e. PATCH does
not create a resource as a side effect.
If the request appears (at least initially) to be acceptable, the
server MUST transmit an interim 100 response message after
receiving the empty line terminating the request headers and
continue processing the request.  Since the semantics of PATCH
are non-idempotent, responses to this method are not cacheable.
While server support for PATCH is optional, if a server does
support PATCH, it MUST support at least the text/xml diff format
defined below.  Support for the VTML difference format [VTML] is
recommended, but not required.


3.10.4    text/xml elements for PATCH

The resourceupdate XML element contains a set of XML sub-entities
that describe modification operations.  The name and meaning of
these XML elements is given below. Processing of these directives
MUST be performed in the order encountered within the XML
document.  A directive operates on the resource as modified by
all previous directives (executed in sequential order). The
length of the resource MAY be extended or reduced by a PATCH.
The changes specified by the resourceupdate XML element MUST be
executed atomically.


3.10.4.1  ResourceUpdate
Name: http://www.ietf.org/standards/dav/patch/resourceupdate
Purpose:       Contains an ordered set of changes to a non-collection, non-property resource.
Schema: http://www.ietf.org/standards/dav/patch/
Parent:        Any
Value:         *(Insert | Delete | Replace)


3.10.4.2  Insert
Name: http://www.ietf.org/standards/dav/patch/insert
Purpose:       Insert the XML element’s contents starting at the
specified octet.
Schema: http://www.ietf.org/standards/dav/patch/
Parent:         ResourceUpdate
Value:         The insert XML element MUST contain an Octet-Range
XML element that specifies an octet position within the body of a
resource.  A value of "end" specifies the end of the resource.
The body of the insert XML element contains the octets to be
inserted.
Please note that in order to protect the white space contained in
this XML element the following attribute/value MUST be included
in the element: XML-SPACE = "PRESERVE".


3.10.4.3  Delete
Name: http://www.ietf.org/standards/dav/patch/delete
Purpose:       Removes the specified range of octets.
Schema: http://www.ietf.org/standards/dav/patch/
Parent:         ResourceUpdate
Value:         The Delete XML element MUST contain an octet-range
XML element.
Discussion: The octets that are deleted are removed, which means
the resource is collapsed and the length of the resource is
decremented by the size of the octet range.  It is not
appropriate to replace deleted octets with zeroed-out octets,
since zero is a valid octet value.


3.10.4.4  Replace
Name: http://www.ietf.org/standards/dav/patch/replace
Purpose:       Replaces the specified range of octets with the
contents of the XML element.  If the number of octets in the XML
element is different from the number of octets specified, the
update MUST be rejected.
Schema: http://www.ietf.org/standards/dav/patch/
Parent:         ResourceUpdate
Value:         The Replace XML element MUST contain an octet-range XML element. The contents of the entity are the replacement
octets.
Please note that in order to protect the white space contained in
this XML element the following attribute/value MUST be included
in the element: XML-SPACE = "PRESERVE".


3.10.4.5  Octet-Range Attribute
Name: http://www.ietf.org/standards/dav/patch/octet-range
Purpose:  Specifies a range of octets that the enclosing property
effects.
Schema: http://www.ietf.org/standards/dav/patch/
Parent:    Insert, Delete, Replace
Value:    number ["-" (number | "end")]
          Number = 1*Digit
Description: Octet numbering begins with 0. If the octet contains
a single number then the operation is to begin at that octet and
to continue for a length specified by the operation. In the case
of a delete, this would mean to delete a single octet. In the
case of an insert this would mean to begin the insertion at the
specified octet and to continue for the length of the included
value, extending the resource if necessary. In the case of
replace, the replace begins at the specified octet and overwrites
all that follow to the length of the included value.


3.10.5    The Response

200 (OK) - The request entity body was processed without error,
resulting in an update to the state of the resource.
409 (Conflict) - If the update information in the request message
body does not make sense given the current state of the resource
(e.g., an instruction to delete a non-existent line), this status
code MAY be returned.
415 (Unsupported Media Type) - The server does not support the
content type of the update instructions in the request message
body.
416 (Unprocessable Entity) - A new status code.  The server
understands the content type of the request entity, but was
unable to process the contained instructions.
417 (Insufficient Space on Resource) - The resource does not have
sufficient space to record the state of the resource after the
execution of this method.


3.10.6    Examples
3.10.6.1  HTML file modification

The following example shows a modification of the title and
contents of the HTML resource http://www.example.org/hello.html.

Before:

     <HTML>
     <HEAD>
     <TITLE>Hello world HTML page</TITLE>
     </HEAD>
     <BODY>
     <P>Hello, world!</P>
     </BODY>
     </HTML>

PATCH Request:                     Response:

     PATCH hello.html HTTP/1.1
     Host: www.example.org
     Content-Type: text/xml
     Content-Length: xxx



                                   HTTP/1.1 100 Continue
     <?XML:Namespace href =
     "http://www.ietf.org/standards/dav/patch/" AS = "D"/>
     <D:ResourceUpdate>
          <Replace XML-SPACE = "PRESERVE"><octet-range>14</octet-range>
         &003CTITLE&003ENew Title&003C/TITLE&003E</Replace>
          <Delete><octet-range>38-50</Delete>
     <Insert XML-SPACE = "PRESERVE"><octet-range>86</>&003CP&003ENew paragraph&003C/P&003E</Insert>
     </D:ResourceUpdate>
                                   HTTP/1.1 200 OK


After:

     <HTML>
     <HEAD>
     <TITLE>New Title</TITLE>
     </HEAD>
     <BODY>
     <P>Hello, world!</P>
     <P>New paragraph</P>
     </BODY>
     </HTML>


3.11 Headers

3.11.1    Destination Header

The Destination header specifies a destination resource for
methods such as COPY and MOVE, which take two URIs as parameters.
     Destination= "Destination" ":" URI


3.11.2    Enforce-Live-Properties Header

The Enforce-Live-Properties header specifies properties that MUST
be "live" after they are copied (moved) to the destination
resource of a copy (or move). If the value "*" is given for the
header, then it designates all live properties on the source
resource.  If the value is "Omit" then the server MUST NOT
duplicate on the destination resource any properties that are
defined on the source resource. If this header is not included
then the server is expected to act as defined by the default
property handling behavior of the associated method.

     EnforceLiveProperties = "Enforce-Live-Properties" ":" ("*" |
     "Omit" | 1#(Property-Name))
     Property-Name = "<" URI ">"



3.11.3    Overwrite Header
The Overwrite header specifies whether the server should
overwrite the state of a non-null destination resource during a
COPY or MOVE.  A value of "false" states that the server MUST NOT
perform the COPY or MOVE operation if the state of the
destination resource is non-null. By default, the value of
Overwrite is "true," and a client MAY omit this header from a
request when its value is "true." While the Overwrite header
appears to duplicate the functionality of the If-Match: * header
of HTTP/1.1, If-Match applies only to the Request-URI, and not to
the Destination of a COPY or MOVE.

     Overwrite = "Overwrite" ":" ("true" | "false")

If there is a conflict and the Overwrite header equals "true", or
is absent and thus defaults to "true", then the method MUST fail
with a 409 Conflict.


3.11.4    Destroy Header

When deleting a resource the client often wishes to specify
exactly what sort of delete is being enacted. The Destroy header,
used with the Mandatory header, allows the client to specify the
end result they desire. The Destroy header is specified as
follows:

 The Undelete token requests that, if possible, the resource
should be left in a state such that it can be undeleted. The
server is not required to honor this request.

 The NoUndelete token requests that the resource MUST NOT be left
in a state such that it can be undeleted.

 The VersionDestroy token includes the functionality of the
NoUndelete token and extends it to include having the server
remove all versioning references to the resource that it has
control over.
 
  DestroyHeader = "Destroy" ":" #Choices
   Choices = "VersionDestroy" | "NoUndelete" | "Undelete" | token
|"<" URI ">" ; a token extension MUST NOT be used unless it is
specified in a RFC16, otherwise a URI MUST be used for
extensions.



3.11.5    Collection-Member Header

The Collection-Member header specifies the URI of an external
resource to be added/deleted to/from a collection.

     CollectionMember = "Collection-Member" ":" URI



3.12 Links


3.12.1    Source Link Property Type
Name: http://www.ietf.org/standards/dav/link/source
Purpose:       The destination of the source link identifies the
resource that contains the unprocessed source of the link’s
source.
Schema: http://www.ietf.org/standards/dav/link/
Parent:        Any
Value:         An XML document with zero or more link XML
elements.
Discussion: The source of the link (src) is typically the URI of
the output resource on which the link is defined, and there is
typically only one destination (dst) of the link, which is the
URI where the unprocessed source of the resource may be accessed.
When more than one link destination exists, this specification
asserts no policy on ordering.


4    State Tokens

4.1  Overview


4.1.1     Problem Description

There are times when a principal will want to predicate
successful execution of a method on the current state of a
resource.  While HTTP/1.1 provides a mechanism for conditional
execution of methods using entity tags via the "If-Match" and
"If-None-Match" headers, the mechanism is not sufficiently extensible
to express conditional statements involving more generic state
indicators, such as lock tokens.

 The fundamental issue with entity tags is that they can only be
generated by a resource. However there are times when a client
will want to be able to share state tokens between resources,
potentially on different servers, as well as be able to generate
certain types of lock tokens without first having to communicate
with a server.

For example, a principal may wish to require that resource B have
a certain state in order for a method to successfully execute on
resource A. If the client submits an e-tag from resource B to
resource A, then A has no way of knowing that the e-tag is meant
to describe resource B.

Another example occurs when a principal wishes to predicate the
successful completion of a method on the absence of any locks on
a resource. It is not sufficient to submit an "If-None-Match: *"
as this refers to the existence of an entity, not of a lock.

This draft defines the term "state token" as an identifier for a
state of a resource. The sections below define requirements for
state tokens and provide a  state token syntax, along with two
new headers which can accept the new state token syntax.


4.1.2     Solution Requirements


4.1.2.1   Syntax

Self-Describing. A state token must be self describing such that
upon inspecting a state token it is possible to determine what
sort of state token it is, what resource(s) it applies to, and
what state it represents.

This self-describing nature allows servers to accept tokens from
other servers and potentially be able to coordinate state
information cross resource and cross site through standardized
protocols. For example, the execution of a request on resource A
can be predicated on the state of resource B, where A and B are
potentially on different servers.

Client Generable. The state token syntax must allow, when
appropriate, for clients to generate a state token without having
first communicated with a server.

One drawback of entity tags is that they are set by the server,
and there is no interoperable algorithm for calculating an entity
tag. Consequently, a client cannot generate an entity tag from a
particular state of a resource.  However, a state token which
encodes an MD5 state hash could be calculated by a client based
on a client-held state of a resource, and then submitted to a
server in a conditional method invocation.

Another potential use for client generable state tokens is for a
client to generate lock tokens with wild card fields, and hence
be able to express conditionals such as: "only execute this GET
if there are no write locks on this resource."


4.1.2.2   Conditonals

Universal. A solution must be applicable to all requests.
Positive and Negative. Conditional expressions must allow for the
expression of both positive and negative state requirements.


4.2  State Token Syntax
State tokens are URLs employing the following syntax:

State-Token = "StateToken:" Type ":" Resources ":" State-Info
Type = "Type" "=" Caret-encoded-URL
Resources = "Res" "=" Caret-encoded-URL
Caret-encoded-URL = "^" Resource "^"
Resource = <A URI where all "^" characters are escaped>
State-Info = *(uchar | reserved)  ; uchar, reserved defined
section 3.2.1 of RFC 2068


This proposal has created a new URL scheme for state tokens
because a state token names a network resource using its normal
name, which is typically state-invariant, along with additional
information that specifies a particular state of the resource.
Encoding the state information into the native URL scheme of the
network resource was not felt to be safe, since freedom from name
space collisions could not be guaranteed. If this proposal is
accepted, the StateToken URL scheme will need to be defined and
registered with IANA.

State Token URLs begin with the URL scheme name "StateToken"
rather than the name of the particular state token type they
represent in order to make the URL self describing. Thus it is
possible to examine the URL and know, at a minimum, that it is a
state token.

Labeled name/value pairs are used within the token to allow new
fields to be added. Processors of state tokens MUST be prepared
to accept the fields in whatever order they are present and MUST
ignore any fields they do not understand.
The "Type" field specifies the type of the state information
encoded in the state token. A URL is used in order to avoid
namespace collisions.

The "Res" field identifies the resource for which the state token
specifies a particular state. Since commas and spaces are
acceptable URL characters, a caret is used to delimit a URL.
Since a caret is an acceptable URL character, any instances of it
must be escaped using the % escape convention.

The State-Info production is expanded upon in descriptions of
specific state token types, and is intended to contain the state
description information for a particular state token.


4.3  State Token Conditional Headers


4.3.1     If-State-Match


If-State-Match = "If-State-Match" ":" ("AND" | "OR") 1#("<" State-Token ">")


The If-State-Match header is intended to have similar
functionality to the If-Match header defined in section 14.25 of
RFC 2068.

If the AND keyword is used and all of the state tokens identify
the state of the resource, then the server MAY perform the
requested method. If the OR keyword is used and any of the state
tokens identifies the current state of the resource, then server
MAY perform the requested method.  If neither of the keyword
requirements is met, the server MUST NOT perform the requested
method, and MUST return a 412 (Precondition Failed) response.


4.3.2     If-None-State-Match


If-None-State-Match = "If-None-State-Match" ":" 1#("<" State-Token ">")


The If-None-State-Match header is intended to have similar
functionality to the If-None-Match header defined in section
14.26 of RFC 2068.

If any of the state tokens identifies the current state of the
resource, the server MUST NOT perform the requested method.
Instead, if the request method was GET, HEAD, INDEX, or GETMETA,
the server SHOULD respond with a 304 (Not Modified) response,
including the cache-related entity-header fields (particularly
ETag) of the current state of the resource.  For all other
request methods, the server MUST respond with a status of 412
(Precondition Failed).

If none of the state tokens identifies the current state of the
resource, the server MAY perform the requested method.

Note that the "AND" and "OR" keywords specified with the If-State-Match header are intentionally not defined for If-None-State-Match, because this functionality is not required.


4.4  State Token Header

State-Token-Header = "State-Token" ":" 1#("<" State-Token ">")


 The State Token header is intended to have similar functionality
to the etag header defined in section 14.20 of RFC 2068. The
purpose of the tag is to return state tokens defined on a
resource in a response. The contents of the state-token are not
guaranteed to be exhaustive and are generally used to return a
new state token that has been defined as the result of a method.
For example, if a LOCK method were successfully executed on a
resource the response would include a state token header with the
lock state token included.

4.5  E-Tags

E-tags have already been deployed using the If-Match and If-None-Match headers.  Introducing two mechanisms to express e-tags
would only confuse matters, therefore e-tags should continue to
be expressed using quoted strings and the If-Match and If-None-Match headers.


5    Locking

5.1  Problem Description - Overview

Locking is used to arbitrate access to a resource amongst
principals that have equal access rights to that resource.

This draft allows locks to vary over two parameters, the number
of principals involved and the type of access to be granted. This
draft will only provide for the definition of locking for one
access type, write. However, the syntax is extensible enough to
allow for the specification of other access types. It is a goal
of this proposal that it use the same access verbs as will be
defined in the access control draft.


5.1.1     Exclusive Vs. Shared Locks

The most basic form of LOCK is an exclusive lock. This is a lock
where the access right in question is only granted to a single
principal. The need for this arbitration results from a desire to
avoid having to constantly merge results. In fact, many users so
dislike having to merge that they would rather serialize their
access to a resource rather than have to constantly perform
merges.

However, there are times when the goal of a lock is not to
exclude others from exercising an access right but rather to
provide a mechanism for principals to indicate that they intend
to exercise their access right.  Shared locks are provided for
this case. A shared lock allows multiple principals to receive a
lock, hence any principal with appropriate access can get the
lock.

With shared locks there are two trust sets that affect a
resource.  The first trust set is created by access permissions.
Principals who are trusted, for example, may have permission to
write the resource, those who are not, don't.  Among those who
have access permission to write the resource, the set of
principals who have taken out a shared lock also must trust each
other, creating a (probably) smaller trust set within the access
permission write set.

Starting with every possible principal on the Internet, in most
situations the vast majority of these principals will not have
write access to a given resource.  Of the small number who do
have write access, some principals may decide to guarantee their
edits are free from overwrite conflicts by using exclusive write
locks in conjunction with a precondition header (If-State-Match)
that checks for existence of the lock prior to writing the
resource. Others may decide they trust their collaborators (the
potential set of collaborators being the set of principals who
have write permission) and use a shared lock, which informs their
collaborators that a principal is potentially working on the
resource.

 The WebDAV extensions to HTTP do not need to provide all of the
communications paths necessary for principals to coordinate their
activities.  When using shared locks, principals may use any out
of band communication channel to coordinate their work (e.g.,
face-to-face interaction, written notes, post-it notes on the
screen, telephone conversation, email).  The intent of a shared
lock is to let collaborators know who else is potentially working
on a resource.

Why not use exclusive write locks all the time?  Experience from
initial Web distributed authoring systems has indicated that
exclusive write locks are often too rigid.  An exclusive write
lock is used to enforce a particular editing process: take out
exclusive write lock, read the resource, perform edits, write the
resource, release the lock.  What happens if the lock isn't
released?  While the time-out mechanism provides one solution, if
you need to force the release of a lock immediately, it doesn't
help much.  Granted, an administrator can release the lock for
you, but this could become a significant burden for large sites.
Further, what if the administrator can't be reached immediately?

Despite their potential problems, exclusive write locks are
extremely useful, since often a guarantee of freedom from
overwrite conflicts is exactly what is needed.  The solution:
provide exclusive write locks, but also provide a less strict
mechanism in the form of shared locks which can be used by a set
of people who trust each other and who have access to a
communications channel external to HTTP which can be used to
negotiate writing to the resource.


5.1.2     Required Support

A DAV compliant server is not required to support locking in any
form. If the server does support locking it may choose to support
any combination of exclusive and shared locks for any access
types.

The reason for this flexibility is that server implementers have
said that they are willing to accept minimum requirements on all
services but locking. Locking policy strikes to the very heart of
their resource management and versioning systems and they require
control over what sort of locking will be made available. For
example, some systems only support shared write locks while
others only provide support for exclusive write locks. As each
system is sufficiently different to merit exclusion of certain
locking features, the authors are proposing that locking be
allowed as the sole axis of negotiation within DAV.


5.2  LOCK Method


5.2.1     Operation

A lock method invocation creates the lock specified by the Lock-Info header on the request-URI. Lock method requests SHOULD NOT
have a request body. A user-agent SHOULD submit an Owner header
field with a lock request.

A successful response to a lock invocation MUST include a Lock-Token header. If the server supports a time based lock removal
mechanism on the resource, a successful lock invocation SHOULD
return a Time-Out header.
5.2.2     Effect of Locks on Properties and Containers

By default a lock affects the entire state of the resource,
including its associated properties. As such it is illegal to
specify a lock on a property. For containers, a lock also affects
the ability to add or remove members. The nature of the effect
depends upon the type of access control involved.  The Depth
header expresses the general semantics of a LOCK method request
when invoked on a collection (note that specific lock types may
restrict the effect of a lock, for example limiting the allowable
values of the Depth header):

    A Depth header (defined in the namespace draft) may be used
  on a LOCK method when the LOCK method is applied to a
collection
  resource. The legal values for Depth on a LOCK are 0, 1, and
  Infinity. A Depth of 0 instructs the resource to just lock the
  container. As previously mentioned, depending on the type of
  lock, the lock affects the ability to add or remove members of
  the container.

    A Depth of 1 means that the container is locked and a LOCK
  is executed on the container’s propagate members with a Depth
of
  0 and If-Range, If-Modified-Since, If-Unmodified-Since, If-Match
  and If-None-Match headers are dropped. However, the effects of
  the LOCK MUST be atomic in that either the container and all of
  its members are locked or no lock is granted. The result of a
  Depth 1 lock is a single lock token which represents the lock
on
  the container and all of its members. This lock token may be
used
  in an If-State-Match or If-Not-State-Match header against any
of
  the resources covered by the lock. Since the lock token
  represents a lock on all the resources, an UNLOCK using that
  token will remove the lock from all included resources, not
just
  the resource the UNLOCK was executed on.

    A Depth of infinity means that the LOCK is recursively
  executed, with a Depth of infinity, on the collection and all
of
  its propagate members and all of their propagate members. As
with
  a Depth of 1, the LOCK must be granted in total or not at all.
  Otherwise the lock operates in the same manner as a Depth of 1
  lock.

The default behavior when locking a container is to act as if a
"Depth: 0" header had been placed on the method.


5.2.3     Locking Replicated Resources

Some servers automatically replicate resources across multiple
URLs. In such a circumstance the server MAY only accept a lock on
one of the URLs if the server can guarantee that the lock will be
honored across all the URLs.


5.2.4     Interaction with other Methods

Only two methods, MOVE and DELETE, have side effects which
involve locks. When a resource is moved, its lock SHOULD be moved
with it. However this may not always be possible and there is
currently no proposal to create a header which would specify that
the lock request should fail if the resource’s locks can not be
maintained. A COPY MUST NOT copy any locks on the source resource
over to the destination resource. Deleting a resource MUST remove
all locks on the resource.


5.2.5     Lock Compatibility Table

The table below describes the behavior that occurs when a lock
request is made on a resource.

Lock requestCurrent lock state      Shared Lock       Exclusive LockNone                     True              TrueShared Lock              True              FalseExclusive Lock           False             False*

Legend: True = lock MAY be granted.  False = lock MUST NOT be
granted.  *=if the principal requesting the lock is the owner of
the lock, the lock MAY be regranted.

The current lock state of a resource is given in the leftmost
column, and lock requests are listed in the first row.  The
intersection of a row and column gives the result of a lock
request.  For example, if a shared lock is held on a resource,
and an exclusive lock is requested, the table entry is "false",
indicating the lock must not be granted.

If an exclusive lock is re-requested by the principal who owns
the lock, the lock MAY be regranted. If the lock is regranted,
the same lock token that was previously issued MUST be returned.


5.2.6     Status Codes

412 "Precondition Failed" - The included state-token was not
enforceable on this resource.

416 "Locked" - The resource is locked so the method has been
rejected.


5.2.7     Example


LOCK /workspace/webdav/proposal.doc HTTP/1.1
Host: webdav.sb.aol.com
Lock-Info: LockType=Write LockScope=Exclusive
Owner: <http://www.ics.uci.edu/~ejw/contact.html>




HTTP/1.1 200 OK
State-Token: StateToken:Type=^DAV:/LOCK/DAVLOCK^:Res=^http://www.ics.uci.edu/workspace/webdav/proposal.doc^:LockType=Write:LockScope=Exclusive:ServerID=12382349AdfFFF
Time-Out: ClockType=Activity TimeType=second;604800


This example shows the successful creation of an exclusive write
lock on resource
http://webdav.sb.aol.com/workspace/webdav/proposal.doc. The
resource http://www.ics.uci.edu/~ejw/contact.html contains
contact information for the owner of the lock. The server has an
activity-based timeout policy in place on this resource, which
causes the lock to automatically be removed after 1 week (604800
seconds). The response has a Lock-Token header that gives the
state token URL for the lock token generated by this lock
request.



5.2.8     Lock-Info Request Header

The Lock-Info header specifies the scope and type of a lock for a
LOCK method request. The syntax specification below is
extensible, allowing new type and scope identifiers to be added.

LockInfo = "Lock-Info" ":" DAVLockType SP DAVLockScope CRLF
DAVLockType = "LockType" "=" DAVLockTypeValue
DAVLockTypeValue = ("Write" | *(uchar | reserved))
DAVLockScope = "LockScope" "=" DAVLockScopeValue
DAVLockScopeValue = ("Exclusive" |"Shared" | *(uchar | reserved))



5.2.9     Owner Request Header


5.2.9.1   Problem Description

When discovering the list of owners of locks on a resource, a
principal may want to be able to contact the owner directly. For
this to be possible the lock discovery mechanism must provide
enough information for the lock owner to be contacted.


5.2.9.2   Solution Requirements

Not all systems have authentication procedures that provide
sufficient information to identify a particular user in a way
that is meaningful to a human. In addition, many systems that do
have sufficient information, such as a name and e-mail address,
do not have the ability to associate this information with the
lock discovery mechanism. Therefore a means is needed to allow
principals to provide authentication in a manner which will be
meaningful to a human.

The From header (defined in RFC 2068), which contains only an
email mailbox, is not sufficient for the purposes of quick
identification. When desperately looking for someone to remove a
lock, e-mail is often not sufficient. A telephone number (cell
number, pager number, etc.) would be better. Furthermore, the
email address in the From field may or may not support including
the owners name and that name is often set to an alias anyway.
Therefore a header more flexible than From is required.


5.2.9.3   Syntax

Owner = "Owner" ":" (("<" URI ">")  | quoted-string)


The URI SHOULD provide a means for either directly contacting the
principal (such as a telephone number or e-mail URI), or for
discovering the principal (such as  the URL of a homepage).  The
quoted string SHOULD provide a means for directly contacting the
principal, such as a name and telephone number.


5.2.10    Time-Out Header

5.2.10.1  Problem Description

In a perfect world principals take out locks, use the resource as
needed, and then remove the lock when it is no longer needed.
However, this scenario is frequently not completed, leaving
active but unused locks. Reasons for this include client programs
crashing and loosing information about locks, users leaving their
systems for the day and forgetting to remove their locks, etc. As
a result of this behavior, servers need to establish a policy by
which they can remove a lock without input from the lock owner.
Once such a policy is instituted, the server also needs a
mechanism to inform the principal of the policy.


5.2.10.2  Solution Requirements

There are two basic lock removal policies, administrator and time
based remove. In the first case a principal other than the lock
owner has sufficient access rights to order the lock removed,
even though they did not take it out. User-agents MUST assume
that such a mechanism is available and thus locks may arbitrarily
disappear at any time. If their actions require confirmation of
the existence of a lock then the If-State headers are available.

The second solution, is the time based removal policy. Activity
based systems set a timer as soon as the lock is taken out. Every
time a method is executed on the resource, the timer is reset. If
the timer runs out, the lock is removed.

Finally, some systems only allow locks to exist for the duration
of a session, where a session is defined as the time when the
HTTP connection that was used to take out the lock remains
connected. This mechanism is used to allow programs which are
likely to be improperly exited, such as JAVA programs running in
a browser, to take out locks without leaving a lot of ownerless
locks around when they are improperly exited.


5.2.10.3  Syntax


TimeOut = "Time-Out" ":" ((TimeOutType SP Session) | TimeOutVal |
          Session) CRLF
TimeOutType = ClockType SP TimeType
ClockType = "ClockType" "=" ClockTypeValue
ClockTypeValue = "Activity"
TimeType = "TimeType" "=" TimeTypeValue
TimeTypeValue = "Second" ";" DAVTimeOutVal
DAVTimeOutVal = 1*digit
Session = "Session" "=" ("Yes" | "No")


The "Second" TimeType specifies the number of seconds that may
elapse before the lock is automatically removed. A server MUST
not generate a time out value for "second" greater than 2^32-1.

If no time based system is in use then a Time-Out header MUST NOT
be returned. The Time-Out header MUST only be returned in a
response to a LOCK request.When session is set to yes then
whatever clocktype and timetype is being used, their effects are
scoped within that particular session. So an absolute lock with a
ten day expiration period will only remain active so long as the
session remains active. A DAVTimeOutVal value must be greater
than zero.

Clients MAY include TimeOut headers in their LOCK requests.
However the server is not required to honor or even consider the
request. The primary purpose in allowing clients to submit a
TimeOut header is to inform the server if the client is
requesting a session based lock. If a timeout is associated with
the lock, the server MUST return a TimeOut header with a valid
value.


5.2.11    State-Token Header


5.2.11.1  Problem Definition

Program A, used by User A, takes out a write lock on a resource.
Program B, also run by User A, then proceeds to perform a PUT to
the locked resource. The PUT will succeed because locks are
associated with a principal, not a program, and thus program B,
because it is acting with principal A’s credential, will be
allowed to perform the PUT. In reality program B had no knowledge
of the lock and had it had such knowledge, would not have
overwritten the resource. Hence, a mechanism is needed to prevent
different programs from accidentally ignoring locks taken out by
other programs with the same authorization.


5.2.11.2  Solution Requirement

The solution must not require principals to perform discovery in
order to prevent accidental overwrites as this could cause race
conditions.

The solution must not require that clients guess what sorts of
locks might be used and use if-state-match headers with wildcards
to prevent collisions. The problem with trying to "guess" which
locks are being used is that new lock types might be introduced,
and the program would not know to "guess them". So, for example,
a client might put in an if-state-match header with a wildcard
specifying that if any write lock is outstanding then the
operation should fail. However a new read/write lock could be
introduced which the client would not know to put in the header.


5.2.11.3  State-Token Header

The State-Token header is returned in a successful response to
the LOCK method or is used as a request header with the UNLOCK
method.

The State-Token header containing a lock token owned by the
request principal is used by the principal on arbitrary method to
indicate that the principal is aware of the specified lock. If
the State-Token header with the appropriate lock token is not
included the request MUST be rejected, even though the requesting
principal has authorization to make modifications specified by
the lock type. This injunction does not apply to methods that are
not affected by the principal’s lock.

For example, Program A, used by user A, takes out a write lock on
a resource. Program A then makes a number of PUT requests on the
locked resource, all the requests contain a State-Token header
which includes the write lock state token. Program B, also run by
User A, then proceeds to perform a PUT to the locked resource.
However program B was not aware of the existence of the lock and
so does not include the appropriate state-token header. The
method is rejected even though principal A is authorized to
perform the PUT. Program B can, if it so chooses, now perform
lock discovery and obtain the lock token. Note that program A and
B can perform GETs without using the state-token header because
the ability to perform a GET is not affected by a write lock.
Note that having a lock state token provides no special access
rights. Anyone can find out anyone else’s lock state token by
performing lock discovery. Locks are to be enforced based upon
whatever authentication mechanism is used by the server, not
based on the secrecy of the token values.

5.3  Write Lock

A write lock prevents a principal without the lock from
successfully executing a PUT, POST, DELETE, MKCOL, PROPPATCH,
PATCH, ADDREF or DELREF on the locked resource. All other
methods, GET in particular, function independent of the lock.

While those without a write lock may not alter a property on a
resource it is still possible for the values of live properties
to change, even while locked, due to the requirements of their
schemas. Only dead properties and live properties defined to
respect locks are guaranteed to not change while locked.

It is possible to assert a write lock on a null resource in order
to lock the name. Please note, however, that locking a null
resource effectively makes the resource non-null as the resource
now has lock related properties defined on it.

Write locking a container also prevents adding or removing
members of the container. This means that attempts to PUT/POST a
resource into the immediate name space of the write locked
container MUST fail if the principal requesting the action does
not have the write lock on the container. In order to keep the
behavior of locking containers consistent all locks on containers
MUST contain a Depth header equal to infinity, any other value is
illegal.


5.4  Lock Tokens


5.4.1     Problem Description

It is possible that once a lock has been granted it may be
removed without the lock owner’s knowledge. This can cause
serialization problems if the lock owner executes methods
thinking their lock is still in effect. Thus a mechanism is
needed for a principal to predicate the successful execution of a
message upon the continuing existence of a lock.


5.4.2     Proposed Solution

The proposed solution is to provide a lock token in the response
of a lock request. The lock token is a type of state token and
describes a particular lock. The same lock token must never be
repeated on a particular resource. This prevents problems with
long held outstanding lock tokens being confused with newer
tokens. This uniqueness requirement is the same as for e-tags.
This requirement also allows for tokens to be submitted across
resources and servers without fear of confusion.


5.4.3     Lock Token Definition

The lock token is returned in the State-Token header in the
response to a LOCK method. The lock token can also be discovered
through lock discovery on a resource.


Lock-Token-URL = "StateToken:" Type ":" Resources ":" State-Info
Type = "Type" "=" "^DAV:/LOCK/DAVLOCK^"
Resources = "Res" "=" 1*("^" Caret-Encoded-URI "^")
Caret-Encoded-URI = <This is a URI which has all "^"s % encoded.>
State-Info = DAVLockScope ":" DAVLockType ":" ServerID  ;
DAVLockScope, DAVLockType defined in Lock-Info header
ServerID = "ServerID" "=" *(uchar | reserved)


The ServerID is a field for use by the server. Its most basic
purpose is to put in a unique identifier to guarantee that a
server will never confuse an old lock token with a newer one.
However the server is free to use the field to record whatever
information it deems fit. The field is opaque to clients.


5.5  UNLOCK Method


5.5.1     Problem Definition

The UNLOCK method removes the lock identified by the lock token
in the State-Token header from the Request-URI.


5.5.2     Example


UNLOCK /workspace/webdav/proposal.doc HTTP/1.1
Host: webdav.sb.aol.com
State-Token: StateToken:Type=^DAV:/LOCK/DAVLOCK^:Res=^http://www.
ics.uci.edu/workspace/webdav/proposal.doc^:LockType=Write:LockSco
pe=Exclusive:ServerID=12382349AdfFFF




HTTP/1.1 200 OK


In this example, the lock from example of Section 2.9 is removed
from the resource at
http://webdav.sb.aol.com/workspace/webdav/proposal.doc


5.6  Discovery Mechanisms


5.6.1     Lock Type Discovery


5.6.1.1   Problem Definition

Since server lock support is optional, a client trying to lock a
resource on a server can either try the lock and hope for the
best or can perform some form of discovery to determine what lock
types the server actually supports, then formulate a supported
request.  This is known as lock type discovery. Lock type
discovery is not the same as discovering what access control
types are supported, as there may be access control types without
corresponding lock types.


5.6.1.2   SupportedLock Property
Name: http://www.ietf.org/standards/dav/lock/supportedlock
Purpose: To provide a listing of the lock types supported by the
resource.
Schema: http://www.ietf.org/standards/dav/
Values: An XML document containing zero or more LockEntry XML
elements.
Description: The SupportedLock property of a resource returns a
listing of the combinations of scope and access types which may
be specified in a lock request on the resource. Note that the
actual contents are themselves controlled by access controls so a
server is not required to provide information the client is not
authorized to see. If SupportedLock is available on "*" then it
MUST define the set of locks allowed on all resources on that
server.


5.6.1.3   LOCKENTRY XML Element
Name: http://www.ietf.org/standards/dav/lockentry
Purpose: Defines a DAVLockType/LockScope pair which may be
legally used with a LOCK on the specified resource.
Schema: HYPERLINK http://www.ietf.org/standards/dav/
Parent: A SupportedLock entry
Values: LockType LockScope


5.6.1.4   LOCKTYPE XML Element
Name: http://www.ietf.org/standards/dav/locktype
Purpose: Lists a DAVLockType
Schema: http://www.ietf.org/standards/dav/
Parent:  LOCKENTRY
Values: DAVLockTypeValue


5.6.1.5   LOCKSCOPE XML Element
Name: http://www.ietf.org/standards/dav/lockscope
Purpose: Lists a DAVLockScope
Schema: http://www.ietf.org/standards/dav/
Parent:  LOCKENTRY
Values: DAVLockScopeValue


5.6.2     Active Lock Discovery


5.6.2.1   Problem Definition

If another principal locks a resource that a principal wishes to
access, it is useful for the second principal to be able to find
out who the first principal is.


5.6.2.2   Solution Requirements

The lock discovery mechanism should provide a list of who has the
resource locked, what locks they have, and what their lock tokens
are. The lock tokens are useful in shared lock situations where
two principals in particular may want to guarantee that they do
not overwrite each other. The lock tokens are also useful for
administrative purposes so that an administrator can remove a
lock by referring to its token.


5.6.2.3   LOCKDISCOVERY Property
Name: http://www.ietf.org/standards/dav/lockdiscovery
Purpose: To discover what locks are active on a resource
Schema: http://www.ietf.org/standards/dav/
Values: An XML document containing zero or more ActiveLock XML
elements.
Description: The LOCKDISCOVERY property returns a listing of who
has a lock, what type of lock they have, the time out type and
the time remaining on the time out, and the associated lock
token. The server is free to withhold any or all of this
information if the requesting principal does not have sufficient
access rights to see the requested data.


5.6.2.4   ACTIVELOCK XML Element
Name: http://www.ietf.org/standards/dav/activelock
Purpose: A multivalued XML element that describes a particular
active lock on a resource
Schema: http://www.ietf.org/standards/dav/
Parent: A LOCKDISCOVERY entry
Values: LOCKTYPE LOCKSCOPE OWNER TIMEOUT LOCKTOKEN


5.6.2.5   OWNER XML Element
Name: http://www.ietf.org/standards/dav/lock/owner
Purpose: Returns owner information
Schema: http://www.ietf.org/standards/dav/
Parent:  ACTIVELOCK
Values: XML:REF | {any valid XML string}


5.6.2.6   TIMEOUT XML Element
Name: http://www.ietf.org/standards/dav/timeout
Purpose: Returns information about the timeout associated with
the lock
Schema: http://www.ietf.org/standards/dav/
Parent:  ACTIVELOCK
Values: CLOCKTYPE TIMETYPE TIMEOUTVAL


5.6.2.7   CLOCKTYPE XML Element
Name: http://www.ietf.org/standards/dav/clocktype
Purpose: Returns the clock type used with this lock
Schema: http://www.ietf.org/standards/dav/
Parent:  TIMEOUT
Values:  ClockTypeValue


5.6.2.8   TIMETYPE XML Element
Name: http://www.ietf.org/standards/dav/clocktype
Purpose: Returns the time type used with this lock
Schema: http://www.ietf.org/standards/dav/
Parent:  TIMEOUT
Values: TimeTypeValue


5.6.2.9   TIMEOUTVAL XML Element
Name: http://www.ietf.org/standards/dav/timeoutval
Purpose: Returns the amount of time left on the lock
Schema: http://www.ietf.org/standards/dav/
Parent:  TIMEOUT
Values: DAVTimeOutVal

5.6.2.10  LOCKTOKEN XML Element
Name: http://www.ietf.org/standards/dav/statetoken
Purpose: Returns the lock token
Schema: http://www.ietf.org/standards/dav/
Parent:  ACTIVELOCK
Values: XML:REF
Description: The REF contains a Lock-Token-URL.


6    Version Control
[TBD]


7    Internationalization Support
[TBD]


8    Security Considerations
[TBD]


9    Acknowledgements

Terry Allen, Harald Alvestrand, Alan Babich, Dylan Barrell,
Bernard Chester, Dan Connolly, Jim Cunningham, Ron Daniel, Jr.,
Keith Dawson, Mark Day, Martin Duerst, David Durand, Lee Farrell,
Chuck Fay, Roy Fielding, Mark Fisher, Alan Freier, George
Florentine, Jim Gettys, Phill Hallam-Baker, Dennis Hamilton,
Steve Henning, Alex Hopmann, Andre van der Hoek, Ben Laurie, Paul
Leach, Ora Lassila, Karen MacArthur, Steven Martin, Larry
Masinter, Michael Mealling, Keith Moore, Henrik Nielsen, Kenji
Ota, Bob Parker, Glenn Peterson, Jon Radoff, Saveen Reddy, Henry
Sanders, Christopher Seiwald, Judith Slein, Mike Spreitzer, Einar
Stefferud, Ralph Swick, Kenji Takahashi, Robert Thau, Sankar
Virdhagriswaran, Fabio Vitali, Gregory Woodhouse, Lauren Wood


10   References

[Berners-Lee, 1997] T. Berners-Lee, "Metadata Architecture."
Unpublished white paper, January 1997.
http://www.w3.org/pub/WWW/DesignIssues/Metadata.html.

[Bray, Sperberg-McQueen, 1997] T. Bray, C. M. Sperberg-McQueen,
"Extensible Markup Language (XML): Part I. Syntax", WD-xml-lang.html, http://www.w3.org/pub/WWW/TR/WD-xml-lang.html.

[Connolly et al, 1997] D. Connolly, R. Khare, H.F. Nielsen, "PEP
- an Extension Mechanism for HTTP", Internet draft, work-in-progress. draft-ietf-http-pep-04.txt,
ftp://ds.internic.net/internet-drafts/draft-ietf-http-pep-04.txt.

[Fielding et al., 1997] R. Fielding, J. Gettys, J. Mogul, H.
Frystyk, T. Berners-Lee, "Hypertext Transfer Protocol --HTTP/1.1." RFC 2068. U.C. Irvine, DEC, MIT/LCS.  January, 1997.

[Lasher, Cohen, 1995] R. Lasher, D. Cohen, "A Format for
Bibliographic Records," RFC 1807. Stanford, Myricom. June, 1995.

[Maloney, 1996] M. Maloney, "Hypertext Links in HTML." Internet
draft (expired), work-in-progress, January, 1996.

[MARC, 1994] Network Development and MARC Standards, Office, ed.
1994. "USMARC Format for Bibliographic Data", 1994. Washington,
DC: Cataloging Distribution Service, Library of Congress.
[Miller et al., 1996] J. Miller, T. Krauskopf, P. Resnick, W.
Treese, "PICS Label Distribution Label Syntax and Communication
Protocols" Version 1.1, W3C Recommendation REC-PICS-labels-961031.
http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html

[Slein et al., 1997] J. A. Slein, F. Vitali, E. J. Whitehead,
Jr., D. Durand, "Requirements for Distributed Authoring and
Versioning on the World Wide Web." Internet-draft, work-in-progress, draft-ietf-webdav-requirements-03.txt,
ftp://ds.internic.net/internet-drafts/draft-ietf-webdav-requirements-03.txt.

[WebDAV, 1997] WEBDAV Design Team. "A Proposal for Web Metadata
Operations." Unpublished manuscript.
http://www.ics.uci.edu/~ejw/authoring/proposals/metadata.html

[Weibel et al., 1995] S. Weibel, J. Godby, E. Miller, R. Daniel,
"OCLC/NCSA Metadata Workshop Report."
http://purl.oclc.org/metadata/dublin_core_report.

[Yergeau, 1997] F. Yergeau, "UTF-8, a transformation format of
Unicode and ISO 10646", Internet Draft, work-in-progress, draft-yergeau-utf8-rev-00.txt, http://www.internic.net/internet-drafts/draft-yergeau-utf8-rev-00.txt.


11   Authors' Addresses


Y. Y. Goland
Microsoft Corporation
One Microsoft Way
Redmond, WA 98052-6399
Email yarong@microsoft.com

E. J. Whitehead, Jr.
Dept. Of Information and Computer Science
University of California, Irvine
Irvine, CA 92697-3425
Email: ejw@ics.uci.edu

A. Faizi
Netscape
685 East Middlefield Road
Mountain View, CA 94043
Email: asad@netscape.com

S. R Carter
Novell
1555 N. Technology Way
M/S ORM F111
Orem, UT 84097-2399
Email srcarter@novell.com

D. Jensen
Novell
1555 N. Technology Way
M/S ORM F111
Orem, UT 84097-2399
Email dcjensen@novell.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/related-proposals.html
##-----------------TITLE------------------------##
Archives of WebDAV-Related Protocol Proposals
##------------------TEXT------------------------##
Archived WebDAV-Related Protocol Proposals

During the development of the WebDAV Distributed Authoring
Protocol, there were many proposals fielded in an effort to
explore the remote authoring protocol design space. These
protocol proposals are archived below. None of these documents
are currently under active consideration by the WebDAV Working
Group.



Versioning and
Variant Extensions to WebDAV
[Word 97]
Christopher Kaler

This document, not yet submitted as an internet draft, specifies a set
of methods, headers, and content-types composing DAV Versioning and
Variant extensions, an application of the HTTP/1.1 protocol to version
DAV resources. September 28, 1998.



Versioning
Extensions to WebDAV
Christopher Kaler

This document describes a set of methods, headers, and properties that
extend the HTTP and WebDAV protocols to support versioning and variant
authoring of Web resources. Operations are provided to perform both
basic versioning and parallel versioning.  Currently at Internet-Draft
revision level 00, August 6, 1998,
<draft-kaler-webdav-versioning-00.txt>.
  


A Web
Versioning Protocol
Jim Whitehead

This document describes a protocol for versioning and variant
authoring of Web resources.  Currently at Internet-Draft revision
level 00, June 9, 1998,
<draft-whitehead-webdav-versioning-00.txt>.
While some ideas from this specification can be found in the current
versioning protocol specification, draft-whitehead-webdav-versioning
is not an active document.





Distributed Authoring and Versioning Protocol
Jim Cunningham, Asad Faizi

This protocol specification provides an example of how some of the
distributed authoring and versioning requirements can be satisfied
by method extensions to HTTP.   Currently at author's draft v0.1.





Version management with meta-level links via HTTP/1.1
K. Ota, K. Takahashi, K. Sekiya

This Internet-Draft describes version management of WWW resources
within the HTTP/1.1 framework.  The approach uses
meta-level links, which is not an anchor of HTML format, but an
attribute of the resource. This allows versioning to be performed
on non-HTML format resources.  In this approach, the client,
rather than the server, enforces consistency of derived-from
relationships.




WebDAV Tree
Operations
Yaron Y. Goland, Saveen Reddy

This document specifies the methods DELETE-TREE, COPY-TREE, and
MOVE-TREE which perform the equivalent of a DELETE, COPY, and MOVE
across a collection and all its progeny.  Currently at Internet-Draft
revision level 01, November 6, 1997,
<draft-ietf-webdav-depth-01.txt>.  This draft explored a
design alternative to the "Depth" header now found in RFC 2518.

Last modified: July 3, 2003
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/related.html
##-----------------TITLE------------------------##
Related Work
##------------------TEXT------------------------##
Related Work

This page contains links to related work on remote collaborative
authoring and versioning. The WWW4 Authoring Tools Breakout
Session directly led to the formation of the WebDAV Working Group,
and hence is interesting from a historical perspective. Note that the
protocol specifications listed here are not being actively worked on.



Version
Control Protocol
S. Ramaswamy, Cisco Systems

This document presents a non-HTTP-based protocol for performing version control
across the Internet.  Available as Internet Draft
draft-ramaswamy-version-control, revision 00, February 1999.





draft-ietf-html-relrev-00.txt
Hypertext links in HTML
Murray Maloney, SoftQuad

This document presents a list of standard HTML link types for use
in the HTML LINK element.  Issued as an Internet-Draft, it is currently
expired, but still of interest to this working group.





Authoring Tools Breakout Session at

WWW4

Discussion on how to achieve interoperability among distributed web
content authoring tools was the focus of this breakout session
following the "development tools" session on developers day at WWW4.
This session identified a list of issues which affect the interoperability
of distributed editing tools, including access control, getting raw
HTML before server processing, authentication, versioning (the
lost update problem), document DTD labeling, BROWSE and MKDIR
methods, editing of variants, and others.


Last modified: July 3, 2003
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/dist-auth-tools.html
##-----------------TITLE------------------------##
Distributed Web Content Authoring Tools
##------------------TEXT------------------------##
Distributed Web Content Authoring Tools

This page captures information on several early distributed Web
content authoring tools. These tools had some influence on the first
several years of deliberations of the WebDAV working group. The list
also demonstrated knowledge of existing authoring tools by leaders
and members of the working group.

This list is no longer actively maintained, and many links are
unlikely to work. You may wish to try the Web Wayback Machine for broken
links.




Microsoft

FrontPage

FrontPage Product Information

Microsoft FrontPage, formerly Vermeer FrontPage, is an HTML editor
which can save work to an HTTP server which has been augmented with
the FrontPage server extensions.




America Online PrimeHost
AOLpress
and AOLserver
Documentation for

AOLpress and

AOLserver


The America Online PrimeHost hosting service, formerly known as the
GNN Hosting Service, which in turn was formerly known as NaviSoft,
provides a service for using their AOLpress software to publish web
pages on their server for a monthly fee.  Since you can currently
download
fully-functional, but non-supported versions of their AOLpress and
AOLserver tools, it is also possible to experiment with these
tools.

AOLpress employs the PUT method to write content to the AOLserver,
which implements access control features which control, among other
methods, who can PUT to particular namespaces within the server.  The

documentation for the AOLserver describes how it distinguishes
BROWSE, PUT, MKDIR and DELETE as different administrative rights on
operations.




Netscape

Communicator

Communicator Data Sheet

Netscape Communicator provides authoring of HTML documents, along with
publishing capability.  Communicator can use the FTP and HTTP
protocols to remotely write content into the namespace of the HTTP
server.



VerticalSky
Content
Manager
VerticalSky
Data Sheet

VerticalSky Content Manager (formerly MKS Web Integrity) provides
remote authoring and versioning capability.  Versioning features
include check-in/check-out, change history, and visual
differencing.



NetObjects
Authoring
Server Suite

White
Paper (PDF)

A multiuser client/server authoring system which supports
checkin/checkout version control and a content contribution applet
which allows remote uploading of web site content by end-users.




W3C
Amaya Browser/Editor

Amaya is a graphical web browser that also provides web authoring
capabilities.  Its main features are WYSIWYG editing of web pages,
cascading style sheets, a full implementation of HTML 3.2, and publishing
on remote HTTP servers using the PUT method.



W3C
Line Mode Browser

Command Reference Manual

This character-based web browser was developed for use on terminals,
but can be run in interactive mode, non-interactive mode, and as a proxy
client.  Among its many features, the Line Mode Browser has a PUT
command which writes a document to a remote HTTP server from either
the local filesystem or a remote HTTP server.



The BSCW System

Papers and Information on BSCW

This system provides a shared workspace for interacting with
web content.  The system supports Netscape 2/3 Gold style POST
writing of content to a BSCW web server, checkout/checkin of
content, and support for notification of other user's actions
within the workspace.


Last modified: July 3, 2003
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/scenarios/webdav_scen_110796.html
##-----------------TITLE------------------------##
Distributed Authoring Scenarios
##------------------TEXT------------------------##
Distributed Authoring Scenarios

Editor: Ora Lassila,
Nokia Research Center (Boston) & W3C
Version: 0.3
Date: 11/7/1996

Table of Contents

IntroductionScenarios of Distributed EditingScenarios of Distributed Document ManagementScenarios Directly Related to Forthcoming DAV
RFCScenarios Involving VersioningMiscellaneous ScenariosReferences

1. Introduction

The purpose of this document is to catalog scenarios of distributed
editing and authoring as well as versioning, as related to the Interned
Draft document "Requirements on HTTP for Distributed Content Editing"
[1]. These scenarios can serve as examples of distributed
authoring HTTP extensions' usage, and can be used as basis for discussion
of various requirements and protocol features.

The scenarios in this document have been divided into sections addressing
different aspects of the distributed authoring area: the first section
focuses on the manipulation of the contents of resources (documents),
the second section focuses on the management of the documents themselves
and their relationships to other documents and the URL space. A section
has also been included for scenarios involving versioning, although these
may overlap with the aforementioned two sections.

In version 0.3 the section on locking (which was empty) has been eliminated,
and a section has been included containing scenarios directly related to
the forthcoming RFC on distributed authoring and versioning.

[Comments are requested regarding new or existing scenarios and document
format. Please send them to the author.]

2. Scenarios of Distributed Editing

This section contains scenarios where contents of resources are changed
through the use of HTTP (as opposed to through local file system operations).

2.1. Editing HTML

Jane, the maintainer of a web page, needs to update its HTML source.
There are no other variants to this page, such as translations into other
languages. She is working with a distributed authoring tool, DistEdit.
She loads the HTML source into DistEdit via HTTP. She then performs some
edits to the HTML source. The HTML source is then written back to its original
URL using HTTP. The distributed editing session is ended.

Relevant requirements (see [1]) and/or protocol
features: 1 (Source Retrieval), HTTP PUT, 10 (Partial Write).

2.2. Editing a Particular Language Version of an HTML Resource

Jane, who is fluent in French, needs to update the HTML source of the
French language variant of a web page which has English, French, and German
language variants. She is working with a distributed authoring tool, DistEdit.
She loads the French language HTML source into DistEdit using HTTP, and
makes some corrections and modifications. She then writes the HTML source
back to the original URL using HTTP. The distributed editing session is
ended.

Relevant requirements and/or protocol features: 1 (Source Retrieval),
HTTP PUT, 10 (Partial Write).

2.3. Editing HTML with Server Side Includes

Jane needs to update the HTML source of a web page. The HTML source
includes a server side include (SSI) directive which instructs the HTTP
server to insert the current date into the document, and is written in
English. There are no other variants to this page, such as translations
into other languages. Jane is working with a distributed authoring tool,
DistEdit. She loads the HTML source (including the source of the server
side include directive) into DistEdit via HTTP. She then performs some
edits to the HTML source. The HTML source is then written back to its original
URL using HTTP. The distributed editing session is ended.

Relevant requirements and/or protocol features: 1 (Source Retrieval),
HTTP PUT, 10 (Partial Write).

2.4. Editing Word Processor Source which Gets Converted to HTML

Jane needs to update the source of a web page, stored in the native
format of the HTTP-aware word processor DistProc. The HTTP server containing
this resource has extensions provided by the vendor of DistProc which automatically
convert the DistProc native files into HTML which is served whenever the
web page is accessed from its URL, U. The web page does not include any
graphic content, and is written in English. She loads the web page source
into DistProc from URL U using HTTP, and begins to edit this DistProc native
format source file. After making some modifications, she saves the source
file back to the original URL, U, using HTTP. She then checks the HTML
source by retrieving URL U using their favorite web browser. Since it looks
fine, she ends the distributed editing session.

Relevant requirements and/or protocol features: 1 (Source Retrieval),
HTTP PUT.

3. Scenarios of Distributed Document
Management

Scenarios in this section describe remote management of the properties
of resources, remote management of URL hierarchies (aka "directories"),
as well as visualization of the relationships among graphs.

3.1. Creating a New Resource

Jane is working with distributed authoring tool DistEdit on a new HTML
page which does not contain any embedded graphical content. She has finished
her edits, and saves the HTML resource to a web server using the HTTP protocol.
She is prompted for a URL for the new document; the page is then written
to this URL using the HTTP "PUT" method.

Relevant requirements and/or protocol features: HTTP PUT.

3.2. Creating a New Resource through a "Save As" Dialog Box"

Jane is working with distributed authoring tool DistEdit on a new HTML
page which does not contain any embedded graphical content. She has finished
her edits, and wishes to save the HTML resource to a web server using the
HTTP protocol, but does not know the exact name of the level of the URL
hierarchy where she wants the document to be stored. She invokes the "Save
As..." feature of DistEdit, which includes a hierarchy level viewer,
a list of all the entities and their MIME types at a specific level of
the hierarchy, along with the ability to go up or down a level of the hierarchy
by clicking on either ".." to go up, or the name of a hierarchy
level to go down. She moves up and down within the URL hierarchy using
the facilities of the hierarchy level viewer, finally finding a good hierarchy
level for the resource. She then enters a name for the HTML resource, and
hits the "Save" button. The DistEdit tool now writes the HTML
page to the URL created by combining the hierarchy level selected using
the hierarchy level viewer, and the name just entered by her. The web page
is written to the URL using the HTTP "PUT" method.

Notes:

The AOLpress
distributed authoring tool currently provides this capability, which they
term "Network saving of HTML pages" using the "AOLpress
file dialog."For file-based servers, there is typically a mapping between URL hierarchy
levels and directories in the filesystem.

Relevant requirements and/or protocol features: 12 (List URL Hierarchy
Level), HTTP PUT.

3.3. Creating a New Resource in a New Hierarchy Level

Jane is working with distributed authoring tool DistEdit on a new HTML
page which contains some associated embedded graphical content. She finishes
her edits, and wishes to save the HTML resource to a web server using the
HTTP protocol, as well as save the graphical images (collectively we will
call this publishing). She invokes the publishing feature of DistEdit,
which includes the hierarchy level viewer (as described in the previous
scenario). She finds a level of the hierarchy using the hierarchy viewer,
but since this is a new web, she decides to create a new level of the hierarchy
just to contain this web. Pressing the "Create New Hierarchy"
button causes the author to be queried for the name of the new hierarchy
level. Once entered, DistEdit informs the HTTP server that a new hierarchy
level should be added below the level currently displayed in the hierarchy
level viewer. If the author has the correct access permissions to create
a new hierarchy, the new hierarchy level is created. The web author then
presses the "Publish" button, and his web of HTML and graphic
entities are written to the HTTP server.

Notes:

The AOLpress
distributed authoring tool currently provides the capability to make new
hierarchy levels, supported by their "MKDIR" HTTP method.

Relevant requirements and/or protocol features: 12 (List URL Hierarchy
Level), 13 (Make URL Hierachy Level), HTTP PUT.

3.4. Visualizing Webs as Graphs

In order to understand the link structure and resource inclusion relationships
at a hierarchy level, a web maintainer chooses the "Graph View"
option of their distributed editing tool DistEdit. DistEdit queries the
web maintainer for which level of the hierarchy to display using a graph
visualization, and then uses the HTTP protocol to read information about
that level of the hierarchy. DistEdit uses this information to display
a graphical visualization of the hierarchy level, including an icon for
each resource, solid lines between the icons representing links, and dashed
lines representing inclusion (for example, images loaded using the IMG
tag). Entities the web maintainer has read and write access to are displayed
in green, those which they have read access to are in white, and those
which they have no access to are in red. To create the graph visualization,
DistEdit must, using HTTP, get a listing of all the entities at a level
of the hierarchy, and their access control permissions.

Notes:

The AOLpress
distributed authoring tool currently provides a similar capability, which
they term the "MiniWeb," a "bird's-eye" graphical view
of web site documents and how they are linked together.The FrontPage distributed authoring tool provides equivalent capability,
which they call a "Link View," and also supports the related
"Outline View" and "Summary View."

Relevant requirements and/or protocol features: 12 (List URL Hierarchy
Level).

3.5. Modifying Access Rights

Realistic. A sales manager at a company which contains an organization-wide
intranet is working with an intranet-enabled spreadsheet program, DistCalc.
After entering the sales figures for the previous month (which are below
projections), a graph of the sales figures is generated as a JPEG image,
and then saved to the departmental HTTP server using the HTTP "PUT"
method. Realizing that it might be best to limit access to this information,
in their web browser they bring up the graph image. After selecting the
menu option, "Modify Access Permissions," the browser displays
the access control page for the graph image resource. The sales manager
uses the (server-specific) facilities on this page to modify the sales
chart's access control rights so it is password protected.

Ideal. In the ideal case, the DistCalc program would display
a dialog box asking the user for what access rights the graph resource
should have before the graph is saved to the departmental HTTP server.

Notes:

The "realistic" case assumes that reaching consensus on an
access control standard for HTTP resources is not achievable in the near
term, and hence access control will vary with server type. It also assumes
a continuation of the current trend of having an access control URL for
each resource. The "ideal" case shows what could be achieved
if an HTTP access control standard is created.

No matching requirements or protocol features.

3.6. Copying Documents

Jane is looking at the list of monthly reports available on the server.
She selects one from the list that she wants to use as the basis for a
new monthly report. She asks for a copy of this monthly report to be made
in the same directory but with a different name. Since she is not intending
to work on it now, there is no reason to pull the content to the client.

Relevant requirements and/or protocol features: 14 (Copy).

3.8. Modifying/Setting Document Attributes

Jane is creating a new document on the Web. She sends it to the server,
but also wants to set a bunch of attributes that can be used later in searches
(author, title, document type, subject, organization, etc.). Sometimes
she may also want to create catalog entries for documents that are not
available in electronic form. There will be no content for these documents,
just attributes.

Relevant requirements and/or protocol features: 11 (Attributes).

4. Scenarios Directly Related to Forthcoming
DAV RFC

[ This section contains scenarios directly related to the current
draft of the forthcoming RFC on distributed authoring and versioning. Eventually,
these scenarios will become the entire scenario document and will replace
scenarios in the other sections. For now, they have been included separately.
Most of this section is taken directly from Del Jensen's (Novell) message
to the DAV mailing list; scenario notes are his. OL ]

4.1. Scenarios for Transactions to OPEN a Document Container.

Scenario A: A person, agent or thing, PAT, requests that repository
R (a web, a DMS store, etc.) be opened. The server response to PAT establishes
context for R; for example, a list of R attributes and corresponding attribute
values, followed by a list cataloging the objects immediately subordinate
to R (folders, files, pages, whatever). Variation 1: PAT requests by location
(URL). Variation 2: PAT requests by identity (URI).

Scenario B: PAT requests that file F (containing document D)
be opened. The server response to PAT establishes context for F; for example
a "reference handle" for accessing the attributes and content
of F.

Scenario C: PAT opens folder S. In response, PAT receives context
for S. Just after PAT's OPEN request PAT2 initiates a MOVE of S.

Notes:

A semantic problem: how does PAT understand the object-context response
of the OPEN well enough to make use of it?The need to support URI's as well as URL's. We should keep a close
eye on the URI/URC work groups (see URI specification RFC1630, and see
also http://www.acl.lanl.gov/URI/uri.html).The issue of locking resources. In scenario C, suppose PAT opens S
in something like a "share deny none" mode. What might happen?
a) The server might reject PAT2's MOVE request. b) The server might honor
PAT2's MOVE request and "shadow" the old URL for S until there
is no pending operation or unresolved state with respect to S via the shadow
URL. c) The server might honor PAT2's MOVE request and do nothing about
pending operations or unresolved states with respect to S via the orphaned
URL.

4.2. Scenarios for Transactions to CLOSE a Document Container

Scenario A: PAT, having examined the list of container attributes
for folder S, uses an editing tool in order to change the value V1 of the
attribute A to V2. The new attribute value has local instantiation at the
remote host(s) which are providing an environment for PAT's editing tool.
The (server side) object S itself does not yet reflect V2 at A. Through
some action, either explicitly (such as requesting a "close"
transaction with S) or implicitly (such as ending the edit session) PAT
asks for closure with S. Variation 1: A second party PAT2 has meanwhile
requested to PUT a value to A. Variation 2: At the time of PATs CLOSE request,
PAT is disconnected from the network.

Scenario B: PAT has opened folder S and requested that all objects
in S not accessed within the last six months be deleted. Before the deletion
is complete, PAT requests closure with the repository R containing S.

Notes:

The problem of encountering a race condition is the explicit issue
raised by Scenario A. But there is also the implicit issue of providing
a common sematic space for PAT's editing environment and the server-side
DMS. In this case it would be nice if PAT's environment had lexicological
connection with A, i.e., could ascertain how the value of A is represented
(data type, range, etc.). Semantic problems such as these are often resolved
by promoting standard formats for the transport container. Will the work
group get involved with format issues?Scenario B illustrates an obvious closure issue, to wit: all ongoing
processes and unresolved state conditions that are artifacts of the interaction
between PAT, S and R must be "cleanly" terminated and resolved
before closure. Usually.

4.3. Scenarios for Transactions to DELETE a Document Container

Scenario A: PAT opens folder S and examines its content. PAT
decides to delete all non-folder objects in S, but is unsure if existing
folders subordinate to S have valuable content. PAT directs that all non-folder
objects in S be deleted.

Scenario B: PAT directs that folder S and all subordinate folders
and content be deleted. A document subordinate to S is currently open to
PAT2.

Scenario C: PAT directs that file F containing document D be
deleted. A copy process of D to some other repository is in progress.

Scenario D: PAT directs that all containers and related content
subordinate to folder S with content that has not been modified since a
given date (supplied by PAT or otherwise provided) be deleted. One or more
active documents in the repository reference a common header that is in
a file F subordinate to S. F meets the delete criterion.

Notes:

The delete might need to act within the context of query results on
container/content attributes as well as scope conditions on the store hierarchy.B and C show how "locking" might be a good thing.D illustrates how someone might wish to incorporate a "reference
count" attribute on linked objects, and desire that reference count
values be appropriately factored into the query/scope constraints for certain
kinds of transactions.

4.4. Scenarios for Transactions to UNDELETE a Document Container

Container S1 (subordinate to S) and all subordinate containers have
been deleted. PAT requests that container S3 and all subordinate objects
be undeleted, where S3 was subordinate to S2 which in turn was subordinate
to S1. Variation 1: The container structure is "plex", so that
S3 was also subordinate to Sk which was not subordinate to S1.

4.5. Scenarios for Transactions to COPY a Document Container.

Scenario A: PAT directs that folder S1 be copied to folder S2.
While the copy is in progress, PAT2 directs that S1 be moved to folder
S3.

Scenario B: PAT directs that a container Fbe copied to a location
outside the repository R. Although F contains only a simple text document,
the structure of F both as a logical and a physical entity is highly idiosyncratic,
being intimately bound to R. Consequently, F cannot be expressed in the
external domain. Variation 1: The DMS has export capability (to the external
file system) with a granularity that can resolve F. Variation 2: The document
contained by F has a native format corresponding to the tool used to generate
the document (HTML , WPD, etc.). In this case one could interpret the copy
as a transform from Fin the DMS domain to the native document format D
in the external domain. Variation 3: The container to be copied is folder-like,
i.e. a proper container, and the container hierarchy in R is compatible
with the external domain container hierarchy. In this case, some kind of
copy/transform could be implemented, with the understanding that container
attributes might be largely distorted or lost.

Notes:

Copying within R should be no big deal, though scenario 6a does illustrate
why one might desire some kind of "read-lock" mechanism. As scenario
B illustrates, copying container structure and content from one repository
to another can be problematical. For example: how does one, in general,
map a plex container model to a hierarchical model?

4.6. Scenarios for Transactions to MOVE a Document Container

Scenario A: PAT directs that folder S1 be moved to folder S2.
In the container hierarchy, S2 is subordinate to S1.

Scenario B: PAT directs that container S1 be moved to container
S2. There exists in web W a page P that is external to S which makes (forward)
reference (via URI) to one or more objects in S.

Notes:

Again we see in the second scenario why it might be desirable to support
the URI initiative.

4.7. Scenarios for Transactions to OPEN a Document

Scenario A: PAT requests that document D be opened. D is available
in English, German and Swedish, each using different word processors and
each with different revision histories.

Scenario B: PAT requests that document D be opened. D contains
links to headers, footers and graphical material. Variation 1: PAT's client
side environment is a browser. Variation 2: PAT's client side environment
is an editor.

Notes:

In both scenarios it is important that source entities have meta-data
identifying both the native (or "source") format (MS Word, Corel
WP, etc.) and format revision.Scenario B also illustrates the possible desirability of server-side
support for conversion of document source to a normal (canonical) form
(such as HTML/MIME) for viewer/browser support. A typical DMS might, upon
receipt of the OPEN request, retrieve the document meta-data and content
from the store and create a temporary file containing the document content
in its native format (such as Microsoft Word) on the system(s) hosting
the store. The DMS would then respond (via the server) with status, the
URL of the temporary file and the document meta-data (establishing context
for the document object). The client-side process might then issue a GET
request for either the source document (for editing), or the normal form
document (for viewing). Though one might expect that editing source implies
GETting source, one must not rule out the possibility of editing the (temporary)
source file in-situ (server side); editing server side in-situ is one plausible
approach to collaborative editing. While the Extension may not initially
support collaborative editing of a single document, the Extension architecture
should neither proscribe such functionality nor should it favor the adoption
of any one particular implementation architecture.

4.8. Scenarios for Document CHECK IN and CHECK OUT Transactions to
a Repository

PAT "checks out" a document D with an "intent to edit"
(i.e., a high probability that PAT will delete, add-to or change document
content or document meta-data). Variation 1: PAT wants exclusive editing
rights ("write lock") to D. PAT has no objection to letting others
view as it is edited. Variation 2: PAT wants exclusive editing rights D
and PATobjects to others viewing D as it is edited ("read/write lock").
Variation 3: PAT wants to edit a local copy of D with the intent to merge
and resolve conflicts later at "check in". Note that this case
accomodates editing "off-line" (disconnected mode). Variation
4: PAT is willing to engage in "free-for-all" editing, but wishes
to make it known to other potential editors that PATis entering/leaving
the melee.

4.9. Scenarios for Transactions to DELETE and UNDELETE Documents from
a Repository

PAT directs that page P and all subordinate objects be deleted from
web W. Pn is subordinate to Pk is subordinate to P, and both Pk and Pn
are in scope (i.e., in W). It so happens that Pn forward links to Pk. The
delete process DEL recursively chains down from P, eventually encountering
Pk, and asserts a "read lock" on Pk preparatory to deleting Pk.
Since Pk has subordinate links, DEL continues down the chain until it encounters
Pn, where it asserts a "read lock" and recursively chains forward
to Pk. DEL requests a "read lock" on Pk.

Notes:

Document deletions (like container deletions) can be subject to qualifying
conditions such as meeting query and scope criteria.Developers must be wary of deadlocks.

4.10. Scenarios for Transactions to GET Document Attributes and Values

PAT submits a list of document URIs with the request that the "subject/summary"
attribute value be returned for each document.

4.11. Scenarios for Transactions to PUT the Value of a Document Attribute

PAT requests that the value of attribute "subject/summary"
for document D be modified to correct an error.

5. Scenarios Involving Versioning

This section contains scenarios involving document versioning. Please
note that the three scenarios here actually form one long scenario.

[some of the versioning functionality could also be incorporated
into the scenarios in the previous sections; OL]

5.1. Two people trying to change the same document

A certain Web site is maintained by two people, both of whom make changes
on an ad hoc basis. As is frequently the case, there are a few documents
that are hot points of congestion, even between these two people. Both
people (we'll call them "Jane" and "Joe") have a fancy,
version-aware Web authoring tool that interacts with their Web server.

Joe downloads a document from the Web site, and decides that it needs
work. He clicks on the "edit" button from his browser/authoring
tool, and the tool reports two things: first, that the Web server has acknowledged
his edit operation (giving him assurance that a subsequent PUT will not
be a complete surprise to the server); second, that the document he will
edit is identical to that which he viewed. This may not always be the case:
sometimes the document viewed by users is not the true, editable source
of the document. But in this case it is. Joe proceeds to revamp the document.

Jane meanwhile is viewing the same document and realizes that in the
document the word "fuchsia" has a typo. Jane also clicks the
"edit" button, but the authoring tool has a lengthier report
for her: in addition to what Joe was told, Jane is told that Joe is also
working on the same document. Jane calls Joe and they reach an agreement:
Jane will make her fix now (because the error is embarrassing) and Joe
will make sure this alteration makes it into his revision.

Jane makes her changes and clicks the "save" button. Her authoring
tool prompts her for a brief description of her changes, and then the server
informs Jane that her change has resulted in a new, named revision of the
document, and that name is displayed.

Joe forgets what he was doing, and weeks later (while working on something
else) clicks the "what am I working on" button. In the long list
of documents that Joe has started to change is the document we've been
discussing, and Joe decides it is time to finish it off. He makes his final
edits, and clicks the "save" button. Joe, however, gets a message
indicating that what he edited is no longer the latest version of the document,
and Joe clicks the "merge" button. The authoring tool has the
latest and greatest merge mechanisms, and in the process of resolving Jane's
work with his he realizes that Jane did more than just fix the misspelling
she said she would. That doesn't matter, because the merge mechanism uses
actual differences, not verbally stated intentions.

Joe again clicks the "save" button, and this time he is prompted
for a description and his new version of the document is saved.

5.2. Revising a set of documents and publishing them when complete

Jane and Joe's version-aware web server is fairly simple: normally,
it serves up the latest revision of each document, but if instructed it
will instead serve up the revisions of documents as listed in a named configuration.
In this way, they can make their trivial changes and have them show up
immediately, but if they plan to make a heavy-duty overhaul they can save
the current set as a working configuration and tell the server to use those
until the work is complete (this can all be carried out without the explicit
knowledge of Jane and Joe's authoring tool, because the Web server makes
itself configurable via Web pages with forms on them).

Joe is about to make a set of minor changes, and to be on the safe side
tells the server to save the current configuration as "stable",
a name he uses for these occasions. He goes through the various documents,
clicking "edit" on any that he thinks are in need of updating.

Once again Joe forgets what he is doing, but a few days later the "what
am I working on" button again comes in handy. He realizes that his
work is about complete, and makes his final edits.

Joe's changes really are a coherent set that should appear simultaneously,
and he doesn't want to find out halfway through saving that Jane has made
changes that need merging, so he clicks the "Save All" button.
Fortunately, Jane has been busy viewing other parts of the web and
hasn't made any changes to their local Web pages, and so Joe is prompted
for a description of the changes he has made. Since Joe is saving all the
documents at once, a single description applies to all the changes. One
by one the new documents are saved, and in the end Joe gets confirmation
that all documents are in place. Joe browses the result and is satisfied
that their customers are seeing what he has just finished.

Joe goes on vacation.

5.3. Reverting the revised document set

Jane gets back to real work and realizes that every document that Joe
edited has the same old spelling problem. In a panic she calls Joe but
realizes that he is on vacation. Knowing that the errors would harm their
image, she decides to undo what Joe has done until he returns and can correct
his mistakes.

Jane begins by browsing the revision history of each document, and notes
that all the erroneous documents came about at the same time when Joe saved
his changes just before vacation.

Jane browses the configuration lists in the version-aware web server
and sees that Joe had made a "stable" configuration before his
latest work. Jane instructs the server to serve up only documents from
the "stable" configuration. As this doesn't involve changing
any of Joe's work, it is a quick fix to the pages on their public web server.
Jane now browses the documents on their server and is satisfied that they
are the precursors to Joe's latest change.

When Joe returns, he fixes his spelling mistakes and then tells the
server to resume using the latest documents.

6. Miscellanous Scenarios

This section contains scenarios relevant to distributed authoring which
do not fit in any of the preceding sections.

6.1. Printing a Multi-Resource Document

Browsing. A net surfer browsing the web loads the introductory
page for a book which has been written in HTML and subdivided so that there
is a separate resource for each chapter, and many side links to clarifying
text and standalone figures. Since the book is of interest, the net surfer
would like to print the entire document. Clicking on the "Print"
button of their web browser brings up the Print dialog box, which contains
an option, "Print multi-resource document," which they select,
before pressing the "Start Printing" button.

The browser now begins, in the background, to load all of the chapters
of the book along with their explanatory sidebars, sending them one by
one, in order, to the printer. When complete, the browser pops-up a dialog
box stating that the document has been completely printed.

Distributed Authoring. This scenario applies equally well to
a distributed authoring situation. If the author of a multi-resource document
is using a distributed authoring tool to write the document, it is desirable
for them to be able to print the document as a whole, rather than by loading
and printing each resource in turn.

Notes:

This type of printing capability is supported by the KMS hypertext
system, an early monolithic (but very feature-rich) hypertext environment.Another common example of a multi-resource document which would be
desirable to print as a whole is a slide presentation which has been converted
into HTML.

6.2. Quick Browsing of Related Resources

A professor is working on a new textbook using their favorite intranet-enabled
word processor, DistProc. Once the initial draft of this book is complete,
they use the "Publish" feature of DistProc to save their book
as multiple resources, one per chapter, on a web server. Since the author
intends for their students to read the text using web browsers employing
a DistProc reader plug-in, the professor has the book on the HTTP server
in DistProc native format, preserving layout information.

In order to provide additional browsing structure to the students, the
professor uses the feature of DistProc to automatically create links to
the table of contents, index, and glossary for the book. To make generating
feedback easier, all book chapters automatically have a link to a corrections
and feedback page. As the students are reading the text, these automatic
links are displayed as special toolbar icons in their browser.

Notes:

The AOLpress distributed authoring tool currently "allows pages
to add toolbar buttons on the fly using the HTML 3.2 "<link
rel ...>" tag. For example, your page can add toolbar buttons
that link to a home page, table of contents, index, glossary, copyright
page, next page, previous page, help page, higher level page, or a bookmark
in the document."The scenario above is currently unachievable because LINK tags are
only supported in HTML.

6.3. Others

[These scenarios are interesting, but I'm not sure where they belong;
OL]

Jane's department keeps its documents organized in hierarchical collections.
There is a collection called "Monthly Reports" with subcollections
for each month. There is also a collection called "Monthly Business
Letters" with subcollections for each month. The monthly reports are
used to derive the monthly business letters, so the monthly reports appear
in the appropriate "Monthly Business Letters" subcollections
as well. When Jane writes her monthly report, she puts it into Monthly
Reports/199608 and into Monthly Business Letters/199608. Only one copy
of the report should exist on the server, but it appears in both places
when users browse or search the collections.

The first time Jane's monthly report gets printed, it gets converted
to PostScript, which she wants to store on the server. Now there will be
two renditions of the same (version of the same) document from which she
can choose when she retrieves the document in the future. She also saves
the printing instructions (duplex, landscape, stapled, etc.) for the document,
which she may want to retrieve with the PostScript later.

7. References

[1] Jim Whitehead, 1996. "Requirements on
HTTP for Distributed Content Editing", Internet Draft, available as
http://ds.internic.net/internet-drafts/draft-whitehead-http-distreq-00.txt

Acknowledgements

The following people have contributed to this document by sending sample
scenarios and/or by commenting:

Eui-Suk Chung, Ericsson, euisuk@w3.orgDel Jensen, NovellDave Long, dave@sb.aol.comChristopher Seiwald, Perforce Software, seiwald@perforce.comJudith A. Slein, Xerox, slein@wrc.xerox.comJim Whitehead, UC Irvine, ejw@ics.uci.edu

Author's Address

Ora
Lassila

Nokia Research Center / Boston
3 Burlington Woods Drive, Suite #250
Burlington, MA 01803

Phone: +1 (617) 238-4908
Fax: +1 (617) 238-4949
E-Mail: lassila@w3.org

or

World Wide Web Consortium, MIT/LCS
545 Technology Square
Cambridge, MA 02139
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/redmond/agenda.html
##-----------------TITLE------------------------##
Agenda for the June, 1998 Interim WEBDAV Working Group Meeting, Redmond, WA
##------------------TEXT------------------------##
A G E N D A
Interim IETF WEBDAV Working Group Meeting
Microsoft Campus, Redmond, Washington
June 15-17, 1998


Monday, June 15

9:00 Introductions, agenda review
9:15 Review of working group status
9:35 Discussion of versioning and variant authoring requirements (J. Whitehead)
12:00 Lunch
1:00 Discussion of versioning protocol (J. Whitehead)
5:00 Adjourn for the day

Tuesday, June 16

9:00 Discussion of advanced collections requirements (J. Davis)
12:00 Lunch
1:00 Discussion of advanced collections protocol (J. Slein)
4:15 Experiences Implementing a WebDAV Server (J. Davis)
5:00 Adjourn for the day

Wednesday, June 17

9:00 Discussion of access control requirements/protocol
(L. Dusseault)
11:30 DASL meeting (A. Hopmann)
12:00 Lunch
1:00 DASL meeting (A. Hopmann)
4:00 Conclude meeting



Last modified: June 18, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orem/minutes.html
##-----------------TITLE------------------------##
Here are the meeting notes from the Orem meeting
##------------------TEXT------------------------##
WEBDAV Interim Working Group Meeting
Orem, Utah
July 14-15, 1997
 
A meeting of the WEBDAV working group took place July 14-15, 1997, in Orem, Utah, at the Novell campus.  The meeting took place over two full days, and was attended by 26 people.  Jim Whitehead was the Chair of the meeting, and Jon Radoff diligently recorded minutes for the entire meeting.  Steve Carter provided local arrangements, including meeting location and meals.  Information on the meeting, including the agenda, a list of attendees, presentations given at the meeting, and meeting minutes can be retrieved from URL <http://www.ics.uci.edu/~ejw/authoring/orem/>.
The purpose of the meeting was to conduct a detailed review of the protocol design, to discuss and resolve open issues in the requirements document, and to review open issues in the access control requirements document.  To this end, the first day the meeting had presentations on properties and locking followed by a presentation on requirements open issues.  The second day began with a presentation on collection and namespace operations in the morning, with presentations on versioning and access control in the afternoon.  The format used was a presentation, followed by a break and then a period for comments from the attendees.
*** Monday, July 14, 1997 ***
The meeting began with introductory remarks thanking Steve Carter and Novell for hosting the meeting.  Next was a review of the agenda, which was accepted without change.
PROPERTIES/METADATA
Yaron Goland gave a presentation on the design of metadata and properties in WebDAV.  The notes below roughly parallel the slide presentation, but tend to group notes from several slides together.  
Yaron began by noting that the term "property" is used instead of metadata, since "meta" is an abused word, making it practically meaningless due to its many divergent meanings.
Defining Properties

Data about data, e.g., source, author properties are lightweight pieces of  information, NOT FULL FLEDGED RESOURCES. 

- Properties are fairly small pieces of information, termed "small chunk" data
- "large chunk" data are not handled by properties. This information is "linked" to the resource it describes
- Name-value pairs
Problems with sending and retrieving properties with HTTP headers
- Too inefficient (many properties can be defined on a resource, and it would add to much of a burden to return all properties on every GET request)
- Properties can be fairly large, and span multiple lines.
Property Namespace
- Hierarchical namespace (considered in a previous WebDAV design) is expensive to implement, and raises issues with backward compatibility
- DAV namespace is flat; but this won't prohibit introducing a hierarchical namespace in the future 
- Names are URIs:
- URIs don't collide with anyone else
- URIs don't introduce a canonical set of properties - registration process
- example:
AIIM.Dublin.Author,
www.ietg.org/standards/dav/source
Property Values are XML Documents
- Standard structured data format
- This is a way to represent structured data 
- RDF is an alternative proposal
- purpose: schema definitions, data definitions, etc. 
- XML is based on SGML which has been "stable for ten years."
- Whereas SGML standard is documented in volumes; WebDAV XML is significantly simpler/shorter 
Property Attributes
- Hoping to pull this out.  Atrributes were initially considered for use in typing properties, but this is not needed due to the definition of XML elements.  This section of the draft can be considered historical.
Defined Attributes
- "Live" indicates that the property's syntax and semantics are enforced by the server. 
- "Read Only" indicates that the property can not be set by the client. This may come from the file system. May not be able to back-propagate this information.
Property Schemas and DAV Properties
- Schemas in the context of DAV properties are used to group related properties together for easy discovery.
There was a brief discussion on levels of compliance.  It was noted that there will be at least two levels of compliance - versioning or no versioning. One property (the "DAV" property) will tell you how much of the DAV protocol the server supports. Yaron noted that we want to have a compelling case for low-end systems. Don't want to require huge complicated systems to take advantage of DAV.
One flaw noted in the specification is there is a need to be able to discover whether a particular schema or property is supported.
Standard XML Elements for Properties
Prop - children (Propname, Propvalue) define property's name/value pairs 
Propname - contains the URI which is the name of the property 
Propvalue - Contains an XML document which is the value of the property
Date format will be whatever RDF defines. 
Property URL Scheme - Introduction
Since properties have similarities to full resources, it makes sense to be able to retrieve a property's value using the GET method, which requires that the property have a URI associated with it.  The proposal for adding a standard URI parameter called "DAV" to URLs, and then appending the property URI to the DAV parameter, was discussed.
Example:
";DAV/" segment
- The namespace to the right of the param is a path space. Just one entry
Due to relative URL handling, the URI appended to the end of the DAV parameter must not have "/" embedded within it.  The slashed can be URL escaped, but this raises a readability issue - URLs turn into %2f junk. The solution is to use an encoding mechanism:
- encase the URL in () and turn all / to ! 
Any prior ! will need to be URL encoded.
Issues:
- CGI scripts may be confused by the parameter 
- Conflict avoidance: DAV server discovery tells you that the DAV encoding will be properly supported. PEP may be another possibility (but "cure may be worse than disease") because it is too heavyweight.
- Because of the way the namespace is grabbed it can be pretty expensive to constantly be discovering
- Yaron G.: "99% of the time we are only creating or deleting a property. Copying a property is rare." 
Open issue - server controlled property namespace; users don't want to do discovery; perhaps should use an official "name mangling" space (as suggested by Fielding at Palo Alto meeting).
 
DAV Links
- Links associate one resource with another resource. 
- Links are implemented as DAV properties 
- Typing information is given by the name of the property 
- LINK/XML elements whcih define source/dest pairs 
DAV Links - Value
- http://www.ietg.org/standards/dav/Link contains two elements src and dst
 
Methods on DAV Properties
DELETE
- Deletes the property specified in the request-URI 
GET
- Returns the property specified in the request-URI 
- The request-URI http://foo;DAV/ will return all properties defined on a resource
- Issue: Is only the value returned or the complete resource returned?
PUT
- Issue as to whether this will be included.
POST is essentially undefined. You can never know what is inside it. You can't have consistent management.
PUT is the opposite of POST; if you PUT a string, you deliver an arbitrary stream of bytes which is returned verbatim when you do a GET.
- Problem is that value-added vendors will want to return data in a proprietary format.
- If PUT can't be used we will need something to create properties.
PROPPATCH
- Replaces PUT
- Atomically creates and deletes a number of properties in order to keep the resource in a consistent state.
- Transaction control is an issue -- see TIP (Transaction Internet Protocol)
- Other issue - separate functionality from implementation so that value-added vendors of "rich" DAV systems can operate as a module on top of a "big three" Web server vendor. 
PROPPATCH Implementation
- Supports creating or deleting a property. - no abiliy to modify part of a value.
- Proposal to remove restriction of ;DAV/ in URI when doing a PROPPATCH; this is a legacy of the old PATCH method.
Syntax
- Can contain any number of XML elements: create/remove
SEARCH
- Performs pattern matching search over the name and value spaces of the properties on a resource.
- Limited search is included in the body; may use AND/OR searches.
- Match-String performs an octet pattern match, * for zero-or more octet matches and ? for exactly one.
- NOT a be-all end-all search capability 
Q&A: 
Dennis Hamilton: When does the XML standard become implementable given that the WebDAV specification is currently referencing something unavailable?
Yaron Goland: The basis for XML, SGML, has been stable for 10 years.  Currently the main open XML issues affecting WebDAV are: a) incompatibility - colon in a property name; this is being changed, b) closing tags must be </tagname>, which is inefficient, using </> is another proposal under discussion.
Moving towards RDF, but DAV is not dependent on this.
 
Jim W.: Another issue is whether the namespace tag should be replaced by use of the HREF tag.
Yaron G.: We have two options. Option #1: Namespace as currently specified is perfectly valid XML.  Option #2: Use RDF if it is at a proposed-standard level by January.
 
Judy Slein: How long until XML becomes a W3C recommendation? 
Alex Hopmann: The core XML spec is stable, hasn't changed in awhile. Recommendation timeframe is unknown, but probably a few months. XML link spec is still being worked on. No substantial changes have been made to XML other than allowance of colon.
 
Dennis H.: How will value-added products integrate with DAV servers?
Yaron G.: You will be able to "Own" a namespace and take over the connection for a DAV namespace. Value-added implementations will probably occur via NSAPI, ISAPI and Apache module interfaces. There is no standard for interoperability of DAV value-added components with the Web serveer. 
 
Q: How do we prevent going through the back door and make a change to a property?
Yaron: Unless your administrator is a moron, this isn't an issue.
 
Judy S.: What is live versus read-only? There are at least three different concepts:
1. The server enforces some syntax rules about values.  This might apply to the case where the user provides a value and the server validates this value.
2. A property has a value that is only provided by the server. 
Yaron G.: Read-only just means you can't set the value through DAV.  Note that read-only doesn't have anything to do with access - it is just notes a property that can't be set. 
3. Non copyable versus copyable properties?
Yaron G.: Copying of properties is dealt with in another section.
 
Yaron G.: "Live" means that it is enforced. For example, if you move a resource from a server that supports versioning to a server that doesn't, you would not want to label the destination resource as supporting a "live" versioning property because it would not be enforced. You can never copy the value of a "live" property because this can only be generated by the server. 
Dennis H.: Live means that the server is an active participant in maintaining the integrity of the data for the property.
 
Q: Clarification - can you copy properties from one server to another and maintain the "live" status across?
Yaron: Absolutely. One of the things the specification supports is the copy failing if it doesn't support the target property.
 
At this point, the microphone was passed around the room to give everyone present a chance to comment on the properties design.  Issues raised in this way were recorded in a list which was presented on the screen.  Afterwards, there was some discussion of these issues.  In the minutes below, the issue and discussion are grouped together.
 
Is XML too heavy to scale?
Alex H.: It is pretty easy to parse.  Microsoft has a Java based parser which requires 280 lines of code to parse XML.  XML seemed like the best way to maintain a consistent schema for the data.
Discovery - why is it so hard to find out about properties?
;DAV/ to name a property and the introduction of  another updating scheme
Yaron: This is indeed evil.  It is very onerous to always go and ask the server for the URL for a property.
* Yaron: We need to address the URL encoding for property naming; this is broken and should be discussed. 
Why insistence on a flat property name space? 
Yaron G: Everyone is supporting a flat model with atomic updating.
How tightly are properties associated with the underlying resource?
Is SEARCH just "get properties?"
Yaron G.: Yes. Search is underspecified. There is too much to do in this area,to address it properly I am considering proposing an IETF WG just for search.
Any cases where we aren't covering properties for large-chunk data
Yaron G.: Links take care of what we need
With linked metadata, doesn't this require too many round-trips to retrieve the data?
Yaron G.: Yes, large chunk data is a pain. It will never be as nice as small chunk.  The designers were willing to make this trade-off to have something simple to use.
What about typed properties?
How are properties implemented via proxies? 
Yaron G.: HTTP Proxies shouldn't be doing things that are dependent on calculations on the server. If your property needs to be processed, don't send out the data as cacheable. The HTTP proxy mechanism is only used when you don't need a guarantee on the integrity of the data. 
Can you copy read-only properties between DAV implementations if they are live on both sides? Is live and read-only mutually exclusive? 
Yaron G.: Proposal - We need an explicit requirement that a dead property is not cacheable; or maybe that it is cacheable for a certain period of time. 
There was a general sentiment that the issue of caching of properties needed to be investigted further. 
 
LOCKS AND STATE TOKENS
 
Jim Whitehead next gave a presentation outlining locks and state tokens.
 
- Locking is used to arbitrate access to a resource among principals of equal access.
- Locking and access control are orthogonal 
- Two axes of locking support: exclusive vs. shared
exclusive: only owner can write to resource 
shared: more than one user can have the lock. 
- Only have a write lock
 
Resource Access:
Starting with everyone on the Internet
- A subset have access permission
- A subset of people with permission have a lock.
 
- Exclusive locks are too rigid - requires administrator to release
- Shared locks make it so many people can get access to the resource without holding up the entire group. 
 
Lock StateShared Lock Exclusive Lock
------------------------------------------------------ 
Nonetruetrue
Shared Locktruefalse
Exclusive Lock   falsefalse*
 
true = Lock may be granted
false = lock must not be granted
*=owner of lock may have lock regranted
 
* Q: Can you promote a shared lock to an exclusive lock? 
Yaron G.: We discussed this in the past and thought this would introduce compatibility problems.
Jim W.: This should be discussed further.
 
Required Support:
- A WEBDAV server is not required to support locking in any form because there are too many differences within implementations.
- If a server does support locking, it may choose to support any combination of exclusive and shared locks.  
* There is a need for a discovery mechanism so a client may determine what locking support is provided by the server.
 
LOCK Method
- Creates the lock specified by the Lock-Info header on the Request-URI
 
Yaron G. - Issue: Should the lock parameter be a URL?
There was some discussion at this point on the Owner header.  The owner header provides contact information for the owner of the lock.  This information is provided in addition to any authentication information which might be available, since authentication information does not always contain useful contact information. This raises a privacy concern, as people may not want to advertise that information, and hence there may be a need to be able to disable this mechanism.  There is also a security consideration, since some servers should not deliver this information to some users.
 
Time-out Header
- causes locks to go away at a predefined point in time.
- activity-based: timer set as soon as the lock is granted 
 
UNLOCK
Removes the lock identified by the state-token header from the Request-URI.
 
Write Lock
- The only defined access type.
- Prevents a principal from successfully modifying the resource
 
* Issue: The specification should be checked to see if a write lock request will fail on a property resource.
Q: What are the interactions between the setting of file system or database oriented locks and the WEBDAV locking mechanism?
There was a significant discussion concerning how locking of a container should be handled if it contains locked resources.  This led into a discussion of containment in general, with direct containment and referential containment being mentioned as the two classes of containment which are evident within the WebDAV specification.
* An issue was raised concerning how to reconcile access to resources via the WEBDAV mechanism versus outside mechanisms that may also change content (and hence may also be outside the scope of WEBDAV locks).
 
State Tokens:
Clarification: Entity tags are just a quoted string 
The client cannot create a lock token.
Conditional Token Headers
- If-State-Match
- If-None-State-Match
- OR capability was not needed for the If-None-State-Match header, but is needed for the If-State-Match header.
There was some discussion concerning the timeout header.  A question was raised on why the specification only uses seconds for the timeout period? What about different types of time periods.  Someone suggested using the ISO 8601 time format in the timeout header, and this format deals with partial seconds. Another suggestion was made to use absolute time values?  It was noted that it is totally up to the server to define the deltas between time headers.
Yaron G.: Another requirement that was added to the spec is that you need to send in the state token any time you manipulate a resource you locked.  This ensures that you really have the right to access it - for example, when two programs run by the same user attempt to access a lock.  For example, if Program B tries to lock a resource locked by Program A, it will immediately be rejected because the request won't have a state token.
At this point the microphone was passed around the room, and comments were noted.  Comments received, including subsequent discussion, are noted below:
- Timeout information
- Format of lock tokens
- Interactivity with access control
- Locking properties
- The spec should probably say that a server MAY allow a property to be locked. By default you are locking all of a resource's properties.
- Perhaps locking of containers should not be allowed.
- Should we require support of recursive locking within containers?
Three possibilities were noted: 
1. Don't require infinite depth recursion when locking a container
2. Do require a lock to recurse to the lowest level of a container – Con: it is expensive
3. Allow multiple types of containers – Con: don't want to support "negotiation".
 
There was wide sentiment that the whole containment model should be reviewed.
Q: How is the client supposed to know when to provide a lock token from a container when accessing a member?
Issue: Perhaps the state token format should use XML?
Q: What are the uniqueness properties of lock tokens?
Jim W.: Lock tokens are unique across space and time. (Maybe lock tokens should be unique across space and time for all types of lock tokens.)
Issue: should state tokens be subject to normal resource discovery? 
Possible proposal: State tokens are essentially identified as a normal property – in this case, we can use the standard URI format. The question was raised whether it possible to discover all of the locks that exist at a particular time on the server? 
There was some discussion on the interaction between locks and language variants.
Issue: When servers talk to each other why wouldn't one server assume a "client" state to talk to the other? Can we obtain a compilation list of all the locks that exist on a particular server? This would provide the ability of multiple WebDAV servers to subscribe to each other. 
The issue was raised on whether there should be access control on properties.  This discussion was deferred to the session on access control requirements.
There was a discussion on shared locks, and reservations. It was noted that shared locks work well as an advisory lock; vendors with a system based on advisory locks can expose their advisory lock functionality as a WEBDAV shared lock.  Yaron G. pointed out that a shared lock is a reservation. The basic purpose of the shared lock is to provide a way to find out who else is interested in the resource. It doesn't really enforce any functionality. The main purpose of the shared lock is to prevent someone from obtaining exclusive locks.
 
---
OPEN REQUIREMENTS ISSUES
 
Judith Slein gave a presentation and led discussion on open issues in the WebDAV requirements document.
 
- You need to be able to lock multiple resources atomically. [Poll mailing list to see if we should eliminate this requirement] 
- Keep requirement for nothing in WebDAV to preclude e-mail 
Internationalization
- Anything having to do with variants is eliminated - You need to be able to specify information in any language format into the property strings. We need to discuss how this will be done. 
Q: Is collation supported?
Yaron G.: No. In fact it is acceptable under the spec to return multiple responses to a particular property.
Reservations
Jim W.: Current locking capabilities essentially support reservations. 
Judy: Language should match; we'll fold reservations into locking. 
Jim W.: There will be a revised WebDAV Requirements draft next week.  Once this draft is out, there will be a working group last call on the draft, which will end after the Munich IETF meeting.  At this time, there will be a call for consensus on the requirements draft within the working group.  Assuming consensus is reached, the requirements draft will be submitted to the IESG for release as an Informational RFC.
 
*** Tuesday, July 15, 1997 ***
COLLECTIONS AND NAMESPACE OPERATIONS
 
The second day of the meeting began with a presentation and discussion on collections and namespace operations led by Jim Whitehead.
A container is somewhat analogous to a directory in a filesystem, but it isn't exactly like a directory because the Web is not a filesystem. A collections is a new type of web resource.
Members of a collection are: internal members, which have a URI which is relative to the base URI of the collection, or external members, which are have the sole restriction that they may not be relative to the base URI of the collection. 
- Propagate members have recursive method invocations propagated to them
- No-propagate members do not have method invocations propagated to them.
All internal members are by default propagate members. 
A collection may be viewed as a compound resource in which the collection is a container for a group of related resources. 
Propagation Model
- When you apply a method to a collection the method is propagated 
to all of the "propagate" members.
- Depth of propagation may be 0, 1 or infinity. 
(0=collection only, 1=all of the members but not collections contained in the collection, infinity=go until the bottom of the containment tree is reached)
 
MKCOL creates a new collection resource at a request URI. If Request-URI
exists, MKCOL fails.
- The server may make intermediate collection as it sees fit, for example, MKCOL http://server/a/b/c/ the server may create /a/ and /a/b/ and /c/.
 
INDEX returns a machine readable representation of the membership of the resource at Request-URI; for a collection, INDEX must return a machine readable list of its members. INDEX is undefined for non-collection resources – it may return a result, it may not.  INDEX returns an XML document listing the members of the collection. The results from INDEX are cacheable and should be accompanied by an ETag header for the INDEX entity body.
 
ADDREF
Adds the URI specified in the collection member header from the collection
specified by the Request URI.
Issue: what occurs if the collection resource is deleted? 
 
COPY
Creates a duplicate of the source resource. Must produce an exact octet-by-octet copy of the body of the resource. Alterations to the source resource do not modify the 
destination resource.  Copies are performed by value.
- A "duplicate properties" header controls whether properties should be duplicated during copies.
- An "enforce-live-properties" requires that the destination be capable of supporting the live properties.  If a property is not labeled as enforce-live-properties, and it cannot be copied live, the value must be duplicated in an identically named, dead resource on the destination resource. All dead properties should simply be an octet copy to new dead properties.
COPY for collections
- Copy recursively
- Depth header 0: indicates collection must duplicate all of its external members in a new collection at the destination. 
 
Dennis H.: the behavior is not recursively consistent which is weird. 
Jim W.: When overwrite is true, you essentially are deleting the destination collection and recreating a duplicate. When overwrite is false, you are really doing a merge.
Proposed: change semantics to MERGE because the COPY semantics are not recursively consistent.
 
RFC2068 METHODS
GET will return any human readable form of the collection.  The HEAD method is a GET method without the response body -- nothing needs to change. POST is undefined.
A PUT on a collection must fail, but the server may add a non-collection resource which is PUT to the controlled namespace of the collection to one or more collections. 
Yaron G.: GET does not need to work on a collection at all - there is no requirement for this.
Q: Is it automatic that a resource placed in a directory, e.g., with /a/ if you create /a/x then x is automatically added as an internal member of the collection?
Jim W.: This is a "may" requirement. The server is responsible for maintaining its own namespace.
Yaron G.: Internal members are always propagate. It is only optional for external members.
Yaron G.: With binary methods such as COPY and MOVE, only internal members can
be affected because of the hierarchical namespace. External members can only be affected by unary methods such as delete. Section 6.4 "DELETE for collections" needs to be revised to reflect that propagate links should be deleted. The main motivation for the propagate/non-propagate distinction was for the delete operation.
Point: it will take 2+n operations to atomically lock a group of resources because you first need to create a transient collection, then add references to the collection, then lock the collection.
On a depth 0 collection copy, then the links themselves are not copied, but on depth 1 copies they are.
At this point the microphone was passed around the room, and comments were recorded so they were visible on the screen in the front of the room.
- The distinction between propagate/non-propagate links gives the creator of the collection more power over the collection. Maybe we should eliminate this distinction?
- With DMA, we found that propagation semantics were very difficult to implement. We may want to avoid providing for propagation within DAV. 
- DMA has both direct and referential links. It would be nice if DAV supported the same containment models as DMA. 
- It should be simple to implement the collection within a DOS file system.
- Propagation semantics are of concern. We may want to eliminate this.
- We need collection semantics, but I could live with external references only. Don't propagate. 
- What is the means by which one populates level 0?
- It should be possible to completely populate a collection at the time of its creation.
- Collections yes, external references are helpful. 
- Inconsistency between different concepts of collections. 
- There should be a way to create collections and have methods that affect all the members of a collection.
 
After going around the room for comments, a straw poll of the participants was held.  The questions put before the group were: should collections capability be included within WebDAV, if yes, should the collection model include external members (referential containment), and should there be a distinction between internal and external members of a collection.  The results of this straw poll were:
- Collections: yes
- External references: yes
- Distinction between reference types: yes/no mix
 
Discussion compound document support: don't have any specific support; vendors can implement this using properties. 
Discussion concerning whether atomicity is important or not. 
Comment: If we support the flat namespace with collections that have internal members, then we should change the spec so that implementations MUST support that if you add something to the underlying directory it will automatically be added to the collection. 
---
VERSIONING
 
Jim Whitehead gave a presentation on a proposal for versioning support for WebDAV.
Version object data model: each version of a resource is itself a separate resource, with its own URI.
Version history collection: a subtype of the WEBDAV collection type, contains a graph of the document.  Members of a version history collection have links to the version history collection and comments information stored in properties.
INDEX returns the predecessor, successor, root, comments, defaultpublished and versionid for each member, in addition to normal INDEX information for each entry.
Yaron G.: Doesn't this create a potential bottleneck for retrieving a successor? 
Jim W.: Getting a successor is an infrequent operation, so a 2-hop operation shouldn't be a problem.
 
GET on a version history collection must return the default published version, if one exists.
CREATE method
- Mechanism that adds a resource to a version history collection. The Request-URI on a CREATE is the version history collection. If the VersionID header is present in the request, CREATE may set the VersionID for the new resource to that value. A resource made by CREATE cannot be modified 
ISSUE: We need to discuss whether we should support non-linear branching or only linear branching. This appears to be an important issue to document management companies.  There was some discussion about what were the compelling scenarios for non-linear versioning.  Bob P. mentioned that the majority of users of Continuus/CM use nonlinear versioning.
Consensus: Need to design in branch versioning from the start - versioning has a dependency on locking, yet locking is optional. Versioning is an optional component of WebDAV. There is a different between the most recent version and the most recent "published" version.  The protocol should make a clear distinction between these two.
 
ACCESS CONTROL
Jon Radoff gave a presentation on access control, discussing his preliminary access control requirements draft.  During his presentation, there was discussion on both the requirements, and the characteristics of a good solution to providing access control functionality. The HTML form of this presentation can be retrieved at www.novalink.com/ietf/access/present1.html
The following issues were identified:
- Do we want to base semantics on HTTP methods or on abstract permission constraints?
- Do we want to modify the internal resources that define an access policy?
- Is access control part of the base specification for WebDAV?
- Need to clarify access policies v. ACLs
- Should access control be its own working group?
- Point that we already have an ACL mechanism in place in the form of NT, Oracle databases, UNIX servers, etc. 
- Model should be reasonably abstract about how the server defines authorization; focus on associating constraints with a resource
- Identify what the minimum requirements are. 
-We need to allow authors to define access constraints for documents that they introduce. - It would be nice to look at what other document management systems support.

Consider allowing DAV implementations to control the identities of principals within an access group ("access policy").

After Jon Radoff's presentation, the meeting was adjourned.
*** End of meeting ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orlando/acl_breakout.html
##-----------------TITLE------------------------##
Breakout session on WebDAV Access Control, IETF-43, Dec. 9,
1998
##------------------TEXT------------------------##
Breakout session on WebDAV Access Control

IETF-43, Orlando, FloridaWednesday, December 9, starting at 15:30

A breakout session on access control for WebDAV was held on
Wednesday, December 9, 1998.  This was not a official meeting of the
WebDAV working group.  However, since the discussions are of general
interest to working group members, these minutes were taken to record
the discussion.  Jim Whitehead recorded the minutes, and attempted to
mediate floor control during the session.  In attendance during the
breakout session were: Jim Amsden, Derek Atkins, Ken Coar, Yaron
Goland, Paul Hill, Alex Hopmann, Manoj Kasichainula, Rohit Khare, Paul
Leach, Lisa Lippert, Larry Masinter, Judy Slein, Jim Whitehead.

SCOPE OF EFFORT: ACCESS CONTROL FOR WEB OR WEBDAV?

The first discussion concerned the scope of the access control
effort.  It was noted that the web in general, not just WebDAV, has a
need for a protocol for access control.  It was recommended that
WebDAV access control develop a model document, so that WebDAV access
control can be applied to other domains/protocols more easily.  The
model document can separate out those aspects of the access control
protocol which are not specifically tied to WebDAV.

** The attendees agreed that the access control effort should
attempt HTTP access control, as well as WebDAV access control, unless
it is proven to be too difficult to do both.  That is, the protocol
should use WebDAV mechanisms to set and read access control, but
access control should be applicable to HTTP operations in general, and
not just limited to WebDAV operations.

INTENDED USER OF THE PROTOCOL: ADMINISTRATORS OR AUTHORS?

There was some discussion over who is intended to be the user of
this protocol.  Is the access control protocol intended for users who
will be performing authoring, or is it intended for use by system
administrators, who are interested in access control across an entire
site.

INHERITANCE:

The topic of inheritance was discussed.  It was noted that the
access control inheritance within WebDAV is WebDAV-specific, since it
is tied to WebDAV collections.  However, Calendaring and Scheduling
has a different inheritance model.  A participant raised the question
of whether we should support multiple kinds of inheritance.  Today,
servers support multiple kinds of inheritance, and hence it would be
desirable for the protocol to accomodate these servers.  However, the
complexity of the user interface on the client is an important issue.
Supporting multiple inheritance models would make the user interface
on the client more complex, and, some argued, too complex.

There was a suggestion to examine the Java Web Server for lessons
which can be learned from its access control model, which is
object-oriented.

WEB-FORM MODEL FOR ACCESS CONTROL:

A short-term solution for access control is to have a property
recorded on each resource which records a link pointing to a Web page
which contains an access control form.  By manipulating the form using
a Web browser, a user can modify the access control for the resource.
This approach has the benefit that it can accomodate a wide range of
repositories, and each repository can have an access control user
interface which is tailored to the repository.  This approach can be
specified and fielded quickly.

The most significant drawback to this approach its lack of support
for a programatic interface to access control.  Furthermore, users
will be required to understand the access control mechanism for each
server they author against.  If the goal is to provide access control
for the Web, and not just for WebDAV, the Web-form approach has the
drawback that it depends on WebDAV properties, which are not
understood by downlevel Web clients.  However, if these clients
discover the Web-form page without reading a property, they could
manipulate the Web-form. Finally, the Web-form approach provides only
a coarse degree of interoperability.

However, it was noted that once a protocol for access control was
finished, the access control property might still be useful as an
"escape hatch" for more sophisticated access control capabilities.
However, if this were done, it would be necessary to call out which
functionality can be access via the Web-form interface, and which can
be accessed programatically.

Yaron Goland volunteered to write up a draft specification for the
Web-form approach.

GROUPS:

Groups were felt to be out of scope, since they are a (LDAP)
directory concept.  However, the Java Web Server supports a notion of
realms (HTTP realms).

MAPPING OF ACCESS CONTROL PROTOCOL TO REPOSITORY ACCESS CONTROL:

Access control for resources which are accessible via multiple
protocols, such as via HTTP and FTP, directly leads to this issue.
For resources which are accessible via multiple protocols, access
control via only one protocol is not a viable security model.  One way
to address this problem is to ensure that access control set via one
protocol actually sets the access control for the underlying
repository where the data is stored.  In this way, access control set
via one protocol will apply to all other protocols used to access the
same resource.

However, it is a difficult problem to map access control rights in
the protocol into the appropriate rights in the underlying
repository. The difficulty arises from the case where there is not a
1:1 mapping of rights from protocol to repository, which either leads
to unpredictable behavior (rejecting a request), or the inadvertent
opening of security holes (performing the request has unintended
side-effects). This concern applies to all network protocols, and is
not specific to the Web, or WebDAV.

The following "database cell" scenario was discussed during the
breakout session, and highlights this issue.  Assume there is a
database which is being accessed via WebDAV.  Each cell in the
database contains a PUT body and WebDAV properties.  The database has
a very simple "1 write bit" access control mechanism - when the write
bit is "1", you can write to the entire cell, and when the write bit
is "0", you cannot write to any of the cell's contents.  Assume the
WebDAV access control protocol has separate access rights for "write
properties" and "write (PUT) body".

The problem arises when trying to map the "write properties" access
control right into the rights supported by the repository.  If the
client submits a protocol request to grant it the "write properties"
right, the repository has two choices:

It can refuse to set the
write bit for the database cell, causing the protocol request to fail.
It can set the write bit, causing the protocol request to succeed.
This has the unintended consequence of allowing write access to the
PUT body as well, thus creating a security risk.


There are two general approaches for handling this issue:
Define a normative (generic) set of rights (e.g., the "DAV set" of
rights), some of which might not apply to a given server.  A client
then performs access control operations using this set of rights.
This approach is easiest for clients.
Discover the set of rights.  A client must first perform discovery
on the set of rights supported by the server, and then may perform
access control operations using these rights.


There was agreement that setting an access control right should not
result in unintended consequences, that is, consequences which are not
safe with respect to the underlying semantics of the store.

There was general agreement with the principle: in the event of a
conflict between the semantics of the underlying repository's access
control capabilities, and the semantics of a particular access control
protocol request, the underlying repository semantics should always
take precedence.  There was general recognition that some access
control protocol requests might not be mappable into the access
control operations supported by a given repository.

There was agreement that the mapping issue needs to be recorded -
these minutes are a start at that, though it should also be explicitly
discussed in the protocol document, and probably also the goals
document.

There was agreement that it would help discussion to know the
access control semantics for several repositories.

Finally, it was noted that IMAP access control should be examined
for lessons learned.  It's approach is similar to #2 above in that the
client first performs discovery, which returns sets of methods whose
access control can be modified as a set.

PROBLEMS WITH METHOD-BASED ACCESS CONTROL

There was discussion at the meeting on the use of method-based
access control, that is, access control where the access rights map
exactly to HTTP methods.  Several participants at the breakout felt
this approach is a bad idea.

This approach has the benefit that it maps exactly onto HTTP
methods, which have specific semantics.  Thus the exact outcome of
setting a given access control right is well understood by client and
server.  A protocol which adopts this approach would likely be more
simple to specify and implement than other alternatives.

The drawbacks to this approach become evident when examining
resources which are accessible via more than one protocol.  In this
case, HTTP methods might not map exactly onto operations available in
other protocols.  Furthermore, HTTP methods might not map exactly onto
the access control rights provided by the underlying repository.  Due
to this, clients would need to perform a trial-and-error style of
interaction when trying to set access control permissions, since
presumably the underlying store would reject attempts to set access
control permissions which would result in security risks due to
unintended side-effects.  The other drawback to method-based access
control is the difficulty of making a user-interface for the protocol.
The majority of users are not aware of the methods in the HTTP
protocol, and hence would be unable to set access control correctly
using a user interface which exposes the HTTP methods.

Most, but not all, participants at the breakout session felt that
an approach which defines "semantic" access rights (e.g., "modify",
"read", etc.) and then maps them into methods (e.g., "modify" -> PUT,
POST, PROPPATCH) is better than a method-only approach.

NEW WORKING GROUP FOR APPLICATION LAYER PROTOCOL ACCESS CONTROL:

There was some discussion on whether it would be better to have a
group working just on Web and WebDAV access control, or have a group
which tries to address access control across several application layer
protocols.  The advantage to addressing access control for several
protocols simultaneously is that the cross-protocol access control
issue would be substantively addressed.  This is important, because
many network resources are accessible via multiple protocols, such as
HTTP, FTP, news, mail, etc.  This would benefit administrators of
servers for these protocols.  It would also tend to build critical
mass for new application layer protocols to use this access control
protocol.

The disadvantage to having a cross-protocol access control effort
is its scope.  It may prove to be too complicated to address the
access control issues of several protocols simultaneously.

A cross-protocol access control effort would be expected to produce
the following deliverables:
a model document which is applicable across protocols
a set of transport-independent objects (possibly in XML) which are
exchanged to perform access control operations


*** End of Breakout Session ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sanjose/summary.html
##-----------------TITLE------------------------##
WEBDAV BOF Brief Summary
##------------------TEXT------------------------##
WEBDAV BOF Brief Summary

Chair: Jim Whitehead <ejw@ics.uci.edu>



The BOF on WWW Distributed Authoring and Versioning was held on
Wednesday, December 11, 1996, from 09:00-11:30, with 79 people in
attendance over the duration of the meeting.  Jim Whitehead
presented an overview and history of WWW Distributed Authoring and
Versioning, including information on how to become involved in the
work of the DAV group, which was followed by a detailed presentation on the
current DAV functionality requirements.  There was a lively discussion
on the requirements, including such issues as lock administration, use
of public key technology, access control models, the degree of
intelligence of "move" functionality, and recommendations of related
protocols and systems to investigate (such as AFS, IMAP, and ACAP for
their models of access control).  These issues will be discussed
further on our mailing list.  At the end of the session, the attendees
were polled on whether they thought it would be worthwhile for the
IETF to work on WWW Distributed Authoring and Versioning.
Overwhelmingly, the attendees thought the IETF should pursue work in
this area (the vast majority were in favor, with 2-3 opposed, and a
handful of abstentions).




Mailing list: <w3c-dist-auth@w3.org>
Archive: http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth/
Home page: http://www.ics.uci.edu/~ejw/authoring/
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/minneapolis01/meeting.htm
##-----------------TITLE------------------------##
March 22, 2001 WebDAV Working Group Meeting Notes - Minneapolis, MN,
IETF-50
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orlando/minutes.html
##-----------------TITLE------------------------##
WebDAV WG Minutes, Orlando, IETF-43, Dec. 10, 1998
##------------------TEXT------------------------##
WEBDAV WORKING GROUP

Meeting Minutes
IETF-43, Orlando, Florida
December 10, 1998


The WebDAV WG met on Thursday, December 10, 1998, from 1300-1500, with
42 people in attendance.  The meeting was chaired by Jim Whitehead,
and meeting notes were recorded by Rohit Khare.  Final minutes were
prepared by Jim Whitehead.

Three main topics were discussed: advanced collections goals and
protocol (<draft-ietf-webdav-collection-protocol-02> and
<draft-ietf-webdav-collection-reqts-03>), versioning
(<draft-ietf-webdav-versioning-00>), and issues from the distributed
authoring protocol (<draft-ietf-webdav-protocol-10>).  There was a
brief discussion at the end of the meeting on additional properties
(draft was not submitted in time for the meeting). Prior to the main
meeting, two informal breakout sessions were held on the topics of
Access Control and Advanced Collections.

Jim Whitehead began the meeting with an agenda overview.  He also
announced that the WebDAV Distributed Authoring protocol specification
was approved as a Proposed Standard by the IESG on November 25, 1998.

ADVANCED COLLECTIONS:

Judith Slein led discussion on Advanced Collections, discussing the
issues:
What mechanism should be used to disable the referential capabilities of
reference resources
Optional backpointers
Should it be possible to hide the target of a direct reference
Enforcement of referential integrity


Judith announced that Jim Davis's sandbox.xerox.com test server on
8080 has redirect and direct references working according to the
current protocol specification,
.

What mechanism should be used to disable the referential capabilities of reference resources:

Judith described a proposal from the advanced collections brekout
session to have a header, tentatively called "No-Passthrough", which
would disable the passing-through of method invocations to the target
of a direct reference, and the issuance of a 302 for a redirect
reference.

There was discussion on what happens if you send a No-Passthrough
header to a resource that's a hardcoded redirect - a 302 from the
server/CGI-script; rather than being a 'redirected reference'. In this
case, a client might find it difficult to disambiguate between the
hardcoded 302, and a redirect reference.  Due to this, a client might
expect the hardcoded 302 to respect the semantics of the No-Passthough
header, operating on the false idea that the hardcoded 302 was
actually a redirect resource.  The hardcoded 302 (especially those
from a downlevel CGI script) would very likely not respect the
semantics of the No-Passthrough header.  One possible solution is to
use the proposed Mandatory header (the Mandatory header lists other
headers which MUST be understood, or the method invocation fails).  It
was unclear how this would address the downlevel CGI script case,
which would presumably not understand the Mandatory header either.  It
was noted that a client can tell whether the 302 redirect it receives
is a 'normal' (hardcoded) 302, or a 302 from a redirect resource,
since the 302 response message from a redirect resource must contain
the Ref-Type header.  This allows a WebDAV-aware client to know what
kind of resource is causing the 302 response.

It was noted that the proposed No-Passthrough header needs to be
clear about the effect of the No-Passthrough header on non-redirect
references.

A working group member noted that we should be more precise about reference vs resource: in some sense, every URI is a redirect to an actual resource.  

This issue will be taken to the list for further discussion.

Optional backpointers:

Several working group members had problems with the optional
backpointers proposal.  One noted that if clients can't depend on the
backpointer property being there, and even if it is there, users can't
be sure what it means since there is no guarantee it contains all
backpointer references (since some references to this resource might
be located on other servers, hence outside the realm of control of the
server managing the resource which has the backpointer property).
Hence, this is not the business of DAV or a DAV client; this is what
(server-specific) live properties are for.

It was noted that if backpointers are an arbitrary property, there
won't be as much interoperabilty.  This was countered by noting there
isn't any interoperability in this scenario to begin with, due to the
fact the property might not be present, and might not contain all
possible backpointers.

One working group member suggested that the original rationale for
having backpointers was to use them as a mechanism for navigating to
the parents of a resource, especially when the containing collection
includes members which are not lexically/syntactically related to the
URL of the collection.  However, working group members disagreed with
this.

There was a suggestion that if anyone is going to provide
backpointer capability, it is important that we reserve a property
name which will be used for this, or preserve a name which is
reserved for future use.  There no support for this idea.  As another
working group member noted, there is no point to having standardized
properties in this case. If the property is optional and
server-specific, it can be interoperable and it can be handled in a
separate draft at later time and go to Proposed separately.

There was another suggestion to establish some principles about
what are the responsibilities of the client, the server, and the
repository.

Discussion of optional backpointers will be taken to the list. 

Should it be possible to hide the target of a direct reference:

There was brief discussion on whether it should be possible to hide
the target of a direct reference. One working group member seconded
the idea that this be handled as a security right, and not handled in
the advanced collections protocol.

Enforcement of referential integrity:

Discussion on referential integrity began by noting the following
scenario.  At creation time, it should be possible to suspend
referential integrity. This would allow you to create a template
collection of pointers and realize the contents later.

One working group member moved to strike all mention and discussion
of referential integrity.  However, another working group member noted
that their configuration management product does support strong and
weak references, and they will expose it on our own if not
standardized.  They would like to have interoperabilty with other
configuration management vendors. Another member noted that in their
document management system, they initially tried to enforce integrity
at the front end, but now the just warn the user, and do not provide
any back-end integrity.

Judith stated that she will start weekly phone calls on
Adv. Collections to bring these issues to resolution.  Jim, as chair,
stated that these discussions have been proceeding for too long and
he's looking for progress or hatchets.

VERSIONING:

Geoff Clemm led discussion on versioning.  He announced that a
versioning goals document will appear soon. During the meeting these
issues were discussed:

Data model for a versioned resource
Are checked-in resources mutable or immutable
Semantics of checkout
Use of lock as a mechanism for checkout


Data model for a versioned resource:

Geoff presented from hand-written slides.  His presentation was on
the data model of a versioned resource, and differed slightly from the
data model discussed at the versioning and variant authoring design
team meeting held a week before the IETF meeting.

Geoff's presentation, paraphrased in sentences is:

There is a resource under version control. A versioned resource is
a set of (or potentially a collection of) working resources. A working
resource supports the CHECKOUT operation, which returns a new working
resource.  A working resource supports a LABEL, which is a reference
to another working resource, which may take the value of "stable",
"current", "mine", etc.  A working resource also supports the CHECKIN
operation, which creates an immutable revision. A configuration has a
selection rule (perhaps an XML description) to describe a
configuration of working resources.

Working group discussion ensued.

A concern was raised about server limits.  Does the server have to
provide storage space for lots of client checkouts?  What are the
risks associated with rogue clients - could versioning be used as a
form of denial of service attack?  Geoff stated that there is an
implicit put/creation of working resources. But, the working resource
does not have to live on the same server - it could live in the
client until checked in.

Are checked-in resources mutable or immutable:

There was some discussion on terminology. One member asked about
the difference between a working resource, revisions, and resources.
Answer: there is a set of working resources associated to every
versioned resource.  Mutability is the base case; immutable checked-in
revisions are layered on top.  A revision is an immutable working
resource. Checking out a working resource to create a new working
resource takes a snapshot of the contents.

A concern was raised with this approach.  The advantage of thinking
of revisions and revisions-which-can-be-thawed (the
revisions-which-can-be-thawed approach was discussed at the design
team meeting - in this approach, a checked-in resource may be edited
if it supports the THAW method, and the client invokes THAW on the
checked-in resource) is that a versioning client would do a checkout,
perform their edits, then checkin.  There is a tradeoff between client
and server complexity.  Having resources be immutable by default, with
a thaw operation used to edit checked-in resources, would allow a
client to use the same interaction style for all versioned resources
(checkout, edit, checkin); now, it would need to do some repository
discovery to see whether it needs to perform a checkin operation.  It
was noted that if you only have mutabilty, the client can employ a
checkout-only protocol.  Another member noted that they have
scalability concerns - for their system, a checkout is a mutex
operation, and no one else can branch or checkin from there.

Use of lock as a mechanism for checkout:

There was a discussion on use of the LOCK method for performing
checkout/checkin capability, perhaps with a versioning lock.
Arguments in favor of this approach are the ability to reuse an
existing method, rather than creating new methods, which is asserted
to be more simple for clients to support, especially clients which
understand WebDAV, but do not understand the versioning
extensions. There was concern that we are not accomodating the
simplest kinds of clients.  It was noted that it is an explicit goal
of the versioning design team to accomodate "automatic versioning", or
versioning for HTTP/1.1 or WebDAV aware, but versioning unaware
clients.

The following locking capabilities are needed:
Locking a versioned resource as a whole. 
Locking a particular working resource.
Locking an entire branch (for branch-based CM)


Arguments against using LOCK for checkout and checkin operations:
Separation of concerns: the protocol is more simple by leaving locking alone.
Locking is optional and hence cannot be depended upon to be present.
When the design team explored using lock, the resulting protocol was complex, and added a lot of new headers. 
The lock approach does not scale up to handling configuration management. 
If all you want is temporary ability to write-protect, lock it; if you
want it PERMANENTLY write protected, another operation needs to be
used.


One working group member noted that there are certain versioning
clients that would be very displeased if revisions were
mutable. However, they suspect that most clients wouldn't care, and
would prefer the freeze-thaw approach vs. checkin/checkout approach.

Another member wanted a clarification of mutable
vs. immutable. They wondered whether immutable means the bit-pattern
is fixed for all time, or that administrators still have root-like
priviliges.  The sense of the working group was that they mean the
former (bit pattern is fixed for all time). Clients must be able to
depend on caching and repeatability of configurations.

Another working group member noted that HTTP has strong and weak
e-tags (bit-by-bit equality or usable-equivalent, respectively). It
would make some sense to support these semantics in the web authoring
protocol.

ISSUES FROM LIST DISCUSSION:

Jim Whitehead next led discussion on issues from the discussion
list.  Issues discussed were:

Issues for revising the document going to Draft Standard
Disambiguating between URI and URL 
Storing attributes submitted in XML properties
Namespace consistency


Issues for revising the document going to Draft Standard:

One working group member asked for formal interoperabilty testing
and continued tuning of the drafts as they progress from Proposed to
Draft Standard. Jim Whitehead stated that he is working on an HTTP
WG-style issues list, and sees this as his responsibilty as chair.

Jim also suggested that, based on email he has received, a mailing
list specifically for implementors seems to be a good idea.  Working
group members disagreed: in other groups, it's been strongly suggested
that reports from implementors should be kept on the main list.
Implementors will be encouraged to submit their interoperability
reports to the main list.

Another working group member suggested that the WebDAV working
group should develop a canonical test suite.  There was a lot of
disagreement - the IETF does not perform branding. There was a
suggestion to spin out the branding to another organization.

Jim Whitehead stated that he is in the planning stages for an
interoperability event in Feb/Mar 99.

Another working group member noted that client testing has its own
special set of concerns, and can be more difficult than server
testing.  Client testing takes lots of instrumentation, and may
introduce bugs into the client.  The HTTP model worked well, using the
bakeoff model with feature-by-feature pairwise testing.  Furthermore,
it is an IETF requirement to perform feature-by-feature tracking to
advance to Draft Standard.

Disambiguating between URI and URL:

It is believed that draft-ietf-webdav-protocol-10 now correctly
disambiguates between URI and URL, and uses them correctly.  Larry
Masinter noted that if you could find an implementation detail which
actually disambiguates URI vs URL, he would be very surprised indeed.

Storing attributes submitted in XML properties:

The specification is currently silent on the topic on what a server is
required to do with XML attributes submitted as part of a PROPPATCH
"add" request.  One working group member expressed quite strongly that
he feels the specification IS clear, that any XML element - which
includes attributes, must be stored.  Yaron Goland stated that the
spec was intended to be silent, as a compromise.  Another member
argued for storing the entire element, especially since there are
legitimate uses of XML attributes.  However, some repositories would
have to be changed to accomodate storage of XML attributes.  Yaron
Goland stated that WebDAV uses XML as a transport format, not for its
object model.  The use of attributes was not required.  Another member
noted that we should not define our own variant of XML for use in
properties.

This issue will be taken to the list for more discussion.

Namespace consistency:

One member noted that it is hard, on the face of it, to identify
the benefits of the namespace consistency requirements in
draft-ietf-webdav-protocol-10. The server has to work harder; what
efficiencies do clients rely on?  Others noted that without
consistency, our collection semantics fail.  This was rebutted: how
does that help? What is the utility of requiring namespace
consistency of collections? It was noted that some rationale was
provided on the list.

This discussion is being taken to the list.

COLLECTION PROPERTIES:

Lisa Lippert led a very brief discussion on a proposal that was not
submitted as an Internet-Draft before the Orlando IETF submission
deadline.

The proposal is to have a set of optional properties on collections,
these properties being:


hassubs / nosubs  - Does the collection have collections as children?
childcount - The number of members of the collection
reserved
ishidden - Is the resource hidden (like a "." file in Unix)
id
visiblecount - The number of visible members
defaultdocument
isfolder
isstructureddocument - The collection is modeling a compound document
objectcount

There was some concern over whether these properties were already
implemented.  The specter of "infinite implementation complexity" was
raised.

One member raised the issue of having an IANA registry of properties.  

*** Meeting Adjourned ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/la98/minutes.html
##-----------------TITLE------------------------##
Minutes, April, 1998 Los Angeles IETF WEBDAV Working Group Meeting
##------------------TEXT------------------------##
MINUTES
IETF WEBDAV Working Group Meeting
Los Angeles, CA IETFApril 2, 1998      


A WEBDAV WG meeting was held at the Los Angeles IETF, on April 2,
1998, with approximately 45 people in attendance.  Jim Whitehead
chaired the meeting, Rohit Khare, Del Jensen, and Jim Davis were
notetakers. Final minutes were prepared by Jim Whitehead from these
notes. The meeting began with a review of the agenda, followed by a
presentation on WG status by Jim Whitehead. The WEBDAV Distributed
Authoring Protocol document will be revised based on comments from the
second working group last call, producing revision -08, and will be
sent to the IESG for Last Call and review as soon as the -08 draft is
in the Internet-Drafts directory. A WEBDAV interim working group
meeting will take place June 15-17, 1998, in Redmond, WA, to discuss
advanced collections functionality, versioning, and access
control. Many thanks to Yaron Goland and Microsoft for hosting this
meeting.

Following the WG status report, Keith Swenson,
<kswenson@netscape.com>,
<URL:
http://people.netscape.com/kswenson/http_workflow>, gave a brief
presentation on an HTTP-based workflow standardization effort that is
just starting up. The purpose of this effort is develop an
interoperability protocol for invoking and controlling an asynchronous
process via HTTP. Elements of the protocol include simple process
control (e.g., start, pause, resume), and the ability to start
external systems, such as a backup process. A key element of the
proposal is that it doesn't have to hold open a connection, since the
initial design idea is to start a process, receiving in return an
identifier URL for the process, which can then be used in subsequent
operations. There will be an initial open meeting for interested
participants on May 4, 5, 1998, in Costa Mesa, California. The group's
initial goal is to release a preliminary specification in six months.

After Keith's presentation, the question was asked, "How is this
different from telnet?" The reply was this protocol does not require
an open connection, and isn't intended to be a login-based
protocol. The siimilarity between this work and IPP was noted, since
IPP also uses HTTP, and isn't login-based.  Following this question,
there was brief discussion on the similarity between the notifications
being discussed in IPP, PIPR, and the notifications being discussed
for workflow support.

Jim Davis next led a discussion of the advanced collections
requirements document, and this discussion lasted for the remainder of
the session. The goals of the discussion were to generate shared
understanding, and hopefully consensus on the requirements (goals),
but not to do any design work. The presentation began with a review of
terminology, then launched into a step by step overview of each
requirement in the advanced collections requirements draft,
draft-ietf-webdav-acreq-01.txt. The notes below are organized by
requirement number.

A few questions were asked during the discussion which don't neatly
fit underneath an existing requirement.  These are:

Can one have a reference to a reference?
Can a reference have more than one target (e.g., this might be
useful in the context of content negotiation)?


Requirements-related discussion and outcome.  Agreement represents
the rough consensus of the attendees at the meeting, and this
consensus is provisional pending discussion on the mailing list.

Requirements for Referential Collection Members:

3.1.1 The same resource may be referenced by referential members of
multiple collections.

Agreed.

3.1.2 The same resource may be referenced by more than one referential
member of the same collection.

Agreed.

3.1.3 It is possible for the same resource to be an internal member of
a collection and also to be referenced by one or more referential
members of that same collection.

Agreed.

Requirement 3.1.3 sparked a discussion on circular
references. Specifically, should WebDAV allow, disallow, or be silent
about circular references? It was noted that a reference can point to
any other resource, including a collection. Early WebDAV drafts do
exempt servers from having to detect circular refereces.

3.1.4 Operations on a referential member do not affect the resource
it references.

Agreed.

Discussion of 3.1.4 led to one suggested new requirement:

N.1 Operations on a target do not affect the reference(s)

No consensus was recorded on this new requirement.

Requirement 3.1.4 also led to a discussion of preserving
referential integrity of references. Participants asked whether
deleting a referenced resource would result in deletion of the
reference.  Similarly for a move, would the reference be updated if
its destination were moved? It was noted that in the general case,
where the referred-to resource is on a different server, maintaining
referential integrity is impossible. However, some participants
expressed a desire for a reference whose integrity would be
guaranteed, even if that meant the server would limit the potential
destinations of the reference.  The two kinds of references were
called "strong" (integrity-enforced) and "weak" (no integrity
enforcement).

3.1.5 For any referential member of a collection, it is possible to
obtain the URI of the resource it references.

Agreed.

3.1.6 It is possible to add a referential member to a collection.

Agreed.

3.1.7 It is possible to remove a referential member from a collection.

Agreed.

3.1.8 It is possible for a referential member of a collection to
carry its own properties, distinct from those of the resource it
refers to.

An example of this is the author, or "who added" property.

Agreed.

3.1.9 A referential member of a collection also inherits the
properties of the resource it refers to.

There was wide opposition to this, on the following grounds:

Assuming that the properties are copied when the reference is
created, it is unclear what access rights to use when doing the
PROPFIND.  Documents and references have different access rights, 
and sometimes one is wider than the other.

After the properties are copied, the owner of the target resource
no longer has means to control access on the properties.

ACAP has had problems with 'inheritance'.

Referential members are like symbolic links.  But symbolic links
do not in general have the 'properties' of their target.  Their
owner, size, and date modified all differ.


In addition:

If the properties are copied, they could be become out of date
afterwards. In particular, one participant vehemently complained
that inherit-by-lookup is out since it requires one server to 
track another.


Another participant raised the question: isn't this easily
excisable -- since no other requirements build up on it, the minimum
set of requirements could exclude it safely.

3.1.10 A listing of the members of a collection shows both the
internal members and the referential members.

Agreed.

3.1.11 Servers are encouraged to maintain referential integrity for
referential members as far as possible, but are not required to do so.

No agreement.  This requirement led to a re-opening of the
integrity issues of 3.1.4. One participant noted that this requirement
is like a "should" maintain integrity, but isn't should too weak to be
useful? Some applications really care whether referential integrity
will be maintained. The issue of cross-server integrity maintenance
was raised, and what this implies for the scope of integrity
maintenance. The discussion led to the following requirement:

N.2 It is possible to request creation of a referential member that
the server will guarentee to have referentially integrity.

Some ideas on how this might be implemented were raised during the
discussion, and include using a header to inform the server to create
the reference only if it could guarantee the integrity. A property can
be used to query the integrity maintenance capabilities of the
reference.

There was agreement on this new requirement.

N.3 It is possible to discover whether or not a referential member
has such 'integrity protection'.

Proposed, but no agreement reached.  Needs discussion.

N.4 Is is possible to discover whether a resource is the target of
such a 'protected referential member'.

Proposed, but no agreement reached.  Needs discussion.

3.1.12 For any member of a collection, it is possible to discover
whether it is an internal or a referential member.

Agreed.

Requirements for Ordered Collections:

3.2.1 The ordering mechanism is sufficiently standardized that
different applications and servers can operate on the same ordering
without private agreement.

Agreed, with change in wording: "Ordering is sufficiently
standardized..." (i.e., remove "the" and "mechanism"), due to concern
over the word 'mechanism', and its precise meaning and implications.

3.2.2 The semantics of an ordering are discoverable.

Agreed, but only after much discussion. There was general concern
over the meaning of "ordering semantics", since it can be read pretty
broadly. There was discussion of proposals to replace "semantics" with
"operational characteristics" or with "ordering methodology", but in
the end the original wording prevailed. However, an action item was
recorded to discuss the meaning of "ordering semantics" on the list.

3.2.3 When a client requests a listing of the members of a
collection, it can specify the ordering to be applied, and the server
will apply that ordering to its response.

Agreed, with the addition that "The server may decline to support
the requested ordering".

3.2.4 It is possible to order the members of a collection in an
arbitrary way, not necessarily based on property values.

Agreed, with the word "arbitrary" changed to "client-specified".
One way we got into trouble here is that since the ordering might well
be stored in a property, it's hard to think of an ordering that is NOT
based on a property value.  Also, there was much sentiment that DASL
should support sorting on property values, and that orderings based on
property values alone should be left to DASL and not addressed here.

There were some dissenting comments which noted that this feature
should be optional, and not required.  Also, some parts of a server
may not be able to support ordering.

3.2.5 Internal and referential members may by intermixed in the
same ordering.

Agreed.

3.2.6 It is possible to impose multiple orderings on the same
collection.

No agreement.  No one at the meeting was able to propose a scenario
that actually requires more than one ordering.  The scenario in the
requirements document was discredited, on the claim that the two
instructors should instead each create their own collections, using
referential members, and impose the ordering they wished.

There was general agreement with a proposal to remove 3.2.6. As a
result of this change, 3.2.4 becomes a labeling issue, and there was
strong sentiment that 3.2.3 and 3.2.7 should be removed as well, since
this preserves a model where there are collections with preserved
order and DASL capability for sorting.  Furthermore, there was some
discussion about whether 3.2.8 should also be removed.

3.2.7 An ordering is not required to contain all members of the
collection.

No agreement, for the same reasons discussed in 3.2.6.

3.2.8 A collection member may belong to the same ordering more than once.

No agreement, for the same reasons discussed in 3.2.6.

3.2.9 It is possible to modify an existing ordering efficiently.

No agreement.  One participant noted that this seemed strange,
since it's like a "motherhood" statement.

There was significant participant uncertainty from the discussion
of 3.2.6 until the end of the session.

There was insufficient time to discuss the "Issues" from the
advanced collections requirements draft.

*** Meeting Adjourned ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sandiego/DAV-status-report.htm
##-----------------TITLE------------------------##
Advanced Status Reporting for WebDAV
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/minneapolis01/
##-----------------TITLE------------------------##
March 22, 2001 WEBDAV Working Group Meeting, Minneapolis, MN, IETF-50
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
IETF-50, Minneapolis, Minnesota
March 22, 2001      


A meeting of the WEBDAV
Working Group was held March 22, 2001 in Minneapolis, Minnesota,
as part of IETF-50.  Prior to this meeting, an unofficial breakout
session was held on the topic of moving RFC 2518 from Proposed
Standard to Draft Standard status (March 21).

Meeting Information


Agenda


Minutes (text)



Slides shown at the meeting:


Meeting slides - Jim Whitehead's slides
shown during the meeting (PowerPoint).



      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: April 9, 2001
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/paloalto/agenda.html
##-----------------TITLE------------------------##
WEBDAV Palo Alto Meeting Agenda
##------------------TEXT------------------------##
FINAL AGENDA

Technical Meeting of the Working Group
on Distributed Authoring and Versioning on the World Wide Web
(WEBDAV)

Xerox Palo Alto Research Center, Palo Alto, CA

November 14-15, 1996




November 14 (Thursday):


9AM - Introductions, floor control conventions, overview of agenda,
review of WG activities (J. Whitehead)


9:15AM - Presentation on NTT Versioning Proposal (K. Ota)


10:15AM - Break


10:30AM - Presentation on Goland/Whitehead DAV Proposal (Y. Goland)


12:00 Noon - Lunch


1:00PM - Consideration of design issues:

POST vs. methods

Attributes




3:00PM Break


5:00PM Adjourn


November 15 (Friday):


9:00AM - Review WG Charter, sponsorship by IETF or W3C, discuss
location and time for next meeting, discussion on RFC editor (J. Whitehead)


9:45AM Continue discussion of design issues:

Attributes

Containers





10:15AM Break


12:00 Noon - Lunch


12:30PM Discussion of Internet Printing Project, (C. Manros)


1:00PM - Continue discussion of design issues

Versioning

Relationships

Representation/Manipulation 

Content Negotiation





3:00PM Break


4:30PM Discussion of scope issues (M. Spreitzer) 


5:00PM Adjourn
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/irvine/agenda.html
##-----------------TITLE------------------------##
WEBDAV Irvine Meeting Agenda
##------------------TEXT------------------------##
FINAL AGENDA

Technical Meeting on World Wide Web Distributed Authoring
and Versioning (WEBDAV)

University of California, Irvine

January 27-28, 1997

Monday, January 27 (UCI Student Center, Emerald Bay A)

8:00AM Continental Breakfast
9:00AM Introductions
9:15AM Overview & discussion of Web Collections and Hierarchical Collections
- Y. Goland
11:15AM Overview & discussion of Link functionality - Y. Goland and
J. Whitehead

12 Noon Lunch

1:00PM Continuation of discussion on Link functionality - Y. Goland
and J. Whitehead
2:00PM Overview & discussion of Lock, Unlock - S. Carter
4:00PM Presentation on Email access to WEBDAV functionality - E. Stefferud
5:00PM Adjourn for the day

Tuesday, January 28 (UCI Student Center, Monarch Bay A)

8:00AM Continental Breakfast
9:00AM Overview & discussion of Versioning - J. Whitehead

12 Noon Lunch
12:30 (During lunch) Discussion of relationship between WEBDAV, W3C and
IETF

1:10PM Discussion of separation of specification
1:20PM Discussion of where to hold next meeting
1:30PM Overview & discussion of Copy, CopyHead, Move, MoveHead, Destroy,
Delete, Undelete- A. Faizi and D. Jensen
3:30PM Overview & discussion of schema negotiation and schema methods
proposal - Y. Goland
5:00PM Meeting Adjourned
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/la98/overview.html
##-----------------TITLE------------------------##
Overview, April, 1998 Los Angeles IETF WEBDAV Working Group Meeting
##------------------TEXT------------------------##
Overview
IETF WEBDAV Working Group Meeting
Los Angeles, CA IETF
April 2, 1998      



The WebDAV WG met Thursday, April 2, with approximately 45 people
in attendance.  Jim Whitehead began the meeting with a working group
status report, including an announcement that the next (-08) revision
of the WebDAV protocol specification will be sent to the IESG for Last
Call. There will be an interim WebDAV meeting June 15-17, in Redmond,
CA. Keith Swenson gave a brief overview of a standards effort he is
starting on Web-based workflow.  For the remainder of the meeting, Jim
Davis led a discussion on the Advanced Collections Requirements draft,
going through the requirements for external members and ordered
collections requirement by requirement.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/cambridge/
##-----------------TITLE------------------------##
Cambridge Meeting of Distributed Authoring and Versioning Working Group
##------------------TEXT------------------------##
Informal Technical Meeting on WWW Distributed Authoring and Versioning



MIT Faculty Club
Cambridge, Massachusetts



September 16, 1996




The second meeting of the

Working Group on Distributed Authoring on the World Wide Web
was held on September, 16, 1996, at the MIT Faculty Club,
Cambridge, Massachusetts.



Participants


Agenda


Minutes



Slides shown at the meeting:



Jim Whitehead, Informal Technical
Meeting on WWW Distributed Authoring and Versioning

Yaron Y. Goland, HTTP Versioning and
Distributed Authoring
	  



University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 04 Jun 1997
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/cambridge/minutes.html
##-----------------TITLE------------------------##
Meeting Minutes, Informal Technical Meeting on WWW Distributed
      Authoring and Versioning, Cambridge, Mass.
##------------------TEXT------------------------##
Minutes
      
Informal Technical Meeting on WWW Distributed Authoring
and Versioning

MIT Faculty Club, Cambridge, Mass.

September 16, 1996




An informal technical meeting on the subject of Distributed Authoring
and Versioning on the World Wide Web was held on September 16, 1996,
at the MIT Faculty Club, on the campus of the Massachusetts Institute
of Technology, Cambridge, Mass.  There were 19 attendees from the
following organizations: America Online, Apache Group, Dynamic
Diagrams, Harlequin, Microsoft, Massachusetts Institute of Technology,
Mortice Kern Systems, Open Group Research Institute, Novell, NTT Palo
Alto Labs, University of California, Irvine, World Wide Web
Consortium, and Xerox.  The attendees thank the World Wide Web
Consortium for graciously supplying the meeting site and food.  Many
thanks also go to Susan Hardy, W3C, for her help in arranging the
meeting.


These meeting minutes were recorded by Jim Whitehead.  The Chair of
the Meeting was Jim Whitehead.  These notes were not developed into
minutes until June, 1997, and were never approved by the attendees of
the meeting.  Thus, while every effort has been made to ensure these
notes reflect the activities which took place at this meeting, they
have not been subject to review, and hence may reflect the bias of the
recorder.


Introductory remarks by Jim Whitehead.


Presentation by Yaron Goland on an overview of Microsoft Distributed
Authoring and Versioning Requirements and draft implementation
ideas.


Described interest in subject. Microsoft is very interested in
following standards.


There are many distributed authoring and versioning tools available
today -- this is not new.


What people want for tomorrow: location independence, and collaboration.


Backwards compatibility is very important.  VSS team admits they
will not be able to give full backward compatibility to people
with only browsers.  Backawards compatibility leads to URL munging,
which is not desirable.


Need groups of functionality, so if you want versioning, use the
versioning functionality package of HTTP.


Attributes.  Need attributes, they're very powerful.  Need a registry
for the namespace -- perhaps have per-company (novell.*) registry.
Can do security, for example.


Directory URL.  URL ends with a slash.  Need directory infomation
in a standard format.  Interactions with other functions needs
to be discussed -- for example, DELETE should delete the directory,
and all files & directories below it.


File control for URLs - Copy, Delete, Get, Move, Put, Rename.
Issue of copying from one server to another is tricky, need for
many.


Need for byte ranges and insertions.  Don't want to change whole
file just for 10 byte insertion.


Word and Excel need locking, are "dead in the water"
without it, and with full [Full|Partial][Read|Write][Lock|Unlock]
capability. Locks need to be independent of other methods.


Checking out a directory -- should this be recursive?  Should
all operations on directories be recursive?  Attributes could
be powerful enough to implement check-out -- just store the person
who has checked out the file into an attribute.


Command comments -- the ability to add a string or URL to any
method.  Can be used for comments for checkin and checkout.


Server diff capability. Use VTML for returning a server-generated
diff between two files.  Want the server to be able to do a diff
-- for efficiency?


Merge - need to be able to specificy how to do this on either
the client or the server.


Search - requirements: wild card and regular expressions.  Don't
do this through URL munging -- do it with a new method.


Version identification -- requirement: URL independent.


Access control.  Needs to support group management.  Suggest the
formation of another group to address access control.  This could
cause a major interoperability problem.  All our work could be
for naught if access control is proprietary, but everything else
is open.


Stressed need to make separate specifications so companies can
pick them up or put them down, depending on whether they need
them.


Del Jensen: Working on server side diff for his product.  What
about different types?


Yaron Goland (YG): Can specify the type you want for the diff
coming back.


Steve Carter: Need to abstract the notion of directory away from
just a directory.  ODMA as an example.


YG: Word supports ODMA.


Need to discover where artifacts are.


Judith Slein (JS): Need ability to say "Show me everything
in the X collection."


Henrik Frystyk Nielsen (HN): Why do we need file operations? 
I don't see a clear need why they are needed.  For the first time
there's a naming scheme which is finally independent of the filesystem.


YG: Users want it to be able to aggregate their information into
hierarchies.  Can specify these capabilities as a PEP extension.


HN: Can simply specify relations between items, and this is used
to organize information.


YG: Users want this ability.  As a result, MS is going to implement
this capability.


Some discussion of interaction between names, versions, and caching.


Discussion of retrieving a named version of an entity.  Should
it be possible to get there directly, or via a history view, then
to the version itself.


Novell also needs direct access to a named version of an entity.


------


Presentation by Jim Whitehead on Distributed Authoring Requirements.


During the presentation, many comments on the requirements were
made:


- change "entity" to "resource" throughout
- there is a need to list relationships in addition to creating,
querying, and deleting them
- there is a need for a relationship discovery mechanism
- the terminology used to describe locks is inconsistent with
standard usage, and needs to be made consistent with standard
lock/transaction semantics
- a read lock should have the meaning that only the owner of the
lock may read the resource
- there needs to be a section describing lock combinations
- the server makes administrative policies about locks
- the section "Notification of Intention to Edit" needs
to be moved to the versioning requirements document
- in partial write, a note needs to be made that updates can be
small or large, and can extend past the end of the resource
- a question was raised whether support for move/rename capability
across servers would also be supported
- there is a need for a new requirement for server difference
functionality on a per media type basis, since it is cheaper than
performing two gets, especially for small changes.
- interactions with digitial signitures need to be explored
- a comparison with the DMA (AIIM) requirements would be worthwhile



------


Presentation by Jim Whitehead on the Group's Charter


Wording changes to the Charter were suggested.

------


Presentation by David Durand on Versioning Requirements


Discussion of overlapping requirements.  Notification of intention
to edit --> versioning.  Locking remains in distributed authoring.


Discussion of non-change of versions.  Problem is a version could
be accessed via more than one name.  How to specify the requirement
without basing it on a name.


Discussion of client interoperability.  Jim Whitehead (JW) thought
that the server should adapt to the clients.  Most others thought
that a client would adapt to the particular implementation offered
by a server.


Big discussion over backawards compatibility, and whether a version
should be specified in a URL.  Seemed to be consensus that there
does need to be support for non-version aware clients.


David Long (DL): Discussion of name of all versions of a resource
vs. name of individual versions sounds a lot like content negotiation.


Agreement on "deafult" or "tip".


Agreement on getting to pred/succ//root/default version of a document.


Remove timeouts on locks.  Wasn't perceived as very useful.


Discussion of delete vs. destroy.  Destroy is a common functionality.


Discussion of server diff -- need to get a diff of two objects
which are large, but which may have a small set of differences.


------


Discussion of Action Items:


Modify Distributed Authoring Requirements based on feedback and
put it out this week.


Revise the scenarios document this week.


Revise the Charter based on feedback from the meeting.


Revise the Versioning Requirements by two weeks from this Friday.


Scenarios of server-server activities should be submitted during
the week of Sept. 23-28.

*** Meeting Adjourned ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orlando/
##-----------------TITLE------------------------##
December 10, 1998 WEBDAV Working Group Meeting, Orlando IETF-43
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
IETF-43, Orlando, Florida
December 10, 1998      


A meeting of the WEBDAV
Working Group was held December 10, 1998 at the Hyatt Orlando,
as part of IETF-43.  Prior to this meeting, unofficial breakout
sessions were held on the topics of advanced collections (December 8)
and access control (December 9).

Meeting Information


Agenda


Minutes


Advanced Collections Breakout Notes


Access Control Breakout Notes


Slides shown at the meeting:



Geoff Clemm, Versioning



Judy Slein, WebDAV Advanced Collections



Jim Whitehead, Issues from Mailing List Discussion



Slides from the Advanced Collections Breakout



Judy Slein, Advanced Collections Breakout


      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: January 6, 1999
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/redmond/
##-----------------TITLE------------------------##
June, 1998 Interim WEBDAV Working Group Meeting, Redmond, WA
##------------------TEXT------------------------##
Interim IETF WEBDAV Working Group Meeting
Microsoft Campus, Redmond, Washington
Building 27, Cafe/2
June 15-17, 1998      


A meeting of the WEBDAV
Working Group was held June 15-17, 1998 at the campus of
Microsoft, in Redmond, Washington, in Building 27.  A half day meeting
also took place, devoted to discussion of 
DASL, DAV Searching and Locating.

Meeting Information


Agenda


Raw minutes taken by Rohit Khare


Pictures taken at the meeting by John Turner



Slides shown at the meeting:



Jim Whitehead, Agenda, Goals, Draft Status



Jim Whitehead, Versioning and Variant Authoring Requirements



Jim Whitehead, A Version and Variant Authoring Protocol



Jim Davis, WebDAV Advanced Collection Requirements



Judy Slein, WebDAV Collections Protocol



Lisa Dusseault, DAV ACLS (Access Control)


Local Information


Local Hotels


Maps and Directions (PDF)


Map of Microsoft Campus (JPEG)






      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: June 18, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/washington/minutes.html
##-----------------TITLE------------------------##
WEBDAV WG Washington IETF Minutes
##------------------TEXT------------------------##
WEBDAV WORKING GROUP
Meeting Minutes
Washington, DC IETF
December 8-9, 1997

The WEBDAV working group met two times at the Washington IETF meeting,
on Monday and Tuesday, December 8-9, 1997, and 78 people attended one
or both of the sessions. The chair was Jim Whitehead, and notes were
recorded by Alec Dun, Del Jensen, and Rohit Khare, then edited by Jim
Whitehead.

DASL MINI-BOF

The Monday session began with a mini-BOF on the topic of WEBDAV
searching and locating (DASL), led by Saveen Reddy. Saveen began by
presenting slides on the goals of searching and locating:

Efficient searching
Properties & content
Data model for resources
Query languages
Result set languages
Typing
Simple & complex properties
Effects on the HTTP + WebDAV protocol


Requirements
terms:
search criteria
result set
result record
search scope


criteria:
boolean expressions: and, or, not
relative comparators , !=, =
searches on content
variants
near operator


results
result record definition
standardization results format
paged search results


search qualifiers
scope: set of resources
depth: recursion
references: delegate the search


query language
simple query syntax
extensible syntax
query syntax discovery


misc
access control
internationalization



Attendees noted that there was overlap between the issues being
considered by LESSOR and DASL, as well as between the searching in
IMAP, LDAP, and ACAP and the searching proposed for
DASL. Specifically, it was suggested that search comparators be
leveraged from the Lessor group. Also, a note was made that reusing an
existing search syntax would be a good idea. A thread of discussion
investigated the interaction between DASL and LESSOR, asking whether
they should have separate or overlapping spheres of work. There was a
sentiment that DASL would be able to build upon the work of the LESSOR
group.

Saveen gave information on how to become involved in the working
group.  The mailing list is www-webdav-dasl@w3.org (send a message
with subject "subscribe" to www-webdav-dasl-request@w3.org), and the
web page for the working group is

http://www.ics.uci.edu/pub/ietf/dasl/.

Towards the end of the Monday session a participant asked to see the
proposed charter of the DASL working group.  Unfortunately, though a
proposed charter had been written, no slides were available with the
proposed charter.  During the Tuesday session, Saveen briefly
presented the charter.  The charter is also available via the DASL web
page.

At the end of the mini-BOF, a straw poll of the attendees found
substantial, but not unanimous, support for having a DASL working
group in the IETF.

WEBDAV WORKING GROUP MEETING

After the DASL mini-BOF, the WEBDAV session began with a status report
on the current documents being developed by the working group. This
discussion was led by Jim Whitehead, and the slides he presented can
be found at

http://www.ics.uci.edu/pub/ietf/webdav/washington/jim/.

DOCUMENT STATUS REVIEW

Requirements: Approved as Informational RFC, RFC number is still
pending.  Many thanks to Judith Slein for her hard work on this
document.

Distributed Authoring (DA) Protocol Specification: A schedule for
completion of this document was presented.  The chair announced that
there will be a working group last call on this document in January.

ACL Requirements Draft, ACL Protocol Draft: WebDAV ACL
issues are new, and not well understood.  Active participation from
the working group is strongly encouraged. Initial drafts of both
documents are now available.  Howard Palmer is the editor of the ACL
Requirements, and Paul Leach and Yaron Goland are the editors of the
ACL Protocol document.

Versioning Protocol Draft: Deferred to a later time
(proposed schedule outlined).  No objections voiced, but clarification
asked for time frame.  Several voiced concern that versioning be done
in a timely manner.

Tree (recursive operations) Document: This draft has been
merged into the DA protocol specification. No objections raised.

Scenarios Document: There was a call for volunteers to
become editor of this document, and bring it to completion. Walter
Houser volunteered.

ORDERED COLLECTIONS

A discussion of open issues in the distributed authoring protocol
specification took place during the remainder of the Monday session.
Jim began by presenting slides summarizing the discussion on the
mailing list. Functionality for ordered collections was discussed,
with debate centering on what kind of ordered collection support
should be provided, and whether the support should be mandatory given
the processing burden on servers.

Why have support for ordered collections?

Larry Masinter: It's not that ordered collections makes products
easier to build; it's that ordering is inherent, anytime there's
export, for example, there needs to be a generic way to traverse
it. Either of two protocols could work. BUT, if there's an order
property, PROPFIND should return them in that order.

Yaron Goland: Ordering can be useful in some scenarios, sure. The key
is, "should this feature be made mandatory?" As an implementor, most
servers don't want to be saddled with this feature.

LM: BUT, when you do a PROPFIND, it has to come back in SOME order --
can't you expect to do a PROPFIND twice and get the same ordered
response?

Paul Leach: I think you're making a *third* proposal: that there be
some consistent ordering (e.g. alphabetical).

LM: are there any implementations where order will NOT be consistent?
(YG: if it relates to disk defragmentation ordering...)

Someone: Shouldn't order be part of a query language, i.e. deferred to
DASL?

PL: does sound reasonable.

YG: In a base WebDAV implementation, the client does sorting, storage
into the order property; a DASL-enhanced one would do the sort on the
server.

LM: There is some natural order; the natural way an implementation
sends things back in a predictable way. BUT, if the ordering is not in
the spec, clients can't rely on it; clients that don't know the
server's BEST consistent ordering either have to spend time resorting
it, or have the server sort oddly.

Alex Hopmann: there are two cases: (1) clients care about ordering or
(2) client wants results returned in ordered fashion.  We need to
handle both cases and not preclude being able to get back in natural
(fast) order.

A thread of discussion centered on whether the client should maintain
the ordering (e.g., with an ordering property which it maintains), or
whether the server should maintain the ordering.

Someone: It is easy to devise a scenario where the client or the
server needs the resources in a specific order.  These are both valid
cases, so the protocol needs to provide a way to support both.

LM: The performance argument for ordered collections is that most
underlying storage will maintain an order.  If we don't provide a
consistent natural order, then we will reduce performance because we
will force clients to always do a search on a key.  We don't enable a
solution that works without requiring a search.

AH: If we have a consistent underlying order, what constraints based
on adds/deletes do you make?

LM: There should be a property whose value is used to persist the order.

PL: So if I have 100,000 item property and delete an entry, do I have
to reorder all the items?

LM: It doesn't matter, just remove that entry and you have a new order.

PL: This is very expensive, it will cost a lot to maintain this
property properly.  It's more complex than this.

Rob: We need 3 things, no order, client can request order, server can
provide order.

Someone: I agree that collections should have a natural order.  Does
not matter on order (alpha, etc).

PL: Slight correction, the natural ordering of a collection for any
given replica of a collection (e.g., a collection in a replicated
store) will vary from replica to replica.

No resolution was reached, discussion will continue on the list.
There was much sentiment in favor of creating a separate document to
address ordering, with some dissenters feeling the issue can be
brought to a speedy close on the mailing list.

There was a final correction (by Larry Masinter) to the presented
slides: The multipart/related MIME type is not ordered, however, the
multipart/mixed MIME type is ordered.  The multipart/alternative MIME
type can be considered to be ordered by quality.

SECURITY CONSIDERATIONS

Security considerations were discussed next, beginning with a slide
presentation reviewing open security issues.  Keith Moore noted that
WebDAV should review the security considerations in the HTTP
specification to ensure that no assumptions are broken when performing
document authoring.

A participant raised the question: why won't the area directors go
with Digest Authentication?

Keith Moore: (Thinking out loud) Hmmm.  Digest Authentication might be
acceptable since scaling isn't such an issue for authoring.  I'm a
little uneasy with the way passwords are handled on the server.  Are
all servers busted if a password is compromised on just one? (Paul
responds 'No' to this.  Keith continues.)  Gee, why not go with Digest
Authentication?  Why don't you guys run this past Jeff Schiller.  If
he buys it, so will I.

The group reached agreement that a) the security considerations from
HTTP/1.1 need to be reviewed to ensure they are unchanged for the
domain of distributed authoring, b) WEBDAV will mandate use of digest
authentication, c) for cases where greater security that an unencoded
session is needed, use of TLS will be recommended.

INDEX and RECURSIVE PROPFIND

Finally, the working group agreed with the decisions of the Design
Team that the INDEX method be removed in conjunction with adding
recursive capability to PROPFIND, and the PATCH method be moved to the
versioning specification.

ACCESS CONTROL

Access Control was the topic of the Tuesday WEBDAV session.  Howard
Palmer led discussion on WEBDAV access control by presenting a series
of slides highlighting design issues. These slides can be accessed at

http://www.ics.uci.edu/pub/ietf/webdav/washington/acl/.

One thread discussed the problem of underlying repositories having
access control schemes which vary (e.g., by operating system), the
difficulty of mapping different schemes into each other, and the
challenge this poses for WEBDAV access control.  Since potentially
many protocols can access the same resources (e.g., FTP and HTTP
access to the same resource), perhaps access control is best addressed
by a separate working group which considers cross-protocol access
control. However, Nick Shelness pointed out that for other working
groups which have addressed access control, the largest problems were
how ACLs are granted or denied in a single overall model.  Mark Day
discouraged spinning off a separate group to address access control,
opining that a WebDAV protocol without access control is not
sufficient for authoring. There was no disagreement with this
sentiment.

Nick Shelness: There are three options here: 1) don't address access
control at all, 2) since authoring implies identity and AC
specification, add that to the protocol, and 3) (the tar pit) is any
form of prescriptive access control.

Scott Lawrence: You can't get away from: 1) the real access control is
always going to trump DAV, 2) it will differ on different servers (by
OS, etc), 3) reflection (acting on the AC protocol) is important.

A link-based proposal was discussed, where each resource has a link to
an access control resource which contains an access control
specification, which can vary across underlying storage
repositories. This has the advantage that different underlying access
control mechanisms can be easily accommodated.  However, Yaron Goland
raised concerns about this due to user interface complexity.  For each
access control scheme supported, there may need to be a separate user
interface, and users find access control to be confusing as-is.

Finally, Paul Leach recounted an experience he had trying to map an
access control list mechanism into the Unix access control mechanism
supported by NFS.  He found it to be very tricky mapping from one to
the other, using an "impedance mismatch" analogy.

No consensus was reached (none was expected). Discussion on access
control will continue on the mailing list.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/memphis/agenda.html
##-----------------TITLE------------------------##
Agenda: WEBDAV WG Meeting at Memphis IETF
##------------------TEXT------------------------##
FINAL AGENDA

IETF WEBDAV Working Group Meeting

Memphis IETF Meeting

April 7, 1997




Introduction to WEBDAV

Introduction of Document Editors
Protocol - Del Jensen
	Requirements - Judith Slein
	Scenarios - Ora Lassila


Issues

Overview of issues from Design Team Meeting
	Locking
	    Versioning
	    Partial Write
	    Metadata
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/minneapolis/dav/
##-----------------TITLE------------------------##
March 17, 1999 WEBDAV Working Group Meeting, Minneapolis IETF-44
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
IETF-44, Minneapolis, Minnesota
March 17, 1999      


A meeting of the WEBDAV
Working Group was held March 17, 1999 in Minneapolis, Minnesota,
as part of IETF-44.  Prior to this meeting, an unofficial breakout
sessions were held on the topic of advanced collections (March 16).

Meeting Information


Agenda


Minutes



Slides shown at the meeting:



Judith Slein, WebDAV Advanced Collections



Jim Whitehead, WebDAV Property Registry




      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: April 2, 1999
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/minneapolis01/minutes.html
##-----------------TITLE------------------------##
Minutes, March 22, 2001 WebDAV Working Group Meeting, Minneapolis, MN, IETF-50
##------------------TEXT------------------------##
WEBDAV WORKING GROUP
Meeting Minutes
IETF-50, Minneapolis, MN
March 22, 2001

The WebDAV WG met on Thursday, March 22, 2001, from 0900-1130, with
approximately 25 people in attendance. The meeting was chaired by Jim
Whitehead, and meeting notes were recorded by John Stracke. Final
minutes were prepared by Jim Whitehead. Note that throughout the
meeting, brief notes and observations on the sense of the room on
various issues were recorded in a slide presentation that was
on-screen during the entire meeting. The final state of these slides
can be found at URL:
http://www.ics.uci.edu/pub/ietf/webdav/minneapolis01/meeting.htm

The meeting began with a brief discussion of the agenda:

Open issues in the ACL specification 
  Reviving DASL 
  Improved status reporting 
  Moving 2518 to Draft status 
  Process for moving forward 
    Discussion of issues list items 



ACL Spec open issues

Does a null resource have an ACL? 

Geoff Clemm: does this mean null or lock-null (two separate
questions). He pointed out that, if null resources exist and can be
PROPFOUND, then Depth: infinity becomes ridiculous. He also believes
that, for lock-null, it's cheap to add ACLs, but not necessarily
useful. John Stracke pointed out that it would be nice to be able to
take out a lock, set the ACL for non-world-readable, then create, so
that there's no window where the resource may be world-writable. Geoff
noted that her concerned about the complexity tradeoff. John pointed
out that, in his scenario, one could lock, create with an empty body,
set ACL, then write the real content. At this point, Geoff, Jim
Whitehead, and Eric Sedlar started talking about eliminating lock-null
resources altogether at Draft Standard; nobody objects. 

The consensus of the room was that lock-null resources do not
have an ACL.

Can an ldap: scheme URL be used for principal identifiers?

In past revisions of the ACL specification, principal identifiers
have always been http: scheme URLs; in San Diego, it was suggested
that ldap: scheme URLs could make sense, since they refer to
people. Jim Whitehead stated that this is a tradeoff between
functionality on client and on server; the current system requires the
DAV server to sync with LDAP server (if using LDAP), while the ldap:
scheme URLs require the client to access the LDAP server
directly. A compromise suggested on the list was to define the ldap-URL
property, which points to the principal's LDAP entry.

Larry Masinter asked: are we permitting https:? Why are we using
URLs, but not permitting all schemes?
Lisa Dusseault: if we don't support ldap: at all, are we
going to need to duplicate LDAP functionality in DAV?
Geoff: by having the DAV server do the mapping, we're exposing what we need (not
much) without requiring the client to know LDAP.
Lisa: "what we need" will probably grow, so we should support ldap-URL, to
make sure we have an escape hatch. 

Larry: what are these URLs actually used for?
Eric: accessing data about principals via PROPFIND; e.g., making a picklist for composing
an ACL.
Larry: OK, and you can't do PROPFIND on an ldap: URL, so
clients would have to support LDAP.
Geoff: all we want from the principal is grouping, display name, and username (for, e.g.,
Digest-Auth). 
John: can we require the DAV server to proxy for the
ldap: URLs? 
Geoff: but then we get about the same functionality as
the ldap-URL property.
Eric: we should get some implementation experience first; nobody's done this yet. 
Larry: maybe implementations should make it a config option? Different people will care differently about LDAP integration.

Geoff: the person who
proposed the ldap: property has agreed that the ldap-URL property
would meet his needs. 
Larry: This sounds odd -- what about other URL schemes
with similar uses?
Eric: I don't really see other such schemes being
commonly used; there's no good way to map between them.
Babu S*: two issues; one is permitting LDAP integration, and the other is
permitting everything-under-the-sun integration. 
Jim Whitehead stated that he doesn't like the property idea; permitting ldap: URLs would be good enough.
John: but what about LDAP schemas?
Larry: so require that the schema contain certain properties.
John: but, if we want to integrate with existing
directories, that won't work.
Walter Houser: tarpit. [missed some bits]
Geoff: ldap: URLs have interop problems (require clients to implement
too much); the ldap-URL property lets clients get at LDAP
data, but does not require them to do so. 
JimW: so that would let the DAV server be a gateway for just the DAV properties, but not
block the other information. How about alt-URL, with an alternate URL,
which may be ldap:? 
Geoff: OK; but how about a list? 
Eric: does 2518 permit non-http: URLs?
Geoff: yes, but we should strike that.
Eric: Why do we want to limit it like that?
Geoff: for interop; we put constraints on the protocol to improve interop by keeping it
simpler. 
Eric: but the client treats the principal URL as
non-dereferenceable; why does it care what the scheme is? 

Walter: what are we trying to answer here? 
JimW put up two questions: "should the URIs identifying principals be
limited to just http(s)?" and "should principal resources have an
optional property 'alternateURL' that can point off to, e.g., an LDAP
accessible network resource?".
Larry: wait a minute; 2518 says that the principal must be an HTTP resource. So, OK, the "any scheme" bit
is a hole. 
Geoff: server-side, non-HTTP resources is more
expensive.
Eric: client-side, exposing it as an HTTP resource is
supposed to make it easier for the client; but it doesn't, because it
requires the client to use the DAV server as an LDAP gateway.
Geoff: if we support non-HTTP, then the client may well not be able to get
those principals' data.
Eric: but the server isn't required to make
the principal resources respond to PROPFIND at all.
Geoff: but, if it does expose the data, it's supposed to do it via PROPFIND.
JimW: The worst-case with HTTP-only is not worse than the worst-case without;
but the best-case with is significantly better than best-case
without. [dropped some bits] 
Eric: we should note this as an open
issue. 
Geoff: at a minimum, we need to fix the inconsistency in 2518
("it's an HTTP resource" and "it may be any scheme"). 

JimW next tries to get a sense of the room on these
two questions. Larry says the first one strongly depends on context,
on how the spec gets written. JimW rewrites the question for clarity:
"What URI schemes should be allowed for identifying principals?" Options
listed:
http(s) only, or a URL that identifies a WebDAV principal
resource
limited set (http(s), ldap(s))
http(s) and others explicitly defined by additional specs (the first option was eventually merged into this one, since additional specs can always be written)
anything


Chris Kaler: how about making it an opaque URL,
and publishing Informational RFCs for how to work with different
schemes?
John: but we should really have some minimal set, that
clients can use.
Lisa: There must be some base level of capability that clients can
rely on, without having to implement various approaches for various
servers.
Eric: how about this: use anything, but servers SHOULD use
http(s), which is a privileged scheme that points to resources that
SHOULD have additional properties (JimW added this to the list of
options for the current question).
Eric states that he does not want to make the DAV server replicate data from the LDAP
server.
John: but, if you're using LDAP for authentication, then
you're doing that to some extent anyway.
Larry: what if you're using mailto: for principal URLs?
Eric: why would you do that?
Lisa: mailto: URLs are commonly used for Web services, so that you
have a single, verifiable, user ID across services.
Chris: what about privacy issues of exposing the user's real
name?
Geoff: well, but you can use access control (or just not expose
the data).
Eric: if you don't have the properties, then there's not
much point in making it an http: URL.
Geoff: agreed, so the second SHOULD is OK.

Larry: so what are these properties used for, anyway?
Geoff: well, they're used for display in the GUI; they might be
useful.
Larry: what about auth ID, though? How is it tied to auth
schemes?
Nobody can really remember a good reason to have it.
JimW: OK, so it seems like we have provisional sentiment to strike it. 
Eric: but what harm does it do? Nice for something like Unix's ls
-l.
Geoff: it's a potential security weakness (makes it easier
to mount a dictionary attack), recorded as such in our security
considerations; removing it would solve that.
John: maybe we did want it for something like ls -l,
where the username is the only way to find a user in the directory; if
we have the alternateURL property, then we've got that.
Geoff and JimW: agree.
Larry: doesn't want to reach conclusion yet; we should go
back and look at how clients actually use this stuff. 

JimW recording: provisionally (subject to the consensus
of the list), we can eliminate the authentication-id property. The
alternateURL property can cover many of the use cases envisioned for
authentication-id, and is safer. However, we should look for more use
cases.  

JimW recording: provisionally, the answer to the "what
URL schemes are permitted" is "use anything, but servers SHOULD use
http(s), which is a privileged scheme that points to resources that
SHOULD have additional properties".  

JimW recording: sense of the
room: we should have an alternateURL property.  Babu: we seem to be
using the terms interoperability and dependencies, and they're
probably interchangeable (inversely).  

Larry raised a general plea: he was sent with the mission to ask
that WebDAV and DeltaV and other specs do a better job than they do
now of dealing with interactions and failure cases. There are too many
cases where there are options whose purposes aren't well specified,
and people who guess differently run into trouble. The alternateURL
property is an example; what alternate information does it point to?
Eric replied that we could put in better use cases; some were removed
to keep the text pure, but the result is less clarity. Maybe there
should be a companion document describing these use cases. Geoff added
that there were problems with use cases in 2518, with people reading
use-case text as normative. Putting it in a clearly non-normative
companion document would help with this problem. Larry stated that
explanatory text is not as good as making the normative text more
precise, and Geoff agreed.

JimW recorded the need to provide information in the specification
on how a client might use the alternateURL, and what kind of schemes
might be used. 

MAY/SHOULD/MUST ACL properties be returned by an
allprop PROPIND? (None, some, all?)

The view on list is that PROPFIND allprop MUST NOT return any ACL
properties, since PROPFIND allprop is already too expensive, since the
server has to compute all the live properties, and "current user
privs" is very expensive to compute. No one in the room
disagreed.

Chris asked, how about striking allprop altogether?  Lisa replied
that it is too late, since there is at least one client that depends
on it.  Eric noted that it is useful for copying resources from server
to server. Geoff replied that a client can use propname to list all
the names, then retrieve all properties explicitly by name. JimW noted
that it might be possible to deprecate it in going to Draft Standard,
then strike it when going from Draft Standard to Standard; but we need
to look into it better. Didn't someone on the list give a rousing
defense of allprop?  Geoff replied, yes, but it was because he used
it, not because it was the only way; a slow transition wouldn't be so
hard on him. At a minimum, we can make sure that new specifications
state that their new live properties do not come back from
allprop. Larry warned the group to be wary about transitions. Geoff
added that, maybe, when deprecated, it can go down to "all dead
properties". There was some discussion on performance reasons not to
have PROPFIND return live properties. Larry notes that the performance
hit only occurs when PROPFIND allprop is used, and, if it's used, it's
because people want the functionality, and workarounds may be less
efficient. Room seems tentatively pleased with limiting PROPFIND
allprop to return only dead properties.

What is the purpose of the DAV:isprincipal property?

This issue was raised by Larry Masinter. JimW noted that this is a
workaround for the preferred way of expressing this information, which
is in the DAV:resourcetype property. However, one early implementation
(MS WebFolders) considers anything with a non-empty resourcetype to be
a collection, and displays them as collections in the Web Folders
UI. Geoff Clemm noted that a principal collection (a group?) is both a
collection and a principal. Larry then noted that WebFolders won't
display the correct icon anyway, since at present it will make a
principal look like a document. Geoff replied that if a principal
looks like a folder in the UI users will think they can add members to
it. There was a brief discussion over what a GET to a principal URL
returns; conclusion seems to be that we don't have any particular
reason to define it. There was agreement to explicitly note in the ACL
specification that GET on a principal resource is intentionally
undefined.

Eric: since we have different types that can be mixed together
(e.g., collection, principal, versioned), maybe we should be
using properties like DAV:isprincipal. These types aren't unitary
types; they're interfaces implemented by the resources. Discussion on
which way is best. Larry stated that it's a moral argument; either
punish the bad implementation or write the specification around
it. Geoff noted that what they did wasn't so terrible, after all. JimW
recorded the (weak) sense of the room to leave the DAV:isprincipal
property in place.

Reviving DASL 

There was a brief discussion on reviving the DAV Searching and Locating (DASL) protocol specification, which currently is in Internet-Draft form, and is not currently being worked on.

JimW asked:  
Who is interested in seeing it completed? Couple of people raised hands. 

  When should it be completed?  Larry noted that the people
  who want it are some of the same people who are working on ACLs and
  improved status reporting; let's not delay those. Eric added that
  there might be synergy with XML Query (XML Query does searching;
  DASL would limit it to particular directories, for example), so we
  should at least let XML Query people know DASL is coming. Lisa
  stated that XML Query isn't so great for searching properties (as
  DASL was focused on). Xythos has implemented it; what were the
  problems that held back the spec? JimW said that the biggest one was
  I18N (e.g., sorting, string matching); somebody needs to look at it
  in that light.  Might be able to refer to Unicode docs. Larry
  suggested that one path forward is to publish the existing DASL
  protocol specification as Experimental (with the added note that
  Xythos has implemented), so that people can try it; when we get time
  to work on it, then there'll be more experience with it. The sense
  of the room agreed that this was a good approach.

  Who is willing to work on it? This question was not asked after
  all.


Moving 2518 to Draft status

Four-part process: 
Resolve issue list items on mailing list 
    Goal: handle 2/week 
       Document solutions with pros/cons 
    
    Hold face-to-face interoperability b*ke-off 
    Flush out new issues 
       Develop test plan doc on mailing list 
       Aim for late May/early June.
    

  Develop an online form to gather initial implementation and testing data 
  Used successfully for HTTP/1.1 
    Can be done before the b*ke-off 

  Create a farm of significant server implementations for ongoing interop 
  testing 
  JimW can host and administer machines at UC Santa Cruz, but cannot 
    afford the machines/software. (Easier to put machines on open Internet at 
    university than in most companies.) Probably not beta software, though. 
    Donations needed. 

Walter asked whether it would it be useful for potential customers
to get the results of this testing? Larry noted that there are two
types of interop events. The first kind is closed, usually with
prerelease products, to get the products enhanced to be interoperable;
the second is interoperability demos at trade shows, once the vendors
know the results are good. We need the first before we can do the
second. Survey of the room: 4-5 people interested in attending the
b*ke-off. 

Advanced Status Reporting (ASR)

Lisa Dusseault next led a discussion on advanced status reporting
within WebDAV.  Lisa asked who has read the advanced status reporting
I-D? No hand raised. Lisa then stated, "Don't worry about it; it
hasn't changed significantly from the proposal, which people liked."
Larry noted (looking at the draft on his laptop) that the
Accept-Error: header looks like a general HTTP extension, and Lisa
agreed.  Larry then stated that "Accept-Error: text/xml" isn't
actually generic XML; it implies this specification's XML DTD. Maybe
it should be text/xml-rfcXXXX, or some such, so that some future Even
More Advanced Status Reporting can define its own format. Lisa replied
that, really, the spec is open, it just has to have a particular root
element. Geoff added that it would be pretty nasty to wind up creating
a new namespace of error type specs.  Eric suggested that we define an
XML namespace URI for this version.

JimW: why not just always send the ASR?
John: but then the existing clients don't have HTML to show to the user.
JimW: how about putting it in a header?
Lisa: not enough information.
JimW: what is the goal? Improve the message to the user, or enable better machine-comprehensible error handling? He says it's more for the user; e.g., 423 Locked can give
more information on what was locked and how.
Geoff: machine-comprehensible error handling does improve the message to the
user.
Lisa: the server could already send a more detailed HTML
message to the user; structuring it makes it possible for the UI to
assist the user in dealing with the error.
Larry: how about embedding XML in HTML?
Lisa: lots of people said that was too messy.
Larry: how about multipart/alternative?
Lisa: was considered, but bandwidth costs.
Larry: servers also have to worry about CPU cost of computing
the response.
Lisa: but servers aren't likely to implement ASR at all
unless they know the clients are asking for it. More discussion.
JimW: Accept-Error: means bandwidth costs, too, on every request.
Larry: investigate: can browsers accept multipart/alternative anyway? 

JimW: maybe we should narrow this down; add it to base WebDAV (for
better interoperability), but not expose it for general HTTP. Or even
just improve the specification of error cases, not necessarily bundle
up all the data into XML.

*** Meeting adjourned ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sandiego/
##-----------------TITLE------------------------##
December 13, 2000 WEBDAV Working Group Meeting, San Diego IETF-49
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
IETF-49, San Diego, California
December 13, 2000      


A meeting of the WEBDAV
Working Group was held December 13, 2000 at the Sheraton San Diego,
as part of IETF-49. 

Meeting Information


Agenda


Minutes



Slides shown at the meeting:



Lisa Dusseault, WebDAV Advanced Status Reporting


      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: January 4, 2001
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/minneapolis/dav/agenda.html
##-----------------TITLE------------------------##
Agenda, WebDAV WG Meeting, March 17, 1999, IETF-44, Minneapolis
Minnesota
##------------------TEXT------------------------##
A G E N D A
IETF WEBDAV Working Group Meeting
IETF-44, Minneapolis, Minnesota
March 17, 1999


Overview of DELTA-V BOF - Jim Amsden - 15 minutes

Advanced Collections - Judith Slein - 1 hour, 15 minutes

WebDAV Property Registry - Jim Whitehead - 15 minutes

Making Progress on Access Control - Jim Whitehead - 5 minutes
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/la98/
##-----------------TITLE------------------------##
April, 1998 Los Angeles IETF WEBDAV Working Group Meeting
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
Los Angeles, CA IETF
April 2, 1998      


A meeting of the WEBDAV
Working Group was held on April 2, 1998 at the Los Angeles, California
IETF meeting.  


Minutes


Brief Overview




Slides shown at the meeting:




Jim Whitehead, Agenda and Working Group Staus Report


Jim Davis, Advanced Collections Requirements

	
      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: April 23, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/oslo/advcol.htm
##-----------------TITLE------------------------##
Advanced Collections Review Oslo IETF
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/washington/
##-----------------TITLE------------------------##
Washington, DC WEBDAV Working Group Meeting
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
Washington, DC IETF
December 8-9, 1997      


A meeting of the WEBDAV
Working Group was held on December 8-9, 1997 at the Washington, DC
IETF meeting.  


Minutes


Brief Overview




Slides shown at the meeting:




Jim Whitehead, Agenda and Issue Overview Slides


Saveen Reddy, Distributed Authoring Searching and Locating (DASL)


Howard Palmer, Access Control Rerquirements

	
      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: January 4, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/chicago/overview.html
##-----------------TITLE------------------------##
August, 1998 WEBDAV Working Group Meeting, Chicago IETF
##------------------TEXT------------------------##
O V E R V I E W
IETF WEBDAV Working Group Meeting
Chicago IETF, Chicago, IL USA
August 27, 1998
      

The WebDAV working group held a meeting at the Chicago IETF on Thursday,
August 27, 1998, from 1PM to 3PM.  There were 55 people in attendace.  The
meeting was chaired by Jim Whitehead, and minutes were taken by Stephen
Martin, and John Stracke.  Jim Davis began the meeting by leading discussion
on Advanced Collections capability.  This discussion ran through the
Advanced Collections Requirements, followed by the Advanced Collections
Protocol.  The most significant comment concerned the need to clarify the
text to distinguish between a URL, a resource, and a reference.  Jim Davis
recorded several discussion points, which he will take to the discussion
list.

Lisa Lippert next led discussion on the Access Control requirements
document. Participants commented that the document needs to be clear on
whether the goal is to make an access control protocol which exactly maps to
the access control mechanisms of underlying repositories, or whether the
goal is to have an access control protocol which is WebDAV-specific, and
which will likely not map exactly to the access control mechanisms of many
repositories.  The sentiment in the room was to support the latter.

At this point, there was brief discussion of the mailing list
thread on "Hierarchical URLs and collections" which was
perceived to be the issue of whether the same chunk of persistent
state can be accessed via multiple URLs, and if so, whether the WebDAV
Distributed Authoring Protocol specification needs to set policy for
how to handle operations on these multi-URL chunks of state.
Discussion of this issue will continue on the list.

Chris Kaler finished the meeting by presenting a summary of the recent
Versioning and Variant Authoring Design Team meeting.  There was brief
discussion of whether it was OK for the Design Team to address automatic
versioning (versioning for downlevel clients), and simple configuration
management support (similar to CVS).  No dissent was raised for addressing
automatic versioning.  Some participants noted that the versioning protocol
might be useful even if it didn't address configuration management, but
didn't object to development along this path.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/munich/
##-----------------TITLE------------------------##
Munich IETF WEBDAV Working Group Meeting
##------------------TEXT------------------------##
Munich IETF WEBDAV Working Group Meeting


Munich Sheraton, Munich, Germany

August 11, 1997



 The purpose of this meeting was to introduce the design of the
properties, collections, and namespace operations aspects of the
protocol specification,

draft-ietf-webdav-protocol-01.txt.
Selected issues relating to properties and collections were presented
and discussed.


Agenda


Minutes


The following presentations were made at the meeting.


WEBDAV Design Overview, Jim Whitehead


WEBDAV Issues, Jim Whitehead





University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 03 Sep 1997
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/paloalto/minutes.html
##-----------------TITLE------------------------##
WEBDAV Palo Alto Meeting Minutes
##------------------TEXT------------------------##
Minutes

Technical Meeting of the Working Group on Distributed
Authoring and Versioning on the World Wide Web

Xerox PARC, Palo Alto, California

November 14-15, 1996




INTRODUCTION


The working group on Distributed Authoring and Versioning on the World
Wide Web (WEBDAV) held a meeting at Xerox PARC on November 14-15,
1996, in Palo Alto, California. There were 28 attendees from the
following organizations: America Online, AmerInd, Canon Info. Sys.,
Continuus, Dept. of Veterans Affairs, Microsoft, Mortice Kern Systems,
Netscape, Novell, NTT, Pure Atria, Saros/Filenet, SoftQuad, U.C.
Irvine, Web Tools Int'l, World Wide Web Consortium, and Xerox. The
working group thanks Larry Masinter, Xerox PARC for providing food and
meeting space as the host of this meeting. Further thanks go to Keith
Dawson, Pure Atria, for his meeting notes.



In the following message, a dash "-" denotes a meeting date, an
asterisk "*" represents an item of consensus, and and equals "="
denotes an action item.

UPCOMING MEETINGS


- The next meeting of the working group will be at the WEBDAV BOF
at the San Jose IETF meeting. The WEBDAV BOF is currently scheduled
for Wednesday, December 11, 1996, from 9:30 to 11:30AM.


- The following meeting will be held at U.C. Irvine, in late January 1997.
The WG agreed upon the dates January 23-24, but due to a UCI
scheduling conflict (the

Conference on Software Process Improvement, CoSPI),
these dates are not open.  The new meeting date is January 27-28, 1997.


- The W3C Symposium, Distributed Authoring:
Present and Future, will be held at the Sunnyvale Hilton Inn, December
4-5, 1996. For more details, consult:
http://www.w3.org/pub/WWW/Authoring961001/Call.html.

DAY 1 (Thursday, November 14)


The meeting began with a presentation by Kenji Ota, NTT on the NTT
versioning draft. This was followed by a presentation by Yaron Goland,
Microsoft, on the major design issues facing this group, as reflected
in v0.2 of the Goland/Whitehead draft.


Two issues were primarily considered for the remainder of the day,
POST vs. methods, and attributes.

POST vs. METHODS:


The discussion on POST vs. methods centered on whether the DAV
functionality should be specified by creating a special purpose MIME
type which is then sent to a server using the HTTP POST method, or
whether new HTTP methods should be created for this. In the POST
approach, the MIME type would specify the functionality (e.g.,
application/copy), whereas the method approach would use a new method
(e.g., COPY). Within the methods approach, there were two choices for
where to place request parameters: a) in new, method-specific headers,
or b) in the body of the request message.


* The group reached rough consensus that new DAV functionality
should be specified with new HTTP methods, with request parameters in
the message body. However, this was subject to the caveat that
existing HTTP/1.1 headers should be used where appropriate and
consistent with existing meaning and usage. Also, this design choice
was not meant to preclude the definition of new headers, if they are
the best design choice.

ATTRIBUTES:


Discussion of attributes spanned two days. Despite several hours
of discussion, the working group did not reach consensus on attribute
functionality. Key design issues for attributes are:

naming (e.g. URL munging?)
search/lookup
attribute discovery
one round-trip lookup of an attribute's value o is an attribute's
value a resource, a pointer to a resource, or part of a resource?
should attributes be versioned individually, or with the resource they
describe?



One common thread of discussion centered around how much indirection
should be provided when looking up attributes. One position held that
one round trip lookup of an attribute's value was necessary for
efficiency, which argues for a lookup directly returning the
attribute's value. Others held that, for generality, attributes could
hold a URL, which would point to the resource containing the
attribute's value. Yet another proposal suggested that a resource
would contain a LINK header pointing to an "attributes" resource,
which groups all attribute/value pairs. A URL munge on the URL of the
"attributes" resource (e.g., http://foo.bar.com/attrs?Author) would
return the value of the attribute (this approach was called, "a
license to munge," since the server provides the URL and thus
guarantees that it can be munged, much like imagemap URLs, without
concern for collision with other valid URLs).

However, there were some points of commonality amid the discussion. 


* Trying to develop a set of core attributes, such as the Dublin
Core, was considered to be a bad idea. Instead, a means should be
provided for using existing attribute sets, and for discovering which
attribute sets are being used to describe a resource.


* The LDAP search syntax (RFC 1959) is worth investigating for use
as an attribute search syntax.


= Due to the lack of consensus, the group decided to solicit
drafts describing attribute functionality for the Web. The deadline
for submission of attribute drafts to the working group list is Nov.
26. Authors of drafts are encouraged to submit their drafts as
Internet Drafts so they may be considered at the San Jose IETF
meeting.

NETSCAPE DRAFT


During the day, Jim Cunningham and Asad Faizi circulated paper copies
to all attendees of their draft on how to perform distributed
authoring and versioning functionality, titled "Distributed Authoring
and Versioning Protocol." The draft circulated was version 0.1. The
draft describes how to implement the Distributed Authoring and
Versioning requirements using methods. It is currently unclear how
open Netscape will be concerning this draft. Asad Faizi will be
working with Yaron Goland, Jim Whitehead, and Del Jensen to develop
subsequent working group drafts.

DAY 2 (Friday, November 15)


The second day began with a discussion of the sponsorship and
activities of this working group.

* The group unanimously decided to pursue a path of joint IETF and
W3C sponsorship.


= Jim Whitehead agreed to revise and submit the WG
Charter to the IETF Application Area Directors in hopes that the
WEBDAV group could be an official IETF working group by the San Jose
IETF meeting.


* The group agreed that all current drafts of the working group
should be submitted as Internet Drafts by the IETF deadline, November
26.


= The group continued to feel that further development and
refinement of the scenarios document was worthwhile, as a sanity check
on our final specification, as a good way for people to understand our
work, and to understand the rationale for our requirements. The
working group was instructed to provide feedback to Ora Lassila
 on the scenarios document. Ora should submit the
scenarios document by the Nov. 26 IETF deadline.


= The group agreed that merging the Distributed Authoring (Whitehead)
and the Versioning (Durand, Vitali) requirements documents was a good
idea. This way the group will produce one DAV spec., and one DAV
requirements document. Durand, Vitali, and Whitehead will work on
producing this merged document.

CONTAINERS


The following issues concerning containers were discussed: 


Should a container just be a resource with no special semantics, or should a container resource have special container-specific semantics (e.g. recursion through hierarchy levels). The group tended to think that container-specific semantics would be the most useful, but also more complicated.


It was discovered that there are situations where it is useful to
state whether you are operating on a resource as a resource, or on a
resource as a container. For example, if a container is a collection
of pointers to resources, then making a copy of the container is
similar to making a number of symbolic links (soft links) in a
filesystem. However, copying a container with container semantics
could cause a recursive copy of all the elements of the container,
making duplicates of all resources (hard links). This led to a
discussion of where the "switch" should be placed to specify what kind
of semantics are desired (opaque resource vs. container resource). It
was noted that filesystems have dealt with this issue. o The WebMap
specification was discussed as a potential format for container
resources. Unfortunately, the latest WebMap specification was not
available for thoughful consideration by the working group prior to
the meeting.


= Like attributes, the working group is encouraged to submit drafts on containers to the working group by the November 26, IETF deadline. 

VERSIONING


There was a long discussion on versioning. Members of the working
group expressed frustration that the v0.2 Goland/Whitehead draft did
not specify versioning capability in sufficient detail to evaluate it.
Some issues:


The terms, "checkout" and "checkin" as defined in the v0.2 spec.
overload the commonly understood meaning for these terms. It was
agreed that some other term (e.g., edit notification) would be used. o
Since different versioning systems have different definitions of the
meaning of checkout and checkin (e.g., for checkout: edit notification
plus write lock (RCS, SCCS) or edit notification only, no lock (CVS)),
the server should be able to implement whatever versioning style it
wishes, and the client must adapt to it. This raises the issue of how
to specify the checkout style used on a server in a manner the client
can understand.

There seem to be two main points of difference
between versioning styles: write lock vs. no lock, and object create
on checkout or checkin. All versioning styles appear to record the
owner of the checkout (i.e., a notification of intention to edit).  o
There was some discussion concerning whether versions of a resource
were resources, or were representations of a resource. The group
tended towards thinking that versions of a resource were themselves
resources. Delta storage mechanisms are not a major concern for this
group since they can be considered a server implementation issue.

There was one important point of consensus: 


* All versions of a resource should be addressable (i.e., have a unique URL) 

RELATIONS


There was a short discussion of the relationship model in the v0.2
spec. The group agreed that adding peer fields to LINK style
relationships was worth investigating further. There was some concern
that replicating the URL in the (rtoken, URL) peer pairs was not space
efficient.

REPRESENTATION/MANIPULATION


There was a discussion about the interaction between variants of a
resource, and versions of a resource. The group came to the conclusion
that containers, content negotiation and versions are all orthogonal.


* The group came to the consensus that variants can be versioned. 

 * There was also some discussion of whether method parameters
could be subject to content negotiation. HTTP does not allow the
Accept* request headers to be used for selection of the target of an
action (method); they can only be used for selection of the content of
the response message after the action is taken. As a result, the group
came to consensus that no use of content negotiation should be allowed
on the parameters of a method invocation.


There was also some discussion about the utility of allowing
remote editing of content negotiation information. However, this was
agreed to be pushed off into the next round of DAV activity.

RELATED DISCUSSION


Over lunch, Carl-Uno Manros discussed the work he is doing on the PWG,
Internet Printing Project (ipp).  Carl-Uno summarized the direction
being taken by this working group, and their desire to utilize HTTP
as their transfer protocol.


At the end of the day, Mike Spreitzer led a discussion on four
issues, which helped establish the boundaries of what should be
considered by the WebDAV working group:

 Database: A more direct mapping of database concepts into
the DAV protocol. Consensus: out of scope.

Proxy: Should DAV capabilities can accessible from proxies and the
origin server, or only the origin server. Consensus: minimal proxy
support, most operations must go to origin server.

Disconnected operation: To what degree should the DAV protocol
consider disconnected editing and operation. Consensus: much
disconnected operation is already possible, and more can be enabled by
allowing for queuing of requests, but the DAV group will assume that
such queueing only takes place within the client and not within
external proxies.

Distributed filesystem: it might be a good idea to consider the
related work on distributed filesystems. Some related systems are:
Coda, CMU; Ficus, UCLA; and Bayou, PARC.


*** Meeting Adjourned ***




University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/washington/overview.html
##-----------------TITLE------------------------##
Washington, DC WEBDAV Meeting Summary
##------------------TEXT------------------------##
WEBDAV Working Group Summary

The WEBDAV working group met two times at the Washington IETF meeting,
on Monday and Tuesday, December 8-9, 1997, and 78 people attended one
or both of the sessions.  The first session began with a mini-BOF on
the topic of WEBDAV searching and locating (DASL), which was led by
Saveen Reddy.  During this mini-BOF, the goals of the working group
were presented, and some discussion on the group took place.
Attendees notes that there was overlap between the issues being
considered by LESSOR and DASL, however there was some agreement that
DASL would be able to build upon the work of the LESSOR group.  At the
end of the mini-BOF, a poll of the attendees found substantial, but
not unanimous, support for having a DASL working group in the IETF.

After the DASl mini-BOF, the WEBDAV session begain with a status
report on the current documents being developed by the working group,
including the creation of a new versioning protocol specification, now
that the main protocol document is focused on distributed authoring
capability. During this status report, the chair announced that there
will be a working group last call on the distributed authoring
protocol document in January.

A discussion of open issues in the distributed authoring protocol
specification took place during the remainder of the session.
Functionality for ordered collections was discussed, with debate
centering on what kind of ordered collection support should be
provided, and whether the support should be mandatory given the
processing burden on servers.  No resolution was reached, discussion
will continue on the list.  Security considerations were discussed
next, and the group reached agreement that a) the security
considerations from HTTP/1.1 need to be reviewed to ensure they are
unchanged for the domain of distributed authoring, b) WEBDAV will
mandate use of digest authentication, c) for cases where greater
security that an unencoded session is needed, use TLS will be
recommended.  Finally, the working group agreed with the decisions of
the Design Team that the INDEX method be removed in conjunction with
adding recursive capability to PROPFIND, and the PATCH method be moved
to the versioning specification.

Access Control was the topic of the second WEBDAV session.  Howard
Palmer led discussion on WEBDAV access control by presenting a series
of slides highlighting design issues.  One thread discussed the
problem of underlying repositories having access control schemes which
vary (e.g., by operating system), the difficulty of mapping different
schemes into each other, and the challenge this poses for WEBDAV
access control.  No consensus was reached (none was expected) and
discussion on access control will continue on the mailing list.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/redmond/hotels.html
##-----------------TITLE------------------------##
Local Hotels, Redmond, WA Area
##------------------TEXT------------------------##
Local Hotel and Bed and Breakfast Lodging in Redmond, WA Area


HOTELS

Embassy Suites Hotel
3225 158th Ave. SE
Bellevue, WA 98008-6404
(425) 644-2500

Silver Cloud Inns
2122 152nd Ave. NE
Redmond, WA 98052-5520
(425) 746-8200

Doubletree
300 112th SE
Bellevue
(425) 455-1300

Hyatt Regency
NE 8th and Bellevue Way
Bellevue (~$225/night)
(425) 462-2626

Hilton Bellevue
100 112th NE
Bellevue (~$184/night)
(425) 455-3330

La Quinta
10530 NE Northup Way
Kirkland
(425) 828-6585

Best Western of Bellevue
11211 Main Street
Bellevue (~$99/night)
(425) 462-6600

The Residence Inn
14455 NE 29th Place
Bellevue
(425) 882-1222

BED AND BREAKFAST INNS

Bellevue Bed & Breakfast
830 100th Avenue
Bellevue
(425) 453-1048

Bridle Trails Bed & Breakfast
Bellevue
(425) 861-0700

Petersen Bed & Breakfast
10228 SE 8th Street
Bellevue
(425) 453-143?

Cottage Creek
Redmond
(425) 881-5606

Shumway Mansion Bed & Breakfast
11410-99th Place NE
Kirkland
(425) 823-2303

A Cascade View Bed & Breakfast
13425 NE 27th Street
Bellevue
(425) 883-7078
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/chicago/agenda.html
##-----------------TITLE------------------------##
Agenda for August, 1998 WEBDAV WG Meeting at Chicago IETF
##------------------TEXT------------------------##
A G E N D A
IETF WEBDAV Working Group Meeting
Chicago IETF, Chicago, IL USA
August 27, 1998


The meeting began at 13:00, and ended at 15:00.
13:00 Welcome, Agenda Review (J. Whitehead)
13:05 Advanced Collections Requirements and Protocol
(J. Davis)<draft-ietf-webdav-collection-reqts-02>
<draft-ietf-webdav-collection-protocol-01>

13:50 Access Control Goals (L. Lippert)
<draft-ietf-webdav-acl-reqts-00>

14:25 Brief discussion of "Hierarchical
URLs and Collections" thread from list (L. Masinter)

14:35 Versioning (C. Kaler)
Report on the Versioning and Variant Authoring Design Team meeting
held August 10-11, 1998.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sanmateo/SanMateo_exec.html
##-----------------TITLE------------------------##
Executive Summary of San Mateo Distributed Authoring Meeting
##------------------TEXT------------------------##
Distributed Authoring on the World Wide
Web Informal Working Group Meeting 



Executive Summary



On July, 10, 1996, an informal meeting of the Working Group on
Distributed Authoring on the World Wide Web (WWW) was held at
the offices of America Online (AOL) Productions in San Mateo,
California. There were 14 meeting participants, including members
of the Internet Engineering Task Force (IETF) HyperText Transfer
Protocol (HTTP) Working Group, the World Wide Web Consortium (W3C),
the document management community, software configuration management
companies, distributed web authoring tool vendors and researchers,
and the academic hypertext versioning community.  The main objective
of this meeting was to provide a forum where people interested
in fostering interoperability between distributed web authoring
applications could meet, exchange information about the current
state of the art and practice, identify key interoperability issues,
and formulate an agenda for achieving interoperability.



The meeting began with a presentation by Jim Whitehead, U.C. Irvine
on the history of distributed authoring on the WWW, on the purpose
of the distributed authoring working group, and on the purpose
of the Working Group on Versioning and Configuration Management
of World Wide Web Content.  Ron Fein, Microsoft, next gave a presentation
on collaborative authoring and WWW features in Microsoft Word.
 A presentation by Henrik Frystyk Nielsen, W3C, on distributed
authoring and his vision of a unified PUT model, finished the
morning session. The afternoon began with a presentation by Dave
Long, America Online, on AOLpress and AOLserver, which was followed
by a presentation by Andy Schulert, Microsoft, on FrontPage. 
Whitehead next led discussion on the goal of the working group,
the sponsorship of the working group, and criteria for completion.
 At the end of the day, the group discussed what they considered
to be key interoperability issues, and developed a list of activities
and deliverables to be produced by the working group.



Key Results


The working group adopted as its goal: Enable distributed
web authoring tools to be broadly interoperable.

Create a task-oriented list of scenarios which interoperable
distributed authoring tools should be able to perform.  Keith
Dawson, Atria, is the editor of this document.

Create a list which collates the "key functionality"
among AOLpress/AOLserver, FrontPage, Word, as well as other distributed
authoring tools.  Dave Long, America Online, is the editor of
this document.





The working group also identified some areas for future work:


Criteria for completion of the group's work were discussed,
and need to be clearly described in writing.

The working group was tentatively interested in seeking sponsorship
by the W3C. However, before the group is officially sponsored,
members needs to know the intellectual property rights implications
of such sponsorship.

There should be a reinvestigation of work previously performed
by Murray Maloney on standard LINK REL and REV tags.

There should be an investigation by the versioning and configuration
management group into the utility of entity tags (etags) for performing
versioning.





Detailed meeting notes, a list of participants, a final agenda
for the meeting, and slides from the meeting are available at
URL:


http://www.ics.uci.edu/~ejw/authoring/sanmateo/


Finally, the working group would like to thank Dave Long of America
Online for arranging the conference room at AOL Productions, and
for his in-meeting support.  Also deserving thanks are Ron Fein of
Microsoft, Henrik Frystyk Nielsen of W3C, Dave Long of America Online, and
Andy Schulert of Microsoft, for their insightful presentations, and
Dennis Hamilton of Xerox PARC, and Keith Dawson of Atria Software, for
their excellent notes, and to all participants for their thoughtful
discussion.





University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 13 Sep 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sandiego/agenda.html
##-----------------TITLE------------------------##
Agenda, WebDAV WG Meeting, December 13, 2000, IETF-49, San
Diego, California
##------------------TEXT------------------------##
A G E N D A
IETF WEBDAV Working Group Meeting
IETF-49, San Diego, California
December 13, 2000


5 minutes - agenda bashing, find notetaker

50 minutes - Open issues and review of Access Control
Eric Sedlar, Oracle Corporation
Geoff Clemm, Rational Software


25 minutes - Improved status reporting
Lisa Dusseault, Xythos


40 minutes - General-purpose WebDAV facilities in DeltaV
Jim Amsden, IBM
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sanmateo/Agenda.html
##-----------------TITLE------------------------##
San Mateo Distributed Authoring Meeting Agenda
##------------------TEXT------------------------##
Final Agenda

Morning (9:00 AM)

Introductions 

Overview of efforts to date on distributed authoring

Discussion of the direction and purpose of the working group

Review of current distributed web authoring systems and the
mechanisms they employ:

Ron Fein on collaborative web authoring in Microsoft Word

Henrik Frystyk on Amaya, PUT model

Dave Long on GNNpress/GNNserver

Andy Schulert on FrontPage






Afternoon (1:30 PM)

Identification of key areas in which existing systems are
unable to interoperate

Discussion of which key areas can be profitably addressed
by this working group, and a rough prioritization of the areas

Solicitation of volunteers for coordinating work on improving
interoperability in key areas

Development of criteria for evaluating the success of key
area work groups

Establishing timelines for action



Notes


As sometimes happens, aggressive schedules slip.  In the case
of this meeting, Dave Long and Andy Schulert actually gave their
presentations after lunch.  This resulted in a more compressed
time for discussion.  The topic of the working group's purpose
and sponsorship was revisited in the afternoon session, immediately
after the talks.





University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 23 Jul 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/minneapolis01/agenda.html
##-----------------TITLE------------------------##
Agenda, WebDAV WG Meeting, March 22, 2001, IETF-50, Minneapolis
Minnesota
##------------------TEXT------------------------##
A G E N D A
IETF WEBDAV Working Group Meeting
IETF-50, Minneapolis, Minnesota
March 22, 2001


Open Issues in the Access Control Protocol specification - Jim Whitehead

Reviving DASL - Jim Whitehead

Moving RFC 2518 to Draft Standard status - Jim Whitehead
Process for moving forward
Discussion of issues list items


Advanced Status Reporting - Lisa Dusseault
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sanmateo/Minutes_afternoon.html
##-----------------TITLE------------------------##
Detailed Minutes of San Mateo Distributed Authoring Meeting (Afternoon)
##------------------TEXT------------------------##
Afternoon (1:35 PM)

AOLpress and AOLserver - Long



Long started by informing everyone that GNNpress and GNNserver

are now known as AOLpress and AOLserver.



In AOLserver, the current version of resource is stored in the

file system, while the meta-data, indices, etc. are stored in

a database.



Long noted that people think of their web sites in terms of a

hierarchy, and hence it is disorienting for the server to place

a resource at a location other than the one specified by the user.



With regard to server-side includes and other dynamic content,

AOL has no strong solution for getting to the actual source. Their

current approach disallows editing a page with dynamic content.

 However, AOLpress users seem to be doing it anyway, although

it is not clear what mechanism they use. His recommendation for

how to get a document's source before server side includes processing

is to use content negotiation when requesting the source, and

asking for MIME type text/x-html-ssi.  Unfortunately, this approach

does not handle the case where the source is not HTML.



A discussion then ensued about pretty printing (canonicalizing)

the HTML written by an authoring tool.  There were some questions

about how much canonicalizing an authoring tool should attempt.

Long mentioned that AOL used to get grief from customers because

their tool automatically cleans up its HTML output, but they no

longer do, since the tool now additionally pretty-prints the HTML

source.  It appears that users perceive enough extra value in

the pretty-printing of the generated HTML that they are willing

to accept the cleanup.



Masinter: There are people who are claiming to do HTML authoring

who want their mail client and mail servers to send around marked-up

mail. They are using a kind of HTML that they make human readable

through operations such as centering HTML source text between

<CENTER> tags. 



Whitehead: Is there an interoperability concern with regard to

pretty printing? 



Long: Probably not. I would be happy if we just made it so that

everybody's client could do a PUT to everybody's server. That

would be the most basic form of interoperability -- everything

else is icing on the cake. 



Nielsen: The W3C could put up a playground where everyone could

test out the PUT interoperability of their authoring tools, so

long as we don't get into the test suite business. 



Long mentioned that the focus of his talk is not interoperability.

He followed Dan Connolly's suggestion to go through your system

and find out where you feel fuzzy and the least likely to be doing

something in the same way as everyone else.





Continuing his presentation, Long described how moving pages brings

up the issue of how to move relative links. Moving image files

is easy, because the IMG tag indicates the image is considered

part of the document, and should be moved. However, moving audio

files is not as easy because they are included via a A HREF tag,

which could refer to a close or distant resource.  The best solution

to this problem is to employ collections and move mini-webs. Unfortunately,

many beginning users do not use the AOLpress mini-web functionality.

Another solutions is to have a usage practice where relative URLs

are employed for references internal to a collection and external

URLs are used for references outside of it.





This led into a discussion on the semantics of



"/x/y" style relative URLs



I.e., they're not "../foo" or "http://.."







Current versioning implementation slide:



Long reported on a prototype effort to add versioning capability

to the AOLserver.  In this prototype, reads employ a "Content-Version"

header to retrieve a stated version of a resource. Writes provide

a "Derived-From" header so the server knows how to check-in

the version of the resource. The server prevents dirty writes.

 This implementation solves the "CREATE" problem (i.e.,

it does not need a separate CREATE method for the initial creation

of a resource, because specifying a null Derived-From header directs

the server to perform a resource creation).  Since this prototype

was completed, the header syntax has changed for HTTP 1.1. An

incomplete report on this is available at URL:



http://staff.navisoft.com/users/d/dave/w3cwd/wd-version-960128.htm



As an aside, Long mentioned that users really wanted to know if

they were going to overwrite a document.  This was accommodated

by providing a dialog box with "OK" and "Cancel"

options whenever a document was about to be overwritten.  This

required performing a HEAD operation on the resource before a

PUT could take place.



At this point there was a discussion of entity tags (Etags, an

opaque string which identifies a snapshot), and their potential

use in versioning.  Long believes entity tags are sufficient to

avoid lost updates. Masinter recommended as an action item the

review of entity tags to see if they are adequate for versioning.

 Nielsen stated that use of entity tags may have some interaction

with caching that would be undesirable.



Long continued his presentation by describing locking within AOLserver

and AOLpress. The AOLserver implements LOCK and UNLOCK methods.

 If a resource is currently locked, a "Locked-By" header

is returned stating who currently has the lock.  During an unlock,

if you have write permission on a resource, you can unlock it.

 If you do not have write permissions, a message is displayed

stating that the resource is currently locked, and by who. An

OPTIONS method is used to detect server support for locking.





Access Control slide:

users/groups (multiple membership)

METHOD URL (specific/inherited)

machine address (netmask)











It is possible to (allow, deny) a (user, group, netmask) for a

particular URL.



There is a forms based user interface for access control functionality.

There was a discussion of the value of this approach.  The main

benefit is that clients do not need to understand the content

of the forms, they just merely need to be able to put them up.







Versions slide:



Resource revisions are time stamped and saved.  Revisions are

accessed through a prefixed URL, with a time stamp in it.  Relative

links and images are resolved as of that revision's time stamp.







PUT vs. POST slide:



Long expressed his position that PUT is a much better method for

writing content than POST. PUT simplifies access control.  PUT

simplifies infrastructure such as caching proxies, gateways, etc.,

since it is ambiguous whether an arbitrary POST is transmitting

an order for a pizza or writing a resource.  There are also general-use

servers which are starting to support the PUT method.





Namespace methods slide:

DELETE (This is now supported in HTTP 1.1.)

MKDIR (In AOLpress they wanted to support a "Save As..."

dialog box, which includes a new directory option, since people

think of their web space as a file system.)

BROWSE (A method which looks at the contents of a directory.)











An example of the result of a BROWSE method is the return of an

application/x-navidir MIME type.





application/x-navidir



{MIME type} {name}



...



Dave then displayed a slide on the issue of whether we should

standardize Server API's.  As rationale for why this might be

desirable, Long mentioned that if, as an author, you need to do

something to the server for your pages, it would be nice to use

an existing API rather than talking to the site administrator

for every change. ISAPI was mentioned as a possibility.





Variants slide:

each variant has its own name (there is a need to standardize

the naming scheme)

does this apply to versioning as well?

Assigning variants to resources similar to access control











PICS support slide:

data-driven support for metadata systems







Should raters provide well-known URLs to forms-driven interfaces

for generators that produce rating-specific encodings?





Nielsen mentioned that the W3C has a tool where you can plug-in

a PICS rating system, and it pops up the correct buttons, sliders,

etc., and allows you to set the rating for a page.





Miscellany slide:

cross-server searching (WAIS, MARC, ...)

cross-vendor auto-linking? (Search the web, automatically

create links, or give choices of what you might want to link to).

better support for link checking.











A question was raised about redirecting URLs, and how to tell

if a resource has been permanently moved or only temporarily moved.



Brown: It would be useful to specify what is the guaranteed URL.



Masinter: You can register your URLs with the OCLC Persistent

URL Service at URL:



http://www.purl.org/



Nielsen: You can abstract the Web space from the file space by

having the server remap the resources that it owns. 

FrontPage - Schulert







Release 1.1 was shipped this Spring, and release 2.0 will be shipped

sometime this Fall.  Vermeer was bought in January by Microsoft.



FrontPage was a client-server web authoring tool from the beginning.

 Ideally, FrontPage wants to be server independent -- they do

not want to be in the server business, and would prefer to use

HTTP as the base upon which they build FrontPage.



When they first started development of FrontPage, using the POST

method was their only choice, since it was widely available on

existing servers.  They implemented an RPC-like mechanism on top

of POST.  There are somewhere between 20 and 30 entry points into

FrontPage using this RPC-like mechanism. FrontPage has three server

extensions executables, one for each of the three levels of access

control available.



During design, FrontPage was aimed more towards the mainstream

user, rather than the power user.  The design was approached as

a standard client-server development, where functionality was

placed on whichever side of the wire it most made sense.



The FrontPage server extensions include much functionality, such

as the ability to return a link map for the site, enhanced semantics

for some operations, and the ability to set access control from

the client.  It does not include all features of SSA client control.

There are capabilities for link repair, such as being able to

inform FrontPage that a given URL has changed, and having FrontPage

fix it in all of the pages on the server.  There is a bulk upload

(multi-resource at a time) capability.



FrontPage features webbots, which are objects that can be dropped

into HTML and which are active when a page is uploaded to the

server.  An example webbot is the "day last changed"

bot, which automatically inserts the date the web page was last

changed into the source HTML for the page.  Other webbots include

a "substitution" bot, which can, for example, replace

a company name in all web pages on a server, and a "table

of contents" bot. 



Schulert stated that the FrontPage group would like to get out

of the business of maintaining the CGI scripts and server extensions.



Whitehead: How tightly are the webbots tied to using POST? 



Schulert: We just need a way of invoking the webbot behavior.





Masinter: If you want to get out of maintaining those three CGIs,

could you make FrontPage work with PUT? 



Schulert: We can see a path out of it, using server-side Java

or Visual Basic. 



Schulert stated that you can post a web up to a server using FTP.

You can post just changes that way, too. This solves the problem

of directly editing the server when you don't want to make direct

changes and a versioning system is not available.  Hence we could

use PUT in a very basic way, like using FTP, to have an interoperable

write capability with other servers.



FrontPage currently has a bundled search engine, but Schulert

does not view FrontPage as being in that business either -- the

search engine is just enough to provide basic functionality. 

Ideally, Schulert would like version control, and search engines

to be pluggable on the server.



In FrontPage 1.1, there is conflict detection and collision prevention,

but no resolution help. 



There was some discussion surrounding the problems of what you

author is not what you are getting -- there can be things that

the author knows that the server doesn't get. For example, if

I delete a slide from a presentation, or a message in a discussion,

the adjacent next and previous links are munged, and the server

may know nothing about remedying that. Schulert sees there being

an HTTP-level problem, in the long term, in this change of abstraction

and also having conflicting server-side extensions. How do people's

extensions cooperate with each other without knowing about each

other? 



Schulert stated that there is a core set of functionalities beyond

PUT. 



Suggestions:

PUT is a great first start

Can post a web to a server using FTP using FrontPage 1.1





PUT isn't good enough.  Neither is GET.

PUT would be the equivalent of their FTP posting capability.

FrontPage 1.1 allows operation in a mode where FrontPage does

not control access control.













Goal of Working Group - Whitehead





Whitehead next led a discussion about the goals and membership

of the working group.



Whitehead displayed a slide which stated that the goal of the

working group should be to make distributed authoring as pervasive

as browsing is today. 



Brown: I don't know about pervasive. 



Long:  I keep getting E-mail from customers who are using Netscape

and notice a typo or spelling mistake and want to fix it. That's

the world we want to address. 



Masinter: We could be modest and not change the world, and simply

have interoperability among our tools. 



Fein: But we want to have interoperability for things we would

like to do, not just what we are trying to do. 



Masinter:  Yes, we should look about two years ahead. 



Nielsen: We should have something at level 0 very quickly -- I

can't see farther than six months out. 



Whitehead then recommended that the group adopt as its goal/objective/aspiration:

to ensure that distributed web content authoring tools are broadly

interoperable. 



Masinter: We should change ensure to enable, so it would read:

enable distributed web content authoring tools to be broadly

interoperable .



Seiwald: We ought to keep that goal in mind, as a mission statement.







There was a suggestion to add a statement about standardizing

features that exist today. 



Nielsen asked that interoperability be limited to the HTTP framework.





There was a discussion about what was meant by interoperability,

and what level of interoperability should be strived for by the

working group.  From this discussion, it was clear that there

are different kinds and scopes of interoperability, and that working

towards broad interoperability was a reasonable statement of the

group's goal.



The working group adopted as its goal: 



Enable distributed web content authoring tools to be broadly

interoperable.

Sponsorship of Working Group by World Wide Web Consortium







Whitehead next led a discussion about whether this working group

should seek sponsorship by the W3C. Nielsen mentioned that the

W3C has a web page on the process used to create a W3C working

group, at URL:



http://www.w3.org/pub/WWW/Consortium/Process/WorkingGroup.html



Nielsen mentioned that being a W3C working group implies that

you have to honor the W3C agreements, including the meeting procedures,

and it has to work on a focused output. 



Seiwald: What is the difference between being 14 random people

or being affiliated with the Internet Engineering Task Force (IETF)?



Masinter: If you are a working group, there are legal safeguards.

For the IETF you have to have a chair, an editor, and a proposal

and a draft. They don't require an initial meeting, and you are

subject to the approval of the IETF Steering Committee for being

appropriate to the IETF. 



Nielsen: Becoming a W3C working group makes sense because it is

within the domain of the area of interest of W3C. 



Seiwald: Does the result go into the IETF? 



Masinter: You can, if you need to make an Internet standard. There

must be an open public review at the IETF, so that is another

gate. This effort shouldn't be uncoordinated from the HTTP Working

Group, however, it is not just HTTP that is of concern here.



Whitehead favors W3C sponsorship since it is the natural focus

on Web-related issues. Hopes to not have quite the formality of

IETF. 



Fein: What does this obligate us to on behalf of our employers?

What other conditions are there? 



Masinter: If you work for a company that is a member of W3C, then

your company has already aligned with the W3C agreements. 



Hamilton: I just want to know what the ground rules are, rather

than finding out retroactively. 



Whitehead stated that he will investigate the intellectual property

rights issues of non-W3C members participating in a W3C working

group.

Meeting Goals, Criteria for Completion - Whitehead 





Whitehead next put up a slide listing desirable meeting goals,

and started a discussion on what would constitute criteria for

completion of the working group's activity.



Masinter mentioned that he likes the idea of a having a demonstration

of interoperability. For example, multiple authoring tools working

against multiple servers and one document being edited by multiple

authoring tools. It would be desirable that there be round-trip

preservation of content features.  For this demonstration of interoperability,

the authoring tools should of the same level of quality that people

already have. 



Whitehead and Burns agreed that this is certainly ambitious, and

it doesn't require versioning, or other advanced capabilities.



Burns: Having this demo actually run seems like a proper exit

condition 



Masinter: The IETF condition for advancing to a draft standard

is that there be multiple interoperable implementations 



Whitehead mentioned that a second demo is that N authoring tools

do simultaneous editing of the same resource on one server, which

would test lost update capabilities, collision handling, etc.



Brown: It appears there are several cases: 

A single client used against multiple servers.

Multiple clients used against a single server.

Multiple clients used against multiple servers.







Whitehead: We will need to refine these cases to make them more

concrete.



Long: The deliverables are specifications by which each of these

demonstrations can claim conformance.



Whitehead: Let's look at key interoperability issues before we

specify deliverables.

Key Interoperability Issues (Nielsen's List) 





Nielsen wrote a list of what he considered to be the key interoperability

issues on the whiteboard in the conference room.  He openly admitted

that there was significant bias in his choice of issues.

Semantic Links 

Make sure that PUT, DELETE work 

What you "GET" Is not what you author - GET for

edit versus GET for browse? 

Ability to Edit Dynamic Contents 

Content-Version, Derived-From, ETAG 

Security (digest, content-MD5, SHTTP) 

Access Control Management 

Link Management on Server 

When to Publish (Publish header) 

Do we need transactions 

Advanced Editing (Multiple users, roles, views) 

Adding revision and change information into HTML 







The HTML item was added during group discussion.  These interoperability

issues then became the focus of discussion.



Schulert proposed that the GET-PUT working bullet is the following

example: A user is browsing at a web page and sees a misspelling

and wants, with simple steps, to edit the page and put the corrected

page back out on the web. 



Nielsen offered a scenario where there are a set of interrelated

resources, and putting them back to a server atomically is desired.





Masinter: There are tasks below those - let someone author a new

page, let someone do site maintenance. 



Masinter then recommended that we go around the room and see what

work people are willing to do as part of the working group.



Whitehead stated that he will write meeting notes for this meeting,

but is not taking ownership of individual technical issues due

to the number of issues, the amount of work required to coordinate

the group, and his desire to concentrate on versioning issues.



Masinter is willing to help coordinate the activity of the working

group, and contribute as an active member of the mailing list.

He does not want to edit anything new. 



Seiwald: I have more interest in the HTTP part than the HTML stuff

and would be interested in writing up proposed HTTP changes. Willing

to author proposals as needed. 



Fein: There is more interest in HTML issues than HTTP issues in

my case. I'm not as interested in protocols or back ends as I

am in document content itself. I could take the Word requirements

for HTML and write them down. 



Masinter requested that Ron sort them out as content versus protocol

etc. A good distinction between what is expected behavior for

understanding, for not understanding, and for sort-of understanding

a tag would be helpful.



Nielsen: That goes for all existing distributed authoring tools.





Dawson and Nielsen: Fein, Schulert, and Long all have lists of

what they want to do in authoring tools - Word, FrontPage, and

AOL. They could take on a task to sort out requirements. 



Hamilton: I propose that Fein, Schulert, and Long (Word, FrontPage,

AOL) use Fein's model (employed on his slides) for listing functional

requirements and features and possible solutions. 



Long and Burns are going to work on assembling something that

is wordsmithed on functional requirements and scenarios. The tasks

/ scenarios that provide the cover for the features list. 



Nielsen mentioned that he has three scenarios at three different

levels in his slides. 



Dawson volunteered to edit the scenarios document. 



Seiwald invited everyone to submit two scenarios, not including

the three we have. 



Masinter: The task scenario document could be long. There is nothing

wrong with that. We should also invite people to contribute. There

may be substantial contributions from others who are not here.





Nielsen: I think coming up with a requirements document is nice.

However, there are some things that need to be fixed and we could

also start working now on the technical issues.



Masinter: We don't have to wait for the scenario document to be

complete to start work on the technical issues.  However, we will

need the scenarios document to tell other people why we are doing

this and how we will know when we are done.



Looked at Get for Edit versus Get for Browse. It's important to

lay out what the alternatives are so you can say you discarded

them. 



Nielsen gave his suggestions for scenarios which should belong

in the scenarios document:

One person changing a misspelling in a document they found

while browsing.

Checking-in a group of resources which are related.

Deleting an object from a web.

Two people editing changes to the same resource.





Specified Deliverables


The group came to agreement that the following set of activities
and deliverables should be produced by the working group:


Task-oriented list of scenarios which interoperable distributed
authoring tools will be able to perform.

Keith Dawson, editor.

Input of other distributed authoring vendors, notably Netscape,

will be solicited.

Put a call on the discussion list request input for this activity.

Nielsen will give us his list of requirements.



Collate lists of "key functionality" among AOLpress/AOLserver,
FrontPage, Word, as well as other distributed authoring tools,
such as Netscape

Dave Long, editor 







Looking at early September for next meeting, for at least the
groups working on the deliverables above. 


*** Meeting Adjourned ***





University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 23 Jul 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/memphis/minutes.html
##-----------------TITLE------------------------##
Minutes for WEBDAV WG Meeting at Memphis IETF
##------------------TEXT------------------------##
Minutes for WEBDAV WG Meeting at Memphis IETF

      The WEBDAV Working Group held a meeting at the 38th IETF, in
      Memphis, TN, on April 7, 1997.  There were 49 people in
      attendance throughout the duration of the meeting.  The meeting
      was chaired by Jim Whitehead, and minutes were collected by Del
      Jensen.  These minutes are reported by Jim Whitehead due to the
      unavailability of Del Jensen for medical reasons.

      The meeting began with a poll of the audience to determine
      how many people in attendance were familiar with the WEBDAV WG.
      Since approximately on third of those in attendance were being
      exposed to WEBDAV for the first time, the session began with a
      brief overview presentation on WEBDAV.  This presentation was
      followed by a discussion, led by Judith Slein, on open issues in
      the requirements document.

      During these first two presentations, questions were asked
      about the scope of the WG's activities with respect to security,
      authentication, and access control.  The stated response, that
      WEBDAV was planning on using existing security and
      authentication schemes, but was not planning on implementing new
      schemes specifically for WEBDAV, met with some scepticism.
      Several parties expressed the opinion that distributed authoring
      in absence of good security, authentication, and access control
      was potentially dangerous, creating a hackers paradise.  Another
      participant stated that expressing the WEBDAV requirements for
      security, authentication and access control was a necessary
      first step, even if the WEBDAV WG does end up using existing
      schemes for this functionality.  One participant urged caution
      when considering these issues, stating that they were very
      complex (a.k.a. "pits of infinite depth"), while another viewed
      authentication and access control as server configuration
      issues, and hence out of scope for the WG.  At the end of the
      discussion, Judith Slein took an action item to bring up a
      thread on the discussion about security, authentication, and
      access control.

      Jim Whitehead next gave a presentation of several topics and
      preliminary proposals for their implementation, which were
      discussed in the Design Team meeting of April 1-4, 1997, held at
      U.C. Irvine, specifically locking, metadata, versioning, and
      partial write.  Discussion of locking centered on a description of
      the characteristics of a proposed lock method, which can be used
      to provide two types of lock semantics: an exclusive write lock,
      where only the principal who owns the lock may modify the state
      of the resource (body and metadata), and a shared write lock,
      where only the principal(s) who own/share the lock may modify
      the state of the resource.  There was some discussion about
      whether it should be possible to lock a deleted or non-existent
      resource in order to avoid a race condition between creating a
      resource (reserving its name) and then taking out a lock on the
      resource.  This led to the need to define a new requirement to
      make it possible to reserve a name in the namespace controlled
      by a server.

      Also discussed during locking was whether the proposed
      locking interface was sufficient for specifying a lock for
      replicated systems which employ a golden copy replication
      system.  While no counter examples were found by the
      participants, one asked about non-golden copy systems.  This
      raised the issue of whether locking capability should be a
      SHOULD requirement, rather than a MUST requirement, since
      non-golden copy replicated storage systems cannot implement a
      lock as defined.

      Metadata facilities were described in terms of a "mixed"
      model, where small chunk metadata is expressed using
      attribute-value pairs stored with a resource, using new methods
      GETMETA, PUTMETA, DELMETA, and large chunk metadata is expressed
      using a link on the described resource which points to another
      resource which contains the metadata description.  Referential
      integrity can be assured for small chunk metadata, but cannot be
      assured in the general case for large chunk metadata.

      A proposal for versioning was introduced where instead of
      using special checkout and checkin methods, versioning would be
      performed using the lock, unlock, and a new "save" method which
      would update the predecessor and successor relationships and
      store an updated resource.  A poll of participants found that
      they did not understand the new proposal well enough to tell
      whether it would work.

      The old patch method was resurrected in the proposal for
      partial write capability which was presented.  The notion of
      patch is that the body of the method request contains
      instructions for how to update the resource specified by the
      request URI.  It was recommended that multipart/byte-ranges be
      used as the default update instruction format which must be
      supported in the patch method is supported.  This choice was
      viewed as strange by some participants.  Other update formats
      suggested were VTML and Unix diff.

      *** End of meeting ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/munich/agenda.html
##-----------------TITLE------------------------##
Agenda: WEBDAV WG Meeting at Munich IETF
##------------------TEXT------------------------##
FINAL AGENDA

IETF WEBDAV Working Group Meeting

Munich IETF Meeting

August 11, 1997




Agenda Items
Overview presentation of WebDAV (15 min.)

Design Overview of Properties, Collections, Namespace operations
[Presentation] (50 min.)

Discussion of select properties, collections and requirements
issues
[Presentation] (until the end)
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/oslo/
##-----------------TITLE------------------------##
July 15, 1999 WEBDAV Working Group Meeting, Oslo IETF-45
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
IETF-45, Oslo, Norway
July 15, 1999      


A meeting of the WEBDAV
Working Group was held July 15, 1999 in Oslo, Norway,
as part of IETF-45.  


Meeting Information


Minutes



Slides shown at the meeting:


Geoff Clemm, Advanced Collections Protocol



      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: August 23, 1999
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/chicago/
##-----------------TITLE------------------------##
August, 1998 WEBDAV Working Group Meeting, Chicago IETF
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
Chicago IETF, Chicago, IL USA
August 27, 1998      


A meeting of the WEBDAV
Working Group was held August 27, 1998 at the 42nd IETF meeting,
held in the Sheraton Towers Hotel, Chicago, Illinois, USA.

Meeting Information


Agenda


Meeting Overview


Minutes



Slides shown at the meeting:



Jim Davis, WebDAV Advanced Collection Requirements and Protocol



Lisa Lippert, Access Control Goals



Chris Kaler, Report on the Versioning and Variant Authoring Design
Team Meeting




      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: August 31, 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/cambridge/agenda.html
##-----------------TITLE------------------------##
Agenda for Cambridge, Mass. Meeting on WWW Distributed Authoring and Versioning
##------------------TEXT------------------------##
Informal Technical Meeting on WWW Distributed
Authoring and Versioning


MIT Faculty Club
September 16, 1996


Agenda

9:00  Introductions and Overview

Distributed Authoring

9:15 Overview of Microsoft Distributed Authoring
and Versioning Requirements & Draft of Implementation Ideas
(Goland)

10:15 Short Break

10:25 Overview Presentation of Distributed Authoring
Requirements (Whitehead)

Discussion of Distributed Authoring Requirements
- Note items which require revision, and agreement on how to revise
- Develop deadline for next revision of requirements
- Desired outcome: consensus on requirements


  Discussion of technical approaches to meet requirements
     - Discussion of existing technical approaches
     - Assign functionality to packages
     - Assign people to develop technical proposals for each package
     - Establish deadlines for initial draft of proposals


12Noon  Lunch break

1:00 Discussion of Group's Charter (Whitehead)

Discussion of charter and goals
  Discussion of process for achieving goals
  Revisit action items from San Mateo


Versioning

2:00 Overview Presentation of WWW Versioning Requirements
	(Durand)
Discussion of WWW Versioning Requirements
- Note items which require revision, and agreement on how to revise
- Establish deadlines for next revision, and final revision
- Desired outcome: consensus on requirements so they can be finalized
	

3:30 Discussion of technical approaches to meet requirements


    - Discussion of existing technical approaches
    - Subdivide functionality into packages
    - Assign people to develop technical proposals for each package
    - Establish deadlines for initial draft of proposals


5:30  Meeting Adjourned.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orem/agenda.html
##-----------------TITLE------------------------##
IETF WEBDAV Working Group Orem, Utah Meeting Agenda
##------------------TEXT------------------------##
AGENDA

IETF WEBDAV Working Group Meeting

Novell Campus, Orem, Utah

July 14-15, 1997

      


      
Monday, July 14

8:30AM - Continental breakfast
9:00AM - Introduction / Confirm agenda
9:10AM - Discussion of metadata/properties

12 Noon - Lunch
    
1:00PM - Discussion of Locking
4:00PM - Discussion of Open Requirements Issues
5:00PM - Adjourn for the day.

Tuesday, July 15

8:30AM - Continental breakfast
9:00AM - Confirm agenda      
9:10AM - Discussion of Namespace/containers issues
    
12 Noon - Lunch
    
1:00PM - Discussion of Versioning
3:30PM - Discussion of Access Control
5:00PM - Meeting adjourns.
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/versioning/dt_oct98/kaler/
##-----------------TITLE------------------------##
Draft-webdav-versioning-00 Overview
##------------------TEXT------------------------##
Draft-webdav-versioning-00 Overview
10/9/98
 Click here to start
   


 
      Table of Contents
            Draft-webdav-versioning-00 Overview
        Basic Tenets
        Agenda
        Intrinsic Versioning
        Basic Versioning (I)
        Basic Versioning (II)
        Basic Versioning (II)
        Resource Branching
        Configurations (I)
        Collections (II)
        Configurations (III)
        Mapping (I)
        Mapping (II)
        Variants

   
	 Author: Christopher Kaler 
      Email:  ckaler@microsoft.com  
	
	  Other information: Slides presented at the Oct. 1998 Versioning and Variant Authoring Design Team meeting, Costa Mesa, CA.  
	
	
	  Download presentation source
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orlando/agenda.html
##-----------------TITLE------------------------##
Agenda, WebDAV WG Meeting, December 10, 1998, IETF-43, Orlando,
Florida
##------------------TEXT------------------------##
A G E N D A
IETF WEBDAV Working Group Meeting
IETF-43, Orlando, Florida
December 10, 1998


Advanced Collections - Judith Slein - 45 minutes
Optional backpointers
Should it be possible to hide the target of a direct reference?
Enforcement of referential integrity
Should it be possible to access the properties of direct references?


Versioning - Geoff Clemm - 40 minutes
Review of versioning goals


Items from List Discussion - Jim Whitehead - 30 minutes
Procedural issues for revising the document before Draft Standard
Multiple URI/URL for each resource
Namespace consistency requirement
XML attributes in properties


Proposal for Collection Properties - Lisa Lippert - 5 minutes
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/www6/index.html
##-----------------TITLE------------------------##
WWW Distributed Authoring and Versioning (WEBDAV ): An Introduction
##------------------TEXT------------------------##
WWW Distributed Authoring and Versioning (WEBDAV ): An Introduction
10/16/97
 Click here to start
   


 
      Table of Contents
            WWW Distributed Authoring and Versioning (WEBDAV ): An Introduction
        Overview
        What is WEBDAV?
        Web Architecture (simple, typical)
        Authoring Context
        Facets of WEBDAV
        Collaboration Infrastructure
        Metadata Infrastructure
        Namespace Management Infrastructure
        Versioning Infrastructure
        Hypermedia Infrastructure
        Current Work
        Current Work (cont’d)
        Current Work (cont’d)
        IETF WG Status
        Getting Involved
        Distributed Authoring and Versioning Requirements
        Reservation Requirements
        Locking Principles
        Locking Requirements
        Metadata Requirements
        Collection Requirements
        Collection Requirements (cont’d)
        Copy Requirements
        Move Requirements
        Miscellaneous Requirements
        Versioning Principles
        Versioning Principles
        Version Topology Requirements 
        Version Graph Retrieval Requirements
        Version Graph Navigation Requirements
        Uniqueness/Addressability Requirements
        Versioning Session Requirements
        Difference/Merge Requirements

   
	 Author: Jim Cunningham 
      Email:  jfc@netscape.com  
	
	  Other information: Presented on Developer's Day at the WWW6 Conference, April 11, 1997
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sanmateo/Minutes_morning.html
##-----------------TITLE------------------------##
Detailed Minutes of San Mateo Distributed Authoring Meeting (Morning)
##------------------TEXT------------------------##
Minutes



Editor's note: These minutes are the result of merging notes taken
by Dennis Hamilton, Keith Dawson, and Jim Whitehead.  In particular,
the detailed, comprehensive notes taken by Dennis Hamilton form the
core of this material. These original notes were edited to make them
more readable in a standalone document, and to add context so that
people who did not attend the meeting could still understand the
discussion. Thus, text attributed to individuals should not be
interpreted as a direct transcription of what they said in the
meeting, but rather as a representation of their content or position,
consistent with what was actually spoken.


Morning - 9AM


The meeting began with all present introducing themselves, and
stating their organization.


History of Distributed Web Authoring - Whitehead


Whitehead gave a presentation on the history of distributed web
authoring.  The first web authoring tool was the Nexus browser
(1989/1990), the Next machine browser/editor developed by Tim
Berners-Lee.  In 1992, the Mosaic 2.4 browser achieved critical
mass, and created the "publish/browse" technical frame
of reference for the WWW. In 1992, the HTTP PUT method disappeared
from the HTTP 1.0 specification because this specification was
intended to reflect the practices of existing HTTP servers, which
did not have write capability. In 1994/95, development took place
on NaviPress/NaviServer (now AOLpress/AOLserver), Vermeer (now
Microsoft) FrontPage, and the World Wide Web Consortium (W3C)
Line Mode Browser, the first generation of distributed web authoring
tools.



In December, 1994, there was a breakout session on distributed
web authoring tools at the WWW4 conference.  The focus of this
session was how to achieve interoperability among distributed
web authoring tools.  This session identified the following interoperability
issues: common access control model, "lost update" problem,
need for BROWSE and MKDIR HTTP methods, editing of variants, access
to "raw" HTML before server-side include (SSI) processing,
strong authentication, and placing a link to the HTML Standard
Generalized Markup Language (SGML) Document Type Description (DTD)
in the HTML source.



In 1995/96, Rohit Khare at W3C researched a resource leasing and
locking mechanism.  In March 1996, Dan Connolly of the W3C put
out a call for volunteers to coordinate distributed authoring
activity, and Jim Whitehead of U.C. Irvine volunteered, forming
the Working Group on Distributed Authoring on the World Wide Web,
and the Working Group on Versioning and Configuration Management
of World Wide Web Content.  Though Whitehead received much appreciated
assistance from Dan Connolly of the W3C, and Larry Masinter of
the IETF HTTP Working Group, neither the distributed authoring
or the versioning and configuration management group has official
sponsorship from either the W3C or the IETF.



In June, 1996, the IETF HTTP Working Group completed an internet
draft of HTTP version 1.1, including a PUT (write) method.  In
July 1996, the IETF HTTP working group completed an internet draft
on digest authentication for HTTP.  On July 10, 1996, the Working
Group on Distributed Authoring on the World Wide Web met at AOL
Productions, San Mateo, California.


Working Group Descriptions and Purposes - Whitehead


Whitehead next gave a presentation stating the best current description
of the purpose and activities of the Working Group on Distributed
Authoring on the World Wide Web, and the Working Group on Versioning
and Configuration Management of World Wide Web Content.  Whitehead
stated that the mission of the distributed authoring group is
to make distributed authoring as pervasive as browsing is today.
 This could be achieved by specifying preliminary modifications
to existing internet specification (e.g. HTTP), and by establishing
usage conventions (e.g., URL naming conventions).  These preliminary
specification and usage conventions would then be forwarded to
appropriate bodies, such as the IETF HTTP Working Group, for final
discussion and potential incorporation into existing internet
standards. (Further discussion of this issue took place in
the afternoon.)



The Working Group on Distributed Authoring has a home page at
URL:



http://www.ics.uci.edu/~ejw/authoring/



It also has a mailing list, <w3c-dist-auth@w3.org>,

hosted by the World Wide Web Consortium.



At this point there was some discussion about membership on the

mailing list.  Whitehead stated that he hasn't yet turned down

anyone who wanted to join the list, and he wants high participation

on the list. However, it is a managed list. Whitehead wants the

ability to gag (after warning) list participants who are not behaving

constructively. Masinter stated that this is a perilous course,

that it is better to just leave the list open and be selective

in reading and responding. 



There was some discussion about the differences between W3C mailing

lists, which do not have to have open membership, and IETF working

group mailing lists, which do.



Masinter: Irrespective of whether the mailing list is open or

restricted, gagging on an individual basis just doesn't work out.

I suggest having solid guidelines about the list and what is expected

of participation, and have that known in advance. 



Whitehead: We will discuss membership and sponsorship further

later today. 



Masinter: You need to decide on sponsorship of this working group

so that the participants who are concerned about legal questions

(e.g., anti-trust and intellectual property rights) around participating

with others can be satisfied and operate appropriately.



The Working Group on Versioning and Configuration Management of

World Wide Web Content has as its goal the development of a preliminary

specification for how to provide versioning and configuration

management of content served by an HTTP server.  This goal can

be achieved through the same means used by the distributed authoring

group: extension of existing specifications, and establishment

of usage conventions.  While the issues considered by the distributed

authoring group also include versioning and configuration management,

the versioning group was created as a sub-group of the distributed

authoring group to partition the issue space due to the complexity

and number of issues involved.



The Working Group on Versioning and Configuration Management has

a home page at URL:



http://www.ics.uci.edu/~ejw/versioning/



It also has a mailing list, <www-vers-wg@ics.uci.edu>,

hosted by the Department of Information and Computer Science at

the University of California, Irvine.



Seiwald: Is it possible to separate issues of versioning and configuration

management from distributed authoring, and how do we reconcile

different interests?



Whitehead: There is significant overlap between the two issue

spaces. For example, access control is considered by both groups.

 However, due to the size of the versioning and configuration

management issue space, and the different set of parties interested

in this issue, such as configuration management companies, it

makes sense to have a separate group address this issue.  There

will be close collaboration between the two groups, and there

is currently significant overlap in membership.



Hamilton: The issue spaces aren't orthogonal, but we want to factor

these topics (collaboration, versioning, authoring) so that we

can proceed in parallel as much as possible. 



Seiwald made a comment about configuration management being a

result of cooperative authoring and how versioning and authoring

don't get too far apart.





Fein asked about previous work on collaborative editing and the

WWW.



Nielsen: There has been some discussion about collaboration in

other groups, and there was a workshop on the subject. 





Masinter: What are people interested in? 



At this point we went around the room and reviewed what people

were interested in.





Question: Have any of the people from Netscape Navigator Gold

been asked to participate in this meeting?  Long had some contact

but it seems to have gone quiet at his end at the moment.  Whitehead

mentioned that Netscape was contacted prior to the meeting, but

had declined to participate. Before the meeting someone from Netscape

did telephone Dan Connolly at the W3C to mention they would be

unable to attend the meeting, but were interested in participating

in the working group.





There was a brief discussion about including multiple repository

searching, etc. by Long, and Nielsen talked about the meeting

recently held about indexing, Harvest, etc.

Collaborative Authoring in Microsoft Word - Fein





Fein gave a presentation on collaborative authoring in Microsoft

Word, with brief comparisons to other word processors.



Fein mentioned that the efforts of this group are already too

late to impact Word 8, which is scheduled to be released this

fall for Windows 95, NT and Macintosh.  



Fein listed the five most important collaboration features for

word processors:



Revision Marking

Annotations

Merging Documents

Comparing Documents

Access Control











Revision marking slide:



Fein discussed how MS Word and Lotus WordPro both track revisions

to a document by storing the revision history in the document

file. This has the advantage that moving the document to a floppy

doesn't cause the loss of revision information.  The desired capability

is to know who wrote what, and when they wrote it, at a fine-grain

level within the document (i.e., character, word, and paragraph

level).  It is also desirable to have protection from unauthorized

changes by requiring people to submit deltas for approval and

selective incorporation.  One way of providing this desired capability

is to have provisional edits stamped with user/time, which are

then incorporated into the document during an accept/reconcile

process by the main document author. 



Experience with LAN usage shows that the access speed hit for

storing the revision history in the document is acceptable. However,

Fein suspects this will likely not be the case when retrieving

or saving a file at 28.8 baud (the fastest mass-market modem speed).





Experience with Microsoft Internet Explorer has shown that converting

a Word file to HTML causes irretrievable loss of revision information.

 Ideally, it would be nice to have the choice of file format be

transparent to the user.  



Fein also provided a brief discussion of versioning in Lotus WordPro

(not on his slides).





Hamilton: The business of posting revisions or deltas as part

of the document file is an approach in OpenDoc.



Burns: The Dynabook DynaWeb server manages deltas within their

database, and only delivers the version users want.





There was some discussion about embedding revision information

into HTML comments.  This has the drawback that it makes the comments

encoded.  Whitehead mentioned that David Durand and Fabio Vitali

are working on a versioned HTML called "VTML." 





Annotations slide:



Unlike revisions, annotations are not proposed changes to the

document. Within Word, annotations are a separate text stream

anchored to regions of the main text.  Fein mentioned the desirability

for annotations which are not links (i.e., a few lines of text

rather than a jump to a new document) to pop up a window within

a WWW browser, after a Word file is converted to HTML.





Merging:



Collaborative editing leads to the problem of integration of multiple

sets of revisions. Current approach: dump all revisions into the

same file, then allow the document editor to choose which revisions

to accept.  Merging has several implications for the Web. First,

merging requires some means of performing revision marking so

users can choose between different revisions.  Second, until all

revisions have been merged, the document is in a half-finished

state, and should not be world-readable until the merge has been

performed in a rational way.





Comparing versions:



The functionality in Microsoft Word for comparing two different

versions of a document was originally developed for the legal

market so they could analyze changes made to a contract by a potentially

hostile party who will not tell you what changes they have made.

This is more difficult than the plain text (e.g. source code)

comparison (or 'diff') case, since there is a need to perform

differencing on logical parts of a document, such as sentences,

paragraphs, and pages, rather than just individual lines of text.







Access control:



The issue here is how to provide fine-grain (individual revisions

within a document) permissions to different users.  WordPro has

very good fine-grain document access control. A difficult access

control situation occurs when one person's revisions aren't visible

to all members of a work group (e.g., politically sensitive comments).



It was mentioned that the Adobe PDF document format allows selective

modifications to a document.



Masinter: It is hard to see how a document can carry this amount

of authorization.





Future plans of Word:



An Intranet Day presentation by Bill Gates demoed two features

of an upcoming Word release.



Nielsen: The Amaya structured HTML browser and editor (W3C work

performed at INRIA) does this already.



Masinter: The Shared Books system at Xerox might have done this

too.



(General acknowledgment that these capabilities have existed in

previous research systems.)



Some Word 8 features:

automatic URL recognition (and conversion into a browsable

link)

common office hyperlink model across Office (both user-interface

and programmability)

web toolbar

browser integration  (the browser is opened using the DocObjects

extensions to OLE, e.g. Explorer)

document map (a frame-oriented table of contents style capability)











One problem they have been experiencing while working on Word

is how to make a user interface which is good for both browsing

and authoring simultaneously.  Certain authoring features are

undesirable during browsing, for example, the feature which marks

misspelled words with a wavy red underline -- the user doesn't

want to know this for sites they didn't author.   One solution

is to have a mode-based interface, with distinct browsing and

authoring modes.  However, Fein would prefer to have editing and

browsing occur within the same mode.



Long: We encountered this problem in NaviPress as well.  Out solution

is: you are in browsing mode until you place your cursor in the

window, then you switch to browsing/authoring mode.



Another participant mentioned that Netscape Gold has an authoring

mode which is separate from their browsing mode, even popping

up a separate authoring window.



Fein discussed the desirability of having the file format (e.g.,

HTML, Word native) and connection type (e.g. LAN, SLIP) be visible,

but still the same operation to the user, for most cases. For

example, HTML should be just one option for saving, rather than

having a separate 'Save to URL/HTML' command.



Since the native Word document type is a richer format than HTML,

there is some information loss going from Word to HTML.  There

are also some aspects of HTML which don't convert exactly to native

Word format. This causes a problem for 'out-of-band' editing of

HTML, that is, editing an HTML document that was created by converting

a Word document to HTML, and then wanting to recover those changes

back into Word. This led into the broader issue of whether the

Web should support all word processing features.



Brown mentioned that some of their customers really cared about

the format of generated HTML because they were feeding the generated

HTML into other tools.



The issue of multi-purpose authoring was also raised: how best

to have just one document type which is good for CD-ROM, for the

Web, for printing, etc.  Especially for printing, bandwidth becomes

an issue. It is acceptable to retrieve a high-resolution image

over a LAN to produce high-quality printed output, but this is

probably not acceptable when working over the Internet, since

it is not as fast.  Are users willing to wait half a day to download

the high-quality files to produce a high-quality printout? 



There was some discussion about how best to handle writing a resource

which contains many related resources, such as a web page and

associated graphics.



Masinter: The Web mail group has been working on a way of agglomerating

many files into one file, using the multipart/related MIME type.

 This allows the sending of a web page (many files together to

form one page) via email.



There was some discussion about the need for a "GET for edit"

method which is distinct from a "GET of source" or a

"GET for browse" (the current behavior of HTTP).  The

need for this becomes clear when revision information is stored

in a resource.  In this case, a user performing an edit may not

want the full source, because they do not want to incur the time

delay of downloading the full revision history, but they may not

want the browsable version either, due to server-side include

processing.





Interoperability:



Existing tools do not all share the same editing model.  For example,

with FrontPage, it is possible to have a company name stored in

one place.  When this company name is modified, the change is

then propagated to N leaf nodes.  This is considered to be only

one change to FrontPage, but it might be considered N separate

changes to another tool.



Another issue is defining behaviors for less savvy tools, for

example, what should revisions look like to a non-revision savvy

browser?



Integrations with existing versioning systems -- this topic should

be handled by the versioning working group.



In conclusion, Fein stated that word processing applications already

have collaboration features, which are not now available in existing

Web authoring tools. Microsoft is committed to a standards-based

approach to collaborative authoring. In the long term Fein sees

Word becoming the main editing engine, while FrontPage will concentrate

on its facilities for site management, offering a higher web functionality.

 



Schulert: I see FrontPage being a more high-end, more web-focused

tool than Word.





Whitehead: Can you tell us which HTTP method will be used in Word

8 for its "Save to URL" capability?



Fein: Sorry, I cannot talk about this.





Nielsen stated that the Word team should use the PUT method rather

than the POST method.  Schulert responded with a discussion about

why the POST method was chosen by FrontPage group.  The primary

reason is that when they began development of FrontPage, POST

was implemented and standard across servers, while PUT was not.

 Nielsen stated that the HTTP 1.1 PUT is now much more usable

for writing content to an HTTP server than the HTTP 1.0 PUT.



Masinter asked whether the HTTP 1.1 version of PUT is adequate

for putting versions with metadata, and also about the atomicity

of PUTs? Long suspects that HTTP 1.1 still has some problems in

this area.





Nielsen: Need to aim for December timeframe to get into HTTP 1.2,

since there are many products being worked on, and HTTP 1.2 appears

to be the last revision of HTTP.



Masinter: This group needs to produce some input for the HTTP

Working Group by the end of the summer to have results put into

HTTP 1.2.

Distributed Authoring - Nielsen





Nielsen began by reiterating the need to work quickly to get results

into HTTP 1.2.



Nielsen would like to be able to create a document once and then

have it seamlessly: (1) sent to a friend via email, (2) posted

to a newsgroup, and (3) written to a web page, all using a common

PUT/POST model.  Some issues this raises are what transaction

model is used? What quality of service do you want to have?  Nielsen

used the example of having icons on the desktop representing people,

web servers, news servers, etc. with the capability of dragging

a document onto one or more of these icons and then saying "submit".

 This causes the appropriate email post, newsgroup post, and web

page write to occur simultaneously with appropriate error handling

when things go wrong. 



Nielsen also favors using the LINK mechanism within HTML to have

rich relationship semantics among documents.  These links could

serve a number of purposes, for example, serializing a hyperweb

of documents so they can be printed, or linking a table of contents

to chapters of document. These relationships could also be used

to create alternate hierarchies to the containment hierarchy offered

by the directory structure of most existing web servers.  This

more general model can handle web servers implemented on top of

a database as well as on top of a file system.



In  Nielsen's view, during a PUT, the client may make suggestions

about the destination URL of a resource, but is not in charge

of the name space of the server. The server ultimately decides

where it will place a resource in its name space.  The server

uses the link relationships to determine the location and hierarchical

arrangement of resources within its namespace, rewriting HTML

as necessary to preserve the relationships.



Some meeting participants were unaware of the LINK tag, and so

there was a brief discussion describing it, and what it can be

used for.  This led into a discussion of the desirability of having

a standard for LINK REL tags (usage convention).  It was mentioned

that  Murray Maloney had previously written a document on standard

relationships, and that the time might be ripe to revisit this.







Hamilton: What about HyTime?  It can project structure onto a

document.  



Frystyk: Same with Hyper-G.



Hamilton: There is a need for addition of structure that is not

embedded into a document, like a linkbase system.





There was some discussion about the advantages of using standard

link relationships. Concern was raised that a full consideration

of this functionality would take longer than the two months remaining

before the end of the summer deadline for impacting HTTP 1.2.



Masinter: The two month timeframe is only for changes to HTTP.

 However, there is the PEP (Protocol Extension Protocol) which

can support changes beyond 1.2.





There was some discussion about whether there is a need for two

phase commit transaction semantics for PUT operations in HTTP.







Wills: Should versioning be tied to a particular versioning system,

like CVS (Concurrent-Versions System)?



Nielsen: Versioning should not be tied to a particular system.

 Authoring tools should use PEP to get the operations needed to

perform versioning with a given system.  How a particular versioning

system performs locking and access control will be negotiated

between the authoring client and HTTP server in some meta language.



Whitehead: Using PEP is not necessary, since it is possible to

implement several different versioning styles using a common set

of atomic operations.



Masinter: Perhaps the variability between versioning styles can

be expressed in standard ways, such as by using a forms-based

interface.



Seiwald: Whitehead says we can do a lot with some atomic operations,

which allow for basic interoperability across versioning systems,

so perhaps we should al least do this.



Nielsen: I don't want to end up with an enumeration of particular

version control systems, but by using a negotiation model common

methods will emerge.



Masinter: Registration and negotiation is the fallback when standardization

is not possible. It is better than chaos, but standardization

is better than negotiation.



Whitehead: There are also significant technical problems with

negotiation. For example a lock simply prevents writing to a resource

by all users except the lock holder.  Describing a lock thus requires

an access control meta language, the description and implementation

of which is a difficult problem.



Nielsen: What goes into HTTP has to be independent of the versioning

model used.



(There was agreement on this point.)





Back to presentation:



Nielsen: Caching needs unique names for versions and variants

so caches can deal with them uniquely.  



Masinter: No, HTTP/1.1 doesn't require unique names.  Could perhaps

use a version header instead, which the cache could understand.







There was some discussion about the possible use of entity tags

in a versioning scheme.



Masinter: There should be some investigation of if-match and PUT

usage.  There doesn't really need to be that much support for

versioning.  There is a tradeoff in putting a new version header

on the request versus putting version identifiers into the name

space.





Nielsen mentioned that PUT does not support writing to resource

byte ranges (i.e., sub parts of a resource). 



Nielsen also mentioned that the Jigsaw server has an integration

with CVS, and that the Amaya browser/editor will be 1.1 compliant

as quickly as possible.



Nielsen also mentioned the need to make PUT reliable in practice,

by which he means ensuring that PUT doesn't drop data on the floor

during a transaction (lost data is bad).


There was some discussion about the applicability of SHTTP (Secure
HTTP) for secure writes.  According to Masinter, the SHTTP specification
is in last call and will be approved very soon.  Nielsen expressed
the opinion that SHTTP is very difficult to implement.






University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 24 Jul 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/paloalto/
##-----------------TITLE------------------------##
Palo Alto WebDAV Technical Meeting
##------------------TEXT------------------------##
Technical Meeting of the Working Group on Distributed Authoring and Versioning
on the World Wide Web (WEBDAV)


Xerox PARC, Palo Alto, California

November 14-15, 1996




The third technical working meeting of the working group on Distributed Authoring
and Versioning on the World Wide Web (webdav) was held on November
14-15, at  Xerox PARC. Many
thanks to Larry Masinter for graciously hosting this meeting.  The
purpose of this meeting was to provide a forum for detailed discussion
of design issues on a protocol for distributed authoring and
versioning on the Web.



Participants


Agenda


Minutes



Slides shown at the meeting:




Kenji Ota, Version management with meta-level links

Yaron Goland, HTTP Distributed Authoring
and Versioning (DAV) An Overview






University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 21 Nov 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orlando/adv_col_breakout.html
##-----------------TITLE------------------------##
Notes from WebDAV Advanced Collections Breakout, IETF-43, Orlando,
Florida, December 8, 1998
##------------------TEXT------------------------##
Breakout Session on Advanced Collections

IETF-43, Orlando, Florida
Tuesday, December 8, starting at 13:00

A breakout session on WebDAV Advanced Collections was held Tuesday,
December 8, 1998.  This was not an official meeting of the WebDAV
working group.  However, since the discussions are of general interest
to working group members, these minutes were taken to record the
discussion. Judy Slein recorded the minutes.

The breakout session on advanced collections discussed several issues
related to referencing: (1) whether we need to provide backpointers from
target resources to the references that point to them, (2) whether we should
reconsider our earlier decision to exclude referential integrity from our
scope, (3) how to allow clients to operate on references as well as on their
targets, (4) whether we really need both direct and redirect references, (5)
whether to drop a requirement to be able to hide the location of a target
resource, and (6) the relationship between the versioning spec and
referencing.

Attending:
 
Jim Whitehead (University of California / Irvine)
Judy Slein (Xerox)
Ken Coar (IBM, Apache)
Manoj Kasichainula (IBM, Apache)
Geoff Clemm (Rational - ClearCase)
Yuri Demchenko (TERENA)

BACKPOINTERS

There has been a lot of controversy about whether to expose in the protocol
a property (DAV:references) that lists the references to a given resource.
An alternative is to perform a DASL search for resources that have
DAV:reftarget equal to the URI of the resource in question.  (Since
DAV:reftarget is a structured property, this strategy is only possible if
DASL includes search on structured properties.)

Performance considerations are not decisive between the two strategies.
Search could be efficient.  This particular query could be optimized to
examine a property (not exposed through the protocol).  A DAV:references
property might be implemented as a list, or might be computed on the fly by
scanning the file system.

Clients need to know whether the search will be optimized before they
request the search.  There is no way to find out.  DASL does include a
mechanism for clients to limit the resources a server spends on a given
query.

Clients need to know whether the property is computed on the fly before
requesting it.  There is no way to find out.  The impact of computing on the
fly is especially significant when a client requests allprop.  There may be
other properties that are computed on the fly as well.  DAV:getetag is
computed, and some versioning history properties may also be computed.

We could include an implementation note for clients, warning them not to
assume that examining DAV:references will be more efficient that searching
on DAV:reftarget.
 
We could include an implementation note for servers, warning them to use
computed properties with care, because of their potential impact on allprop.
Servers that are built on file systems may be unable to provide
backpointers.  In a Unix environment, if references are aliases it is easy
to discover the references to a given resource; but if references are
symbolic links it is difficult or impossible.  Servers that are based on
file systems are unlikely to implement backpointers.

From a client's point of view, since many servers will not provide
backpointers, only advanced clients will take advantage of them. Clients
that are tailored for use with document management systems are the most
likely to make use of backpointers.
  
DAV:references includes both direct and redirect references to the target
resource.
 
Systems that provide strong references (e.g., systems that provide versioned
collections) use backpointers internally to keep DAV:reftargets up to date.
Users do want to be able to find out which versions and collections ever
contained this resource.
  
Versioned collections need backpointers.  If backpointers are not provided
in the collections protocol spec, the versioning spec will extend the
semantics of some sort of reference to get this functionality.
 
Conclusion: The attendees favor a DAV:references property, optional at the
resource level.  There should be an implementation note addressed to
servers: Be cautious about implementing DAV:references as a computed
property, because of the possible impact of computation on allprop.  Be
clear about the semantics of DAV:references: when it gets created, deleted,
and updated.  If servers do implement backpointers, we want them to use the
same name for the property, and the same semantics.

STRONG REFERENCES
 
Geoff Clemm is interested in reopening the issue of strong references.  He
believes that support for strong references may not require much more than
backpointers. He believes that strong references will be important for
versioning / configuration management systems.  If the collections spec does
not provide strong references, the versioning spec may have to.

Geoff will send a mailnote on this subject at least to the attendees of this
meeting.
  
We need to try to recreate and capture for the record the considerations
that led to ruling strong references out of scope in the first place.

RE-DIRECT VS. NO-PASSTHROUGH HEADER

The new Re-Direct header applies only to direct references, and makes them
behave like redirect references just for the request that includes the
Redirect header.  It asks the server to apply the request to the reference
itself, rather than to its target.

Jim Whitehead suggests that we really need a header like this for both
redirect and direct references.

At the moment the collections spec requires servers to respond to HTTP
requests on redirect references with a 302.  This makes it possible for
plain HTTP clients to take advantage of redirect references.  In fact, we
should require servers to respond with a 302 to WebDAV requests as well as
to HTTP requests, so that non-referencing WebDAV clients can take advantage
of redirect references.   Once we have made this change, there is no way to
operate on the redirect reference itself.
  
So we need a header that can be applied to both redirect and direct
references, asking the server to apply the request to the reference itself,
not to its target.  Let's call it No-Passthrough.  The more common case is
for the client to want the request to be applied to the target.  So the
header will just be used for the less common case.

REDIRECT + DIRECT

Judy Slein asked whether we really need both redirect and direct references.
They started out being very different from each other.  In the first draft,
redirect references were just resources with no content and a DAV:reftarget
property that a client could retrieve to locate the target resource, and
then perform operations on that resource.   But over time redirect and
direct references have become more similar.  First the semantics of redirect
references changed to accommodate plain HTTP clients: responses to HTTP
requests got a 302 response accompanied by the DAV:reftarget property in the
Location header.  Now if we take Jim Whitehead's advice, all requests on
redirect references will use this semantics, so that non-referencing WebDAV
clients can be accommodated.  For both direct and redirect references, if
the client wants to operate on the reference itself, it must use the
No-Passthrough header.  At this point, is the distinction between redirect
and direct references significant?

There is still an important difference in the difficulty of the server
implementation.  We need redirect references for cases where the target is
on a different server from the reference.  Direct references could not work
across servers unless the server had proxy capabilities or used some
server-to-server protocol.
 
We might want to let direct references respond with 302 if the target is on
a different server.

The direct / redirect distinction mirrors Apache's internal / external
redirects.  Both are useful.
 
We may want redirect references to allow clients to update their tables. 

Conclusion: We need both redirect and direct references.
  
DELETE, MOVE, AND COPY

Delete and move are special cases.  They always get applied to the
reference, not to its target.  Why?
 
They amount to editing the collection containing the reference, not the
object being referenced.   In some systems performing a delete or a move
only requires a permission on the directory, not on the object.  This is a
common semantics.  It is Unix semantics.

MOVE: We need to define the semantics for what happens to the backpointers
when a reference gets moved.
 
What about MOVE requests from non-referencing clients?  Should these
requests ever result in the target being moved?  Would you ever want to do
move with pass-through?  In many systems it would be literally wrong to do a
move with pass-through semantics.  We don't want other references to the
target to get broken.  We should not allow a pass-through move.
 
Conclusion: Stay with the status quo - DELETE, MOVE, and COPY are always
applied to the reference, never to its target.
 
HIDING THE TARGET
 
The requirement to be able to hide the location of a target resource was
motivated by a scenario.  Sue has a collection full of highly confidential
information.  She doesn't want anyone to know about it.  But she needs to
give Tom access to one resource in the collection to get his comments on it.
So she would like to create a reference to it for him, but prevent him from
knowing the location where it and all the other confidential resources
reside.
  
Another motivation: Tilde-name directories provide point of attack by
revealing a user name.

This is "security through obscurity."  Security through obscurity is rarely
the right answer.
  
Don't keep things in directory structures that reveal information you want
to hide.

If we have access control, we don't need this.  We would need access control
on properties, so that we could prevent clients from seeing DAV:reftarget.  
In any case, this is not very important.  The security exposure is limited. 
We can add this capability later if it really looks as if people want it.
Wait and see whether people implement it with properties.

Add a discussion of the risk to security considerations rather than add a
header.
  
Conclusion: Drop the requirement that it be possible to hide the location of
a target resource.

VERSIONING AND REFERENCES

Versioning of collections is being implemented on top of referencing.

Judy Slein requests that before extensions to referencing capabilities are
put into the versioning spec, the team consider whether they would be more
generally useful.  If so, they should be added to the collections
(referencing) spec instead.

Do we need to extend the syntax of DAV:reftarget, to allow it to contain
more than just a URL?  Versioning may need it to include the URL of a
version graph, together with information about which member of the graph to
select.
 
We may want to make the syntax of DAV:reftarget extensible by using
attribute-value pairs. The Ref-Target header would also have to become more
flexible, and might need to be incorporated in an xml body.

*** Meeting Adjourned ***
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/irvine/
##-----------------TITLE------------------------##
Irvine WebDAV Technical Meeting
##------------------TEXT------------------------##
Technical Meeting on Distributed Authoring and Versioning
on the World Wide Web (WEBDAV)


Student Center, University of California, Irvine, Irvine, CA

January 27-28, 1997




The fifth technical working meeting on Distributed Authoring
and Versioning on the World Wide Web (webdav) was held on January
27-28, in the Student Center at the 
University of California, Irvine in Irvine, CA.  The purpose of
this meeting was to provide a forum for detailed discussion of the

draft protocol specification for distributed authoring and
versioning on the Web, produced by the design team.



Participants


Agenda


Minutes






University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 03 Mar 1997
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/orem/
##-----------------TITLE------------------------##
Orem WEBDAV Working Group Meeting
##------------------TEXT------------------------##
IETF WEBDAV Working Group Meeting
Novell Campus, Orem, Utah
July 14-15, 1997      


A meeting of the WEBDAV
Working Group was held on July 14-15, 1997 at the Orem, Utah campus of
Novell.  The purpose of this meeting was to provide a detailed review
of the protocol
specification, resolve open issues in the
requirements
document, and discuss the interim
access control requirements draft.  The meeting was attended by 26
people.


Participants


Agenda


Minutes




Slides shown at the meeting:




Yaron Goland, DAV Properties


Jim Whitehead, Locks and State Tokens


Jim Whitehead, Collections and Namespace Operations


Jim Whitehead, Versioning: A Proposal


Jon Radoff, Access Control Requirements

	
      


University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425




Last modified: Wed Jul 30 16:27:23 PDT
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/authoring/sanmateo/
##-----------------TITLE------------------------##
San Mateo Meeting of Distributed Authoring Working Group
##------------------TEXT------------------------##
Working Group on Distributed Authoring on the World Wide Web



Informal Meeting



AOL Productions
San Mateo, California



July 10, 1996




The first meeting of the

Working Group on Distributed Authoring on the World Wide Web
was held on July, 10, 1996, at the offices
of America Online (AOL) Productions, 2600 Campus Drive, San Mateo,
California, USA.  The main objective of this meeting was to provide
a forum where people interested in fostering interoperability
between distributed web authoring applications could meet, exchange
information about the current state of the art and practice, identify
key interoperability issues, and formulate an agenda for achieving
interoperability.



Executive Summary


Introduction


Participants


Agenda


Detailed Minutes (Morning)


Detailed Minutes (Afternoon)



Slides shown at the meeting:



Jim Whitehead, Agenda, Background, Discussion



Ron Fein, Microsoft Word


Dave Long, AOLpress/AOLserver



Henrik Frystyk Nielsen, Distributed Authoring






University of California, Irvine

Jim Whitehead <ejw@ics.uci.edu>

Department of Information and Computer Science
247 ICS2 #3425

Irvine, CA  92697-3425


Last modified: 23 Jul 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~ejw/contact.html
##-----------------TITLE------------------------##
Contact Information for Jim Whitehead
##------------------TEXT------------------------##
Contact Information




Jim can best be contacted using email,
but he does respond to communication via all of the traditional
channels.  Jim's office phone currently does not contain voice mail.

Jim Whitehead &ltejw@ics.uci.edu>

U.C. Irvine

University of California, Irvine 
Jim Whitehead 
Department of Information and Computer Science 
247 ICS2 #3425 
Irvine, California 92697-3425 

Office: (949) 824-4121
Fax: (949) 824-1715
##------------------URL-------------------------##
http://www.ics.uci.edu/~fielding/index.html
##-----------------TITLE------------------------##
Roy T. Fielding
##------------------TEXT------------------------##
Roy T. Fielding
Chief Scientist,
Day Software
Co-founder and member,
The Apache Software Foundation
Ph.D.,
Information and Computer Science,
UC Irvine
E-Mail: fielding@gbiv.com, roy.fielding@day.com, fielding@apache.org
Office: Irvine, California, Fax: +1 (949) 679-2972
Meet me at ApacheCon
The personal website of Roy T. Fielding




Research Projects

I finished my doctorate within the
Software Research Group here
at UCI.  Much of my work was done
under the auspices of the Hyperware project
and collaborations with industry as part of the
Institute for Software Research.
My research interests include
global software engineering environments,
software design, software architecture for network-based applications,
and application-level protocol design.
Richard N. Taylor was my advisor and dissertation
committee chair.

I have been actively involved in the World Wide Web project since
1993.  I set up the original UCI-ICS
WWW server and created several WWW software
packages,
and in early 1994 became involved in the effort to specify and improve the WWW
infrastructure through the IETF working
groups on URI, HTTP,
and HTML
(the set of protocols that were used to retrieve and view this document).

I also co-founded the Apache
HTTP Server Project and on the board of directors of
The Apache Software Foundation.
We created the Apache HTTP server that currently dominates the general-purpose
server market with over 60% of
the public
Internet websites using our software.  Apache is my favorite example of
the power of global collaboration for the creation of software.

My dissertation,
Architectural Styles and
the Design of Network-based Software Architectures, focused on
the rationale behind the design of the modern Web architecture and how it
differs from other architectural styles.



Papers, Talks, and Specs

Curriculum Vitae and Publications
Presentations and Slides
Uniform Resource Identifiers (URI):
    Generic
    Syntax (RFC 2396) and
    Relative URL
    (RFC 1808)
Hypertext Transfer Protocol (HTTP):
    
    HTTP/1.1 (RFC 2616
   [pdf, 
    html], 
    RFC 2145, and
    RFC 2068) and
    HTTP/1.0 (RFC 1945)
Internet Engineering Taskforce (IETF) Web-related Archives
  URI Working Group
  HTTP Working Group
  HTML Working Group
  WebDAV Working Group
  


Open-Source Software

Apache
The best general-purpose HTTP server that money can't buy.

libwww-ada95
A library of Ada95 packages that provides a start for a simple
    programming interface to the World Wide Web.  Unfortunately, we only
    had the time and resources to finish the first part: the
    Onions network streams library.

libwww-perl
A library of Perl4 packages which provides a simple and consistent
    programming interface to the World Wide Web.  This library is being
    developed as a collaborative effort to assist the further development
    of useful WWW clients and tools.

MOMspider
A web robot for providing multi-owner maintenance of 
    distributed hypertext infostructures.

wwwstat
A package for analyzing httpd server access logs and providing
    summary statistics in HTML format.





Life Story

What, you're still reading this?  According to most hypertext research,
you should have become bored by now and moved on to to another page.
Well, this is for those who are extra curious (or just have nothing better
to do).

My background is a bit odd: I was conceived in 
New Zealand and born in
South Laguna,
California. 
Although most of my schooling has been in the U.S., I was taught how
to read during a school term in 
Auckland.
My 
father is an emeritus professor in 
Social Sciences here at UC Irvine,
which is why I have been raised a Yank.  I was born in September 1965,
during the first week of classes of the year UCI was established, so you
might say that the two of us grew up together (except for the three years
I spent studying Physics and International Politics at
Reed College).  I am part 
Maori,
Kiwi,
Yank, Irish, Scottish, British, and California beach bum.  Like I
said, a bit odd.


Most of the rest can be seen in my vita.

I was a Visiting Scholar at MIT/LCS during the summer of 1995, working with
Tim Berners-Lee and the World Wide Web
Consortium (W3C).  You can also see my
W3C Home.


I was
named by MIT Technology Review
as one of the
TR100: The top 100 young innovators
for 1999. "The 100 young visionaries who our editors and a distinguished
Panel of Judges feel have the greatest potential for technological innovation
in the 21st century."  Gee, no pressure there.

The Association of Computing Machinery
recently awarded the 1999
ACM Software System Award to The Apache Group for the Apache HTTP Server.
I talked a bit about that honor in
an
interview with LinuxWorld.

On a more local note, I was named by the UCI Alumni Association as the
Outstanding Graduate Student of 2000.

Other Interests

I like playing games -- especially non-betting card games (Bridge,
Hearts, etc.) and obscure board games (british rails, naval war, etc.).
I also like playing basketball, softball, football and going fishing.
Mind you, I haven't had time to do any of these things since I started
messing with the Web.

Quotations


      What is life?  It is the flash of a firefly in the night.
      It is the breath of a buffalo in the wintertime.
      It is the little shadow which runs across the grass
      and loses itself in the sunset.

      --- Crowfoot's last words (1890), Blackfoot warrior and orator.



      To most readers it will be easy, after reading this tale, to accept
      Rover's theory that Man is set up deliberately as the antithesis of
      everything the Dogs stand for, a sort of mythical straw-man, a
      sociological fable.

      This is underlined by the recurring evidence of Man's aimlessness,
      his constant running hither and yon, his grasping at a way of life
      which constantly eludes him, possibly because he never knows exactly
      what he wants.

      --- Clifford D. Simak, "City" [Notes on the Fifth Tale], 1952.



    Life is a distributed object system.  However, communication among
    humans is a distributed hypermedia system, where the mind's intellect,
    voice+gestures, eyes+ears, and imagination are all components.
      --- Roy T. Fielding, 1998.





Information and Computer Science,
University of California, Irvine
CA 92697-3425

Last modified: 08 Dec 2003
##------------------URL-------------------------##
http://alderis.ics.uci.edu/index.html
##-----------------TITLE------------------------##
Alderis@UCI - Analysis Language for Distributed, Embedded, and Real-time Systems
##------------------TEXT------------------------##
Alderis@UCI
						Analysis Language for Distributed, Embedded, and Real-time Systems.
				
				
				
				DownloadsPublicationsDRE SystemsAMBALinksHome
				
				
				
				
				
						Description
						
						
						
									Alderis is a project hosted at the Center for Embedded Computer Systems (CECS), part of the Donald Bren School of Information and Computer Sciences (ICS) at the University of California, Irvine.
						
						
						
						News

						
							We have released several NuSMV models used for the analysis of a digital camera MPSoC. Click on AMBA to see the models! The results of this analysis were published in the following paper:
						

						
							Gabor Madl, Sudeep Pasricha, Qiang Zhu, Luis Angel D. Bathen, Nikil Dutt: Formal Performance Evaluation of AMBA-based System-on-Chip Designs, Proceedings of EMSOFT 2006. Bibtex.
						

						
The publication is covered by copyright. It is provided for personal use only and may not be distributed.
						
						

		
						
						
								DREAM
								ACES
								FORGE
						
						
						
						
				
				
				
				
				
						
				
						Introduction

						
						
								The Alderis project focuses on the application of Domain Specific Modeling Languages (DSMLs) and meta-modeling to specify a common semantic domain for the analysis of distributed real-time embedded (DRE) systems.
						
						
						
						
						
								The Alderis language has both a visual and textual syntax with formally defined semantics. Alderis models can be verified directly by the open-source Distributed Real-time Embedded Analysis Method (DREAM) tool available for download at http://dre.sourceforge.net.
						
						
						
						
						Motivation

						
						
Component-based development is an emerging paradigm for the design of distributed real-time embedded (DRE) systems with hard QoS support. Components refer to reusable pieces of solutions, which can be configured and composed together to provide a service. Alderis plans to support this paradigm shift by providing a language and semantic domain for the model-driven development (MDD) of DRE systems.
						
						
				
						Model-Driven Development

						
						
The Alderis language is specified using meta-modeling as shown in the figure below. We use the GME modeling environment to specify Alderis. The figure shows a part of the Alderis meta-model with its corresponding concrete syntax. The red arrows show how modeling elements and their relations are specified by the meta-model.

						



						Formal Verification & Analysis

						
						
A key property of the Alderis language is that it has formally defined semantics allowing real-time verification using timed automata model checker tools such as UPPAAL and the Verimag IF toolset. The DREAM tool provides a way to automatically generate the timed automata models from the Alderis specification. DREAM also provides a way for random simulations that can be used efficiently to find bugs in designs that are too large and lead to state space explosions.

						

				
		
		
		
		
		
				
						
								© All the material published on this website is copyrighted. All rights reserved.
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/overview-summary.html
##-----------------TITLE------------------------##
Impromptu Workspace 0.30 Reference
##------------------TEXT------------------------##
OverviewPackage
      
      
        
            FRAMES
          
            NO FRAMES
          
      

      
    
      

      Impromptu Workspace 0.30 Reference

      Packages
                edu.uci.isr.impromptu.common
              
                edu.uci.isr.impromptu.pie
              
                edu.uci.isr.impromptu.pocketpc
              
                edu.uci.isr.impromptu.pocketpc.model
              
                edu.uci.isr.impromptu.repository
              
                edu.uci.isr.impromptu.security
              

    
      
      

      
        OverviewPackage
      
      
        
            FRAMES
          
            NO FRAMES
          
      

      
    
    
          
          Copyright © 2005-2006 Institute for Software Research. All Rights Reserved.
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/allclasses-frame.html
##-----------------TITLE------------------------##
All Classes
##------------------TEXT------------------------##
All Classes

      
            ACLManager
          
            BufferedRequestWrapper
          
            CharResponseWrapper
          
            Configuration
          
            Coordinate
          
            Dot
          
            EventProcessor
          
            EventViewer
          
            InteractiveSVGCanvas
          
            LevelHandler
          
            MessageProcessor
          
            ModelPeer
          
            Overall
          
            PasswordManager
          
            Peer
          
            PeerManager
          
            PeerOwner
          
            PeerQueryProtocol
          
            PeerQueryServer
          
            Pie
          
            PieUtils
          
            Platform
          
            ProxyFilter
          
            ProxyServlet
          
            RepositoryPeer
          
            RepositoryUtils
          
            RootServlet
          
            SecurityConstants
          
            SecurityUtils
          
            SharedFile
          
            SharingLevel
          
            SlicePeer
          
            SlideUserRealm
          
            TinyImpromptu
          
            TinyImpromptuGUI
          
            UserManager
          
            Utils
          
            YanceesConnector
          
            YanceesFilter
          
            YanceesJmDNSService
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/overview-frame.html
##-----------------TITLE------------------------##
Impromptu Workspace 0.30 Reference
##------------------TEXT------------------------##
All Classes
      

      Packages

      
            edu.uci.isr.impromptu.common
          
            edu.uci.isr.impromptu.pie
          
            edu.uci.isr.impromptu.pocketpc
          
            edu.uci.isr.impromptu.pocketpc.model
          
            edu.uci.isr.impromptu.repository
          
            edu.uci.isr.impromptu.security
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/apidocs/overview-frame.html
##-----------------TITLE------------------------##
Overview (Impromptu Workspace 0.30 API)
##------------------TEXT------------------------##
All Classes


Packages

edu.uci.isr.impromptu.common

edu.uci.isr.impromptu.pie

edu.uci.isr.impromptu.pocketpc

edu.uci.isr.impromptu.pocketpc.model

edu.uci.isr.impromptu.repository

edu.uci.isr.impromptu.security




 
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/apidocs/overview-summary.html
##-----------------TITLE------------------------##
Overview (Impromptu Workspace 0.30 API)
##------------------TEXT------------------------##
 Overview     Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes









Impromptu Workspace 0.30 API




Packagesedu.uci.isr.impromptu.common edu.uci.isr.impromptu.pie edu.uci.isr.impromptu.pocketpc edu.uci.isr.impromptu.pocketpc.model edu.uci.isr.impromptu.repository edu.uci.isr.impromptu.security 


 







  Overview     Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes







Copyright © 2005-2006 Institute for Software Research. All Rights Reserved.
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/apidocs/allclasses-frame.html
##-----------------TITLE------------------------##
All Classes (Impromptu Workspace 0.30 API)
##------------------TEXT------------------------##
All Classes


ACLManager

BufferedRequestWrapper

CharResponseWrapper

Configuration

Configuration

Configuration

Coordinate

Dot

EventProcessor

EventViewer

InteractiveSVGCanvas

LevelHandler

MessageProcessor

ModelPeer

Overall

PasswordManager

Peer

PeerManager

PeerOwner

PeerQueryProtocol

PeerQueryServer

Pie

PieUtils

Platform

ProxyFilter

ProxyServlet

RepositoryPeer

RepositoryUtils

RootServlet

SecurityConstants

SecurityUtils

SharedFile

SharingLevel

SlicePeer

SlideUserRealm

TinyImpromptu

TinyImpromptuGUI

UserManager

Utils

YanceesConnector

YanceesFilter

YanceesJmDNSService
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pocketpc/EventViewer.html
##-----------------TITLE------------------------##
EventViewer xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Copyright (c) 2003, Regents of the University of California.
3    * All rights reserved.
4    * 
5    * ===================================================================
6    * The Apache Software License, Version 1.1
7    * 
8    * Redistribution and use in source and binary forms, with or without
9    * modification, are permitted provided that the following conditions
10   * are met:
11   * 
12   * 1. Redistributions of source code must retain the above copyright
13   *    notice, this list of conditions and the following disclaimer.
14   * 
15   * 2. Redistributions in binary form must reproduce the above copyright
16   *    notice, this list of conditions and the following disclaimer in
17   *    the documentation and/or other materials provided with the
18   *    distribution.
19   * 
20   * 3. The end-user documentation included with the redistribution, if
21   *    any, must include the following acknowledgment:
22   *       "This product includes software developed by
23   *        the Institute for Software Research at  
24   *        University of California, Irvine"
25   *    Alternately, this acknowledgment may appear in the software
26   *    itself, if and wherever such third-party acknowledgments normally
27   *    appear.
28   * 
29   * 4. The names "YANCEES", "Institute for Software Research" and
30   *    "University of California" must not be used to
31   *    endorse or promote products derived from this software without
32   *    prior written permission. For written permission, please contact
33   *    rsilvafi@ics.uci.edu or redmiles@ics.uci.edu.
34   * 
35   * 5. Products derived from this software may not be called
36   *    "YANCEES", nor may "YANCEES" appear in their name, without
37   *    prior written permission of the University of California Regents.
38   * 
39   * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
40   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
41   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
42   * IN NO EVENT SHALL THE INSTITUTE FOR SOFTWARE RESEARCH AT THE UNIVERSITY
43   * OF CALIFORNIA, IRVINE, OR ITS CONTRIBUTORS BE LIABLE FOR
44   * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
45   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
46   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
47   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
48   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
49   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
50   * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
51   * ====================================================================
52   */
53  
54  package edu.uci.isr.impromptu.pocketpc;
55  
56  import java.io.File;
57  import java.net.InetAddress;
58  import java.net.MalformedURLException;
59  import java.net.UnknownHostException;
60  import java.rmi.Naming;
61  import java.rmi.RemoteException;
62  import java.rmi.registry.LocateRegistry;
63  import java.rmi.registry.Registry;
64  
65  import edu.uci.isr.impromptu.common.Utils;
66  import edu.uci.isr.yancees.EventInterface;
67  import edu.uci.isr.yancees.GenericMessage;
68  import edu.uci.isr.yancees.SubscriberInterface;
69  import edu.uci.isr.yancees.YanceesEvent;
70  import edu.uci.isr.yancees.YanceesException;
71  import edu.uci.isr.yancees.client.rmi.YanceesRMIClient;
72  import edu.uci.isr.yancees.server.filter.peerpublisher.PeerPublisherInputFilter;
73  import edu.uci.isr.yancees.server.rmi.RemoteYanceesImplementation;
74  
75  
76  /***
77   * Visualizes the events being generated by the peers in the impromptu scenario.
78   * This will be ran and displayed in a pocket PC, in order to suplement the
79   * desktop visualization
80   * 
81   * @author rsilvafi
82   * class created at Jul 27, 2005
83   *
84   */
85  public class EventViewer implements SubscriberInterface {
86  
87  	public static boolean print = true;
88  	
89  	// The Yancees server
90  	private RemoteYanceesImplementation server;
91  
92  	// The Yancees client
93  	private YanceesRMIClient client;
94  
95  	private static String configurationFileName = edu.uci.isr.impromptu.common.Configuration.YANCEES_CONFIGURATION_FILE;
96  	
97  	private String hostname = "localhost";
98  
99  	// the name under which this remote interface will be registered with
100 	// the rmiregistry
101 	//private String instanceName = Utils.getImpromptuName()+edu.uci.isr.impromptu.common.Configuration.REPOSITORY_CHARACTER; 
102 	//private String instanceName = Utils.getImpromptuName()+edu.uci.isr.impromptu.common.Configuration.PIE_CHARACTER;
103 	private String instanceName = Utils.getImpromptuName();
104 	
105 	public static void printUsage() {
106 		System.out.println();
107 		System.out.println("Usage: ");
108 		System.out.println("java EventViewer configurationFile.xml");
109 		System.out.println();
110 	}
111 
112 	public static void main(String[] args) {
113 		
114 		  if (args.length > 1) { 
115 			  printUsage();
116 		  } else if (args.length == 1) {
117 			  configurationFileName = args[0];
118 			  System.out.println("Using configuration file: "+configurationFileName);
119 		  }
120 		 
121 		EventViewer viewer = new EventViewer();
122 	}
123 
124 	// constructor
125 	public EventViewer() {
126 		connectToLocalYancees();
127 		YanceesEvent requrest = generatePeerQueryREQUEST();
128 		try {
129 			client.publish(requrest);
130 		} catch (YanceesException e) {
131 			e.printStackTrace();
132 		}
133 	}
134 	
135 	/***
136 	 * Creates the rmi registry if it is not already started
137 	 */ 
138 	void createRegistry() {
139 	
140 		try {
141 			LocateRegistry.createRegistry(Registry.REGISTRY_PORT);
142 		} catch (RemoteException ri) {
143 			// If there is already one, just use it
144 		}
145 
146 	}
147 	
148 	/*
149 	 * Creates a local YANCEES server that automatically connects to the P2P
150 	 * network of notification servers. As a consequence, it listens to all
151 	 * the relevant events from the network.
152 	 */
153 	void createLocalYanceesServer() {		
154 		String name = "//" + hostname + "/" + instanceName;
155 		
156 		// creates a yancees server instance locally
157 		try {
158 			server = new RemoteYanceesImplementation(new File(
159 					configurationFileName));
160 			Naming.rebind(name, server);
161 			
162 		} catch (RemoteException e) {
163 			e.printStackTrace();
164 		} catch (MalformedURLException e) {
165 			e.printStackTrace();
166 		}
167 
168 	}
169 
170 	/***
171 	 * Connects to the local version of YANCEES and subscribes to all the events
172 	 * being produced by it.
173 	 */
174 	private void connectToLocalYancees() {
175 
176 		try {
177 			
178 			System.out.println("hostname = "+hostname);
179 			System.out.println("instanceName = "+instanceName);
180 			
181 			// connects to the local server through a client interface
182 			client = new YanceesRMIClient(hostname, instanceName);
183 			GenericMessage msg = new GenericMessage(
184 					"<subscription><filter><EQ><name>yancees.version</name>"
185 							+ "<value type=\"yanceesString\">1.0</value></EQ></filter></subscription>");
186 			client.subscribe(msg, this);
187 
188 		} catch (Exception e) {
189 			Utils.handleException(e);
190 		}
191 
192 	}
193 	
194 	/***
195 	 * generates a unique identifier based on current timestamp and this host
196 	 * address. This is may be used to match responses to requests
197 	 * 
198 	 * @return the unique id
199 	 */
200 	protected String generateUniqueId() {
201 		String hostname = null;
202 		try {
203 			hostname = InetAddress.getLocalHost().getHostAddress();
204 		} catch (UnknownHostException e) {
205 			e.printStackTrace();
206 		}
207 		String id = System.currentTimeMillis() + "-" + hostname;
208 
209 		return id;
210 	}
211 	
212 	/***
213 	 * We pack a list of files, with their owners/name, and their sharing level
214 	 * in order to send the results back to the requestor.
215 	 * 
216 	 * @param id  is the identifier of the request that will issue in this
217 	 *            response
218 	 * @return
219 	 */
220 	protected YanceesEvent generatePeerQueryREQUEST() {
221 		YanceesEvent request = new YanceesEvent();
222 
223 		// generates a response to certain session id.
224 		request.put(PeerQueryProtocol.MESSAGE_TYPE, PeerQueryProtocol.REQ_MESSAGE_TYPE);
225 		request.put(PeerQueryProtocol.SESSION_ID, generateUniqueId());
226 		
227 		// We ask the YANCEES server only (without inquiring other peers), to prevent
228 		// response flood.
229 		request.put(PeerPublisherInputFilter.PUBLISH_TO_PEERS, PeerPublisherInputFilter.FALSE);
230 		request.put(PeerQueryProtocol.QUERY_COMMAND, PeerQueryProtocol.CMD_LIST_GLOBAL_FILES);
231 		
232 		return request;
233 	}
234 
235 
236 	/******************** SubscriberInterface implementation *******************/
237 	
238 	/***
239 	 * Get response notification
240 	 * @see edu.uci.isr.yancees.SubscriberInterface#notify(edu.uci.isr.yancees.EventInterface)
241 	 */
242 	public void notify(EventInterface msg) {
243 		if (print)
244 			System.out.println("EventViewer: got event "+msg.toString());
245 		
246 		YanceesEvent message = (YanceesEvent) msg;
247 		
248 		// If the message received is a response
249 		if (message.containsAttribute(PeerQueryProtocol.MESSAGE_TYPE)
250 				&& ((String) message.get(PeerQueryProtocol.MESSAGE_TYPE))
251 						.equals(PeerQueryProtocol.RESP_MESSAGE_TYPE)) {
252 	
253 			String sessionId = (String) message.get(PeerQueryProtocol.SESSION_ID);
254 			if (print)
255 				System.out.println("EventViewer: got event response for session: "+sessionId);
256 			
257 		}
258 		
259 	}
260 
261 	/***
262 	 * Get eventual response notification in the form of a pattern
263 	 * @see edu.uci.isr.yancees.SubscriberInterface#notify(edu.uci.isr.yancees.EventInterface)
264 	 */
265 	public void notify(EventInterface[] pattern) {
266 		for (int i = 0; i < pattern.length; i++) {
267 			notify(pattern[i]);
268 		}
269 	}
270 
271 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pocketpc/TinyImpromptuGUI.html
##-----------------TITLE------------------------##
TinyImpromptuGUI xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Copyright (c) 2003, Regents of the University of California.
3    * All rights reserved.
4    * 
5    * ===================================================================
6    * The Apache Software License, Version 1.1
7    * 
8    * Redistribution and use in source and binary forms, with or without
9    * modification, are permitted provided that the following conditions
10   * are met:
11   * 
12   * 1. Redistributions of source code must retain the above copyright
13   *    notice, this list of conditions and the following disclaimer.
14   * 
15   * 2. Redistributions in binary form must reproduce the above copyright
16   *    notice, this list of conditions and the following disclaimer in
17   *    the documentation and/or other materials provided with the
18   *    distribution.
19   * 
20   * 3. The end-user documentation included with the redistribution, if
21   *    any, must include the following acknowledgment:
22   *       "This product includes software developed by
23   *        the Institute for Software Research at  
24   *        University of California, Irvine"
25   *    Alternately, this acknowledgment may appear in the software
26   *    itself, if and wherever such third-party acknowledgments normally
27   *    appear.
28   * 
29   * 4. The names "YANCEES", "Institute for Software Research" and
30   *    "University of California" must not be used to
31   *    endorse or promote products derived from this software without
32   *    prior written permission. For written permission, please contact
33   *    rsilvafi@ics.uci.edu or redmiles@ics.uci.edu.
34   * 
35   * 5. Products derived from this software may not be called
36   *    "YANCEES", nor may "YANCEES" appear in their name, without
37   *    prior written permission of the University of California Regents.
38   * 
39   * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
40   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
41   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
42   * IN NO EVENT SHALL THE INSTITUTE FOR SOFTWARE RESEARCH AT THE UNIVERSITY
43   * OF CALIFORNIA, IRVINE, OR ITS CONTRIBUTORS BE LIABLE FOR
44   * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
45   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
46   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
47   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
48   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
49   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
50   * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
51   * ====================================================================
52   */
53   
54  package edu.uci.isr.impromptu.pocketpc;
55  
56  
57  import java.util.HashMap;
58  import java.util.Iterator;
59  
60  import org.eclipse.swt.SWT;
61  import org.eclipse.swt.graphics.Color;
62  import org.eclipse.swt.layout.FillLayout;
63  import org.eclipse.swt.widgets.Display;
64  import org.eclipse.swt.widgets.Menu;
65  import org.eclipse.swt.widgets.Shell;
66  
67  import edu.uci.isr.impromptu.pocketpc.model.ModelPeer;
68  
69  
70  /***
71   * This shell provides the GUI for the TinyImpromptu application
72   * 
73   * @author rsilvafi
74   * class created at Jul 29, 2005
75   *
76   */
77  public class TinyImpromptuGUI {
78  
79  	public static int LEVEL_PERSISTENT=4;
80  	public static int LEVEL_READ_WRITE=3;
81  	public static int LEVEL_READ=2;
82  	public static int LEVEL_SEE=1;
83  	public static int LEVEL_PRIVATE=0;
84  	
85  	public static String PERSISTENT="persistent";
86  	public static String READ_WRITE="read/write";
87  	public static String READ="read";
88  	public static String SEE="see";
89  	public static String PRIVATE="private";
90  	
91  
92  	Color myColor = null;
93  	EventProcessor eventProcessor = null;
94  	
95  	// turns on and off the debug information printing
96  	boolean print = true;
97  
98  	private Shell shell;
99  	private Display display;
100 	
101 	// peer database
102 	HashMap peerMap = new HashMap(); // a map of ModelPeer elements indexed by the peer name
103 	
104 
105 	// the name under which this remote interface will be registered with
106 	// the rmiregistry
107 	// private String instanceName =
108 	// Utils.getImpromptuName()+edu.uci.isr.impromptu.common.Configuration.REPOSITORY_CHARACTER;
109 	// private String instanceName =
110 	// Utils.getImpromptuName()+edu.uci.isr.impromptu.common.Configuration.PIE_CHARACTER;
111 	
112 	//private String instanceName = Utils.getImpromptuName();
113 
114 	// constructor
115 	public TinyImpromptuGUI() {
116 		
117 		setUpGUI();
118 		eventProcessor = new EventProcessor(this);
119 		eventProcessor.start();
120 		
121 		// after all the widgets are drawn, we compress them to fit the screen
122 		//shell.pack();
123 		shell.open();
124 
125 		// waits while the main display is open, i.e. the application is running
126 		while (shell != null && !shell.isDisposed()) {
127 			
128 			if (display != null && !display.readAndDispatch())
129 				display.sleep();
130 			}
131 				
132 		if (shell != null)
133 			shell.dispose();	
134 		
135 		if (display != null)
136 			display.dispose();
137 						
138 	}
139 	
140 	public Shell getShell() {
141 		return shell;
142 	}
143 	
144 	public Display getDisplay() {
145 		return display;
146 	}
147 	
148 	// Creates the initial display and shell
149 	protected void setUpGUI() {
150 		
151 		display = new Display();
152 				
153 		/*
154 		 * Create a Shell with the default style i.e. full screen, no decoration
155 		 * on PocketPC. Alternative: 'new Shell(display, SWT.CLOSE)' to get the
156 		 * Pocket PC 'Ok' button.
157 		 */
158 		// Shell shell = new Shell(display, SWT.RESIZE | SWT.CLOSE);
159 		shell = new Shell(display, SWT.RESIZE);
160 		//shell = new Shell(display);
161 		
162 		/*
163 		 * Set a text so that the top level Shell also appears in the Pocket PC
164 		 * task list
165 		 */
166 		shell.setText("TinyImpromptu");
167 		
168 		/*
169 		 * Set a menubar to follow UI guidelines on Pocket PC
170 		 */
171 		Menu mb = new Menu(shell, SWT.BAR);
172 		shell.setMenuBar(mb);
173 		
174 		/*
175 		 * Add widgets
176 		 */	
177 		FillLayout layout = new FillLayout();
178 		layout.type = SWT.VERTICAL;
179 		shell.setLayout(layout);
180 		
181 		// Display the interface...
182 		shell.setSize(229, 255);
183 				
184 		//shell.setRedraw(true);
185 		//shell.layout();
186 		//shell.pack(); // compresses widgets to fit minimal space
187 		
188 	}
189 
190 
191 	/***
192 	 * New peer arrived in the network
193 	 * @param peerName is the name of the peer
194 	 */
195 	public void addPeer(String peerName, Color color) {
196 		System.out.println("TinyImpromptuGUI: Got ADD_PEER: "+peerName);
197 		
198 		// if peer was not added before...
199 		if (! peerMap.containsKey(peerName)) {
200 			ModelPeer newPeer = new ModelPeer(peerName, shell, color);
201 			synchronized(peerMap) {
202 				peerMap.put(peerName, newPeer);
203 			}
204 		}		
205 	}
206 	
207 	/***
208 	 * The peer left the network with all its files
209 	 * @param peerName is the name of the peer
210 	 */
211 	public void shutdownPeer(String peerName) {
212 		System.out.println("TinyImpromptuGUI: Got SHUTDOWN: "+peerName);
213 		
214 		System.out.println("peer for "+peerName+" is "+peerMap.get(peerName));
215 		
216 		ModelPeer existingPeer = (ModelPeer) peerMap.get(peerName);
217 		
218 		if (existingPeer != null)
219 			existingPeer.dispose();
220 		
221 		synchronized (peerMap) {
222 			peerMap.remove(peerName);
223 		}
224 	}
225 	
226 	/***
227 	 * A file was moved, not necessarily to another sharing level, hence, we must
228 	 * check for it
229 	 * @param ownerPeer is the peer who moved his own file
230 	 * @param filename is the name of the file
231 	 * @param newLevelNumber is the target level. Maybe the same as before
232 	 */
233 	public void moveFile(String ownerPeer, String filename, int newLevelNumber) {
234 		System.out.println("TinyImpromptuGUI: Got MOVE: "+ownerPeer+", "+filename+", "+newLevelNumber);
235 		
236 		ModelPeer existingPeer = (ModelPeer) peerMap.get(ownerPeer);
237 		if (existingPeer != null) {
238 			existingPeer.moveFile(filename, newLevelNumber);
239 		}
240 	}
241 	
242 	/***
243 	 * A file, previously being shared, was removed.
244 	 * @param ownerPeer is the onwer of the file, the one who removed it
245 	 * @param filename is the name of the file
246 	 */
247 	public void removeFile(String ownerPeer, String filename) {
248 		System.out.println("TinyImpromptuGUI: Got REMOVE: "+ownerPeer+", "+filename);
249 		
250 		ModelPeer existingPeer = (ModelPeer) peerMap.get(ownerPeer);
251 		if (existingPeer != null) {
252 			existingPeer.removeFile(filename);
253 		}
254 	}
255 	
256 	/***
257 	 * A new file was added by a peer at a given sharing level
258 	 * @param onwerPeer is the owner of the new file
259 	 * @param filename is the name of the file
260 	 * @param levelNumber is the initial sharing level of the file
261 	 */
262 	public void addFile (String ownerPeer, String filename, int levelNumber) {
263 		System.out.println("TinyImpromptuGUI: Got ADD: "+ownerPeer+", "+filename+", "+levelNumber);
264 		
265 		ModelPeer existingPeer = (ModelPeer) peerMap.get(ownerPeer);
266 		if (existingPeer != null) {
267 			existingPeer.addFile(filename, levelNumber);
268 		}	
269 	}
270 	
271 	// **********************************************************************
272 	// those are important methods that need to be shown in the visualization
273 	// **********************************************************************
274 	
275 	/***
276 	 * A file, owned by onwerPeer was read by some actor
277 	 * @param ownerPeer is the owner of the file
278 	 * @param filename is the name of the file
279 	 * @param actor is the peer who read the file
280 	 */
281 	public void readFile (String ownerPeer, String filename,  String actor) {
282 		System.out.println("TinyImpromptuGUI: Got READ: "+ownerPeer+", "+filename+", "+actor);
283 	}
284 	
285 	/***
286 	 * A file, owned by onwerPeer was written by some actor
287 	 * @param ownerPeer is the owner of the file
288 	 * @param filename is the name of the file
289 	 * @param actor is the peer who read the file
290 	 */
291 	public void writeFile (String ownerPeer, String filename,  String actor) {
292 		System.out.println("TinyImpromptuGUI: Got WRITE: "+ownerPeer+", "+filename+", "+actor);
293 	}
294 	
295 	
296 	protected void finalize() throws Throwable {
297 	    super.finalize();
298 	    
299 	    for (Iterator iter = peerMap.entrySet().iterator(); iter.hasNext();) {
300 			ModelPeer element = (ModelPeer) iter.next();
301 			element.dispose();
302 		}
303 	    
304 	}
305 	
306 	
307 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pocketpc/EventProcessor.html
##-----------------TITLE------------------------##
EventProcessor xref
##------------------TEXT------------------------##
View Javadoc

1    /*
2    * Copyright (c) 2003, Regents of the University of California.
3    * All rights reserved.
4    * 
5    * ===================================================================
6    * The Apache Software License, Version 1.1
7    * 
8    * Redistribution and use in source and binary forms, with or without
9    * modification, are permitted provided that the following conditions
10   * are met:
11   * 
12   * 1. Redistributions of source code must retain the above copyright
13   *    notice, this list of conditions and the following disclaimer.
14   * 
15   * 2. Redistributions in binary form must reproduce the above copyright
16   *    notice, this list of conditions and the following disclaimer in
17   *    the documentation and/or other materials provided with the
18   *    distribution.
19   * 
20   * 3. The end-user documentation included with the redistribution, if
21   *    any, must include the following acknowledgment:
22   *       "This product includes software developed by
23   *        the Institute for Software Research at  
24   *        University of California, Irvine"
25   *    Alternately, this acknowledgment may appear in the software
26   *    itself, if and wherever such third-party acknowledgments normally
27   *    appear.
28   * 
29   * 4. The names "YANCEES", "Institute for Software Research" and
30   *    "University of California" must not be used to
31   *    endorse or promote products derived from this software without
32   *    prior written permission. For written permission, please contact
33   *    rsilvafi@ics.uci.edu or redmiles@ics.uci.edu.
34   * 
35   * 5. Products derived from this software may not be called
36   *    "YANCEES", nor may "YANCEES" appear in their name, without
37   *    prior written permission of the University of California Regents.
38   * 
39   * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
40   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
41   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
42   * IN NO EVENT SHALL THE INSTITUTE FOR SOFTWARE RESEARCH AT THE UNIVERSITY
43   * OF CALIFORNIA, IRVINE, OR ITS CONTRIBUTORS BE LIABLE FOR
44   * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
45   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
46   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
47   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
48   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
49   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
50   * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
51   * ====================================================================
52   */
53   
54  package edu.uci.isr.impromptu.pocketpc;
55  
56  import java.net.InetAddress;
57  import java.net.UnknownHostException;
58  import java.util.Iterator;
59  import java.util.StringTokenizer;
60  
61  import org.eclipse.swt.graphics.Color;
62  import org.eclipse.swt.graphics.RGB;
63  
64  import edu.uci.isr.impromptu.common.MessageProcessor;
65  import edu.uci.isr.yancees.AttributeNotFoundException;
66  import edu.uci.isr.yancees.EventInterface;
67  import edu.uci.isr.yancees.GenericMessage;
68  import edu.uci.isr.yancees.SubscriberInterface;
69  import edu.uci.isr.yancees.WrongAttributeTypeException;
70  import edu.uci.isr.yancees.YanceesEvent;
71  import edu.uci.isr.yancees.YanceesException;
72  import edu.uci.isr.yancees.client.rmi.YanceesRMIClient;
73  import edu.uci.isr.yancees.server.filter.peerpublisher.PeerPublisherInputFilter;
74  
75  /***
76   * Receives events from the peers and process them.
77   * @author rsilvafi class created at Aug 1, 2005
78   */
79  public class EventProcessor extends Thread implements SubscriberInterface {
80  
81  	boolean print = true;
82  	boolean createdInitialModel = false; // prevents duplicated message processing
83  	
84  	TinyImpromptuGUI model = null;
85  
86  	// The Yancees client
87  	private YanceesRMIClient client;
88  
89  	private String hostname = TinyImpromptu.yanceesHostname;
90  
91  	// the name under which this remote interface will be registered with
92  	// the rmiregistry
93  	// private String instanceName =
94  	// Utils.getImpromptuName()+edu.uci.isr.impromptu.common.Configuration.REPOSITORY_CHARACTER;
95  	// private String instanceName =
96  	// Utils.getImpromptuName()+edu.uci.isr.impromptu.common.Configuration.PIE_CHARACTER;
97  	private String instanceName = getImpromptuName();
98  
99  	
100 	/***
101      * Get the name used to designate the impromptu instance
102      * @return the name. It is the property user.name, unless
103      * the property impromptu.name is set.
104      */
105     private String getImpromptuName() {
106     	String impromptuName = TinyImpromptu.instanceName;
107     	
108     	/*
109     	String impromptuName = System.getProperty("impromptu.name"); 	
110 		if (impromptuName==null) {
111             impromptuName = System.getProperty("user.name");
112         }
113         */
114 		
115         return impromptuName;
116     }
117 	
118 	/***
119 	 * constructor
120 	 * 
121 	 * @param gui
122 	 *            is a reference to the application GUI that will be updated
123 	 *            as new peers get in and out and files get dragged around.
124 	 */
125 	public EventProcessor(TinyImpromptuGUI gui) {
126 		model = gui;		
127 	}
128 
129 	/***
130 	 * Connects to the local version of YANCEES and subscribes to all the
131 	 * events being produced by it.
132 	 */
133 	private void connectAndSubscribeToLocalYancees() {
134 
135 		try {
136 			System.out.println("hostname = " + hostname);
137 			System.out.println("instanceName = " + instanceName);
138 
139 			// connects to the local server through a client interface
140 			client = new YanceesRMIClient(hostname, instanceName);
141 			GenericMessage msg = new GenericMessage(
142 					"<subscription><filter><EQ><name>yancees.version</name>"
143 							+ "<value type=\"yanceesString\">1.0</value></EQ></filter></subscription>");
144 			client.subscribe(msg, this);
145 
146 		} catch (Exception e) {
147 			System.out.println(e);
148 		}
149 
150 	}
151 
152 	/***
153 	 * We pack a list of files, with their owners/name, and their sharing
154 	 * level in order to send the results back to the requestor.
155 	 * 
156 	 * @param id
157 	 *            is the identifier of the request that will issue in this
158 	 *            response
159 	 * @return
160 	 */
161 	protected YanceesEvent generatePeerQueryREQUEST() {
162 		YanceesEvent request = new YanceesEvent();
163 
164 		// generates a response to certain session id.
165 		request.put(PeerQueryProtocol.MESSAGE_TYPE,
166 				PeerQueryProtocol.REQ_MESSAGE_TYPE);
167 		request.put(PeerQueryProtocol.SESSION_ID, generateUniqueId());
168 
169 		// We ask the YANCEES server only (without inquiring other peers),
170 		// to prevent
171 		// response flood.
172 		
173 		/*
174 		request.put(PeerPublisherInputFilter.PUBLISH_TO_PEERS,
175 				PeerPublisherInputFilter.FALSE);
176 		*/
177 		request.put(PeerPublisherInputFilter.PUBLISH_TO_PEERS,
178 				PeerPublisherInputFilter.TRUE);
179 		
180 		
181 		request.put(PeerQueryProtocol.QUERY_COMMAND,
182 				PeerQueryProtocol.CMD_LIST_GLOBAL_FILES);
183 
184 		return request;
185 	}
186 
187 	/***
188 	 * generates a unique identifier based on current timestamp and this
189 	 * host address. This is may be used to match responses to requests
190 	 * 
191 	 * @return the unique id
192 	 */
193 	protected String generateUniqueId() {
194 		String hostname = null;
195 		try {
196 			hostname = InetAddress.getLocalHost().getHostAddress();
197 		} catch (UnknownHostException e) {
198 			e.printStackTrace();
199 		}
200 
201 		String id = System.currentTimeMillis() + "-" + hostname;
202 
203 		return id;
204 	}
205 
206 	// main application process
207 	public void run() {
208 
209 		System.out.print("EventProcessor: connecting to local yancees... ");
210 		connectAndSubscribeToLocalYancees();
211 		System.out.println("[OK]");
212 		System.out.print("EventProcessor: generating peer query request...");
213 		YanceesEvent requrest = generatePeerQueryREQUEST();
214 		try {
215 			client.publish(requrest);
216 		} catch (YanceesException e) {
217 			e.printStackTrace();
218 		}
219 		System.out.println("[OK]");
220 
221 		// waits indefinitely until the application is terminated.
222 		
223 		while (true) {
224 			try {
225 				Thread.sleep(100);
226 			} catch (InterruptedException e) {
227 				e.printStackTrace();
228 			}
229 		}
230 		
231 	}
232 
233 // ******************** SubscriberInterface implementation *****************
234 
235 	/***
236 	 * Get eventual response notification in the form of a pattern
237 	 * 
238 	 * @see edu.uci.isr.yancees.SubscriberInterface#notify(edu.uci.isr.yancees.EventInterface)
239 	 */
240 	public void notify(EventInterface[] pattern) {
241 		for (int i = 0; i < pattern.length; i++) {
242 			notify(pattern[i]);
243 		}
244 	}
245 
246 	public void notify(EventInterface msg) {
247 		if (print)
248 			System.out.println("EventViewer: got event " + msg.toString());
249 
250 		final YanceesEvent message = (YanceesEvent) msg;
251 
252 		// If the message received is a response
253 		if (message.containsAttribute(PeerQueryProtocol.MESSAGE_TYPE)
254 				&& ((String) message.get(PeerQueryProtocol.MESSAGE_TYPE))
255 						.equals(PeerQueryProtocol.RESP_MESSAGE_TYPE)) {
256 
257 			String sessionId = (String) message
258 					.get(PeerQueryProtocol.SESSION_ID);
259 			if (print)
260 				System.out
261 						.println("EventViewer: got event response for session: "
262 								+ sessionId);
263 
264 			// if the model was already created, do not create again..
265 			if (! this.createdInitialModel) {
266 				
267 				synchronized(model.getDisplay()) {
268 				
269 					// This is necessary to prevent org.eclipse.swt.SWTException: Invalid thread access exception
270 					model.getDisplay().syncExec (new Runnable () {
271 						public void run () {
272 							System.out.println("Creating thead to call createDistributedModel()");
273 							createDistributedModel(message);
274 							
275 							System.out.println("Finish thead that called createDistributedModel()");
276 						}
277 					});
278 					//model.getDisplay().update();
279 				
280 				}
281 			}
282 			
283 		} else {
284 			
285 			synchronized(model.getDisplay()) {
286 				// This is necessary to prevent org.eclipse.swt.SWTException: Invalid thread access exception
287 				model.getDisplay().syncExec (new Runnable () {
288 					public void run () {
289 						System.out.println("Creating thead to call updateDistributedModel()");
290 						updateDistributedModel(message);
291 						
292 						System.out.println("Finish thead that called updateDistributedModel()");
293 					}
294 				});
295 				
296 				//model.getDisplay().update();
297 			
298 			}
299 		}
300 	}
301 
302 	public RGB getRGBFromString(String str) {
303 		RGB rgb = null;
304 		
305 		if (str.startsWith("rgb(")) {
306 			
307 			String tail = str.substring(4); // remove the "rgb("
308 			tail = tail.substring(0,tail.length()-1); // remove the ")"
309 			
310 			StringTokenizer st = new StringTokenizer(tail,",");
311 			
312 			int r = Integer.parseInt(st.nextToken());
313 			int g = Integer.parseInt(st.nextToken());
314 			int b = Integer.parseInt(st.nextToken());
315 			
316 			/*
317 			System.out.print("RGB: ");
318 			System.out.print(r+", ");
319 			System.out.print(g+", ");
320 			System.out.println(b);
321 			*/
322 			
323 			rgb = new RGB(r,g,b);
324 			
325 		} else {
326 			System.out.println("Not a valid RGB format: "+str);
327 		}
328 		
329 		return rgb;
330 	}
331 	
332 	
333 	private void updateDistributedModel(YanceesEvent message) {
334 		if (message.containsAttribute(MessageProcessor.ATTR_ACTION)) {
335 			String actionCommand = null;
336 			String ownerPeer = null;
337 			
338 			if (print)
339 				System.out.println("EventProcessor: updateDistirbutedModel() for message "+message);
340 
341 			try {
342 
343 				actionCommand = message.getString(MessageProcessor.ATTR_ACTION);
344 				ownerPeer = message.getString(MessageProcessor.ATTR_PEER_NAME);
345 
346 				if (actionCommand.equals(MessageProcessor.ACTION_ADD)) {
347 					int level = Integer.parseInt(message
348 							.getString(MessageProcessor.ATTR_LEVEL));
349 					String filename = message
350 							.getString(MessageProcessor.ATTR_FILE_NAME);
351 					model.addFile(ownerPeer, filename, level);
352 
353 				} else if (actionCommand
354 						.equals(MessageProcessor.ACTION_ADD_PEER)) {
355 					
356 					String rgbColorString = message.getString(MessageProcessor.ATTR_COLOR);
357 					System.out.println("Read Color: "+rgbColorString);
358 					
359 					model.addPeer(ownerPeer, new Color(model.getDisplay(), getRGBFromString(rgbColorString)));
360 
361 				} else if (actionCommand
362 						.equals(MessageProcessor.ACTION_MOVE)) {
363 					int level = Integer.parseInt(message
364 							.getString(MessageProcessor.ATTR_LEVEL));
365 					String filename = message
366 							.getString(MessageProcessor.ATTR_FILE_NAME);
367 					model.moveFile(ownerPeer, filename, level);
368 
369 				} else if (actionCommand
370 						.equals(MessageProcessor.ACTION_REMOVE)) {
371 					String filename = message
372 							.getString(MessageProcessor.ATTR_FILE_NAME);
373 					model.removeFile(ownerPeer, filename);
374 
375 				} else if (actionCommand
376 						.equals(MessageProcessor.ACTION_SHUTDOWN)) {
377 					model.shutdownPeer(ownerPeer);
378 
379 				} else if (actionCommand
380 						.equals(MessageProcessor.ACTION_READ)) {
381 					String filename = message
382 							.getString(MessageProcessor.ATTR_FILE_NAME);
383 					String actor = message
384 							.getString(MessageProcessor.ATTR_ACTOR);
385 					model.readFile(ownerPeer, filename, actor);
386 
387 				} else if (actionCommand
388 						.equals(MessageProcessor.ACTION_WRITE)) {
389 					String filename = message
390 							.getString(MessageProcessor.ATTR_FILE_NAME);
391 					String actor = message
392 							.getString(MessageProcessor.ATTR_ACTOR);
393 					model.writeFile(ownerPeer, filename, actor);
394 
395 				}
396 
397 			} catch (WrongAttributeTypeException e) {
398 				// TODO Auto-generated catch block
399 				e.printStackTrace();
400 			} catch (AttributeNotFoundException e) {
401 				// TODO Auto-generated catch block
402 				e.printStackTrace();
403 			}
404 			if (actionCommand != null) {
405 				if (actionCommand
406 						.equalsIgnoreCase(MessageProcessor.ACTION_ADD)) {
407 
408 				}
409 			}
410 		}
411 
412 	}
413 
414 	/***
415 	 * Processes initial model as returned by the peer query requrest.
416 	 * 
417 	 * @param message
418 	 *            is the return message having a list of peers, their files
419 	 *            with their respective sharing levels.
420 	 */
421 
422 	private void createDistributedModel(YanceesEvent message) {
423 
424 		if (print)
425 			System.out.println("EventProcessor: createDistirbutedModel() for message "+message);
426 		
427 		// First add all peers
428 		for (Iterator iter = message.getAttributeNamesIterator(); iter
429 				.hasNext();) {
430 			String attName = (String) iter.next();
431 
432 			try {
433 
434 				if (attName.startsWith(PeerQueryProtocol.PEER)) {
435 					
436 					String ownerPeer = attName.substring(PeerQueryProtocol.PEER.length());
437 					String ownerColorRGBString = message.getString(attName);
438 					
439 					model.addPeer(ownerPeer, new org.eclipse.swt.graphics.Color(model.getDisplay(), this.getRGBFromString(ownerColorRGBString)));
440 				}
441 
442 			} catch (NumberFormatException e) {
443 				// TODO Auto-generated catch block
444 				e.printStackTrace();
445 			} catch (WrongAttributeTypeException e) {
446 				// TODO Auto-generated catch block
447 				e.printStackTrace();
448 			} catch (AttributeNotFoundException e) {
449 				// TODO Auto-generated catch block
450 				e.printStackTrace();
451 			}
452 		}
453 
454 		// Then add all files
455 		for (Iterator iter = message.getAttributeNamesIterator(); iter
456 				.hasNext();) {
457 			String attName = (String) iter.next();
458 
459 			try {
460 				if (attName.startsWith(PeerQueryProtocol.FILE)) {
461 
462 					int sharingLevel = Integer.parseInt(message
463 							.getString(attName));
464 					String ownerFile = attName.substring(PeerQueryProtocol.FILE.length());
465 					//System.out.println("owner+File = "+ownerFile);
466 					
467 					String owner = ownerFile.substring(0, ownerFile.indexOf("/"));
468 					String file = ownerFile.substring(ownerFile.indexOf("/")+1); 
469 									
470 					/*
471 					System.out.println("got owner "+owner);
472 					System.out.println("got file "+file);
473 					*/
474 					
475 					model.addFile(owner, file, sharingLevel);
476 				}
477 			} catch (NumberFormatException e) {
478 				// TODO Auto-generated catch block
479 				e.printStackTrace();
480 			} catch (WrongAttributeTypeException e) {
481 				// TODO Auto-generated catch block
482 				e.printStackTrace();
483 			} catch (AttributeNotFoundException e) {
484 				// TODO Auto-generated catch block
485 				e.printStackTrace();
486 			}
487 
488 		}
489 		this.createdInitialModel = true;
490 
491 	}
492 
493 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Nimio
##-----------------TITLE------------------------##
Nimio - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Nimio
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    
Ambient: Lying round, surrounding, encircling, encompassing, environing.

Ambience: Environment, surroundings; atmosphere.

(From the Oxford English Dictionary)

Human behavior is highly nuanced and richly contextualized. Our technological systems, on the other hand, are not. Mark Ackerman refers to this contradiction between behavior and technology as the socio-technical gap, the divide between what we know we must support socially and we are actually able to support technically. Similarly, there is a gap between ambient information and man-made displays designed to manifest some aspect of that ambient information. What is it about man-made displays that make them seem “artificial”, as opposed to the “natural” manifestations of ambient information humans encounter on a day-to-day basis in everyday life?
The bulk of ambient display work has focused on ambient displays as peripheral, rather than focal, sources of information. Moving information off the computer screen, ambient displays have often gone hand in hand with tangible interfaces.
We wish to move beyond the dichotomy of peripheral and focal, a metaphor based on foveal vision. Rather than display information to be consumed by the eyes and the brain, we are interested in supporting a different kind of knowledge, embedded socially and physically in one’s environment. 
We build ambient displays in space. We understand space to be produced by embodied social actors. To quote Doreen Massey, we think of places as “articulate moments in networks of social relations and understandings”, and as such they are processes rather than things. We mean our systems to be part of the process of place. Within that space, ambient information can assume various forms of media, all of which can be perceived by one of our five senses: light, sound, movement, air flow,etc. 
We build systems that:

Articulate social action in space, not only by individuals, but aggregating action in a way that highlights the community.
Are open to interpretation.
Are known over time and by moving around the space.
Are understood by observing each other’s actions both directly and through the system.
Display information that changes dynamically

Projects past, present and future (soon to be links):

Signalplay
Nimio
Judy’s IM thing
Amanda’s access point thing
Johanna’s thing

List of topics for the manifesto:
focal/peripheral (attention)
the environment
foreground/background (it’s a cultural thing)
If ambient information is everywhere around us, what keeps us from cognition overload? Take, for example, a teenager throwing a party at his house while his parents are away. In the midst of a conversation with a friend, he moves with the rhythm of the music, recognizes the sound of his parents’ car coming up the driveway, and registers the crashing sound of a lamp as it is knocked over and falls to the floor. People are adept at processing and differentiating multiple sources of information simultaneously. The ability to focus one’s attention on a single entity among a cacophony of conversations and background noise is known as the “cocktail party effect.” People are highly skilled at selecting the sources of information to focus on in the foreground of their attention, as well as swapping sources from the background to the foreground and vice versa. While the selective attention ability is highly context-dependent, it is also determined, in part, by cultural factors. [Elephants on the street in Thailand example] 
passive/active
intuitive/instinctive/natural
mappings (only come into play when info is thought of as separate from the display) 


Some links/papers:
Tangible Bits
Heuristic Evaluation of Ambient Displays 
Is a Picture Worth a Thousand Words? An Evaluation of Information Awareness Displays
Exploring the Design and Use of Peripheral Displays of Awareness Information
ambientROOM: Integrating Ambient Media with Architectural Space
Interactive Public Ambient Displays: Transitioning from Implicit to Explicit, Public to Personal, Interaction with Multiple Users
Promoting Awareness of Work Activities Through Peripheral Displays
Situated Interaction with Ambient Information: Facilitating Awareness and Communication in Ubiquitous Work Environments
Support For Multitasking and Background Awareness Using Interactive Peripheral Displays
Ambient Displays: Turning Architectural Space into an Interface between People and Digital Information 




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Nimio"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 03:19, 13 March 2006.This page has been accessed 4,960 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/ICS235a_Winter2006
##-----------------TITLE------------------------##
ICS235a Winter2006 - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
ICS235a Winter2006
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    [edit] Projects 
Public Transportation



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/ICS235a_Winter2006"
	    Categories: Ics235a winter2006	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 23:48, 17 January 2006.This page has been accessed 4,053 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:Community_Portal
##-----------------TITLE------------------------##
Wiki for Paul Dourish's Research Group:Community Portal - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Wiki for Paul Dourish's Research Group:Community Portal
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    (There is currently no text in this page)

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:Community_Portal"
	    	    
	    
	  
	
      
      
	
	  Views
	  Project pageDiscussionEdit
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Advancements_and_defenses
##-----------------TITLE------------------------##
Advancements and defenses - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Advancements and defenses
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    There are basically four sorts of defenses, which different slightly (in terms of the audience, constitution of the committee, etc) but are basically similar in form. The four are Masters thesis defenses, candidacy exams, topic defenses, and PhD dissertation defenses.
Masters thesis defenses are the rarest of these. Most MS students don't do the dissertation option, and even when they do, there is no requirement for a defense. I like to have defenses for these though, not because I am evil and sadistic but rather because I think it's an appropriate way to celebrate the effort that's gone into it. It ought to be a positive and enjoyable experience!
The general format of all these exams is that the candidate gives a presentation, which is followed by a period of questions from the committee, and optionally a period of open questions from the audience. In general, we give the committee priority in asking questions, and open things up to the audience only once the committee questions are exhausted. (This is a good thing. The audience tends to ask tougher questions.) Topic proposals are generally closed, and so there's no audience; the other exams are, by default, open, although you can request a closed candidacy exam. This doesn't happen often. Final defenses are always public. Of course, that's not to say that an audience always turns up.
In general, I think that shorter talks are better than longer ones, giving more time for discussion. Especially for a candidacy and a topic proposal, the committee questions and discussion are the most valuable part of the process, because that is the time when you get to take advantage of having brought this set of people together to focus for an hour or two on your particular problems. The committee's questions are not normally designed to trip you up; they are designed to initiate discussions about issues that may be important for your dissertation research. Normally, I'd recommend limiting your talk to 30 minutes for one of these exams, and 45 minutes for a PhD defense.
Print out copies of your slides in advance, between 3 and 6 slides per page, and make copies for all the members of your committee.
When you're booking a room for the talk, bear in mind how many peeople are on the committee, and how many other people might want to attend. 
It's customary for the candidate to provide refreshments. Certainly, if you schedule an exam in the morning, it's a really good idea to have coffee and/or tea for your committee; you don't want them to be suffering from caffeine defficiency during the exam. Water is good too, and something to munch. When there are no refreshments, we've been known to send the candidate out to get stuff before we'd start. (In some places, it is the custom that the student is responsible for finding out just what every committee member's preferred refreshments would be, but we don't normally go to such extremes.)
See the Student Affairs office in advance of the exam. You may need to tell them the title and abstract for your talk so that it can be advertised appropriately. You should also make sure that you know what paperwork you need to bring to the exam. For an MS and PhD defense, for instance, we need to sign a form and also a signature page that will go into your dissertation. If you don't get people's signatures while they're all in the room, life will be much more complicated; the logistics of assembling everyone into one place is frequently one of the most complicated parts of the process.



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Advancements_and_defenses"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 00:12, 25 June 2007.This page has been accessed 2,167 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Journals_and_Reading_Pointers
##-----------------TITLE------------------------##
Journals and Reading Pointers - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Journals and Reading Pointers
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    For Ubicomp, go to http://antpac.lib.uci.edu and search as keywords for "LNCS online ####". The relevant numbers are:

 Ubicomp 2001 is 2201
 Ubicomp 2002 is 2498
 Ubicomp 2003 is 2864
 Ubicomp 2004 is 3205 (or click here: Ubicomp 2004)
 Ubicomp 2005 is 3660 (or click here: Ubicomp 2005)
 Ubicomp 2006 is 4206 (or click here: Ubicomp 2006)




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Journals_and_Reading_Pointers"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 19:22, 27 June 2007.This page has been accessed 6,095 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Urban_Bibliography
##-----------------TITLE------------------------##
Urban Bibliography - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Urban Bibliography
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	     Alland, A. 1973. Jacob A Riis: Photographer and Citizen. New York: Aperture. (amw)

 Amin, A. and Thrift, N. 2002. Cities: Reimagining the Urban. Cambridge: Polity Press. (jpd)

 Basso, K. 1996. Wisdom Sits in Places: Landscape and Language Among the Western Apache. Albuquerque, NM: University of New Mexico Press. (jpd)

 Baudelaire, C. 1970. from Paris Spleen. New York: New Directions Publishing. (To Arsene Houssaye, The Stranger, A Wag, One O'Clock in the Morning, The Wild Woman and the Fashionable Coquette, Crowds, Evening Twilight, Solitude, Projects, The Eyes of the Poor, Windows, Which is the Real One?, The Mirror, The Soup and the Clouds, Loss of a Halo, Beat up the Poor, Epilogue) (amw)

 Benjamin, W. 1986 (1955). Paris: Capital of the Nineteenth Century. In Reflections: Essays, Aphorisms, Autobiographical Writings. New York, Schocken Books. p146-162. (amw)

 Berman. M. 1982. All That is Solid Melts into Air. New York: Penguin Books (1988). (amw)

 Bondi, L. and Rose, D. 2003. Constructing Gender, Constructing the Urban: A Review of Anglo-American Feminist Urban Geography. Gender, Place and Culture, 10(3), 229-245. (jpd)

 Brown, B. and Laurier, E. 2005. En-Spacing Technology: Some Thoughts on the Geographical Nature of Technology. In Turner and Davenport (eds), Spaces, Spatiality, and Technology. Dordrecht: Kluwer. (jpd)

 Buck-Morss, S. 1986. The Flaneur, the sandwichman and the whore: the politics of loitering. New German Critique 39: 99-105 or 112. (amw)

 Caldeira, T.P.R. 2000. City of Walls: Crime, Segregation, and Citizenship in Sao Paolo. Berkeley: University of California Press. (amw)

 Calvino, I. 1974. Invisible Cities. New York: Harcourt Brace Jovanovich. (amw)

 Clark, T.J. 1984. The View from Notre-Dame. In The Painting of Modern Life: Paris in the Art of Manet and his Followers. Princeton: Princeton University Press. p 23-78. (amw)

 Cosgrove, D. 1996. Windows on the City. Urban Studies, 33(8), 1495-1498. (jpd)

 Crang, M. and Travlou, P. 2001. The City and Topologies of Memory. Environment and Planning D: Society and Space, 19, 161-177. (jpd)

 Cresswell, T. 1999. Embodiment, Power, and the Politics of Mobility: The Case of Female Tramps and Hobos. Trans. Institute of British Geographers, 24(2), 175-192. (jmb)

 Cresswell, T. 2006. On the Move: Mobility in the Modern Western World. London: Routledge. (jpd)

 Cronon, W. (ed). 1995. Uncommon Ground: Rethinking the Human Place in Nature. New York: Norton. (jpd)

 Cronon, W.1991. Nature’s Metropolis: Chicago and the Great West. New York: Norton. (jpd)

 Curry, M. 2000. Wittgenstein and the Fabric of Everyday Life. In Crang and Thrift (eds), Thinking Space. London: Routledge. (jpd)

 Curry, M. 2002. Discursive Displacement and the Seminal Ambiguity of Space and Place. Handbook of New Media (Lievrouw and Livingston, eds), 502-17. Beverly Hills,CA: Sage. (jpd)

 Curry, M. 2005. Toward a Geography of a World Without Maps: Lessons from Ptolemy and Postal Codes. Annals of the Association of American Geographers, 95(3), 680-691. (jpd)

 Curry, M., Phillips, D., and Regan, P. 2004. Emergency Response Systems and the Creeping Legibility of People and Places. The Information Society, 20, 357-369. (jpd)

 Davis, M. 1990. City of Quartz -- Excavating the Future in Los Angeles. London: Verso. (amw)

 Day, K. 2001. Constructing Masculinity and Women's Fear in Public Spaces in Irvine, California. Gender, Place, and Culture, 8(2), 109-127. (jpd)

 De Certeau, M. 1984. The Practice of Everyday Life. Berkeley, CA: University of California Press. (jpd)

 Dodge, M. and Kitchin, R. 2004. Flying through Code/Space: The Real Virtuality of Air Travel. Environment and Planning A, 36, 195-211. (jpd)

 Dodge, M. and Kitchin, R. 2005. Codes of Life: Identification Codes and the Machine-Readable World. Environment and Planning D: Society and Space, 23, 850-881. (jpd)

 Dodge, M. and Kitchin, R. 2005. Code and the Transduction of Space. Annals of the Association of American Geographers, 95(1), 162-180. (jpd)

 Duruz, J. 2005. Eating at the Borders: Culinary Journeys. Environment and Planning D: Society and Space, 23, 51-69. (jpd)

 Ferguson, J. and Gupta, A. 2002. Spatializing States; Toward an Ethnography of Neoliberal Governmentality. American Ethnologist, 29(4), 981-1002. (jpd)

 Garrioch, D. 2003. Sounds of the City: The Soundscape of Early Modern European Towns. Urban History, 30, 5-25. (jpd)

 Graham, S. 1998. The End of Geography or the Explosion of Space? Concepualizing space, place, and information technology. Progress in Human Geography, 22(2), 165-185. (jpd)

 Graham, S. Software-sorted Geographies. Progress in Human Geography, 29(5), 562-580. (jpd)

 Harvey, D. 1985. Consciousness and the Urban Experience: Studies in History and Theory of Capitalist Urbanization. Baltimore: The Johns Hopkins University Press. (amw)

 Harvey, D. 2001. Spaces of Capital: Towards a Critical Geography. (amw)

 Harvey, D. 2000. Spaces of Hope. (amw)

 Holston, J. 1989. The Modernist City -- An Anthropological Critique of Brasilia. Chicago: The University of Chicago Press. (amw)

 Hubbard, P. and Lilley, K. 2004. Pacemaking the Modern City; The Urban Politics of Speed and Slowness. Environment and Planning D: Society and Space, 22, 273-294. (jpd)

 Jackson, K. T. 1985. Crabgrass Frontier -- The Suburbanization of the United States. New York: Oxford University Press. (amw)

 Kelleher, W. 2004. The Troubles in Ballybogoin: Memory and Identity in Northern Ireland. Ann Arbor, MI: University of Michigan Press. (jpd)

 Kelley, K. and Francis, H. 1993. Places Important to Navajo People. American Indian Quarterly, 17(2), 151-169. (jpd)

 Knopp, L. and Brown, M. 2003. Queer Diffusions. Environment and Planning D: Society and Space, 21, 409-424. (jpd)

 Klein, N. 1997. The History of Forgetting: Los Angeles and the Erasure of Memory. London: Verso. (jpd)

 le Marcis, F. 2004. The Suffering Body of the City. Public Culture, 16(3), 453-477. (jpd)

 Lefebvre, H. 1991. The Production of Space. Oxford: Blackwell. (jpd)

 Lilley, K. 2004. Mapping Cosmopolis: Moral Topographies of the Medieval City. Environment and Planning D: Society and Space, 22, 681-698. (jpd)

 Lofland, L. 1973. A World of Strangers: Order and Action in Urban Public Space. Prospect Heights, IL: Waveland Press. (jpd)

 Lofland, L. 1998. The Public Realm: Exploring the City's Quintessential Social Territory. Hawthorne, NY: Aldine de Gruyter. (jpd)

 Low, S. 1996. The Anthropology of Cities: Imagining and Theorizing the City. Annual Review of Anthropology, 25, 383-409. (jpd)

 Low, S. (ed). 1999. Theorizing the City: The New Urban Anthropology Reader. Rutgers. (jpd)

 Low, S. (ed). 2003. The Anthropology of Space and Place: Locating Culture. Oxford: Blackwell. (jpd)

 Lynch, K. 1960. The Image of the City. Cambridge, MA: MIT Press. (jpd)

 Lyons, M. 2003. Spatial Segregation in Seven Cities: A Longitudinal Study of Home Ownership, 1971-91. Housing Studies, 18(3), 305-326. (jpd)

 McCullough, M. 2003. On Digital Ground: Architecture, Pervasive Computing, and Environmental Knowing. MIT Press. (jpd)

 Mandel, J. 2004. Mobility Matters: Women's Livelihood Strategies in Porto Novo, Benin. Gender, Place, and Culture, 11(2), 257-287. (jpd)

 Massey, D. 1993. Power-geometry and a Progressive Sense of Place. In Bird, Curtis, Putnam, Robertson and Tickner (eds), Mapping the Futures: Local Cultures, Global Change. London: Routledge. (jpd)

 Mumford, L. 1995 (1938). The culture of cities. in Metropolis: Center and Symbol of Our Times, Philip Kasinitz, ed. New York: New York University Press. p21-29. (amw)

 Munn, N. 1996. Excluded Spaces: The Figure in the Australian Aboriginal Landscape. Critical Inquiry, 22(3), 446-465. (jpd)

 Pike, D.L. 2005. The Walt Disney World Underground. Space and Culture, Vol. 8, No. 1, 47-65 (amw)

 Poe, E.A. The Man in the Crowd. (short story). in The Complete Tales and Poems of Edgar Allen Poe. New York: The Modern Library, 1938. 475-481. (amw)

 Thrift, N. and French, S. 2002. The Automatic Production of Space. Transactions of the Institute of British Geographers, 27, 3, 309-335.

 Sassen, S. 2002. Locating Cities on Global Circuits. Environment and Urbanization, 14(1), 13-30.

 Schorske, C.E. 1981. The Ringstrasse, its critics, and the birth of urban modernism. In Fin-de-Siecle Vienna: Politics and Culture. New York: Vintage Books. pp24-115. (amw)

 Scott, J. 1998. Seeing Like a State: How Certain Schemes to Improve the Human Condition Have Failed. New Haven, CT: Yale University Press. (jpd)

 Sennett, R. (ed) 1969. Classic Essays on the Culture of Cities. New York: Appleton-Century Crofts. specific essays: Max Weber, 1921. The nature of the city. pp 23-46. Louis Wirth, 1938. Urbanism as a way of life. pp143-164. (amw)

 Simmel, G. 1971 (1903). The Metropolis and Mental Life. in On Individuality and Social Forms: Selected Writings. Chicago: The University of Chicago Press. pp 324-339. also: The Stranger, pp143-149. (amw)

 Smail, D. 1999. Imaginary Cartographies: Possession and Identity in Late Medieval Marseille. Ithaca, NY: Cornell. jpd

 Soja, E. 2000. Postmetropolis: Critical Studies of Cities and Regions. (amw)

 Soja, E. 1989. Postmodern Geographies: The Reassertion of Space in Critical Social Theory. Verso. (jpd)

 Sorkin, M. (ed). 1992. Variations on a Theme Park: The New American City and the End of Public Space. New York: Hill and Wang. (jpd)

 de Souza e Silva, A. 2006. From Cyber to Hybrid: Mobile Technologies as Interfaces of Hybrid Spaces. Space and Culture, 9(3), 261-278. (jpd)

 Stoffle, R., Halmo, D., and Austin, D. 1997. Cultural Landscapes and Traditional Cultural Properties: A Southern Paiute View of the Grand Canyon and Colorado Rover. American Indian Quarterly, 21(2), 229-249. (jpd)

 Turnbull, D. 2000. Masons, Tricksters and Cartographers: Comparative Studies in the Sociology of Scientific and Indigenous Knowledge. Harwood Academic.

 Turnbull, D. 2005. Locating, Negotiating, and Crossing Boundaries: A Western Desert Land Claim, the Tordesillas Line, and the West Australian Border. Environment and Planning D: Society and Space, 23, 757-770. (jpd)

 Wilson, A. 2004. The Intimate Economies of Bangkok: Tomboys, Tycoons, and Avon Ladies in the Global City. (amw)

 Zukin, S. 1995. The Cultures of Cities. Oxford: Blackwell. (jpd)




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Urban_Bibliography"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 23:37, 25 November 2006.This page has been accessed 9,769 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Research_Group_Meeting_Topic_Ideas
##-----------------TITLE------------------------##
Research Group Meeting Topic Ideas - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Research Group Meeting Topic Ideas
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    [edit]Potential topics
Lilly presents on her mechanical turk work, including notes on power in the interface design
Paul's sustainability paper
Reading "On Ideologies of Reflexivity" from Ethnography through Thick and Thin by George Marcus
[schedule this for early winter qtr] Talking about Eric's research study design
Get feedback on lilly's paper on tropes of travel and tourism in design ethnography (closer to ischool conference in Feb where it will be a talk (if panel accepted))
How to be a good reviewer / how to be a crappy reviewer
Where are interdisciplinary places that we see as going where we want informatics to go?

[edit]Topics already discussed
how to write a grant about transnationalism and non-us-centric stuff is actually of interest to a bunch of us. Paul, me, Silvia, Amanda, and Roxy really too but I don't know if the NSF feels like london is the unmarked/neutral self/US so undersound is fundable :P Maybe reading the grants paul and irina have been writing and talking about challenges, strategies, etc



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Research_Group_Meeting_Topic_Ideas"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 18:53, 4 January 2009.This page has been accessed 2,981 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Swirl
##-----------------TITLE------------------------##
Swirl - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Swirl
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    


Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Swirl"
	    Categories: Swirl	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 23:53, 11 January 2006.This page has been accessed 3,351 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Privacy
##-----------------TITLE------------------------##
Privacy - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Privacy
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    [edit]Reading Lists
Add readings you've found valuable to this list, preferably with a link to where you can find it on the web. List your name next to the reading if you've read it to promote mutual awareness of knowledge of literature in this multi-disciplinary area. An annotation or notes are fine to add too, if you'd like. 

 Adams, A. (1999). The Implications of Users’ Multimedia Privacy Perceptions on Communication and Information Privacy Policies. Proceedings of Telecommunications Policy Research Conference.

 Adams, A. (2000). Multimedia information changes the whole privacy ballgame. Proceedings of the tenth conference on Computers, freedom and privacy: challenging the assumptions, 25-32. --david

 American Civil Liberties Union : Even Bigger, Even Weaker: The Emerging Surveillance Society: Where Are We Now? Retrieved October 9, 2007 --david

 Campbell, J. E. (2004). Getting It on Online: Cyberspace, Gay Male Sexuality, and Embodied Identity. Haworth Press. --lilly

 Elahi, H. Pop!Tech Talk: Hasan Elahi. Retrieved October 5, 2007, Pop!Tech popcasts (video) Hasan Elahi is a middle eastern man who turned his run in with the FBI into an experiment in self-surveillance. He began logging his location with sensors and sending it voluntarily to the FBI as a means of accounting for his innocent whereabouts and protecting himself against speculative government interrogations and hassles. --lilly

 Frankowski, D., Cosley, D., Sen, S., Terveen, L., & Riedl, J. You Are What You Say: Privacy Risks * Hudson, J. M., & Bruckman, A. (2005). Using Empirical Data to Reason about Internet Research Ethics. Conference on Computer-Supported Cooperative Work, 18, 22.

 Lam, S., Frankowski, D., & Riedl, J. (2006). Do You Trust Your Recommendations? An Exploration of Security and Privacy Issues in Recommender Systems.

 Ley, B. Vive Les Roses!: The Architecture of Commitment in an Online Pregnancy and Mothering Group. Journal of Computer Mediated Communication --lilly

 Palen, L., & Dourish, P. (2003). Unpacking "privacy" for a networked world. Proceedings of the SIGCHI conference on Human factors in computing systems, 129-136

 Nippert-Eng, C. Privacy in the United States: Some Implications for Design. International Journal of Design. This article details interviews of 74 middle class American families and concludes that privacy is the degree to which one feels in control of their accessibility. She discusses implication for design. Many of the quotes she cites from the field center on violations of privacy, shame, etc by and among family members, friends, and neighbors. This is distinctly local from typical discussions which set up an opposition between people and the government. --lilly

 Perusco, L., & Michael, K. (2007). Control, trust, privacy, and security: evaluating location-based services. Technology and Society Magazine, IEEE, 26(1), 4-16. --david

 Qian, H., & Scott, C. R. Anonymity and Self-Disclosure on Weblogs. Retrieved September 27, 2007 --lilly

 Sheehan, K. B., & Hoy, M. G. Dimensions of Privacy Concern Among Online Consumers. --david

 Smith, H. J., Milberg, S. J., & Burke, S. J. (1996). Information Privacy: Measuring Individuals' Concerns about Organizational Practices. MIS Quarterly, 20(2), 167-196. Retrieved October 9, 2007

 Solove, D. J. (2004). The Digital Person: Technology and Privacy in the Information Age. NYU Press.

 Solove, D. J. (2007). SSRN-'I've Got Nothing to Hide' and Other Misunderstandings of Privacy. San Diego Law Review, 44. Retrieved October 9, 2007 --david

 Spiekermann, S., Grossklags, J., & Berendt, B. (2001). E-privacy in 2nd generation E-commerce: privacy preferences versus actual behavior. Proceedings of the 3rd ACM conference on Electronic Commerce, 38-47. --david

 Sureik, E., Harling Stalker, L., & Smith, E. Background Paper for the Globalization of Personal Data Project: International Survey on Privacy and Suveillance. --david

 Sweeney, L. (2001). Information Explosion. In Confidentiality, Disclosure, and Data Acess: Theory and Practical APplications for Statistical Agencies. Washington, DC: Urban Institute. --david

 Troshynski, E., Lee, C., & Dourish, P. Accountabilities of Presence. Submitted to CHI

 Wright, Camp, Goldberg, Rivest, & Wood. (2003). Privacy Tradeoffs: Myth or Reality? Financial Cryptography. --david

[edit]Category ideas
Soon, we will organize the list into categories for better browsing. Until then, add categories you think ought to exist here, or feel free to start organizing.  

 Overview
 Legal perspective
 Research methodologies
 Theory
 Psychological lens
 Anthropological lens
 Sociological lens
 Cross-cultural perspectives




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Privacy"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 08:15, 9 October 2007.This page has been accessed 6,301 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:About
##-----------------TITLE------------------------##
Wiki for Paul Dourish's Research Group:About - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Wiki for Paul Dourish's Research Group:About
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    (There is currently no text in this page)

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:About"
	    	    
	    
	  
	
      
      
	
	  Views
	  Project pageDiscussionEdit
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:General_disclaimer
##-----------------TITLE------------------------##
Wiki for Paul Dourish's Research Group:General disclaimer - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Wiki for Paul Dourish's Research Group:General disclaimer
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    (There is currently no text in this page)

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:General_disclaimer"
	    	    
	    
	  
	
      
      
	
	  Views
	  Project pageDiscussionEdit
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Current_events
##-----------------TITLE------------------------##
Current events - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Current events
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    (There is currently no text in this page)

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Current_events"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEdit
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Special:Upload
##-----------------TITLE------------------------##
Error
##------------------TEXT------------------------##
Not logged in
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    You must be logged in
to upload files.

Return to Main Page.

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Special:Upload"
	    	    
	    
	  
	
      
      
	
	  Views
	  Special Page
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    Upload fileSpecial pages
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Post-colonial_HCI
##-----------------TITLE------------------------##
Post-colonial HCI - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Post-colonial HCI
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    [edit]Bibliography
Akrich, Madeleine. “The De-scription of Technical Objects.”
Akrich, Madeleine, and Bernike Pasveer. “Embodiment and Disembodiment in Childbirth Narratives.” 30 November 2007 <http://www.csi.ensmp.fr/Perso/Akrich/>.
Chetty, Marshini, and Rebecca Grinter Chetty. “HCI4D: hci challenges in the global south.” CHI '07 extended abstracts on Human factors in computing systems 2007: 2327-2332.
Chetty, Marshini, William Tucker, and Edwin Blake. “Developing locally relevant software applications for rural areas: a South African example.” Proceedings of the 2004 annual research conference of the South African institute of computer scientists and information technologists on IT research in developing countries 2004: 239-243.
“Feminism and Constructivism: Do Artifacts Have Gender?” 1 July 1995. 22 November 2007 <http://sth.sagepub.com/cgi/content/refs/20/3/332>.
Harpold, Terry, and Kavita Philip. “Of Bugs and Rats: Cyber-Cleanliness, Cyber-Squalor, and the Fantasy-Spaces of Informational Globalization.” Postmodern Culture 11.1 (2000). 4 December 2007 <http://muse.jhu.edu/journals/postmodern_culture/v011/11.1harpold.html>.
“Masculinities and Technologies: Some Introductory Remarks.” 1 April 2004. 22 November 2007 <http://jmm.sagepub.com/cgi/content/refs/6/4/319>.
“The Zimbabwe Bush Pump: Mechanics of a Fluid Technology.” 1 April 2000. 22 November 2007 <http://sss.sagepub.com/cgi/content/abstract/30/2/225>.

[edit]Notes
Annotated bibliography - this is a dump of lilly's zotero database, which includes her notes, half-formed questions, and thoughts
Post-colonial HCI: Narratives of Wiring the World - this is a set of notes with quotes examining narratives of technology and development . very work in progress. basis of lilly's Penny seminar paper. 
Portability of design methods - more quotes and clips from around the web. think of this as rummage publishing, rather than anything organized.



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Post-colonial_HCI"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 05:25, 4 December 2007.This page has been accessed 4,248 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:Site_support
##-----------------TITLE------------------------##
Wiki for Paul Dourish's Research Group:Site support - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Wiki for Paul Dourish's Research Group:Site support
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    (There is currently no text in this page)

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Wiki_for_Paul_Dourish%27s_Research_Group:Site_support"
	    	    
	    
	  
	
      
      
	
	  Views
	  Project pageDiscussionEdit
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Urban_Movement
##-----------------TITLE------------------------##
Urban Movement - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Urban Movement
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    A list of readings regarding movement in urban spaces.

Ethnographies:

Marc Auge: In the Metro
Kat Jungnickel: 73 Urban Journeys
Marian Swerdlow: Underground Woman: My Four Years As a New York City Subway Conductor
Susie J. Tanenbaum: Underground Harmonies: Music and Politics in the Subways of New York
Janet Vertesi: Mind the Gap: The ‘Tube Map’ as London’s User Interface


Interfaces & Installations:

Frédéric Eyl, Gunnar Green and Richard The: Moving Canvas
iPod Subway Maps
Thomas Laureyssens: pedestrian levitation
OpenStreetMap
Antonio Urquijo de Simón, Carolina Padilla Villarraga, Daniel Desiderio Páez Castillo, Jordi Puig Vilà and Philip Morris : idades




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Urban_Movement"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 05:20, 31 January 2006.This page has been accessed 7,148 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Conference_presentations
##-----------------TITLE------------------------##
Conference presentations - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Conference presentations
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    Creating conference presentations is something Lilly finds really challenging. As a result, Paul has had to hammer her over the head with a lot of principles over and over. Lilly is writing those in here in hopes of helping others while reinforcing the hard won knowledge for herself. 

 Start with what the audience knows and is familiar with. Over the course of the talk, draw them through an analytical story. The story can start from simpler concepts and build up sequentially to more complex ones, leading to insightful conclusions, take aways, and things they can do. (Things they can do seems particularly important for HCI talks; humanities, anthro, and STS have different demands.)
 (Paul sez) I might think of this slightly differently. In every discipline, you need to answer the question "so what?" "How should I act differently?" and "How should I think differently?" are good ways of doing this. I think this is just as true in social sciences and humanities as in more engineering-oriented disciplines. I refer people once more to Murray Davis' "What's Interesting?"

 When evaluating slides, imagine someone has just zoned in and reads your slide, not knowing much else that has gone on. Are the main things you want them to take away on the slide? Does the content carefully avoid predictable misreadings?
 When ending a slide, it can smooth transitions to foreshadows what is to come in the next slide. 
 When drawing on things you've said earlier, reusing graphics from that earlier content can serve as a helpful memory aid. 
 Be prepared to give your presentation without notes. Your notes may not be available if, say, there are display quirks or someone has to take your laptop far away to hook it up to the projector. (Both of these have now happened to Lilly.)
 Be conscious of the microphone, and of your voice through it. Listen to whether and how you are amplified. If you are using a podium mike, be conscious of how your body is positioned and how that affects the amplification. If you are using a wearable mike, be sure to wear it on the side of your body that is between your mouth and the projection screen, so that if you turn to check your slides, you will not be turning AWAY from the mike.




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Conference_presentations"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 05:27, 8 April 2010.This page has been accessed 1,498 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Publications_2007-08
##-----------------TITLE------------------------##
Publications 2007-08 - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Publications 2007-08
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	     Bassoli, A., Brewer, J., Martin, K., Carreras, I., and Tacconi, D. 2008. undersound and the Above Ground. Poster Presentation at the 5th International Mobile Music Workshop, MMW, Vienna, Austria, May 2008.

 Bassoli, A., Brewer, J., Martin, K., Dourish, P., and Mainwaring, S. 2007. Underground Aesthetics: Rethinking Urban Computing. IEEE Pervasive Computing, 6(3), July-September, 39-45.

 Bassoli, A., Brewer, J., and Taylor, A. 2008. Automated Journeys. Workshop to be held at the International Conference on Ubiquitous Computing, UbiComp, Seoul, Korea, September 2008.

 Brewer, J. and Dourish, P. In press. Storied Spaces: Cultural Accounts of Mobility, Technology, and Environmental Knowing. International Journal of Human-Computer Studies.

 Brewer, J., Mainwaring, S., and Dourish, P. 2008. Aesthetic Journeys. Proc. ACM Conf. Designing Interactive Systems DIS 2008 (Cape Town, South Africa).

 Chen, J. 2007. mopix: A Location-Based Mobile Photo Sharing System. ECSCW 2007 Doctoral Colloquium (Limerick, Ireland).

 Chen, J. 2008. Playing with Surveillance. Position paper for the CHI 2008 workshop Interaction After Dark (Florence, Italy).

 Chen, J. 2007. Multi-purpose Paper. Position paper for the Workshop 'A Public Inconvenience' (Amsterdam, Netherlands).

 Dourish, P. 2008. The Secret Life of Secrets. Ambidextrous, 8 (Winter), 36-38.

 Dourish, P., Hayes, G., Irani, I., Lee, C. P., Lindtner, S., Nardi, B., Patterson, D., and Tomlinson, B. 2008. Informatics at UC Irvine. Research Landscapes, CHI 2008.

 Dourish, P. 2008. Points of Persuasion: Strategic Essentialism and Environmental Sustainability. Pervasive 2008 Workshop on Pervasive Persuasive Technology and Environmental Sustainability (Sydney, Australia).

 Dourish, P. 2007. Responsibilities and Implications: Further Thoughts on Ethnography and Design. Proc. ACM Conf. Designing for the User Experience DUX 2007 (Chicago, IL).

 Dourish, P. 2007. Technologies of Presence and Accountability. Intl. Workshop on Social Interaction and Mundane Technologies (Melbourne, Australia).

 Dourish, P. 2007. Seeing Like an Interface. Proc. Australasian Computer-Human Interaction Conference OzCHI 2007 (Adelaide, Australia).

 Francesco Calabrese, Kristian Kloeckl, Carlo Ratti, Mark Bilandzic, Marcus Foth, Angela Button, Helen Klaebe, Laura Forlano, Sean White, Petia Morozov, Steven Feiner, Fabien Girardin, Josep Blat, Nicolas Nova, M. P. Pieniazek, Rob Tieben, Koen van Boerdonk, Sietske Klooster, Elise van den Hoven, Jaime Martín Serrano, Joan Serrat, Daniel Michelis, Eric Kabisch. 2007. Urban Computing and Mobile Devices. IEEE Pervasive Computing 6(3): 52-57.

 Irani, L. and Dourish, P. 2008. Portability of Design Research Methods: Cultural Differences in the Creation of Technological Knowledge. CHI 2008 Workshop on Used Centered Design for Development (Florence, Italy).

 Kabisch, E. 2007. From Synthetic to Hybrid Worlds. Late-breaking Results at the International Conference on Ubiquitous Computing, UbiComp 2007 (Innsbruck, Austria).

 Kabisch, E. 2008. Emergent Narrative in Hybrid Environments. ACM CHI 2008 Workshop on Urban Mixed Realities (Florence, Italy).

 Kabisch, E. 2008. Hybrid Ecologies in Datascape. Proceedings of the International Symposium on Electronic Art, ISEA 2008 (Singapore).

 Kabisch, E. 2008. Datascape: A Synthesis of Digital and Embodied Worlds. Journal of Space and Culture. In press.

 Lee, C. P. and Abrams, S. “Group Sensemaking.” 2008. Position paper for workshop on Sensemaking. ACM Conference on Human Factors and Usability (CHI), Florence, Italy.

 Lee, C.P., Hornick, B., Chen, J., Blonk, M., Tomlinson, B., and Nardi, B. 2008. The Technology Garden. LUCI Technical Report.

 Lee, C. P. and Trace, C. 2008. “Serious, Casual, Social: A Typology of Hobbyist Collectors.” National Popular Culture & American Culture Associations, Session on Collecting & Collectibles, San Francisco, CA.

 Lee, C. P. 2008.  “Researching Cyberinfrastructure.”  Society for the Social Studies of Science (4S) Conference, Rotterdam, The Netherlands.

 Lindtner, S. and Chen, J. (2007): "mopix: Playful Encounters with Surveillance in Everyday Urban Settings." In Proceedings of UbiComp 2007 Extended Abstracts (Innsbruck, Austria).

 Lindtner, S. and Nardi B. 2008. Mixed Realities in China's Internet Cafes. CHI 2008 Workshop on Urban Mixed Realities (Florence, Italy).

 Lindtner, S. and Nardi, B. 2008. Venice, California and World of Warcraft: Persistence and Ephemerality in Playful Spaces. In Proc. of HICSS'08.

 Noack, N., Lindtner, S., Nguyen, J., Hayes, G. 2008. LoRy: A Locative Story Game to Encourage Playful and Social Learning. Demonstration at the Conference on Interaction Design for Children, Chicago, June, 2008.

 Troshynski, E., Lee, C.P., and Dourish, P. 2008. Accountabilities of Presence: Reframing Location-Based Systems. Proc. ACM Conf. Human Factors in Computing Systems CHI 2008 (Florence, Italy).

 Williams, A., Dourish, P., and Anderson, K. 2008. Anchored Mobilities: Mobile Technology and Transnational Migration. Proc. ACM Conf. Designing Interactive Systems DIS 2008 (Cape Town, South Africa).

 Williams, A., Robles, E., and Dourish, P. 2008 (in press). Urbane-ing the City: Examining and Refining the Assumptions Behind Urban Informatics. In Foth (ed.), Handbook of Research on Urban Informatics: The Practice and Promise of the Real-Time City. Hershey, PA: Information Science Reference, IGI Global.




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Publications_2007-08"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 22:10, 8 July 2008.This page has been accessed 7,160 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Talk:Main_Page
##-----------------TITLE------------------------##
Talk:Main Page - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Talk:Main Page
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    


Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Talk:Main_Page"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEdit+History
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 14:47, 21 August 2006.This page has been accessed 4,590 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/FBIRN
##-----------------TITLE------------------------##
FBIRN - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
FBIRN
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    BIRN Website: BIRN
Selected Readings from Social Studies of Science(1996-2006)

Anne Beaulieu +: Voxels in the Brain: Neuroscience, Informatics and Changing Notions of Objectivity
Graham Button and Wes Sharrock +: The Organizational Accountability of Technological Work
Arne Hessenbruch: Calibration and Work in the X-Ray Economy, 1896-1928
Christine Hine +: Databases as Scientific Instruments and Their Role in the Ordering of Scientific Work
Kelly Joyce: Appealing Images: Magnetic Resonance Imaging and the Production of Authoritative Knowledge
Chunglin Kwa: Local Ecologies and Global Science: Discourses and Strategies of the International Geosphere-Biosphere Programme
Amit Prasad: Scientific Culture in the ‘Other’ Theater of ‘Modern Science’: An Analysis of the Culture of Magnetic Resonance Imaging Research in India

Selected Readings from Science Technology & Human Values

Amit Prasad: Making Images/Making Bodies: Visibilizing and Disciplining through Magnetic Resonance Imaging (MRI) '

+ = Of Particular Interest



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/FBIRN"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 01:20, 18 May 2006.This page has been accessed 7,420 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Papers_and_drafts
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Database schema not up to date, please run maintenance/update.php
Backtrace:
GlobalFunctions.php line 451 calls wfBacktrace()Image.php line 1172 calls wfDebugDieBacktrace()Image.php line 311 calls Image::checkDBSchema()Image.php line 399 calls Image::loadFromDB()Image.php line 525 calls Image::load()Image.php line 579 calls Image::getWidth()Image.php line 654 calls Image::canRender()Linker.php line 376 calls Image::allowInlineDisplay()Parser.php line 3301 calls Linker::makeImageLinkObj()Parser.php line 1394 calls Parser::makeImage()Parser.php line 773 calls Parser::replaceInternalLinks()Parser.php line 191 calls Parser::internalParse()OutputPage.php line 270 calls Parser::parse()Article.php line 803 calls OutputPage::addPrimaryWikiText()index.php line 165 calls Article::view()
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Special:Specialpages
##-----------------TITLE------------------------##
Special pages - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Special pages
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    Special pages for all users
All pagesBook sourcesBroken RedirectsCategoriesCreate an account or log inDead-end pagesDisambiguation pagesDouble redirectsExport pagesFile listGallery of new filesList of blocked IP addresses and usernamesLogsLong pagesMost linked to pagesMy watchlistNew pagesOldest pagesOrphaned pagesPopular pagesPreferencesRandom pageRecent changesShort pagesStatisticsSystem messagesUncategorized categoriesUncategorized pagesUnused categoriesUnused filesUpload fileUser listVersionWanted pages

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Special:Specialpages"
	    	    
	    
	  
	
      
      
	
	  Views
	  Special Page
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    Upload fileSpecial pages
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Ambient/Presence_papers_from_CHI
##-----------------TITLE------------------------##
Ambient/Presence papers from CHI - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Ambient/Presence papers from CHI
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    Putting people in their place: an anonymous and privacy-sensitive approach to collecting sensed data in location-based applications
Responsiveness in instant messaging: predictive models supporting inter-personal communication
Leveraging characteristics of task structure to predict the cost of interruption
Sashay: designing for wonderment
Urbanhermes: social signaling with electronic fashion
From awareness to connectedness: the design and deployment of presence displays
Negotiating presence-in-absence: contact, content and context
Visualizing email content: portraying relationships from conversational histories
Collective creation and sense-making of mobile media



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Ambient/Presence_papers_from_CHI"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 19:19, 4 May 2006.This page has been accessed 5,708 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Informatics_Department_Seminars
##-----------------TITLE------------------------##
Informatics Department Seminars - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Informatics Department Seminars
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    This page is not definitive; it is my working notes on upcomiging speakers.
Current and upcoming quarters are listed here; see also the Archive of previous quarters.



[edit] Spring Quarter 2007 
 04/06: Bill Tomlinson
 04/13: No speaker (Colin Ware speaking in ISR series)
 04/20: Amaya Becvar
 04/27: No speaker (Hiroshi Ishii speaking in ISR series)
 05/04: Aerospace visitors [people away for CHI?]
 05/11: Gloria Mark
 05/18: No speaker (Jeff Magee speaking in ISR series)
 05/25: ---- [people away for ICSE?]
 06/01: No speaker (ISR Research Forum)
 06/08: Gilad Ravid (Gloria hosting)
 06/15: Karen Baker? (Susan hosting)




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Informatics_Department_Seminars"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 20:01, 7 April 2007.This page has been accessed 36,657 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Special:Recentchanges
##-----------------TITLE------------------------##
Recent changes - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Recent changes
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    Track the most recent changes to the wiki on this page.
Below are the last 50 changes in last 7 days.Show last 50 | 100 | 250 | 500 changes in last 1 | 3 | 7 | 14 | 30 daysHide minor edits | show bots | Hide logged in users | Hide patrolled editsShow new changes starting from 09:33, 21 February 2016


	Namespace:
	all(Main)TalkUserUser talkWiki for Paul Dourish's Research GroupWiki for Paul Dourish's Research Group talkImageImage talkMediaWikiMediaWiki talkTemplateTemplate talkHelpHelp talkCategoryCategory talk
   Invert selection

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Special:Recentchanges"
	    	    
	    
	  
	
      
      
	
	  Views
	  Special Page
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    rss 
	        atom 
	        Upload fileSpecial pages
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Special:Whatlinkshere/Main_Page
##-----------------TITLE------------------------##
Main Page - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Main Page
	  
	    From Wiki for Paul Dourish's Research Group
	    (List of links)
	    	    	    
	    < Main Page
No pages link to here.

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Special:Whatlinkshere"
	    	    
	    
	  
	
      
      
	
	  Views
	  Special Page
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    Upload fileSpecial pages
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Privacy%2C_Identity%2C_and_Technology
##-----------------TITLE------------------------##
Privacy, Identity, and Technology - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Privacy, Identity, and Technology
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    


Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Privacy%2C_Identity%2C_and_Technology"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 21:32, 14 June 2007.This page has been accessed 4,219 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Writing_survey_papers
##-----------------TITLE------------------------##
Writing survey papers - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Writing survey papers
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    For some tracks of our PhD (particularly, Software and ICT), advancement to candidacy is generally based on a survey paper produced by the candidate. In other tracks (Ubicomp and the General Informatics track), a survey forms part of the topic proposal. There are some wrinkles to writing one of these, and there is sometimes confusion over exactly what a survey paper should look like. This document contains some guidance based on our experience. It is focused primarily on standalone survey papers, but it is applicable to both.
A survey paper is intended to review the literature in some particular research area (presumably, the area to which your own research is intended to make a contribution.) That statement raises as many questions as it answers, and we’ll try to answer some in a moment, but first, we should make clear the single most important thing about a survey paper. It is not intended merely to demonstrate that you have collected and read a lot of papers and books. Rather, it is intended to show that you can contribute to the research in that area. Generally, it will do this by giving some novel insight into the research area not through new research results (that comes later) but instead by demonstrating something of the relationships between research perspectives at work in the domain.
To be a little more concrete, what you are trying to do is to give the reader of the paper some insight into the domain. This insight will not simply be “extracted from” the literature, but rather arise from how you put the survey together. So, the framework by which you organize the literature you present is (or should be) a contribution in itself. A successful survey paper does not simply summarise or report on the literature; it critically interrogates the literature in order to identify underlying assumptions, tensions, contradictions, frameworks, schools of thought, perspectives, oppositions, agreements, or whatever. The paper should have something to say about the literature, something that gives the reader a productive insight into the literature.
Let’s take some examples, from survey papers I have recently dealt with. Your topic might be collaborative information seeking. In this case, what you might do is to juxtapose two different sets of literature, the information seeking literature and the collaborative work literature, in order to highlight the ways in which they might usefully be combined. You might present a range of models of information seeking in order to demonstrate the underlying assumptions of information seeking activities as individual and independent, and information as an external object. By bringing in the collaborative work literature, you might show how a CSCW perspective would turn attention to the social context within which information seeking was embedded and talk of information as an interactional product. What this juxtaposition achieves is the identification of a relatively unexplored area of research into collaborative information seeking.
Or, again, suppose your survey paper concerned domestic ubiquitous computing technologies. You might examine the main trends in ubiquitous computing technologies for the home – smart houses, everyday technologies, etc. – and show how what kinds of assumptions they make about, for instance, the provision and management of information infrastructures in domestic space. You might then attempt to place this in a broader historical perspective, looking at the history of “labor saving technologies” in the home and how the categories of “home,” “family,” and “domestic activity” are defined in specific social and cultural contexts. This might allow you to go back and inquire into the nature of the home as a social space rather than a container for technology, and use this to highlight assumptions behind domestic ubiquitous computing – assumptions that might lead to fresh research perspectives.
In these cases, then, the survey paper gives its readers not just an overview of the research in an area but some insight into it. Similarly, it normally points the way towards some area of future work.
This raises a complicated issue that frustrates many people, which is the relationship between a survey paper, your own research, and your future topic. Certainly, the survey paper is not a topic proposal. A topic proposal is a detailed description of a research project, intended not only to describe and motivate a set of research questions but also to set out precisely how they will be answered. Your survey will not contain this level of detail, by any means. However, it should, implicitly or explicitly, address future work. Its orientation towards this work is three-fold. First, it should delineate an area of study; second, it should demonstrate that interesting work remains to be done in this area; and third, it should show that you have some insight into this area that can suggests you will be able to find a dissertation-worthy topic. You don’t usually need to devote a whole lot of space to this; if you have written your survey successfully, then each of these three issues should have been addressed implicitly as you went along. It is often worth drawing attention to them, though, and you can be pretty sure that your committee will ask about how you expect your work to proceed on the basis of what you have learned from your survey. So, although the survey is not the topic proposal, some discussion of your future research is not excluded.
Similarly, many people come to their survey paper after they have already conducted some research of their own. (This is especially true for people whose research is based on field work; often it is only after some initial engagement with field materials that you even know what your survey area might be.) Some students wonder what role this research might play in their survey. Certainly, the survey is not a research paper, and it is not a place to lay out research results, describe methods, and so on. However, often your own research provides critical context for the content of the survey paper and in these cases, it is definitely worth explaining this context. Most commonly, this is of value in helping you define the scope of your survey; your own research can provide an empirical grounding for a set of phenomena that your paper seeks to understand. So, while your survey should not be about your research, it can certainly explain how it is related to, or inspired, grounded, or shaped by your research to date.
This brings us to the last major issue, and perhaps the most complicated. One of the most difficult problems for any survey paper is scoping – that is, picking an appropriately bounded area of study. Everything, after all, is connected to everything else, and the scientific literature is huge. What is relevant to include? What can be skipped over? Where do you draw the lines around your topic?
There are no hard-and-fast answers to these questions. Analyzing citation patterns can help you identify the key articles that you need to include, and those more peripheral articles that you should know but perhaps not cite unless they have some particular insight to offer. The goal, after all, is to describe trends, patterns, approaches, and positions, and so your selection of material should reflect these. Overall, choosing an appropriate scope – being able to identify and articulate a research area – is part of the challenge of writing a survey paper in the first place, and the specifics are going to depend on your particular topic. One thing that is critical, though, is not simply to identify an area but to define and articulate its boundaries. You need to be able to say not just “my topic is X” but also “my topic is not Y or Z; they are related in such-and-such a way, but I am focused on X”. Similarly, the boundaries must be defensible ones. Focusing on the collaborative activities of people shorter than 5’6” is not intellectually defensible; nor is excluding a topic because you didn’t have access to the materials, because there seemed to be too much literature in that area, or because you weren’t excited by it. What this means, of course, is that, even though your survey may be focused on topic X, you need to be familiar with other, related material even if it is not included in your survey, because it is only through this familiarity that you can ensure the integrity of your own topic definition (and similarly, only through this familiarity that you can defend that definition.)
One thing you should take from the material above is that a survey paper should be judged in terms of its intellectual coherence rather than “by the numbers.” It’s not about the number of pages, nor about the number of references. In my own experience, a good survey paper tends to be around 50 pages of text, with between 80 and 120 references. When you have fewer than 50 references, I worry that you are not taking a broad enough view and not dealing a large enough sample of the literature to really be able to identify themes and trends. When you have over 200 references, I begin to wonder whether you have scoped your area of interest adequately enough to be able to say something concrete. Adding more references for the sake of having more is not the point; don’t cite things merely to show that you are familiar with it, or to show the breadth of your erudition. The paper is evaluated by the contribution that it makes; it just happens, in this case, that it makes its contribution through a critical engagement with the literature rather than through the presentation of novel research results.



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Writing_survey_papers"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 00:16, 25 June 2007.This page has been accessed 4,715 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/UCI_electronic_IRB_%28eIRB%29
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Database schema not up to date, please run maintenance/update.php
Backtrace:
GlobalFunctions.php line 451 calls wfBacktrace()Image.php line 1172 calls wfDebugDieBacktrace()Image.php line 311 calls Image::checkDBSchema()Image.php line 399 calls Image::loadFromDB()Image.php line 525 calls Image::load()Image.php line 579 calls Image::getWidth()Image.php line 654 calls Image::canRender()Linker.php line 376 calls Image::allowInlineDisplay()Parser.php line 3301 calls Linker::makeImageLinkObj()Parser.php line 1394 calls Parser::makeImage()Parser.php line 773 calls Parser::replaceInternalLinks()Parser.php line 191 calls Parser::internalParse()OutputPage.php line 270 calls Parser::parse()Article.php line 803 calls OutputPage::addPrimaryWikiText()index.php line 165 calls Article::view()
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Help:Contents
##-----------------TITLE------------------------##
Help:Contents - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Help:Contents
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    (There is currently no text in this page)

Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Help:Contents"
	    	    
	    
	  
	
      
      
	
	  Views
	  HelpDiscussionEdit
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Publications_2006-07
##-----------------TITLE------------------------##
Publications 2006-07 - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Publications 2006-07
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	     anderson, k., Burke, A., Paulos, E., and Williams, A. 2006. Exurban Noir. Workshop at Ubicomp 2006.

 Barkhuus, L. and J. A. Rode. 2007. From Mice to Men: 24 Years of Evaluation at CHI. Alt.Chi.

 Bassoli, A., Brewer, J. and Martin, K. 2006. undersound: Music and Mobility Under the City. Interactive Poster at the International Conference on Ubiquitous Computing, UbiComp 2006 (Orange County, CA).

 Bassoli, A., Brewer, J. and Martin, K. 2007. In-between Theory and Practice: Dialogues in Design Research. Experience Report at the International Conference on Human Factors in Computing Systems, CHI 2007 (San Jose, CA).

 Bell, G. and Dourish, P. 2007. Yesterday's Tomorrows: Notes on Ubiquitous Computing's Dominant Vision. Personal and Ubiquitous Computing, 11(2), 133-143.

 Bell, G. and Dourish, P. In press. Back to the Shed: Gendered Visions of Technology and Domesticity. Personal and Ubiquitous Computing.

 Boehner, K., DePaula, R., Dourish, P., and Sengers, P. 2007. How Emotion is Made and Measured. International Journal of Human-Computer Studies, 65(4), 275-291.

 Boehner, K., Vertesi, J., Sengers, P., and Dourish, P. 2007. How HCI Interprets the Probes. Proc. ACM Conf. Human Factors in Computing Systems CHI 2007 (San Jose, CA). (Honorable Mention in Best Paper competition.)

 Brewer, J. 2006. Alternative Mobilities In Orange County. Position paper for the workshop Exurban Noir held at the International Conference on Ubiquitous Computing, UbiComp 2006 (Orange County, CA)

 Brewer, J., Bassoli, A., Martin, K., Dourish, P., and Mainwaring, S. In press. Aesthetic Journeys: Rethinking Urban Computing. IEEE Pervasive Computing.

 Brewer, J. and Dourish, P. 2007. Imaging and Imagining the City. ACM CHI 2007 Workshop on Imaging the City (San Jose, CA).

 Brewer, J., Williams, A., and Dourish, P. 2007. A Handle on What's Going On: Combining Tangible Interfaces and Ambient Displays for Collaborative Groups. Proc. Tangible and Embodied Interaction '07 (Baton Rouge, LA), 3-10.

 Chen, J. "mopix: A Location-Based Mobile Photo Sharing System." Position paper for the ECSCW 2007 Doctoral Colloquium, Limerick, Ireland, September 2007.

 Chen, J. "Over and Under Surveillance." Position paper for the  CHI 2007 workshop  Imaging the City, San Jose, CA, April 2007. 

 Dourish, P. 2006. Re-Space-ing Place: Place and Space Ten Years On. Proc. ACM Conf. Computer-Supported Cooperative Work CSCW 2006 (Banff, Alberta), 299-308.

 Dourish, P. (In press.) Play, Flex, and Slop: Sociality and Intentionality. In Erickson and McDonald (eds), HCI Remixed. Cambridge, MA: MIT Press.

 Dourish, P. and Anderson, K. 2006. Collective Information Practice: Exploring Privacy and Security as Social and Cultural Phenomena. Human-Computer Interaction, 21(3), 319-342.

 Dourish, P., Anderson, K., and Nafus, D. 2007. Cultural Mobilities: Diversity and Agency in Urban Computing. Proc. IFIP Conf. Human-Computer Interaction INTERACT 2007 (Rio de Janeiro, Brazil).

 Dourish, P. and Bell, G. 2007. The Infrastructure of Experience and the Experience of Infrastructure: Meaning and Structure in Everyday Encounters with Space. Environment and Planning B: Planning and Design, 34, 3, 414-430.

 Kabisch, E. 2007. A Periscope for Mobile Discovery and Narrative. Proceedings of the 6th conference on Creativity & Cognition (Washington, DC).

 Kabisch, E. 2006. Datascape: A Mobile Exploration of Geodemographic Segmentation. Thinking Through New Media conference (Duke University).

 Kabisch, E. 2007. Mobile Imaging of Urban Demographics. ACM CHI 2007 Workshop on Imaging the City (San Jose, CA).

 Kabisch, E. In press. From Virtual to Hybrid Worlds. IEEE Pervasive Computing.

 Lee, C.P. 2007. “Reconsidering Conflict in Exhibition Development Teams.” Journal of Museum Management and Curatorship. 

 Lee, C.P. 2007. “Boundary Negotiating Artifacts: Unbinding the Routine of Boundary Objects and Embracing Chaos in Collaborative Work.” Journal of Computer Supported Cooperative Work (JCSCW). 

 Lee, C.P. 2007. “Collaborative Design and the Science of Design.”  Position paper for workshop on Converging on a 'Science of Design' through the Synthesis of Design Methodologies, ACM Conference on Human Factors and Usability (CHI), San Jose, California, USA, April.

 Lee, C.P., Dourish, P., and Mark, G. 2006. The Human Infrastructure of Cyberinfrastructure. Proc. ACM Conf. Computer-Supported Cooperative Work CSCW 2006 (Banff, Alberta), 483-492. (Honorable Mention in Best Paper competition.)

 Lin, J., Mamykina, L., Lindtner, S., Delajoux, G., Strub, H. 2006. Fish'n'Steps: Encouraging Physical Activity with an Interactive Computer Game. Ubicomp 2006 (Orange County, CA).

 Lindtner, S. 2007. Playful Spaces between Fantasy and Real. Workshop on Supple Interfaces, CHI 2007 (San Jose, CA).

 Rode, J., Johansson, C., DiGioia, P., Silva Filho, R., Nies, K., Nguyen, D., Ren, J., Dourish, P., and Redmiles, D. 2006. Seeing Further: Extending Visualization as a Basis for Usable Security. Proc. Symposium On Usable Privacy and Security SOUPS 2006 (Pittsburgh, PA).

 Rode, J. A. 2006. Unlocking the Door to the Domestic. Doctoral Consortium submission at the International Conference on Ubiquitous Computing, UbiComp 2006 (Orange County, CA).

 Rode, J. A. and Kaye, J.  2006. Is to Nurture in Technology's Nature?. Position paper for workshop on "Nurturing Technologies in the Domestic Environment"  at the International Conference on Ubiquitous Computing, UbiComp 2006 (Orange County, CA).

 Williams, A. and anderson, k. 2007. Transnational Thais: Global Mobilities, Cell Phones, and Collaboration. Workshop on Culture and Collaborative Technologies, CHI 2007 (San Jose, CA).

 Williams, A. and Dourish, P. 2006. Reimagining the City: The Cultural Dimensions of Urban Computing. IEEE Computer, 39(9), 38-43.




Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Publications_2006-07"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 19:42, 30 May 2007.This page has been accessed 6,509 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Special:Recentchangeslinked/Main_Page
##-----------------TITLE------------------------##
Database error - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Database error
	  
	    From Wiki for Paul Dourish's Research Group
	    (to pages linked from "Main Page")
	    	    	    
	    A database query syntax error has occurred.
This may indicate a bug in the software.
The last attempted database query was:
(SQL query hidden)
from within function "wfSpecialRecentchangeslinked".
MySQL returned error "1030: Got error 28 from storage engine (localhost)".
Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Special:Recentchangeslinked"
	    	    
	    
	  
	
      
      
	
	  Views
	  Special Page
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    Upload fileSpecial pages
	  
	
	      
      
      
    		About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/wiki/index.php/Travel_and_reimbursements
##-----------------TITLE------------------------##
Travel and reimbursements - Wiki for Paul Dourish's Research Group
##------------------TEXT------------------------##
Travel and reimbursements
	  
	    From Wiki for Paul Dourish's Research Group
	    
	    	    	    
	    These are some notes from Amanda. I have put this on here temporarily, as a stop-gap before I write a more formal procedure -- Paul
OK, so here's what has worked best for me.
My general order of preference for dealing with money is 1) get someone else to pay for it. 2) get paid back right away. 3) put it on my debit card so I at least don't have to pay interest. 4) put it on my credit card and pay interest while waiting to get reimbursed.
Travel: get a trip number and book it through Back Bay. You should never have to deal with paying for flights yourself. Even when the Back Bay people screw up and try to buy you a $7000 plane ticket, *do not* buy the tickets yourself. Find your own flights and send them the information and nag them until they book those flights for you. If it's international, they need to know if you're on a grant that requires them to try to book an American carrier if it's at all available, so you probably want to know that before you talk to them. I think they try to err on the side of caution there and get an American carrier if they're not sure what your funding status is, and that can be more expensive.
Registration: register online, print up the receipt and give it to Nancy. I get reimbursed on that pretty quickly, well before leaving for the conference. Usually it's an amount that I can put on my debit card, so I'm not worried about the interest.
Hotel: OK, this seems to be where we've been having problems, and while there is a least painful way to do this, I can't think of any way that is actually painless. Trying to get an advance seems not to work out, and I doubt Kiana will ever let anyone do this ever again. So, we end up putting it on a credit card when we check out, and handing the receipt to ISR. That is, I think, the most straightforward way to do it.  Lately it's been taking so long to get paid back for this stuff (because of one-time mishaps... just a different one-time mishap seems to happen every time) that we end up paying interest for multiple months on our credit card bill. A week-long stay pretty much has to go on a credit card because it ends up being in the high 1000's... more than what is usually in any of our checking accounts. Best case: we just hope for the reimbursement to come quick. It'd be nice if we had some way of dealing with the interest payments and getting reimbursed for that if they take forever. Another gray area is what to do about charges for international currency conversion... I think it's a line item on my credit card bill.
Per diem: pretty much takes care of itself. very generous too. :) As a coping strategy, I try to go out for meals with Microsoft people as then I usually don't have to pay. Intel people are usually good for this too, but MSR folks seem to take a particular delight in making Bill treat poor grad students to nice meals.
Other incidentals: There are a couple ways to approach this.. you can save every single receipt ever and get reimbursed for it. The per diem I guess covers food and stuff, so if you have receipts for work-related internet, taxis etc, those can be submitted and you get paid for them. I am lazy about little things, and I figure that the per diem is already way more than I'm actually eating, and it's mostly coming out in the wash anyway. For big things like poster printing... save the receipts.
The benefit of putting something on credit card is that even if you lose the receipt you've got the credit card bill as proof you've paid for it and that's generally good enough. Bad idea: showing up 10 minutes after the printer has closed, banging on the window until they let you in, paying in cash and getting no receipt because they've already closed out the register.
And... well, maybe this is just me, but make sure they've got the correct address to send the check to. Even after I changed my address in the UCI directory, I saw my old SF address in whatever secret database Nancy was using to send reimbursements to and got her to change it there. I suspect they are using different databases for different kinds of reimbursements (travel vs. purchases or whatever), though I'm not certain because there's no transparency. I've managed to have two checks incorrectly sent to SF, and like 8 checks correctly sent to Palo Verde, Seattle, or Long Beach, and the incorrect deliveries seemed randomly interspersed between the correct ones. So... basically, ask about your address when you're in there handing them receipts.
OK, that's all I can think of.... hope this helps.
amanda



Retrieved from "http://drzaius.ics.uci.edu/wiki/index.php/Travel_and_reimbursements"
	    	    
	    
	  
	
      
      
	
	  Views
	  ArticleDiscussionEditHistory
	
	
	  Personal tools
	  
	    Create an account or log in
	  
	
	
	  
	
	
		
	  Navigation
	  
	    Main PageCommunity portalCurrent eventsRecent changesRandom pageHelpDonations
	  
	
		
	  Search
	  
	    
	      
	       
	    
	  
	
	
	  Toolbox
	  
	    What links hereRelated changesUpload fileSpecial pagesPrintable version
	  
	
	      
      
      
    		 This page was last modified 16:27, 29 August 2006.This page has been accessed 3,650 times.About Wiki for Paul Dourish's Research GroupDisclaimers
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/apidocs/overview-summary.html
##-----------------TITLE------------------------##
Overview (Swirl WebDAV Workspace 0.20 API)
##------------------TEXT------------------------##
 Overview     Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes









Swirl WebDAV Workspace 0.20 API




Packagesswirl.workspace swirl.workspace.common swirl.workspace.messages swirl.workspace.persistence swirl.workspace.rendezvous swirl.workspace.security swirl.workspace.slide swirl.workspace.viz swirl.workspace.viz.pie swirl.workspace.viz.pie.actions 


 







  Overview     Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes







Copyright © 2004-2005 . All Rights Reserved.
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/apidocs/overview-frame.html
##-----------------TITLE------------------------##
Overview (Swirl WebDAV Workspace 0.20 API)
##------------------TEXT------------------------##
All Classes


Packages

swirl.workspace

swirl.workspace.common

swirl.workspace.messages

swirl.workspace.persistence

swirl.workspace.rendezvous

swirl.workspace.security

swirl.workspace.slide

swirl.workspace.viz

swirl.workspace.viz.pie

swirl.workspace.viz.pie.actions




 
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/apidocs/allclasses-frame.html
##-----------------TITLE------------------------##
All Classes (Swirl WebDAV Workspace 0.20 API)
##------------------TEXT------------------------##
All Classes


AdvancedExportFileDialogBox

AggregateCommand

App

BaseFileLauncher

BaseLevel

BasePeer

BaseSwirlCommand

BaseVisualizer

ColorManager

ColorUtils

Configuration

Controller

Coordinate

CopyCommand

DNSSDPeer

DNSSDPeerFinder

DecreaseDotSizeAction

DefaultDot

DeleteCommand

DocumentLogger

Dot

DotElement

DotElementBridge

DotElementFactory

ExportAction

ExportAction

ExportFileDialogBox

FileDescriptorsStore

FileElement

FileLauncher

FileLauncherFactory

FileNameAppearing

FileNode

FileSystemContentStore

GetCommand

GuiPeer

HeadCommand

HelpSwirlAction

HolderManager

HostPathCodec

HostPathCodecImpl

ImportAction

ImportDirectoryAction

IncreaseDotSizeAction

InternalFrameHolder

InternalFrameHolderManager

JmDNSPeer

JmDNSPeerFinder

Level

LockCommand

LoggingFilter

LookupCodec

MacFileLauncher

MePeerFinder

MessageProcessor

MessageReceiver

MessageSender

MkcolCommand

Model

ModelListener

ModelTest

ModelTestVisualizer

MoveCommand

NetUtils

NullMessageSender

OptionsCommand

OptionsVisualizer

OurPropPatchMethod

Peer

PeerFinder

PeerManager

PeerManagerListener

PeerManagerVisualizer

PeerTableModel

PersistenceManager

PersistentLevel

PieWorkSpace

PrivateLevel

PropertiesContainerBuilder

PropertyFileLauncher

PropertyGUIConfig

PropfindCommand

ProppatchCommand

ProxyCommand

PublicLevel

PutCommand

QuerystringCodec

QuitApplicationAction

RMIRegistry

RMIRegistryImpl

RMIRegistryImpl2

ReflectionInvocationHandler

ResourceUpdateFilter

ResourceUpdateListener

SVGPieAction

SVGPieController

SVGPieView

SVGPieViewMouseListener

ScreenShotAction

SecurityManager

SecurityUtils

SecurityVisualizer

SharingLevel

SinglePaneHolderManager

SlidePermissionController

SlideUserRealm

SwirlBridgeExtension

SwirlCommand

SwirlDomExtension

SwirlFileFilter

SwirlGUI

SwirlGUIConfig

SwirlModel

SwirlNeighbor

SwirlNodeFilter

SwirlProxy

SwirlSecurity

SwirlSecurityHandler

SwirlSecurityWrapper

TabbedPaneHolderManager

UnlockCommand

Util

View

Visualizer

WebDAVActivityLogViewer

WebDAVVisualization

WindowsFileLauncher

WrappedResponse

YanceesConfig

YanceesConfigImpl

YanceesMessageReceiver

YanceesMessageSender

YanceesServer

ZoomInAction

ZoomOutAction
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSRecord.html
##-----------------TITLE------------------------##
DNSRecord xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  import java.io.IOException;
19  import java.net.InetAddress;
20  import java.net.UnknownHostException;
21  
22  /***
23   * DNS record
24   *
25   * @author Arthur van Hoff
26   * @version %I%, %G%
27   */
28  abstract class DNSRecord extends DNSEntry
29  {
30      /*** TODO */
31      int ttl;
32  
33      /*** TODO */
34      long created;
35  
36      /***
37       * Create a DNSRecord with a name, type, clazz, and ttl.
38       *
39       * @param name TODO
40       * @param type TODO
41       * @param clazz TODO
42       * @param ttl TODO
43       */
44      DNSRecord(String name, int type, int clazz, int ttl)
45      {
46          super(name, type, clazz);
47          this.ttl = ttl;
48          this.created = System.currentTimeMillis();
49      }
50  
51      /***
52       * True if this record is the same as some other record.
53       *
54       * @param other TODO
55       *
56       * @return TODO
57       */
58      public boolean equals(Object other)
59      {
60          return (other instanceof DNSRecord) && sameAs((DNSRecord)other);
61      }
62  
63      /***
64       * TODO
65       *
66       * @param other TODO
67       *
68       * @return TODO
69       */
70      public String toString(String other)
71      {
72          return toString("record",
73                          ttl + "/" + getRemainingTTL(System.currentTimeMillis())
74                          + "," + other);
75      }
76  
77      /***
78       * Check if the record is expired.
79       *
80       * @param now TODO
81       *
82       * @return TODO
83       */
84      boolean isExpired(long now)
85      {
86          return getExpirationTime(100) <= now;
87      }
88  
89      /***
90       * Get the remaining TTL for this record.
91       *
92       * @param now TODO
93       *
94       * @return TODO
95       */
96      int getRemainingTTL(long now)
97      {
98          return (int)Math.max(0, (getExpirationTime(100) - now) / 1000);
99      }
100 
101     /***
102      * Check if the record is stale, ie it has outlived more than half of its
103      * TTL.
104      *
105      * @param now TODO
106      *
107      * @return TODO
108      */
109     boolean isStale(long now)
110     {
111         return getExpirationTime(50) <= now;
112     }
113 
114     /***
115      * Reset the TTL of a record. This avoids having to update the entire
116      * record in the cache.
117      *
118      * @param other TODO
119      */
120     void resetTTL(DNSRecord other)
121     {
122         created = other.created;
123         ttl = other.ttl;
124     }
125 
126     /***
127      * True if this record is the same as some other record.
128      *
129      * @param other TODO
130      *
131      * @return TODO
132      */
133     boolean sameAs(DNSRecord other)
134     {
135         return super.equals(other) && sameValue((DNSRecord)other);
136     }
137 
138     /***
139      * True if this record has the same value as some other record.
140      *
141      * @param other TODO
142      *
143      * @return TODO
144      */
145     abstract boolean sameValue(DNSRecord other);
146 
147     /***
148      * Get the expiration time of this record.
149      *
150      * @param percent TODO
151      *
152      * @return TODO
153      */
154     long getExpirationTime(int percent)
155     {
156         return created + (percent * ttl * 10L);
157     }
158 
159     /***
160      * True if this record is suppressed by the answers in a message.
161      *
162      * @param msg TODO
163      *
164      * @return TODO
165      */
166     boolean suppressedBy(DNSIncoming msg)
167     {
168         for(int i = msg.numAnswers; i-- > 0;)
169         {
170             if(suppressedBy((DNSRecord)msg.answers.elementAt(i)))
171             {
172                 return true;
173             }
174         }
175 
176         return false;
177     }
178 
179     /***
180      * True if this record would be supressed by an answer. This is the case if
181      * this record would not have a significantly longer TTL.
182      *
183      * @param other TODO
184      *
185      * @return TODO
186      */
187     boolean suppressedBy(DNSRecord other)
188     {
189         if(sameAs(other) && (other.ttl > (ttl / 2)))
190         {
191             return true;
192         }
193 
194         return false;
195     }
196 
197     /***
198      * Write this record into an outgoing message.
199      *
200      * @param out TODO
201      *
202      * @throws IOException TODO
203      */
204     abstract void write(DNSOutgoing out) throws IOException;
205 
206     /***
207      * Address record.
208      */
209     static class Address extends DNSRecord
210     {
211         /*** TODO */
212         int addr;
213 
214         /***
215          * Creates a new Address object.
216          *
217          * @param name TODO
218          * @param type TODO
219          * @param clazz TODO
220          * @param ttl TODO
221          * @param addr TODO
222          */
223         Address(String name, int type, int clazz, int ttl, int addr)
224         {
225             super(name, type, clazz, ttl);
226             this.addr = addr;
227         }
228 
229         /***
230          * TODO
231          *
232          * @return TODO
233          */
234         public String toString()
235         {
236             return toString(getAddress());
237         }
238 
239         /***
240          * TODO
241          *
242          * @return TODO
243          */
244         String getAddress()
245         {
246             return ((addr >> 24) & 0xFF) + "." + ((addr >> 16) & 0xFF) + "."
247                    + ((addr >> 8) & 0xFF) + "." + (addr & 0xFF);
248         }
249 
250         /***
251          * TODO
252          *
253          * @return TODO
254          */
255         InetAddress getInetAddress()
256         {
257             try
258             {
259                 return InetAddress.getByName(getAddress());
260             }
261             catch(UnknownHostException e)
262             {
263                 // should not happen
264                 e.printStackTrace();
265 
266                 return null;
267             }
268         }
269 
270         /***
271          * TODO
272          *
273          * @param other TODO
274          *
275          * @return TODO
276          */
277         boolean sameValue(DNSRecord other)
278         {
279             return (addr == ((Address)other).addr);
280         }
281 
282         /***
283          * TODO
284          *
285          * @param out TODO
286          *
287          * @throws IOException TODO
288          */
289         void write(DNSOutgoing out) throws IOException
290         {
291             out.writeInt(addr);
292         }
293     }
294 
295     /***
296      * Pointer record.
297      */
298     static class Pointer extends DNSRecord
299     {
300         /*** TODO */
301         String alias;
302 
303         /***
304          * Creates a new Pointer object.
305          *
306          * @param name TODO
307          * @param type TODO
308          * @param clazz TODO
309          * @param ttl TODO
310          * @param alias TODO
311          */
312         Pointer(String name, int type, int clazz, int ttl, String alias)
313         {
314             super(name, type, clazz, ttl);
315             this.alias = alias;
316         }
317 
318         /***
319          * TODO
320          *
321          * @return TODO
322          */
323         public String toString()
324         {
325             return toString(alias);
326         }
327 
328         /***
329          * TODO
330          *
331          * @param other TODO
332          *
333          * @return TODO
334          */
335         boolean sameValue(DNSRecord other)
336         {
337             return alias.equals(((Pointer)other).alias);
338         }
339 
340         /***
341          * TODO
342          *
343          * @param out TODO
344          *
345          * @throws IOException TODO
346          */
347         void write(DNSOutgoing out) throws IOException
348         {
349             out.writeName(alias);
350         }
351     }
352 
353     /***
354      * Service record.
355      */
356     static class Service extends DNSRecord
357     {
358         /*** TODO */
359         String server;
360 
361         /*** TODO */
362         int port;
363 
364         /*** TODO */
365         int priority;
366 
367         /*** TODO */
368         int weight;
369 
370         /***
371          * Creates a new Service object.
372          *
373          * @param name TODO
374          * @param type TODO
375          * @param clazz TODO
376          * @param ttl TODO
377          * @param priority TODO
378          * @param weight TODO
379          * @param port TODO
380          * @param server TODO
381          */
382         Service(String name, int type, int clazz, int ttl, int priority,
383                 int weight, int port, String server)
384         {
385             super(name, type, clazz, ttl);
386             this.priority = priority;
387             this.weight = weight;
388             this.port = port;
389             this.server = server;
390         }
391 
392         /***
393          * TODO
394          *
395          * @return TODO
396          */
397         public String toString()
398         {
399             return toString(server + ":" + port);
400         }
401 
402         /***
403          * TODO
404          *
405          * @param other TODO
406          *
407          * @return TODO
408          */
409         boolean sameValue(DNSRecord other)
410         {
411             Service s = (Service)other;
412 
413             return (priority == s.priority) && (weight == s.weight)
414                    && (port == s.port) && server.equals(s.server);
415         }
416 
417         /***
418          * TODO
419          *
420          * @param out TODO
421          *
422          * @throws IOException TODO
423          */
424         void write(DNSOutgoing out) throws IOException
425         {
426             out.writeShort(priority);
427             out.writeShort(weight);
428             out.writeShort(port);
429             out.writeName(server);
430         }
431     }
432 
433     /***
434      * TODO
435      *
436      * @author $author$
437      * @version $Revision: 1.7 $
438      */
439     static class Text extends DNSRecord
440     {
441         /*** TODO */
442         byte[] text;
443 
444         /***
445          * Creates a new Text object.
446          *
447          * @param name TODO
448          * @param type TODO
449          * @param clazz TODO
450          * @param ttl TODO
451          * @param text TODO
452          */
453         Text(String name, int type, int clazz, int ttl, byte[] text)
454         {
455             super(name, type, clazz, ttl);
456             this.text = text;
457         }
458 
459         /***
460          * TODO
461          *
462          * @return TODO
463          */
464         public String toString()
465         {
466             return toString((text.length > 10) ? (new String(text, 0, 7)
467                                                + "...") : new String(text));
468         }
469 
470         /***
471          * TODO
472          *
473          * @param other TODO
474          *
475          * @return TODO
476          */
477         boolean sameValue(DNSRecord other)
478         {
479             Text txt = (Text)other;
480 
481             if(txt.text.length != text.length)
482             {
483                 return false;
484             }
485 
486             for(int i = text.length; i-- > 0;)
487             {
488                 if(txt.text[i] != text[i])
489                 {
490                     return false;
491                 }
492             }
493 
494             return true;
495         }
496 
497         /***
498          * TODO
499          *
500          * @param out TODO
501          *
502          * @throws IOException TODO
503          */
504         void write(DNSOutgoing out) throws IOException
505         {
506             out.writeBytes(text, 0, text.length);
507         }
508     }
509 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/QuerystringCodec.html
##-----------------TITLE------------------------##
QuerystringCodec xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.UnsupportedEncodingException;
4   import java.net.URLDecoder;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   
9   /***
10   * DOCUMENT ME!
11   *
12   * @author bpillet
13   */
14  public class QuerystringCodec implements HostPathCodec
15  {
16      /*** logger for this class */
17      private Log log = LogFactory.getLog(this.getClass());
18  
19      /*** the host to proxy to */
20      private String host;
21  
22      /*** the path on the host to proxy */
23      private String path;
24  
25      /***
26       * Constructs a new codec given the requested path from the client and the
27       * path of the swirl servlet
28       *
29       * <table>
30       * <tr><td>
31       * POST /some/path.html HTTP/1.1
32       * </td><td>
33       * /some/path.html
34       * </td></tr>
35       * <tr><td>
36       * GET http://foo.bar/a.html HTTP/1.0
37       * </td><td>
38       * /a.html
39       * </td></tr>
40       * <tr><td>
41       * HEAD /xyz?a=b HTTP/1.1
42       * </td><td>
43       * /xyz
44       * </td></tr>
45       * </table>
46       *
47       * @param servletPath the path of the swirl servlet
48       * @param queryString the querystring from the client
49       */
50      public QuerystringCodec(final String servletPath, final String queryString)
51      {
52          this.path = SwirlCommand.SLIDE + servletPath;
53  
54          if(log.isDebugEnabled())
55          {
56              log.debug("queryString: " + queryString);
57          }
58  
59          if(queryString != null)
60          {
61              try
62              {
63                  String parse = URLDecoder.decode(queryString, "UTF-8") + "&";
64                  String[] splits = parse.split("&");
65  
66                  for(int i = 0; i < splits.length; ++i)
67                  {
68                      if(log.isDebugEnabled())
69                      {
70                          log.debug("splits " + i + " : " + splits[i]
71                                    + " host val: "
72                                    + splits[i].substring("host=".length()));
73                      }
74  
75                      if(splits[i].startsWith("host="))
76                      {
77                          host = splits[i].substring("host=".length());
78                      }
79                  }
80              }
81              catch(UnsupportedEncodingException e)
82              {
83                  log.error(e, e);
84              }
85          }
86  
87          if(log.isDebugEnabled())
88          {
89              log.debug("path: " + servletPath + "  host: " + host);
90          }
91      }
92  
93      /***
94       * Extract the peer host from a uri that has a peer hostname encoded in it.
95       * If no host is encoded, this method will return ""
96       *
97       * @return the actual host of the peer
98       */
99      public String decodeHost()
100     {
101         if(host == null)
102         {
103             host = "";
104         }
105 
106         if(log.isDebugEnabled())
107         {
108             log.debug("decodeHost returning *" + host + "*");
109         }
110 
111         return host;
112     }
113 
114     /***
115      * Extract the path from a uri that has a peer hostname encoded in it. The
116      * path will be to an underlying slide server on the peer
117      *
118      * @return the actual path on the peer
119      */
120     public String decodePath()
121     {
122         if(log.isDebugEnabled())
123         {
124             log.debug("decodePath returning *" + path + "*");
125         }
126 
127         return path;
128     }
129 
130     /***
131      * Utility method that encodes a host URL in an href. The format is
132      * /the_href/some.file?host=theserver
133      *
134      * @param href the href to hide the host in
135      * @param encodeHost the peer to get the host from
136      *
137      * @return the encoded href
138      */
139     public String encodeHostInPath(final String href, final String encodeHost)
140     {
141         String ret = href.substring(SwirlCommand.SLIDE.length());
142 
143         if(log.isDebugEnabled())
144         {
145             log.debug("href without slide path: *" + ret + "*");
146         }
147 
148         if(ret.length() > 0)
149         {
150             ret += ("?host=" + encodeHost);
151         }
152 
153         ret = SwirlCommand.SWIRL + ret;
154 
155         if(log.isDebugEnabled())
156         {
157             log.debug("modifyHref: " + href + "\r\nencodeHost: " + encodeHost
158                       + "\r\nret: " + ret);
159         }
160 
161         return ret;
162     }
163 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/ServiceInfo.html
##-----------------TITLE------------------------##
ServiceInfo xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  import java.io.ByteArrayOutputStream;
19  import java.io.IOException;
20  import java.io.OutputStream;
21  import java.net.InetAddress;
22  import java.util.Enumeration;
23  import java.util.Hashtable;
24  import java.util.Vector;
25  
26  /***
27   * JmDNS service information.
28   *
29   * @author Arthur van Hoff
30   * @version %I%, %G%
31   */
32  public class ServiceInfo extends JmDNS.Listener
33  {
34      /*** TODO */
35      public static final byte[] NO_VALUE = new byte[0];
36  
37      /*** TODO */
38      Hashtable props;
39  
40      /*** TODO */
41      InetAddress addr;
42  
43      /*** TODO */
44      String name;
45  
46      /*** TODO */
47      String server;
48  
49      /*** TODO */
50      String type;
51  
52      /*** TODO */
53      byte[] text;
54  
55      /*** TODO */
56      int port;
57  
58      /*** TODO */
59      int priority;
60  
61      /*** TODO */
62      int weight;
63  
64      /***
65       * Construct a service description for registrating with JmDNS.
66       *
67       * @param type fully qualified service type name
68       * @param name fully qualified service name
69       * @param port the local port on which the service runs
70       * @param text string describing the service
71       */
72      public ServiceInfo(String type, String name, int port, String text)
73      {
74          this(type, name, port, 0, 0, text);
75      }
76  
77      /***
78       * Construct a service description for registrating with JmDNS.
79       *
80       * @param type fully qualified service type name
81       * @param name fully qualified service name
82       * @param port the local port on which the service runs
83       * @param weight weight of the service
84       * @param priority priority of the service
85       * @param text string describing the service
86       *
87       * @throws RuntimeException TODO
88       */
89      public ServiceInfo(String type, String name, int port, int weight,
90                         int priority, String text)
91      {
92          this(type, name, port, weight, priority, (byte[])null);
93  
94          try
95          {
96              ByteArrayOutputStream out = new ByteArrayOutputStream(text.length());
97  
98              writeUTF(out, text);
99              this.text = out.toByteArray();
100         }
101         catch(IOException e)
102         {
103             throw new RuntimeException("unexpected exception: " + e);
104         }
105     }
106 
107     /***
108      * Construct a service description for registrating with JmDNS. The
109      * properties hashtable must map property names to either Strings or byte
110      * arrays describing the property values.
111      *
112      * @param type fully qualified service type name
113      * @param name fully qualified service name
114      * @param port the local port on which the service runs
115      * @param weight weight of the service
116      * @param priority priority of the service
117      * @param props properties describing the service
118      *
119      * @throws RuntimeException TODO
120      */
121     public ServiceInfo(String type, String name, int port, int weight,
122                        int priority, Hashtable props)
123     {
124         this(type, name, port, weight, priority, new byte[0]);
125 
126         if(props != null)
127         {
128             try
129             {
130                 ByteArrayOutputStream out = new ByteArrayOutputStream(256);
131 
132                 for(Enumeration e = props.keys(); e.hasMoreElements();)
133                 {
134                     String key = (String)e.nextElement();
135                     Object val = props.get(key);
136                     ByteArrayOutputStream out2 = new ByteArrayOutputStream(100);
137 
138                     writeUTF(out2, key);
139 
140                     if(val instanceof String)
141                     {
142                         out2.write('=');
143                         writeUTF(out2, (String)val);
144                     }
145                     else if(val instanceof byte[])
146                     {
147                         out2.write('=');
148 
149                         byte[] bval = (byte[])val;
150 
151                         out2.write(bval, 0, bval.length);
152                     }
153                     else if(val != NO_VALUE)
154                     {
155                         throw new IllegalArgumentException("invalid property value: "
156                                                            + val);
157                     }
158 
159                     byte[] data = out2.toByteArray();
160 
161                     out.write(data.length);
162                     out.write(data, 0, data.length);
163                 }
164 
165                 this.text = out.toByteArray();
166             }
167             catch(IOException e)
168             {
169                 throw new RuntimeException("unexpected exception: " + e);
170             }
171         }
172     }
173 
174     /***
175      * Construct a service description for registrating with JmDNS.
176      *
177      * @param type fully qualified service type name
178      * @param name fully qualified service name
179      * @param port the local port on which the service runs
180      * @param weight weight of the service
181      * @param priority priority of the service
182      * @param text bytes describing the service
183      */
184     public ServiceInfo(String type, String name, int port, int weight,
185                        int priority, byte[] text)
186     {
187         this.type = type;
188         this.name = name;
189         this.port = port;
190         this.weight = weight;
191         this.priority = priority;
192         this.text = text;
193     }
194 
195     /***
196      * Construct a serive record during service discovery.
197      *
198      * @param type TODO
199      * @param name TODO
200      *
201      * @throws IllegalArgumentException TODO
202      */
203     ServiceInfo(String type, String name)
204     {
205         if(!type.endsWith("."))
206         {
207             throw new IllegalArgumentException("type must be fully qualified DNS name ending in '.': "
208                                                + type);
209         }
210 
211         if(name.endsWith("."))
212         {
213             if(!name.endsWith("." + type))
214             {
215                 throw new IllegalArgumentException("service name has the wrong type: name="
216                                                    + name + ", type=" + type);
217             }
218         }
219         else
220         {
221             name = name + "." + type;
222         }
223 
224         this.type = type;
225         this.name = name;
226     }
227 
228     /***
229      * Get the host address of the service (ie X.X.X.X).
230      *
231      * @return TODO
232      */
233     public String getAddress()
234     {
235         byte[] data = addr.getAddress();
236 
237         return (data[0] & 0xFF) + "." + (data[1] & 0xFF) + "."
238                + (data[2] & 0xFF) + "." + (data[3] & 0xFF);
239     }
240 
241     /***
242      * Service name, such as <code>foobar</code>.
243      *
244      * @return TODO
245      */
246     public String getName()
247     {
248         if((type != null) && name.endsWith("." + type))
249         {
250             return name.substring(0, name.length() - (type.length() + 1));
251         }
252 
253         return name;
254     }
255 
256     /***
257      * TODO
258      *
259      * @return TODO
260      */
261     public String getNiceTextString()
262     {
263         StringBuffer buf = new StringBuffer();
264 
265         for(int i = 0, len = text.length; i < len; i++)
266         {
267             if(i >= 20)
268             {
269                 buf.append("...");
270 
271                 break;
272             }
273 
274             int ch = text[i] & 0xFF;
275 
276             if((ch < ' ') || (ch > 127))
277             {
278                 buf.append("//0");
279                 buf.append(Integer.toString(ch, 8));
280             }
281             else
282             {
283                 buf.append((char)ch);
284             }
285         }
286 
287         return buf.toString();
288     }
289 
290     /***
291      * Get the port for the service.
292      *
293      * @return TODO
294      */
295     public int getPort()
296     {
297         return port;
298     }
299 
300     /***
301      * Get the priority of the service.
302      *
303      * @return TODO
304      */
305     public int getPriority()
306     {
307         return priority;
308     }
309 
310     /***
311      * Get a property of the service. This involves decoding the text bytes
312      * into a property list. Returns null if the property is not found or the
313      * text data could not be decoded correctly.
314      *
315      * @param name TODO
316      *
317      * @return TODO
318      */
319     public synchronized byte[] getPropertyBytes(String name)
320     {
321         return (byte[])getProperties().get(name);
322     }
323 
324     /***
325      * Enumeration of the property names.
326      *
327      * @return TODO
328      */
329     public Enumeration getPropertyNames()
330     {
331         Hashtable props = getProperties();
332 
333         return (props != null) ? props.keys() : new Vector().elements();
334     }
335 
336     /***
337      * Get a property of the service. This involves decoding the text bytes
338      * into a property list. Returns null if the property is not found, the
339      * text data could not be decoded correctly, or the resulting bytes are
340      * not a valid UTF8 string.
341      *
342      * @param name TODO
343      *
344      * @return TODO
345      */
346     public synchronized String getPropertyString(String name)
347     {
348         byte[] data = (byte[])getProperties().get(name);
349 
350         if(data == null)
351         {
352             return null;
353         }
354 
355         if(data == NO_VALUE)
356         {
357             return "true";
358         }
359 
360         return readUTF(data, 0, data.length);
361     }
362 
363     /***
364      * Get the name of the server.
365      *
366      * @return TODO
367      */
368     public String getServer()
369     {
370         return server;
371     }
372 
373     /***
374      * Get the text for the serivce as raw bytes.
375      *
376      * @return TODO
377      */
378     public byte[] getTextBytes()
379     {
380         return text;
381     }
382 
383     /***
384      * Get the text for the service. This will interpret the text bytes as a
385      * UTF8 encoded string. Will return null if the bytes are not a valid UTF8
386      * encoded string.
387      *
388      * @return TODO
389      */
390     public String getTextString()
391     {
392         if((text == null) || (text.length == 0)
393            || ((text.length == 1) && (text[0] == 0)))
394         {
395             return null;
396         }
397 
398         return readUTF(text, 0, text.length);
399     }
400 
401     /***
402      * Fully qualified service type name, such as
403      * <code>_http._tcp.local.</code>.
404      *
405      * @return TODO
406      */
407     public String getType()
408     {
409         return type;
410     }
411 
412     /***
413      * Get the URL for this service. An http URL is created by combining the
414      * addres, port, and path properties.
415      *
416      * @return TODO
417      */
418     public String getURL()
419     {
420         return getURL("http");
421     }
422 
423     /***
424      * Get the URL for this service. An URL is created by combining the
425      * protocol, addres, port, and path properties.
426      *
427      * @param protocol TODO
428      *
429      * @return TODO
430      */
431     public String getURL(String protocol)
432     {
433         String url = protocol + "://" + getAddress() + ":" + getPort();
434         String path = getPropertyString("path");
435 
436         if(path != null)
437         {
438             if(path.indexOf("://") >= 0)
439             {
440                 url = path;
441             }
442             else
443             {
444                 url += (path.startsWith("/") ? path : ("/" + path));
445             }
446         }
447 
448         return url;
449     }
450 
451     /***
452      * Get the weight of the service.
453      *
454      * @return TODO
455      */
456     public int getWeight()
457     {
458         return weight;
459     }
460 
461     /***
462      * TODO
463      *
464      * @param obj TODO
465      *
466      * @return TODO
467      */
468     public boolean equals(Object obj)
469     {
470         return (obj instanceof ServiceInfo)
471                && name.equals(((ServiceInfo)obj).name);
472     }
473 
474     /***
475      * TODO
476      *
477      * @return TODO
478      */
479     public int hashCode()
480     {
481         return name.hashCode();
482     }
483 
484     /***
485      * TODO
486      *
487      * @return TODO
488      */
489     public String toString()
490     {
491         StringBuffer buf = new StringBuffer();
492 
493         buf.append("service[");
494         buf.append(name);
495         buf.append(',');
496         buf.append(getAddress());
497         buf.append(':');
498         buf.append(port);
499         buf.append(',');
500         buf.append(getNiceTextString());
501         buf.append(']');
502 
503         return buf.toString();
504     }
505 
506     /***
507      * Get the ip address of the service.
508      *
509      * @return TODO
510      */
511     int getIPAddress()
512     {
513         byte[] data = addr.getAddress();
514 
515         return ((data[0] & 0xFF) << 24) | ((data[1] & 0xFF) << 16)
516                | ((data[2] & 0xFF) << 8) | (data[3] & 0xFF);
517     }
518 
519     /***
520      * TODO
521      *
522      * @return TODO
523      */
524     synchronized Hashtable getProperties()
525     {
526         if((props == null) && (text != null))
527         {
528             Hashtable props = new Hashtable();
529             int off = 0;
530 
531             while(off < text.length)
532             {
533                 // length of the next key value pair
534                 int len = text[off++] & 0xFF;
535 
536                 if((len == 0) || ((off + len) > text.length))
537                 {
538                     props.clear();
539 
540                     break;
541                 }
542 
543                 // look for the '='
544                 int i = 0;
545 
546                 for(; (i < len) && (text[off + i] != '='); i++)
547                 {
548                     ;
549                 }
550 
551                 // get the property name
552                 String name = readUTF(text, off, i);
553 
554                 if(name == null)
555                 {
556                     props.clear();
557 
558                     break;
559                 }
560 
561                 if(i == len)
562                 {
563                     props.put(name, NO_VALUE);
564                 }
565                 else
566                 {
567                     byte[] value = new byte[len - ++i];
568 
569                     System.arraycopy(text, off + i, value, 0, len - i);
570                     props.put(name, value);
571                     off += len;
572                 }
573             }
574 
575             this.props = props;
576         }
577 
578         return props;
579     }
580 
581     /***
582      * Read data bytes as a UTF stream.
583      *
584      * @param data TODO
585      * @param off TODO
586      * @param len TODO
587      *
588      * @return TODO
589      */
590     String readUTF(byte[] data, int off, int len)
591     {
592         StringBuffer buf = new StringBuffer();
593 
594         for(int end = off + len; off < end;)
595         {
596             int ch = data[off++] & 0xFF;
597 
598             switch(ch >> 4)
599             {
600             case 0:
601             case 1:
602             case 2:
603             case 3:
604             case 4:
605             case 5:
606             case 6:
607             case 7:
608 
609                 // 0xxxxxxx
610                 break;
611 
612             case 12:
613             case 13:
614                 if(off >= len)
615                 {
616                     return null;
617                 }
618 
619                 // 110x xxxx   10xx xxxx
620                 ch = ((ch & 0x1F) << 6) | (data[off++] & 0x3F);
621 
622                 break;
623 
624             case 14:
625                 if((off + 2) >= len)
626                 {
627                     return null;
628                 }
629 
630                 // 1110 xxxx  10xx xxxx  10xx xxxx
631                 ch = ((ch & 0x0f) << 12) | ((data[off++] & 0x3F) << 6)
632                      | (data[off++] & 0x3F);
633 
634                 break;
635 
636             default:
637                 if((off + 1) >= len)
638                 {
639                     return null;
640                 }
641 
642                 // 10xx xxxx,  1111 xxxx
643                 ch = ((ch & 0x3F) << 4) | (data[off++] & 0x0f);
644 
645                 break;
646             }
647 
648             buf.append((char)ch);
649         }
650 
651         return buf.toString();
652     }
653 
654     /***
655      * Update the server information from the cache, send out repeated DNS
656      * queries for updated information.
657      *
658      * @param jmdns TODO
659      * @param timeout TODO
660      *
661      * @return TODO
662      */
663     boolean request(JmDNS jmdns, long timeout)
664     {
665         long now = System.currentTimeMillis();
666         int delay = 200;
667         long next = now + delay;
668         long last = now + timeout;
669 
670         try
671         {
672             jmdns.addListener(this, new DNSQuestion(name, TYPE_ANY, CLASS_IN));
673 
674             while((server == null) || (addr == null) || (text == null))
675             {
676                 // check if timeout was reached
677                 if(last <= now)
678                 {
679                     return false;
680                 }
681 
682                 // check if we need to send out another request
683                 if(next <= now)
684                 {
685                     DNSOutgoing out = new DNSOutgoing(FLAGS_QR_QUERY);
686 
687                     out.addQuestion(new DNSQuestion(name, TYPE_SRV, CLASS_IN));
688                     out.addQuestion(new DNSQuestion(name, TYPE_TXT, CLASS_IN));
689 
690                     if(server != null)
691                     {
692                         out.addQuestion(new DNSQuestion(server, TYPE_A, CLASS_IN));
693                     }
694 
695                     out.addAnswer((DNSRecord)jmdns.cache.get(name, TYPE_SRV,
696                                                              CLASS_IN), now);
697                     out.addAnswer((DNSRecord)jmdns.cache.get(name, TYPE_TXT,
698                                                              CLASS_IN), now);
699 
700                     if(server != null)
701                     {
702                         out.addAnswer((DNSRecord)jmdns.cache.get(server,
703                                                                  TYPE_A,
704                                                                  CLASS_IN), now);
705                     }
706 
707                     jmdns.send(out);
708 
709                     next = now + delay;
710                     delay = delay * 2;
711                 }
712 
713                 // wait for an update or a timeout
714                 synchronized(jmdns)
715                 {
716                     jmdns.wait(Math.min(next, last) - now);
717                 }
718 
719                 now = System.currentTimeMillis();
720             }
721 
722             return true;
723         }
724         catch(IOException e)
725         {
726             return false;
727         }
728         catch(InterruptedException e)
729         {
730             return false;
731         }
732         finally
733         {
734             jmdns.removeListener(this);
735         }
736     }
737 
738     /***
739      * JmDNS callback to update a DNS record.
740      *
741      * @param jmdns TODO
742      * @param now TODO
743      * @param rec TODO
744      */
745     void updateRecord(JmDNS jmdns, long now, DNSRecord rec)
746     {
747         if((rec != null) && !rec.isExpired(now))
748         {
749             switch(rec.type)
750             {
751             case TYPE_A:
752                 if(rec.name.equals(server))
753                 {
754                     addr = ((DNSRecord.Address)rec).getInetAddress();
755                 }
756 
757                 break;
758 
759             case TYPE_SRV:
760                 if(rec.name.equals(name))
761                 {
762                     DNSRecord.Service srv = (DNSRecord.Service)rec;
763 
764                     server = srv.server;
765                     port = srv.port;
766                     weight = srv.weight;
767                     priority = srv.priority;
768                     addr = null;
769                     updateRecord(jmdns, now,
770                                  (DNSRecord)jmdns.cache.get(server, TYPE_A,
771                                                             CLASS_IN));
772                 }
773 
774                 break;
775 
776             case TYPE_TXT:
777                 if(rec.name.equals(name))
778                 {
779                     DNSRecord.Text txt = (DNSRecord.Text)rec;
780 
781                     text = txt.text;
782                 }
783 
784                 break;
785             }
786         }
787     }
788 
789     /***
790      * Write a UTF string with a length to a stream.
791      *
792      * @param out TODO
793      * @param str TODO
794      *
795      * @throws IOException TODO
796      */
797     void writeUTF(OutputStream out, String str) throws IOException
798     {
799         for(int i = 0, len = str.length(); i < len; i++)
800         {
801             int c = str.charAt(i);
802 
803             if((c >= 0x0001) && (c <= 0x007F))
804             {
805                 out.write(c);
806             }
807             else if(c > 0x07FF)
808             {
809                 out.write(0xE0 | ((c >> 12) & 0x0F));
810                 out.write(0x80 | ((c >> 6) & 0x3F));
811                 out.write(0x80 | ((c >> 0) & 0x3F));
812             }
813             else
814             {
815                 out.write(0xC0 | ((c >> 6) & 0x1F));
816                 out.write(0x80 | ((c >> 0) & 0x3F));
817             }
818         }
819     }
820 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/swirl/workspace/FileTest.html
##-----------------TITLE------------------------##
FileTest xref
##------------------TEXT------------------------##
1   package swirl.workspace;
2   
3   import junit.framework.Test;
4   import junit.framework.TestCase;
5   import junit.framework.TestSuite;
6   
7   /***
8    * DOCUMENT ME!
9    *
10   * @author bpillet
11   */
12  public class FileTest extends TestCase
13  {
14      /***
15       * Creates a new FileTest object.
16       *
17       * @param arg0 TODO
18       */
19      public FileTest(String arg0)
20      {
21          super(arg0);
22      }
23  
24      /***
25       * TODO
26       *
27       * @return TODO
28       */
29      public static Test suite()
30      {
31          Configuration.init(System.getProperty("basedir", ".")
32                             + "/target/webapps/swirl");
33  
34          //*
35          TestSuite suite = new TestSuite();
36  
37          //suite.addTest(new FileTest("testCopy"));
38          return suite;
39  
40          //*/
41          //return new TestSuite(PeerManagerTest.class);
42      }
43  
44      /*
45         public void testUrl() throws Exception
46         {
47             HttpURL url = new HttpURL("http://myserver.com:9876/slide/myfolder/myfile");
48             System.err.println("url: " + url);
49             System.err.println("aboveHierPath: " + url.getAboveHierPath());
50             System.err.println("getCurrentHierPath: " + url.getCurrentHierPath());
51         }
52         public void testFile() throws Exception
53         {
54             System.out.println("testFile");
55             HttpURL url = new HttpURL("http://localhost:9876/swirl/");
56             //url.setUserinfo("root", "root");
57             WebdavFile file = new WebdavFile(url);
58             System.err.println("exists: " + file.exists());
59             String[] list = file.list();
60             for(int i = 0; i < list.length; ++i)
61                 System.out.println("file: " + list[i]);
62             File[] files = file.listFiles();
63                     for(int i = 0; i < files.length; ++i)
64                         System.out.println("files: " + files[i] + " isDir: " + files[i].isDirectory());
65         }
66         public void testPut() throws Exception
67         {
68             System.out.println("test put");
69             String filepath = "C://dingx//svg.svg";
70             String surl = "http://localhost:9876/swirl/";
71             File f = new File(filepath);
72             WebdavResource resource = new WebdavResource(surl);
73             FileInputStream stream = new FileInputStream(f);
74             boolean success = resource.putMethod(resource.getPath() + "/" + f.getName(), stream);
75             System.err.println("put: " + success);
76             HttpURL url = new HttpURL("http://localhost:9876/slide/");
77             PutMethod put = new PutMethod(url + f.getName());
78             System.err.println("file name is" + f.getName());
79             // setting the dummy content to the FILE string
80             put.setRequestBody(stream);
81             HttpClient client = new HttpClient();
82             System.err.println("put: " + client.executeMethod(put) + ":" + put.getStatusText());
83         }
84         public void testCopy() throws Exception
85         {
86             System.out.println("test copy");
87             HttpURL url = new HttpURL("http://localhost:9876/swirl/");
88             //url.setUserinfo("root", "root");
89             WebdavResource resource = new WebdavResource(url);
90             System.err.println("the path is : " + resource.getPath());
91             System.err.println("exists: " + resource.exists());
92             System.err.println("isCollection: " + resource.isCollection());
93             url = new HttpURL("http://localhost:9876/swirl/test.txt");
94             WebdavResource file = new WebdavResource(url);
95             //url = new HttpURL("C://dingx//svg.svg");
96             //File f = new File("C://dingx//svg.svg");
97             WebdavFile f = new WebdavFile(url);
98             System.err.println("file name is: " + f.getName());
99             //System.err.println("file length is" + file.length());
100            //boolean success = file.copyMethod(resource.getPath());
101            boolean success = file.copyMethod("test/");
102            System.err.println("status is " + file.getStatusMessage());
103            System.err.println("success is " + success);
104            String[] list = resource.list();
105            WebdavResources resources = resource.getChildResources();
106            for(Enumeration en = resources.getResources(); en.hasMoreElements(); )
107            {
108                WebdavResource res = (WebdavResource)en.nextElement();
109                System.out.println("res: " + res + "  isCollection: " + res.isCollection());
110            }
111            //success = file.deleteMethod();
112            //System.err.println("delete success is " + success);
113        }
114        public void testMove() throws Exception
115        {
116            System.out.println("test copy");
117            HttpURL url = new HttpURL("http://128.195.30.104:9876/slide/");
118            //url.setUserinfo("root", "root");
119            WebdavResource resource = new WebdavResource(url);
120            System.err.println("the path is : " + resource.getPath());
121            System.err.println("exists: " + resource.exists());
122            System.err.println("isCollection: " + resource.isCollection());
123            url = new HttpURL("http://localhost:9876/slide/control.xml");
124            WebdavResource file = new WebdavResource(url);
125            //url = new HttpURL("C://dingx//svg.svg");
126            //File f = new File("C://dingx//svg.svg");
127            WebdavFile f = new WebdavFile(url);
128            //System.err.println("file length is" + file.length());
129            boolean success = resource.putMethod(resource.getPath() + "/" + f.getName(), file.getMethodData());
130            System.err.println("success is " + success);
131            String[] list = resource.list();
132            WebdavResources resources = resource.getChildResources();
133            for(Enumeration en = resources.getResources(); en.hasMoreElements(); )
134            {
135                WebdavResource res = (WebdavResource)en.nextElement();
136                System.out.println("res: " + res + "  isCollection: " + res.isCollection());
137            }
138            //success = file.deleteMethod();
139            //System.err.println("delete success is " + success);
140        }
141        public void testPropertySet() throws Exception
142        {
143            System.out.println("test PropertySet");
144            HttpURL url = new HttpURL("http://128.195.30.105:9876/slide/");
145            WebdavResource resource = new WebdavResource(url);
146            System.err.println("the path is : " + resource.getPath());
147            System.err.println("exists: " + resource.exists());
148            System.err.println("isCollection: " + resource.isCollection());
149            String file = "/slide/test1";
150            String prop = "newProp3";
151            PropPatchMethod method = new PropPatchMethod(file);
152            method.addPropertyToSet(prop, "1");
153            System.err.println("method: " + resource.executeHttpRequestMethod(
154                    resource.retrieveSessionInstance(), method)    + method.getStatusText());
155            DocumentLogger.logDocument(log, "proppath response", method.getResponseDocument());
156            Vector vProperties = new Vector(1);
157            vProperties.addElement(prop);
158            PropFindMethod propFind = new PropFindMethod(file,3, vProperties.elements());
159            System.err.println("method: " + resource.executeHttpRequestMethod(
160                    resource.retrieveSessionInstance(), propFind) + propFind.getStatusText());
161            DocumentLogger.logDocument(log, "propfind response", method.getResponseDocument());
162            Enumeration enum = propFind.getResponseProperties(file);
163            //System.err.println("status is : " + resource.getStatusMessage());
164            while(enum.hasMoreElements())
165            {
166                Object o = enum.nextElement();
167                System.out.println("o: " + o);
168                Property p = (Property)o;
169                System.out.println("p.val" + p.getElement());
170                //String s = (String)o;
171                //System.out.println("s: " + s);
172            }
173        }
174        public void testPropertySet2() throws Exception
175        {
176            System.out.println("test PropertySet2");
177            HttpURL url = new HttpURL("http://128.195.30.105:9876/swirl/");
178            WebdavResource resource = new WebdavResource(url);
179            String file = "http://128.195.30.105:9876/swirl/test1";
180            PropertyName pn = new PropertyName("DAV:", "sharingDegree");
181            //String prop = "newProp4";
182            boolean bset = resource.proppatchMethod(file, pn, "somthin else", true);
183            System.err.println("Setting property is : " + bset);
184            System.err.println("status is : " + resource.getStatusMessage());
185            Enumeration enum = resource.propfindMethod(file, "sharingDegree");
186            //System.err.println("status is : " + resource.getStatusMessage());
187            while(enum.hasMoreElements())
188            {
189                Object o = enum.nextElement();
190                System.out.println("o: " + o);
191                //String s = (String)o;
192                //System.out.println("s: " + s);
193            }
194        }
195        public void testPropertyGet() throws Exception
196        {
197            System.out.println("test PropertyGet");
198            HttpURL url = new HttpURL("http://128.195.30.105:9876/swirl/");
199            WebdavResource resource = new WebdavResource(url);
200            PropertyName pn = new PropertyName("DAV:", "sharingDegree");
201            System.err.println("the path is : " + resource.getPath());
202            System.err.println("exists: " + resource.exists());
203            System.err.println("isCollection: " + resource.isCollection());
204                    Enumeration enum = resource.propfindMethod("/swirl/test.doc", "sharingDegree");
205            while(enum.hasMoreElements())
206            {
207                Object o = enum.nextElement();
208                System.out.println("o: " + o);
209                String s = (String)o;
210                System.out.println("s: " + s);
211            }
212        }
213        public void testLock() throws Exception
214        {
215            System.out.println("test lock");
216            HttpURL url = new HttpURL("http://localhost:9876/slide/dingx");
217            //url.setUserinfo("root", "root");
218            WebdavResource resource = new WebdavResource(url);
219            //resource.lockMethod();
220            System.err.println("exists: " + resource.exists());
221            System.err.println("isCollection: " + resource.isCollection());
222            url = new HttpURL("http://localhost:9876/swirl/control.xml_on_128.195.30.104:9876");
223            WebdavResource file = new WebdavResource(url);
224            //file.lockMethod();
225            //url = new HttpURL("C://dingx//svg.svg");
226            //File f = new File("C://dingx//svg.svg");
227            WebdavFile f = new WebdavFile(url);
228            //System.err.println("file length is" + file.length());
229            boolean success = resource.putMethod(resource.getPath() + "/" + f.getName(), file.getMethodData());
230            System.err.println("success is " + success);
231            //file.unlockMethod();
232            //resource.unlockMethod();
233            String[] list = resource.list();
234            WebdavResources resources = resource.getChildResources();
235            for(Enumeration en = resources.getResources(); en.hasMoreElements(); )
236            {
237                WebdavResource res = (WebdavResource)en.nextElement();
238                System.out.println("res: " + res + "  isCollection: " + res.isCollection());
239            }
240            //success = file.deleteMethod();
241            System.err.println("delete success is " + success);
242        }
243        public void testResource() throws Exception
244        {
245                }
246      */
247 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/MyEdgeStringer.html
##-----------------TITLE------------------------##
MyEdgeStringer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.util.HashMap;
4   import java.util.Map;
5   
6   import edu.uci.ics.jung.graph.Edge;
7   import edu.uci.ics.jung.graph.Graph;
8   import edu.uci.ics.jung.graph.decorators.EdgeStringer;
9   
10  /***
11   * TODO
12   *
13   * @author $author$
14   * @version $Revision: 1.5 $
15   */
16  class MyEdgeStringer implements EdgeStringer
17  {
18      /*** TODO */
19      Graph g;
20  
21      /*** TODO */
22      Map edgeToLabel = new HashMap();
23  
24      /***
25       * Creates a new MyEdgeStringer object.
26       *
27       * @param g TODO
28       */
29      MyEdgeStringer(Graph g)
30      {
31          this.g = g;
32      }
33  
34      /***
35       * TODO
36       *
37       * @param e TODO
38       * @param label TODO
39       */
40      public void setLabel(Edge e, String label)
41      {
42          edgeToLabel.put(e, label);
43      }
44  
45      /***
46       * TODO
47       *
48       * @param e TODO
49       *
50       * @return TODO
51       */
52      public String getLabel(Edge e)
53      {
54          return (String)edgeToLabel.get(e);
55      }
56  
57      /***
58       * TODO
59       *
60       * @param e TODO
61       *
62       * @return TODO
63       */
64      public Edge removeEdge(Edge e)
65      {
66          return (Edge)edgeToLabel.remove(e);
67      }
68  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSConstants.html
##-----------------TITLE------------------------##
DNSConstants xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  /***
19   * DNS constants.
20   *
21   * @author Arthur van Hoff
22   * @version %I%, %G%
23   */
24  abstract class DNSConstants
25  {
26      /*** TODO */
27      static final String MDNS_GROUP = "224.0.0.251";
28  
29      /*** TODO */
30      static final int MDNS_PORT = 5353;
31  
32      /*** TODO */
33      static final int DNS_PORT = 53;
34  
35      /*** TODO */
36      static final int DNS_TTL = 60 * 60; // default one hour TTL
37  
38      /*** TODO */
39      static final int MAX_MSG_TYPICAL = 1460;
40  
41      /*** TODO */
42      static final int MAX_MSG_ABSOLUTE = 8972;
43  
44      /*** TODO */
45      static final int FLAGS_QR_MASK = 0x8000; // Query response mask
46  
47      /*** TODO */
48      static final int FLAGS_QR_QUERY = 0x0000; // Query 
49  
50      /*** TODO */
51      static final int FLAGS_QR_RESPONSE = 0x8000; // Response
52  
53      /*** TODO */
54      static final int FLAGS_AA = 0x0400; // Authorative answer
55  
56      /*** TODO */
57      static final int FLAGS_TC = 0x0200; // Truncated
58  
59      /*** TODO */
60      static final int FLAGS_RD = 0x0100; // Recursion desired
61  
62      /*** TODO */
63      static final int FLAGS_RA = 0x8000; // Recursion available
64  
65      /*** TODO */
66      static final int FLAGS_Z = 0x0040; // Zero
67  
68      /*** TODO */
69      static final int FLAGS_AD = 0x0020; // Authentic data
70  
71      /*** TODO */
72      static final int FLAGS_CD = 0x0010; // Checking disabled
73  
74      /*** TODO */
75      static final int CLASS_IN = 1; // Final Static Internet
76  
77      /*** TODO */
78      static final int CLASS_CS = 2; // CSNET
79  
80      /*** TODO */
81      static final int CLASS_CH = 3; // CHAOS
82  
83      /*** TODO */
84      static final int CLASS_HS = 4; // Hesiod
85  
86      /*** TODO */
87      static final int CLASS_NONE = 254; // Used in DNS UPDATE [RFC 2136]
88  
89      /*** TODO */
90      static final int CLASS_ANY = 255; // Not a DNS class, but a DNS query class, meaning "all classes"
91  
92      /*** TODO */
93      static final int CLASS_MASK = 0x7FFF; // Multicast DNS uses the bottom 15 bits to identify the record class...
94  
95      /*** TODO */
96      static final int CLASS_UNIQUE = 0x8000; // ... and the top bit indicates that all other cached records are now invalid
97  
98      /*** TODO */
99      static final int TYPE_A = 1; // Address
100 
101     /*** TODO */
102     static final int TYPE_NS = 2; // Name Server
103 
104     /*** TODO */
105     static final int TYPE_MD = 3; // Mail Destination
106 
107     /*** TODO */
108     static final int TYPE_MF = 4; // Mail Forwarder
109 
110     /*** TODO */
111     static final int TYPE_CNAME = 5; // Canonical Name
112 
113     /*** TODO */
114     static final int TYPE_SOA = 6; // Start of Authority
115 
116     /*** TODO */
117     static final int TYPE_MB = 7; // Mailbox
118 
119     /*** TODO */
120     static final int TYPE_MG = 8; // Mail Group
121 
122     /*** TODO */
123     static final int TYPE_MR = 9; // Mail Rename
124 
125     /*** TODO */
126     static final int TYPE_NULL = 10; // NULL RR
127 
128     /*** TODO */
129     static final int TYPE_WKS = 11; // Well-known-service
130 
131     /*** TODO */
132     static final int TYPE_PTR = 12; // Domain Name pofinal static inter
133 
134     /*** TODO */
135     static final int TYPE_HINFO = 13; // Host information
136 
137     /*** TODO */
138     static final int TYPE_MINFO = 14; // Mailbox information
139 
140     /*** TODO */
141     static final int TYPE_MX = 15; // Mail exchanger
142 
143     /*** TODO */
144     static final int TYPE_TXT = 16; // Arbitrary text string
145 
146     /*** TODO */
147     static final int TYPE_SRV = 33; // Service record
148 
149     /*** TODO */
150     static final int TYPE_ANY = 255;
151 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSQuestion.html
##-----------------TITLE------------------------##
DNSQuestion xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  /***
19   * A DNS question.
20   *
21   * @author Arthur van Hoff
22   * @version %I%, %G%
23   */
24  final class DNSQuestion extends DNSEntry
25  {
26      /***
27       * Create a question.
28       *
29       * @param name TODO
30       * @param type TODO
31       * @param clazz TODO
32       */
33      DNSQuestion(String name, int type, int clazz)
34      {
35          super(name, type, clazz);
36      }
37  
38      /***
39       * For debugging only.
40       *
41       * @return TODO
42       */
43      public String toString()
44      {
45          return toString("question", null);
46      }
47  
48      /***
49       * Check if this question is answered by a given DNS record.
50       *
51       * @param rec TODO
52       *
53       * @return TODO
54       */
55      boolean answeredBy(DNSRecord rec)
56      {
57          return (clazz == rec.clazz)
58                 && ((type == rec.type) || (type == TYPE_ANY))
59                 && name.equals(rec.name);
60      }
61  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/HostPathCodecImpl.html
##-----------------TITLE------------------------##
HostPathCodecImpl xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import org.apache.commons.logging.Log;
4   import org.apache.commons.logging.LogFactory;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author bpillet
10   */
11  public class HostPathCodecImpl implements HostPathCodec
12  {
13      /*** marker in href to separate the original href from the encoded host */
14      static final String SEPARATOR = "_on_";
15  
16      /*** commons-logging log that maps to this class */
17      private Log log = LogFactory.getLog(this.getClass());
18  
19      /*** the encoded peer's host in the client's href */
20      private String host;
21  
22      /*** the encoded peer's path in the client's href */
23      private String path;
24  
25      /*** the original path sent by the client */
26      private String servletPath;
27  
28      /***
29       * Constructs a new codec given the requested path from the client and the
30       * path of the swirl servlet
31       *
32       * <table>
33       * <tr><td>
34       * POST /some/path.html HTTP/1.1
35       * </td><td>
36       * /some/path.html
37       * </td></tr>
38       * <tr><td>
39       * GET http://foo.bar/a.html HTTP/1.0
40       * </td><td>
41       * /a.html
42       * </td></tr>
43       * <tr><td>
44       * HEAD /xyz?a=b HTTP/1.1
45       * </td><td>
46       * /xyz
47       * </td></tr>
48       * </table>
49       *
50       * @param servPath the path of the swirl servlet
51       */
52      public HostPathCodecImpl(final String servPath)
53      {
54          this.servletPath = servPath;
55  
56          if(log.isDebugEnabled())
57          {
58              log.debug("servletPath: " + servletPath);
59          }
60  
61          decodeHost();
62          decodePath();
63      }
64  
65      /***
66       * Extract the peer host from a uri that has a peer hostname encoded in it.
67       * If no host is encoded, this method will return ""
68       *
69       * @return the actual host of the peer
70       */
71      public String decodeHost()
72      {
73          if(host == null)
74          {
75              int position = servletPath.lastIndexOf(SEPARATOR);
76  
77              if(log.isDebugEnabled())
78  	        {
79              	log.debug("position: " + position);
80  	        }
81  
82              if(position != -1)
83              {
84                  host = servletPath.substring(position + SEPARATOR.length());
85                  if(log.isDebugEnabled())
86      	        {
87                  	log.debug("host1: " + host);
88      	        }
89  
90                  int slash = host.indexOf('/');
91  
92                  if(slash != -1)
93                  {
94                      host = host.substring(0, slash);
95                  }
96              }
97  
98              if(host == null)
99              {
100                 host = "";
101             }
102 
103             if(log.isDebugEnabled())
104 	        {
105             	log.debug("decodeHost: " + servletPath + "\nreturning " + host);
106 	        }
107         }
108 
109         return host;
110     }
111 
112     /***
113      * Extract the path from a uri that has a peer hostname encoded in it. The
114      * path will be to an underlying slide server on the peer
115      *
116      * @return the actual path on the peer
117      */
118     public String decodePath()
119     {
120         if(path == null)
121         {
122             path = SwirlCommand.SLIDE + servletPath;
123 
124             if(log.isDebugEnabled())
125 	        {
126             	log.debug("host: " + host + "  pathBeforeReplaceAll: " + path);
127 	        }
128 
129             path = path.replaceAll(SEPARATOR + host, "");
130 
131             if(log.isDebugEnabled())
132 	        {
133             	log.debug("host: " + host + "  pathAfterReplaceAll: " + path);
134             	log.debug("decodePath: " + servletPath + "\nreturning: " + path);
135 	        }
136         }
137 
138         return path;
139     }
140 
141     /***
142      * Utility method that encodes a host URL in an href. The format is
143      * /the_href/some.file_on_host
144      *
145      * @param href the href to hide the host in
146      * @param encodeHost the peer to get the host from
147      *
148      * @return the encoded href
149      */
150     public String encodeHostInPath(final String href, final String encodeHost)
151     {
152         if(log.isDebugEnabled())
153         {
154             log.debug("modifyHref: " + href + "  encodeHost: " + encodeHost);
155         }
156 
157         String ret = href.substring(SwirlCommand.SLIDE.length());
158 
159         if(log.isDebugEnabled())
160         {
161             log.debug("href without slide path: *" + ret + "*");
162         }
163 
164         if(ret.length() > 1)
165         {
166             if(ret.endsWith("/"))
167             {
168                 ret = ret.substring(0, ret.length() - 1);
169                 ret += (SEPARATOR + encodeHost + '/');
170             }
171             else
172             {
173                 ret += (SEPARATOR + encodeHost);
174             }
175         }
176 
177         ret = SwirlCommand.SWIRL + ret;
178 
179         if(log.isDebugEnabled())
180         {
181             log.debug("ret: " + ret);
182         }
183 
184         return ret;
185     }
186 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSCache.html
##-----------------TITLE------------------------##
DNSCache xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  import java.util.Iterator;
19  
20  /***
21   * A table of DNS entries. This is a closed hash table which can handle
22   * multiple entries with the same name. It provides iterators to efficiently
23   * iterate over all the entries with a given name.
24   *
25   * @author Arthur van Hoff
26   * @version %I%, %G%
27   */
28  class DNSCache
29  {
30      /*** TODO */
31      static final float LOAD_FACTOR = 0.75f;
32  
33      /*** TODO */
34      DNSEntry[] entries;
35  
36      /*** TODO */
37      float loadFactor;
38  
39      /*** TODO */
40      int count;
41  
42      /***
43       * Create a table with a given initial size.
44       *
45       * @param size TODO
46       */
47      DNSCache(int size)
48      {
49          size = Math.max(2, size * 2);
50  
51          for(; ((size % 2) == 0) || ((size % 3) == 0) || ((size % 5) == 0);
52              size++)
53          {
54              ;
55          }
56  
57          this.entries = new DNSEntry[size];
58      }
59  
60      /***
61       * Add an entry to the table. The table will be grown if it is more than
62       * 75% full.
63       *
64       * @param entry TODO
65       */
66      void add(DNSEntry entry)
67      {
68          // rehash if necessary
69          if(count >= (entries.length * LOAD_FACTOR))
70          {
71              entries = rehash(entries, entries.length * 2);
72          }
73  
74          add(entries, entry);
75          count++;
76      }
77  
78      /***
79       * Iterate over all entries.
80       *
81       * @return TODO
82       */
83      Iterator all()
84      {
85          return new IterateAll();
86      }
87  
88      /***
89       * Iterate only over items with matching name.
90       *
91       * @param name TODO
92       *
93       * @return TODO
94       */
95      Iterator find(String name)
96      {
97          return new IterateKey(name.toLowerCase());
98      }
99  
100     /***
101      * Get a matching DNS entry from the table (using equals). Returns the
102      * entry that was found.
103      *
104      * @param entry TODO
105      *
106      * @return TODO
107      */
108     DNSEntry get(DNSEntry entry)
109     {
110         int i = Math.abs(entry.key.hashCode()) % entries.length;
111 
112         while(true)
113         {
114             DNSEntry e = entries[i];
115 
116             if(e == null)
117             {
118                 return null;
119             }
120 
121             if(e.equals(entry))
122             {
123                 return e;
124             }
125 
126             if(--i < 0)
127             {
128                 i = entries.length - 1;
129             }
130         }
131     }
132 
133     /***
134      * Get a matching DNS entry from the table.
135      *
136      * @param name TODO
137      * @param type TODO
138      * @param clazz TODO
139      *
140      * @return TODO
141      */
142     DNSEntry get(String name, int type, int clazz)
143     {
144         String key = name.toLowerCase();
145         int i = Math.abs(key.hashCode()) % entries.length;
146 
147         while(true)
148         {
149             DNSEntry e = entries[i];
150 
151             if(e == null)
152             {
153                 return null;
154             }
155 
156             if(key.equals(e.key) && (type == e.type) && (clazz == e.clazz))
157             {
158                 return e;
159             }
160 
161             if(--i < 0)
162             {
163                 i = entries.length - 1;
164             }
165         }
166     }
167 
168     /***
169      * List all entries for debugging.
170      */
171     void print()
172     {
173         for(Iterator i = all(); i.hasNext();)
174         {
175             System.out.println(i.next());
176         }
177     }
178 
179     /***
180      * Remove a specific entry from the table. Returns true if the entry was
181      * found.
182      *
183      * @param entry TODO
184      *
185      * @return TODO
186      */
187     boolean remove(DNSEntry entry)
188     {
189         int i = Math.abs(entry.key.hashCode()) % entries.length;
190 
191         while(true)
192         {
193             DNSEntry e = entries[i];
194 
195             if(e == null)
196             {
197                 return false;
198             }
199 
200             if(e == entry)
201             {
202                 remove(i);
203 
204                 return true;
205             }
206 
207             if(--i < 0)
208             {
209                 i = entries.length - 1;
210             }
211         }
212     }
213 
214     /***
215      * Add an entry to a table.
216      *
217      * @param entries TODO
218      * @param entry TODO
219      */
220     private void add(DNSEntry[] entries, DNSEntry entry)
221     {
222         int i = Math.abs(entry.key.hashCode()) % entries.length;
223 
224         while(entries[i] != null)
225         {
226             i = ((i == 0) ? entries.length : i) - 1;
227         }
228 
229         entries[i] = entry;
230     }
231 
232     /***
233      * Rehash a table.
234      *
235      * @param entries TODO
236      * @param size TODO
237      *
238      * @return TODO
239      */
240     private DNSEntry[] rehash(DNSEntry[] entries, int size)
241     {
242         for(; ((size % 2) == 0) || ((size % 3) == 0) || ((size % 5) == 0);
243             size++)
244         {
245             ;
246         }
247 
248         DNSEntry[] newentries = new DNSEntry[size];
249 
250         for(int i = 0, n = entries.length; i < n; i++)
251         {
252             if(entries[i] != null)
253             {
254                 add(newentries, entries[i]);
255             }
256         }
257 
258         return newentries;
259     }
260 
261     /***
262      * Remove entry at a given index. Reshuffle as needed.
263      *
264      * @param i TODO
265      */
266     private void remove(int i)
267     {
268         int empty = i;
269 
270         entries[empty] = null;
271         count--;
272 
273         while(true)
274         {
275             if(--i < 0)
276             {
277                 i = entries.length - 1;
278             }
279 
280             DNSEntry e = entries[i];
281 
282             if(e == null)
283             {
284                 return;
285             }
286 
287             int j = Math.abs(e.key.hashCode()) % entries.length;
288 
289             if((i < empty) ? ((j < i) || (j >= empty)) : ((j < i)
290                            && (j >= empty)))
291             {
292                 entries[empty] = e;
293                 empty = i;
294                 entries[empty] = null;
295             }
296         }
297     }
298 
299     /***
300      * Iterate over all entries.
301      */
302     private class IterateAll implements Iterator
303     {
304         /*** TODO */
305         int index;
306 
307         /***
308          * Creates a new IterateAll object.
309          */
310         IterateAll()
311         {
312             index = entries.length - 1;
313         }
314 
315         /***
316          * TODO
317          *
318          * @return TODO
319          */
320         public boolean hasNext()
321         {
322             for(; index >= 0; index--)
323             {
324                 if(entries[index] != null)
325                 {
326                     return true;
327                 }
328             }
329 
330             return false;
331         }
332 
333         /***
334          * TODO
335          *
336          * @return TODO
337          */
338         public Object next()
339         {
340             return entries[index--];
341         }
342 
343         /***
344          * TODO
345          */
346         public void remove()
347         {
348             DNSCache.this.remove(++index);
349         }
350     }
351 
352     /***
353      * Iterate over some entries.
354      */
355     private class IterateKey implements Iterator
356     {
357         /*** TODO */
358         String key;
359 
360         /*** TODO */
361         int index;
362 
363         /***
364          * Creates a new IterateKey object.
365          *
366          * @param key TODO
367          */
368         IterateKey(String key)
369         {
370             this.key = key;
371             this.index = Math.abs(key.hashCode()) % entries.length;
372         }
373 
374         /***
375          * TODO
376          *
377          * @return TODO
378          */
379         public boolean hasNext()
380         {
381             while(true)
382             {
383                 if(index < 0)
384                 {
385                     index = entries.length - 1;
386                 }
387 
388                 DNSEntry e = entries[index];
389 
390                 if(e == null)
391                 {
392                     return false;
393                 }
394 
395                 if(e.key.equals(key))
396                 {
397                     return true;
398                 }
399 
400                 index--;
401             }
402         }
403 
404         /***
405          * TODO
406          *
407          * @return TODO
408          */
409         public Object next()
410         {
411             return entries[index--];
412         }
413 
414         /***
415          * TODO
416          */
417         public void remove()
418         {
419             DNSCache.this.remove(++index);
420         }
421     }
422 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/swirl/workspace/PropfindCompareTest.html
##-----------------TITLE------------------------##
PropfindCompareTest xref
##------------------TEXT------------------------##
1   package swirl.workspace;
2   
3   import junit.framework.Test;
4   import junit.framework.TestSuite;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.apache.webdav.lib.methods.PropFindMethod;
10  
11  /***
12   * TODO
13   *
14   * @author $author$
15   * @version $Revision: 1.9 $
16   */
17  public class PropfindCompareTest extends CompareCommandTest
18  {
19      /*** TODO */
20      String requestBody;
21  
22      /*** TODO */
23      int depth;
24  
25      /*** TODO */
26      private Log log = LogFactory.getLog(this.getClass());
27  
28      /***
29       * Creates a new PropfindCompareTest object.
30       *
31       * @param name TODO
32       */
33      public PropfindCompareTest(String name)
34      {
35          super(name);
36      }
37  
38      /***
39       * TODO
40       *
41       * @return TODO
42       */
43      public static Test suite()
44      {
45          TestSuite suite = new TestSuite();
46  
47          suite.addTestSuite(PropfindCompareTest.class);
48  
49          /*
50             //suite.addTest(new PropfindCommandTest("testSlash"));
51             //suite.addTest(new PropfindCompareTest("testNoSlash"));
52             suite.addTest(new PropfindCompareTest("testMac1"));
53             //suite.addTest(new PropfindCompareTest("testMac2"));
54             //suite.addTest(new PropfindCompareTest("testMac3"));
55             //suite.addTest(new PropfindCompareTest("testMac4"));
56             //suite.addTest(new PropfindCompareTest("testMac5"));
57             //suite.addTest(new PropfindCompareTest("testMac6"));
58             //suite.addTest(new PropfindCommandTest("testCollection"));
59             //suite.addTest(new PropfindCommandTest("testFile"));
60             suite.addTest(new PropfindCommandTest("testDeepFile"));
61             //suite.addTest(new PropfindCommandTest("testNonexistentFile"));
62             //*/
63          return wrapSuite(suite);
64      }
65  
66      /***
67       * TODO
68       */
69      public void setUp()
70      {
71          super.setUp();
72          requestBody = "";
73          depth = 0;
74      }
75  
76      /***
77       * TODO
78       *
79       * @throws Exception TODO
80       */
81      public void testCollection() throws Exception
82      {
83          depth = 3;
84          go(SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION,
85             SlideTestSetup.SLIDE + SlideTestSetup.COLLECTION, 207);
86      }
87  
88      /***
89       * TODO
90       *
91       * @throws Exception TODO
92       */
93      public void testDeepFile() throws Exception
94      {
95          depth = 3;
96          go(SlideTestSetup.SWIRL + SlideTestSetup.DEEP_FILE,
97             SlideTestSetup.SLIDE + SlideTestSetup.DEEP_FILE, 207);
98      }
99  
100     /***
101      * TODO
102      *
103      * @throws Exception TODO
104      */
105     public void testFile() throws Exception
106     {
107         depth = 3;
108         go(SlideTestSetup.SWIRL + SlideTestSetup.FILE,
109            SlideTestSetup.SLIDE + SlideTestSetup.FILE, 207);
110     }
111 
112     /***
113      * TODO
114      *
115      * @throws Exception TODO
116      */
117     public void testMac1() throws Exception
118     {
119         requestBody = "<?xml version='1.0' encoding='utf-8' ?>"
120                       + "<D:propfind xmlns:D='DAV:'>" + "<D:prop>"
121                       + "<D:resourcetype/>" + "</D:prop>" + "</D:propfind>";
122         depth = 0;
123 
124         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
125 
126         Object count = swirlBody.selectObject("count(//D:response)");
127 
128         if(log.isDebugEnabled())
129         {
130             log.debug("count: " + count);
131         }
132 
133         assertEquals("There should be only one response", 1,
134                      ((Number)count).intValue());
135 
136         /*
137            PROPFIND /slide/ HTTP/1.1
138            User-Agent: WebDAVFS/1.2.7 (01278000) Darwin/7.4.0 (Power Macintosh)
139            Accept: */
140         /*
141            Host: 128.195.30.106:8086
142            Content-Type: text/xml
143            Depth: 0
144            Content-Length: 121
145            <?xml version="1.0" encoding="utf-8" ?>
146            <D:propfind xmlns:D="DAV:">
147            <D:prop>
148            <D:resourcetype/>
149            </D:prop>
150            </D:propfind>
151          */
152     }
153 
154     /***
155      * TODO
156      *
157      * @throws Exception TODO
158      */
159     public void testMac2() throws Exception
160     {
161         depth = 0;
162         requestBody = "<?xml version='1.0' encoding='utf-8' ?>"
163                       + "<D:propfind xmlns:D='DAV:'>" + "<D:prop>"
164                       + "<D:quota/>" + "<D:quotaused/>" + "</D:prop>"
165                       + "</D:propfind>";
166 
167         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
168 
169         /*
170            PROPFIND /slide/ HTTP/1.1
171            User-Agent: WebDAVFS/1.2.7 (01278000) Darwin/7.4.0 (Power Macintosh)
172            Accept: */
173         /*
174            Host: 128.195.30.106:8086
175            Content-Type: text/xml
176            Depth: 0
177            Content-Length: 129
178            <?xml version="1.0" encoding="utf-8" ?>
179            <D:propfind xmlns:D="DAV:">
180            <D:prop>
181            <D:quota/>
182            <D:quotaused/>
183            </D:prop>
184            </D:propfind>
185          */
186     }
187 
188     /***
189      * TODO
190      *
191      * @throws Exception TODO
192      */
193     public void testMac3() throws Exception
194     {
195         requestBody = "<?xml version='1.0' encoding='utf-8' ?>"
196                       + "<D:propfind xmlns:D='DAV:'>" + "<D:prop>"
197                       + "<D:getlastmodified/>" + "<D:getcontentlength/>"
198                       + "<D:resourcetype/>" + "</D:prop>" + "</D:propfind>";
199         depth = 0;
200         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
201 
202         /*
203            PROPFIND /slide/ HTTP/1.1
204            User-Agent: WebDAVFS/1.2.7 (01278000) Darwin/7.4.0 (Power Macintosh)
205            Accept: */
206         /*
207            Host: 128.195.30.106:8086
208            Content-Type: text/xml
209            Depth: 0
210            Content-Length: 164
211            <?xml version="1.0" encoding="utf-8" ?>
212            <D:propfind xmlns:D="DAV:">
213            <D:prop>
214            <D:getlastmodified/>
215            <D:getcontentlength/>
216            <D:resourcetype/>
217            </D:prop>
218            </D:propfind>
219          */
220     }
221 
222     /***
223      * TODO
224      *
225      * @throws Exception TODO
226      */
227     public void testMac4() throws Exception
228     {
229         requestBody = "<?xml version='1.0' encoding='utf-8' ?>"
230                       + "<D:propfind xmlns:D='DAV:'>"
231                       + "<D:prop xmlns:A='http://www.apple.com/webdav_fs/props/'>"
232                       + "<D:getlastmodified/>" + "<D:getcontentlength/>"
233                       + "<D:resourcetype/>" + "<A:appledoubleheader/>"
234                       + "</D:prop>" + "</D:propfind>";
235         depth = 1;
236         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
237 
238         /*
239            PROPFIND /slide/ HTTP/1.1
240            User-Agent: WebDAVFS/1.2.7 (01278000) Darwin/7.4.0 (Power Macintosh)
241            Accept: */
242         /*
243            Host: 128.195.30.106:8086
244            Content-Type: text/xml
245            Depth: 1
246            Content-Length: 235
247            <?xml version="1.0" encoding="utf-8" ?>
248            <D:propfind xmlns:D="DAV:">
249            <D:prop xmlns:A="http://www.apple.com/webdav_fs/props/">
250            <D:getlastmodified/>
251            <D:getcontentlength/>
252            <D:resourcetype/>
253            <A:appledoubleheader/>
254            </D:prop>
255            </D:propfind>
256          */
257     }
258 
259     /***
260      * TODO
261      *
262      * @throws Exception TODO
263      */
264     public void testMac5() throws Exception
265     {
266         requestBody = "<?xml version='1.0' encoding='utf-8' ?>"
267                       + "<D:propfind xmlns:D='DAV:'>" + "<D:prop>"
268                       + "<D:getlastmodified/>" + "<D:getcontentlength/>"
269                       + "<D:resourcetype/>" + "</D:prop>" + "</D:propfind>";
270         depth = 0;
271         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
272 
273         /*
274            PROPFIND /slide/ HTTP/1.1
275            User-Agent: WebDAVFS/1.2.7 (01278000) Darwin/7.4.0 (Power Macintosh)
276            Accept: */
277         /*
278            Host: 128.195.30.106:8086
279            Content-Type: text/xml
280            Depth: 0
281            Content-Length: 164
282            <?xml version="1.0" encoding="utf-8" ?>
283            <D:propfind xmlns:D="DAV:">
284            <D:prop>
285            <D:getlastmodified/>
286            <D:getcontentlength/>
287            <D:resourcetype/>
288            </D:prop>
289            </D:propfind>
290          */
291     }
292 
293     /***
294      * TODO
295      *
296      * @throws Exception TODO
297      */
298     public void testMac6() throws Exception
299     {
300         requestBody = "<?xml version='1.0' encoding='utf-8' ?>"
301                       + "<D:propfind xmlns:D='DAV:'>" + "<D:prop>"
302                       + "<D:getlastmodified/>" + "<D:getcontentlength/>"
303                       + "<D:resourcetype/>" + "</D:prop>" + "</D:propfind>";
304         depth = 0;
305         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
306 
307         /*
308            PROPFIND /slide/ HTTP/1.1
309            User-Agent: WebDAVFS/1.2.7 (01278000) Darwin/7.4.0 (Power Macintosh)
310            Accept: */
311         /*
312            Host: 128.195.30.106:8086
313            Content-Type: text/xml
314            Depth: 0
315            Content-Length: 164
316            <?xml version="1.0" encoding="utf-8" ?>
317            <D:propfind xmlns:D="DAV:">
318            <D:prop>
319            <D:getlastmodified/>
320            <D:getcontentlength/>
321            <D:resourcetype/>
322            </D:prop>
323            </D:propfind>
324          */
325     }
326 
327     /***
328      * TODO
329      *
330      * @throws Exception TODO
331      */
332     public void testNoSlash() throws Exception
333     {
334         depth = 3;
335         go(SlideTestSetup.SWIRL_NO_SLASH, SlideTestSetup.SLIDE_NO_SLASH, 207);
336     }
337 
338     /***
339      * TODO
340      *
341      * @throws Exception TODO
342      */
343     public void testSlash() throws Exception
344     {
345         depth = 3;
346         go(SlideTestSetup.SWIRL, SlideTestSetup.SLIDE, 207);
347     }
348 
349     /***
350      * TODO
351      *
352      * @param uri TODO
353      *
354      * @return TODO
355      */
356     protected HttpMethod createMethod(String uri)
357     {
358         PropFindMethod method = new PropFindMethod(uri, depth);
359 
360         if(!requestBody.equals(""))
361         {
362             method.setRequestBody(requestBody);
363         }
364 
365         return method;
366     }
367 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSIncoming.html
##-----------------TITLE------------------------##
DNSIncoming xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  import java.io.IOException;
19  import java.net.DatagramPacket;
20  import java.util.Enumeration;
21  import java.util.Vector;
22  
23  /***
24   * Parse an incoming DNS message into its components.
25   *
26   * @author Arthur van Hoff
27   * @version %I%, %G%
28   */
29  final class DNSIncoming extends DNSConstants
30  {
31      /*** TODO */
32      static final Vector EMPTY = new Vector();
33  
34      /*** TODO */
35      DatagramPacket packet;
36  
37      /*** TODO */
38      Vector answers;
39  
40      /*** TODO */
41      Vector questions;
42  
43      /*** TODO */
44      byte[] data;
45  
46      /*** TODO */
47      int flags;
48  
49      /*** TODO */
50      int id;
51  
52      /*** TODO */
53      int len;
54  
55      /*** TODO */
56      int numAdditionals;
57  
58      /*** TODO */
59      int numAnswers;
60  
61      /*** TODO */
62      int numAuthorities;
63  
64      /*** TODO */
65      int numQuestions;
66  
67      /*** TODO */
68      int off;
69  
70      /***
71       * Parse a message from a datagram packet.
72       *
73       * @param packet TODO
74       *
75       * @throws IOException TODO
76       */
77      DNSIncoming(DatagramPacket packet) throws IOException
78      {
79          this.packet = packet;
80          this.data = packet.getData();
81          this.len = packet.getLength();
82          this.off = packet.getOffset();
83          this.questions = EMPTY;
84          this.answers = EMPTY;
85  
86          try
87          {
88              id = readUnsignedShort();
89              flags = readUnsignedShort();
90              numQuestions = readUnsignedShort();
91              numAnswers = readUnsignedShort();
92              numAuthorities = readUnsignedShort();
93              numAdditionals = readUnsignedShort();
94  
95              // parse questions
96              if(numQuestions > 0)
97              {
98                  questions = new Vector(numQuestions);
99  
100                 for(int i = 0; i < numQuestions; i++)
101                 {
102                     DNSQuestion question = new DNSQuestion(readName(),
103                                                            readUnsignedShort(),
104                                                            readUnsignedShort());
105 
106                     questions.add(question);
107                 }
108             }
109 
110             // parse answers
111             int n = numAnswers + numAuthorities + numAdditionals;
112 
113             if(n > 0)
114             {
115                 answers = new Vector(n);
116 
117                 for(int i = 0; i < n; i++)
118                 {
119                     String domain = readName();
120                     int type = readUnsignedShort();
121                     int clazz = readUnsignedShort();
122                     int ttl = readInt();
123                     int len = readUnsignedShort();
124                     int end = off + len;
125                     DNSRecord rec = null;
126 
127                     switch(type)
128                     {
129                     case TYPE_A:
130                         rec = new DNSRecord.Address(domain, type, clazz, ttl,
131                                                     readInt());
132 
133                         break;
134 
135                     case TYPE_CNAME:
136                     case TYPE_PTR:
137                         rec = new DNSRecord.Pointer(domain, type, clazz, ttl,
138                                                     readName());
139 
140                         break;
141 
142                     case TYPE_TXT:
143                         rec = new DNSRecord.Text(domain, type, clazz, ttl,
144                                                  readBytes(off, len));
145 
146                         break;
147 
148                     case TYPE_SRV:
149                         rec = new DNSRecord.Service(domain, type, clazz, ttl,
150                                                     readUnsignedShort(),
151                                                     readUnsignedShort(),
152                                                     readUnsignedShort(),
153                                                     readName());
154 
155                         break;
156                     }
157 
158                     if(rec != null)
159                     {
160                         answers.add(rec);
161                     }
162 
163                     off = end;
164                 }
165             }
166         }
167         catch(IOException e)
168         {
169             print(true);
170             throw e;
171         }
172     }
173 
174     /***
175      * TODO
176      *
177      * @return TODO
178      */
179     public String toString()
180     {
181         StringBuffer buf = new StringBuffer();
182 
183         buf.append(isQuery() ? "dns[query," : "dns[response,");
184         buf.append(packet.getAddress().getHostAddress());
185         buf.append(':');
186         buf.append(packet.getPort());
187         buf.append(",len=" + packet.getLength());
188         buf.append(",id=0x" + Integer.toHexString(id));
189 
190         if(flags != 0)
191         {
192             buf.append(",flags=0x" + Integer.toHexString(flags));
193 
194             if((flags & FLAGS_QR_RESPONSE) != 0)
195             {
196                 buf.append(":r");
197             }
198 
199             if((flags & FLAGS_AA) != 0)
200             {
201                 buf.append(":aa");
202             }
203 
204             if((flags & FLAGS_TC) != 0)
205             {
206                 buf.append(":rc");
207             }
208         }
209 
210         if(numQuestions > 0)
211         {
212             buf.append(",questions=" + numQuestions);
213         }
214 
215         if(numAnswers > 0)
216         {
217             buf.append(",answers=" + numAnswers);
218         }
219 
220         if(numAuthorities > 0)
221         {
222             buf.append(",authorities=" + numAuthorities);
223         }
224 
225         if(numAdditionals > 0)
226         {
227             buf.append(",additionals=" + numAdditionals);
228         }
229 
230         buf.append("]");
231 
232         return buf.toString();
233     }
234 
235     /***
236      * Check if the message is a query.
237      *
238      * @return TODO
239      */
240     boolean isQuery()
241     {
242         return (flags & FLAGS_QR_MASK) == FLAGS_QR_QUERY;
243     }
244 
245     /***
246      * Check if the message is a response.
247      *
248      * @return TODO
249      */
250     boolean isResponse()
251     {
252         return (flags & FLAGS_QR_MASK) == FLAGS_QR_RESPONSE;
253     }
254 
255     /***
256      * TODO
257      *
258      * @param off TODO
259      *
260      * @return TODO
261      *
262      * @throws IOException TODO
263      */
264     int get(int off) throws IOException
265     {
266         if((off < 0) || (off >= len))
267         {
268             throw new IOException("parser error: offset=" + off);
269         }
270 
271         return data[off] & 0xFF;
272     }
273 
274     /***
275      * Debugging.
276      *
277      * @param dump TODO
278      */
279     void print(boolean dump)
280     {
281         System.out.println(toString());
282 
283         for(Enumeration e = questions.elements(); e.hasMoreElements();)
284         {
285             System.out.println("    " + e.nextElement());
286         }
287 
288         for(Enumeration e = answers.elements(); e.hasMoreElements();)
289         {
290             System.out.println("    " + e.nextElement());
291         }
292 
293         if(dump)
294         {
295             for(int off = 0, len = packet.getLength(); off < len; off += 32)
296             {
297                 int n = Math.min(32, len - off);
298 
299                 if(off < 10)
300                 {
301                     System.out.print(' ');
302                 }
303 
304                 if(off < 100)
305                 {
306                     System.out.print(' ');
307                 }
308 
309                 System.out.print(off);
310                 System.out.print(':');
311 
312                 for(int i = 0; i < n; i++)
313                 {
314                     if((i % 8) == 0)
315                     {
316                         System.out.print(' ');
317                     }
318 
319                     System.out.print(Integer.toHexString((data[off + i] & 0xF0) >> 4));
320                     System.out.print(Integer.toHexString((data[off + i] & 0x0F) >> 0));
321                 }
322 
323                 System.out.println();
324                 System.out.print("    ");
325 
326                 for(int i = 0; i < n; i++)
327                 {
328                     if((i % 8) == 0)
329                     {
330                         System.out.print(' ');
331                     }
332 
333                     System.out.print(' ');
334 
335                     int ch = data[off + i] & 0xFF;
336 
337                     System.out.print(((ch > ' ') && (ch < 127)) ? (char)ch : '.');
338                 }
339 
340                 System.out.println();
341 
342                 // limit message size
343                 if((off + 32) >= 256)
344                 {
345                     System.out.println("....");
346 
347                     break;
348                 }
349             }
350         }
351     }
352 
353     /***
354      * TODO
355      *
356      * @param off TODO
357      * @param len TODO
358      *
359      * @return TODO
360      *
361      * @throws IOException TODO
362      */
363     byte[] readBytes(int off, int len) throws IOException
364     {
365         byte[] bytes = new byte[len];
366 
367         System.arraycopy(data, off, bytes, 0, len);
368 
369         return bytes;
370     }
371 
372     /***
373      * TODO
374      *
375      * @return TODO
376      *
377      * @throws IOException TODO
378      */
379     int readInt() throws IOException
380     {
381         return (readUnsignedShort() << 16) + readUnsignedShort();
382     }
383 
384     /***
385      * TODO
386      *
387      * @return TODO
388      *
389      * @throws IOException TODO
390      */
391     String readName() throws IOException
392     {
393         StringBuffer buf = new StringBuffer();
394         int off = this.off;
395         int next = -1;
396         int first = off;
397 
398         while(true)
399         {
400             int len = get(off++);
401 
402             if(len == 0)
403             {
404                 break;
405             }
406 
407             switch(len & 0xC0)
408             {
409             case 0x00:
410 
411                 //buf.append("[" + off + "]");
412                 readUTF(buf, off, len);
413                 off += len;
414                 buf.append('.');
415 
416                 break;
417 
418             case 0xC0:
419 
420                 //buf.append("<" + (off - 1) + ">");
421                 if(next < 0)
422                 {
423                     next = off + 1;
424                 }
425                 off = ((len & 0x3F) << 8) | get(off++);
426 
427                 if(off >= first)
428                 {
429                     throw new IOException("bad domain name: possible circular name detected");
430                 }
431 
432                 first = off;
433 
434                 break;
435 
436             default:
437                 throw new IOException("bad domain name: '" + buf + "' at "
438                                       + off);
439             }
440         }
441 
442         this.off = (next >= 0) ? next : off;
443 
444         return buf.toString();
445     }
446 
447     /***
448      * TODO
449      *
450      * @param buf TODO
451      * @param off TODO
452      * @param len TODO
453      *
454      * @throws IOException TODO
455      */
456     void readUTF(StringBuffer buf, int off, int len) throws IOException
457     {
458         for(int end = off + len; off < end;)
459         {
460             int ch = get(off++);
461 
462             switch(ch >> 4)
463             {
464             case 0:
465             case 1:
466             case 2:
467             case 3:
468             case 4:
469             case 5:
470             case 6:
471             case 7:
472 
473                 // 0xxxxxxx
474                 break;
475 
476             case 12:
477             case 13:
478 
479                 // 110x xxxx   10xx xxxx
480                 ch = ((ch & 0x1F) << 6) | (get(off++) & 0x3F);
481 
482                 break;
483 
484             case 14:
485 
486                 // 1110 xxxx  10xx xxxx  10xx xxxx
487                 ch = ((ch & 0x0f) << 12) | ((get(off++) & 0x3F) << 6)
488                      | (get(off++) & 0x3F);
489 
490                 break;
491 
492             default:
493 
494                 // 10xx xxxx,  1111 xxxx
495                 ch = ((ch & 0x3F) << 4) | (get(off++) & 0x0f);
496 
497                 break;
498             }
499 
500             buf.append((char)ch);
501         }
502     }
503 
504     /***
505      * TODO
506      *
507      * @return TODO
508      *
509      * @throws IOException TODO
510      */
511     int readUnsignedShort() throws IOException
512     {
513         return (get(off++) << 8) + get(off++);
514     }
515 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/MessageEntry.html
##-----------------TITLE------------------------##
MessageEntry xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import edu.uci.ics.jung.graph.Edge;
4   import edu.uci.ics.jung.graph.Vertex;
5   
6   /***
7    * TODO
8    *
9    * @author $author$
10   * @version $Revision: 1.4 $
11   */
12  class MessageEntry
13  {
14      /*** TODO */
15      Edge e;
16  
17      /*** TODO */
18      String message;
19  
20      /*** TODO */
21      Vertex receiver;
22  
23      /*** TODO */
24      Vertex sender;
25  
26      // an entry records when a message is displayed on an edge.
27  
28      /*** TODO */
29      long startTime;
30  
31      /***
32       * Creates a new MessageEntry object.
33       *
34       * @param startTime TODO
35       * @param message TODO
36       * @param e TODO
37       * @param sender TODO
38       * @param receiver TODO
39       */
40      MessageEntry(long startTime, String message, Edge e, Vertex sender,
41                   Vertex receiver)
42      {
43          this.startTime = startTime;
44          this.message = message;
45          this.e = e;
46          this.sender = sender;
47          this.receiver = receiver;
48      }
49  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/ServiceListener.html
##-----------------TITLE------------------------##
ServiceListener xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  /***
19   * Listener for service updates.
20   *
21   * @author Arthur van Hoff
22   * @version %I%, %G%
23   */
24  public interface ServiceListener
25  {
26      /***
27       * A service is added.
28       *
29       * @param jmdns TODO
30       * @param type the fully qualified type of the service
31       * @param name the fully qualified name of the service
32       */
33      void addService(JmDNS jmdns, String type, String name);
34  
35      /***
36       * A service is removed.
37       *
38       * @param jmdns TODO
39       * @param type the fully qualified type of the service
40       * @param name the fully qualified name of the service
41       */
42      void removeService(JmDNS jmdns, String type, String name);
43  
44      /***
45       * A service is resolved. Its details are now available in the ServiceInfo
46       * record.
47       *
48       * @param jmdns TODO
49       * @param type the fully qualified type of the service
50       * @param name the fully qualified name of the service
51       * @param info the service info record, or null if the service could be be
52       *        resolved
53       */
54      void resolveService(JmDNS jmdns, String type, String name, ServiceInfo info);
55  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSEntry.html
##-----------------TITLE------------------------##
DNSEntry xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  /***
19   * DNS entry with a name, type, and class. This is the base class for questions
20   * and records.
21   *
22   * @author Arthur van Hoff
23   * @version %I%, %G%
24   */
25  abstract class DNSEntry extends DNSConstants
26  {
27      /*** TODO */
28      String key;
29  
30      /*** TODO */
31      String name;
32  
33      /*** TODO */
34      boolean unique;
35  
36      /*** TODO */
37      int clazz;
38  
39      /*** TODO */
40      int type;
41  
42      /***
43       * Create an entry.
44       *
45       * @param name TODO
46       * @param type TODO
47       * @param clazz TODO
48       */
49      DNSEntry(String name, int type, int clazz)
50      {
51          this.key = name.toLowerCase();
52          this.name = name;
53          this.type = type;
54          this.clazz = clazz & CLASS_MASK;
55          this.unique = (clazz & CLASS_UNIQUE) != 0;
56      }
57  
58      /***
59       * Check if two entries have exactly the same name, type, and class.
60       *
61       * @param obj TODO
62       *
63       * @return TODO
64       */
65      public boolean equals(Object obj)
66      {
67          if(obj instanceof DNSEntry)
68          {
69              DNSEntry other = (DNSEntry)obj;
70  
71              return name.equals(other.name) && (type == other.type)
72                     && (clazz == other.clazz);
73          }
74  
75          return false;
76      }
77  
78      /***
79       * TODO
80       *
81       * @param hdr TODO
82       * @param other TODO
83       *
84       * @return TODO
85       */
86      public String toString(String hdr, String other)
87      {
88          return hdr + "[" + getType(type) + "," + getClazz(clazz)
89                 + (unique ? "-unique," : ",") + name
90                 + ((other != null) ? ("," + other + "]") : "]");
91      }
92  
93      /***
94       * Get a string given a clazz.
95       *
96       * @param clazz TODO
97       *
98       * @return TODO
99       */
100     static String getClazz(int clazz)
101     {
102         switch(clazz & CLASS_MASK)
103         {
104         case CLASS_IN:
105             return "in";
106 
107         case CLASS_CS:
108             return "cs";
109 
110         case CLASS_CH:
111             return "ch";
112 
113         case CLASS_HS:
114             return "hs";
115 
116         case CLASS_NONE:
117             return "none";
118 
119         case CLASS_ANY:
120             return "any";
121 
122         default:
123             return "?";
124         }
125     }
126 
127     /***
128      * Get a string given a type.
129      *
130      * @param type TODO
131      *
132      * @return TODO
133      */
134     static String getType(int type)
135     {
136         switch(type)
137         {
138         case TYPE_A:
139             return "a";
140 
141         case TYPE_NS:
142             return "ns";
143 
144         case TYPE_MD:
145             return "md";
146 
147         case TYPE_MF:
148             return "mf";
149 
150         case TYPE_CNAME:
151             return "cname";
152 
153         case TYPE_SOA:
154             return "soa";
155 
156         case TYPE_MB:
157             return "mb";
158 
159         case TYPE_MG:
160             return "mg";
161 
162         case TYPE_MR:
163             return "mr";
164 
165         case TYPE_NULL:
166             return "null";
167 
168         case TYPE_WKS:
169             return "wks";
170 
171         case TYPE_PTR:
172             return "ptr";
173 
174         case TYPE_HINFO:
175             return "hinfo";
176 
177         case TYPE_MINFO:
178             return "minfo";
179 
180         case TYPE_MX:
181             return "mx";
182 
183         case TYPE_TXT:
184             return "txt";
185 
186         case TYPE_SRV:
187             return "srv";
188 
189         case TYPE_ANY:
190             return "any";
191 
192         default:
193             return "?";
194         }
195     }
196 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/JmDNS.html
##-----------------TITLE------------------------##
JmDNS xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  import java.io.IOException;
19  import java.net.DatagramPacket;
20  import java.net.InetAddress;
21  import java.net.MulticastSocket;
22  import java.util.Enumeration;
23  import java.util.Hashtable;
24  import java.util.Iterator;
25  import java.util.LinkedList;
26  import java.util.Vector;
27  
28  import org.apache.commons.logging.Log;
29  import org.apache.commons.logging.LogFactory;
30  
31  import swirl.workspace.PeerManager;
32  
33  // REMIND: multiple IP addresses
34  
35  /***
36   * mDNS implementation in Java.
37   *
38   * @author Arthur van Hoff
39   * @version %I%, %G%
40   */
41  public class JmDNS extends DNSConstants
42  {
43      /*** TODO */
44      public static String VERSION = "0.2";
45  
46      /*** TODO */
47      static int debug = Integer.parseInt(System.getProperty("jmdns.debug", "0"));
48  
49      /*** TODO */
50      DNSRecord.Address host;
51  
52      /*** TODO */
53      DNSCache cache;
54  
55      /*** TODO */
56      Hashtable serviceTypes;
57  
58      /*** TODO */
59      Hashtable services;
60  
61      /*** TODO */
62      InetAddress group;
63  
64      /*** TODO */
65      MulticastSocket socket;
66  
67      /*** TODO */
68      Thread shutdown;
69  
70      /*** TODO */
71      Vector browsers;
72  
73      /*** TODO */
74      Vector listeners;
75  
76      /*** TODO */
77      Vector typeListeners;
78  
79      /*** TODO */
80      boolean done;
81  
82      /*** TODO */
83      boolean linklocal;
84  
85      /*** TODO */
86      boolean loopback;
87  
88      /***
89       * Create an instance of JmDNS.
90       *
91       * @throws IOException TODO
92       */
93      private static Log log = LogFactory.getLog(JmDNS.class);
94      public JmDNS() throws IOException
95      {
96          try
97          {
98              InetAddress addr = PeerManager.getLocalAddress();
99  
100             init(isLoopback(addr) ? null : addr, addr.getHostName());
101         }
102         catch(IOException e)
103         {
104             init(null, "computer");
105         }
106     }
107 
108     /***
109      * Create an instance of JmDNS and bind it to a specific network interface
110      * given its IP-address.
111      *
112      * @param addr TODO
113      *
114      * @throws IOException TODO
115      */
116     public JmDNS(InetAddress addr) throws IOException
117     {
118         init(addr, addr.getHostName());
119     }
120 
121     /***
122      * Return the address of the interface to which this instance of JmDNS is
123      * bound.
124      *
125      * @return TODO
126      *
127      * @throws IOException TODO
128      */
129     public InetAddress getInterface() throws IOException
130     {
131         return socket.getInterface();
132     }
133 
134     /***
135      * Get service information. If the information is not cached, the method
136      * will block until updated informatin is received.
137      *
138      * @param type full qualified service type, such as
139      *        <code>_http._tcp.local.</code>.
140      * @param name full qualified service name, such as
141      *        <code>foobar._http._tcp.local.</code>.
142      *
143      * @return null if the service information cannot be obtained
144      */
145     public ServiceInfo getServiceInfo(String type, String name)
146     {
147         return getServiceInfo(type, name, 3 * 1000);
148     }
149 
150     /***
151      * Get service information. If the information is not cached, the method
152      * will block for the given timeout until updated informatin is received.
153      *
154      * @param type full qualified service type, such as
155      *        <code>_http._tcp.local.</code>.
156      * @param name full qualified service name, such as
157      *        <code>foobar._http._tcp.local.</code>.
158      * @param timeout timeout in milliseconds
159      *
160      * @return null if the service information cannot be obtained
161      */
162     public ServiceInfo getServiceInfo(String type, String name, int timeout)
163     {
164         ServiceInfo info = new ServiceInfo(type, name);
165 
166         return info.request(this, timeout) ? info : null;
167     }
168 
169     /***
170      * Listen for services of a given type. The type has to be a fully
171      * qualified type name such as <code>_http._tcp.local.</code>.
172      *
173      * @param type full qualified service type, such as
174      *        <code>_http._tcp.local.</code>.
175      * @param listener listener for service updates
176      */
177     public synchronized void addServiceListener(String type,
178                                                 ServiceListener listener)
179     {
180         removeServiceListener(listener);
181         browsers.addElement(new ServiceBrowser(type, listener));
182     }
183 
184     /***
185      * Listen for service types.
186      *
187      * @param listener listener for service types
188      *
189      * @throws IOException TODO
190      */
191     public void addServiceTypeListener(ServiceTypeListener listener)
192                                 throws IOException
193     {
194         synchronized(this)
195         {
196             removeServiceTypeListener(listener);
197             typeListeners.addElement(listener);
198 
199             // report service types
200             for(Enumeration e = serviceTypes.elements(); e.hasMoreElements();)
201             {
202                 listener.addServiceType(this, (String)e.nextElement());
203             }
204         }
205 
206         try
207         {
208             // query for service types
209             long now = System.currentTimeMillis();
210             long nextTime = now;
211 
212             for(int i = 0; i < 3;)
213             {
214                 if(now < nextTime)
215                 {
216                     Thread.sleep(nextTime - now);
217                     now = System.currentTimeMillis();
218 
219                     continue;
220                 }
221 
222                 DNSOutgoing out = new DNSOutgoing(FLAGS_QR_QUERY);
223 
224                 out.addQuestion(new DNSQuestion("_services._mdns._udp.local.",
225                                                 TYPE_PTR, CLASS_IN));
226 
227                 for(Enumeration e = serviceTypes.elements();
228                     e.hasMoreElements();)
229                 {
230                     out.addAnswer(new DNSRecord.Pointer("_services._mdns._udp.local.",
231                                                         TYPE_PTR, CLASS_IN,
232                                                         DNS_TTL,
233                                                         (String)e.nextElement()),
234                                   0);
235                 }
236 
237                 send(out);
238                 i++;
239                 nextTime += 225;
240             }
241         }
242         catch(InterruptedException e)
243         {
244             throw new IOException("interrupted I/O");
245         }
246     }
247 
248     /***
249      * Close down jmdns. Release all resources and unregister all services.
250      */
251     public synchronized void close()
252     {
253         if(!done)
254         {
255             done = true;
256             notifyAll();
257 
258             // remove the shutdown hook
259             if(shutdown != null)
260             {
261                 Runtime.getRuntime().removeShutdownHook(shutdown);
262             }
263 
264             // unregister services
265             unregisterAllServices();
266 
267             // close socket
268             try
269             {
270                 socket.leaveGroup(group);
271                 socket.close();
272             }
273             catch(IOException e)
274             {
275                 // ignore
276             }
277         }
278     }
279 
280     /***
281      * Register a service. The service is registered for access by other jmdns
282      * clients. The name of the service may be changed to make it unique.
283      *
284      * @param info TODO
285      *
286      * @throws IOException TODO
287      */
288     public void registerService(ServiceInfo info) throws IOException
289     {
290         registerServiceType(info.type);
291 
292         // bind the service to this address
293         info.server = host.name;
294         info.addr = host.getInetAddress();
295 
296         try
297         {
298             synchronized(this)
299             {
300                 // check for a unqiue name
301                 checkService(info);
302 
303                 // add the service
304                 services.put(info.name.toLowerCase(), info);
305             }
306 
307             // announce the service
308             long now = System.currentTimeMillis();
309             long nextTime = now;
310 
311             for(int i = 0; i < 3;)
312             {
313                 if(now < nextTime)
314                 {
315                     Thread.sleep(nextTime - now);
316                     now = System.currentTimeMillis();
317 
318                     continue;
319                 }
320 
321                 DNSOutgoing out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
322 
323                 out.addAnswer(new DNSRecord.Pointer(info.type, TYPE_PTR,
324                                                     CLASS_IN, DNS_TTL, info.name),
325                               0);
326                 out.addAnswer(new DNSRecord.Service(info.name, TYPE_SRV,
327                                                     CLASS_IN, DNS_TTL,
328                                                     info.priority, info.weight,
329                                                     info.port, host.name), 0);
330                 out.addAnswer(new DNSRecord.Text(info.name, TYPE_TXT, CLASS_IN,
331                                                  DNS_TTL, info.text), 0);
332                 out.addAnswer(host, 0);
333                 send(out);
334                 i++;
335                 nextTime += 225;
336             }
337         }
338         catch(InterruptedException e)
339         {
340             throw new IOException("interrupted I/O");
341         }
342     }
343 
344     /***
345      * Register a service type. If this service type was not already known, all
346      * service listeners will be notified of the new service type. Service
347      * types are automatically registered as they are discovered.
348      *
349      * @param type TODO
350      */
351     public synchronized void registerServiceType(String type)
352     {
353         String name = type.toLowerCase();
354 
355         if(serviceTypes.get(name) == null)
356         {
357             if(type.indexOf("._mdns._udp.") < 0)
358             {
359                 serviceTypes.put(name, type);
360 
361                 for(Enumeration e = typeListeners.elements();
362                     e.hasMoreElements();)
363                 {
364                     ((ServiceTypeListener)e.nextElement()).addServiceType(this,
365                                                                           type);
366                 }
367             }
368         }
369     }
370 
371     /***
372      * Remove listener for services of a given type.
373      *
374      * @param listener listener for service updates
375      */
376     public synchronized void removeServiceListener(ServiceListener listener)
377     {
378         for(int i = browsers.size(); i-- > 0;)
379         {
380             ServiceBrowser browser = (ServiceBrowser)browsers.elementAt(i);
381 
382             if(browser.listener == listener)
383             {
384                 browsers.removeElementAt(i);
385                 browser.close();
386 
387                 return;
388             }
389         }
390     }
391 
392     /***
393      * Remove listener for service types.
394      *
395      * @param listener listener for service types
396      */
397     public synchronized void removeServiceTypeListener(ServiceTypeListener listener)
398     {
399         typeListeners.removeElement(listener);
400     }
401 
402     /***
403      * Request service information. The information about the service is
404      * requested and the ServiceListener.resolveService method is called as
405      * soon as it is available.
406      *
407      * @param type TODO
408      * @param name TODO
409      */
410     public void requestServiceInfo(String type, String name)
411     {
412         requestServiceInfo(type, name, 3 * 1000);
413     }
414 
415     /***
416      * Request service information. The information about the service is
417      * requested and the ServiceListener.resolveService method is called as
418      * soon as it is available.
419      *
420      * @param type TODO
421      * @param name TODO
422      * @param timeout TODO
423      */
424     public void requestServiceInfo(String type, String name, int timeout)
425     {
426         registerServiceType(type);
427 
428         new Thread(new ServiceResolver(new ServiceInfo(type, name), timeout),
429                    "JmDNS.ServiceResolver").start();
430     }
431 
432     /***
433      * Unregister a service.
434      */
435     public synchronized void unregisterAllServices()
436     {
437         if(services.size() == 0)
438         {
439             return;
440         }
441 
442         try
443         {
444             // unregister all services
445             long now = System.currentTimeMillis();
446             long nextTime = now;
447 
448             for(int i = 0; i < 3;)
449             {
450                 if(now < nextTime)
451                 {
452                     Thread.sleep(nextTime - now);
453                     now = System.currentTimeMillis();
454 
455                     continue;
456                 }
457 
458                 DNSOutgoing out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
459 
460                 for(Enumeration e = services.elements(); e.hasMoreElements();)
461                 {
462                     ServiceInfo info = (ServiceInfo)e.nextElement();
463 
464                     out.addAnswer(new DNSRecord.Pointer(info.type, TYPE_PTR,
465                                                         CLASS_IN, 0, info.name),
466                                   0);
467                     out.addAnswer(new DNSRecord.Service(info.name, TYPE_SRV,
468                                                         CLASS_IN, 0,
469                                                         info.priority,
470                                                         info.weight, info.port,
471                                                         host.name), 0);
472                     out.addAnswer(new DNSRecord.Text(info.name, TYPE_TXT,
473                                                      CLASS_IN, 0, info.text), 0);
474                 }
475 
476                 send(out);
477                 i++;
478                 nextTime += 125;
479             }
480         }
481         catch(IOException e)
482         {
483             // ignore
484         }
485         catch(InterruptedException e)
486         {
487             // ignore
488         }
489     }
490 
491     /***
492      * Unregister a service. The service should have been registered.
493      *
494      * @param info TODO
495      */
496     public void unregisterService(ServiceInfo info)
497     {
498         try
499         {
500             services.remove(info.name.toLowerCase());
501 
502             // unregister the service
503             long now = System.currentTimeMillis();
504             long nextTime = now;
505 
506             for(int i = 0; i < 3;)
507             {
508                 if(now < nextTime)
509                 {
510                     Thread.sleep(nextTime - now);
511                     now = System.currentTimeMillis();
512 
513                     continue;
514                 }
515 
516                 DNSOutgoing out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
517 
518                 out.addAnswer(new DNSRecord.Pointer(info.type, TYPE_PTR,
519                                                     CLASS_IN, 0, info.name), 0);
520                 out.addAnswer(new DNSRecord.Service(info.name, TYPE_SRV,
521                                                     CLASS_IN, 0, info.priority,
522                                                     info.weight, info.port,
523                                                     host.name), 0);
524                 out.addAnswer(new DNSRecord.Text(info.name, TYPE_TXT, CLASS_IN,
525                                                  0, info.text), 0);
526                 send(out);
527                 i++;
528                 nextTime += 125;
529             }
530         }
531         catch(IOException e)
532         {
533             // ignore
534         }
535         catch(InterruptedException e)
536         {
537             // ignore
538         }
539     }
540 
541     /***
542      * Check if an address is linklocal.
543      *
544      * @param addr TODO
545      *
546      * @return TODO
547      */
548     static boolean isLinkLocal(InetAddress addr)
549     {
550         return (addr != null) && addr.getHostAddress().startsWith("169.254.");
551     }
552 
553     /***
554      * Check if an address is the loopback address
555      *
556      * @param addr TODO
557      *
558      * @return TODO
559      */
560     static boolean isLoopback(InetAddress addr)
561     {
562         return (addr != null) && addr.getHostAddress().startsWith("127.0.0.1");
563     }
564 
565     /***
566      * Add a listener for a question. The listener will receive updates to of
567      * answers to the question as they arrive, or from the cache if they are
568      * already available.
569      *
570      * @param listener TODO
571      * @param question TODO
572      */
573     synchronized void addListener(Listener listener, DNSQuestion question)
574     {
575         long now = System.currentTimeMillis();
576 
577         // add the new listener
578         listeners.addElement(listener);
579 
580         // report existing matched records
581         if(question != null)
582         {
583             for(Iterator i = cache.find(question.name); i.hasNext();)
584             {
585                 DNSRecord c = (DNSRecord)i.next();
586 
587                 if(question.answeredBy(c) && !c.isExpired(now))
588                 {
589                     listener.updateRecord(this, now, c);
590                 }
591             }
592         }
593 
594         notifyAll();
595     }
596 
597     /***
598      * Check that a service name is unique.
599      *
600      * @param info TODO
601      *
602      * @throws IOException TODO
603      * @throws InterruptedException TODO
604      */
605     void checkService(ServiceInfo info)
606                throws IOException, 
607                       InterruptedException
608     {
609         long now = System.currentTimeMillis();
610         long nextTime = now;
611 
612         for(int i = 0; i < 3;)
613         {
614             for(Iterator j = cache.find(info.type); j.hasNext();)
615             {
616                 DNSRecord a = (DNSRecord)j.next();
617 
618                 if((a.type == TYPE_PTR) && !a.isExpired(now)
619                    && info.name.equals(((DNSRecord.Pointer)a).alias))
620                 {
621                     String name = info.getName();
622 
623                     try
624                     {
625                         int l = name.lastIndexOf('[');
626                         int r = name.lastIndexOf(']');
627 
628                         if((l >= 0) && (l < r))
629                         {
630                             name = name.substring(0, l) + "["
631                                    + (Integer.parseInt(name.substring(l + 1, r))
632                                    + 1) + "]";
633                         }
634                         else
635                         {
636                             name += " [1]";
637                         }
638                     }
639                     catch(NumberFormatException e)
640                     {
641                         name += " [1]";
642                     }
643 
644                     info.name = name + "." + info.type;
645                     i = 0;
646 
647                     break;
648                 }
649             }
650 
651             DNSOutgoing out = new DNSOutgoing(FLAGS_QR_QUERY | FLAGS_AA);
652 
653             out.addQuestion(new DNSQuestion(info.type, TYPE_PTR, CLASS_IN));
654             out.addAuthorativeAnswer(new DNSRecord.Pointer(info.type, TYPE_PTR,
655                                                            CLASS_IN, DNS_TTL,
656                                                            info.name));
657             send(out);
658             i++;
659             nextTime += 175;
660 
661             if(now < nextTime)
662             {
663                 wait(nextTime - now);
664                 now = System.currentTimeMillis();
665 
666                 continue;
667             }
668         }
669     }
670 
671     /***
672      * Handle an incoming query. See if we can answer any part of it given our
673      * registered records.
674      *
675      * @param in TODO
676      * @param addr TODO
677      * @param port TODO
678      *
679      * @throws IOException TODO
680      */
681     synchronized void handleQuery(DNSIncoming in, InetAddress addr, int port)
682                            throws IOException
683     {
684         DNSOutgoing out = null;
685         Vector additionals = null;
686 
687         // for unicast responses the question must be included
688         if(port != MDNS_PORT)
689         {
690             out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA, false);
691 
692             for(Enumeration e = in.questions.elements(); e.hasMoreElements();)
693             {
694                 out.addQuestion((DNSQuestion)e.nextElement());
695             }
696         }
697 
698         // answer relevant questions
699         for(Enumeration e = in.questions.elements(); e.hasMoreElements();)
700         {
701             DNSQuestion q = (DNSQuestion)e.nextElement();
702 
703             switch(q.type)
704             {
705             case TYPE_A:
706 
707                 // address request
708                 if((host != null) && q.name.equals(host.name))
709                 {
710                     if(out == null)
711                     {
712                         out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
713                     }
714 
715                     out.addAnswer(in, host);
716                 }
717 
718                 break;
719 
720             case TYPE_PTR:
721                 registerServiceType(q.name);
722 
723                 // find matching services
724                 for(Enumeration s = services.elements(); s.hasMoreElements();)
725                 {
726                     ServiceInfo info = (ServiceInfo)s.nextElement();
727 
728                     if(q.name.equals(info.type))
729                     {
730                         if(out == null)
731                         {
732                             out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
733                         }
734 
735                         out.addAnswer(in,
736                                       new DNSRecord.Pointer(info.type,
737                                                             TYPE_PTR, CLASS_IN,
738                                                             DNS_TTL, info.name));
739 
740                         // additional answers, in case there is room
741                         if(additionals == null)
742                         {
743                             additionals = new Vector();
744                             additionals.addElement(host);
745                         }
746 
747                         additionals.addElement(new DNSRecord.Service(q.name,
748                                                                      TYPE_SRV,
749                                                                      CLASS_IN
750                                                                      | CLASS_UNIQUE,
751                                                                      DNS_TTL,
752                                                                      info.priority,
753                                                                      info.weight,
754                                                                      info.port,
755                                                                      host.name));
756                         additionals.addElement(new DNSRecord.Text(q.name,
757                                                                   TYPE_TXT,
758                                                                   CLASS_IN
759                                                                   | CLASS_UNIQUE,
760                                                                   DNS_TTL,
761                                                                   info.text));
762                     }
763                 }
764 
765                 if(q.name.equals("_services._mdns._udp.local."))
766                 {
767                     for(Enumeration t = serviceTypes.elements();
768                         t.hasMoreElements();)
769                     {
770                         if(out == null)
771                         {
772                             out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
773                         }
774 
775                         out.addAnswer(in,
776                                       new DNSRecord.Pointer("_services._mdns._udp.local.",
777                                                             TYPE_PTR, CLASS_IN,
778                                                             DNS_TTL,
779                                                             (String)t
780                                                             .nextElement()));
781                     }
782                 }
783 
784                 break;
785 
786             default:
787 
788                 // find service
789                 ServiceInfo info = (ServiceInfo)services.get(q.name.toLowerCase());
790 
791                 if(info != null)
792                 {
793                     if(out == null)
794                     {
795                         out = new DNSOutgoing(FLAGS_QR_RESPONSE | FLAGS_AA);
796                     }
797 
798                     if((q.type == TYPE_SRV) || (q.type == TYPE_ANY))
799                     {
800                         out.addAnswer(in,
801                                       new DNSRecord.Service(q.name, TYPE_SRV,
802                                                             CLASS_IN
803                                                             | CLASS_UNIQUE,
804                                                             DNS_TTL,
805                                                             info.priority,
806                                                             info.weight,
807                                                             info.port, host.name));
808                     }
809 
810                     if((q.type == TYPE_TXT) || (q.type == TYPE_ANY))
811                     {
812                         out.addAnswer(in,
813                                       new DNSRecord.Text(q.name, TYPE_TXT,
814                                                          CLASS_IN
815                                                          | CLASS_UNIQUE,
816                                                          DNS_TTL, info.text));
817                     }
818                 }
819             }
820         }
821 
822         if((out != null) && (out.numAnswers > 0))
823         {
824             // add additional answers if there is space
825             if(additionals != null)
826             {
827                 for(Enumeration e = additionals.elements();
828                     e.hasMoreElements();)
829                 {
830                     out.addAdditionalAnswer(in, (DNSRecord)e.nextElement());
831                 }
832             }
833 
834             out.id = in.id;
835             out.finish();
836             socket.send(new DatagramPacket(out.data, out.off, addr, port));
837         }
838     }
839 
840     /***
841      * Handle an incoming response. Cache answers, and pass them on to the
842      * appropriate questions.
843      *
844      * @param msg TODO
845      *
846      * @throws IOException TODO
847      */
848     synchronized void handleResponse(DNSIncoming msg) throws IOException
849     {
850         long now = System.currentTimeMillis();
851 
852         for(Enumeration e = msg.answers.elements(); e.hasMoreElements();)
853         {
854             DNSRecord rec = (DNSRecord)e.nextElement();
855             boolean expired = rec.isExpired(now);
856 
857             // update the cache
858             DNSRecord c = (DNSRecord)cache.get(rec);
859 
860             if(c != null)
861             {
862                 if(expired)
863                 {
864                     cache.remove(c);
865                 }
866                 else
867                 {
868                     c.resetTTL(rec);
869                     rec = c;
870                 }
871             }
872             else if(!expired)
873             {
874                 cache.add(rec);
875             }
876 
877             switch(rec.type)
878             {
879             case TYPE_PTR:
880 
881                 // handle _mdns._udp records
882                 if(rec.name.indexOf("._mdns._udp.") >= 0)
883                 {
884                     if(!expired && rec.name.startsWith("_services._mdns._udp."))
885                     {
886                         registerServiceType(((DNSRecord.Pointer)rec).alias);
887                     }
888 
889                     continue;
890                 }
891                 registerServiceType(rec.name);
892 
893                 break;
894             }
895 
896             // notify the listeners
897             updateRecord(now, rec);
898         }
899     }
900 
901     /***
902      * Initialize everything.
903      *
904      * @param intf TODO
905      * @param name TODO
906      *
907      * @throws IOException TODO
908      */
909     void init(InetAddress intf, String name) throws IOException
910     {
911         if(!name.endsWith("."))
912         {
913             name += ".local.";
914         }
915 
916         group = InetAddress.getByName(MDNS_GROUP);
917         socket = new MulticastSocket(MDNS_PORT);
918 
919         if(intf != null)
920         {
921             socket.setInterface(intf);
922         }
923 
924         socket.setTimeToLive(255);
925         socket.joinGroup(group);
926         loopback = isLoopback(intf);
927         linklocal = isLinkLocal(intf);
928 
929         cache = new DNSCache(100);
930         listeners = new Vector();
931         browsers = new Vector();
932         typeListeners = new Vector();
933         services = new Hashtable(20);
934         serviceTypes = new Hashtable(20);
935 
936         new Thread(new SocketListener(), "JmDNS.SocketListener").start();
937         new Thread(new RecordReaper(), "JmDNS.RecordReaper").start();
938         shutdown = new Thread(new Shutdown(), "JmDNS.Shutdown");
939         Runtime.getRuntime().addShutdownHook(shutdown);
940 
941         // host to IP address binding
942         byte[] data = intf.getAddress();
943         int ip = ((data[0] & 0xFF) << 24) | ((data[1] & 0xFF) << 16)
944                  | ((data[2] & 0xFF) << 8) | (data[3] & 0xFF);
945         DNSRecord.Address host = new DNSRecord.Address(name, TYPE_A, CLASS_IN,
946                                                        DNS_TTL, ip);
947 
948         // check for conflicts
949         long now = System.currentTimeMillis();
950         long nextTime = now;
951 
952         for(int i = 0; i < 3;)
953         {
954             for(Iterator j = cache.find(host.name); j.hasNext();)
955             {
956                 DNSRecord a = (DNSRecord)j.next();
957 
958                 if((a.type == TYPE_A) && !a.isExpired(now)
959                    && (((DNSRecord.Address)a).addr != ip))
960                 {
961                     String nm = host.name.substring(0, name.indexOf('.'));
962 
963                     try
964                     {
965                         int l = nm.lastIndexOf('-');
966                         int r = nm.lastIndexOf('.');
967 
968                         if((l >= 0) && (l < r))
969                         {
970                             nm = nm.substring(0, l) + "-"
971                                  + (Integer.parseInt(nm.substring(l + 1)) + 1);
972                         }
973                         else
974                         {
975                             nm += "-1";
976                         }
977                     }
978                     catch(NumberFormatException e)
979                     {
980                         nm += "-1";
981                     }
982 
983                     host.name = nm + host.name.substring(name.indexOf('.'));
984                     i = 0;
985 
986                     break;
987                 }
988             }
989 
990             DNSOutgoing out = new DNSOutgoing(FLAGS_QR_QUERY);
991 
992             out.addQuestion(new DNSQuestion(host.name, TYPE_A, CLASS_IN));
993             out.addAuthorativeAnswer(host);
994             send(out);
995             i++;
996             nextTime += 175;
997 
998             if(now < nextTime)
999             {
1000                 try
1001                 {
1002                     Thread.sleep(nextTime - now);
1003                 }
1004                 catch(InterruptedException e)
1005                 {
1006                     throw new IOException("init interrupted");
1007                 }
1008 
1009                 now = System.currentTimeMillis();
1010 
1011                 continue;
1012             }
1013         }
1014 
1015         this.host = host;
1016     }
1017 
1018     /***
1019      * List cache entries, for debugging only.
1020      */
1021     void print()
1022     {
1023         if(cache.count > 0)
1024         {
1025             System.out.println("---- cache ----");
1026             cache.print();
1027             System.out.println();
1028         }
1029     }
1030 
1031     /***
1032      * Remove a listener from all outstanding questions. The listener will no
1033      * longer receive any updates.
1034      *
1035      * @param listener TODO
1036      */
1037     synchronized void removeListener(Listener listener)
1038     {
1039         listeners.removeElement(listener);
1040         notifyAll();
1041     }
1042 
1043     /***
1044      * Send an outgoing multicast DNS message.
1045      *
1046      * @param out TODO
1047      *
1048      * @throws IOException TODO
1049      */
1050     synchronized void send(DNSOutgoing out) throws IOException
1051     {
1052         out.finish();
1053         socket.send(new DatagramPacket(out.data, out.off, group, MDNS_PORT));
1054     }
1055 
1056     /***
1057      * Notify all listeners that a record was updated.
1058      *
1059      * @param now TODO
1060      * @param rec TODO
1061      */
1062     synchronized void updateRecord(long now, DNSRecord rec)
1063     {
1064         for(Enumeration e = listeners.elements(); e.hasMoreElements();)
1065         {
1066             Listener listener = (Listener)e.nextElement();
1067 
1068             listener.updateRecord(this, now, rec);
1069         }
1070 
1071         notifyAll();
1072     }
1073 
1074     /***
1075      * Listener for record updates.
1076      */
1077     abstract static class Listener extends DNSConstants
1078     {
1079         /***
1080          * Update a DNS record.
1081          *
1082          * @param jmdns TODO
1083          * @param now TODO
1084          * @param record TODO
1085          */
1086         abstract void updateRecord(JmDNS jmdns, long now, DNSRecord record);
1087     }
1088 
1089     /***
1090      * Schedule questions
1091      */
1092     class RecordReaper implements Runnable
1093     {
1094         /***
1095          * TODO
1096          */
1097         public void run()
1098         {
1099             try
1100             {
1101                 synchronized(JmDNS.this)
1102                 {
1103                     while(true)
1104                     {
1105                         JmDNS.this.wait(10 * 1000);
1106 
1107                         if(done)
1108                         {
1109                             return;
1110                         }
1111 
1112                         // remove expired answers from the cache
1113                         long now = System.currentTimeMillis();
1114 
1115                         for(Iterator i = cache.all(); i.hasNext();)
1116                         {
1117                             DNSRecord c = (DNSRecord)i.next();
1118 
1119                             if(c.isExpired(now))
1120                             {
1121                                 updateRecord(now, c);
1122                                 i.remove();
1123                             }
1124                         }
1125                     }
1126                 }
1127             }
1128             catch(InterruptedException e)
1129             {
1130                 e.printStackTrace();
1131             }
1132         }
1133     }
1134 
1135     /***
1136      * Browse for a service of a given type
1137      */
1138     class ServiceBrowser extends JmDNS.Listener implements Runnable
1139     {
1140         /*** TODO */
1141         Hashtable services;
1142 
1143         /*** TODO */
1144         LinkedList list;
1145 
1146         /*** TODO */
1147         ServiceListener listener;
1148 
1149         /*** TODO */
1150         String type;
1151 
1152         /*** TODO */
1153         boolean done;
1154 
1155         /*** TODO */
1156         int delay;
1157 
1158         /*** TODO */
1159         long nextTime;
1160 
1161         /***
1162          * Create a browser for a service type.
1163          *
1164          * @param type TODO
1165          * @param listener TODO
1166          */
1167         ServiceBrowser(String type, ServiceListener listener)
1168         {
1169             this.type = type;
1170             this.listener = listener;
1171             this.services = new Hashtable();
1172             this.nextTime = System.currentTimeMillis();
1173             this.delay = 500;
1174             this.list = new LinkedList();
1175 
1176             addListener(this, new DNSQuestion(type, TYPE_PTR, CLASS_IN));
1177             new Thread(this, "JmDNS.ServiceBrowser: " + type).start();
1178         }
1179 
1180         /***
1181          * Request.
1182          */
1183         public void run()
1184         {
1185             try
1186             {
1187                 while(true)
1188                 {
1189                     Event evt = null;
1190 
1191                     synchronized(JmDNS.this)
1192                     {
1193                         long now = System.currentTimeMillis();
1194 
1195                         if((list.size() == 0) && (nextTime > now))
1196                         {
1197                             JmDNS.this.wait(nextTime - now);
1198                         }
1199 
1200                         if(done)
1201                         {
1202                             return;
1203                         }
1204 
1205                         now = System.currentTimeMillis();
1206 
1207                         // send query
1208                         if(nextTime <= now)
1209                         {
1210                             DNSOutgoing out = new DNSOutgoing(FLAGS_QR_QUERY);
1211 
1212                             out.addQuestion(new DNSQuestion(type, TYPE_PTR,
1213                                                             CLASS_IN));
1214 
1215                             for(Enumeration e = services.elements();
1216                                 e.hasMoreElements();)
1217                             {
1218                                 DNSRecord rec = (DNSRecord)e.nextElement();
1219 
1220                                 if(!rec.isExpired(now))
1221                                 {
1222                                     out.addAnswer(rec, now);
1223                                 }
1224                             }
1225 
1226                             send(out);
1227 
1228                             // schedule the next one
1229                             nextTime = now + delay;
1230                             delay = Math.min(20 * 1000, delay * 2);
1231                         }
1232 
1233                         // get the next event
1234                         if(list.size() > 0)
1235                         {
1236                             evt = (Event)list.removeFirst();
1237                         }
1238                     }
1239 
1240                     if(evt != null)
1241                     {
1242                         evt.send();
1243                     }
1244                 }
1245             }
1246             catch(IOException e)
1247             {
1248                 e.printStackTrace();
1249             }
1250             catch(InterruptedException e)
1251             {
1252                 // oops
1253             }
1254         }
1255 
1256         /***
1257          * TODO
1258          */
1259         void close()
1260         {
1261             synchronized(JmDNS.this)
1262             {
1263                 if(!done)
1264                 {
1265                     done = true;
1266                     removeListener(this);
1267                 }
1268             }
1269         }
1270 
1271         /***
1272          * Update a record.
1273          *
1274          * @param jmdns TODO
1275          * @param now TODO
1276          * @param rec TODO
1277          */
1278         void updateRecord(JmDNS jmdns, long now, DNSRecord rec)
1279         {
1280             if((rec.type == TYPE_PTR) && rec.name.equals(type))
1281             {
1282                 boolean expired = rec.isExpired(now);
1283                 String name = ((DNSRecord.Pointer)rec).alias;
1284                 DNSRecord old = (DNSRecord)services.get(name.toLowerCase());
1285 
1286                 if((old == null) && !expired)
1287                 {
1288                     // new record
1289                     services.put(name.toLowerCase(), rec);
1290                     list.addLast(new Event(name)
1291                         {
1292                             void send()
1293                             {
1294                                 listener.addService(JmDNS.this, type, this.name);
1295                             }
1296                         });
1297                 }
1298                 else if((old != null) && !expired)
1299                 {
1300                     // update record
1301                     old.resetTTL(rec);
1302                 }
1303                 else if((old != null) && expired)
1304                 {
1305                     // expire record
1306                     services.remove(name.toLowerCase());
1307                     list.addLast(new Event(name)
1308                         {
1309                             void send()
1310                             {
1311                                 listener.removeService(JmDNS.this, type,
1312                                                        this.name);
1313                             }
1314                         });
1315 
1316                     return;
1317                 }
1318 
1319                 // adjust next request time
1320                 long expires = rec.getExpirationTime(75);
1321 
1322                 if(expires < nextTime)
1323                 {
1324                     nextTime = rec.getExpirationTime(75);
1325                 }
1326             }
1327         }
1328 
1329         /***
1330          * Event for notifying a service listener.
1331          */
1332         abstract class Event
1333         {
1334             /*** TODO */
1335             String name;
1336 
1337             /***
1338              * Creates a new Event object.
1339              *
1340              * @param name TODO
1341              */
1342             Event(String name)
1343             {
1344                 this.name = name;
1345             }
1346 
1347             /***
1348              * TODO
1349              */
1350             abstract void send();
1351         }
1352     }
1353 
1354     /***
1355      * Helper class to resolve services.
1356      */
1357     class ServiceResolver implements Runnable
1358     {
1359         /*** TODO */
1360         ServiceInfo info;
1361 
1362         /*** TODO */
1363         int timeout;
1364 
1365         /***
1366          * Creates a new ServiceResolver object.
1367          *
1368          * @param info TODO
1369          * @param timeout TODO
1370          */
1371         ServiceResolver(ServiceInfo info, int timeout)
1372         {
1373             this.info = info;
1374             this.timeout = timeout;
1375         }
1376 
1377         /***
1378          * TODO
1379          */
1380         public void run()
1381         {
1382             ServiceInfo result = info;
1383 
1384             if(!info.request(JmDNS.this, timeout))
1385             {
1386                 result = null;
1387             }
1388 
1389             // notify the listeners of the appropriate service browsers
1390             for(Enumeration e = browsers.elements(); e.hasMoreElements();)
1391             {
1392                 ServiceBrowser browser = (ServiceBrowser)e.nextElement();
1393 
1394                 if(browser.type.equalsIgnoreCase(info.type))
1395                 {
1396                     browser.listener.resolveService(JmDNS.this, info.type,
1397                                                     info.name, result);
1398                 }
1399             }
1400         }
1401     }
1402 
1403     /***
1404      * Shutdown operations.
1405      */
1406     class Shutdown implements Runnable
1407     {
1408         /***
1409          * TODO
1410          */
1411         public void run()
1412         {
1413             shutdown = null;
1414             close();
1415         }
1416     }
1417 
1418     /***
1419      * Listen for multicast packets.
1420      */
1421     class SocketListener implements Runnable
1422     {
1423         /***
1424          * TODO
1425          */
1426         public void run()
1427         {
1428             try
1429             {
1430                 byte[] buf = new byte[MAX_MSG_ABSOLUTE];
1431                 DatagramPacket packet = new DatagramPacket(buf, buf.length);
1432 
1433                 while(!done)
1434                 {
1435                     packet.setLength(buf.length);
1436                     socket.receive(packet);
1437 
1438                     if(done)
1439                     {
1440                         break;
1441                     }
1442 
1443                     try
1444                     {
1445                         InetAddress from = packet.getAddress();
1446 
1447                         if(linklocal != isLinkLocal(from))
1448                         {
1449                             // Ignore linklocal packets on regular interfaces, unless this is
1450                             // also a linklocal interface. This is to avoid duplicates. This is
1451                             // a terrible hack caused by the lack of an API to get the address
1452                             // of the interface on which the packet was received.
1453                             continue;
1454                         }
1455 
1456                         if(loopback != isLoopback(from))
1457                         {
1458                             // Ignore loopback packets on a regular interface unless this is
1459                             // also a loopback interface.
1460                             continue;
1461                         }
1462 
1463                         DNSIncoming msg = new DNSIncoming(packet);
1464 
1465                         if(debug > 0)
1466                         {
1467                             msg.print(debug > 1);
1468                             System.out.println();
1469                         }
1470 
1471                         if(msg.isQuery())
1472                         {
1473                             if(packet.getPort() != MDNS_PORT)
1474                             {
1475                                 handleQuery(msg, packet.getAddress(),
1476                                             packet.getPort());
1477                             }
1478 
1479                             handleQuery(msg, group, MDNS_PORT);
1480                         }
1481                         else
1482                         {
1483                             handleResponse(msg);
1484                         }
1485                     }
1486                     catch(IOException e)
1487                     {
1488                         e.printStackTrace();
1489                     }
1490                 }
1491             }
1492             catch(IOException e)
1493             {
1494                 if(!done)
1495                 {
1496                     e.printStackTrace();
1497                 }
1498             }
1499         }
1500     }
1501 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/ServiceTypeListener.html
##-----------------TITLE------------------------##
ServiceTypeListener xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  /***
19   * Listener for service types.
20   *
21   * @author Arthur van Hoff
22   * @version %I%, %G%
23   */
24  public interface ServiceTypeListener
25  {
26      /***
27       * A new service type was discovered.
28       *
29       * @param jmdns TODO
30       * @param type the fully qualified type of the service
31       */
32      void addServiceType(JmDNS jmdns, String type);
33  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSOutgoing.html
##-----------------TITLE------------------------##
DNSOutgoing xref
##------------------TEXT------------------------##
View Javadoc

1   // %Z%%M%, %I%, %G%
2   //
3   // This library is free software; you can redistribute it and/or
4   // modify it under the terms of the GNU Lesser General Public
5   // License as published by the Free Software Foundation; either
6   // version 2.1 of the License, or (at your option) any later version.
7   // 
8   // This library is distributed in the hope that it will be useful,
9   // but WITHOUT ANY WARRANTY; without even the implied warranty of
10  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
11  // Lesser General Public License for more details.
12  // 
13  // You should have received a copy of the GNU Lesser General Public
14  // License along with this library; if not, write to the Free Software
15  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
16  package javax.jmdns;
17  
18  import java.io.IOException;
19  import java.util.Hashtable;
20  
21  /***
22   * An outgoing DNS message.
23   *
24   * @author Arthur van Hoff
25   * @version %I%, %G%
26   */
27  final class DNSOutgoing extends DNSConstants
28  {
29      /*** TODO */
30      Hashtable names;
31  
32      /*** TODO */
33      byte[] data;
34  
35      /*** TODO */
36      boolean multicast;
37  
38      /*** TODO */
39      int flags;
40  
41      /*** TODO */
42      int id;
43  
44      /*** TODO */
45      int len;
46  
47      /*** TODO */
48      int numAdditionals;
49  
50      /*** TODO */
51      int numAnswers;
52  
53      /*** TODO */
54      int numAuthorities;
55  
56      /*** TODO */
57      int numQuestions;
58  
59      /*** TODO */
60      int off;
61  
62      /***
63       * Create an outgoing multicast query or response.
64       *
65       * @param flags TODO
66       */
67      DNSOutgoing(int flags)
68      {
69          this(flags, true);
70      }
71  
72      /***
73       * Create an outgoing query or response.
74       *
75       * @param flags TODO
76       * @param multicast TODO
77       */
78      DNSOutgoing(int flags, boolean multicast)
79      {
80          this.flags = flags;
81          this.multicast = multicast;
82          names = new Hashtable();
83          data = new byte[MAX_MSG_TYPICAL];
84          off = 12;
85      }
86  
87      /***
88       * Add an additional answer to the record. Omit if there is no room.
89       *
90       * @param in TODO
91       * @param rec TODO
92       *
93       * @throws IOException TODO
94       */
95      void addAdditionalAnswer(DNSIncoming in, DNSRecord rec) throws IOException
96      {
97          if((off < (MAX_MSG_TYPICAL - 200)) && !rec.suppressedBy(in))
98          {
99              numAdditionals++;
100             writeRecord(rec, 0);
101         }
102     }
103 
104     /***
105      * Add an answer if it is not suppressed.
106      *
107      * @param in TODO
108      * @param rec TODO
109      *
110      * @throws IOException TODO
111      */
112     void addAnswer(DNSIncoming in, DNSRecord rec) throws IOException
113     {
114         if(!rec.suppressedBy(in))
115         {
116             addAnswer(rec, 0);
117         }
118     }
119 
120     /***
121      * Add an answer to the message.
122      *
123      * @param rec TODO
124      * @param now TODO
125      *
126      * @throws IOException TODO
127      */
128     void addAnswer(DNSRecord rec, long now) throws IOException
129     {
130         if(rec != null)
131         {
132             if((now == 0) || !rec.isExpired(now))
133             {
134                 numAnswers++;
135                 writeRecord(rec, now);
136             }
137         }
138     }
139 
140     /***
141      * Add an authoritive answer to the message.
142      *
143      * @param rec TODO
144      *
145      * @throws IOException TODO
146      */
147     void addAuthorativeAnswer(DNSRecord rec) throws IOException
148     {
149         numAuthorities++;
150         writeRecord(rec, 0);
151     }
152 
153     /***
154      * Add a question to the message.
155      *
156      * @param rec TODO
157      *
158      * @throws IOException TODO
159      */
160     void addQuestion(DNSQuestion rec) throws IOException
161     {
162         numQuestions++;
163         writeQuestion(rec);
164     }
165 
166     /***
167      * Finish the message before sending it off.
168      *
169      * @throws IOException TODO
170      */
171     void finish() throws IOException
172     {
173         int save = off;
174 
175         off = 0;
176 
177         writeShort(multicast ? 0 : id);
178         writeShort(flags);
179         writeShort(numQuestions);
180         writeShort(numAnswers);
181         writeShort(numAuthorities);
182         writeShort(numAdditionals);
183         off = save;
184     }
185 
186     /***
187      * TODO
188      *
189      * @param value TODO
190      *
191      * @throws IOException TODO
192      */
193     void writeByte(int value) throws IOException
194     {
195         if(off >= data.length)
196         {
197             throw new IOException("buffer full");
198         }
199 
200         data[off++] = (byte)value;
201     }
202 
203     /***
204      * TODO
205      *
206      * @param str TODO
207      * @param off TODO
208      * @param len TODO
209      *
210      * @throws IOException TODO
211      */
212     void writeBytes(String str, int off, int len) throws IOException
213     {
214         for(int i = 0; i < len; i++)
215         {
216             writeByte(str.charAt(off + i));
217         }
218     }
219 
220     /***
221      * TODO
222      *
223      * @param data TODO
224      * @param off TODO
225      * @param len TODO
226      *
227      * @throws IOException TODO
228      */
229     void writeBytes(byte[] data, int off, int len) throws IOException
230     {
231         for(int i = 0; i < len; i++)
232         {
233             writeByte(data[off + i]);
234         }
235     }
236 
237     /***
238      * TODO
239      *
240      * @param value TODO
241      *
242      * @throws IOException TODO
243      */
244     void writeInt(int value) throws IOException
245     {
246         writeShort(value >> 16);
247         writeShort(value);
248     }
249 
250     /***
251      * TODO
252      *
253      * @param name TODO
254      *
255      * @throws IOException TODO
256      */
257     void writeName(String name) throws IOException
258     {
259         while(true)
260         {
261             int n = name.indexOf('.');
262 
263             if(n < 0)
264             {
265                 n = name.length();
266             }
267 
268             if(n <= 0)
269             {
270                 writeByte(0);
271 
272                 return;
273             }
274 
275             Integer offset = (Integer)names.get(name);
276 
277             if(offset != null)
278             {
279                 int val = offset.intValue();
280 
281                 writeByte((val >> 8) | 0xC0);
282                 writeByte(val);
283 
284                 return;
285             }
286 
287             names.put(name, new Integer(off));
288             writeUTF(name, 0, n);
289             name = name.substring(n);
290 
291             if(name.startsWith("."))
292             {
293                 name = name.substring(1);
294             }
295         }
296     }
297 
298     /***
299      * TODO
300      *
301      * @param question TODO
302      *
303      * @throws IOException TODO
304      */
305     void writeQuestion(DNSQuestion question) throws IOException
306     {
307         writeName(question.name);
308         writeShort(question.type);
309         writeShort(question.clazz);
310     }
311 
312     /***
313      * TODO
314      *
315      * @param rec TODO
316      * @param now TODO
317      *
318      * @throws IOException TODO
319      */
320     void writeRecord(DNSRecord rec, long now) throws IOException
321     {
322         writeName(rec.name);
323         writeShort(rec.type);
324         writeShort(rec.clazz | ((rec.unique && multicast) ? CLASS_UNIQUE : 0));
325         writeInt((now == 0) ? rec.ttl : rec.getRemainingTTL(now));
326         writeShort(0);
327 
328         int start = off;
329 
330         rec.write(this);
331 
332         int len = off - start;
333 
334         data[start - 2] = (byte)(len >> 8);
335         data[start - 1] = (byte)(len & 0xFF);
336     }
337 
338     /***
339      * TODO
340      *
341      * @param value TODO
342      *
343      * @throws IOException TODO
344      */
345     void writeShort(int value) throws IOException
346     {
347         writeByte(value >> 8);
348         writeByte(value);
349     }
350 
351     /***
352      * TODO
353      *
354      * @param str TODO
355      * @param off TODO
356      * @param len TODO
357      *
358      * @throws IOException TODO
359      */
360     void writeUTF(String str, int off, int len) throws IOException
361     {
362         // compute utf length
363         int utflen = 0;
364 
365         for(int i = 0; i < len; i++)
366         {
367             int ch = str.charAt(off + i);
368 
369             if((ch >= 0x0001) && (ch <= 0x007F))
370             {
371                 utflen += 1;
372             }
373             else if(ch > 0x07FF)
374             {
375                 utflen += 3;
376             }
377             else
378             {
379                 utflen += 2;
380             }
381         }
382 
383         // write utf length
384         writeByte(utflen);
385 
386         // write utf data
387         for(int i = 0; i < len; i++)
388         {
389             int ch = str.charAt(off + i);
390 
391             if((ch >= 0x0001) && (ch <= 0x007F))
392             {
393                 writeByte(ch);
394             }
395             else if(ch > 0x07FF)
396             {
397                 writeByte(0xE0 | ((ch >> 12) & 0x0F));
398                 writeByte(0x80 | ((ch >> 6) & 0x3F));
399                 writeByte(0x80 | ((ch >> 0) & 0x3F));
400             }
401             else
402             {
403                 writeByte(0xC0 | ((ch >> 6) & 0x1F));
404                 writeByte(0x80 | ((ch >> 0) & 0x3F));
405             }
406         }
407     }
408 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/allclasses-frame.html
##-----------------TITLE------------------------##
All Classes
##------------------TEXT------------------------##
All Classes

      
            ColorUtilTest
          
            CommandTest
          
            CompareCommandTest
          
            CoordinateTest
          
            CopyCommandTest
          
            DNSSDPeerFinderTest
          
            DeleteCommandTest
          
            FileTest
          
            GetCommandTest
          
            HeadCommandTest
          
            HostPathCodecImplTest
          
            LockCommandTest
          
            LockCompareTest
          
            MkcolCommandTest
          
            MoveCommandTest
          
            OptionCommandTest
          
            PeerManagerTest
          
            PropertyFileLauncherTest
          
            PropertyGUIConfigTest
          
            PropfindCommandTest
          
            PropfindCompareTest
          
            ProxyTest
          
            PutCommandTest
          
            SVGPieViewTest
          
            SlideTestSetup
          
            UnlockCommandTest
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/overview-summary.html
##-----------------TITLE------------------------##
Swirl WebDAV Workspace 0.20 Reference
##------------------TEXT------------------------##
OverviewPackage
      
      
        
            FRAMES
          
            NO FRAMES
          
      

      
    
      

      Swirl WebDAV Workspace 0.20 Reference

      Packages
                swirl.workspace
              
                swirl.workspace.common
              
                swirl.workspace.rendezvous
              
                swirl.workspace.security
              
                swirl.workspace.viz
              
                swirl.workspace.viz.pie
              

    
      
      

      
        OverviewPackage
      
      
        
            FRAMES
          
            NO FRAMES
          
      

      
    
    
          
          Copyright © 2004-2005 . All Rights Reserved.
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/overview-frame.html
##-----------------TITLE------------------------##
Swirl WebDAV Workspace 0.20 Reference
##------------------TEXT------------------------##
All Classes
      

      Packages

      
            swirl.workspace
          
            swirl.workspace.common
          
            swirl.workspace.rendezvous
          
            swirl.workspace.security
          
            swirl.workspace.viz
          
            swirl.workspace.viz.pie
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/SVGPieViewMouseListener.html
##-----------------TITLE------------------------##
SVGPieViewMouseListener xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 31, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   import org.apache.batik.bridge.UpdateManager;
7   import org.apache.batik.dom.events.DOMMouseEvent;
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  import org.w3c.dom.Element;
11  import org.w3c.dom.Node;
12  import org.w3c.dom.events.Event;
13  import org.w3c.dom.events.EventListener;
14  import org.w3c.dom.events.EventTarget;
15  
16  /***
17   * DOCUMENT ME!
18   *
19   * @author bpillet
20   */
21  public class SVGPieViewMouseListener implements EventListener
22  {
23      /*** TODO */
24      private Log log = LogFactory.getLog(this.getClass());
25  
26      /*** TODO */
27      private UpdateManager upThread;
28  
29      /***
30       * Creates a new SVGPieViewMouseListener object.
31       *
32       * @param thread TODO
33       */
34      public SVGPieViewMouseListener(UpdateManager thread)
35      {
36          super();
37          upThread = thread;
38      }
39  
40      /***
41       * TODO
42       *
43       * @param evt TODO
44       */
45      public void handleEvent(Event evt)
46      {
47          if(log.isDebugEnabled())
48          {
49              log.debug("evt: " + evt);
50          }
51  
52          DOMMouseEvent q = (DOMMouseEvent)evt;
53          EventTarget target = q.getTarget();
54          Node node = (Node)target;
55          // if evt is a mouseover
56          {
57              if(log.isDebugEnabled())
58              {
59                  log.debug("mouseover is called");
60              }
61  
62              //Changes the edge of the dot to make it thicker or thinner
63              Element enode = (Element)node;
64  
65              if(log.isDebugEnabled())
66              {
67                  log.debug(enode.getTagName() + " has been selected!");
68              }
69  
70              if(enode.getTagName().equals("circle")
71                 || enode.getTagName().equals("rect"))
72              {
73                  Element e = (Element)node;
74                  FileNameAppearing fna = new FileNameAppearing(e, true);
75  
76                  upThread.getUpdateRunnableQueue().invokeLater(fna);
77              }
78          }
79          // if evt is a mouseout
80          {
81              if(log.isDebugEnabled())
82              {
83                  log.debug("mouseout is called");
84              }
85  
86              // selected = false;  
87              upThread.getUpdateRunnableQueue().invokeLater(new FileNameAppearing((Element)node,
88                                                                                  false));
89          }
90      }
91  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/NullMessageSender.html
##-----------------TITLE------------------------##
NullMessageSender xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.util.Map;
4   
5   import org.apache.commons.logging.Log;
6   import org.apache.commons.logging.LogFactory;
7   
8   /***
9    * DOCUMENT ME!
10   *
11   * @author bpillet
12   */
13  public class NullMessageSender implements MessageSender
14  {
15      /*** TODO */
16      Log log = LogFactory.getLog(this.getClass());
17  
18      /***
19       * TODO
20       *
21       * @param msg TODO
22       */
23      public void sendMessage(Map msg)
24      {
25          if(log.isDebugEnabled())
26          {
27              log.debug("ignoring message " + msg);
28          }
29      }
30      
31      public void sendMessage(Map msg, boolean isPrivate) {
32          if(log.isDebugEnabled())
33          {
34              log.debug("ignoring message " + msg);
35          }
36      }
37  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/DotElement.html
##-----------------TITLE------------------------##
DotElement xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    */
5   package swirl.workspace.viz.pie;
6   
7   import java.awt.Color;
8   import java.awt.Point;
9   
10  import org.apache.batik.dom.AbstractDocument;
11  import org.apache.batik.dom.svg.SVGDOMImplementation;
12  import org.apache.batik.extension.svg.BatikRegularPolygonElement;
13  import org.apache.commons.logging.Log;
14  import org.apache.commons.logging.LogFactory;
15  import org.w3c.dom.Element;
16  import org.w3c.dom.Node;
17  import org.w3c.dom.Text;
18  
19  import swirl.workspace.viz.SharingLevel;
20  
21  /***
22   * DOCUMENT ME!
23   *
24   * @author dingx
25   */
26  public class DotElement extends BatikRegularPolygonElement
27      implements Dot
28  {
29      /*** TODO */
30      public static final String URL = "ben";
31  
32      /*** TODO */
33      public static final String RADIUS = "radius";
34  
35      /*** TODO */
36      public static final String RELATIVE_ANGLE = "relativeAngle";
37  
38      /*** TODO */
39      public static final String TAG = "g";
40  
41      /*** TODO */
42      private int radius = 8;
43  
44      /*** TODO */
45      private static final long serialVersionUID = 1L;
46  
47      /*** TODO */
48      private AbstractDocument doc;
49  
50      /*** TODO */
51      private Dot dot = new DefaultDot(this);
52  
53      /*** TODO */
54      private Element fileDot;
55  
56      /*** TODO */
57      private Element fileLabel;
58  
59      /*** TODO */
60      private FileElement fileelement;
61  
62      /*** TODO */
63      private Log log = LogFactory.getLog(this.getClass());
64  
65      /*** TODO */
66      private SharingLevel sharinglevel = null;
67  
68      /*** TODO */
69      private String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
70  
71      /*** TODO */
72      private Text fileName;
73  
74      
75      private Coordinate location;
76  
77      /***
78       * Creates a new DotElement object.
79       *
80       * @param name TODO
81       * @param document TODO
82       */
83      public DotElement(String name, AbstractDocument document)
84      {
85          super(name, document);
86  
87          if(log.isDebugEnabled())
88          {
89              log.debug("(" + name + ", " + document + ")");
90          }
91  
92          this.doc = document;
93  
94          fileDot = doc.createElementNS(svgNS, "circle");
95  
96          fileDot.setAttributeNS(null, "onmouseover",
97                                 "evt.target.setAttribute('stroke', 'lightgrey')");
98          fileDot.setAttributeNS(null, "onmouseout",
99                                 "evt.target.setAttribute('stroke', 'darkgrey')");
100         fileDot.setAttributeNS(null, "stroke", "darkgrey");
101         fileDot.setAttributeNS(null, "stroke-width", "4");
102         if(log.isDebugEnabled())
103         {
104         	log.debug("r: " + (radius -1));
105         }
106         fileDot.setAttributeNS(null, "r", String.valueOf(radius - 1));
107         fileDot.setAttributeNS(null, "filter", "url(#" + PieWorkSpace.DOT_FILTER_ID + ")");
108         appendChild(fileDot);
109 
110         fileLabel = doc.createElementNS(svgNS, "text");
111         fileLabel.setAttributeNS(null, "font-family", "arial");
112         fileLabel.setAttributeNS(null, "font-size", "15");
113         fileLabel.setAttributeNS(null, "x", String.valueOf(radius / 2));
114         fileLabel.setAttributeNS(null, "y", String.valueOf(radius / 2));
115         fileLabel.setAttributeNS(null, "fill", "black");
116         fileLabel.setAttributeNS(null, "opacity", "1");
117         fileName = doc.createTextNode("");
118         fileLabel.appendChild(fileName);
119         appendChild(fileLabel);
120     }
121 
122     /***
123      * Creates a new DotElement object.
124      */
125     protected DotElement()
126     {
127         if(log.isDebugEnabled())
128         {
129             log.debug("()");
130         }
131     }
132 
133     /***
134      * TODO
135      *
136      * @param uColor TODO
137      */
138     public void setColor(Color uColor)
139     {
140         int rgb = uColor.getRGB();
141         String color = "rgb(" + uColor.getRed() + "," + uColor.getGreen() + ","
142                        + uColor.getBlue() + ")";
143 
144         fileDot.setAttributeNS(null, "fill", color);
145     }
146 
147     /***
148      * TODO
149      *
150      * @param fe TODO
151      */
152     public void setFileElement(FileElement fe)
153     {
154         if(log.isDebugEnabled())
155         {
156             log.debug("setFileElement: " + fileDot.getTagName() + " isDir: "
157                       + fe.isDir());
158         }
159 
160         if(log.isDebugEnabled())
161         {
162             log.debug("change child to dirDot");
163         }
164 
165         fileelement = fe;
166         
167         try
168         {
169             removeChild(fileDot);
170         }
171         catch(Exception e)
172         {
173             if(log.isDebugEnabled())
174             {
175                 log.debug("ignored", e);
176             }
177         }
178 
179         insertBefore(fileDot, getFirstChild());
180 
181         String userID = fe.getOwnerKey();
182         boolean isDir = fe.isDir();
183 
184         String dotid = userID + ":" + fe.getKey();
185 
186         setAttribute("id", dotid);
187 
188         if(log.isDebugEnabled())
189         {
190             log.debug("fe.getName(): " + fe.getName());
191         }
192 
193         fileName.setData(fe.getName());
194     }
195 
196     /***
197      * TODO
198      *
199      * @return TODO
200      */
201     public FileElement getFileElement()
202     {
203         return fileelement;
204     }
205 
206     /***
207      * TODO
208      *
209      * @return TODO
210      */
211     public String getLocalName()
212     {
213         return TAG;
214     }
215 
216     /***
217      * TODO
218      *
219      * @param x TODO
220      * @param y TODO
221      */
222     public void setLocation(Point point)
223     {
224         if(log.isDebugEnabled())
225         {
226         	log.debug("set location x:" + point.getX() + " y:" + point.getY());
227         }
228         location.setAbsolutePoint(point);
229         location.updateCoordinate(point);
230     	setAttributeNS(null, "transform",
231                        "translate(" + point.getX() + ", " + point.getY() + ")");
232     }
233 
234     /***
235      * TODO
236      *
237      * @return TODO
238      */
239     public Point getLocation()
240     {
241         return location.getPoint();
242     }
243     
244 	/***
245 	 * TODO
246 	 *
247 	 * @return TODO
248 	 */
249 	public double getRadius()
250 	{
251 		return location.getRadius();
252 	}
253 	
254 	/***
255 	 * TODO
256 	 *
257 	 * @return TODO
258 	 */
259 	public void setLocation(double radius, double relativeAngle)
260 	{
261 		location.updateCoordinate(radius, relativeAngle);
262 		location.updateAbsolutePoint();
263 		Point point = location.getPoint();
264 		setAttributeNS(null, "transform",
265                 "translate(" + point.getX() + ", " + point.getY() + ")");
266 	}
267 	
268 	/***
269 	 * TODO
270 	 *
271 	 * @return TODO
272 	 */
273 	public double getRelativeAngle()
274 	{
275 		return location.getRelativeAngle();
276 	}
277 	
278 	/***
279 	 * TODO
280 	 *
281 	 * @return TODO
282 	 */
283 	public void setNumberOfUsers(int numberOfUsers, int userIndex) 
284 	{
285 		location.updateNumberOfUsers(numberOfUsers, userIndex);
286 		Point point = location.getPoint();
287 		location.updateAbsolutePoint();
288 		setAttributeNS(null, "transform",
289                 "translate(" + point.getX() + ", " + point.getY() + ")");
290 	}
291 	
292     /***
293      * TODO
294      *
295      * @return TODO
296      */
297     public String getNamespaceURI()
298     {
299         //return URL;
300         return svgNS;
301     }
302 
303     /***
304      * TODO
305      *
306      * @return TODO
307      */
308     public SharingLevel getSharingLevel()
309     {
310         return fileelement.getShareDegree();
311     }
312 
313     /***
314      * TODO
315      *
316      * @return TODO
317      */
318     public SharingLevel caculateSharingLevel()
319     {
320     	 //double posX = location.getPoint().getX();
321     	 //double posY = location.getPoint().getY();
322     	 int level = Util.getSharingDegree(getRadius());
323     	 return new SharingLevel(level);
324     }
325 
326     /***
327      * TODO
328      *
329      * @return TODO
330      */
331     public String getUser()
332     {
333         return fileelement.getUserKey();
334     }
335     
336     public String getOwnerUser()
337     {
338         return fileelement.getOwnerKey();
339     }
340 
341     /***
342      * TODO
343      */
344     public void fileOpen()
345     {
346         dot.fileOpen();
347     }
348 
349     /***
350      * TODO
351      *
352      * @param highlight TODO
353      */
354     public void highlightDot(boolean highlight)
355     {
356         dot.highlightDot(highlight);
357     }
358 
359     /***
360      * TODO
361      *
362      * @param distanceX TODO
363      * @param distanceY TODO
364      */
365     public void move(double distanceX, double distanceY)
366     {
367     	Point locPoint = location.getAbsolutePoint();
368         if(log.isDebugEnabled())
369         {
370         	log.debug("the point is " + locPoint.getX() 
371         			+ " and " + locPoint.getY());
372         }
373     	
374     	double posX = locPoint.getX() + distanceX;
375         double posY = locPoint.getY() + distanceY;
376         locPoint.setLocation(posX, posY);
377         location.setAbsolutePoint(locPoint);
378         location.updateCoordinate(locPoint);
379         setAttributeNS(null, "transform",
380                        "translate(" + posX + ", " + posY + ")");
381     }
382 
383     /***
384      * TODO
385      *
386      * @param start TODO
387      * @param peerNum TODO
388      */
389     public void newLocation(double start, double arcAngle, int numberOfUsers, int userIndex)
390     {
391     	if(log.isDebugEnabled())
392         {
393     		log.debug("the sharing degree for file " + fileelement.getKey() 
394     			+ " is " + getSharingLevel().getValue());
395     		log.debug("newLocation(" + start + ", " + arcAngle + ")");
396         }
397     	Point cp = Util.caculateFileLocation(start, arcAngle,
398                                              getSharingLevel().getValue(),
399                                              radius);
400         location = new Coordinate(cp, numberOfUsers, userIndex);
401         setLocation(cp);
402     }
403     
404     /***
405      * TODO
406      *
407      * @param point assigns location
408      */
409     public void newLocation(Point point, int numberOfUsers, int userIndex)
410     {
411         location = new Coordinate(point, numberOfUsers, userIndex);
412         setLocation(point);
413     }
414 
415     /***
416      * TODO
417      *
418      * @param start TODO
419      * @param peerNum TODO
420      */
421     public void newLocation(double start, double arcAngle,double radius, 
422     		double relativeAngle, int numberOfUsers, int userIndex)
423     {
424     	if(log.isDebugEnabled())
425         {
426     		log.debug("the sharing degree for file " + fileelement.getKey() 
427     			+ " is " + getSharingLevel().getValue());
428     		log.debug("newLocation(" + start + ", " + arcAngle + ")");
429         }
430     	location = new Coordinate(radius, relativeAngle, numberOfUsers, userIndex);
431     	setLocation(radius, relativeAngle);
432     }
433 
434     /***
435      * TODO
436      *
437      * @return TODO
438      */
439     protected Node newNode()
440     {
441         if(log.isDebugEnabled())
442         {
443             log.debug("newNode()");
444         }
445 
446         return new DotElement();
447     }
448 
449 	/***
450 	 * @param dotSize
451 	 */
452 	public void setSize(int dotSize) {
453 		radius = dotSize;
454 		fileDot.setAttributeNS(null, "r", dotSize + "");
455 	}
456 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/rendezvous/DNSSDPeer.html
##-----------------TITLE------------------------##
DNSSDPeer xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 1, 2004
3    */
4   package swirl.workspace.rendezvous;
5   
6   import java.awt.Color;
7   
8   import org.apache.commons.httpclient.HttpURL;
9   import org.apache.commons.httpclient.URIException;
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  import swirl.workspace.Peer;
14  import swirl.workspace.PeerManager;
15  
16  /***
17   * DOCUMENT ME!
18   *
19   * @author Ben
20   */
21  public class DNSSDPeer extends Peer
22  {
23      /*** TODO */
24      private static String nameOfLocalPort = "localPort";
25  
26      /*** property name for "ownPath" in serviceInfo */
27      private static String nameOfOwnPath = "ownPath";
28  
29      /*** TODO */
30      private Color color;
31  
32      /*** TODO */
33      private DNSSDPeerFinder dnssd;
34  
35      //private TXTRecord txt;
36  
37      /*** the logger for this class */
38      private Log log = LogFactory.getLog(this.getClass());
39  
40      /*** TODO */
41      private String path;
42  
43      /*** TODO */
44      private String serviceName;
45  
46      /*** TODO */
47      private int port;
48  
49      /***
50       * Creates a new DNSSDPeer object.
51       *
52       * @param finder TODO
53       * @param port TODO
54       * @param path TODO
55       */
56      public DNSSDPeer(DNSSDPeerFinder finder, final int port, final String path)
57      {
58          dnssd = finder;
59          initServiceName(port, path);
60  
61          /*        txt = new TXTRecord();
62             txt.set(nameOfLocalPort, port + "");
63             txt.set(nameOfOwnPath, path);
64             txt.set("user.name",
65                     System.getProperty("user.name"));
66             txt.set("color", "0x" + Integer.toHexString(hashCode()));
67           */
68      }
69  
70      /***
71       * TODO
72       *
73       * @return TODO
74       */
75      public Color getColor()
76      {
77          if(log.isDebugEnabled())
78          {
79              log.debug("color: " + color);
80          }
81  
82          if(color == null)
83          {
84              /*            color = Color.decode(txt.getValueAsString("color"));
85                 log.debug("setting color for " + getUserName()
86                     + "\nprop: " + txt.getValueAsString("color")
87                     + "\ncolor: " + color);
88               */
89          }
90  
91          return color;
92      }
93  
94      /* (non-Javadoc)
95       * @see swirl.workspace.Peer#getHttpURL()
96       */
97      public HttpURL getHttpURL() throws URIException
98      {
99          return null;
100     }
101 
102     /* (non-Javadoc)
103      * @see swirl.workspace.Peer#getSwirlURL()
104      */
105     public HttpURL getSwirlURL() throws URIException
106     {
107         return null;
108     }
109 
110     /***
111      * TODO
112      *
113      * @return TODO
114      */
115     public String getUserName()
116     {
117         return ""; //txt.getValueAsString("user.name");
118     }
119 
120     /***
121      * TODO
122      */
123     public void start()
124     {
125         if(log.isDebugEnabled())
126         {
127             log.debug("starting");
128         }
129 
130         if(
131         /*        try
132            {
133                DNSSD.register(DNSSD.NO_AUTO_RENAME,
134                    0, serviceName, "_webdav._tcp", null, null, port, txt, null);
135            }
136            catch (DNSSDException e)
137            {
138                log.error(e, e);
139            }
140          */
141         log.isDebugEnabled())
142         {
143             /*        try
144                {
145                    DNSSD.register(DNSSD.NO_AUTO_RENAME,
146                        0, serviceName, "_webdav._tcp", null, null, port, txt, null);
147                }
148                catch (DNSSDException e)
149                {
150                    log.error(e, e);
151                }
152              */
153             log.debug("started");
154         }
155     }
156 
157     /* (non-Javadoc)
158      * @see org.picocontainer.Startable#stop()
159      */
160     public void stop(){}
161 
162     /***
163      * Generates a unique serviceName for this peer
164      *
165      * @param port the port this peer listens on
166      * @param path the path of this peer's slide server
167      */
168     private void initServiceName(final int port, final String path)
169     {
170         serviceName = PeerManager.getLocalAddress().getHostAddress();
171         serviceName += (":" + port + path + "." + PeerManager.SWIRL_TYPE);
172     }
173 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PeerFinder.html
##-----------------TITLE------------------------##
PeerFinder xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import org.picocontainer.Startable;
4   
5   /***
6    * DOCUMENT ME!
7    *
8    * @author bpillet
9    */
10  public interface PeerFinder extends Startable{}

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/PrivateLevel.html
##-----------------TITLE------------------------##
PrivateLevel xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    */
5   package swirl.workspace.viz.pie;
6   
7   /***
8    * DOCUMENT ME!
9    *
10   * @author dingx
11   */
12  public class PrivateLevel //extends BaseLevel
13  {}

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SwirlModel.html
##-----------------TITLE------------------------##
SwirlModel xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Color;
4   import java.io.File;
5   import java.io.FileInputStream;
6   import java.io.FileOutputStream;
7   import java.io.IOException;
8   import java.io.InputStream;
9   import java.util.ArrayList;
10  import java.util.Enumeration;
11  import java.util.HashMap;
12  import java.util.Iterator;
13  import java.util.List;
14  import java.util.Map;
15  import java.util.Vector;
16  
17  import javax.swing.ProgressMonitor;
18  import javax.swing.JOptionPane;
19  
20  import org.apache.commons.httpclient.HttpURL;
21  import org.apache.commons.httpclient.URIException;
22  import org.apache.commons.httpclient.methods.GetMethod;
23  import org.apache.commons.httpclient.methods.PutMethod;
24  import org.apache.commons.logging.Log;
25  import org.apache.commons.logging.LogFactory;
26  import org.apache.webdav.lib.ResponseEntity;
27  import org.apache.webdav.lib.methods.DeleteMethod;
28  import org.apache.webdav.lib.methods.DepthSupport;
29  import org.apache.webdav.lib.methods.PropFindMethod;
30  import org.apache.webdav.lib.methods.PropPatchMethod;
31  import org.picocontainer.Startable;
32  import org.w3c.dom.Document;
33  
34  import swirl.workspace.App;
35  import swirl.workspace.OurPropPatchMethod;
36  import swirl.workspace.Peer;
37  import swirl.workspace.PeerManager;
38  import swirl.workspace.PeerManagerListener;
39  import swirl.workspace.common.NetUtils;
40  import swirl.workspace.security.SecurityManager;
41  import swirl.workspace.security.SwirlSecurity;
42  import swirl.workspace.viz.pie.Coordinate;
43  import swirl.workspace.viz.pie.DotElement;
44  import swirl.workspace.viz.pie.ExportFileDialogBox;
45  import swirl.workspace.viz.pie.FileElement;
46  import swirl.workspace.viz.pie.Util;
47  
48  /***
49   * TODO
50   *
51   * @author $author$
52   * @version $Revision: 1.103 $ $Log: SwirlModel.java,v $
53   * @version $Revision: 1.103 $ Revision 1.103  2005/05/13 18:57:54  kari
54   * @version $Revision: 1.103 $ call setsecuritylevel
55   * @version $Revision: 1.103 $
56   * @version $Revision: 1.103 $ Revision 1.102  2005/05/13 18:44:41  kari
57   * @version $Revision: 1.103 $ call setSharingGree
58   * @version $Revision: 1.103 $
59   * @version $Revision: 1.103 $ Revision 1.101  2005/05/13 18:30:45  kari
60   * @version $Revision: 1.103 $ Added code to set webdav resource sharing level property on
61   * @version $Revision: 1.103 $ a drag and drop import.
62   * @version $Revision: 1.103 $
63   * @version $Revision: 1.103 $ Revision 1.100  2005/05/03 06:24:35  kari
64   * @version $Revision: 1.103 $ Fixed bug in drag and drop
65   * @version $Revision: 1.103 $
66   * @version $Revision: 1.103 $ Revision 1.99  2005/05/01 07:04:48  kari
67   * @version $Revision: 1.103 $ Fix for bug that caused drag and drop files to not be seen by
68   * @version $Revision: 1.103 $ late joining peers.
69   * @version $Revision: 1.103 $
70   * @version $Revision: 1.103 $ Revision 1.98  2005/04/30 06:08:37  kari
71   * @version $Revision: 1.103 $ Fixed bug that made private files visible.
72   * @version $Revision: 1.103 $
73   * @version $Revision: 1.103 $ Revision 1.97  2005/04/29 06:14:56  kari
74   * @version $Revision: 1.103 $ Simplified drag and drop. Hopefully fixed bug in viewing files that
75   * @version $Revision: 1.103 $ have been previously imported at startup.
76   * @version $Revision: 1.103 $
77   * @version $Revision: 1.103 $ Revision 1.96  2005/04/28 21:36:41  kari
78   * @version $Revision: 1.103 $ Changes in support of drag-n-drop feature.
79   * @version $Revision: 1.103 $
80   * @version $Revision: 1.103 $ Revision 1.95.2.2  2005/04/28 19:47:20  kari
81   * @version $Revision: 1.103 $ Fixes to Drag and Drop
82   * @version $Revision: 1.103 $
83   * @version $Revision: 1.103 $ Revision 1.95.2.1  2005/04/28 06:41:19  kari
84   * @version $Revision: 1.103 $ modifications to support drag and drop import.
85   * @version $Revision: 1.103 $
86   * @version $Revision: 1.103 $ Revision 1.95  2005/04/08 22:38:19  kari
87   * @version $Revision: 1.103 $ Performance enhancements.  Reduced the number of messages logged
88   * @version $Revision: 1.103 $ to yancees.
89   * @version $Revision: 1.103 $
90   * @version $Revision: 1.103 $ Revision 1.93.2.5  2005/04/06 22:21:37  kari
91   * @version $Revision: 1.103 $ Fixed bug causing changes in dot location to never log.
92   * @version $Revision: 1.103 $
93   * @version $Revision: 1.103 $ Revision 1.93.2.4  2005/03/23 22:41:10  kari
94   * @version $Revision: 1.103 $ Modified to filter some message logging.  Changed executeHttpRequestMetho to
95   * @version $Revision: 1.103 $ either executeHttpRequestMethodWithoutLog or
96   * @version $Revision: 1.103 $ executeHttpRequestMethosLogPrivate, depending on
97   * @version $Revision: 1.103 $ how far the message should be propogated:
98   * @version $Revision: 1.103 $ not at all (WithoutLog), only to the local peer (LogPrivate),
99   * @version $Revision: 1.103 $ or to all peers (default).
100  * @version $Revision: 1.103 $
101  * @version $Revision: 1.103 $ Revision 1.93.2.3  2005/03/22 22:35:38  kari
102  * @version $Revision: 1.103 $ Change newly imported files to not log the put in yancees (file should be hidden).
103  * @version $Revision: 1.103 $ Need to change so that message gets logged to the file owners peer only.
104  * @version $Revision: 1.103 $
105  * @version $Revision: 1.103 $ Revision 1.93.2.2  2005/03/22 05:53:51  kari
106  * @version $Revision: 1.103 $ Modified more calls to execute an HTTP request without logging.
107  * @version $Revision: 1.103 $
108  * @version $Revision: 1.103 $ Revision 1.94  2005/03/15 23:54:40  kari
109  * @version $Revision: 1.103 $ Tried to reduce logging overhead by adding if (log.isDebugEnabled)
110  * @version $Revision: 1.103 $ before each log.debug method.
111  * @version $Revision: 1.103 $
112  * @version $Revision: 1.103 $ Revision 1.93.2.1  2005/03/15 23:22:02  kari
113  * @version $Revision: 1.103 $ Attempting to reduce logging overhead by adding if (log.isDebugEnabled)
114  * @version $Revision: 1.103 $ before all log.debug methods.
115  * @version $Revision: 1.103 $
116  * @version $Revision: 1.103 $ Revision 1.93  2005/03/04 00:20:22  jie
117  * @version $Revision: 1.103 $ *** empty log message ***
118  * @version $Revision: 1.103 $
119  * @version $Revision: 1.103 $ Revision 1.92  2005/02/16 00:48:35  jie
120  * @version $Revision: 1.103 $ mount webdav
121  * @version $Revision: 1.103 $
122  * @version $Revision: 1.103 $ Revision 1.91  2005/02/15 23:38:26  jie
123  * @version $Revision: 1.103 $ mount in Configuration
124  * @version $Revision: 1.103 $
125  * @version $Revision: 1.103 $ Revision 1.90  2005/02/15 23:29:50  jie
126  * @version $Revision: 1.103 $ change color from "   " to "aaa", mount WebDAV on SwirlModel.java
127  * @version $Revision: 1.103 $
128  * @version $Revision: 1.103 $ Revision 1.89  2005/02/15 04:56:46  rsilvafi
129  * @version $Revision: 1.103 $ changed enum to enumeration to make it compatible with Jdk1.5
130  * @version $Revision: 1.103 $
131  * @version $Revision: 1.103 $ Revision 1.88  2005/02/04 20:20:53  kari
132  * @version $Revision: 1.103 $ Added initializeMessageProcessor().  Moved code getFiles() call from start()
133  * @version $Revision: 1.103 $ and moved it to here.  This ensures that the SwirlModel file data will
134  * @version $Revision: 1.103 $ not be initialized until the yancees client is fully elaborated.
135  * @version $Revision: 1.103 $ This should allow a peer to initialize without missing messages.
136  * @version $Revision: 1.103 $
137  * @version $Revision: 1.103 $ Revision 1.87  2005/01/26 21:30:00  kari
138  * @version $Revision: 1.103 $ Modified log for fileAdded call.
139  * @version $Revision: 1.103 $
140  * @version $Revision: 1.103 $ Revision 1.86  2005/01/26 20:36:58  kari
141  * @version $Revision: 1.103 $ Modified SwirlModify to detect when a file has been updated and notify listeners by calling the new fileUpdated() method in model listeners.
142  * @version $Revision: 1.103 $
143  * @version $Revision: 1.103 $ Revision 1.85  2005/01/26 18:24:52  jie
144  * @version $Revision: 1.103 $ *** empty log message ***
145  * @version $Revision: 1.103 $
146  * @version $Revision: 1.103 $ Revision 1.84  2005/01/26 17:59:41  jie
147  * @version $Revision: 1.103 $ updateurltohostmapping in swirlmodel
148  * @version $Revision: 1.103 $
149  * @version $Revision: 1.103 $ Revision 1.83  2005/01/25 07:12:42  dingx
150  * @version $Revision: 1.103 $ don't need to create filelement if the imported file is not mine
151  * @version $Revision: 1.103 $
152  * @version $Revision: 1.103 $ Revision 1.82  2005/01/25 06:29:05  jie
153  * @version $Revision: 1.103 $ *** empty log message ***
154  * @version $Revision: 1.103 $
155  * @version $Revision: 1.103 $ Revision 1.81  2005/01/25 06:27:42  jie
156  * @version $Revision: 1.103 $ saveFile2Local should use /swirl path to do propfind
157  * @version $Revision: 1.103 $
158  * @version $Revision: 1.103 $ Revision 1.80  2005/01/25 04:27:20  jie
159  * @version $Revision: 1.103 $ Two propfind in saveFile2Local
160  * @version $Revision: 1.103 $
161  * @version $Revision: 1.103 $ Revision 1.79  2005/01/25 00:44:51  jie
162  * @version $Revision: 1.103 $ *** empty log message ***
163  * @version $Revision: 1.103 $
164  * @version $Revision: 1.103 $ Revision 1.78  2005/01/23 01:21:40  jie
165  * @version $Revision: 1.103 $ Get tester name right, get deleteFile right
166  * @version $Revision: 1.103 $
167  * @version $Revision: 1.103 $ Revision 1.77  2005/01/22 23:47:21  jie
168  * @version $Revision: 1.103 $ Try not to purge on server stops, but on mouse clicks
169  * @version $Revision: 1.103 $
170  * @version $Revision: 1.103 $ Revision 1.76  2005/01/22 23:21:43  jie
171  * @version $Revision: 1.103 $ wait on delete files
172  * @version $Revision: 1.103 $
173  * @version $Revision: 1.103 $ Revision 1.75  2005/01/22 06:02:42  jie
174  * @version $Revision: 1.103 $ serialization of methods on the same URL
175  * @version $Revision: 1.103 $
176  * @version $Revision: 1.103 $ Revision 1.74  2005/01/21 23:14:32  jie
177  * @version $Revision: 1.103 $ Test get a file name
178  * @version $Revision: 1.103 $
179  * @version $Revision: 1.103 $ Revision 1.73  2005/01/21 20:27:49  dingx
180  * @version $Revision: 1.103 $ add new method executeHttpRequestMethodWithoutLog
181  * @version $Revision: 1.103 $
182  * @version $Revision: 1.103 $ Revision 1.72  2005/01/21 18:31:27  dingx
183  * @version $Revision: 1.103 $ do purge at "stop" and "start"
184  * @version $Revision: 1.103 $
185  * @version $Revision: 1.103 $ Revision 1.71  2005/01/20 21:53:39  jie
186  * @version $Revision: 1.103 $ *** empty log message ***
187  * @version $Revision: 1.103 $
188  * @version $Revision: 1.103 $ Revision 1.70  2005/01/20 18:44:49  jie
189  * @version $Revision: 1.103 $ *** empty log message ***
190  * @version $Revision: 1.103 $
191  * @version $Revision: 1.103 $ Revision 1.69  2005/01/20 09:51:06  dingx
192  * @version $Revision: 1.103 $ fix a problem so that when dot is deleted, tag will go
193  * @version $Revision: 1.103 $
194  * @version $Revision: 1.103 $ Revision 1.68  2005/01/19 23:53:15  depaula
195  * @version $Revision: 1.103 $ create dot after we get the localpath propertypatch
196  * @version $Revision: 1.103 $
197  * @version $Revision: 1.103 $ Revision 1.67  2005/01/19 22:34:59  jie
198  * @version $Revision: 1.103 $ *** empty log message ***
199  * @version $Revision: 1.103 $
200  * @version $Revision: 1.103 $ Revision 1.66  2005/01/18 22:23:40  kari
201  * @version $Revision: 1.103 $ Added code to purge the local repository at startup.
202  * @version $Revision: 1.103 $
203  * @version $Revision: 1.103 $ Revision 1.65  2005/01/18 08:53:42  jie
204  * @version $Revision: 1.103 $ *** empty log message ***
205  * @version $Revision: 1.103 $
206  * @version $Revision: 1.103 $ Revision 1.64  2005/01/16 22:51:15  jie
207  * @version $Revision: 1.103 $ *** empty log message ***
208  * @version $Revision: 1.103 $
209  * @version $Revision: 1.103 $ Revision 1.63  2005/01/15 10:38:24  jie
210  * @version $Revision: 1.103 $ *** empty log message ***
211  * @version $Revision: 1.103 $
212  * @version $Revision: 1.103 $ Revision 1.62  2005/01/07 22:35:25  kari
213  * @version $Revision: 1.103 $ Fixed bug where setDotLocation was executing propPatch methods on the wrong peer.
214  * @version $Revision: 1.103 $ Call to node.getUser() changed to node.OwnerUser()
215  * @version $Revision: 1.103 $
216  * @version $Revision: 1.103 $ Revision 1.61  2005/01/04 22:30:51  dingx
217  * @version $Revision: 1.103 $ locational consistency and persistency changes merged in
218  * @version $Revision: 1.103 $
219  * @version $Revision: 1.103 $ Revision 1.60.2.3  2004/12/28 18:40:48  kari
220  * @version $Revision: 1.103 $ Added calling backupPromotedToPersistent to all listeners on a Move method.
221  * @version $Revision: 1.103 $
222  * @version $Revision: 1.103 $ Revision 1.60.2.2  2004/12/16 20:54:35  dingx
223  * @version $Revision: 1.103 $ add new method to send sharinglevelchange and positionchange together to avoid jump when moving dots from private to sharing space
224  * @version $Revision: 1.103 $ also when startup,  locate dots according to the position properties
225  * @version $Revision: 1.103 $
226  * @version $Revision: 1.103 $ Revision 1.60.2.1  2004/12/10 23:33:00  kari
227  * @version $Revision: 1.103 $ *** empty log message ***
228  * @version $Revision: 1.103 $
229  * @version $Revision: 1.103 $ Revision 1.60  2004/12/04 00:05:18  depaula
230  * @version $Revision: 1.103 $ still working on export menu
231  * @version $Revision: 1.103 $
232  * @version $Revision: 1.103 $ Revision 1.59  2004/12/03 05:06:19  depaula
233  * @version $Revision: 1.103 $ fixing export files.
234  * @version $Revision: 1.103 $
235  * @version $Revision: 1.103 $ Revision 1.58  2004/11/30 23:41:06  bpillet
236  * @version $Revision: 1.103 $ I set my color
237  * @version $Revision: 1.103 $
238  * @version $Revision: 1.103 $ Revision 1.57  2004/11/30 23:34:58  bpillet
239  * @version $Revision: 1.103 $ *** empty log message ***
240  * @version $Revision: 1.103 $
241  * @version $Revision: 1.103 $ Revision 1.56  2004/11/30 23:28:07  bpillet
242  * @version $Revision: 1.103 $ add a proppatch method that keeps track of properties as they get set
243  * @version $Revision: 1.103 $ send properties to model with yancees from proppatch
244  * @version $Revision: 1.103 $
245  * @version $Revision: 1.103 $ Revision 1.55  2004/11/30 23:20:53  depaula
246  * @version $Revision: 1.103 $ minor fixes
247  * @version $Revision: 1.103 $
248  * @version $Revision: 1.103 $ Revision 1.54  2004/11/30 23:16:26  depaula
249  * @version $Revision: 1.103 $ Export fixed - no file to export message alert
250  * @version $Revision: 1.103 $
251  * @version $Revision: 1.103 $ Revision 1.53  2004/11/30 22:37:33  bpillet
252  * @version $Revision: 1.103 $ added message to propertiesChanged callback in ModelListener
253  * @version $Revision: 1.103 $
254  * @version $Revision: 1.103 $ Revision 1.52  2004/11/30 22:28:23  bpillet
255  * @version $Revision: 1.103 $ consistency1 merged into head branch
256  * @version $Revision: 1.103 $
257  * @version $Revision: 1.103 $ Revision 1.48.2.2  2004/11/30 22:14:01  bpillet
258  * @version $Revision: 1.103 $ merged with head
259  * @version $Revision: 1.103 $
260  * @version $Revision: 1.103 $ Revision 1.51  2004/11/21 07:39:18  jie
261  * @version $Revision: 1.103 $ No undo put
262  * @version $Revision: 1.103 $
263  * @version $Revision: 1.103 $ Revision 1.50  2004/11/19 19:21:52  depaula
264  * @version $Revision: 1.103 $ I worked on the export part, so I had to fix a couple little things elsewhere
265  * @version $Revision: 1.103 $ Revision 1.49 2004/11/16
266  *          07:22:39 jie use ProgressMonitor to cancel
267  *
268  */
269 public class SwirlModel implements Startable, PeerManagerListener, Model {
270 	/*** TODO */
271 	public final static String SLIDE_ROOT = "/slide";
272 
273 	private static final int OK = 200;
274 	private static final int CREATED = 201;
275 
276 	/*** TODO */
277 	protected Log log = LogFactory.getLog(this.getClass());
278 
279 	/*** TODO */
280 	private HashMap pathMap = new HashMap();
281 
282 	/*** TODO */
283 	private PeerManager peerManager;
284 
285 	/*** TODO */
286 	private Vector viewListeners = new Vector();
287 	// private List viewListeners = Collections.synchronizedList(new ArrayList());
288 
289 	private SecurityManager securityManager;
290 
291 	private List updateList;
292 	private Object updateListMutex;
293 
294 	/***
295 	 * Creates a new SwirlModel object.
296 	 *
297 	 * @param peerManager
298 	 *            TODO
299 	 */
300 	public SwirlModel(PeerManager peerManager, SecurityManager secMan,
301 			List _updateList, Object _updateListMutex) {
302 		if(log.isDebugEnabled())
303         {
304 			log.debug("SwirlModel()");
305         }
306 		this.peerManager = peerManager;
307 		this.peerManager.addPeerManagerListener(this);
308 		if(log.isDebugEnabled())
309         {
310 			log.debug("updateList: " + _updateList);
311         }
312 		this.updateList = _updateList;
313 		securityManager = secMan;
314 		updateListMutex = _updateListMutex;
315 	}
316 
317 	/***
318 	 * TODO
319 	 *
320 	 * @param peerId
321 	 *            TODO
322 	 *
323 	 * @return TODO
324 	 */
325 	public String getCurrentPath(String peerId) {
326 		if(log.isDebugEnabled())
327         {
328 			log.debug("getCurrentPath(" + peerId + ")");
329         }
330 		Object path = pathMap.get(peerId);
331 
332 		if (path == null) {
333 			path = SLIDE_ROOT;
334 			pathMap.put(peerId, SLIDE_ROOT);
335 		}
336 
337 		if (log.isDebugEnabled()) {
338 			log.debug("returning path: " + path + "  for peerId: " + peerId);
339 		}
340 
341 		return (String) path;
342 	}
343 
344 	/***
345 	 * TODO
346 	 *
347 	 * @return TODO
348 	 */
349 	public Map getCurrentPath() {
350 		return pathMap;
351 	}
352 
353 	/***
354 	 * TODO
355 	 *
356 	 * @return TODO
357 	 */
358 	public FileElement[] getFiles() {
359 		if(log.isDebugEnabled())
360         {
361 			log.debug("getFiles()");
362         }
363 		Vector files = new Vector();
364 
365 		Peer[] peers = getPeers();
366 		for (int i = 0; i < peers.length; ++i) {
367 			Peer peer = peers[i];
368 
369 			try {
370 				if (log.isDebugEnabled()) {
371 					log.debug("get files for " + peer.getUniqueID());
372 				}
373 
374 				FileElement[] peerFiles = getFiles(peer.getUniqueID());
375 				for (int j = 0; j < peerFiles.length; ++j) {
376 					files.add(peerFiles[j]);
377 				}
378 			} catch (Exception e) {
379 				log.error(e, e);
380 			}
381 		}
382 
383 		return (FileElement[]) files.toArray(new FileElement[] {});
384 	}
385 
386 	/*** maintains a list of files for a specific peer */
387 	//private HashMap cachedFiles = new HashMap();
388 	/***
389 	 * TODO
390 	 *
391 	 * @param peerId
392 	 *            TODO
393 	 * @param path
394 	 *            TODO
395 	 *
396 	 * @return TODO
397 	 */
398 	public FileElement[] getFiles(String peerId, String slidePath) {
399 		if(log.isDebugEnabled())
400         {
401 			log.debug("getFiles(" + peerId + ", " + slidePath + ")");
402         }
403 
404 		Peer peer = peerManager.getPeer(peerId);
405 		if (peer == null)
406 		    return new FileElement[]{};
407 
408 		//Vector files = (Vector)cachedFiles.get(peer);
409 
410 		//        if(files == null)
411 		//        {
412 		if(log.isDebugEnabled())
413         {
414 			log.debug("files for peer not in cache...");
415         }
416 		Vector files = new Vector();
417 		//cachedFiles.put(peer, files);
418 
419 		try {
420 			PropFindMethod propFind = new PropFindMethod(slidePath,
421 					DepthSupport.DEPTH_INFINITY);
422 			if(log.isDebugEnabled())
423 	        {
424 				log.debug("propFind: " + propFind);
425 	        }
426 			int status = peer.executeHttpRequestMethod(propFind);
427 			if(log.isDebugEnabled())
428 	        {
429 				log.debug("status: " + status);
430 	        }
431 
432 			Enumeration enumeration = propFind.getResponses();
433 			while (enumeration.hasMoreElements()) {
434 				ResponseEntity item = (ResponseEntity) enumeration.nextElement();
435 				if(log.isDebugEnabled())
436 		        {
437 					log.debug("item: " + item + " href: " + item.getHref());
438 		        }
439 
440 				FileElement fe = new FileElement(peer, item);
441 				if(log.isDebugEnabled())
442 		        {
443 					log.debug("filelement is: " + fe);
444 		        }
445 
446 				if ((!peerId.equals(PeerManager.getLocalUserID()) && fe
447 						.getNumberDegree() == 0)
448 						|| fe.isDir()) {
449 					if(log.isDebugEnabled())
450 			        {
451 						log.debug("shouldn't include fe: " + fe);
452 			        }
453 				} else {
454 					if(log.isDebugEnabled())
455 			        {
456 						log.debug("adding fe: " + fe);
457 			        }
458 					files.add(fe);
459 				}
460 			}
461 			if(log.isDebugEnabled())
462 	        {
463 				log.debug("releasing propFind");
464 	        }
465 			propFind.releaseConnection();
466 			propFind.recycle();
467 		} catch (IOException e) {
468 			log.error(e, e);
469 		}
470 		//        }
471 		//        else
472 		//        {
473 		//        	log.debug("the files were cached as : " + files);
474 		//        }
475 
476 		Vector retFiles = new Vector();
477 		for (Iterator it = files.iterator(); it.hasNext();) {
478 			FileElement fe = (FileElement) it.next();
479 			if(log.isDebugEnabled())
480 	        {
481 				log.debug("checking if " + fe.getLocalPath() + " starts with "
482 						+ slidePath);
483 	        }
484 			if (fe.getKey().startsWith(slidePath))
485 				retFiles.add(fe);
486 		}
487 		if(log.isDebugEnabled())
488         {
489 			log.debug("Done get all the files: " + retFiles);
490         }
491 
492 		return (FileElement[]) retFiles.toArray(new FileElement[] {});
493 	}
494 
495 	/***
496 	 * TODO
497 	 *
498 	 * @param peerId
499 	 *            TODO
500 	 *
501 	 * @return TODO
502 	 */
503 	public FileElement[] getFiles(String peerId) {
504 		if(log.isDebugEnabled())
505         {
506 			log.debug("getFiles(" + peerId + ")");
507         }
508 		return getFiles(peerId, "/slide");
509 	}
510 
511 	/***
512 	 * TODO
513 	 *
514 	 * @param peerId
515 	 *            TODO
516 	 *
517 	 * @return TODO
518 	 */
519 	public String getParentPath(String peerId) {
520 		if(log.isDebugEnabled())
521         {
522 			log.debug("getParentPath(" + peerId + ")");
523         }
524 		String currentPath = (String) pathMap.get(peerId);
525 
526 		if (log.isDebugEnabled()) {
527 			log.debug("the current path: " + currentPath + "  for peerId: "
528 					+ peerId);
529 		}
530 
531 		String parentpath = currentPath;
532 
533 		try {
534 			HttpURL newurl = new HttpURL(getPeer(peerId).getHttpURL(),
535 					currentPath);
536 
537 			parentpath = SLIDE_ROOT + newurl.getAboveHierPath();
538 		} catch (IOException e) {
539 			log.error(e, e);
540 		}
541 
542 		if (log.isDebugEnabled()) {
543 			log.debug("returning parent path: " + parentpath + "  for peerId: "
544 					+ peerId);
545 		}
546 
547 		return parentpath;
548 	}
549 
550 	/***
551 	 * TODO
552 	 *
553 	 * @param peerId
554 	 *            TODO
555 	 * @param path
556 	 *            TODO
557 	 */
558 	public void setPath(String peerId, String path) {
559 		if(log.isDebugEnabled())
560         {
561 			log.debug("setPath(" + peerId + ", " + path + ")");
562         }
563 
564 		pathMap.put(peerId, path);
565 
566 		FileElement[] files = getFiles(peerId, path);
567 
568 		synchronized(viewListeners) {
569 		for (Iterator it = viewListeners.iterator(); it.hasNext();) {
570 			ModelListener listener = (ModelListener) it.next();
571 
572 			listener.replaceFiles(peerId, files);
573 		}
574 		}
575 	}
576 
577 	/***
578 	 * TODO
579 	 *
580 	 * @param peerID
581 	 *            TODO
582 	 *
583 	 * @return TODO
584 	 */
585 	public Peer getPeer(String peerID) {
586 		if(log.isDebugEnabled())
587         {
588 			log.debug("getPeer(" + peerID + ")");
589         }
590 		return peerManager.getPeer(peerID);
591 	}
592 
593 	/***
594 	 * TODO
595 	 *
596 	 * @return TODO
597 	 */
598 	public int getPeerNumber() {
599 		if(log.isDebugEnabled())
600         {
601 			log.debug("getPeerNumber()");
602         }
603 		return peerManager.size();
604 	}
605 
606 	/***
607 	 * TODO
608 	 *
609 	 * @return TODO
610 	 */
611 	public Peer[] getPeers() {
612 		if(log.isDebugEnabled())
613         {
614 			log.debug("getPeers()");
615         }
616 		return (Peer[]) peerManager.getPeers().values().toArray(new Peer[] {});
617 	}
618 
619 	/***
620 	 * TODO
621 	 *
622 	 * @param fe
623 	 *            TODO
624 	 * @param sharingDegree
625 	 *            TODO
626 	 */
627 	public void setSharingDegree(final FileElement fe,
628 			final SharingLevel sharingDegree) {
629 		fe.setShareDegree(sharingDegree);
630 		setSharingDegree(fe.getKey(), sharingDegree);
631 	}
632 
633 	/***
634 	 * TODO
635 	 *
636 	 * @param fe
637 	 *            TODO
638 	 * @param sharingDegree
639 	 *            TODO
640 	 */
641 	public void setSharingDegree(final String path,
642 			final SharingLevel sharingDegree) {
643 		if(log.isDebugEnabled())
644         {
645 			log.debug("setSharingDegree(" + path + ", " + sharingDegree + ")");
646         }
647 		//final String newPath = path.substring("/slide/".length());
648 		//        new Thread()
649 		//            {
650 		//                public void run()
651 		//                {
652 		if(log.isDebugEnabled())
653         {
654 			log.debug("setSharingDegree is called");
655         }
656 		securityManager.setSecurityLevel(path, SwirlSecurity.OTHERS,
657 				sharingDegree);
658 		Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
659 		try {
660 			if(log.isDebugEnabled())
661 	        {
662 				log.debug("peer: " + peer + " \nnewPath:" + path);
663 	        }
664 			PropPatchMethod propPatch = new OurPropPatchMethod(path);
665 			propPatch.addPropertyToSet(SharingLevel.SHARING_PROPERTY_NAME,
666 					sharingDegree.value + "");
667 
668 			int status = peer.executeHttpRequestMethod(propPatch);
669 			if(log.isDebugEnabled())
670 	        {
671 				log.debug("status: " + status);
672 	        }
673 			propPatch.releaseConnection();
674 			propPatch.recycle();
675 		} catch (IOException e) {
676 			log.error(e, e);
677 		}
678 		//                }
679 		//            }.start();
680 	}
681 
682 	/***
683 	 * TODO
684 	 *
685 	 * @param peerId
686 	 *            TODO
687 	 *
688 	 * @return TODO
689 	 */
690 	public Color getUserColor(String peerId) {
691 		if(log.isDebugEnabled())
692         {
693 			log.debug("getUserColor(" + peerId + ")");
694         }
695 		return getPeer(peerId).getColor();
696 	}
697 
698 	/***
699 	 * TODO
700 	 *
701 	 * @param listener
702 	 *            TODO
703 	 */
704 	public void addModelChangeListener(ModelListener listener) {
705 		if(log.isDebugEnabled())
706         {
707 			log.debug("addModelChangeListener(" + listener + ")");
708         }
709 		synchronized(viewListeners) {
710 		viewListeners.add(listener);
711 		}
712 	}
713 
714 	/***
715 	 * TODO
716 	 *
717 	 * @param file
718 	 *            TODO
719 	 */
720 	public void create(FileElement file) {
721 		if(log.isDebugEnabled())
722         {
723 			log.debug("create(" + file + ")");
724         }
725 	}
726 
727 	public void delete(final FileElement fe) {
728 		if(log.isDebugEnabled())
729         {
730 			log.debug("delete is called");
731         }
732 
733 		new Thread() {
734 			public void run() {
735 				String peerId = fe.getOwnerKey();
736 				Peer peer = peerManager.getPeer(peerId);
737 
738 				try {
739 					if (log.isDebugEnabled()) {
740 						log.debug("the file to be deleted " + fe.getKey());
741 					}
742 
743 					DeleteMethod delete = new DeleteMethod(peer.getHttpURL()
744 							.getURI()
745 							+ NetUtils.encode(fe.getName()));
746 					log.debug("the url for deletemethod is "
747 							+ peer.getHttpURL().getURI());
748 					int status = peer.executeHttpRequestMethod(delete);
749 					log.debug("status: " + status);
750 					delete.releaseConnection();
751 					delete.recycle();
752 
753 				} catch (IOException e) {
754 					log.error(e, e);
755 				}
756 				synchronized(fe) {
757 				    fe.notifyAll();
758 				}
759 			}
760 		}.start();
761 		synchronized(fe) {
762 		    try {
763                 fe.wait();
764             } catch (InterruptedException e) {
765             }
766 		}
767 	}
768 
769 	/***
770 	 *
771 	 * @param doc
772 	 */
773 	public void exportFiles(Document doc) {
774 
775 		if (this.isFilesChanged()) {
776 			ExportFileDialogBox exportFile = new ExportFileDialogBox("Advanced Export File", true, this, peerManager, doc, updateList, updateListMutex);
777 		//exportFile.show();
778 			exportFile.setVisible(true);
779 		} else {
780 			JOptionPane.showMessageDialog(null, "No file has been changed. No need for saving back to your computer", "No File to Save", JOptionPane.INFORMATION_MESSAGE);
781 		}
782 		return;
783 	}
784 
785 
786 	public void exportFile(FileElement fileelement) {
787 		if(log.isDebugEnabled())
788         {
789 			log.debug("exportFiles is called");
790         }
791 		Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
792 		String source;
793 		try {
794 			source = peer.getHttpURL().getURI() + NetUtils.encode(fileelement.getName());
795 			if(log.isDebugEnabled())
796 	        {
797 				//log.debug("file source: " + source);
798 				log.debug("In exportFile: fileelement name is " + fileelement.getName());
799 				log.debug("In exportFile: fileelement localpath is is " + fileelement.getLocalPath());
800 	        }
801 			String localPath = fileelement.getLocalPath();
802 			if (localPath == null) {
803 			    localPath = (String)JOptionPane.showInputDialog( "Sorry I don't have a path..., please give me one");
804 			}
805 			saveFile2Local(source, new File(localPath));
806 			//log.debug("exportFile: removing from updateList: " + fileelement.getName() + " locatpath: " + fileelement.getLocalPath());
807 			String listKey = fileelement.getKey().substring(fileelement.getKey().lastIndexOf(SwirlModel.SLIDE_ROOT)+ SwirlModel.SLIDE_ROOT.length());
808 			//log.debug("exportFile: key: " + fileelement.getKey() +" listKey: " + listKey);
809 
810 			synchronized(updateListMutex) {
811 			    updateList.remove(listKey);
812 			}
813 		} catch (URIException e1) {
814 			log.error(e1);
815 		}
816 
817 	}
818 
819 	/***
820 	 * TODO
821 	 *
822 	 * @param peerId
823 	 *            TODO
824 	 */
825 	public void gotoParentPath(String peerId) {
826 		if(log.isDebugEnabled())
827         {
828 			log.debug("gotoParentPath(" + peerId + ")");
829         }
830 		String path = getParentPath(peerId);
831 
832 		setPath(peerId, path);
833 	}
834 	
835 	/***
836 	 * TODO
837 	 *
838 	 * @param file
839 	 *            TODO
840 	 */
841 	public void importFiles(final Vector files) {
842 		importFiles (files, null, true);
843 	}
844 	
845 	/***
846 	 * TODO
847 	 *
848 	 * @param file
849 	 *            TODO
850 	 */
851 	public void importFiles(final Vector files, final Coordinate coord, final boolean inPrivateSpace) {
852 		final int thresholdProgressBar = 0;
853 		final boolean undoPut = false;
854 
855 		// upload FILE
856 		new Thread() {
857 			public void run() {
858 				boolean canceled = false;
859 				List filesPut = new ArrayList();
860 				ProgressMonitor jpm = null;
861 				if (files.size() > thresholdProgressBar) {
862 					jpm = new ProgressMonitor(null, "Importing " + files.size()
863 							+ " Files...", "", 0, files.size());
864 					jpm.setMillisToDecideToPopup(0);
865 					jpm.setMillisToPopup(0);
866 					jpm.setNote("Begin Importing...");
867 				}
868 				int progress = 0;
869 				for (Iterator it = files.iterator(); it.hasNext() && !canceled;) {
870 					File file = (File) it.next();
871 					log.debug("importFiles(" + file.getName() + ")");
872 					Peer peer = peerManager.getPeer(PeerManager
873 							.getLocalUserID());
874 					FileInputStream stream;
875 
876 					try {
877 						progress++;
878 						if (jpm != null) {
879 							if (jpm.isCanceled()) {
880 								canceled = true;
881 							} else {
882 								jpm.setProgress(progress);
883 								jpm.setNote("Importing " + file.getName()
884 										+ "...");
885 							}
886 						}
887 
888 						stream = new FileInputStream(file);
889 						PutMethod put = new PutMethod(peer.getHttpURL()
890 								.getURI()
891 								+ NetUtils.encode(file.getName()));
892 						log.debug("the url for putmethod is "
893 								+ peer.getHttpURL().getURI());
894 						put.setRequestBody(stream);
895 						int status = peer.executeHttpRequestMethodLogPrivate(put);
896 						log.debug("status: " + status);
897 						put.releaseConnection();
898 						put.recycle();
899 
900 						//set local path
901 						log.debug("Try to set the local path");
902 						PropPatchMethod propPatch = new OurPropPatchMethod(peer.getPath()
903 								+ NetUtils.encode(file.getName()));
904 
905 						propPatch.addPropertyToSet("localPath", String
906 								.valueOf(file.getAbsolutePath()));
907 
908 						if (coord == null) {
909 							status = peer.executeHttpRequestMethodLogPrivate(propPatch);
910 						} else {
911 							if (inPrivateSpace) {
912 								status = peer.executeHttpRequestMethodLogPrivate(propPatch, coord);
913 							} else {
914 								status = peer.executeHttpRequestMethod(propPatch, coord);
915 							}
916 							// patch coordinates
917 							propPatch = new OurPropPatchMethod(peer.getPath()+ NetUtils.encode(file.getName()));
918 							double dotRadius = coord.getRadius();
919 							double relativeAngle = coord.getRelativeAngle();
920 							propPatch.addPropertyToSet(DotElement.RADIUS, String
921 									.valueOf(dotRadius));
922 							propPatch.addPropertyToSet(DotElement.RELATIVE_ANGLE, String
923 									.valueOf(relativeAngle));
924 							status = peer.executeHttpRequestMethodWithoutLog(propPatch);
925 							setSharingDegree("/slide/"+NetUtils.encode(file.getName()), 
926 									new SharingLevel(Util.getSharingDegree(dotRadius)));
927 						}
928 						log.debug("status: " + status);
929 						propPatch.releaseConnection();
930 						propPatch.recycle();
931 
932 						filesPut.add(peer.getHttpURL().getURI()
933 								+ file.getName());
934 					} catch (IOException e) {
935 						log.error(e, e);
936 					}
937 				}
938 
939 				if (jpm != null)
940 					jpm.close();
941 				if (canceled && undoPut) {
942 					try {
943 						// we are canceled, remove all files in filesPut
944 						Peer peer = peerManager.getPeer(PeerManager
945 								.getLocalUserID());
946 						for (Iterator i = filesPut.iterator(); i.hasNext();) {
947 							String path = (String) i.next();
948 							DeleteMethod dm = new DeleteMethod(path);
949 							int status = peer.executeHttpRequestMethodLogPrivate(dm);
950 							log.debug("status: " + status);
951 							dm.releaseConnection();
952 							dm.recycle();
953 						}
954 					} catch (IOException e) {
955 						log.error(e, e);
956 					}
957 				}
958 			}
959 		}.start();
960 	}
961 
962 	/***
963 	 * TODO
964 	 *
965 	 * @param file
966 	 *            TODO
967 	 */
968 	public void launch(FileElement file) {
969 		if(log.isDebugEnabled())
970         {
971 			log.debug("launch(" + file + ")");
972         }
973 		String filepath = file.getWebdavPathforFile();
974 
975 		try {
976 			Runtime.getRuntime().exec(
977 					"rundll32 SHELL32.DLL,ShellExec_RunDLL " + filepath);
978 		} catch (IOException e) {
979 			log.error(e, e);
980 		}
981 	}
982 
983 	/***
984 	 * TODO
985 	 *
986 	 * @param peer
987 	 *            TODO
988 	 */
989 	public void peerJoined(Peer peer) {
990 		if(log.isDebugEnabled())
991         {
992 			log.debug("peerJoined(" + peer + ")");
993         }
994 		synchronized(viewListeners) {
995 		for (Iterator it = viewListeners.iterator(); it.hasNext();) {
996 			ModelListener listener = (ModelListener) it.next();
997 
998 			listener.userJoined(peer);
999 		}
1000 		}
1001 	}
1002 
1003 	/***
1004 	 * TODO
1005 	 *
1006 	 * @param peer
1007 	 *            TODO
1008 	 */
1009 	public void peerLeft(Peer peer) {
1010 		if(log.isDebugEnabled())
1011         {
1012 			log.debug("peerLeft(" + peer + ")");
1013         }
1014 		synchronized(viewListeners) {
1015 		for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1016 			ModelListener listener = (ModelListener) it.next();
1017 
1018 			listener.userLeft(peer.getUniqueID());
1019 		}
1020 		}
1021 	}
1022 
1023 	/***
1024 	 * TODO
1025 	 *
1026 	 * @param msg
1027 	 *            TODO
1028 	 */
1029 	public void processMessage(final Map msg) {
1030 		if(log.isDebugEnabled())
1031         {
1032 			log.debug("processMessage(" + msg + ")");
1033         }
1034 
1035 		final String command = (String) msg.get("WEBDAV_COMMAND");
1036 		final String path = (String) msg.get("WEBDAV_PATH");
1037 		final String peerHost = (String) msg.get("WEBDAV_HOST");
1038 		final String peerClient = (String) msg.get("WEBDAV_CLIENT");
1039 		if(log.isDebugEnabled())
1040         {
1041 			log.debug("msg.path: " + path);
1042         }
1043 		final String opeerId = peerHost + ":" + App.PORT;
1044 		final String upeerId = peerClient + ":" + App.PORT;
1045 		final Peer opeer = peerManager.getPeer(opeerId);
1046 		final Peer upeer = peerManager.getPeer(upeerId);
1047 
1048 		if(log.isDebugEnabled())
1049         {
1050 			log.debug("owner's peerid is " + opeerId);
1051 			log.debug("user's peerid is " + upeerId);
1052         }
1053 		if (path.equals("/slide/")) {
1054 			return;
1055 		}
1056 
1057 		final Map msgClone = new HashMap(msg);
1058 		new Thread() {
1059 			public void run() {
1060 				if (command.equals("PUT"))// || command.equals("PROPFIND"))
1061 				{
1062 					// Check status to determine if this is creating a new file or updating an existing one
1063 					int status = Integer.parseInt((String)msgClone.get("WEBDAV_RESPONSE_STATUS"));
1064 					// Check status and make sure that is OK (200), and not CREATED (201)
1065 					if (status != CREATED) {
1066 						FileElement fe = new FileElement(opeer, upeer, path);
1067 						//if it's other files, we are not supposed to announce
1068 						// their private files
1069 						if (!opeerId.equals(PeerManager.getLocalUserID())
1070 								&& fe.getShareDegree().getValue() == 0) {
1071 							if(log.isDebugEnabled())
1072 					        {
1073 								log.debug("Got a private file is " + opeerId);
1074 					        }
1075 							return;
1076 						}
1077 						for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1078 							ModelListener listener = (ModelListener) it.next();
1079 							if(log.isDebugEnabled())
1080 					        {
1081 								log.debug("calling fileUpdated on " + listener + " for fe: " + fe);
1082 					        }
1083 								listener.fileUpdated(fe);
1084 						}
1085 					}
1086 					//we won't process "put" on a newly created file until we
1087 					//get the localPath propatch message
1088 
1089 				} else if (command.equals("PROPPATCH")) {
1090 					synchronized(viewListeners) {
1091 					for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1092 						ModelListener listener = (ModelListener) it.next();
1093 						FileElement fe;
1094 		            	if (msgClone.containsKey("SET_sharingDegree"))
1095 		            	{
1096 		            		int sharingDegree = Integer.parseInt((String)msgClone.get("SET_sharingDegree"));
1097 							fe = new FileElement(opeer, upeer, path, sharingDegree);
1098 							listener.propertiesChanged(fe, msgClone);
1099 							listener.flashIt(fe, Util.getStringColor(upeer
1100 									.getColor()));
1101 		            	}else if (msgClone.containsKey("SET_localPath"))
1102 		            	{
1103 		            		//we will always set localpath when we import files
1104 		            		// and it always comes after the put command
1105 		            		// we need to have localpath to create new filelement
1106 		            		//if it's other files, we are not supposed to show
1107 							// their private files
1108 		            		//if (opeerId.equals(PeerManager.getLocalUserID())){
1109 		            			fe = new FileElement(opeer, upeer, path);
1110 		            			updateURLToHostMapping(fe);
1111 		            			if(log.isDebugEnabled())
1112 		            	        {
1113 		            				log.debug("Got a private file is " + opeerId);
1114 		            				log.debug("calling fileAdded on " + listener + " for fe: " + fe);
1115 		            	        }
1116 								// NOTE: we don't notify fileAdded until the PROPATCH (which always follows
1117 								// the PUT on a new file to the system, is completed.  This is because
1118 								// we cannot construct a file element for it until the properties have
1119 								// been set
1120 		            			Coordinate coord = null;
1121 		            			if (msgClone.containsKey("SET_radius") && 
1122 		            				msgClone.containsKey("SET_relativeAngle")) {
1123 		            				double radius = Double.parseDouble((String)msgClone.get("SET_radius"));
1124 		            				double relativeAngle = Double.parseDouble((String)msgClone.get("SET_relativeAngle"));
1125 		            		    	int level = Util.getSharingDegree(radius);
1126 		            		    	fe.setShareDegree(new SharingLevel(level));
1127 		            		    	fe.setRadius(radius);
1128 		            		    	fe.setReangle(relativeAngle);
1129 		            			}
1130 		            			listener.fileAdded(fe);
1131 		           
1132 			            		
1133 			            		listener.flashIt(fe, Util.getStringColor(upeer
1134 										.getColor()));
1135 		            	}
1136 		            	else
1137 		            	{
1138 		            		fe = new FileElement(opeer, upeer, path);
1139 		            		listener.propertiesChanged(fe, msgClone);
1140 							listener.flashIt(fe, Util.getStringColor(upeer
1141 									.getColor()));
1142 
1143 		            	}
1144 		            	if(log.isDebugEnabled())
1145 		    	        {
1146 		            		log.debug("tell interface done");
1147 		    	        }
1148 					}
1149 					}
1150 
1151 					if(log.isDebugEnabled())
1152 			        {
1153 						log.debug("PROPPATCH done");
1154 			        }
1155 				} else if (command.equals("DELETE")) {
1156 					//cachedFiles.remove(peer);
1157 					FileElement fe = new FileElement(opeer, upeer, path);
1158 
1159 					synchronized(viewListeners) {
1160 					for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1161 						ModelListener listener = (ModelListener) it.next();
1162 						listener.flashIt(fe, Util.getStringColor(upeer
1163 								.getColor()));
1164 						listener.fileDeleted(fe);
1165 					}
1166 					}
1167 				} else if (command.equals("GET"))//someone is accessing this
1168 												 // file
1169 				{
1170 					FileElement fe = new FileElement(opeer, upeer, path);
1171 
1172 					synchronized(viewListeners) {
1173 					for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1174 						ModelListener listener = (ModelListener) it.next();
1175 						listener.flashIt(fe, Util.getStringColor(upeer
1176 								.getColor()));
1177 					}
1178 					}
1179 				} else if (command.equals("MOVE")) // a hidden backup is being promoted to persistent master
1180 				{
1181 					String dest = (String) msg.get("WEBDAV_DEST");
1182 					FileElement fe = new FileElement(opeer, upeer, dest, SharingLevel.SHARING_LEVEL);
1183 
1184 					synchronized(viewListeners) {
1185 					for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1186 						ModelListener listener = (ModelListener) it.next();
1187 						listener.backupPromotedToPersistent(fe);
1188 					}
1189 					}
1190 				}
1191 
1192 			}
1193 		}.start();
1194 
1195 		if(log.isDebugEnabled())
1196         {
1197 			log.debug("processMessage done ");
1198         }
1199 	}
1200 
1201 	public void updateURLToHostMapping(FileElement file) {
1202 		Peer me = peerManager.getPeer(PeerManager.getLocalUserID());
1203 		String path = file.getKey();
1204 
1205 		//execute a propfind to try to force the host/file mapping to update in the proxy
1206 		int			retry = 1;
1207 		try {
1208 		    for (int i = 0; i<retry; i++) {
1209 				PropFindMethod propFind = new PropFindMethod("/swirl/", 1);
1210 		        int status = me.executeHttpRequestMethodWithoutLog(propFind);
1211 		        if(log.isDebugEnabled())
1212 		        {
1213 		        	log.debug("Second Propfind: " + Integer.toString(status));
1214 		        }
1215 		        if (status == 200 || status == 207)
1216 		            break;
1217 		    }
1218 		} catch (IOException e) {
1219 			e.printStackTrace();
1220 		}
1221 		String swirlPath = path.replaceFirst("slide", "swirl");
1222 		try {
1223 		    for (int i = 0; i<retry; i++) {
1224 				PropFindMethod propFind2 = new PropFindMethod(swirlPath, 1);
1225 				int status = me.executeHttpRequestMethodWithoutLog(propFind2);
1226 				if(log.isDebugEnabled())
1227 		        {
1228 					log.debug("Second Propfind: " + Integer.toString(status));
1229 		        }
1230 		        if (status == 200 || status == 207)
1231 		            break;
1232 		    }
1233 		} catch (IOException e) {
1234 			e.printStackTrace();
1235 		}
1236 	}
1237 
1238 	/***
1239 	 * TODO
1240 	 *
1241 	 * @param listener
1242 	 *            TODO
1243 	 */
1244 	public void removeModelChangeListener(ModelListener listener) {
1245 		if(log.isDebugEnabled())
1246         {
1247 			log.debug("removeModelChangeListener(" + listener + ")");
1248         }
1249 		synchronized(viewListeners) {
1250 		viewListeners.remove(listener);
1251 		}
1252 	}
1253 
1254 	/***
1255 	 * TODO
1256 	 */
1257 	public void resetLocalSharingDegree() {
1258 		if(log.isDebugEnabled())
1259         {
1260 			log.debug("resetLocalSharingDegree()");
1261         }
1262 
1263 		String localPeer = PeerManager.getLocalUserID();
1264 
1265 		FileElement[] localFiles = getFiles(localPeer);
1266 
1267 		for (int i = 0; i < localFiles.length; ++i)
1268 			if(log.isDebugEnabled())
1269 	        {
1270 				log.debug("localFiles[" + i + "]: " + localFiles[i].getLocalPath()
1271 						+ " level: " + localFiles[i].getNumberDegree());
1272 	        }
1273 
1274 		SharingLevel hidden = new SharingLevel();
1275 
1276 		for (int i = 0; i < localFiles.length; i++) {
1277 			setSharingDegree(localFiles[i], hidden);
1278 		}
1279 	}
1280 
1281 	/***
1282 	 * purgeLocalRepository deletes all resources in the local pear
1283 	 *
1284 	 */
1285 	public void purgeLocalRepository() {
1286 		String localPeerId = PeerManager.getLocalUserID();
1287 		Peer localPeer = peerManager.getPeer(PeerManager.getLocalUserID());
1288 		FileElement[] localFiles = getFiles(localPeerId);
1289 		for (int i = 0; i < localFiles.length; ++i) {
1290 			if(log.isDebugEnabled())
1291 	        {
1292 				log.debug("purging file from repository: " +localFiles[i].getName());
1293 	        }
1294 			try {
1295 				DeleteMethod delete = new DeleteMethod(
1296 					localPeer.getHttpURL().getURI()+ NetUtils.encode(localFiles[i].getName()));
1297 				int status = localPeer.executeHttpRequestMethodWithoutLog(delete);
1298 				if(log.isDebugEnabled())
1299 		        {
1300 					log.debug("status: " + status);
1301 		        }
1302 				delete.releaseConnection();
1303 				delete.recycle();
1304 			} catch (IOException e) {
1305 				log.error(e, e);
1306 			}
1307 		}
1308 	}
1309 
1310 	/* (non-Javadoc)
1311 	 * @see swirl.workspace.messages.MessageProcessor#initialMessageProcessor()
1312 	 */
1313 	public void initializeMessageProcessor() {
1314 		// defer initializing the repository data until we are certain that the yancees message
1315 		// receiver is fully initialized.
1316 		if(log.isDebugEnabled())
1317         {
1318 			log.debug("initizlizing");
1319         }
1320 		FileElement[] files = getFiles();
1321 
1322 		if(log.isDebugEnabled())
1323         {
1324 			log.debug("The number of files is:" + files.length);
1325         }
1326 
1327 		synchronized(viewListeners) {
1328 		for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1329 			ModelListener listener = (ModelListener) it.next();
1330 			if(log.isDebugEnabled())
1331 	        {
1332 				log.debug("send files to listener: " + listener);
1333 	        }
1334 			listener.filesAdded(files);
1335 		}
1336 		}
1337 		if(log.isDebugEnabled())
1338         {
1339 			log.debug("initizlized");
1340         }
1341 
1342 		if (System.getProperty("os.name").startsWith("Mac")) {
1343 			log.info("Mount webdav");
1344 		    try {
1345 				String[] mountcmd = {"mount", "-t", "webdav", "http://localhost:9876/swirl", "/Volumes/swirl"};
1346                 //Runtime.getRuntime().exec(mountcmd);
1347 				Runtime.getRuntime().exec("");
1348                 String m = "";
1349 			    for (int i=0; i<mountcmd.length; i++)
1350 			    	m += (mountcmd[i] + " ");
1351 			    log.info(m);
1352             } catch (IOException e) {
1353                 // TODO Auto-generated catch block
1354                 e.printStackTrace();
1355             }
1356 		}
1357 	}
1358 
1359 	/***
1360 	 * TODO
1361 	 */
1362 	public void start() {
1363 		if(log.isDebugEnabled())
1364         {
1365 			log.debug("starting");
1366         }
1367 
1368 		Peer[] peers = getPeers();
1369 
1370 		int userNum = peers.length;
1371 
1372 		if (log.isDebugEnabled()) {
1373 			log.debug("The number of users is:" + userNum);
1374 		}
1375 
1376 		for (int i = 0; i < userNum; i++) {
1377 			synchronized(viewListeners) {
1378 			for (Iterator it = viewListeners.iterator(); it.hasNext();) {
1379 				ModelListener listener = (ModelListener) it.next();
1380 
1381 				listener.userJoined(peers[i]);
1382 			}
1383 			}
1384 		}
1385 
1386 		//when server just startup, the sharing degree is 0
1387 		//this.resetLocalSharingDegree();
1388 		//when server starts up, purge repository in case there is any leftover resources from a bad shutdown
1389 		this.purgeLocalRepository();
1390 
1391 
1392 
1393 		if(log.isDebugEnabled())
1394         {
1395 			log.debug("started....");
1396         }
1397 	}
1398 
1399 	/***
1400 	 * Stops any actions this model is doing
1401 	 */
1402 	public void stop() {
1403 	    // is the server still listening at this moment?
1404 		// this.purgeLocalRepository();
1405 		if(log.isDebugEnabled())
1406         {
1407 			log.debug("stopping");
1408         }
1409 	}
1410 
1411 	public void getRemoteFile(FileElement fe, File file) {
1412 		if(log.isDebugEnabled())
1413         {
1414 			log.debug("get file " + fe.getName() + " from " + fe.getOwnerKey()
1415 					+ " to " + file.getPath());
1416         }
1417 		HttpURL url;
1418 		Peer peer = peerManager.getPeer(fe.getOwnerKey());
1419 		String source;
1420 		try {
1421 			source = peer.getHttpURL().getURI() + NetUtils.encode(fe.getName());
1422 			saveFile2Local(source, file);
1423 
1424 		} catch (URIException e) {
1425 			log.error(e);
1426 		}
1427 	}
1428 
1429 	public void saveFile2Local(String source, File file) {
1430 		try {
1431 			if (log.isDebugEnabled()) {
1432 				log.debug("get: source - " + source + ";");
1433 			}
1434 			Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
1435 
1436 			source = source.replaceAll("/slide", "/swirl");
1437 			String swirlPath = source.substring(0, source.lastIndexOf("/"));
1438 			PropFindMethod pf1 = new PropFindMethod(swirlPath);
1439 			int status1 = peer.executeHttpRequestMethodWithoutLog(pf1);
1440 			PropFindMethod pf2 = new PropFindMethod(source);
1441 			status1 = peer.executeHttpRequestMethodWithoutLog(pf2);
1442 
1443 			GetMethod get = new GetMethod(source);
1444 			int status = peer.executeHttpRequestMethod(get);
1445 			if(log.isDebugEnabled())
1446 	        {
1447 				log.debug("status: " + status);
1448 	        }
1449 			FileOutputStream out = new FileOutputStream(file);
1450 			InputStream in = get.getResponseBodyAsStream();
1451 
1452 			byte[] buffer = new byte[10000];
1453 			int len;
1454 			while ((len = in.read(buffer)) > 0) {
1455 				out.write(buffer, 0, len);
1456 			}
1457 			in.close();
1458 			out.close();
1459 
1460 			get.releaseConnection();
1461 			get.recycle();
1462 		} catch (IOException e) {
1463 			log.error(e, e);
1464 		}
1465 
1466 	}
1467 
1468 	public boolean isFilesChanged() {
1469 	    boolean result = false;
1470 	    synchronized(updateListMutex) {
1471 	    	if(log.isDebugEnabled())
1472 	        {
1473 	    		log.debug("isFilesChanged: " + updateList + "  returning: " + !updateList.isEmpty());
1474 	        }
1475 			result = !updateList.isEmpty();
1476 	    }
1477 	    return result;
1478 	}
1479 
1480 	public boolean isFileChanged(FileElement fe) {
1481 		boolean ret = false;
1482 		synchronized(updateListMutex) {
1483 		for (Iterator it = updateList.iterator(); it.hasNext();) {
1484 			String filename = (String) it.next();
1485 			if (filename.equals("/" + fe.getName())) {
1486 				ret = true;
1487 				break;
1488 			}
1489 
1490 		}
1491 		}
1492 		return ret;
1493 	}
1494 
1495 	public void setDotLocation(DotElement node) {
1496 		if(log.isDebugEnabled())
1497         {
1498 			log.debug("setDotLocation(" + node.getLocation().getX() + ", "
1499 					+ node.getLocation().getY() + ")");
1500         }
1501 		Peer peer = peerManager.getPeer(node.getOwnerUser());
1502 		String path = node.getFileElement().getKey();
1503 		try {
1504 			if(log.isDebugEnabled())
1505 	        {
1506 				log.debug("peer: " + peer + " \nnewPath:" + path);
1507 	        }
1508 
1509 			PropPatchMethod propPatch = new OurPropPatchMethod(path);
1510 			double dotRadius = node.getRadius();
1511 			double relativeAngle = node.getRelativeAngle();
1512 			propPatch.addPropertyToSet(DotElement.RADIUS, String
1513 					.valueOf(dotRadius));
1514 			propPatch.addPropertyToSet(DotElement.RELATIVE_ANGLE, String
1515 					.valueOf(relativeAngle));
1516 			boolean isHidden = node.getFileElement().getShareDegree().equals(new SharingLevel(0));
1517 			int status;
1518 			if (isHidden) {
1519 				status = peer.executeHttpRequestMethodLogPrivate(propPatch);
1520 			} else {
1521 				status = peer.executeHttpRequestMethod(propPatch);
1522 			}
1523 				
1524 			if(log.isDebugEnabled())
1525 	        {
1526 				log.debug("status: " + status);
1527 	        }
1528 			propPatch.releaseConnection();
1529 			propPatch.recycle();
1530 		} catch (IOException e) {
1531 			log.error(e, e);
1532 		}
1533 	}
1534 
1535 	public void setPositionInfo(DotElement selectedNode, SharingLevel newSharingLevel){
1536 		if(log.isDebugEnabled())
1537         {
1538 			log.debug("setPositionInfo(" + selectedNode.getLocation().getX() + ", "
1539 					+ selectedNode.getLocation().getY() + ")");
1540         }
1541 		String path = selectedNode.getFileElement().getKey();
1542 		securityManager.setSecurityLevel(path, SwirlSecurity.OTHERS,
1543 				newSharingLevel);
1544 		Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
1545 		try {
1546 			if(log.isDebugEnabled())
1547 	        {
1548 				log.debug("peer: " + peer + " \nnewPath:" + path);
1549 	        }
1550 			double dotRadius = selectedNode.getRadius();
1551 			double relativeAngle = selectedNode.getRelativeAngle();
1552 
1553 			PropPatchMethod propPatch = new OurPropPatchMethod(path);
1554 			propPatch.addPropertyToSet(SharingLevel.SHARING_PROPERTY_NAME,
1555 					newSharingLevel.value + "");
1556 			propPatch.addPropertyToSet(DotElement.RADIUS, String
1557 					.valueOf(dotRadius));
1558 			propPatch.addPropertyToSet(DotElement.RELATIVE_ANGLE, String
1559 					.valueOf(relativeAngle));
1560 
1561 			boolean isHidden = selectedNode.getFileElement().getShareDegree().equals(new SharingLevel(0));
1562 			int status;
1563 			if (isHidden) {
1564 				status = peer.executeHttpRequestMethodLogPrivate(propPatch);
1565 			}
1566 			else {
1567 				status = peer.executeHttpRequestMethod(propPatch);
1568 			}
1569 				
1570 			if(log.isDebugEnabled())
1571 	        {
1572 				log.debug("status: " + status);
1573 	        }
1574 			propPatch.releaseConnection();
1575 			propPatch.recycle();
1576 		} catch (IOException e) {
1577 			log.error(e, e);
1578 		}
1579 
1580 	}
1581 
1582 
1583 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/HostPathCodec.html
##-----------------TITLE------------------------##
HostPathCodec xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   /***
4    * DOCUMENT ME!
5    *
6    * @author bpillet
7    */
8   public interface HostPathCodec
9   {
10      /***
11       * assuming the implementation of this codec has access to the client's
12       * request or the requested href, this method will figure out which peer
13       * was encoded in the href/request
14       *
15       * @return the peer to proxy to
16       */
17      String decodeHost();
18  
19      /***
20       * assuming the implementation of this codec has access to the client's
21       * request or the requested href, this method will figure out the path on
22       * the peer to proxy to, often replacing "/swirl" with "/slide"
23       *
24       * @return the peer to proxy to
25       */
26      String decodePath();
27  
28      /***
29       * Mangle the href and/or the request in a response to the client so that
30       * when the client accesses the href again, the proxy will know which peer
31       * to proxy to
32       *
33       * @param href the href to mangle
34       * @param encodeHost the peer it belongs to
35       *
36       * @return the new href
37       */
38      String encodeHostInPath(final String href, final String encodeHost);
39  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/MessageSender.html
##-----------------TITLE------------------------##
MessageSender xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.util.Map;
4   
5   /***
6    * TODO
7    *
8    * @author $author$
9    * @version $Revision: 1.4 $
10   * @see MessageProcessor
11   * @see MessageReceiver
12   */
13  public interface MessageSender
14  {
15      /***
16       * TODO
17       *
18       * @param msg message to send
19       */
20      public void sendMessage(Map msg);
21      
22      /***
23       * 
24       * @param msg message to send
25       * @param isPrivate indicates whether the message should be published to all peers
26       */
27      public void sendMessage(Map msg, boolean isPrivate);
28  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/SlideUserRealm.html
##-----------------TITLE------------------------##
SlideUserRealm xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.ByteArrayInputStream;
4   
5   import javax.xml.parsers.DocumentBuilder;
6   import javax.xml.parsers.DocumentBuilderFactory;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  import org.mortbay.http.HashUserRealm;
11  import org.mortbay.http.HttpRequest;
12  import org.mortbay.http.UserPrincipal;
13  import org.mortbay.http.UserRealm;
14  import org.w3c.dom.Document;
15  import org.w3c.dom.Element;
16  import org.w3c.dom.NodeList;
17  
18  /***
19   * Builds a jetty user realm based on the configuration stored in the slide
20   * Domain.xml file
21   *
22   * @author jie ren
23   */
24  public class SlideUserRealm implements UserRealm
25  {
26      /*** the proxied realm backing this one */
27      private HashUserRealm proxyRealm;
28  
29      /*** the logger for this class */
30      private Log log = LogFactory.getLog(this.getClass());
31  
32      /***
33       * Build a new Realm from the slide config
34       *
35       * @param name the name of the realm
36       * @param config where the config is
37       */
38      public SlideUserRealm(final String name, final String config)
39      {
40          if(log.isDebugEnabled())
41          {
42              log.debug("(" + name + ", " + config + ")");
43          }
44  
45          try
46          {
47              proxyRealm = new HashUserRealm(name);
48              loadFromSlideXML(config);
49          }
50          catch(Exception e)
51          {
52              log.error("Problem loading realm from xml", e);
53          }
54      }
55  
56      /***
57       * DOCUMENT ME!
58       *
59       * @return The realm name.
60       */
61      public String getName()
62      {
63          return proxyRealm.getName();
64      }
65  
66      /***
67       * TODO
68       *
69       * @param user TODO
70       * @param role TODO
71       */
72      public void addUserToRole(final String user, final String role)
73      {
74          proxyRealm.addUserToRole(user, role);
75      }
76  
77      /***
78       * DOCUMENT ME!
79       *
80       * @param username see interface
81       * @param credentials see interface
82       * @param request see interface
83       *
84       * @return see interface
85       */
86      public UserPrincipal authenticate(final String username,
87                                        final Object credentials,
88                                        final HttpRequest request)
89      {
90          UserPrincipal userPrincipal = proxyRealm.authenticate(username,
91                                                                credentials,
92                                                                request);
93  
94          return userPrincipal;
95      }
96  
97      /***
98       * see interface
99       *
100      * @param user see interface
101      */
102     public void disassociate(final UserPrincipal user){}
103 
104     /***
105      * Load up a jetty user realm based on the config from slide's Domain.xml
106      *
107      * @param config the configuration file to look at
108      */
109     public void loadFromSlideXML(final String config)
110     {
111         try
112         {
113             String sObjectNode = "objectnode";
114             String sClassname = "classname";
115             String sUri = "uri";
116             String sSubjectNode = "org.apache.slide.structure.SubjectNode";
117             String sProperty = "property";
118             String usersPrefix = "/users/";
119             String rolesPrefix = "/roles/";
120 
121             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
122             DocumentBuilder builder = factory.newDocumentBuilder();
123             Document document = builder.parse(config);
124             NodeList nList = document.getElementsByTagName(sObjectNode);
125 
126             DocumentBuilderFactory smallFactory = DocumentBuilderFactory
127                                                   .newInstance();
128 
129             smallFactory.setValidating(false);
130             smallFactory.setNamespaceAware(false);
131 
132             DocumentBuilder smallBuilder = smallFactory.newDocumentBuilder();
133 
134             for(int i = 0; i < nList.getLength(); i++)
135             {
136                 Element n = (Element)nList.item(i);
137 
138                 if(n.hasAttribute(sClassname) && n.hasAttribute(sUri))
139                 {
140                     String cn = n.getAttribute(sClassname);
141                     String urin = n.getAttribute(sUri);
142 
143                     if(cn.equals(sSubjectNode))
144                     {
145                         if(urin.startsWith(usersPrefix))
146                         {
147                             String username = urin.substring(usersPrefix.length());
148                             String password = n.getElementsByTagName(sProperty)
149                                                .item(0).getLastChild()
150                                                .getNodeValue();
151 
152                             // inject username and password into HashUserRealm
153                             proxyRealm.put(username, password);
154                         }
155 
156                         if(urin.startsWith(rolesPrefix))
157                         {
158                             String rolename = urin.substring(rolesPrefix.length());
159                             String ss = n.getElementsByTagName(sProperty).item(0)
160                                          .getLastChild().getNodeValue();
161 
162                             ss = "<dummy>" + ss + "</dummy>";
163 
164                             // make a valid XML doc
165                             Document small = smallBuilder.parse(new ByteArrayInputStream(ss
166                                                                                          .getBytes()));
167                             NodeList members = small.getElementsByTagName("D:href");
168 
169                             for(int j = 0; j < members.getLength(); j++)
170                             {
171                                 String member = members.item(j).getLastChild()
172                                                        .getNodeValue();
173 
174                                 member = member.substring(usersPrefix.length());
175 
176                                 // inject username and role into HashUserRealm
177                                 proxyRealm.addUserToRole(member, rolename);
178                             }
179                         }
180                     }
181                 }
182             }
183         }
184         catch(Exception e)
185         {
186             log.error(e, e);
187         }
188     }
189 
190     /***
191      * Empty implementation
192      *
193      * @param user the user to logout
194      */
195     public void logout(final UserPrincipal user){}
196 
197     /***
198      * see interface
199      *
200      * @param user see interface
201      *
202      * @return see interface
203      */
204     public UserPrincipal popRole(final UserPrincipal user)
205     {
206         return proxyRealm.popRole(user);
207     }
208 
209     /***
210      * see interface
211      *
212      * @param user see interface
213      * @param role see interface
214      *
215      * @return see interface
216      */
217     public UserPrincipal pushRole(final UserPrincipal user, final String role)
218     {
219         return proxyRealm.pushRole(user, role);
220     }
221 
222     /***
223      * TODO
224      *
225      * @param key TODO
226      * @param val TODO
227      *
228      * @return TODO
229      */
230     public Object put(final Object key, final Object val)
231     {
232         return proxyRealm.put(key, val);
233     }
234 
235     /***
236      * overrides Object.toString();
237      *
238      * @return proxyRealm.toString();
239      */
240     public String toString()
241     {
242         return proxyRealm.toString();
243     }
244 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/UnlockCommand.html
##-----------------TITLE------------------------##
UnlockCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.apache.webdav.lib.methods.UnlockMethod;
10  
11  /***
12   * Proxies an WebDAV UNLOCK command to a specific peer
13   *
14   * @author Kari Nies
15   */
16  public class UnlockCommand extends ProxyCommand
17  {
18      /*** commons-logging log that maps to this Command */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      /***
22       * Constructor that calls super constructor
23       *
24       * @param req see super
25       * @param resp see super
26       * @param host see super
27       * @param path see super
28       * @param peerManager see super
29       */
30      public UnlockCommand(final HttpServletRequest req,
31                           final HttpServletResponse resp, final String host,
32                           final String path, final PeerManager peerManager)
33      {
34          super(req, resp, host, path, peerManager);
35      }
36  
37      /***
38       * Implements the abstract method from ProxyCommand to return a WebDAV
39       * UNLOCK method
40       *
41       * @param url the url to execute the method on
42       *
43       * @return an instance of UnlockMethod
44       */
45      public HttpMethod createMethod(final String url)
46      {
47          UnlockMethod method = new UnlockMethod(url);
48  
49          //set Lock-Token header
50          String lockTokenHeader = getRequest().getHeader("Lock-Token");
51  
52          if(log.isDebugEnabled())
53          {
54              log.debug("LockToken: " + lockTokenHeader);
55          }
56  
57          if(lockTokenHeader != null)
58          {
59              method.setLockToken(lockTokenHeader);
60          }
61  
62          //set Authorization header
63          String authorizationHeader = getRequest().getHeader("Authorization");
64  
65          if(log.isDebugEnabled())
66          {
67              log.debug("Authorization: " + authorizationHeader);
68          }
69  
70          if(authorizationHeader != null)
71          {
72              method.setRequestHeader("Authorization", authorizationHeader);
73          }
74  
75          return method;
76      }
77  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/GetCommand.html
##-----------------TITLE------------------------##
GetCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.httpclient.methods.GetMethod;
8   
9   /***
10   * Proxies an HTTP GET method to a specific peer
11   *
12   * @author Ben Pillet
13   */
14  public class GetCommand extends ProxyCommand
15  {
16      /***
17       * Constructor that calls super constructor
18       *
19       * @param req see super
20       * @param resp see super
21       * @param host see super
22       * @param path see super
23       * @param peerManager see super
24       */
25      public GetCommand(final HttpServletRequest req,
26                        final HttpServletResponse resp, final String host,
27                        final String path, final PeerManager peerManager)
28      {
29          super(req, resp, host, path, peerManager);
30      }
31  
32      /***
33       * Implements the abstract method from ProxyCommand to return an http
34       * GetMethod
35       *
36       * @param url the url to execute the method on
37       *
38       * @return an httpclient GetMethod
39       */
40      public HttpMethod createMethod(final String url)
41      {
42          return new GetMethod(url);
43      }
44  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/AggregateCommand.html
##-----------------TITLE------------------------##
AggregateCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.ByteArrayOutputStream;
4   import java.io.IOException;
5   import java.io.InputStream;
6   import java.util.Enumeration;
7   import java.util.HashSet;
8   import java.util.Iterator;
9   import java.util.Vector;
10  
11  import javax.servlet.ServletException;
12  import javax.servlet.http.HttpServletRequest;
13  import javax.servlet.http.HttpServletResponse;
14  import javax.xml.parsers.DocumentBuilder;
15  import javax.xml.parsers.DocumentBuilderFactory;
16  import javax.xml.parsers.ParserConfigurationException;
17  
18  import org.apache.commons.httpclient.Header;
19  import org.apache.commons.httpclient.HostConfiguration;
20  import org.apache.commons.httpclient.HttpURL;
21  import org.apache.commons.logging.Log;
22  import org.apache.commons.logging.LogFactory;
23  import org.apache.webdav.lib.methods.PropFindMethod;
24  import org.w3c.dom.Document;
25  import org.w3c.dom.Element;
26  import org.w3c.dom.NodeList;
27  import org.w3c.dom.Text;
28  
29  import swirl.workspace.common.DocumentLogger;
30  import swirl.workspace.common.NetUtils;
31  
32  /***
33   * This command is a base class for commands that proxy multiple DAV servers
34   * and aggregate their responses to send back to the client
35   *
36   * @author Ben Pillet
37   */
38  public class AggregateCommand extends BaseSwirlCommand
39  {
40      /*** how big should a copy buffer be to copy streams */
41      public static final int BUFFER_SIZE = 2048;
42  
43      /*** the HTTP status code (207) for multistatus */
44      public static final int MULTISTATUS = 207;
45  
46      /*** the XML document to send back to the client */
47      private Document responseBody;
48  
49      /*** the root &lt;multistatus/&gt; element of the responseBody */
50      private Element multistatus;
51  
52      /***
53       * keeps track of seen hrefs so that there are no duplicates in response to
54       * client
55       */
56      private HashSet seenHrefs = new HashSet();
57  
58      /*** used to encode the hrefs that come back from the peers */
59      private HostPathCodec codec;
60  
61      /*** commons-logging log that maps to this Command */
62      private Log log = LogFactory.getLog(this.getClass());
63  
64      /***
65       * Constructor
66       *
67       * @param req the request for this command from the user
68       * @param resp the response to the user
69       * @param host the peer to proxy
70       * @param path the directory on the peer
71       * @param peerManager the collection of peers to proxy to
72       * @param cod how to encode the hrefs from each of the peers
73       */
74      public AggregateCommand(final HttpServletRequest req,
75                              final HttpServletResponse resp, final String host,
76                              final String path, final PeerManager peerManager,
77                              final HostPathCodec cod)
78      {
79          super(req, resp, host, path, peerManager);
80          this.codec = cod;
81      }
82  
83      /***
84       * this method is automatically called by the execute method and should be
85       * overriden if the HTTP returns code is not 207 and the return
86       * content-type is not text/xml
87       */
88      public void setResponseHeaders()
89      {
90          getResponse().setStatus(MULTISTATUS); // multistatus
91          getResponse().setHeader("Content-Type", "text/xml; charset=\"UTF-8\"");
92      }
93  
94      /***
95       * generates a list of peers to proxy to. If the host is not set, all of
96       * the peers will be proxied. If the host is set, only peers with a
97       * matching host will be proxied.
98       *
99       * @return collection of Peer objects
100      */
101     public Vector getTargetPeers()
102     {
103         Vector ret = new Vector();
104 
105         if(log.isDebugEnabled())
106         {
107             log.debug("getTargetPeers with getHost(): " + getHost());
108         }
109 
110         for(Iterator it = getPeerManager().getPeersIterator(); it.hasNext();)
111         {
112             Peer peer = (Peer)it.next();
113 
114             String peerHost = "";
115 
116             try
117             {
118                 peerHost = peer.getUniqueID();
119             }
120             catch(Exception ex)
121             {
122                 log.warn("problem getting host for " + peer, ex);
123             }
124 
125             if((getHost().length() == 0) || getHost().equals(peerHost))
126             {
127             	if(log.isDebugEnabled())
128     	        {
129             		log.debug("getTargetPeers: adding peer " + peer + "  host: "
130             				+ getHost() + "  peerHost: " + peerHost);
131     	        }
132                 ret.add(peer);
133             }
134         }
135 
136         if(log.isDebugEnabled())
137         {
138             log.debug("getTargetPeers returning " + ret + "\n\rgetHost(): "
139                       + getHost() + "\r\ngetPath(): " + getPath());
140         }
141 
142         return ret;
143     }
144 
145     /***
146      * Creates the PropFindMethod to send to each peer
147      *
148      * @return a method to execute on the peer
149      */
150     public PropFindMethod createMethod()
151     {
152         /*
153         PropFindMethod method = new PropFindMethod(getPath().replaceAll(" ",
154                                                                         "%20"));
155         */
156         //PropFindMethod method = new PropFindMethod((NetUtils.encodeLastElement(getPath())));
157         PropFindMethod method = new PropFindMethod((NetUtils.encodeEachElement(getPath())));
158 
159         if(log.isDebugEnabled())
160         {
161             log.debug("creating method with path: " + getPath()
162                       + "  but it thinks: " + method.getPath());
163         }
164 
165         return method;
166     }
167 
168     /***
169      * Generic implementation of execute that performs the following steps
170      *
171      * <ul>
172      * <li>
173      * 1. sets the response headers
174      * </li>
175      * <li>
176      * 2. gets the peers to proxy to
177      * </li>
178      * <li>
179      * 3. initializes a response document
180      * </li>
181      * <li>
182      * 4. for each target peer
183      * </li>
184      * <li>
185      * 4.1. creates an HttpMethod to send to the peer
186      * </li>
187      * <li>
188      * 4.2. executes the HttpMethod
189      * </li>
190      * <li>
191      * 4.3. processes and/or mangles the response
192      * </li>
193      * <li>
194      * 4.4. adds the peer's response to the client's response
195      * </li>
196      * <li>
197      * 5. sends the response back to the client
198      * </li>
199      * </ul>
200      *
201      * @return status code for response to client
202      *
203      * @throws IOException if there's a problem contacting the client
204      * @throws ServletException if there's a problem generating an XML document
205      */
206     public int execute() throws IOException,
207                                 ServletException
208     {
209         int status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
210 
211         setResponseHeaders();
212 
213         Vector targets = getTargetPeers();
214 
215         if(log.isDebugEnabled())
216         {
217             log.debug("targets: " + targets);
218         }
219 
220         Document body = getDocumentBuilder().newDocument();
221 
222         initResponseBody(body);
223 
224         //copy req.body into a string so it can be used repeatedly
225         ByteArrayOutputStream reqBody = new ByteArrayOutputStream();
226         InputStream in = getRequest().getInputStream();
227         byte[] buffer = new byte[BUFFER_SIZE];
228         int length = 0;
229 
230         while((length = in.read(buffer)) != -1)
231         {
232             reqBody.write(buffer, 0, length);
233         }
234 
235         if(log.isDebugEnabled())
236         {
237             log.debug("reqBody: " + reqBody);
238         }
239 
240         boolean returnMultistatus = false;
241 
242         for(Iterator it = targets.iterator(); it.hasNext();)
243         {
244             try
245             {
246                 Peer peer = (Peer)it.next();
247 
248                 if(log.isDebugEnabled())
249                 {
250                     log.debug("working on " + peer);
251                 }
252 
253                 PropFindMethod method = createMethod();
254 
255                 if(log.isDebugEnabled())
256                 {
257                     log.debug("method.path: " + method.getPath());
258                 }
259 
260                 HostConfiguration hostConf = new HostConfiguration();
261                 HttpURL tempHost = peer.getHttpURL();
262 
263                 if(log.isDebugEnabled())
264                 {
265                     log.debug("tempHost: " + tempHost);
266                 }
267 
268                 hostConf.setHost(tempHost);
269                 method.setHostConfiguration(hostConf);
270                 method.setFollowRedirects(true);
271                 method.setRequestBody(reqBody.toString());
272 
273                 //method.setRequestHeader("Host",
274                 //    peer.getHost() + ':' + peer.getPort());
275                 for(Enumeration headerNames = getRequest().getHeaderNames();
276                     headerNames.hasMoreElements();)
277                 {
278                     String name = (String)headerNames.nextElement();
279 
280                     if(!(name.equals("Host") || name.equals("Cookie")))
281                     {
282                     	if(log.isDebugEnabled())
283             	        {
284                     		log.debug("copying header from client to peer name: "
285 	                                  + name + " val: "
286 	                                  + getRequest().getHeader(name));
287             	        }
288                         method.setRequestHeader(name,
289                                                 getRequest().getHeader(name));
290                     }
291                 }
292 
293                 if(log.isDebugEnabled())
294                 {
295                     log.debug("method.path: " + method.getPath());
296                 }
297 
298                 //logMethod(method);
299 
300                 try
301                 {
302                     if(log.isDebugEnabled())
303                     {
304                         log.debug("before executeHttpRequestMethod depth: "
305                                   + method.getDepth());
306                     }
307 
308                     int ret = peer.executeHttpRequestMethod(method);
309 
310                     logMethod(method);
311 
312                     if(log.isDebugEnabled())
313                     {
314                         log.debug("ret: " + ret);
315 
316                         // + "  reason: " + method.getStatusText());
317                     }
318 
319                     if(ret == MULTISTATUS)
320                     {
321                         returnMultistatus = true;
322 
323                         Document peerDocument = method.getResponseDocument();
324 
325                         DocumentLogger.logDocument(log, peerDocument);
326                         processPeerResponse(peerDocument, peer);
327 
328                         /*
329                         NodeList nl = responseBody.getElementsByTagNameNS("DAV:", "prop");
330                         if (nl != null) {
331                             Node nodeProp = nl.item(0);
332                             if (nodeProp != null) {
333                                 Node davQuota = responseBody.createElementNS("DAV:", "D:quota");
334                                 Node quotaValue = responseBody.createTextNode("10000000");
335                                 davQuota.appendChild(quotaValue);
336                                 Node davQuotaUsed = responseBody.createElementNS("DAV:", "D:quotaused");
337                                 Node usedValue = responseBody.createTextNode("1000000");
338                                 davQuotaUsed.appendChild(usedValue);
339                                 nodeProp.appendChild(davQuota);
340                                 nodeProp.appendChild(davQuotaUsed);
341                             }
342                         }
343                         */
344                     }
345                     else
346                     {
347                     	if(log.isDebugEnabled())
348             	        {
349                     		log.debug("setting status ret: " + ret);
350             	        }
351                         status = ret;
352 
353                         //HTTPclient requires that method.response body be
354                         // read regardless of if it is used
355                         byte[] methodBody = method.getResponseBody();
356                     }
357                 }
358                 catch(Exception ex)
359                 {
360                     log.error("some error", ex);
361                 }
362 
363                 method.releaseConnection();
364                 method.recycle();
365             }
366             catch(Exception ex)
367             {
368                 log.error("Some error happened", ex);
369             }
370         }
371 
372         if(log.isDebugEnabled())
373         {
374             log.debug("returnMultistatus: " + returnMultistatus);
375         }
376 
377         if(returnMultistatus)
378         {
379             DocumentLogger.logDocument(log,
380                                        "returning propfind body to client", body);
381             status = MULTISTATUS;
382             DocumentLogger.writeDocument(body, getResponse().getOutputStream());
383         }
384 
385         return status;
386     }
387 
388     /***
389      * This method is automatically called and prepares the responseBody to be
390      * populated by adding a &lt;multistatus/&gt; element to it
391      *
392      * @param body the document to initialize
393      */
394     public void initResponseBody(final Document body)
395     {
396         this.responseBody = body;
397         multistatus = body.createElement("D:multistatus");
398         multistatus.setAttribute("xmlns:D", "DAV:");
399         body.appendChild(multistatus);
400     }
401 
402     /***
403      * This emthod is called for each response that comes from a peer.
404      *
405      * @param peerDocument the body of the response from the peer
406      * @param peer the peer that returned the response
407      */
408     public void processPeerResponse(final Document peerDocument, final Peer peer)
409     {
410         if(peerDocument != null)
411         {
412             NodeList peerResponses = peerDocument.getElementsByTagName("D:response");
413 
414             for(int i = 0; i < peerResponses.getLength(); ++i)
415             {
416                 Element peerResponse = (Element)peerResponses.item(i);
417 
418                 if(modifyResponse(peerResponse, peer))
419                 {
420                     multistatus.appendChild(responseBody.importNode(peerResponse,
421                                                                     true));
422                 }
423             }
424         }
425     }
426 
427     /***
428      * Return JAXP document builder instance.
429      *
430      * @return an initialized DocumentBuilder
431      *
432      * @throws ServletException wraps ParserConfigurationException
433      */
434     protected DocumentBuilder getDocumentBuilder() throws ServletException
435     {
436         DocumentBuilder documentBuilder = null;
437         DocumentBuilderFactory documentBuilderFactory = null;
438 
439         try
440         {
441             documentBuilderFactory = DocumentBuilderFactory.newInstance();
442             documentBuilderFactory.setNamespaceAware(false);
443             documentBuilder = documentBuilderFactory.newDocumentBuilder();
444         }
445         catch(ParserConfigurationException e)
446         {
447             throw new ServletException("webdavservlet.jaxpfailed");
448         }
449 
450         return documentBuilder;
451     }
452 
453     /***
454      * Utility method to log the contents of a method request
455      *
456      * @param method the method to log
457      *
458      * @throws IOException if method throws an IOException
459      */
460     protected void logMethod(final PropFindMethod method) throws IOException
461     {
462         StringBuffer buf = new StringBuffer();
463 
464         buf.append("method: \n");
465         buf.append(method.getName() + "\n");
466         buf.append(method.getURI() + "\n");
467 
468         Header[] headers = method.getRequestHeaders();
469 
470         for(int i = 0; i < headers.length; ++i)
471         {
472             buf.append(headers[i]);
473         }
474 
475         if(log.isDebugEnabled())
476         {
477             log.debug(buf);
478         }
479     }
480 
481     /***
482      * modifyReponse mangles the &lt;href&gt; elemtn in peerResponse to encode
483      * the peer the respone came from
484      *
485      * @param peerResponse the response from the peer to mangle
486      * @param peer the peer who returned it
487      *
488      * @return should the proxy send this response to the client because it
489      *         hasn't seen it yet.
490      */
491     private boolean modifyResponse(final Element peerResponse, final Peer peer)
492     {
493         NodeList hrefs = peerResponse.getElementsByTagName("D:href");
494         String peerHost = "";
495 
496         try
497         {
498             peerHost = peer.getUniqueID();
499 
500             for(int i = 0; i < hrefs.getLength(); ++i)
501             {
502                 Element href = (Element)hrefs.item(i);
503                 Text hrefText = (Text)href.getFirstChild();
504 
505                 if(log.isDebugEnabled())
506                 {
507                     log.debug("hrefText: " + hrefText);
508                 }
509 
510                 if(hrefText != null)
511                 {
512                     String newHref = codec.encodeHostInPath(hrefText.getData(),
513                                                             peerHost);
514 
515                     if(log.isDebugEnabled())
516         	        {
517                     	log.debug("seenHrefs: " + seenHrefs + "\nnewHref: "
518                     			+ newHref);
519         	        }
520 
521                     if(!seenHrefs.contains(newHref))
522                     {
523                         hrefText.setData(newHref);
524                         seenHrefs.add(newHref);
525                         if(log.isDebugEnabled())
526             	        {
527             	        	log.debug("returning true");
528             	        }
529 
530                         return true;
531                     }
532                 }
533             }
534         }
535         catch(Exception ex)
536         {
537             log.warn("problem getting host for " + peer, ex);
538         }
539 
540         if(log.isDebugEnabled())
541         {
542         	if(log.isDebugEnabled())
543 	        {
544         		log.debug("returning false");
545 	        }
546         }
547 
548         return false;
549     }
550 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/ScreenShotAction.html
##-----------------TITLE------------------------##
ScreenShotAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.Component;
4   import java.awt.event.ActionEvent;
5   import java.io.File;
6   import java.io.FileOutputStream;
7   
8   import javax.swing.AbstractAction;
9   import javax.swing.ImageIcon;
10  import javax.swing.JFileChooser;
11  
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  import org.dom4j.Document;
15  import org.dom4j.io.DOMReader;
16  import org.w3c.dom.svg.SVGDocument;
17  
18  import swirl.workspace.common.DocumentLogger;
19  import swirl.workspace.viz.SwirlFileFilter;
20  
21  /***
22   * DOCUMENT ME!
23   *
24   * @author bpillet
25   */
26  public class ScreenShotAction extends AbstractAction
27  {
28      /*** TODO */
29      private static final long serialVersionUID = 1L;
30  
31      /*** TODO */
32      private DOMReader reader = new DOMReader();
33  
34      /*** TODO */
35      private File currentExportPath = new File("");
36  
37      /*** TODO */
38      private Log log = LogFactory.getLog(this.getClass());
39  
40      /*** TODO */
41      private SVGDocument svgDoc;
42  
43      /***
44       * Creates a new ScreenShotAction object.
45       *
46       * @param doc TODO
47       */
48      public ScreenShotAction(SVGDocument doc)
49      {
50          super();
51          svgDoc = doc;
52          putValue(ACTION_COMMAND_KEY, "screenshot");
53  
54          //        The key used to determine the command string for the ActionEvent that
55          // will be created when an Action is going to be notified as the result
56          // of residing in a Keymap associated with a JComponent.
57          putValue(LONG_DESCRIPTION,
58                   "Captures the pie view as an SVG document and saves it to a file");
59  
60          //        The key used for storing a longer description for the action, could
61          // be used for context-sensitive help.
62          //putValue(MNEMONIC_KEY, new Character('S'));
63          //        The key used for storing an int key code to be used as the mnemonic
64          // for the action.
65          putValue(NAME, "Screenshot...");
66  
67          //        The key used for storing the name for the action, used for a menu or
68          // button.
69          putValue(SHORT_DESCRIPTION, "Save as SVG document");
70  
71          //        The key used for storing a short description for the action, used for
72          // tooltip text.
73          putValue(SMALL_ICON, new ImageIcon("resources/screenshot.gif"));
74  
75          //		The key used for storing a small icon for the action, used for
76          // toolbar buttons
77      }
78  
79      /***
80       * TODO
81       *
82       * @param e TODO
83       */
84      public void actionPerformed(ActionEvent e)
85      {
86          Document document = reader.read(svgDoc);
87  
88          DocumentLogger.logDocument(log, "svgDoc", svgDoc);
89          DocumentLogger.logDocument(log, "realDoc", document);
90  
91          File f = null;
92          JFileChooser fileChooser = new JFileChooser(currentExportPath
93                                                      .getAbsoluteFile());
94  
95          fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
96          fileChooser.setDialogTitle("Save screenshot as...");
97          fileChooser.setFileHidingEnabled(false);
98          fileChooser.addChoosableFileFilter(new SwirlFileFilter());
99  
100         int choice = fileChooser.showSaveDialog((Component)e.getSource());
101 
102         if(choice == JFileChooser.APPROVE_OPTION)
103         {
104             f = fileChooser.getSelectedFile();
105 
106             if(f != null)
107             {
108                 try
109                 {
110                     DocumentLogger.writeDocument(document,
111                                                  new FileOutputStream(f));
112                 }
113                 catch(Exception ex)
114                 {
115                     log.error(ex, ex);
116                 }
117             }
118         }
119     }
120 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SwirlNeighbor.html
##-----------------TITLE------------------------##
SwirlNeighbor xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   import java.awt.Color;
5   import java.awt.event.ActionEvent;
6   import java.net.InetAddress;
7   import java.net.ServerSocket;
8   import java.util.HashMap;
9   import java.util.Hashtable;
10  import java.util.Iterator;
11  import java.util.Map;
12  import java.util.Set;
13  
14  import javax.jmdns.JmDNS;
15  import javax.jmdns.ServiceInfo;
16  import javax.jmdns.ServiceListener;
17  import javax.jmdns.ServiceTypeListener;
18  import javax.swing.SwingUtilities;
19  
20  import org.apache.commons.logging.Log;
21  import org.apache.commons.logging.LogFactory;
22  
23  import swirl.workspace.Peer;
24  import swirl.workspace.viz.pie.FileElement;
25  import edu.uci.ics.jung.graph.Graph;
26  import edu.uci.ics.jung.graph.Vertex;
27  import edu.uci.ics.jung.graph.decorators.StringLabeller;
28  import edu.uci.ics.jung.graph.impl.UndirectedSparseEdge;
29  import edu.uci.ics.jung.graph.impl.UndirectedSparseGraph;
30  import edu.uci.ics.jung.graph.impl.UndirectedSparseVertex;
31  import edu.uci.ics.jung.utils.UserData;
32  import edu.uci.ics.jung.visualization.GraphDraw;
33  import edu.uci.ics.jung.visualization.LayoutMutable;
34  import edu.uci.ics.jung.visualization.VisualizationViewer;
35  import edu.uci.ics.jung.visualization.graphdraw.SettableRenderer;
36  import edu.uci.ics.jung.visualization.graphdraw.VertexColorFunction;
37  
38  /***
39   * SwirlNeighbor visualization. This class displays the Swirl Neighbors and
40   * non-Swirl Neighbors. Neighbors are discovered through JmDNS. Display is
41   * done through JUNG.
42   */
43  public class SwirlNeighbor extends BaseVisualizer implements ServiceListener,
44                                                               ServiceTypeListener,
45                                                               Controller
46  {
47      /*** TODO */
48      private static final long serialVersionUID = 1L;
49  
50      // our own service type
51  
52      /*** TODO */
53      private static String swirlType = "_webdav._tcp.local.";
54  
55      /*** TODO */
56      protected Log log = LogFactory.getLog(this.getClass());
57  
58      /*** TODO */
59      private Graph g;
60  
61      /*** TODO */
62      private GraphDraw gd;
63  
64      /*** TODO */
65      private JmDNS rendezvous;
66  
67      /*** TODO */
68      private LayoutMutable layout;
69  
70      /*** TODO */
71      private Map hosts = new HashMap();
72  
73      /*** TODO */
74      private ServiceInfo myInfo;
75  
76      /*** TODO */
77      private StringLabeller sl;
78  
79      /*** TODO */
80      private Thread serverThread;
81  
82      /*** TODO */
83      private VisualizationViewer vv;
84  
85      /*** TODO */
86      private boolean selfRegister;
87  
88      /***
89       * Creates a new SwirlNeighbor object.
90       *
91       * @param rendezvous TODO
92       */
93      public SwirlNeighbor(JmDNS rendezvous)
94      {
95          selfRegister = false;
96          this.rendezvous = rendezvous;
97          init("Swirl");
98      }
99  
100     /***
101      * Creates a new SwirlNeighbor object.
102      *
103      * @param rendezvous TODO
104      * @param name TODO
105      */
106     public SwirlNeighbor(JmDNS rendezvous, String name)
107     {
108         selfRegister = true;
109         this.rendezvous = rendezvous;
110         init(name);
111     }
112 
113     /***
114      * TODO
115      *
116      * @return TODO
117      */
118     public Controller getController()
119     {
120         return this;
121     }
122 
123     /***
124      * TODO
125      *
126      * @return TODO
127      */
128     public Model getModel()
129     {
130         return null;
131     }
132 
133     /***
134      * TODO
135      *
136      * @return TODO
137      */
138     public String getName()
139     {
140         return "Zeroconf Network";
141     }
142 
143     /***
144      * TODO
145      *
146      * @return TODO
147      */
148     public View getView()
149     {
150         return this;
151     }
152 
153     /***
154      * TODO
155      *
156      * @param e TODO
157      */
158     public void actionPerformed(ActionEvent e)
159     {
160         if(log.isDebugEnabled())
161         {
162             log.debug("actionPerformed() e: " + e);
163         }
164     }
165 
166     /***
167      * TODO
168      *
169      * @param _jmdns TODO
170      * @param _type TODO
171      * @param _name TODO
172      */
173     public void addService(JmDNS _jmdns, String _type, String _name)
174     {
175         final JmDNS jmdns = _jmdns;
176         final String type = _type;
177         final String name = _name;
178         ServiceInfo _si = null;
179 
180         if(log.isDebugEnabled())
181         {
182             log.debug("addService " + _type + "  " + _name);
183         }
184 
185         try
186         {
187             _si = jmdns.getServiceInfo(type, name);
188         }
189         catch(IllegalArgumentException e){}
190 
191         final ServiceInfo si = _si;
192 
193         if(!hosts.containsKey(_name))
194         {
195             SwingUtilities.invokeLater(new Runnable()
196                 {
197                     public void run()
198                     {
199                         vv.suspend();
200 
201                         addVertex(jmdns, type, name, si);
202 
203                         synchronized(gd)
204                         {
205                             layout.update();
206                         }
207 
208                         if(!vv.isVisRunnerRunning())
209                         {
210                             vv.init();
211                         }
212                         else
213                         {
214                             vv.unsuspend();
215                         }
216 
217                         vv.repaint();
218                         gd.repaint();
219                     }
220                 });
221         }
222     }
223 
224     /***
225      * TODO
226      *
227      * @param jmdns TODO
228      * @param type TODO
229      */
230     public void addServiceType(JmDNS jmdns, String type)
231     {
232         jmdns.addServiceListener(type, this);
233     }
234 
235     /***
236      * TODO
237      *
238      * @param msg TODO
239      */
240     public void processMessage(Map msg){}
241 
242     /***
243      * TODO
244      *
245      * @param _jmdns TODO
246      * @param _type TODO
247      * @param _name TODO
248      */
249     public void removeService(JmDNS _jmdns, String _type, String _name)
250     {
251         final JmDNS jmdns = _jmdns;
252         final String type = _type;
253         final String name = _name;
254         ServiceInfo _si = null;
255 
256         try
257         {
258             _si = jmdns.getServiceInfo(type, name);
259         }
260         catch(IllegalArgumentException e){}
261 
262         final ServiceInfo si = _si;
263 
264         if(hosts.containsKey(_name))
265         {
266             SwingUtilities.invokeLater(new Runnable()
267                 {
268                     public void run()
269                     {
270                         vv.suspend();
271 
272                         removeVertex(jmdns, type, name, si);
273 
274                         synchronized(gd)
275                         {
276                             layout.update();
277                         }
278 
279                         if(!vv.isVisRunnerRunning())
280                         {
281                             vv.init();
282                         }
283                         else
284                         {
285                             vv.unsuspend();
286                         }
287 
288                         vv.repaint();
289                         gd.repaint();
290                     }
291                 });
292         }
293     }
294 
295     /***
296      * TODO
297      *
298      * @param jmdns TODO
299      * @param type TODO
300      * @param name TODO
301      */
302     public void resolveService(JmDNS jmdns, String type, String name)
303     {
304         if(log.isDebugEnabled())
305         {
306             log.debug("Resolved: " + name);
307         }
308     }
309 
310     /***
311      * TODO
312      *
313      * @param jmdns TODO
314      * @param type TODO
315      * @param name TODO
316      * @param info TODO
317      */
318     public void resolveService(JmDNS jmdns, String type, String name,
319                                ServiceInfo info)
320     {
321         if(
322         log.isDebugEnabled())
323         {
324             //System.out.println("Resolved with props: " + info);
325             log.debug("Resolved with props: " + info);
326         }
327     }
328 
329     /***
330      * TODO
331      */
332     public void start()
333     {
334         try
335         {
336             rendezvous.addServiceTypeListener(this);
337             rendezvous.addServiceListener(swirlType, this);
338         }
339         catch(Exception ex)
340         {
341             log.error("problem adding SwirlNeighbor to jmdns listeners", ex);
342         }
343     }
344 
345     /***
346      * TODO
347      */
348     public void stop()
349     {
350         if(selfRegister)
351         {
352             rendezvous.unregisterService(myInfo);
353         }
354 
355         rendezvous.removeServiceListener(SwirlNeighbor.this);
356         rendezvous.removeServiceTypeListener(SwirlNeighbor.this);
357     }
358 
359     /***
360      * TODO
361      *
362      * @param peer TODO
363      */
364     public void userJoined(Peer peer){}
365 
366     /***
367      * TODO
368      *
369      * @param jmdns TODO
370      * @param type TODO
371      * @param _name TODO
372      * @param si TODO
373      */
374     private void addVertex(JmDNS jmdns, String type, String _name,
375                            ServiceInfo si)
376     {
377         if(log.isDebugEnabled())
378         {
379             log.debug("addVertex " + type + "  " + _name);
380         }
381 
382         String name = _name;
383 
384         if(type.indexOf(swirlType) != -1)
385         {
386             name = si.getURL();
387         }
388 
389         if(hosts.containsKey(_name))
390         {
391             return;
392         }
393 
394         hosts.put(_name, name);
395 
396         // add a node,
397         Vertex v = new UndirectedSparseVertex();
398 
399         g.addVertex(v);
400 
401         if(log.isDebugEnabled())
402         {
403             log.debug("called g.addVertex(" + v + ")");
404         }
405 
406         // associate a type
407         if(type.equals(swirlType))
408         {
409             v.setUserDatum(swirlType, swirlType, UserData.CLONE);
410         }
411 
412         // set a label
413         try
414         {
415             sl.setLabel(v, name);
416         }
417         catch(Exception e)
418         {
419             e.printStackTrace();
420         }
421 
422         /*
423            //let's connect to a random vertex, too!
424            Indexer i = Indexer.getAndUpdateIndexer(g);
425            int rand = (int) (Math.random() * g.numVertices());
426            Vertex v_rand = (Vertex) i.getVertex(rand);
427            g.addEdge(new UndirectedSparseEdge(v, v_rand));
428          */
429 
430         // connect to every node in the same class
431         synchronized(g)
432         {
433             Set vs = g.getVertices();
434 
435             for(Iterator i = vs.iterator(); i.hasNext();)
436             {
437                 Vertex vToConnect = (Vertex)i.next();
438 
439                 if(!v.equals(vToConnect)
440                    && (v.getUserDatum(swirlType) == vToConnect.getUserDatum(swirlType)))
441                 {
442                     g.addEdge(new UndirectedSparseEdge(v, vToConnect));
443                 }
444             }
445         }
446     }
447 
448     /***
449      * TODO
450      *
451      * @param name TODO
452      */
453     private void init(String name)
454     {
455         // create a server socket and bind it to an available port
456         //
457         ServerSocket serv = null;
458         boolean done = false;
459 
460         for(int i = 1025; (i < 1040) && !done; i++)
461         {
462             try
463             {
464                 serv = new ServerSocket(i);
465                 serverThread = new Thread(new ListenerThread(serv));
466                 serverThread.start();
467                 done = true;
468             }
469             catch(Exception ex)
470             {
471                 if(log.isDebugEnabled())
472                 {
473                     log.debug("problem starting neighbor server socket on port "
474                               + i + ".  Trying next port");
475                 }
476             }
477         }
478 
479         String serviceName = "";
480 
481         try
482         {
483             // advertise ourselves via rendezvous
484             Hashtable serviceProperties = new Hashtable();
485 
486             serviceProperties.put("path", "/local");
487             serviceProperties.put("aggregator", "/swirl");
488 
489             int serviceWeight = 1;
490             int servicePriority = 1;
491 
492             String hostName = InetAddress.getLocalHost().getCanonicalHostName();
493 
494             // listen for other non-Swirl services
495             if(selfRegister)
496             {
497                 rendezvous.registerServiceType(swirlType);
498             }
499 
500             serviceName = name + "-" + hostName + "." + swirlType;
501             myInfo = new ServiceInfo(swirlType, serviceName,
502                                      serv.getLocalPort(), serviceWeight,
503                                      servicePriority, serviceProperties);
504 
505             if(selfRegister)
506             {
507                 rendezvous.registerService(myInfo);
508             }
509 
510             // create an initial graph with one vertex for the announced service
511             // otherwise the graphDraw will result in null pointer
512             g = new UndirectedSparseGraph();
513             sl = StringLabeller.getLabeller(g);
514 
515             if(selfRegister)
516             {
517                 addVertex(rendezvous, swirlType, serviceName, myInfo);
518             }
519 
520             gd = new GraphDraw(g);
521             layout = new edu.uci.ics.jung.visualization.SpringLayout(g);
522             gd.setGraphLayout(layout);
523             vv = gd.getVisualizationViewer();
524 
525             SettableRenderer sr = gd.getRender();
526 
527             sr.setEdgeColor(new Color(0, 0, 0, 0.0f));
528             sr.setVertexColorFunction(new VertexColorFunction()
529                 {
530                     public Color getForeColor(Vertex v)
531                     {
532                         return Color.blue;
533                     }
534 
535                     public Color getBackColor(Vertex v)
536                     {
537                         if(v.getUserDatum(swirlType) != null)
538                         {
539                             return Color.green;
540                         }
541                         else
542                         {
543                             return Color.red;
544                         }
545                     }
546                 });
547         }
548         catch(Exception ex)
549         {
550             log.error("som problem", ex);
551         }
552 
553         setLayout(new BorderLayout());
554         add(gd, BorderLayout.CENTER);
555 
556         //add(vv, BorderLayout.CENTER);
557     }
558 
559     /***
560      * TODO
561      *
562      * @param jmdns TODO
563      * @param type TODO
564      * @param _name TODO
565      * @param si TODO
566      */
567     private void removeVertex(JmDNS jmdns, String type, String _name,
568                               ServiceInfo si)
569     {
570         String name = (String)hosts.remove(_name);
571 
572         g.removeVertex(sl.getVertex(name));
573         sl.removeLabel(name);
574     }
575 
576 	/* (non-Javadoc)
577 	 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
578 	 */
579 	public void flashIt(FileElement fe, String uColor) {
580 		// TODO Auto-generated method stub
581 		
582 	}
583 
584 	/* (non-Javadoc)
585 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
586 	 */
587 	public void backupPromotedToPersistent(FileElement file) {
588 		// TODO Auto-generated method stub
589 		
590 	}
591 
592 	/* (non-Javadoc)
593 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
594 	 */
595 	public void fileUpdated(FileElement file) {
596 		// TODO Auto-generated method stub
597 		
598 	}
599 
600 }
601 
602 
603 /***
604  * TODO
605  *
606  * @author $author$
607  * @version $Revision: 1.19 $
608  */
609 class ListenerThread implements Runnable
610 {
611     /*** TODO */
612     ServerSocket sock;
613 
614     /***
615      * Creates a new ListenerThread object.
616      *
617      * @param sock TODO
618      */
619     public ListenerThread(ServerSocket sock)
620     {
621         super();
622         this.sock = sock;
623     }
624 
625     /***
626      * TODO
627      */
628     public void run()
629     {
630         try
631         {
632             while(sock.accept() != null)
633             {
634                 System.out.println("Accepting connection (but ignoring it)");
635             }
636         }
637         catch(Exception ex)
638         {
639             ex.printStackTrace();
640         }
641     }
642 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/ResourceUpdateListener.html
##-----------------TITLE------------------------##
ResourceUpdateListener xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   /***
4    * @author kari
5    */
6   public interface ResourceUpdateListener
7   {
8   	/***
9   	 * notification that a swirl resource has been updated
10  	 * @param path to resource
11  	 */
12  	void resourceUpdated(String resourcePath);
13  
14  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/Visualizer.html
##-----------------TITLE------------------------##
Visualizer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import javax.swing.JFrame;
4   import javax.swing.JMenuBar;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author bpillet
10   */
11  public interface Visualizer extends View
12  {
13      /***
14       * TODO
15       *
16       * @return TODO
17       */
18      public String getName();
19      
20      /***
21       * gets the handler that draws the menu bar
22       * 
23       * @author depaula
24       *
25       */
26      public JMenuBar getMenuBar();
27  
28      /***
29       * sets the root pane handler
30       */
31      public void setRoot(JFrame _root);
32      
33  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/MoveCommand.html
##-----------------TITLE------------------------##
MoveCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.apache.webdav.lib.methods.MoveMethod;
10  
11  /***
12   * Proxies an WebDAV MOVE command to a specific peer
13   *
14   * @author Ben Pillet/Kari Nies
15   */
16  public class MoveCommand extends ProxyCommand
17  {
18      /*** commons-logging log that maps to this Command */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      /***
22       * Constructor that calls super constructor
23       *
24       * @param req see super
25       * @param resp see super
26       * @param host see super
27       * @param path see super
28       * @param peerManager see super
29       */
30      public MoveCommand(final HttpServletRequest req,
31                         final HttpServletResponse resp, final String host,
32                         final String path, final PeerManager peerManager)
33      {
34          super(req, resp, host, path, peerManager);
35      }
36  
37      /***
38       * Implements the abstract method from ProxyCommand to return a WebDAV MOVE
39       * method
40       *
41       * @param url the url to execute the method on
42       *
43       * @return an instance of MoveMethod
44       */
45      public HttpMethod createMethod(final String url)
46      {
47          MoveMethod method = new MoveMethod(url);
48  
49          //overwrite is assumed to be true unless otherwise
50          String overwrite = getRequest().getHeader("Overwrite");
51  
52          if(log.isDebugEnabled())
53          {
54              log.debug("overwrite: " + overwrite);
55          }
56  
57          if((overwrite != null) && overwrite.equals("F"))
58          {
59              method.setOverwrite(false);
60          }
61  
62          String destination = getRequest().getHeader("Destination");
63  
64          if(log.isDebugEnabled())
65          {
66              log.debug("destination: " + destination);
67          }
68  
69          // chop the http:// off
70          destination = destination.substring("http:///".length());
71  
72          int i = destination.indexOf("/");
73  
74          if(log.isDebugEnabled())
75          {
76              log.debug("i: " + i);
77          }
78  
79          //remove the domain name from the url because MoveMethod
80          // automatically adds it on
81          destination = destination.substring(i);
82  
83          if(log.isDebugEnabled())
84          {
85              log.debug("destination without host: " + destination);
86          }
87  
88          //change /swirl to /slide
89          destination = destination.replaceFirst("/swirl", "/slide");
90  
91          if(log.isDebugEnabled())
92          {
93              log.debug("destination with slide: " + destination);
94          }
95  
96          method.setDestination(destination);
97  
98          //set If header only if it exists
99          String ifHeader = getRequest().getHeader("If");
100 
101         if(log.isDebugEnabled())
102         {
103             log.debug("If: " + ifHeader);
104         }
105 
106         if(ifHeader != null)
107         {
108             method.setRequestHeader("If", ifHeader);
109         }
110 
111         return method;
112     }
113 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/SwirlDomExtension.html
##-----------------TITLE------------------------##
SwirlDomExtension xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import org.apache.batik.dom.svg.DomExtension;
4   import org.apache.batik.dom.svg.ExtensibleSVGDOMImplementation;
5   import org.apache.commons.logging.Log;
6   import org.apache.commons.logging.LogFactory;
7   
8   /***
9    * DOCUMENT ME!
10   *
11   * @author bpillet
12   */
13  public class SwirlDomExtension implements DomExtension
14  {
15      /*** TODO */
16      private static final long serialVersionUID = 1L;
17  
18      /*** TODO */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      /***
22       * Creates a new SwirlDomExtension object.
23       */
24      public SwirlDomExtension()
25      {
26          super();
27  
28          if(log.isDebugEnabled())
29          {
30              log.debug("()");
31          }
32      }
33  
34      /***
35       * TODO
36       *
37       * @return TODO
38       */
39      public String getAuthor()
40      {
41          return "Ben Pillet and the Swirl team";
42      }
43  
44      /***
45       * TODO
46       *
47       * @return TODO
48       */
49      public String getContactAddress()
50      {
51          return "ben_pillet@yahoo.com";
52      }
53  
54      /***
55       * TODO
56       *
57       * @return TODO
58       */
59      public String getDescription()
60      {
61          return "";
62      }
63  
64      /***
65       * TODO
66       *
67       * @return TODO
68       */
69      public float getPriority()
70      {
71          return 1F;
72      }
73  
74      /***
75       * TODO
76       *
77       * @return TODO
78       */
79      public String getURL()
80      {
81          return "ben";
82      }
83  
84      /***
85       * TODO
86       *
87       * @param dom TODO
88       */
89      public void registerTags(ExtensibleSVGDOMImplementation dom)
90      {
91          if(log.isDebugEnabled())
92          {
93              log.debug("registerTags");
94          }
95  
96          dom.registerCustomElementFactory(DotElement.URL, DotElement.TAG,
97                                           new DotElementFactory());
98      }
99  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/TabbedPaneHolderManager.html
##-----------------TITLE------------------------##
TabbedPaneHolderManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Dimension;
4   import java.awt.event.ActionEvent;
5   import java.awt.event.ActionListener;
6   
7   import javax.swing.ButtonGroup;
8   import javax.swing.JComponent;
9   import javax.swing.JMenu;
10  import javax.swing.JRadioButtonMenuItem;
11  import javax.swing.JTabbedPane;
12  
13  import org.apache.commons.logging.Log;
14  import org.apache.commons.logging.LogFactory;
15  
16  /***
17   * DOCUMENT ME!
18   *
19   * @author bpillet
20   */
21  public class TabbedPaneHolderManager implements HolderManager,
22                                                  ActionListener
23  {
24      /*** TODO */
25      protected Log log = LogFactory.getLog(this.getClass());
26  
27      /*** TODO */
28      ButtonGroup position = new ButtonGroup();
29  
30      /*** TODO */
31      JMenu options = new JMenu("Options");
32  
33      /*** TODO */
34      //JMenuBar menuBar = new JMenuBar();
35  
36      /*** TODO */
37      JRadioButtonMenuItem bottom = new JRadioButtonMenuItem("Bottom");
38  
39      /*** TODO */
40      JRadioButtonMenuItem left = new JRadioButtonMenuItem("Left");
41  
42      /*** TODO */
43      JRadioButtonMenuItem right = new JRadioButtonMenuItem("Right");
44  
45      /*** TODO */
46      JRadioButtonMenuItem top = new JRadioButtonMenuItem("Top");
47  
48      /*** TODO */
49      JTabbedPane tabs = new JTabbedPane(JTabbedPane.TOP);
50  
51      /***
52       * Creates a new TabbedPaneHolderManager object.
53       */
54      public TabbedPaneHolderManager()
55      {
56          tabs.setPreferredSize(new Dimension(200, 400));
57  
58          top.addActionListener(this);
59          options.add(top);
60          position.add(top);
61          top.setSelected(true);
62  
63          bottom.addActionListener(this);
64          options.add(bottom);
65          position.add(bottom);
66  
67          left.addActionListener(this);
68          options.add(left);
69          position.add(left);
70  
71          right.addActionListener(this);
72          options.add(right);
73          position.add(right);
74          //menuBar.add(options);
75      }
76  
77      /***
78       * TODO
79       *
80       * @return TODO
81       */
82      //public JMenuBar getJMenuBar(Model _model, SVGDocument doc)
83      //{
84      //    return menuBar;
85      //}
86  
87      /***
88       * TODO
89       *
90       * @return TODO
91       */
92      public JComponent getRootComponent()
93      {
94          return tabs;
95      }
96  
97      /***
98       * TODO
99       *
100      * @return TODO
101      */
102     public Visualizer getSelectedVisualizer()
103     {
104         return (Visualizer)tabs.getSelectedComponent();
105     }
106 
107     /***
108      * TODO
109      *
110      * @param e TODO
111      */
112     public void actionPerformed(ActionEvent e)
113     {
114         if(log.isDebugEnabled())
115         {
116             log.debug("actionPerformed: " + e);
117         }
118 
119         if(log.isDebugEnabled())
120         {
121             log.debug("cmd: " + e.getActionCommand());
122         }
123 
124         String cmd = e.getActionCommand();
125 
126         if(cmd.equals("Top"))
127         {
128             tabs.setTabPlacement(JTabbedPane.TOP);
129         }
130         else if(cmd.equals("Bottom"))
131         {
132             tabs.setTabPlacement(JTabbedPane.BOTTOM);
133         }
134         else if(cmd.equals("Left"))
135         {
136             tabs.setTabPlacement(JTabbedPane.LEFT);
137         }
138         else if(cmd.equals("Right"))
139         {
140             tabs.setTabPlacement(JTabbedPane.RIGHT);
141         }
142     }
143 
144     /***
145      * TODO
146      *
147      * @param viz TODO
148      */
149     public void addVisualizer(Visualizer viz)
150     {
151         tabs.addTab(viz.getName(), (JComponent)viz);
152     }
153 
154     /***
155      * TODO
156      *
157      * @param viz TODO
158      */
159     public void removeVisualizer(Visualizer viz)
160     {
161         tabs.remove((JComponent)viz);
162     }
163 
164     /***
165      * TODO
166      *
167      * @param title TODO
168      */
169     public void selectVisualizer(String title)
170     {
171         int index = tabs.indexOfTab(title);
172 
173         tabs.setSelectedIndex(index);
174     }
175 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/SecurityManager.html
##-----------------TITLE------------------------##
SecurityManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   import java.util.Arrays;
4   import java.util.Iterator;
5   import java.util.Vector;
6   
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.picocontainer.Startable;
10  
11  import swirl.workspace.viz.SharingLevel;
12  
13  /***
14   * DOCUMENT ME!
15   *
16   * @author bpillet
17   */
18  public class SecurityManager implements Startable
19  {
20      /*** TODO */
21      private static final long serialVersionUID = 1L;
22  
23      /*** TODO */
24      Vector securities = new Vector();
25  
26      /*** the logger for this class */
27      private Log log = LogFactory.getLog(this.getClass());
28  
29      /***
30       * Creates a new SecurityManager object.
31       *
32       * @param secs TODO
33       */
34      public SecurityManager(SwirlSecurity[] secs)
35      {
36          securities.addAll(Arrays.asList(secs));
37  
38          if(log.isDebugEnabled())
39          {
40              log.debug("constructor securities.length: " + securities.size()
41                        + " secs.length: " + secs.length);
42          }
43  
44          for(Iterator it = securities.iterator(); it.hasNext();)
45          {
46              SwirlSecurity security = (SwirlSecurity)it.next();
47  
48              if(log.isDebugEnabled())
49              {
50                  log.debug("added secs: " + security);
51              }
52          }
53      }
54  
55      /***
56       * TODO
57       *
58       * @param path TODO
59       * @param role TODO
60       * @param securityLevel TODO
61       */
62      public void setSecurityLevel(String path, String role, String securityLevel)
63      {
64          for(Iterator it = securities.iterator(); it.hasNext();)
65          {
66              SwirlSecurity security = (SwirlSecurity)it.next();
67  
68              if(log.isDebugEnabled())
69              {
70                  log.debug("calling setSecurityLevel on security: " + security
71                            + "\npath: " + path + "\nrole: " + role
72                            + "\nsecurityLevel: " + securityLevel);
73              }
74  
75              security.setSecurityLevel(path, role, securityLevel);
76          }
77      }
78  
79      /***
80       * finds the security level for the path/role and returns that
81       *
82       * @param path TODO
83       * @param role TODO
84       *
85       * @return TODO
86       *
87       * @throws Exception the security levels from all of the security
88       *         implementations don't agree
89       */
90      public String getSecurityLevel(String path, String role) throws Exception
91      {
92          String ret = "";
93  
94          for(Iterator it = securities.iterator(); it.hasNext();)
95          {
96              SwirlSecurity security = (SwirlSecurity)it.next();
97  
98              if(log.isDebugEnabled())
99              {
100                 log.debug("calling getSecurityLevel on security: " + security
101                           + "\npath: " + path + "\nrole: " + role);
102             }
103 
104             String temp = security.getSecurityLevel(path, role);
105 
106             if(log.isDebugEnabled())
107             {
108                 log.debug("ret:  " + ret + "\ntemp: " + temp);
109             }
110 
111             if(ret.equals(""))
112             {
113                 ret = temp;
114             }
115 
116             if(!ret.equals(temp))
117             {
118                 throw new Exception("Two different security implementations say the security level of "
119                                     + path + " is different");
120             }
121         }
122 
123         return ret;
124     }
125 
126     /***
127      * Empty implementation
128      */
129     public void start()
130     {
131         if(log.isDebugEnabled())
132         {
133             log.debug("started");
134         }
135 
136 //        for(int i = 0; i < 1; ++i)
137 //        {
138 //            setSecurityLevel("/slide/" + i + ".txt", SwirlSecurity.OTHERS,
139 //                             SwirlSecurity.LEVELS[i]);
140 //        }
141     }
142 
143     /***
144      * Empty implementation
145      */
146     public void stop()
147     {
148         if(log.isDebugEnabled())
149         {
150             log.debug("stopped");
151         }
152     }
153 
154 	public void setSecurityLevel(String fePath, String others, SharingLevel sharingDegree)
155 	{
156 		String sharingString = SwirlSecurity.LEVELS[sharingDegree.getValue()];
157        
158 		if(log.isDebugEnabled())
159 			log.debug("fePath: " + fePath);
160 		if(fePath.startsWith("/swirl"))
161 			fePath = "/slide" + fePath.substring("/swirl".length());
162 		if(log.isDebugEnabled())
163 			log.debug("using fePath: " + fePath);
164 		setSecurityLevel(fePath, others, sharingString);
165 	}
166 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/ProxyCommand.html
##-----------------TITLE------------------------##
ProxyCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.InputStream;
4   import java.io.OutputStream;
5   import java.util.Iterator;
6   import java.util.List;
7   
8   import javax.servlet.http.HttpServletRequest;
9   import javax.servlet.http.HttpServletResponse;
10  
11  import org.apache.commons.httpclient.HttpMethod;
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  import org.apache.webdav.lib.methods.XMLResponseMethodBase;
15  import org.dom4j.DocumentException;
16  import org.dom4j.Node;
17  import org.dom4j.io.DOMReader;
18  import org.dom4j.io.DOMWriter;
19  import org.w3c.dom.Document;
20  
21  import swirl.workspace.common.DocumentLogger;
22  import swirl.workspace.common.NetUtils;
23  
24  /***
25   * Abstract base class for commands that proxy to only one peer. All the child
26   * has to do is implement createMethod to customize what to send and this
27   * class will do the rest
28   *
29   * @author bpillet
30   */
31  public abstract class ProxyCommand extends BaseSwirlCommand
32  {
33      /*** commons-logging log that maps to this Command */
34      private Log log = LogFactory.getLog(this.getClass());
35  
36      /***
37       * See super
38       *
39       * @param req see super
40       * @param resp see super
41       * @param host see super
42       * @param path see super
43       * @param peerManager see super
44       */
45      public ProxyCommand(final HttpServletRequest req,
46                          final HttpServletResponse resp, final String host,
47                          final String path, final PeerManager peerManager)
48      {
49          super(req, resp, host, path, peerManager);
50      }
51  
52      /***
53       * Hook for subclasses to make this Command send a specific method
54       *
55       * @param url the url to the server
56       *
57       * @return an initialized HTTP Method
58       */
59      public abstract HttpMethod createMethod(final String url);
60  
61      /***
62       * Figures out which peer to proxy to and sends them a request based on the
63       * createMethod() hook
64       *
65       * @return the status code from the server
66       *
67       * @throws Exception if there's a problem proxying
68       */
69      public int execute() throws Exception
70      {
71          Peer peer = getTargetPeer();
72  
73          if(log.isDebugEnabled())
74          {
75              log.debug("using peer " + peer);
76          }
77  
78          String host = getHost();
79  
80          if(host.equals(""))
81          {
82              host = PeerManager.getLocalAddress().getHostAddress() + ':'
83                     + App.PORT;
84              if(log.isDebugEnabled())
85  	        {
86              	log.debug("changing host from empty to " + host);
87  	        }
88          }
89  
90          //String url = "http://" + host + getPath().replaceAll(" ", "%20");
91          //String url = "http://" + host + (NetUtils.encodeLastElement(getPath()));
92          String url = "http://" + host + (NetUtils.encodeEachElement(getPath()));
93  
94          if(log.isDebugEnabled())
95          {
96              log.debug("url: " + url);
97          }
98  
99          HttpMethod method = createMethod(url);
100 
101         method.setFollowRedirects(true);
102 
103         int ret = peer.executeHttpRequestMethod(method);
104 
105         if(log.isDebugEnabled())
106         {
107             log.debug("ret: " + ret);
108             log.debug("Reason: " + method.getStatusText());
109         }
110 
111         int status = ret;
112 
113         getResponse().setStatus(status);
114         copyHeaders(method);
115 
116         if(log.isDebugEnabled())
117         {
118             log.debug("before copying response body...");
119         }
120 
121         OutputStream out = getResponse().getOutputStream();
122         InputStream in = method.getResponseBodyAsStream();
123 
124         if(log.isDebugEnabled())
125         {
126             log.debug("Response from server: " + in);
127         }
128 
129         byte[] buffer = new byte[1024];
130         int len = 0;
131 
132         if(in != null)
133         {
134         	if(log.isDebugEnabled())
135 	        {
136         		log.debug("server response has a body. copying it to client");
137 	        }
138 
139             while((len = in.read(buffer, 0, buffer.length)) != -1)
140             {
141                 if(log.isDebugEnabled())
142                 {
143                     log.debug("writing " + len + " bytes to client");
144                 }
145 
146                 out.write(buffer, 0, len);
147             }
148 
149             in.close();
150         }
151         else
152         {
153         	if(log.isDebugEnabled())
154 	        {
155         		log.debug("server response doesn't have a stream body");
156 	        }
157 
158             if(method instanceof XMLResponseMethodBase)
159             {
160                 XMLResponseMethodBase xmlMethod = (XMLResponseMethodBase)method;
161                 Document serverResponseBody = xmlMethod.getResponseDocument();
162 
163                 if(serverResponseBody != null)
164                 {
165                     if(log.isDebugEnabled())
166                     {
167                         DocumentLogger.logDocument(log,
168                                                    "logging response document...",
169                                                    serverResponseBody);
170                     }
171 
172                     Document modifiedResponse = modifyServerResponseDocument(serverResponseBody);
173 
174                     serverResponseBody = modifiedResponse;
175                     DocumentLogger.logDocument(log, "modified xml response",
176                                                serverResponseBody);
177 
178                     // convert xml tree back into a stream
179                     DocumentLogger.writeDocument(serverResponseBody, out);
180                 }
181             }
182             else
183             {
184             	if(log.isDebugEnabled())
185     	        {
186             		log.debug("not doing anything with client body");
187     	        }
188             }
189         }
190 
191         out.flush();
192 
193         method.releaseConnection();
194         method.recycle();
195 
196         return status;
197     }
198 
199     /***
200      * change any references to slide to swirl so that the client doesn't see
201      * slide at all
202      *
203      * @param serverResponseBody the response from the server to change
204      *
205      * @return and document to send back to the client
206      *
207      * @throws DocumentException if there's a problem reading the response
208      */
209     protected Document modifyServerResponseDocument(final Document serverResponseBody)
210                                              throws DocumentException
211     {
212         DOMReader reader = new DOMReader();
213         org.dom4j.Document doc = reader.read(serverResponseBody);
214         List textNodes = doc.selectNodes("//text()");
215 
216         for(Iterator it = textNodes.iterator(); it.hasNext();)
217         {
218             Node textNode = (Node)it.next();
219             String text = textNode.getText();
220 
221             if(log.isDebugEnabled())
222             {
223                 log.debug("changing textNode with text: " + text + "\nto: "
224                           + text.replaceAll("slide", "swirl"));
225             }
226 
227             textNode.setText(text.replaceAll("slide", "swirl"));
228         }
229 
230         DOMWriter writer = new DOMWriter();
231 
232         return writer.write(doc);
233     }
234 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/persistence/PersistenceManager.html
##-----------------TITLE------------------------##
PersistenceManager xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Oct 19, 2004
3    *
4    * To change the template for this generated file go to
5    * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
6    */
7   package swirl.workspace.persistence;
8   
9   
10  import java.io.IOException;
11  import java.util.HashMap;
12  import java.util.Iterator;
13  import java.util.Map;
14  
15  import org.apache.commons.httpclient.methods.DeleteMethod;
16  import org.apache.commons.httpclient.methods.GetMethod;
17  import org.apache.commons.httpclient.methods.PutMethod;
18  import org.apache.commons.logging.Log;
19  import org.apache.commons.logging.LogFactory;
20  import org.apache.webdav.lib.methods.MkcolMethod;
21  import org.apache.webdav.lib.methods.MoveMethod;
22  import org.apache.webdav.lib.methods.PropFindMethod;
23  import org.picocontainer.Startable;
24  
25  import swirl.workspace.App;
26  import swirl.workspace.Peer;
27  import swirl.workspace.PeerManager;
28  import swirl.workspace.messages.MessageProcessor;
29  import swirl.workspace.security.SecurityManager;
30  import swirl.workspace.security.SwirlSecurity;
31  import swirl.workspace.viz.Model;
32  import swirl.workspace.viz.ModelListener;
33  import swirl.workspace.viz.SharingLevel;
34  import swirl.workspace.viz.pie.FileElement;
35  
36  /***
37   * @author Kari
38   *
39   * To change the template for this generated type comment go to
40   * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
41   */
42  public class PersistenceManager implements Startable, MessageProcessor, ModelListener {
43  	
44  	PeerManager peerManager;
45  	SecurityManager securityManager;
46  	
47  	public static final String SLIDE = "/slide";
48  	public static final String LOCALHOST = "http://localhost:" + App.PORT;
49  	public static final String BACKUPDIR = "~backupdir/";
50  	public static final String BACKUPPREFIX = SLIDE + "/" + BACKUPDIR;
51  
52  	public static final String BACKUPDIRPATH = LOCALHOST + BACKUPPREFIX;	
53  	public static final String TESTFILE = BACKUPDIRPATH + "testfile.txt";
54  
55  	
56  	private Map persistentFiles;
57  	
58  	private Peer me;
59  	
60  	private Model model;
61  	
62  	
63  	/*** TODO */
64  	protected Log log = LogFactory.getLog(this.getClass());
65  	
66  	
67  
68  	/* (non-Javadoc)
69  	 * @see org.picocontainer.Startable#start()
70  	 */
71  	public void start() {
72  		// TODO Auto-generated method stub
73  		if(log.isDebugEnabled())
74          {
75  			log.debug("In PersistenceManager start()");
76          }
77  
78  		String myId = PeerManager.getLocalUserID();
79  		if(log.isDebugEnabled())
80          {
81  			log.debug("LocalUserId is + myId");
82          }
83  		me = peerManager.getPeer(myId);
84  		if(log.isDebugEnabled())
85          {
86  			log.debug("Me (peer): " + me);
87          }
88  		
89  		// initialize the local ist of perssitent files
90  		persistentFiles = new HashMap();
91  		
92  		// clean out any existing backup directory
93  		deleteHiddenBackupDir();
94  		
95  		// create a hidden backup directory
96  		MkcolMethod mkcol = new MkcolMethod(BACKUPDIRPATH);
97  		try {
98  			if(log.isDebugEnabled())
99  	        {
100 				log.debug("executing mkcol for backup dir: " + me);
101 	        }
102 			me.executeHttpRequestMethodWithoutLog(mkcol);
103 			if(log.isDebugEnabled())
104 	        {
105 				log.debug("put status: " + mkcol.getStatusText());
106 	        }
107 		}
108 		catch(Exception ex)
109 		{
110 			System.err.println("----------error");
111 			ex.printStackTrace();
112 		}
113 		// set permissions on backup directory
114 		if(log.isDebugEnabled())
115         {
116 			log.debug("Setting backupdir permissions");
117         }
118 		securityManager.setSecurityLevel(BACKUPDIRPATH, SwirlSecurity.BACKUP, SwirlSecurity.READ_WRITE_COPY);
119 		if(log.isDebugEnabled())
120         {
121 			log.debug("BACKUP set");
122         }
123 		securityManager.setSecurityLevel(BACKUPDIRPATH, SwirlSecurity.OTHERS, SwirlSecurity.HIDDEN);
124 		if(log.isDebugEnabled())
125         {
126 			log.debug("OTHERS set");
127         }
128 		securityManager.setSecurityLevel(BACKUPDIRPATH, SwirlSecurity.ME, SwirlSecurity.HIDDEN);
129 		if(log.isDebugEnabled())
130         {
131 			log.debug("ME set");
132         }
133 		
134 		// now we need to populate it with the persitent files acquired from the model
135 		FileElement[] allFiles = model.getFiles();
136 		this.filesAdded(allFiles);
137 		
138 		// register as a model listener
139 		model.addModelChangeListener(this);
140 	}
141 
142 	/* (non-Javadoc)
143 	 * @see org.picocontainer.Startable#stop()
144 	 */
145 	public void stop() {
146 		// TODO Auto-generated method stub
147 
148 	}
149 
150 	/* (non-Javadoc)
151 	 * @see swirl.workspace.messages.MessageProcessor#processMessage(java.util.Map)
152 	 */
153 	public void processMessage(Map msg) {
154 		// TODO Auto-generated method stub
155 		
156 	}
157 	
158 	public PersistenceManager (PeerManager peerManager, SecurityManager securityManager, Model model) {
159 		this.peerManager = peerManager;
160 		this.securityManager = securityManager;
161 		this.model = model;
162 	}
163 	
164 	/* (non-Javadoc)
165 	 * @see swirl.workspace.viz.ModelListener#/(swirl.workspace.viz.pie.FileElement)
166 	 */
167 	public synchronized void fileAdded(FileElement file) {
168 		if(log.isDebugEnabled())
169         {
170 			log.debug("in PersistenceManager.fileAdded(" + getSwirlURI(file) + ");");
171         }
172 		// check if file is persistence
173 
174 		if (fileIsPersistent(file)) {
175 			if(log.isDebugEnabled())
176 	        {
177 				log.debug("file is persistent.");
178 	        }
179 			if (!isMyFile(file)) {
180 				if(log.isDebugEnabled())
181 		        {
182 					log.debug("file is not mine.");
183 		        }
184 				persistentFiles.put(getSwirlURI(file), file);
185 				putHiddenBackup(file);
186 			}
187 		}
188 	}
189 
190 	/* (non-Javadoc)
191 	 * @see swirl.workspace.viz.ModelListener#/(swirl.workspace.viz.pie.FileElement)
192 	 */
193 	public synchronized void fileUpdated(FileElement file) {
194 		if(log.isDebugEnabled())
195         {
196 			log.debug("in PersistenceManager.fileUpdated(" + getSwirlURI(file) + ");");
197         }
198 		fileAdded(file);
199 	}
200 
201 	/* (non-Javadoc)
202 	 * @see swirl.workspace.viz.ModelListener#fileDeleted(swirl.workspace.viz.pie.FileElement)
203 	 */
204 	public void fileDeleted(FileElement file) {
205 		if(log.isDebugEnabled())
206         {
207 			log.debug("in fileDeleted (" + file.getKey() + ")");
208         }
209 		// if perisitent and not mine remove from list, and remove backup
210 		if (! isMyFile(file)) {
211 			// remove from persistent files map
212 			persistentFiles.remove(getSwirlURI(file));
213 			// delete hidden backup
214 			deleteHiddenBackup(file);
215 		}
216 	}
217 
218 	/* (non-Javadoc)
219 	 * @see swirl.workspace.viz.ModelListener#filesAdded(swirl.workspace.viz.pie.FileElement[])
220 	 */
221 	public void filesAdded(FileElement[] files) {
222 		if(log.isDebugEnabled())
223         {
224 			log.debug("in PersistenceManager.filesAdded, number of files: " + files.length);
225         }
226 		for (int i = 0; i < files.length; ++i) {
227 			fileAdded(files[i]);
228 		}
229 	}
230 
231 
232 	/* (non-Javadoc)
233 	 * @see swirl.workspace.viz.ModelListener#replaceFiles(java.lang.String, swirl.workspace.viz.pie.FileElement[])
234 	 */
235 	public void replaceFiles(String peerId, FileElement[] files) {
236 		log.warn("WARNING: PersistentManager recieved replaceFiles notification.");
237 	}
238 
239 	/* (non-Javadoc)
240 	 * @see swirl.workspace.viz.ModelListener#propertiesChanged(swirl.workspace.viz.pie.FileElement)
241 	 * 
242 	 * We need to synchronize this method because as we drag the file through the
243 	 * cirles in the GUI, this method gets called multiple times. It may happen that two 
244 	 * threads get to execute this method at the same time, creating a backup file on
245 	 * top of an existing one (in progress of being created).
246 	 */
247 	public synchronized void propertiesChanged(FileElement file, java.util.Map msg) {
248 		// see if we have a sharing degree change
249 		if(msg.containsKey("SET_" + SharingLevel.SHARING_PROPERTY_NAME)) {
250 			String path = getSwirlURI(file);
251 			if(log.isDebugEnabled())
252 	        {
253 				log.debug("in PersistenceManager.propertiesChanged(" + path + ");");
254 	        }
255 			// check if file is persistence
256 			if (fileIsPersistent(file)) {
257 				if (!isMyFile(file)) {
258 					// check if it is in our list of persistent files, if so, then we already have a backup
259 					// in the case where a backup file has been recovered elsewhere, avoid recreating backup		
260 					if (!persistentFiles.containsKey(path)) {
261 						 putHiddenBackup(file);
262 					}
263 					persistentFiles.put(path, file);
264 				}		
265 			} else {
266 				// check if files was moved out of persistent sharing level
267 				if (persistentFiles.containsKey(path)) {
268 					if(log.isDebugEnabled())
269 			        {
270 						log.debug("file " + path + " moved out of persistent level, deleting hidden backup");
271 			        }
272 					persistentFiles.remove(path);
273 					deleteHiddenBackup(file);
274 				}
275 			}	
276 		}	
277 	}
278 
279 	/* (non-Javadoc)
280 	 * @see swirl.workspace.viz.ModelListener#userJoined(swirl.workspace.Peer)
281 	 */
282 	public void userJoined(Peer peer) {
283 		// TODO Auto-generated method stub
284 		
285 	}
286 
287 	/* (non-Javadoc)
288 	 * @see swirl.workspace.viz.ModelListener#userLeft(java.lang.String)
289 	 */
290 	public synchronized void userLeft(String peerId) {
291 		// check if I am the next master
292 		boolean iAmNext = amINextMaster();
293 		if(log.isDebugEnabled())
294         {
295 			log.debug("in userLeft(" + peerId + "): iAmNext = " + iAmNext);
296         }
297 		// did they have any persistent files?  check the map
298 		if(log.isDebugEnabled())
299         {
300 			log.debug("number of entries in persistentFiles map: " + persistentFiles.entrySet().size());
301         }
302 		FileElement[] files = new FileElement[persistentFiles.entrySet().size()];
303 		if(log.isDebugEnabled())
304         {
305 			log.debug("number of files in files array: " + files.length);
306         }
307 		persistentFiles.values().toArray(files);
308 		FileElement fe;
309 		
310 		if (iAmNext) {
311 			for (int i = 0; i < files.length; i++) {
312 				fe = files[i];	
313 				if(log.isDebugEnabled())
314 		        {
315 					log.debug(fe.getOwnerKey());
316 		        }
317 				if (fe.getOwnerKey().equals(peerId)) {
318 					if(log.isDebugEnabled())
319 			        {
320 						log.debug("promoting file " + fe.getKey());
321 			        }
322 					promoteBackupToMaster(fe);
323 					persistentFiles.remove(getSwirlURI(fe));
324 				}	
325 			}
326 		}
327 		else {
328 			for (int i = 0; i < files.length; i++) {
329 				fe = files[i];	
330 				if(log.isDebugEnabled())
331 		        {
332 					log.debug(fe.getOwnerKey());
333 		        }
334 				if (fe.getOwnerKey().equals(peerId)) {
335 					if(log.isDebugEnabled())
336 			        {
337 						log.debug("urlmapping update file " + fe.getKey());
338 			        }
339 					updateUrlToHostMapping(fe);
340 				}	
341 			}
342 		}
343 	}
344 
345 
346 	/* (non-Javadoc)
347 	 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
348 	 */
349 	public void flashIt(FileElement fe, String uColor) {
350 		// TODO Auto-generated method stub
351 		
352 	}
353 	
354 	private boolean fileIsPersistent (FileElement file) {
355 		int SharingLevel = file.getShareDegree().getValue();
356 		if(log.isDebugEnabled())
357         {
358 			log.debug("in fileIsPersistent:  sharing level for " + file.getKey() + " is " + SharingLevel);
359         }
360 		return  SharingLevel == 4;
361 	}
362 	
363 	private String getSwirlURI (FileElement file) {		
364 		return getSlideURI(file).replaceFirst("slide", "swirl");
365 	}
366 	
367 	private String getSlideURI (FileElement file) {
368 		String slidePath = file.getKey();
369 		return LOCALHOST + slidePath;
370 	}
371 	
372 	private boolean equals (FileElement file1, FileElement file2) {
373 		return getSwirlURI(file1).equals(getSwirlURI(file2));
374 	}
375 	
376 	private boolean isMyFile (FileElement file) {
377 		return file.getOwnerKey().equals(me.getUniqueID());
378 	}
379 	
380 	private String createBackupPath (String path) {
381 		String backupPath;
382 		int i = path.lastIndexOf('/');
383 		String front = path.substring(0,i+1);
384 		String back = path.substring(i+1);
385 		backupPath = front + BACKUPDIR + back;
386 		return backupPath.replaceFirst("swirl", "slide");
387 	}
388 
389 	/***
390 	 * @return	returns true if my peerID is the smallest (lexographically) in the list of existing peers
391 	 */
392 	private boolean amINextMaster() {
393 		Map peers = peerManager.getPeers();
394 		Iterator iter = peers.values().iterator();
395 		String smallestID;
396 		if (iter.hasNext()) {
397 			smallestID = ((Peer)iter.next()).getUniqueID();
398 		} else { return false; }
399 
400 		while (iter.hasNext()) {
401 			Peer peer = (Peer) iter.next();
402 			String id = peer.getUniqueID();
403 			if (id.compareTo(smallestID) > 0) {
404 				smallestID = id;
405 			}
406 		}
407 		return smallestID.equals (me.getUniqueID());
408 	}
409 
410 
411 	private void putHiddenBackup (FileElement file) {
412 		// get contents of file
413 		if(log.isDebugEnabled())
414         {
415 			log.debug("in putHiddenBackup");
416         }
417 		String path = getSlideURI(file); //getSwirlURI(file);
418 		Peer peer = peerManager.getPeer(file.getOwnerKey());
419 		
420 		if(log.isDebugEnabled())
421         {
422 			log.debug("constructing GetMethod on path: " + path);
423         }
424 		
425 		boolean getDone = false;
426 		GetMethod get = null;
427 		while(!getDone) {
428 		get = new GetMethod(path);
429 		if(log.isDebugEnabled())
430         {
431 			log.debug("after constructing a new GetMethod");
432         }
433 		try {
434 			if(log.isDebugEnabled())
435 	        {
436 				log.debug("executing get for backup file contents: " + peer);
437 	        }
438 			// make slide call directly to peer to allow filtering
439 			// this hides the "get" when making a backup copy
440 			int status = peer.executeHttpRequestMethodWithoutLog(get);
441 			if (status == 200) // ugly
442 			    getDone = true;
443 			if(log.isDebugEnabled())
444 	        {
445 				log.debug("get status: " + get.getStatusText());
446 	        }
447 		}
448 		catch(Exception ex)
449 		{
450 			System.err.println("----------error");
451 			ex.printStackTrace();
452 		}
453 		}
454 		
455 		String backupPath = createBackupPath(path);
456 		if(log.isDebugEnabled())
457         {
458 			log.debug("creating backup file at:" + backupPath);
459         }
460 		PutMethod put = new PutMethod(backupPath);
461 		put.setRequestBody(get.getResponseBodyAsString());
462 		try {
463 			if(log.isDebugEnabled())
464 	        {
465 				log.debug("executing put for backup file: " + me);
466 	        }
467 			me.executeHttpRequestMethodWithoutLog(put);
468 			if(log.isDebugEnabled())
469 	        {
470 				log.debug("put status: " + put.getStatusText());
471 	        }
472 		}
473 		catch(Exception ex)
474 		{
475 			System.err.println("----------error");
476 			ex.printStackTrace();
477 		}
478 	}
479 	
480 	private void deleteHiddenBackup (FileElement file) {
481 		DeleteMethod delete = new DeleteMethod(createBackupPath(getSwirlURI(file)));
482 		try {
483 			log.debug("executing delete for backup file: " + me);
484 			me.executeHttpRequestMethodWithoutLog(delete);
485 			log.debug("get status: " + delete.getStatusText());
486 		}
487 		catch(Exception ex)
488 		{
489 			System.err.println("----------error");
490 			ex.printStackTrace();
491 		}
492 	}
493 	
494 	private void deleteHiddenBackupDir () {
495 		DeleteMethod delete = new DeleteMethod(BACKUPDIRPATH);
496 		try {
497 			if(log.isDebugEnabled())
498 	        {
499 				log.debug("executing delete for backup dir: " + me);
500 	        }
501 			me.executeHttpRequestMethodWithoutLog(delete);
502 			if(log.isDebugEnabled())
503 	        {
504 				log.debug("get status: " + delete.getStatusText());
505 	        }
506 		}
507 		catch(Exception ex)
508 		{
509 			System.err.println("----------error");
510 			ex.printStackTrace();
511 		}
512 	}
513 
514 
515 	private void promoteBackupToMaster(FileElement file) {
516 		String path = file.getKey();
517 
518 		String backupPath = createBackupPath(path);
519 		//move backup file out of backup directory
520 		if(log.isDebugEnabled())
521         {
522 			log.debug("moving backup from " + backupPath + " to " + path);
523         }
524 		MoveMethod move = new MoveMethod(backupPath, path, true);
525 		try {
526 			if(log.isDebugEnabled())
527 	        {
528 				log.debug("executing move for backup file: " + me);
529 	        }
530 			me.executeHttpRequestMethod(move);
531 			if(log.isDebugEnabled())
532 	        {
533 				log.debug("move status: " + move.getStatusText());
534 	        }
535 		}
536 		catch(Exception ex)
537 		{
538 			System.err.println("----------error");
539 			ex.printStackTrace();
540 		}
541 		if(log.isDebugEnabled())
542         {
543 			log.debug("setting sharing level on :" + path);
544         }
545 		model.setSharingDegree(file, new SharingLevel(4));
546 		updateUrlToHostMapping(file);
547 	}
548 
549 	private void updateUrlToHostMapping(FileElement file) {
550 	    try {
551             Thread.sleep(10000);
552         } catch (InterruptedException e1) {
553             // TODO Auto-generated catch block
554             e1.printStackTrace();
555         }
556 	    
557 		String path = file.getKey();
558 
559 		String backupPath = createBackupPath(path);
560 
561 		//execute a propfind to try to force the host/file mapping to update in the proxy
562 		int			retry = 1;
563 		try {
564 		    for (int i = 0; i<retry; i++) {
565 				PropFindMethod propFind = new PropFindMethod("/swirl/", 1);
566 		        int status = me.executeHttpRequestMethodWithoutLog(propFind);
567 		        if(log.isDebugEnabled())
568 		        {
569 		        	log.debug("Second Propfind: " + Integer.toString(status));
570 		        }
571 		        if (status == 200 || status == 207)
572 		            break;
573 		    }
574 		} catch (IOException e) {
575 			e.printStackTrace();
576 		}
577 		String swirlPath = path.replaceFirst("slide", "swirl");
578 		try {
579 		    for (int i = 0; i<retry; i++) {
580 				PropFindMethod propFind2 = new PropFindMethod(swirlPath, 1);
581 				int status = me.executeHttpRequestMethodWithoutLog(propFind2);
582 				if(log.isDebugEnabled())
583 		        {
584 					log.debug("Second Propfind: " + Integer.toString(status));
585 		        }
586 		        if (status == 200 || status == 207)
587 		            break;
588 		    }
589 		} catch (IOException e) {
590 			e.printStackTrace();
591 		}
592 	}
593 
594 	/* (non-Javadoc)
595 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
596 	 */
597 	public void backupPromotedToPersistent(FileElement file) {
598 		// TODO Auto-generated method stub
599 		
600 	}
601 
602 	/* (non-Javadoc)
603 	 * @see swirl.workspace.messages.MessageProcessor#initialMessageProcessor()
604 	 */
605 	public void initializeMessageProcessor() {
606 		// TODO Auto-generated method stub
607 		
608 	}
609 
610 
611 
612 
613 
614 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/IncreaseDotSizeAction.html
##-----------------TITLE------------------------##
IncreaseDotSizeAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.event.ActionEvent;
4   import java.awt.event.KeyEvent;
5   
6   import javax.swing.ImageIcon;
7   import javax.swing.KeyStroke;
8   
9   /***
10   * @author bpillet
11   */
12  public class IncreaseDotSizeAction extends SVGPieAction {
13  
14  	private static final long serialVersionUID = 1L;
15  
16  	public IncreaseDotSizeAction()
17  	{
18          putValue(ACTION_COMMAND_KEY, "IncreaseSize");
19  
20          putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_S));
21          
22          putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_LESS, ActionEvent.CTRL_MASK));
23  
24          //        The key used to determine the command string for the ActionEvent that
25          // will be created when an Action is going to be notified as the result
26          // of residing in a Keymap associated with a JComponent.
27          putValue(LONG_DESCRIPTION,
28                   "Increases the size of the dot");
29  
30          //        The key used for storing a longer description for the action, could
31          // be used for context-sensitive help.
32          //putValue(MNEMONIC_KEY, new Character('S'));
33          //        The key used for storing an int key code to be used as the mnemonic
34          // for the action.
35          putValue(NAME, "Increase Dot Size");
36  
37          //        The key used for storing the name for the action, used for a menu or
38          // button.
39          putValue(SHORT_DESCRIPTION, "Increases the size of the dot");
40  
41          //        The key used for storing a short description for the action, used for
42          // tooltip text.
43          putValue(SMALL_ICON, new ImageIcon("resources/increasedot.gif"));
44  
45          //		The key used for storing a small icon for the action, used for
46          // toolbar buttons
47  	}
48  	
49  	public void actionPerformed(ActionEvent e) {
50  		if(getView() != null)
51  			getView().incrementDotSize();
52  	}
53  
54  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PeerManagerListener.html
##-----------------TITLE------------------------##
PeerManagerListener xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   /***
4    * DOCUMENT ME!
5    *
6    * @author bpillet
7    */
8   public interface PeerManagerListener
9   {
10      /***
11       * the peer has joined the network
12       *
13       * @param peer a new peer
14       */
15      void peerJoined(Peer peer);
16  
17      /***
18       * the peer has left the network
19       *
20       * @param peer the peer that left
21       */
22      void peerLeft(Peer peer);
23  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/RMIRegistryImpl.html
##-----------------TITLE------------------------##
RMIRegistryImpl xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.io.IOException;
4   import java.rmi.RMISecurityManager;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   
9   import swirl.workspace.Configuration;
10  
11  /***
12   * DOCUMENT ME!
13   *
14   * @author bpillet Implementation based on the commandline tool
15   */
16  public class RMIRegistryImpl implements RMIRegistry
17  {
18      /*** TODO */
19      public static final int RMIPORT = 1099;
20  
21      /*** TODO */
22      private static Process rmiregistry;
23  
24      /*** common-logging logger */
25      private Log log = LogFactory.getLog(this.getClass());
26  
27      /*** TODO */
28      private int port;
29  
30      /***
31       * Creates a new RMIRegistryImpl object.
32       */
33      public RMIRegistryImpl()
34      {
35          this(RMIPORT);
36      }
37  
38      /***
39       * Creates a new RMIRegistryImpl object.
40       *
41       * @param port TODO
42       */
43      public RMIRegistryImpl(int port)
44      {
45          if(System.getSecurityManager() == null)
46          {
47              System.setSecurityManager(new RMISecurityManager());
48          }
49  
50          this.port = port;
51      }
52  
53      /***
54       * TODO
55       *
56       * @return TODO
57       */
58      public boolean isAvailable()
59      {
60          return Configuration.pingPort(1099);
61      }
62  
63      /***
64       * TODO
65       */
66      public void start()
67      {
68          if(log.isDebugEnabled())
69          {
70              log.debug("starting rmiregistry");
71          }
72  
73          try
74          {
75              rmiregistry = Runtime.getRuntime().exec("rmiregistry");
76          }
77          catch(IOException ex)
78          {
79              log.error("Error trying to start rmiregistry", ex);
80          }
81  
82          if(log.isDebugEnabled())
83          {
84              log.debug("started");
85          }
86      }
87  
88      /***
89       * TODO
90       */
91      public void stop()
92      {
93          if(log.isDebugEnabled())
94          {
95              log.debug("stopping rmiregistry");
96          }
97  
98          rmiregistry.destroy();
99  
100         if(log.isDebugEnabled())
101         {
102             log.debug("stopped rmiregistry");
103         }
104     }
105 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/PropertyFileLauncher.html
##-----------------TITLE------------------------##
PropertyFileLauncher xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 25, 2004
3    */
4   package swirl.workspace.common;
5   
6   import java.io.File;
7   import java.io.FileInputStream;
8   import java.io.FileNotFoundException;
9   import java.io.IOException;
10  import java.util.Properties;
11  
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  
15  /***
16   * DOCUMENT ME!
17   *
18   * @author bpillet
19   */
20  public abstract class PropertyFileLauncher extends BaseFileLauncher
21  {
22      /*** the logger for this class */
23      private Log log = LogFactory.getLog(this.getClass());
24  
25      /***
26       * Creates a new PropertyFileLauncher object.
27       */
28      public PropertyFileLauncher()
29      {
30          super();
31      }
32  
33      /***
34       * TODO
35       *
36       * @return TODO
37       */
38      protected Properties getExtToMime()
39      {
40          Properties ret = new Properties();
41          String[] files = 
42                           {
43                               "./conf/ext2mime.properties",
44                               
45          System.getProperty("user.home") + "/ext2mime.properties"
46                           };
47  
48          for(int i = 0; i < files.length; ++i)
49          {
50              loadProperties(files[i], ret);
51          }
52  
53          return ret;
54      }
55  
56      /***
57       * TODO
58       *
59       * @return TODO
60       */
61      protected Properties getMimeToCmd()
62      {
63          Properties ret = new Properties();
64          String[] files = 
65                           {
66                               "./conf/mime2cmd." + getOS() + ".properties",
67                               
68          System.getProperty("user.home") + "/mime2cmd.properties"
69                           };
70  
71          for(int i = 0; i < files.length; ++i)
72          {
73              loadProperties(files[i], ret);
74          }
75  
76          return ret;
77      }
78  
79      /***
80       * TODO
81       *
82       * @return TODO
83       */
84      protected abstract String getOS();
85  
86      /***
87       * TODO
88       *
89       * @param fileName TODO
90       * @param props TODO
91       */
92      private void loadProperties(String fileName, Properties props)
93      {
94          try
95          {
96              FileInputStream in = new FileInputStream(fileName);
97  
98              props.load(in);
99          }
100         catch(FileNotFoundException e)
101         {
102             log.info("Could not find " + (new File(fileName)).getAbsolutePath());
103         }
104         catch(IOException e)
105         {
106             log.error(e, e);
107         }
108     }
109 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/YanceesConfigImpl.html
##-----------------TITLE------------------------##
YanceesConfigImpl xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.io.File;
4   
5   import org.apache.commons.logging.Log;
6   import org.apache.commons.logging.LogFactory;
7   
8   /***
9    * DOCUMENT ME!
10   *
11   * @author bpillet
12   */
13  public class YanceesConfigImpl implements YanceesConfig
14  {
15      /*** TODO */
16      File file;
17  
18      /*** common-logging logger */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      /***
22       * Creates a new YanceesConfigImpl object.
23       *
24       * @param fileName TODO
25       */
26      public YanceesConfigImpl(String fileName)
27      {
28          this(new File(fileName));
29  
30          if(log.isDebugEnabled())
31          {
32              log.debug("(" + fileName + ")");
33          }
34      }
35  
36      /***
37       * Creates a new YanceesConfigImpl object.
38       *
39       * @param file TODO
40       */
41      public YanceesConfigImpl(File file)
42      {
43          this.file = file;
44  
45          if(log.isDebugEnabled())
46          {
47              log.debug("(" + file + ")");
48          }
49      }
50  
51      /***
52       * TODO
53       *
54       * @return TODO
55       */
56      public File getConfig()
57      {
58          if(log.isDebugEnabled())
59          {
60              log.debug("getConfig()");
61          }
62  
63          return file;
64      }
65  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SinglePaneHolderManager.html
##-----------------TITLE------------------------##
SinglePaneHolderManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   
5   import javax.swing.JComponent;
6   import javax.swing.JPanel;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  
11  /***
12   * @author bpillet
13   */
14  public class SinglePaneHolderManager implements HolderManager
15  {
16  	private Log log = LogFactory.getLog(this.getClass());
17  	private JPanel root;
18  	private Visualizer vizualizer = null;
19  	
20  	public SinglePaneHolderManager()
21  	{
22  		root = new JPanel(new BorderLayout());
23  
24  	}
25  	
26  	
27  	public JComponent getRootComponent() {
28  		return root;
29  	}
30  
31  	public Visualizer getSelectedVisualizer() {
32  		return vizualizer;
33  	}
34  
35  	public void addVisualizer(Visualizer viz) {
36          if(log.isDebugEnabled())
37          {
38          	log.debug("addVisualizer(" + viz + ":" + viz.getClass() + ")");
39          }
40  		if(vizualizer == null)
41  		{
42  			vizualizer = viz;
43  			root.add((JComponent)vizualizer, BorderLayout.CENTER);
44  		}
45  		else
46  			throw new RuntimeException("The HolderManager for this configuration only supports 1 visualizer.");
47  	}
48  
49  	public void removeVisualizer(Visualizer viz) {
50  
51  	}
52  
53  	public void selectVisualizer(String title) {
54  
55  	}
56  
57  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/SwirlSecurity.html
##-----------------TITLE------------------------##
SwirlSecurity xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   /***
4    * DOCUMENT ME!
5    *
6    * @author bpillet
7    */
8   public interface SwirlSecurity
9   {
10      /*** TODO */
11      static final String HIDDEN = "me only";
12  
13      /*** TODO */
14      static final String SEE_ONLY = "see only";
15  
16      /*** TODO */
17      static final String READ_ONLY = "read only";
18  
19      /*** TODO */
20      static final String READ_WRITE_COPY = "read, write, and copy";
21  
22      /*** TODO */
23      static final String PERSISTENT = READ_WRITE_COPY + " and persistent";
24  
25      /*** TODO */
26      static final String[] LEVELS = 
27                                     {
28                                         HIDDEN, SEE_ONLY, READ_ONLY,
29                                         READ_WRITE_COPY, PERSISTENT
30                                     };
31  
32      /*** TODO */
33      static final String ME = "me";
34  
35      /*** TODO */
36      static final String OTHERS = "others";
37      
38  	/*** TODO */
39  	static final String BACKUP = "backup";
40  
41      /***
42       * DOCUMENT ME!
43       *
44       * @param path TODO
45       * @param role TODO
46       * @param securityLevel TODO
47       *
48       * @throws UnsupportedOperationException this implementation does not
49       *         support the specified securityLevel
50       */
51      public void setSecurityLevel(String path, String role, String securityLevel)
52                            throws UnsupportedOperationException;
53  
54      /***
55       * TODO
56       *
57       * @param path TODO
58       * @param role TODO
59       *
60       * @return TODO
61       */
62      public String getSecurityLevel(String path, String role);
63  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/ExportAction.html
##-----------------TITLE------------------------##
ExportAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.event.ActionEvent;
4   import java.awt.event.KeyEvent;
5   
6   import javax.swing.ImageIcon;
7   import javax.swing.KeyStroke;
8   
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  import org.w3c.dom.svg.SVGDocument;
12  
13  import swirl.workspace.viz.Model;
14  
15  /***
16   * DOCUMENT ME!
17   *
18   * @author bpillet
19   */
20  public class ExportAction extends SVGPieAction
21  {
22      /*** TODO */
23      private static final long serialVersionUID = 1L;
24  
25      /*** TODO */
26      private Log log = LogFactory.getLog(this.getClass());
27  
28      /*** TODO */
29      private Model pieModel;
30  
31      /*** TODO */
32      private SVGDocument document;
33  
34      /***
35       *
36       */
37      public ExportAction(SVGDocument doc, Model model)
38      {
39          super();
40          document = doc;
41          pieModel = model;
42  
43          putValue(ACTION_COMMAND_KEY, "ExportFiles");
44  
45          putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_S));
46          
47          putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));
48  
49          //        The key used to determine the command string for the ActionEvent that
50          // will be created when an Action is going to be notified as the result
51          // of residing in a Keymap associated with a JComponent.
52          putValue(LONG_DESCRIPTION,
53                   "Saves any modified files in the workspace to the local file system");
54  
55          //        The key used for storing a longer description for the action, could
56          // be used for context-sensitive help.
57          //putValue(MNEMONIC_KEY, new Character('S'));
58          //        The key used for storing an int key code to be used as the mnemonic
59          // for the action.
60          putValue(NAME, "Save My Changed Files...");
61  
62          //        The key used for storing the name for the action, used for a menu or
63          // button.
64          putValue(SHORT_DESCRIPTION, "Export modified files to hard drive");
65  
66          //        The key used for storing a short description for the action, used for
67          // tooltip text.
68          putValue(SMALL_ICON, new ImageIcon("resources/export.gif"));
69  
70          //		The key used for storing a small icon for the action, used for
71          // toolbar buttons
72      }
73  
74      /***
75       *
76       */
77      public void actionPerformed(ActionEvent e)
78      {
79          if(log.isDebugEnabled())
80          {
81              log.debug("doing files export");
82          }
83  
84          pieModel.exportFiles(document);
85  
86      }
87  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/ImportDirectoryAction.html
##-----------------TITLE------------------------##
ImportDirectoryAction xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Nov 15, 2004
3    *
4    * TODO To change the template for this generated file go to
5    * Window - Preferences - Java - Code Style - Code Templates
6    */
7   package swirl.workspace.viz.pie.actions;
8   
9   import java.awt.Component;
10  import java.awt.event.ActionEvent;
11  import java.awt.event.KeyEvent;
12  import java.io.File;
13  import java.util.Vector;
14  
15  import javax.swing.ImageIcon;
16  import javax.swing.JFileChooser;
17  import javax.swing.KeyStroke;
18  
19  import org.apache.commons.logging.Log;
20  import org.apache.commons.logging.LogFactory;
21  
22  import swirl.workspace.viz.Model;
23  import swirl.workspace.viz.SwirlFileFilter;
24  import swirl.workspace.viz.pie.Util;
25  
26  /***
27   * @author Jie Ren
28   *
29   * TODO To change the template for this generated type comment go to
30   * Window - Preferences - Java - Code Style - Code Templates
31   */
32  public class ImportDirectoryAction extends SVGPieAction 
33  {
34  
35      /*** TODO */
36      private static final long serialVersionUID = 1L;
37  
38      /*** TODO */
39      private Log log = LogFactory.getLog(this.getClass());
40  
41      /*** TODO */
42      private Model pieModel;
43  
44      /***
45       * Creates a new ImportAction object.
46       *
47       * @param model TODO
48       */
49      public ImportDirectoryAction(Model model)
50      {
51          super();
52          pieModel = model;
53  
54          putValue(ACTION_COMMAND_KEY, "ImportDirectory");
55  
56          putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_D));
57          
58          putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_D, ActionEvent.CTRL_MASK));
59  
60         //        The key used to determine the command string for the ActionEvent that
61          // will be created when an Action is going to be notified as the result
62          // of residing in a Keymap associated with a JComponent.
63          putValue(LONG_DESCRIPTION,
64                   "Imports local files under a directory into the shared workspace");
65  
66          //        The key used for storing a longer description for the action, could
67          // be used for context-sensitive help.
68          //putValue(MNEMONIC_KEY, new Character('S'));
69          //        The key used for storing an int key code to be used as the mnemonic
70          // for the action.
71          putValue(NAME, "Import Folder to Workspace...");
72  
73          //        The key used for storing the name for the action, used for a menu or
74          // button.
75          putValue(SHORT_DESCRIPTION,
76                   "Imports local files under a directory into the shared workspace");
77  
78          //        The key used for storing a short description for the action, used for
79          // tooltip text.
80          putValue(SMALL_ICON, new ImageIcon("resources/importDir.gif"));
81  
82          //		The key used for storing a small icon for the action, used for
83          // toolbar buttons
84      }
85      
86  	/* (non-Javadoc)
87  	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
88  	 */
89  	public void actionPerformed(ActionEvent e) {
90          File f = null;
91          JFileChooser fileChooser = new JFileChooser(); //makeAbsolute(currentExportPath));
92  
93          fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
94          fileChooser.setDialogTitle("Choose a directory to import into swirl work space...");
95          fileChooser.setFileHidingEnabled(false);
96          fileChooser.addChoosableFileFilter(new SwirlFileFilter());
97  
98          int choice = fileChooser.showOpenDialog((Component)e.getSource());
99  
100         if(choice == JFileChooser.APPROVE_OPTION)
101         {
102             f = fileChooser.getSelectedFile();
103             java.io.FileFilter fileFilter = (java.io.FileFilter)(new SwirlFileFilter());
104             Vector files = Util.getAllFiles(f, fileFilter);
105 
106             if(log.isDebugEnabled())
107             {
108                 log.debug("imported file number is " + files.size());
109             }
110 
111             pieModel.importFiles(files, null, true);
112 
113         }
114 
115 	}
116 
117 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SwirlGUI.html
##-----------------TITLE------------------------##
SwirlGUI xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Point;
4   import java.awt.event.WindowAdapter;
5   import java.awt.event.WindowEvent;
6   import java.util.Vector;
7   
8   import javax.swing.JFrame;
9   import javax.swing.UIManager;
10  import javax.swing.WindowConstants;
11  
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  import org.picocontainer.Startable;
15  
16  /***
17   * TODO
18   *
19   * @author $author$
20   * @version $Revision: 1.25 $
21   */
22  public class SwirlGUI extends JFrame implements Startable
23  {
24      /*** TODO */
25      private static final long serialVersionUID = 1L;
26  
27      /*** TODO */
28      private HolderManager manager;
29  
30      /*** TODO */
31      private Log log = LogFactory.getLog(this.getClass());
32  
33      /*** TODO */
34      private SwirlGUIConfig config;
35  
36      /*** TODO */
37      private Vector visualizers = new Vector();
38  
39      /***
40       * Creates a new SwirlGUI object.
41       *
42       * @param visualizers TODO
43       * @param man TODO
44       * @param conf TODO
45       */
46      public SwirlGUI(final Visualizer[] visualizers, HolderManager man,
47                      SwirlGUIConfig conf)
48      {
49          try {
50              UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
51          }
52          catch(Exception e) {
53              e.printStackTrace();
54          }
55  
56          config = conf;
57  
58          Point pos = config.getWindowPosition();
59          
60          this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
61  
62          setLocation(pos);
63  
64          manager = man;
65          for(int i = 0; i < visualizers.length; ++i)
66          {
67          		addWindowListener((BaseVisualizer) visualizers[i]);
68          		manager.addVisualizer(visualizers[i]);
69          		visualizers[i].setRoot(this);
70          }
71          addWindowListener(new WindowAdapter()
72              {
73                  public void windowClosing(WindowEvent e)
74                  {
75                      if(log.isDebugEnabled())
76                      {
77                          log.debug("windowClosing");
78                      }
79  
80                      config.saveGUI(SwirlGUI.this);
81  
82                      if(log.isDebugEnabled())
83                      {
84                          log.debug("done saving gui");
85                      }
86  
87                      //System.exit(0);
88                  }
89                  
90  	      });
91          
92          //addWindowFocusListener(new FocusListener()
93          	//	{
94            //  		public void windowGainedFocus(WindowEvent e) {
95             // 			getfocus_actionPerformed(e);
96             // 		}
97          		//}	
98          //);
99  
100         setTitle("Swirl Server");
101 
102         this.getContentPane().add(manager.getRootComponent());
103         pack();
104         setSize(config.getWindowSize());
105     }
106 
107     
108 	public void performRepaint() {
109         if(log.isDebugEnabled())
110         {
111         	log.debug("performRepaint: performed");
112         }
113 		repaint();
114 	}
115 
116 	private void setMenuBar (Visualizer vis) {
117         if(log.isDebugEnabled())
118         {
119         	log.debug("setMenuBar performed - visualizer: " + vis.getName() + "MenuBar: " + vis.getMenuBar());
120         }
121 		this.setJMenuBar(vis.getMenuBar());
122 	}
123 
124 	public void saveGUI() {
125 	    config.saveGUI(SwirlGUI.this);
126 	}
127 
128 	/***
129      * TODO
130      *
131      * @return TODO
132      */
133     public String getSelectedVisualizer()
134     {
135         return manager.getSelectedVisualizer().getName();
136     }
137 
138     /***
139      * TODO
140      *
141      * @param title TODO
142      */
143     public void selectVisualizer(String title)
144     {
145         manager.selectVisualizer(title);
146         setMenuBar(manager.getSelectedVisualizer());
147         //performRepaint();
148     }
149 
150     
151     /***
152      * TODO
153      */
154     public void start()
155     {
156         if(log.isDebugEnabled())
157         {
158             log.debug("starting");
159         }
160 
161         selectVisualizer(config.getDefaultTab());
162         setVisible(true);
163 
164         if(log.isDebugEnabled())
165         {
166             log.debug("started");
167         }
168     }
169 
170     /***
171      * TODO
172      */
173     public void stop()
174     {
175         if(log.isDebugEnabled())
176         {
177             log.debug("stopping");
178         }
179 
180         if(
181         //setVisible(false);
182         log.isDebugEnabled())
183         {
184             //setVisible(false);
185             log.debug("stopped");
186         }
187     }
188 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/ReflectionInvocationHandler.html
##-----------------TITLE------------------------##
ReflectionInvocationHandler xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   import java.lang.reflect.InvocationHandler;
4   import java.lang.reflect.Method;
5   import java.lang.reflect.Proxy;
6   import java.util.Arrays;
7   import java.util.HashMap;
8   
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  
12  /***
13   * @author bpillet
14   */
15  public class ReflectionInvocationHandler implements InvocationHandler
16  {
17  
18      /*** the logger for this class */
19      private Log log = LogFactory.getLog(this.getClass());
20      private Object delegate;
21      private HashMap cache = new HashMap();
22  
23  	public ReflectionInvocationHandler(Object del)
24  	{
25  		if(log.isDebugEnabled()) {
26  			log.debug("(" + del + ")");
27  		}
28  		delegate = del;
29          Method[] methods = del.getClass().getMethods();
30  
31          for(int i = 0; i < methods.length; ++i)
32          {
33              if(log.isDebugEnabled())
34              {
35                  log.debug("i: " + methods[i]);
36              }
37          }
38  	}
39  
40  	public Object invoke(Object proxy, Method method, Object[] args)
41  			throws Throwable {
42  		if(log.isDebugEnabled()) {
43  			log.debug("invoke(" + method + ", " + args + ")");
44  		}
45  		Method delegateMethod = (Method)cache.get(method);
46  		if(delegateMethod == null)
47  		{
48  			Method[] methods = delegate.getClass().getMethods();
49  	
50  	        for(int i = 0; i < methods.length && delegateMethod == null; ++i)
51  	        {
52  	            if(log.isDebugEnabled())
53  	            {
54  	                log.debug("trying: " + methods[i]);
55  	            }
56  	            if(method.getName().equals(methods[i].getName()) &&
57  	               Arrays.equals(method.getParameterTypes(), methods[i].getParameterTypes()))
58  	            {
59  	            	log.debug("found method");
60  	            	delegateMethod = methods[i];
61  	            }
62  	        }
63  	        cache.put(method, delegateMethod);
64  		}
65  		if(delegateMethod != null)
66  			return delegateMethod.invoke(delegate, args);
67  		else
68  		{
69  			log.info("Could not find delegateMethod");
70  			return null;
71  		}
72  	}
73  
74  	public static Object wrap(Class clazz, Object delegate)
75  	{
76  		InvocationHandler invoker = new ReflectionInvocationHandler(delegate);
77          Object wrapped = Proxy.newProxyInstance(clazz.getClassLoader(),
78                  new Class[] { clazz }, invoker);
79          return wrapped;
80  	}
81  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/PieWorkSpace.html
##-----------------TITLE------------------------##
PieWorkSpace xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    * To represent the whole work space including private space and public space
5    */
6   package swirl.workspace.viz.pie;
7   
8   import java.awt.Point;
9   import java.util.Iterator;
10  import java.util.SortedMap;
11  import java.util.TreeMap;
12  import java.util.Map.Entry;
13  
14  import org.apache.batik.dom.AbstractNode;
15  import org.apache.batik.dom.svg.ExtensibleSVGDOMImplementation;
16  import org.apache.batik.dom.svg.SVGDOMImplementation;
17  import org.apache.batik.util.SVGConstants;
18  import org.apache.commons.logging.Log;
19  import org.apache.commons.logging.LogFactory;
20  import org.w3c.dom.DOMImplementation;
21  import org.w3c.dom.Element;
22  import org.w3c.dom.NamedNodeMap;
23  import org.w3c.dom.Node;
24  import org.w3c.dom.NodeList;
25  import org.w3c.dom.Text;
26  import org.w3c.dom.svg.SVGDocument;
27  
28  import swirl.workspace.Peer;
29  import swirl.workspace.PeerManager;
30  import swirl.workspace.viz.SharingLevel;
31  
32  /***
33   * DOCUMENT ME!
34   *
35   * @author dingx
36   */
37  public class PieWorkSpace
38  {
39      /*** TODO */
40      public static String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
41  
42      /*** TODO */
43      public static final String TEXT_PATH_ID = "text_path";
44  
45      /*** TODO */
46      public static final String FILE_ROOT_ID = "file_root";
47      
48      /*** TODO */
49      public static final String DOT_FILTER_ID = "dot_filter";
50  
51      /*** TODO */
52      private static final String USER_ROOT_ID = "user_root";
53  
54      /*** TODO */
55      private static final String LOCAL_MASK_ID = "local_mask";
56      
57      /*** TODO */
58      private static final String EXPLAIN_PANEL = "explain_panel";
59  
60      /*** TODO */
61      private static final String SWIRL_ROOT_PATH = "http://localhost:9876/swirl";
62  
63      /*** TODO */
64      private static final String FILL_COLOR = "grey";
65  
66      /*** TODO */
67      private static final String STROKE_COLOR = "lightgrey";
68  
69      /*** TODO */
70      public static final double VIEW_SIZE = 900;
71  
72      /*** TODO */
73      public static final double RADIUS = 340;
74  
75      /*** TODO */
76      private Element defGroup;
77  
78      /*** TODO */
79      private Element fileGroup;
80  
81      /*** TODO */
82      private Element defFilter;
83      
84      /*** TODO */
85      private Element maskLayer;
86  
87      /*** TODO */
88      private Element persisFileGroup;
89  
90      /*** TODO */
91      private Element persistentSpace;
92  
93      /*** TODO */
94      private Element privateSpace;
95  
96      /*** TODO */
97      private Element svgRoot;
98  
99      /*** TODO */
100     private Element userGroup;
101     
102     /*** TODO */
103     private Element  explainpanel;
104 	
105     /*** TODO */
106     private SortedMap guipeers = new TreeMap();
107 
108     /*** TODO */
109     private Log log = LogFactory.getLog(this.getClass());
110 
111     /*** TODO */
112     private SVGDocument document;
113 
114     /*** TODO */
115     private SVGPieView svgview;
116     private Text elabel;
117 	private Text etext;
118 
119 	private int dotSize = 8;
120 	
121     //private String localPeerID;
122 
123     /***
124      * DOCUMENT ME!
125      *
126      * @param view
127      */
128     public PieWorkSpace(SVGPieView view)
129     {
130         svgview = view;
131     }
132 
133     /***
134      * TODO
135      *
136      * @return TODO
137      */
138     public static Point getCenter()
139     {
140         Point center = new Point();
141 
142         center.setLocation(VIEW_SIZE / 2, VIEW_SIZE / 2);
143 
144         return center;
145     }
146 
147     /***
148      * DOCUMENT ME!
149      *
150      * @return Returns the defGroup.
151      */
152     public Element getDefGroup()
153     {
154         return defGroup;
155     }
156 
157     /***
158      * TODO
159      *
160      * @return TODO
161      */
162     public SVGDocument getDocument()
163     {
164         return document;
165     }
166 
167     /***
168      * DOCUMENT ME!
169      *
170      * @return Returns the fileGroup.
171      */
172     public Element getFileGroup()
173     {
174         return fileGroup;
175     }
176 
177     /***
178      * TODO
179      *
180      * @return TODO
181      */
182     public GuiPeer getLocalPeer()
183     {
184         GuiPeer guipeer = (GuiPeer)guipeers.get(PeerManager.getLocalUserID());
185 
186         return guipeer;
187     }
188 
189     /***
190      * DOCUMENT ME!
191      *
192      * @return Returns the maskLayer.
193      */
194     public Element getMaskLayer()
195     {
196         return maskLayer;
197     }
198 
199     /***
200      * TODO
201      *
202      * @return TODO
203      */
204     public int getPeerNumber()
205     {
206         return guipeers.size();
207     }
208 
209     public int getPeerIndex(String userID)
210     {
211         SortedMap peersbefore = guipeers.headMap(userID);
212         int index = peersbefore.size()+1;
213         if(log.isDebugEnabled())
214         {
215         	log.debug("the user " + userID + " is the number " + index);
216         }
217         return index;
218     }
219 
220     /***
221      * DOCUMENT ME!
222      *
223      * @return Returns the persisFileGroup.
224      */
225     public Element getPersisFileGroup()
226     {
227         return persisFileGroup;
228     }
229 
230     /***
231      * DOCUMENT ME!
232      *
233      * @return Returns the persistentSpace.
234      */
235     public Element getPersistentSpace()
236     {
237         return persistentSpace;
238     }
239 
240     /***
241      * DOCUMENT ME!
242      *
243      * @return Returns the privateSpace.
244      */
245     public Element getPrivateSpace()
246     {
247         return privateSpace;
248     }
249 
250     /***
251      * DOCUMENT ME!
252      *
253      * @return Returns the svgRoot.
254      */
255     public Element getSvgRoot()
256     {
257         return svgRoot;
258     }
259 
260     /***
261      * DOCUMENT ME!
262      *
263      * @return Returns the userGroup.
264      */
265     public Element getUserGroup()
266     {
267         return userGroup;
268     }
269 
270     /***
271      * TODO
272      *
273      * @return TODO
274      */
275     public SVGPieView getView()
276     {
277         return svgview;
278     }
279 
280     /***
281      * TODO
282      *
283      * @param fe TODO
284      */
285     public void addFile(FileElement fe)
286     {
287         String userID = fe.getOwnerKey();
288 
289         if(log.isDebugEnabled())
290         {
291             log.debug("adding file for user " + userID);
292             log.debug("fe sharinglevel " + fe.getShareDegree().getValue());
293         }
294 
295         GuiPeer peer = (GuiPeer)guipeers.get(userID);
296 
297         peer.addFile(fe);
298     }
299 
300     /***
301      * TODO
302      *
303      * @param peer TODO
304      */
305     public void addPeer(Peer peer)
306     {
307         String key = peer.getUniqueID();
308 
309         if(guipeers.get(key) != null)
310         {
311         	if(log.isDebugEnabled())
312             {
313         		log.debug("User already exist: " + key);
314             }
315             return;
316         }
317         
318         GuiPeer guipeer = new GuiPeer(peer, document, this);
319         guipeers.put(key, guipeer);
320         adjustPeers(getPeerNumber());
321         // wait
322     }
323 
324     /***
325      * TODO
326      */
327     public void init()
328     {
329         DOMImplementation impl = ExtensibleSVGDOMImplementation
330                                  .getDOMImplementation();
331 
332         document = (SVGDocument)impl.createDocument(svgNS, "svg", null);
333         svgRoot = document.getDocumentElement();
334 
335         // set the viewbox on the root svg element
336         String t = "0 0 " + " " + String.valueOf(VIEW_SIZE) + " "
337                    + String.valueOf(VIEW_SIZE);
338 
339         svgRoot.setAttributeNS(null, "viewBox", t);
340         defGroup = document.createElementNS(svgNS, "defs");
341         userGroup = document.createElementNS(svgNS, "g");
342         fileGroup = document.createElementNS(svgNS, "g");
343         maskLayer = document.createElementNS(svgNS, "g");
344         explainpanel = document.createElementNS(svgNS, "g");
345 
346         userGroup.setAttributeNS(null, "id", USER_ROOT_ID);
347         fileGroup.setAttributeNS(null, "id", FILE_ROOT_ID);
348         maskLayer.setAttributeNS(null, "id", LOCAL_MASK_ID);
349         explainpanel.setAttributeNS(null, "id", EXPLAIN_PANEL);
350         
351         String data = "";
352         document.createCDATASection(data);
353         
354         ((AbstractNode)maskLayer).addEventListener(SVGConstants.SVG_MOUSEMOVE_EVENT_TYPE,
355                                                    svgview.getMouseEvent(),
356                                                    false);
357 
358         //add an empty textpath reference to start
359         Element path = document.createElementNS(svgNS, "path");
360 
361         path.setAttributeNS(null, "id", TEXT_PATH_ID);
362         path.setAttributeNS(null, "d", "");
363         defGroup.appendChild(path);
364         
365         appendFilter();
366         //they need to be appended in this sequence
367         svgRoot.appendChild(defGroup);
368         addPrivateSpace();
369         svgRoot.appendChild(userGroup);
370         addPersistentSpace();
371         svgRoot.appendChild(maskLayer);
372         addExplainPanel();
373         svgRoot.appendChild(explainpanel);
374         svgRoot.appendChild(fileGroup);
375         
376         
377         ((AbstractNode)svgRoot).addEventListener(SVGConstants.SVG_MOUSEUP_EVENT_TYPE,
378                                                  svgview.getMouseEvent(), false);
379         
380     }
381 
382     /***
383      * TODO
384      *
385      * @param peerKey TODO
386      */
387     public void removePeer(String peerKey)
388     {
389         GuiPeer guipeer = (GuiPeer)guipeers.get(peerKey);
390 
391         if(guipeer != null)
392         {
393             guipeer.detach();
394             guipeers.remove(peerKey);
395             adjustPeers(getPeerNumber());
396 
397         }
398         else
399         {
400         	if(log.isDebugEnabled())
401             {
402         		log.debug("User does not exist: " + peerKey);
403             }
404         }
405     }
406 
407     /***
408      * TODO
409      */
410     private void addPersistentSpace()
411     {
412         //caculate the radius of the public circle
413         double radi = Util.getRadium(SharingLevel.SHARING_LEVEL);
414         String transform = Util.getTranslateString(getCenter().getX(),
415                                                    getCenter().getY());
416 
417         Element persistentCircle = document.createElementNS(svgNS, "circle");
418         if(log.isDebugEnabled())
419         {
420         	log.debug("radi: " + radi);
421         }
422         persistentCircle.setAttributeNS(null, "r", String.valueOf(radi));
423         persistentCircle.setAttributeNS(null, "stroke", STROKE_COLOR);
424         persistentCircle.setAttributeNS(null, "fill", FILL_COLOR);
425         persistentCircle.setAttributeNS(null, "transform", transform);
426         persistentCircle.setAttributeNS(null, "id",
427                                         PeerManager.getLocalUserID() + ":"
428                                         + SharingLevel.SHARING_LEVEL);
429 
430         svgRoot.appendChild(persistentCircle);
431 
432         Node clone = persistentCircle.cloneNode(true);
433 
434         ((Element)clone).removeAttribute("fill");
435         ((Element)clone).removeAttribute("stroke");
436         maskLayer.appendChild(clone);
437     }
438 
439     /***
440      * TODO
441      */
442     private void appendFilter()
443     {
444     	defFilter = document.createElementNS(svgNS, "filter");
445     	defFilter.setAttributeNS(null, "id", DOT_FILTER_ID);
446     	defFilter.setAttributeNS(null, "filterUnits", "objectBoundingBox");
447     	defFilter.setAttributeNS(null, "width", "4.8");
448     	defFilter.setAttributeNS(null, "height", "4.8");
449     	
450     	
451     	Element feGaussianBlur = document.createElementNS(svgNS, "feGaussianBlur");
452     	feGaussianBlur.setAttributeNS(null, "in", "SourceAlpha");
453     	feGaussianBlur.setAttributeNS(null, "stdDeviation", "8");
454     	feGaussianBlur.setAttributeNS(null, "result", "blur");
455     	defFilter.appendChild(feGaussianBlur);
456 		
457     	
458     	Element feOffset = document.createElementNS(svgNS, "feOffset");
459     	feOffset.setAttributeNS(null, "in", "blur");
460     	feOffset.setAttributeNS(null, "dx", "3");
461     	feOffset.setAttributeNS(null, "dy", "3");
462     	feOffset.setAttributeNS(null, "result", "offsetBlur");
463     	defFilter.appendChild(feOffset);
464     	
465     	Element feComponentTransfer = document.createElementNS(svgNS, "feComponentTransfer");
466         feComponentTransfer.setAttributeNS(null, "result", "shadow");
467         defFilter.appendChild(feComponentTransfer);
468         
469         Element feFuncA = document.createElementNS(svgNS, "feFuncA");
470         feFuncA.setAttributeNS(null, "type", "linear");
471         feFuncA.setAttributeNS(null, "slope", "0.5");
472         feFuncA.setAttributeNS(null, "intercept", "0");
473         feComponentTransfer.appendChild(feFuncA);
474         
475         Element feComposite = document.createElementNS(svgNS, "feComposite");
476         feComposite.setAttributeNS(null, "in2", "shadow");
477         feComposite.setAttributeNS(null, "in", "SourceGraphic");
478         defFilter.appendChild(feComposite);
479 
480         Element feSpecularLighting = document.createElementNS(svgNS, "feSpecularLighting");
481     	feSpecularLighting.setAttributeNS(null, "in", "blur");
482     	feSpecularLighting.setAttributeNS(null, "surfaceScale", "5");
483     	feSpecularLighting.setAttributeNS(null, "specularConstant", ".75");
484     	feSpecularLighting.setAttributeNS(null, "specularExponent", "20");
485     	feSpecularLighting.setAttributeNS(null, "lighting-color", "#bbbbbb");
486     	feSpecularLighting.setAttributeNS(null, "result", "specOut");
487     	defFilter.appendChild(feSpecularLighting);
488     	
489     	Element fePointLight = document.createElementNS(svgNS, "fePointLight");
490     	fePointLight.setAttributeNS(null, "x", "-5000");
491     	fePointLight.setAttributeNS(null, "y", "-10000");
492     	fePointLight.setAttributeNS(null, "z", "20000");
493     	feSpecularLighting.appendChild(fePointLight);
494     	
495     	Element feComposite1 = document.createElementNS(svgNS, "feComposite");
496     	feComposite1.setAttributeNS(null, "in", "specOut");
497     	feComposite1.setAttributeNS(null, "in2", "SourceAlpha");
498     	feComposite1.setAttributeNS(null, "operator", "in");
499     	feComposite1.setAttributeNS(null, "result", "specOut");
500     	defFilter.appendChild(feComposite1);
501     	
502     	Element feComposite2 = document.createElementNS(svgNS, "feComposite");
503     	feComposite2.setAttributeNS(null, "in", "SourceGraphic");
504     	feComposite2.setAttributeNS(null, "in2", "specOut");
505     	feComposite2.setAttributeNS(null, "operator", "arithmetic");
506     	feComposite2.setAttributeNS(null, "k1", "0");
507     	feComposite2.setAttributeNS(null, "k2", "1");
508     	feComposite2.setAttributeNS(null, "k3", "1");
509     	feComposite2.setAttributeNS(null, "k4", "0");
510     	feComposite2.setAttributeNS(null, "result", "litPaint");
511     	defFilter.appendChild(feComposite2);
512     	
513     	Element feMerge = document.createElementNS(svgNS, "feMerge");
514     	
515     	Element feMergeNode1 = document.createElementNS(svgNS, "feMergeNode");
516     	feMergeNode1.setAttributeNS(null, "in", "shadow");
517     	feMerge.appendChild(feMergeNode1);
518 		
519     	Element feMergeNode2 = document.createElementNS(svgNS, "feMergeNode");
520     	feMergeNode2.setAttributeNS(null, "in", "litPaint");
521     	feMerge.appendChild(feMergeNode2);
522     	defFilter.appendChild(feMerge);
523     	
524     	defGroup.appendChild(defFilter);	
525     	
526    }
527 
528     /***
529      * TODO
530      */
531     private void addPrivateSpace()
532     {
533         Element privateSpace = document.createElementNS(svgNS, "rect");
534 
535         privateSpace.setAttributeNS(null, "id",
536                                     PeerManager.getLocalUserID() + ":0");
537         privateSpace.setAttributeNS(null, "fill", "lightgray");
538         privateSpace.setAttributeNS(null, "width",
539                                     String.valueOf(String.valueOf(VIEW_SIZE)));
540         privateSpace.setAttributeNS(null, "height",
541                                     String.valueOf(String.valueOf(VIEW_SIZE)));
542         ((AbstractNode)privateSpace).addEventListener(SVGConstants.SVG_MOUSEMOVE_EVENT_TYPE,
543                                                       svgview.getMouseEvent(),
544                                                       false);
545         userGroup.appendChild(privateSpace);
546     }
547 
548     /***
549      * TODO
550      */
551     private void addExplainPanel()
552     {
553         Element background = document.createElementNS(svgNS, "rect");
554 
555         background.setAttributeNS(null, "fill", "lightgray");
556         background.setAttributeNS(null, "width", "250");
557         background.setAttributeNS(null, "height","60");
558         background.setAttributeNS(null, "style",
559                 "fill:#FFEF95; fill-opacity:0.5; stroke:white");
560         
561         Element textg = document.createElementNS(svgNS, "g");
562         textg.setAttributeNS(null, "style", "font-size:25;");
563         Element label = document.createElementNS(svgNS, "text");
564         label.setAttributeNS(null, "x", "20");
565         label.setAttributeNS(null, "y","30");
566         elabel = document.createTextNode("");
567         label.appendChild(elabel);
568         
569         Element text = document.createElementNS(svgNS, "text");
570         text.setAttributeNS(null, "id", "varSecurity");
571         text.setAttributeNS(null, "x", "20");
572         text.setAttributeNS(null, "y","45");
573         etext = document.createTextNode("Swirl Impromptu");
574         
575         text.appendChild(etext);
576         
577         explainpanel.appendChild(background);
578         explainpanel.appendChild(label);
579         explainpanel.appendChild(text);
580     }
581 
582     /***
583      * TODO
584      *
585      * @param peerNumber TODO
586      *
587      * @return TODO
588      */
589     private double adjustPeers(int peerNumber)
590     {
591         //change the paths for the user name text
592         Node tpnode = document.getElementById(PieWorkSpace.TEXT_PATH_ID);
593         NamedNodeMap tpmap = tpnode.getAttributes();
594 
595         //make the text at the outer of the circle
596         String d = Util.caculateDforPath(PieWorkSpace.RADIUS + 5,
597         		getPeerNumber());
598 
599         (tpmap.getNamedItem("d")).setNodeValue(d);
600         //in order to redraw the user name
601         NodeList textl = userGroup.getElementsByTagName("text");
602         for(int i = 0; i < textl.getLength(); i++)
603         {
604             Node tn = textl.item(i);
605             Element parent = (Element)tn.getParentNode();
606 
607             parent.removeChild(tn);
608             parent.appendChild(tn);
609         }
610         
611         //change the actual paths
612         double start = 0.0D;
613         for(Iterator it = guipeers.entrySet().iterator(); it.hasNext();)
614         {
615             Entry entry = (Entry)it.next();
616             GuiPeer guipeer = (GuiPeer)entry.getValue();
617             double arcAngle = Util.getAngle(peerNumber);
618             //if it is the last one
619             if(!it.hasNext()){
620             	arcAngle = 359.9 - start;
621             	
622             }   
623             start = guipeer.adjustAngle(start, arcAngle);
624         }
625      
626         return start;
627     }
628 
629 	/***
630 	 * @param fileKey
631 	 * @param userID
632 	 */
633 	public void removeFile(String fileKey, String userID) {
634         GuiPeer guipeer = (GuiPeer)guipeers.get(userID);
635         guipeer.removeFile(fileKey);
636 		
637 	}
638 
639 	/***
640 	 * @param userId
641 	 * @return
642 	 */
643 	public GuiPeer getGuiPeer(String userId) {
644 		GuiPeer guiPeer;
645 		return  guiPeer = (GuiPeer)guipeers.get(userId);
646 	}
647 
648 	/***
649 	 * @param fileElement
650 	 * @param newLevel
651 	 */
652 	public void setSharingText(String name, SharingLevel newLevel) {
653 		elabel.setData(name + ":");
654 		
655 		if (etext.getLength() != 0){
656 			etext.deleteData(0, etext.getLength());
657 		}
658 		etext.appendData(FileElement.getTextSharingLevel(newLevel));
659 		
660 	}
661 	
662 	public int incrementDotSize()
663 	{
664 		dotSize *= 1.5;
665 		setDotSize(dotSize);
666 		
667 		return dotSize;
668 	}
669 	
670 	public void setDotSize(int dotSizer)
671 	{
672 		if(log.isDebugEnabled())
673         {
674 			log.debug("dotSize: " + dotSize);
675 			log.debug("guipeers: " + guipeers);
676         }
677 		for(Iterator it = guipeers.values().iterator(); it.hasNext(); )
678 		{
679 			GuiPeer peer = (GuiPeer)it.next();
680 			if(log.isDebugEnabled())
681 	        {
682 				log.debug("peer: " + peer);
683 	        }
684 			peer.setDotSize(dotSize);
685 		}
686 	}
687 	
688 	public int decrementDotSize()
689 	{
690 		if(dotSize > 5)
691 		{
692 			dotSize *= (float) 1 / 1.5;
693 			setDotSize(dotSize);
694 		}
695 		
696 		return dotSize;
697 	}
698 
699 	/***
700 	 * @return
701 	 */
702 	public int getDotSize() {
703 		if(log.isDebugEnabled())
704         {
705 			log.debug("dotSize: " + dotSize);
706         }
707 		return dotSize;
708 	}
709 
710 	public void moveExplainText(double x, double y) {
711 		double textX = VIEW_SIZE / 2 + x + 10;
712 		double textY = VIEW_SIZE / 2 + y + 10;
713 		explainpanel.setAttributeNS(null, "transform", "translate(" + textX + "," + textY + ")");
714 	}
715 
716 	public void revealTag() {
717 		this.explainpanel.setAttributeNS(null, "style", "visibility:visible");
718 		
719 	}
720 
721 	public void hideTag() {
722 		this.explainpanel.setAttributeNS(null, "style", "visibility:hidden");
723 		
724 	}
725 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PutCommand.html
##-----------------TITLE------------------------##
PutCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.IOException;
4   
5   import javax.servlet.http.HttpServletRequest;
6   import javax.servlet.http.HttpServletResponse;
7   
8   import org.apache.commons.httpclient.HttpMethod;
9   import org.apache.commons.httpclient.methods.PutMethod;
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  /***
14   * Sends a PUT method to the peer
15   *
16   * @author bpillet
17   */
18  public class PutCommand extends ProxyCommand
19  {
20      /*** commons-logging log that maps to this Command */
21      private Log log = LogFactory.getLog(this.getClass());
22  
23      /***
24       * See super
25       *
26       * @param req see super
27       * @param resp see super
28       * @param host see super
29       * @param path see super
30       * @param peerManager see super
31       */
32      public PutCommand(final HttpServletRequest req,
33                        final HttpServletResponse resp, final String host,
34                        final String path, final PeerManager peerManager)
35      {
36          super(req, resp, host, path, peerManager);
37      }
38  
39      /***
40       * Overrides super
41       *
42       * @param url the url to send the Put method to
43       *
44       * @return an initialized PutMethod
45       */
46      public HttpMethod createMethod(final String url)
47      {
48          PutMethod method = new PutMethod(url);
49  
50          //set If header only if it exists
51          String ifHeader = getRequest().getHeader("If");
52  
53          if(log.isDebugEnabled())
54          {
55              log.debug("If: " + ifHeader);
56          }
57  
58          if(ifHeader != null)
59          {
60              method.setRequestHeader("If", ifHeader);
61          }
62  
63          try
64          {
65              method.setRequestBody(getRequest().getInputStream());
66              method.setRequestContentLength(getRequest().getContentLength());
67          }
68          catch(IOException ex)
69          {
70              log.error(ex);
71          }
72  
73          return method;
74      }
75  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/NetUtils.html
##-----------------TITLE------------------------##
NetUtils xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.common;
2   
3   import java.io.UnsupportedEncodingException;
4   import java.net.InetAddress;
5   import java.net.NetworkInterface;
6   import java.net.SocketException;
7   import java.net.UnknownHostException;
8   
9   import javax.servlet.http.HttpServletRequest;
10  
11  import org.apache.commons.logging.Log;
12  import org.apache.commons.logging.LogFactory;
13  import org.mortbay.http.HttpRequest;
14  
15  /***
16   * DOCUMENT ME!
17   *
18   * @author bpillet
19   */
20  public final class NetUtils
21  {
22      /*** TODO */
23      private static Log log = LogFactory.getLog(NetUtils.class);
24  
25      /***
26       * Creates a new NetUtils object.
27       */
28      private NetUtils(){}
29  
30      /***
31       * TODO
32       *
33       * @param req TODO
34       *
35       * @return TODO
36       */
37      public static boolean isRequestFromMe(HttpRequest req)
38      {
39          return isMyHost(req.getRemoteHost());
40      }
41  
42      /***
43       * TODO
44       *
45       * @param req TODO
46       *
47       * @return TODO
48       */
49      public static boolean isRequestFromMe(HttpServletRequest req)
50      {
51          return isMyHost(req.getRemoteHost());
52      }
53  
54      /***
55       * TODO
56       *
57       * @param remoteHostStr TODO
58       *
59       * @return TODO
60       */
61      private static boolean isMyHost(String remoteHostStr)
62      {
63          try
64          {
65              InetAddress address = InetAddress.getByName(remoteHostStr);
66  
67              if(log.isDebugEnabled())
68              {
69              	if(log.isDebugEnabled())
70      	        {
71              		log.debug("address: " + address + "\nhostAddress: "
72  	                          + address.getHostAddress() + " canonicalHostName: "
73  	                          + address.getCanonicalHostName() + "\nhostName: "
74  	                          + address.getHostName());
75      	        }
76              }
77  
78              NetworkInterface net;
79  
80              try
81              {
82                  net = NetworkInterface.getByInetAddress(address);
83  
84                  if(net != null)
85                  {
86                  	if(log.isDebugEnabled())
87          	        {
88                  		log.debug("net:\ndisplayName: " + net.getDisplayName()
89                  				+ "\nname: " + net.getName());
90          	        }
91  
92                      return true;
93                  }
94              }
95              catch(SocketException e1)
96              {
97                  if(log.isDebugEnabled())
98                  {
99                      log.debug(e1, e1);
100                 }
101             }
102         }
103         catch(UnknownHostException e)
104         {
105             if(log.isDebugEnabled())
106             {
107                 log.debug(e, e);
108             }
109         }
110 
111         return false;
112     }
113     
114     public static String DefaultEncodingScheme = "UTF-8";
115     public static String encode(String unencoded) {
116         try {
117             String result = java.net.URLEncoder.encode(unencoded, DefaultEncodingScheme);
118             result = result.replaceAll("//\u002b", "%20");
119             return result;
120         } catch (UnsupportedEncodingException e) {
121             // TODO Auto-generated catch block
122             e.printStackTrace();
123             return null;
124         }
125     }
126 
127     public static String decode(String encoded) {
128         try {
129             return java.net.URLDecoder.decode(encoded, DefaultEncodingScheme);
130         } catch (UnsupportedEncodingException e) {
131             // TODO Auto-generated catch block
132             e.printStackTrace();
133             return null;
134         }
135     }
136     
137     public static String encodeLastElement(String path) {
138         int	lastSlash = path.lastIndexOf('/');
139         if (lastSlash == -1)
140             return encode(path);
141         else
142             return path.substring(0, lastSlash + 1) + encode(path.substring(lastSlash + 1));
143     }
144 
145     public static String encodeEachElement(String path) {
146         String encoded = "";
147         if (path.equals("")) return encoded;
148         String[] elements = path.split("/");
149         for (int i = 0; i <elements.length; i++) {
150             encoded += (encode(elements[i]) + "/");
151         }
152         if (/*path.length() > 0 && */ path.charAt(path.length() - 1) != '/')
153             encoded = encoded.substring(0, encoded.length() - 1);
154         return encoded;
155     }
156 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/ExportAction.html
##-----------------TITLE------------------------##
ExportAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import java.awt.event.ActionEvent;
4   
5   import javax.swing.AbstractAction;
6   import javax.swing.ImageIcon;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  import org.w3c.dom.svg.SVGDocument;
11  
12  import swirl.workspace.viz.Model;
13  
14  /***
15   * DOCUMENT ME!
16   *
17   * @author bpillet
18   */
19  public class ExportAction extends AbstractAction
20  {
21      /*** TODO */
22      private static final long serialVersionUID = 1L;
23  
24      /*** TODO */
25      private Log log = LogFactory.getLog(this.getClass());
26  
27      /*** TODO */
28      private Model pieModel;
29  
30      /*** TODO */
31      private SVGDocument document;
32  
33      /***
34       *
35       */
36      public ExportAction(SVGDocument doc, Model model)
37      {
38          super();
39          document = doc;
40          pieModel = model;
41  
42          putValue(ACTION_COMMAND_KEY, "Export Files");
43  
44          //        The key used to determine the command string for the ActionEvent that
45          // will be created when an Action is going to be notified as the result
46          // of residing in a Keymap associated with a JComponent.
47          putValue(LONG_DESCRIPTION,
48                   "Saves any modified files in the workspace to the local file system");
49  
50          //        The key used for storing a longer description for the action, could
51          // be used for context-sensitive help.
52          //putValue(MNEMONIC_KEY, new Character('S'));
53          //        The key used for storing an int key code to be used as the mnemonic
54          // for the action.
55          putValue(NAME, "Export Files...");
56  
57          //        The key used for storing the name for the action, used for a menu or
58          // button.
59          putValue(SHORT_DESCRIPTION, "Export modified files to hard drive");
60  
61          //        The key used for storing a short description for the action, used for
62          // tooltip text.
63          putValue(SMALL_ICON, new ImageIcon("resources/export.gif"));
64  
65          //		The key used for storing a small icon for the action, used for
66          // toolbar buttons
67      }
68  
69      /***
70       *
71       */
72      public void actionPerformed(ActionEvent e)
73      {
74          if(log.isDebugEnabled())
75          {
76              log.debug("doing files export");
77          }
78  
79          pieModel.exportFiles(document);
80  
81      }
82  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/HolderManager.html
##-----------------TITLE------------------------##
HolderManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import javax.swing.JComponent;
4   //import org.w3c.dom.svg.SVGDocument;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author bpillet
10   */
11  public interface HolderManager
12  {
13      /***
14       * TODO
15       *
16       * @return TODO
17       */
18      //public JMenuBar getJMenuBar();
19  
20      /***
21       * TODO
22       *
23       * @return TODO
24       */
25      public JComponent getRootComponent();
26  
27      /***
28       * TODO
29       *
30       * @return TODO
31       */
32      public Visualizer getSelectedVisualizer();
33  
34      /***
35       * TODO
36       *
37       * @param viz TODO
38       */
39      public void addVisualizer(Visualizer viz);
40  
41      /***
42       * TODO
43       *
44       * @param viz TODO
45       */
46      public void removeVisualizer(Visualizer viz);
47  
48      /***
49       * TODO
50       *
51       * @param title TODO
52       */
53      public void selectVisualizer(String title);
54  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/ZoomInAction.html
##-----------------TITLE------------------------##
ZoomInAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.event.ActionEvent;
4   import java.awt.event.KeyEvent;
5   
6   import javax.swing.ImageIcon;
7   import javax.swing.KeyStroke;
8   
9   /***
10   * @author bpillet
11   */
12  public class ZoomInAction extends SVGPieAction {
13  
14  	private static final long serialVersionUID = 1L;
15  	
16  	public ZoomInAction()
17  	{
18  	       putValue(ACTION_COMMAND_KEY, "ZoomInAction");
19  
20  	        putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_Z));
21  	        
22  	        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_PLUS, ActionEvent.CTRL_MASK));
23  
24  	        //        The key used to determine the command string for the ActionEvent that
25  	        // will be created when an Action is going to be notified as the result
26  	        // of residing in a Keymap associated with a JComponent.
27  	        putValue(LONG_DESCRIPTION,
28  	                 "Zoom In");
29  
30  	        //        The key used for storing a longer description for the action, could
31  	        // be used for context-sensitive help.
32  	        //putValue(MNEMONIC_KEY, new Character('S'));
33  	        //        The key used for storing an int key code to be used as the mnemonic
34  	        // for the action.
35  	        putValue(NAME, "Zoom In");
36  
37  	        //        The key used for storing the name for the action, used for a menu or
38  	        // button.
39  	        putValue(SHORT_DESCRIPTION, "Zoom In");
40  
41  	        //        The key used for storing a short description for the action, used for
42  	        // tooltip text.
43  	        putValue(SMALL_ICON, new ImageIcon("resources/zoomin.gif"));
44  
45  	}
46  	
47  	public void actionPerformed(ActionEvent e) {
48  		if(getView() != null)
49  			getView().zoomInPie();
50  	}
51  
52  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/WrappedResponse.html
##-----------------TITLE------------------------##
WrappedResponse xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 17, 2004
3    *
4    * To change the template for this generated file go to
5    * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
6    */
7   package swirl.workspace;
8   
9   import java.io.IOException;
10  import java.io.PrintWriter;
11  import java.util.Locale;
12  
13  import javax.servlet.ServletOutputStream;
14  import javax.servlet.http.Cookie;
15  import javax.servlet.http.HttpServletResponse;
16  
17  /***
18   * @author Kari
19   * 
20   * This wrapper for HttpServletResponse keeps track of the return status.
21   * 
22   * To change the template for this generated type comment go to
23   * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
24   */
25  public class WrappedResponse implements HttpServletResponse
26  {
27  
28  	HttpServletResponse delegate;
29  
30  	public void addCookie(Cookie arg0)
31  	{
32  		delegate.addCookie(arg0);
33  	}
34  
35  	/*
36  	 * (non-Javadoc)
37  	 * 
38  	 * @see javax.servlet.http.HttpServletResponse#containsHeader(java.lang.String)
39  	 */
40  	public boolean containsHeader(String arg0)
41  	{
42  		return delegate.containsHeader(arg0);
43  	}
44  
45  	/*
46  	 * (non-Javadoc)
47  	 * 
48  	 * @see javax.servlet.http.HttpServletResponse#encodeURL(java.lang.String)
49  	 */
50  	public String encodeURL(String arg0)
51  	{
52  		return delegate.encodeURL(arg0);
53  	}
54  
55  	/*
56  	 * (non-Javadoc)
57  	 * 
58  	 * @see javax.servlet.http.HttpServletResponse#encodeRedirectURL(java.lang.String)
59  	 */
60  	public String encodeRedirectURL(String arg0)
61  	{
62  		return delegate.encodeRedirectURL(arg0);
63  	}
64  
65  	/*
66  	 * (non-Javadoc)
67  	 * 
68  	 * @see javax.servlet.http.HttpServletResponse#encodeUrl(java.lang.String)
69  	 */
70  	public String encodeUrl(String arg0)
71  	{
72  		throw new UnsupportedOperationException(
73  				"This method has been deprecated");
74  		//return delegate.encodeUrl(arg0);
75  	}
76  
77  	/*
78  	 * (non-Javadoc)
79  	 * 
80  	 * @see javax.servlet.http.HttpServletResponse#encodeRedirectUrl(java.lang.String)
81  	 */
82  	public String encodeRedirectUrl(String arg0)
83  	{
84  		throw new UnsupportedOperationException(
85  				"This method has been deprecated");
86  		//return delegate.encodeRedirectUrl(arg0);
87  	}
88  
89  	int status;
90  
91  	/*
92  	 * (non-Javadoc)
93  	 * 
94  	 * @see javax.servlet.http.HttpServletResponse#sendError(int,
95  	 *      java.lang.String)
96  	 */
97  	public void sendError(int arg0, String arg1) throws IOException
98  	{
99  		status = arg0;
100 		delegate.sendError(arg0, arg1);
101 	}
102 
103 	/*
104 	 * (non-Javadoc)
105 	 * 
106 	 * @see javax.servlet.http.HttpServletResponse#sendError(int)
107 	 */
108 	public void sendError(int arg0) throws IOException
109 	{
110 		status = arg0;
111 		delegate.sendError(arg0);
112 
113 	}
114 
115 	/*
116 	 * (non-Javadoc)
117 	 * 
118 	 * @see javax.servlet.http.HttpServletResponse#sendRedirect(java.lang.String)
119 	 */
120 	public void sendRedirect(String arg0) throws IOException
121 	{
122 		delegate.sendRedirect(arg0);
123 
124 	}
125 
126 	/*
127 	 * (non-Javadoc)
128 	 * 
129 	 * @see javax.servlet.http.HttpServletResponse#setDateHeader(java.lang.String,
130 	 *      long)
131 	 */
132 	public void setDateHeader(String arg0, long arg1)
133 	{
134 		delegate.setDateHeader(arg0, arg1);
135 	}
136 
137 	/*
138 	 * (non-Javadoc)
139 	 * 
140 	 * @see javax.servlet.http.HttpServletResponse#addDateHeader(java.lang.String,
141 	 *      long)
142 	 */
143 	public void addDateHeader(String arg0, long arg1)
144 	{
145 		delegate.addDateHeader(arg0, arg1);
146 	}
147 
148 	/*
149 	 * (non-Javadoc)
150 	 * 
151 	 * @see javax.servlet.http.HttpServletResponse#setHeader(java.lang.String,
152 	 *      java.lang.String)
153 	 */
154 	public void setHeader(String arg0, String arg1)
155 	{
156 		delegate.setHeader(arg0, arg1);
157 	}
158 
159 	/*
160 	 * (non-Javadoc)
161 	 * 
162 	 * @see javax.servlet.http.HttpServletResponse#addHeader(java.lang.String,
163 	 *      java.lang.String)
164 	 */
165 	public void addHeader(String arg0, String arg1)
166 	{
167 		delegate.addHeader(arg0, arg1);
168 	}
169 
170 	/*
171 	 * (non-Javadoc)
172 	 * 
173 	 * @see javax.servlet.http.HttpServletResponse#setIntHeader(java.lang.String,
174 	 *      int)
175 	 */
176 	public void setIntHeader(String arg0, int arg1)
177 	{
178 		delegate.setIntHeader(arg0, arg1);
179 	}
180 
181 	/*
182 	 * (non-Javadoc)
183 	 * 
184 	 * @see javax.servlet.http.HttpServletResponse#addIntHeader(java.lang.String,
185 	 *      int)
186 	 */
187 	public void addIntHeader(String arg0, int arg1)
188 	{
189 		delegate.addIntHeader(arg0, arg1);
190 	}
191 
192 	/*
193 	 * (non-Javadoc)
194 	 * 
195 	 * @see javax.servlet.http.HttpServletResponse#setStatus(int)
196 	 */
197 	public void setStatus(int arg0)
198 	{
199 		status = arg0;
200 		delegate.setStatus(arg0);
201 	}
202 
203 	/*
204 	 * (non-Javadoc)
205 	 * 
206 	 * @see javax.servlet.http.HttpServletResponse#setStatus(int,
207 	 *      java.lang.String)
208 	 */
209 	public void setStatus(int arg0, String arg1)
210 	{
211 		throw new UnsupportedOperationException(
212 				"This method has been deprecated");
213 		//status = arg0;
214 		//delegate.setStatus(arg0, arg1);
215 	}
216 
217 	/*
218 	 * (non-Javadoc)
219 	 * 
220 	 * @see javax.servlet.ServletResponse#getCharacterEncoding()
221 	 */
222 	public String getCharacterEncoding()
223 	{
224 		return delegate.getCharacterEncoding();
225 	}
226 
227 	/*
228 	 * (non-Javadoc)
229 	 * 
230 	 * @see javax.servlet.ServletResponse#getOutputStream()
231 	 */
232 	public ServletOutputStream getOutputStream() throws IOException
233 	{
234 		return delegate.getOutputStream();
235 	}
236 
237 	/*
238 	 * (non-Javadoc)
239 	 * 
240 	 * @see javax.servlet.ServletResponse#getWriter()
241 	 */
242 	public PrintWriter getWriter() throws IOException
243 	{
244 		return delegate.getWriter();
245 	}
246 
247 	/*
248 	 * (non-Javadoc)
249 	 * 
250 	 * @see javax.servlet.ServletResponse#setContentLength(int)
251 	 */
252 	public void setContentLength(int arg0)
253 	{
254 		delegate.setContentLength(arg0);
255 	}
256 
257 	/*
258 	 * (non-Javadoc)
259 	 * 
260 	 * @see javax.servlet.ServletResponse#setContentType(java.lang.String)
261 	 */
262 	public void setContentType(String arg0)
263 	{
264 		delegate.setContentType(arg0);
265 	}
266 
267 	/*
268 	 * (non-Javadoc)
269 	 * 
270 	 * @see javax.servlet.ServletResponse#setBufferSize(int)
271 	 */
272 	public void setBufferSize(int arg0)
273 	{
274 		delegate.setBufferSize(arg0);
275 	}
276 
277 	/*
278 	 * (non-Javadoc)
279 	 * 
280 	 * @see javax.servlet.ServletResponse#getBufferSize()
281 	 */
282 	public int getBufferSize()
283 	{
284 		return delegate.getBufferSize();
285 	}
286 
287 	/*
288 	 * (non-Javadoc)
289 	 * 
290 	 * @see javax.servlet.ServletResponse#flushBuffer()
291 	 */
292 	public void flushBuffer() throws IOException
293 	{
294 		delegate.flushBuffer();
295 	}
296 
297 	/*
298 	 * (non-Javadoc)
299 	 * 
300 	 * @see javax.servlet.ServletResponse#resetBuffer()
301 	 */
302 	public void resetBuffer()
303 	{
304 		delegate.resetBuffer();
305 	}
306 
307 	/*
308 	 * (non-Javadoc)
309 	 * 
310 	 * @see javax.servlet.ServletResponse#isCommitted()
311 	 */
312 	public boolean isCommitted()
313 	{
314 		return delegate.isCommitted();
315 	}
316 
317 	/*
318 	 * (non-Javadoc)
319 	 * 
320 	 * @see javax.servlet.ServletResponse#reset()
321 	 */
322 	public void reset()
323 	{
324 		delegate.reset();
325 	}
326 
327 	/*
328 	 * (non-Javadoc)
329 	 * 
330 	 * @see javax.servlet.ServletResponse#setLocale(java.util.Locale)
331 	 */
332 	public void setLocale(Locale arg0)
333 	{
334 		delegate.setLocale(arg0);
335 	}
336 
337 	/*
338 	 * (non-Javadoc)
339 	 * 
340 	 * @see javax.servlet.ServletResponse#getLocale()
341 	 */
342 	public Locale getLocale()
343 	{
344 		return delegate.getLocale();
345 	}
346 
347 	public WrappedResponse(HttpServletResponse del)
348 	{
349 		delegate = del;
350 	}
351 
352 	public int getStatus()
353 	{
354 		return status;
355 	}
356 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/OurPropPatchMethod.html
##-----------------TITLE------------------------##
OurPropPatchMethod xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.util.HashMap;
4   
5   import org.apache.webdav.lib.methods.PropPatchMethod;
6   
7   public class OurPropPatchMethod extends PropPatchMethod {
8   	private HashMap removeProperties = new HashMap();
9   	private HashMap setProperties = new HashMap();
10  
11  	/***
12  	 * @param path
13  	 */
14  	public OurPropPatchMethod(String path) {
15  		super(path);
16  	}
17  
18  	public void addPropertyToRemove(java.lang.String name)
19  	{
20  		super.addPropertyToRemove(name);
21  		removeProperties.put("REMOVE_" + name, name);
22  	}
23  
24  	public void addPropertyToRemove(java.lang.String name,
25              java.lang.String namespace,
26              java.lang.String namespaceInfo)
27  	{
28  		super.addPropertyToRemove(name, namespace, namespaceInfo);
29  		removeProperties.put("REMOVE_" + namespace + ":" + name, namespace + ":" + name);
30  	}
31  
32  	public void addPropertyToSet(java.lang.String name,
33              java.lang.String value)
34  	{
35  		super.addPropertyToSet(name, value);
36  		setProperties.put("SET_" + name, value);
37  	}
38  
39  	public void addPropertyToSet(java.lang.String name,
40              java.lang.String value,
41              java.lang.String namespace,
42              java.lang.String namespaceInfo)
43  	{
44  		super.addPropertyToSet(name, value, namespace, namespaceInfo);
45  		setProperties.put("SET_" + namespace + ":" + name, value);
46  	}
47  
48  	/***
49  	 * @return
50  	 */
51  	public HashMap getRemoveProperties() {
52  		return removeProperties;
53  	}
54  
55  	/***
56  	 * @return
57  	 */
58  	public HashMap getSetProperties() {
59  		return setProperties;
60  	}
61  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/DecreaseDotSizeAction.html
##-----------------TITLE------------------------##
DecreaseDotSizeAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.event.ActionEvent;
4   import java.awt.event.KeyEvent;
5   
6   import javax.swing.ImageIcon;
7   import javax.swing.KeyStroke;
8   
9   /***
10   * @author bpillet
11   */
12  public class DecreaseDotSizeAction extends SVGPieAction {
13  
14  	private static final long serialVersionUID = 1L;
15  	
16  	public DecreaseDotSizeAction()
17  	{
18          putValue(ACTION_COMMAND_KEY, "DecreaseSize");
19  
20          putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_D));
21          
22          putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_GREATER, ActionEvent.CTRL_MASK));
23  
24          //        The key used to determine the command string for the ActionEvent that
25          // will be created when an Action is going to be notified as the result
26          // of residing in a Keymap associated with a JComponent.
27          putValue(LONG_DESCRIPTION,
28                   "Decreases the size of the selected dot");
29  
30          //        The key used for storing a longer description for the action, could
31          // be used for context-sensitive help.
32          //putValue(MNEMONIC_KEY, new Character('S'));
33          //        The key used for storing an int key code to be used as the mnemonic
34          // for the action.
35          putValue(NAME, "Decrease Dot Size");
36  
37          //        The key used for storing the name for the action, used for a menu or
38          // button.
39          putValue(SHORT_DESCRIPTION, "Decreases the size of the selected dot");
40  
41          //        The key used for storing a short description for the action, used for
42          // tooltip text.
43          putValue(SMALL_ICON, new ImageIcon("resources/decreasedot.gif"));
44  
45          //		The key used for storing a small icon for the action, used for
46          // toolbar buttons
47  	}
48  	
49  	public void actionPerformed(ActionEvent e) {
50  		if(getView() != null)
51  			getView().decrementDotSize();
52  	}
53  
54  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/SecurityUtils.html
##-----------------TITLE------------------------##
SecurityUtils xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   /***
4    * DOCUMENT ME!
5    *
6    * @author bpillet
7    */
8   public final class SecurityUtils
9   {
10      /***
11       * Creates a new SecurityUtils object.
12       */
13      private SecurityUtils(){}
14  
15      /***
16       * TODO
17       *
18       * @param level TODO
19       *
20       * @return TODO
21       */
22      public static int getLevelsIndex(String level)
23      {
24          for(int i = 0; i < SwirlSecurity.LEVELS.length; ++i)
25          {
26              if(SwirlSecurity.LEVELS[i].equals(level))
27              {
28                  return i;
29              }
30          }
31  
32          return 0;
33      }
34  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/App.html
##-----------------TITLE------------------------##
App xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   /***
4    * TODO - make sure test cases succeed TODO - make sure it works on mac with
5    * multiple peers TODO - plan out what groups are
6    */
7   public final class App
8   {
9       /*** the port for the server to run on.  Currently 9876 */
10      public static final int PORT = 9876;
11  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/Util.html
##-----------------TITLE------------------------##
Util xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 20, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   import java.awt.Color;
7   import java.awt.Point;
8   import java.io.File;
9   import java.util.Vector;
10  
11  import swirl.workspace.viz.SharingLevel;
12  
13  /***
14   * TODO
15   *
16   * @author $author$
17   * @version $Revision: 1.20 $
18   */
19  public class Util
20  {
21      //if f is a folder, this method returns all files under this folder recursively
22      public static Vector getAllFiles(File f, java.io.FileFilter filter)
23      {
24          Vector files = new Vector();
25  
26          if(f.isFile())
27          {
28              files.add(f);
29          }
30          else
31          {
32              File[] subList = f.listFiles(filter);
33  
34              for(int i = 0; i < subList.length; i++)
35              {
36                  File fe = subList[i];
37                  Vector subFiles = getAllFiles(fe, filter);
38  
39                  files.addAll(subFiles);
40              }
41          }
42  
43          return files;
44      }
45  
46      //if f is a folder, this method returns all files under this folder recursively
47      public static Vector getAllFiles(File[] fls, java.io.FileFilter filter)
48      {
49          Vector files = new Vector();
50          
51          for (int i=0; i<fls.length; i++) files.addAll(getAllFiles(fls[i], filter));    
52          
53          return files;
54      }
55  
56      //get the size of angle for each slice according to the slice number
57      public static double getAngle(int number)
58      {
59          double arcAngle = 359.999 / (double)(number);
60  
61          return arcAngle;
62      }
63  
64      /***
65       * TODO
66       *
67       * @param userKey TODO
68       *
69       * @return TODO
70       */
71      public static String getFileGroupforUser(String userKey)
72      {
73          String fileID = userKey + "files";
74  
75          return fileID;
76      }
77  
78      /***
79       * TODO
80       *
81       * @param fileKey TODO
82       *
83       * @return TODO
84       */
85      public static String getPathforFile(String fileKey)
86      {
87          int idx = fileKey.lastIndexOf(":");
88          String path = fileKey.substring(idx + 1);
89  
90          return path;
91      }
92  
93      /***
94       * TODO
95       *
96       * @param level TODO
97       *
98       * @return TODO
99       */
100     public static double getRadium(int level)
101     {
102         double segFactor = 27.0;
103         double radius = PieWorkSpace.RADIUS;
104 
105         double f = ((1 + level) * level) / segFactor;
106         double radi = radius * (1 - f);
107 
108         return radi;
109     }
110 
111     /***
112      * TODO
113      *
114      * @param x TODO
115      * @param y TODO
116      *
117      * @return TODO
118      */
119     public static int getSharingDegree(double x, double y)
120     {
121         int degree = 0;
122         double r2 = (x * x) + (y * y);
123         return getSharingDegree(Math.sqrt(r2));
124     }
125 
126     //if f is a folder, this method returns all files under this folder recursively
127     public static Vector getSubFiles(File f, java.io.FileFilter filter)
128     {
129         Vector files = new Vector();
130 
131         if(f.isDirectory())
132         {
133             File[] subList = f.listFiles(filter);
134 
135             for(int i = 0; i < subList.length; i++)
136             {
137                 File fe = subList[i];
138 
139                 files.add(fe);
140             }
141         }
142 
143         return files;
144     }
145 
146     /***
147      * TODO
148      *
149      * @param x TODO
150      * @param y TODO
151      *
152      * @return TODO
153      */
154     public static String getTranslateString(double x, double y)
155     {
156         String trans = "translate(" + x + "," + y + ")";
157 
158         return trans;
159     }
160 
161     /***
162      * TODO
163      *
164      * @param fileKey TODO
165      *
166      * @return TODO
167      */
168     public static String getUserIDforFile(String fileKey)
169     {
170         int idx = fileKey.lastIndexOf(":");
171         String userID = fileKey.substring(0, idx);
172 
173         return userID;
174     }
175 
176     /***
177      * TODO
178      *
179      * @param ringKey TODO
180      *
181      * @return TODO
182      */
183     public static String getUserIDforRing(String ringKey)
184     {
185         int idx = ringKey.indexOf(":path");
186         String userID = ringKey.substring(0, idx);
187 
188         return userID;
189     }
190 
191     /***
192      * TODO
193      *
194      * @param id TODO
195      *
196      * @return TODO
197      */
198     public static String getWebdavPathforFile(String id)
199     {
200         String path = getPathforFile(id);
201         String userID = getUserIDforFile(id);
202         String filePath = "http://" + userID + path;
203 
204         return filePath;
205     }
206 
207     /***
208      * TODO
209      *
210      * @param radi TODO
211      * @param pieNum TODO
212      *
213      * @return TODO
214      */
215     public static String caculateDforClosePath(double radi, double arcAngle)
216     {
217         double toX = (radi * Math.cos((arcAngle * Math.PI) / 180)) - radi;
218         double toY = -radi * Math.sin((arcAngle * Math.PI) / 180);
219         String sweepFlag = "0";
220 
221         if(arcAngle > 179)
222         {
223             sweepFlag = "1";
224         }
225 
226         String d = "M0,0 h" + radi + " a" + radi + "," + radi + " 0 "
227                    + sweepFlag + ",0 " + toX + "," + toY + " z";
228 
229         return d;
230     }
231 
232     /***
233      * TODO
234      *
235      * @param radi TODO
236      * @param pieNum TODO
237      *
238      * @return TODO
239      */
240     public static String caculateDforPath(double radi, int pieNum)
241     {
242         double arcAngle = getAngle(pieNum);
243         double mX = radi * Math.cos((arcAngle * Math.PI) / 180);
244         double mY = -radi * Math.sin((arcAngle * Math.PI) / 180);
245         double toX = radi - (radi * Math.cos((arcAngle * Math.PI) / 180));
246         double toY = radi * Math.sin((arcAngle * Math.PI) / 180);
247         String sweepFlag = "0";
248 
249         if(pieNum <= 2)
250         {
251             sweepFlag = "1";
252         }
253 
254         String d = "M" + mX + "," + mY + " a" + radi + "," + radi + " 0 "
255                    + sweepFlag + ",1 " + toX + "," + toY;
256 
257         return d;
258     }
259 
260     /***
261      * TODO
262      *
263      * @param start TODO
264      * @param pieNum TODO
265      * @param level TODO
266      * @param dotR TODO
267      *
268      * @return TODO
269      */
270     public static Point caculateFileLocation(double start, double arcAngle,
271                                              int level, double dotR)
272     {
273     	return caculateFileLocation(start, arcAngle, level, dotR, Math.random());
274     }
275     
276     public static Point caculateFileLocation(double start, double arcAngle, int level, double dotR, double anglePercentage)
277     {
278     	double x;
279         double y;
280         double r;
281         double angle;
282 
283         if(level == 0)
284         {
285         	r = ((100) * Math.random()) + PieWorkSpace.RADIUS + dotR;
286             angle = -(start + anglePercentage * arcAngle);
287         }
288         else
289         {
290             int nextLevel = level + 1;
291             double nradi = getRadium(nextLevel);
292             double radi = getRadium(level);
293 
294             r = nradi + dotR
295                        + (Math.random() * (radi - nradi - (2 * dotR)));
296 
297             //if the level is the centered level
298             if(level == SharingLevel.SHARING_LEVEL)
299             {
300                 if(arcAngle > 179)
301                 {
302                     nradi = dotR;
303                 }
304                 else
305                 {
306                     nradi = dotR / Math.sin((Math.PI * arcAngle) / 360);
307                 }
308 
309                 r = nradi + (Math.random() * (radi - nradi - dotR));
310             }
311 
312             angle = -start - arcAngle * Math.random();
313         }
314 
315         x = Math.round(r * Math.cos(angle * Math.PI / 180));
316         y = Math.round(r * Math.sin(angle * Math.PI / 180));
317 
318         Point point = new Point();
319 
320         point.setLocation(x, y);
321 
322         return point;
323     }
324 
325     /***
326      * TODO
327      *
328      * @param x TODO
329      * @param y TODO
330      * @param startAngle TODO
331      *
332      * @return TODO
333      */
334     public static String caculateTransformforPath(double x, double y,
335                                                   double startAngle)
336     {
337         String transform = getTranslateString(x, y) + " rotate(-" + startAngle
338                            + ")";
339 
340         return transform;
341     }
342 
343     /***
344      * TODO
345      *
346      * @param path TODO
347      *
348      * @return TODO
349      */
350     public static String path2Filename(String path)
351     {
352         int idx = path.lastIndexOf("/");
353         String name = path.substring(idx + 1);
354 
355         return name;
356     }
357 
358     /***
359      * TODO
360      *
361      * @param path TODO
362      *
363      * @return TODO
364      */
365     public static String pathSlide2Swirl(String path)
366     {
367         String swirlpath = path.replaceFirst("slide", "swirl");
368 
369         return swirlpath;
370     }
371     
372     /***
373      * TODO
374      *
375      * @param path TODO
376      *
377      * @return TODO
378      */
379     public static String getStringColor(Color color)
380     {
381     	 String c = "rgb(" + color.getRed() + "," + color.getGreen()
382          + "," + color.getBlue() + ")";
383 
384     	 return c;
385     }
386 
387 	/***
388 	 * @param radius
389 	 * @return
390 	 */
391 	public static int getSharingDegree(double radius) {
392 		int degree = 0;
393 		double r2 = radius * radius;
394 		// TODO Auto-generated method stub
395         if(r2 > (PieWorkSpace.RADIUS * PieWorkSpace.RADIUS))
396         {
397             degree = 0;
398         }
399         else
400         {
401             //find which ring it belongs to
402             for(int i = SharingLevel.SHARING_LEVEL; i >= 0; i--)
403             {
404                 double radi = getRadium(i);
405 
406                 if(r2 < (radi * radi))
407                 {
408                     degree = i;
409 
410                     break;
411                 }
412             }
413         }
414         return degree;
415 	}
416 	
417 
418 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/Level.html
##-----------------TITLE------------------------##
Level xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    */
5   package swirl.workspace.viz.pie;
6   
7   
8   //import org.w3c.dom.Element;
9   
10  /***
11   * DOCUMENT ME!
12   *
13   * @author dingx
14   */
15  public interface Level // extends Element
16  {}

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/FileNode.html
##-----------------TITLE------------------------##
FileNode xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Jul 21, 2004
3    */
4   package swirl.workspace;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author dingx
10   */
11  public class FileNode
12  {
13      /*** how many sharing levels are there */
14      public static final int MAX_LEVELS = 3;
15  
16      /*** the name of this file */
17      private String fileName;
18  
19      /*** the path to this file */
20      private String filePath;
21  
22      /*** is this fileNode a directory */
23      private boolean isDir = false;
24  
25      /*** how far down in the directory structure is this file */
26      private int level;
27  
28      /***
29       * Temporary constructor to set levels
30       *
31       * @param name the name of this file
32       * @param path the path to this file
33       * @param dir is this fileNode a directory?
34       */
35      public FileNode(final String name, final String path, final boolean dir)
36      {
37          this(name, path, (int)Math.round(Math.random() * MAX_LEVELS) + 1, dir);
38      }
39  
40      /***
41       * DOCUMENT ME!
42       *
43       * @param name the name of this file
44       * @param path the path to this file
45       * @param lev how far down in the directory structure is this file
46       * @param dir is this fileNode a directory?
47       */
48      public FileNode(final String name, final String path, final int lev,
49                      final boolean dir)
50      {
51          this.fileName = name;
52          this.filePath = path;
53          this.level = lev;
54          this.isDir = dir;
55      }
56  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SecurityVisualizer.html
##-----------------TITLE------------------------##
SecurityVisualizer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   import java.awt.Dimension;
5   import java.awt.event.ActionEvent;
6   
7   import javax.swing.JScrollPane;
8   import javax.swing.JTable;
9   import javax.swing.table.AbstractTableModel;
10  
11  import org.apache.commons.logging.Log;
12  import org.apache.commons.logging.LogFactory;
13  
14  import swirl.workspace.Peer;
15  import swirl.workspace.PeerManager;
16  import swirl.workspace.security.SwirlSecurityHandler;
17  import swirl.workspace.viz.pie.FileElement;
18  
19  /***
20   * DOCUMENT ME!
21   *
22   * @author bpillet
23   */
24  public class SecurityVisualizer extends BaseVisualizer implements Controller
25  {
26      /*** TODO */
27      private static final long serialVersionUID = 1L;
28  
29      /*** TODO */
30      private Log log = LogFactory.getLog(this.getClass());
31  
32      /*** TODO */
33      JTable table;
34  
35      /*** TODO */
36      SecurityTableModel tableModel;
37  
38      /*** TODO */
39      private Model model;
40  
41      /*** TODO */
42      private swirl.workspace.security.SecurityManager manager;
43  
44      /***
45       * Creates a new SecurityVisualizer object.
46       *
47       * @param model TODO
48       * @param manager TODO
49       */
50      public SecurityVisualizer(Model model,
51                                swirl.workspace.security.SecurityManager manager)
52      {
53          this.model = model;
54          this.manager = manager;
55          setLayout(new BorderLayout(6, 11));
56      }
57  
58      /***
59       * TODO
60       *
61       * @return TODO
62       */
63      public Controller getController()
64      {
65          return this;
66      }
67  
68      /***
69       * TODO
70       *
71       * @return TODO
72       */
73      public Model getModel()
74      {
75          return model;
76      }
77  
78      /***
79       * TODO
80       *
81       * @return TODO
82       */
83      public String getName()
84      {
85          return "Security Listing";
86      }
87  
88      /***
89       * TODO
90       *
91       * @param e TODO
92       */
93      public void actionPerformed(ActionEvent e)
94      {
95          if(log.isDebugEnabled())
96          {
97              log.debug("e: " + e);
98          }
99      }
100 
101     /***
102      * TODO
103      */
104     public void start()
105     {
106         if(log.isDebugEnabled())
107         {
108         	log.debug("starting");
109         }
110         tableModel = new SecurityTableModel();
111         model.addModelChangeListener(tableModel);
112         table = new JTable(tableModel);
113 
114         JScrollPane scrollPane = new JScrollPane(table);
115 
116         table.setPreferredScrollableViewportSize(new Dimension(500, 70));
117         add(scrollPane, BorderLayout.CENTER);
118         if(log.isDebugEnabled())
119         {
120             log.debug("started");
121         }
122     }
123 
124     /***
125      * TODO
126      */
127     public void stop()
128     {
129         if(log.isDebugEnabled())
130         {
131             log.debug("stopped");
132         }
133     }
134 
135     /***
136      * TODO
137      *
138      * @param peer TODO
139      */
140     public void userJoined(Peer peer){}
141 
142     /***
143      * TODO
144      *
145      * @author $author$
146      * @version $Revision: 1.20 $
147      */
148     class SecurityTableModel extends AbstractTableModel implements ModelListener
149 	{
150         /*** TODO */
151         private static final long serialVersionUID = 1L;
152 
153         /*** TODO */
154         FileElement[] files = model.getFiles(PeerManager.getLocalUserID());
155 
156         /*** TODO */
157         private String[] columns = {"File", "Level"};
158 
159         /***
160          * TODO
161          *
162          * @param row TODO
163          * @param col TODO
164          *
165          * @return TODO
166          */
167         public boolean isCellEditable(int row, int col)
168         {
169             return false;
170         }
171 
172         /***
173          * TODO
174          *
175          * @param c TODO
176          *
177          * @return TODO
178          */
179         public Class getColumnClass(int c)
180         {
181             return getValueAt(0, c).getClass();
182         }
183 
184         /***
185          * TODO
186          *
187          * @return TODO
188          */
189         public int getColumnCount()
190         {
191             return columns.length;
192         }
193 
194         /***
195          * TODO
196          *
197          * @param i TODO
198          *
199          * @return TODO
200          */
201         public String getColumnName(int i)
202         {
203             return columns[i];
204         }
205 
206         /***
207          * TODO
208          *
209          * @return TODO
210          */
211         public int getRowCount()
212         {
213             return files.length;
214         }
215 
216         /***
217          * TODO
218          *
219          * @param rowIndex TODO
220          * @param columnIndex TODO
221          *
222          * @return TODO
223          */
224         public Object getValueAt(int rowIndex, int columnIndex)
225         {
226             FileElement fe = files[rowIndex];
227 
228             if(log.isDebugEnabled())
229             {
230                 log.debug("fe: " + fe.getName() + "\npath: " + fe.getLocalPath()
231                           + "\nparent: " + fe.getParentPath());
232             }
233 
234             switch(columnIndex)
235             {
236             case 0:
237                 return fe.getName();
238             case 1:
239                 try
240                 {
241                 	return manager.getSecurityLevel(fe.getName(),
242                             SwirlSecurityHandler.OTHERS);
243                 }
244                 catch(Exception e)
245                 {
246                     log.error(e, e);
247                 }
248 
249             default:
250                 return "unknown";
251             }
252         }
253 
254         /***
255          * TODO
256          *
257          * @param file TODO
258          */
259         public void fileAdded(FileElement file)
260         {
261             //update(file);	
262         }
263 
264         /***
265          * TODO
266          *
267          * @param file TODO
268          */
269         public void fileDeleted(FileElement file)
270         {
271             //update(file);	
272         }
273 
274         /***
275          * TODO
276          *
277          * @param files TODO
278          */
279         public void filesAdded(FileElement[] files)
280         {
281             //update(null);
282         }
283 
284         /***
285          * TODO
286          *
287          * @param peerId TODO
288          * @param files TODO
289          */
290         public void replaceFiles(String peerId, FileElement[] files)
291         {
292             //update(files[0]);
293         }
294 
295         /***
296          * TODO
297          *
298          * @param file TODO
299          */
300         public void propertiesChanged(FileElement file, java.util.Map msg){}
301 
302         /***
303          * TODO
304          *
305          * @param peer TODO
306          */
307         public void userJoined(Peer peer){}
308 
309         /***
310          * TODO
311          *
312          * @param peerId TODO
313          */
314         public void userLeft(String peerId){}
315 
316         /***
317          * TODO
318          *
319          * @param file TODO
320          */
321         private void update(FileElement file)
322         {
323             if(log.isDebugEnabled())
324             {
325                 log.debug("update(): " + file);
326             }
327 
328             files = model.getFiles(PeerManager.getLocalUserID());
329             this.fireTableDataChanged();
330         }
331 
332 		/* (non-Javadoc)
333 		 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
334 		 */
335 		public void flashIt(FileElement fe, String uColor) {
336 			// TODO Auto-generated method stub
337 			
338 		}
339 
340 		/* (non-Javadoc)
341 		 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
342 		 */
343 		public void backupPromotedToPersistent(FileElement file) {
344 			// TODO Auto-generated method stub
345 			
346 		}
347 
348 		/* (non-Javadoc)
349 		 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
350 		 */
351 		public void fileUpdated(FileElement file) {
352 			// TODO Auto-generated method stub
353 			
354 		}
355 
356     }
357 
358 	/* (non-Javadoc)
359 	 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
360 	 */
361 	public void flashIt(FileElement fe, String uColor) {
362 		// TODO Auto-generated method stub
363 	}
364 
365 	/* (non-Javadoc)
366 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
367 	 */
368 	public void backupPromotedToPersistent(FileElement file) {
369 		// TODO Auto-generated method stub
370 		
371 	}
372 
373 	/* (non-Javadoc)
374 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
375 	 */
376 	public void fileUpdated(FileElement file) {
377 		// TODO Auto-generated method stub
378 		
379 	}
380 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SwirlFileFilter.html
##-----------------TITLE------------------------##
SwirlFileFilter xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 31, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import java.io.File;
7   
8   import javax.swing.filechooser.FileFilter;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  /***
14   * DOCUMENT ME!
15   *
16   * @author dingx  A FileFilter used when exporting the SVG document as an
17   *         image.
18   */
19  public class SwirlFileFilter extends FileFilter implements java.io.FileFilter
20  {
21      /*** TODO */
22      private Log log = LogFactory.getLog(this.getClass());
23  
24      /***
25       * TODO
26       *
27       * @return TODO
28       */
29      public String getDescription()
30      {
31          return "All Files";
32      }
33  
34      /***
35       * Returns true if <tt>f</tt> is a file with the correct extension, false
36       * otherwise.
37       *
38       * @param f TODO
39       *
40       * @return TODO
41       */
42      public boolean accept(File f)
43      {
44          boolean accept = false;
45          String fileName = null;
46  
47          if(f != null)
48          {
49              /*
50               * String extension = Util.getExtension(f); log.debug("the extension
51               * is " + extension); if (f.isDirectory()) { accept = true; } else
52               * if (extension != null) { if (extension.equals(Util.svg) ||
53               * extension.equals(Util.htm) || extension.equals(Util.html) ||
54               * extension.equals(Util.doc) || extension.equals(Util.txt) ||
55               * extension.equals(Util.gif) || extension.equals(Util.jpeg) ||
56               * extension.equals(Util.jpg) || extension.equals(Util.png) ||
57               * extension.equals(Util.pdf)) { return true; } else { return false; } }
58               *
59               * return false;
60               */
61              accept = true;
62          }
63  
64          return accept;
65      }
66  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/Coordinate.html
##-----------------TITLE------------------------##
Coordinate xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Dec 2, 2004
3    *
4    */
5   
6   package swirl.workspace.viz.pie;
7   
8   import java.awt.Point;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  import swirl.workspace.viz.SharingLevel;
14  
15  
16  /***
17   * @author Kari
18   * Manages coordinates in both cartesian and polar formats
19   *
20   */
21  public class Coordinate {
22  	
23  	private double radius;
24  	private double relativeAngle; 
25  	private int numberOfUsers;
26  	private int userNumber;  // range 1..numberOfUsers;
27  	/*** TODO */
28  	private Log log = LogFactory.getLog(this.getClass());
29  	private Point absolutePoint = null;//for moving
30  	
31  	
32  	public Coordinate (Point point, int numberOfUsers, int userNumber) 
33  	{
34  		if(log.isDebugEnabled())
35          {
36  			log.debug("Coordinate (Point point, int numberOfUsers, int userNumber)");
37  			log.debug("Coordinate constructor point: x:" + point.getX()  + "; y:" + point.getY());
38  			log.debug("number of Users: " + numberOfUsers);
39  			log.debug("User Number: " + userNumber);
40          }
41  		
42  		this.radius = calculateRadius(point);
43  		double theta = calculateTheta(point);
44  		if(log.isDebugEnabled())
45          {
46  			log.debug("Coordinate constructor: radius is " + radius);
47  			log.debug("Coordinate constructor: theta is " + theta);
48          }
49  		this.relativeAngle = calculateRelativeAngle(theta, numberOfUsers, userNumber);
50  		if(log.isDebugEnabled())
51          {
52  			log.debug("Coordinate constructor: relative angle is " + relativeAngle);
53          }
54  	
55  		this.numberOfUsers = numberOfUsers;
56  		this.userNumber = userNumber;
57  	}
58  	
59  	public Coordinate (double radius, double relativeAngle, int numberOfUsers, int userNumber) 
60  	{
61  		if(log.isDebugEnabled())
62          {
63  			log.debug("Coordinate (double radius, double relativeAngle, int numberOfUsers, int userNumber)");
64  			log.debug("number of Users: " + numberOfUsers);
65  			log.debug("User Number: " + userNumber);
66          }
67  		this.radius = radius;
68  		this.relativeAngle = relativeAngle;
69  		this.numberOfUsers = numberOfUsers;
70  		this.userNumber = userNumber;
71  		int level = Util.getSharingDegree(radius);
72  	}
73  	
74  
75  	public void updateCoordinate (Point point) 
76  	{
77  		radius = calculateRadius(point);
78          double theta = calculateTheta(point);
79          
80          if(log.isDebugEnabled())
81          {
82          	log.debug("updateCoordinate: radius is " + radius);
83          	log.debug("updateCoordinate: theta is " + theta);
84          }
85  		relativeAngle = this.calculateRelativeAngle(theta, this.numberOfUsers, this.userNumber);
86  		if(log.isDebugEnabled())
87          {
88  			log.debug("updateCoordinate: relativeAngle is " + relativeAngle);
89          }
90  	}
91  	
92  	public void updateCoordinate (double radius, double relativeAngle) 
93  	{
94  		if(log.isDebugEnabled())
95          {
96  			log.debug("updateCoordinate (double radius, double relativeAngle)");
97          }
98  		this.radius = radius;
99  		if(log.isDebugEnabled())
100         {
101 			log.debug("updateCoordinate DD: radius is " + radius);
102         }
103 		this.relativeAngle = relativeAngle;
104 		if(log.isDebugEnabled())
105         {
106 			log.debug("updateCoordinate DD: relativeAnge is " + relativeAngle);
107         }
108 	}
109 	
110 	public void updateNumberOfUsers (int numberOfUsers, int userNumber) 
111 	{
112 		this.numberOfUsers = numberOfUsers;
113 		this.userNumber = userNumber;
114 	}
115 
116 	//take relative point
117 	public static double calculateTheta(Point point){
118 		double x = point.getX();
119 		double y = -point.getY();//since in svg, Y is from up to down, we need to change the direction
120 		double theta = Math.toDegrees(Math.atan2(y, x));
121 		if (theta < 0) {
122 			theta = theta + 359.8;
123 		}
124 		return theta;
125 	}
126 	
127 	private double calculatePeerArc (int numberOfPeers) {
128 		return 360.0/numberOfPeers;
129 	}
130 	
131 	private double calculateTheta(double relativeAngle, int numberOfUsers, int userNumber){
132 		double peerArc = calculatePeerArc(numberOfUsers);
133 		return (peerArc * (userNumber-1)) + (peerArc * relativeAngle);
134 		
135 	}
136 	
137 	private double calculateRelativeAngle(double theta, int numberOfUsers, int userIndex) 
138 	{
139 		int n = numberOfUsers;
140 		int idx = userIndex;
141 		
142 		//if it in the persistent space
143 		//we take the relative angle as only one user exists
144 		int level = Util.getSharingDegree(radius); 
145 		if(level == SharingLevel.SHARING_LEVEL){
146 			n = 1;
147 			idx = 1;
148 		}
149 		
150 		int peerArc = (int)calculatePeerArc(n);
151 		double modAngle = theta % peerArc;
152 		if (modAngle == 0) {
153 			// it's 0 or 100 depending on the user index
154 			if ((peerArc * (idx-1)) == theta) {
155 				return 0.0;
156 			} else {
157 				return 1.0;
158 			}
159 		}
160 		double relativeAngle = (modAngle)/peerArc;
161 		// round to two places
162 		double tmp1 = relativeAngle * 100;
163 		double tmp2 = Math.round(tmp1);
164 		double relativeRounded = tmp2/100;
165 		return relativeRounded;
166 	}
167 	
168 	//take relative point
169 	public static double calculateRadius (Point point) 
170 	{
171 		double x = point.getX();
172 		double y = point.getY();
173 		return Math.sqrt(x*x + y*y);
174 	}
175 	
176 	private Point calculatePoint (double radius, double theta) {
177 		if(log.isDebugEnabled())
178         {
179 			log.debug("calculatePoint (double radius, double theta)");
180         }
181 		double x = Math.cos( Math.toRadians(theta) ) * radius; 
182 		//since in svg, Y is from up to down, we need to change the direction
183 		double y = -Math.sin( Math.toRadians(theta) ) * radius; 
184 		Point point = new Point();
185 		point.setLocation(x,y);
186 		if(log.isDebugEnabled())
187         {
188 			log.debug("point: x:" + point.getX()  + "; y:" + point.getY());
189         }
190 		return point;
191 	}
192 	
193 	public double getRelativeAngle () 
194 	{
195 		return relativeAngle;
196 	}
197 	
198 	public double getRadius () 
199 	{
200 		return radius;
201 	}
202 	
203 	public Point getPoint () 
204 	{
205 		int n = numberOfUsers;
206 		int idx = userNumber;
207 		
208 		//if it in the persistent space
209 		//we take the relative angle as only one user exists
210 		int level = Util.getSharingDegree(radius); 
211 		if(level == SharingLevel.SHARING_LEVEL){
212 			n = 1;
213 			idx = 1;
214 		}
215 		double theta = calculateTheta (this.relativeAngle, n, idx);
216 		Point point = calculatePoint (this.radius, theta);
217 		return point;
218 	}
219 	
220 	public double getTheta()
221 	{
222 		return calculateTheta (this.relativeAngle, this.numberOfUsers, this.userNumber);
223 	}
224 
225 	/***
226 	 * @return
227 	 */
228 	public Point getAbsolutePoint() {
229 		if(absolutePoint == null){
230 			absolutePoint = getPoint();
231 		}
232 		return absolutePoint;
233 	}
234 
235 	/***
236 	 * @param locPoint
237 	 */
238 	public void setAbsolutePoint(Point locPoint) {
239 		absolutePoint = locPoint;
240 		
241 	}
242 
243 	/***
244 	 * 
245 	 */
246 	public void updateAbsolutePoint() {
247 		setAbsolutePoint(getPoint());
248 		
249 	}
250 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/MessageReceiver.html
##-----------------TITLE------------------------##
MessageReceiver xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.util.Map;
4   
5   /***
6    * Any messaging infrastructure that swirl uses must implement this interface to be
7    * incorporated into swirl.
8    *
9    * @author bpillet
10   * @version $Revision: 1.4 $
11   * @see MessageSender
12   * @see MessageProcessor
13   */
14  public interface MessageReceiver
15  {
16      /***
17       * Receive a message as a set of key/value pairs and pass the message on to
18       * all of the MessageProcessor objects
19       *
20       * @param msg the message from the messaging system
21       */
22      public void receiveMessage(Map msg);
23  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/ColorManager.html
##-----------------TITLE------------------------##
ColorManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import java.awt.Color;
4   
5   import org.apache.commons.logging.Log;
6   import org.apache.commons.logging.LogFactory;
7   
8   /*
9    * Created on Jul 19, 2004
10   */
11  
12  /***
13   * DOCUMENT ME!
14   *
15   * @author dingx
16   */
17  public class ColorManager
18  {
19      /*** TODO */
20      public static ColorManager instance = null;
21  
22      /*** TODO */
23      protected Log log = LogFactory.getLog(this.getClass());
24  
25      /*** TODO */
26      Color[] colors = 
27                       {
28                           Color.YELLOW, Color.BLUE, Color.GREEN, Color.MAGENTA,
29                           Color.ORANGE, Color.RED, Color.PINK
30                       };
31  
32      /***
33       * TODO
34       *
35       * @return TODO
36       */
37      public static ColorManager getInstance()
38      {
39          if(instance == null)
40          {
41              instance = new ColorManager();
42          }
43  
44          return instance;
45      }
46  
47      /*
48         public Color allocateColorForPeer(Peer peer){
49             String host = peer.getAddress();
50             log.debug("The host is " + host);
51             int lidx = host.lastIndexOf(".");
52             String ipLast = host.substring(lidx + 1);
53             int ipCode = Integer.parseInt(ipLast);
54             log.debug("The last part is " + ipLast);
55             log.debug("The ipCode is " + ipCode);
56             return Color.decode("0x" + Integer.toHexString(ipCode * 100000));
57         }
58       */
59  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/Dot.html
##-----------------TITLE------------------------##
Dot xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 31, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author bpillet
10   */
11  public interface Dot
12  {
13      /***
14       * TODO
15       */
16      public void fileOpen();
17  
18      /***
19       * TODO
20       *
21       * @param highlight TODO
22       */
23      public void highlightDot(boolean highlight);
24  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/CopyCommand.html
##-----------------TITLE------------------------##
CopyCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.apache.webdav.lib.methods.CopyMethod;
10  
11  /***
12   * Proxies an WebDAV COPY command to a specific peer
13   *
14   * @author Ben Pillet/Kari Nies
15   */
16  public class CopyCommand extends ProxyCommand
17  {
18      /*** commons-logging log that maps to this Command */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      /***
22       * Constructor that calls super constructor
23       *
24       * @param req see super
25       * @param resp see super
26       * @param host see super
27       * @param path see super
28       * @param peerManager see super
29       */
30      public CopyCommand(final HttpServletRequest req,
31                         final HttpServletResponse resp, final String host,
32                         final String path, final PeerManager peerManager)
33      {
34          super(req, resp, host, path, peerManager);
35      }
36  
37      /***
38       * Implements the abstract method from ProxyCommand to return a WebDAV COPY
39       * method
40       *
41       * @param url the url to execute the method on
42       *
43       * @return an instance of CopyMethod
44       */
45      public HttpMethod createMethod(final String url)
46      {
47          CopyMethod method = new CopyMethod(url);
48  
49          //overwrite is assumed to be true unless otherwise
50          String overwrite = getRequest().getHeader("Overwrite");
51  
52          if(log.isDebugEnabled())
53          {
54              log.debug("overwrite: " + overwrite);
55          }
56  
57          if((overwrite != null) && overwrite.equals("F"))
58          {
59              method.setOverwrite(false);
60          }
61  
62          String destination = getRequest().getHeader("Destination");
63  
64          if(log.isDebugEnabled())
65          {
66              log.debug("destination: " + destination);
67          }
68  
69          //remove the domain name from the url because CopyMethod
70          // automatically adds it on
71          //chop the http:// off
72          destination = destination.substring("http:///".length());
73  
74          int i = destination.indexOf("/");
75  
76          if(log.isDebugEnabled())
77          {
78              log.debug("i: " + i);
79          }
80  
81          destination = destination.substring(i);
82  
83          if(log.isDebugEnabled())
84          {
85              log.debug("destination without host: " + destination);
86          }
87  
88          //change /swirl to /slide
89          destination = destination.replaceFirst("/swirl", "/slide");
90  
91          if(log.isDebugEnabled())
92          {
93              log.debug("destination with slide: " + destination);
94          }
95  
96          method.setDestination(destination);
97  
98          //set If header only if it exists
99          String ifHeader = getRequest().getHeader("If");
100 
101         if(log.isDebugEnabled())
102         {
103             log.debug("If: " + ifHeader);
104         }
105 
106         if(ifHeader != null)
107         {
108             method.setRequestHeader("If", ifHeader);
109         }
110 
111         return method;
112     }
113 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/FileElement.html
##-----------------TITLE------------------------##
FileElement xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import java.util.Enumeration;
4   
5   import org.apache.commons.logging.Log;
6   import org.apache.commons.logging.LogFactory;
7   import org.apache.webdav.lib.BaseProperty;
8   import org.apache.webdav.lib.Property;
9   import org.apache.webdav.lib.ResponseEntity;
10  import org.apache.webdav.lib.WebdavResource;
11  import org.apache.webdav.lib.methods.DepthSupport;
12  import org.apache.webdav.lib.methods.PropFindMethod;
13  import org.apache.webdav.lib.properties.ResourceTypeProperty;
14  
15  import swirl.workspace.Peer;
16  import swirl.workspace.common.NetUtils;
17  import swirl.workspace.viz.SharingLevel;
18  
19  /*
20   * Created on 2004-7-15
21   */
22  
23  /***
24   * DOCUMENT ME!
25   * 
26   * @author Xianghua Ding
27   */
28  public class FileElement {
29  	/*** TODO */
30  	static final int TYPE_DIRECTORY = 0;
31  
32  	/*** TODO */
33  	static final int TYPE_NODE = 1;
34  
35  	/*** TODO */
36  	protected Log log = LogFactory.getLog(this.getClass());
37  
38  	/*** TODO */
39  	private SharingLevel shareDegree; //the degree of sharing
40  
41  	/*** TODO */
42  	private String key; //the file key is it's path in the format of
43  
44  	// /swirl/file
45  
46  	/*** TODO */
47  	private String name; //file name
48  
49  	/*** TODO */
50  	private String ownerKey; //the user who owns this file
51  
52  	/*** TODO */
53  	private String path;//it's path in the format of /slide/file
54  
55  	/*** TODO */
56  	private String userKey; //the user who is using this file
57  
58  	/*** TODO */
59  	private boolean isDir;
60  
61  	/*** TODO */
62  	private double reangle = 0.0;
63  
64  	private double radius = 0.0;
65  
66  	private boolean hasReangle = false;
67  
68  	private boolean hasRadius = false;
69  
70  	/***
71  	 * construct of File Element
72  	 * 
73  	 * @param fileKey
74  	 *            int the index of the owner
75  	 * @param fileName
76  	 *            String file's name
77  	 * @param okey
78  	 *            int the index of the user who uses this file
79  	 * @param ukey
80  	 *            TODO
81  	 * @param sDegree
82  	 *            int degree os sharing
83  	 */
84  	public FileElement(String fileKey, String fileName, String okey,
85  			String ukey, SharingLevel sDegree) {
86  		this.key = (fileKey);
87  		this.path = (fileKey);
88  		this.name = NetUtils.decode(fileName);
89  		this.ownerKey = okey;
90  		this.userKey = ukey;
91  		this.shareDegree = sDegree;
92  		this.isDir = false;
93  	}
94  
95  	/***
96  	 * @param peer
97  	 * @param item
98  	 */
99  	public FileElement(Peer peer, ResponseEntity item) {
100 		key = item.getHref();
101 		if (log.isDebugEnabled()){ 
102 			log.debug("the key for FileElement is " + key);
103 		}
104 		name = NetUtils.decode(Util.path2Filename(key));
105 		this.ownerKey = peer.getUniqueID();
106 		this.userKey = peer.getUniqueID();
107 		shareDegree = new SharingLevel(0);
108 
109 		this.isDir = false;
110 		for (Enumeration props = item.getProperties(); props.hasMoreElements();) {
111 			Property prop = (Property) props.nextElement();
112 			if (log.isDebugEnabled()) { 
113 				log.debug("the property is " + prop.getLocalName());
114 			}
115 			if (prop instanceof ResourceTypeProperty) {
116 				ResourceTypeProperty property = (ResourceTypeProperty) prop;
117 				isDir = property.isCollection();
118 			} else if (prop.getLocalName().equals(
119 					SharingLevel.SHARING_PROPERTY_NAME)) {
120 				shareDegree = new SharingLevel(Integer.parseInt(prop
121 						.getPropertyAsString()));
122 				if (log.isDebugEnabled()){
123 					log.debug("the sharing level is" + shareDegree);
124 				}
125 			} else if (prop.getLocalName().equals("localPath")) {
126 				path = prop.getPropertyAsString();
127 				if (log.isDebugEnabled()){
128 					log.debug("the local path is" + path);
129 				}
130 			} else if (prop.getLocalName().equals(DotElement.RELATIVE_ANGLE)) {
131 				String relativeAngle = prop.getPropertyAsString();
132 				if (log.isDebugEnabled()){
133 					log.debug("the relative angle is" + relativeAngle);
134 				}
135 				reangle = Double.parseDouble(relativeAngle);
136 				hasReangle = true;
137 			} else if (prop.getLocalName().equals(DotElement.RADIUS)) {
138 				String sRadius = prop.getPropertyAsString();
139 				if (log.isDebugEnabled()){
140 					log.debug("the radius is" + sRadius);
141 				}
142 				radius = Double.parseDouble(sRadius);
143 				hasRadius = true;
144 			}
145 		}
146 		//if it is private, we don't need position info anyway
147 		if (shareDegree.getValue() == 0) {
148 			hasReangle = false;
149 			hasRadius = false;
150 		}
151 
152 		if (log.isDebugEnabled()) {
153 			log.debug("the owner of this file is " + ownerKey);
154 		}
155 	}
156 
157 	/***
158 	 * Creates a new FileElement object.
159 	 * 
160 	 * @param peerId
161 	 *            TODO
162 	 * @param resource
163 	 *            TODO
164 	 */
165 	public FileElement(Peer peer, WebdavResource resource) {
166 		this.key = resource.getPath();
167 		this.path = getLocalPath(peer);
168 
169 		if (log.isDebugEnabled()) {
170 			log.debug("the key for FileElement is " + key);
171 		}
172 
173 		name = NetUtils.decode(Util.path2Filename(key));
174 
175 		if (log.isDebugEnabled()) {
176 			log.debug("the display name for FileElement is " + name);
177 		}
178 
179 		this.ownerKey = peer.getUniqueID();
180 		this.userKey = peer.getUniqueID();
181 
182 		this.shareDegree = this.getSharingLevel(peer, path);
183 
184 		this.isDir = resource.isCollection();
185 
186 		if (log.isDebugEnabled()) {
187 			log.debug("the owner of this file is " + ownerKey);
188 		}
189 	}
190 
191 	/***
192 	 * @param ownerPeer
193 	 * @param userPeer
194 	 * @param path2
195 	 */
196 	public FileElement(Peer ownerPeer, Peer userPeer, String fileKey) {
197 		this.key = fileKey;
198 		this.path = getLocalPath(ownerPeer);
199 
200 		/*
201 		 * int turn = 0; while (path == null && turn < 5) { try { < < < < < < <
202 		 * FileElement.java Thread.sleep(500); ======= Thread.sleep(1000);
203 		 * >>>>>>> 1.37 } catch (InterruptedException e) { // TODO
204 		 * Auto-generated catch block e.printStackTrace(); } path =
205 		 * getLocalPath(ownerPeer); turn ++; }
206 		 */
207 		this.name = NetUtils.decode(Util.path2Filename(fileKey));
208 		this.ownerKey = ownerPeer.getUniqueID();
209 		this.userKey = userPeer.getUniqueID();
210 		this.shareDegree = getSharingLevel(ownerPeer, key);
211 		this.isDir = false;
212 	}
213 
214 	/***
215 	 * @param opeer
216 	 * @param upeer
217 	 * @param path2
218 	 * @param sharingLevel
219 	 *            provide sharingLevel to avoid an unnecessary propget
220 	 */
221 	public FileElement(Peer opeer, Peer upeer, String fileKey, int sharingLevel) {
222 		this.key = fileKey;
223 		this.path = getLocalPath(opeer);
224 		this.name = NetUtils.decode(Util.path2Filename(fileKey));
225 		this.ownerKey = opeer.getUniqueID();
226 		this.userKey = upeer.getUniqueID();
227 		this.shareDegree = new SharingLevel(sharingLevel);
228 		this.isDir = false;
229 
230 	}
231 
232 	/***
233 	 * DOCUMENT ME!
234 	 * 
235 	 * @param isDir
236 	 *            The isDir to set.
237 	 */
238 	public void setDir(boolean isDir) {
239 		this.isDir = isDir;
240 	}
241 
242 	/***
243 	 * DOCUMENT ME!
244 	 * 
245 	 * @return Returns the isDir.
246 	 */
247 	public boolean isDir() {
248 		return isDir;
249 	}
250 
251 	/***
252 	 * TODO
253 	 * 
254 	 * @param isDirectory
255 	 *            TODO
256 	 */
257 	public void setDirFlag(boolean isDirectory) {
258 		isDir = isDirectory;
259 	}
260 
261 	/***
262 	 * DOCUMENT ME!
263 	 * 
264 	 * @param key
265 	 *            The key to set.
266 	 */
267 	public void setKey(String key) {
268 		this.key = key;
269 	}
270 
271 	/***
272 	 * DOCUMENT ME!
273 	 * 
274 	 * @return Returns the key.
275 	 */
276 	public String getKey() {
277 		return key;
278 	}
279 
280 	/***
281 	 * DOCUMENT ME!
282 	 * 
283 	 * @param name
284 	 *            The name to set.
285 	 */
286 	public void setName(String name) {
287 		this.name = NetUtils.decode(name);
288 	}
289 
290 	/***
291 	 * DOCUMENT ME!
292 	 * 
293 	 * @return Returns the name.
294 	 */
295 	public String getName() {
296 		return name;
297 	}
298 
299 	/***
300 	 * TODO
301 	 * 
302 	 * @return TODO
303 	 */
304 	public int getNumberDegree() {
305 		return shareDegree.getValue();
306 	}
307 
308 	/***
309 	 * DOCUMENT ME!
310 	 * 
311 	 * @param ownerKey
312 	 *            The ownerKey to set.
313 	 */
314 	public void setOwnerKey(String ownerKey) {
315 		this.ownerKey = ownerKey;
316 	}
317 
318 	/***
319 	 * DOCUMENT ME!
320 	 * 
321 	 * @return Returns the ownerKey.
322 	 */
323 	public String getOwnerKey() {
324 		return ownerKey;
325 	}
326 
327 	/***
328 	 * TODO
329 	 * 
330 	 * @return TODO
331 	 */
332 	public String getParentPath() {
333 		// TODO make this work
334 		return path;
335 	}
336 
337 	/***
338 	 * TODO
339 	 * 
340 	 * @param path
341 	 *            TODO
342 	 */
343 	public void setLocalPath(String path) {
344 		this.path = path;
345 		//this.key = path;
346 	}
347 
348 	/***
349 	 * DOCUMENT ME!
350 	 * 
351 	 * @return Returns the path.
352 	 */
353 	public String getLocalPath() {
354 		return path;
355 	}
356 
357 	/***
358 	 * DOCUMENT ME!
359 	 * 
360 	 * @param shareDegree
361 	 *            The shareDegree to set.
362 	 */
363 	public void setShareDegree(SharingLevel shareDegree) {
364 		// change on the server
365 		this.shareDegree = shareDegree;
366 	}
367 
368 	/***
369 	 * DOCUMENT ME!
370 	 * 
371 	 * @return Returns the shareDegree
372 	 */
373 	public SharingLevel getShareDegree() {
374 		return shareDegree;
375 	}
376 
377 	/***
378 	 * DOCUMENT ME!
379 	 * 
380 	 * @param userKey
381 	 *            The userKey to set.
382 	 */
383 	public void setUserKey(String userKey) {
384 		this.userKey = userKey;
385 	}
386 
387 	/***
388 	 * DOCUMENT ME!
389 	 * 
390 	 * @return Returns the userKey.
391 	 */
392 	public String getUserKey() {
393 		return userKey;
394 	}
395 
396 	/***
397 	 * TODO
398 	 * 
399 	 * @return TODO
400 	 */
401 	public String getWebdavPathforFile() {
402 		if (log.isDebugEnabled()) {
403 			log.debug("userID is " + userKey);
404 		}
405 
406 		String filePath = "http://" + userKey + path;
407 
408 		if (log.isDebugEnabled()) {
409 			log.debug("the new file path is " + filePath);
410 		}
411 
412 		return filePath;
413 	}
414 
415 	/***
416 	 * @param peer
417 	 * @param path
418 	 * @return
419 	 */
420 	private SharingLevel getSharingLevel(Peer peer, String path) {
421 		try {
422 			if (log.isDebugEnabled()) {
423 				log.debug("before finding sharingDegree");
424 				log.debug("the peer is " + peer.getHttpURL());
425 				log.debug("the path is " + path);
426 			}
427 			int sharinglevel = 0;
428 			PropFindMethod propFind = new PropFindMethod(path,
429 					DepthSupport.DEPTH_1);
430 			peer.executeHttpRequestMethodWithoutLog(propFind);
431 
432 			Enumeration enumeration = propFind.getResponses();
433 			while (enumeration.hasMoreElements()) {
434 				ResponseEntity item = (ResponseEntity) enumeration.nextElement();
435 				Enumeration properties = item.getProperties();
436 				while (properties.hasMoreElements()) {
437 					BaseProperty property = (BaseProperty) properties
438 							.nextElement();
439 					if (property.getLocalName().equals(
440 							SharingLevel.SHARING_PROPERTY_NAME)) {
441 						sharinglevel = Integer.parseInt(property
442 								.getPropertyAsString());
443 						if (log.isDebugEnabled()){
444 							log.debug("the sharing level is" + sharinglevel);
445 						}
446 						break;
447 					}
448 				}
449 			}
450 			propFind.releaseConnection();
451 			propFind.recycle();
452 
453 			return new SharingLevel(sharinglevel);
454 		} catch (Exception e) {
455 			log.error(peer.getUniqueID() + ":" + path, e);
456 		}
457 		return new SharingLevel();
458 	}
459 
460 	private String getLocalPath(Peer peer) {
461 		String localpath = null;
462 		for (int i = 0; i < 1; i++) {
463 			try {
464 				if (log.isDebugEnabled()) {
465 					log.debug("before finding localpath");
466 					log.debug("the peer is " + peer.getHttpURL());
467 				}
468 				PropFindMethod propFind = new PropFindMethod(key,
469 						DepthSupport.DEPTH_1);
470 				peer.executeHttpRequestMethodWithoutLog(propFind);
471 
472 				Enumeration enumeration = propFind.getResponses();
473 				boolean found = false;
474 				while (enumeration.hasMoreElements()) {
475 					ResponseEntity item = (ResponseEntity) enumeration.nextElement();
476 					Enumeration properties = item.getProperties();
477 					while (properties.hasMoreElements()) {
478 						BaseProperty property = (BaseProperty) properties
479 								.nextElement();
480 						if (property.getLocalName().equals("localPath")) {
481 							localpath = property.getPropertyAsString();
482 							if (log.isDebugEnabled()){
483 								log.debug("the path is" + path);
484 							}
485 							found = true;
486 							break;
487 						}
488 					}
489 				}
490 				if (found)
491 					break;
492 				else {
493 				    // Thread.sleep(500);
494 				}
495 				propFind.releaseConnection();
496 				propFind.recycle();
497 			} catch (Exception e) {
498 				if (path == null) {
499 					log.error(peer.getUniqueID() + ": NULL", e);
500 				} else {
501 					log.error(peer.getUniqueID() + ":" + path, e);
502 				}
503 			}
504 		}
505 		return localpath;
506 	}
507 
508 	public String toString() {
509 
510 		String output = new String();
511 		output = "FileElement : \n" + "key: " + key + " \n" + "name: "
512 				+ this.name + " \n" + "ownerkey: " + this.ownerKey + " \n"
513 				+ "userkey: " + this.userKey + " \n" + "path: " + this.path
514 				+ " \n" + "level: " + this.shareDegree.getValue() + " \n";
515 
516 		return output;
517 	}
518 
519 	static public String getTextSharingLevel(SharingLevel level) {
520 		String text = "";
521 		switch (level.getValue()) {
522 		case 0:
523 			text = "private - no one else can see";
524 			break;
525 		case 1:
526 			text = "others can see only";
527 			break;
528 		case 2:
529 			text = "others can open and read";
530 			break;
531 		case 3:
532 			text = "others can open, read, edit, and copy";
533 			break;
534 		case 4:
535 			text = "persistent - it will stay when you leave";
536 			break;
537 		}
538 		return text;
539 	}
540 
541 	public boolean isEnabledCopy() {
542 		if (this.shareDegree.getValue() >= SharingLevel.SHARING_LEVEL - 1) {
543 			return true;
544 		} else {
545 			return false;
546 		}
547 	}
548 
549 	public boolean isEnabledOpen() {
550 		if (this.shareDegree.getValue() >= SharingLevel.SHARING_LEVEL - 2) {
551 			return true;
552 		} else {
553 			return false;
554 		}
555 	}
556 
557 	/***
558 	 * @return Returns the reangle.
559 	 */
560 	public double getReangle() {
561 		return reangle;
562 	}
563 
564 	/***
565 	 * @return Returns the redius.
566 	 */
567 	public double getRadius() {
568 		return radius;
569 	}
570 
571 	/***
572 	 * @return
573 	 */
574 	public boolean hasReangle() {
575 		return hasReangle;
576 	}
577 
578 	/***
579 	 * @return
580 	 */
581 	public boolean hasRadius() {
582 		return hasRadius;
583 	}
584 
585 	/***
586 	 * @param d
587 	 */
588 	public void setRadius(double d) {
589 		radius = d;
590 		hasRadius = true;
591 	}
592 
593 	/***
594 	 * @param d
595 	 */
596 	public void setReangle(double d) {
597 		reangle = d;
598 		hasReangle = true;
599 
600 	}
601 
602 	/***
603 	 * @return
604 	 */
605 	public boolean isPrivate() {
606 		if(radius > PieWorkSpace.RADIUS){
607 			return true;
608 		}else {
609 			
610 			return false;	
611 		}
612 		
613 	}
614 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/BaseVisualizer.html
##-----------------TITLE------------------------##
BaseVisualizer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.event.WindowEvent;
4   import java.awt.event.WindowListener;
5   
6   import javax.swing.JComponent;
7   import javax.swing.JFrame;
8   import javax.swing.JMenuBar;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  import org.picocontainer.Startable;
13  
14  import swirl.workspace.viz.pie.FileElement;
15  
16  /***
17   * Implements the Visualizer interface with a JComponent and default, empty
18   * implementations
19   *
20   * @author bpillet
21   */
22  public abstract class BaseVisualizer extends JComponent implements Visualizer,
23                                                                     Startable,
24  																   WindowListener
25  {
26  	/*** the logger for this class */
27      private Log log = LogFactory.getLog(this.getClass());
28  
29      /***
30       * @see super
31       *
32       * @return the name of htis visualizer
33       */
34      public abstract String getName();
35  
36      /***
37       * hook method that is called whenever a file is added by a peer
38       *
39       * @param file the file that was added
40       */
41      public void fileAdded(FileElement file)
42      {
43      	log.debug("fileAdded(" + file + ") default empty implementation");
44      }
45  
46      /***
47       * hook method that is called whenever a file is deleted by a peer
48       *
49       * @param file the file that was deleted
50       */
51      public void fileDeleted(FileElement file)
52      {
53      	if(log.isDebugEnabled())
54          {
55      		log.debug("fileDeleted(" + file + ") default empty implementation");
56          }
57      }
58  
59      /***
60       * like fileAdded but with many files
61       *
62       * @param files the added files
63       */
64      public void filesAdded(FileElement[] files)
65      {
66      	if(log.isDebugEnabled())
67          {
68      		log.debug("filesAdded(" + files + ") default empty implementation");
69          }
70      }
71  
72      /***
73       * TODO
74       *
75       * @param peerID TODO
76       */
77      public void peerPathChanged(String peerID)
78      {
79      	if(log.isDebugEnabled())
80          {
81      		log.debug("peerPathChanged(" + peerID + ") default empty implementation");
82          }
83      }
84  
85  
86      /***
87       * TODO
88       *
89       * @param peerId TODO
90       * @param files TODO
91       */
92      public void replaceFiles(String peerId, FileElement[] files)
93      {
94      	if(log.isDebugEnabled())
95          {
96      		log.debug("replaceFiles(" + peerId + ", " + files + ") default empty implementation");
97          }
98      }
99  
100     /***
101      * called when the sharing level of a file changes
102      *
103      * @param file the changed file
104      */     
105     public void propertiesChanged(FileElement file, java.util.Map msg)
106     {
107     	if(log.isDebugEnabled())
108         {
109     		log.debug("propertiesChanged(" + file + ") default empty implementation");
110         }
111     }
112 
113     /***
114      * hook when a user joins the space
115      *
116      * @param userKey the new user/peerId
117      */
118     public void userJoined(String userKey)
119     {
120     	if(log.isDebugEnabled())
121         {
122     		log.debug("userJoined(" + userKey +") default empty implementation");
123         }
124     }
125 
126     /***
127      * hook when a user leaves the space
128      *
129      * @param userKey the old user/peerId
130      */
131     public void userLeft(String userKey)
132     {
133     	if(log.isDebugEnabled())
134         {
135     		log.debug("userLeft(" + userKey +") default empty implementation");
136         }
137     }
138     
139 
140 	/* (non-Javadoc)
141 	 * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)
142 	 */
143 	public void windowActivated(WindowEvent arg0) {
144 		// TODO Auto-generated method stub
145 		
146 	}
147 
148 	/* (non-Javadoc)
149 	 * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)
150 	 */
151 	public void windowClosed(WindowEvent arg0) {
152 		// TODO Auto-generated method stub
153 		
154 	}
155 
156 	/* (non-Javadoc)
157 	 * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)
158 	 */
159 	public void windowClosing(WindowEvent arg0) {
160 		// TODO Auto-generated method stub
161 		
162 	}
163 
164 	/* (non-Javadoc)
165 	 * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)
166 	 */
167 	public void windowDeactivated(WindowEvent arg0) {
168 		// TODO Auto-generated method stub
169 		
170 	}
171 
172 	/* (non-Javadoc)
173 	 * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)
174 	 */
175 	public void windowDeiconified(WindowEvent arg0) {
176 		// TODO Auto-generated method stub
177 		
178 	}
179 
180 	/* (non-Javadoc)
181 	 * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)
182 	 */
183 	public void windowIconified(WindowEvent arg0) {
184 		// TODO Auto-generated method stub
185 		
186 	}
187 
188 	/* (non-Javadoc)
189 	 * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)
190 	 */
191 	public void windowOpened(WindowEvent arg0) {
192 		// TODO Auto-generated method stub
193 		
194 	}
195 	
196 	/***
197 	 * empty implementation of getMenu()
198 	 * @author depaula
199 	 *
200 	 * TODO To change the template for this generated type comment go to
201 	 * Window - Preferences - Java - Code Style - Code Templates
202 	 */
203 	public JMenuBar getMenuBar() {
204 		return null;
205 	}
206 
207 	public void setRoot(JFrame _root) {}
208 	
209 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/DeleteCommand.html
##-----------------TITLE------------------------##
DeleteCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.webdav.lib.methods.DeleteMethod;
8   
9   /***
10   * Remove an object or collection from the workspace
11   *
12   * @author Ben Pillet
13   */
14  public class DeleteCommand extends ProxyCommand
15  {
16      /***
17       * Constructor that calls super constructor
18       *
19       * @param req see super
20       * @param resp see super
21       * @param host see super
22       * @param path see super
23       * @param peerManager see super
24       */
25      public DeleteCommand(final HttpServletRequest req,
26                           final HttpServletResponse resp, final String host,
27                           final String path, final PeerManager peerManager)
28      {
29          super(req, resp, host, path, peerManager);
30      }
31  
32      /***
33       * Implements the abstract method from ProxyCommand to return a WebDAV
34       * DELETE method
35       *
36       * @param url the url to execute the method on
37       *
38       * @return an instance of DeleteMethod
39       */
40      public HttpMethod createMethod(final String url)
41      {
42          DeleteMethod method = new DeleteMethod(url);
43  
44          return method;
45      }
46  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/OptionsCommand.html
##-----------------TITLE------------------------##
OptionsCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.httpclient.methods.OptionsMethod;
8   
9   /***
10   * Proxies an OPTION request to a peer
11   *
12   * @author bpillet
13   */
14  public class OptionsCommand extends ProxyCommand
15  {
16      /***
17       * Constructor that just calls super
18       *
19       * @param req see super
20       * @param resp see super
21       * @param host see super
22       * @param path see super
23       * @param peerManager see super
24       */
25      public OptionsCommand(final HttpServletRequest req,
26                            final HttpServletResponse resp, final String host,
27                            final String path, final PeerManager peerManager)
28      {
29          super(req, resp, host, path, peerManager);
30      }
31  
32      /***
33       * Creates an OptionsMethod for OPTION http requests
34       *
35       * @param url the url to proxy to
36       *
37       * @return an OptionsMethod to the url
38       */
39      public HttpMethod createMethod(final String url)
40      {
41          return new OptionsMethod(url);
42      }
43  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/SVGPieView.html
##-----------------TITLE------------------------##
SVGPieView xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 9, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   import java.awt.BorderLayout;
7   import java.awt.Color;
8   import java.awt.Point;
9   import java.awt.event.ActionEvent;
10  import java.awt.event.ActionListener;
11  import java.awt.event.WindowEvent;
12  import java.awt.event.KeyEvent;
13  import java.io.File;
14  import java.util.Iterator;
15  import java.util.List;
16  import java.util.Vector;
17  
18  import javax.swing.Action;
19  import javax.swing.ActionMap;
20  import javax.swing.ImageIcon;
21  import javax.swing.JButton;
22  import javax.swing.JFileChooser;
23  import javax.swing.JFrame;
24  import javax.swing.JMenu;
25  import javax.swing.JMenuBar;
26  import javax.swing.JMenuItem;
27  import javax.swing.JOptionPane;
28  import javax.swing.JPopupMenu;
29  import javax.swing.JToolBar;
30  import javax.swing.JCheckBoxMenuItem;
31  import javax.swing.KeyStroke;
32  
33  import org.apache.batik.bridge.UpdateManager;
34  import org.apache.batik.dom.events.DOMMouseEvent;
35  import org.apache.batik.dom.events.DOMUIEvent;
36  import org.apache.batik.swing.JSVGCanvas;
37  import org.apache.batik.swing.svg.SVGLoadEventDispatcherAdapter;
38  import org.apache.batik.swing.svg.SVGLoadEventDispatcherEvent;
39  import org.apache.batik.util.SVGConstants;
40  import org.apache.commons.logging.Log;
41  import org.apache.commons.logging.LogFactory;
42  import org.w3c.dom.Element;
43  import org.w3c.dom.NodeList;
44  import org.w3c.dom.events.Event;
45  import org.w3c.dom.events.EventListener;
46  import org.w3c.dom.events.EventTarget;
47  import org.w3c.dom.svg.SVGDocument;
48  import org.w3c.dom.svg.SVGPoint;
49  import org.w3c.dom.svg.SVGRect;
50  
51  import swirl.workspace.Peer;
52  import swirl.workspace.viz.BaseVisualizer;
53  import swirl.workspace.viz.Controller;
54  import swirl.workspace.viz.Model;
55  import swirl.workspace.viz.SharingLevel;
56  import swirl.workspace.viz.SwirlModel;
57  import swirl.workspace.viz.pie.actions.DecreaseDotSizeAction;
58  import swirl.workspace.viz.pie.actions.ExportAction;
59  import swirl.workspace.viz.pie.actions.HelpSwirlAction;
60  import swirl.workspace.viz.pie.actions.ImportAction;
61  import swirl.workspace.viz.pie.actions.ImportDirectoryAction;
62  import swirl.workspace.viz.pie.actions.IncreaseDotSizeAction;
63  import swirl.workspace.viz.pie.actions.QuitApplicationAction;
64  //import swirl.workspace.viz.pie.actions.ZoomInAction;
65  //import swirl.workspace.viz.pie.actions.ZoomOutAction;
66  import swirl.workspace.viz.SwirlGUI;
67  
68  import java.awt.datatransfer.DataFlavor;
69  import java.awt.datatransfer.Transferable;
70  import java.awt.dnd.DnDConstants;
71  import java.awt.dnd.DropTarget;
72  import java.awt.dnd.DropTargetAdapter;
73  import java.awt.dnd.DropTargetDropEvent;
74  
75  /***
76   * DOCUMENT ME!
77   * 
78   * @author dingx
79   */
80  public class SVGPieView extends BaseVisualizer implements ActionListener {
81  	/*** TODO */
82  	private static final long serialVersionUID = 1L;
83  
84  	/*** TODO */
85  	private DotElement selectedNode = null;
86  
87  	/*** TODO */
88  	private DotElement selectedDot = null;
89  
90  	/*** TODO */
91  	private final JMenuItem removeItem = new JMenuItem("Remove file");
92  	
93  	/*** TODO */
94  	private final JMenuItem copyItem = new JMenuItem("Copy file to...");
95  
96  	/*** TODO */
97  	private final JMenuItem openItem = new JMenuItem("Open file");
98  
99  	/*** TODO */
100 	private final JPopupMenu dotMenu = new JPopupMenu();
101 
102 	/*** TODO */
103 	private JSVGCanvas canvas;
104 
105 	/*** TODO */
106 	private Log log = LogFactory.getLog(this.getClass());
107 
108 	/*** TODO */
109 	private Model pieModel;
110 
111 	/*** TODO */
112 	private PieWorkSpace workspace = null;
113 
114 	/*** TODO */
115 	private SVGPieController pieControl;
116 
117 	/*** TODO */
118 	private SharingLevel newLevel;
119 
120 	/*** TODO */
121 	private SharingLevel oldLevel;
122 
123 	/*** TODO */
124 	private UpdateManager upManager = null;
125 
126 	/*** TODO */
127 	private double originalX;
128 
129 	/*** TODO */
130 	private double originalY;
131 	
132 	private JMenuBar menuBar = new JMenuBar();
133 	
134 	private JCheckBoxMenuItem cbMenuItem;
135 	
136 	private boolean showTipMessage = true;
137 	
138 	private JFrame root;
139 	
140 	private IncreaseDotSizeAction increase = new IncreaseDotSizeAction();
141 	private DecreaseDotSizeAction decrease = new DecreaseDotSizeAction();
142 
143 	private JButton increaseButton = new JButton("increase");
144 	private JButton decreaseButton = new JButton("decrease");
145 
146 	private JMenuItem increaseItem = new JMenuItem("increase");
147 	private JMenuItem decreaseItem = new JMenuItem("decrease");
148 
149 	private Action zIn;
150 	private Action zOut;
151 	
152 	private ImportAction importFile;
153 	private ImportDirectoryAction importDir;
154 	private ExportAction exportFile;
155 	//private ZoomInAction zoomIn = new ZoomInAction();
156 	//private ZoomOutAction zoomOut = new ZoomOutAction();
157 	private QuitApplicationAction quitApp;
158 	private HelpSwirlAction helpSwirl = new HelpSwirlAction();
159 
160 	private boolean isDoingMouseDragging = false;
161 	
162 	static private int DOTSIZE_UPLEVEL = 18;
163 	static private int DOTSIZE_LOWLEVEL = 8;
164 	/***
165 	 * Creates a new SVGPieView object.
166 	 * 
167 	 * @param model
168 	 *            TODO
169 	 * @param control
170 	 *            TODO
171 	 */
172 	public SVGPieView(Model model, SVGPieController control) {
173 		pieModel = model;
174 		pieControl = control;
175 		init();
176 		model.addModelChangeListener(this);
177 	}
178 
179 	/***
180 	 * TODO
181 	 * 
182 	 * @return TODO
183 	 */
184 	public Controller getController() {
185 		return null;
186 	}
187 
188 	/***
189 	 * TODO
190 	 * 
191 	 * @return TODO
192 	 */
193 	public Model getModel() {
194 //		return null;
195 		return pieModel;
196 	}
197 
198 	/***
199 	 * TODO
200 	 * 
201 	 * @return TODO
202 	 */
203 	public OnMouseEvent getMouseEvent() {
204 		return new OnMouseEvent();
205 	}
206 
207 	/***
208 	 * TODO
209 	 * 
210 	 * @return TODO
211 	 */
212 	public String getName() {
213 		return "SVG Pie View";
214 	}
215 
216 	/***
217 	 * TODO
218 	 * 
219 	 * @return TODO
220 	 */
221 	public UpdateManager getUpManager() {
222 		while (upManager == null) {
223 
224 			if (log.isDebugEnabled()) {
225 				log.debug("get updateManger failed, retry");
226 			}
227 
228 			try {
229 				Thread.sleep(1000);
230 			} catch (InterruptedException e) {
231 				log.error(e, e);
232 			}
233 		}
234 
235 		return upManager;
236 	}
237 
238 	/***
239 	 * TODO
240 	 * 
241 	 * @param e
242 	 *            TODO
243 	 */
244 	public void actionPerformed(ActionEvent e) {
245 		if ("remove".equals(e.getActionCommand())) {
246 			boolean deleteFile = true;
247             if(log.isDebugEnabled())
248             {
249             	log.debug("delete is selected");
250             }
251 			if (pieModel.isFileChanged(selectedDot.getFileElement())) {
252 				int n = JOptionPane.showConfirmDialog(
253 								this,
254 								"This file has been changed. Would you like to save it before removing it from sharing space?",
255 								"File changed alert", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
256 				if (n == JOptionPane.YES_OPTION) {
257 		            if(log.isDebugEnabled())
258 		            {
259 		            	log.debug("trying to save files");
260 		            }
261 					pieModel.exportFile(selectedDot.getFileElement());
262 				} else if (n == JOptionPane.CANCEL_OPTION) deleteFile = false;
263 			}
264 			if (deleteFile) pieModel.delete(selectedDot.getFileElement());
265 		}else if ("copy".equals(e.getActionCommand())) {
266             if(log.isDebugEnabled())
267             {
268             	log.debug("copy is selected");
269             }
270 			copyTo(selectedDot.getFileElement());
271 		}else if ("open".equals(e.getActionCommand())) {
272             if(log.isDebugEnabled())
273             {
274             	log.debug("open is selected");
275             }
276 			selectedDot.fileOpen();
277 		}
278 	}
279 
280 	/***
281 	 * TODO
282 	 * 
283 	 * @param file
284 	 *            TODO
285 	 */
286 	public void fileAdded(FileElement file) {
287 		if (log.isDebugEnabled()) {
288 			log.debug("file added is called: fe sharingLevel is " + file.getShareDegree().getValue());
289 		}
290 
291 		updateURLToHostMapping(file);
292 		FileElement[] files = new FileElement[1];
293 		files[0] = file;
294 		files[0].setShareDegree(file.getShareDegree());
295 		getUpManager().getUpdateRunnableQueue().invokeLater(
296 				new updateFileListRun(files));
297 	}
298 
299 	public void filesAdded(FileElement[] files) {
300 	    for (int i = 0; i<files.length; i++)
301 	        updateURLToHostMapping(files[i]);
302 		if (log.isDebugEnabled()) {
303 			log.debug("files added is called");
304 		}
305 
306 		getUpManager().getUpdateRunnableQueue().invokeLater(
307 				new updateFileListRun(files));
308 	}
309 	
310 	private void updateURLToHostMapping(FileElement file) {
311 	    SwirlModel sModel = (SwirlModel)pieModel;
312 	    sModel.updateURLToHostMapping(file);
313 	}
314 
315 	/***
316 	 * TODO
317 	 * 
318 	 * @param file
319 	 *            TODO
320 	 */
321 	public void fileDeleted(FileElement file) {
322 		if (log.isDebugEnabled()) {
323 			log.debug("files deleted is called");
324 		}
325 
326 		getUpManager().getUpdateRunnableQueue().invokeLater(
327 				new RemoveFileRun(file.getKey(), file.getOwnerKey()));
328 	}
329 
330 	/***
331 	 * TODO
332 	 */
333 	public void start() {
334 	}
335 
336 	/***
337 	 * TODO
338 	 */
339 	public void stop() {
340 	}
341 
342 	/***
343 	 * TODO
344 	 * 
345 	 * @param x
346 	 *            TODO
347 	 * @param y
348 	 *            TODO
349 	 * 
350 	 * @return TODO
351 	 */
352 	public Point svgToUser(double x, double y) {
353 		//scale caused by zooming
354 		double zoomScale = workspace.getDocument().getRootElement()
355 				.getCurrentScale();
356 		SVGPoint trans = workspace.getDocument().getRootElement()
357 				.getCurrentTranslate();
358 
359 		if (log.isDebugEnabled()) {
360 			log.debug("the current scale is " + zoomScale);
361 			log.debug("the current translate s,y is " + trans.getX() + ","
362 					+ trans.getY());
363 		}
364 
365 		//scale caused by viewbox
366 		SVGRect svgRect = workspace.getDocument().getRootElement()
367 				.getViewport();
368 		double height = svgRect.getHeight();
369 		double width = svgRect.getWidth();
370 
371 		if (log.isDebugEnabled()) {
372 			log.debug("the viewpoint width " + width);
373 		}
374 
375 		if (log.isDebugEnabled()) {
376 			log.debug("the viewpoint height " + height);
377 		}
378 
379 		//the scale is according to the shorter dimension
380 		double shorter = width;
381 
382 		if (height < shorter) {
383 			shorter = height;
384 		}
385 
386 		double viewScale = (double) PieWorkSpace.VIEW_SIZE / shorter;
387 
388 		if (log.isDebugEnabled()) {
389 			log.debug("the view scale is " + viewScale);
390 		}
391 
392 		double scale = viewScale / zoomScale;
393 		Point ret = new Point();
394 		SVGRect box = workspace.getDocument().getRootElement().getBBox();
395 
396 		double xshift = (width - shorter) / 2;
397 		double yshift = (height - shorter) / 2;
398 		double zoomshift = shorter * (1 - zoomScale) / 2;
399 		ret.setLocation(xshift + trans.getX() + x / scale, yshift
400 				+ trans.getY() + y / scale);
401 		return ret;
402 	}
403 	
404 	/***
405 	 * TODO
406 	 * 
407 	 * @param x
408 	 *            TODO
409 	 * @param y
410 	 *            TODO
411 	 * 
412 	 * @return TODO
413 	 */
414 	public Point userToSVG(double x, double y) {
415 		//scale caused by zooming
416 		double zoomScale = workspace.getDocument().getRootElement()
417 				.getCurrentScale();
418 		SVGPoint trans = workspace.getDocument().getRootElement()
419 		.getCurrentTranslate();
420 
421 		if (log.isDebugEnabled()) {
422 			log.debug("the current scale is " + zoomScale);
423 		}
424 
425 		//scale caused by viewbox
426 		SVGRect svgRect = workspace.getDocument().getRootElement()
427 				.getViewport();
428 		double height = svgRect.getHeight();
429 		double width = svgRect.getWidth();
430 
431 		if (log.isDebugEnabled()) {
432 			log.debug("the viewpoint width " + width);
433 		}
434 
435 		if (log.isDebugEnabled()) {
436 			log.debug("the viewpoint height " + height);
437 		}
438 
439 		//the scale is according to the shorter dimension
440 		double shorter = width;
441 
442 		if (height < shorter) {
443 			shorter = height;
444 		}
445 
446 		double viewScale = (double) PieWorkSpace.VIEW_SIZE / shorter;
447 		
448 		double xshift = (width - shorter) / 2;
449 		double yshift = (height - shorter) / 2;
450 
451 		if (log.isDebugEnabled()) {
452 			log.debug("the view scale is " + viewScale);
453 		}
454 
455 		double scale = viewScale / zoomScale;
456 		Point ret = new Point();
457 
458 		ret.setLocation(x * scale - xshift - trans.getX(),
459 				y * scale - yshift - trans.getY());
460 
461 		return ret;
462 	}
463 
464 	/***
465 	 * TODO
466 	 * 
467 	 * @param peer
468 	 *            TODO
469 	 */
470 	public void userJoined(Peer peer) {
471 		if (log.isDebugEnabled()) {
472 			log.debug("User joined " + peer.getUniqueID());
473 		}
474 
475 		getUpManager().getUpdateRunnableQueue().invokeLater(
476 				new AddUserRun(peer));
477 	}
478 
479 	public void propertiesChanged(FileElement fe, java.util.Map msg) {
480 		String dotid = fe.getOwnerKey() + ":" + fe.getKey();
481 		DotElement dot = (DotElement) workspace.getDocument().getElementById(
482 				dotid);
483         if(log.isDebugEnabled())
484         {
485         	log.debug("workspace.peerNumber" + workspace.getPeerNumber());
486 			log.debug("the dot is:" + dot);
487 			log.debug("the FileElement is:" + fe);
488 			log.debug("the Owner key is:" + fe.getOwnerKey());
489         }
490 		if(msg.containsKey("SET_" + DotElement.RELATIVE_ANGLE)) {
491             if(log.isDebugEnabled())
492             {
493             	log.debug("changing the dot location.");
494             }
495 			Object radiusStr = msg.get("SET_" + DotElement.RADIUS);
496             if(log.isDebugEnabled())
497             {
498             	log.debug("in propertiesChanged: SET_radius arg is " + radiusStr);
499             }
500 			Object relativeAngleStr = msg.get("SET_" + DotElement.RELATIVE_ANGLE);
501             if(log.isDebugEnabled())
502             {
503             	log.debug("in propertiesChanged: SET_relativeAngle arg is " + relativeAngleStr);
504             }
505 			fe.setRadius(Double.parseDouble((String)radiusStr));
506 			fe.setReangle(Double.parseDouble((String)relativeAngleStr));
507 		}
508 		if (dot == null) {
509             if(log.isDebugEnabled())
510             {
511             	log.debug("in propertiesChanged: dot is null");
512             }
513 		}
514 		if (fe.getOwnerKey().equals(workspace.getLocalPeer().getKey())) {
515             if(log.isDebugEnabled())
516             {
517             	log.debug("in propertiesChanged: it's my dot");
518             }
519 		}
520 		if (dot != null && !fe.getOwnerKey().equals(workspace.getLocalPeer().getKey())) {
521             if(log.isDebugEnabled())
522             {
523             	log.debug("in propertiesChanged: it's not my dot");
524             }
525 			// check for sharing level change
526 			if(msg.containsKey("SET_" + SharingLevel.SHARING_PROPERTY_NAME)) {
527 				if (fe.isPrivate()) {
528 		            if(log.isDebugEnabled())
529 		            {
530 		            	log.debug("in propertiesChanged: removing dot");
531 		            }
532 					this.getUpManager().getUpdateRunnableQueue().invokeLater(
533 							new RemoveFileRun(fe.getKey(), fe.getOwnerKey()));
534 					return;
535 				}
536 			}
537 			
538 			if(msg.containsKey("SET_" + DotElement.RELATIVE_ANGLE)) {
539 	            if(log.isDebugEnabled())
540 	            {
541 	            	log.debug("in propertiesChanged: changing dot location");
542 	            }
543 				this.getUpManager().getUpdateRunnableQueue().invokeLater(
544 						new ChangeDotLocationRun(fe, fe.getRadius(), fe.getReangle()));
545 			}
546 		} else if (!fe.isPrivate() &&
547 				!fe.getOwnerKey().equals(workspace.getLocalPeer().getKey())) {
548 			// other user's file has been dragged in from private space
549             if(log.isDebugEnabled())
550             {
551             	log.debug("fileAdded(fe) is called, sharing level is " + fe.getShareDegree().getValue());
552             }
553 			fileAdded(fe);
554 		}
555 	}
556 
557 	/***
558 	 * TODO
559 	 * 
560 	 * @param userKey
561 	 *            TODO
562 	 */
563 	public void userLeft(String userKey) {
564 		if (log.isDebugEnabled()) {
565 			log.debug("User left " + userKey);
566 		}
567 
568 		getUpManager().getUpdateRunnableQueue().invokeLater(
569 				new RemoveUserRun(userKey));
570 	}
571 
572 	/***
573 	 * TODO
574 	 * 
575 	 * @param x
576 	 *            TODO
577 	 * @param y
578 	 *            TODO
579 	 * 
580 	 * @return TODO
581 	 */
582 	public Point scaleUserToSVG(double x, double y) {
583 		//scale caused by zooming
584 		double zoomScale = workspace.getDocument().getRootElement()
585 				.getCurrentScale();
586 
587 		if (log.isDebugEnabled()) {
588 			log.debug("the current scale is " + zoomScale);
589 		}
590 
591 		//scale caused by viewbox
592 		SVGRect svgRect = workspace.getDocument().getRootElement()
593 				.getViewport();
594 		double height = svgRect.getHeight();
595 		double width = svgRect.getWidth();
596 
597 		if (log.isDebugEnabled()) {
598 			log.debug("the viewpoint width " + width);
599 		}
600 
601 		if (log.isDebugEnabled()) {
602 			log.debug("the viewpoint height " + height);
603 		}
604 
605 		//the scale is according to the shorter dimension
606 		double shorter = width;
607 
608 		if (height < shorter) {
609 			shorter = height;
610 		}
611 
612 		double viewScale = (double) PieWorkSpace.VIEW_SIZE / shorter;
613 
614 		if (log.isDebugEnabled()) {
615 			log.debug("the view scale is " + viewScale);
616 		}
617 
618 		double scale = viewScale / zoomScale;
619 		Point ret = new Point();
620 
621 		ret.setLocation(x * scale, y * scale);
622 
623 		return ret;
624 	}
625 
626 	/***
627 	 * TODO
628 	 * 
629 	 * @param dot
630 	 *            TODO
631 	 */
632 	private void adaptMenu(DotElement dot) {
633 		int sharingLevel = dot.getSharingLevel().getValue();
634 
635 		if (log.isDebugEnabled()) {
636 			log.debug("sharing level is " + sharingLevel);
637 		}
638 
639 		if (log.isDebugEnabled()) {
640 			log.debug("the user is " + dot.getUser());
641 			log.debug("the local peer is " + workspace.getLocalPeer().getKey());
642 		}
643 
644 		removeItem.setEnabled(dot.getFileElement().getOwnerKey().equals(workspace.getLocalPeer().getKey()));
645 		copyItem.setEnabled(dot.getFileElement().isEnabledCopy() || dot.getFileElement().getOwnerKey().equals(workspace.getLocalPeer().getKey()));
646 		openItem.setEnabled(dot.getFileElement().isEnabledOpen() || dot.getFileElement().getOwnerKey().equals(workspace.getLocalPeer().getKey()));
647 
648 		selectedDot = dot;
649 
650 		Point userpoint = this.svgToUser(dot.getLocation().getX()
651 				+ PieWorkSpace.getCenter().getX(), dot.getLocation().getY()
652 				+ PieWorkSpace.getCenter().getY());
653 		int x = (int) Math.round(userpoint.getX());
654 		int y = (int) Math.round(userpoint.getY());
655 
656 		dotMenu.show(canvas, x, y);
657 	}
658 
659 	private void createToolbar() {
660 		JToolBar toolbar = new JToolBar();
661 
662 		IncreaseDotSizeAction increase = new IncreaseDotSizeAction();
663 		increase.putValue(Action.NAME, null);
664 		increase.setView(this);
665 		
666 		DecreaseDotSizeAction decrease = new DecreaseDotSizeAction();
667 		decrease.setView(this);
668 		decrease.putValue(Action.NAME, null);
669 
670 		Action[] actions = new Action[] {
671 				//new ExportAction(workspace.getDocument(), pieModel),
672 				//new ImportAction(pieModel),
673 				//new ImportDirectoryAction(pieModel),
674 				//new ScreenShotAction(workspace.getDocument()), 
675 				zIn, 
676 				zOut,
677 				//increase, 
678 				//decrease 
679 		};
680 
681 		increaseButton.setAction(increase);
682 		decreaseButton.setAction(decrease);
683 
684 		for (int i = 0; i < actions.length; ++i) {
685 			JButton button = new JButton(actions[i]);
686 			toolbar.add(button);
687 		}
688 		
689 		toolbar.add(increaseButton);
690 		toolbar.add(decreaseButton);
691 		
692 		toolbar.getActionMap();
693 		add(toolbar, BorderLayout.NORTH);
694 	}
695 
696 	/***
697 	 * TODO
698 	 * 
699 	 * @param fileKey
700 	 *            TODO
701 	 * @param userID
702 	 *            TODO
703 	 */
704 	private void deleteFile(String fileKey, String userID) {
705 		if (log.isDebugEnabled()) {
706 			log.debug("fileKey is" + fileKey);
707 		}
708 
709 		String dotid = userID + ":" + fileKey;
710 		if ((selectedNode != null && dotid == selectedNode.getId()) ||
711 				selectedNode == null){
712 			workspace.hideTag();	
713 		}
714 		
715 		if (log.isDebugEnabled()) {
716 			log.debug("the dot id to delete is " + dotid);
717 			if (selectedNode != null) {	
718 				log.debug("the selectedId is " + selectedNode.getId());
719 			}
720 		}
721 		
722 		workspace.removeFile(fileKey, userID);
723 	}
724 
725 	/***
726 	 * TODO
727 	 * 
728 	 * @param fileKey
729 	 *            TODO
730 	 * @param userID
731 	 *            TODO
732 	 */
733 	private void copyTo(FileElement fe) {
734 		File f = null;
735 		JFileChooser fileChooser = new JFileChooser();
736 
737 		fileChooser
738 				.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
739 		fileChooser
740 				.setDialogTitle("save the remote file as...");
741 		fileChooser.setFileHidingEnabled(false);
742 
743 		int choice = fileChooser.showSaveDialog(fileChooser);
744 
745 		if (choice == JFileChooser.APPROVE_OPTION) {
746 			f = fileChooser.getSelectedFile();
747 			pieModel.getRemoteFile(fe, f);
748 		}
749 
750 	}
751 
752 	/*
753 	 * *initialize the document accoding to model for view
754 	 */
755 	private void init() {
756 		if (log.isDebugEnabled()) {
757 			log.debug("SVG PieView initialize ...");
758 		}
759 
760 		workspace = new PieWorkSpace(this);
761 		workspace.init();
762 
763 		canvas = new JSVGCanvas();
764 		canvas.setDocumentState(JSVGCanvas.ALWAYS_DYNAMIC);
765 		setLayout(new BorderLayout());
766 		canvas.setBackground(Color.LIGHT_GRAY);
767 		canvas
768 				.addSVGLoadEventDispatcherListener(new SVGLoadEventDispatcherAdapter() {
769 					public void svgLoadEventDispatchStarted(
770 							SVGLoadEventDispatcherEvent e) {
771 						// At this time the document is available...
772 						upManager = canvas.getUpdateManager();
773 					}
774 				});
775 
776 		ActionMap map = canvas.getActionMap();
777 
778 		zIn = map.get(JSVGCanvas.ZOOM_IN_ACTION);
779 		zIn.putValue(Action.NAME, "Zoom In");
780         	zIn.putValue(Action.MNEMONIC_KEY, new Integer(KeyEvent.VK_I));
781         	zIn.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_PLUS, ActionEvent.CTRL_MASK));
782 
783 		zIn.putValue(Action.SMALL_ICON, new ImageIcon("resources/zoomin.gif"));
784 
785 		zOut = map.get(JSVGCanvas.ZOOM_OUT_ACTION);
786 		zOut.putValue(Action.NAME, "Zoom Out");
787 		zOut.putValue(Action.MNEMONIC_KEY, new Integer(KeyEvent.VK_O));
788 		zOut.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, ActionEvent.CTRL_MASK));
789 		zOut.putValue(Action.SMALL_ICON, new ImageIcon("resources/zoomout.gif"));
790 
791 		createToolbar();
792 
793 		add(canvas, BorderLayout.CENTER);
794 
795 		canvas.setSVGDocument(workspace.getDocument());
796 		canvas.setDoubleBufferedRendering(false);
797 
798 		removeItem.addActionListener(this);
799 		removeItem.setActionCommand("remove");
800 		
801 		copyItem.addActionListener(this);
802 		copyItem.setActionCommand("copy");
803 
804 		openItem.addActionListener(this);
805 		openItem.setActionCommand("open");
806 
807 		dotMenu.add(openItem);
808 		dotMenu.add(copyItem);
809 		dotMenu.add(removeItem);
810 		
811         // set up dropping for pie
812         new DropTarget(canvas, DnDConstants.ACTION_COPY,
813                 new DropTargetAdapter(){
814             public void drop(DropTargetDropEvent dtde) {
815                 SVGPieView.this.drop(dtde);
816             }
817         });
818 	}
819 
820 	/***
821 	 * TODO
822 	 * 
823 	 * @author $author$
824 	 * @version $Revision: 1.119 $
825 	 */
826 	public class AddUserRun implements Runnable {
827 		/*** TODO */
828 		Peer user;
829 
830 		/***
831 		 * Creates a new AddUserRun object.
832 		 * 
833 		 * @param peer
834 		 *            TODO
835 		 */
836 		public AddUserRun(Peer peer) {
837 			this.user = peer;
838 		}
839 
840 		/***
841 		 * TODO
842 		 */
843 		public void run() {
844 			workspace.addPeer(user);
845 		}
846 	}
847 
848 	/***
849 	 * TODO
850 	 * 
851 	 * @author $author$
852 	 * @version $Revision: 1.119 $
853 	 */
854 	public class ChangeDotLocationRun implements Runnable {
855 		FileElement fe;
856 		double radius;
857 		double relativeAngle;
858 
859 		/***
860 		 * Creates a new AddUserRun object.
861 		 * 
862 		 * @param peer
863 		 *            TODO
864 		 */
865 		public ChangeDotLocationRun(FileElement fileelement, double radius, double relativeAngle) {
866 			this.fe = fileelement;
867 			this.radius = radius;
868 			this.relativeAngle = relativeAngle;
869 		}
870 
871 		/***
872 		 * TODO
873 		 */
874 		public void run() {
875 			GuiPeer peer = workspace.getGuiPeer(fe.getOwnerKey());
876 			double start = peer.getStartAngle();
877 			DotElement dot = peer.getDot(fe.getKey());
878 			if( dot == null){//the dot has been removed
879 				return;
880 			}
881 			dot.setFileElement(fe);
882 			if (!peer.isLocal()) {
883 				dot.setLocation(radius, relativeAngle);
884 				//we should stop any moving session
885 				getUpManager().getUpdateRunnableQueue().invokeLater(
886 							new MouseUpRun());
887 				//dot.newLocation(start, workspace.getPeerNumber());
888 			}
889 		}
890 	}
891 
892 	/***
893 	 * TODO
894 	 * 
895 	 * @author $author$
896 	 * @version $Revision: 1.119 $
897 	 */
898 	public class ChangeSharingTextRun implements Runnable {
899 		FileElement element;
900 
901 		/***
902 		 * @param fileElement
903 		 */
904 		public ChangeSharingTextRun(FileElement fileElement) {
905 			element = fileElement;
906 		}
907 
908 		/***
909 		 * TODO
910 		 */
911 		public void run() {
912 			if(element != null){
913 				workspace.setSharingText(element.getName(), element
914 						.getShareDegree());
915 				workspace.revealTag();
916 			}else{
917 				workspace.hideTag();
918 			}
919 		}
920 	}
921 
922 	public class MoveExplainTextRun implements Runnable {
923 		DotElement element;
924 
925 		public MoveExplainTextRun(DotElement dot) {
926 			element = dot;
927 		}
928 
929 		/***
930 		 * TODO
931 		 */
932 		public void run() {
933 			workspace.moveExplainText(element.getLocation().getX(), element
934 					.getLocation().getY());
935 		}
936 	}
937 
938 	/***
939 	 * TODO
940 	 * 
941 	 * @author $author$
942 	 * @version $Revision: 1.119 $
943 	 */
944 	public class DotMoving implements Runnable {
945 		Event evt;
946 		public DotMoving(Event e) {
947 				evt = e;
948 			
949 		}
950 
951 		/***
952 		 * TODO
953 		 */
954 		public void run() {
955 			if (selectedNode == null ||
956 					!selectedNode.getFileElement().getOwnerKey().equals(
957 							workspace.getLocalPeer().getKey())) {
958 				return;
959 			}
960 			DOMMouseEvent q = (DOMMouseEvent) evt;
961 			double x = q.getClientX();
962 			double y = q.getClientY();
963 			DotElement dot = selectedNode;
964 			
965 			if(!isDoingMouseDragging){//when it just starts to get moved
966 				log.debug("start to move");
967 				isDoingMouseDragging = true;
968 				log.debug("the selectedNode is " + selectedNode);
969 				oldLevel = selectedNode.caculateSharingLevel();
970 			}
971 
972 			if (
973 			//scale caused by zoom
974 			log.isDebugEnabled()) {
975 				//scale caused by zoom
976 				log.debug("dotmoving is called");
977 			}
978 
979 			double distanceX = x - originalX;
980 			double distanceY = y - originalY;
981 			Point distancePoint = scaleUserToSVG(distanceX, distanceY);
982 
983 			dot.move(distancePoint.getX(), distancePoint.getY());
984 			newLevel = dot.caculateSharingLevel();
985 			log.debug("the new Level is " + newLevel.getValue());
986 			log.debug("the old Level is " + oldLevel.getValue());
987 			
988 			if (!oldLevel.equals(newLevel)) {
989 				log.debug("sharing degree changed: "
990 						+ newLevel.getValue());
991 				dot.getFileElement().setShareDegree(newLevel);
992 				if (showTipMessage) getUpManager().getUpdateRunnableQueue().invokeLater(
993 						new ChangeSharingTextRun(selectedNode
994 								.getFileElement()));
995 			}
996 
997 			originalX = x;
998 			originalY = y;
999 		}
1000 	}
1001 
1002 	/***
1003 	 * TODO
1004 	 * 
1005 	 * @author $author$
1006 	 * @version $Revision: 1.119 $
1007 	 */
1008 	public class blink implements Runnable {
1009 		private FileElement fe;
1010 
1011 		private Element dot = null;
1012 
1013 		private String sColor;
1014 
1015 		int flag = 0;
1016 
1017 		int flashtimes = 30;
1018 
1019 		int count = 0;
1020 
1021 		private Object intervalID;
1022 
1023 		public blink(FileElement fe, String uColor) {
1024 			this.fe = fe;
1025 			sColor = uColor;
1026 		}
1027 
1028 		public void run() {
1029 			count++;
1030 			if (dot == null) {
1031 				if (count < 3) {//sometime for new imporated files, we need to
1032 								// wait and try again
1033 					String dotid = fe.getOwnerKey() + ":" + fe.getKey();
1034 					log.debug("dotid:" + dotid);
1035 					DotElement e = (DotElement) workspace.getDocument()
1036 							.getElementById(dotid);
1037 					if (e != null) {
1038 						e.getFileElement().setUserKey(fe.getUserKey());
1039 						//if it is somebody else used this file, the ring
1040 						// should remain as the user's color
1041 						if (fe.getUserKey().equals(fe.getOwnerKey())) {
1042 							flashtimes = 31;
1043 						}
1044 						NodeList dots = e.getElementsByTagName("circle");
1045 						dot = (Element) dots.item(0);
1046 					}
1047 				} else {
1048 					getUpManager().getScriptingEnvironment().createWindow()
1049 							.clearInterval(intervalID);
1050 				}
1051 			} else {
1052 				dot.setAttributeNS(null, "onmouseout",
1053                 "evt.target.setAttribute('stroke', '" + sColor + "')");
1054 
1055 				//flash certain times
1056 				if (flag < flashtimes) {
1057 					if (flag % 2 == 0) {
1058 						dot.setAttribute("stroke", "darkgrey");
1059 					} else {
1060 						dot.setAttribute("stroke", sColor);
1061 					}
1062 					flag++;
1063 				} else {//stop blinking after a while
1064 					getUpManager().getScriptingEnvironment().createWindow()
1065 							.clearInterval(intervalID);
1066 
1067 				}
1068 			}
1069 
1070 		}
1071 
1072 		public void setIntervaleID(Object intervalID) {
1073 			this.intervalID = intervalID;
1074 
1075 		}
1076 	}
1077 
1078 	/***
1079 	 * TODO
1080 	 * 
1081 	 * @author $author$
1082 	 * @version $Revision: 1.119 $
1083 	 */
1084 	public class OnMouseEvent implements EventListener {
1085 		/*** TODO */
1086 		private Log log = LogFactory.getLog(this.getClass());
1087 
1088 		/***
1089 		 * TODO
1090 		 * 
1091 		 * @param evt
1092 		 *            TODO
1093 		 */
1094 		public void handleEvent(Event evt) {
1095 			if (log.isDebugEnabled()) {
1096 				log.debug("mouse event received:" + evt.getType());
1097 			}
1098 			if (evt.getType().equals(
1099 					SVGConstants.SVG_MOUSEOUT_EVENT_TYPE)) {
1100 				log.debug("mouse out");
1101 				getUpManager().getUpdateRunnableQueue().invokeLater(
1102 						new ChangeSharingTextRun(null));
1103 			} else if (evt.getType().equals(
1104 					SVGConstants.SVG_MOUSEOVER_EVENT_TYPE)) {
1105 				log.debug("mouse over");
1106 				
1107 				if (showTipMessage) {
1108 					Element target = (Element) evt.getTarget();
1109 					DotElement node = (DotElement) target.getParentNode();
1110 				
1111 					//only want to move at the beginning
1112 					if (selectedNode == null
1113 						|| node.getId() != selectedNode.getId()) {
1114 						getUpManager().getUpdateRunnableQueue().invokeLater(new MoveExplainTextRun(node));
1115 					}
1116 				
1117 					getUpManager().getUpdateRunnableQueue().invokeLater(
1118 						new ChangeSharingTextRun(node.getFileElement()));
1119 				}
1120 			} else if (evt.getType().equals(SVGConstants.SVG_CLICK_EVENT_TYPE)) {
1121 				log.debug("mouse click");
1122 
1123 				DOMMouseEvent q = (DOMMouseEvent) evt;
1124 				EventTarget target = q.getTarget();
1125 				DotElement dot = (DotElement) ((Element) target)
1126 						.getParentNode();
1127 
1128 				//right click
1129 				if (q.getButton() == 2) {
1130 					log.debug("right click detected:" + dot);
1131 					
1132 					// remove first the Sharing message box 
1133 					getUpManager().getUpdateRunnableQueue().invokeLater(
1134 							new ChangeSharingTextRun(null));
1135 
1136 					adaptMenu(dot);
1137 					selectedDot = dot;
1138 				} else if (((DOMUIEvent) evt).getDetail() == 2) {
1139 					log.debug("double click detected:" + dot);
1140 					dot.fileOpen();
1141 				}
1142 			}else if (evt.getType().equals(SVGConstants.SVG_MOUSEDOWN_EVENT_TYPE)) {
1143 				log.debug("mousedown");
1144 				getUpManager().getUpdateRunnableQueue().invokeLater(
1145 						new MouseDownRun(evt));
1146 			}else if (evt.getType().equals(
1147 					SVGConstants.SVG_MOUSEMOVE_EVENT_TYPE)) {
1148 				log.debug("mouse move");
1149 				getUpManager().getUpdateRunnableQueue().invokeLater(
1150 							new DotMoving(evt));
1151 			}else if (evt.getType()
1152 					.equals(SVGConstants.SVG_MOUSEUP_EVENT_TYPE)) {
1153 				log.debug("mouse up");
1154 				getUpManager().getUpdateRunnableQueue().invokeLater(
1155 							new MouseUpRun());
1156 						//new ChangeSharingTextRun(null));
1157 				//pieModel.setDotLocation(selectedNode);
1158 				//newLevel = selectedNode.caculateSharingLevel();
1159 									// sharing degree must be set BEFORE location in order to propery process a move event
1160 					//pieModel.setDotLocation(selectedNode);
1161 				getUpManager().getUpdateRunnableQueue().invokeLater(
1162 						new ChangeSharingTextRun(null));
1163 			} 
1164 		}
1165 	}
1166 
1167 	/***
1168 	 * TODO
1169 	 * 
1170 	 * @author $author$
1171 	 * @version $Revision: 1.119 $
1172 	 */
1173 	public class RemoveFileRun implements Runnable {
1174 		/*** TODO */
1175 		String filekey;
1176 
1177 		/*** TODO */
1178 		String userID;
1179 
1180 		/***
1181 		 * Creates a new RemoveFileRun object.
1182 		 * 
1183 		 * @param fileKey
1184 		 *            TODO
1185 		 * @param userID
1186 		 *            TODO
1187 		 */
1188 		public RemoveFileRun(String fileKey, String userID) {
1189 			this.filekey = fileKey;
1190 			this.userID = userID;
1191 		}
1192 
1193 		/***
1194 		 * TODO
1195 		 */
1196 		public void run() {
1197 			deleteFile(filekey, userID);
1198 		}
1199 	}
1200 
1201 	/***
1202 	 * TODO
1203 	 * 
1204 	 * @author $author$
1205 	 * @version $Revision: 1.119 $
1206 	 */
1207 	public class MouseUpRun implements Runnable {
1208 		public void run() {
1209 			if (selectedNode == null) {
1210 				return;
1211 			}
1212 			if(isDoingMouseDragging){
1213 				isDoingMouseDragging = false;
1214 				if (oldLevel.equals(newLevel)) {
1215 					log.debug("no change of sharing degree");
1216 					pieModel.setDotLocation(selectedNode);
1217 				} else {
1218 					log.debug("sharing degree changed: "
1219 							+ newLevel.getValue());
1220 					pieModel.setPositionInfo(
1221 							selectedNode, newLevel);
1222 				}
1223 			}
1224 			selectedNode = null;
1225 		}
1226 	}
1227 
1228 	/***
1229 	 * TODO
1230 	 * 
1231 	 * @author $author$
1232 	 * @version $Revision: 1.119 $
1233 	 */
1234 	public class MouseDownRun implements Runnable {
1235 		Event evt;
1236 		public MouseDownRun(Event e){
1237 			evt = e;
1238 		}
1239 		
1240 		public void run() {
1241 			DOMMouseEvent q = (DOMMouseEvent) evt;
1242 			originalX = q.getClientX();
1243 			originalY = q.getClientY();
1244 			Element target = (Element) q.getTarget();
1245 			selectedNode = (DotElement) target.getParentNode();
1246 		}
1247 	}
1248 
1249 
1250 	/***
1251 	 * TODO
1252 	 * 
1253 	 * @author $author$
1254 	 * @version $Revision: 1.119 $
1255 	 */
1256 	public class RemoveUserRun implements Runnable {
1257 		/*** TODO */
1258 		String userID;
1259 
1260 		/***
1261 		 * Creates a new RemoveUserRun object.
1262 		 * 
1263 		 * @param userid
1264 		 *            TODO
1265 		 */
1266 		public RemoveUserRun(String userid) {
1267 			this.userID = userid;
1268 		}
1269 
1270 		/***
1271 		 * TODO
1272 		 */
1273 		public void run() {
1274 			workspace.removePeer(userID);
1275 		}
1276 	}
1277 
1278 	/***
1279 	 * TODO
1280 	 * 
1281 	 * @author $author$
1282 	 * @version $Revision: 1.119 $
1283 	 */
1284 	public class updateFileListRun implements Runnable {
1285 		/*** TODO */
1286 		FileElement[] feList;
1287 
1288 		/***
1289 		 * Creates a new updateFileListRun object.
1290 		 * 
1291 		 * @param files
1292 		 *            TODO
1293 		 */
1294 		public updateFileListRun(FileElement[] files) {
1295 			this.feList = files;
1296 		}
1297 
1298 		/***
1299 		 * TODO
1300 		 */
1301 		public void run() {
1302 			for (int i = 0; i < feList.length; i++) {
1303 				FileElement fe = feList[i];
1304 				log.debug("add files to workspace: fe sharinglevel " + fe.getShareDegree().getValue());
1305 				workspace.addFile(fe);
1306 			}
1307 		}
1308 	}
1309 
1310 	public void flashIt(FileElement fe, String uColor) {
1311 		blink blinkRun = new blink(fe, uColor);
1312 		Object intervalID = this.getUpManager().getScriptingEnvironment()
1313 				.createWindow().setInterval(blinkRun, 200);
1314 		blinkRun.setIntervaleID(intervalID);
1315 	}
1316 
1317 	/*
1318 	 * (non-Javadoc)
1319 	 * 
1320 	 * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)
1321 	 */
1322 	public void windowClosing(WindowEvent arg0) {
1323         if(log.isDebugEnabled())
1324         {
1325         	log.debug("window closing");
1326         }
1327 		if (pieModel.isFilesChanged()) {
1328 			//			default icon, custom title
1329 			int n = JOptionPane.showConfirmDialog(
1330 					this,
1331 					"Files have been changed. Would you like to save them before closing the application?",
1332 					"Closing alert - Files changed", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
1333 			if (n == JOptionPane.YES_OPTION) {
1334 	            if(log.isDebugEnabled())
1335 	            {
1336 	            	log.debug("trying to save files");
1337 	            }
1338 				pieModel.exportFiles(workspace.getDocument());
1339 			}
1340 			
1341 			if (n != JOptionPane.CANCEL_OPTION){
1342 				pieModel.purgeLocalRepository();
1343 			    if (root instanceof SwirlGUI) {
1344 			        SwirlGUI theGUI = (SwirlGUI)root;
1345 			        theGUI.saveGUI();
1346 			    }
1347 				System.exit(0);
1348 			}
1349 		} else {
1350 			pieModel.purgeLocalRepository();
1351 		    if (root instanceof SwirlGUI) {
1352 		        SwirlGUI theGUI = (SwirlGUI)root;
1353 		        theGUI.saveGUI();
1354 		    }
1355 			System.exit(0);
1356 		}
1357 	}
1358 
1359 	public void incrementDotSize() {
1360 		if (workspace != null) {
1361 			getUpManager().getUpdateRunnableQueue().invokeLater(new Runnable() {
1362 				public void run() {
1363 					//if it has got to the upper size
1364 					//disable "increase" button
1365 					int dotsize = workspace.incrementDotSize();
1366 					if(dotsize > DOTSIZE_LOWLEVEL){
1367 						decreaseButton.setEnabled(true);
1368 						decreaseItem.setEnabled(true);
1369 					}
1370 					if(dotsize > DOTSIZE_UPLEVEL){
1371 						increaseButton.setEnabled(false);
1372 						increaseItem.setEnabled(false);
1373 					}
1374 				}
1375 			});
1376 		}
1377 	}
1378 
1379 	public void decrementDotSize() {
1380 		if (workspace != null) {
1381 			getUpManager().getUpdateRunnableQueue().invokeLater(new Runnable() {
1382 				public void run() {
1383 					int dotsize = workspace.decrementDotSize();
1384 					if(dotsize < DOTSIZE_UPLEVEL){
1385 						increaseButton.setEnabled(true);
1386 						increaseItem.setEnabled(true);
1387 					}
1388 					if(dotsize < DOTSIZE_LOWLEVEL){
1389 						decreaseButton.setEnabled(false);
1390 						decreaseItem.setEnabled(false);
1391 					}
1392 				}
1393 			});
1394 		}
1395 	}
1396 	
1397 	public void zoomInPie() {
1398 	}
1399 	
1400 	public void zoomOutPie() {
1401 	}
1402 	
1403 	private void initMenuBar(Model _model, SVGDocument doc) {
1404 		
1405 		//log.debug("initMenuBar - initiating... ");
1406 
1407 		importFile = new ImportAction(_model);
1408 		importDir = new ImportDirectoryAction(_model);
1409 		exportFile = new ExportAction(doc, _model);
1410 		quitApp = new QuitApplicationAction(root);
1411 		
1412 		//zoomIn.setView(this);
1413 		//zoomOut.setView(this);
1414 		increase.setView(this);
1415 		decrease.setView(this);
1416 
1417 		JMenu file = new JMenu("File");
1418 		file.setMnemonic(KeyEvent.VK_F);
1419 		file.add(new JMenuItem(importFile));
1420 		file.add(new JMenuItem(importDir));
1421 		file.addSeparator();
1422 		file.add(new JMenuItem(exportFile));
1423 		file.addSeparator();
1424 		file.add(new JMenuItem(quitApp));
1425 		JMenu view = new JMenu("View");
1426 		view.setMnemonic(KeyEvent.VK_V);
1427 		view.add(new JMenuItem(zIn));
1428 		view.add(new JMenuItem(zOut));
1429 		view.addSeparator();
1430 		
1431 		increaseItem.setAction(increase);
1432 		decreaseItem.setAction(decrease);
1433 		
1434 		view.add(increaseItem);
1435 		view.add(decreaseItem);
1436 		
1437 		cbMenuItem = new JCheckBoxMenuItem("Show tip message");
1438 		cbMenuItem.setSelected(true);
1439 		cbMenuItem.setMnemonic(KeyEvent.VK_T);
1440 		cbMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T, ActionEvent.CTRL_MASK));
1441          view.addSeparator();
1442          cbMenuItem.addActionListener(new ActionListener() {
1443 	        public void actionPerformed(ActionEvent actionEvent) {
1444 	          jCheckBox_actionPerformed(actionEvent);
1445 	        }
1446          });
1447 
1448 		
1449          view.add(cbMenuItem);
1450 		
1451          JMenu help = new JMenu("Help");
1452          help.setMnemonic(KeyEvent.VK_H);
1453          help.add(new JMenuItem(helpSwirl));
1454          menuBar.add(file);
1455          menuBar.add(view);
1456          menuBar.add(help);
1457 		
1458 		//log.debug("initMenuBar - initiated. # of components: " + menuBar.countComponents());
1459 
1460 	}
1461 	
1462 	public void jCheckBox_actionPerformed(ActionEvent actionEvent) {
1463 		if (!cbMenuItem.isSelected()) {
1464 			showTipMessage = false;
1465 		} else {
1466 			showTipMessage = true;
1467 		}
1468 	}
1469 	
1470 	public JMenuBar getMenuBar() {
1471 		return menuBar;
1472 	}
1473 	
1474 	public void setRoot(JFrame _root) {
1475 		root = _root;
1476 		initMenuBar(this.getModel(),workspace.getDocument());
1477 	}
1478 
1479 	/* (non-Javadoc)
1480 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
1481 	 */
1482 	public void backupPromotedToPersistent(FileElement file) {	
1483         if(log.isDebugEnabled())
1484         {
1485         	log.debug("SVGPieView backupPromotedToPeristent " + file.getKey());
1486         }
1487 		workspace.addFile(file);	
1488 	}
1489 
1490 	/* (non-Javadoc)
1491 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
1492 	 */
1493 	public void fileUpdated(FileElement file) {
1494 		// TODO Auto-generated method stub
1495 	    // No
1496 	}
1497 	
1498     /***
1499      * Handle the drop event
1500      * @param dtde the drop event
1501      */
1502     public void drop(DropTargetDropEvent dtde) {
1503     	//System.err.print("dtde: " + dtde);
1504         if (!dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
1505             dtde.rejectDrop();
1506         	return;
1507         }
1508         final Point svgPosition = userToSVG(dtde.getLocation().getX(), 
1509         									dtde.getLocation().getY());
1510         //System.err.println("SVG position: " +  svgPosition);
1511         
1512         Point point = new Point ((int)(svgPosition.getX()- PieWorkSpace.getCenter().getX()), 
1513         		                 (int)(svgPosition.getY()- PieWorkSpace.getCenter().getY()));
1514         
1515         Coordinate coord = new Coordinate(point, workspace.getPeerNumber(), 
1516         		                          workspace.getPeerIndex(workspace.getLocalPeer().getDelegate().getUniqueID()));
1517         
1518         boolean inPrivateSpace = Coordinate.calculateRadius(point) > PieWorkSpace.RADIUS;
1519         boolean inCenter = (Util.getSharingDegree(coord.getRadius()) == 4);
1520         if (!inCenter &&
1521             !inPrivateSpace && 
1522             !InPeerAngle(workspace.getLocalPeer(), Coordinate.calculateTheta(point)) ) {  
1523                 // reject for remote peers: within the radius but not in local
1524                 JOptionPane.showMessageDialog(null, "You cannot import files to others' repository.");
1525                 dtde.rejectDrop();
1526                 return;
1527         } 
1528 
1529         dtde.acceptDrop(DnDConstants.ACTION_COPY);
1530         Transferable tf = dtde.getTransferable();
1531         try {
1532 	        List files = (List)tf.getTransferData(DataFlavor.javaFileListFlavor);
1533 	        Vector vectFiles = new Vector();
1534 	        for (Iterator i = files.iterator(); i.hasNext(); ) {
1535 	            final File	file = (File)i.next();
1536 	            if (file.isDirectory()) {
1537 			        // TODO: feature: import directory?
1538 	                JOptionPane.showMessageDialog(null, "Importing directory is not supported.");
1539 	            }
1540 	            else {
1541 	            	vectFiles.add(file);
1542 	            }
1543 	        }
1544         	pieModel.importFiles(vectFiles, coord, inPrivateSpace);
1545         }
1546         catch (Exception e) {
1547             log.debug(e);
1548             e.printStackTrace();
1549         }
1550         dtde.dropComplete(true);
1551     }
1552     
1553     /***
1554      * Determines if a given theta lies withing the angle of a given peer
1555      * @param peer
1556      * @param theta
1557      * @return whether theta lies within the angle of the pie slice of the given peer.
1558      */
1559     boolean InPeerAngle (GuiPeer peer, double theta) {
1560     	double startAngle = peer.getStartAngle();
1561     	double peerArc    = 360.0/workspace.getPeerNumber();
1562     	double endAngle   = startAngle + peerArc;
1563     	return ((theta > startAngle) && (theta < endAngle));
1564     }
1565     
1566 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/View.html
##-----------------TITLE------------------------##
View xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 19, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import org.picocontainer.Startable;
7   
8   /***
9    * DOCUMENT ME!
10   *
11   * @author dingx
12   */
13  public interface View extends Startable,
14                                ModelListener
15  {
16      /***
17       * TODO
18       *
19       * @return TODO
20       */
21      Controller getController();
22  
23      /***
24       * TODO
25       *
26       * @return TODO
27       */
28      Model getModel();
29  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/InternalFrameHolderManager.html
##-----------------TITLE------------------------##
InternalFrameHolderManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Dimension;
4   
5   import javax.swing.JComponent;
6   import javax.swing.JDesktopPane;
7   import javax.swing.JMenu;
8   
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  
12  /***
13   * DOCUMENT ME!
14   *
15   * @author bpillet
16   */
17  public class InternalFrameHolderManager implements HolderManager
18  {
19      /*** TODO */
20      protected Log log = LogFactory.getLog(this.getClass());
21  
22      /*** TODO */
23      JDesktopPane desktop = new JDesktopPane();
24  
25      /*** TODO */
26      JMenu visualizations = new JMenu("Visualizations");
27  
28      /*** TODO */
29      //JMenuBar menuBar = new JMenuBar();
30  
31      /*** TODO */
32      int count = 0;
33  
34      /*** TODO */
35      int offset = 30;
36  
37      /***
38       * Creates a new InternalFrameHolderManager object.
39       */
40      public InternalFrameHolderManager()
41      {
42          desktop.setPreferredSize(new Dimension(200, 400));
43          //menuBar.add(visualizations);
44      }
45  
46      /***
47       * TODO
48       *
49       * @return TODO
50       */
51      //public JMenuBar getJMenuBar(Model _model, SVGDocument doc)
52      //{
53      //    return menuBar;
54      //}
55  
56      /***
57       * TODO
58       *
59       * @return TODO
60       */
61      public JComponent getRootComponent()
62      {
63          return desktop;
64      }
65  
66      /***
67       * TODO
68       *
69       * @return TODO
70       */
71      public Visualizer getSelectedVisualizer()
72      {
73          // TODO Auto-generated method stub
74          return null;
75      }
76  
77      /***
78       * TODO
79       *
80       * @param viz TODO
81       */
82      public void addVisualizer(Visualizer viz)
83      {
84          InternalFrameHolder holder = new InternalFrameHolder(viz);
85  
86          visualizations.add(holder.getCheckBox());
87          holder.setVisible(true);
88          holder.setLocation(offset * count, offset * count++);
89          desktop.add(holder);
90          holder.moveToFront();
91      }
92  
93      /***
94       * TODO
95       *
96       * @param viz TODO
97       */
98      public void removeVisualizer(Visualizer viz)
99      {
100         InternalFrameHolder holder = new InternalFrameHolder(viz);
101 
102         desktop.remove(holder);
103         visualizations.remove(holder.getCheckBox());
104         --count;
105     }
106 
107     /***
108      * TODO
109      *
110      * @param title TODO
111      */
112     public void selectVisualizer(String title)
113     {
114         // TODO Auto-generated method stub
115     }
116 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/RMIRegistryImpl2.html
##-----------------TITLE------------------------##
RMIRegistryImpl2 xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 20, 2004
3    */
4   package swirl.workspace.messages;
5   
6   import java.rmi.RemoteException;
7   import java.rmi.registry.LocateRegistry;
8   import java.rmi.registry.Registry;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  /***
14   * @author dingx
15   */
16  public class RMIRegistryImpl2 implements RMIRegistry {
17  	boolean available = false;
18      /*** common-logging logger */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21  	public boolean isAvailable() {
22  		return available;
23  	}
24  
25  	public void start() {
26  		try {
27  			LocateRegistry.createRegistry(Registry.REGISTRY_PORT);
28  		} catch (RemoteException e) {
29  			log.error(e, e);
30  		}
31  		available = true;
32  	}
33  
34  	public void stop() {
35  
36  	}
37  
38  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/LoggingFilter.html
##-----------------TITLE------------------------##
LoggingFilter xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.io.IOException;
4   import java.util.HashMap;
5   
6   import javax.servlet.Filter;
7   import javax.servlet.FilterChain;
8   import javax.servlet.FilterConfig;
9   import javax.servlet.ServletException;
10  import javax.servlet.ServletRequest;
11  import javax.servlet.ServletResponse;
12  import javax.servlet.http.HttpServletRequest;
13  import javax.servlet.http.HttpServletResponse;
14  
15  import org.apache.commons.logging.Log;
16  import org.apache.commons.logging.LogFactory;
17  import org.picocontainer.MutablePicoContainer;
18  
19  import edu.uci.isr.yancees.client.rmi.YanceesRMIClient;
20  
21  /***
22   * Filter that logs a request and then passes through
23   * @author bpillet
24   */
25  public class LoggingFilter implements Filter
26  {
27  	/*** log for this handler */
28      private Log log = LogFactory.getLog(this.getClass());
29  	private FilterConfig config;
30  	
31  	MutablePicoContainer pico;
32  	
33  	/***
34  	 * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
35  	 */
36  	public void init(FilterConfig conf) throws ServletException 
37  	{
38  		config = conf;
39  		try
40  		{
41  			YanceesRMIClient yancees = new YanceesRMIClient("localhost");
42  			YanceesMessageSender sender = new YanceesMessageSender(yancees);
43  			//addMessageSender(sender);
44  		}
45  		catch(Exception ex)
46  		{
47  			log.error("problem starting yancees client", ex);
48  		}
49  	}
50  /*
51  	
52  	synchronized public void addMessageSender(MessageSender l)
53  	{
54  		senders.addElement(l);
55  	}  
56  
57  	
58  	synchronized public void removeMessageSender(MessageSender l)
59  	{
60  		senders.removeElement(l);
61  	}
62  
63  	public Vector getSenders()
64  	{
65  		return senders;
66  	}
67  	*/
68  	/***
69  	 * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)
70  	 */
71  	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException
72  	{		
73  		try
74  		{
75  		HttpServletRequest req = (HttpServletRequest)request;
76  		HttpServletResponse res = (HttpServletResponse)response;
77  		
78          chain.doFilter(req, res);
79          
80  	/*	log.debug("before LoggingResponseWrapper" + res);
81  		LoggingResponseWrapper wrappedResponse = new LoggingResponseWrapper(res);
82  		log.debug("beforedofileter" +  wrappedResponse);
83  		chain.doFilter(request, wrappedResponse);
84  		log.debug("afterdofileter: get response body");
85  		String responseBody = new String(wrappedResponse.getResponseBody());
86  		*/
87          
88  		HashMap message = new HashMap();
89  		message.put("TYPE", "Swirl");
90  		message.put("WEBDAV_HOST", req.getServerName());
91  		message.put("WEBDAV_PATH", req.getRequestURI());
92  		message.put("WEBDAV_CLIENT", req.getRemoteHost());
93  		message.put("WEBDAV_CLIENT_USER", req.getRemoteUser());
94  		message.put("WEBDAV_COMMAND", req.getMethod());
95  		//message.put("WEBDAV_RESPONSE", responseBody);
96  		if(log.isDebugEnabled())
97          {
98  			log.debug("message: " + message);
99          }
100 		/*
101 		if (senders != null && !senders.isEmpty()) 
102 		{
103 			// make a copy of the listener list in case
104 			//   anyone adds/removes listeners
105 			Vector targets;
106 			synchronized (this) 
107 			{
108 				targets = (Vector) senders.clone();
109 			}
110 			
111 			// walk through the listener list and
112 			//   call the receiveMessage method in each
113 			Enumeration e = targets.elements();
114 			while (e.hasMoreElements()) 
115 			{
116 				MessageSender sender = (MessageSender) e.nextElement();
117 				sender.sendMessage(message);
118 			}
119 		}*/
120 		}
121 		catch(Exception ex)
122 		{
123 			log.error("problem trying to filter: ", ex);
124 		}
125 	}
126 
127 	/***
128 	 * @see javax.servlet.Filter#destroy()
129 	 */
130 	public void destroy() {
131 		
132 	}
133 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/Configuration.html
##-----------------TITLE------------------------##
Configuration xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.net.Socket;
4   import java.util.Enumeration;
5   
6   import javax.servlet.ServletConfig;
7   import javax.servlet.ServletContext;
8   import javax.servlet.ServletException;
9   import javax.servlet.http.HttpServlet;
10  
11  import org.apache.commons.logging.Log;
12  import org.apache.commons.logging.LogFactory;
13  import org.apache.log4j.PropertyConfigurator;
14  import org.picocontainer.MutablePicoContainer;
15  
16  import swirl.workspace.security.ReflectionInvocationHandler;
17  import swirl.workspace.security.SwirlSecurity;
18  import swirl.workspace.security.SwirlSecurityHandler;
19  
20  /***
21   * TODO
22   *
23   * @author Ben Pillet
24   */
25  public class Configuration extends HttpServlet
26  {
27      /*** TODO */
28      private static final long serialVersionUID = 1L;
29  
30      /*** Port that log4j's chainsaw listens on */
31      public static final int CHAINSAW = 4445;
32  
33      /*** number of milliseconds in one second */
34      public static final int ONE_SECOND = 1000;
35  
36      /*** logs messages from configuration */
37      private static Log log;
38  
39      /*** the root of the container structure */
40      private MutablePicoContainer pico;
41  
42      /*** Configures the servlet */
43      private ServletConfig config;
44  
45      /*** holds initialization parameters for pico */
46      private ServletContext context;
47  
48      /***
49       * When the servlet is destroyed, pico is stopped and disposed
50       */
51      public void destroy()
52      {
53          if(pico != null)
54          {
55          	if(log.isDebugEnabled())
56  	        {
57          		log.debug("stopping pico");
58  	        }
59              pico.stop();
60              if(log.isDebugEnabled())
61  	        {
62              	log.debug("stopped pico");
63  	        }
64              pico.dispose();
65              if(log.isDebugEnabled())
66  	        {
67              	log.debug("disposed pico");
68  	        }
69          }
70      }
71  
72      /***
73       * This block initializes the System properties from app.properties
74       *
75       * @param currentDir the current directory of the web application
76       */
77      public static void init(final String currentDir)
78      {
79          if(pingPort(CHAINSAW))
80          {
81              PropertyConfigurator.configure(currentDir
82                                             + "/WEB-INF/classes/log4j.properties");
83          }
84          else
85          {
86              PropertyConfigurator.configure(currentDir
87                                             + "/WEB-INF/classes/console-log4j.properties");
88          }
89  
90          log = LogFactory.getLog(Configuration.class);
91          log.info("initialized");
92  
93      }
94  
95      /***
96       * Setup the configuration
97       *
98       * @param conf the configuration for this servlet
99       *
100      * @throws ServletException inherited from superclass
101      */
102     public void init(final ServletConfig conf) throws ServletException
103     {
104         super.init(conf);
105         this.config = conf;
106         this.context = config.getServletContext();
107         init(context.getRealPath("."));
108 
109         new InitPico().start();
110     }
111 
112     /***
113      * Utility method to check if a port is listening for connections
114      *
115      * @param port the port to check
116      *
117      * @return if it is listening for connections
118      */
119     public static boolean pingPort(final int port)
120     {
121         Socket socket;
122 
123         try
124         {
125             socket = new Socket("localhost", port);
126             socket.close();
127 
128             return true;
129         }
130         catch(Exception ex)
131         {
132             //ex.printStackTrace();
133             return false;
134         }
135     }
136 
137     /***
138      * DOCUMENT ME!
139      *
140      * @author bpillet Setups the container hierarchy and populates the
141      *         containers
142      */
143     class InitPico extends Thread
144     {
145         /***
146          * Setups pico based on "pico" initialization parameter in context
147          */
148         public void run()
149         {
150             for(int i = 0; !pingPort(App.PORT); ++i)
151             {
152                 if(log.isDebugEnabled())
153                 {
154                     log.debug("waiting for server to start.  Attempt " + i);
155                 }
156 
157                 try
158                 {
159                     Thread.sleep(ONE_SECOND);
160                 }
161                 catch(InterruptedException e)
162                 {
163                     if(log.isDebugEnabled())
164                     {
165                         log.debug("trouble waiting", e);
166                     }
167                 }
168             }
169 
170             for(Enumeration en = context.getAttributeNames();
171                 en.hasMoreElements();)
172             {
173                 String key = (String)en.nextElement();
174 
175                 if(log.isDebugEnabled())
176                 {
177                     log.debug(context.getServletContextName() + ".context: "
178                               + key + " -> " + context.getAttribute(key));
179                 }
180             }
181 
182             //Add SwirlSecurityHandler to root container
183             Object handler = context.getAttribute(SwirlSecurityHandler.KEY);
184             //Add ResourceUpdateFilter to root container
185             Object updateList = context.getAttribute("update.list");
186             Object updateListMutex = context.getAttribute("updateListMutex");
187 
188             if(log.isDebugEnabled())
189             {
190                 log.debug("handler: " + handler);
191             }
192 
193             String picos = context.getInitParameter("pico");
194 
195             if(log.isDebugEnabled())
196             {
197                 log.debug("picos: " + picos);
198             }
199 
200             if(picos != null)
201             {
202                 String[] splitPicos = picos.split(",");
203 
204                 log.debug("splitPicos: " + splitPicos.length);
205 
206                 PropertiesContainerBuilder builder = new PropertiesContainerBuilder();
207 
208                 MutablePicoContainer prev = pico;
209 
210                 for(int i = 0; i < splitPicos.length; ++i)
211                 {
212                     if(log.isDebugEnabled())
213                     {
214                         log.debug("creating container: " + splitPicos[i]);
215                     }
216 
217                     if(i == 0)
218                     {
219                         pico = builder.buildContainer(splitPicos[i]);
220                         prev = pico;
221                     }
222                     else
223                     {
224                         prev = builder.buildContainer(splitPicos[i], prev);
225                     }
226 
227                     if(splitPicos[i].endsWith("swirl.pico")
228                        && (handler != null))
229                     {
230                         SwirlSecurity wrapped = (SwirlSecurity)
231 							ReflectionInvocationHandler.wrap(SwirlSecurity.class, handler);
232 
233                         log.debug("wrapped: " + wrapped);
234                         prev.registerComponentInstance(wrapped);
235                     }
236 
237                     context.setAttribute(splitPicos[i], prev);
238                 }
239 
240 				//ResourceUpdateFilterInterface wrappedFilter = (ResourceUpdateFilterInterface)
241 					//ReflectionInvocationHandler.wrap(ResourceUpdateFilterInterface.class, filter);
242 				log.debug(config.getServletContext().getServletContextName() + " updateList: " + updateList);
243 
244 				pico.registerComponentInstance(updateList);
245 				pico.registerComponentInstance(updateListMutex);
246 
247                 try
248                 {
249                     pico.start();
250                 }
251                 catch(Throwable ex)
252                 {
253                     log.error("Problem starting pico", ex);
254                 }
255             }
256         }
257     }
258 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/ResourceUpdateFilter.html
##-----------------TITLE------------------------##
ResourceUpdateFilter xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.IOException;
4   import java.util.List;
5   import java.util.Collections;
6   
7   import javax.servlet.Filter;
8   import javax.servlet.FilterChain;
9   import javax.servlet.FilterConfig;
10  import javax.servlet.ServletException;
11  import javax.servlet.ServletRequest;
12  import javax.servlet.ServletResponse;
13  import javax.servlet.http.HttpServletRequest;
14  import javax.servlet.http.HttpServletResponse;
15  
16  import org.apache.commons.logging.Log;
17  import org.apache.commons.logging.LogFactory;
18  
19  import swirl.workspace.common.NetUtils;
20  import swirl.workspace.persistence.PersistenceManager;
21  
22  /***
23   * Filter that listens for sucessfull updates to swirl resources and maintains a list of modified resources.
24   * @author kari and bpillet
25   */
26  public class ResourceUpdateFilter implements Filter
27  {
28  
29  	/*** the logger for this class */
30  	private Log log = LogFactory.getLog(this.getClass());
31  	
32  	private List updateList;
33  	private Object updateListMutex;
34  	
35  	/*** filter configuration, passed into init method but not currently used */
36  	private FilterConfig config;
37  	
38  	// status codes of interest
39  	private static final int OK = 200;
40  	private static final int NOCONTENT = 204;
41  
42  	/***
43  	 * 	constructor
44  	 */
45  	public ResourceUpdateFilter() {
46  		if(log.isDebugEnabled())
47          {
48  			log.debug("()");	
49          }
50  	}
51  
52  	/***
53  	 * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
54  	 */
55  	public void init(FilterConfig conf) throws ServletException 
56  	{
57  		config = conf;
58  		try
59  		{
60  			if(log.isDebugEnabled())
61  	        {
62  				log.debug("initialize()");
63  	        }
64  			// this needs to be thread-safe
65  			// the list should be "wrapped" using the  Collections.synchronizedList method
66  			updateList = Collections.synchronizedList((List)config.getServletContext().getAttribute("update.list"));
67  			updateListMutex = config.getServletContext().getAttribute("updateListMutex"); 
68  			//updateList = (List)config.getServletContext().getAttribute("update.list");
69  			if(log.isDebugEnabled())
70  	        {
71  				log.debug("updateList: " + updateList);
72  	        }
73  		}
74  		catch(Exception ex)
75  		{
76  			log.error("problem starting yancees client", ex);
77  		}
78  
79  	}
80  
81  	/***
82  	 * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)
83  	 */
84  	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
85  	throws IOException, ServletException
86  	{		
87  		try 
88  		{
89  			HttpServletRequest req = (HttpServletRequest)request;
90  			HttpServletResponse res = (HttpServletResponse)response;
91  			WrappedResponse wrappedRes = new WrappedResponse(res);
92  			// pass to next filter
93  			chain.doFilter(req, wrappedRes);
94  			// now the response should be set
95  			String path = req.getServletPath();
96  			String method = req.getMethod();
97  			int status = wrappedRes.getStatus();
98  			if(log.isDebugEnabled())
99  	        {
100 				log.debug(
101 					"doFilter() in ResourceUpdateFilter \nreq.method: " + method + "\n req.path: " + path);
102 				log.debug(
103 					"doFilter() in ResourceUpdateFilter \nStatus: " + status);
104 	        }
105 			
106 
107 			if ((status == OK)||(status == NOCONTENT)) {
108 				// note: we are purposely ignoring status 201, CREATED
109 				if (!path.startsWith(PersistenceManager.BACKUPPREFIX)) {
110 					// note: we are also ignoring hidden backup files
111 					if (method.equals("PUT")) {
112 						if(log.isDebugEnabled())
113 				        {
114 							log.debug("before adding to updatelist: " + path);
115 				        }
116 						addToUpdateList(path);
117 					} else if (method.equals("DELETE")) {
118 						removeFromUpdateList(path);
119 					} else if (method.equals("MOVE")) {
120 						//String dest = req.getHeader("Destination");
121 						//if (removeFromUpdateList(path)) {
122 						//	addToUpdateList(dest);
123 						//}
124 						/*** TODO Implement */
125 					}
126 					else if (method.equals("MKCOL")) {
127 						if(log.isDebugEnabled())
128 				        {
129 							log.debug("changing MKCOL: " + path);
130 				        }
131 					}
132 				}
133 			}
134 		}
135 		catch(Exception ex)
136 		{
137 			log.error("problem in resource update filter: ", ex);
138 		}
139 	}
140 	
141 	/***
142 	 * @see javax.servlet.Filter#destroy()
143 	 */
144 	public void destroy() {
145 		
146 	}
147 
148 	/***
149 	 * Add path to list of resources that have been updated
150 	 * @param path path to udated resource
151 	 */
152 	public void addToUpdateList(String _path) 
153 	{
154 	    String path = _path.substring(0, 1) + NetUtils.encode(_path.substring(1));
155 	    synchronized(updateListMutex) {
156 			if (!updateList.contains(path)) updateList.add(path);
157 			log.info("addToUpdateList: " + updateList);
158 	    }
159 	}
160 	
161 	/***
162 	 * Remove path from list of resources that have been updated
163 	 * @param path updated path to remove from update list
164 	 * @return if delete is successful
165 	 */
166 	public boolean removeFromUpdateList (String _path)
167 	{
168 	    String path = _path.substring(0, 1) + NetUtils.encode(_path.substring(1));
169 	    boolean result = false; 
170 	    synchronized(updateListMutex) {
171 	    	if(log.isDebugEnabled()) {
172 	    		log.debug("removeFromUpdateList: " + updateList);
173 	    	}
174 			result = updateList.remove(path);
175 	    }
176 	    return result;
177 	}
178 	
179 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/SVGPieAction.html
##-----------------TITLE------------------------##
SVGPieAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import javax.swing.AbstractAction;
4   
5   import swirl.workspace.viz.View;
6   import swirl.workspace.viz.pie.SVGPieView;
7   
8   public abstract class SVGPieAction extends AbstractAction {
9   
10  	private static final long serialVersionUID = 1L;
11  	private SVGPieView view = null;
12  
13  	public void setView(View v)
14  	{
15  		if(v instanceof SVGPieView)
16  			view = (SVGPieView) v;
17  	}
18  
19  	public SVGPieView getView(){ return view; }
20  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/BasePeer.html
##-----------------TITLE------------------------##
BasePeer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.awt.Color;
4   
5   import org.apache.commons.httpclient.HttpURL;
6   import org.apache.commons.httpclient.URIException;
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   
10  /***
11   * DOCUMENT ME!
12   *
13   * @author bpillet
14   */
15  public class BasePeer extends Peer
16  {
17      /*** The peer's color to be displayed in every gui */
18      private Color color;
19  
20      /*** the url for the peer */
21      private HttpURL url;
22  
23      /*** a logger for this class */
24      private Log log = LogFactory.getLog(this.getClass());
25  
26      /*** the user's name for that peer */
27      private String userName;
28  
29      /***
30       * Builds a BasePeer
31       *
32       * @param col the peer's color
33       * @param name the peer's User name
34       * @param u the url for the peer
35       */
36      public BasePeer(final Color col, final String name, final HttpURL u)
37      {
38          this.color = col;
39          this.userName = name;
40          this.url = u;
41      }
42  
43      /***
44       * Builds a BasePeer
45       *
46       * @param col the peer's color
47       * @param name the peer's User name
48       * @param u the url for the peer
49       *
50       * @throws URIException if the url is malformed
51       */
52      public BasePeer(final Color col, final String name, final String u)
53               throws URIException
54      {
55          this(col, name, new HttpURL(u));
56      }
57  
58      /***
59       * Accessor for the color of this peer
60       *
61       * @return this Peer's color
62       */
63      public Color getColor()
64      {
65          return color;
66      }
67  
68      /***
69       * Accessor for the url of this peer
70       *
71       * @return an httpclient HttpURL for the peer
72       */
73      public HttpURL getHttpURL()
74      {
75          return url;
76      }
77  
78      /***
79       * @see swirl.workspace.Peer#getSwirlURL()
80       */
81      public HttpURL getSwirlURL() throws URIException
82      {
83          return null;
84      }
85  
86      /***
87       * Accessor for the username of this peer
88       *
89       * @return the Peer's username
90       */
91      public String getUserName()
92      {
93          return userName;
94      }
95  
96      /***
97       * Initializes this peer when the container starts it
98       */
99      public void start()
100     {
101         if(log.isDebugEnabled())
102         {
103             log.debug("starting");
104         }
105 
106         if(log.isDebugEnabled())
107         {
108             log.debug("started");
109         }
110     }
111 
112     /***
113      * Cleans up when this peer has been stopped by it's container
114      */
115     public void stop()
116     {
117         if(log.isDebugEnabled())
118         {
119             log.debug("stopping");
120         }
121 
122         if(log.isDebugEnabled())
123         {
124             log.debug("stopped");
125         }
126     }
127 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/ImportAction.html
##-----------------TITLE------------------------##
ImportAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.Component;
4   import java.awt.event.ActionEvent;
5   import java.awt.event.KeyEvent;
6   import javax.swing.KeyStroke;
7   
8   import java.io.File;
9   import java.util.Vector;
10  
11  import javax.swing.ImageIcon;
12  import javax.swing.JFileChooser;
13  
14  import org.apache.commons.logging.Log;
15  import org.apache.commons.logging.LogFactory;
16  
17  import swirl.workspace.viz.Model;
18  import swirl.workspace.viz.SwirlFileFilter;
19  import swirl.workspace.viz.pie.Util;
20  
21  /***
22   * DOCUMENT ME!
23   *
24   * @author bpillet
25   */
26  public class ImportAction extends SVGPieAction 
27  {
28      /*** TODO */
29      private static final long serialVersionUID = 1L;
30  
31      /*** TODO */
32      private Log log = LogFactory.getLog(this.getClass());
33  
34      /*** TODO */
35      private Model pieModel;
36  
37      /***
38       * Creates a new ImportAction object.
39       *
40       * @param model TODO
41       */
42      public ImportAction(Model model)
43      {
44          super();
45          pieModel = model;
46  
47          putValue(ACTION_COMMAND_KEY, "ImportFile");
48          
49          putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_I));
50          
51          putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.CTRL_MASK));
52  
53          //        The key used to determine the command string for the ActionEvent that
54          // will be created when an Action is going to be notified as the result
55          // of residing in a Keymap associated with a JComponent.
56          putValue(LONG_DESCRIPTION,
57                   "Imports local files into the shared workspace");
58  
59          //        The key used for storing a longer description for the action, could
60          // be used for context-sensitive help.
61          //putValue(MNEMONIC_KEY, new Character('S'));
62          //        The key used for storing an int key code to be used as the mnemonic
63          // for the action.
64          putValue(NAME, "Import files to Workspace...");
65  
66          //        The key used for storing the name for the action, used for a menu or
67          // button.
68          putValue(SHORT_DESCRIPTION,
69                   "Imports local files into the shared workspace");
70  
71          //        The key used for storing a short description for the action, used for
72          // tooltip text.
73          putValue(SMALL_ICON, new ImageIcon("resources/import.gif"));
74  
75          //		The key used for storing a small icon for the action, used for
76          // toolbar buttons
77      }
78  
79      /***
80       * TODO
81       *
82       * @param e TODO
83       */
84      public void actionPerformed(ActionEvent e)
85      {
86          File[] files = null;
87          JFileChooser fileChooser = new JFileChooser(); //makeAbsolute(currentExportPath));
88  
89          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
90          fileChooser.setDialogTitle("Choose files to import into swirl work space...");
91          fileChooser.setFileHidingEnabled(false);
92          fileChooser.setMultiSelectionEnabled(true);
93          fileChooser.addChoosableFileFilter(new SwirlFileFilter());
94  
95          int choice = fileChooser.showOpenDialog((Component)e.getSource());
96  
97          if(choice == JFileChooser.APPROVE_OPTION)
98          {
99              files = fileChooser.getSelectedFiles();
100             java.io.FileFilter fileFilter = (java.io.FileFilter)(new SwirlFileFilter());
101             Vector vectFiles = Util.getAllFiles(files, fileFilter);
102 
103             if(log.isDebugEnabled())
104             {
105                 log.debug("imported file number is " + vectFiles.size());
106             }
107 
108             pieModel.importFiles(vectFiles, null, true);
109         	}
110 
111     }
112 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/BaseLevel.html
##-----------------TITLE------------------------##
BaseLevel xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author dingx
10   */
11  public abstract class BaseLevel implements Level{}

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/HelpSwirlAction.html
##-----------------TITLE------------------------##
HelpSwirlAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.event.ActionEvent;
4   import java.awt.event.KeyEvent;
5   
6   import javax.swing.ImageIcon;
7   import javax.swing.KeyStroke;
8   
9   /***
10   * @author bpillet
11   */
12  public class HelpSwirlAction extends SVGPieAction {
13  
14  	private static final long serialVersionUID = 1L;
15  	
16  	public HelpSwirlAction()
17  	{
18          putValue(ACTION_COMMAND_KEY, "HelpAction");
19  
20          putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_H));
21          
22          putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_H, ActionEvent.CTRL_MASK));
23  
24          //        The key used to determine the command string for the ActionEvent that
25          // will be created when an Action is going to be notified as the result
26          // of residing in a Keymap associated with a JComponent.
27          putValue(LONG_DESCRIPTION,
28                   "Get help");
29  
30          //        The key used for storing a longer description for the action, could
31          // be used for context-sensitive help.
32          //putValue(MNEMONIC_KEY, new Character('S'));
33          //        The key used for storing an int key code to be used as the mnemonic
34          // for the action.
35          putValue(NAME, "Help...");
36  
37          //        The key used for storing the name for the action, used for a menu or
38          // button.
39          putValue(SHORT_DESCRIPTION, "Get help");
40  
41          //        The key used for storing a short description for the action, used for
42          // tooltip text.
43          putValue(SMALL_ICON, new ImageIcon("resources/help.gif"));
44  
45          //		The key used for storing a small icon for the action, used for
46          // toolbar buttons
47  	}
48  	
49  	public void actionPerformed(ActionEvent e) {
50  		if(getView() != null)
51  			getView().decrementDotSize();
52  	}
53  
54  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/SwirlSecurityHandler.html
##-----------------TITLE------------------------##
SwirlSecurityHandler xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   import java.io.IOException;
4   import java.util.ArrayList;
5   import java.util.Collections;
6   import java.util.HashMap;
7   import java.util.HashSet;
8   import java.util.List;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  import org.mortbay.http.HttpContext;
13  import org.mortbay.http.HttpException;
14  import org.mortbay.http.HttpRequest;
15  import org.mortbay.http.HttpResponse;
16  import org.mortbay.http.UserPrincipal;
17  import org.mortbay.http.UserRealm;
18  import org.mortbay.http.handler.AbstractHttpHandler;
19  import org.mortbay.jetty.servlet.WebApplicationContext;
20  
21  import swirl.workspace.common.NetUtils;
22  import swirl.workspace.persistence.PersistenceManager;
23  
24  /***
25   * DOCUMENT ME!
26   *
27   * @author bpillet
28   */
29  public class SwirlSecurityHandler extends AbstractHttpHandler
30      implements SwirlSecurity
31  {
32      /*** TODO */
33      private static final long serialVersionUID = 1L;
34  
35      /*** TODO */
36      public static final String KEY = "swirl.security.handler";
37  
38      /*** TODO */
39      public static final String[] HIDDEN_METHODS = {};
40  
41      /*** TODO */
42      public static final String[] SEE_ONLY_METHODS = 
43                                                      {
44                                                          "REPORT", "PROPFIND",
45                                                          "SEARCH", "HEAD",
46                                                          "OPTIONS"
47                                                      };
48  
49      /*** TODO */
50      public static final String[] READ_ONLY_METHODS = {"GET"};
51  
52      /*** TODO */
53      public static final String[] READ_WRITE_COPY_METHODS = 
54                                                             {
55                                                                 "PROPPATCH",
56                                                                 "COPY", "DELETE",
57                                                                 "POST", "PUT",
58                                                                 "LOCK", "UNLOCK",
59                                                                 "MOVE", "ACL",
60                                                                 "UNBIND", "TRACE",
61                                                                 "BIND", "CONNECT",
62                                                                 "REBIND"
63                                                             };
64  
65      /*** TODO */
66      public static final String[] PERSISTENT_METHODS = {};
67  
68      /*** TODO */
69      public static final String[][] LEVELS_METHODS = 
70                                                      {
71                                                          HIDDEN_METHODS,
72                                                          SEE_ONLY_METHODS,
73                                                          READ_ONLY_METHODS,
74                                                          READ_WRITE_COPY_METHODS,
75                                                          PERSISTENT_METHODS
76                                                      };
77  
78  
79  
80      /*** TODO */
81      HashMap levels = new HashMap();
82  
83      /*** TODO */
84      HashSet permissions = new HashSet();
85  
86      /*** the logger for this class */
87      private Log log = LogFactory.getLog(this.getClass());
88  
89      /*** TODO */
90      private UserRealm realm;
91  
92      /***
93       * Creates a new SwirlSecurityHandler object.
94       */
95      public SwirlSecurityHandler()
96      {
97          if(log.isDebugEnabled())
98          {
99              log.debug("()");
100         }
101     }
102 
103     /***
104      * TODO
105      *
106      * @param path TODO
107      * @param role TODO
108      * @param securityLevel TODO
109      *
110      * @throws UnsupportedOperationException TODO
111      */
112     public void setSecurityLevel(String path, String role, String securityLevel)
113                           throws UnsupportedOperationException
114     {
115         if(log.isDebugEnabled())
116         {
117             log.debug("setSecurityLevel(" + path + ", " + role + ", "
118                       + securityLevel + ")");
119         }
120 
121         int level = SecurityUtils.getLevelsIndex(securityLevel);
122 
123         for(int i = 0; i < LEVELS_METHODS.length; ++i)
124         {
125             String[] methods = LEVELS_METHODS[i];
126 
127             for(int j = 0; j < methods.length; ++j)
128             {
129                 if(i <= level)
130                 {
131                     grantMethod(path, methods[j], role);
132                 }
133                 else
134                 {
135                     revokeMethod(path, methods[j], role);
136                 }
137             }
138         }
139 
140         levels.put(path + role, securityLevel);
141     }
142 
143     /***
144      * TODO
145      *
146      * @param path TODO
147      * @param role TODO
148      *
149      * @return TODO
150      */
151     public String getSecurityLevel(String path, String role)
152     {
153         String ret = (String)levels.get(path + role);
154 
155         if(ret == null)
156         {
157             ret = SwirlSecurity.HIDDEN;
158             setSecurityLevel(path, role, ret);
159         }
160 
161         if(log.isDebugEnabled())
162         {
163             log.debug("getSecurityLevel(" + path + ", " + role + "): " + ret);
164         }
165 
166         return ret;
167     }
168 
169     /***
170      * TODO
171      *
172      * @param pathInContext TODO
173      * @param pathParams TODO
174      * @param request TODO
175      * @param response TODO
176      *
177      * @throws HttpException TODO
178      * @throws IOException TODO
179      */
180     public void handle(java.lang.String pathInContext,
181                        java.lang.String pathParams, HttpRequest request,
182                        HttpResponse response) throws HttpException, 
183                                                      IOException
184     {
185         if(log.isDebugEnabled())
186         {
187             log.debug("handle()\nreq.method: " + request.getMethod()
188                       + "\nreq.path: " + request.getEncodedPath());
189         }
190 
191         boolean isMe = NetUtils.isRequestFromMe(request);
192 
193         if(log.isDebugEnabled())
194         {
195             log.debug("isRequestFromMe: " + isMe);
196         }
197 
198         if(isMe)
199         {
200 			if (request.getPath().startsWith(PersistenceManager.BACKUPPREFIX)) {
201        			request.setAuthUser(BACKUP);
202        		}
203        		else {					
204 				request.setAuthUser(ME);
205         	}
206         }
207         else
208         {
209             request.setAuthUser(OTHERS);
210         }
211 
212         UserPrincipal principal = request.getUserPrincipal();
213 
214         if(log.isDebugEnabled())
215         {
216             log.debug("principal: " + principal);
217         }
218 
219         principal = realm.authenticate(request.getAuthUser(),
220                                        request.getAuthUser(), request);
221 
222         if(log.isDebugEnabled())
223         {
224             log.debug("principal2: " + principal);
225         }
226 
227         request.setUserPrincipal(principal);
228 
229         if(log.isDebugEnabled())
230         {
231             log.debug("req: \nauthType: " + request.getAuthType()
232                       + "\nauthUser: " + request.getAuthUser()
233                       + "\nuserPrincipal: " + request.getUserPrincipal()
234                       + "\nis in role me: " + request.isUserInRole(ME)
235                       + "\nis in role others: " + request.isUserInRole(OTHERS));
236         }
237 
238         boolean methodAllowed = methodAllowed(request.getEncodedPath(),
239                                               request.getMethod(),
240                                               request.getAuthUser());
241         String securityLevel = getSecurityLevel(request.getEncodedPath(),
242                                                 request.getAuthUser());
243 
244         if(!methodAllowed)
245         {
246             response.setStatus(403);
247             response.setReason("The method " + request.getMethod()
248                                + " is not allowed for user "
249                                + request.getAuthUser());
250             request.setHandled(true);
251         }
252     }
253 
254     /***
255      * TODO
256      *
257      * @param context TODO
258      */
259     public void initialize(HttpContext context)
260     {
261         super.initialize(context);
262 
263         HttpContext swirl = context.getHttpServer().getContext("/swirl");
264         swirl.setAttribute(KEY, this);
265         
266 		WebApplicationContext webContext = (WebApplicationContext)context;
267 		
268 		// to be thread-safe - wrapped up with synchronize
269 		List updateList = Collections.synchronizedList(new ArrayList(50));
270 		
271 		webContext.setAttribute("update.list", updateList);
272 		if(log.isDebugEnabled()) {
273 			log.debug("updateList: " + updateList);
274 		}
275 		swirl.setAttribute("update.list", updateList);
276 		
277 		Object	updateListMutex = new Object();
278 		webContext.setAttribute("updateListMutex", updateListMutex);
279 		swirl.setAttribute("updateListMutex", updateListMutex);
280 		
281         if(log.isDebugEnabled())
282         {
283             log.debug("initialize()");
284         }
285 
286         setSecurityLevel("/slide/", OTHERS, SwirlSecurity.READ_ONLY);
287         realm = context.getRealm();
288 
289         if(log.isDebugEnabled())
290         {
291             log.debug("realm: " + realm);
292         }
293     }
294 
295     /***
296      * TODO
297      *
298      * @throws Exception TODO
299      */
300     public void start() throws Exception
301     {
302         super.start();
303 
304         if(log.isDebugEnabled())
305         {
306             log.debug("start()");
307         }
308     }
309 
310     /***
311      * TODO
312      *
313      * @param path TODO
314      * @param method TODO
315      * @param role TODO
316      */
317     private void grantMethod(String path, String method, String role)
318     {
319         permissions.add(path + method + role);
320     }
321 
322     /***
323      * TODO
324      *
325      * @param path TODO
326      * @param method TODO
327      * @param role TODO
328      *
329      * @return TODO
330      */
331     private boolean methodAllowed(String path, String method, String role)
332     {
333         boolean ret;
334 
335         if(ME.equals(role))
336         {
337             ret = true;
338         }
339         else if((path.equals("/slide") || path.equals("/slide/")) && method.equals("PROPFIND"))
340         {
341         	ret = true;
342         }
343 		else if (path.startsWith(PersistenceManager.BACKUPPREFIX) && BACKUP.equals(role)){
344         	ret = true;
345         }
346         else
347         {
348             ret = permissions.contains(path + method + role);
349         }
350 
351         if(log.isDebugEnabled())
352         {
353             log.debug("methodAllowed(" + path + ", " + method + ", " + role
354                       + "): " + ret);
355         }
356 
357         return ret;
358     }
359 
360     /***
361      * TODO
362      *
363      * @param path TODO
364      * @param method TODO
365      * @param role TODO
366      */
367     private void revokeMethod(String path, String method, String role)
368     {
369         permissions.remove(path + method + role);
370     }
371 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/MessageProcessor.html
##-----------------TITLE------------------------##
MessageProcessor xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.util.Map;
4   
5   /***
6    * Performs an action or command based on a message from the messaging service
7    * Most messages will come through a MessageReceiver object
8    *
9    * @author bpillet
10   * @see MessageSender
11   * @see MessageReceiver
12   */
13  public interface MessageProcessor
14  {
15      /***
16       * Command pattern "execute" method to process a message
17       *
18       * @param msg the message to handle
19       */
20      public void processMessage(Map msg);
21      
22      /***
23       * Initialize routine.  This method is to be inovoked by message receiver only after it is
24       * fully initialized.
25       */
26      public void initializeMessageProcessor();
27  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/ZoomOutAction.html
##-----------------TITLE------------------------##
ZoomOutAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.event.ActionEvent;
4   import java.awt.event.KeyEvent;
5   
6   import javax.swing.ImageIcon;
7   import javax.swing.KeyStroke;
8   
9   /***
10   * @author bpillet
11   */
12  public class ZoomOutAction extends SVGPieAction {
13  
14  	private static final long serialVersionUID = 1L;
15  	
16  	public ZoomOutAction()
17  	{
18  	       putValue(ACTION_COMMAND_KEY, "ZoomInAction");
19  
20  	        putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_O));
21  	        
22  	        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, ActionEvent.CTRL_MASK));
23  
24  	        //        The key used to determine the command string for the ActionEvent that
25  	        // will be created when an Action is going to be notified as the result
26  	        // of residing in a Keymap associated with a JComponent.
27  	        putValue(LONG_DESCRIPTION,
28  	                 "Zoom Out");
29  
30  	        //        The key used for storing a longer description for the action, could
31  	        // be used for context-sensitive help.
32  	        //putValue(MNEMONIC_KEY, new Character('S'));
33  	        //        The key used for storing an int key code to be used as the mnemonic
34  	        // for the action.
35  	        putValue(NAME, "Zoom Out");
36  
37  	        //        The key used for storing the name for the action, used for a menu or
38  	        // button.
39  	        putValue(SHORT_DESCRIPTION, "Zoom Out");
40  
41  	        //        The key used for storing a short description for the action, used for
42  	        // tooltip text.
43  	        putValue(SMALL_ICON, new ImageIcon("resources/zoomout.gif"));
44  
45  	        //		The key used for storing a small icon for the action, used for
46  	}
47  	
48  	public void actionPerformed(ActionEvent e) {
49  		if(getView() != null)
50  			getView().zoomOutPie();
51  	}
52  
53  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/SwirlCommand.html
##-----------------TITLE------------------------##
SwirlCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   /***
4    * Base interface for all Commands to proxied servers
5    *
6    * @author bpillet
7    */
8   public interface SwirlCommand
9   {
10      /*** the servletPath to slide */
11      String SLIDE = "/slide";
12  
13      /*** the servletPath to swirl */
14      String SWIRL = "/swirl";
15  
16      /***
17       * Implement this method to handle requests from the client.
18       *
19       * @return the status code to send back to the client
20       *
21       * @throws Exception if there's a problem
22       */
23      int execute() throws Exception;
24  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/LockCommand.html
##-----------------TITLE------------------------##
LockCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.IOException;
4   
5   import javax.servlet.http.HttpServletRequest;
6   import javax.servlet.http.HttpServletResponse;
7   
8   import org.apache.commons.httpclient.HttpMethod;
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  import org.apache.webdav.lib.methods.LockMethod;
12  
13  /***
14   * Proxies an WebDAV LOCK command to a specific peer
15   *
16   * @author Kari Nies
17   */
18  public class LockCommand extends ProxyCommand
19  {
20      /*** commons-logging log that maps to this Command */
21      private Log log = LogFactory.getLog(this.getClass());
22  
23      /***
24       * Constructor that calls super constructor
25       *
26       * @param req see super
27       * @param resp see super
28       * @param host see super
29       * @param path see super
30       * @param peerManager see super
31       */
32      public LockCommand(final HttpServletRequest req,
33                         final HttpServletResponse resp, final String host,
34                         final String path, final PeerManager peerManager)
35      {
36          super(req, resp, host, path, peerManager);
37      }
38  
39      /***
40       * Implements the abstract method from ProxyCommand to return a WebDAV LOCK
41       * method
42       *
43       * @param url the url to execute the method on
44       *
45       * @return an instance of LockMethod
46       */
47      public HttpMethod createMethod(final String url)
48      {
49          LockMethod method = new LockMethod(url);
50  
51          //set Depth header, if unspecified, default to infinity
52          String depthHeader = getRequest().getHeader("Depth");
53  
54          if(log.isDebugEnabled())
55          {
56              log.debug("depth: " + depthHeader);
57          }
58  
59          method.setDepth(parseDepthHeader(depthHeader));
60  
61          //set Timeout header, to INFINITY - ALWAYS
62          String timeoutHeader = getRequest().getHeader("Timeout");
63  
64          method.setRequestHeader("Timeout", timeoutHeader);
65  
66          //set If header only if it exists
67          String ifHeader = getRequest().getHeader("If");
68  
69          if(log.isDebugEnabled())
70          {
71              log.debug("If: " + ifHeader);
72          }
73  
74          if(ifHeader != null)
75          {
76              method.setRequestHeader("If", ifHeader);
77          }
78  
79          // set request body, contains lockinfo
80          try
81          {
82              method.setRequestBody(getRequest().getInputStream());
83          }
84          catch(IOException ex)
85          {
86              log.error(ex, ex);
87          }
88  
89          return method;
90      }
91  
92      /***
93       * Figure out what the depth header is as an integer.  defaults to infinity
94       * if it can't figure it out.
95       *
96       * @param depthHeader the string version
97       *
98       * @return the int version
99       */
100     public int parseDepthHeader(final String depthHeader)
101     {
102         if(depthHeader != null)
103         {
104             if(depthHeader.trim().equalsIgnoreCase("infinity"))
105             {
106                 return LockMethod.DEPTH_INFINITY;
107             }
108             else
109             {
110                 return Integer.parseInt(depthHeader);
111             }
112         }
113         else
114         {
115             return LockMethod.DEPTH_INFINITY;
116         }
117     }
118 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/YanceesMessageReceiver.html
##-----------------TITLE------------------------##
YanceesMessageReceiver xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.util.HashMap;
4   import java.util.Iterator;
5   import java.util.Map;
6   
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.picocontainer.Startable;
10  
11  import edu.uci.isr.yancees.EventInterface;
12  import edu.uci.isr.yancees.GenericMessage;
13  import edu.uci.isr.yancees.SubscriberInterface;
14  import edu.uci.isr.yancees.YanceesEvent;
15  import edu.uci.isr.yancees.client.rmi.YanceesRMIClient;
16  
17  /***
18   * DOCUMENT ME!
19   *
20   * @author bpillet Adapter to log messages to Yancees
21   */
22  public class YanceesMessageReceiver implements MessageReceiver,
23                                                 SubscriberInterface,
24                                                 Startable
25  {
26      /*** TODO */
27      YanceesRMIClient yancees;
28  
29      /*** TODO */
30      MessageProcessor[] processors;
31  
32      /*** common-logging logger */
33      private Log log = LogFactory.getLog(this.getClass());
34  
35      /***
36       * Creates a new YanceesMessageReceiver object.
37       *
38       * @param yancees TODO
39       * @param processors TODO
40       */
41      public YanceesMessageReceiver(YanceesRMIClient yancees,
42                                    MessageProcessor[] processors)
43      {
44          if(log.isDebugEnabled())
45          {
46              log.debug("processors: " + processors + " - " + processors.length);
47          }
48  
49          this.yancees = yancees;
50          this.processors = processors;
51      }
52  
53      /***
54       * TODO
55       *
56       * @param myEvents TODO
57       */
58      public void notify(EventInterface[] myEvents)
59      {
60          for(int i = 0; i < myEvents.length; i++)
61          {
62              notify(myEvents[i]);
63          }
64      }
65  
66      /***
67       * TODO
68       *
69       * @param myEvent TODO
70       */
71      public void notify(EventInterface myEvent)
72      {
73          if(myEvent instanceof YanceesEvent)
74          {
75              YanceesEvent ye = (YanceesEvent)myEvent;
76  
77              try
78              {
79                  Map msg = new HashMap();
80  
81                  for(Iterator it = ye.getAttributeNamesIterator(); it.hasNext();)
82                  {
83                      String name = (String)it.next();
84                      Object value = ye.get(name);
85  
86                      msg.put(name, value);
87                  }
88  
89                  receiveMessage(msg);
90              }
91              catch(Exception e)
92              {
93                  log.error("Error receiving msg", e);
94              }
95          }
96      }
97  
98      /***
99       * TODO
100      *
101      * @param msg TODO
102      */
103     public void receiveMessage(Map msg)
104     {
105         if(log.isDebugEnabled())
106         {
107             log.debug("receiveMessage(" + msg + ")");
108         }
109 
110         for(int i = 0; i < processors.length; ++i)
111         {
112             processors[i].processMessage(msg);
113         }
114     }
115 
116 
117 
118     /***
119      * TODO
120      */
121     public void start()
122     {
123         try
124         {
125             if(log.isDebugEnabled())
126             {
127                 log.debug("starting");
128             }
129 
130             GenericMessage msg = new GenericMessage("<subscription><filter><EQ><name>yancees.version</name>"
131                                                     + "<value type=\"yanceesString\">1.0</value></EQ></filter></subscription>");
132 
133             if(msg == null)
134             {
135                 System.exit(1);
136             }
137 
138             yancees.subscribe(msg, this);
139 
140             if(log.isDebugEnabled())
141             {
142                 log.debug("started");
143             }
144             
145             // call init method for all message processors.  allows processors to defer initialization until
146             // after the message receiver is fully initialized in order to avoid missed messages.
147             for(int i = 0; i < processors.length; ++i)
148             {
149                 processors[i].initializeMessageProcessor();
150             }
151         }
152         catch(Exception ex)
153         {
154             log.error("problem subscribing to yancees", ex);
155         }
156     }
157 
158     /***
159      * TODO
160      */
161     public void stop()
162     {
163         try
164         {
165             if(log.isDebugEnabled())
166             {
167                 log.debug("stopping");
168             }
169 
170             GenericMessage msg = new GenericMessage("<subscription><filter><EQ><name>yancees.version</name>"
171                                                     + "<value type=\"yanceesString\">1.0</value></EQ></filter></subscription>");
172 
173             if(msg == null)
174             {
175                 System.exit(1);
176             }
177 
178             yancees.unsubscribe(this, msg);
179 
180             if(log.isDebugEnabled())
181             {
182                 log.debug("stopped");
183             }
184         }
185         catch(Exception ex)
186         {
187             log.error("problem subscribing to yancees", ex);
188         }
189     }
190 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/SwirlProxy.html
##-----------------TITLE------------------------##
SwirlProxy xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.IOException;
4   import java.util.ArrayList;
5   import java.util.Enumeration;
6   import java.util.HashMap;
7   import java.util.Map;
8   import java.util.Collections;
9   import java.util.List;
10  import java.util.Iterator;
11  
12  import javax.servlet.ServletConfig;
13  import javax.servlet.ServletContext;
14  import javax.servlet.ServletException;
15  import javax.servlet.http.HttpServlet;
16  import javax.servlet.http.HttpServletRequest;
17  import javax.servlet.http.HttpServletResponse;
18  
19  import org.apache.commons.logging.Log;
20  import org.apache.commons.logging.LogFactory;
21  import org.picocontainer.PicoContainer;
22  
23  /***
24   * This is the hub of the servlet application.  See the service method for more
25   * details
26   *
27   * @author bpillet
28   */
29  public class SwirlProxy extends HttpServlet
30  {
31      /*** TODO */
32      private static final long serialVersionUID = 1L;
33  
34      /*** the logger for this class */
35      private Log log = LogFactory.getLog(this.getClass());
36  
37      /*** the peerManager for the web application */
38      private PeerManager peerMan;
39  
40      /*** the configuration for this servlet */
41      private ServletConfig config;
42  
43      /*** the context for this servlet */
44      private ServletContext context;
45  
46      /***
47       * DOCUMENT ME!
48       *
49       * @param conf the configuration for this servlet
50       *
51       * @throws ServletException see spec
52       */
53      public void init(final ServletConfig conf) throws ServletException
54      {
55          super.init(conf);
56          this.config = conf;
57          this.context = config.getServletContext();
58  
59          if(log.isDebugEnabled())
60          {
61              log.debug("servlet.name: " + config.getServletName());
62          }
63  
64          if(log.isDebugEnabled())
65          {
66              log.debug("servlet.context: " + context.getServletContextName());
67          }
68      }
69  
70      /***
71       * Handles all requests to the /swirl servletPath and servers as the entry
72       * point for each request
73       *
74       * @param req the request from the client
75       * @param resp the response to the client
76       *
77       * @throws ServletException if there's a problem with the commands
78       * @throws IOException if there's a problem with the network
79       */
80      // a queue to make sure the commands over the same URL path are executed FIFO
81      Map		waitersOnURI = Collections.synchronizedMap(new HashMap());
82      protected void service(final HttpServletRequest req,
83                             final HttpServletResponse resp)
84                      throws ServletException,
85                             IOException
86      {
87          if(swirl.workspace.common.NetUtils.isRequestFromMe(req))
88          {
89              String method = req.getMethod();
90  
91              log.info("[" + method + "] " + req.getRequestURI()
92                       + " servletPath: " + req.getServletPath() + " pathInfo: "
93                       + req.getPathInfo() + "   pathTranslated: "
94                       + req.getPathTranslated());
95  
96              logHeaders(req);
97  
98              String queryString = req.getQueryString();
99  
100             if(log.isDebugEnabled())
101 	        {
102             	log.debug("queryString: " + queryString);
103 	            log.debug("authType: " + req.getAuthType());
104 	            log.debug("remoteUser: " + req.getRemoteUser());
105 	            log.debug("userPrincipal: " + req.getUserPrincipal());
106 	        }
107 
108             //HostPathCodec codec = new HostPathCodecImpl(req.getServletPath());
109             //HostPathCodec codec = new QuerystringCodec(req.getServletPath(), queryString);
110             HostPathCodec codec = new LookupCodec(req, context);
111 
112             String path = codec.decodePath();
113             String host = codec.decodeHost();
114             
115             if(log.isDebugEnabled())
116 	        {
117             	log.debug("decodedPath: " + path);
118             	log.debug("decodedHost: " + host);
119 	        }
120             
121             PeerManager peerManager = getPeerManager();
122 
123             SwirlCommand command = null;
124             int status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
125 
126             if(method.equals("PROPFIND"))
127             {
128                 command = new AggregateCommand(req, resp, host, path,
129                                                peerManager, codec);
130             }
131             else if(method.equals("PUT"))
132             {
133                 command = new PutCommand(req, resp, host, path, peerManager);
134             }
135             else if(method.equals("PROPPATCH"))
136             {
137                 command = new ProppatchCommand(req, resp, host, path,
138                                                peerManager);
139             }
140             else if(method.equals("MKCOL"))
141             {
142                 command = new MkcolCommand(req, resp, host, path, peerManager);
143             }
144             else if(method.equals("COPY"))
145             {
146                 command = new CopyCommand(req, resp, host, path, peerManager);
147             }
148             else if(method.equals("MOVE"))
149             {
150                 command = new MoveCommand(req, resp, host, path, peerManager);
151             }
152             else if(method.equals("LOCK"))
153             {
154                 command = new LockCommand(req, resp, host, path, peerManager);
155             }
156             else if(method.equals("UNLOCK"))
157             {
158                 command = new UnlockCommand(req, resp, host, path, peerManager);
159             }
160             else if(method.equals("OPTIONS"))
161             {
162                 command = new OptionsCommand(req, resp, host, path, peerManager);
163             }
164             else if(method.equals("GET"))
165             {
166                 command = new GetCommand(req, resp, host, path, peerManager);
167             }
168             else if(method.equals("HEAD"))
169             {
170                 command = new HeadCommand(req, resp, host, path, peerManager);
171             }
172             else if(method.equals("DELETE"))
173             {
174                 command = new DeleteCommand(req, resp, host, path, peerManager);
175             }
176             else
177             {
178                 log.error("unsupported method: " + method);
179             }
180 
181             List waiters = null;
182             if(command != null)
183             {
184                 try
185                 {
186                     String uri = req.getRequestURI();
187                     if (waitersOnURI.containsKey(uri)) {
188                         waiters = (List)waitersOnURI.get(uri);
189                     }
190                     else {
191                         waiters = Collections.synchronizedList(new ArrayList());
192                         waitersOnURI.put(uri, waiters);
193                     }
194                     synchronized(waiters) {
195 	                    while (!waiters.isEmpty()) {
196 	                        {
197 	                        	String sl = ("Waiting on URI: " + uri + " ");
198 	                        	List w = new ArrayList(waiters);
199 	                        	for (Iterator i = w.iterator(); i.hasNext();) {
200 	                        	    SwirlCommand c = (SwirlCommand)i.next();
201 	                        	    sl += ("," + c.toString()) ;
202 	                        	}
203 	                        	if(log.isDebugEnabled())
204 	                	        {
205 	                        		log.debug(sl);
206 	                	        }
207 	                        }
208 	                        waiters.wait();
209 	                    }
210 	                    waiters.add(command);
211 	                    status = command.execute();
212 	                    waiters.remove(command);
213 	                    waiters.notifyAll();
214                     }
215                 }
216                 catch(Exception ex)
217                 {
218                     throw new ServletException(ex);
219                 }
220             }
221 
222             resp.setStatus(status);
223 
224             // if(log.isDebugEnabled())
225             {
226             	if(log.isDebugEnabled())
227     	        {
228             		log.debug("returned with status: " + status + " [" + method + "] " + req.getRequestURI()
229 	                        + " servletPath: " + req.getServletPath() + " pathInfo: "
230 	                        + req.getPathInfo() + "   pathTranslated: "
231 	                        + req.getPathTranslated());
232     	        }
233             }
234         }
235         else
236         {
237             // request is not from this machine, deny it
238             resp.sendError(HttpServletResponse.SC_FORBIDDEN,
239                            "Swirl request made from unathorized host.");
240         }
241     }
242 
243     /***
244      * Extracts the peerManager from the application scope context by locating
245      * an object with a key that ends with "swirl.pico" and asking that
246      * container for a peerManager object.  The context should be populated by
247      * the Configuration servlet
248      *
249      * @return the peerManager for this web application
250      */
251     private PeerManager getPeerManager()
252     {
253         if(peerMan == null)
254         {
255             for(Enumeration attrs = context.getAttributeNames();
256                 attrs.hasMoreElements();)
257             {
258                 String attr = (String)attrs.nextElement();
259 
260                 if(log.isDebugEnabled())
261                 {
262                     log.debug("context Attribute: " + attr + " -> "
263                               + context.getAttribute(attr));
264                 }
265 
266                 if(attr.endsWith("swirl.pico"))
267                 {
268                     PicoContainer swirlServer = (PicoContainer)config.getServletContext()
269                                                                      .getAttribute(attr);
270 
271                     peerMan = (PeerManager)swirlServer
272                               .getComponentInstanceOfType(PeerManager.class);
273                     if(log.isDebugEnabled())
274         	        {
275                     	log.debug("peerManager: " + peerMan);
276         	        }
277                 }
278             }
279         }
280 
281         return peerMan;
282     }
283 
284     /***
285      * Logs the headers sent from the client
286      *
287      * @param req the request from the client
288      */
289     private void logHeaders(final HttpServletRequest req)
290     {
291         StringBuffer buffer = new StringBuffer();
292 
293         for(Enumeration names = req.getHeaderNames(); names.hasMoreElements();)
294         {
295             String name = (String)names.nextElement();
296 
297             buffer.append(name + ": ");
298 
299             for(Enumeration values = req.getHeaders(name);
300                 values.hasMoreElements();)
301             {
302                 String value = (String)values.nextElement();
303 
304                 buffer.append(value + ", ");
305             }
306 
307             buffer.append('\n');
308         }
309 
310         if(log.isDebugEnabled())
311         {
312             log.debug("headers:\n" + buffer);
313         }
314     }
315 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/SwirlNodeFilter.html
##-----------------TITLE------------------------##
SwirlNodeFilter xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on 2004-8-2
3    */
4   package swirl.workspace.viz.pie;
5   
6   import org.w3c.dom.Element;
7   import org.w3c.dom.Node;
8   import org.w3c.dom.traversal.NodeFilter;
9   
10  /***
11   * DOCUMENT ME!
12   *
13   * @author Xianghua Ding
14   */
15  
16  //******************************************************
17  public class SwirlNodeFilter implements NodeFilter
18  {
19      /**
20       * TODO
21       *
22       * @param node TODO
23       *
24       * @return TODO
25       */
26      public short acceptNode(Node node)
27      {
28          Element candidate = (Element)node;
29          String name = candidate.getNodeName();
30  
31          if(name.equals("svg"))
32          {
33              return FILTER_ACCEPT;
34          }
35          else if(name.equals("rect"))
36          {
37              return FILTER_ACCEPT;
38          }
39          else if(name.equals("circle"))
40          {
41              return FILTER_ACCEPT;
42          }
43          else if(name.equals("path"))
44          {
45              return FILTER_ACCEPT;
46          }
47  
48          return FILTER_SKIP;
49      }
50  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/SwirlSecurityWrapper.html
##-----------------TITLE------------------------##
SwirlSecurityWrapper xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   import java.lang.reflect.InvocationTargetException;
4   import java.lang.reflect.Method;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   import org.picocontainer.Startable;
9   
10  /***
11   * DOCUMENT ME!
12   *
13   * @author bpillet
14   */
15  public class SwirlSecurityWrapper implements SwirlSecurity,
16                                               Startable
17  {
18      /*** TODO */
19      private static final long serialVersionUID = 1L;
20  
21      /*** TODO */
22      Method getSecurityLevel;
23  
24      /*** TODO */
25      Method setSecurityLevel;
26  
27      /*** TODO */
28      Object delegate;
29  
30      /*** the logger for this class */
31      private Log log = LogFactory.getLog(this.getClass());
32  
33      /***
34       * Creates a new SwirlSecurityWrapper object.
35       *
36       * @param del TODO
37       */
38      public SwirlSecurityWrapper(Object del)
39      {
40          this.delegate = del;
41  
42          if(log.isDebugEnabled())
43          {
44              log.debug("delegate: " + delegate);
45          }
46  
47          Method[] methods = del.getClass().getDeclaredMethods();
48  
49          for(int i = 0; i < methods.length; ++i)
50          {
51              if(log.isDebugEnabled())
52              {
53                  log.debug("i: " + methods[i]);
54              }
55  
56              if(methods[i].getName().equals("setSecurityLevel"))
57              {
58                  setSecurityLevel = methods[i];
59              }
60              else if(methods[i].getName().equals("getSecurityLevel"))
61              {
62                  getSecurityLevel = methods[i];
63              }
64          }
65      }
66  
67      /***
68       * TODO
69       *
70       * @param path TODO
71       * @param role TODO
72       * @param securityLevel TODO
73       *
74       * @throws UnsupportedOperationException TODO
75       */
76      public void setSecurityLevel(String path, String role, String securityLevel)
77                            throws UnsupportedOperationException
78      {
79          try
80          {
81              setSecurityLevel.invoke(delegate,
82                                      new Object[]{path, role, securityLevel});
83          }
84          catch(IllegalArgumentException e)
85          {
86              log.error(e, e);
87          }
88          catch(IllegalAccessException e)
89          {
90              log.error(e, e);
91          }
92          catch(InvocationTargetException e)
93          {
94              log.error(e, e);
95          }
96      }
97  
98      /***
99       * TODO
100      *
101      * @param path TODO
102      * @param role TODO
103      *
104      * @return TODO
105      */
106     public String getSecurityLevel(String path, String role)
107     {
108         try
109         {
110             return (String)getSecurityLevel.invoke(delegate,
111                                                    new Object[]{path, role});
112         }
113         catch(IllegalArgumentException e)
114         {
115             log.error(e, e);
116         }
117         catch(IllegalAccessException e)
118         {
119             log.error(e, e);
120         }
121         catch(InvocationTargetException e)
122         {
123             log.error(e, e);
124         }
125 
126         return "";
127     }
128 
129     /***
130      * TODO
131      */
132     public void start()
133     {
134         if(log.isDebugEnabled())
135         {
136             log.debug("started");
137         }
138     }
139 
140     /***
141      * TODO
142      */
143     public void stop()
144     {
145         if(log.isDebugEnabled())
146         {
147             log.debug("stopped");
148         }
149     }
150 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/ProppatchCommand.html
##-----------------TITLE------------------------##
ProppatchCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.IOException;
4   
5   import javax.servlet.http.HttpServletRequest;
6   import javax.servlet.http.HttpServletResponse;
7   
8   import org.apache.commons.httpclient.HttpMethod;
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  import org.apache.webdav.lib.methods.PropPatchMethod;
12  
13  /***
14   * Implements the PROPPATCH method
15   *
16   * @author bpillet
17   */
18  public class ProppatchCommand extends ProxyCommand
19  {
20      /*** commons-logging log that maps to this Command */
21      private Log log = LogFactory.getLog(this.getClass());
22  
23      /***
24       * See super
25       *
26       * @param req see super
27       * @param resp see super
28       * @param host see super
29       * @param path see super
30       * @param peerManager see super
31       */
32      public ProppatchCommand(final HttpServletRequest req,
33                              final HttpServletResponse resp, final String host,
34                              final String path, final PeerManager peerManager)
35      {
36          super(req, resp, host, path, peerManager);
37      }
38  
39      /***
40       * see super
41       *
42       * @param url the url to proxy to
43       *
44       * @return a new PropPatchMethod
45       */
46      public HttpMethod createMethod(final String url)
47      {
48          PropPatchMethod method = new PropPatchMethod(url);
49  
50          try
51          {
52              method.setRequestBody(getRequest().getInputStream());
53          }
54          catch(IOException e)
55          {
56              log.error(e, e);
57          }
58  
59          return method;
60      }
61  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SharingLevel.html
##-----------------TITLE------------------------##
SharingLevel xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 19, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   
9   /***
10   * DOCUMENT ME!
11   *
12   * @author dingx
13   */
14  public class SharingLevel
15  {
16      /*** TODO */
17      public static int SHARING_LEVEL = 4; //the highest sharing level
18      
19      public static final String SHARING_PROPERTY_NAME = "sharingDegree"; 
20  
21      /*** TODO */
22      int value;
23  
24      /*** TODO */
25      private Log log = LogFactory.getLog(this.getClass());
26  
27      /***
28       * Creates a new SharingLevel object.
29       */
30      public SharingLevel()
31      {
32          value = 0;
33      }
34  
35      /***
36       * Creates a new SharingLevel object.
37       *
38       * @param lev TODO
39       */
40      public SharingLevel(int lev)
41      {
42          value = lev;
43      }
44  
45      /***
46       * DOCUMENT ME!
47       *
48       * @param level
49       */
50      public void setLevelValue(int level)
51      {
52          value = level;
53      }
54  
55      /***
56       * DOCUMENT ME!
57       *
58       * @return
59       */
60      public int getValue()
61      {
62          return value;
63      }
64  
65      public String toString(){ return super.toString() + ": " + value; }
66      /***
67       * DOCUMENT ME!
68       *
69       * @param level
70       *
71       * @return TODO
72       */
73      public boolean equals(SharingLevel level)
74      {
75          if(log.isDebugEnabled())
76          {
77              log.debug("the value is " + value);
78          }
79  
80          if(log.isDebugEnabled())
81          {
82              log.debug("the level is " + level.getValue());
83          }
84  
85          if(value == level.getValue())
86          {
87              return true;
88          }
89          else
90          {
91              return false;
92          }
93      }
94  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/YanceesConfig.html
##-----------------TITLE------------------------##
YanceesConfig xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.io.File;
4   
5   /***
6    * DOCUMENT ME!
7    *
8    * @author bpillet Wrapper around an XML File
9    */
10  public interface YanceesConfig
11  {
12      /***
13       * TODO
14       *
15       * @return TODO
16       */
17      public File getConfig();
18  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/DocumentLogger.html
##-----------------TITLE------------------------##
DocumentLogger xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Jul 29, 2004
3    */
4   package swirl.workspace.common;
5   
6   import java.io.ByteArrayOutputStream;
7   import java.io.IOException;
8   import java.io.OutputStream;
9   import java.io.PrintWriter;
10  
11  import javax.xml.transform.Result;
12  import javax.xml.transform.Source;
13  import javax.xml.transform.Transformer;
14  import javax.xml.transform.TransformerFactory;
15  import javax.xml.transform.dom.DOMSource;
16  import javax.xml.transform.stream.StreamResult;
17  
18  import org.apache.commons.logging.Log;
19  import org.apache.commons.logging.LogFactory;
20  import org.dom4j.io.OutputFormat;
21  import org.dom4j.io.XMLWriter;
22  import org.w3c.dom.Document;
23  
24  /***
25   * DOCUMENT ME!
26   *
27   * @author dingx
28   */
29  public final class DocumentLogger
30  {
31      /*** logger for this class */
32      private static Log myLog = LogFactory.getLog(DocumentLogger.class);
33  
34      /***
35       * Hiding the constructor since this is a bunch of utils
36       */
37      private DocumentLogger(){}
38  
39      /***
40       * Write an XML document out to the log with a message
41       *
42       * @param log the log to output to
43       * @param msg the message to accompany the document
44       * @param doc the document to log
45       */
46      public static void logDocument(final Log log, final String msg,
47                                     final org.dom4j.Document doc)
48      {
49          ByteArrayOutputStream output = new ByteArrayOutputStream();
50  
51          writeDocument(doc, output);
52  
53          if(log.isDebugEnabled())
54          {
55              log.debug(msg + "  " + output.toString());
56          }
57      }
58  
59      /***
60       * Write an XML document out to the log
61       *
62       * @param log the log to output to
63       * @param doc the document to log
64       */
65      public static void logDocument(final Log log, final Document doc)
66      {
67          logDocument(log, "", doc);
68      }
69  
70      /***
71       * Write an XML document out to the log with a message
72       *
73       * @param log the log to output to
74       * @param msg the message to accompany the document
75       * @param doc the document to log
76       */
77      public static void logDocument(final Log log, final String msg,
78                                     final Document doc)
79      {
80          ByteArrayOutputStream output = new ByteArrayOutputStream();
81  
82          writeDocument(doc, output);
83  
84          if(log.isDebugEnabled())
85          {
86              log.debug(msg + "  " + output.toString());
87          }
88      }
89  
90      /***
91       * Utility method to write the contents of an XML document to an
92       * outputstream. This method utilizes the Transformer class
93       *
94       * @param body the document to output
95       * @param stream the stream to write to
96       */
97      public static void writeDocument(final Document body,
98                                       final OutputStream stream)
99      {
100         if(body != null)
101         {
102             PrintWriter out = new PrintWriter(stream, true);
103 
104             try
105             {
106                 Source source = new DOMSource(body);
107                 Result result = new StreamResult(out);
108                 Transformer xformer = TransformerFactory.newInstance()
109                                                         .newTransformer();
110 
111                 xformer.setOutputProperty("{http://www.w3.org/1999/XSL/Transform}indent",
112                                           "yes");
113                 xformer.transform(source, result);
114             }
115             catch(Exception e)
116             {
117                 myLog.error(e, e);
118             }
119         }
120     }
121 
122     /***
123      * Write the document body out to a stream
124      *
125      * @param body the document to write
126      * @param stream the stream to write to
127      */
128     public static void writeDocument(final org.dom4j.Document body,
129                                      final OutputStream stream)
130     {
131         if(body != null)
132         {
133             PrintWriter out = new PrintWriter(stream, true);
134             OutputFormat format = OutputFormat.createPrettyPrint();
135             XMLWriter writer = new XMLWriter(out, format);
136 
137             try
138             {
139                 writer.write(body);
140                 writer.flush();
141             }
142             catch(IOException ex)
143             {
144                 myLog.error("trouble writing doc to stream ", ex);
145             }
146         }
147     }
148 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/FileNameAppearing.html
##-----------------TITLE------------------------##
FileNameAppearing xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 31, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   import org.w3c.dom.Element;
9   import org.w3c.dom.NamedNodeMap;
10  
11  /***
12   * Makes sure the filename appears for a dot in the view
13   *
14   * @author bpillet
15   */
16  public class FileNameAppearing implements Runnable
17  {
18      /*** TODO */
19      private Element fe;
20  
21      /*** TODO */
22      private Log log = LogFactory.getLog(this.getClass());
23  
24      /*** TODO */
25      private boolean showName;
26  
27      /***
28       * Creates a new FileNameAppearing object.
29       *
30       * @param e TODO
31       * @param showFileName TODO
32       */
33      public FileNameAppearing(Element e, boolean showFileName)
34      {
35          this.fe = (Element)e.getNextSibling();
36          this.showName = showFileName;
37      }
38  
39      /***
40       * TODO
41       */
42      public void run()
43      {
44          if(log.isDebugEnabled())
45          {
46              log.debug("filename appearing is called");
47          }
48  
49          NamedNodeMap map = fe.getAttributes();
50          String value = map.getNamedItem("opacity").getNodeValue();
51  
52          map.getNamedItem("opacity").setNodeValue(showName ? "1" : "0");
53      }
54  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/slide/FileDescriptorsStore.html
##-----------------TITLE------------------------##
FileDescriptorsStore xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 27, 2004
3    */
4   package swirl.workspace.slide;
5   
6   import org.apache.slide.store.LockStore;
7   import org.apache.slide.store.NodeStore;
8   import org.apache.slide.store.RevisionDescriptorStore;
9   import org.apache.slide.store.RevisionDescriptorsStore;
10  import org.apache.slide.store.SecurityStore;
11  import org.apache.slide.store.txfile.TxXMLFileDescriptorsStore;
12  
13  /***
14   * DOCUMENT ME!
15   *
16   * @author bpillet
17   */
18  public class FileDescriptorsStore extends TxXMLFileDescriptorsStore
19      implements NodeStore,
20                 LockStore,
21                 RevisionDescriptorsStore,
22                 RevisionDescriptorStore,
23                 SecurityStore
24  {
25      /*** TODO */
26      protected static final String LOG_CHANNEL = FileDescriptorsStore.class
27                                                  .getName();
28  
29  
30  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/actions/QuitApplicationAction.html
##-----------------TITLE------------------------##
QuitApplicationAction xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie.actions;
2   
3   import java.awt.AWTEvent;
4   import java.awt.event.ActionEvent;
5   import java.awt.event.KeyEvent;
6   import java.awt.event.WindowEvent;
7   
8   import javax.swing.ImageIcon;
9   import javax.swing.JFrame;
10  import javax.swing.KeyStroke;
11  
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  
15  
16  /***
17   * @author bpillet
18   */
19  public class QuitApplicationAction extends SVGPieAction {
20  
21  	private static final long serialVersionUID = 1L;
22  	private Log log = LogFactory.getLog(this.getClass());
23  	private JFrame root;
24  	
25  	public QuitApplicationAction(JFrame _root)
26  	{
27  	       putValue(ACTION_COMMAND_KEY, "QuitAction");
28  
29  	        putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_Q));
30  	        
31  	        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.ALT_MASK));
32  
33  	        //        The key used to determine the command string for the ActionEvent that
34  	        // will be created when an Action is going to be notified as the result
35  	        // of residing in a Keymap associated with a JComponent.
36  	        putValue(LONG_DESCRIPTION,
37  	                 "Quits the application");
38  
39  	        //        The key used for storing a longer description for the action, could
40  	        // be used for context-sensitive help.
41  	        //putValue(MNEMONIC_KEY, new Character('S'));
42  	        //        The key used for storing an int key code to be used as the mnemonic
43  	        // for the action.
44  	        putValue(NAME, "Quit");
45  
46  	        //        The key used for storing the name for the action, used for a menu or
47  	        // button.
48  	        putValue(SHORT_DESCRIPTION, "Quits the application");
49  
50  	        //        The key used for storing a short description for the action, used for
51  	        // tooltip text.
52  	        putValue(SMALL_ICON, new ImageIcon("resources/quit.gif"));
53  
54  	        //		The key used for storing a small icon for the action, used for
55  	        // toolbar buttons
56  	        root = _root;
57  	}
58  	
59  	public void actionPerformed(ActionEvent e) {
60  		if(log.isDebugEnabled())
61          {
62  			log.debug("Quit event performed - ActionEvent: "+e.getActionCommand()+" - getSource: " + e.getSource());
63  			log.debug("Quit event performed - Root: " + root.getClass());
64          }
65  		root.dispatchEvent((AWTEvent) new WindowEvent(root, WindowEvent.WINDOW_CLOSING));
66  		root.dispatchEvent((AWTEvent) new WindowEvent(root, WindowEvent.WINDOW_CLOSED));
67  	}
68  
69  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/Model.html
##-----------------TITLE------------------------##
Model xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 19, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import java.awt.Color;
7   import java.io.File;
8   import java.util.Map;
9   import java.util.Vector;
10  
11  import org.picocontainer.Startable;
12  import org.w3c.dom.Document;
13  
14  import swirl.workspace.Peer;
15  import swirl.workspace.PeerManagerListener;
16  import swirl.workspace.messages.MessageProcessor;
17  import swirl.workspace.viz.pie.Coordinate;
18  import swirl.workspace.viz.pie.DotElement;
19  import swirl.workspace.viz.pie.FileElement;
20  
21  /***
22   * DOCUMENT ME!
23   *
24   * @author dingx
25   */
26  public interface Model extends Startable,
27                                 MessageProcessor,
28                                 PeerManagerListener
29  {
30      /***
31       * TODO
32       *
33       * @param peerId TODO
34       *
35       * @return TODO
36       */
37      public String getCurrentPath(String peerId);
38  
39      /***
40       * TODO
41       *
42       * @return TODO
43       */
44      public Map getCurrentPath(); // for all peers
45  
46      /***
47       * TODO
48       *
49       * @return TODO
50       */
51      public FileElement[] getFiles();
52  
53      /***
54       * TODO
55       *
56       * @param peerId TODO
57       * @param path TODO
58       *
59       * @return TODO
60       */
61      public FileElement[] getFiles(String peerId, String path);
62  
63      /***
64       * TODO
65       *
66       * @param peerId TODO
67       *
68       * @return TODO
69       */
70      public FileElement[] getFiles(String peerId);
71  
72      /***
73       * TODO
74       *
75       * @param peerId TODO
76       *
77       * @return TODO
78       */
79      public String getParentPath(String peerId);
80  
81      /***
82       * TODO
83       *
84       * @param peerId TODO
85       * @param path TODO
86       */
87      public void setPath(String peerId, String path);
88  
89      /***
90       * TODO
91       *
92       * @param peerID TODO
93       *
94       * @return TODO
95       */
96      public Peer getPeer(String peerID);
97  
98      /***
99       * TODO
100      *
101      * @return TODO
102      */
103     public int getPeerNumber();
104 
105     /***
106      * TODO
107      *
108      * @return TODO
109      */
110     public Peer[] getPeers();
111 
112     /***
113      * TODO
114      *
115      * @param fe TODO
116      * @param sharingDegree TODO
117      */
118     public void setSharingDegree(final FileElement fe,
119                                  final SharingLevel sharingDegree);
120 
121     /***
122      * TODO
123      *
124      * @param peerId TODO
125      *
126      * @return TODO
127      */
128     public Color getUserColor(String peerId);
129 
130     /***
131      * TODO
132      *
133      * @param listener TODO
134      */
135     public void addModelChangeListener(ModelListener listener);
136 
137      /***
138      * TODO
139      *
140      * @param file TODO
141      */
142     public void create(FileElement file);
143 
144     /***
145      * TODO
146      *
147      * @param file TODO
148      */
149     public void delete(FileElement file);
150 
151     /***
152      * TODO
153      */
154     public void exportFiles(final Document doc);
155 
156     /***
157      * TODO
158      *
159      * @param peerId TODO
160      */
161     public void gotoParentPath(String peerId);
162 
163     /***
164      * TODO
165      *
166      * @param file TODO
167      */
168     public void importFiles(final Vector files);
169     
170     /***
171      * TODO
172      *
173      * @param file TODO
174      */
175     public void importFiles(final Vector files, Coordinate coord, boolean inPrivateSpace);
176 
177     /***
178      * TODO
179      *
180      * @param file TODO
181      */
182     public void launch(FileElement file);
183 
184     /***
185      * TODO
186      *
187      * @param listener TODO
188      */
189     public void removeModelChangeListener(ModelListener listener);
190 
191 	/***
192 	 * @param fileElement
193 	 * @param f
194 	 */
195 	public void getRemoteFile(FileElement fileElement, File f);
196 
197 	/***
198 	 * @return
199 	 */
200 	public boolean isFilesChanged();
201 
202 	/***
203 	 * @param selectedFile
204 	 */
205 	public boolean isFileChanged(FileElement selectedFile);
206 
207 	/***
208 	 * @param selectedFile
209 	 */
210 	public void exportFile(FileElement selectedFile);
211 
212 	/***
213 	 * @param selectedNode
214 	 */
215 	public void setDotLocation(DotElement selectedNode);
216 	
217 	//combine set sharing degree and set location
218 	public void setPositionInfo(DotElement selectedNode, SharingLevel newSharingLevel);
219 	
220 	public void purgeLocalRepository();
221 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/FileLauncher.html
##-----------------TITLE------------------------##
FileLauncher xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 25, 2004
3    */
4   package swirl.workspace.common;
5   
6   import java.io.IOException;
7   
8   /***
9    * DOCUMENT ME!
10   *
11   * @author bpillet
12   */
13  public interface FileLauncher
14  {
15      /***
16       * Launch a file without a known mime type
17       *
18       * @param url the file to launch
19       *
20       * @return the process
21       *
22       * @throws IOException if there's a problem with the console
23       */
24      Process launch(String url) throws IOException;
25  
26      /***
27       * Launch a file with a known mime type
28       *
29       * @param url the file to launch
30       * @param mime the mimetype of the file to launch
31       *
32       * @return the process
33       *
34       * @throws IOException if there's a problem with the console
35       */
36      Process launch(String url, String mime) throws IOException;
37  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PeerTableModel.html
##-----------------TITLE------------------------##
PeerTableModel xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.swing.table.AbstractTableModel;
4   
5   import org.apache.commons.logging.Log;
6   import org.apache.commons.logging.LogFactory;
7   
8   import swirl.workspace.viz.Model;
9   
10  /***
11   * An adapter between the swirl model and a JTable
12   *
13   * @author bpillet
14   */
15  public class PeerTableModel extends AbstractTableModel
16      implements PeerManagerListener
17  {
18      /*** TODO */
19      private static final long serialVersionUID = 1L;
20  
21      /*** this class's logger */
22      private Log log = LogFactory.getLog(this.getClass());
23  
24      /*** the underlying swirl model */
25      private Model model;
26  
27      /*** the columns of the table */
28      private String[] columns = {"User", "Host"};
29  
30      /***
31       * Initialize this table model
32       *
33       * @param mod the underlying Swirl model to use
34       */
35      public PeerTableModel(final Model mod)
36      {
37          this.model = mod;
38      }
39  
40      /***
41       * How many columns there are
42       *
43       * @return columns.length
44       */
45      public int getColumnCount()
46      {
47          return columns.length;
48      }
49  
50      /***
51       * Get each of the column names
52       *
53       * @param column the column to get the name of
54       *
55       * @return columns[column]
56       */
57      public String getColumnName(final int column)
58      {
59          return columns[column];
60      }
61  
62      /***
63       * How many peers there are
64       *
65       * @return peers.length
66       */
67      public int getRowCount()
68      {
69          return model.getPeers().length;
70      }
71  
72      /***
73       * Overriden from parent to populate the table
74       *
75       * @param rowIndex the row to get
76       * @param columnIndex the column to get
77       *
78       * @return for column 0, the username; for column 1, the peer.uniqueId
79       */
80      public Object getValueAt(final int rowIndex, final int columnIndex)
81      {
82          if(rowIndex < model.getPeers().length)
83          {
84              if(columnIndex == 0)
85              {
86                  return model.getPeers()[rowIndex].getUserName();
87              }
88              else
89              {
90                  return model.getPeers()[rowIndex].getUniqueID();
91              }
92          }
93  
94          return "";
95      }
96  
97      /***
98       * Implemented from interface to update the gui when a peer joins
99       *
100      * @param peer the peer that joined
101      */
102     public void peerJoined(final Peer peer)
103     {
104         fireTableDataChanged();
105     }
106 
107     /***
108      * Implemented from interface to update the gui when a peer leaves
109      *
110      * @param peer the peer that left
111      */
112     public void peerLeft(final Peer peer)
113     {
114         fireTableDataChanged();
115     }
116 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/BaseFileLauncher.html
##-----------------TITLE------------------------##
BaseFileLauncher xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 25, 2004
3    */
4   package swirl.workspace.common;
5   
6   import java.io.IOException;
7   import java.util.Properties;
8   
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  
12  import swirl.workspace.PeerManager;
13  
14  /***
15   * DOCUMENT ME!
16   *
17   * @author bpillet
18   */
19  public abstract class BaseFileLauncher implements FileLauncher
20  {
21      /*** the logger for this class */
22      private Log log = LogFactory.getLog(this.getClass());
23  
24      /*** the mapping from extensions to mimetypes */
25      private Properties extToMime = null;
26  
27      /*** the mapping from mime types to commandlines */
28      private Properties mimeToCmd = null;
29      
30      /***
31       * Get the commandline for a specific mime type
32       *
33       * @param mime the mime type to get the command for
34       *
35       * @return the command
36       */
37      public String getCommand(final String mime)
38      {
39          if(mimeToCmd == null)
40          {
41              mimeToCmd = getMimeToCmd();
42          }
43  
44          if(log.isDebugEnabled())
45          {
46          	if(log.isDebugEnabled())
47  	        {
48          		log.debug("trying to get cmd for mime: " + mime);
49  	        }
50          }
51  
52          String ret = mimeToCmd.getProperty(mime);
53  
54          if(ret != null)
55          {
56              return ret;
57          }
58          else
59          {
60              return mimeToCmd.getProperty("default");
61          }
62      }
63  
64      /***
65       * Get the extension for a file name
66       *
67       * @param file the name of the file to extract from
68       *
69       * @return the extension of the file
70       */
71      public String getExtension(final String file)
72      {
73          if(log.isDebugEnabled())
74          {
75              log.debug("file: " + file);
76          }
77  
78          String temp = file;
79  
80          //first trim the path off
81          if(temp.lastIndexOf('//') != -1)
82          {
83              temp = temp.substring(temp.lastIndexOf('//'));
84          }
85  
86          if(temp.lastIndexOf('/') != -1)
87          {
88              temp = temp.substring(temp.lastIndexOf('/'));
89          }
90  
91          if(log.isDebugEnabled())
92          {
93              log.debug("file without path: " + temp);
94          }
95  
96          // then trim any . at the beginning
97          if(temp.startsWith("."))
98          {
99              temp = temp.substring(1);
100         }
101 
102         if(log.isDebugEnabled())
103         {
104             log.debug("file without leading dot: " + temp);
105         }
106 
107         // then get the last . and stuff
108         if(temp.indexOf('.') != -1)
109         {
110             return temp.substring(temp.lastIndexOf('.'));
111         }
112         else
113         {
114             return "";
115         }
116     }
117 
118     /***
119      * Get the mime type for a specific extension
120      *
121      * @param extension the extension to map from
122      *
123      * @return the mime type of the file
124      */
125     public String getMime(final String extension)
126     {
127         if(extToMime == null)
128         {
129             extToMime = getExtToMime();
130         }
131 
132         return extToMime.getProperty(extension, "");
133     }
134 
135     /***
136      * Launch a file without a known mime type
137      *
138      * @param url the file to launch
139      *
140      * @return the process
141      *
142      * @throws IOException if there's a problem with the console
143      */
144     public Process launch(final String url) throws IOException
145     {
146         return launch(url, getMime(getExtension(url)));
147     }
148 
149     /***
150      * Launch a file with a known mime type
151      *
152      * @param url the file to launch
153      * @param mime the mimetype of the file to launch
154      *
155      * @return the process
156      *
157      * @throws IOException if there's a problem with the console
158      */
159     public Process launch(final String url, final String mime)
160                    throws IOException
161     {
162         if(log.isDebugEnabled())
163         {
164             log.debug("launch(" + url + ", " + mime + ")");
165         }
166 
167         String cmd = getCommand(mime);
168 
169         if(log.isDebugEnabled())
170         {
171             log.debug("cmd: " + cmd + "  url: " + url);
172         }
173 
174         String temp = url;
175 
176         //first trim the path off
177         if(temp.lastIndexOf('//') != -1)
178         {
179             temp = temp.substring(temp.lastIndexOf('//'));
180         }
181 
182         if(temp.lastIndexOf('/') != -1)
183         {
184             temp = temp.substring(temp.lastIndexOf('/'));
185         }
186         
187         temp = "http://" + PeerManager.getLocalUserID() + "/swirl" + temp;
188 
189         if(log.isDebugEnabled())
190         {
191             log.debug("final url: " + temp);
192         }
193         
194         cmd = cmd.replaceAll("%1", temp);
195         // cmd = cmd.replaceAll("%1", url);
196         // test
197         
198         if(log.isDebugEnabled())
199         {
200             log.debug("new cmd: " + cmd + "  url: " + url);
201         }
202 
203         return Runtime.getRuntime().exec(cmd);
204     }
205 
206     /***
207      * get the Properties configuration that maps extensions to mime types
208      *
209      * @return the mapping
210      */
211     protected abstract Properties getExtToMime();
212 
213     /***
214      * get the Properties configuration that maps mime types to commandlines
215      *
216      * @return the mapping
217      */
218     protected abstract Properties getMimeToCmd();
219 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/Controller.html
##-----------------TITLE------------------------##
Controller xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 19, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import java.awt.event.ActionListener;
7   
8   import org.picocontainer.Startable;
9   
10  /***
11   * This class is only concerned with translating actions from the view into
12   * method calls on the model.
13   *
14   * @author dingx
15   */
16  public interface Controller extends Startable,
17                                      ActionListener
18  {
19      /***
20       * TODO
21       *
22       * @return TODO
23       */
24      Model getModel();
25  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/rendezvous/DNSSDPeerFinder.html
##-----------------TITLE------------------------##
DNSSDPeerFinder xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 1, 2004
3    */
4   package swirl.workspace.rendezvous;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   
9   import swirl.workspace.PeerFinder;
10  
11  /***
12   * DOCUMENT ME!
13   *
14   * @author Ben
15   */
16  public class DNSSDPeerFinder implements PeerFinder //, BrowseListener
17  {
18      /*** the logger for this class */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      //	private DNSSDService dnssd;
22      public void start()
23      {
24          if(log.isDebugEnabled())
25          {
26              log.debug("starting");
27          }
28  
29          try
30          {
31              if(
32              // listen for other non-Swirl services
33              log.isDebugEnabled())
34              {
35                  // listen for other non-Swirl services
36                  log.debug("creating browser for : _webdav._tcp");
37              }
38  
39              //			dnssd = DNSSD.browse("_webdav._tcp", this);
40          }
41          catch(Exception ex)
42          {
43              log.error("Trouble starting DNSSDPeerFinder", ex);
44          }
45  
46          if(log.isDebugEnabled())
47          {
48              log.debug("started");
49          }
50      }
51  
52      /***
53       * TODO
54       */
55      public void stop()
56      {
57          if(log.isDebugEnabled())
58          {
59              log.debug("stopping");
60          }
61  
62          if(log.isDebugEnabled())
63          {
64              log.debug("stopped");
65          }
66      }
67  
68      /*public void serviceFound(DNSSDService dns, int flags,
69         int ifIndex,
70         String serviceName,
71         String regType,
72         String domain)
73         {
74             log.debug("serviceFound()\nflags: " + flags + "\nifIndex: " + ifIndex
75                 + "\nserviceName: " + serviceName + "\nregType: " + regType
76                 + "\ndomain: " + domain);
77         }
78         public void serviceLost(DNSSDService dns,
79                 int flags,
80                 int ifIndex,
81                 String serviceName,
82                 String regType,
83                 String domain)
84         {
85             log.debug("serviceLost()\nflags: " + flags + "\nifIndex: " + ifIndex
86                 + "\nserviceName: " + serviceName + "\nregType: " + regType
87                 + "\ndomain: " + domain);
88         }
89         public void operationFailed(DNSSDService dns, int errorCode)
90         {
91         }
92       */
93      /***
94       */
95      /*
96         public void registerService(TXTRecord txt)
97         {
98         }
99       */
100 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/PeerManagerVisualizer.html
##-----------------TITLE------------------------##
PeerManagerVisualizer xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Jul 6, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import java.awt.BorderLayout;
7   import java.awt.Color;
8   import java.awt.Dimension;
9   import java.awt.GridLayout;
10  import java.awt.event.ActionEvent;
11  import java.awt.event.ActionListener;
12  import java.util.Map;
13  
14  import javax.swing.BorderFactory;
15  import javax.swing.JButton;
16  import javax.swing.JColorChooser;
17  import javax.swing.JLabel;
18  import javax.swing.JOptionPane;
19  import javax.swing.JPanel;
20  import javax.swing.JScrollPane;
21  import javax.swing.JTable;
22  import javax.swing.JTextField;
23  
24  import org.apache.commons.httpclient.URIException;
25  import org.apache.commons.logging.Log;
26  import org.apache.commons.logging.LogFactory;
27  
28  import swirl.workspace.BasePeer;
29  import swirl.workspace.Peer;
30  import swirl.workspace.PeerManager;
31  import swirl.workspace.PeerTableModel;
32  import swirl.workspace.viz.pie.FileElement;
33  
34  /***
35   * DOCUMENT ME!
36   *
37   * @author bpillet
38   */
39  public class PeerManagerVisualizer extends BaseVisualizer implements Controller
40  {
41      /*** TODO */
42      private static final long serialVersionUID = 1L;
43  
44      /*** TODO */
45      protected Log log = LogFactory.getLog(this.getClass());
46  
47      /*** TODO */
48      JTable table;
49  
50      /*** TODO */
51      Model model;
52  
53      /*** TODO */
54      private JButton addButton;
55  
56      /*** TODO */
57      private JButton colorButton;
58  
59      /*** TODO */
60      private JButton removeButton;
61  
62      /*** TODO */
63      private JPanel peerAdder;
64  
65      /*** TODO */
66      private JTextField urlField;
67  
68      /*** TODO */
69      private JTextField userNameField;
70  
71      /*** TODO */
72      private PeerManager peerManager;
73  
74      /***
75       * Creates a new PeerManagerVisualizer object.
76       *
77       * @param model TODO
78       * @param manager TODO
79       */
80      public PeerManagerVisualizer(Model model, PeerManager manager)
81      {
82          if(log.isDebugEnabled())
83          {
84              log.debug("()");
85          }
86  
87          this.model = model;
88          peerManager = manager;
89          setLayout(new BorderLayout(6, 11));
90  
91          peerAdder = new JPanel(new GridLayout(0, 2));
92  
93          JLabel userName = new JLabel("Peer Name: ");
94  
95          peerAdder.add(userName);
96          userNameField = new JTextField();
97          peerAdder.add(userNameField);
98  
99          JLabel url = new JLabel("URL: ");
100 
101         peerAdder.add(url);
102         urlField = new JTextField("http://");
103         peerAdder.add(urlField);
104 
105         JLabel color = new JLabel("Color: ");
106 
107         peerAdder.add(color);
108         colorButton = new JButton("Peer Color");
109         peerAdder.add(colorButton);
110         colorButton.addActionListener(new ActionListener()
111             {
112                 public void actionPerformed(ActionEvent e)
113                 {
114                     Color newColor = JColorChooser.showDialog(colorButton,
115                                                               "Pick User Color",
116                                                               Color.BLACK);
117 
118                     if(log.isDebugEnabled())
119                     {
120                         log.debug("newColor: " + newColor);
121                     }
122 
123                     colorButton.setBackground(newColor);
124                 }
125             });
126 
127         addButton = new JButton("Add Peer");
128         peerAdder.add(addButton);
129         addButton.addActionListener(this);
130 
131         removeButton = new JButton("Remove Peer");
132         peerAdder.add(removeButton);
133         removeButton.addActionListener(this);
134         peerAdder.setBorder(BorderFactory.createTitledBorder("Manager Peers"));
135         add(peerAdder, BorderLayout.NORTH);
136     }
137 
138     /***
139      * TODO
140      *
141      * @return TODO
142      */
143     public Controller getController()
144     {
145         return this;
146     }
147 
148     /***
149      * TODO
150      *
151      * @return TODO
152      */
153     public Model getModel()
154     {
155         return model;
156     }
157 
158     /***
159      * TODO
160      *
161      * @return TODO
162      */
163     public String getName()
164     {
165         return "Peers";
166     }
167 
168     /***
169      * TODO
170      *
171      * @return TODO
172      */
173     public View getView()
174     {
175         return this;
176     }
177 
178     /***
179      * TODO
180      *
181      * @param e TODO
182      */
183     public void actionPerformed(ActionEvent e)
184     {
185         if(log.isDebugEnabled())
186         {
187             log.debug("actionCmd: " + e.getActionCommand());
188         }
189 
190         if(e.getSource() == addButton)
191         {
192             if(log.isDebugEnabled())
193             {
194             	log.debug("username: " + userNameField.getText());
195             	log.debug("url: " + urlField.getText());
196             	log.debug("color: " + colorButton.getBackground());
197             }
198 
199             try
200             {
201                 BasePeer peer = new BasePeer(colorButton.getBackground(),
202                                              userNameField.getText(),
203                                              urlField.getText());
204 
205                 peerManager.addPeer(peer);
206             }
207             catch(URIException e1)
208             {
209                 JOptionPane.showMessageDialog(this,
210                                               "Could not create peer because of a bad URL");
211             }
212         }
213         else if(e.getSource() == removeButton)
214         {
215             int row = table.getSelectedRow();
216             String host = (String)table.getValueAt(row, 1); // col 1 is the host column
217 
218             peerManager.removePeer(host);
219         }
220     }
221 
222     /***
223      * TODO
224      *
225      * @param msg TODO
226      */
227     public void processMessage(Map msg){}
228 
229     /***
230      * TODO
231      */
232     public void start()
233     {
234         if(log.isDebugEnabled())
235         {
236             log.debug("starting");
237         }
238 
239         table = new JTable(new PeerTableModel(this.model));
240 
241         JScrollPane scrollPane = new JScrollPane(table);
242 
243         table.setPreferredScrollableViewportSize(new Dimension(500, 70));
244         add(scrollPane, BorderLayout.CENTER);
245 
246         if(log.isDebugEnabled())
247         {
248             log.debug("started");
249         }
250     }
251 
252     /***
253      * TODO
254      */
255     public void stop()
256     {
257         if(log.isDebugEnabled())
258         {
259             log.debug("stopping");
260         }
261 
262         if(log.isDebugEnabled())
263         {
264             log.debug("stopped");
265         }
266     }
267 
268     /***
269      * TODO
270      *
271      * @param peer TODO
272      */
273     public void userJoined(Peer peer){}
274 
275 	/* (non-Javadoc)
276 	 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
277 	 */
278 	public void flashIt(FileElement fe, String uColor) {
279 		// TODO Auto-generated method stub
280 		
281 	}
282 
283 	/* (non-Javadoc)
284 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
285 	 */
286 	public void backupPromotedToPersistent(FileElement file) {
287 		// TODO Auto-generated method stub
288 		
289 	}
290 
291 	/* (non-Javadoc)
292 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
293 	 */
294 	public void fileUpdated(FileElement file) {
295 		// TODO Auto-generated method stub
296 		
297 	}
298 	
299 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/Peer.html
##-----------------TITLE------------------------##
Peer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.awt.Color;
4   import java.io.IOException;
5   import java.util.Enumeration;
6   import java.util.HashMap;
7   import java.util.Vector;
8   
9   import org.apache.commons.httpclient.HostConfiguration;
10  import org.apache.commons.httpclient.HttpClient;
11  import org.apache.commons.httpclient.HttpMethod;
12  import org.apache.commons.httpclient.HttpRecoverableException;
13  import org.apache.commons.httpclient.HttpURL;
14  import org.apache.commons.httpclient.URIException;
15  import org.apache.commons.logging.Log;
16  import org.apache.commons.logging.LogFactory;
17  import org.apache.webdav.lib.methods.XMLResponseMethodBase;
18  import org.apache.webdav.lib.methods.MoveMethod;
19  import org.picocontainer.Startable;
20  import org.w3c.dom.Document;
21  
22  import swirl.workspace.common.DocumentLogger;
23  import swirl.workspace.messages.MessageSender;
24  import swirl.workspace.viz.pie.Coordinate;
25  
26  
27  /***
28   * DOCUMENT ME!
29   *
30   * @author bpillet Base class for peers to extend.  Represents a peer in the
31   *         swirl network and manages connecting to the server and executing
32   *         methods on the server.
33   */
34  public abstract class Peer implements Startable
35  {
36      /*** how many times the peer tries to execute a method before it gives up */
37      public static final int MAX_RETRIES = 4;
38  
39      /*** the last document that came from the server */
40      private Document doc = null;
41  
42      /*** a logger for this class */
43      private Log log = LogFactory.getLog(this.getClass());
44  
45      /*** the files hosted by this peer */
46      //private Vector files = new Vector();
47  
48      /*** all the MessageSenders to notify */
49      private Vector senders = new Vector();
50  
51      private HttpClient client = new HttpClient();
52      /*** the connection to the server */
53      private HostConfiguration slide;
54      private HostConfiguration swirl;
55  
56      /***
57       * Get the globally unique color for this peer
58       *
59       * @return an awt color
60       */
61      public abstract Color getColor();
62  
63      /***
64       * Each peer needs to figure out how to connect based on different locating
65       * protocols, etc.
66       *
67       * @return a jakarta httpclient url for this peer
68       *
69       * @throws URIException if there are problems making the url
70       */
71      public abstract HttpURL getHttpURL() throws URIException;
72  
73      /***
74       * TODO
75       *
76       * @return TODO
77       *
78       * @throws URIException TODO
79       */
80      public abstract HttpURL getSwirlURL() throws URIException;
81  
82      /***
83       * Get the username for this peer
84       *
85       * @return the peer's username
86       */
87      public abstract String getUserName();
88  
89      private void setSlideHost() throws IOException
90      {
91      	if(slide == null)
92      	{
93      		log.debug("creating slide host: " + getHttpURL());
94      		slide = new HostConfiguration();
95      		slide.setHost(getHttpURL());
96      	}
97      }
98  
99      private void setSwirlHost() throws IOException
100     {
101     	if(swirl == null)
102     	{
103     		log.debug("creating swirl host: " + getSwirlURL());
104     		swirl = new HostConfiguration();
105     		swirl.setHost(getSwirlURL());
106     	}
107     }
108 
109     /***
110      * Get the host for this peer
111      *
112      * @return the host for this peer
113      *
114      * @throws URIException if there's a problem getting the host
115      */
116     public String getHost() throws URIException
117     {
118         if(log.isDebugEnabled())
119         {
120             log.debug("getHost() : " + getHttpURL().getHost());
121         }
122 
123         return getHttpURL().getHost();
124     }
125 
126     /***
127      * Get the path for this peer
128      *
129      * @return the path for this peer (/slide)
130      *
131      * @throws URIException if there's a problem getting the path
132      */
133     public String getPath() throws URIException
134     {
135         if(log.isDebugEnabled())
136         {
137             log.debug("getPath() : " + getHttpURL().getPath());
138         }
139 
140         return getHttpURL().getPath();
141     }
142 
143     /***
144      * Get the port for this peer
145      *
146      * @return the port for this peer
147      *
148      * @throws URIException if there's a problem getting the port
149      */
150     public int getPort() throws URIException
151     {
152         if(log.isDebugEnabled())
153         {
154             log.debug("getPort() : " + getHttpURL().getPort());
155         }
156 
157         return getHttpURL().getPort();
158     }
159 
160     /***
161      * A unique way of finding this peer which is just the host:port string for
162      * now
163      *
164      * @return host:port
165      */
166     public String getUniqueID()
167     {
168         try
169         {
170             return getHost() + ':' + getPort();
171         }
172         catch(URIException e)
173         {
174             log.error(e, e);
175         }
176 
177         return this.toString();
178     }
179 
180     /***
181      * Register a listener for Messages
182      *
183      * @param l the listener to add
184      */
185     public synchronized void addMessageSender(final MessageSender l)
186     {
187         senders.addElement(l);
188     }
189     /***
190      * Execute a method on the server behind this peer
191      *
192      * @param method the method to execute
193      *
194      * @return the status code from the server
195      *
196      * @throws IOException if there are any problems in the request
197      */
198     public int executeHttpRequestMethodWithoutLog(final HttpMethod method)
199                                  throws IOException
200     {
201     	setSlideHost();
202     	setSwirlHost();
203 
204         int statusCode = -1;
205 
206         for(int attempt = 0; (statusCode == -1) && (attempt < MAX_RETRIES);
207             ++attempt)
208         {
209             if(log.isDebugEnabled())
210             {
211                 log.debug("executeHttpRequestMethod: " + method + "\nurl: " + this.getHost() + 
212                 		"\npath: " + method.getPath() + "  attempt: " + attempt);
213             }
214 
215             try
216             {
217             	HttpClient client = new HttpClient();
218             	statusCode = client.executeMethod(slide, method);
219             }
220             catch(HttpRecoverableException ex)
221             {
222                 log.info("retrying after recoverable exception method: " + method, ex);
223             }
224         }
225 
226         if(log.isDebugEnabled())
227         {
228             log.debug("statusCode: " + statusCode);
229         }
230 
231         return statusCode;
232     }
233 
234     
235     /***
236      * Execute a method on the server behind this peer
237      *
238      * @param method the method to execute
239      *
240      * @return the status code from the server
241      *
242      * @throws IOException if there are any problems in the request
243      */
244     public int executeHttpRequestMethod(final HttpMethod method)
245                                  throws IOException
246     {
247     	int statusCode = executeHttpRequestMethodWithoutLog(method);
248     	if (! method.getName().equalsIgnoreCase("PROPFIND")) {
249     		logMethod(method, statusCode, false, null);
250     	}
251         return statusCode;
252     }
253     
254     /***
255      * Execute a method on the server behind this peer
256      *
257      * @param method the method to execute
258      *
259      * @return the status code from the server
260      *
261      * @throws IOException if there are any problems in the request
262      */
263     public int executeHttpRequestMethod(final HttpMethod method, Coordinate coord)
264                                  throws IOException
265     {
266     	int statusCode = executeHttpRequestMethodWithoutLog(method);
267     	if (! method.getName().equalsIgnoreCase("PROPFIND")) {
268     		logMethod(method, statusCode, false, coord);
269     	}
270         return statusCode;
271     }
272     
273     /***
274      * Execute a method on the server behind this peer
275      *
276      * @param method the method to execute
277      *
278      * @return the status code from the server
279      *
280      * @throws IOException if there are any problems in the request
281      */
282     public int executeHttpRequestMethodLogPrivate(final HttpMethod method)
283                                  throws IOException
284     {
285     	int statusCode = executeHttpRequestMethodWithoutLog(method);
286 	    logMethod(method, statusCode, true, null);
287         return statusCode;
288     }
289     
290     /***
291      * Execute a method on the server behind this peer
292      *
293      * @param method the method to execute
294      *
295      * @return the status code from the server
296      *
297      * @throws IOException if there are any problems in the request
298      */
299     public int executeHttpRequestMethodLogPrivate(final HttpMethod method, Coordinate coord)
300                                  throws IOException
301     {
302     	int statusCode = executeHttpRequestMethodWithoutLog(method);
303 	    logMethod(method, statusCode, true, coord);
304         return statusCode;
305     }
306     
307 
308     
309     /***
310      * Remove a listener for Messages
311      *
312      * @param l the listener to remove
313      */
314     public synchronized void removeMessageSender(final MessageSender l)
315     {
316         senders.removeElement(l);
317     }
318 
319     /***
320      * Returns the url for this peer or "" if there's a problem
321      *
322      * @return the url for this peer
323      */
324     public String toString()
325     {
326         try
327         {
328             return getHttpURL().toString();
329         }
330         catch(Exception ex)
331         {
332             log.warn("toString()", ex);
333         }
334 
335         return super.toString();
336     }
337 
338     /***
339      * extract file information from the XML Document doc
340      */
341 /*    private void extractFileInfo()
342     {
343         if(log.isDebugEnabled())
344         {
345             log.debug("extractFileInfo");
346         }
347 
348         DOMReader reader = new DOMReader();
349         org.dom4j.Document body = reader.read(doc);
350 
351         files.removeAllElements();
352 
353         String nodeTag = "/D:multistatus/D:response";
354         List nodes = body.selectNodes(nodeTag);
355 
356         for(Iterator it = nodes.iterator(); it.hasNext();)
357         {
358             org.dom4j.Node node = (Node)it.next();
359 
360             if(log.isDebugEnabled())
361             {
362                 log.debug("the node is:" + node);
363             }
364 
365             String nameTag = "D:propstat/D:prop/D:displayname";
366             String fileName = "";
367             Node fileNameNode = node.selectSingleNode(nameTag);
368 
369             if(fileNameNode != null)
370             {
371                 fileName = fileNameNode.getText();
372                 log.debug("the file name is:" + fileName);
373             }
374 
375             String typeTag = "D:propstat/D:prop/D:resourcetype/D:collection";
376             Object fileType = node.selectSingleNode(typeTag);
377             boolean isDir = false;
378 
379             if(fileType != null)
380             {
381                 log.debug("get a directory");
382                 isDir = true;
383             }
384 
385             String pathTag = "D:href";
386             String filePath = node.selectSingleNode(pathTag).getText();
387 
388             if(log.isDebugEnabled())
389             {
390                 log.debug("the file path is:" + filePath);
391             }
392 
393             FileNode fe = new FileNode(fileName, filePath, isDir);
394 
395             files.add(fe);
396         }
397     }*/
398 
399     /***
400      *
401      * Send a message to all of the listeners about the current method
402      *
403      * @param method the method to log
404      * @param status the status of the executed method to log
405      * @param isPrivate indicates whether log should extend beyond local peer
406      * @param coord hack to allow us to log coordinates for an imported file using drag and drop
407      */
408     private void logMethod(final HttpMethod method, final int status, boolean isPrivate, Coordinate coord)
409     {
410         if(log.isDebugEnabled())
411         {
412             log.debug("logMethod()");
413         }
414 
415         HashMap message = new HashMap();
416         //log.debug("hostConf: " + method.getHostConfiguration());
417         message.put("TYPE", "Swirl");
418         try {
419 			message.put("WEBDAV_HOST", getHost());	//method.getHostConfiguration().getHost());
420 		} catch (URIException e1) {
421 			log.error(e1, e1);
422 		}
423         message.put("WEBDAV_PATH", method.getPath());
424         message.put("WEBDAV_CLIENT",
425                     PeerManager.getLocalAddress().getHostAddress());
426         // message.put("WEBDAV_CLIENT_USER", System.getProperty("user.name"));
427         message.put("WEBDAV_CLIENT_USER", JmDNSPeer.getEffectiveUserNameForPeer());
428         message.put("WEBDAV_COMMAND", method.getName());
429         message.put("WEBDAV_RESPONSE_STATUS", status + "");
430         
431         if (method instanceof MoveMethod)
432         {
433         	log.debug("logging a MOVE method to yancees");
434         	MoveMethod moveMethod = (MoveMethod)method;
435         	message.put("WEBDAV_DEST", moveMethod.getDestination());
436         }
437 
438         if(method instanceof OurPropPatchMethod)
439         {
440         	log.debug("OurPropPatchMethod is getting sent to yanceese");
441         	OurPropPatchMethod meth = (OurPropPatchMethod)method;
442         	message.putAll(meth.getRemoveProperties());
443         	message.putAll(meth.getSetProperties());
444         	if (coord != null) {
445             	log.debug("logging a setlocalpath with coordinate to yancees");
446             	message.put("SET_radius", String.valueOf(coord.getRadius()));
447             	message.put("SET_relativeAngle", String.valueOf(coord.getRelativeAngle()));
448         	}
449         }
450         
451         if(method instanceof XMLResponseMethodBase)
452         {
453             doc = ((XMLResponseMethodBase)method).getResponseDocument();
454 
455             if(doc != null)
456             {
457                 DocumentLogger.logDocument(log, "responseBody doc: ", doc);
458                 //extractFileInfo();
459             }
460             else
461             {
462                 log.debug("method has no Document in response");
463             }
464         }
465         else
466         {
467             log.debug("responseBody str: " + method.getResponseBodyAsString());
468         }
469 
470         if(log.isDebugEnabled())
471         {
472             log.debug("message: " + message);
473         }
474         
475         if((senders != null) && !senders.isEmpty())
476         {
477             // make a copy of the listener list in case
478             //   anyone adds/removes listeners
479             Vector targets;
480 
481             synchronized(this)
482             {
483                 targets = (Vector)senders.clone();
484             }
485 
486             // walk through the listener list and
487             //   call the receiveMessage method in each
488             Enumeration e = targets.elements();
489 
490             while(e.hasMoreElements())
491             {
492                 MessageSender sender = (MessageSender)e.nextElement();
493 
494                 sender.sendMessage(message, isPrivate);
495             }
496         }
497     }
498 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/JmDNSPeer.html
##-----------------TITLE------------------------##
JmDNSPeer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.awt.Color;
4   import java.util.Hashtable;
5   
6   import javax.jmdns.ServiceInfo;
7   
8   import org.apache.commons.httpclient.HttpURL;
9   import org.apache.commons.httpclient.URIException;
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  import swirl.workspace.common.ColorUtils;
14  import swirl.workspace.messages.MessageSender;
15  import swirl.workspace.viz.SwirlGUIConfig;
16  
17  /***
18   * DOCUMENT ME!
19   *
20   * @author bpillet
21   */
22  public class JmDNSPeer extends Peer
23  {
24      /*** property name for "localPort" in serviceInfo */
25      private static String nameOfLocalPort = "localPort";
26  
27      /*** property name for "ownPath" in serviceInfo */
28      private static String nameOfOwnPath = "ownPath";
29  
30      /*** The unique, global color for this peer */
31      private Color color;
32  
33      /*** the url to the peer */
34      private HttpURL httpURL = null;
35  
36      /*** the peerFinder for this peer */
37      private JmDNSPeerFinder peerFinder;
38  
39      /*** a logger for this class */
40      private Log log = LogFactory.getLog(this.getClass());
41  
42      /*** a synthetic or jmdns created ServiceInfo object for this peer */
43      private ServiceInfo info = null;
44  
45      /*** unique jmdns name for the peer's service */
46      private String serviceName;
47  
48      /***
49       * Generic constructor to make a new peer outside of the peerFinder
50       *
51       * @param finder listens to jmdns messages for peer
52       * @param port the port the server is running on
53       * @param path the path to slide on the server
54       * @param msgSender lets the peer broadcast messages to listeners
55       */
56      public JmDNSPeer(final JmDNSPeerFinder finder, final String port,
57                       final String path, final MessageSender msgSender, SwirlGUIConfig conf)
58      {
59          this(finder, Integer.parseInt(port), path, conf);
60          addMessageSender(msgSender);
61      }
62  
63      /***
64       * Used by peerFinder to create new peer from network message
65       *
66       * @param finder the peerFinder that created the peer
67       * @param serviceInfo the info to build the peer
68       *
69       * @throws URIException if there's a problem figuring out the port or path
70       */
71      public JmDNSPeer(final JmDNSPeerFinder finder, final ServiceInfo serviceInfo)
72                throws URIException
73      {
74          this.peerFinder = finder;
75          this.info = serviceInfo;
76          initServiceName(getPort(), getPath());
77      }
78  
79      /***
80       * Initializes the properties of this peer including the ServiceInfo
81       *
82       * @param finder the peerFinder for this peer
83       * @param port the port the server is running on
84       * @param path the path to slide on the server
85       */
86      private JmDNSPeer(final JmDNSPeerFinder finder, final int port,
87                        final String path, SwirlGUIConfig conf)
88      {
89          this.peerFinder = finder;
90  
91          if(log.isDebugEnabled())
92          {
93              log.debug("peerFinder: " + peerFinder + "\nport: " + port
94                        + "\npath: " + path);
95          }
96  
97          initServiceName(port, path);
98  
99          Hashtable serviceProperties = new Hashtable();
100 
101         serviceProperties.put(nameOfLocalPort, port + "");
102         serviceProperties.put(nameOfOwnPath, path);
103         serviceProperties.put("user.name", getEffectiveUserNameForPeer());
104         //serviceProperties.put("color", ColorUtils.colorToString(conf.getUserColor()));
105 
106         this.info = new ServiceInfo(PeerManager.SWIRL_TYPE, serviceName, port,
107                                     0, 0, serviceProperties);
108     }
109 
110     /***
111      * Get the user name for this peer. 
112      * For testing purpose, it can return the property of tester.name 
113      * @return the user name of this running peer
114      */
115     public static String getEffectiveUserNameForPeer() {
116        String userName = System.getProperty("tester.name"); 
117        if (userName==null) {
118            userName = System.getProperty("user.name");
119        }
120        return userName;
121     }
122     
123     /***
124      * Gets the global color for this user from the ServiceInfo
125      *
126      * @return the color for this user
127      */
128     public Color getColor()
129     {
130         if(log.isDebugEnabled())
131         {
132             log.debug("color: " + color);
133         }
134 
135         if(color == null)
136         {
137         	//String rgb = info.getPropertyString("color");
138             color = ColorUtils.stringToColor(getUserName());
139             if(log.isDebugEnabled())
140 	        {
141             	log.debug("setting color for " + getUserName() + "\ncolor: " + color);
142 	        }
143         }
144 
145         return color;
146     }
147 
148     /***
149      * Generates an httpclient url based on the ServiceInfo url from jmdns
150      *
151      * @return an httpclient url to the peer
152      *
153      * @throws URIException if there's a problem connecting to the peer
154      */
155     public HttpURL getHttpURL() throws URIException
156     {
157         if(log.isDebugEnabled())
158         {
159             log.debug("getURL() : " + info.getURL());
160         }
161 
162         if(httpURL == null)
163         {
164             String url = info.getURL() + info.getPropertyString(nameOfOwnPath);
165 
166             httpURL = new HttpURL(url);
167 
168             //httpURL.setUserinfo("root", "root");
169         }
170 
171         return httpURL;
172     }
173 
174     /***
175      * generates a string version of the url to this peer
176      *
177      * @return the url for this peer
178      *
179      * @throws URIException if there's a problem connecting to the peer
180      */
181     public String getStringURL() throws URIException
182     {
183         return info.getURL();
184     }
185 
186     /***
187      * TODO
188      *
189      * @return TODO
190      *
191      * @throws URIException TODO
192      */
193     public HttpURL getSwirlURL() throws URIException
194     {
195         if(log.isDebugEnabled())
196         {
197             log.debug("getSwirlURL() : ");
198         }
199 
200         String sURL = getHttpURL().toString().replaceFirst(SwirlCommand.SLIDE,
201                                                            SwirlCommand.SWIRL);
202         HttpURL swirlURL = new HttpURL(sURL);
203 
204         return swirlURL;
205     }
206 
207     /***
208      * Get the username for this peer from the ServiceInfo
209      *
210      * @return the username
211      */
212     public String getUserName()
213     {
214         return info.getPropertyString("user.name");
215     }
216 
217     /***
218      * registeres this peer with the jmdns network
219      */
220     public void start()
221     {
222         if(log.isDebugEnabled())
223         {
224             log.debug("starting");
225         }
226 
227         peerFinder.registerService(info);
228 
229         if(log.isDebugEnabled())
230         {
231             log.debug("started");
232         }
233     }
234 
235     /***
236      * unregisters this peer from the jmdns network
237      */
238     public void stop()
239     {
240         if(log.isDebugEnabled())
241         {
242             log.debug("stoppping");
243         }
244 
245         peerFinder.unregisterService(info);
246 
247         if(log.isDebugEnabled())
248         {
249             log.debug("stopped");
250         }
251     }
252 
253     /***
254      * Generates a unique serviceName for this peer
255      *
256      * @param port the port this peer listens on
257      * @param path the path of this peer's slide server
258      */
259     private void initServiceName(final int port, final String path)
260     {
261         serviceName = PeerManager.getLocalAddress().getHostAddress();
262         serviceName += (":" + port + path + "." + PeerManager.SWIRL_TYPE);
263     }
264 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PropfindCommand.html
##-----------------TITLE------------------------##
PropfindCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   import org.apache.webdav.lib.methods.PropFindMethod;
9   
10  import swirl.workspace.common.NetUtils;
11  
12  /***
13   * TODO
14   *
15   * @author $author$
16   * @version $Revision: 1.21 $
17   */
18  public class PropfindCommand extends AggregateCommand
19  {
20      /*** commons-logging log that maps to this Command */
21      private Log log = LogFactory.getLog(this.getClass());
22  
23      /***
24       * Creates a new PropfindCommand object.
25       *
26       * @param req TODO
27       * @param resp TODO
28       * @param host TODO
29       * @param path TODO
30       * @param peerManager TODO
31       * @param codec TODO
32       */
33      public PropfindCommand(final HttpServletRequest req,
34      					   final HttpServletResponse resp,
35                             final String host, final String path,
36                             final PeerManager peerManager,
37                             final HostPathCodec codec)
38      {
39          super(req, resp, host, path, peerManager, codec);
40      }
41  
42      /***
43       * TODO
44       *
45       * @param requestBody TODO
46       * @param peer TODO
47       *
48       * @return TODO
49       */
50      public PropFindMethod createMethod(final String requestBody,
51      		final Peer peer)
52      {
53          /*
54          PropFindMethod method = new PropFindMethod(getPath().replaceAll(" ",
55                                                                          "%20"));
56          */
57          //PropFindMethod method = new PropFindMethod((NetUtils.encodeLastElement(getPath())));
58          PropFindMethod method = new PropFindMethod((NetUtils.encodeEachElement(getPath())));
59  
60          if(log.isDebugEnabled())
61          {
62              log.debug("creating method with path: " + getPath()
63                        + "  but it thinks: " + method.getPath());
64          }
65  
66          return method;
67      }
68  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PropertiesContainerBuilder.html
##-----------------TITLE------------------------##
PropertiesContainerBuilder xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.FileNotFoundException;
4   import java.io.IOException;
5   import java.io.InputStream;
6   import java.util.Enumeration;
7   import java.util.LinkedList;
8   import java.util.Properties;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  import org.picocontainer.MutablePicoContainer;
13  import org.picocontainer.Parameter;
14  import org.picocontainer.defaults.ComponentParameter;
15  import org.picocontainer.defaults.ConstantParameter;
16  import org.picocontainer.defaults.DefaultPicoContainer;
17  
18  /***
19   * DOCUMENT ME!
20   *
21   * @author bpillet
22   */
23  public class PropertiesContainerBuilder
24  {
25      /*** the resource that the container is based on */
26      private InputStream resource;
27  
28      /*** the logger for this class */
29      private Log log = LogFactory.getLog(this.getClass());
30  
31      /*** the container that is created/build */
32      private MutablePicoContainer pico;
33  
34      /***
35       * Populate the container based on a specific resource property file
36       *
37       * @param resourceName the name of the property file
38       * @param parent the parent container for this container
39       *
40       * @return the populated container
41       */
42      public MutablePicoContainer buildContainer(final String resourceName,
43                                                 final MutablePicoContainer parent)
44      {
45          setResource(resourceName);
46          pico = new DefaultPicoContainer(parent);
47          parent.registerComponentInstance(pico);
48  
49          return buildContainer();
50      }
51  
52      /***
53       * Populate the container based on a specific resource property file
54       *
55       * @param resourceName the name of the property file
56       *
57       * @return the populated container
58       */
59      public MutablePicoContainer buildContainer(final String resourceName)
60      {
61          setResource(resourceName);
62          pico = new DefaultPicoContainer();
63  
64          return buildContainer();
65      }
66  
67      /***
68       * Populate the container based on each property in the properties file
69       *
70       * @return the populated container
71       */
72      public MutablePicoContainer buildContainer()
73      {
74          try
75          {
76              Properties guiProps = new Properties();
77  
78              guiProps.load(resource);
79  
80              for(Enumeration components = guiProps.propertyNames();
81                  components.hasMoreElements();)
82              {
83                  String component = (String)components.nextElement();
84                  String parameters = guiProps.getProperty(component);
85  
86                  if(log.isDebugEnabled())
87                  {
88                      log.debug("component: " + component + " params: "
89                                + parameters);
90                  }
91  
92                  try
93                  {
94                      Class componentClass = Class.forName(component);
95                      Parameter[] params = parseParameters(parameters);
96  
97                      if(params.length > 0)
98                      {
99                          pico.registerComponentImplementation(componentClass,
100                                                              componentClass,
101                                                              params);
102                     }
103                     else
104                     {
105                         pico.registerComponentImplementation(componentClass);
106                     }
107                 }
108                 catch(ClassNotFoundException ex)
109                 {
110                     log.error("Could not find component " + component, ex);
111                 }
112             }
113         }
114         catch(FileNotFoundException ex)
115         {
116             log.error("Problem finding gui", ex);
117         }
118         catch(IOException ex)
119         {
120             log.error("Problem loading gui", ex);
121         }
122 
123         return pico;
124     }
125 
126     /***
127      * Convenience method to get the resource based on the classpath
128      *
129      * @param resourceName the name of the resource
130      */
131     private void setResource(final String resourceName)
132     {
133         if(log.isDebugEnabled())
134         {
135             log.debug("resourceName: " + resourceName);
136         }
137 
138         resource = this.getClass().getClassLoader().getResourceAsStream(resourceName);
139 
140         if(log.isDebugEnabled())
141         {
142             log.debug("resource: " + resource);
143         }
144     }
145 
146     /***
147      * Extracts the parameters from a string of the format<br>
148      * ([component:&lt;class&gt;|constant:&lt;string&gt;],)
149      *
150      * @param params the string to parse
151      *
152      * @return the Parameter objects that were extracted
153      */
154     private Parameter[] parseParameters(final String params)
155     {
156         LinkedList parameters = new LinkedList();
157 
158         if(!params.equals(""))
159         {
160             String[] paramSplit = params.split(":|,", 0);
161 
162             if(log.isDebugEnabled())
163 	        {
164             	log.debug("length: " + paramSplit.length);
165 	        }
166 
167             for(int i = 0; i < paramSplit.length; i += 2)
168             {
169                 String type = paramSplit[i];
170                 String value = paramSplit[i + 1];
171 
172                 if(log.isDebugEnabled())
173                 {
174                     log.debug("type: " + type + " value: " + value);
175                 }
176 
177                 if(type.equals("constant"))
178                 {
179                     parameters.add(new ConstantParameter(value));
180                 }
181                 else if(type.equals("component"))
182                 {
183                     try
184                     {
185                         Class val = Class.forName(value);
186 
187                         parameters.add(new ComponentParameter(val));
188                     }
189                     catch(Exception ex)
190                     {
191                         log.error("trouble setting parameter " + value);
192                     }
193                 }
194             }
195         }
196 
197         return (Parameter[])parameters.toArray(new Parameter[]{});
198     }
199 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/SwirlBridgeExtension.html
##-----------------TITLE------------------------##
SwirlBridgeExtension xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import java.util.Collections;
4   import java.util.Iterator;
5   import java.util.Vector;
6   
7   import org.apache.batik.bridge.BridgeContext;
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  
11  /***
12   * DOCUMENT ME!
13   *
14   * @author bpillet
15   */
16  public class SwirlBridgeExtension
17      implements org.apache.batik.bridge.BridgeExtension
18  {
19      /*** TODO */
20      private Log log = LogFactory.getLog(this.getClass());
21  
22      /***
23       * Creates a new SwirlBridgeExtension object.
24       */
25      public SwirlBridgeExtension()
26      {
27          super();
28      }
29  
30      /***
31       * TODO
32       *
33       * @return TODO
34       */
35      public String getAuthor()
36      {
37          return "Ben Pillet";
38      }
39  
40      /***
41       * This should contain a contact address (usually an e-mail address).
42       *
43       * @return TODO
44       */
45      public String getContactAddress()
46      {
47          return "";
48      }
49  
50      /***
51       * Human readable description of the extension. Perhaps that should be a
52       * resource for internationalization? (although I suppose it could be done
53       * internally)
54       *
55       * @return TODO
56       */
57      public String getDescription()
58      {
59          return "Example extension to standard SVG shape tags";
60      }
61  
62      /***
63       * TODO
64       *
65       * @return TODO
66       */
67      public Iterator getImplementedExtensions()
68      {
69          String[] extensions = {DotElement.URL};
70          Vector v = new Vector(extensions.length);
71  
72          for(int i = 0; i < extensions.length; i++)
73          {
74              v.add(extensions[i]);
75          }
76  
77          return Collections.unmodifiableList(v).iterator();
78      }
79  
80      /***
81       * TODO
82       *
83       * @return TODO
84       */
85      public float getPriority()
86      {
87          return 1f;
88      }
89  
90      /***
91       * This should return a URL where information can be obtained on this
92       * extension.
93       *
94       * @return TODO
95       */
96      public String getURL()
97      {
98          return "";
99      }
100 
101     /***
102      * TODO
103      *
104      * @param ctx TODO
105      */
106     public void registerTags(BridgeContext ctx)
107     {
108         // ctx.putBridge(new DotElementBridge());
109     }
110 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/OptionsVisualizer.html
##-----------------TITLE------------------------##
OptionsVisualizer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   import java.awt.Color;
5   import java.awt.GridLayout;
6   import java.awt.event.ActionEvent;
7   import java.awt.event.ActionListener;
8   
9   import javax.swing.BorderFactory;
10  import javax.swing.JButton;
11  import javax.swing.JColorChooser;
12  import javax.swing.JLabel;
13  import javax.swing.JPanel;
14  
15  import org.apache.commons.logging.Log;
16  import org.apache.commons.logging.LogFactory;
17  
18  import swirl.workspace.Peer;
19  import swirl.workspace.viz.pie.FileElement;
20  
21  /***
22   * @author bpillet
23   */
24  public class OptionsVisualizer extends BaseVisualizer {
25      protected Log log = LogFactory.getLog(this.getClass());
26  
27  	private static final long serialVersionUID = 1L;
28  
29  	private SwirlGUIConfig config;
30  	private JButton colorButton;
31  	private JButton saveButton;
32  
33  	private JPanel panel;
34  
35  	public OptionsVisualizer(SwirlGUIConfig conf)
36  	{
37          if(log.isDebugEnabled())
38          {
39          	log.debug("()");
40          }
41  		config = conf;
42  		panel = new JPanel(new GridLayout(0, 2));
43  		
44          JLabel color = new JLabel("Color: ");
45  
46          panel.add(color);
47          colorButton = new JButton("Peer Color");
48  //        colorButton.setBackground(config.getUserColor());
49          panel.add(colorButton);
50          colorButton.addActionListener(new ActionListener()
51              {
52                  public void actionPerformed(ActionEvent e)
53                  {
54                      Color newColor = JColorChooser.showDialog(colorButton,
55                                                                "Pick User Color",
56                                                                Color.BLACK);
57  
58                      if(log.isDebugEnabled())
59                      {
60                          log.debug("newColor: " + newColor);
61                      }
62  
63                      colorButton.setBackground(newColor);
64  //                    config.setUserColor(newColor);
65                  }
66              });
67          
68          saveButton = new JButton("Save Settings");
69          panel.add(saveButton);
70          saveButton.addActionListener(new ActionListener(){
71  
72  			public void actionPerformed(ActionEvent e) {
73  				config.saveProperties();
74  			}});
75          
76          setLayout(new BorderLayout(6, 11));
77          panel.setBorder(BorderFactory.createTitledBorder("User Options"));
78          add(panel, BorderLayout.NORTH);
79  	}
80  
81  	public String getName() {
82  		return "Options";
83  	}
84  
85  	public void start() {
86  
87  	}
88  
89  	public void stop() {
90  	}
91  
92  	public Controller getController() {
93  		return null;
94  	}
95  
96  	public Model getModel() {
97  		return null;
98  	}
99  
100 	public void userJoined(Peer peer) {
101 	}
102 
103 	public void flashIt(FileElement fe, String uColor) {
104 	}
105 
106 	/* (non-Javadoc)
107 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
108 	 */
109 	public void backupPromotedToPersistent(FileElement file) {
110 		// TODO Auto-generated method stub
111 		
112 	}
113 
114 	/* (non-Javadoc)
115 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
116 	 */
117 	public void fileUpdated(FileElement file) {
118 		// TODO Auto-generated method stub
119 		
120 	}
121 
122 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/WindowsFileLauncher.html
##-----------------TITLE------------------------##
WindowsFileLauncher xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.common;
2   
3   import java.io.BufferedReader;
4   import java.io.IOException;
5   import java.io.InputStreamReader;
6   import java.util.Properties;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  
11  /***
12   * @author bpillet
13   */
14  public class WindowsFileLauncher extends BaseFileLauncher
15  {
16  	/*** the logger for this class */
17      private Log log = LogFactory.getLog(this.getClass());
18  
19  	Properties extToMime = new Properties();
20  	Properties mimeToCmd = new Properties();
21  
22      protected String getOS()
23      {
24          return "win";
25      }
26  
27  	protected Properties getExtToMime() {
28      	try {
29      		//log.error(".=" + new File(".").getAbsolutePath());
30  			Process process = Runtime.getRuntime().exec("assoccmd.bat");
31  			extToMime.load(process.getInputStream());			
32  		} catch (IOException e) {
33  			log.error(e, e);
34  		}
35  
36  		return extToMime;
37  	}
38  
39  	protected Properties getMimeToCmd() {
40      	try {
41  			Process process = Runtime.getRuntime().exec("ftypecmd.bat");
42  			BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
43  			String line = in.readLine();
44  			while(line != null)
45  			{
46  				int equals = line.indexOf('=');
47  				if(log.isDebugEnabled())
48  		        {
49  					log.debug("line: " + line + " equals: " + equals);
50  		        }
51  				if(equals != -1)
52  				{
53  					String key = line.substring(0, equals);
54  					String value = line.substring(equals+1);
55  					if(value.indexOf("%1") == -1)
56  						value += " %1";
57  					
58  					if(log.isDebugEnabled())
59  			        {
60  						log.debug(key + " -> " + value);
61  			        }
62  					mimeToCmd.setProperty(key, value);
63  				}
64  				line = in.readLine();
65  			}
66  			if(log.isDebugEnabled())
67  	        {
68  				log.debug("done");
69  	        }
70  			//mimeToCmd.load(process.getInputStream());			
71  		} catch (IOException e) {
72  			log.error(e, e);
73  		}
74  
75  		return mimeToCmd;
76  	}
77  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/InternalFrameHolder.html
##-----------------TITLE------------------------##
InternalFrameHolder xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.event.ItemEvent;
4   import java.awt.event.ItemListener;
5   
6   import javax.swing.JCheckBoxMenuItem;
7   import javax.swing.JComponent;
8   import javax.swing.JInternalFrame;
9   import javax.swing.event.InternalFrameEvent;
10  import javax.swing.event.InternalFrameListener;
11  
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  
15  /***
16   * DOCUMENT ME!
17   *
18   * @author bpillet
19   */
20  public class InternalFrameHolder extends JInternalFrame implements ItemListener,
21                                                                     InternalFrameListener
22  {
23      /*** TODO */
24      private static final long serialVersionUID = 1L;
25  
26      /*** TODO */
27      protected Log log = LogFactory.getLog(this.getClass());
28  
29      /*** TODO */
30      Visualizer viz;
31  
32      /*** TODO */
33      private JCheckBoxMenuItem item = new JCheckBoxMenuItem();
34  
35      /***
36       * Creates a new InternalFrameHolder object.
37       *
38       * @param viz TODO
39       */
40      public InternalFrameHolder(Visualizer viz)
41      {
42          super("", true, true, true, true);
43  
44          if(log.isDebugEnabled())
45          {
46              log.debug("(" + viz.getName() + ")");
47          }
48  
49          this.viz = viz;
50  
51          setDefaultCloseOperation(HIDE_ON_CLOSE);
52          addInternalFrameListener(this);
53          item.addItemListener(this);
54          setTitle(viz.getName());
55          item.setText(viz.getName());
56          getContentPane().add((JComponent)viz);
57  
58          setSize(200, 200);
59          setVisible(true);
60      }
61  
62      /***
63       * TODO
64       *
65       * @return TODO
66       */
67      public JComponent getCheckBox()
68      {
69          return item;
70      }
71  
72      /***
73       * TODO
74       *
75       * @param visible TODO
76       */
77      public void setVisible(boolean visible)
78      {
79          super.setVisible(visible);
80  
81          if(item != null)
82          {
83              item.setSelected(visible);
84          }
85      }
86  
87      /***
88       * TODO
89       *
90       * @param e TODO
91       */
92      public void internalFrameActivated(InternalFrameEvent e)
93      {
94          //log.debug("activated");		
95      }
96  
97      /***
98       * TODO
99       *
100      * @param e TODO
101      */
102     public void internalFrameClosed(InternalFrameEvent e)
103     {
104         if(log.isDebugEnabled())
105         {
106             log.debug("closed");
107         }
108     }
109 
110     /***
111      * TODO
112      *
113      * @param e TODO
114      */
115     public void internalFrameClosing(InternalFrameEvent e)
116     {
117         if(log.isDebugEnabled())
118         {
119             log.debug("closing");
120         }
121     }
122 
123     /***
124      * TODO
125      *
126      * @param e TODO
127      */
128     public void internalFrameDeactivated(InternalFrameEvent e)
129     {
130         //log.debug("deactivated");
131     }
132 
133     /***
134      * TODO
135      *
136      * @param e TODO
137      */
138     public void internalFrameDeiconified(InternalFrameEvent e)
139     {
140         if(log.isDebugEnabled())
141         {
142             log.debug("deiconified");
143         }
144     }
145 
146     /***
147      * TODO
148      *
149      * @param e TODO
150      */
151     public void internalFrameIconified(InternalFrameEvent e)
152     {
153         if(log.isDebugEnabled())
154         {
155             log.debug("iconified");
156         }
157     }
158 
159     /***
160      * TODO
161      *
162      * @param e TODO
163      */
164     public void internalFrameOpened(InternalFrameEvent e)
165     {
166         if(log.isDebugEnabled())
167         {
168             log.debug("opened");
169         }
170     }
171 
172     /***
173      * TODO
174      *
175      * @param e TODO
176      */
177     public void itemStateChanged(ItemEvent e)
178     {
179         setVisible(e.getStateChange() == ItemEvent.SELECTED);
180     }
181 
182     /***
183      * TODO
184      */
185     public void start()
186     {
187         if(log.isDebugEnabled())
188         {
189             log.debug("starting");
190         }
191 
192         setVisible(true);
193 
194         if(log.isDebugEnabled())
195         {
196             log.debug("started");
197         }
198     }
199 
200     /***
201      * TODO
202      */
203     public void stop()
204     {
205         if(log.isDebugEnabled())
206         {
207             log.debug("stopping");
208         }
209 
210         if(log.isDebugEnabled())
211         {
212             log.debug("stopped");
213         }
214     }
215 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/SwirlGUIConfig.html
##-----------------TITLE------------------------##
SwirlGUIConfig xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Dimension;
4   import java.awt.Point;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author bpillet
10   */
11  public interface SwirlGUIConfig
12  {
13      /***
14       * TODO
15       *
16       * @param tab TODO
17       */
18      public void setDefaultTab(String tab);
19  
20      /***
21       * TODO
22       *
23       * @return TODO
24       */
25      public String getDefaultTab();
26  
27      /***
28       * TODO
29       *
30       * @param size TODO
31       */
32      public void setWindowPosition(Point size);
33  
34      /***
35       * TODO
36       *
37       * @return TODO
38       */
39      public Point getWindowPosition();
40  
41      /***
42       * TODO
43       *
44       * @param size TODO
45       */
46      public void setWindowSize(Dimension size);
47  
48      /***
49       * TODO
50       *
51       * @return TODO
52       */
53      public Dimension getWindowSize();
54  
55  //    public Color getUserColor();
56  //    public void setUserColor(Color newColor);
57  
58      /***
59       * TODO
60       *
61       * @param gui TODO
62       */
63      public void saveGUI(SwirlGUI gui);
64      
65      public void saveProperties();
66  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/YanceesMessageSender.html
##-----------------TITLE------------------------##
YanceesMessageSender xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   
4   import java.util.Iterator;
5   import java.util.Map;
6   import java.util.Set;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  import org.picocontainer.Startable;
11  
12  import edu.uci.isr.yancees.YanceesEvent;
13  import edu.uci.isr.yancees.YanceesException;
14  import edu.uci.isr.yancees.client.rmi.YanceesRMIClient;
15  import edu.uci.isr.yancees.server.filter.peerpublisher.PeerPublisherInputFilter;
16  
17  /***
18   * DOCUMENT ME!
19   *
20   * @author bpillet Adapter to log messages to Yancees
21   */
22  public class YanceesMessageSender implements MessageSender,
23                                               Startable
24  {
25      /*** TODO */
26      YanceesRMIClient yancees;
27  
28      /*** common-logging logger */
29      private Log log = LogFactory.getLog(this.getClass());
30  
31      /***
32       * Creates a new YanceesMessageSender object.
33       *
34       * @param yancees TODO
35       */
36      public YanceesMessageSender(YanceesRMIClient yancees)
37      {
38          if(log.isDebugEnabled())
39          {
40              log.debug("(" + yancees + ")");
41          }
42  
43          this.yancees = yancees;
44      }
45  
46      /***
47       * TODO
48       *
49       * @param msg message to send
50       * @param isPrivate indicates if the message should be broadcast to all peers
51       */
52      public void sendMessage(Map msg, boolean isPrivate) {
53          if(log.isDebugEnabled())
54          {
55              log.debug("sendMessage(" + msg + ")");
56          }
57  
58          //		create a new event to be published
59          YanceesEvent event = new YanceesEvent();
60  
61  
62          // The following field is put in the event so it can be read by the tickertape
63          event.put("TYPE", "Swirl");
64          
65      	if (isPrivate) {
66      		event.put(PeerPublisherInputFilter.PUBLISH_TO_PEERS, "false");
67      	} else {
68      		event.put(PeerPublisherInputFilter.PUBLISH_TO_PEERS, "true");
69      	}
70  
71          Set entries = msg.entrySet();
72  
73          for(Iterator it = entries.iterator(); it.hasNext();)
74          {
75              Map.Entry entry = (Map.Entry)it.next();
76  
77              if(log.isDebugEnabled())
78              {
79                  log.debug("entry: " + entry);
80              }
81  
82              event.put((String)entry.getKey(), (String)entry.getValue());
83          }
84  
85          try
86          {
87              if(log.isDebugEnabled())
88              {
89                  log.debug("sending event: " + event);
90              }
91  
92              yancees.publish(event);
93          }
94          catch(YanceesException e)
95          {
96              log.error("Error sending yancees event", e);
97          }
98      }
99  
100     
101     /***
102      * TODO
103      *
104      * @param msg TODO
105      */
106     public void sendMessage(Map msg)
107     {
108     	sendMessage(msg, false);
109     }
110 
111     /***
112      * TODO
113      */
114     public void start()
115     {
116         if(log.isDebugEnabled())
117         {
118             log.debug("starting");
119         }
120 
121         if(log.isDebugEnabled())
122         {
123             log.debug("started");
124         }
125     }
126 
127     /***
128      * TODO
129      */
130     public void stop()
131     {
132         if(log.isDebugEnabled())
133         {
134             log.debug("stoppping");
135         }
136 
137         if(log.isDebugEnabled())
138         {
139             log.debug("stopped");
140         }
141     }
142 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/JmDNSPeerFinder.html
##-----------------TITLE------------------------##
JmDNSPeerFinder xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.io.IOException;
4   import java.util.HashMap;
5   
6   import javax.jmdns.JmDNS;
7   import javax.jmdns.ServiceInfo;
8   import javax.jmdns.ServiceListener;
9   
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  /***
14   * DOCUMENT ME!
15   *
16   * @author bpillet
17   */
18  public class JmDNSPeerFinder implements ServiceListener,
19                                          PeerFinder
20  {
21      /*** time out 2s in get service info */
22      public static final int TIME_OUT = 2000;
23  
24      /*** remembers services that have registered with the network */
25      private HashMap cachedServices = new HashMap();
26  
27      /*** the JmDNS module */
28      private JmDNS rendezvous;
29  
30      /*** the logger for this class */
31      private Log log = LogFactory.getLog(this.getClass());
32  
33      /*** manager to pass peer joined/left messages on to */
34      private PeerManager manager;
35  
36      /***
37       * Creates a new finder for Rendezvous messages
38       *
39       * @param jmdns a JmDNS implementation
40       * @param man the peerManager to add peers to
41       */
42      public JmDNSPeerFinder(final JmDNS jmdns, final PeerManager man)
43      {
44          this.rendezvous = jmdns;
45          this.manager = man;
46      }
47  
48      /***
49       * Add a service to the network
50       *
51       * @param jmdns the jmdns to add the service to
52       * @param type the type of the service to add
53       * @param name the service's name
54       */
55      public void addService(final JmDNS jmdns, final String type,
56                             final String name)
57      {
58          if(log.isDebugEnabled())
59          {
60              log.debug("addService: " + type + " name: " + name);
61          }
62  
63          if(type.equals(PeerManager.SWIRL_TYPE))
64          {
65          	if(log.isDebugEnabled())
66  	        {
67          		log.debug("trying to add peer");
68  	        }
69  
70              try
71              {
72                  ServiceInfo si = jmdns.getServiceInfo(type, name, TIME_OUT);
73  
74                  if(log.isDebugEnabled())
75                  {
76                      log.debug("adding Peer " + name + " si: " + si);
77                  }
78  
79                  Peer peer = new JmDNSPeer(this, si);
80  
81                  manager.addPeer(peer);
82                  cachedServices.put(name, peer.getUniqueID());
83              }
84              catch(Exception e)
85              {
86                  log.error("problem adding peer", e);
87              }
88          }
89      }
90  
91      /***
92       * Register's peers with the network
93       *
94       * @param info the serviceinfo for the peer
95       */
96      public void registerService(final ServiceInfo info)
97      {
98          try
99          {
100             rendezvous.registerService(info);
101         }
102         catch(IOException e)
103         {
104             log.error("trouble registering peer", e);
105         }
106     }
107 
108     /***
109      * Remove a service from the network
110      *
111      * @param jmdns the jmdns to remove the service from
112      * @param type the type of the service to remove
113      * @param name the service's name
114      */
115     public void removeService(final JmDNS jmdns, final String type,
116                               final String name)
117     {
118         if(log.isDebugEnabled())
119         {
120             log.debug("removeService: " + type + " name: " + name);
121         }
122 
123         if(type.equals(PeerManager.SWIRL_TYPE))
124         {
125             try
126             {
127                 //ServiceInfo si = jmdns.getServiceInfo(type, name, TimeOut);
128                 //ServiceInfo si = new ServiceInfo(type, name, 0, "");
129                 //log.debug("removing Peer " + name + " si: " + si);
130                 //Peer peer = new JmDNSPeer(this, si);
131                 manager.removePeer((String)cachedServices.get(name));
132                 cachedServices.remove(name);
133             }
134             catch(Exception e)
135             {
136                 log.error("problem removing peer", e);
137             }
138         }
139     }
140 
141     /***
142      * Implemented for ServiceListener interface
143      *
144      * @param jmdns the component to resolve against
145      * @param type the Service type to resolve
146      * @param name the service name to resolve
147      */
148     public void resolveService(final JmDNS jmdns, final String type,
149                                final String name)
150     {
151         log.info("Resolved: " + name + " jmdns: " + jmdns + " type: " + type);
152     }
153 
154     /***
155      * Implemented for ServiceListener interface
156      *
157      * @param jmdns the component to resolve against
158      * @param type the Service type to resolve
159      * @param name the service name to resolve
160      * @param info the serviceInfo for the service
161      */
162     public void resolveService(final JmDNS jmdns, final String type,
163                                final String name, final ServiceInfo info)
164     {
165         log.info("Resolved with props: " + info);
166     }
167 
168     /***
169      * Register with the network and start listening for other Swirl Servers
170      */
171     public void start()
172     {
173         if(log.isDebugEnabled())
174         {
175             log.debug("starting");
176         }
177 
178         try
179         {
180             // listen for other non-Swirl services
181             rendezvous.registerServiceType(PeerManager.SWIRL_TYPE);
182 
183             // listen for service announcements from peers
184             rendezvous.addServiceListener(PeerManager.SWIRL_TYPE, this);
185         }
186         catch(Exception ex)
187         {
188             log.error("Trouble starting JmDNSPeerFinder", ex);
189         }
190 
191         if(log.isDebugEnabled())
192         {
193             log.debug("started");
194         }
195     }
196 
197     /***
198      * Removes this servicelistener from the network and closes its connections
199      */
200     public void stop()
201     {
202         if(log.isDebugEnabled())
203         {
204             log.debug("stopping");
205         }
206 
207         rendezvous.removeServiceListener(this);
208         rendezvous.close();
209 
210         if(log.isDebugEnabled())
211         {
212             log.debug("stopped");
213         }
214     }
215 
216     /***
217      * unregister's peers with the network
218      *
219      * @param info the serviceinfo for the peer
220      */
221     public void unregisterService(final ServiceInfo info)
222     {
223         rendezvous.unregisterService(info);
224     }
225 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/FileLauncherFactory.html
##-----------------TITLE------------------------##
FileLauncherFactory xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 27, 2004
3    */
4   package swirl.workspace.common;
5   
6   /***
7    * DOCUMENT ME!
8    *
9    * @author bpillet
10   */
11  public class FileLauncherFactory
12  {
13      /***
14       * TODO
15       *
16       * @return TODO
17       *
18       * @throws RuntimeException TODO
19       */
20      public static FileLauncher createLauncher()
21      {
22          String os = System.getProperty("os.name");
23  
24          if(os.indexOf("Windows") != -1)
25          {
26              return new WindowsFileLauncher();
27          }
28          else if(os.startsWith("Mac"))
29          {
30          		return new MacFileLauncher();
31          }
32          else
33          {
34              throw new RuntimeException("Could not find FileLauncher for os: "
35                                         + os);
36          }
37      }
38  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/MePeerFinder.html
##-----------------TITLE------------------------##
MePeerFinder xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.awt.Color;
4   
5   import org.apache.commons.httpclient.URIException;
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   
9   /***
10   * DOCUMENT ME!
11   *
12   * @author bpillet
13   */
14  public class MePeerFinder implements PeerFinder
15  {
16      /*** the logger for this class */
17      private Log log = LogFactory.getLog(this.getClass());
18  
19      /*** a peer that uses the localhost and port 8765 */
20      private Peer peer8765;
21  
22      /*** a peer that uses the local ip address and port 9876 */
23      private Peer peer9876;
24  
25      /*** the peerManager for the application */
26      private PeerManager peerManager;
27  
28      /***
29       * Create a finder that doesn't connect to the network, and only uses the
30       * localhost for peers
31       *
32       * @param manager the peer manager to add the peers to
33       */
34      public MePeerFinder(final PeerManager manager)
35      {
36          this.peerManager = manager;
37      }
38  
39      /***
40       * Adds 2 peers to the peerManager, both on the localhost but using
41       * different ports
42       */
43      public void start()
44      {
45          if(log.isDebugEnabled())
46          {
47              log.debug("starting");
48          }
49  
50          try
51          {
52              peer8765 = new BasePeer(Color.BLUE, "My shadow",
53                                      "http://localhost:8765/slide");
54              peerManager.addPeer(peer8765);
55              peer9876 = new BasePeer(Color.BLACK, "Me",
56                                      "http://"
57                                      + PeerManager.getLocalAddress()
58                                                   .getHostAddress()
59                                      + ":9876/slide");
60              peerManager.addPeer(peer9876);
61          }
62          catch(URIException ex)
63          {
64              log.error("couldn't get host of peer", ex);
65          }
66  
67          if(log.isDebugEnabled())
68          {
69              log.debug("started");
70          }
71      }
72  
73      /***
74       * Removes both peers from the peerManager
75       */
76      public void stop()
77      {
78          if(log.isDebugEnabled())
79          {
80              log.debug("stopping");
81          }
82  
83          peerManager.removePeer(peer8765.getUniqueID());
84          peerManager.removePeer(peer9876.getUniqueID());
85  
86          if(log.isDebugEnabled())
87          {
88              log.debug("stopped");
89          }
90      }
91  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/MacFileLauncher.html
##-----------------TITLE------------------------##
MacFileLauncher xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 27, 2004
3    */
4   package swirl.workspace.common;
5   
6   import java.io.File;
7   import java.io.IOException;
8   
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  
12  /***
13   * DOCUMENT ME!
14   *
15   * @author bpillet
16   */
17  public class MacFileLauncher implements FileLauncher
18  {
19  	
20      /*** the logger for this class */
21      private Log log = LogFactory.getLog(this.getClass());
22  
23      public MacFileLauncher()
24      {
25      	if(log.isDebugEnabled())
26          {
27      		log.debug("()");
28          }
29      }
30      
31  	public Process launch(String url) throws IOException 
32      {
33          if(log.isDebugEnabled())
34          {
35              log.debug("launch(" + url + ")");
36          }
37  
38          String temp = url;
39  
40          //first trim the path off
41          if(temp.lastIndexOf('//') != -1)
42          {
43              temp = temp.substring(temp.lastIndexOf('//'));
44          }
45  
46          if(temp.lastIndexOf('/') != -1)
47          {
48              temp = temp.substring(temp.lastIndexOf('/'));
49          }
50          
51          temp = "/Volumes/swirl" + NetUtils.decode(temp);
52  
53          if(log.isDebugEnabled())
54          {
55              log.debug("final url is this: " + temp);
56          }
57         
58          File f = new File(temp);
59          if(f.exists())
60          {
61          		// temp = "open " + "'" + temp + "'";
62  	        	if(log.isDebugEnabled())
63  		        {
64  	        		log.debug("Mac command: open " + temp);
65  		        }
66                  String[] macCommand = new String[] {"open", temp};
67          		Process process =  Runtime.getRuntime().exec(macCommand);
68          		return process;
69          }
70          else
71          {
72          		throw new IOException(temp + " does not exist.  Don't forget to mount swirl");
73          }
74      }
75  
76  
77  	public Process launch(String url, String mime) throws IOException {
78  		return launch(url);
79  	}
80  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/ColorUtils.html
##-----------------TITLE------------------------##
ColorUtils xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.common;
2   
3   import java.awt.Color;
4   import java.io.IOException;
5   import java.net.URL;
6   import java.util.Properties;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  
11  /***
12   * @author bpillet
13   */
14  public final class ColorUtils {
15  	/*** a logger for this class */
16      private static Log log = LogFactory.getLog(ColorUtils.class);
17  
18  	private ColorUtils() {}
19  	
20  	public static String colorToString(Color c)
21      {
22  		if(log.isDebugEnabled())
23          {
24  			log.debug("colorToString(" + c + ")");
25          }
26  		StringBuffer b = new StringBuffer();
27  		b.append(c.getRed());
28  		b.append(' ');
29  		b.append(c.getGreen());
30  		b.append(' ');
31  		b.append(c.getBlue());
32      	return b.toString();
33      }
34  
35  	public static Color[] palette = new Color[24];
36  	static
37  	{
38  //		for(int i = 0; i < palette.length; ++i)
39  //		{
40  //			float h = (float)i/(float)palette.length;
41  //			float s = 1;//(float)1 / (float)(i%2 +1);
42  //			float b = 1;//(float)1 / (float)(i%2 + 1);
43  //			palette[i] = new Color(Color.HSBtoRGB(h, s, b));
44  //			System.err.println("h: " + h + "\ts: " + s + "\tb: " + b + "\tpalette: " + Color.HSBtoRGB(h, s, b));
45  //		}
46  		int dim = (int)Math.pow(palette.length, 1.0/3.0);	//Math.cbrt(palette.length);
47  		int i = 0;
48  		for(int r = 0; r <= 255; r += 255/dim)
49  		{
50  			for(int g = 0; g <= 255; g += 255/dim)
51  			{
52  				for(int b = 0; b <= 255 && i < palette.length; b += 255/dim)
53  				{
54  					palette[i++] = new Color(r, g, b);
55  					//System.err.println("r: " + r + " g: " + g + " b: " + b);
56  				}
57  			}
58  		}
59  	}
60  	
61  	static Object[][] colors = {
62  			{"black", Color.black},
63  			{"blue", Color.blue},
64  			{"cyan", Color.cyan},
65  			{"darkGray", Color.darkGray},
66  			{"gray", Color.gray},
67  			{"green", Color.green},
68  			{"lightGray", Color.lightGray},
69  			{"magenta", Color.magenta},
70  			{"orange", Color.orange},
71  			{"pink", Color.pink},
72  			{"red", Color.red},
73  			{"white", Color.white},
74  			{"yellow", Color.yellow}
75  	};
76  
77  	public static Color stringToColor(String s)
78  	{
79  //		log.debug("stringToColor(" + s + ")");
80  		try {
81  			// get a resource
82  			URL	colorsURL = Thread.currentThread().getContextClassLoader().getResource("color.properties");
83  			Properties colorProperties = new Properties();
84  			colorProperties.load(colorsURL.openStream());
85  			
86  			// check the color
87  			String color = colorProperties.getProperty(s);
88  			if (color != null){
89  				if (color.startsWith("#") && color.length()==7) {
90  					// in the format #rrggbb
91  					try {
92  						return new Color(Integer.parseInt(color.substring(1, 3), 16), 
93  										 Integer.parseInt(color.substring(3, 5), 16), 
94  										 Integer.parseInt(color.substring(5, 7), 16));
95  					}
96  					catch (NumberFormatException nfe) {
97  					}
98  				}
99  				else {
100 					// try predefined color names
101 					for (int i = 0; i< colors.length; i++){
102 						if (color.compareToIgnoreCase((String)colors[i][0])==0) {
103 							return (Color)colors[i][1];
104 						}
105 					}
106 				}
107 			}
108 		}
109 		catch (IOException e) {
110 		}
111 		
112 		s = s.toLowerCase();
113 		s += "aaa";	// make sure s is at least 3 chars long
114 		
115 		// turn the first 3 letters of the string into integers
116 		int r = 0; 
117 		if (s.length()>0)
118 		    r = s.charAt(0) - 'a';
119 		int g = 0;
120 		if (s.length()>1)
121 		    g = s.charAt(1) - 'a';
122 		int b = 0;
123 		if (s.length()>2)
124 		    b = s.charAt(2) - 'a';
125 		Color min = null;
126 		double currentDistance = Double.MAX_VALUE;
127 		
128 		// compute the distance from that point to each of the colors, keeping the smallest one
129 		for(int i = 1; i < palette.length; ++i)
130 		{
131 			double distance = Math.pow(r - palette[i].getRed()/10, 2) + 
132 							Math.pow(g - palette[i].getGreen()/10, 2) +
133 							Math.pow(b - palette[i].getBlue()/10, 2);
134 			//log.debug("distance: " + distance + " color: " + palette[i] + "  min: " + min);
135 			if(distance < currentDistance)
136 			{
137 				min = palette[i];
138 				currentDistance = distance;
139 			}
140 		}
141 
142 		if(log.isDebugEnabled())
143         {
144 			log.debug("s: " + s + "(r,g,b): " + r + ", " + g + ", " + b + "   min: " + min + " distance: " + currentDistance);
145         }
146 		
147 		// let's try dumb rgb from three letters, 26 letters correspond to 255
148 		min = new Color(r * 10, g * 10, b * 10 );
149 		return min;
150 	}
151 	
152 	public static Color generateRandomColor()
153 	{
154 		int mod = 128;
155 		int r = (int)Math.random() * mod;
156 		int g = (int)Math.random() * mod;
157 		int b = (int)Math.random() * mod;
158 		return new Color(r, g, b);
159 	}
160 	
161 	public static String generateRandomColorString()
162 	{
163 		return colorToString(generateRandomColor());
164 	}
165 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/ModelListener.html
##-----------------TITLE------------------------##
ModelListener xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 19, 2004
3    */
4   package swirl.workspace.viz;
5   
6   import swirl.workspace.Peer;
7   import swirl.workspace.viz.pie.FileElement;
8   
9   /***
10   * DOCUMENT ME!
11   *
12   * @author dingx
13   */
14  public interface ModelListener
15  {
16      /***
17       * TODO
18       *
19       * @param file TODO
20       */
21      public void fileAdded(FileElement file);
22  
23      /***
24       * TODO
25       *
26       * @param file TODO
27       */
28      public void fileDeleted(FileElement file);
29  
30      /***
31       * TODO
32       *
33       * @param files TODO
34       */
35      public void filesAdded(FileElement[] files);
36      
37  	/***
38  	 * TODO
39  	 *
40  	 * @param file TODO
41  	 */
42  	public void fileUpdated(FileElement file);
43  
44      /***
45       * TODO
46       *
47       * @param peerId TODO
48       * @param files TODO
49       */
50      public void replaceFiles(String peerId, FileElement[] files);
51  
52      /***
53       * TODO
54       *
55       * @param file TODO
56       */
57      public void propertiesChanged(FileElement file, java.util.Map msg);
58  
59      /***
60       * TODO
61       *
62       * @param peer TODO
63       */
64      public void userJoined(Peer peer);
65  
66      /***
67       * TODO
68       *
69       * @param peerId TODO
70       */
71      public void userLeft(String peerId);
72      
73      /***
74       * TODO
75       *
76       * @param peerId TODO
77       */
78      public void flashIt(FileElement fe, String uColor);
79      
80  	/***
81  	 * TODO
82  	 *
83  	 * @param file TODO
84  	 */
85  	public void backupPromotedToPersistent(FileElement file);
86  	
87  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/PersistentLevel.html
##-----------------TITLE------------------------##
PersistentLevel xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    */
5   package swirl.workspace.viz.pie;
6   
7   import org.w3c.dom.Document;
8   
9   import swirl.workspace.viz.SharingLevel;
10  
11  /***
12   * DOCUMENT ME!
13   *
14   * @author dingx
15   */
16  public class PersistentLevel extends PublicLevel
17  {
18      /***
19       * DOCUMENT ME!
20       *
21       * @param peer
22       * @param doc
23       * @param sharinglevel
24       */
25      public PersistentLevel(GuiPeer peer, Document doc, SharingLevel sharinglevel)
26      {
27          super(peer, doc, sharinglevel);
28      }
29  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/AdvancedExportFileDialogBox.html
##-----------------TITLE------------------------##
AdvancedExportFileDialogBox xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Nov 16, 2004
3    *
4    * TODO To change the template for this generated file go to
5    * Window - Preferences - Java - Code Style - Code Templates
6    */
7   package swirl.workspace.viz.pie;
8   
9   import java.awt.BorderLayout;
10  import java.awt.Component;
11  import java.awt.Frame;
12  import java.awt.event.ActionEvent;
13  import java.awt.event.ActionListener;
14  import java.io.File;
15  import java.io.IOException;
16  import java.util.Iterator;
17  import java.util.List;
18  import java.util.LinkedList;
19  
20  import javax.swing.BorderFactory;
21  import javax.swing.JButton;
22  import javax.swing.JDialog;
23  import javax.swing.JFileChooser;
24  import javax.swing.JLabel;
25  import javax.swing.JOptionPane;
26  import javax.swing.JPanel;
27  import javax.swing.JScrollPane;
28  import javax.swing.JTable;
29  import javax.swing.border.TitledBorder;
30  import javax.swing.table.DefaultTableModel;
31  import javax.swing.table.TableColumn;
32  
33  import org.apache.commons.logging.Log;
34  import org.apache.commons.logging.LogFactory;
35  import org.apache.webdav.lib.methods.PropPatchMethod;
36  import org.w3c.dom.Document;
37  
38  import swirl.workspace.Peer;
39  import swirl.workspace.PeerManager;
40  import swirl.workspace.viz.SwirlFileFilter;
41  import swirl.workspace.viz.SwirlModel;
42  
43  /***
44   * @author depaula
45   *
46   * TODO To change the template for this generated type comment go to
47   * Window - Preferences - Java - Code Style - Code Templates
48   */
49  public class AdvancedExportFileDialogBox
50     extends JDialog {
51    private static final long serialVersionUID = 1L;
52    JPanel exportPanel = new JPanel();
53    BorderLayout borderLayout1 = new BorderLayout();
54    BorderLayout borderLayout2 = new BorderLayout();
55    BorderLayout borderLayout3 = new BorderLayout();
56    JPanel jPanel1 = new JPanel();
57    JPanel jPanel2 = new JPanel();
58    JPanel jPanel3 = new JPanel();
59    JButton jButtonCancel = new JButton();
60    JButton jButtonSave = new JButton();
61    JButton jButtonChangeDir = new JButton();
62    JButton jButtonClearDir = new JButton();
63    JLabel jLabelAdv = new JLabel();
64    JLabel jLabelDir = new JLabel();
65    TitledBorder titledBorder1 = new TitledBorder("");
66    JTable jTableFiles = new JTable();
67    JScrollPane jScrollFiles = new JScrollPane();
68    TableColumn tableColumn;
69    JOptionPane jOptionPane1 = new JOptionPane();
70    String colNames[] = {"Selected", "Files to Export"};
71    Object[][] data = {};
72    DefaultTableModel dtm;
73    String defaultDir = null;
74    String dirLabel;
75    Document doc;
76    PeerManager peerManager;
77    final String defaultDirLabel = " Target Directory: each file's orginal directory ";
78    final String defaultDirHead = " Target Directory: ";
79    
80    final String[] funnyQuoteDir = new String[] {
81    		"(Okay, I've heard!)",
82  		"(You bet)",
83  		"(What's up, doc?)",
84  		"(Stop, you're hurting me)",
85  		"(Hey boss, having fun?)",
86  		"(I know!)",
87  		"(You're the boss)",
88  		"(You can now export the file...)",
89  		"(Pleaseeeeeee)",
90  		"(Would you please stop?)",
91  		"(I'm getting annoyed!)",
92  		"(Duh!)",
93  		"(You tried your best and you failed miserably.)",
94  		"(Where's my burrito!)",
95  		"(Give me the number for 911.)"
96    };
97    
98    boolean annoyed = false;
99  
100   protected Log log = LogFactory.getLog(this.getClass());
101 
102   SwirlModel pieModel;
103   List updateList;
104   Object updateListMutex; 	
105 
106   public AdvancedExportFileDialogBox(Frame frame, String string, boolean _boolean, SwirlModel model, PeerManager _peerManager, Document _doc, List _updateList, Object _updateListMutex) {
107     super(frame, string, _boolean);
108     try {
109     	pieModel = model;	
110     	updateList = _updateList;
111     	updateListMutex = _updateListMutex;
112     	peerManager = _peerManager;
113     	doc = _doc;
114     	setDefaultCloseOperation(DISPOSE_ON_CLOSE);
115     	jbInit();
116     	pack();
117     	}
118     	catch (Exception exception) {
119     		exception.printStackTrace();
120     }	
121   }	
122   
123   public AdvancedExportFileDialogBox(SwirlModel model, PeerManager _peerManager, Document _doc, List _updateList, Object _updateListMutex) {
124     this(new Frame(), "AdvancedExportFileDialogBox", false, model, _peerManager, _doc, _updateList, _updateListMutex);
125   }
126 
127   public AdvancedExportFileDialogBox(String string, boolean _boolean, SwirlModel model, PeerManager _peerManager, Document _doc, List _updateList, Object _updateListMutex) {
128     this(new Frame(), string, _boolean, model, _peerManager, _doc, _updateList, _updateListMutex);
129   }
130 
131   private void jbInit() throws Exception {
132   	//this.setDefaultCloseOperation(DHIDE_ON_CLOSE);
133     exportPanel.setLayout(borderLayout1);
134     jPanel1.setLayout(borderLayout2);
135     jPanel2.setLayout(borderLayout3);
136     jButtonCancel.setActionCommand("jButtonCancel");
137     jButtonCancel.setText("Cancel");
138     jButtonCancel.addActionListener(new ActionListener() {
139       public void actionPerformed(ActionEvent actionEvent) {
140         jButtonCancel_actionPerformed(actionEvent);
141       }
142     });
143     jButtonSave.setActionCommand("jButtonSave");
144     jButtonSave.setText("Save Selected Files");
145     jButtonSave.addActionListener(new ActionListener() {
146       public void actionPerformed(ActionEvent actionEvent) {
147         jButtonSave_actionPerformed(actionEvent);
148       }
149     });
150     jButtonChangeDir.setActionCommand("jButtonChangeDir");
151     jButtonChangeDir.setText("Change Directory");
152     jButtonChangeDir.addActionListener(new ActionListener() {
153       public void actionPerformed(ActionEvent actionEvent) {
154         jButtonChangeDir_actionPerformed(actionEvent);
155       }
156     });
157     jButtonClearDir.setActionCommand("jButtonClearDir");
158     jButtonClearDir.setText("Restore Directory");
159     jButtonClearDir.addActionListener(new ActionListener() {
160       public void actionPerformed(ActionEvent actionEvent) {
161         jButtonClearDir_actionPerformed(actionEvent);
162       }
163     });
164     jLabelAdv.setText(" Select files to be exported:");
165     
166     dirLabel = defaultDirLabel;
167     jLabelDir.setText(dirLabel);
168     
169     setTable(); 
170     getContentPane().add(exportPanel);
171 
172     jPanel3.add(jButtonSave);
173     jPanel3.add(jButtonCancel);
174     jPanel3.add(jButtonChangeDir);
175     jPanel3.add(jButtonClearDir);
176 
177     jPanel1.add(jLabelAdv, java.awt.BorderLayout.WEST);
178     jPanel2.add(jLabelDir, java.awt.BorderLayout.NORTH);
179     jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);
180     
181     exportPanel.add(jPanel2, java.awt.BorderLayout.SOUTH);
182     exportPanel.add(jScrollFiles, java.awt.BorderLayout.CENTER);
183     exportPanel.add(jPanel1, java.awt.BorderLayout.NORTH);
184     
185   }
186   
187   private void setTable() {
188     dtm = addFilesToRows(dtm);
189     jTableFiles.setModel(dtm);
190     
191     jTableFiles.getColumnModel().getColumn(0).setMaxWidth(64);
192     jTableFiles.getColumnModel().getColumn(0).setMinWidth(32);
193         
194     jScrollFiles.setViewportView(jTableFiles);
195     tableColumn = jTableFiles.getColumnModel().getColumn(0);
196     tableColumn.setCellEditor(jTableFiles.getDefaultEditor(Boolean.class));
197     tableColumn.setCellRenderer(jTableFiles.getDefaultRenderer(Boolean.class));
198 
199     jScrollFiles.setBorder(BorderFactory.createLoweredBevelBorder());
200     //jTableFiles.setTableHeader(null);
201 
202   }
203   
204   private DefaultTableModel addFilesToRows(DefaultTableModel _dtm) {
205   	if (_dtm == null) _dtm = new DefaultTableModel(data,colNames);
206 
207   	synchronized(updateListMutex) {
208 	List fileList = updateList;
209 	if (log.isDebugEnabled()) {
210 		log.debug("got fileList " + fileList);
211 	}
212 	if (fileList != null) {
213 		for (Iterator it = fileList.iterator(); it.hasNext();) {
214 			String path = (String) it.next();
215 			String filename = path.substring(path.lastIndexOf("/") + 1);
216 			_dtm.addRow(new Object[]{new Boolean(true),filename});
217 		}
218 	}
219   	}
220 	return _dtm;
221   }
222 
223   public void jButtonSave_actionPerformed(ActionEvent actionEvent) {
224   	boolean saved = false;
225   	synchronized(updateListMutex) {
226   	List filesToSave = new LinkedList(updateList);
227   	annoyed = false;
228 	Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
229 	
230 
231   	for (int i = 0; i < dtm.getRowCount(); i++) {
232   		if(log.isDebugEnabled())
233         {
234   			log.debug("jButtonSave_actionPerformed: " + (String) dtm.getValueAt(i,1) + 
235 				  " path (updateList): " + filesToSave.get(i) +
236 				  " value: " + ((Boolean) dtm.getValueAt(i,0)).booleanValue());
237         }
238   		if (((Boolean) dtm.getValueAt(i,0)).booleanValue()) {
239   			String path = (String) filesToSave.get(i);
240 			String filename = path.substring(path.lastIndexOf("/") + 1);
241 			
242 			String fileKey = peer.getUniqueID() + ":" + SwirlModel.SLIDE_ROOT + path;
243 			DotElement e = (DotElement) (doc.getElementById(fileKey));
244 			if(log.isDebugEnabled())
245 	        {
246 				log.debug("file key is: " + fileKey + "dotElement: "+ e.getNodeValue() + " localname: "+ e.getLocalName());
247 	        }
248 			
249 			if (defaultDir != null) {
250 				if(log.isDebugEnabled())
251 		        {
252 					log.debug("changing file directories: "+defaultDir);
253 		        }
254 				setNewPath(defaultDir, filename, e);
255 			} 
256 			
257 			pieModel.exportFile(e.getFileElement());
258 			//remove file from update list
259 			saved = true;
260   		}
261   	}
262   	if (saved) { 
263   		jButtonCancel.setText("Close");
264   		dtm = null;
265   		setTable();
266   		synchronized(updateListMutex) {
267   		if (updateList.isEmpty()) {
268   			jButtonSave.setEnabled(false);
269   			jButtonChangeDir.setEnabled(false);
270   			jButtonClearDir.setEnabled(false);
271   		}
272   		}
273   	}
274   	this.repaint();
275   	}
276  }
277   
278   private void setNewPath(String newPath, String filename, DotElement e) {
279   	
280   	if(log.isDebugEnabled())
281     {
282   		log.debug("setNewPath is called");
283     }
284 	Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
285 	try {
286 		String path = peer.getPath();
287 		if(log.isDebugEnabled())
288         {
289 			log.debug("peer: " + peer + "\n filename: "+ filename +"\n newPath:" + newPath + "\n peer path" + path);
290         }
291 		PropPatchMethod propPatch = new PropPatchMethod(path);
292 		propPatch.addPropertyToSet("localPath", newPath + File.separator + filename);
293 
294 		int status = peer.executeHttpRequestMethod(propPatch);
295 		if(log.isDebugEnabled())
296         {
297 			log.debug("propPatch result status: " + status);
298         }
299 		propPatch.releaseConnection();
300 		propPatch.recycle();
301 	} catch (IOException ex) {
302 		log.error(e, ex);
303 	}
304 
305 	FileElement f = e.getFileElement();
306 	f.setLocalPath(newPath + File.separator + filename);
307 	if(log.isDebugEnabled())
308     {
309 		log.debug("new path: " + f.getLocalPath());
310     }
311   	
312   }
313 
314   public void jButtonCancel_actionPerformed(ActionEvent actionEvent) {
315   	// Hide the window
316     this.setVisible( false );
317   }
318 
319   public void jButtonChangeDir_actionPerformed(ActionEvent actionEvent) {
320     File f = null;
321     JFileChooser fileChooser = new JFileChooser(); //makeAbsolute(currentExportPath));
322 
323     fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
324     fileChooser.setDialogTitle("Choose a new target directory to save the selected files...");
325     fileChooser.setFileHidingEnabled(false);
326     fileChooser.addChoosableFileFilter(new SwirlFileFilter());
327 
328     int choice = fileChooser.showOpenDialog((Component)this);
329 
330     if(log.isDebugEnabled())
331     {
332     	log.debug("Dir selected: APPROVE_OPTION value = "+JFileChooser.APPROVE_OPTION+" choice = "+choice);
333     }
334 	
335     if (choice == JFileChooser.APPROVE_OPTION)
336     {
337         f = fileChooser.getSelectedFile();
338         if (f.isDirectory()) {
339         		defaultDir = f.getAbsolutePath();
340         		dirLabel = defaultDirHead + defaultDir;
341         		jLabelDir.setText(dirLabel); 	
342         		this.repaint();
343         }
344     }
345 
346   	annoyed = false;
347   }
348   
349   public void jButtonClearDir_actionPerformed(ActionEvent actionEvent) {
350   	setLabelDir();
351   	this.repaint();
352   }
353   
354   private void setLabelDir() {
355   	if (defaultDir == null) {
356   		if (!annoyed) {
357   			dirLabel = defaultDirLabel + "(done!)";
358   			annoyed = true;
359   		} else {
360   			int quote = (int)(Math.random()*funnyQuoteDir.length);
361   			dirLabel = defaultDirLabel + funnyQuoteDir[quote];
362   		}
363   	} else {
364   		defaultDir = null;
365   		dirLabel = defaultDirLabel;
366   	}
367   	jLabelDir.setText(dirLabel); 	
368   }
369 
370   /*
371    *	/**
372    public void exportFiles(Document doc) {
373 	log.debug("exportFiles is called");
374 	*
375 	 * new Thread() { public void run() {
376 	 *
377 	Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
378 	List fileList = updateList;
379 	if (log.isDebugEnabled()) {
380 		log.debug("got fileList " + fileList);
381 	}
382 	if (fileList != null) {
383 		for (Iterator it = fileList.iterator(); it.hasNext();) {
384 			String path = (String) it.next();
385 			String filename = path.substring(path.lastIndexOf("/") + 1);
386 			String fileKey = peer.getUniqueID() + ":" + SLIDE_ROOT + path;
387 			DotElement e = (DotElement) (doc.getElementById(fileKey));
388 			log.debug("file key is: " + fileKey);
389 			exportFile(e.getFileElement());
390 		}
391 	}
392 	*
393 	 * } }.start();
394 	 *
395 }
396 
397    */
398 
399 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/WebDAVVisualization.html
##-----------------TITLE------------------------##
WebDAVVisualization xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   import java.awt.Color;
5   import java.awt.event.ActionEvent;
6   import java.util.Collections;
7   import java.util.Iterator;
8   import java.util.LinkedList;
9   import java.util.List;
10  import java.util.Map;
11  import java.util.Set;
12  
13  import javax.swing.JFrame;
14  import javax.swing.SwingUtilities;
15  
16  import org.apache.commons.logging.Log;
17  import org.apache.commons.logging.LogFactory;
18  
19  import swirl.workspace.Peer;
20  import swirl.workspace.messages.MessageProcessor;
21  import swirl.workspace.viz.pie.FileElement;
22  import edu.uci.ics.jung.graph.DirectedEdge;
23  import edu.uci.ics.jung.graph.Edge;
24  import edu.uci.ics.jung.graph.Graph;
25  import edu.uci.ics.jung.graph.Vertex;
26  import edu.uci.ics.jung.graph.decorators.StringLabeller;
27  import edu.uci.ics.jung.graph.impl.DirectedSparseEdge;
28  import edu.uci.ics.jung.graph.impl.DirectedSparseGraph;
29  import edu.uci.ics.jung.graph.impl.DirectedSparseVertex;
30  import edu.uci.ics.jung.utils.UserData;
31  import edu.uci.ics.jung.visualization.GraphDraw;
32  import edu.uci.ics.jung.visualization.LayoutMutable;
33  import edu.uci.ics.jung.visualization.VisualizationViewer;
34  import edu.uci.ics.jung.visualization.SpringLayout.UnitLengthFunction;
35  import edu.uci.ics.jung.visualization.graphdraw.EdgeColorFunction;
36  import edu.uci.ics.jung.visualization.graphdraw.SettableRenderer;
37  import edu.uci.ics.jung.visualization.graphdraw.VertexColorFunction;
38  
39  /***
40   * WebDAV visualization. This class displays the WebDAV accesses between Swirl
41   * servers. Display is done through JUNG.
42   */
43  public class WebDAVVisualization extends BaseVisualizer implements Controller,
44                                                                     MessageProcessor
45  {
46      /*** TODO */
47      private static final long serialVersionUID = 1L;
48  
49      /*** TODO */
50      protected Log log = LogFactory.getLog(this.getClass());
51  
52      /*** TODO */
53      boolean started = false;
54  
55      /*** TODO */
56      private final Color edgeHideColor = new Color(255, 0, 0, 0);
57  
58      /*** TODO */
59      private final Color edgeShowColor = new Color(255, 0, 0, 255);
60  
61      /*** TODO */
62      private final Color receiverColor = Color.red;
63  
64      /*** TODO */
65      private final Color senderColor = Color.green;
66  
67      /*** TODO */
68      private final Color vertexBG = Color.blue;
69  
70      /*** TODO */
71      private final Color vertexFG = Color.blue;
72  
73      /*** TODO */
74      private Graph g;
75  
76      /*** TODO */
77      private GraphDraw gd;
78  
79      // our own service type
80  
81      /*** TODO */
82      private JFrame jf;
83  
84      /*** TODO */
85      private LayoutMutable layout;
86  
87      /*** TODO */
88      private MyEdgeStringer es;
89  
90      /*** TODO */
91      private final String edgeShow = "Show";
92  
93      /*** TODO */
94      private final String edgeType = "edgeType";
95  
96      /*** TODO */
97      private final String inactive = "inactive";
98  
99      /*** TODO */
100     private final String vertexReceiver = "Receiver";
101 
102     /*** TODO */
103     private final String vertexSender = "Sender";
104 
105     /*** TODO */
106     private final String vertexType = "vertexType";
107 
108     /*** TODO */
109     private StringLabeller sl;
110 
111     /*** TODO */
112     private VisualizationViewer vv;
113 
114     /*** TODO */
115     private final int edgeLength = 120;
116 
117     // The messages is a queue that stores every access message. The message will
118     //		stay on for a while. Then it will be turned off by the animator thread
119 
120     /*** TODO */
121     private final int messageDuration = 1000;
122 
123     /*** TODO */
124     private List messages;
125 
126     /*** TODO */
127     private Thread animatorThread;
128 
129     /***
130      * Creates a new WebDAVVisualization object.
131      */
132     public WebDAVVisualization()
133     {
134         if(log.isDebugEnabled())
135         {
136             log.debug("()");
137         }
138 
139         g = new DirectedSparseGraph();
140         sl = StringLabeller.getLabeller(g);
141         es = new MyEdgeStringer(g);
142         gd = new GraphDraw(g);
143 
144         SettableRenderer sr = new SettableRenderer(sl, es);
145 
146         gd.setRenderer(sr);
147         layout = new edu.uci.ics.jung.visualization.SpringLayout(g,
148                                                                  new UnitLengthFunction(edgeLength));
149         gd.setGraphLayout(layout);
150         vv = gd.getVisualizationViewer();
151         sr.setEdgeColorFunction(new EdgeColorFunction()
152             {
153                 public Color getEdgeColor(Edge e)
154                 {
155                     if(edgeShow.equals(e.getUserDatum(edgeType)))
156                     {
157                         return edgeShowColor;
158                     }
159                     else
160                     {
161                         return edgeHideColor;
162                     }
163                 }
164             });
165         sr.setVertexColorFunction(new VertexColorFunction()
166             {
167                 public Color getForeColor(Vertex v)
168                 {
169                     return vertexFG;
170                 }
171 
172                 public Color getBackColor(Vertex v)
173                 {
174                     if(vertexSender.equals(v.getUserDatum(vertexType)))
175                     {
176                         return senderColor;
177                     }
178                     else if(vertexReceiver.equals(v.getUserDatum(vertexType)))
179                     {
180                         return receiverColor;
181                     }
182                     else
183                     {
184                         return vertexBG;
185                     }
186                 }
187             });
188         messages = Collections.synchronizedList(new LinkedList());
189         animatorThread = new Thread()
190             {
191                 public void run()
192                 {
193                     while(started)
194                     {
195                         try
196                         {
197                             Thread.sleep(messageDuration);
198                         }
199                         catch(InterruptedException ie){}
200 
201                         long currentTime = System.currentTimeMillis();
202 
203                         while(true)
204                         {
205                             if(messages.isEmpty())
206                             {
207                                 break;
208                             }
209 
210                             MessageEntry head = (MessageEntry)messages.get(0);
211 
212                             if((head.startTime + messageDuration) > currentTime)
213                             {
214                                 break;
215                             }
216 
217                             head.e.setUserDatum(edgeType, inactive,
218                                                 UserData.CLONE);
219                             head.sender.setUserDatum(vertexType, inactive,
220                                                      UserData.CLONE);
221                             head.receiver.setUserDatum(vertexType, inactive,
222                                                        UserData.CLONE);
223                             messages.remove(0);
224                         }
225                     }
226                 }
227             };
228 
229         //animatorThread.start();
230         this.setLayout(new BorderLayout());
231         add(gd, BorderLayout.CENTER);
232     }
233 
234     /***
235      * TODO
236      *
237      * @return TODO
238      */
239     public Controller getController()
240     {
241         return this;
242     }
243 
244     /***
245      * TODO
246      *
247      * @return TODO
248      */
249     public Model getModel()
250     {
251         return null;
252     }
253 
254     /***
255      * TODO
256      *
257      * @return TODO
258      */
259     public String getName()
260     {
261         return "WebDAV Visualization";
262     }
263 
264     /***
265      * TODO
266      *
267      * @return TODO
268      */
269     public View getView()
270     {
271         return this;
272     }
273 
274     /***
275      * TODO
276      *
277      * @param e TODO
278      */
279     public void actionPerformed(ActionEvent e){}
280 
281     /***
282      * TODO
283      *
284      * @param msg TODO
285      */
286     public void processMessage(Map msg)
287     {
288         if(log.isDebugEnabled())
289         {
290             log.debug("processMessage(" + msg + ")");
291         }
292 
293         String sender = (String)msg.get("WEBDAV_CLIENT");
294         String receiver = (String)msg.get("WEBDAV_HOST");
295         String command = (String)msg.get("WEBDAV_COMMAND");
296         String path = (String)msg.get("WEBDAV_PATH");
297 
298         receiveMessage(sender, receiver, command + " on " + path);
299     }
300 
301     /*
302        private void removeVertex(String sender, String receiver, String message) {
303            String    name = si.getURL();
304            hosts.remove(name);
305            g.removeVertex(sl.getVertex(name));
306            sl.removeLabel(name);
307        }
308      */
309     public void receiveMessage(final String sender, final String receiver,
310                                final String message)
311     {
312         if(log.isDebugEnabled())
313         {
314             log.debug("receiveMessage(" + sender + ", " + receiver + ", "
315                       + message + ")");
316         }
317 
318         SwingUtilities.invokeLater(new Runnable()
319             {
320                 public void run()
321                 {
322                     vv.suspend();
323 
324                     Vertex vs = getVertex(sender);
325 
326                     vs.setUserDatum(vertexType, vertexSender, UserData.CLONE);
327 
328                     Vertex vr = getVertex(receiver);
329 
330                     vr.setUserDatum(vertexType, vertexReceiver, UserData.CLONE);
331 
332                     Edge e = connectEdge(vs, vr, message);
333 
334                     e.setUserDatum(edgeType, edgeShow, UserData.CLONE);
335 
336                     // record the current message
337                     messages.add(new MessageEntry(System.currentTimeMillis(),
338                                                   message, e, vs, vr));
339 
340                     synchronized(gd)
341                     {
342                         layout.update();
343                     }
344 
345                     if(!vv.isVisRunnerRunning())
346                     {
347                         vv.init();
348                     }
349                     else
350                     {
351                         vv.unsuspend();
352                     }
353 
354                     vv.repaint();
355                     gd.repaint();
356                 }
357             });
358     }
359 
360     /***
361      * TODO
362      */
363     public void start()
364     {
365         if(log.isDebugEnabled())
366         {
367             log.debug("starting");
368         }
369 
370         started = true;
371         animatorThread.start();
372 
373         if(log.isDebugEnabled())
374         {
375             log.debug("started");
376         }
377     }
378 
379     /***
380      * TODO
381      */
382     public void stop()
383     {
384         if(log.isDebugEnabled())
385         {
386             log.debug("stopping");
387         }
388 
389         started = false;
390 
391         if(log.isDebugEnabled())
392         {
393             log.debug("stopped");
394         }
395     }
396 
397     /***
398      * TODO
399      *
400      * @param peer TODO
401      */
402     public void userJoined(Peer peer){}
403 
404     /***
405      * TODO
406      *
407      * @param name TODO
408      *
409      * @return TODO
410      */
411     private Vertex getVertex(String name)
412     {
413         if(log.isDebugEnabled())
414         {
415             log.debug("getVertex(" + name + ")");
416         }
417 
418         Vertex v = sl.getVertex(name);
419 
420         if(v == null)
421         {
422             // add a node,
423             v = new DirectedSparseVertex();
424             g.addVertex(v);
425 
426             // set a label
427             try
428             {
429                 sl.setLabel(v, name);
430             }
431             catch(Exception e)
432             {
433                 e.printStackTrace();
434             }
435         }
436 
437         return v;
438     }
439 
440     /***
441      * TODO
442      *
443      * @param sender TODO
444      * @param receiver TODO
445      * @param label TODO
446      *
447      * @return TODO
448      */
449     private Edge connectEdge(Vertex sender, Vertex receiver, String label)
450     {
451         if(log.isDebugEnabled())
452         {
453             log.debug("connectEdge(" + sender + ", " + receiver + ", " + label);
454         }
455 
456         Set eges = g.getEdges();
457         DirectedEdge thisEdge = null;
458 
459         for(Iterator i = eges.iterator(); i.hasNext();)
460         {
461             DirectedEdge testEdge = (DirectedEdge)i.next();
462 
463             /*
464                Pair    vs = testEdge.getEndpoints();
465                if ( sender.equals(vs.getFirst()) && receiver.equals(vs.getSecond())
466                        ||
467                     sender.equals(vs.getSecond()) && receiver.equals(vs.getFirst()) )
468              */
469             if(sender.equals(testEdge.getSource())
470                && receiver.equals(testEdge.getDest()))
471             {
472                 thisEdge = testEdge;
473 
474                 break;
475             }
476         }
477 
478         if(thisEdge == null)
479         {
480             thisEdge = new DirectedSparseEdge(sender, receiver);
481             g.addEdge(thisEdge);
482         }
483 
484         es.setLabel(thisEdge, label);
485 
486         return thisEdge;
487     }
488 
489 	/* (non-Javadoc)
490 	 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
491 	 */
492 	public void flashIt(FileElement fe, String uColor) {
493 		// TODO Auto-generated method stub
494 		
495 	}
496 
497 	/* (non-Javadoc)
498 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
499 	 */
500 	public void backupPromotedToPersistent(FileElement file) {
501 		// TODO Auto-generated method stub
502 		
503 	}
504 
505 	/* (non-Javadoc)
506 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
507 	 */
508 	public void fileUpdated(FileElement file) {
509 		// TODO Auto-generated method stub
510 		
511 	}
512 
513 	/* (non-Javadoc)
514 	 * @see swirl.workspace.messages.MessageProcessor#initialMessageProcessor()
515 	 */
516 	public void initializeMessageProcessor() {
517 		// TODO Auto-generated method stub
518 		
519 	}
520 	
521 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/MkcolCommand.html
##-----------------TITLE------------------------##
MkcolCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.webdav.lib.methods.MkcolMethod;
8   
9   /***
10   * Proxies an WebDAV MKCOL command to a specific peer
11   *
12   * @author Ben Pillet/Kari Nies
13   */
14  public class MkcolCommand extends ProxyCommand
15  {
16      /***
17       * Constructor that calls super constructor
18       *
19       * @param req see super
20       * @param resp see super
21       * @param host see super
22       * @param path see super
23       * @param peerManager see super
24       */
25      public MkcolCommand(final HttpServletRequest req,
26                          final HttpServletResponse resp, final String host,
27                          final String path, final PeerManager peerManager)
28      {
29          super(req, resp, host, path, peerManager);
30      }
31  
32      /***
33       * Implements the abstract method from ProxyCommand to return a WebDAV
34       * MKCOL method
35       *
36       * @param url the url to execute the method on
37       *
38       * @return an instance of MkcolMethod
39       */
40      public HttpMethod createMethod(final String url)
41      {
42          MkcolMethod method = new MkcolMethod(url);
43  
44          /* it seems that you cannot forward a message body in the MkcolMethod implementation.
45             try
46             {
47                 method.setRequestBody(getRequest().getInputStream());
48                 method.setRequestContentLength(getRequest().getContentLength());
49             }
50             catch (IOException ex)
51             {
52                 log.error(ex);
53             }
54           */
55          return method;
56      }
57  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/SlidePermissionController.html
##-----------------TITLE------------------------##
SlidePermissionController xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.security;
2   
3   import java.io.IOException;
4   import java.util.Arrays;
5   import java.util.Collection;
6   import java.util.Enumeration;
7   import java.util.HashMap;
8   import java.util.Iterator;
9   import java.util.Vector;
10  
11  import org.apache.commons.httpclient.HostConfiguration;
12  import org.apache.commons.httpclient.HttpClient;
13  import org.apache.commons.httpclient.HttpException;
14  import org.apache.commons.logging.Log;
15  import org.apache.commons.logging.LogFactory;
16  import org.apache.webdav.lib.Ace;
17  import org.apache.webdav.lib.Privilege;
18  import org.apache.webdav.lib.Property;
19  import org.apache.webdav.lib.ResponseEntity;
20  import org.apache.webdav.lib.methods.AclMethod;
21  import org.apache.webdav.lib.methods.DepthSupport;
22  import org.apache.webdav.lib.methods.PropFindMethod;
23  import org.apache.webdav.lib.properties.AclProperty;
24  import org.picocontainer.Startable;
25  
26  import swirl.workspace.App;
27  import swirl.workspace.PeerManager;
28  
29  /***
30   * TODO
31   *
32   * @author $author$
33   * @version $Revision: 1.14 $
34   */
35  public class SlidePermissionController implements SwirlSecurity,
36                                                    Startable
37  {
38      /*** all of the webdav permissions for hidden files */
39      public static final String[] HIDDEN_PERMISSIONS = {};
40  
41      /*** all of the webdav permissions for see only files */
42      public static final String[] SEE_ONLY_PERMISSIONS = {"read"}; //SwirlSecurityHandler makes it so that user can't do a GET
43  
44      /*** all of the webdav permissions for read only files */
45      public static final String[] READ_ONLY_PERMISSIONS = {};
46  
47      /*** all of the webdav permissions for read, write, and copy files */
48      public static final String[] READ_WRITE_COPY_PERMISSIONS = 
49                                                                 {
50                                                                     "write",
51                                                                     "write-properties",
52                                                                     "write-content",
53                                                                     "unlock",
54                                                                     "read-acl",
55                                                                     "read-current-user-privilege-set",
56                                                                     "write-acl",
57                                                                     "bind",
58                                                                     "unbind"
59                                                                 };
60  
61      /*** all of the webdav permissions for persistent files */
62      public static final String[] PERSISTENT_PERMISSIONS = {};
63  
64      /*** all of the webdav permissions in an indexed array by level */
65      public static final String[][] LEVELS_PERMISSIONS = 
66                                                          {
67                                                              HIDDEN_PERMISSIONS,
68                                                              SEE_ONLY_PERMISSIONS,
69                                                              READ_ONLY_PERMISSIONS,
70                                                              READ_WRITE_COPY_PERMISSIONS,
71                                                              PERSISTENT_PERMISSIONS
72                                                          };
73  
74      /*** TODO */
75      HashMap levels = new HashMap();
76  
77      /*** the logger for this class */
78      private Log log = LogFactory.getLog(this.getClass());
79  
80      /*** TODO */
81      private Vector[] granted = new Vector[LEVELS_PERMISSIONS.length];
82  
83      /*** TODO */
84      private Vector[] revoked = new Vector[LEVELS_PERMISSIONS.length];
85  
86  	private HostConfiguration slide;
87  
88      /***
89       * TODO
90       *
91       * @param path TODO
92       * @param role TODO
93       * @param securityLevel TODO
94       *
95       * @throws UnsupportedOperationException TODO
96       */
97      public void setSecurityLevel(String path, String role, String securityLevel)
98                            throws UnsupportedOperationException
99      {
100         if(log.isDebugEnabled())
101         {
102             log.debug("setSecurityLevel(" + path + ", " + role + ", "
103                       + securityLevel + ")");
104         }
105 
106         int level = SecurityUtils.getLevelsIndex(securityLevel);
107         Vector grant = granted[level];
108         Vector revoke = revoked[level];
109 
110         if((grant == null) || (revoke == null))
111         {
112             grant = new Vector();
113             revoke = new Vector();
114 
115             for(int i = 0; i < LEVELS_PERMISSIONS.length; ++i)
116             {
117                 String[] permissions = LEVELS_PERMISSIONS[i];
118 
119                 if(i <= level)
120                 {
121                     grant.addAll(Arrays.asList(permissions));
122                 }
123                 else
124                 {
125                     revoke.addAll(Arrays.asList(permissions));
126                 }
127             }
128 
129             granted[level] = grant;
130             revoked[level] = revoke;
131         }
132 
133         try {
134 			setPermissions(path, role, grant, revoke);
135 		} catch (Exception e) {
136 			log.error(e, e);
137 			throw new UnsupportedOperationException(e.getLocalizedMessage());
138 		}
139 
140         levels.put(path + role, securityLevel);
141     }
142 
143     /***
144      * TODO
145      *
146      * @param path TODO
147      * @param role TODO
148      *
149      * @return TODO
150      */
151     public String getSecurityLevel(String path, String role)
152     {
153         String ret = (String)levels.get(path + role);
154 
155         if(ret == null)
156         {
157             ret = SwirlSecurity.HIDDEN;
158             setSecurityLevel(path, role, ret);
159         }
160 
161         if(log.isDebugEnabled())
162         {
163             log.debug("getSecurityLevel(" + path + ", " + role + "): " + ret);
164         }
165 
166         return ret;
167     }
168 
169     /***
170      * TODO
171      */
172     public void start()
173     {
174         if(log.isDebugEnabled())
175         {
176             log.debug("starting");
177         }
178 		slide = new HostConfiguration();
179 		slide.setHost(PeerManager.getLocalAddress().getHostAddress(), App.PORT);
180 
181         if(log.isDebugEnabled())
182         {
183             log.debug("started");
184         }
185     }
186 
187     /***
188      * TODO
189      */
190     public void stop()
191     {
192         if(log.isDebugEnabled())
193         {
194             log.debug("stopped");
195         }
196     }
197 
198     /***
199      * TODO
200      *
201      * @param path TODO
202      * @param user TODO
203      * @param grant TODO
204      * @param revoke TODO
205      */
206     private void setPermissions(String path, String user, Collection grant,
207                                 Collection revoke) throws RuntimeException
208     {
209         if(log.isDebugEnabled())
210         {
211             log.debug("setPermissions(" + path + ", " + user + ", " + grant
212                       + ", " + revoke + ")");
213         }
214 
215         String theUser = "/users/" + user;
216 
217         try
218         {
219             Ace othersDeniedAce = null;
220             Ace othersGrantedAce = null;
221 
222             HttpClient client = new HttpClient();
223             PropFindMethod prop = new PropFindMethod(path, DepthSupport.DEPTH_1);
224             int status = client.executeMethod(slide, prop);
225             if(log.isDebugEnabled()) {
226             	log.debug("status: " + status);
227             }
228             
229             AclProperty acl = null;
230             for(Enumeration responses = prop.getResponses(); responses.hasMoreElements(); )
231             {
232             	ResponseEntity response = (ResponseEntity)responses.nextElement();
233             	if(log.isDebugEnabled()) {
234             		log.debug("response: " + response.getHref());
235             	}
236             	for(Enumeration properties = response.getProperties(); properties.hasMoreElements(); )
237             	{
238             		Property property = (Property)properties.nextElement();
239             		if(log.isDebugEnabled()) {
240             			log.debug("property: " + property);
241             		}
242             		if(property instanceof AclProperty)
243             		{
244             			if(log.isDebugEnabled()) {
245             				log.debug("it's the acl, breaking");
246             			}
247             			acl = (AclProperty)property;
248             			break;
249             		}
250             	}
251             }
252             prop.releaseConnection();
253             prop.recycle();
254 
255             if(log.isDebugEnabled()) {
256             	log.debug("acl: " + acl);
257             }
258             
259             if(acl != null)
260             {
261                 Ace[] aces = acl.getAces();
262 
263                 for(int i = 0; i < aces.length; ++i)
264                 {
265                     if(log.isDebugEnabled())
266                     {
267                         log.debug(path + "[" + i + "]: " + aces[i]);
268                     }
269 
270                     if(aces[i].getPrincipal().equals(theUser)
271                        && !aces[i].isInherited())
272                     {
273                         if(aces[i].isNegative())
274                         {
275                             othersDeniedAce = aces[i];
276                         }
277                         else
278                         {
279                             othersGrantedAce = aces[i];
280                         }
281                     }
282                 }
283             }
284             if(log.isDebugEnabled()) {
285             	log.debug("othersDeniedAce: " + othersDeniedAce);
286             	log.debug("othersGrantedAce: " + othersGrantedAce);
287             }
288 
289             if(othersDeniedAce == null)
290             {
291                 othersDeniedAce = new Ace(theUser);
292                 othersDeniedAce.setNegative(true);
293             }
294 
295             if(othersGrantedAce == null)
296             {
297                 othersGrantedAce = new Ace(theUser);
298                 othersGrantedAce.setNegative(false);
299             }
300 
301             for(Iterator it = grant.iterator(); it.hasNext();)
302             {
303                 String permission = (String)it.next();
304                 Privilege privilege = new Privilege("DAV:", permission, null);
305 
306                 removePrivilege(othersDeniedAce, privilege);
307                 addPrivilege(othersGrantedAce, privilege);
308             }
309 
310             for(Iterator it = revoke.iterator(); it.hasNext();)
311             {
312                 String permission = (String)it.next();
313                 Privilege privilege = new Privilege("DAV:", permission, null);
314 
315                 removePrivilege(othersGrantedAce, privilege);
316                 addPrivilege(othersDeniedAce, privilege);
317             }
318 
319             AclMethod aclMethod = new AclMethod(path);
320             Ace[] aces = new Ace[]{othersDeniedAce, othersGrantedAce};
321             
322             for(int i = 0; i < aces.length; ++i)
323             {
324             	aclMethod.addAce(aces[i]);
325             }
326             status = client.executeMethod(slide, aclMethod);
327             
328             if(log.isDebugEnabled()) {
329             	log.debug("status: " + status + " text: " + aclMethod.getStatusText());
330             }
331             if(status != 200)
332             	throw new RuntimeException("Could not set permissions for " + path + ".  status: " + status);
333         }
334         catch(HttpException e)
335         {
336             log.error(e, e);
337         }
338         catch(IOException e)
339         {
340             log.error(e, e);
341         }
342     }
343 
344     /***
345      * TODO
346      *
347      * @param ace TODO
348      *
349      * @return TODO
350      */
351     private String aceToString(Ace ace)
352     {
353         StringBuffer buf = new StringBuffer();
354 
355         buf.append(ace);
356         buf.append('\n');
357 
358         if(ace != null)
359         {
360             for(Enumeration en = ace.enumeratePrivileges();
361                 (en != null) && en.hasMoreElements();)
362             {
363                 Privilege p = (Privilege)en.nextElement();
364 
365                 buf.append(p.getName());
366                 buf.append('\n');
367             }
368         }
369 
370         return buf.toString();
371     }
372 
373     /***
374      * TODO
375      *
376      * @param ace TODO
377      * @param p TODO
378      */
379     private void addPrivilege(Ace ace, Privilege p)
380     {
381         //check to see if ace already contains p
382         boolean contains = false;
383 
384         for(Enumeration en = ace.enumeratePrivileges();
385             (en != null) && en.hasMoreElements();)
386         {
387             Privilege temp = (Privilege)en.nextElement();
388 
389             if(temp.getName().equals(p.getName()))
390             {
391                 contains = true;
392             }
393         }
394 
395         if(!contains)
396         {
397             ace.addPrivilege(p);
398         }
399     }
400 
401     /***
402      * TODO
403      *
404      * @param ace TODO
405      * @param p TODO
406      */
407     private void removePrivilege(Ace ace, Privilege p)
408     {
409         Vector removes = new Vector();
410 
411         for(Enumeration en = ace.enumeratePrivileges();
412             (en != null) && en.hasMoreElements();)
413         {
414             Privilege temp = (Privilege)en.nextElement();
415 
416             if(temp.getName().equals(p.getName()))
417             {
418                 removes.addElement(p);
419             }
420         }
421 
422         for(Iterator it = removes.iterator(); it.hasNext();)
423         {
424             ace.removePrivilege((Privilege)it.next());
425         }
426     }
427 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/DotElementFactory.html
##-----------------TITLE------------------------##
DotElementFactory xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import java.awt.Color;
4   import java.io.BufferedReader;
5   import java.io.IOException;
6   import java.io.InputStream;
7   import java.io.InputStreamReader;
8   import java.io.Reader;
9   import java.net.URL;
10  import java.util.Enumeration;
11  import java.util.HashMap;
12  import java.util.Iterator;
13  import java.util.Vector;
14  
15  import org.apache.batik.dom.AbstractDocument;
16  import org.apache.batik.dom.svg.SVGDOMImplementation;
17  import org.apache.commons.logging.Log;
18  import org.apache.commons.logging.LogFactory;
19  import org.w3c.dom.Document;
20  import org.w3c.dom.Element;
21  
22  /***
23   * DOCUMENT ME!
24   *
25   * @author bpillet
26   */
27  public class DotElementFactory implements SVGDOMImplementation.ElementFactory
28  {
29      /*** TODO */
30      private static Log log = LogFactory.getLog(DotElementFactory.class);
31  
32      /*** TODO */
33      private static String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
34  
35      /*** TODO */
36      static HashMap providerMap = new HashMap();
37  
38      /***
39       * Creates a new DotElementFactory object.
40       */
41      public DotElementFactory()
42      {
43          super();
44  
45          if(log.isDebugEnabled())
46          {
47              log.debug("()");
48          }
49      }
50  
51      /***
52       * TODO
53       *
54       * @param doc TODO
55       * @param fe TODO
56       * @param uColor TODO
57       *
58       * @return TODO
59       */
60      public static DotElement createDotElement(Document doc, FileElement fe,
61                                                Color uColor, int dotSize)
62      {
63          Element element = doc.createElementNS(DotElement.URL, DotElement.TAG);
64          DotElement realDot = (DotElement)element;
65  
66          realDot.setFileElement(fe);
67          realDot.setColor(uColor);
68          if(log.isDebugEnabled())
69          {
70          	log.debug("dotSize: " + dotSize);
71          }
72          realDot.setSize(dotSize);
73  
74          return realDot;
75      }
76  
77      /***
78       * TODO
79       *
80       * @param prefix TODO
81       * @param doc TODO
82       *
83       * @return TODO
84       */
85      public Element create(String prefix, Document doc)
86      {
87          if(log.isDebugEnabled())
88          {
89              log.debug("create(" + prefix + ", " + doc + ")");
90          }
91  
92          return new DotElement(prefix, (AbstractDocument)doc);
93      }
94  
95      /***
96       * TODO
97       *
98       * @param cls TODO
99       *
100      * @return TODO
101      */
102     public static synchronized Iterator providers(Class cls)
103     {
104         ClassLoader cl = null;
105 
106         try
107         {
108             cl = cls.getClassLoader();
109         }
110         catch(SecurityException se)
111         {
112             // Ooops! can't get his class loader.
113         }
114 
115         // Can always request your own class loader. But it might be 'null'.
116         if(cl == null)
117         {
118             cl = DotElementFactory.class.getClassLoader();
119         }
120 
121         String serviceFile = "META-INF/services/" + cls.getName();
122 
123         System.out.println("File: " + serviceFile);
124 
125         Vector v = (Vector)providerMap.get(serviceFile);
126 
127         if(v != null)
128         {
129             return v.iterator();
130         }
131 
132         v = new Vector();
133         providerMap.put(serviceFile, v);
134 
135         // No class loader so we can't find 'serviceFile'.
136         if(cl == null)
137         {
138             return v.iterator();
139         }
140 
141         Enumeration e;
142 
143         try
144         {
145             e = cl.getResources(serviceFile);
146         }
147         catch(IOException ioe)
148         {
149             return v.iterator();
150         }
151 
152         while(e.hasMoreElements())
153         {
154             try
155             {
156                 URL u = (URL)e.nextElement();
157 
158                 System.out.println("URL: " + u);
159 
160                 InputStream is = u.openStream();
161                 Reader r = new InputStreamReader(is, "UTF-8");
162                 BufferedReader br = new BufferedReader(r);
163 
164                 String line = br.readLine();
165 
166                 while(line != null)
167                 {
168                     try
169                     {
170                         // First strip any comment...
171                         int idx = line.indexOf('#');
172 
173                         if(idx != -1)
174                         {
175                             line = line.substring(0, idx);
176                         }
177 
178                         // Trim whitespace.
179                         line = line.trim();
180 
181                         // If nothing left then loop around...
182                         if(line.length() == 0)
183                         {
184                             line = br.readLine();
185 
186                             continue;
187                         }
188 
189                         System.out.println("Line: " + line);
190 
191                         // Try and load the class 
192                         Object obj = cl.loadClass(line).newInstance();
193 
194                         // stick it into our vector...
195                         v.add(obj);
196                     }
197                     catch(Exception ex)
198                     {
199                         // Just try the next line
200                     }
201 
202                     line = br.readLine();
203                 }
204             }
205             catch(Exception ex)
206             {
207                 // Just try the next file...
208             }
209         }
210 
211         for(Iterator it = v.iterator(); it.hasNext();)
212         {
213             System.err.println("provider: " + it.next());
214         }
215 
216         return v.iterator();
217     }
218 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/LookupCodec.html
##-----------------TITLE------------------------##
LookupCodec xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 25, 2004
3    */
4   package swirl.workspace;
5   
6   import java.io.IOException;
7   import java.util.HashMap;
8   
9   import javax.servlet.ServletContext;
10  import javax.servlet.http.HttpServletRequest;
11  
12  import org.apache.commons.httpclient.HostConfiguration;
13  import org.apache.commons.httpclient.HttpClient;
14  import org.apache.commons.httpclient.HttpException;
15  import org.apache.commons.logging.Log;
16  import org.apache.commons.logging.LogFactory;
17  import org.apache.webdav.lib.methods.DepthSupport;
18  import org.apache.webdav.lib.methods.PropFindMethod;
19  
20  import swirl.workspace.common.NetUtils;
21  
22  /***
23   * DOCUMENT ME!
24   *
25   * @author bpillet
26   */
27  public class LookupCodec implements HostPathCodec
28  {
29      /*** lookup table for request paths to peers */
30      private HashMap urlToHost;
31  
32      /*** the client's request */
33      private HttpServletRequest request;
34  
35      /*** the logger for this class */
36      private Log log = LogFactory.getLog(this.getClass());
37  
38      /*** the application level scope that holds the lookup table */
39      private ServletContext context;
40  
41      /***
42       * Constructor that looks for a lookup table in the application's context
43       * that maintains href to peer mappings
44       *
45       * @param req the request from the client
46       * @param cont the context for the application
47       */
48      public LookupCodec(final HttpServletRequest req, final ServletContext cont)
49      {
50          this.context = cont;
51          this.request = req;
52          urlToHost = (HashMap)context.getAttribute("urlToHostMapping");
53  
54          if(urlToHost == null)
55          {
56              urlToHost = new HashMap();
57              context.setAttribute("urlToHostMapping", urlToHost);
58              // do a propfind to populate the urlToHostMapping
59              PropFindMethod propfind = new PropFindMethod("/swirl", DepthSupport.DEPTH_INFINITY);
60              HttpClient client = new HttpClient();
61              HostConfiguration hostConf = new HostConfiguration();
62              hostConf.setHost(PeerManager.getLocalAddress().getHostAddress(), App.PORT);
63              try {
64  				int status = client.executeMethod(hostConf, propfind);
65  				if(log.isDebugEnabled())
66  		        {
67  					log.debug("status: " + status);
68  		        }
69  			} catch (HttpException e) {
70  				log.error(e, e);
71  			} catch (IOException e) {
72  				log.error(e, e);
73  			}
74          }
75  
76          if(log.isDebugEnabled())
77          {
78              log.debug("urlToHost: " + urlToHost);
79          }
80      }
81  
82      /***
83       * Retrieves the host from an application level lookup table.  If it is not
84       * in the table, returns ""
85       *
86       * @return the host the client is proxied to
87       */
88      public String decodeHost()
89      {
90          if(log.isDebugEnabled())
91          {
92              log.debug("decodeHost: " + urlToHost.get(request.getServletPath()));
93          }
94  
95          // String es = NetUtils.encodeLastElement(request.getServletPath());
96          String es = NetUtils.encodeEachElement(request.getServletPath());
97          if(urlToHost.containsKey(es))
98          {
99              return (String)urlToHost.get(es);
100         }
101         else
102         {
103             return "";
104         }
105     }
106 
107     /***
108      * Adds /slide to the front of the client's requested path
109      *
110      * @return the path on the proxied host
111      */
112     public String decodePath()
113     {
114         if(log.isDebugEnabled())
115         {
116             log.debug("decodePath: " + SwirlCommand.SLIDE
117                       + request.getServletPath());
118         }
119 
120         return SwirlCommand.SLIDE + request.getServletPath();
121     }
122 
123     /***
124      * Adds the host to an application level lookup table on the server
125      *
126      * @param href the href to mangle
127      * @param encodeHost the host to encode
128      *
129      * @return the mangled href (which isn't changed in this implementation)
130      */
131     public String encodeHostInPath(final String href, final String encodeHost)
132     {
133         String ret = href.substring(SwirlCommand.SLIDE.length());
134 
135         if(log.isDebugEnabled())
136         {
137             log.debug("href without slide path: *" + ret + "*");
138         }
139 
140         if(ret.length() > 0)
141         {
142             log.debug("setting " + ret + " to host " + encodeHost);
143             urlToHost.put(ret, encodeHost);
144         }
145 
146         ret = SwirlCommand.SWIRL + ret;
147 
148         if(log.isDebugEnabled())
149         {
150             log.debug("modifyHref: urlToHost: " + urlToHost);
151         }
152 
153         if(log.isDebugEnabled())
154         {
155             log.debug("modifyHref: " + href + "\r\nencodeHost: " + encodeHost
156                       + "\r\nret: " + ret);
157         }
158 
159         return ret;
160     }
161 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/BaseSwirlCommand.html
##-----------------TITLE------------------------##
BaseSwirlCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.util.Iterator;
4   
5   import javax.servlet.http.HttpServletRequest;
6   import javax.servlet.http.HttpServletResponse;
7   
8   import org.apache.commons.httpclient.Header;
9   import org.apache.commons.httpclient.HttpMethod;
10  import org.apache.commons.logging.Log;
11  import org.apache.commons.logging.LogFactory;
12  
13  /***
14   * An abstract base class that other SwirlCommands can extend with some basic
15   * functionality
16   *
17   * @author Ben Pillet
18   */
19  public abstract class BaseSwirlCommand implements SwirlCommand
20  {
21      /*** the request from the client */
22      private HttpServletRequest request;
23  
24      /*** the response to the client */
25      private HttpServletResponse response;
26  
27      /*** commons-logging log that maps to this Command */
28      private Log log = LogFactory.getLog(this.getClass());
29  
30      /*** the peerManager with all peers in it */
31      private PeerManager peerManager;
32  
33      /*** the host to proxy to */
34      private String host;
35  
36      /*** the path on the proxied host */
37      private String path;
38  
39      /***
40       * Populates the properties of this SwirlCommand
41       *
42       * @param req the request from the client
43       * @param resp the response to the client
44       * @param newHost the host to proxy to
45       * @param newPath the path on the proxied host
46       * @param peerMan the peerManager of all peers
47       */
48      public BaseSwirlCommand(final HttpServletRequest req,
49                              final HttpServletResponse resp,
50                              final String newHost, final String newPath,
51                              final PeerManager peerMan)
52      {
53          setRequest(req);
54          setResponse(resp);
55          setHost(newHost);
56          setPath(newPath);
57          this.peerManager = peerMan;
58  
59          if(log.isDebugEnabled())
60          {
61              log.debug("host: " + host + "    path: " + path);
62          }
63      }
64  
65      /***
66       * Mutator to set the target host for this command.  May be empty
67       *
68       * @param newHost the new host to proxy to
69       */
70      public void setHost(final String newHost)
71      {
72          host = newHost;
73      }
74  
75      /***
76       * Accessor for the host that this command is executing on
77       *
78       * @return host to execute command on
79       */
80      public String getHost()
81      {
82          return host;
83      }
84  
85      /***
86       * Mutator method to set the path for this command
87       * http://domain.com/thepath
88       *
89       * @param newPath the new path/context
90       */
91      public void setPath(final String newPath)
92      {
93          path = newPath;
94      }
95  
96      /***
97       * Accessor for the path that this command is executing on
98       *
99       * @return path to execute command on
100      */
101     public String getPath()
102     {
103         return path;
104     }
105 
106     /***
107      * Accessor method for this commands peerManager
108      *
109      * @return this.peerManager
110      */
111     public PeerManager getPeerManager()
112     {
113         return peerManager;
114     }
115 
116     /***
117      * Mutator method for this command's client request
118      *
119      * @param req the request from the client
120      */
121     public void setRequest(final HttpServletRequest req)
122     {
123         this.request = req;
124     }
125 
126     /***
127      * Accessor for the request from the client
128      *
129      * @return request from the workspace client
130      */
131     public HttpServletRequest getRequest()
132     {
133         return request;
134     }
135 
136     /***
137      * Mutator method for this command's client response
138      *
139      * @param resp the response to the client
140      */
141     public void setResponse(final HttpServletResponse resp)
142     {
143         this.response = resp;
144     }
145 
146     /***
147      * Accessor method for the response to the client
148      *
149      * @return response to the workspace client
150      */
151     public HttpServletResponse getResponse()
152     {
153         return response;
154     }
155 
156     /***
157      * figure out which peer to proxy the request to
158      *
159      * @return a peer that matches the host property
160      *
161      * @throws Exception the host property did not match any of the peers
162      */
163     public Peer getTargetPeer() throws Exception
164     {
165         String searchPeer = getHost();
166 
167         if(searchPeer.length() == 0)
168         {
169             searchPeer = PeerManager.getLocalAddress().getHostAddress() + ":"
170                          + App.PORT;
171         }
172 
173         if(log.isDebugEnabled())
174         {
175             log.debug("searchPeer: " + searchPeer);
176         }
177 
178         for(Iterator it = getPeerManager().getPeersIterator(); it.hasNext();)
179         {
180             Peer peer = (Peer)it.next();
181             String peerHost = peer.getUniqueID();
182 
183             if(log.isDebugEnabled())
184             {
185                 log.debug("checking if " + searchPeer + " equals " + peerHost
186                           + ": " + searchPeer.equals(peerHost));
187             }
188 
189             if(searchPeer.equals(peerHost))
190             {
191                 log.debug("getTargetPeer: returning peer " + peer + "  host: "
192                           + getHost() + "  peerHost: " + peerHost);
193 
194                 return peer;
195             }
196         }
197 
198         log.warn("Could not find peer with address: " + searchPeer);
199 
200         throw new Exception("Couldn't find target peer");
201     }
202 
203     /***
204      * duplicate the headers from the response from the peer into the resposne
205      * to the client
206      *
207      * @param method the peer's method to copy from
208      */
209     protected void copyHeaders(final HttpMethod method)
210     {
211         //copy response headers over
212         Header[] headers = method.getResponseHeaders();
213 
214         for(int i = 0; i < headers.length; ++i)
215         {
216             String name = headers[i].getName();
217             String value = headers[i].getValue();
218 
219             if(name.equals("Date") || name.equals("Server"))
220             {
221             	if(log.isDebugEnabled())
222     	        {
223             		log.debug("response automatically puts date and server in response");
224     	        }
225             }
226             else
227             {
228             	if(log.isDebugEnabled())
229     	        {
230             		log.debug("header: " + name + "\nvalue: " + value);
231             		log.debug("newHeader: " + name + "\nvalue: "
232                           + value.replaceAll("slide", "swirl"));
233     	        }
234                 getResponse().addHeader(name, value.replaceAll("slide", "swirl"));
235             }
236         }
237     }
238 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/HeadCommand.html
##-----------------TITLE------------------------##
HeadCommand xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import javax.servlet.http.HttpServletRequest;
4   import javax.servlet.http.HttpServletResponse;
5   
6   import org.apache.commons.httpclient.HttpMethod;
7   import org.apache.commons.httpclient.methods.HeadMethod;
8   
9   /***
10   * Proxies an HTTP HEAD request which is essentially a GET request without the
11   * body (just the headers).
12   *
13   * @author bpillet
14   */
15  public class HeadCommand extends ProxyCommand
16  {
17      /***
18       * Constructor that calls super()
19       *
20       * @param req see parent
21       * @param resp see parent
22       * @param host see parent
23       * @param path see parent
24       * @param peerManager see super
25       */
26      public HeadCommand(final HttpServletRequest req,
27                         final HttpServletResponse resp, final String host,
28                         final String path, final PeerManager peerManager)
29      {
30          super(req, resp, host, path, peerManager);
31      }
32  
33      /***
34       * Implements parent's abstract method to generate a HeadMethod
35       *
36       * @param url the peer's url to proxy to
37       *
38       * @return an httpclient HeadMethod
39       */
40      public HttpMethod createMethod(final String url)
41      {
42          return new HeadMethod(url);
43      }
44  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/GuiPeer.html
##-----------------TITLE------------------------##
GuiPeer xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    */
5   package swirl.workspace.viz.pie;
6   
7   import java.awt.Color;
8   import java.util.HashMap;
9   import java.util.Iterator;
10  import java.util.Map;
11  
12  import org.apache.batik.dom.util.XLinkSupport;
13  import org.apache.batik.util.SVGConstants;
14  import org.apache.commons.logging.Log;
15  import org.apache.commons.logging.LogFactory;
16  import org.w3c.dom.Document;
17  import org.w3c.dom.Element;
18  import org.w3c.dom.NamedNodeMap;
19  import org.w3c.dom.Node;
20  import org.w3c.dom.NodeList;
21  import org.w3c.dom.events.EventTarget;
22  
23  import swirl.workspace.Peer;
24  import swirl.workspace.PeerManager;
25  import swirl.workspace.viz.SharingLevel;
26  
27  /***
28   * DOCUMENT ME!
29   *
30   * @author dingx
31   */
32  public class GuiPeer
33  {
34      //the group to hold filedots
35  
36      /*** TODO */
37      private Element fileGroup;
38  
39      //the group to hold background pies
40  
41      /*** TODO */
42      private Element levelGroup;
43  
44      //user name element
45  
46      /*** TODO */
47      private Element textElement;
48  
49      /*** TODO */
50      private Log log = LogFactory.getLog(this.getClass());
51  
52      /*** TODO */
53      private Map fileDots = new HashMap();
54  
55      /*** TODO */
56      private Map levels = new HashMap();
57  
58      /*** TODO */
59      private Peer delegate;
60  
61      /*** TODO */
62      private PieWorkSpace parent;
63  
64      //the start angle for this pie
65  
66      /*** TODO */
67      private double startAngle;
68  
69      /***
70       * Creates a new GuiPeer object.
71       *
72       * @param peer TODO
73       * @param doc TODO
74       * @param start TODO
75       * @param workspace TODO
76       */
77      public GuiPeer(Peer peer, Document doc, PieWorkSpace workspace)
78      {
79          delegate = peer;
80          parent = workspace;
81          //change the paths for the user name text
82          Node tpnode = doc.getElementById(PieWorkSpace.TEXT_PATH_ID);
83          NamedNodeMap tpmap = tpnode.getAttributes();
84  
85          //make the text at the outer of the circle
86          String d = Util.caculateDforPath(PieWorkSpace.RADIUS + 5,
87          		workspace.getPeerNumber() + 1);
88  
89          (tpmap.getNamedItem("d")).setNodeValue(d);
90  
91  
92          String userID = peer.getUniqueID();
93  
94          levelGroup = doc.createElementNS(PieWorkSpace.svgNS, "g");
95  
96          levelGroup.setAttributeNS(null, "id", userID);
97  
98          for(int i = 0; i < SharingLevel.SHARING_LEVEL; i++)
99          {
100             PublicLevel level = new PublicLevel(this, doc, new SharingLevel(i));
101 
102             levels.put(String.valueOf(i), level);
103         }
104 
105         fileGroup = doc.createElementNS(PieWorkSpace.svgNS, "g");
106         fileGroup.setAttributeNS(null, "id", Util.getFileGroupforUser(userID));
107          //creat track for the text
108         String c = getStringColor();
109 
110         //creat text element		
111         textElement = doc.createElementNS(PieWorkSpace.svgNS, "text");
112         textElement.setAttributeNS(null, "font-family", "verdana");
113         textElement.setAttributeNS(null, "font-size", "18");
114         textElement.setAttributeNS(null, "fill", c);
115         
116         Element textPath = doc.createElementNS(PieWorkSpace.svgNS, "textPath");
117 
118         XLinkSupport.setXLinkHref(textPath, "#" + PieWorkSpace.TEXT_PATH_ID);
119         textPath.setAttributeNS(null, "startOffset", "47%");
120 
121         Node textNode = doc.createTextNode(delegate.getUserName());
122 
123         textPath.appendChild(textNode);
124         textElement.appendChild(textPath);
125         levelGroup.appendChild(textElement);
126         parent.getUserGroup().appendChild(levelGroup);
127         parent.getFileGroup().appendChild(fileGroup);
128     
129    }
130 
131     protected GuiPeer()
132     {
133         if(log.isDebugEnabled())
134         {
135             log.debug("(GuiPeer)");
136         }
137     }
138 
139     /***
140      * TODO
141      *
142      * @return TODO
143      */
144     public Color getColor()
145     {
146         return delegate.getColor();
147     }
148 
149     /***
150      * DOCUMENT ME!
151      *
152      * @return
153      */
154     public String getKey()
155     {
156         return delegate.getUniqueID();
157     }
158 
159     public Peer getDelegate() {
160         return delegate;
161     }
162 
163     /***
164      * TODO
165      *
166      * @return TODO
167      */
168     public boolean isLocal()
169     {
170         return delegate.getUniqueID().equals(PeerManager.getLocalUserID());
171     }
172 
173     /***
174      * TODO
175      *
176      * @return TODO
177      */
178     public PieWorkSpace getParent()
179     {
180         return parent;
181     }
182 
183     /***
184      * TODO
185      *
186      * @return TODO
187      */
188     public String getStringColor()
189     {
190         return Util.getStringColor(getColor());
191     }
192 
193     /***
194      * TODO
195      *
196      * @return TODO
197      */
198     public Node getUserGroup()
199     {
200         return levelGroup;
201     }
202 
203     /***
204      * TODO
205      *
206      * @param fe TODO
207      */
208     public void addFile(FileElement fe)
209     {
210         if(fileDots.get(fe.getKey()) != null)
211         {
212         	if(log.isDebugEnabled())
213             {
214         		log.debug("File already exists:" + fe.getKey());
215             }
216             return;
217         }
218         if(log.isDebugEnabled())
219         {
220         	log.debug("sharingLevel1 is " + fe.getShareDegree().getValue());
221         }
222         DotElement dot = DotElementFactory.createDotElement(parent.getDocument(),
223                                                             fe,
224                                                             delegate.getColor(), parent.getDotSize());
225         if(log.isDebugEnabled())
226         {
227         	log.debug("sharingLevel1 is " + fe.getShareDegree().getValue());
228         }
229 
230         //only circle can receive that events
231         ((EventTarget)dot.getChildNodes().item(0)).addEventListener(SVGConstants.SVG_MOUSEDOWN_EVENT_TYPE,
232                                             parent.getView().getMouseEvent(),
233                                             false);
234         ((EventTarget)dot.getChildNodes().item(0)).addEventListener(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE,
235                 parent.getView().getMouseEvent(),
236                 false);
237         ((EventTarget)dot).addEventListener(SVGConstants.SVG_CLICK_EVENT_TYPE,
238                                             parent.getView().getMouseEvent(),
239                                             false);
240         ((EventTarget)dot).addEventListener(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE,
241                 parent.getView().getMouseEvent(),
242                 false);
243 
244         if(log.isDebugEnabled())
245         {
246         	log.debug("relative angle in FileElement is " + fe.getReangle());
247         	log.debug("radius in FileElement is " + fe.getRadius());
248         }
249         
250         if(fe.hasReangle() && fe.hasRadius()){
251         	dot.newLocation(startAngle, Util.getAngle(parent.getPeerNumber()),fe.getRadius(), fe.getReangle(),
252         			parent.getPeerNumber(), parent.getPeerIndex(delegate.getUniqueID()));
253         } else {
254         	dot.newLocation(startAngle, Util.getAngle(parent.getPeerNumber()), parent.getPeerNumber(), parent.getPeerIndex(delegate.getUniqueID()));		
255         }
256         
257         if(log.isDebugEnabled())
258         {
259         	log.debug("add file to guipie:" + fe.getKey());
260         }
261         fileGroup.appendChild(dot);
262         fileDots.put(fe.getKey(), dot);
263     }
264 
265     /***
266      * TODO
267      *
268      * @param start TODO
269      * @param peerNum TODO
270      *
271      * @return TODO
272      */
273     public double adjustAngle(double start, double arcAngle)
274     {
275         NamedNodeMap gmap = levelGroup.getAttributes();
276 
277         //tranform the group
278         startAngle = start;
279 
280         String transform = Util.caculateTransformforPath(PieWorkSpace.getCenter()
281                                                                      .getX(),
282                                                          PieWorkSpace.getCenter()
283                                                                      .getY(),
284                                                          start);
285 
286         levelGroup.setAttributeNS(null, "transform", transform);
287      //   (gmap.getNamedItem("transform")).setNodeValue(transform);
288 
289         //change path for slices
290         for(Iterator it = levels.values().iterator(); it.hasNext();)
291         {
292             PublicLevel level = (PublicLevel)it.next();
293 
294             level.adjustAngle(arcAngle);
295         }
296 
297         //change tranform for files
298         transform = Util.getTranslateString(PieWorkSpace.getCenter().getX(),
299                                          PieWorkSpace.getCenter().getY());
300         fileGroup.setAttributeNS(null, "transform", transform);
301 
302         for(Iterator it = fileDots.values().iterator(); it.hasNext();)
303         {
304             DotElement dot = (DotElement)it.next();
305             //if(dot.getSharingLevel().getValue() != 0){
306             	//dot.newLocation(start, arcAngle);
307 				dot.setNumberOfUsers(parent.getPeerNumber(), parent.getPeerIndex(delegate.getUniqueID()));
308             //}
309         }
310         if(this.isLocal())
311         {
312             String c = getStringColor();
313         	parent.getMaskLayer().setAttribute("style",
314                     "fill:" + c
315                     + ";stroke:none;opacity:.1");
316             Element clone = (Element)levelGroup.cloneNode(true);
317             NodeList nl = clone.getElementsByTagName("path");
318             clone.removeChild(nl.item(0));
319             
320             NodeList childlist = parent.getMaskLayer().getElementsByTagName("g");
321 
322             for(int j = 0; j < nl.getLength(); j++)
323             {
324                 Element child = (Element)nl.item(j);
325                 child.removeAttribute("fill");
326                 child.removeAttribute("stroke");
327             }
328             if(childlist.getLength() > 0){
329             	//suppose there is only g child
330             	parent.getMaskLayer().replaceChild(clone, childlist.item(0));
331             }else{
332             	parent.getMaskLayer().appendChild(clone);
333             }
334             
335         }
336         return start + arcAngle;
337     }
338 
339     /***
340      * TODO
341      */
342     public void detach()
343     {
344     	parent.getUserGroup().removeChild(levelGroup);
345         parent.getFileGroup().removeChild(fileGroup);
346     }
347 
348 	/***
349 	 * @param fileKey
350 	 */
351 	public void removeFile(String fileKey) {
352 		if(log.isDebugEnabled())
353         {
354 			log.debug("the file to remove is " + fileKey);
355         }
356 		Element dot = (Element)fileDots.get(fileKey);
357 		if (dot != null) {
358 			Node p = dot.getParentNode();
359 			p.removeChild(dot);
360 			fileDots.remove(fileKey);
361 		}
362 	}
363 
364 	/***
365 	 * @param key
366 	 */
367 	public DotElement getDot(String key) {
368 		
369 		DotElement dot = (DotElement)fileDots.get(key);
370 		return dot;
371 		
372 	}
373 
374 	/***
375 	 * @return
376 	 */
377 	public double getStartAngle() {
378 		return this.startAngle;
379 	}
380 
381 	/***
382 	 * @param dotSize
383 	 */
384 	public void setDotSize(int dotSize) {
385 		for(Iterator it = fileDots.values().iterator(); it.hasNext(); )
386 		{
387 			DotElement dot = (DotElement)it.next();
388 			dot.setSize(dotSize);
389 		}
390 	}
391 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/slide/FileSystemContentStore.html
##-----------------TITLE------------------------##
FileSystemContentStore xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.slide;
2   
3   import java.io.IOException;
4   import java.io.InputStream;
5   import java.io.OutputStream;
6   
7   import org.apache.commons.logging.Log;
8   import org.apache.commons.logging.LogFactory;
9   import org.apache.slide.common.ServiceAccessException;
10  import org.apache.slide.common.Uri;
11  import org.apache.slide.content.NodeRevisionContent;
12  import org.apache.slide.content.NodeRevisionDescriptor;
13  import org.apache.slide.content.RevisionAlreadyExistException;
14  import org.apache.slide.content.RevisionNotFoundException;
15  import org.apache.slide.store.ContentStore;
16  import org.apache.slide.store.txfile.AbstractTxFileStoreService;
17  import org.apache.slide.store.txfile.rm.ResourceManagerException;
18  import org.apache.slide.store.util.FileHelper;
19  
20  /***
21   * DOCUMENT ME!
22   *
23   * @author bpillet
24   */
25  public class FileSystemContentStore extends AbstractTxFileStoreService
26      implements ContentStore
27  {
28      /*** TODO */
29      protected static final String LOG_CHANNEL = FileSystemContentStore.class
30                                                  .getName();
31  
32      /*** commons-logging log that maps to this class */
33      protected Log log = LogFactory.getLog(LOG_CHANNEL);
34  
35      /***
36       * TODO
37       *
38       * @param uri TODO
39       * @param revisionDescriptor TODO
40       * @param revisionContent TODO
41       *
42       * @throws ServiceAccessException TODO
43       * @throws RevisionAlreadyExistException TODO
44       */
45      public void createRevisionContent(Uri uri,
46                                        NodeRevisionDescriptor revisionDescriptor,
47                                        NodeRevisionContent revisionContent)
48                                 throws ServiceAccessException, 
49                                        RevisionAlreadyExistException
50      {
51          if(log.isDebugEnabled())
52          {
53              log.debug("starting createRevisionContent(" + uri + ", "
54                        + revisionDescriptor + ", " + revisionContent + ")");
55          }
56  
57          String revisionUri = revisionUri = uri.toString() + "_"
58                                             + revisionDescriptor
59                                               .getRevisionNumber();
60  
61          try
62          {
63              rm.createResource(getActiveTxId(), revisionUri, false);
64              storeRevisionContent(uri, revisionDescriptor, revisionContent);
65          }
66          catch(RevisionNotFoundException e)
67          {
68              // Can not be, as we just created it. If it unexpectedly is, this is fatal 
69              throwInternalError(e, uri.toString());
70          }
71          catch(ResourceManagerException e)
72          {
73              if(e.getStatus() == ResourceManagerException.ERR_RESOURCE_EXISTS)
74              {
75                  throw new RevisionAlreadyExistException(uri.toString(),
76                                                          revisionDescriptor
77                                                          .getRevisionNumber());
78              }
79              else
80              {
81                  throwInternalError(e, uri.toString());
82              }
83          }
84  
85          if(log.isDebugEnabled())
86          {
87              log.debug("ending createRevisionContent(" + uri + ", "
88                        + revisionDescriptor + ", " + revisionContent + ")");
89          }
90      }
91  
92      /***
93       * TODO
94       *
95       * @param uri TODO
96       * @param revisionDescriptor TODO
97       *
98       * @throws ServiceAccessException TODO
99       */
100     public void removeRevisionContent(Uri uri,
101                                       NodeRevisionDescriptor revisionDescriptor)
102                                throws ServiceAccessException
103     {
104         if(log.isDebugEnabled())
105         {
106             log.debug("starting removeRevisionContent(" + uri + ", "
107                       + revisionDescriptor + ")");
108         }
109 
110         String revisionUri = uri.toString() + "_"
111                              + revisionDescriptor.getRevisionNumber();
112 
113         try
114         {
115             rm.deleteResource(getActiveTxId(), revisionUri);
116         }
117         catch(ResourceManagerException e)
118         {
119             throwInternalError(e, uri.toString());
120         }
121 
122         if(log.isDebugEnabled())
123         {
124             log.debug("ending removeRevisionContent(" + uri + ", "
125                       + revisionDescriptor + ")");
126         }
127     }
128 
129     /***
130      * TODO
131      *
132      * @param uri TODO
133      * @param revisionDescriptor TODO
134      *
135      * @return TODO
136      *
137      * @throws ServiceAccessException TODO
138      * @throws RevisionNotFoundException TODO
139      */
140     public NodeRevisionContent retrieveRevisionContent(Uri uri,
141                                                        NodeRevisionDescriptor revisionDescriptor)
142                                                 throws ServiceAccessException, 
143                                                        RevisionNotFoundException
144     {
145         if(log.isDebugEnabled())
146         {
147             log.debug("starting retrieveRevisionContent(" + uri + ", "
148                       + revisionDescriptor + ")");
149         }
150 
151         String revisionUri = uri.toString() + "_"
152                              + revisionDescriptor.getRevisionNumber();
153 
154         try
155         {
156             Object txId = getActiveTxId();
157             InputStream is;
158 
159             if(txId != null)
160             {
161                 is = rm.readResource(txId, revisionUri);
162             }
163             else
164             {
165                 is = rm.readResource(revisionUri);
166             }
167 
168             NodeRevisionContent result = new NodeRevisionContent();
169 
170             result.setContent(is);
171 
172             if(log.isDebugEnabled())
173             {
174                 log.debug("ending retrieveRevisionContent(" + uri + ", "
175                           + revisionDescriptor + ")\nret: " + result);
176             }
177 
178             return result;
179         }
180         catch(ResourceManagerException e)
181         {
182             if(e.getStatus() == ResourceManagerException.ERR_NO_SUCH_RESOURCE)
183             {
184                 throw new RevisionNotFoundException(uri.toString(),
185                                                     revisionDescriptor
186                                                     .getRevisionNumber());
187             }
188             else
189             {
190                 throwInternalError(e, uri.toString());
191                 if (log.isDebugEnabled()){
192                 	log.debug("ending retrieveRevisionContent(" + uri + ", "
193                             + revisionDescriptor + ")\nret: " + null);
194                 }
195 
196 
197                 return null; // XXX fake (is never called)
198             }
199         }
200     }
201 
202     /***
203      * TODO
204      *
205      * @param uri TODO
206      * @param revisionDescriptor TODO
207      * @param revisionContent TODO
208      *
209      * @throws ServiceAccessException TODO
210      * @throws RevisionNotFoundException TODO
211      */
212     public void storeRevisionContent(Uri uri,
213                                      NodeRevisionDescriptor revisionDescriptor,
214                                      NodeRevisionContent revisionContent)
215                               throws ServiceAccessException, 
216                                      RevisionNotFoundException
217     {
218         if(log.isDebugEnabled())
219         {
220             log.debug("starting storeRevisionContent(" + uri + ", "
221                       + revisionDescriptor + ", " + revisionContent + ")");
222         }
223 
224         String revisionUri = revisionUri = uri.toString() + "_"
225                                            + revisionDescriptor
226                                              .getRevisionNumber();
227 
228         OutputStream os = null;
229         InputStream is = null;
230 
231         try
232         {
233             os = rm.writeResource(getActiveTxId(), revisionUri);
234             is = revisionContent.streamContent();
235 
236             if(is != null)
237             {
238                 long contentBytes = FileHelper.copy(is, os);
239                 long contentLength = revisionDescriptor.getContentLength();
240 
241                 revisionDescriptor.setContentLength(contentBytes);
242 
243                 if((contentLength != -1) && (contentBytes != contentLength))
244                 {
245                     rm.deleteResource(getActiveTxId(), revisionUri);
246                     throwInternalError("Content length does not match expected");
247                 }
248             }
249         }
250         catch(IOException e)
251         {
252             throwInternalError(e, uri.toString());
253         }
254         catch(ResourceManagerException e)
255         {
256             if(e.getStatus() == ResourceManagerException.ERR_NO_SUCH_RESOURCE)
257             {
258                 throw new RevisionNotFoundException(uri.toString(),
259                                                     revisionDescriptor
260                                                     .getRevisionNumber());
261             }
262             else
263             {
264                 throwInternalError(e, uri.toString());
265             }
266         }
267         finally
268         {
269             try
270             {
271                 if(os != null)
272                 {
273                     os.close();
274                 }
275             }
276             catch(IOException e){}
277 
278             try
279             {
280                 if(is != null)
281                 {
282                     is.close();
283                 }
284             }
285             catch(IOException e){}
286         }
287 
288         if(log.isDebugEnabled())
289         {
290             log.debug("ending storeRevisionContent(" + uri + ", "
291                       + revisionDescriptor + ", " + revisionContent + ")");
292         }
293     }
294 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/ModelTestVisualizer.html
##-----------------TITLE------------------------##
ModelTestVisualizer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   import java.awt.event.ActionEvent;
5   import java.io.ByteArrayOutputStream;
6   import java.io.PrintStream;
7   
8   import javax.swing.JScrollPane;
9   import javax.swing.JTextArea;
10  
11  import junit.framework.TestSuite;
12  import junit.textui.TestRunner;
13  
14  import org.apache.commons.logging.Log;
15  import org.apache.commons.logging.LogFactory;
16  
17  import swirl.workspace.Peer;
18  import swirl.workspace.viz.pie.FileElement;
19  
20  /***
21   * @author bpillet
22   */
23  public class ModelTestVisualizer extends BaseVisualizer implements Controller
24  {
25      /*** TODO */
26      private static final long serialVersionUID = 1L;
27  
28      /*** TODO */
29      private Log log = LogFactory.getLog(this.getClass());
30  
31  	Model model;
32  	swirl.workspace.security.SecurityManager securityMan;
33  	
34  	JTextArea textArea = new JTextArea();
35  	
36  	public ModelTestVisualizer(Model model,
37              swirl.workspace.security.SecurityManager manager)
38  	{
39  		this.model = model;
40  		setLayout(new BorderLayout(6, 11));
41  		securityMan = manager;
42  		
43  		JScrollPane scrollPane = new JScrollPane(textArea);
44  
45          add(scrollPane, BorderLayout.CENTER);
46  	}
47  
48  	public String getName() {
49  		return "Test Visualizer";
50  	}
51  
52  	public Model getModel() {
53  		return model;
54  	}
55  
56  	public void start() {
57          if(log.isDebugEnabled())
58          {
59          	log.debug("starting");
60          }
61  		ByteArrayOutputStream bout = new ByteArrayOutputStream();
62  		PrintStream pout = new PrintStream(bout);
63  	
64  		TestRunner runner = new TestRunner(pout);
65          TestSuite suite = new TestSuite();
66          String[] tests = new String[]{
67          		"testGetFiles1",
68          		"testGetFiles2",
69          		"testGetFiles3",
70  				"testGetPeer",
71          		"testGetPeerNumber",
72          		"testGetPeers",
73  				"testGetUserColor",
74  				"testProcessMessage1",
75  				"testProcessMessage2",
76  				"testResetLocalSharingDegree",
77  				"testSetSharingDegree1",
78  				"testSetSharingDegree2",
79          		"testImportAndDelete"
80  				};
81          for(int i = 0; i < tests.length; ++i)
82          	suite.addTest(new ModelTest(model, tests[i]));
83          
84  
85  		runner.doRun(suite);
86  		
87  		textArea.setText(bout.toString());
88  	}
89  
90  	public void stop() {
91          if(log.isDebugEnabled())
92          {
93          	log.debug("stopping");
94          }
95  	}
96  
97  	public void actionPerformed(ActionEvent e) {
98          if(log.isDebugEnabled())
99          {
100         	log.debug("actionPerformed(" + e + ")");
101         }
102 	}
103 
104 	public Controller getController() {
105 		return this;
106 	}
107 
108 	public void userJoined(Peer peer) {
109         if(log.isDebugEnabled())
110         {
111         	log.debug("userJoined(" + peer + ")");
112         }
113 	}
114 
115 	public void flashIt(FileElement fe, String uColor) {
116         if(log.isDebugEnabled())
117         {
118         	log.debug("flashIt(" + fe + ", " + uColor + ")");
119         }
120 	}
121 
122 	/* (non-Javadoc)
123 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
124 	 */
125 	public void backupPromotedToPersistent(FileElement file) {
126 		// TODO Auto-generated method stub
127 		
128 	}
129 
130 	/* (non-Javadoc)
131 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
132 	 */
133 	public void fileUpdated(FileElement file) {
134 		// TODO Auto-generated method stub
135 		
136 	}
137 	
138 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/ModelTest.html
##-----------------TITLE------------------------##
ModelTest xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Color;
4   import java.io.File;
5   import java.net.URL;
6   import java.util.HashMap;
7   import java.util.Vector;
8   
9   import junit.framework.TestCase;
10  
11  import org.apache.commons.logging.Log;
12  import org.apache.commons.logging.LogFactory;
13  
14  import swirl.workspace.Peer;
15  import swirl.workspace.PeerManager;
16  import swirl.workspace.viz.pie.FileElement;
17  
18  /***
19   * @author bpillet
20   */
21  public class ModelTest extends TestCase {
22      private Log log = LogFactory.getLog(this.getClass());
23      SwirlModel model;
24      String localUser = PeerManager.getLocalUserID();
25  
26  	public ModelTest(Model model, String testName) {
27  		super(testName);
28  		this.model = (SwirlModel)model;
29  		log.debug("localUser: " + localUser);
30  	}
31  
32  	public void testGetPeerNumber()
33  	{
34  		int num = model.getPeerNumber();
35  		log.debug("num: " + num);
36  		assertEquals("Please test this with 2 peers", 2, num);
37  	}
38  
39  	String[] goodFiles = new String[]{"0.txt", "1.txt", "2.txt", "3.txt", "4.txt",
40  			"1.svg", "2.svg", "3.svg", "4.svg"};
41  	
42  	public void testGetFiles1()
43  	{
44  		FileElement[] files = model.getFiles();
45  		
46  		// make sure 0.txt, 1.txt, 2.txt, 3.txt, and 4.txt are in files
47  		// and 1.svg, 2.svg, 3.svg, 4.svg are in files
48  		for(int i = 0; i < goodFiles.length; ++i)
49  		{
50  			boolean hasFile = contains(files, goodFiles[i]);
51  			assertTrue("The files that came back don't contain " + goodFiles[i], hasFile);
52  		}
53  	}
54  	
55  	private boolean contains(FileElement[] files, String file)
56  	{
57  		log.debug("contains(" + files + ", " + file + ")");
58  		boolean hasFile = false;
59  		for(int j = 0; j < files.length; ++j)
60  		{
61  			log.debug(files[j].getName() + " ?= " + file + ": " +
62  					(files[j].getName().equals(file)));
63  			if(files[j].getName().equals(file))
64  				hasFile = true;
65  		}
66  		return hasFile;
67  	}
68  	
69  	public void testGetFiles2()
70  	{
71  		log.debug("testGetFiles2----------------------------------------------");
72  		Peer[] peers = model.getPeers();
73  		for(int i = 0; i < peers.length; ++i)
74  		{
75  			FileElement[] files = model.getFiles(peers[i].getUniqueID());
76  			log.debug("peers.uniqueId: " + peers[i].getUniqueID() + "\nlocalUser: " + localUser);
77  			for(int j = 0; j < 5; ++j)
78  			{
79  				if(peers[i].getUniqueID().equals(localUser))
80  					assertTrue("The files that came back from " + peers[i].getUserName() + " at " + peers[i].getUniqueID() +
81  							" doesn't contain " + j + ".txt", contains(files, j + ".txt"));
82  				else if(j > 0)
83  					assertTrue("The files that came back from " + peers[i].getUserName() + " at " + peers[i].getUniqueID() +
84  						" doesn't contain " + j + ".svg", contains(files, j + ".svg"));
85  			}
86  		}
87  	}
88  
89  	public void testImportAndDelete()
90  	{
91  		URL u = Thread.currentThread().getContextClassLoader().getResource("log4j.properties");
92  		log.debug("u: " + u + "\nu.1: " + u.getFile() + "\nu.2: " + u.getPath());
93  		File f = new File(u.getFile().substring(1));
94  		
95  		log.debug("f: " + f);
96  		assertTrue("file doesn't exist", f.exists());
97  		Vector v= new Vector();
98  		v.add(f);
99  		model.importFiles(v);
100 		
101 		FileElement[] files = model.getFiles(localUser);
102 		assertTrue("didn't import file to workspace: " + f.getName(), contains(files, f.getName()));
103 		
104 		FileElement file = null;
105 		for(int i = 0; i < files.length; ++i)
106 		{
107 			if(files[i].getName().equals(f.getName()))
108 				file = files[i];
109 		}
110 		log.debug("file: " + file);
111 		
112 		model.delete(file);
113 
114 		files = model.getFiles(localUser);
115 		assertTrue("didn't delete file from workspace: " + f.getName(),
116 				!contains(files, f.getName()));
117 	}
118 	
119 	public void testGetFiles3()
120 	{
121 		
122 		for(int j = 0; j < 5; ++j)
123 		{
124 			log.debug("testGetFiles3 j: " + j);
125 			FileElement[] file = model.getFiles(localUser, "/slide/" + j + ".txt");
126 			for(int i = 0; i < file.length; ++i)
127 			{
128 				log.debug("testGetFiles3 - file[i]: " + file[i].getName());
129 			}
130 			assertEquals("file should be length 1 for " + j + ".txt", 1, file.length);
131 			assertEquals(j + ".txt", file[0].getName());
132 			//assertEquals("/slide", file[0].getPath());
133 			assertEquals(file[0].getOwnerKey(), localUser);
134 			assertFalse(file[0].isDir());
135 		}
136 
137 		for(int j = 1; j < 5; ++j)
138 		{
139 			log.debug("testGetFiles3 j: " + j);
140 			FileElement[] file = model.getFiles("128.195.30.105:9876", "/slide/" + j + ".svg");
141 			for(int i = 0; i < file.length; ++i)
142 			{
143 				log.debug("testGetFiles3 - file[i]: " + file[i].getName());
144 			}
145 			assertEquals("file should be length 1 for " + j + ".svg", 1, file.length);
146 			assertEquals(j + ".svg", file[0].getName());
147 			//assertEquals("/slide", file[0].getPath());
148 			assertEquals(file[0].getOwnerKey(), "128.195.30.105:9876");
149 			assertFalse(file[0].isDir());
150 		}
151 	}
152 	
153 	public void testGetPeer()
154 	{
155 		Peer mePeer = model.getPeer(localUser);
156 		assertNotNull(mePeer);
157 		assertEquals(mePeer.getUniqueID(), localUser);
158 	}
159 	
160 	public void testGetPeers()
161 	{
162 		Peer[] peers = model.getPeers();
163 		assertEquals("There must be only 2 peers online for accurate testing", 2, peers.length);
164 		
165 		boolean iExist = false;
166 		for(int i = 0; i < peers.length; ++i)
167 		{
168 			if(peers[i].getUniqueID().equals(localUser))
169 				iExist = true;
170 		}
171 		
172 		assertTrue("I don't exist", iExist);
173 	}
174 	
175 	public void testGetUserColor()
176 	{
177 		Color c = model.getUserColor(localUser);
178 		assertEquals(Color.BLUE, c);
179 	}
180 		
181 	public void testProcessMessage1()
182 	{
183 		//PUT
184 		HashMap msg = new HashMap();
185         msg.put("WEBDAV_COMMAND", "PUT");
186         msg.put("WEBDAV_PATH", "/slide/web.xml");
187         msg.put("WEBDAV_CLIENT", PeerManager.getLocalAddress().getHostAddress());
188 
189         model.processMessage(msg);
190         
191         FileElement[] files = model.getFiles(localUser);
192         log.debug("processMessage1");
193 		assertTrue("told model that web.xml was added, but it isn't in files list",
194 				contains(files, "web.xml"));
195 	}
196 
197 	public void testProcessMessage2()
198 	{
199 		//PROPPATCH
200 		HashMap msg = new HashMap();
201         msg.put("WEBDAV_COMMAND", "PROPPATCH");
202         msg.put("WEBDAV_PATH", "/slide/1.txt");
203         msg.put("WEBDAV_CLIENT", PeerManager.getLocalAddress().getHostAddress());
204 
205         model.processMessage(msg);
206 	}
207 	
208 	public void testResetLocalSharingDegree()
209 	{
210 		model.resetLocalSharingDegree();
211 		FileElement[] files = model.getFiles(localUser);
212 		assertTrue("files shouldn't be empty", files.length > 0);
213 		for(int i = 0; i < files.length; ++i)
214 		{
215 			assertEquals(files[i].getName() + " should have a sharing level of 0", 0,
216 					files[i].getNumberDegree());
217 		}
218 	}
219 	
220 	public void testSetSharingDegree1()
221 	{
222 		log.debug("testSetSharingDegree1");
223 		
224 		for(int i = 0; i <= SharingLevel.SHARING_LEVEL; ++i)
225 		{
226 			FileElement[] file = model.getFiles(localUser, "/slide/" + i + ".txt");
227 			model.setSharingDegree(file[0], new SharingLevel(i));
228 			FileElement[] newFile = model.getFiles(localUser, "/slide/" + i + ".txt");
229 			assertEquals(newFile[0].getName() + " should have a sharing level of " + i, i,
230 					newFile[0].getNumberDegree());
231 		}
232 	}
233 	
234 	public void testSetSharingDegree2()
235 	{
236 		for(int i = 0; i <= SharingLevel.SHARING_LEVEL; ++i)
237 		{
238 			model.setSharingDegree("/slide/" + i + ".txt", new SharingLevel(i));
239 			FileElement[] newFile = model.getFiles(localUser, "/slide/" + i + ".txt");
240 			assertEquals(newFile[0].getName() + " should have a sharing level of " + i, i,
241 					newFile[0].getNumberDegree());
242 		}
243 	}
244 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/RMIRegistry.html
##-----------------TITLE------------------------##
RMIRegistry xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import org.picocontainer.Startable;
4   
5   /***
6    * Simple Interface for an RMIRegistry implementation
7    *
8    * @author bpillet
9    */
10  public interface RMIRegistry extends Startable
11  {
12      /***
13       * TODO
14       *
15       * @return TODO
16       */
17      public boolean isAvailable();
18  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/SVGPieController.html
##-----------------TITLE------------------------##
SVGPieController xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 12, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   import java.awt.event.ActionEvent;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  
11  import swirl.workspace.viz.Controller;
12  import swirl.workspace.viz.Model;
13  
14  /***
15   * DOCUMENT ME!
16   *
17   * @author dingx
18   */
19  public class SVGPieController implements Controller
20  {
21      /*** TODO */
22      private Log log = LogFactory.getLog(this.getClass());
23  
24      /*** TODO */
25      private Model model;
26  
27      /***
28       * Creates a new SVGPieController object.
29       *
30       * @param model TODO
31       */
32      public SVGPieController(Model model)
33      {
34          this.model = model;
35      }
36  
37      /***
38       * TODO
39       *
40       * @return TODO
41       */
42      public Model getModel()
43      {
44          return model;
45      }
46  
47      /***
48       * TODO
49       *
50       * @param e TODO
51       */
52      public void actionPerformed(ActionEvent e){}
53  
54      /***
55       * TODO
56       */
57      public void start()
58      {
59          if(log.isDebugEnabled())
60          {
61              log.debug("started");
62          }
63      }
64  
65      /***
66       * TODO
67       */
68      public void stop()
69      {
70          if(log.isDebugEnabled())
71          {
72              log.debug("stopped");
73          }
74      }
75  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/DotElementBridge.html
##-----------------TITLE------------------------##
DotElementBridge xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz.pie;
2   
3   import org.apache.batik.bridge.Bridge;
4   import org.apache.batik.bridge.SVGCircleElementBridge;
5   import org.apache.batik.bridge.SVGGElementBridge;
6   import org.apache.batik.bridge.SVGRectElementBridge;
7   import org.apache.batik.bridge.SVGShapeElementBridge;
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  
11  /***
12   * DOCUMENT ME!
13   *
14   * @author bpillet
15   */
16  public class DotElementBridge extends SVGGElementBridge //implements BatikExtConstants
17  {
18      /*** TODO */
19      private Log log = LogFactory.getLog(this.getClass());
20  
21      /*** TODO */
22      private SVGShapeElementBridge shape;
23  
24      /*** TODO */
25      private boolean dir = false;
26  
27      /***
28       * Creates a new DotElementBridge object.
29       */
30      public DotElementBridge()
31      {
32          if(log.isDebugEnabled())
33          {
34              log.debug("()");
35          }
36  
37          setDir(false);
38      }
39  
40      /***
41       * TODO
42       *
43       * @param isDir TODO
44       */
45      public void setDir(boolean isDir)
46      {
47          this.dir = isDir;
48  
49          if(dir)
50          {
51              shape = new SVGRectElementBridge();
52          }
53          else
54          {
55              shape = new SVGCircleElementBridge();
56          }
57      }
58  
59      /***
60       * TODO
61       *
62       * @return TODO
63       */
64      public Bridge getInstance()
65      {
66          return new DotElementBridge();
67      }
68  
69      /***
70       * TODO
71       *
72       * @return TODO
73       */
74      public String getLocalName()
75      {
76          return DotElement.TAG;
77      }
78  
79      /***
80       * TODO
81       *
82       * @return TODO
83       */
84      public String getNamespaceURI()
85      {
86          return DotElement.URL;
87      }
88  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/DefaultDot.html
##-----------------TITLE------------------------##
DefaultDot xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Aug 31, 2004
3    */
4   package swirl.workspace.viz.pie;
5   
6   import java.io.IOException;
7   
8   import org.apache.commons.logging.Log;
9   import org.apache.commons.logging.LogFactory;
10  import org.w3c.dom.Element;
11  import org.w3c.dom.NamedNodeMap;
12  
13  import swirl.workspace.common.FileLauncher;
14  import swirl.workspace.common.FileLauncherFactory;
15  
16  /***
17   * DOCUMENT ME!
18   *
19   * @author bpillet
20   */
21  public class DefaultDot implements Dot
22  {
23      /*** TODO */
24      private Element element;
25  
26      /*** TODO */
27      private Log log = LogFactory.getLog(this.getClass());
28  
29      /***
30       * Creates a new DefaultDot object.
31       *
32       * @param elem TODO
33       */
34      public DefaultDot(Element elem)
35      {
36          super();
37          this.element = elem;
38      }
39  
40      /***
41       * TODO
42       */
43      public void fileOpen()
44      {
45          NamedNodeMap map = element.getAttributes();
46          String id = map.getNamedItem("id").getNodeValue();
47          String url = Util.getWebdavPathforFile(id);
48  
49          if(log.isDebugEnabled())
50          {
51              log.debug("the url of the file to open is " + url);
52          }
53  
54          FileLauncher launcher = FileLauncherFactory.createLauncher();
55  
56          try
57          {
58              launcher.launch(url);
59          }
60          catch(IOException e)
61          {
62              log.error(e, e);
63          }
64      }
65  
66      /***
67       * TODO
68       *
69       * @param highlight TODO
70       */
71      public void highlightDot(boolean highlight)
72      {
73          NamedNodeMap map = element.getAttributes();
74          String value = map.getNamedItem("opacity").getNodeValue();
75  
76          map.getNamedItem("opacity").setNodeValue(highlight ? "1" : "0");
77      }
78  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/PropertyGUIConfig.html
##-----------------TITLE------------------------##
PropertyGUIConfig xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.Dimension;
4   import java.awt.Point;
5   import java.io.File;
6   import java.io.FileInputStream;
7   import java.io.FileNotFoundException;
8   import java.io.FileOutputStream;
9   import java.io.IOException;
10  import java.util.Properties;
11  
12  import org.apache.commons.logging.Log;
13  import org.apache.commons.logging.LogFactory;
14  
15  /***
16   * Saves swirl gui configuration in a properties file in the user's home
17   * directory
18   *
19   * @author bpillet
20   */
21  public class PropertyGUIConfig implements SwirlGUIConfig
22  {
23      /*** if an object is serialized, it will use this class version */
24      private static final long serialVersionUID = 1L;
25  
26      /*** the size of the window */
27      private Dimension windowSize;
28  
29      /*** the user's property file ( home/swirl.gui.properties ) */
30      private File userPropertiesFile;
31  
32      /*** the logger for this class */
33      private Log log = LogFactory.getLog(this.getClass());
34  
35      /*** where the window is on the screen */
36      private Point windowPosition;
37  
38      /*** hashtable of the user's properties */
39      private Properties userProperties = new Properties();
40  
41      /*** the starting tab/visualizer when swirl starts up */
42      private String defaultTab;
43  
44      /*** the user's home directory */
45      private String userHome;
46  
47  	//private Color userColor;
48  
49      /***
50       * Creates a new PropertyGUIConfig object.
51       */
52      public PropertyGUIConfig()
53      {
54          userHome = System.getProperty("user.home");
55  
56          if(log.isDebugEnabled())
57          {
58              log.debug("userHome: " + userHome);
59          }
60  
61          userPropertiesFile = new File(userHome, "swirl.gui.properties");
62  
63          if(!userPropertiesFile.exists())
64          {
65              log.info("Creating new gui properties file: " + userPropertiesFile);
66  
67              try
68              {
69                  userPropertiesFile.createNewFile();
70              }
71              catch(IOException e)
72              {
73                  log.error(e, e);
74              }
75          }
76  
77          try
78          {
79              FileInputStream fis = new FileInputStream(userPropertiesFile); 
80              userProperties.load(fis);
81              fis.close();
82          }
83          catch(FileNotFoundException e)
84          {
85              log.error(e, e);
86          }
87          catch(IOException e)
88          {
89              log.error(e, e);
90          }
91  
92          String x = userProperties.getProperty("window.x", "30");
93          String y = userProperties.getProperty("window.y", "30");
94  
95          if(log.isDebugEnabled())
96          {
97              log.debug("setting windowPosition to " + x + ", " + y);
98          }
99  
100         windowPosition = new Point((int)Double.parseDouble(x),
101                                    (int)Double.parseDouble(y));
102 
103         String w = userProperties.getProperty("window.width", "700");
104         String h = userProperties.getProperty("window.height", "800");
105 
106         windowSize = new Dimension((int)Double.parseDouble(w),
107                                    (int)Double.parseDouble(h));
108 
109         defaultTab = userProperties.getProperty("default.tab");
110         
111     }
112 
113     /***
114      * TODO
115      *
116      * @param tab TODO
117      */
118     public void setDefaultTab(String tab)
119     {
120         defaultTab = tab;
121         userProperties.setProperty("default.tab", defaultTab);
122     }
123 
124     /***
125      * TODO
126      *
127      * @return TODO
128      */
129     public String getDefaultTab()
130     {
131         return defaultTab;
132     }
133 
134     /***
135      * TODO
136      *
137      * @param position TODO
138      */
139     public void setWindowPosition(Point position)
140     {
141         windowPosition = position;
142         userProperties.setProperty("window.x", windowPosition.getX() + "");
143         userProperties.setProperty("window.y", windowPosition.getY() + "");
144     }
145 
146     /***
147      * TODO
148      *
149      * @return TODO
150      */
151     public Point getWindowPosition()
152     {
153         return windowPosition;
154     }
155 
156     /***
157      * TODO
158      *
159      * @param size TODO
160      */
161     public void setWindowSize(Dimension size)
162     {
163         windowSize = size;
164         userProperties.setProperty("window.width", windowSize.getWidth() + "");
165         userProperties.setProperty("window.height", windowSize.getHeight() + "");
166     }
167 
168     /***
169      * TODO
170      *
171      * @return TODO
172      */
173     public Dimension getWindowSize()
174     {
175         if(log.isDebugEnabled())
176         {
177             log.debug("getWindowSize(): " + windowSize);
178         }
179 
180         return windowSize;
181     }
182 
183     /***
184      * TODO
185      *
186      * @param gui TODO
187      */
188     public void saveGUI(SwirlGUI gui)
189     {
190         //windowSize
191         Dimension size = gui.getSize();
192 
193         if(log.isDebugEnabled())
194         {
195             log.debug("size: " + size);
196         }
197 
198         setWindowSize(size);
199 
200         //windowPosition
201         Point position = gui.getLocationOnScreen();
202 
203         if(log.isDebugEnabled())
204         {
205             log.debug("position: " + position);
206         }
207 
208         setWindowPosition(position);
209 
210         //selectedTab
211         String tab = gui.getSelectedVisualizer();
212 
213         if(log.isDebugEnabled())
214         {
215             log.debug("tab: " + tab);
216         }
217 
218         setDefaultTab(tab);
219 
220         saveProperties();
221     }
222 
223     /***
224      * TODO
225      */
226     public void saveProperties()
227     {
228         FileOutputStream fos = null;
229         try
230         {
231             fos = new FileOutputStream(userPropertiesFile);
232             userProperties.store(fos,
233                                  "Swirl GUI Properties");
234             fos.close();
235         }
236         catch(FileNotFoundException e)
237         {
238             log.error(e, e);
239         }
240         catch(IOException e)
241         {
242             log.error(e, e);
243         }
244     }
245 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/PublicLevel.html
##-----------------TITLE------------------------##
PublicLevel xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Sep 2, 2004
3    *
4    */
5   package swirl.workspace.viz.pie;
6   
7   import org.apache.batik.dom.AbstractNode;
8   import org.apache.batik.util.SVGConstants;
9   import org.apache.commons.logging.Log;
10  import org.apache.commons.logging.LogFactory;
11  import org.w3c.dom.Document;
12  import org.w3c.dom.Element;
13  import org.w3c.dom.NamedNodeMap;
14  
15  import swirl.workspace.viz.SharingLevel;
16  
17  /***
18   * DOCUMENT ME!
19   *
20   * @author dingx
21   */
22  public class PublicLevel // extends BaseLevel
23  
24  {
25      //cooresponding svg element
26  
27      /*** TODO */
28      private Element delegate;
29  
30      /*** TODO */
31      private GuiPeer parent;
32  
33      /*** TODO */
34      private Log log = LogFactory.getLog(this.getClass());
35  
36      //it's sharing level
37  
38      /*** TODO */
39      private SharingLevel level;
40  
41      /***
42       * Creates a new PublicLevel object.
43       *
44       * @param peer TODO
45       * @param doc TODO
46       * @param sharinglevel TODO
47       */
48      public PublicLevel(GuiPeer peer, Document doc, SharingLevel sharinglevel)
49      {
50          parent = peer;
51          level = sharinglevel;
52          delegate = doc.createElementNS(PieWorkSpace.svgNS, "path");
53  
54          double radi = Util.getRadium(level.getValue());
55          NamedNodeMap map = delegate.getAttributes();
56          if(log.isDebugEnabled())
57          {
58          	log.debug("before d");
59          }
60          String d = Util.caculateDforClosePath(radi,
61                                                parent.getParent().getPeerNumber()
62                                                + 1);
63          String c = "grey";
64  
65          if(level.getValue() == 0)
66          {
67              c = parent.getStringColor();
68              
69              
70          }
71          if(log.isDebugEnabled())
72          {
73          	log.debug("d is " + d);
74          }
75          delegate.setAttributeNS(null, "d", d);
76          delegate.setAttributeNS(null, "stroke", "lightgrey");
77          delegate.setAttributeNS(null, "fill", c);
78          
79          parent.getUserGroup().appendChild(delegate);
80          ((AbstractNode)delegate).removeEventListener(SVGConstants.SVG_MOUSEUP_EVENT_TYPE,
81                  parent.getParent().getView().getMouseEvent(), false);
82      }
83  
84      /***
85       * TODO
86       *
87       * @param peerNum TODO
88       */
89      public void adjustAngle(double arcAngle)
90      {
91          double radi = Util.getRadium(level.getValue());
92          NamedNodeMap map = delegate.getAttributes();
93          String d = Util.caculateDforClosePath(radi, arcAngle);
94  
95          map.getNamedItem("d").setNodeValue(d);
96      }
97  }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/WebDAVActivityLogViewer.html
##-----------------TITLE------------------------##
WebDAVActivityLogViewer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.viz;
2   
3   import java.awt.BorderLayout;
4   import java.awt.GridLayout;
5   import java.awt.event.ActionEvent;
6   import java.util.HashMap;
7   import java.util.Map;
8   
9   import javax.swing.JButton;
10  import javax.swing.JCheckBox;
11  import javax.swing.JPanel;
12  import javax.swing.JScrollPane;
13  import javax.swing.JTextArea;
14  
15  import org.apache.commons.logging.Log;
16  import org.apache.commons.logging.LogFactory;
17  
18  import swirl.workspace.Peer;
19  import swirl.workspace.messages.MessageProcessor;
20  import swirl.workspace.viz.pie.FileElement;
21  
22  /***
23   * DOCUMENT ME!
24   *
25   * @author rsilvafi class created at Jun 17, 2004 This class implements an
26   *         activity visualizatio list where the events related to new files in
27   *         the shared folder are informed to the end user.
28   */
29  public class WebDAVActivityLogViewer extends BaseVisualizer
30      implements Controller,
31                 MessageProcessor
32  {
33      /*** TODO */
34      private static final long serialVersionUID = 1L;
35  
36      /*** TODO */
37      static final String CLEAR = "Clear log";
38  
39      /*** TODO */
40      JButton clearButton;
41  
42      /*** TODO */
43      JCheckBox allChkBox;
44  
45      /*** TODO */
46      JTextArea logTextArea;
47  
48      /*** TODO */
49      String[] boxLabels = new String[]
50                           {
51                               "PROPFIND", "PROPPATCH", "PUT", "DELETE", "GET",
52                               "COPY", "MOVE", "MKCOL", "OPTION", "HEAD", "LOCK",
53                               "UNLOCK"
54                           };
55  
56      /*** TODO */
57      HashMap selected = new HashMap(boxLabels.length);
58  
59      /*** common-logging logger */
60      private Log log = LogFactory.getLog(this.getClass());
61  
62      // constructor
63      public WebDAVActivityLogViewer()
64      {
65          super();
66          selected.put("ALL", new Boolean(true));
67  
68          setLayout(new BorderLayout());
69  
70          //text area to display the log messages, it has a scroll pane around it
71          logTextArea = new JTextArea(30, 15);
72          logTextArea.setEditable(false);
73          add(new JScrollPane(logTextArea), BorderLayout.CENTER);
74  
75          // clears the text area
76          clearButton = new JButton(CLEAR);
77          clearButton.addActionListener(this);
78          clearButton.setEnabled(true);
79  
80          JPanel controlPanel = new JPanel(new GridLayout(0, 2));
81  
82          for(int i = 0; i < boxLabels.length; ++i)
83          {
84              JCheckBox checkBox = new JCheckBox(boxLabels[i]);
85  
86              checkBox.addActionListener(this);
87              controlPanel.add(checkBox);
88  
89              if(log.isDebugEnabled())
90              {
91                  log.debug("added checkbox " + boxLabels[i]);
92              }
93          }
94  
95          allChkBox = new JCheckBox("ALL");
96          allChkBox.addActionListener(this);
97          allChkBox.setSelected(true);
98          controlPanel.add(allChkBox);
99          controlPanel.add(clearButton);
100         add(controlPanel, BorderLayout.SOUTH);
101     }
102 
103     /***
104      * TODO
105      *
106      * @return TODO
107      */
108     public Controller getController()
109     {
110         return this;
111     }
112 
113     /***
114      * TODO
115      *
116      * @return TODO
117      */
118     public Model getModel()
119     {
120         return null;
121     }
122 
123     /***
124      * TODO
125      *
126      * @return TODO
127      */
128     public String getName()
129     {
130         return "WebDAV Activity Log Viewer";
131     }
132 
133     /***
134      * TODO
135      *
136      * @return TODO
137      */
138     public View getView()
139     {
140         return this;
141     }
142 
143     /*
144      * Called whenever a button is pressed.
145      */
146     public void actionPerformed(ActionEvent e)
147     {
148         if(log.isDebugEnabled())
149         {
150             log.debug("e.cmd: " + e.getActionCommand());
151         }
152 
153         if(e.getActionCommand().equals(CLEAR))
154         {
155             logTextArea.setText("");
156         }
157         else
158         {
159             JCheckBox checkBox = (JCheckBox)e.getSource();
160 
161             selected.put(e.getActionCommand(),
162                          new Boolean(checkBox.isSelected()));
163         }
164     }
165 
166     /***
167      * Adds a text line to the logger visualizer
168      *
169      * @param line is the text to be added
170      */
171     public void addTextLine(String line)
172     {
173         logTextArea.insert(line, 0);
174     }
175 
176     /***
177      * TODO
178      *
179      * @param msg TODO
180      */
181     public void processMessage(Map msg)
182     {
183         if(log.isDebugEnabled())
184         {
185             log.debug("WebDAVActivityLogViewer: got event " + msg);
186         }
187 
188         String command = null;
189 
190         command = (String)msg.get("WEBDAV_COMMAND");
191 
192         boolean printEvent = false;
193 
194         if(command != null)
195         {
196             if(showCommand("ALL"))
197             {
198                 printEvent = true;
199             }
200             else if(showCommand(command))
201             {
202                 printEvent = true;
203             }
204         }
205 
206         if(printEvent)
207         {
208             StringBuffer sb = new StringBuffer();
209 
210             sb.append(msg.get("WEBDAV_COMMAND"));
211             sb.append(" called for: ");
212             sb.append(msg.get("WEBDAV_PATH"));
213             sb.append("\n At host: ");
214             sb.append(msg.get("WEBDAV_HOST"));
215             sb.append("\n From host: ");
216             sb.append(msg.get("WEBDAV_CLIENT"));
217             sb.append("\n\n");
218 
219             addTextLine(sb.toString());
220         }
221     }
222 
223     /***
224      * TODO
225      *
226      * @param cmd TODO
227      *
228      * @return TODO
229      */
230     public boolean showCommand(String cmd)
231     {
232         if(selected.containsKey(cmd))
233         {
234             Boolean bool = (Boolean)selected.get(cmd);
235 
236             if(log.isDebugEnabled())
237             {
238             	log.debug("cmd: " + bool);
239             }
240 
241             return bool.booleanValue();
242         }
243         else
244         {
245             if(log.isDebugEnabled())
246             {
247             	log.debug("selected doesn't contain " + cmd);
248             }
249 
250             return false;
251         }
252     }
253 
254     /***
255      * TODO
256      */
257     public void start()
258     {
259         if(log.isDebugEnabled())
260         {
261             log.debug("starting");
262         }
263 
264         if(log.isDebugEnabled())
265         {
266             log.debug("started");
267         }
268     }
269 
270     /***
271      * TODO
272      */
273     public void stop()
274     {
275         if(log.isDebugEnabled())
276         {
277             log.debug("stopped");
278         }
279     }
280 
281     /***
282      * TODO
283      *
284      * @param peer TODO
285      */
286     public void userJoined(Peer peer){}
287 
288 	/* (non-Javadoc)
289 	 * @see swirl.workspace.viz.ModelListener#flashIt(swirl.workspace.viz.pie.FileElement, java.lang.String)
290 	 */
291 	public void flashIt(FileElement fe, String uColor) {
292 		// TODO Auto-generated method stub
293 		
294 	}
295 
296 	/* (non-Javadoc)
297 	 * @see swirl.workspace.viz.ModelListener#backupPromotedToPersistent(swirl.workspace.viz.pie.FileElement)
298 	 */
299 	public void backupPromotedToPersistent(FileElement file) {
300 		// TODO Auto-generated method stub
301 		
302 	}
303 
304 	/* (non-Javadoc)
305 	 * @see swirl.workspace.viz.ModelListener#fileUpdated(swirl.workspace.viz.pie.FileElement)
306 	 */
307 	public void fileUpdated(FileElement file) {
308 		// TODO Auto-generated method stub
309 		
310 	}
311 
312 	/* (non-Javadoc)
313 	 * @see swirl.workspace.messages.MessageProcessor#initialMessageProcessor()
314 	 */
315 	public void initializeMessageProcessor() {
316 		// TODO Auto-generated method stub
317 		
318 	}
319 	
320 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/ExportFileDialogBox.html
##-----------------TITLE------------------------##
ExportFileDialogBox xref
##------------------TEXT------------------------##
View Javadoc

1   /*
2    * Created on Nov 18, 2004
3    *
4    * TODO To change the template for this generated file go to
5    * Window - Preferences - Java - Code Style - Code Templates
6    */
7   package swirl.workspace.viz.pie;
8   
9   import java.awt.BorderLayout;
10  import java.awt.Frame;
11  import java.awt.SystemColor;
12  import java.awt.event.ActionEvent;
13  import java.awt.event.ActionListener;
14  import java.util.ArrayList;
15  import java.util.Iterator;
16  import java.util.List;
17  
18  import javax.swing.JButton;
19  import javax.swing.JDialog;
20  import javax.swing.JPanel;
21  import javax.swing.JTextField;
22  import javax.swing.JTextPane;
23  
24  import org.apache.commons.logging.Log;
25  import org.apache.commons.logging.LogFactory;
26  import org.w3c.dom.Document;
27  
28  import swirl.workspace.Peer;
29  import swirl.workspace.PeerManager;
30  import swirl.workspace.viz.SwirlModel;
31  
32  /***
33   * @author depaula
34   *
35   * TODO To change the template for this generated type comment go to
36   * Window - Preferences - Java - Code Style - Code Templates
37   */
38  public class ExportFileDialogBox
39  	extends JDialog {
40    private static final long serialVersionUID = 1L;
41  JPanel panel1 = new JPanel();
42    BorderLayout borderLayout1 = new BorderLayout();
43    JPanel jPanel1 = new JPanel();
44    JTextPane jTextDescription = new JTextPane();
45    JButton jButtonAdvanced = new JButton();
46    JButton jButtonCancel = new JButton();
47    JButton jButtonSave = new JButton();
48    final String mainMessage = "You're about to save all edited \n"+
49                               "files back to their original directories. \n"+
50  						    "This will overwrite the original files \n\n"+
51  							"If you want to change the directory, \n"+
52  							"please select 'More Advanced'\n";
53    JTextField jTextField1 = new JTextField();
54    JTextField jTextField2 = new JTextField();
55    JTextField jTextField3 = new JTextField();
56    Document doc;
57    PeerManager peerManager;
58    List updateList;
59    Object updateListMutex;
60    SwirlModel pieModel;
61  
62    protected Log log = LogFactory.getLog(this.getClass());
63   
64    public ExportFileDialogBox(Frame frame, String string, boolean _boolean, SwirlModel model, PeerManager _peerManager, Document _doc, List _updateList, Object _updateListMutex) {
65      super(frame, string, _boolean);
66      try {
67      	  pieModel = model;	
68      	  updateList = _updateList;
69      	  updateListMutex = _updateListMutex;
70      	  peerManager = _peerManager;
71      	  doc = _doc;
72        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
73        jbInit();
74        pack();
75      }
76      catch (Exception exception) {
77        exception.printStackTrace();
78      }
79    }
80  
81    public ExportFileDialogBox(String string, boolean _boolean, SwirlModel model, PeerManager _peerManager, Document _doc, List _updateList, Object _updateListMutex) {
82      this(new Frame(), string, _boolean, model, _peerManager, _doc, _updateList, _updateListMutex);
83    	}
84    
85    public ExportFileDialogBox(SwirlModel model, PeerManager _peerManager, Document _doc, List _updateList, Object _updateListMutex) {
86      this(new Frame(), "ExportFile", false, model, _peerManager, _doc, _updateList, _updateListMutex);
87    }
88  
89    private void jbInit() throws Exception {
90      panel1.setLayout(borderLayout1);
91      jTextDescription.setCaretColor(SystemColor.activeCaptionText);
92      jTextDescription.setSelectedTextColor(SystemColor.activeCaptionText);
93      jTextDescription.setText(mainMessage);
94      jButtonAdvanced.setText("More Advanced...");
95      jButtonAdvanced.addActionListener(new ActionListener() {
96        public void actionPerformed(ActionEvent actionEvent) {
97          jButtonAdvanced_actionPerformed(actionEvent);
98        }
99      });
100     jButtonCancel.setText("Cancel");
101     jButtonCancel.addActionListener(new ActionListener() {
102       public void actionPerformed(ActionEvent actionEvent) {
103         jButtonCancel_actionPerformed(actionEvent);
104       }
105     });
106     jButtonSave.setText("Save");
107     jButtonSave.addActionListener(new ActionListener() {
108       public void actionPerformed(ActionEvent actionEvent) {
109         jButtonSave_actionPerformed(actionEvent);
110       }
111     });
112     jTextField2.setBorder(null);
113     jTextField2.setText("  ");
114     jTextField3.setBorder(null);
115     jTextField3.setText("  ");
116     jTextField1.setBorder(null);
117     getContentPane().add(panel1);
118     panel1.add(jTextDescription, java.awt.BorderLayout.CENTER);
119     panel1.add(jTextField1, java.awt.BorderLayout.NORTH);
120     panel1.add(jTextField2, java.awt.BorderLayout.WEST);
121     panel1.add(jTextField3, java.awt.BorderLayout.EAST);
122     this.getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
123     jPanel1.add(jButtonSave);
124     jPanel1.add(jButtonCancel);
125     jPanel1.add(jButtonAdvanced);
126   }
127 
128   public void jButtonCancel_actionPerformed(ActionEvent actionEvent) {
129     this.setVisible( false );
130   }
131 
132   public void jButtonAdvanced_actionPerformed(ActionEvent actionEvent) {
133 	this.setVisible( false );
134 	AdvancedExportFileDialogBox advancedExport = new AdvancedExportFileDialogBox("Advanced Export File", true, pieModel, peerManager, doc, updateList, updateListMutex);
135 	//advancedExport.show();
136 	advancedExport.setVisible(true);
137   }
138 
139   public void jButtonSave_actionPerformed(ActionEvent actionEvent) {
140 	Peer peer = peerManager.getPeer(PeerManager.getLocalUserID());
141 	List fileList = null;
142 	synchronized(updateListMutex) {
143 	    fileList = new ArrayList(updateList);
144 	}
145 	if (log.isDebugEnabled()) {
146 		log.debug("got fileList " + fileList);
147 	}
148 	if (fileList != null) {
149 	    for (Iterator it = fileList.iterator();it.hasNext();) {
150 					String path = (String) it.next();
151 					String filename = path.substring(path.lastIndexOf("/") + 1);
152 					String fileKey = peer.getUniqueID() + ":" + SwirlModel.SLIDE_ROOT + path;
153 					DotElement e = (DotElement) (doc.getElementById(fileKey));
154 					if(log.isDebugEnabled())
155 			        {
156 						log.debug("file key is: " + fileKey);
157 			        }
158 					pieModel.exportFile(e.getFileElement());
159 	            }
160 	}
161     this.setVisible( false );
162   }
163   
164 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/messages/YanceesServer.html
##-----------------TITLE------------------------##
YanceesServer xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace.messages;
2   
3   import java.rmi.Naming;
4   import java.rmi.RMISecurityManager;
5   
6   import org.apache.commons.logging.Log;
7   import org.apache.commons.logging.LogFactory;
8   import org.picocontainer.Startable;
9   
10  
11  import edu.uci.isr.yancees.server.rmi.RemoteYanceesImplementation;
12  
13  /***
14   * DOCUMENT ME!
15   *
16   * @author bpillet
17   */
18  public class YanceesServer implements Startable
19  {
20      /*** TODO */
21      RemoteYanceesImplementation yanceesServer;
22  
23      /*** TODO */
24      String name;
25  
26      /*** TODO */
27      YanceesConfig config;
28  
29      /*** common-logging logger */
30      private Log log = LogFactory.getLog(this.getClass());
31  
32      /***
33       * Creates a new YanceesServer object.
34       *
35       * @param config TODO
36       * @param registry TODO
37       */
38      public YanceesServer(YanceesConfig config, RMIRegistry registry)
39      {
40          this.config = config;
41  
42          if(log.isDebugEnabled())
43          {
44              log.debug("java.endorsed.dirs: "
45                        + System.getProperty("java.endorsed.dirs"));
46          }
47  
48          if(System.getSecurityManager() == null)
49          {
50              System.setSecurityManager(new RMISecurityManager());
51          }
52  
53          String hostname = "localhost";
54  
55          // we use the peer manager algorithm to get the right interface address
56          // in case there are two active interfaces at a time.
57          hostname = swirl.workspace.PeerManager.getLocalAddress().getHostAddress();
58          
59          /*
60          try
61          {
62              //hostname = InetAddress.getLocalHost().getCanonicalHostName();
63              hostname = InetAddress.getLocalHost().getHostAddress();
64          	
65          }
66          catch(UnknownHostException e)
67          {
68              log.error("Could not get local address", e);
69          }
70          */
71          
72          // the name under which this remote interface will be registered with the rmiregistry
73          name = "//" + hostname + "/"
74                 + RemoteYanceesImplementation.RMI_LOOKUP_NAME;
75      }
76  
77      /***
78       * TODO
79       */
80      public void start()
81      {
82          try
83          {
84              if(log.isDebugEnabled())
85              {
86                  log.debug("starting");
87              }
88  
89              if(log.isDebugEnabled())
90              {
91                  log.debug("creating Yancees instance...");
92              }
93  
94              yanceesServer = new RemoteYanceesImplementation(config.getConfig());
95  
96              if(log.isDebugEnabled())
97              {
98                  log.debug("registering remote interface with rmiregistry...");
99              }
100 
101             Naming.rebind(name, yanceesServer);
102 
103             if(log.isDebugEnabled())
104             {
105                 log.debug("bound and registered as " + name);
106             }
107 
108             if(log.isDebugEnabled())
109             {
110                 log.debug("started");
111             }
112         }
113         catch(Exception e)
114         {
115             log.error("Error starting yancees", e);
116         }
117     }
118 
119     /***
120      * TODO
121      */
122     public void stop()
123     {
124         if(log.isDebugEnabled())
125         {
126             log.debug("stopping");
127         }
128 
129         try
130         {
131             yanceesServer.shutdownYancees();
132         }
133         catch(Exception ex)
134         {
135             log.info("trouble shutting down yancees server.  yancees needs to implement shutdown",
136                      ex);
137         }
138 
139         if(log.isDebugEnabled())
140         {
141             log.debug("stopped");
142         }
143     }
144 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PeerManager.html
##-----------------TITLE------------------------##
PeerManager xref
##------------------TEXT------------------------##
View Javadoc

1   package swirl.workspace;
2   
3   import java.net.InetAddress;
4   import java.net.NetworkInterface;
5   import java.net.UnknownHostException;
6   import java.util.Enumeration;
7   import java.util.HashMap;
8   import java.util.Iterator;
9   import java.util.Map;
10  import java.util.Vector;
11  
12  import org.apache.commons.httpclient.URIException;
13  import org.apache.commons.logging.Log;
14  import org.apache.commons.logging.LogFactory;
15  import org.picocontainer.Startable;
16  
17  import swirl.workspace.messages.MessageSender;
18  
19  /***
20   * Maintains list of known peers for application and manages message
21   * information about their joining and leaving
22   *
23   * @author bpillet
24   */
25  public class PeerManager implements Startable
26  {
27      /*** our own service type */
28      public static final String SWIRL_TYPE = "_webdav._tcp.local.";
29  
30      /*** logger for this class */
31      private static Log log = LogFactory.getLog(PeerManager.class);
32  
33      /*** cached copy of the local network address */
34      private static InetAddress localAddress = null;
35  
36      /*** this map contains everybody in the proximity */
37      private Map everybody = new HashMap();
38  
39      /*** message sender for each peer */
40      private MessageSender msgSender;
41  
42      /*** PeerManager listeners */
43      private Vector listeners = new Vector();
44  
45      /***
46       * Initialize the manager
47       *
48       * @param sender a message sender for each peer to send things to
49       */
50      public PeerManager(final MessageSender sender)
51      {
52          this.msgSender = sender;
53      }
54  
55      /***
56       * figures out what the IP address is for the first non-loopback interface
57       * to come up
58       *
59       * @return the IP address that is not 127.0.0.1
60       */
61      public static InetAddress getLocalAddress()
62      {
63          if(localAddress == null)
64          {
65              try
66              {
67                  Enumeration interfaces = NetworkInterface.getNetworkInterfaces();
68  
69                  while(interfaces.hasMoreElements())
70                  {
71                      NetworkInterface inter = (NetworkInterface)interfaces
72                                               .nextElement();
73                      Enumeration addresses = inter.getInetAddresses();
74  
75                      while(addresses.hasMoreElements())
76                      {
77                          InetAddress address = (InetAddress)addresses
78                                                .nextElement();
79  
80                          if(log.isDebugEnabled())
81                          {
82                              log.debug("address: " + address + "\nhostAddress: "
83                                        + address.getHostAddress()
84                                        + " canonicalHostName: "
85                                        + address.getCanonicalHostName()
86                                        + "\nhostName: " + address.getHostName()
87                                        + " 1: " + address.isAnyLocalAddress()
88                                        + " 2: " + address.isLinkLocalAddress()
89                                        + " 3: " + address.isLoopbackAddress()
90                                        + " 4: " + address.isMCGlobal() + " 5: "
91                                        + address.isMCLinkLocal() + " 6: "
92                                        + address.isMCNodeLocal() + " 7: "
93                                        + address.isMCOrgLocal() + " 8: "
94                                        + address.isMCSiteLocal() + " 9: "
95                                        + address.isMulticastAddress() + " 10: "
96                                        + address.isSiteLocalAddress());
97                          }
98  
99                          if(!(address.isLoopbackAddress() ||
100         						address.isLinkLocalAddress() ||
101         						/*address.isSiteLocalAddress() || */
102         						address.isMCOrgLocal() ||
103         						address.isMCSiteLocal() || 
104         					   (address instanceof java.net.Inet6Address)
105         					) 
106         				  )
107                         {
108                             localAddress = address;
109 
110                             return localAddress;
111                         }
112                     }
113                 }
114             }
115             catch(Exception ex)
116             {
117                 log.error("There was a problem figuring out the local IP address",
118                           ex);
119             }
120         }
121         
122         // if the extreme restricted method does not work, use the regular way of
123         // finding a network card...
124         if (localAddress == null) {
125         	try {
126 				localAddress = java.net.InetAddress.getLocalHost();
127 			} catch (UnknownHostException e) {
128 				// TODO Auto-generated catch block
129 				e.printStackTrace();
130 			}
131         }
132         return localAddress;
133     }
134 
135     /***
136      * TODO
137      *
138      * @return TODO
139      */
140     public static String getLocalUserID()
141     {
142         String localUserID = PeerManager.getLocalAddress().getHostAddress()
143                              + ":" + App.PORT;
144 
145         return localUserID;
146     }
147 
148     /***
149      * Get a reference to a peer given itss unique id
150      *
151      * @param peerId the peer's unique id
152      *
153      * @return the Peer object
154      */
155     public Peer getPeer(final String peerId)
156     {
157         return (Peer)everybody.get(peerId);
158     }
159 
160     /***
161      * Get the peers managed by this manager
162      *
163      * @return mapping of uniqueId to peer
164      */
165     public Map getPeers()
166     {
167         return everybody;
168     }
169 
170     /***
171      * Get all of the peers managed by this manager
172      *
173      * @return list of peers
174      */
175     public Iterator getPeersIterator()
176     {
177         return everybody.values().iterator();
178     }
179 
180     /***
181      * Add a peer to the manager and notify all of the listeners about the
182      * event
183      *
184      * @param peer the peer to add
185      *
186      * @throws URIException if there's a problem getting the peer's id
187      */
188     public void addPeer(final Peer peer) throws URIException
189     {
190         if(log.isDebugEnabled())
191         {
192             log.debug("everybody: " + everybody);
193         }
194 
195         if(log.isDebugEnabled())
196         {
197             log.debug("trying to add  peer: " + peer);
198         }
199 
200         if(!everybody.containsKey(peer.getUniqueID()))
201         {
202             everybody.put(peer.getUniqueID(), peer);
203             peer.addMessageSender(msgSender);
204             if(log.isDebugEnabled())
205 	        {
206             	log.debug("listeners: " + listeners);
207 	        }
208 
209             if(!listeners.isEmpty())
210             {
211                 // make a copy of the listener list in case
212                 //   anyone adds/removes listeners
213                 Vector targets;
214 
215                 synchronized(this)
216                 {
217                     targets = (Vector)listeners.clone();
218                 }
219 
220                 // walk through the listener list and
221                 //   call the receiveMessage method in each
222                 Enumeration e = targets.elements();
223 
224                 while(e.hasMoreElements())
225                 {
226                     PeerManagerListener listener = (PeerManagerListener)e
227                                                    .nextElement();
228 
229                     if(log.isDebugEnabled())
230                     {
231                         log.debug("calling peerJoined: " + peer
232                                   + " on listener: " + listener);
233                     }
234 
235                     listener.peerJoined(peer);
236 
237                     if(log.isDebugEnabled())
238                     {
239                         log.debug("called peerJoined: " + peer);
240                     }
241                 }
242             }
243         }
244     }
245 
246     /***
247      * Add listener for peer changes
248      *
249      * @param listener the listener to add
250      */
251     public void addPeerManagerListener(final PeerManagerListener listener)
252     {
253         if(log.isDebugEnabled())
254         {
255             log.debug("addPeerManagerListener(" + listener + ")");
256         }
257 
258         listeners.add(listener);
259     }
260 
261     /***
262      * Take the peer out of the manager and notify all listeners about the
263      * event
264      *
265      * @param name the uniqueId of the peer to remove
266      */
267     public void removePeer(final String name)
268     {
269         try
270         {
271             if(log.isDebugEnabled())
272             {
273                 log.debug("everybody:\n" + everybody);
274             }
275 
276             Peer peer = (Peer)everybody.remove(name);
277 
278             if(log.isDebugEnabled())
279             {
280                 log.debug("removed " + name + " with peer object " + peer);
281             }
282 
283             if((peer != null) && !listeners.isEmpty())
284             {
285                 // make a copy of the listener list in case
286                 //   anyone adds/removes listeners
287                 Vector targets;
288 
289                 synchronized(this)
290                 {
291                     targets = (Vector)listeners.clone();
292                 }
293 
294                 // walk through the listener list and
295                 //   call the receiveMessage method in each
296                 Enumeration e = targets.elements();
297 
298                 while(e.hasMoreElements())
299                 {
300                     PeerManagerListener listener = (PeerManagerListener)e
301                                                    .nextElement();
302 
303                     listener.peerLeft(peer);
304                 }
305             }
306         }
307         catch(IllegalArgumentException e)
308         {
309             log.error(e);
310         }
311     }
312 
313     /***
314      * Remove listener for peer changes
315      *
316      * @param listener the listener to remove
317      */
318     public void removePeerManagerListener(final PeerManagerListener listener)
319     {
320         listeners.remove(listener);
321     }
322 
323     /***
324      * how many peers are in the list
325      *
326      * @return the list size
327      */
328     public int size()
329     {
330         return everybody.size();
331     }
332 
333     /***
334      * Start the peer manager up
335      */
336     public void start()
337     {
338         if(log.isDebugEnabled())
339         {
340             log.debug("starting PeerManager");
341         }
342 
343         if(log.isDebugEnabled())
344         {
345             log.debug("started PeerManager");
346         }
347     }
348 
349     /***
350      * stop the peermanager for now
351      */
352     public void stop()
353     {
354         if(log.isDebugEnabled())
355         {
356             log.debug("stopping PeerManager");
357         }
358 
359         if(
360         /***
361          * TODO make this stop broadcasting messages too
362          */
363         log.isDebugEnabled())
364         {
365             /***
366              * TODO make this stop broadcasting messages too
367              */
368             log.debug("stopped PeerManager");
369         }
370     }
371 }

This page was automatically generated by Maven
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/allclasses-frame.html
##-----------------TITLE------------------------##
All Classes
##------------------TEXT------------------------##
All Classes

      
            AdvancedExportFileDialogBox
          
            AggregateCommand
          
            App
          
            BaseFileLauncher
          
            BaseLevel
          
            BasePeer
          
            BaseSwirlCommand
          
            BaseVisualizer
          
            ColorManager
          
            ColorUtils
          
            Configuration
          
            Controller
          
            Coordinate
          
            CopyCommand
          
            DNSCache
          
            DNSConstants
          
            DNSEntry
          
            DNSIncoming
          
            DNSOutgoing
          
            DNSQuestion
          
            DNSRecord
          
            DNSSDPeer
          
            DNSSDPeerFinder
          
            DecreaseDotSizeAction
          
            DefaultDot
          
            DeleteCommand
          
            DocumentLogger
          
            Dot
          
            DotElement
          
            DotElementBridge
          
            DotElementFactory
          
            ExportAction
          
            ExportFileDialogBox
          
            FileDescriptorsStore
          
            FileElement
          
            FileLauncher
          
            FileLauncherFactory
          
            FileNameAppearing
          
            FileNode
          
            FileSystemContentStore
          
            GetCommand
          
            GuiPeer
          
            HeadCommand
          
            HelpSwirlAction
          
            HolderManager
          
            HostPathCodec
          
            HostPathCodecImpl
          
            ImportAction
          
            ImportDirectoryAction
          
            IncreaseDotSizeAction
          
            InternalFrameHolder
          
            InternalFrameHolderManager
          
            JmDNS
          
            JmDNSPeer
          
            JmDNSPeerFinder
          
            Level
          
            LockCommand
          
            LoggingFilter
          
            LookupCodec
          
            MacFileLauncher
          
            MePeerFinder
          
            MessageEntry
          
            MessageProcessor
          
            MessageReceiver
          
            MessageSender
          
            MkcolCommand
          
            Model
          
            ModelListener
          
            ModelTest
          
            ModelTestVisualizer
          
            MoveCommand
          
            MyEdgeStringer
          
            NetUtils
          
            NullMessageSender
          
            OptionsCommand
          
            OptionsVisualizer
          
            OurPropPatchMethod
          
            Peer
          
            PeerFinder
          
            PeerManager
          
            PeerManagerListener
          
            PeerManagerVisualizer
          
            PeerTableModel
          
            PersistenceManager
          
            PersistentLevel
          
            PieWorkSpace
          
            PrivateLevel
          
            PropertiesContainerBuilder
          
            PropertyFileLauncher
          
            PropertyGUIConfig
          
            PropfindCommand
          
            ProppatchCommand
          
            ProxyCommand
          
            PublicLevel
          
            PutCommand
          
            QuerystringCodec
          
            QuitApplicationAction
          
            RMIRegistry
          
            RMIRegistryImpl
          
            RMIRegistryImpl2
          
            ReflectionInvocationHandler
          
            ResourceUpdateFilter
          
            ResourceUpdateListener
          
            SVGPieAction
          
            SVGPieController
          
            SVGPieView
          
            SVGPieViewMouseListener
          
            ScreenShotAction
          
            SecurityManager
          
            SecurityUtils
          
            SecurityVisualizer
          
            ServiceInfo
          
            ServiceListener
          
            ServiceTypeListener
          
            SharingLevel
          
            SinglePaneHolderManager
          
            SlidePermissionController
          
            SlideUserRealm
          
            SwirlBridgeExtension
          
            SwirlCommand
          
            SwirlDomExtension
          
            SwirlFileFilter
          
            SwirlGUI
          
            SwirlGUIConfig
          
            SwirlModel
          
            SwirlNeighbor
          
            SwirlNodeFilter
          
            SwirlProxy
          
            SwirlSecurity
          
            SwirlSecurityHandler
          
            SwirlSecurityWrapper
          
            TabbedPaneHolderManager
          
            UnlockCommand
          
            Util
          
            View
          
            Visualizer
          
            WebDAVActivityLogViewer
          
            WebDAVVisualization
          
            WindowsFileLauncher
          
            WrappedResponse
          
            YanceesConfig
          
            YanceesConfigImpl
          
            YanceesMessageReceiver
          
            YanceesMessageSender
          
            YanceesServer
          
            ZoomInAction
          
            ZoomOutAction
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/overview-frame.html
##-----------------TITLE------------------------##
Swirl WebDAV Workspace 0.20 Reference
##------------------TEXT------------------------##
All Classes
      

      Packages

      
            javax.jmdns
          
            swirl.workspace
          
            swirl.workspace.common
          
            swirl.workspace.messages
          
            swirl.workspace.persistence
          
            swirl.workspace.rendezvous
          
            swirl.workspace.security
          
            swirl.workspace.slide
          
            swirl.workspace.viz
          
            swirl.workspace.viz.pie
          
            swirl.workspace.viz.pie.actions
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/overview-summary.html
##-----------------TITLE------------------------##
Swirl WebDAV Workspace 0.20 Reference
##------------------TEXT------------------------##
OverviewPackage
      
      
        
            FRAMES
          
            NO FRAMES
          
      

      
    
      

      Swirl WebDAV Workspace 0.20 Reference

      Packages
                javax.jmdns
              
                swirl.workspace
              
                swirl.workspace.common
              
                swirl.workspace.messages
              
                swirl.workspace.persistence
              
                swirl.workspace.rendezvous
              
                swirl.workspace.security
              
                swirl.workspace.slide
              
                swirl.workspace.viz
              
                swirl.workspace.viz.pie
              
                swirl.workspace.viz.pie.actions
              

    
      
      

      
        OverviewPackage
      
      
        
            FRAMES
          
            NO FRAMES
          
      

      
    
    
          
          Copyright © 2004-2005 . All Rights Reserved.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/prototype.html
##-----------------TITLE------------------------##
Proof-of-Concept Prototype
##------------------TEXT------------------------##
Toolkit Integration TechniqueTable of ContentsBenefits(Previous)(Next)
3. Proof-of-concept prototype

An initial implementation of the TI technique is currently under construction. The results represent a proof-of-concept of a majority of the ideas presented here. The current prototype does not yet implement the abstract toolkit and hypermedia interfaces discussed in Section 2.3. The extended widgets are implemented directly using the interfaces of the target user-interface toolkit and OHS. The reason for this choice was due to externally induced time constraints. As the prototype evolves into a full-fledged integration, the abstract interfaces will be developed and employed.


The target user-interface toolkit for the prototype is the Abstract Windowing Toolkit (AWT) implemented in the Java programming language. The Java AWT was chosen for three reasons. First, Java is an object-oriented language with an emphasis on portability. Since implementations of the Java virtual machine exist for a variety of platforms, extending the Java AWT to be hypermedia-aware would benefit a large audience of developers and users. Second, as discussed previously, the object-oriented features of Java such as inheritance and polymorphism ease the construction of the extended widgets. Third, Java is currently being positioned as a development language for Internet-aware applets. Since applets execute in Web browsers, they appear in a context in which hypermedia principles are familiar to end-users. Applets constructed with the hypermedia-aware version of the Java AWT are thus suitable to introduce users with the notion of pervasive environment-wide hypermedia links. The target hypermedia system for the prototype is the Chimera OHS [1]. Chimera is a client-server based system providing a flexible set of hypermedia concepts and operations which meet the requirements outlined in Section 2.2.


The prototype currently implements several common services and has integrated one widget. The prototype was constructed rapidly over a period of two weeks in three distinct stages. The first stage developed a Chimera application program interface (API) in Java. This API was developed in one week by an experienced Chimera developer and represents the interface to the hypermedia system provided by the hypermedia infrastructure. The API provides access to all of Chimera's hypermedia concepts, and their associated operations, in addition to providing a mechanism to receive events from the Chimera server such as link traversal notifications. The second stage consisted of developing a common service in the hypermedia infrastructure to initialize and monitor the connection to the Chimera server. If the connection to the Chimera server is unexpectedly lost, the connection service provides a dialog box to the user allowing them to reestablish a connection. The third stage integrated a button widget and constructed additional common services. These two developmental tasks were performed iteratively with the integrated button driving the demand for common services such as error handling and link traversal management.


The difference between the interfaces of the original button widget and the integrated widget occurs only in the constructors of the widgets.


The original constructor2 is:

public Button(String label);


The constructor for the integrated widget is:

public HButton(	String label,
		String viewerName,
		String objectName);


As discussed in Section 2.2, the difference is caused by the context information required by the underlying OHS. In Chimera, the required information is the name of an object and the name of the viewer which displays the object. The HButton3 class registers itself as a component with a single anchor using the following code in its constructor:

// Register viewer.
theViewer = new viewer();
theViewer.register(this.viewerName);
// Register object.
theObject = new object();
theObject.register(this.objectName);
// Register view (i.e. component).
theView = new view();
theView.register(theViewer, theObject);
// Register anchor.
theAnchor = new anchor();
theAnchor.register(theView);


The integrated button provides access to two hypermedia services: link creation and link traversal. The former allows the button's anchor to be included in links while the latter allows these links to be traversed. In addition, the button can receive link traversal events. When a link traversal event is received, the following code is executed:

public synchronized void handleEvent( chimeraEvent theEvent ) {
	switch (theEvent.event) {
		case chimeraEvent.linkTraversal:
			doBlink();
			Event e = new Event(
				this,
				Event.ACTION_EVENT,
				getLabel());
			postEvent(e);
			...
}


This code blinks the button (using a simple reverse-video technique not shown) and invokes the button's associated action (by generating an event for the button to handle). The handleEvent routine is called by the hypermedia infrastructure when an event is received from the Chimera server for a particular widget.


The extended button makes use of a common service provided by the hypermedia infrastructure for the initiation of link traversals. As a result the code for a link traversal is short and simple and can be reused in a similar fashion by all subsequent extended widgets. It is shown below:

HConnection.traverse( theAnchor );

In other words, the extended widget need only pass the source anchor for the traversal and the common service takes care of the rest. The code for the traverse routine is shown below:

public synchronized void traverse( Anchor a ) {
	int number;
	number = link.howManyLinks( a );
	if (number > 1) {
		HTraversalDialog htd =
		new HTraversalDialog( a );
		return;
	} else {
		link[] links = link.getLinks( a );
		link theLink = links[0];
		number = theLink.howManyAnchors();
		if (number > 2) {
			HTraversalDialog htd =
			new HTraversalDialog( a );
			return;
		}
	}
	HConnection.theAPI.traverseFrom( a );
}


This code executes a simple algorithm. If the link traversal has a single destination, the traversal is activated. Otherwise a link traversal dialog is displayed (see Figure 3) allowing the user to specify the desired destinations before activating the traversal. Since all hypermedia-enabled widgets will make use of this service, link traversal behavior is consistent across widgets and across applications constructed with the integrated toolkit. In addition, the behavior is easily modified and maintained, since it is isolated in one place in the hypermedia infrastructure layer. Additional benefits of the TI technique are discussed in the next section.

Figure 3. The link traversal dialog provided by the hypermedia infrastructure. This dialog lists the destinations for the current link traversal. Destinations consist of a viewer name, object name, and anchor identifier. The dialog allows users to select the desired destinations and traverse to them. Since all link traversals use this dialog, consistent behavior is achieved.

Toolkit Integration TechniqueTable of ContentsBenefits(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/footnotes.html
##-----------------TITLE------------------------##
Footnotes
##------------------TEXT------------------------##
ReferencesTable of Contents(Previous)(End)
Footnotes

1. This material is based upon work sponsored by the Air Force Materiel Command and the Advanced Research Projects Agency under Contract Number F30602-94-C-0218. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred.


2. All of the code snippets in this section have been simplified for demonstrational purposes. Error checking and event registration code has been removed and procedure calls have been inlined for clarity.


3. Note, the fact the extended widget has a different name than the original widget implies that existing applications must be modified to take advantage of the hypermedia services. This is clearly a disadvantage since developers may decide the benefits of the integrated toolkit do not outweigh the effort required to modify their existing applications. Techniques for avoiding this limitation are considered in Section 6.2.


4. See, for instance, the Abstract Factory pattern in [9] for a potential object-oriented solution.

ReferencesTable of Contents(Previous)(End)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/introduction.html
##-----------------TITLE------------------------##
Introduction
##------------------TEXT------------------------##
Table of ContentsToolkit Integration Technique(Top)(Next)
1. Introduction

The Augment system [7] by Douglas Englebart demonstrates the power hypermedia functionality provides its users. All documents in this text-based system are hypermedia-enabled. Users can link any type of structure to any other type of structure, from simple character strings to paragraphs to sections to entire documents. In addition to creating documents and links, users can traverse links and search the hyperweb of documents for relevant information. These pervasive features enable users to perform sophisticated collaborative work [8].


Recent work in hypermedia focuses on two approaches to providing similar features for users in modern computing environments. The hyperbase approach [18] provides a hypermedia database to store all participating applications' data in a centralized server. Once an application is adapted to use the hyperbase, the application's users gain access to hypermedia functionality. The open hypermedia systems approach [20, 23] separates hypermedia functionality and application data. Applications manage their own data storage but depend on an open hypermedia system (OHS) to provide hypermedia services to their users. Often called link servers, these systems manage the storage and retrieval of hypermedia structures and provide hypermedia operations over these structures.
These approaches have yielded a significant number of systems [1, 3, 11, 17, 21, 22] that have demonstrated the ability to integrate a wide range of applications with various levels of hypermedia support [4]. Even techniques for integrating third-party "black-box" applications have emerged providing a modest level of hypermedia support. However, in order to utilize the complete range of hypermedia services available from these systems, developers must expend a significant amount of effort modifying their applications to comply with the protocol of the target hypermedia system.


In order to provide hypermedia functionality either automatically or with significantly reduced effort on the part of developers, one new approach being pursued is the definition of an object-oriented hypermedia framework which can be used to augment existing object-oriented applications with hypermedia functionality [10]. This paper describes a different approach which attempts to minimize the modifications required to a target application. This new technique extends a user-interface toolkit to enable its widgets with hypermedia services. The technique leverages the power of open hypermedia systems by making the user-interface toolkit a client of an OHS. As a result, the toolkit's widgets are able to create persistent hypermedia structures and provide access to hypermedia operations.


This paper is organized as follows. Section 2 discusses the technique's conceptual architecture in detail. Section 3 presents a prototype system demonstrating the technique, while Section 4 examines the technique's benefits. The paper concludes with a discussion of related work and future research directions.

Table of ContentsToolkit Integration Technique(Top)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/fullpaper.html
##-----------------TITLE------------------------##
Extending User-Interface Toolkits with Hypermedia Functionality
##------------------TEXT------------------------##
Copyright 1996 IEEE. Published in the Proceedings of the 30th Hawaii International Conference on System Sciences, January 7-10 1997, Wailea, Maui, Hawaii, USA.

Extending User-Interface Toolkits with Hypermedia Functionality
Kenneth M. Anderson
University of California, Irvine
kanderso@ics.uci.edu


Abstract

This paper1 describes a technique for extending user-interface toolkits with hypermedia functionality. The technique employs a separation-of-concerns approach which is incremental, reusable, and maintainable. The essence of the approach is to integrate a user-interface toolkit with an open hypermedia system. The integration occurs through a set of integrated widgets and a hypermedia infrastructure. The infrastructure acts as a gateway between the toolkit and the open hypermedia system. The integrated widgets use the infrastructure to augment their behavior with hypermedia services. Applications constructed with the resulting toolkit contain hypermedia-enabled widgets, automatically providing consistent cross-application hypermedia services with little effort required by the application developer. The benefits of generalizing the technique to other services, such as groupware, are also discussed.

1. Introduction

The Augment system [7] by Douglas Englebart demonstrates the power hypermedia functionality provides its users. All documents in this text-based system are hypermedia-enabled. Users can link any type of structure to any other type of structure, from simple character strings to paragraphs to sections to entire documents. In addition to creating documents and links, users can traverse links and search the hyperweb of documents for relevant information. These pervasive features enable users to perform sophisticated collaborative work [8].


Recent work in hypermedia focuses on two approaches to providing similar features for users in modern computing environments. The hyperbase approach [18] provides a hypermedia database to store all participating applications' data in a centralized server. Once an application is adapted to use the hyperbase, the application's users gain access to hypermedia functionality. The open hypermedia systems approach [20, 23] separates hypermedia functionality and application data. Applications manage their own data storage but depend on an open hypermedia system (OHS) to provide hypermedia services to their users. Often called link servers, these systems manage the storage and retrieval of hypermedia structures and provide hypermedia operations over these structures.
These approaches have yielded a significant number of systems [1, 3, 11, 17, 21, 22] that have demonstrated the ability to integrate a wide range of applications with various levels of hypermedia support [4]. Even techniques for integrating third-party "black-box" applications have emerged providing a modest level of hypermedia support. However, in order to utilize the complete range of hypermedia services available from these systems, developers must expend a significant amount of effort modifying their applications to comply with the protocol of the target hypermedia system.


In order to provide hypermedia functionality either automatically or with significantly reduced effort on the part of developers, one new approach being pursued is the definition of an object-oriented hypermedia framework which can be used to augment existing object-oriented applications with hypermedia functionality [10]. This paper describes a different approach which attempts to minimize the modifications required to a target application. This new technique extends a user-interface toolkit to enable its widgets with hypermedia services. The technique leverages the power of open hypermedia systems by making the user-interface toolkit a client of an OHS. As a result, the toolkit's widgets are able to create persistent hypermedia structures and provide access to hypermedia operations.


This paper is organized as follows. Section 2 discusses the technique's conceptual architecture in detail. Section 3 presents a prototype system demonstrating the technique, while Section 4 examines the technique's benefits. The paper concludes with a discussion of related work and future research directions.

Figure 1. The conceptual architecture of the integrated toolkit. A line from one box to another signifies the flow of information. Unless indicated by a black arrow, information flows both ways across the line. The gray arrow indicates the potential reuse of user-interface toolkit widgets by the extended widgets.
2. Toolkit integration technique

The toolkit integration technique (TI technique) applies the conceptual architecture shown in Figure 1. The major components of the conceptual architecture are the integrated toolkit, the OHS, and the set of applications using the toolkit. The integrated toolkit consists of the original user-interface toolkit, a set of extended widgets, and a hypermedia infrastructure. It is important to note the technique's potential for toolkit independence, since any user-interface toolkit can likely be integrated by building these extensions. The variable across toolkits will be the amount of effort a toolkit integrator expends to achieve the required extensions. For instance, a toolkit constructed with an object-oriented programming language is fairly easy to integrate. The extended widgets reuse the appearance and behavior provided by the original widgets via inheritance and can be mixed and matched with the original widgets via polymorphism. On the other end of the spectrum, a library-based toolkit will require more effort since the extended widgets may have to reimplement some or all of the original widgets and employ potentially toolkit-specific mechanisms to compose these new widgets into an interface with the original widgets. The developmental effort for the former toolkit is minimal while the effort for the latter is, most likely, prohibitive. Section 2.3 addresses this issue by modifying the conceptual architecture to facilitate "plug-and-play" of certain architectural elements.


The hypermedia services provided by this technique to applications constructed with the integrated toolkit include navigation, search, history, and bookmarks. Some of these services are provided by every extended widget while others are provided only by specialized widgets. The upper bound of possible services is defined by the functionality of the underlying OHS. The lower bound will vary depending on the affordances of the widget. Thus, for instance, a button widget might only be able to initiate or receive link traversals, whereas a canvas widget might provide a popup menu to access services such as bookmark creation or search and query. Specialized widgets can keep track of a user's navigation path or display a user's bookmarks. Although not all hypermedia operations may be provided by the widgets, this does not prohibit the user from accessing these services. For instance, some services may only be available via specialized clients of the underlying OHS such as hyperweb viewers or link editors. These applications can be used in combination with toolkit-constructed applications to provide users with a complete range of hypermedia functionality.


The responsibilities placed on an application using the integrated toolkit are minor. As discussed in the next section, an application must supply context information to the extended widgets during initialization. This information is required by the underlying OHS. The only other responsibility is providing a callback routine to the toolkit to respond to link traversal events which require a new object to be displayed. This is similar to what Kacmar calls a directive from the OHS to the application [13]. The hypermedia infrastructure will call this routine as needed to display the relevant objects. If the destination of a link traversal is already displayed, the extended widgets automatically handle the event.

2.1. Extended widgets

A completely integrated toolkit will have at most one extended widget for each widget present in the user-interface toolkit. These extended widgets behave exactly as the original widgets with the addition of providing access to hypermedia services. As noted above, the hypermedia services available for a particular widget will vary depending on the affordances of the widget but will typically include some way to add the widget (i.e. the widget's anchor) to a link and to initiate a link traversal from the widget. The user-interface to these services for each widget may also vary depending on the affordances of the widget. While it is important to ensure a consistent interface to hypermedia services across widgets, research has shown that only iterative usability testing with end-users will result in a "usable" interface [14]. As such, this paper will not attempt to define the specific interface for each widget. Instead, it is important to note that once defined, these widgets will behave the same in each application providing consistent cross-application access to hypermedia services.


The programmatic interface to an extended widget is virtually identical to the original widget. The difference is limited to initialization of the widget, in which certain hypermedia-specific information is required. Typically, open hypermedia systems require a context in order to persistently store and access hypermedia structures such as anchors and links. Thus, before a hypermedia-enabled widget can create hypermedia structures, the developer must initialize it with context information. The developmental effort of using an extended widget is therefore minimal. There are several techniques which may prove useful to eliminate the need for this context information. These techniques are discussed in Section 6.2.


From the standpoint of a toolkit integrator, the work required to create an extended widget consists of identifying the hypermedia services available for a widget, defining a user-interface to those services, constructing a new widget to mimic the original widget (trivial if the toolkit is constructed in an object-oriented language), and extending the new widget to appropriately interact with the hypermedia infrastructure to provide the identified services. The latter includes properly handling the context information supplied at initialization, creating the appropriate hypermedia structures, engaging in the protocols of the hypermedia system, and supplying the end-user with appropriate feedback to hypermedia events, such as link traversal.


While these steps imply a non-trivial amount of work for the toolkit integrator, several characteristics help to make the effort manageable. First, not all widgets need to be integrated for developers to benefit from the extensions. Widgets can be prioritized according to some criterion such as developer requests or perceived utility, and incrementally integrated. Second, widgets are, in general, independent of each other and thus integration work can be done in parallel by a team of toolkit integrators. Third, since the original widgets are unmodified by the construction of the integrated widgets, existing toolkit applications continue to function; no effort is needed to keep the toolkit "backward-compatible." The result of the integration is a suite of extended widgets that automatically provide hypermedia services in a consistent fashion and utilize common mechanisms provided by the hypermedia infrastructure.

2.2. Hypermedia infrastructure

The hypermedia infrastructure provides an interface to the underlying OHS and implements common services for the extended widgets. This is similar to the role played by HyperDisco's tool integrator [22] which provides this functionality to HyperDisco clients. In the TI technique, however, client applications will primarily interact only with the extended widgets not with the hypermedia infrastructure. The only interaction between them occurs when handling link-traversal directives.


The extended widgets use the OHS interface to access hypermedia services. The interface provides component, anchor, link, and composite operations. These are standard hypermedia concepts [2] in which a component maps to a particular object, anchors specify regions of interest within the object, links specify a relationship of some type over a set of anchors, and composites allow components to be grouped and hierarchically composed. The operations support the creation, deletion, and manipulation of these concepts. In addition, operations are provided to query and search the resulting hyperweb and initiate link traversal. Note that the simple existence of an operation in the infrastructure does not imply each widget will make use of the operation. Instead widgets will use the minimum set of operations needed to implement their hypermedia services.


The abstractions provided by the hypermedia infrastructure allow widgets to create hypermedia structures to model their hypermedia needs. For instance, a scrollbar may register itself as a component with one anchor for each of its thumb positions. Traversing to one of its anchors could then cause it to jump to the specified thumb position. A button may be modeled as a component with a single anchor. Traversing to the button's anchor could then cause the button to execute its action just as if the user had clicked on it. A panel may be modeled as a composite managing a set of components. A user-interface thus creates a set of hypermedia structures within the OHS, allowing it to participate in a hyperweb.


The hypermedia infrastructure also implements the common services required by all of the extended widgets. This prevents having to replicate the services in each widget, provides a consistent behavior across widgets, and localizes the code for them in one place. Common services include managing a connection with the OHS, handling hypermedia-related errors, and providing a consistent interface to link traversals. Initially, the common services use the original toolkit to provide the user feedback. For example, a link traversal dialog may need to make use of window, scrolling list, and button widgets. This use, of course, is not desirable from the standpoint of reuse, since toolkit-specific code is placed in the hypermedia infrastructure. Fortunately, as the toolkit integration progresses, the common services can migrate from using the widgets in the toolkit to using their counterparts in the set of extended widgets. The next section considers other issues related to making the extensions reusable across multiple toolkits and hypermedia systems.

Figure 2. The conceptual architecture modified to highlight reuse issues. The extended widgets are implemented solely in terms of the abstract toolkit and hypermedia interfaces. This eases the task of reusing the extensions with a different user-interface toolkit or open hypermedia system. The common services of the hypermedia infrastructure initially make use of actual toolkit widgets (gray line) to provide user feedback. Extended widgets are eventually used (black line) as they become available. This bootstrapping process is required for only the initial implementation of the technique since subsequent implementations simply reuse the resulting code.
2.3. Plug-and-play issues

A goal for the TI technique is reusability across the wide range of user-interface toolkits and open hypermedia systems. The technique would have little practical value if applying the technique required the same amount of work the second time as it required the first. In order to address these issues, the conceptual architecture presented in Figure 1 has been modified slightly to bring reuse issues to the forefront (see Figure 2). The major change is to identify and isolate the areas in which code specific to the user-interface toolkit or OHS is likely to exist. The second change is to indicate the bootstrapping of the hypermedia infrastructure with respect to the widgets used by its common services.


The new elements are the abstract toolkit and hypermedia interfaces. These abstract interfaces hide the details of the actual systems used from the extended widgets, which are implemented solely in terms of these new interfaces. Moving to a new hypermedia system or user-interface toolkit involves constructing a mapping between the abstract interface and the actual system used. Once the mapping is complete the extended widgets and the common services can be used without modification. Implementations using an object-oriented programming language can benefit from the use of the Bridge design pattern [9] to aid in the construction of these abstract interfaces.


One design choice used in previous work on providing abstract interfaces to multiple toolkits is the least common denominator approach [19]. This technique hides the differences between user-interface toolkits by providing only the functionality common to all of them. While these issues are relevant to the TI technique, they are not as significant, since the goal is to make the extended widgets as reusable as possible across multiple toolkits. This is different from the goal of making the applications using the extended widgets on one integrated toolkit portable to other integrated toolkits. The interoperability provided by the hypermedia services to the applications reduces the importance of this latter goal. Instead the ability to re-host the extended widgets on a different user-interface toolkit with a minimum of effort is more important. This goal should be achievable since the differences between modern user-interface toolkits are not so significant as to be prohibitive.The next section presents a proof-of-concept prototype representing the first attempt at implementing the conceptual architecture of the TI technique.

3. Proof-of-concept prototype

An initial implementation of the TI technique is currently under construction. The results represent a proof-of-concept of a majority of the ideas presented here. The current prototype does not yet implement the abstract toolkit and hypermedia interfaces discussed in Section 2.3. The extended widgets are implemented directly using the interfaces of the target user-interface toolkit and OHS. The reason for this choice was due to externally induced time constraints. As the prototype evolves into a full-fledged integration, the abstract interfaces will be developed and employed.


The target user-interface toolkit for the prototype is the Abstract Windowing Toolkit (AWT) implemented in the Java programming language. The Java AWT was chosen for three reasons. First, Java is an object-oriented language with an emphasis on portability. Since implementations of the Java virtual machine exist for a variety of platforms, extending the Java AWT to be hypermedia-aware would benefit a large audience of developers and users. Second, as discussed previously, the object-oriented features of Java such as inheritance and polymorphism ease the construction of the extended widgets. Third, Java is currently being positioned as a development language for Internet-aware applets. Since applets execute in Web browsers, they appear in a context in which hypermedia principles are familiar to end-users. Applets constructed with the hypermedia-aware version of the Java AWT are thus suitable to introduce users with the notion of pervasive environment-wide hypermedia links. The target hypermedia system for the prototype is the Chimera OHS [1]. Chimera is a client-server based system providing a flexible set of hypermedia concepts and operations which meet the requirements outlined in Section 2.2.


The prototype currently implements several common services and has integrated one widget. The prototype was constructed rapidly over a period of two weeks in three distinct stages. The first stage developed a Chimera application program interface (API) in Java. This API was developed in one week by an experienced Chimera developer and represents the interface to the hypermedia system provided by the hypermedia infrastructure. The API provides access to all of Chimera's hypermedia concepts, and their associated operations, in addition to providing a mechanism to receive events from the Chimera server such as link traversal notifications. The second stage consisted of developing a common service in the hypermedia infrastructure to initialize and monitor the connection to the Chimera server. If the connection to the Chimera server is unexpectedly lost, the connection service provides a dialog box to the user allowing them to reestablish a connection. The third stage integrated a button widget and constructed additional common services. These two developmental tasks were performed iteratively with the integrated button driving the demand for common services such as error handling and link traversal management.


The difference between the interfaces of the original button widget and the integrated widget occurs only in the constructors of the widgets.


The original constructor2 is:

public Button(String label);


The constructor for the integrated widget is:

public HButton(	String label,
		String viewerName,
		String objectName);


As discussed in Section 2.2, the difference is caused by the context information required by the underlying OHS. In Chimera, the required information is the name of an object and the name of the viewer which displays the object. The HButton3 class registers itself as a component with a single anchor using the following code in its constructor:

// Register viewer.
theViewer = new viewer();
theViewer.register(this.viewerName);
// Register object.
theObject = new object();
theObject.register(this.objectName);
// Register view (i.e. component).
theView = new view();
theView.register(theViewer, theObject);
// Register anchor.
theAnchor = new anchor();
theAnchor.register(theView);


The integrated button provides access to two hypermedia services: link creation and link traversal. The former allows the button's anchor to be included in links while the latter allows these links to be traversed. In addition, the button can receive link traversal events. When a link traversal event is received, the following code is executed:

public synchronized void handleEvent( chimeraEvent theEvent ) {
	switch (theEvent.event) {
		case chimeraEvent.linkTraversal:
			doBlink();
			Event e = new Event(
				this,
				Event.ACTION_EVENT,
				getLabel());
			postEvent(e);
			...
}


This code blinks the button (using a simple reverse-video technique not shown) and invokes the button's associated action (by generating an event for the button to handle). The handleEvent routine is called by the hypermedia infrastructure when an event is received from the Chimera server for a particular widget.


The extended button makes use of a common service provided by the hypermedia infrastructure for the initiation of link traversals. As a result the code for a link traversal is short and simple and can be reused in a similar fashion by all subsequent extended widgets. It is shown below:

HConnection.traverse( theAnchor );

In other words, the extended widget need only pass the source anchor for the traversal and the common service takes care of the rest. The code for the traverse routine is shown below:

public synchronized void traverse( Anchor a ) {
	int number;
	number = link.howManyLinks( a );
	if (number > 1) {
		HTraversalDialog htd =
		new HTraversalDialog( a );
		return;
	} else {
		link[] links = link.getLinks( a );
		link theLink = links[0];
		number = theLink.howManyAnchors();
		if (number > 2) {
			HTraversalDialog htd =
			new HTraversalDialog( a );
			return;
		}
	}
	HConnection.theAPI.traverseFrom( a );
}


This code executes a simple algorithm. If the link traversal has a single destination, the traversal is activated. Otherwise a link traversal dialog is displayed (see Figure 3) allowing the user to specify the desired destinations before activating the traversal. Since all hypermedia-enabled widgets will make use of this service, link traversal behavior is consistent across widgets and across applications constructed with the integrated toolkit. In addition, the behavior is easily modified and maintained, since it is isolated in one place in the hypermedia infrastructure layer. Additional benefits of the TI technique are discussed in the next section.

Figure 3. The link traversal dialog provided by the hypermedia infrastructure. This dialog lists the destinations for the current link traversal. Destinations consist of a viewer name, object name, and anchor identifier. The dialog allows users to select the desired destinations and traverse to them. Since all link traversals use this dialog, consistent behavior is achieved.

4. Benefits of toolkit integration technique

The TI technique provides the following benefits.



Minimally-Invasive: The technique extends the services of the target toolkit without extensive modifications. In fact, the prototype of the previous section did not modify the Java AWT at all. Instead only new code was written to implement the hypermedia infrastructure. The HButton class gained most of its functionality via inheritance. This approach allows existing toolkit applications to continue to function, while allowing new applications to make use of the new services. Existing applications must be modified to use the integrated toolkit. The cost of doing so is mitigated by the near identical interface of the extended widgets in comparison to the original widgets.


Incremental: The target user-interface toolkit can be extended incrementally. Developers are not forced to wait for the entire integration to occur but can take advantage of integrated widgets as they become available. In fact, the minimum work required of a toolkit integrator as demonstrated by the proof-of-concept prototype is providing the interface to the hypermedia system and implementing the service which manages a connection with the OHS. At that point, widgets and common services can be incrementally built using an iterative development process.


Reusable: The extensions to the toolkit can be built such that code specific to a particular user-interface toolkit or OHS is localized. Subsequent implementations of the technique can reuse a large portion of the code implementing the extensions. The primary task in moving to a new toolkit or hypermedia system is mapping the new system to the abstract toolkit/hypermedia interfaces.


Maintainable: The resulting architecture is maintainable for two reasons. First, code specific to the user-interface toolkit or OHS is localized, making it easier to locate problems concerning their use. Second, changes to either one of the two subsystems results only in work for the toolkit integrator who must modify the extensions to comply with the changes or take advantage of new services. Application which use the integrated toolkit are completely shielded from changes to the hypermedia system, and in fact will transparently take advantage of any new services, once the extensions have been updated by the toolkit integrator. Changes to the user-interface toolkit may impact developers who use the integrated toolkit, but these changes would have affected them anyway.


Pervasive: Applications which contain integrated widgets provide hypermedia services pervasively throughout their user-interface. These services provide end-users with several advantages. First, hypermedia services are consistent across applications. Users can reuse the hypermedia-related skills learned in one application in all others. Second, users have the power to create hypermedia links throughout their computing environment. Third, depending on the link-traversal behavior implemented for the integrated widgets, users can perform a limited type of scripting in which traversals started in one application can control the actions of other applications. Finally, toolkit applications can interoperate with any existing client of the OHS. Since most open hypermedia systems have the power to integrate third-party applications, such as word processors, spreadsheets, and Web browsers, the range of applications and data which can be linked into the hyperweb is considerable.


Scalable: Finally, this technique is partially scalable in the sense that it should be possible to substitute some other system in place of the OHS and produce widgets that access the services of this system. For instance, as discussed in Section 5, groupware is a likely target domain for this technique. This type of scalability is limited, however, since there is no guarantee widgets integrated with one service will interoperate with the integrated widgets of another. In addition, there is no guarantee widgets can be integrated with multiple services in a cost-effective manner. Scalability issues are discussed further in Section 6.3.


5. Related work

This section describes related work in hypermedia toolkits, open hypermedia systems, groupware toolkits, and integration techniques.


Hypermedia toolkits provide applications with hypermedia abstractions and services in much the same way user-interface toolkits provide user-interface services. Typically, applications make use of these toolkits by subclassing the hypermedia classes provided. This allows an application to specialize the classes for its domain while taking advantage of the hypermedia services provided. HOT [15] provides a set of C++ data and view classes and is useful for constructing closed hypermedia-enabled applications. Garrido and Rossi [10] provide similar services to SmallTalk applications. This hypermedia framework, however, provides specialized graphical widgets which can be used to provide link markers and navigational services. These widgets depend on the application using the rest of the hypermedia framework in order to function properly.
The primary difference between these toolkits and the TI technique is one of focus. The former provides classes used to gain hypermedia functionality; the latter provides graphical widgets which provide hypermedia services automatically. In the former, the impact on an existing application is greater since the application must be modified to explicitly use the provided classes. In the latter, the application simply swaps non-integrated widgets with integrated ones. Not all widgets have to be swapped either, since integrated and non-integrated widgets can coexist freely in the same interface. The effort associated with the swap is minimal, at most the developer has to provide the context information required by the integrated widgets' constructors and implement a callback routine to respond to link traversal events which require the display of a different object. Finally, the latter makes use of an OHS, allowing toolkit-constructed applications to interact with any other OHS client, whereas the former can only create closed hypermedia applications.


DHM [11], Hyperform [21], and HyperDisco [22] all provide hypermedia frameworks which make use of an underlying OHS. These toolkits share the differences the ones above have with the TI technique except for the last; since these frameworks access an underlying OHS, the integrated applications can interoperate with any other OHS client. However, the TI technique shields the interaction with the OHS from the application developer since this interaction occurs within the integrated widgets. Thus the effort associated with using the technique is still lower than with these frameworks and the services provided by the technique match the navigational capabilities of partially-integrated OHS clients [22].


The TI technique however cannot match the high-end features provided to both partially- and fully-integrated OHS clients since these frameworks are capable of providing sophisticated features like versioning and collaboration [22]. Support for such features can be provided in one of two ways. If the underlying OHS provides these features, the toolkit integrator can use them within the integrated widgets. Otherwise, the TI technique could possibly be used to integrate a different type of system which provides the desired features. The application would then make use of the widgets which accessed both the OHS and the new system. This approach and its associated problems are discussed in Section 6.3.


The CSCW field has conducted research into the requirements of groupware, and has produced toolkits to aid in the construction of groupware systems. Three notable examples are GroupKit [16], Rendezvous [12], and Suite [5]. These toolkits are relevant to the TI technique in the way in which they integrate user-interface and groupware services. There are several major differences. First, these systems do not use a separate service to provide groupware features; instead, the toolkit is the groupware system. Second, the focus of these systems is not on enabling widgets with groupware services. Rather it is on sharing entire applications between participants of a collaborative session, including not just an application's user-interface but application state as well. Finally, as a result of the previous difference, these toolkits place significant architectural requirements on client applications in order to take advantage of their services. This encourages the development of new applications built in the toolkit's style but makes it more difficult to adapt existing applications.


Additional work has been performed in the area of integrating hypermedia services into applications. One simple but powerful example is reported in [6]. A text widget was modified to access the hypermedia services of an OHS. As a result, any application which made use of the new widget gained hypermedia functionality. The TI technique provides this type of integration to all toolkit widgets, however at a potentially lower level of service. The difference is that the source code of the text widget was directly modified to achieve the integration. The TI technique attempts to provide its services without modifying the original widget. Thus the level of service provided may not be the same as achieved with a custom integration.


Kacmar provides a different integration technique in Freckles [13]. Freckles integrates the windowing system of a user's environment with an OHS. The title of an application's window is used as the context to associate hypermedia structures with an application. Link markers appear as small rectangles (actually separate windows) which are associated with particular windows. Mouse clicks on these markers invoke hypermedia operations. Additional operations are accessible in a menu provided by the hypermedia system in a separate window. Since all link markers appear and behave the same, this technique provides consistent cross-application hypermedia services similar to the TI technique.


This technique requires less effort to integrate an application than the TI technique. The only modification required is for the application to respond to a link traversal. The TI technique further requires the application make use of the integrated widgets. This additional requirement, however, provides a deeper integration than the Freckles technique. Freckles provides an environment to rapidly prototype and evaluate hypermedia functionality within an application. The visual look and feel provided by the link markers, however, cannot be easily incorporated into the application as a functional component. In the TI technique, the integrated widgets are the link markers and already exist as a functional part of the application. Thus, in this context, the TI technique can be seen as a way for developers to ease the developmental process of incorporating hypermedia functionality, once they have determined from the prototypes that it is appropriate for their applications.

6. Future work

This section considers further issues for exploration. First, future plans for the prototype are presented. Second, techniques for increasing the transparency of the integrated toolkit are examined. Finally, this section concludes with a discussion of issues related to scalability.

6.1. Proof-of-concept prototype

The prototype described in Section 3 will be evolved into a full integration of the Java AWT with the Chimera OHS. As the rest of the widgets are extended, the abstract toolkit and hypermedia interfaces will be developed. Plans are in place to test the reusability benefits provided by these interfaces. The technique will be applied to a different toolkit such as the Tk toolkit associated most closely with the Tcl scripting language. While there will have to be a syntactic conversion of the interfaces, common services, and extended widgets from Java to Tcl (or some other language such as C++), the semantics and structure of the code is expected to be largely preserved.


The other area of future research raised by the prototype is the need for session management capabilities for the integrated toolkit. Currently if two applications constructed with the prototype are running and the connection to the Chimera server is lost, then two connection dialogs are shown. This is because the hypermedia infrastructure cannot currently detect when more than one instance of itself is activated. New designs for this component of the conceptual architecture will be investigated so that its run-time sophistication is increased.

6.2. Transparency

Currently, the TI technique constructs a set of extended widgets which are used explicitly by application developers to include hypermedia services in their applications. The advantages of this are the freedom to include hypermedia-enabled widgets into specific areas of a user-interface and the maintenance benefits of having the code for these widgets located in one place. The disadvantages are the slight differences between the original widgets and the extended widgets; more importantly, developers have to modify existing applications or write new applications in order to take advantage of the provided capabilities. To reduce the effort required to use the integrated toolkit, the transparency of the technique to developers will be increased.


A first step in this direction is to eliminate the need for the hypermedia context information required by the extended widgets, thus making the interface to the these widgets identical to the originals. In the case of the prototype, Chimera requires as context information the name of the object and the name of the viewer displaying the object. One approach is to automatically construct an object name by using the concatenation of the widget's name and all its parents while using the name of the application containing the widget as the viewer name. For example, a button labelled "Quit" in an application named ChimeraEditor might have the automatically constructed view:

(ChimeraEditor, HFrame:HPanel:HButton:Quit)


This particular algorithm may not be reusable across all open hypermedia systems (because of potential differences in the kinds of information required) but the conceptual architecture can be protected against these differences by the use of abstraction. Having eliminated the differences in the interfaces of the two sets of widgets, techniques in which one widget library is substituted for another may be possible4. This would allow the inclusion of hypermedia-enabled widgets in pre-existing applications simply by relinking them or dynamically loading in the appropriate library at run-time. Thus, the potential exists for significantly reducing the developmental effort required to adopt the services provided by the integrated toolkit.

6.3. Scalability

As discussed previously, the TI technique can be used to integrate a toolkit with other services. For a particular toolkit, this approach creates one set of extended widgets for each service integrated. Unfortunately, there is no guarantee these diverse sets of widgets will interoperate. First, there is the cost of connecting to each integrated service. The prototype typically connects the Java AWT to the Chimera server in less than one second but as additional services are added, the start-up time will increase. This increase will seem cumbersome to users if it is incurred with each toolkit application. Second, the complexity of error handling increases. How should the toolkit indicate the currently available services? Third, integrated services send events to the widgets at unpredictable times. Since these events may cause application state changes, how does the toolkit manage the scheduling of these potentially conflicting events?


Fortunately, these problems are not insurmountable. It seems likely the first two problems can be solved with a more sophisticated run-time architecture for the integrated toolkit. In this hypothetical run-time, start-up costs are incurred once for the first toolkit application used but not for subsequent toolkit applications. A common service could display the systems currently connected to the toolkit. The third problem, while difficult, already has a suite of techniques for solving it from the research performed in the CSCW domain of synchronous groupware (See [12] for details).


The real scalability issue occurs when a single widget provides access to multiple services simultaneously. Using the current technique described in this paper leads to a combinatorial explosion of extended widgets. For instance, for services A, B, and C, the technique would produce (in addition to the original widget) widget A, widget B, widget C, widget AB, widget AC, and widget ABC. This is clearly unacceptable. An alternative conceptual architecture is being investigated based on the idea behind the Decorator design pattern [9]. The Decorator pattern is used in object-oriented toolkits to "decorate" a toolkit component such as adding scrollbars and a border to a text edit widget. The benefit of this pattern is any component can be decorated in this manner, allowing a clean separation of functionality. Text widgets can focus on sophisticated text editing capabilities while the scrollbar decorator can focus on providing advanced scrolling capabilities. Applying this pattern to services, may allow a widget's behaviors to be extended without having to modify the widget itself. The problems mentioned in the previous paragraph are still relevant (and still solvable) but there are many advantages to this potential technique such as increased transparency and being able to change a widget's service decorators dynamically at run-time.

7. Conclusions

This paper has outlined a new approach to the provision of hypermedia functionality to graphical user-interface applications. The TI technique is novel in the way it provides the extensions to the user-interface toolkit. Rather than using the approach of groupware toolkits, which combine user-interface and groupware services into one system, a separation-of-concerns approach is utilized allowing the user-interface toolkit to leverage the power of an open hypermedia system. This results in a maintainable, reusable, architecture that presents a low-entry barrier to use by application developers.

8. Acknowledgments

Richard N. Taylor, for his support and guidance, and his comments on early versions of this paper, is gratefully acknowledged. In addition, thanks go to the participants of the HTF II workshop at Hypertext'96 for their feedback on the proof-of-concept prototype. Leysia Palen provided support and helpful comments. Finally, the anonymous reviewers provided insightful comments which substantially improved the quality of this paper.

9. References

[1] K. M. Anderson, R. N. Taylor, and E. J. Whitehead, Jr. Chimera: Hypertext for heterogeneous software environments. In Proceedings of the ACM Conference on Hypertext, pages 94--107, Edinburgh, Scotland, September 1994.


[2] J. Conklin. Hypertext: An introduction and survey. IEEE Computer, 20(9):17--41, September 1987.


[3] H. Davis, W. Hall, I. Heath, G. Hill, and R. Wilkins. Towards an integrated information environment with open hypermedia systems. In Proceedings of the ACM Conference on Hypertext, Milano, Italy, November 1992.


[4] H. Davis, S. Knight, and W. Hall. Light hypermedia link services: A study of third party application integration. In Proceedings of the ACM Conference on Hypertext, pages 41--50, Edinburgh, Scotland, September 1994.


[5] P. Dewan. A tour of the Suite user interface software. In Proceedings of the Third Annual Symposium on User Interface Software and Technology, pages 57--65, Snowbird, UT, October 1990. Association for Computing Machinery.


[6] J. E. Drufke, Jr., J. J. Leggett, D. L. Hicks, and J. L. Schnase. The derivation of a hypertext widget class from the athena text widget. Technical Report TAMU-HRL 91-002, Hypertext Research Lab, Texas A&M University, College Station, Texas, USA, April 1991.


[7] D. C. Engelbart. Authorship provisions in AUGMENT. In Proceedings of the 1984 COMPCON Conference, pages 465--472, San Francisco, CA, USA, February 1984.


[8] D. C. Engelbart. Toward high-performance organizations: A strategic role for groupware. In Proceedings of the GroupWare'92 Conference, San Jose, CA, USA, August 1992. Morgan Kaufmann.


[9] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, Massachusetts, 1995.


[10] A. Garrido and G. Rossi. A framework for extending object-oriented applications with hypermedia functionality. Submitted to the Hypermedia Journal, January, 1996.


[11] K. Grønbæk and R. H. Trigg. Design issues for a dexter-based hypermedia system. Communications of the ACM, 37(2):40--49, February 1994.


[12] R. D. Hill, T. Brinck, S. L. Rohall, J. F. Patterson, and W. Wilner. The Rendezvous architecture and language for constructing multiuser applications. ACM Transactions on Computer-Human Interaction, 1(2):81--125, June 1994.


[13] C. J. Kacmar. A process approach for providing hypermedia services to existing, non-hypermedia applications. Electronic Publishing: Organization, Dissemination, and Distribution, 8(1):31--48, March 1995.


[14] J. Nielsen. Usability Engineering. AP Professional, Boston, MA, USA, 1993.


[15] J. J. Puttress and N. M. Guimaraes. The toolkit approach to hypermedia. In Proceedings of the European Conference on Hypertext, pages 25--37, Versailles, France, November 1990.


[16] M. Roseman and S. Greenberg. Building real-time groupware with groupkit, a groupware toolkit. ACM Transactions on Computer-Human Interaction, 3(1):66--106, March 1996.


[17] J. L. Schnase. HB2: A Hyperbase Management System for Open, Distributed Hypermedia System Architectures. PhD thesis, Texas A&M University, College Station, Texas, August 1992.


[18] J. L. Schnase, J. J. Leggett, D. L. Hicks, P. J. Nurnberg, and J. A. Sanchez. Design and implementation of the HB1 hyperbase management system. Electronic Publishing: Origination, Dissemination, and Design, 6(2):35--63, July 1993.


[19] R. N. Taylor, K. A. Nies, G. A. Bolcer, C. A. MacFarlane, K. M. Anderson, and G. F. Johnson. Chiron-1: A software architecture for user interface development, maintenance, and run-time support. ACM Transactions on Computer-Human Interaction, 2(2):105--144, June 1995.


[20] U. K. Wiil and S. Demeyer. Proceedings of the 2nd workshop on open hypermedia systems. UCI--ICS Technical Report UCI-96-10, University of California, April 1996.


[21] U. K. Wiil and J. J. Leggett. Hyperform: Using extensibility to develop dynamic, open and distributed hypertext systems. In Proceedings of the ACM Conference on Hypertext, pages 251--261, Milano, Italy, November 1992.


[22] U. K. Wiil and J. J. Leggett. The hyperdisco approach to open hypermedia systems. In Proceedings of the Hypertext'96 Conference, pages 140--148, Washington D.C., USA, March 1996.


[23] U. K. Wiil and K. Østerbye. Proceedings of the ECHT'94 workshop on open hypermedia systems. Technical Report R-94-2038, Aalborg University, Department of Computer Science, October 1994.


Footnotes

1. This material is based upon work sponsored by the Air Force Materiel Command and the Advanced Research Projects Agency under Contract Number F30602-94-C-0218. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred.


2. All of the code snippets in this section have been simplified for demonstrational purposes. Error checking and event registration code has been removed and procedure calls have been inlined for clarity.


3. Note, the fact the extended widget has a different name than the original widget implies that existing applications must be modified to take advantage of the hypermedia services. This is clearly a disadvantage since developers may decide the benefits of the integrated toolkit do not outweigh the effort required to modify their existing applications. Techniques for avoiding this limitation are considered in Section 6.2.


4. See, for instance, the Abstract Factory pattern in [9] for a potential object-oriented solution.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/references.html
##-----------------TITLE------------------------##
References
##------------------TEXT------------------------##
ConclusionsTable of ContentsFootnotes(Previous)(Next)
9. References

[1] K. M. Anderson, R. N. Taylor, and E. J. Whitehead, Jr. Chimera: Hypertext for heterogeneous software environments. In Proceedings of the ACM Conference on Hypertext, pages 94--107, Edinburgh, Scotland, September 1994.


[2] J. Conklin. Hypertext: An introduction and survey. IEEE Computer, 20(9):17--41, September 1987.


[3] H. Davis, W. Hall, I. Heath, G. Hill, and R. Wilkins. Towards an integrated information environment with open hypermedia systems. In Proceedings of the ACM Conference on Hypertext, Milano, Italy, November 1992.


[4] H. Davis, S. Knight, and W. Hall. Light hypermedia link services: A study of third party application integration. In Proceedings of the ACM Conference on Hypertext, pages 41--50, Edinburgh, Scotland, September 1994.


[5] P. Dewan. A tour of the Suite user interface software. In Proceedings of the Third Annual Symposium on User Interface Software and Technology, pages 57--65, Snowbird, UT, October 1990. Association for Computing Machinery.


[6] J. E. Drufke, Jr., J. J. Leggett, D. L. Hicks, and J. L. Schnase. The derivation of a hypertext widget class from the athena text widget. Technical Report TAMU-HRL 91-002, Hypertext Research Lab, Texas A&M University, College Station, Texas, USA, April 1991.


[7] D. C. Engelbart. Authorship provisions in AUGMENT. In Proceedings of the 1984 COMPCON Conference, pages 465--472, San Francisco, CA, USA, February 1984.


[8] D. C. Engelbart. Toward high-performance organizations: A strategic role for groupware. In Proceedings of the GroupWare'92 Conference, San Jose, CA, USA, August 1992. Morgan Kaufmann.


[9] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, Massachusetts, 1995.


[10] A. Garrido and G. Rossi. A framework for extending object-oriented applications with hypermedia functionality. Submitted to the Hypermedia Journal, January, 1996.


[11] K. Grønbæk and R. H. Trigg. Design issues for a dexter-based hypermedia system. Communications of the ACM, 37(2):40--49, February 1994.


[12] R. D. Hill, T. Brinck, S. L. Rohall, J. F. Patterson, and W. Wilner. The Rendezvous architecture and language for constructing multiuser applications. ACM Transactions on Computer-Human Interaction, 1(2):81--125, June 1994.


[13] C. J. Kacmar. A process approach for providing hypermedia services to existing, non-hypermedia applications. Electronic Publishing: Organization, Dissemination, and Distribution, 8(1):31--48, March 1995.


[14] J. Nielsen. Usability Engineering. AP Professional, Boston, MA, USA, 1993.


[15] J. J. Puttress and N. M. Guimaraes. The toolkit approach to hypermedia. In Proceedings of the European Conference on Hypertext, pages 25--37, Versailles, France, November 1990.


[16] M. Roseman and S. Greenberg. Building real-time groupware with groupkit, a groupware toolkit. ACM Transactions on Computer-Human Interaction, 3(1):66--106, March 1996.


[17] J. L. Schnase. HB2: A Hyperbase Management System for Open, Distributed Hypermedia System Architectures. PhD thesis, Texas A&M University, College Station, Texas, August 1992.


[18] J. L. Schnase, J. J. Leggett, D. L. Hicks, P. J. Nurnberg, and J. A. Sanchez. Design and implementation of the HB1 hyperbase management system. Electronic Publishing: Origination, Dissemination, and Design, 6(2):35--63, July 1993.


[19] R. N. Taylor, K. A. Nies, G. A. Bolcer, C. A. MacFarlane, K. M. Anderson, and G. F. Johnson. Chiron-1: A software architecture for user interface development, maintenance, and run-time support. ACM Transactions on Computer-Human Interaction, 2(2):105--144, June 1995.


[20] U. K. Wiil and S. Demeyer. Proceedings of the 2nd workshop on open hypermedia systems. UCI--ICS Technical Report UCI-96-10, University of California, April 1996.


[21] U. K. Wiil and J. J. Leggett. Hyperform: Using extensibility to develop dynamic, open and distributed hypertext systems. In Proceedings of the ACM Conference on Hypertext, pages 251--261, Milano, Italy, November 1992.


[22] U. K. Wiil and J. J. Leggett. The hyperdisco approach to open hypermedia systems. In Proceedings of the Hypertext'96 Conference, pages 140--148, Washington D.C., USA, March 1996.


[23] U. K. Wiil and K. Østerbye. Proceedings of the ECHT'94 workshop on open hypermedia systems. Technical Report R-94-2038, Aalborg University, Department of Computer Science, October 1994.

ConclusionsTable of ContentsFootnotes(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/conclusions.html
##-----------------TITLE------------------------##
Conclusions
##------------------TEXT------------------------##
Future WorkTable of ContentsReferences(Previous)(Next)
7. Conclusions

This paper has outlined a new approach to the provision of hypermedia functionality to graphical user-interface applications. The TI technique is novel in the way it provides the extensions to the user-interface toolkit. Rather than using the approach of groupware toolkits, which combine user-interface and groupware services into one system, a separation-of-concerns approach is utilized allowing the user-interface toolkit to leverage the power of an open hypermedia system. This results in a maintainable, reusable, architecture that presents a low-entry barrier to use by application developers.

8. Acknowledgments

Richard N. Taylor, for his support and guidance, and his comments on early versions of this paper, is gratefully acknowledged. In addition, thanks go to the participants of the HTF II workshop at Hypertext'96 for their feedback on the proof-of-concept prototype. Leysia Palen provided support and helpful comments. Finally, the anonymous reviewers provided insightful comments which substantially improved the quality of this paper.

Future WorkTable of ContentsReferences(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/futurework.html
##-----------------TITLE------------------------##
Future Work
##------------------TEXT------------------------##
Related WorkTable of ContentsConclusions(Previous)(Next)
6. Future work

This section considers further issues for exploration. First, future plans for the prototype are presented. Second, techniques for increasing the transparency of the integrated toolkit are examined. Finally, this section concludes with a discussion of issues related to scalability.

6.1. Proof-of-concept prototype

The prototype described in Section 3 will be evolved into a full integration of the Java AWT with the Chimera OHS. As the rest of the widgets are extended, the abstract toolkit and hypermedia interfaces will be developed. Plans are in place to test the reusability benefits provided by these interfaces. The technique will be applied to a different toolkit such as the Tk toolkit associated most closely with the Tcl scripting language. While there will have to be a syntactic conversion of the interfaces, common services, and extended widgets from Java to Tcl (or some other language such as C++), the semantics and structure of the code is expected to be largely preserved.


The other area of future research raised by the prototype is the need for session management capabilities for the integrated toolkit. Currently if two applications constructed with the prototype are running and the connection to the Chimera server is lost, then two connection dialogs are shown. This is because the hypermedia infrastructure cannot currently detect when more than one instance of itself is activated. New designs for this component of the conceptual architecture will be investigated so that its run-time sophistication is increased.

6.2. Transparency

Currently, the TI technique constructs a set of extended widgets which are used explicitly by application developers to include hypermedia services in their applications. The advantages of this are the freedom to include hypermedia-enabled widgets into specific areas of a user-interface and the maintenance benefits of having the code for these widgets located in one place. The disadvantages are the slight differences between the original widgets and the extended widgets; more importantly, developers have to modify existing applications or write new applications in order to take advantage of the provided capabilities. To reduce the effort required to use the integrated toolkit, the transparency of the technique to developers will be increased.


A first step in this direction is to eliminate the need for the hypermedia context information required by the extended widgets, thus making the interface to the these widgets identical to the originals. In the case of the prototype, Chimera requires as context information the name of the object and the name of the viewer displaying the object. One approach is to automatically construct an object name by using the concatenation of the widget's name and all its parents while using the name of the application containing the widget as the viewer name. For example, a button labelled "Quit" in an application named ChimeraEditor might have the automatically constructed view:

(ChimeraEditor, HFrame:HPanel:HButton:Quit)


This particular algorithm may not be reusable across all open hypermedia systems (because of potential differences in the kinds of information required) but the conceptual architecture can be protected against these differences by the use of abstraction. Having eliminated the differences in the interfaces of the two sets of widgets, techniques in which one widget library is substituted for another may be possible. This would allow the inclusion of hypermedia-enabled widgets in pre-existing applications simply by relinking them or dynamically loading in the appropriate library at run-time. Thus, the potential exists for significantly reducing the developmental effort required to adopt the services provided by the integrated toolkit.

6.3. Scalability

As discussed previously, the TI technique can be used to integrate a toolkit with other services. For a particular toolkit, this approach creates one set of extended widgets for each service integrated. Unfortunately, there is no guarantee these diverse sets of widgets will interoperate. First, there is the cost of connecting to each integrated service. The prototype typically connects the Java AWT to the Chimera server in less than one second but as additional services are added, the start-up time will increase. This increase will seem cumbersome to users if it is incurred with each toolkit application. Second, the complexity of error handling increases. How should the toolkit indicate the currently available services? Third, integrated services send events to the widgets at unpredictable times. Since these events may cause application state changes, how does the toolkit manage the scheduling of these potentially conflicting events?


Fortunately, these problems are not insurmountable. It seems likely the first two problems can be solved with a more sophisticated run-time architecture for the integrated toolkit. In this hypothetical run-time, start-up costs are incurred once for the first toolkit application used but not for subsequent toolkit applications. A common service could display the systems currently connected to the toolkit. The third problem, while difficult, already has a suite of techniques for solving it from the research performed in the CSCW domain of synchronous groupware (See [12] for details).


The real scalability issue occurs when a single widget provides access to multiple services simultaneously. Using the current technique described in this paper leads to a combinatorial explosion of extended widgets. For instance, for services A, B, and C, the technique would produce (in addition to the original widget) widget A, widget B, widget C, widget AB, widget AC, and widget ABC. This is clearly unacceptable. An alternative conceptual architecture is being investigated based on the idea behind the Decorator design pattern [9]. The Decorator pattern is used in object-oriented toolkits to "decorate" a toolkit component such as adding scrollbars and a border to a text edit widget. The benefit of this pattern is any component can be decorated in this manner, allowing a clean separation of functionality. Text widgets can focus on sophisticated text editing capabilities while the scrollbar decorator can focus on providing advanced scrolling capabilities. Applying this pattern to services, may allow a widget's behaviors to be extended without having to modify the widget itself. The problems mentioned in the previous paragraph are still relevant (and still solvable) but there are many advantages to this potential technique such as increased transparency and being able to change a widget's service decorators dynamically at run-time.

Related WorkTable of ContentsConclusions(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/toolkit.html
##-----------------TITLE------------------------##
Toolkit Integration Technique
##------------------TEXT------------------------##
IntroductionTable of ContentsProof-of-Concept Prototype(Previous)(Next)
2. Toolkit integration technique

The toolkit integration technique (TI technique) applies the conceptual architecture shown in Figure 1. The major components of the conceptual architecture are the integrated toolkit, the OHS, and the set of applications using the toolkit. The integrated toolkit consists of the original user-interface toolkit, a set of extended widgets, and a hypermedia infrastructure. It is important to note the technique's potential for toolkit independence, since any user-interface toolkit can likely be integrated by building these extensions. The variable across toolkits will be the amount of effort a toolkit integrator expends to achieve the required extensions. For instance, a toolkit constructed with an object-oriented programming language is fairly easy to integrate. The extended widgets reuse the appearance and behavior provided by the original widgets via inheritance and can be mixed and matched with the original widgets via polymorphism. On the other end of the spectrum, a library-based toolkit will require more effort since the extended widgets may have to reimplement some or all of the original widgets and employ potentially toolkit-specific mechanisms to compose these new widgets into an interface with the original widgets. The developmental effort for the former toolkit is minimal while the effort for the latter is, most likely, prohibitive. Section 2.3 addresses this issue by modifying the conceptual architecture to facilitate "plug-and-play" of certain architectural elements.


The hypermedia services provided by this technique to applications constructed with the integrated toolkit include navigation, search, history, and bookmarks. Some of these services are provided by every extended widget while others are provided only by specialized widgets. The upper bound of possible services is defined by the functionality of the underlying OHS. The lower bound will vary depending on the affordances of the widget. Thus, for instance, a button widget might only be able to initiate or receive link traversals, whereas a canvas widget might provide a popup menu to access services such as bookmark creation or search and query. Specialized widgets can keep track of a user's navigation path or display a user's bookmarks. Although not all hypermedia operations may be provided by the widgets, this does not prohibit the user from accessing these services. For instance, some services may only be available via specialized clients of the underlying OHS such as hyperweb viewers or link editors. These applications can be used in combination with toolkit-constructed applications to provide users with a complete range of hypermedia functionality.


The responsibilities placed on an application using the integrated toolkit are minor. As discussed in the next section, an application must supply context information to the extended widgets during initialization. This information is required by the underlying OHS. The only other responsibility is providing a callback routine to the toolkit to respond to link traversal events which require a new object to be displayed. This is similar to what Kacmar calls a directive from the OHS to the application [13]. The hypermedia infrastructure will call this routine as needed to display the relevant objects. If the destination of a link traversal is already displayed, the extended widgets automatically handle the event.

Figure 1. The conceptual architecture of the integrated toolkit. A line from one box to another signifies the flow of information. Unless indicated by a black arrow, information flows both ways across the line. The gray arrow indicates the potential reuse of user-interface toolkit widgets by the extended widgets.
2.1. Extended widgets

A completely integrated toolkit will have at most one extended widget for each widget present in the user-interface toolkit. These extended widgets behave exactly as the original widgets with the addition of providing access to hypermedia services. As noted above, the hypermedia services available for a particular widget will vary depending on the affordances of the widget but will typically include some way to add the widget (i.e. the widget's anchor) to a link and to initiate a link traversal from the widget. The user-interface to these services for each widget may also vary depending on the affordances of the widget. While it is important to ensure a consistent interface to hypermedia services across widgets, research has shown that only iterative usability testing with end-users will result in a "usable" interface [14]. As such, this paper will not attempt to define the specific interface for each widget. Instead, it is important to note that once defined, these widgets will behave the same in each application providing consistent cross-application access to hypermedia services.


The programmatic interface to an extended widget is virtually identical to the original widget. The difference is limited to initialization of the widget, in which certain hypermedia-specific information is required. Typically, open hypermedia systems require a context in order to persistently store and access hypermedia structures such as anchors and links. Thus, before a hypermedia-enabled widget can create hypermedia structures, the developer must initialize it with context information. The developmental effort of using an extended widget is therefore minimal. There are several techniques which may prove useful to eliminate the need for this context information. These techniques are discussed in Section 6.2.


From the standpoint of a toolkit integrator, the work required to create an extended widget consists of identifying the hypermedia services available for a widget, defining a user-interface to those services, constructing a new widget to mimic the original widget (trivial if the toolkit is constructed in an object-oriented language), and extending the new widget to appropriately interact with the hypermedia infrastructure to provide the identified services. The latter includes properly handling the context information supplied at initialization, creating the appropriate hypermedia structures, engaging in the protocols of the hypermedia system, and supplying the end-user with appropriate feedback to hypermedia events, such as link traversal.


While these steps imply a non-trivial amount of work for the toolkit integrator, several characteristics help to make the effort manageable. First, not all widgets need to be integrated for developers to benefit from the extensions. Widgets can be prioritized according to some criterion such as developer requests or perceived utility, and incrementally integrated. Second, widgets are, in general, independent of each other and thus integration work can be done in parallel by a team of toolkit integrators. Third, since the original widgets are unmodified by the construction of the integrated widgets, existing toolkit applications continue to function; no effort is needed to keep the toolkit "backward-compatible." The result of the integration is a suite of extended widgets that automatically provide hypermedia services in a consistent fashion and utilize common mechanisms provided by the hypermedia infrastructure.

2.2. Hypermedia infrastructure

The hypermedia infrastructure provides an interface to the underlying OHS and implements common services for the extended widgets. This is similar to the role played by HyperDisco's tool integrator [22] which provides this functionality to HyperDisco clients. In the TI technique, however, client applications will primarily interact only with the extended widgets not with the hypermedia infrastructure. The only interaction between them occurs when handling link-traversal directives.


The extended widgets use the OHS interface to access hypermedia services. The interface provides component, anchor, link, and composite operations. These are standard hypermedia concepts [2] in which a component maps to a particular object, anchors specify regions of interest within the object, links specify a relationship of some type over a set of anchors, and composites allow components to be grouped and hierarchically composed. The operations support the creation, deletion, and manipulation of these concepts. In addition, operations are provided to query and search the resulting hyperweb and initiate link traversal. Note that the simple existence of an operation in the infrastructure does not imply each widget will make use of the operation. Instead widgets will use the minimum set of operations needed to implement their hypermedia services.


The abstractions provided by the hypermedia infrastructure allow widgets to create hypermedia structures to model their hypermedia needs. For instance, a scrollbar may register itself as a component with one anchor for each of its thumb positions. Traversing to one of its anchors could then cause it to jump to the specified thumb position. A button may be modeled as a component with a single anchor. Traversing to the button's anchor could then cause the button to execute its action just as if the user had clicked on it. A panel may be modeled as a composite managing a set of components. A user-interface thus creates a set of hypermedia structures within the OHS, allowing it to participate in a hyperweb.


The hypermedia infrastructure also implements the common services required by all of the extended widgets. This prevents having to replicate the services in each widget, provides a consistent behavior across widgets, and localizes the code for them in one place. Common services include managing a connection with the OHS, handling hypermedia-related errors, and providing a consistent interface to link traversals. Initially, the common services use the original toolkit to provide the user feedback. For example, a link traversal dialog may need to make use of window, scrolling list, and button widgets. This use, of course, is not desirable from the standpoint of reuse, since toolkit-specific code is placed in the hypermedia infrastructure. Fortunately, as the toolkit integration progresses, the common services can migrate from using the widgets in the toolkit to using their counterparts in the set of extended widgets. The next section considers other issues related to making the extensions reusable across multiple toolkits and hypermedia systems.

2.3. Plug-and-play issues

A goal for the TI technique is reusability across the wide range of user-interface toolkits and open hypermedia systems. The technique would have little practical value if applying the technique required the same amount of work the second time as it required the first. In order to address these issues, the conceptual architecture presented in Figure 1 has been modified slightly to bring reuse issues to the forefront (see Figure 2). The major change is to identify and isolate the areas in which code specific to the user-interface toolkit or OHS is likely to exist. The second change is to indicate the bootstrapping of the hypermedia infrastructure with respect to the widgets used by its common services.


The new elements are the abstract toolkit and hypermedia interfaces. These abstract interfaces hide the details of the actual systems used from the extended widgets, which are implemented solely in terms of these new interfaces. Moving to a new hypermedia system or user-interface toolkit involves constructing a mapping between the abstract interface and the actual system used. Once the mapping is complete the extended widgets and the common services can be used without modification. Implementations using an object-oriented programming language can benefit from the use of the Bridge design pattern [9] to aid in the construction of these abstract interfaces.


One design choice used in previous work on providing abstract interfaces to multiple toolkits is the least common denominator approach [19]. This technique hides the differences between user-interface toolkits by providing only the functionality common to all of them. While these issues are relevant to the TI technique, they are not as significant, since the goal is to make the extended widgets as reusable as possible across multiple toolkits. This is different from the goal of making the applications using the extended widgets on one integrated toolkit portable to other integrated toolkits. The interoperability provided by the hypermedia services to the applications reduces the importance of this latter goal. Instead the ability to re-host the extended widgets on a different user-interface toolkit with a minimum of effort is more important. This goal should be achievable since the differences between modern user-interface toolkits are not so significant as to be prohibitive.The next section presents a proof-of-concept prototype representing the first attempt at implementing the conceptual architecture of the TI technique.

Figure 2. The conceptual architecture modified to highlight reuse issues. The extended widgets are implemented solely in terms of the abstract toolkit and hypermedia interfaces. This eases the task of reusing the extensions with a different user-interface toolkit or open hypermedia system. The common services of the hypermedia infrastructure initially make use of actual toolkit widgets (gray line) to provide user feedback. Extended widgets are eventually used (black line) as they become available. This bootstrapping process is required for only the initial implementation of the technique since subsequent implementations simply reuse the resulting code.
IntroductionTable of ContentsProof-of-Concept Prototype(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/relatedwork.html
##-----------------TITLE------------------------##
Related Work
##------------------TEXT------------------------##
BenefitsTable of ContentsFuture Work(Previous)(Next)
5. Related work

This section describes related work in hypermedia toolkits, open hypermedia systems, groupware toolkits, and integration techniques.


Hypermedia toolkits provide applications with hypermedia abstractions and services in much the same way user-interface toolkits provide user-interface services. Typically, applications make use of these toolkits by subclassing the hypermedia classes provided. This allows an application to specialize the classes for its domain while taking advantage of the hypermedia services provided. HOT [15] provides a set of C++ data and view classes and is useful for constructing closed hypermedia-enabled applications. Garrido and Rossi [10] provide similar services to SmallTalk applications. This hypermedia framework, however, provides specialized graphical widgets which can be used to provide link markers and navigational services. These widgets depend on the application using the rest of the hypermedia framework in order to function properly.
The primary difference between these toolkits and the TI technique is one of focus. The former provides classes used to gain hypermedia functionality; the latter provides graphical widgets which provide hypermedia services automatically. In the former, the impact on an existing application is greater since the application must be modified to explicitly use the provided classes. In the latter, the application simply swaps non-integrated widgets with integrated ones. Not all widgets have to be swapped either, since integrated and non-integrated widgets can coexist freely in the same interface. The effort associated with the swap is minimal, at most the developer has to provide the context information required by the integrated widgets' constructors and implement a callback routine to respond to link traversal events which require the display of a different object. Finally, the latter makes use of an OHS, allowing toolkit-constructed applications to interact with any other OHS client, whereas the former can only create closed hypermedia applications.


DHM [11], Hyperform [21], and HyperDisco [22] all provide hypermedia frameworks which make use of an underlying OHS. These toolkits share the differences the ones above have with the TI technique except for the last; since these frameworks access an underlying OHS, the integrated applications can interoperate with any other OHS client. However, the TI technique shields the interaction with the OHS from the application developer since this interaction occurs within the integrated widgets. Thus the effort associated with using the technique is still lower than with these frameworks and the services provided by the technique match the navigational capabilities of partially-integrated OHS clients [22].


The TI technique however cannot match the high-end features provided to both partially- and fully-integrated OHS clients since these frameworks are capable of providing sophisticated features like versioning and collaboration [22]. Support for such features can be provided in one of two ways. If the underlying OHS provides these features, the toolkit integrator can use them within the integrated widgets. Otherwise, the TI technique could possibly be used to integrate a different type of system which provides the desired features. The application would then make use of the widgets which accessed both the OHS and the new system. This approach and its associated problems are discussed in Section 6.3.


The CSCW field has conducted research into the requirements of groupware, and has produced toolkits to aid in the construction of groupware systems. Three notable examples are GroupKit [16], Rendezvous [12], and Suite [5]. These toolkits are relevant to the TI technique in the way in which they integrate user-interface and groupware services. There are several major differences. First, these systems do not use a separate service to provide groupware features; instead, the toolkit is the groupware system. Second, the focus of these systems is not on enabling widgets with groupware services. Rather it is on sharing entire applications between participants of a collaborative session, including not just an application's user-interface but application state as well. Finally, as a result of the previous difference, these toolkits place significant architectural requirements on client applications in order to take advantage of their services. This encourages the development of new applications built in the toolkit's style but makes it more difficult to adapt existing applications.


Additional work has been performed in the area of integrating hypermedia services into applications. One simple but powerful example is reported in [6]. A text widget was modified to access the hypermedia services of an OHS. As a result, any application which made use of the new widget gained hypermedia functionality. The TI technique provides this type of integration to all toolkit widgets, however at a potentially lower level of service. The difference is that the source code of the text widget was directly modified to achieve the integration. The TI technique attempts to provide its services without modifying the original widget. Thus the level of service provided may not be the same as achieved with a custom integration.


Kacmar provides a different integration technique in Freckles [13]. Freckles integrates the windowing system of a user's environment with an OHS. The title of an application's window is used as the context to associate hypermedia structures with an application. Link markers appear as small rectangles (actually separate windows) which are associated with particular windows. Mouse clicks on these markers invoke hypermedia operations. Additional operations are accessible in a menu provided by the hypermedia system in a separate window. Since all link markers appear and behave the same, this technique provides consistent cross-application hypermedia services similar to the TI technique.


This technique requires less effort to integrate an application than the TI technique. The only modification required is for the application to respond to a link traversal. The TI technique further requires the application make use of the integrated widgets. This additional requirement, however, provides a deeper integration than the Freckles technique. Freckles provides an environment to rapidly prototype and evaluate hypermedia functionality within an application. The visual look and feel provided by the link markers, however, cannot be easily incorporated into the application as a functional component. In the TI technique, the integrated widgets are the link markers and already exist as a functional part of the application. Thus, in this context, the TI technique can be seen as a way for developers to ease the developmental process of incorporating hypermedia functionality, once they have determined from the prototypes that it is appropriate for their applications.

BenefitsTable of ContentsFuture Work(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/HICSS30/benefits.html
##-----------------TITLE------------------------##
Toolkit Integration Technique Benefits
##------------------TEXT------------------------##
Proof-of-Concept PrototypeTable of ContentsRelated Work(Previous)(Next)
4. Benefits of toolkit integration technique

The TI technique provides the following benefits.



Minimally-Invasive: The technique extends the services of the target toolkit without extensive modifications. In fact, the prototype of the previous section did not modify the Java AWT at all. Instead only new code was written to implement the hypermedia infrastructure. The HButton class gained most of its functionality via inheritance. This approach allows existing toolkit applications to continue to function, while allowing new applications to make use of the new services. Existing applications must be modified to use the integrated toolkit. The cost of doing so is mitigated by the near identical interface of the extended widgets in comparison to the original widgets.


Incremental: The target user-interface toolkit can be extended incrementally. Developers are not forced to wait for the entire integration to occur but can take advantage of integrated widgets as they become available. In fact, the minimum work required of a toolkit integrator as demonstrated by the proof-of-concept prototype is providing the interface to the hypermedia system and implementing the service which manages a connection with the OHS. At that point, widgets and common services can be incrementally built using an iterative development process.


Reusable: The extensions to the toolkit can be built such that code specific to a particular user-interface toolkit or OHS is localized. Subsequent implementations of the technique can reuse a large portion of the code implementing the extensions. The primary task in moving to a new toolkit or hypermedia system is mapping the new system to the abstract toolkit/hypermedia interfaces.


Maintainable: The resulting architecture is maintainable for two reasons. First, code specific to the user-interface toolkit or OHS is localized, making it easier to locate problems concerning their use. Second, changes to either one of the two subsystems results only in work for the toolkit integrator who must modify the extensions to comply with the changes or take advantage of new services. Application which use the integrated toolkit are completely shielded from changes to the hypermedia system, and in fact will transparently take advantage of any new services, once the extensions have been updated by the toolkit integrator. Changes to the user-interface toolkit may impact developers who use the integrated toolkit, but these changes would have affected them anyway.


Pervasive: Applications which contain integrated widgets provide hypermedia services pervasively throughout their user-interface. These services provide end-users with several advantages. First, hypermedia services are consistent across applications. Users can reuse the hypermedia-related skills learned in one application in all others. Second, users have the power to create hypermedia links throughout their computing environment. Third, depending on the link-traversal behavior implemented for the integrated widgets, users can perform a limited type of scripting in which traversals started in one application can control the actions of other applications. Finally, toolkit applications can interoperate with any existing client of the OHS. Since most open hypermedia systems have the power to integrate third-party applications, such as word processors, spreadsheets, and Web browsers, the range of applications and data which can be linked into the hyperweb is considerable.


Scalable: Finally, this technique is partially scalable in the sense that it should be possible to substitute some other system in place of the OHS and produce widgets that access the services of this system. For instance, as discussed in Section 5, groupware is a likely target domain for this technique. This type of scalability is limited, however, since there is no guarantee widgets integrated with one service will interoperate with the integrated widgets of another. In addition, there is no guarantee widgets can be integrated with multiple services in a cost-effective manner. Scalability issues are discussed further in Section 6.3.


Proof-of-Concept PrototypeTable of ContentsRelated Work(Previous)(Next)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/related.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Related Work
##------------------TEXT------------------------##
Table of ContentsFuture WorkConclusions

6. Related Work
There has been substantial evolution of hypertext functionality during the last decade and several significant efforts to apply hypertext to the software development problem (or similar). The systems described below are discussed in chronological order of appearance and were chosen either for their historical importance or because of their close relation to and impact upon the design of Chimera.
6.1 The Dexter Hypertext Reference Model
The Dexter Hypertext Reference Model (Dexter) is a framework for comparing hypertext systems developed as the result of two NIST workshops in 1988 [13]. It attempts to provide a standard hypertext terminology and also describe the important abstractions found in hypertext systems. At least one system has been developed based on Dexter (DeVise [12]) and Dexter itself has also been extended (AHM [16]).

Dexter defines three layers: the run-time layer, the storage layer, and the within-component layer. The storage layer sits in the middle and interfaces with the run-time layer via presentation specifications, and the within-component layer via anchors. The storage layer creates a network of components of three types: atomic, composite, and link. Atomic components contain data stored in the within-component layer and presented by tools in the run-time layer. In addition, atomic components contain anchors which index directly into the data and allow the data to be linked. Composite components allow scalable hyperwebs to be constructed. Link components contain specifiers which describe how atomic and composite components are linked together.

Chimera cannot be completely modeled in Dexter. For instance, Chimera can handle the presence of links with zero or one anchors (dangling links). Dexter's intolerance for such constructs has been widely criticized [12, 16, 21]. Also Chimera's notion of a view cannot be adequately modeled by a composite component, because a Chimera view contains information about the object being viewed and the viewer used to create the view. A composite component on the other hand only contains references to atomic components which only contain data. In Dexter, anchors are created directly on the data referenced by atomic components, whereas in Chimera, anchors are created on views not on the objects (i.e. data) themselves. This additional level of abstraction is not possible in Dexter. In fact, we believe that Dexter cannot model the case where the same object (atomic component) is displayed differently by two or more viewers with each viewer accessing a different set of anchors and links. Chimera's view concept handles this example easily while in Dexter there would be no way to specify it. Finally, a viewer is free to define its anchors with respect to anything in its view including objects which exist only at run-time e.g. a graphical widget. We believe that Dexter would be unable to specify this type of anchor, since a graphical widget lies in the domain of Dexter's "presentation specifications" and anchors can not be created in Dexter with respect to these specifications.
6.2 Virtual Notebook System
The Virtual Notebook System (VNS) was built at the Baylor College of Medicine to support collaborative biomedical research via distributed hypertext services in a heterogeneous computing environment [28]. VNS is implemented by a set of work group servers (WGSs) distributed throughout a network. Each WGS is used to store text, graphics, and link information. Users typically store all their data with the WGS on their local machine but can also access information stored on another machine. The VNS Gatekeeper is used to integrate external tools with VNS, whereby information from these tools is copied and stored in a WGS. One interesting aspect of VNS is that while users may share data, they do not share links. Thus two users can see the same page but view different links. Link information for each user is stored separately from the data that makes up a page. After a page is constructed dynamically, a user's link information for that page is retrieved and displayed. Chimera is able to provide this functionality with its link filtering and can go one step further with its anchor filtering which allows users to see different anchors on a shared view.

VNS, in contrast to Chimera, requires that all system information be stored in a database under its control. Integration in VNS is concerned with providing the ability to copy information out of an external tool and into a VNS database. At that point, the external tool is taken out of the loop; VNS handles the display of the data from then on. Integration in Chimera is only concerned with getting a viewer to communicate with the Chimera server. Chimera makes no attempt to display a viewer's objects.
6.3 Sun's Link Service
Sun's Link Service (LS) was a commercial product which defined a protocol for an extensible and loosely coupled hypertext system [25]. An application integrates with the LS by loading in a library which implements the protocol. This library allows communication with the LS control process which facilitates communication between link-aware applications. Applications provide call-back procedures to the LS so that they can receive link-related messages. Links are binary and are stored in a database managed by the LS control process.

Chimera and the Link Service differ in three aspects. The LS promotes applications creating anchors on the underlying object via its data model. Chimera's anchors are created on a view of an object, not the object itself. This allows a Chimera viewer to store anchor information separately from the object (or objects) to which it refers. Links are hidden in the LS; that is, an application cannot retrieve links and manipulate them. This is not the case with Chimera, where links can be retrieved by an appropriate viewer and displayed in a variety of ways. This enables the creation of hierarchical hyperwebs. Finally Chimera's links are n-ary.
6.4 Hyperform
Hyperform is an approach to creating flexible hyperbase support based on the notion of extensibility. It is joint work of the University of Aalborg and the Hypermedia Research Laboratory [37]. The Hyperform system is a simple framework which provides several built-in classes that perform basic hyperbase features such as concurrency control, notification control, access control, version control, and search and query. A user of Hyperform takes this initial framework and extends the built-in classes to produce a hyperbase system tailored for the hypermedia applications in the user's environment. The object-oriented language used to implement the Hyperform server is the key to its extensibility and allows for new data objects and methods to be added at run-time which in turns produces an environment conducive to rapid prototyping.

The Chimera approach differs greatly from the Hyperform approach. The authors of Hyperform assert that a fixed hypermedia model hinders the development of new tools by forcing developers to make compromises in their applications to match the existing model [37]. Thus, the Hyperform approach has an implicit assumption that developers of hypermedia systems want to develop one system for a certain set of tools and another system for a different set of tools which require a different hypermedia model. After several iterations of this approach a user ends up with several hypermedia systems which we believe could be incompatible with each other. Thus, objects managed by one of these systems cannot be linked to objects in another of these systems, and presumably the effort required to update applications which use one data model to the other data model is non-trivial. This implicit assumption is simply not tenable in a software development environment which is already extremely heterogeneous. It seems counter-productive to introduce more diversity in such an environment with the addition of multiple potentially incompatible hypermedia systems. There is another assumption here that all of the objects in a hypermedia system are stored in a single database. This assumption is not valid in a software development environment in which multiple heterogeneous object management systems can exist and yet it is desirable to link objects stored in these diverse object repositories.

Thus Chimera provides a flexible hypermedia model which was developed specifically for the needs of tools in a software development environment. This greatly reduces the chance that a specific tool cannot use the model provided by Chimera and not be able to participate in a Chimera hyperweb. In fact Chimera's hypermedia model was designed with the assumption that Chimera would enter an environment with many pre-existing tools which would eventually be integrated with it. Thus the model had to be as flexible as possible.
6.5 Microcosm
Microcosm is an open hypertext system developed at the University of Southampton [5, 6, 15]. It is a link service that attempts to keep all aspects of the system such as the hypertext model, the messages passed from applications to Microcosm, and Microcosm's response to such messages open and tailorable. Microcosm-aware applications send selections and action pairs to the Microcosm Document Control System (DCS). The DCS sends the message through a chain of filters which act on the message by blocking it or passing it on, perhaps modifying it along the way. A special type of filter is a linkbase which upon finding the source of a link in the message attaches the destination of the link to the message.  The message emerges from the filter chain into the link dispatcher which presents to the user any actions contained in the resulting message. Microcosm can integrate non-aware Microcosm viewers through the use of a shared clipboard. However this is a worst-case situation that is rarely used as most applications that users want to use with Microcosm contain the hooks needed to integrate with Microcosm. Microcosm has been applied to situations involving several hundred megabytes of information and can handle multiple sets of links over the same set of data (by swapping in or out various linkbases in the filter chain).

There are three distinctions between Chimera and Microcosm.
Microcosm uses a message-based API while Chimera uses a multi-lingual programmer's API.  Microcosm messages are in a tagged ASCII format. Filters act on tags in the ASCII message that they recognize and ignore all other tags. In addition, each filter can introduce any tag and its associated data into any message. In contrast, the details of Chimera's message format are hidden from Chimera clients by the Chimera API and the Chimera server by a message ADT. This use of abstraction allows the Chimera developers to freely change the format of the messages without affecting the rest of the system. This allows the message format to be as simple (ASCII text) or as complex (an Ada variant record) as needed to effectively support the semantics of the Chimera API. This freedom to change message formats is not available in Microcosm but their approach can potentially integrate more tools into their system since they do not have to modify each participating tool to use a programmer's API. Chimera's approach to integrating non-aware viewers is to create a wrapper or proxy program which uses both the Chimera API and whatever mechanism the non-aware viewer has to communicate with external systems.

	All Microcosm-aware applications must provide all hypertext functionality via a menu-based interface. While this promotes a common interaction style between viewers, it may also prevent some applications (such as those without a graphical user interface) in participating in the system. Chimera does not prescribe or restrict a viewer's interface in any way, with the idea that in a software development environment, developers will tolerate inconsistency in interface in return for using a powerful tool within a Chimera hyperweb.

	Microcosm has no analogous concept for Chimera's view concept. Each document in Microcosm has a user-defined physical type. Each physical type is associated with one viewer. When a particular document is the destination of a link traversal, Microcosm invokes the associated viewer on the specified document. Chimera's view concept is independent of where a particular data element is stored. This allows Chimera greater flexibility in handling multiple views of a single object, and also handles easily the case where a single view consists of data accessed from multiple sources.

6.6 System Prototype 0, 1, 2, and 3
The Hypermedia Research Laboratory (HRL) at Texas A&M University has engaged in the building of several hypermedia systems (SP 0-3) since 1991 [19, 21]. At the same time, the HRL has also built a series of hyperbase systems (HB 0-3) to support the data storage requirements of these hypermedia systems [26, 27]. SP3 defines a flexible hypertext model. Applications manage components which have persistent selections created upon them. These persistent selections are attached to anchors which are then associated with links. These links create association sets that are modeled in the underlying hyperbase.

This matches Chimera's hypertext concepts fairly well. The only difference being that multiple persistent selections can be associated with a single anchor. In Chimera, if the viewer wanted to associate multiple regions of its view to one anchor it could do so, but this would necessarily make the mapping function between anchors and regions of the view more complex. Typically Chimera viewers map one region per anchor, which would be the equivalent of mapping one persistent selection to anchor in SP3.  A distinctive feature of the HRL work is that anchors and links are first-class executing programs that can provide a wide range of run-time semantics.  It also allows user interaction with hypertext services to be handled by the anchor and link processes taking this burden off of the client applications. (This is handled by virtue of the fact that anchors and links are supplied as classes which have a default set of behaviors which applications can subclass and modify as desired.) SP3 and HB3 provide a sophisticated environment that represents a first attempt at providing hypermedia-in-the-large.

The differences between Chimera and the HRL work are many. For instance, Chimera is not yet at a state where it can support multi-user collaboration on a shared hyperweb. A few additional differences are outlined below.
Chimera has taken a different approach with respect to anchors and links. They are objects managed by viewers and the Chimera server respectively as opposed to being first-class processes. This allows for anchors to be specifically tailored to a viewer while placing a burden on viewer developers to implement this functionality for each new viewer. It allows links to be handled in a consistent manner at the price of implementing special link behaviors in the Chimera server.

	SP3 requires applications to use its object manager (HB3) to store application data; this allows SP3 to support versioning of application data and hypertext information. Chimera, in contrast, places no such restrictions on its viewers requiring viewer cooperation to provide reliable versioning.

	Chimera associates anchors with views, while SP3 associates anchors with persistent selections which refer directly to an application's data. This enables Chimera, when combined with a viewer mechanism such as Chiron, to provide greater flexibility in displaying an anchor, supporting the ability of several viewers (concurrently) providing different views of the same object, where the anchors and their presentation are view-specific (and this all separated by Chiron from any application code). This is similar, though, to SP3's notion of a context. In SP3, depending on the context, different sets of anchors and links will be made available to an application displaying the object. Contexts are handled in Chimera through a combined use of attribute-value pairs and the filtering of anchors and links by the Chimera server for a particular view.

	SP3 links are not "ordinary" objects and thus anchors cannot be defined upon them and thereby participate in hierarchical webs. Thus Chimera appears to have a scalability advantage.


Table of ContentsFuture WorkConclusions




This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:35:11 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/concepts.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Hypertext Concepts
##------------------TEXT------------------------##
Table of ContentsIntroductionConceptual Architecture

2. Hypertext Concepts
Chimera has a flexible set of hypertext concepts that map well into the domain of software development environments. Our concepts include objects, viewers, views, anchors, links, attribute-value pairs, and hyperwebs (See Figure 1). In the remainder of this section, we define each concept and provide an example which illustrates how they can be applied in a software development environment.

Figure 1: Chimera Concept Example. Chimera's hypertext concepts are shown on the left. Two viewers are combined with one object to produce two distinct views. An anchor is added to each view and then combined in one link. On the right, an example hyperweb presents a data file (stored as a file in the operating system) being displayed by two different viewers. One viewer displays the data as a spreadsheet, creating a spreadsheet view of the data file.The other viewer displays the data as a chart, creating a chart view of the same data. The two distinct anchors are indicated by a black box in the spreadsheet, and a black underline in the chart. The anchors are stored in the Chimera database, not in the data file.  The two anchors are members of the link. Attribute-value pairs are not indicated to avoid visual clutter.

ObjectsObjects are named, persistent entities whose internal structure is unknown and irrelevant to Chimera.ViewersViewers are named active entities that display objects.  The operations provided by a viewer are specific to the viewer and the type of objects it displays. Typically viewers provide browsing, creation, and editing functionality on objects within their domain.ViewsViews denote a pair  where  is a viewer for an object . Note that an object may be displayed by more than one viewer, and thus participate in multiple views. Views contain anchors.AnchorsAnchors are defined and managed by viewers in the context of a view. An anchor tags some portion of a view as an item of interest.  Anchors are tailored by a viewer to the particular view of the object being displayed.  Unlike hypertext systems which require direct anchor to object mappings [12], with anchors often embedded in the objects themselves [25], Chimera anchors may represent some purely visual component, such as a button or other interface element. Even when creating anchors on the view of an object, the underlying object may be left unmodified, still usable by tools unaware of Chimera's existence.LinksA link is a set of anchors. Links relate portions of views. Links are first-class objects in Chimera and a viewer can be constructed to display them. Anchors may be created on these link views and included in other links. In this manner Chimera supports "links to links," an important abstraction which supports construction of large, complex hyperwebs.Attribute-Value PairsEach instance of a Chimera hypertext concept can have an arbitrary number of attribute-value pairs associated with it. An attribute-value pair consists of two associated strings where one string contains the attribute's name, the other its value. Attribute-value pairs are commonly used in hypertext systems to provide run-time semantics or behavior for hypertext entities[3]. Example uses of attributes include providing access to an anchor only to the user who created it, or link viewers filtering their displays to show only certain types of links.HyperwebsA collection of objects, viewers, views, anchors, and links along with their attributes is a Chimera hyperweb. A hyperweb is similar to Leggett's hypermedia [21] and Halasz's hypertext [13].


Example. Several of the Chimera hypertext concepts are demonstrated by a term project from a senior level software engineering project class. For this project, students augmented a flight simulator program distributed with Chiron so that its design and requirements documents, both created with FrameMaker, are efficiently accessed via link traversal.

At the heart of the flight simulator are abstract data types (ADTs) representing the state of the aircraft, including the aircraft's pitch, roll, heading, altitude, and speed. Gauges in the flight simulator's cockpit visualize information from these ADTs as they are updated by the simulator's flight equations. Chiron performs this visualization. In this application the ADTs are considered Chimera objects, Chiron is  considered a Chimera viewer, and the gauges that Chiron produces are Chimera views.

The flight simulator requirements and design documents were written using FrameMaker. Both documents are considered Chimera objects. FrameMaker allows users to access and edit these documents, hence FrameMaker is a (Chimera) viewer. The display of the requirements document represents a Chimera view, as does the display of the design document. Anchors are created on the display of the section titles within these documents.

Students added two buttons to each flight simulator gauge, marked "Requirements" and "Design" respectively. These buttons do not visualize any portion of the ADT represented by each gauge, rather they are the visual indication of two Chimera anchors created on the gauge/view. For each gauge, the Requirements anchor was put in a link along with an anchor on the top of the requirements document section describing that gauge. Thus, a single click of the requirements button takes the engineer from the running ("flying") simulator to the requirements for that gauge in the requirements document. The Design anchor was similarly linked to the design document.

The artificial horizon gauge demonstrates the value of the Chimera view concept. This gauge produces a visualization which is a synthesis of information from two objects, the pitch ADT and the roll ADT. This gauge represents a distinct view from the gauges/views that just show the values of the two ADTs separately. Students were able to add their anchor buttons to all three views. Thus while there is no object in the application which directly corresponds to the artificial horizon view, the engineer is nonetheless able to link the gauge to its appropriate requirements document. Moreover since Chimera anchors are defined on a view rather than an object, anchors can be added to multiple simultaneous views of the same object.

Table of ContentsIntroductionConceptual Architecture



This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:33:39 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/implementation.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Implementation Architecture
##------------------TEXT------------------------##
Table of ContentsConceptual ArchitectureFuture Work

4. An Implementation Architecture
We have constructed a prototype of Chimera to validate the concepts presented in Section 2 and the conceptual architecture of Section 3. This prototype has been used to support the example described in Section 2 (as well as many other applications). Our prototype was constructed on Sun SPARCstations under the Unix operating system using the Ada and C programming languages. In this section, we describe the design choices that we made in mapping the conceptual architecture into a working prototype and discuss other issues concerning the prototype such as performance and size statistics.
4.1 Chimera Server
The Chimera server realizes and in some cases exceeds the goals set out for it in Section 3.1. We discuss each goal in roughly the order they were presented in Section 3.1 in the paragraphs below.

At the heart of the Chimera server lies a set of Ada packages which implement Chimera's hypertext concepts as ADTs. The Chimera server coordinates access to this set of ADTs by responding to remote procedure calls made by Chimera clients. These clients are invoked by end-users (or the process-invoker) and typically contain one viewer (although multiple viewers per client is allowable). The Chimera server can handle multiple clients run by multiple users at the same time.

Filtering information is maintained for each viewer connected to the Chimera server. Anchors and links can be filtered such that different sets of these concepts can be provided to different users for the same view. Users can select the level of filtering received if the viewer provides an interface to do so9. The default filtering level is none, i.e., all anchors and links for a particular view are accessible. The other filtering level is user_only, such that only those anchors and links created by a user on a particular view are accessible. This functionality allows Chimera to provide support for multiple contexts in a single hyperweb. Eventually we plan to implement a system of ownership and permissions modeled after Unix's file permissions. Thus, only those anchors and links which are readable by a user will be accessible for a particular view. We will then extend Chimera's support for multiple contexts by allowing a user to have different roles and thus gain access to different sets of anchors and links.

An active link is maintained for each user connected to the Chimera server. An active link is a mechanism provided by the Chimera server to allow modeless link creation. In typical hypertext systems, link creation occurs as a mode.  The user indicates that a new link is desired, adds (typically two) anchors to this link and then continues working. In Chimera, a user can create several empty links, select one of these links to be active, and then add anchors to this active link at any time thereafter. The user can also at any time select another link to be the active link. Note that viewers are not required to use the active link mechanism. It is provided only as a convenience function in an attempt to foster common interaction styles between Chimera viewers.  A viewer can forgo the active link mechanism, register its own links, and modify them independent of other viewers.

Hyperwebs are mapped into Unix directories where the Chimera server stores temporary run-time files along with the persistent state of its ADTs. The ADTs save their state information with the Pleiades object management system. Users select which hyperweb they want to access through a resource file (.chimerarc) located in their home directories which the Chimera server reads on start-up.

The Chimera server currently supports fourteen hypertext events and clients can register or deregister interest in any of them10 (See Figure 3). The events range from reporting changes to the hyperweb, such as the addition or deletion of hypertext concepts, to link traversal events and active link events.

Event NameAssociated InformationServer DisconnectNoneNew ViewerViewer IdentifierDelete ViewerViewer IdentifierNew ObjectObject IdentifierDelete ObjectObject IdentifierNew ViewView IdentifierDelete ViewView IdentifierNew AnchorAnchor IdentifierDelete AnchorAnchor IdentifierNew LinkLink IdentifierDelete LinkLink IdentifierModify LinkLink IdentifierLink TraversalAnchor IdentifierActive LinkLink IdentifierFigure 3: Chimera's Hypertext Events

Finally, clients provide a variety of information about themselves to the server.  This information includes whether each viewer in each client is ready to receive hypertext events, what hypertext events each viewer is interested in, and what view(s) each viewer is in. The server also knows how each viewer would like to be invoked via an invocation policy attribute associated with each viewer. This policy is used when the server must send a link traversal event to a view not currently displayed by any connected viewer. A viewer with an invocation policy of "Once_Only" is only invoked once and all subsequent link traversal events are sent to it. This is for viewers which can display multiple views, perhaps by opening a new window for each one or by closing the previous view before opening the new one. An alternative invocation policy is "Every_Time" which causes the server to invoke (via the process invoker) a new instance of a viewer each time a link traversal occurs to an undisplayed view.
4.2 Process Invoker
The process invoker is an RPC server to which the Chimera server sends messages when it wants a particular viewer invoked. The Chimera server sends a viewer name which the process invoker maps into an executable program or shell script which it then invokes. This invocation is currently handled by having the process invoker use the Unix fork command to start a child process. This child process calls the Unix execvp command which replaces the child process with the specified executable program which then begins to run. The map that the process invoker uses to determine which executable program to run is read in once at start-up and is stored in the hyperweb that the user is accessing. The information in the map file must be entered manually via a text editor in the current implementation. (The limitations implicit in this will be fixed in future implementations. They can be overcome by providing tools to manage a process invoker's map file and altering the process invoker to detect changes to its map file at run-time.)
4.3 Chimera Client
A major benefit of the client-server architecture of Chimera is that its clients may be written in more than one language.  An API to the Chimera server for a particular language is required before that language can be used to construct Chimera clients. An advantage of the API approach is that low-level RPC details of passing messages to the Chimera server are completely hidden from the clients which use the API. Instead clients invoke subprograms like register_anchor or traverse_link and the API converts these subprograms calls (and their parameters) into the appropriate RPC messages and ships them to the Chimera server. The API also passes back any return values from the server to the calling client. This conversion is straight forward and includes creating a new RPC buffer, marshaling the parameters into the buffer, making the actual RPC call, retrieving any return values from the buffer, and deallocating the RPC buffer.

Chimera supports clients written in Ada and C with APIs for both languages. Several clients have been written using each of these APIs. A C++ API is in the works but, as of this writing, is not yet complete. In addition, engineers at IBM Owego, New York, developed tcl bindings to Q with the result being that they can send RPC messages to the Chimera server. These tcl bindings do not represent a complete API to Chimera, however, since they cannot yet receive hypertext events from the Chimera server. Work is now in progress to develop a tcl API which is built on top of the C API.

The Ada API creates two Ada tasks per viewer. One task handles sending messages to the Chimera server; the second task handles receiving hypertext events from the server. These tasks operate independently and maintain separate Unix sockets.  This allows multiple connections to the Chimera server within a single Unix process.  The Ada API has proven to work successfully with other client-server systems, the most notable being a simultaneous connection by one viewer to a Chimera server, a Chiron server, and a sound server.

The C API allows C programs to use Chimera services within a single Unix process.  Two sockets are maintained by the C API, requiring application writers to take responsibility for the scheduling of message transmission and event reception.  Since many programs using the C API will also use X Windows to produce their user interface, support was added to receive Chimera events from within an Xt event loop.  Chimera events are handled using a callback mechanism.  To date, four separate C programs have been written which are simultaneously Chimera and X clients within a single Unix process.
4.4 External Systems
As of this writing, seven viewers for several media types have been integrated with the Chimera system.  These viewers are briefly described below.




FrameMakerThe FrameMaker program was integrated into the Chimera system without modifying its executable image.  A wrapper program translates between Chimera hypertext concepts and FrameMaker's built-in hypertext concepts. Custom FrameMaker macros were written for anchor creation so link traversal messages could be received by the wrapper.xviThe public-domain vi-clone xvi was integrated with Chimera by a group of senior students as a class project for a software engineering project course.  All existing vi editing functions work normally, with hypertext functionality accessed through a graphical control panel written using the Motif toolkit.  Chimera services are accessed through the C API.  Link traversals to xvi cause a different buffer to be opened for each new file referenced in the link.Flight SimulatorAs described earlier, the flight simulator is a simulation of an aircraft.  Written in Ada using Chiron, the flight simulator features each gauge in a separate thread of control.  The Ada API easily allows multiple threads of hypertext functionality to operate independently within a single Unix process.mpegAn ambitious term project for the software engineering project course, the mpeg viewer allows anchors to be defined on mpeg movies.  Anchors may be defined on sections of each frame, and may have a duration from one frame to the entire movie.  Authoring support allows anchors to be defined on a frame, then copied from frame to frame.  Authors may then single-step through the movie and adjust anchors on individual frames for the best fit.  Anchors may be added to the active link from any frame.  The mpeg viewer was created by extending a public-domain mpeg player using the C API.xgifAnother result of the same course, the xgif viewer allows anchors to be defined on sections of a GIF11 image. A public-domain GIF viewer was augmented using the C API to display a hypertext control panel written using the Motif toolkit. The control panel varies depending on whether the GIF viewer is in author mode or view mode.  Link traversals to xgif cause a new xgif process to be invoked to view the linked-to GIF file.Sound PlayerThe sound player presents a list of sounds to which anchors are attached.  Link traversals to a particular anchor causes the sound player to play the associated sound. The Sound Player uses Chiron for its user interface, the Ada API for its hypertext functionality, and a Sun sound server for sound capability, making it simultaneously a client of three separate servers.ButtonThe button is a simple viewer which displays a window containing only a button.  An anchor is then associated with this button. This anchor may be a member of only one link (a restriction enforced by this particular viewer), and can be used as a placeholder for a section of a document. This viewer is noteworthy since its view is not associated with any underlying object, yet it can participate in a Chimera hyperweb.

4.5 Metrics
The Chimera API consists of approximately 90 entry points. The Ada API library is 296 kilobytes (K) in size. The C API library is 62 K. The Chimera server is 2.3 megabytes in size and uses approximately 5 megabytes of memory when executing.

Our metrics for the performance of Chimera is anecdotal. From a user's perspective, a link traversal between two running viewers occurs instantaneously. If a link traversal leads to a non-running viewer, there is a noticeable delay while Unix spins up the new process. After the newly invoked viewer has initialized the completion of the link traversal occurs quickly.
We conducted one performance experiment with the integrated FrameMaker client.  We set up a link traversal between two FrameMaker documents using Chimera and FrameMaker's own internal hypertext functionality. The user noticed no difference between the time it took to complete either traversal despite the fact that the Chimera link traversal involved the passing of RPC messages across four Unix processes while the FrameMaker link traversal was handled completely within FrameMaker.

Table of ContentsConceptual ArchitectureFuture Work




This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:34:24 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/conclusions.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Conclusions
##------------------TEXT------------------------##
Table of ContentsRelated WorkAcknowledgments

7. Conclusions
In conclusion, Chimera makes a variety of contributions to software engineering environments and to hypertext technology, including the simultaneous satisfaction of the requirements described in the introduction.  The essence of the contributions are key concepts and separations of concerns, provision of an effective set of server capabilities, and the demonstrated ability to simultaneously satisfy a wide variety of objectives in a single system.

The concepts and separations include view-specific anchors and separating object and anchor persistency from link persistency. Viewers define anchors and a hypertext server has responsibility for management of the links.  Allowing viewers to define anchors permits a variety of types of anchors to be defined, and they may be implemented in non-invasive ways.  Neither the database(s) of objects nor the user interface are part of Chimera or its concepts.  The concepts are defined in a media-independent manner and such that scalability is supported.

The Chimera server interface supports multiple, concurrent clients written in multiple programming languages and demonstrates that commercial "black-box" tools can be integrated (provided they support minimal interprocess communication).

We have built a prototype system, Chimera, to validate both the concepts and architecture. In addition, we believe our approach has value outside of the SDE domain and can aid such tasks as ethnographic studies and the building of digital libraries.

Some open, and potentially troublesome, issues with this approach exist. Since viewers define anchors, and viewers may be heterogeneous, a lack of consistent user interface to the hypertext is more likely to occur than not. More troublesome from the SDE point of view, however, is the observation that the relations indicated by the hypertext links are in addition to whatever relations are maintained by the environment's object managers. This may yield a number of problems, including maintaining consistency in the face of change to the object stores. On the other hand it does not seem realistic to assume the existence of a single object manager which is responsible for maintaining all relations in an environment, whether they originate from quick, dynamic, and user-discretionary hypertext link creation, or careful specification and design of a complex project's master database of strongly-typed artifacts. The broad research issue, in a heterogeneous world, is determining how to maintain consistency between various relation/link managers. For a near-term partial solution, one approach we intend to pursue is the automatic creation (and maintenance) of hyperlinks from object manager relations; in such a case hypertext style navigation of an OM store would be enabled. It seems much more problematic to attempt to go the other direction, however (from hyperlinks to OM relations), because of the limitations of current OM systems. Additional key research activities include determining appropriate mechanisms for supporting access controls (so, e.g., a project's on-line personnel records are not accessible by those unauthorized), versioning, and support for collaborative hyperweb creation.

Table of ContentsRelated WorkAcknowledgments




This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:33:59 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/references.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:References
##------------------TEXT------------------------##
Table of ContentsAcknowledgments

References



[1]V. R. Basili and B. T. Perricone. Software Errors and Complexity: An Empirical Investigation. Communications of the ACM, 27(1):42--52, January 1984.[2]G. Boudier, F. Gallo, R. Minot, and I. Thomas. An overview of PCTE and PCTE+. In Proceedings of ACM SIGSOFT '88: Third Symposium on Software Development Environments, pages 248--257, November 1988. Appeared as SIGPLAN Notices 24(2) and Software Engineering Notes 13(5).[3]J. Conklin. Hypertext: An introduction and survey. IEEE Computer, 20(9):17--41, September 1987.[4]M. L. Creech, D. F. Freeze, and M. L. Gris.Using Hypertext in Selecting Reusable Software Components. In Proceedings of Hypertext'91, San Antonio, Texas, December 1991.[5]H. Davis, W. Hall, I. Heath, G. Hill, and R. Wilkins. Towards an Integrated Information Environment with Open Hypermedia  Systems. In Proceedings of the ACM Conference on Hypertext,  Milano, Italy, November 1992.[6]H. Davis, S. Knight, and W. Hall. Light Hypermedia Link Services: A Study of Third Party Application  Integration. In Proceedings of the ACM Conference on Hypertext, Edinburgh, Scotland, September 1994.[7]N. Delisle and M. Schwartz. Neptune: A hypertext system for CAD applications. In Proceedings of the ACM SIGMOD'86, pages 132--142, Washington, DC, May 1986.[8]C. Fernström, K.H. Närfelt, and L. Ohlsson. Software factory principles, architecture, and experiments. IEEE Software, 9(2):36--44, March 1992.[9]J. C. Ferrans, D. W. Hurst, M. A. Sennett, B. M. Covnot, W. Ji, P. Kajka, and W. Ouyang. HyperWeb: A framework for hypermedia--based environments. In Proceedings of ACM SIGSOFT '92: Fifth Symposium on Software Development Environments, Washington D.C., December 1992.[10]P. K. Garg and W. Scacchi. A Hypertext System to Manage Software Life--Cycle Documents. IEEE Software, 7(3):90--98, May 1990.[11]F. Garzotto, P. Paolini, and D. Schwabe. HDM -- A Model for the Design of Hypertext Applications. In Proceedings of Hypertext'89, Pittsburgh, Pennsylvania, November 1989.[12]K. Grønbaek and R. H. Trigg. Design Issues for a Dexter--based Hypermedia System. Communications of the ACM, 37(2):40--49, February 1994.[13]F. Halasz and S. Mayer. The Dexter Hypertext Reference Model. Communications of the ACM, 37(2):30--39, February 1994.[14]F. G. Halasz. Reflections on Notecards: Seven Issues for the Next Generation of Hypermedia Systems. Communications of the ACM, 31(7):836--852, July 1988.[15]W. Hall, G. Hill, and H. Davis. The Microcosm Link Service: A Technical Briefing. In Proceedings of Hypertext'93, Seattle, Washington, November 1993.[16]L. Hardman, D. C. Bulterman, and G. van Rossum. The Amsterdam Hypermedia Model: Adding Time and Context to the Dexter Model. Communications of the ACM, 37(2):50--62, February 1994.[17]K. L. Heninger. Specifying software requirements for complex systems: New techniques and their application. IEEE Transactions on Software Engineering, SE--6(1):2--13, January 1980.
[18]D. L. Hicks, J. J. Leggett, and J. L. Schnase. Version Control in Hypertext Systems. Report TAMU HRL--91--004, Texas A&M University, July 1991.[19]C. J. Kacmar and J. J. Leggett. PROXHY : A process--oriented extensible hypertext architecture. ACM Transactions on Information Systems, 9(4):399--419, October 1991.[20]R. Kadia. Issues encountered in building a flexible software development environment: Lessons learned from the Arcadia project. In Proceedings of ACM SIGSOFT '92: Fifth Symposium on Software Development Environments, Tyson's Corner, Virginia, December 1992.[21]J. J. Leggett and J. L. Schnase. Viewing Dexter with Open Eyes. Communications of the ACM, 37(2):77--86, February 1994.[22]D. Lucarella, S. Parisotto, and A. Zanzi. MORE: Multimedia Object Retrieval Environment. In Proceedings of Hypertext'93, Seattle, Washington, November 1993.[23]M. J. Maybee, D. H. Heimbinger, D. L. Levine, and L. J. Osterweil. Q: A multi--lingual interprocess communications system for software environment implementation. Submitted for publication, 1992.[24]J. Nielsen. Hypertext and hypermedia. Academic Press, Inc., San Diego, CA, 1990.[25]A. Pearl. Sun's Link Service: A Protocol for Open Linking. In Proceedings of Hypertext'89, Pittsburgh, Pennsylvania, November 1989.[26]J. L. Schnase. HB2: A Hyperbase Management System for Open, Distributed Hypermedia System Architectures. PhD thesis, Texas A&M University, College Station, Texas, August 1992.[27]J. L. Schnase, J. J. Leggett, and D. L. Hicks. HB1: Initial Design and Implementation of a Hyperbase Management System. Technical Report TAMU--HRL 91--003, Hypertext Research Lab, Texas A&M University, October 1991.[28]F. M. Shipman, III, R. J. Chaney, and G. A. Gorry. Distributed Hypertext for Collaborative Research: The Virtual Notebook System. In Proceedings of Hypertext'89, Pittsburgh, Pennsylvania, November 1989.[29]J. B. Smith and F. D. Smith. ABC: A Hypermedia System for Artifact--Based Collaboration. In Proceedings of Hypertext'91, San Antonio, Texas, December 1991.[30]D. Steinberg and H. Ziv. Software Visualization and Yosemite National Park. In Proceedings of the Twenty--Fifth Annual Hawaii International Conference on System Sciences, January 1992.[31]N. Streitz, J. Haake, J. Hannemann, A. Lemke, W. Schuler, H. Schütt, and M. Thüring. SEPIA: A Cooperative Hypermedia Authoring Environment. In Proceedings of the ACM Conference on Hypertext, Milano, Italy, November 1992.[32]P. Tarr and L. A. Clarke. Pleiades: An object management system for software engineering environments. In ACM SIGSOFT '93: Proceedings of the Symposium on the Foundations of Software Engineering, Los Angeles, California, December 1993.[33]R. N. Taylor and G. F. Johnson. Separations of concerns in the Chiron--1 user interface development and management system. In Proceedings of the Conference on Human Factors in Computing Systems, pages 367--374, Amsterdam, April 1993. Association for Computing Machinery.[34]R. N. Taylor, K. A. Nies, G. A. Bolcer, C. A. MacFarlane, G. F. Johnson, and K. M. Anderson. Separations of concerns in the Chiron--1 user interface development and management system. UCI--ICS Technical Report TR--94--12, Department of Information and Computer Science, University of California, Irvine, March 1994.[35]I. Thomas. Tool Integration in the Pact Environment. In Proceedings of the Eleventh International Conference on Software Engineering, Pittsburgh, PA, May 1989.[36]W. F. Tichy. Design, implementation, and evaluation of a revision control system. In Proceedings of the Sixth International Conference on Software Engineering, pages 58--67, Tokyo, Japan, September 1982.[37]U. K. Wiil and J. J. Leggett. Hyperform: Using Extensibility to Develop Dynamic, Open and Distributed Hypertext Systems. In Proceedings of the ACM Conference on Hypertext, Milano, Italy, November 1992.

Table of ContentsAcknowledgments




This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:34:59 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/conceptual.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Hypertext Concepts
##------------------TEXT------------------------##
Table of ContentsHypertext ConceptsImplementation Architecture

3. A Conceptual Architecture
Section 2 outlined Chimera's hypertext concepts and gave a short example mapping them into a reasonably complex software development project. This section sketches a conceptual architecture which supports these concepts. This architecture adopts a client-server approach to providing hypertext services.  We term this the Chimera architecture (See Figure 2).

Figure 2: Example instance of Chimera conceptual architecture. Chimera clients consisting of one or more viewers access the Chimera server to provide hypertext services to their users. Note that there are no restrictions on the number of clients, the number of viewers per client, and that the same viewer can appear in multiple clients. The process invoker can invoke Chimera clients as directed by the Chimera server. Chimera clients can also access external systems in the environment, such as a graphics server or a sound server. All entities are separate Unix processes and can read/write information to a repository such as a file system or object manager.

A client-server approach is adopted to help meet the challenges of a heterogeneous SDE in which there are many users. A client-server approach allows multiple users on different machines to access a hyperweb from a dynamically changing set of viewers; hypertext events originate in one viewer and propagate to (potentially many) others via the server. The use of a server supports a multilingual approach where clients can be written in different programming languages, each of them accessing the server through their language-specific API. The use of a server also keeps process and object file sizes down since code to manage a hyperweb is centralized in the server.
We now discuss the components of the Chimera architecture which are the Chimera server, the Chimera clients, the process invoker, and the external tools and systems that populate any SDE.

3.1 Chimera Server
The primary responsibilities of the Chimera server are as follows.
Provide services which allow clients access to Chimera's hypertext concepts.

	Manage the persistence of a hyperweb. Through the use of an object manager, the Chimera server must map instances of Chimera's hypertext concepts into a persistent store.  The Chimera server is not responsible for the persistent storage of client object data.

	Receive, route, and generate hypertext events6. The server must also provide a means for clients to register interest in a subset of these events.

	Manage each connected client. For instance, the Chimera server should know what viewers are running, what view each viewer is in, and if the viewer is ready to receive hypertext events.

3.2 Process Invoker
The process invoker is responsible for spinning up Chimera clients. This occurs when the Chimera server determines it needs to send a hypertext event to a viewer that is not running. The process invoker maintains a mapping between viewer names and executable programs7. When the Chimera server sends the process invoker a viewer name, the process invoker invokes the executable program via operating system services.
3.3 Chimera Client
A Chimera client includes one or more viewers and the libraries needed to communicate with a Chimera server. Each viewer in a client is responsible for the following.
definition of the concepts "object" and "view". Each viewer must determine the precise meaning of these concepts in their own context.  While this is typically straightforward, ambiguity may arise especially with respect to versions of objects.

	definition of the concept "anchor". This includes identifying what elements of a view can have anchors attached to them, how these anchors are created and deleted, how the presence of an anchor is indicated, and what attributes can be assigned to an anchor. Since each viewer may choose to implement this functionality in different ways, a uniform interaction style cannot be guaranteed8. This is one of many issues facing designers of open hypertext systems [4, 15, 25].

	a mapping function from an anchor identifier (received from the Chimera server at the time the anchor is created) into a specific region or object of its display.

	an event handler which will respond to hypertext events from the Chimera server.

	communicating with the Chimera server. This includes registering for hypertext events, indicating its current view (which may change if the viewer is asked by its user to display a different object), accessing the services related to Chimera's hypertext concepts, and letting the Chimera server know that it is ready to receive hypertext events (this provides time for a newly invoked client to initialize before the server sends it any hypertext events).

	providing a mechanism for persistent storage of object data.

3.4 External Systems
Viewers in a Chimera client may directly interface with the user, may require the use of external tools, or may use a user interface management system to present their interface. Chimera does not place any restrictions on what external systems are accessed by its clients or how these clients communicate with their users.

Table of ContentsHypertext ConceptsImplementation Architecture



This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:33:50 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/acknowledgments.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Acknowledgments
##------------------TEXT------------------------##
8. Acknowledgments
The authors would like to acknowledge Jonathan Grudin, Rebecca Grinter, Leysia Palen, and Hadar Ziv for reading an early draft of this paper and providing comments, the reviewers for their helpful suggestions, and Hugh Davis and Wendy Hall for providing detailed information about the Microcosm link service. In addition, the authors' gratitude is extended to the students in the software engineering project course whose experiences fine-tuned Chimera and helped explore issues of integration with existing software.

Table of ContentsConclusionsReferences



This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:33:18 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/future.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Future Work
##------------------TEXT------------------------##
Table of ContentsImplementation ArchitectureRelated Work

5. Future Work
5.1 Versioning
Version control mechanisms are very important for any hypertext system that wishes to support software engineering activities in a non-trivial fashion [14,18].  Chimera is no exception, and a mechanism for versioning is a research priority.  A brief discussion of our preliminary approach is given below.

Since Chimera intentionally offers no support for storing application objects within its hypertext data repository, version control responsibility must be shared between Chimera and its client applications.  As an example, Chimera will undoubtedly be used to create relations between source code files.  Version control responsibility for the files alone will rest with an existing revision control system such as RCS [36].  Responsibility for versioning the relations between the files will reside with Chimera.

Each concept within Chimera shall be capable of multiple versions. This raises significant issues of consistency maintenance when a concept instance is changed.  For example, when an anchor is deleted, it must also be removed from any links to which it belongs, requiring a new version of those links.  Another issue is consistency maintenance between versions maintained by an external versioning system and versions maintained by Chimera.  Resolving this issue and providing a mechanism for flexible multi-concept version naming requires a new first-class concept in Chimera, the configuration. A configuration will contain a snapshot of the current versions of a hyperweb subset. External object versions can then be mapped to a configuration.

It is anticipated that parallel version paths will be supported by Chimera using the first-class configuration concept.  While explicit mechanisms will need to exist to support the creation of new branches, once a new branch has been created its use should be mostly transparent. Merging of paths will require the use of a special utility which will resolve conflicts, prompting the user for guidance, if necessary.
5.2 Collaborative Hyperweb Construction
Chimera does not currently support the collaborative building of linked hyperwebs in real-time by multiple users where each user is made aware of other user actions12. This is due to limitations in the conceptual architecture that must be addressed, as well as the current implementation's restriction of one Chimera server per hyperweb. The major limitation of the current conceptual architecture is that the Chimera server must maintain the data stored in a hyperweb along with managing any Chimera clients that connect to it.  What is needed is a separation of concerns where a new component, the hyperweb server, is added to the conceptual architecture. This new component relieves the Chimera server from its data management activities.  This involves moving the ADTs which implement Chimera's hypertext concepts from the Chimera server to the hyperweb server. The Chimera server component is then free to concentrate on supporting client access to multiple hyperweb servers (and thus multiple hyperwebs). We postulate an environment in which there is one hyperweb server per hyperweb with multiple Chimera servers managing collaborative user access in real-time to these hyperweb servers. The two sets of servers would need to work together to handle links created between hyperwebs and also to ensure that notification of changes made to the information space is propagated to all connected users. We also anticipate that the Chimera server will support access to distributed objects by employing a Universal Resource Locater (URL) style object naming mechanism and an existing transfer protocol to access remote objects.

Table of ContentsImplementation ArchitectureRelated Work




This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:34:14 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/overview/papers/ECHT94/introduction.html
##-----------------TITLE------------------------##
ECHT'94:Chimera:Introduction
##------------------TEXT------------------------##
Table of ContentsHypertext Concepts

1. Introduction
Software development environments (SDEs) are used to develop and maintain a diverse collection of highly interrelated software objects [2, 8,20, 35]. Large software systems may, for example, consist of multiple versions of requirements specifications, designs, prototypes, code, test information, scripts, documentation, and so on. The connections between these components are many and complex. Establishing and exploring these connections are major tasks of development, program understanding, and maintenance. Researchers have recognized that the size, complexity, and interconnectedness of these systems place a severe cognitive load on software engineers which often leads to errors at high levels of system abstraction, such as requirements and design [1, 17].

It has been suggested that the attributes of hypertext make it an excellent technology for capturing and visualizing relations in a SDE [7]. Providing hypertext capabilities in a SDE allows an engineer to freely associate objects without regard to the type of those objects or where they are stored. These relationships can then be accessed at a later time through a convenient user interface which allows the engineer to easily navigate them [30]1. Yet while some excellent work has taken place in this area [3, 4, 7, 9, 10, 11, 22, 24, 28, 29, 31], it is clear that no single system to date has effectively addressed all the technical challenges posed by this task.

We believe that the following technical features are among those which need to be present in hypertext systems intended to support SDE activities2.

Heterogeneous object editor & viewer support. SDEs contain a wide variety of tools for developing and manipulating objects. Different kinds of editors are used for different types of objects. SDEs also increasingly include multiple viewers of single objects, where each viewer presents different aspects of the object, perhaps using different depiction styles. It is unlikely that software development teams will give up their favorite tools in exchange for hypertext functionality. Thus a monolithic approach to providing hypertext services to a SDE would be ineffective. Ideally all editors and viewers3 in an environment should be able to use hypertext services and respond to hypertext events.

Anchors specialized to particular views. Given that different viewers of a single object may present strikingly different depictions, or that one viewer may present a depiction of information synthesized from several separate objects, anchors seem more naturally--or necessarily--associated with views, rather than objects.

Multiple-view, concurrent, and active displays. Since a software developer is typically engaged in examining and changing many different related objects "at once" it is most supportive to provide a system which enables many views to be present simultaneously, where several views may be of the same object, and where actions in views may be autonomous and concurrent.

Links across heterogeneous object managers. SDEs manage such a wide variety of objects, of different legacies, types, and possessing different object management constraints, that large scale SDEs are now beginning to support multiple, heterogeneous object managers. It is nonetheless essential to be able to establish links between objects managed by different repositories.

Action specifications on both anchors and links. Given that many different users, of different abilities and training, may be collaborating on a project using a SDE, it seems useful to provide programmable actions on both anchors and links so that actions could, for example, be determined as a function of who selected an anchor in a particular view, or how a particular link traversal was requested.

Scalable (composable) links. Hierarchy and abstraction are two key tools that engineers employ in undertaking large--scale problems. Hypertext support for SDEs must similarly provide such capabilities for dealing with large, complex, aggregations of information.

n-ary links. Software development often involves situations where several pieces of information jointly represent a single concept or are in some sense "grouped." We claim therefore that hypertext support for SDE applications should provide such capabilities in the form of n-ary links.

Multiple contexts. The process of software development involves many stages (often including cycles) where different types of information are more important than others. Often software team members have many different roles both between and within these different stages. As such, hypertext support for SDEs should be able to take into account the current stage of the software development process and enable engineers to quickly access critical information.

This paper describes a set of concepts which satisfy this set of requirements, and a prototype which implements the described concepts. The notion of viewers of objects is at the heart of the conceptualization. We postulate an environment of many types of objects; display or editing of an object requires use of a viewer. Not all viewers are of the same type; how they manage their display is their decision. We have developed a set of interfaces whereby a viewer announces to the hypertext system the anchors it defines for its view of its object(s). These view-specific anchors can then participate in (many) links. Links may be considered objects in their own right, and may thus have viewers associated with them which can define yet additional anchors. These anchors can participate in other links, and in so doing provide hierarchical composition.

This approach brings along with it some limitations and requirements. In order for our techniques and interfaces to be of value, the viewers in the SDE must be programmed to utilize the hypertext system's application program interface (API).  The viewers are also responsible for maintaining (over time) the associations they make between the anchors they announce to the hypertext system and the objects or process artifacts (e.g. a button in a window) that they display in their views.

Since heterogeneous environments are most often multilingual and distributed, the generic architecture and our implementation is client-server based and a multilingual remote procedure call (RPC) mechanism (Q [23]) is utilized. Our prototype implementation, Chimera4, utilizes the Pleiades object management system from the University of Massachusetts [32] for persistence of the server's data structures. To illustrate the concepts and the Chimera system, we discuss an application in which graphical views of a flight simulator's instrument panel are hyperlinked to statements in a requirements document maintained by FrameMaker®5. The Chiron user interface development and management system (Chiron) from the University of California, Irvine [33, 34] is used as the graphical viewer of the instrument panel.

The remainder of the paper is organized as follows. The next four sections present the basic concepts, the conceptual architecture, our particular implementation, and our future plans.  We then discuss related work and conclude.



Table of ContentsHypertext Concepts




This page is part of the Chimera web site.
Send feedback and questions to Ken Anderson.
Last updated on Thu, Sep 19, 1996 at 12:34:47 PM.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/docs/
##-----------------TITLE------------------------##
Chimera 2 - API Documentation
##------------------TEXT------------------------##
Chimera 2.0API Documentation
          
               
          
               
                    
               Back to Home
               Overview
               Software
               Documentation

               
          
               Chimera 2.0 API Documentation

               Under construction.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/setting_msxml_solaris.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Setting MSXML in the CLASSPATH on Solaris
##------------------TEXT------------------------##
 

Setting MSXML in the CLASSPATH on Solaris

 
This section provides an example of how to set up your downloaded XML parser
in the CLASSPATH.  This assumes that you have uncompressed and un-tared it 
on your system.


 Note: the tcsh shell was used for this example.


 Changing the CLASSPATH to include the XML Parser

 You will need to add the path to the xml.class file and the classes
directory to your CLASSPATH environment variable so that your 
Java interpretor will find it.


Setting the CLASSPATH to the xml.class file and the classes 
directory

 To set the CLASSPATH variable, you may use the command setenv.
You need to set the CLASSPATH to include the path to the 
xml.class file and the classes directory for msxml.
The command will look like this:

setenv CLASSPATH $CLASSPATH':path_to_msxml.class:
path_to_msxml_classes'



Note: The ' symbol is used to quote all the characters between them.  This 
is needed so that tcsh won't interpret the colon symbols :.



In the example below, the first path is set to the directory where the
msxml.class file is located and the second path is to the classes directory
where the other class files used by the xml parser are located.

Note: If you move msxml.class into the classes directory, you 
don't need the first path.




 You now have the MSXML set for your system.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/setting_httpclient_solaris.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Setting HTTPClient 0.3 in CLASSPATH on Solaris
##------------------TEXT------------------------##
 

Setting HTTPClient 0.3 in the CLASSPATH on Solaris

 
This section provides an example of how to set up your downloaded HTTPClient 0.3
to be included it in the CLASSPATH environment variable.  CLASSPATH is the
environment used by the Java interpretor (JVM) to look for Java byte-code.


 Note: the tcsh shell was used for this example.

 Appending the CLASSPATH to include the Rivendell byte-code files

 After you have unzipped the downloaded HTTPClient.zip
file, you
will need to include its class files 
in your CLASSPATH environment variable. 


 You may use any technique you like to set the CLASSPATH.  In this 
example, we are using the setenv command to append the CLASSPATH.
The command will look like this:

setenv CLASSPATH $CLASSPATH':path_to_http_classes'

Note: the ' quotes the string :path_to_http_classes so that tcsh won't
interpret the colon :.




 You now have HTTPClient installed.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/setting_rivendell_solaris.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Setting Rivendell 0.6 in CLASSPATH on Solaris
##------------------TEXT------------------------##
 

Setting Rivendell 0.6 in the CLASSPATH on Solaris

 
This section provides an example of how to set up your downloaded Rivendell 0.6
to be included it in the CLASSPATH environment variable.  CLASSPATH is the
environment used by the Java interpretor (JVM) to look for Java byte-code.


 Note: the tcsh shell was used for this example.

 Appending the CLASSPATH to include the Rivendell byte-code files

 After you have uncompressed and un-tared the downloaded Rivendell
file, you
will need to include its .class files 
in your CLASSPATH environment variable.  


 You may use any technique you like to set the CLASSPATH.  In this 
example, we are using the setenv command to append the CLASSPATH.
The command will look like this:

setenv CLASSPATH $CLASSPATH':path_to_rivendell'

Note: the ' quotes the string :path_to_rivendell so that tcsh won't
interpret the colon :.




 Note: The CLASSPATH is set to point to the directory above the
rivendell and psl directories where their classes reside.  
Also remember that Rivendell uses HTTPClient which you will need to download. 
You need to include HTTPClient in your CLASSPATH as well.


 You now have Rivendell installed so that your Java interpretor can 
use it to run Chimera 2.0.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/setting_jsdk_solaris.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Setting JSDK 1.0.1 in CLASSPATH on Solaris
##------------------TEXT------------------------##
 

Setting JSDK 1.0.1 in the CLASSPATH on Solaris

 
This section provides an example of how to set up your downloaded JSDK 1.0.1
to be included it in the CLASSPATH environment variable.  CLASSPATH is the
environment used by the Java interpretor (JVM) to look for Java byte-code.


 Note: the tcsh shell was used for this example.

 Appending the CLASSPATH to include the JSDK byte-code files

 After you have uncompressed and un-tared the downloaded JSDK, you
will need to include the classes.zip file (located under the lib directory)
of the JSDK in your CLASSPATH environment variable.  


 You may use any technique you like to set the CLASSPATH.  In this 
example, we are using the setenv command to append the CLASSPATH.
The command will look like this:

setenv CLASSPATH $CLASSPATH':path_to_JSDK_classes'

Note: The ' quotes the string :path_to_JSDK_classes so that tcsh won't
interpret the colon symbol :.





 Note: the file classes.zip contains the Java byte-code for the JSDK.
The CLASSPATH should be set to that file. 


 You now have JSDK installed so that your Java interpretor can 
use it to run Chimera 2.0.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/classpath_setup_nt.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Environment Variable setup for Windows NT
##------------------TEXT------------------------##
 

Setting the Environment Variables in Windows NT

  
This section will explain how to set the proper environment variables on
Windows NT.  



Environment Variables in Windows NT

  Environment variables provide information to applications.  
Windows NT places user defined environment variables in the
system section of the control panel.  


Setting the Proper Environment Variables

 
There are three environment variables that need to be set in order for 
you to have the modules in place that Chimera uses.  They are:


 JAVA_HOME (which contains the path to the latest JDK which should be 
	at least JDK 1.1.5)
     SWING_HOME (which contains the path to swing 0.7)
     CLASSPATH (which should contain the path to the downloaded packages)
	 JSDK 1.0.1
	     HTTPClient 0.3
	     Rivendell 0.6 
	     MSXML 1.8
	


 To check whether you have these variables set properly, follow these
steps to the location of the environment variables:


 Open the Control Panel.
	

     Double click the System icon from the Control Panel window.
	
	The System Properties window will appear.

     Click on the Environment tab.  This will display the 
	information about the environment variables used. 
	
	If you need to change the values, use the Variable and Value
	fields at the bottom of the window to set the values you wish.


 Note: In this screenshot, SWING_HOME and JAVA_HOME are properly set,
and the path to the chimera byte-code is set in CLASSPATH (chimera.zip
was a testing version of chimera used by the tester).


 You should set the Environment Variables to include the proper 
paths to packages Chimera 2.0 needs on your system. (See the sections
on setting the various packages to the CLASSPATH on Solaris for 
examples with show what the path set-ups were like.)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/classpath_setup_unix.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: swing CLASSPATH setup for Solaris
##------------------TEXT------------------------##
 

How to set CLASSPATH in Solaris and how to set swing in the CLASSPATH

 
This section will explain how to set the CLASSPATH environment variable
to include swing 1.0.1, the specific file needed is swingall.jar.
This assumes that you have swing downloaded and placed somewhere on your system.  
This section will begin with a disscussion of environment variables 
before discussing the CLASSPATH environment variable and how to set it
to the proper swing files.


Note: The examples use the tcsh shell.


Environment Variables in Unix

  Unix uses environment variables to provide 
information to applications.  
The Unix shell for instance sets up some variables automatically (LOGNAME,
HOME, etc.) when you login.  These variables may then be used by other 
applications you use.  For instance, the X Window System uses the value
of the DISPLAY environment variable to determine which host, window, and 
screen to display on.  


The CLASSPATH environment variable

 
CLASSPATH is the environment variable that the Java interpretor uses to 
look for Java byte-code (located in files that end in .class, .jar, etc.).  
This
variable must be set to include swing 1.0.1 which Chimera 2.0 uses.
(Note: If you are using JDK 1.2 beta 3 or later, then swing 1.0.1 is already 
included with JFC 1.1 whicch comes
with it so you do not have to download swing and add it to your CLASSPATH.)


Displaying the CLASSPATH


To display your current CLASSPATH type the command 

echo $CLASSPATH 

This
command asks your shell to display the string associated with the
CLASSPATH environment variable.





Note: The CLASSPATH has no value.  In this example, we will construct 
the CLASSPATH environment variable.  If you have items already in your
CLASSPATH variable you wish to keep, consult any of these links for 
examples on how to append to an existing CLASSPATH.




Example of appending CLASSPATH with the path to the JSDK on Solaris


Example of appending CLASSPATH with the path to Rivendell on Solaris


Example of appending CLASSPATH with the path to MSXML on Solaris 


Setting the CLASSPATH to the swing files

 To set the CLASSPATH variable, you may use the command setenv.
For Chimera 2.0, you need to specify the location of 
the swing 1.0.1 file used by Chimera 2.0.
The swing 1.0.1 files is:

swingall.jar

Note: swingall.jar includes the swing.jar, motif.jar, windows.jar, and 
beaninfo.jar files.

 You can use the setenv command in the following way when you
have no CLASSPATH value. The command will look like this:

setenv CLASSPATH path_to_swingall.jar

In the example below, the path to where swing 1.0.1 was located 
in the tester's environment.




 Note: You should verify that the CLASSPATH has been set by using the 
command echo $CLASSPATH which was described earlier.


 You now have the swing file you need for Chimera 2.0 set in the 
CLASSPATH
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/download.html
##-----------------TITLE------------------------##
Chimera 2.0 Beta Tutorial Download
##------------------TEXT------------------------##
 

Chimera Tutorial Download Page

  
This is the Download page for Chimera 2.0 Beta Tutorial.
 Please download the Items which you are interested in.


What's New


Chimera 2.0 Beta is now available.  Along with Chimera 2.0 Beta 1,
we have Jimage as a client application for you to use.  
Jimage it allows you to make anchors on gif and jpeg images. 
Please go to the  Chimera 2.0 Software Download page to downloa these programs.




Included on this page are materials to support the Chimera 2.0 Tutorial.


The items available


For the Chimera 2.0 Tutorial the following are available:


 bill.gif
     earthrise.gif
      
     wright_flight.jpg
      
     x-1.jpg
     x-1_flying.gif
     yeager_star.jpeg
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/chimera_classpath_setup_nt.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Chimera CLASSPATH setup for Windows NT
##------------------TEXT------------------------##
 

Setting CLASSPATH in Windows NT to include chimera.jar

 
This section will explain how to set the CLASSPATH environment variable
to include chimera.jar. CLASSPATH is used by the Java interpretor to
determine where it looks for Java byte-code.  Since the server programs 
that make up Chimera 2.0 are in chimera.jar, you need to set CLASSPATH
to the location of chimera.jar.


Setting the CLASSPATH Environment Variable

 Follow the following steps to access the area in NT where the
environment variables are located.


 Open the Control Panel.
        

     Double click the System icon from the Control Panel window.
        
	The Systems Properties window should appear.  

     Click on the Environment tab.  This will display the
        information about the environment variables used.
        
	Add the variable CLASSPATH and type in the path to the location of 
	chimera.jar in the value field. 
	(Note: This image does not show chimera.jar being added 
	to the CLASSPATH variable.  Be sure to type in the proper path
	for your system.)


 You now have the chimera.jar file set for your Java interpretor.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/chimera_classpath_setup_unix.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Chimera CLASSPATH setup for Solaris
##------------------TEXT------------------------##
 

Setting CLASSPATH on Solaris to include chimera2b2.jar

 
This section contains an example of appending chimera2b2.jar to the CLASSPATH 
environment variable.
The chimera2b2.jar file contains the server programs needed to run
Chimera 2.0 beta 2.  There are a number of packages which Chimera 2.0 uses 
in order to perform.  These packages should 
be in your CLASSPATH.  Your CLASSPATH should end up including:


the path to swing 1.0.1 (See 
	Preparing your System for Chimera )
	
	Note: swing 1.0.1 is included in JFC 1.1 which is included in JDK 1.2 beta 3.

    the path to JSDK 1.0.1 (See 
	Preparing your System for Chimera )
	
	Note: swing and JSDK are included in JDK 1.2.

    the path to HTTPClient 0.3 (See 
	Preparing your System for Chimera )

    the path to Rivendell 0.6 (See 
	Preparing your System for Chimera )

    the path to MSXML 1.8 (See 
	Preparing your System for Chimera )

     

    the path to chimera2b2.jar



Note: The example below uses the tcsh shell.


Setting the CLASSPATH to chimera2b2.jar

 There are a number of commands you can use to append your environment 
variable.  To set the CLASSPATH variable to include the path to chimera.jar,
you may use any technique which will append the path to chimera.jar to
your CLASSPATH.  The following is one way you could change your CLASSPATH.


 You should have your chimera2b2.jar file somewhere you have access to it.
In the screen-shot below, the file is in the directory /home/yuzok/classes
on the testor's machine.




 You can use the setenv command in the following way when you
want to append to the CLASSPATH value. The command will look like this:

setenv CLASSPATH $CLASSPATH':path_to_chimera.jar'

Note: For tcsh, the two ' are needed to quote the colon symbol : which
would otherwise be interpreted by the tcsh shell.
The meaning of the command is -- set CLASSPATH to the previous 
value of CLASSPATH plus all
the characters from the first ' to the last '.
The screen-shot below displays the appending using setenv command.





 You now have the chimera2b2.jar file for Chimera 2.0 in the 
CLASSPATH. (Chimera 2.0 beta 2 is contained in the chimera2b2.jar file)
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/jimage_classpath_setup_nt.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Jimage CLASSPATH setup for Windows NT
##------------------TEXT------------------------##
 

Setting CLASSPATH in Windows NT to include jimage

 
This section will explain how to set the CLASSPATH environment variable.
CLASSPATH is used by the Java interpretor to
determine where it looks for java byte-code.  The screen shots below show
the setting of CLASSPATH for the file chimera.zip, but you can use 
the same procedure to add jimage to the variable.


Setting the CLASSPATH Environment Variable

 Follow the following steps to access the area in NT where the
environment variables are located.


 Open the Control Panel.
        

     Double click the System icon from the Control Panel window.
        
	The Systems Properties window should appear.  

     Click on the Environment tab.  This will display the
        information about the environment variables used.
        
	Add the variable CLASSPATH and type in the location of 
	jimage. (Note: The screen shot shows chimera.zip as the
	file added to CLASSPATH, you should add the 
	location of jimage instead.)


 You now should have the jimage set for your Java interpretor.
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/dev/tutorial/jimage_classpath_setup_unix.html
##-----------------TITLE------------------------##
Chimera 2.0 Tutorial: Jimage CLASSPATH setup for Unix
##------------------TEXT------------------------##
 

Setting CLASSPATH in Unix to include jimage

 
This section will explain how to set the CLASSPATH environment variable
to include jimage.



Note: The example below uses the tcsh shell.


displaying the CLASSPATH


To display your current CLASSPATH type the command echo $CLASSPATH.  This
command asks your shell to display the string associated with the
CLASSPATH environment variable. (This command is available on the csh
and tcsh.)





Note: The CLASSPATH has the paths of the swing 0.7 files.


Setting the CLASSPATH to jimage

 There are a number of different means you can use to alter your environment 
variable in Unix.  
You may use any technique which will append the path to jimage to
your CLASSPATH.  The following is one way you could change your CLASSPATH.


 You should have jimage somewhere you have access to it.
In the screenshot below, the jimage is in the directory /home/yuzok/classes.




 You can use the setenv command in the following way when you
want to append to the CLASSPATH value. The command will look like this:

setenv CLASSPATH $CLASSPATH':/home/yuzok/classes'

Note: For tcsh, the two ' are needed because : is interpreted by the shell.
The ' quotes all the characters between then so tcsh won't interpret the :.
The meaning of the command is -- set CLASSPATH to the previous 
value of CLASSPATH plus all
the characters from the first ' to the last '.
The screenshot below displays the appending using setenv and the resulting 
environment variable displayed by the echo command.




 Note: You have appended CLASSPATH with the path the directory
above the jimage directory.
The Java interpretor will look for the .class files for jimage under 
the jimage directory.  


 You now have the jimage in the CLASSPATH.
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/deprecated-list.html
##-----------------TITLE------------------------##
Deprecated List
##------------------TEXT------------------------##
Overview     Package     Class     Use     Tree   Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes










Deprecated API


Contents









    Overview     Package     Class     Use     Tree   Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.remoteView



Interface SummaryCloseableTabbedPaneListenerThe listener that's notified when an tab should be closed in the
 CloseableTabbedPane.IRemoteView 
 




Class SummaryCloseableTabbedPaneA JTabbedPane which has a close ('X') icon on each tab.DataGuardServiceModel DataGuardServiceRenderer DataGuardServiceView JAmazonS3LinkLabel JDB2LinkLabel JgVaultLinkLabel RemoteViewLoader TabManager 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.ui
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.ui



Class SummaryButtonsPanelTitle: Java File Manager Description: Copyright: Copyright (c) 2001 Company:
 HomeDataGuardFrame DataGuardMain DataGuardPanel FontDialog IconBuilder JLinkLabel SplashWindowA Splash window.UIComponent UIOptions VerticalFlowLayoutVerticalFlowLayout is a layout manager that arranges
  components vertically from top to bottom.
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/gVault/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer.gVault
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.StorageServer.gVault



Class SummaryGmailIndexBuilder GmailLogin GmailStorageServer GmailUtils 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/DB2/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer.DB2
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.StorageServer.DB2



Class SummaryDB2Login DB2StorageServer 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.DataObject
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.DataObject



Class SummaryAbstractObjectData FileObjectData ObjectData ObjectIdGenerator 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/index-files/index-1.html
##-----------------TITLE------------------------##
A-Index
##------------------TEXT------------------------##
Overview     Package     Class     Use     Tree     Deprecated   Index     Help 



 PREV LETTER 
 NEXT LETTER
  FRAMES   
 NO FRAMES   
 

  All Classes







A B C D E F G H I J K L M N O P Q R S T U V W X 

A
AbstractApplication - Class in org.itr_rescue.dataGuard.ExtApps AbstractApplication() - 
Constructor for class org.itr_rescue.dataGuard.ExtApps.AbstractApplication
 
AbstractFileAction - Class in org.itr_rescue.dataGuard.DataObjectModel AbstractFileAction() - 
Constructor for class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
 
AbstractObjectData - Class in org.itr_rescue.dataGuard.DataObject AbstractObjectData() - 
Constructor for class org.itr_rescue.dataGuard.DataObject.AbstractObjectData
 
AbstractObjectData2File - Class in org.itr_rescue.dataGuard.DataObject.conversion AbstractObjectData2File() - 
Constructor for class org.itr_rescue.dataGuard.DataObject.conversion.AbstractObjectData2File
 
AbstractStorageServer - Class in org.itr_rescue.dataGuard.StorageServer AbstractStorageServer() - 
Constructor for class org.itr_rescue.dataGuard.StorageServer.AbstractStorageServer
 
ActionLoader - Class in org.itr_rescue.dataGuard.DataObjectModel ActionLoader() - 
Constructor for class org.itr_rescue.dataGuard.DataObjectModel.ActionLoader
 
actionParameter - 
Variable in class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
 
actionPerformed(ActionEvent) - 
Method in class org.itr_rescue.dataGuard.DataObjectModel.ActionLoader
 
actionPerformed(ActionEvent) - 
Method in class org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonS3Login
 
actionPerformed(ActionEvent) - 
Method in class org.itr_rescue.dataGuard.StorageServer.DB2.DB2Login
 
actionPerformed(ActionEvent) - 
Method in class org.itr_rescue.dataGuard.StorageServer.gVault.GmailLogin
 
actionPriority - 
Variable in class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
 
actions - 
Static variable in class org.itr_rescue.dataGuard.remoteView.DataGuardServiceView
 
actions - 
Static variable in class org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView
 
adaptName(String) - 
Static method in class org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonIndexBuilder
 
addAction(IAction) - 
Method in class org.itr_rescue.dataGuard.FileQueue.FileContentQueue
 
addAction(IAction) - 
Method in class org.itr_rescue.dataGuard.FileQueue.FileMetadataQueue
 
addAction(IAction) - 
Method in class org.itr_rescue.dataGuard.FileQueue.IndexQueue
 
addAction(IAction) - 
Method in class org.itr_rescue.dataGuard.FileQueue.QueueManager
 
addAditionalJar(String) - 
Static method in class org.itr_rescue.dataGuard.localFileSystem.JFMClassLoader
 
addChangeDirectoryListener(ChangeDirectoryListener) - 
Static method in class org.itr_rescue.dataGuard.ui.event.Broadcaster
Adds a listener who listens for the ChangeDirectoryEvent
addChangePanelListener(ChangePanelListener) - 
Static method in class org.itr_rescue.dataGuard.ui.event.Broadcaster
Adds a listener who listens for the ChangePanelEvent
addChangeViewListener(ChangeViewListener) - 
Static method in class org.itr_rescue.dataGuard.ui.event.Broadcaster
Adds a listener who listens for the ChangeViewEvent
addCloseableTabbedPaneListener(CloseableTabbedPaneListener) - 
Method in class org.itr_rescue.dataGuard.remoteView.CloseableTabbedPane
Adds an CloseableTabbedPaneListener to the tabbedpane.
addColorChangeListener(ColorChangeListener) - 
Static method in class org.itr_rescue.dataGuard.ui.event.Broadcaster
Adds a listener who listens for the ColorChangeEvent
addFile(AbstractObjectData) - 
Method in interface org.itr_rescue.dataGuard.remoteView.FileSystem.IRemoteFileSystemView
 
addFile(AbstractObjectData) - 
Method in class org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView
 
addFileListSelectionListener(FileListSelectionListener) - 
Static method in class org.itr_rescue.dataGuard.ui.event.Broadcaster
Adds a listener who listens for the FileListSelectionEvent
addFontChangeListener(FontChangeListener) - 
Static method in class org.itr_rescue.dataGuard.ui.event.Broadcaster
Adds a listener who listens for the FontChangeEvent
addItem(FileObjectData) - 
Method in class org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView
 
addLayer(Layer) - 
Method in class org.itr_rescue.dataGuard.StorageServer.LayerType
 
addLayer(String, String) - 
Static method in class org.itr_rescue.dataGuard.StorageServer.LayerType
 
addLayoutComponent(String, Component) - 
Method in class org.itr_rescue.dataGuard.ui.VerticalFlowLayout
Not implemented
addNewIndexEntry(String, int) - 
Method in class org.itr_rescue.dataGuard.indexing.Index
 
addRow(Vector) - 
Method in class org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTableModel
Add a row to the data model.
addRow(Object[]) - 
Method in class org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTableModel
Add a row to the data model.
addStorageServer(IStorageServer) - 
Method in class org.itr_rescue.dataGuard.StorageServer.StorageServerManager
 
addTab(String, Component) - 
Method in class org.itr_rescue.dataGuard.remoteView.CloseableTabbedPane
Adds a Component represented by a title and no icon.
addTab(String, Component, Icon) - 
Method in class org.itr_rescue.dataGuard.remoteView.CloseableTabbedPane
Adds a Component represented by a title and an icon.
addTab(IRemoteView, String) - 
Method in class org.itr_rescue.dataGuard.remoteView.TabManager
 
addToClipboard(String) - 
Method in class org.itr_rescue.dataGuard.Utilities.DataGuardClipboard
 
AmazonConfiguration - Class in org.itr_rescue.dataGuard.StorageServer.AmazonS3 AmazonConfiguration() - 
Constructor for class org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonConfiguration
 
AmazonIndexBuilder - Class in org.itr_rescue.dataGuard.StorageServer.AmazonS3 AmazonIndexBuilder() - 
Constructor for class org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonIndexBuilder
 
AmazonS3Login - Class in org.itr_rescue.dataGuard.StorageServer.AmazonS3 AmazonS3Login() - 
Constructor for class org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonS3Login
 
AmazonStorageServer - Class in org.itr_rescue.dataGuard.StorageServer.AmazonS3 AmazonStorageServer(String, String) - 
Constructor for class org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonStorageServer
 
Application - Class in org.itr_rescue.dataGuard.ExtApps Application(String, String, RemoteFileSystemView) - 
Constructor for class org.itr_rescue.dataGuard.ExtApps.Application
 
applicationPath - 
Variable in class org.itr_rescue.dataGuard.ExtApps.AbstractApplication
 
associateServer(AbstractStorageServer) - 
Method in class org.itr_rescue.dataGuard.remoteView.DataGuardServiceView
 
associateServer(AbstractStorageServer) - 
Method in class org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView
 
associateServer(AbstractStorageServer) - 
Method in interface org.itr_rescue.dataGuard.remoteView.IRemoteView
 









    Overview     Package     Class     Use     Tree     Deprecated   Index     Help 



 PREV LETTER 
 NEXT LETTER
  FRAMES   
 NO FRAMES   
 

  All Classes







A B C D E F G H I J K L M N O P Q R S T U V W X
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/conversion/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.DataObject.conversion
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.DataObject.conversion



Class SummaryAbstractObjectData2File File2FileObjectData FileNameUtils JFMFile2FileObjectData 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/overview-tree.html
##-----------------TITLE------------------------##
Class Hierarchy
##------------------TEXT------------------------##
Overview     Package     Class     Use   Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes










Hierarchy For All Packages

Package Hierarchies:org.itr_rescue.dataGuard.Configuration, org.itr_rescue.dataGuard.DataObject, org.itr_rescue.dataGuard.DataObject.conversion, org.itr_rescue.dataGuard.DataObjectModel, org.itr_rescue.dataGuard.encryption, org.itr_rescue.dataGuard.encryption.asymmetric, org.itr_rescue.dataGuard.encryption.symmetric, org.itr_rescue.dataGuard.ExtApps, org.itr_rescue.dataGuard.FileQueue, org.itr_rescue.dataGuard.indexing, org.itr_rescue.dataGuard.indexing.parser, org.itr_rescue.dataGuard.localFileSystem, org.itr_rescue.dataGuard.localFileSystem.view.detail, org.itr_rescue.dataGuard.localFileSystem.view.list, org.itr_rescue.dataGuard.remoteView, org.itr_rescue.dataGuard.remoteView.FileSystem, org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView, org.itr_rescue.dataGuard.remoteView.XmlModel, org.itr_rescue.dataGuard.StorageServer, org.itr_rescue.dataGuard.StorageServer.AmazonS3, org.itr_rescue.dataGuard.StorageServer.DB2, org.itr_rescue.dataGuard.StorageServer.gVault, org.itr_rescue.dataGuard.ui, org.itr_rescue.dataGuard.ui.event, org.itr_rescue.dataGuard.Utilities


Class Hierarchy

java.lang.Objectorg.itr_rescue.dataGuard.ExtApps.AbstractApplication (implements org.itr_rescue.dataGuard.ExtApps.IExtApps)
org.itr_rescue.dataGuard.ExtApps.Application
javax.swing.border.AbstractBorder (implements javax.swing.border.Border, java.io.Serializable)
javax.swing.border.LineBorderorg.itr_rescue.dataGuard.localFileSystem.view.detail.CellBorder

org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction (implements org.itr_rescue.dataGuard.DataObjectModel.IAction)
org.itr_rescue.dataGuard.DataObjectModel.CopyFileActionorg.itr_rescue.dataGuard.DataObjectModel.CutFileActionorg.itr_rescue.dataGuard.DataObjectModel.DeleteFileActionorg.itr_rescue.dataGuard.DataObjectModel.FileSearchActionorg.itr_rescue.dataGuard.DataObjectModel.HelpActionorg.itr_rescue.dataGuard.DataObjectModel.IndexActionorg.itr_rescue.dataGuard.DataObjectModel.MakeDirFileActionorg.itr_rescue.dataGuard.DataObjectModel.MoveFileActionorg.itr_rescue.dataGuard.DataObjectModel.NewServiceActionorg.itr_rescue.dataGuard.DataObjectModel.OpenFileActionorg.itr_rescue.dataGuard.DataObjectModel.PasteFileActionorg.itr_rescue.dataGuard.DataObjectModel.QuitActionorg.itr_rescue.dataGuard.DataObjectModel.RenameFileActionorg.itr_rescue.dataGuard.DataObjectModel.UpdateFileActionorg.itr_rescue.dataGuard.DataObjectModel.UpdateFileStructure
org.itr_rescue.dataGuard.DataObject.AbstractObjectDataorg.itr_rescue.dataGuard.DataObject.ObjectDataorg.itr_rescue.dataGuard.DataObject.FileObjectData

org.itr_rescue.dataGuard.DataObject.conversion.AbstractObjectData2Fileorg.itr_rescue.dataGuard.StorageServer.AbstractStorageServer (implements org.itr_rescue.dataGuard.StorageServer.IStorageServer)
org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonStorageServer (implements org.itr_rescue.dataGuard.indexing.IRemoteIndexing)
org.itr_rescue.dataGuard.StorageServer.DB2.DB2StorageServerorg.itr_rescue.dataGuard.StorageServer.gVault.GmailStorageServer (implements org.itr_rescue.dataGuard.indexing.IRemoteIndexing)

javax.swing.table.AbstractTableModel (implements java.io.Serializable, javax.swing.table.TableModel)
javax.swing.table.DefaultTableModel (implements java.io.Serializable)
org.itr_rescue.dataGuard.remoteView.DataGuardServiceModelorg.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemViewModel
org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTableModel
org.itr_rescue.dataGuard.DataObjectModel.ActionLoader (implements java.awt.event.ActionListener)
org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonConfigurationorg.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonIndexBuilderorg.itr_rescue.dataGuard.ui.event.Broadcasterorg.itr_rescue.dataGuard.ui.event.BroadcastEventorg.itr_rescue.dataGuard.ui.event.ChangeDirectoryEventorg.itr_rescue.dataGuard.ui.event.ChangeFilesystemEventorg.itr_rescue.dataGuard.ui.event.ChangePanelEventorg.itr_rescue.dataGuard.ui.event.ChangeViewEventorg.itr_rescue.dataGuard.ui.event.ColorChangeEventorg.itr_rescue.dataGuard.ui.event.FileListSelectionEventorg.itr_rescue.dataGuard.ui.event.FontChangeEventorg.itr_rescue.dataGuard.ui.event.HelpURLChangeEvent
org.itr_rescue.dataGuard.Utilities.ByteConverterorg.itr_rescue.dataGuard.Utilities.CheckJREjava.lang.ClassLoaderorg.itr_rescue.dataGuard.localFileSystem.JFMClassLoader
org.itr_rescue.dataGuard.localFileSystem.view.list.ComboBoxCellObjectjava.awt.Component (implements java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable)
java.awt.Containerjavax.swing.JComponent (implements java.io.Serializable)
javax.swing.JLabel (implements javax.accessibility.Accessible, javax.swing.SwingConstants)
javax.swing.DefaultListCellRenderer (implements javax.swing.ListCellRenderer, java.io.Serializable)
org.itr_rescue.dataGuard.localFileSystem.view.list.ComboBoxCellRenderer
javax.swing.table.DefaultTableCellRenderer (implements java.io.Serializable, javax.swing.table.TableCellRenderer)
org.itr_rescue.dataGuard.remoteView.DataGuardServiceRendererorg.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTableCellRendererorg.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemViewRenderer
org.itr_rescue.dataGuard.ui.JLinkLabel (implements java.awt.event.MouseListener)
org.itr_rescue.dataGuard.remoteView.JAmazonS3LinkLabelorg.itr_rescue.dataGuard.remoteView.JDB2LinkLabelorg.itr_rescue.dataGuard.remoteView.JgVaultLinkLabel

javax.swing.JPanel (implements javax.accessibility.Accessible)
org.itr_rescue.dataGuard.ui.ButtonsPanelorg.itr_rescue.dataGuard.ui.DataGuardPanelorg.itr_rescue.dataGuard.localFileSystem.JFMVieworg.itr_rescue.dataGuard.localFileSystem.view.list.ListVieworg.itr_rescue.dataGuard.localFileSystem.view.detail.DetailView


javax.swing.JTabbedPane (implements javax.accessibility.Accessible, java.io.Serializable, javax.swing.SwingConstants)
org.itr_rescue.dataGuard.remoteView.CloseableTabbedPane (implements java.awt.event.MouseListener, java.awt.event.MouseMotionListener)

javax.swing.JTable (implements javax.accessibility.Accessible, javax.swing.event.CellEditorListener, javax.swing.event.ListSelectionListener, javax.swing.event.RowSorterListener, javax.swing.Scrollable, javax.swing.event.TableColumnModelListener, javax.swing.event.TableModelListener)
org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTable

java.awt.Window (implements javax.accessibility.Accessible)
java.awt.Dialogjavax.swing.JDialog (implements javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants)
org.itr_rescue.dataGuard.ui.FontDialog

java.awt.Frame (implements java.awt.MenuContainer)
javax.swing.JFrame (implements javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants)
org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonS3Login (implements java.awt.event.ActionListener)
org.itr_rescue.dataGuard.ui.DataGuardFrameorg.itr_rescue.dataGuard.StorageServer.DB2.DB2Login (implements java.awt.event.ActionListener)
org.itr_rescue.dataGuard.StorageServer.gVault.GmailLogin (implements java.awt.event.ActionListener)


org.itr_rescue.dataGuard.ui.SplashWindow


org.itr_rescue.dataGuard.Utilities.DataGuardClipboard (implements java.awt.datatransfer.ClipboardOwner)
org.itr_rescue.dataGuard.ui.DataGuardMainorg.itr_rescue.dataGuard.Configuration.DataGuardServiceConfigurationorg.itr_rescue.dataGuard.remoteView.DataGuardServiceView (implements org.itr_rescue.dataGuard.remoteView.IRemoteView)
org.xml.sax.helpers.DefaultHandler (implements org.xml.sax.ContentHandler, org.xml.sax.DTDHandler, org.xml.sax.EntityResolver, org.xml.sax.ErrorHandler)
org.itr_rescue.dataGuard.localFileSystem.FilesystemXMLHandler
java.util.Dictionary<K,V>java.util.Hashtable<K,V> (implements java.lang.Cloneable, java.util.Map<K,V>, java.io.Serializable)
org.itr_rescue.dataGuard.indexing.KeywordsIndex

org.itr_rescue.dataGuard.encryption.asymmetric.Encryptororg.itr_rescue.dataGuard.DataObject.conversion.File2FileObjectDataorg.itr_rescue.dataGuard.FileQueue.FileContentQueue (implements java.lang.Runnable)
org.itr_rescue.dataGuard.encryption.symmetric.FileEncryptororg.itr_rescue.dataGuard.FileQueue.FileMetadataQueue (implements java.lang.Runnable)
org.itr_rescue.dataGuard.DataObject.conversion.FileNameUtilsorg.itr_rescue.dataGuard.indexing.FileParsingTableorg.itr_rescue.dataGuard.encryption.asymmetric.GenerateKeyorg.itr_rescue.dataGuard.StorageServer.gVault.GmailIndexBuilderorg.itr_rescue.dataGuard.StorageServer.gVault.GmailUtilsorg.itr_rescue.dataGuard.ui.IconBuilderorg.itr_rescue.dataGuard.indexing.Index (implements org.itr_rescue.dataGuard.indexing.IIndex)
org.itr_rescue.dataGuard.indexing.IndexQueryResultorg.itr_rescue.dataGuard.FileQueue.IndexQueue (implements java.lang.Runnable)
org.itr_rescue.dataGuard.localFileSystem.JFMFile (implements java.lang.Comparable<T>)
org.itr_rescue.dataGuard.localFileSystem.JFMLocalFile
org.itr_rescue.dataGuard.DataObject.conversion.JFMFile2FileObjectDataorg.itr_rescue.dataGuard.localFileSystem.JFMFileSystemorg.itr_rescue.dataGuard.localFileSystem.JFMLocalFilesystem
org.itr_rescue.dataGuard.localFileSystem.JFMViewRepresentationorg.itr_rescue.dataGuard.encryption.asymmetric.KeyPairOrganizerorg.itr_rescue.dataGuard.indexing.KeywordEntryorg.itr_rescue.dataGuard.indexing.KeywordPointerorg.itr_rescue.dataGuard.StorageServer.Layerorg.itr_rescue.dataGuard.StorageServer.LayerTypeorg.itr_rescue.dataGuard.indexing.parser.LikeQueryUtilsorg.itr_rescue.dataGuard.FileQueue.MultipleQueueorg.itr_rescue.dataGuard.encryption.symmetric.ObjectEncryptororg.itr_rescue.dataGuard.DataObject.ObjectIdGeneratororg.itr_rescue.dataGuard.Utilities.Optionsorg.itr_rescue.dataGuard.FileQueue.QueueManagerorg.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemPopupMenuorg.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView (implements java.awt.event.FocusListener, org.itr_rescue.dataGuard.remoteView.FileSystem.IRemoteFileSystemView, javax.swing.event.ListSelectionListener, java.awt.event.MouseListener)
org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView.RemoteFileSearchView
org.itr_rescue.dataGuard.remoteView.RemoteViewLoaderorg.itr_rescue.dataGuard.encryption.asymmetric.RSACryptoorg.itr_rescue.dataGuard.encryption.Securityorg.itr_rescue.dataGuard.StorageServer.StorageServerManagerorg.itr_rescue.dataGuard.remoteView.TabManager (implements javax.swing.event.ChangeListener)
org.itr_rescue.dataGuard.indexing.parser.TextExtractorFromTxt (implements org.itr_rescue.dataGuard.indexing.parser.IParser)
java.lang.Throwable (implements java.io.Serializable)
java.lang.Exceptionorg.itr_rescue.dataGuard.remoteView.XmlModel.FileNotExistExceptionorg.itr_rescue.dataGuard.remoteView.XmlModel.FolderNotExistExceptionorg.itr_rescue.dataGuard.localFileSystem.FSExceptionorg.itr_rescue.dataGuard.remoteView.XmlModel.UserIDFileNotMatchException

org.itr_rescue.dataGuard.ui.UIComponentorg.itr_rescue.dataGuard.ui.UIOptionsorg.itr_rescue.dataGuard.Utilities.Utilsorg.itr_rescue.dataGuard.ui.VerticalFlowLayout (implements java.awt.LayoutManager, java.io.Serializable)
org.itr_rescue.dataGuard.remoteView.XmlModel.XmlFileSystemModelorg.itr_rescue.dataGuard.remoteView.XmlModel.XmlFileSystemModelUtil


Interface Hierarchy

org.itr_rescue.dataGuard.ui.event.BroadcastListenerorg.itr_rescue.dataGuard.ui.event.ChangeDirectoryListenerorg.itr_rescue.dataGuard.ui.event.ChangePanelListenerorg.itr_rescue.dataGuard.ui.event.ChangeViewListenerorg.itr_rescue.dataGuard.ui.event.ColorChangeListenerorg.itr_rescue.dataGuard.ui.event.FileListSelectionListenerorg.itr_rescue.dataGuard.ui.event.FontChangeListener
java.lang.Comparable<T>org.itr_rescue.dataGuard.DataObjectModel.IAction
java.util.EventListenerorg.itr_rescue.dataGuard.remoteView.CloseableTabbedPaneListener
org.itr_rescue.dataGuard.indexing.IIndexorg.itr_rescue.dataGuard.indexing.parser.IParserorg.itr_rescue.dataGuard.indexing.IRemoteIndexingorg.itr_rescue.dataGuard.remoteView.IRemoteVieworg.itr_rescue.dataGuard.remoteView.FileSystem.IRemoteFileSystemView
org.itr_rescue.dataGuard.StorageServer.IStorageServerorg.itr_rescue.dataGuard.localFileSystem.view.detail.PanelChangeRequestListenerjava.lang.Runnableorg.itr_rescue.dataGuard.ExtApps.IExtApps









    Overview     Package     Class     Use   Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.indexing
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.indexing



Interface SummaryIIndex IRemoteIndexing 
 




Class SummaryFileParsingTable Index IndexQueryResult KeywordEntry KeywordPointer KeywordsIndex 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.localFileSystem.view.detail
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.localFileSystem.view.detail



Interface SummaryPanelChangeRequestListenerThis interface is to let the panel that contains the JTable that a panel change request has been
 requested;
 




Class SummaryCellBorderThis class creates a nice dotted borderDetailsTableTitle:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      HomeDetailsTableCellRendererTitle: Java File Manager Description: Copyright: Copyright (c) 2001 Company:
 HomeDetailsTableModelTitle: Java File Manager Description: Copyright: Copyright (c) 2001 Company:
 HomeDetailViewThis panel implements a detailed view of the files
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView.FileSystem
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.remoteView.FileSystem



Interface SummaryIRemoteFileSystemView 
 




Class SummaryRemoteFileSystemPopupMenu RemoteFileSystemView RemoteFileSystemViewModel RemoteFileSystemViewRenderer 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.DataObjectModel
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.DataObjectModel



Interface SummaryIAction 
 




Class SummaryAbstractFileAction ActionLoader CopyFileAction CutFileAction DeleteFileAction FileSearchAction HelpAction IndexAction MakeDirFileAction MoveFileAction NewServiceAction OpenFileAction PasteFileAction QuitAction RenameFileAction UpdateFileAction UpdateFileStructure 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AmazonS3/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer.AmazonS3
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.StorageServer.AmazonS3



Class SummaryAmazonConfiguration AmazonIndexBuilder AmazonS3Login AmazonStorageServer 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.FileQueue
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.FileQueue



Class SummaryFileContentQueue FileMetadataQueue IndexQueue MultipleQueue QueueManager 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.encryption
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.encryption



Class SummarySecurity 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.localFileSystem
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.localFileSystem



Class SummaryFilesystemXMLHandler JFMClassLoaderThis class loader is used to load the classes that are requested by plugins's additional librariesJFMFileThis class is the base class of an File object.JFMFileSystemThis class represents the base class for all filesystems.JFMLocalFileTODO change me!!!JFMLocalFilesystemTODO change me!!!JFMViewTitle:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      HomeJFMViewRepresentationThis class holds the user friendly and  application friendly information about an view
 




Exception SummaryFSExceptionFileSystem Exception.
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/asymmetric/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.encryption.asymmetric
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.encryption.asymmetric



Class SummaryEncryptor GenerateKey KeyPairOrganizer RSACrypto 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/list/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.localFileSystem.view.list
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.localFileSystem.view.list



Class SummaryComboBoxCellObjectThis is the object that is displayed into the root's combobox.ComboBoxCellRendererThis renderer displays an icon along with the text, if the value is of type JFMFileListViewTitle:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      Home
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/allclasses-noframe.html
##-----------------TITLE------------------------##
All Classes
##------------------TEXT------------------------##
All Classes


AbstractApplication

AbstractFileAction

AbstractObjectData

AbstractObjectData2File

AbstractStorageServer

ActionLoader

AmazonConfiguration

AmazonIndexBuilder

AmazonS3Login

AmazonStorageServer

Application

Broadcaster

BroadcastEvent

BroadcastListener

ButtonsPanel

ByteConverter

CellBorder

ChangeDirectoryEvent

ChangeDirectoryListener

ChangeFilesystemEvent

ChangePanelEvent

ChangePanelListener

ChangeViewEvent

ChangeViewListener

CheckJRE

CloseableTabbedPane

CloseableTabbedPaneListener

ColorChangeEvent

ColorChangeListener

ComboBoxCellObject

ComboBoxCellRenderer

CopyFileAction

CutFileAction

DataGuardClipboard

DataGuardFrame

DataGuardMain

DataGuardPanel

DataGuardServiceConfiguration

DataGuardServiceModel

DataGuardServiceRenderer

DataGuardServiceView

DB2Login

DB2StorageServer

DeleteFileAction

DetailsTable

DetailsTableCellRenderer

DetailsTableModel

DetailView

Encryptor

File2FileObjectData

FileContentQueue

FileEncryptor

FileListSelectionEvent

FileListSelectionListener

FileMetadataQueue

FileNameUtils

FileNotExistException

FileObjectData

FileParsingTable

FileSearchAction

FilesystemXMLHandler

FolderNotExistException

FontChangeEvent

FontChangeListener

FontDialog

FSException

GenerateKey

GmailIndexBuilder

GmailLogin

GmailStorageServer

GmailUtils

HelpAction

HelpURLChangeEvent

IAction

IconBuilder

IExtApps

IIndex

Index

IndexAction

IndexQueryResult

IndexQueue

IParser

IRemoteFileSystemView

IRemoteIndexing

IRemoteView

IStorageServer

JAmazonS3LinkLabel

JDB2LinkLabel

JFMClassLoader

JFMFile

JFMFile2FileObjectData

JFMFileSystem

JFMLocalFile

JFMLocalFilesystem

JFMView

JFMViewRepresentation

JgVaultLinkLabel

JLinkLabel

KeyPairOrganizer

KeywordEntry

KeywordPointer

KeywordsIndex

Layer

LayerType

LikeQueryUtils

ListView

MakeDirFileAction

MoveFileAction

MultipleQueue

NewServiceAction

ObjectData

ObjectEncryptor

ObjectIdGenerator

OpenFileAction

Options

PanelChangeRequestListener

PasteFileAction

QueueManager

QuitAction

RemoteFileSearchView

RemoteFileSystemPopupMenu

RemoteFileSystemView

RemoteFileSystemViewModel

RemoteFileSystemViewRenderer

RemoteViewLoader

RenameFileAction

RSACrypto

Security

SplashWindow

StorageServerManager

TabManager

TextExtractorFromTxt

UIComponent

UIOptions

UpdateFileAction

UpdateFileStructure

UserIDFileNotMatchException

Utils

VerticalFlowLayout

XmlFileSystemModel

XmlFileSystemModelUtil
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/help-doc.html
##-----------------TITLE------------------------##
API Help
##------------------TEXT------------------------##
Overview     Package     Class     Use     Tree     Deprecated     Index   Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes










How This API Document Is Organized

This API (Application Programming Interface) document has pages corresponding to the items in the navigation bar, described as follows.
Overview



The Overview page is the front page of this API document and provides a list of all packages with a summary for each.  This page can also contain an overall description of the set of packages.

Package



Each package has a page that contains a list of its classes and interfaces, with a summary for each. This page can contain four categories:Interfaces (italic)ClassesEnumsExceptionsErrorsAnnotation Types


Class/Interface



Each class, interface, nested class and nested interface has its own separate page. Each of these pages has three sections consisting of a class/interface description, summary tables, and detailed member descriptions:Class inheritance diagramDirect SubclassesAll Known SubinterfacesAll Known Implementing ClassesClass/interface declarationClass/interface description

Nested Class SummaryField SummaryConstructor SummaryMethod Summary

Field DetailConstructor DetailMethod Detail
Each summary entry contains the first sentence from the detailed description for that item. The summary entries are alphabetical, while the detailed descriptions are in the order they appear in the source code. This preserves the logical groupings established by the programmer.


Annotation Type



Each annotation type has its own separate page with the following sections:Annotation Type declarationAnnotation Type descriptionRequired Element SummaryOptional Element SummaryElement Detail



Enum



Each enum has its own separate page with the following sections:Enum declarationEnum descriptionEnum Constant SummaryEnum Constant Detail


Use

Each documented package, class and interface has its own Use page.  This page describes what packages, classes, methods, constructors and fields use any part of the given class or package. Given a class or interface A, its Use page includes subclasses of A, fields declared as A, methods that return A, and methods and constructors with parameters of type A.  You can access this page by first going to the package, class or interface, then clicking on the "Use" link in the navigation bar.

Tree (Class Hierarchy)

There is a Class Hierarchy page for all packages, plus a hierarchy for each package. Each hierarchy page contains a list of classes and a list of interfaces. The classes are organized by inheritance structure starting with java.lang.Object. The interfaces do not inherit from java.lang.Object.When viewing the Overview page, clicking on "Tree" displays the hierarchy for all packages.When viewing a particular package, class or interface page, clicking "Tree" displays the hierarchy for only that package.


Deprecated API

The Deprecated API page lists all of the API that have been deprecated. A deprecated API is not recommended for use, generally due to improvements, and a replacement API is usually given. Deprecated APIs may be removed in future implementations.

Index

The Index contains an alphabetic list of all classes, interfaces, constructors, methods, and fields.

Prev/Next
These links take you to the next or previous class, interface, package, or related page.
Frames/No Frames
These links show and hide the HTML frames.  All pages are available with or without frames.


Serialized Form
Each serializable or externalizable class has a description of its serialization fields and methods. This information is of interest to re-implementors, not to developers using the API. While there is no link in the navigation bar, you can get to this information by going to any serialized class and clicking "Serialized Form" in the "See also" section of the class description.


Constant Field Values
The Constant Field Values page lists the static final fields and their values.



This help file applies to API documentation generated using the standard doclet.










    Overview     Package     Class     Use     Tree     Deprecated     Index   Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.ui.event
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.ui.event



Interface SummaryBroadcastListenerInterface implemented by any listenerChangeDirectoryListenerTitle:        Java File Manager
 Description:  
 Copyright:    Copyright (c) 2001
 Company:      HomeChangePanelListenerTitle:        Java File Manager
 Description:  
 Copyright:    Copyright (c) 2001
 Company:      HomeChangeViewListenerTitle: Java File ManagerColorChangeListenerThe listener that get's notified when the  color changes.FileListSelectionListenerTitle: Java File ManagerFontChangeListener 
 




Class SummaryBroadcasterThis is the class that registers the listeners, removes listeners, and notifies the listeners when a certain event occurs.BroadcastEventThis is the base class for any eventChangeDirectoryEventTitle:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      HomeChangeFilesystemEvent ChangePanelEventTitle:        Java File Manager
 Description:  
 Copyright:    Copyright (c) 2001
 Company:      HomeChangeViewEventTitle: Java File ManagerColorChangeEventThe event that gets fired when the color changes.FileListSelectionEventTitle: Java File ManagerFontChangeEvent HelpURLChangeEvent 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Configuration/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.Configuration
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.Configuration



Class SummaryDataGuardServiceConfiguration 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView.XmlModel
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.remoteView.XmlModel



Class SummaryXmlFileSystemModel XmlFileSystemModelUtil 
 




Exception SummaryFileNotExistException FolderNotExistException UserIDFileNotMatchException 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/SearchView/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView



Class SummaryRemoteFileSearchView 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.Utilities
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.Utilities



Class SummaryByteConverterTitle:CheckJRE DataGuardClipboard Options Utils 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.StorageServer



Interface SummaryIStorageServer 
 




Class SummaryAbstractStorageServer Layer LayerType StorageServerManager 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/symmetric/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.encryption.symmetric
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.encryption.symmetric



Class SummaryFileEncryptor ObjectEncryptor 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ExtApps/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.ExtApps
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.ExtApps



Interface SummaryIExtApps 
 




Class SummaryAbstractApplication Application 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/parser/package-summary.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.indexing.parser
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package org.itr_rescue.dataGuard.indexing.parser



Interface SummaryIParser 
 




Class SummaryLikeQueryUtils TextExtractorFromTxt 
 











    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/asymmetric/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.encryption.asymmetric
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.encryption.asymmetric

Classes 


Encryptor

GenerateKey

KeyPairOrganizer

RSACrypto
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.StorageServer

Interfaces 


IStorageServer



Classes 


AbstractStorageServer

Layer

LayerType

StorageServerManager
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/DB2/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer.DB2
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.StorageServer.DB2

Classes 


DB2Login

DB2StorageServer
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.ui
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.ui

Classes 


ButtonsPanel

DataGuardFrame

DataGuardMain

DataGuardPanel

FontDialog

IconBuilder

JLinkLabel

SplashWindow

UIComponent

UIOptions

VerticalFlowLayout
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.localFileSystem.view.detail
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.localFileSystem.view.detail

Interfaces 


PanelChangeRequestListener



Classes 


CellBorder

DetailsTable

DetailsTableCellRenderer

DetailsTableModel

DetailView
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.indexing
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.indexing

Interfaces 


IIndex

IRemoteIndexing



Classes 


FileParsingTable

Index

IndexQueryResult

KeywordEntry

KeywordPointer

KeywordsIndex
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/conversion/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.DataObject.conversion
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.DataObject.conversion

Classes 


AbstractObjectData2File

File2FileObjectData

FileNameUtils

JFMFile2FileObjectData
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.localFileSystem
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.localFileSystem

Classes 


FilesystemXMLHandler

JFMClassLoader

JFMFile

JFMFileSystem

JFMLocalFile

JFMLocalFilesystem

JFMView

JFMViewRepresentation



Exceptions 


FSException
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ExtApps/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.ExtApps
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.ExtApps

Interfaces 


IExtApps



Classes 


AbstractApplication

Application
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.Utilities
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.Utilities

Classes 


ByteConverter

CheckJRE

DataGuardClipboard

Options

Utils
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/list/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.localFileSystem.view.list
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.localFileSystem.view.list

Classes 


ComboBoxCellObject

ComboBoxCellRenderer

ListView
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.FileQueue
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.FileQueue

Classes 


FileContentQueue

FileMetadataQueue

IndexQueue

MultipleQueue

QueueManager
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/SearchView/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView

Classes 


RemoteFileSearchView
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/gVault/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer.gVault
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.StorageServer.gVault

Classes 


GmailIndexBuilder

GmailLogin

GmailStorageServer

GmailUtils
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/symmetric/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.encryption.symmetric
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.encryption.symmetric

Classes 


FileEncryptor

ObjectEncryptor
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.encryption
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.encryption

Classes 


Security
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AmazonS3/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.StorageServer.AmazonS3
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.StorageServer.AmazonS3

Classes 


AmazonConfiguration

AmazonIndexBuilder

AmazonS3Login

AmazonStorageServer
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Configuration/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.Configuration
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.Configuration

Classes 


DataGuardServiceConfiguration
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView.FileSystem
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.remoteView.FileSystem

Interfaces 


IRemoteFileSystemView



Classes 


RemoteFileSystemPopupMenu

RemoteFileSystemView

RemoteFileSystemViewModel

RemoteFileSystemViewRenderer
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.ui.event
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.ui.event

Interfaces 


BroadcastListener

ChangeDirectoryListener

ChangePanelListener

ChangeViewListener

ColorChangeListener

FileListSelectionListener

FontChangeListener



Classes 


Broadcaster

BroadcastEvent

ChangeDirectoryEvent

ChangeFilesystemEvent

ChangePanelEvent

ChangeViewEvent

ColorChangeEvent

FileListSelectionEvent

FontChangeEvent

HelpURLChangeEvent
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView.XmlModel
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.remoteView.XmlModel

Classes 


XmlFileSystemModel

XmlFileSystemModelUtil



Exceptions 


FileNotExistException

FolderNotExistException

UserIDFileNotMatchException
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/parser/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.indexing.parser
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.indexing.parser

Interfaces 


IParser



Classes 


LikeQueryUtils

TextExtractorFromTxt
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.remoteView
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.remoteView

Interfaces 


CloseableTabbedPaneListener

IRemoteView



Classes 


CloseableTabbedPane

DataGuardServiceModel

DataGuardServiceRenderer

DataGuardServiceView

JAmazonS3LinkLabel

JDB2LinkLabel

JgVaultLinkLabel

RemoteViewLoader

TabManager
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.DataObjectModel
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.DataObjectModel

Interfaces 


IAction



Classes 


AbstractFileAction

ActionLoader

CopyFileAction

CutFileAction

DeleteFileAction

FileSearchAction

HelpAction

IndexAction

MakeDirFileAction

MoveFileAction

NewServiceAction

OpenFileAction

PasteFileAction

QuitAction

RenameFileAction

UpdateFileAction

UpdateFileStructure
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/package-frame.html
##-----------------TITLE------------------------##
org.itr_rescue.dataGuard.DataObject
##------------------TEXT------------------------##
org.itr_rescue.dataGuard.DataObject

Classes 


AbstractObjectData

FileObjectData

ObjectData

ObjectIdGenerator
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/AbstractObjectData.html
##-----------------TITLE------------------------##
AbstractObjectData
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject

Class AbstractObjectData

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.AbstractObjectData

Direct Known Subclasses: ObjectData

public abstract class AbstractObjectDataextends java.lang.Object










Field Summary
protected  byte[]content


           
protected  java.lang.Stringid


           
protected  java.util.HashMap<java.lang.String,java.lang.String>metadata


           
 




Constructor SummaryAbstractObjectData()


           
 




Method Summary
 java.lang.StringgetId()


           
 java.lang.StringgetMetadataValue(java.lang.String metadata)


           
 byte[]getObjectContent()


           
 voidsetId(java.lang.String id)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


id

protected java.lang.String id





content

protected byte[] content





metadata

protected java.util.HashMap<java.lang.String,java.lang.String> metadata







Constructor Detail


AbstractObjectData

public AbstractObjectData()






Method Detail


getId

public java.lang.String getId()





setId

public void setId(java.lang.String id)





getMetadataValue

public java.lang.String getMetadataValue(java.lang.String metadata)





getObjectContent

public byte[] getObjectContent()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/Options.html
##-----------------TITLE------------------------##
Options
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.Utilities

Class Options

java.lang.Object
  org.itr_rescue.dataGuard.Utilities.Options


public class Optionsextends java.lang.Object










Field Summary
static java.lang.StringdefaultDir


           
static intLEFT_PANEL


           
static java.lang.Stringplatform


           
static intRIGHT_PANEL


           
 




Constructor SummaryOptions()


           
 




Method Summary
static java.lang.StringgetDefaultDir()


           
static JFMViewgetFilesPanel()


           
static java.util.VectorgetLeftFiles()


           
static int[]getLeftPanelSelections()


           
static java.lang.StringgetPlatform()


           
static java.util.VectorgetRightFiles()


           
static int[]getRightPanelSelections()


           
static java.lang.StringgetStartDirectory()


           
static voidsetDefaultDir(java.lang.String defaultDir)


           
static voidsetFilesPanel(JFMView view)


           
static voidsetLeftFiles(java.util.Vector v)


           
static voidsetLeftPanelSelections(int[] sel)


           
static voidsetPlatform(java.lang.String platform)


           
static voidsetRightFiles(java.util.Vector v)


           
static voidsetRightPanelSelections(int[] sel)


           
static voidsetStartDirectory(java.lang.String path)


           
static voidshowSplash(java.lang.Thread mainThread)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


LEFT_PANEL

public static final int LEFT_PANEL
See Also:Constant Field Values




RIGHT_PANEL

public static final int RIGHT_PANEL
See Also:Constant Field Values




defaultDir

public static java.lang.String defaultDir





platform

public static java.lang.String platform







Constructor Detail


Options

public Options()






Method Detail


setRightFiles

public static void setRightFiles(java.util.Vector v)





getRightFiles

public static java.util.Vector getRightFiles()





setLeftFiles

public static void setLeftFiles(java.util.Vector v)





getLeftFiles

public static java.util.Vector getLeftFiles()





setStartDirectory

public static void setStartDirectory(java.lang.String path)





getStartDirectory

public static java.lang.String getStartDirectory()





setRightPanelSelections

public static void setRightPanelSelections(int[] sel)





getRightPanelSelections

public static int[] getRightPanelSelections()





setLeftPanelSelections

public static void setLeftPanelSelections(int[] sel)





getLeftPanelSelections

public static int[] getLeftPanelSelections()





setFilesPanel

public static void setFilesPanel(JFMView view)





getFilesPanel

public static JFMView getFilesPanel()





getDefaultDir

public static java.lang.String getDefaultDir()





setDefaultDir

public static void setDefaultDir(java.lang.String defaultDir)





getPlatform

public static java.lang.String getPlatform()





setPlatform

public static void setPlatform(java.lang.String platform)





showSplash

public static void showSplash(java.lang.Thread mainThread)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/list/ListView.html
##-----------------TITLE------------------------##
ListView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.list

Class ListView

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JPanel
                  org.itr_rescue.dataGuard.localFileSystem.JFMView
                      org.itr_rescue.dataGuard.localFileSystem.view.list.ListView

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible
Direct Known Subclasses: DetailView

public abstract class ListViewextends JFMView



Title:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu SergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JPaneljavax.swing.JPanel.AccessibleJPanel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
protected  ComboBoxCellRenderercomboRenderer


           
protected  javax.swing.JComboBoxrootsCombo


           
protected  javax.swing.JScrollPanescroll


           
protected  javax.swing.JPaneltopPanel


           
 
Fields inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMViewDEFAULT_VIEW, filesystem, isActive, statusLabel
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryListView(java.lang.String fs)


           
 




Method Summary
 voidchangeDirectory(JFMFile file)


          Change the current directory to the one specified by the file, making
 that file the current working directory
abstract  JFMFilegetCurrentWorkingDirectory()


          This method returns the current working directory of the view.
abstract  JFMFilegetSelectedFile()


          This method returns the current selected file from the view.
abstract  JFMFile[]getSelectedFiles()


          This method returns the current selected files from the view.
protected abstract  javax.swing.JComponentgetViewComponent()


          Returns the view component (JTable or a JList)
 voidrequestFocus()


           
 
Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMViewcreateView, getFilefromName, getFilesystemName, getRegisteredViews, getViewRepresentation, isActive, refresh, registerView, registerViews, setActive
 
Methods inherited from class javax.swing.JPanelgetAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Field Detail


scroll

protected javax.swing.JScrollPane scroll





topPanel

protected javax.swing.JPanel topPanel





rootsCombo

protected javax.swing.JComboBox rootsCombo





comboRenderer

protected ComboBoxCellRenderer comboRenderer







Constructor Detail


ListView

public ListView(java.lang.String fs)






Method Detail


requestFocus

public void requestFocus()
Overrides:requestFocus in class javax.swing.JComponent





getSelectedFile

public abstract JFMFile getSelectedFile()
This method returns the current selected file from the view. If no file is selected it just returns null.

Specified by:getSelectedFile in class JFMView
Returns:JFMFile the current selected file.




getSelectedFiles

public abstract JFMFile[] getSelectedFiles()
This method returns the current selected files from the view. If no files are selected it just returns null.

Specified by:getSelectedFiles in class JFMView
Returns:JFMFile the current selected files.




getCurrentWorkingDirectory

public abstract JFMFile getCurrentWorkingDirectory()
Description copied from class: JFMViewThis method returns the current working directory of the view. If it doesn't make sense to return it,
 null should be an acceptable value.

Specified by:getCurrentWorkingDirectory in class JFMView
Returns:JFMFile the current working directory.




changeDirectory

public void changeDirectory(JFMFile file)
Change the current directory to the one specified by the file, making
 that file the current working directory

Specified by:changeDirectory in class JFMView
Parameters:file - 




getViewComponent

protected abstract javax.swing.JComponent getViewComponent()
Returns the view component (JTable or a JList)

Returns:the view component










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/asymmetric/GenerateKey.html
##-----------------TITLE------------------------##
GenerateKey
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption.asymmetric

Class GenerateKey

java.lang.Object
  org.itr_rescue.dataGuard.encryption.asymmetric.GenerateKey


public class GenerateKeyextends java.lang.Object











Constructor SummaryGenerateKey(java.lang.String password)


           
 




Method Summary
 javax.crypto.SecretKeygetKey()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


GenerateKey

public GenerateKey(java.lang.String password)






Method Detail


getKey

public javax.crypto.SecretKey getKey()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/conversion/AbstractObjectData2File.html
##-----------------TITLE------------------------##
AbstractObjectData2File
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject.conversion

Class AbstractObjectData2File

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.conversion.AbstractObjectData2File


public class AbstractObjectData2Fileextends java.lang.Object











Constructor SummaryAbstractObjectData2File()


           
 




Method Summary
static java.io.FileconvertAbstractObjectData(AbstractObjectData object,
                          java.lang.String fileName)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


AbstractObjectData2File

public AbstractObjectData2File()






Method Detail


convertAbstractObjectData

public static java.io.File convertAbstractObjectData(AbstractObjectData object,
                                                     java.lang.String fileName)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/IStorageServer.html
##-----------------TITLE------------------------##
IStorageServer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer

Interface IStorageServer
All Known Implementing Classes: AbstractStorageServer, AmazonStorageServer, DB2StorageServer, GmailStorageServer

public interface IStorageServer











Method Summary
 intconnect(java.lang.String username,
        java.lang.String password)


           
 intdelete(AbstractObjectData o)


           
 voiddisconnect()


           
 intfetch(AbstractObjectData o,
      java.lang.String path)


           
 java.lang.StringgetServiceKey()


           
 intstore(AbstractObjectData o,
      java.lang.String id)


           
 






Method Detail


connect

int connect(java.lang.String username,
            java.lang.String password)





fetch

int fetch(AbstractObjectData o,
          java.lang.String path)





store

int store(AbstractObjectData o,
          java.lang.String id)





disconnect

void disconnect()





delete

int delete(AbstractObjectData o)





getServiceKey

java.lang.String getServiceKey()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/CopyFileAction.html
##-----------------TITLE------------------------##
CopyFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class CopyFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.CopyFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class CopyFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryCopyFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


CopyFileAction

public CopyFileAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/IRemoteIndexing.html
##-----------------TITLE------------------------##
IRemoteIndexing
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Interface IRemoteIndexing
All Known Implementing Classes: AmazonStorageServer, GmailStorageServer

public interface IRemoteIndexing











Method Summary
 java.io.File[]queryIndex(java.lang.String[] searchString,
           java.lang.String path)


           
 voidstoreIndex(IIndex index)


           
 






Method Detail


storeIndex

void storeIndex(IIndex index)





queryIndex

java.io.File[] queryIndex(java.lang.String[] searchString,
                          java.lang.String path)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/XmlFileSystemModel.html
##-----------------TITLE------------------------##
XmlFileSystemModel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.XmlModel

Class XmlFileSystemModel

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.XmlModel.XmlFileSystemModel


public class XmlFileSystemModelextends java.lang.Object










Field Summary
static java.lang.StringCOPY_SOURCE


           
static java.lang.StringCOPYING


           
static java.lang.StringDELETING


           
static java.lang.StringFAILED_COPY


           
static intFILE


           
static intFIND_FILES_ONLY


           
static intFIND_FOLDERS_AND_FILES


           
static intFIND_FOLDERS_ONLY


           
static intFOLDER


           
static java.lang.StringNORMAL


           
static java.lang.StringROOT_ID


           
 




Constructor SummaryXmlFileSystemModel(java.io.File file)


          XmlFileSystemModel(File myFile) this constructor instantiates the file
 system by taking in an already-existing fileXmlFileSystemModel(java.lang.String userid)


          XmlFileSystemModel(String userid) call this constructor is the user has
 just registered
 




Method Summary
 voidbrowseFolder(java.lang.String folderID)


           
 booleancheckFileName(java.lang.String name,
              java.lang.String folderId)


          Check if in the folderId folder there is the filename name return true is
 there isn't, false otherwise
 booleancheckFolderName(java.lang.String name,
                java.lang.String folderId)


           
 voidcreateFile(java.lang.String parentFolderId,
           FileObjectData file)


           
 voidcreateFolder(FileObjectData folder)


          Create a folder underneath the currentFolder.
 voidcreateFolder(java.lang.String parentFolderId,
             FileObjectData folder)


           
 voiddeleteFile(FileObjectData file)


           
 voiddeleteFolder(FileObjectData folder)


           
 java.lang.String[]find(java.lang.String keyword,
     int option)


          String[] find(String keyword, int option), where 'option' is one of the
 following: FIND_FILES, FIND_FILES_ONLY, or FIND_FOLDERS_ONLY Returns a
 String[] with either all fileIDs, all folderIDs, or a combination of
 folder and fileIDs that match the keyword the user is looking for
 java.lang.StringgetCurrentFolderID()


           
 java.lang.StringgetCurrentFolderName()


           
 java.lang.StringgetFileIdByIndex(java.lang.String index)


           
 intgetFileIndex(java.lang.String fileID)


           
 longgetFileModified(java.lang.String fileID)


           
 java.lang.StringgetFileName(java.lang.String fileID)


           
 java.lang.StringgetFileNameByIndex(java.lang.String index)


           
 java.lang.String[]getFilesContained(java.lang.String folderID)


           
 longgetFileSize(java.lang.String fileID)


           
 longgetFolderModified(java.lang.String fileID)


           
 java.lang.StringgetFolderName(java.lang.String folderID)


           
 java.lang.String[]getFoldersContained(java.lang.String folderID)


           
 intgetNumFilesContained()


           
 intgetNumFoldersContained()


           
 java.lang.StringgetStatus(java.lang.String fileID)


           
 intgetTotalNumFilesContained()


           
 intgetTotalNumFoldersContained()


           
 java.lang.StringgetUserid()


           
 booleanisFile(java.lang.String id)


          boolean isFile(String id) Returns true if the parameter fileID is indeed
 a file somewhere under the root directory
 booleanisFolder(java.lang.String id)


           
 voidmoveFilesUnder(java.lang.String[] fileIDs,
               java.lang.String folderDest)


           
 voidmoveFolderUnder(java.lang.String folderSrc,
                java.lang.String folderDest)


           
 voidoneLevelUp()


           
 java.io.FileretrieveStructure()


          public File retrieveStructure() return the XML document file in the most
 current state CALLED WHEN NEED TO PUSH XML ONTO DB
 voidsetFileModified(java.lang.String fileID,
                long newModified)


           
 voidsetFileSize(java.lang.String fileID,
            long newSize)


           
 voidsetFolderToCurrentPath(java.lang.String folderID)


           
 voidsetStatus(java.lang.String fileID,
          java.lang.String newStatus)


           
 voidtoRoot()


           
 voidupdateStructure()


          public void updateStructure() physically rewrite the XML document file in
 the most current state
 java.lang.String[]wipeOutAll()


          BigInt[] wipeOutAll() traverse the whole tree, find and return all
 fileIDs for deletion NOTE: THE ACTUAL DELETION OF FILE CONTENTS IS LEFT
 TO THE SYSTEM, THIS XML WRAPPER MERELY RIDS OF THE XML FILE STRUCTURE
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


ROOT_ID

public static final java.lang.String ROOT_ID





FIND_FILES_ONLY

public static final int FIND_FILES_ONLY
See Also:Constant Field Values




FIND_FOLDERS_ONLY

public static final int FIND_FOLDERS_ONLY
See Also:Constant Field Values




FIND_FOLDERS_AND_FILES

public static final int FIND_FOLDERS_AND_FILES
See Also:Constant Field Values




FILE

public static final int FILE
See Also:Constant Field Values




FOLDER

public static final int FOLDER
See Also:Constant Field Values




NORMAL

public static final java.lang.String NORMAL
See Also:Constant Field Values




DELETING

public static final java.lang.String DELETING
See Also:Constant Field Values




COPYING

public static final java.lang.String COPYING
See Also:Constant Field Values




COPY_SOURCE

public static final java.lang.String COPY_SOURCE
See Also:Constant Field Values




FAILED_COPY

public static final java.lang.String FAILED_COPY
See Also:Constant Field Values






Constructor Detail


XmlFileSystemModel

public XmlFileSystemModel(java.io.File file)
XmlFileSystemModel(File myFile) this constructor instantiates the file
 system by taking in an already-existing file





XmlFileSystemModel

public XmlFileSystemModel(java.lang.String userid)
XmlFileSystemModel(String userid) call this constructor is the user has
 just registered







Method Detail


retrieveStructure

public java.io.File retrieveStructure()
public File retrieveStructure() return the XML document file in the most
 current state CALLED WHEN NEED TO PUSH XML ONTO DB






updateStructure

public void updateStructure()
public void updateStructure() physically rewrite the XML document file in
 the most current state






wipeOutAll

public java.lang.String[] wipeOutAll()
BigInt[] wipeOutAll() traverse the whole tree, find and return all
 fileIDs for deletion NOTE: THE ACTUAL DELETION OF FILE CONTENTS IS LEFT
 TO THE SYSTEM, THIS XML WRAPPER MERELY RIDS OF THE XML FILE STRUCTURE






createFile

public void createFile(java.lang.String parentFolderId,
                       FileObjectData file)
                throws FolderNotExistException
Throws:
FolderNotExistException




createFolder

public void createFolder(java.lang.String parentFolderId,
                         FileObjectData folder)
                  throws FolderNotExistException
Throws:
FolderNotExistException




createFolder

public void createFolder(FileObjectData folder)
Create a folder underneath the currentFolder.

Parameters:parentFolderId - folder - 




deleteFile

public void deleteFile(FileObjectData file)
                throws FileNotExistException
Throws:
FileNotExistException




deleteFolder

public void deleteFolder(FileObjectData folder)
                  throws FolderNotExistException
Throws:
FolderNotExistException




getFileName

public java.lang.String getFileName(java.lang.String fileID)
                             throws FileNotExistException
Throws:
FileNotExistException




getFileNameByIndex

public java.lang.String getFileNameByIndex(java.lang.String index)
                                    throws FileNotExistException
Throws:
FileNotExistException




getFileIdByIndex

public java.lang.String getFileIdByIndex(java.lang.String index)
                                  throws FileNotExistException
Throws:
FileNotExistException




getFileSize

public long getFileSize(java.lang.String fileID)





getFileIndex

public int getFileIndex(java.lang.String fileID)





getFileModified

public long getFileModified(java.lang.String fileID)





getFolderModified

public long getFolderModified(java.lang.String fileID)





getCurrentFolderID

public java.lang.String getCurrentFolderID()





getCurrentFolderName

public java.lang.String getCurrentFolderName()





getFolderName

public java.lang.String getFolderName(java.lang.String folderID)
                               throws FolderNotExistException
Throws:
FolderNotExistException




setFileSize

public void setFileSize(java.lang.String fileID,
                        long newSize)
                 throws FileNotExistException
Throws:
FileNotExistException




setFileModified

public void setFileModified(java.lang.String fileID,
                            long newModified)
                     throws FileNotExistException
Throws:
FileNotExistException




getNumFoldersContained

public int getNumFoldersContained()





getTotalNumFoldersContained

public int getTotalNumFoldersContained()





getNumFilesContained

public int getNumFilesContained()





getTotalNumFilesContained

public int getTotalNumFilesContained()





setFolderToCurrentPath

public void setFolderToCurrentPath(java.lang.String folderID)
                            throws FolderNotExistException
Throws:
FolderNotExistException




getFilesContained

public java.lang.String[] getFilesContained(java.lang.String folderID)
                                     throws FolderNotExistException
Throws:
FolderNotExistException




getFoldersContained

public java.lang.String[] getFoldersContained(java.lang.String folderID)
                                       throws FolderNotExistException
Throws:
FolderNotExistException




browseFolder

public void browseFolder(java.lang.String folderID)
                  throws FolderNotExistException
Throws:
FolderNotExistException




oneLevelUp

public void oneLevelUp()





toRoot

public void toRoot()





checkFileName

public boolean checkFileName(java.lang.String name,
                             java.lang.String folderId)
Check if in the folderId folder there is the filename name return true is
 there isn't, false otherwise

Parameters:name - folderId - 
Returns:
Throws:
FolderNotExistException




checkFolderName

public boolean checkFolderName(java.lang.String name,
                               java.lang.String folderId)





getStatus

public java.lang.String getStatus(java.lang.String fileID)
                           throws FileNotExistException
Throws:
FileNotExistException




setStatus

public void setStatus(java.lang.String fileID,
                      java.lang.String newStatus)
               throws FileNotExistException
Throws:
FileNotExistException




isFile

public boolean isFile(java.lang.String id)
boolean isFile(String id) Returns true if the parameter fileID is indeed
 a file somewhere under the root directory






isFolder

public boolean isFolder(java.lang.String id)





getUserid

public java.lang.String getUserid()





find

public java.lang.String[] find(java.lang.String keyword,
                               int option)
String[] find(String keyword, int option), where 'option' is one of the
 following: FIND_FILES, FIND_FILES_ONLY, or FIND_FOLDERS_ONLY Returns a
 String[] with either all fileIDs, all folderIDs, or a combination of
 folder and fileIDs that match the keyword the user is looking for






moveFolderUnder

public void moveFolderUnder(java.lang.String folderSrc,
                            java.lang.String folderDest)
                     throws FolderNotExistException
Throws:
FolderNotExistException




moveFilesUnder

public void moveFilesUnder(java.lang.String[] fileIDs,
                           java.lang.String folderDest)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/DeleteFileAction.html
##-----------------TITLE------------------------##
DeleteFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class DeleteFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.DeleteFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class DeleteFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryDeleteFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


DeleteFileAction

public DeleteFileAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/FileObjectData.html
##-----------------TITLE------------------------##
FileObjectData
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject

Class FileObjectData

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.AbstractObjectData
      org.itr_rescue.dataGuard.DataObject.ObjectData
          org.itr_rescue.dataGuard.DataObject.FileObjectData


public class FileObjectDataextends ObjectData










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObject.ObjectDataiconType, theIcon
 
Fields inherited from class org.itr_rescue.dataGuard.DataObject.AbstractObjectDatacontent, id, metadata
 




Constructor SummaryFileObjectData(java.lang.String fileName)


           
 




Method Summary
 javax.swing.IcongetIcon()


           
 longgetLastModified()


           
 longgetSize()


           
 booleanisDirectory()


           
 voidsetContent(byte[] content)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObject.ObjectDatasetIconType, setMetadata
 
Methods inherited from class org.itr_rescue.dataGuard.DataObject.AbstractObjectDatagetId, getMetadataValue, getObjectContent, setId
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileObjectData

public FileObjectData(java.lang.String fileName)






Method Detail


setContent

public void setContent(byte[] content)





isDirectory

public boolean isDirectory()





getSize

public long getSize()





getLastModified

public long getLastModified()





getIcon

public javax.swing.Icon getIcon()
Overrides:getIcon in class ObjectData











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/asymmetric/KeyPairOrganizer.html
##-----------------TITLE------------------------##
KeyPairOrganizer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption.asymmetric

Class KeyPairOrganizer

java.lang.Object
  org.itr_rescue.dataGuard.encryption.asymmetric.KeyPairOrganizer


public class KeyPairOrganizerextends java.lang.Object











Constructor SummaryKeyPairOrganizer()


           
 




Method Summary
 java.security.KeygetPrivateKey(java.security.KeyPair k)


           
 java.security.KeygetPublicKey(java.security.KeyPair k)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


KeyPairOrganizer

public KeyPairOrganizer()






Method Detail


getPublicKey

public java.security.Key getPublicKey(java.security.KeyPair k)
                               throws java.lang.Exception
Throws:
java.lang.Exception




getPrivateKey

public java.security.Key getPrivateKey(java.security.KeyPair k)
                                throws java.lang.Exception
Throws:
java.lang.Exception










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/FontChangeEvent.html
##-----------------TITLE------------------------##
FontChangeEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class FontChangeEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.FontChangeEvent


public class FontChangeEventextends BroadcastEvent



Author:sergiu

 TODO To change the template for this generated type comment go to
 Window - Preferences - Java - Code Style - Code Templates







Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryFontChangeEvent()


           
 




Method Summary
 java.awt.FontgetFont()


           
 intgetType()


           
 voidsetFont(java.awt.Font font)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FontChangeEvent

public FontChangeEvent()






Method Detail


getFont

public java.awt.Font getFont()
Returns:Returns the font.




setFont

public void setFont(java.awt.Font font)
Parameters:font - The font to set.




getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/BroadcastEvent.html
##-----------------TITLE------------------------##
BroadcastEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class BroadcastEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent

Direct Known Subclasses: ChangeDirectoryEvent, ChangeFilesystemEvent, ChangePanelEvent, ChangeViewEvent, ColorChangeEvent, FileListSelectionEvent, FontChangeEvent, HelpURLChangeEvent

public abstract class BroadcastEventextends java.lang.Object



This is the base class for any event










Field Summary
static intCHANGE_BGCOLOR_TYPE


           
static intCHANGE_DIR_TYPE


           
static intCHANGE_FGCOLOR_TYPE


           
static intCHANGE_FILESYSTEM_TYPE


           
static intCHANGE_FONT_TYPE


           
static intCHANGE_HELP_URL


           
static intCHANGE_MKCOLOR_TYPE


           
static intCHANGE_PANEL_TYPE


           
static intCHANGE_VIEW_TYPE


           
static intFILE_LIST_SELECTION_TYPE


           
static intUNKNOWN_TYPE


           
 




Constructor Summary
protected BroadcastEvent()


           
 BroadcastEvent(java.lang.Object source)


          Constructs an event with the specified source.
 




Method Summary
 booleanequals(java.lang.Object obj)


           
 java.lang.ObjectgetSource()


          Returns the source.
abstract  intgetType()


           
 java.lang.ObjectgetUserObject()


          Returns the user object.
 voidsetSource(java.lang.Object newSource)


          Sets the source who generated the event.
 voidsetUserObject(java.lang.Object obj)


          Sets the user object.
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


UNKNOWN_TYPE

public static final int UNKNOWN_TYPE
See Also:Constant Field Values




CHANGE_DIR_TYPE

public static final int CHANGE_DIR_TYPE
See Also:Constant Field Values




CHANGE_PANEL_TYPE

public static final int CHANGE_PANEL_TYPE
See Also:Constant Field Values




CHANGE_VIEW_TYPE

public static final int CHANGE_VIEW_TYPE
See Also:Constant Field Values




CHANGE_FONT_TYPE

public static final int CHANGE_FONT_TYPE
See Also:Constant Field Values




FILE_LIST_SELECTION_TYPE

public static final int FILE_LIST_SELECTION_TYPE
See Also:Constant Field Values




CHANGE_FILESYSTEM_TYPE

public static final int CHANGE_FILESYSTEM_TYPE
See Also:Constant Field Values




CHANGE_FGCOLOR_TYPE

public static final int CHANGE_FGCOLOR_TYPE
See Also:Constant Field Values




CHANGE_BGCOLOR_TYPE

public static final int CHANGE_BGCOLOR_TYPE
See Also:Constant Field Values




CHANGE_MKCOLOR_TYPE

public static final int CHANGE_MKCOLOR_TYPE
See Also:Constant Field Values




CHANGE_HELP_URL

public static final int CHANGE_HELP_URL
See Also:Constant Field Values






Constructor Detail


BroadcastEvent

protected BroadcastEvent()




BroadcastEvent

public BroadcastEvent(java.lang.Object source)
Constructs an event with the specified source.







Method Detail


getSource

public java.lang.Object getSource()
Returns the source.






setSource

public void setSource(java.lang.Object newSource)
Sets the source who generated the event.






setUserObject

public void setUserObject(java.lang.Object obj)
Sets the user object.






getUserObject

public java.lang.Object getUserObject()
Returns the user object.






getType

public abstract int getType()
Returns:Returns the type of the event.




equals

public boolean equals(java.lang.Object obj)
Overrides:equals in class java.lang.Object











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/FilesystemXMLHandler.html
##-----------------TITLE------------------------##
FilesystemXMLHandler
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class FilesystemXMLHandler

java.lang.Object
  org.xml.sax.helpers.DefaultHandler
      org.itr_rescue.dataGuard.localFileSystem.FilesystemXMLHandler

All Implemented Interfaces: org.xml.sax.ContentHandler, org.xml.sax.DTDHandler, org.xml.sax.EntityResolver, org.xml.sax.ErrorHandler

public class FilesystemXMLHandlerextends org.xml.sax.helpers.DefaultHandler











Constructor SummaryFilesystemXMLHandler()


           
 




Method Summary
 voidcharacters(char[] ch,
           int start,
           int length)


           
 voidendElement(java.lang.String uri,
           java.lang.String localName,
           java.lang.String qName)


           
 voiderror(org.xml.sax.SAXParseException e)


           
 java.util.List<java.lang.String>getDependencies()


           
 java.lang.StringgetName()


           
 java.lang.StringgetTheClass()


           
 voidstartElement(java.lang.String uri,
             java.lang.String localName,
             java.lang.String qName,
             org.xml.sax.Attributes attributes)


           
 
Methods inherited from class org.xml.sax.helpers.DefaultHandlerendDocument, endPrefixMapping, fatalError, ignorableWhitespace, notationDecl, processingInstruction, resolveEntity, setDocumentLocator, skippedEntity, startDocument, startPrefixMapping, unparsedEntityDecl, warning
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FilesystemXMLHandler

public FilesystemXMLHandler()






Method Detail


startElement

public void startElement(java.lang.String uri,
                         java.lang.String localName,
                         java.lang.String qName,
                         org.xml.sax.Attributes attributes)
                  throws org.xml.sax.SAXException
Specified by:startElement in interface org.xml.sax.ContentHandlerOverrides:startElement in class org.xml.sax.helpers.DefaultHandler
Throws:
org.xml.sax.SAXException




endElement

public void endElement(java.lang.String uri,
                       java.lang.String localName,
                       java.lang.String qName)
                throws org.xml.sax.SAXException
Specified by:endElement in interface org.xml.sax.ContentHandlerOverrides:endElement in class org.xml.sax.helpers.DefaultHandler
Throws:
org.xml.sax.SAXException




characters

public void characters(char[] ch,
                       int start,
                       int length)
                throws org.xml.sax.SAXException
Specified by:characters in interface org.xml.sax.ContentHandlerOverrides:characters in class org.xml.sax.helpers.DefaultHandler
Throws:
org.xml.sax.SAXException




error

public void error(org.xml.sax.SAXParseException e)
           throws org.xml.sax.SAXParseException
Specified by:error in interface org.xml.sax.ErrorHandlerOverrides:error in class org.xml.sax.helpers.DefaultHandler
Throws:
org.xml.sax.SAXParseException




getDependencies

public java.util.List<java.lang.String> getDependencies()
Returns:the dependencies




getName

public java.lang.String getName()
Returns:the name




getTheClass

public java.lang.String getTheClass()
Returns:the theClass










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/JAmazonS3LinkLabel.html
##-----------------TITLE------------------------##
JAmazonS3LinkLabel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class JAmazonS3LinkLabel

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  org.itr_rescue.dataGuard.ui.JLinkLabel
                      org.itr_rescue.dataGuard.remoteView.JAmazonS3LinkLabel

All Implemented Interfaces: java.awt.event.MouseListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.SwingConstants

public class JAmazonS3LinkLabelextends JLinkLabel



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryJAmazonS3LinkLabel()


           
 




Method Summary
 java.lang.StringgetServiceDescription()


           
 javax.swing.IcongetServiceIcon()


           
 voidmouseClicked(java.awt.event.MouseEvent arg0)


          This method have to be definied from the subclass,
 specifying what to do after clicking.
 
Methods inherited from class org.itr_rescue.dataGuard.ui.JLinkLabelmouseEntered, mouseExited, mousePressed, mouseReleased
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


JAmazonS3LinkLabel

public JAmazonS3LinkLabel()






Method Detail


mouseClicked

public void mouseClicked(java.awt.event.MouseEvent arg0)
Description copied from class: JLinkLabelThis method have to be definied from the subclass,
 specifying what to do after clicking.

Specified by:mouseClicked in interface java.awt.event.MouseListenerOverrides:mouseClicked in class JLinkLabel





getServiceDescription

public java.lang.String getServiceDescription()
Overrides:getServiceDescription in class JLinkLabel





getServiceIcon

public javax.swing.Icon getServiceIcon()
Overrides:getServiceIcon in class JLinkLabel











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/RemoteFileSystemViewRenderer.html
##-----------------TITLE------------------------##
RemoteFileSystemViewRenderer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.FileSystem

Class RemoteFileSystemViewRenderer

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  javax.swing.table.DefaultTableCellRenderer
                      org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemViewRenderer

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.SwingConstants, javax.swing.table.TableCellRenderer

public class RemoteFileSystemViewRendererextends javax.swing.table.DefaultTableCellRenderer



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.table.DefaultTableCellRendererjavax.swing.table.DefaultTableCellRenderer.UIResource
 

Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.table.DefaultTableCellRenderernoFocusBorder
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryRemoteFileSystemViewRenderer()


           RemoteFileSystemViewRenderer(XmlFileSystemModel s)


           
 




Method Summary
 java.awt.ComponentgetTableCellRendererComponent(javax.swing.JTable table,
                              java.lang.Object value,
                              boolean isSelected,
                              boolean hasFocus,
                              int row,
                              int column)


           
 
Methods inherited from class javax.swing.table.DefaultTableCellRendererfirePropertyChange, firePropertyChange, invalidate, isOpaque, repaint, repaint, repaint, revalidate, setBackground, setForeground, setValue, updateUI, validate
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


RemoteFileSystemViewRenderer

public RemoteFileSystemViewRenderer()




RemoteFileSystemViewRenderer

public RemoteFileSystemViewRenderer(XmlFileSystemModel s)






Method Detail


getTableCellRendererComponent

public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table,
                                                        java.lang.Object value,
                                                        boolean isSelected,
                                                        boolean hasFocus,
                                                        int row,
                                                        int column)
Specified by:getTableCellRendererComponent in interface javax.swing.table.TableCellRendererOverrides:getTableCellRendererComponent in class javax.swing.table.DefaultTableCellRenderer











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AmazonS3/AmazonS3Login.html
##-----------------TITLE------------------------##
AmazonS3Login
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.AmazonS3

Class AmazonS3Login

java.lang.Object
  java.awt.Component
      java.awt.Container
          java.awt.Window
              java.awt.Frame
                  javax.swing.JFrame
                      org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonS3Login

All Implemented Interfaces: java.awt.event.ActionListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants

public class AmazonS3Loginextends javax.swing.JFrameimplements java.awt.event.ActionListener



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JFramejavax.swing.JFrame.AccessibleJFrame
 

Nested classes/interfaces inherited from class java.awt.Framejava.awt.Frame.AccessibleAWTFrame
 

Nested classes/interfaces inherited from class java.awt.Windowjava.awt.Window.AccessibleAWTWindow
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JFrameaccessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled
 
Fields inherited from class java.awt.FrameCROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.WindowConstantsDISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryAmazonS3Login()


           
 




Method Summary
 voidactionPerformed(java.awt.event.ActionEvent arg0)


           
 
Methods inherited from class javax.swing.JFrameaddImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update
 
Methods inherited from class java.awt.FrameaddNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setResizable, setState, setTitle, setUndecorated
 
Methods inherited from class java.awt.WindowaddPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getGraphicsConfiguration, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOwnedWindows, getOwner, getOwnerlessWindows, getToolkit, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isShowing, pack, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setVisible, show, toBack, toFront
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paint, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, setBackground, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 
Methods inherited from interface java.awt.MenuContainergetFont, postEvent
 






Constructor Detail


AmazonS3Login

public AmazonS3Login()






Method Detail


actionPerformed

public void actionPerformed(java.awt.event.ActionEvent arg0)
Specified by:actionPerformed in interface java.awt.event.ActionListener











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/IconBuilder.html
##-----------------TITLE------------------------##
IconBuilder
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class IconBuilder

java.lang.Object
  org.itr_rescue.dataGuard.ui.IconBuilder


public class IconBuilderextends java.lang.Object



Author:Roberto Gamboni - University of Bologna
 This class create the image for the application








Constructor SummaryIconBuilder()


           
 




Method Summary
static javax.swing.ImageIconcreateImageIcon(java.lang.String path)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


IconBuilder

public IconBuilder()






Method Detail


createImageIcon

public static javax.swing.ImageIcon createImageIcon(java.lang.String path)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/DataGuardClipboard.html
##-----------------TITLE------------------------##
DataGuardClipboard
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.Utilities

Class DataGuardClipboard

java.lang.Object
  org.itr_rescue.dataGuard.Utilities.DataGuardClipboard

All Implemented Interfaces: java.awt.datatransfer.ClipboardOwner

public class DataGuardClipboardextends java.lang.Objectimplements java.awt.datatransfer.ClipboardOwner











Constructor SummaryDataGuardClipboard()


           
 




Method Summary
 voidaddToClipboard(java.lang.String s)


           
 java.lang.StringgetClipboardContents()


           
 voidlostOwnership(java.awt.datatransfer.Clipboard arg0,
              java.awt.datatransfer.Transferable arg1)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


DataGuardClipboard

public DataGuardClipboard()






Method Detail


addToClipboard

public void addToClipboard(java.lang.String s)






getClipboardContents

public java.lang.String getClipboardContents()






lostOwnership

public void lostOwnership(java.awt.datatransfer.Clipboard arg0,
                          java.awt.datatransfer.Transferable arg1)
Specified by:lostOwnership in interface java.awt.datatransfer.ClipboardOwner











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/DetailView.html
##-----------------TITLE------------------------##
DetailView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.detail

Class DetailView

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JPanel
                  org.itr_rescue.dataGuard.localFileSystem.JFMView
                      org.itr_rescue.dataGuard.localFileSystem.view.list.ListView
                          org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailView

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible

public class DetailViewextends ListView



This panel implements a detailed view of the files



Author:sergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JPaneljavax.swing.JPanel.AccessibleJPanel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.localFileSystem.view.list.ListViewcomboRenderer, rootsCombo, scroll, topPanel
 
Fields inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMViewDEFAULT_VIEW, filesystem, isActive, statusLabel
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDetailView(java.lang.String fs)


          Constructor.
 




Method Summary
 voidchangeDirectory(JFMFile file)


          Change the current directory to the one specified by the file, making
 that file the current working directory
 voiddeleteFile(java.lang.String fileName)


           
 JFMFilegetCurrentWorkingDirectory()


          This method returns the current working directory of the view.
 JFMFilegetFilefromName(java.lang.String fileName)


           
 JFMFilegetSelectedFile()


          This method returns the current selected file from the view.
 JFMFile[]getSelectedFiles()


          This method returns the current selected files from the view.
protected  javax.swing.JComponentgetViewComponent()


          Returns the view component (JTable or a JList)
 voidrefresh()


           
 
Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.view.list.ListViewrequestFocus
 
Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMViewcreateView, getFilesystemName, getRegisteredViews, getViewRepresentation, isActive, registerView, registerViews, setActive
 
Methods inherited from class javax.swing.JPanelgetAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


DetailView

public DetailView(java.lang.String fs)
Constructor.







Method Detail


getViewComponent

protected javax.swing.JComponent getViewComponent()
Description copied from class: ListViewReturns the view component (JTable or a JList)

Specified by:getViewComponent in class ListView
Returns:the view component




changeDirectory

public void changeDirectory(JFMFile file)
Description copied from class: ListViewChange the current directory to the one specified by the file, making
 that file the current working directory

Overrides:changeDirectory in class ListView





getSelectedFile

public JFMFile getSelectedFile()
Description copied from class: ListViewThis method returns the current selected file from the view. If no file is selected it just returns null.

Specified by:getSelectedFile in class ListView
Returns:JFMFile the current selected file.




getSelectedFiles

public JFMFile[] getSelectedFiles()
Description copied from class: ListViewThis method returns the current selected files from the view. If no files are selected it just returns null.

Specified by:getSelectedFiles in class ListView
Returns:JFMFile the current selected files.




getCurrentWorkingDirectory

public JFMFile getCurrentWorkingDirectory()
Description copied from class: JFMViewThis method returns the current working directory of the view. If it doesn't make sense to return it,
 null should be an acceptable value.

Specified by:getCurrentWorkingDirectory in class ListView
Returns:JFMFile the current working directory.




refresh

public void refresh()
Specified by:refresh in class JFMView





getFilefromName

public JFMFile getFilefromName(java.lang.String fileName)
Specified by:getFilefromName in class JFMView





deleteFile

public void deleteFile(java.lang.String fileName)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/FontChangeListener.html
##-----------------TITLE------------------------##
FontChangeListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface FontChangeListener
All Superinterfaces: BroadcastListener

public interface FontChangeListenerextends BroadcastListener



Author:sergiu

 TODO To change the template for this generated type comment go to
 Window - Preferences - Java - Code Style - Code Templates








Method Summary
 voidfontChanged(FontChangeEvent event)


           
 






Method Detail


fontChanged

void fontChanged(FontChangeEvent event)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/conversion/JFMFile2FileObjectData.html
##-----------------TITLE------------------------##
JFMFile2FileObjectData
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject.conversion

Class JFMFile2FileObjectData

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.conversion.JFMFile2FileObjectData


public class JFMFile2FileObjectDataextends java.lang.Object











Constructor SummaryJFMFile2FileObjectData()


           
 




Method Summary
static FileObjectDataconvertLocalFile(JFMFile file)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


JFMFile2FileObjectData

public JFMFile2FileObjectData()






Method Detail


convertLocalFile

public static FileObjectData convertLocalFile(JFMFile file)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html
##-----------------TITLE------------------------##
JFMLocalFile
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMLocalFile

java.lang.Object
  org.itr_rescue.dataGuard.localFileSystem.JFMFile
      org.itr_rescue.dataGuard.localFileSystem.JFMLocalFile

All Implemented Interfaces: java.lang.Comparable

public class JFMLocalFileextends JFMFile



TODO change me!!!



Author:sergiu







Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMFiledata, displayName, marked, multiPart
 




Constructor SummaryJFMLocalFile(java.lang.Object data)


          Constructor of this file.
 




Method Summary
 booleancanRead()


          Tests whether the application can read the file denoted by the
 abstract pathname.
 booleancanWrite()


          Tests whether the application can modify to the file denoted by the
 abstract pathname.
 intcompareTo(JFMFile pathname)


          Compares two abstract pathnames lexicographically.
 JFMFilecreateFile(java.lang.String name)


          Creates the file named by the abstract pathname denoted by the parameter.
 booleandelete()


          Deletes the file or directory denoted by the abstract pathname.
 booleanequals(java.lang.Object obj)


          Tests this abstract pathname for equality with the given object.
 booleanexists()


          Tests whether the file or directory denoted by the abstract pathname
 exists.
 JFMFilegetAbsoluteFile()


          Returns the absolute form of this abstract pathname.
 java.lang.StringgetAbsolutePath()


          Returns the absolute pathname string of this abstract pathname.
 JFMFilegetCanonicalFile()


          Returns the canonical form of this abstract pathname.
 java.lang.StringgetCanonicalPath()


          Returns the canonical pathname string of this abstract pathname.
 java.io.FilegetFile()


          gets the content of the JFMFile if it exists.
 javax.swing.IcongetIcon()


          Returns the filesystem's icon associated with this file, or null if it can't be determined.
 java.io.InputStreamgetInputStream()


          Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)
 java.lang.StringgetMimeType()


          This method returns the string that represents the mime-type of this file, or null if it can't be determined.
 java.lang.StringgetName()


          This string represents the short name of the file (e.g.
 java.io.OutputStreamgetOutputStream()


          Returns an OutputStream to write to this file, or null if the write operation isn't supported
 (or doesn;t make sense from the filesystem's point of view).
 java.lang.StringgetParent()


          Returns the pathname string of this abstract pathname's parent, or
 null if this pathname does not name a parent directory.
 JFMFilegetParentFile()


          Returns the abstract pathname of this abstract pathname's parent,
 or null if this pathname does not name a parent
 directory.
 java.lang.StringgetPath()


          Converts this abstract pathname into a pathname string.
 java.lang.StringgetSystemDisplayName()


          Returns the system display name as returned by the filesystem viewer, or null
 inthashCode()


          Computes a hash code for this abstract pathname.
 booleanisAbsolute()


          Tests whether this abstract pathname is absolute.
 booleanisDirectory()


          Tests whether the file denoted by this abstract pathname is a
 directory.
 booleanisFile()


          Tests whether the file denoted by this abstract pathname is a normal
 file.
 booleanisHidden()


          Tests whether the file named by this abstract pathname is a hidden
 file.
 longlastModified()


          Returns the time that the file denoted by this abstract pathname was
 last modified.
 longlength()


          Returns the length of the file denoted by this abstract pathname.
 JFMFile[]listFiles()


          Returns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.
 JFMFilemkdir(java.lang.String name)


          Creates the directory named by the abstract pathname denoted by the parameter.
 
Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMFilecompareTo, getDisplayName, getMultiPart, getRootDriveFile, isMarked, setDisplayName, setMarked, setMultiPart, toString
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, notify, notifyAll, wait, wait, wait
 






Constructor Detail


JFMLocalFile

public JFMLocalFile(java.lang.Object data)
Constructor of this file.







Method Detail


getInputStream

public java.io.InputStream getInputStream()
Description copied from class: JFMFileReturns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)

Specified by:getInputStream in class JFMFile
Returns:an InputStream to read from the fileSee Also:org.jfm.md.filesystems.JFMFile#getInputStream()




listFiles

public JFMFile[] listFiles()
Description copied from class: JFMFileReturns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of
 File objects is returned, one for each file or directory in
 the directory.  Pathnames denoting the directory itself and the
 directory's parent directory are not included in the result.  Each
 resulting abstract pathname is constructed from this abstract pathname
 using the File(File, String) constructor.  Therefore if this pathname
 is absolute then each resulting pathname is absolute; if this pathname
 is relative then each resulting pathname will be relative to the same
 directory.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.

Specified by:listFiles in class JFMFile
Returns:An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns null if this abstract pathname
          does not denote a directory, or if an I/O error occurs.See Also:org.jfm.md.filesystems.JFMFile#listFiles()




getOutputStream

public java.io.OutputStream getOutputStream()
Description copied from class: JFMFileReturns an OutputStream to write to this file, or null if the write operation isn't supported
 (or doesn;t make sense from the filesystem's point of view).
 The way that this is implemented in every filesystem can vary.
 The call to this method might get the file to be emptied (as in the LocalFileSystem implementation)
 You have been warned.

Specified by:getOutputStream in class JFMFile
Returns:An OutputStream to write to this fileSee Also:org.jfm.md.filesystems.JFMFile#getOutputStream()




getName

public java.lang.String getName()
Description copied from class: JFMFileThis string represents the short name of the file (e.g. foo.txt)

Specified by:getName in class JFMFile
See Also:org.jfm.md.filesystems.JFMFile#getName()




getParent

public java.lang.String getParent()
Description copied from class: JFMFileReturns the pathname string of this abstract pathname's parent, or
 null if this pathname does not name a parent directory.

  The parent of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.

Specified by:getParent in class JFMFile
Returns:The pathname string of the parent directory named by this
          abstract pathname, or null if this pathname
          does not name a parentSee Also:org.jfm.md.filesystems.JFMFile#getParent()




getMimeType

public java.lang.String getMimeType()
Description copied from class: JFMFileThis method returns the string that represents the mime-type of this file, or null if it can't be determined.

Specified by:getMimeType in class JFMFile
Returns:the mime type of this fileSee Also:org.jfm.md.filesystems.JFMFile#getMimeType()




getParentFile

public JFMFile getParentFile()
Description copied from class: JFMFileReturns the abstract pathname of this abstract pathname's parent,
 or null if this pathname does not name a parent
 directory.

  The parent of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.

Specified by:getParentFile in class JFMFile
Returns:The abstract pathname of the parent directory named by this
          abstract pathname, or null if this pathname
          does not name a parentSee Also:org.jfm.md.filesystems.JFMFile#getParentFile()




getPath

public java.lang.String getPath()
Description copied from class: JFMFileConverts this abstract pathname into a pathname string.  The resulting
 string uses the default name-separator character to
 separate the names in the name sequence.

Specified by:getPath in class JFMFile
Returns:The string form of this abstract pathnameSee Also:org.jfm.md.filesystems.JFMFile#getPath()




isAbsolute

public boolean isAbsolute()
Description copied from class: JFMFileTests whether this abstract pathname is absolute.  The definition of
 absolute pathname is system dependent.  On UNIX systems, a pathname is
 absolute if its prefix is "/".  On Microsoft Windows systems, a
 pathname is absolute if its prefix is a drive specifier followed by
 "\\", or if its prefix is "\\".
 Some other filesystems implementations (FTP, NFS, SMB, etc.) can have their own definition
 of the absolute pathname, ven though I would recommend sticking to the UNIX definition.

Specified by:isAbsolute in class JFMFile
Returns:true if this abstract pathname is absolute,
          false otherwiseSee Also:org.jfm.md.filesystems.JFMFile#isAbsolute()




getAbsolutePath

public java.lang.String getAbsolutePath()
Description copied from class: JFMFileReturns the absolute pathname string of this abstract pathname.

  If this abstract pathname is already absolute, then the pathname
 string is simply returned as if by the JFMFile.getPath()
 method.  If this abstract pathname is the empty abstract pathname then
 the pathname string of the current user directory, which is named by the
 system property user.dir, is returned.  Otherwise this
 pathname is resolved in a system-dependent way.  On UNIX systems, a
 relative pathname is made absolute by resolving it against the current
 user directory.  On Microsoft Windows systems, a relative pathname is made absolute
 by resolving it against the current directory of the drive named by the
 pathname, if any; if not, it is resolved against the current user
 directory.

Specified by:getAbsolutePath in class JFMFile
Returns:The absolute pathname string denoting the same file or
          directory as this abstract pathnameSee Also:org.jfm.md.filesystems.JFMFile#getAbsolutePath()




getAbsoluteFile

public JFMFile getAbsoluteFile()
Description copied from class: JFMFileReturns the absolute form of this abstract pathname.

Specified by:getAbsoluteFile in class JFMFile
Returns:The absolute abstract pathname denoting the same file or
          directory as this abstract pathnameSee Also:org.jfm.md.filesystems.JFMFile#getAbsoluteFile()




getCanonicalPath

public java.lang.String getCanonicalPath()
                                  throws FSException
Description copied from class: JFMFileReturns the canonical pathname string of this abstract pathname.

  A canonical pathname is both absolute and unique.  The precise
 definition of canonical form is system-dependent.  This method first
 converts this pathname to absolute form if necessary, as if by invoking the
 JFMFile.getAbsolutePath() method, and then maps it to its unique form in a
 system-dependent way.  This typically involves removing redundant names
 such as "." and ".." from the pathname, resolving
 symbolic links (on UNIX platforms), and converting drive letters to a
 standard case (on Microsoft Windows platforms).

  Every pathname that denotes an existing file or directory has a
 unique canonical form.  Every pathname that denotes a nonexistent file
 or directory also has a unique canonical form.  The canonical form of
 the pathname of a nonexistent file or directory may be different from
 the canonical form of the same pathname after the file or directory is
 created.  Similarly, the canonical form of the pathname of an existing
 file or directory may be different from the canonical form of the same
 pathname after the file or directory is deleted.

Specified by:getCanonicalPath in class JFMFile
Returns:The canonical pathname string denoting the same file or
          directory as this abstract pathname
Throws:
FSException - If an filesystem error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queriesSee Also:org.jfm.md.filesystems.JFMFile#getCanonicalPath()




getCanonicalFile

public JFMFile getCanonicalFile()
                         throws FSException
Description copied from class: JFMFileReturns the canonical form of this abstract pathname.

Specified by:getCanonicalFile in class JFMFile
Returns:The canonical pathname string denoting the same file or
          directory as this abstract pathname
Throws:
FSException - If an filesystem error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queriesSee Also:org.jfm.md.filesystems.JFMFile#getCanonicalFile()




isDirectory

public boolean isDirectory()
Description copied from class: JFMFileTests whether the file denoted by this abstract pathname is a
 directory.

Specified by:isDirectory in class JFMFile
Returns:true if and only if the file denoted by this
          abstract pathname exists and is a directory;
          false otherwiseSee Also:org.jfm.md.filesystems.JFMFile#isDirectory()




isFile

public boolean isFile()
Description copied from class: JFMFileTests whether the file denoted by this abstract pathname is a normal
 file.  A file is normal if it is not a directory and, in
 addition, satisfies other system-dependent criteria.  Any non-directory
 file created by a Java application is guaranteed to be a normal file.

Specified by:isFile in class JFMFile
Returns:true if and only if the file denoted by this
          abstract pathname exists and is a normal file;
          false otherwiseSee Also:org.jfm.md.filesystems.JFMFile#isFile()




isHidden

public boolean isHidden()
Description copied from class: JFMFileTests whether the file named by this abstract pathname is a hidden
 file.  The exact definition of hidden is system-dependent.  On
 UNIX systems, a file is considered to be hidden if its name begins with
 a period character ('.').  On Microsoft Windows systems, a file is
 considered to be hidden if it has been marked as such in the filesystem.

Specified by:isHidden in class JFMFile
Returns:true if and only if the file denoted by this
          abstract pathname is hidden according to the conventions of the
          underlying platformSee Also:org.jfm.md.filesystems.JFMFile#isHidden()




lastModified

public long lastModified()
Description copied from class: JFMFileReturns the time that the file denoted by this abstract pathname was
 last modified.

Specified by:lastModified in class JFMFile
Returns:A long value representing the time the file was
          last modified, measured in milliseconds since the epoch
          (00:00:00 GMT, January 1, 1970), or 0L if the
          file does not exist or if an I/O error occursSee Also:org.jfm.md.filesystems.JFMFile#lastModified()




length

public long length()
Description copied from class: JFMFileReturns the length of the file denoted by this abstract pathname.
 The return value is unspecified if this pathname denotes a directory.

Specified by:length in class JFMFile
Returns:The length, in bytes, of the file denoted by this abstract
          pathname, or 0L if the file does not existSee Also:org.jfm.md.filesystems.JFMFile#length()




compareTo

public int compareTo(JFMFile pathname)
Description copied from class: JFMFileCompares two abstract pathnames lexicographically.  The ordering
 defined by this method depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not.

Specified by:compareTo in class JFMFile
Parameters:pathname - The abstract pathname to be compared to this abstract
                    pathname
Returns:Zero if the argument is equal to this abstract pathname, a
                value less than zero if this abstract pathname is
                lexicographically less than the argument, or a value greater
                than zero if this abstract pathname is lexicographically
                greater than the argumentSee Also:org.jfm.md.filesystems.JFMFile#compareTo(org.jfm.md.filesystems.JFMFile)




equals

public boolean equals(java.lang.Object obj)
Description copied from class: JFMFileTests this abstract pathname for equality with the given object.
 Returns true if and only if the argument is not
 null and is an abstract pathname that denotes the same file
 or directory as this abstract pathname.  Whether or not two abstract
 pathnames are equal depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not. With other filesystems implementation ... it's their responsability
 to decide wether it should be case sensitive or not.

Specified by:equals in class JFMFile
Parameters:obj - The object to be compared with this abstract pathname
Returns:true if and only if the objects are the same;
          false otherwiseSee Also:Object.equals(java.lang.Object)




hashCode

public int hashCode()
Description copied from class: JFMFileComputes a hash code for this abstract pathname.  Because equality of
 abstract pathnames is inherently system-dependent, so is the computation
 of their hash codes.  On UNIX systems, the hash code of an abstract
 pathname is equal to the exclusive or of its pathname string
 and the decimal value 1234321.  On Microsoft Windows systems, the hash
 code is equal to the exclusive or of its pathname string,
 convered to lower case, and the decimal value 1234321.

Specified by:hashCode in class JFMFile
Returns:A hash code for this abstract pathnameSee Also:Object.hashCode()




canRead

public boolean canRead()
Description copied from class: JFMFileTests whether the application can read the file denoted by the
 abstract pathname.

Specified by:canRead in class JFMFile
Returns:true if and only if the file specified by this
          abstract pathname exists and can be read by the
          application; false otherwiseSee Also:org.jfm.md.filesystems.JFMFile#canRead()




canWrite

public boolean canWrite()
Description copied from class: JFMFileTests whether the application can modify to the file denoted by the
 abstract pathname.

Specified by:canWrite in class JFMFile
Returns:true if and only if the file system actually
          contains a file denoted by this abstract pathname and
          the application is allowed to write to the file;
          false otherwise.See Also:org.jfm.md.filesystems.JFMFile#canWrite()




exists

public boolean exists()
Description copied from class: JFMFileTests whether the file or directory denoted by the abstract pathname
 exists.

Specified by:exists in class JFMFile
Returns:true if and only if the file or directory denoted
          by this abstract pathname exists; false otherwiseSee Also:org.jfm.md.filesystems.JFMFile#exists()




mkdir

public JFMFile mkdir(java.lang.String name)
Description copied from class: JFMFileCreates the directory named by the abstract pathname denoted by the parameter.

Specified by:mkdir in class JFMFile
Returns:The new file object created or null otherwiseSee Also:org.jfm.md.filesystems.JFMFile#mkdir()




createFile

public JFMFile createFile(java.lang.String name)
Description copied from class: JFMFileCreates the file named by the abstract pathname denoted by the parameter.

Specified by:createFile in class JFMFile
Returns:The new file object created or null otherwise




delete

public boolean delete()
Description copied from class: JFMFileDeletes the file or directory denoted by the abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.

Specified by:delete in class JFMFile
Returns:true if and only if the file or directory is
          successfully deleted; false otherwiseSee Also:org.jfm.md.filesystems.JFMFile#delete()




getIcon

public javax.swing.Icon getIcon()
Description copied from class: JFMFileReturns the filesystem's icon associated with this file, or null if it can't be determined.

Specified by:getIcon in class JFMFile
Returns:The filesystem's icon associated with this file, or null if it can't be determined.See Also:org.jfm.md.filesystems.JFMFile#getIcon()




getSystemDisplayName

public java.lang.String getSystemDisplayName()
Description copied from class: JFMFileReturns the system display name as returned by the filesystem viewer, or null

Specified by:getSystemDisplayName in class JFMFile
Returns:




getFile

public java.io.File getFile()
Description copied from class: JFMFilegets the content of the JFMFile if it exists.

Overrides:getFile in class JFMFile











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/XmlFileSystemModelUtil.html
##-----------------TITLE------------------------##
XmlFileSystemModelUtil
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.XmlModel

Class XmlFileSystemModelUtil

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.XmlModel.XmlFileSystemModelUtil


public class XmlFileSystemModelUtilextends java.lang.Object











Constructor SummaryXmlFileSystemModelUtil()


           
 




Method Summary
static java.lang.Stringnow()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


XmlFileSystemModelUtil

public XmlFileSystemModelUtil()






Method Detail


now

public static java.lang.String now()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/symmetric/ObjectEncryptor.html
##-----------------TITLE------------------------##
ObjectEncryptor
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption.symmetric

Class ObjectEncryptor

java.lang.Object
  org.itr_rescue.dataGuard.encryption.symmetric.ObjectEncryptor


public class ObjectEncryptorextends java.lang.Object











Constructor SummaryObjectEncryptor()


           
 




Method Summary
 byte[]decryptObject(java.io.File file)


           
 byte[]encryptObject(AbstractObjectData object)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ObjectEncryptor

public ObjectEncryptor()






Method Detail


encryptObject

public byte[] encryptObject(AbstractObjectData object)





decryptObject

public byte[] decryptObject(java.io.File file)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/Security.html
##-----------------TITLE------------------------##
Security
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption

Class Security

java.lang.Object
  org.itr_rescue.dataGuard.encryption.Security


public class Securityextends java.lang.Object











Constructor SummarySecurity()


           
 




Method Summary
static java.lang.StringgetMASTERPASSWORD()


           
static voidsetMASTERPASSWORD(java.lang.String masterpassword)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Security

public Security()






Method Detail


getMASTERPASSWORD

public static java.lang.String getMASTERPASSWORD()





setMASTERPASSWORD

public static void setMASTERPASSWORD(java.lang.String masterpassword)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/FileParsingTable.html
##-----------------TITLE------------------------##
FileParsingTable
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Class FileParsingTable

java.lang.Object
  org.itr_rescue.dataGuard.indexing.FileParsingTable


public class FileParsingTableextends java.lang.Object











Constructor SummaryFileParsingTable()


           
 




Method Summary
static IParsergetParser(java.lang.String fileType)


           
static booleanisParsable(java.lang.String fileType)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileParsingTable

public FileParsingTable()






Method Detail


isParsable

public static boolean isParsable(java.lang.String fileType)





getParser

public static IParser getParser(java.lang.String fileType)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/HelpAction.html
##-----------------TITLE------------------------##
HelpAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class HelpAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.HelpAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class HelpActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryHelpAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, execute, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


HelpAction

public HelpAction()






Method Detail


compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/BroadcastListener.html
##-----------------TITLE------------------------##
BroadcastListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface BroadcastListener
All Known Subinterfaces: ChangeDirectoryListener, ChangePanelListener, ChangeViewListener, ColorChangeListener, FileListSelectionListener, FontChangeListener

public interface BroadcastListener



Interface implemented by any listener

















    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/parser/TextExtractorFromTxt.html
##-----------------TITLE------------------------##
TextExtractorFromTxt
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing.parser

Class TextExtractorFromTxt

java.lang.Object
  org.itr_rescue.dataGuard.indexing.parser.TextExtractorFromTxt

All Implemented Interfaces: IParser

public class TextExtractorFromTxtextends java.lang.Objectimplements IParser



Author:Roberto Gamboni
 Read a local file and build a String. Then it parses the string extracting
 every word without any blank space and any special characters.








Constructor SummaryTextExtractorFromTxt()


           TextExtractorFromTxt(java.io.File file)


           TextExtractorFromTxt(java.lang.String filePath)


           
 




Method Summary
 java.lang.StringgetNextWord()


           
 booleanhasMoreWords()


           
static voidmain(java.lang.String[] args)


           
 voidsetContent(java.lang.String absoluteFilePath)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


TextExtractorFromTxt

public TextExtractorFromTxt()




TextExtractorFromTxt

public TextExtractorFromTxt(java.lang.String filePath)




TextExtractorFromTxt

public TextExtractorFromTxt(java.io.File file)






Method Detail


hasMoreWords

public boolean hasMoreWords()
Specified by:hasMoreWords in interface IParser





getNextWord

public java.lang.String getNextWord()
Specified by:getNextWord in interface IParser





main

public static void main(java.lang.String[] args)

Parameters:args - 




setContent

public void setContent(java.lang.String absoluteFilePath)
Specified by:setContent in interface IParser











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/PasteFileAction.html
##-----------------TITLE------------------------##
PasteFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class PasteFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.PasteFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class PasteFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryPasteFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


PasteFileAction

public PasteFileAction()






Method Detail


compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction





execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/MakeDirFileAction.html
##-----------------TITLE------------------------##
MakeDirFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class MakeDirFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.MakeDirFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class MakeDirFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryMakeDirFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


MakeDirFileAction

public MakeDirFileAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/gVault/GmailUtils.html
##-----------------TITLE------------------------##
GmailUtils
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.gVault

Class GmailUtils

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.gVault.GmailUtils


public class GmailUtilsextends java.lang.Object











Constructor SummaryGmailUtils()


           
 




Method Summary
static java.lang.StringfixUsername(java.lang.String username)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


GmailUtils

public GmailUtils()






Method Detail


fixUsername

public static java.lang.String fixUsername(java.lang.String username)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/LayerType.html
##-----------------TITLE------------------------##
LayerType
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer

Class LayerType

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.LayerType


public class LayerTypeextends java.lang.Object



Author:Roberto








Constructor SummaryLayerType()


           
 




Method Summary
 voidaddLayer(Layer l)


           
static voidaddLayer(java.lang.String layerCode,
         java.lang.String layerClass)


           
 java.util.Vector<Layer>getImplementedLayer()


           
 java.lang.StringgetLayerClass(java.lang.String type)


           
 voidregistersLayer()


           
 voidsetImplementedLayer(java.util.Vector<Layer> implementedLayer)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


LayerType

public LayerType()






Method Detail


addLayer

public void addLayer(Layer l)





addLayer

public static void addLayer(java.lang.String layerCode,
                            java.lang.String layerClass)





registersLayer

public void registersLayer()





getLayerClass

public java.lang.String getLayerClass(java.lang.String type)





getImplementedLayer

public java.util.Vector<Layer> getImplementedLayer()





setImplementedLayer

public void setImplementedLayer(java.util.Vector<Layer> implementedLayer)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/DB2/DB2Login.html
##-----------------TITLE------------------------##
DB2Login
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.DB2

Class DB2Login

java.lang.Object
  java.awt.Component
      java.awt.Container
          java.awt.Window
              java.awt.Frame
                  javax.swing.JFrame
                      org.itr_rescue.dataGuard.StorageServer.DB2.DB2Login

All Implemented Interfaces: java.awt.event.ActionListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants

public class DB2Loginextends javax.swing.JFrameimplements java.awt.event.ActionListener



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JFramejavax.swing.JFrame.AccessibleJFrame
 

Nested classes/interfaces inherited from class java.awt.Framejava.awt.Frame.AccessibleAWTFrame
 

Nested classes/interfaces inherited from class java.awt.Windowjava.awt.Window.AccessibleAWTWindow
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JFrameaccessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled
 
Fields inherited from class java.awt.FrameCROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.WindowConstantsDISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDB2Login()


           
 




Method Summary
 voidactionPerformed(java.awt.event.ActionEvent arg0)


           
 
Methods inherited from class javax.swing.JFrameaddImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update
 
Methods inherited from class java.awt.FrameaddNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setResizable, setState, setTitle, setUndecorated
 
Methods inherited from class java.awt.WindowaddPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getGraphicsConfiguration, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOwnedWindows, getOwner, getOwnerlessWindows, getToolkit, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isShowing, pack, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setVisible, show, toBack, toFront
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paint, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, setBackground, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 
Methods inherited from interface java.awt.MenuContainergetFont, postEvent
 






Constructor Detail


DB2Login

public DB2Login()






Method Detail


actionPerformed

public void actionPerformed(java.awt.event.ActionEvent arg0)
Specified by:actionPerformed in interface java.awt.event.ActionListener











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/RemoteViewLoader.html
##-----------------TITLE------------------------##
RemoteViewLoader
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class RemoteViewLoader

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.RemoteViewLoader


public class RemoteViewLoaderextends java.lang.Object











Constructor SummaryRemoteViewLoader()


           
 




Method Summary
static voidloadRemoteView(java.lang.String serviceName,
               AbstractStorageServer remoteServer,
               java.lang.String remoteView)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


RemoteViewLoader

public RemoteViewLoader()






Method Detail


loadRemoteView

public static void loadRemoteView(java.lang.String serviceName,
                                  AbstractStorageServer remoteServer,
                                  java.lang.String remoteView)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangePanelListener.html
##-----------------TITLE------------------------##
ChangePanelListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface ChangePanelListener
All Superinterfaces: BroadcastListener

public interface ChangePanelListenerextends BroadcastListener



Title:        Java File Manager
 Description:  
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu Sergiu








Method Summary
 voidchangePanel(ChangePanelEvent e)


           
 






Method Detail


changePanel

void changePanel(ChangePanelEvent e)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/gVault/GmailLogin.html
##-----------------TITLE------------------------##
GmailLogin
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.gVault

Class GmailLogin

java.lang.Object
  java.awt.Component
      java.awt.Container
          java.awt.Window
              java.awt.Frame
                  javax.swing.JFrame
                      org.itr_rescue.dataGuard.StorageServer.gVault.GmailLogin

All Implemented Interfaces: java.awt.event.ActionListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants

public class GmailLoginextends javax.swing.JFrameimplements java.awt.event.ActionListener



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JFramejavax.swing.JFrame.AccessibleJFrame
 

Nested classes/interfaces inherited from class java.awt.Framejava.awt.Frame.AccessibleAWTFrame
 

Nested classes/interfaces inherited from class java.awt.Windowjava.awt.Window.AccessibleAWTWindow
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JFrameaccessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled
 
Fields inherited from class java.awt.FrameCROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.WindowConstantsDISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryGmailLogin()


           
 




Method Summary
 voidactionPerformed(java.awt.event.ActionEvent arg0)


           
 
Methods inherited from class javax.swing.JFrameaddImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update
 
Methods inherited from class java.awt.FrameaddNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setResizable, setState, setTitle, setUndecorated
 
Methods inherited from class java.awt.WindowaddPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getGraphicsConfiguration, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOwnedWindows, getOwner, getOwnerlessWindows, getToolkit, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isShowing, pack, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setVisible, show, toBack, toFront
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paint, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, setBackground, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 
Methods inherited from interface java.awt.MenuContainergetFont, postEvent
 






Constructor Detail


GmailLogin

public GmailLogin()






Method Detail


actionPerformed

public void actionPerformed(java.awt.event.ActionEvent arg0)
Specified by:actionPerformed in interface java.awt.event.ActionListener











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/ActionLoader.html
##-----------------TITLE------------------------##
ActionLoader
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class ActionLoader

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.ActionLoader

All Implemented Interfaces: java.awt.event.ActionListener, java.util.EventListener

public class ActionLoaderextends java.lang.Objectimplements java.awt.event.ActionListener











Constructor SummaryActionLoader()


           
 




Method Summary
 voidactionPerformed(java.awt.event.ActionEvent arg0)


           
 voidcreateIndexAction(RemoteFileSystemView view,
                  JFMFile[] files,
                  int[] indexes)


           
 voidcreateOpenFileAction(RemoteFileSystemView view)


           
 voidcreateOpenFileAction(RemoteFileSystemView view,
                     AbstractObjectData[] selected)


           
 voidcreateQuitAction()


           
 voidcreateUpdateFileAction(java.lang.String objId,
                       java.io.File file,
                       RemoteFileSystemView view)


           
 voidcreateUpdateFileStructureAction(RemoteFileSystemView view)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ActionLoader

public ActionLoader()






Method Detail


createUpdateFileStructureAction

public void createUpdateFileStructureAction(RemoteFileSystemView view)






createOpenFileAction

public void createOpenFileAction(RemoteFileSystemView view)






createOpenFileAction

public void createOpenFileAction(RemoteFileSystemView view,
                                 AbstractObjectData[] selected)






createUpdateFileAction

public void createUpdateFileAction(java.lang.String objId,
                                   java.io.File file,
                                   RemoteFileSystemView view)






createIndexAction

public void createIndexAction(RemoteFileSystemView view,
                              JFMFile[] files,
                              int[] indexes)






createQuitAction

public void createQuitAction()






actionPerformed

public void actionPerformed(java.awt.event.ActionEvent arg0)
Specified by:actionPerformed in interface java.awt.event.ActionListener











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/list/ComboBoxCellObject.html
##-----------------TITLE------------------------##
ComboBoxCellObject
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.list

Class ComboBoxCellObject

java.lang.Object
  org.itr_rescue.dataGuard.localFileSystem.view.list.ComboBoxCellObject


public class ComboBoxCellObjectextends java.lang.Object



This is the object that is displayed into the root's combobox. It's toString method returns



Author:sergiu








Constructor SummaryComboBoxCellObject(JFMFile file)


           
 




Method Summary
 JFMFilegetFile()


           
 voidsetFile(JFMFile file)


           
 java.lang.StringtoString()


          Returns the string representation of this object.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


ComboBoxCellObject

public ComboBoxCellObject(JFMFile file)






Method Detail


getFile

public JFMFile getFile()
Returns:Returns the file.




setFile

public void setFile(JFMFile file)
Parameters:file - The file to set.




toString

public java.lang.String toString()
Returns the string representation of this object.
 if getFile()!=null returns getFile().getPath(), otherwise it returns an
 empty string.

Overrides:toString in class java.lang.Object











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/CellBorder.html
##-----------------TITLE------------------------##
CellBorder
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.detail

Class CellBorder

java.lang.Object
  javax.swing.border.AbstractBorder
      javax.swing.border.LineBorder
          org.itr_rescue.dataGuard.localFileSystem.view.detail.CellBorder

All Implemented Interfaces: java.io.Serializable, javax.swing.border.Border

public class CellBorderextends javax.swing.border.LineBorder



This class creates a nice dotted border



Author:sergiuSee Also:Serialized Form







Field Summary
 
Fields inherited from class javax.swing.border.LineBorderlineColor, roundedCorners, thickness
 




Constructor SummaryCellBorder(java.awt.Color color)


           CellBorder(java.awt.Color color,
           int thickness)


           CellBorder(java.awt.Color color,
           int thickness,
           boolean roundedCorners)


           
 




Method Summary
 voidpaintBorder(java.awt.Component c,
            java.awt.Graphics g,
            int x,
            int y,
            int width,
            int height)


          Paints the border for the specified component with the 
 specified position and size.
 voidsetLineColor(java.awt.Color c)


           
 
Methods inherited from class javax.swing.border.LineBordercreateBlackLineBorder, createGrayLineBorder, getBorderInsets, getBorderInsets, getLineColor, getRoundedCorners, getThickness, isBorderOpaque
 
Methods inherited from class javax.swing.border.AbstractBordergetBaseline, getBaselineResizeBehavior, getInteriorRectangle, getInteriorRectangle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


CellBorder

public CellBorder(java.awt.Color color)
Parameters:color - 




CellBorder

public CellBorder(java.awt.Color color,
                  int thickness)
Parameters:color - thickness - 




CellBorder

public CellBorder(java.awt.Color color,
                  int thickness,
                  boolean roundedCorners)
Parameters:color - thickness - roundedCorners - 






Method Detail


setLineColor

public void setLineColor(java.awt.Color c)





paintBorder

public void paintBorder(java.awt.Component c,
                        java.awt.Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Paints the border for the specified component with the 
 specified position and size.

Specified by:paintBorder in interface javax.swing.border.BorderOverrides:paintBorder in class javax.swing.border.LineBorder
Parameters:c - the component for which this border is being paintedg - the paint graphicsx - the x position of the painted bordery - the y position of the painted borderwidth - the width of the painted borderheight - the height of the painted border










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/Utils.html
##-----------------TITLE------------------------##
Utils
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.Utilities

Class Utils

java.lang.Object
  org.itr_rescue.dataGuard.Utilities.Utils


public class Utilsextends java.lang.Object










Field Summary
static java.lang.StringMAC_OS_NAME


           
static java.lang.StringWIN_OS_NAME


           
 




Constructor SummaryUtils()


           
 




Method Summary
static voidcleanUp()


           
static java.lang.ProcessexecuteApp(java.lang.String command)


           
static java.lang.StringgetCommand()


           
static java.lang.StringgetDefaultDir()


           
static voidopenFile(java.io.File f)


           
static voidopenLocalFile(java.lang.String filePath,
              boolean localSource)


           
static voidopenURL(java.lang.String URL)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


MAC_OS_NAME

public static final java.lang.String MAC_OS_NAME
See Also:Constant Field Values




WIN_OS_NAME

public static final java.lang.String WIN_OS_NAME
See Also:Constant Field Values






Constructor Detail


Utils

public Utils()






Method Detail


cleanUp

public static void cleanUp()





getDefaultDir

public static java.lang.String getDefaultDir()





openFile

public static void openFile(java.io.File f)





openLocalFile

public static void openLocalFile(java.lang.String filePath,
                                 boolean localSource)





getCommand

public static java.lang.String getCommand()





executeApp

public static java.lang.Process executeApp(java.lang.String command)





openURL

public static void openURL(java.lang.String URL)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/ButtonsPanel.html
##-----------------TITLE------------------------##
ButtonsPanel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class ButtonsPanel

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JPanel
                  org.itr_rescue.dataGuard.ui.ButtonsPanel

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible

public class ButtonsPanelextends javax.swing.JPanel



Title: Java File Manager Description: Copyright: Copyright (c) 2001 Company:
 Home



Version:1.0Author:Giurgiu SergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JPaneljavax.swing.JPanel.AccessibleJPanel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryButtonsPanel()


           ButtonsPanel(java.util.Vector buttons)


           
 




Method Summary
 java.util.VectorgetButtons()


           
 voidsetButtons(java.util.Vector newButtons)


           
 
Methods inherited from class javax.swing.JPanelgetAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


ButtonsPanel

public ButtonsPanel(java.util.Vector buttons)




ButtonsPanel

public ButtonsPanel()






Method Detail


setButtons

public void setButtons(java.util.Vector newButtons)





getButtons

public java.util.Vector getButtons()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/DataGuardServiceModel.html
##-----------------TITLE------------------------##
DataGuardServiceModel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class DataGuardServiceModel

java.lang.Object
  javax.swing.table.AbstractTableModel
      javax.swing.table.DefaultTableModel
          org.itr_rescue.dataGuard.remoteView.DataGuardServiceModel

All Implemented Interfaces: java.io.Serializable, javax.swing.table.TableModel

public class DataGuardServiceModelextends javax.swing.table.DefaultTableModel



See Also:Serialized Form







Field Summary
 inteditableRow


           
 
Fields inherited from class javax.swing.table.DefaultTableModelcolumnIdentifiers, dataVector
 
Fields inherited from class javax.swing.table.AbstractTableModellistenerList
 




Constructor SummaryDataGuardServiceModel()


           
 




Method Summary
 booleanisCellEditable(int row,
               int column)


           
 voidnoEditableRow()


           
 voidsetEditableRow(int row)


           
 
Methods inherited from class javax.swing.table.DefaultTableModeladdColumn, addColumn, addColumn, addRow, addRow, convertToVector, convertToVector, getColumnCount, getColumnName, getDataVector, getRowCount, getValueAt, insertRow, insertRow, moveRow, newDataAvailable, newRowsAdded, removeRow, rowsRemoved, setColumnCount, setColumnIdentifiers, setColumnIdentifiers, setDataVector, setDataVector, setNumRows, setRowCount, setValueAt
 
Methods inherited from class javax.swing.table.AbstractTableModeladdTableModelListener, findColumn, fireTableCellUpdated, fireTableChanged, fireTableDataChanged, fireTableRowsDeleted, fireTableRowsInserted, fireTableRowsUpdated, fireTableStructureChanged, getColumnClass, getListeners, getTableModelListeners, removeTableModelListener
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


editableRow

public int editableRow







Constructor Detail


DataGuardServiceModel

public DataGuardServiceModel()






Method Detail


isCellEditable

public boolean isCellEditable(int row,
                              int column)
Specified by:isCellEditable in interface javax.swing.table.TableModelOverrides:isCellEditable in class javax.swing.table.DefaultTableModel





setEditableRow

public void setEditableRow(int row)





noEditableRow

public void noEditableRow()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/FolderNotExistException.html
##-----------------TITLE------------------------##
FolderNotExistException
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.XmlModel

Class FolderNotExistException

java.lang.Object
  java.lang.Throwable
      java.lang.Exception
          org.itr_rescue.dataGuard.remoteView.XmlModel.FolderNotExistException

All Implemented Interfaces: java.io.Serializable

public class FolderNotExistExceptionextends java.lang.Exception



See Also:Serialized Form








Constructor SummaryFolderNotExistException()


           FolderNotExistException(java.lang.String msg)


           
 




Method Summary
 
Methods inherited from class java.lang.ThrowablefillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


FolderNotExistException

public FolderNotExistException()




FolderNotExistException

public FolderNotExistException(java.lang.String msg)










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/RemoteFileSystemPopupMenu.html
##-----------------TITLE------------------------##
RemoteFileSystemPopupMenu
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.FileSystem

Class RemoteFileSystemPopupMenu

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemPopupMenu


public class RemoteFileSystemPopupMenuextends java.lang.Object










Field Summary
protected  javax.swing.JMenuItemcopyFile


           
protected  javax.swing.JMenuItemcopyFolder


           
protected  javax.swing.JMenuItemcutFile


           
protected  javax.swing.JMenuItemcutFolder


           
protected  javax.swing.JMenuItemdeleteFile


           
protected  javax.swing.JMenuItemdeleteFolder


           
protected  javax.swing.JPopupMenufilePopup


           
protected  javax.swing.JPopupMenufolderPopup


           
protected  javax.swing.JMenuItemnewfolder


           
protected  javax.swing.JMenuItempasteFolder


           
protected  javax.swing.JMenuItempasteVoid


           
protected  javax.swing.JMenuItempropertiesFile


           
protected  javax.swing.JMenuItempropertiesFolder


           
protected  javax.swing.JMenuItemrenameFile


           
protected  javax.swing.JMenuItemrenameFolder


           
protected  javax.swing.JMenuItemtransferFile


           
protected  javax.swing.JMenuItemtransferFolder


           
protected  javax.swing.JPopupMenuvoidPopup


           
 




Constructor SummaryRemoteFileSystemPopupMenu()


           
 




Method Summary
 javax.swing.JPopupMenugetFilePopup()


           
 javax.swing.JPopupMenugetFolderPopup()


           
 javax.swing.JPopupMenugetVoidPopup()


           
protected  voidinitializeMenuItem()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


filePopup

protected javax.swing.JPopupMenu filePopup





folderPopup

protected javax.swing.JPopupMenu folderPopup





voidPopup

protected javax.swing.JPopupMenu voidPopup





transferFile

protected javax.swing.JMenuItem transferFile





transferFolder

protected javax.swing.JMenuItem transferFolder





cutFile

protected javax.swing.JMenuItem cutFile





copyFile

protected javax.swing.JMenuItem copyFile





cutFolder

protected javax.swing.JMenuItem cutFolder





copyFolder

protected javax.swing.JMenuItem copyFolder





pasteFolder

protected javax.swing.JMenuItem pasteFolder





pasteVoid

protected javax.swing.JMenuItem pasteVoid





renameFile

protected javax.swing.JMenuItem renameFile





deleteFile

protected javax.swing.JMenuItem deleteFile





propertiesFile

protected javax.swing.JMenuItem propertiesFile





renameFolder

protected javax.swing.JMenuItem renameFolder





deleteFolder

protected javax.swing.JMenuItem deleteFolder





propertiesFolder

protected javax.swing.JMenuItem propertiesFolder





newfolder

protected javax.swing.JMenuItem newfolder







Constructor Detail


RemoteFileSystemPopupMenu

public RemoteFileSystemPopupMenu()






Method Detail


initializeMenuItem

protected void initializeMenuItem()





getFilePopup

public javax.swing.JPopupMenu getFilePopup()





getFolderPopup

public javax.swing.JPopupMenu getFolderPopup()





getVoidPopup

public javax.swing.JPopupMenu getVoidPopup()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/Broadcaster.html
##-----------------TITLE------------------------##
Broadcaster
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class Broadcaster

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.Broadcaster


public class Broadcasterextends java.lang.Object



This is the class that registers the listeners, removes listeners, and notifies the listeners when a certain event occurs.











Constructor SummaryBroadcaster()


           
 




Method Summary
static voidaddChangeDirectoryListener(ChangeDirectoryListener listener)


          Adds a listener who listens for the ChangeDirectoryEvent
static voidaddChangePanelListener(ChangePanelListener listener)


          Adds a listener who listens for the ChangePanelEvent
static voidaddChangeViewListener(ChangeViewListener listener)


          Adds a listener who listens for the ChangeViewEvent
static voidaddColorChangeListener(ColorChangeListener listener)


          Adds a listener who listens for the ColorChangeEvent
static voidaddFileListSelectionListener(FileListSelectionListener listener)


          Adds a listener who listens for the FileListSelectionEvent
static voidaddFontChangeListener(FontChangeListener listener)


          Adds a listener who listens for the FontChangeEvent
static voidnotifyChangeDirectoryListeners(ChangeDirectoryEvent event)


          Notifies all listeners who listens for the ChangeDirectoryEvent
static voidnotifyChangePanelListeners(ChangePanelEvent event)


          Notifies all listeners who listens for the ChangePanelEvent
static voidnotifyChangeViewListeners(ChangeViewEvent event)


          Notifies all listeners who listens for the ChangeViewEvent
static voidnotifyColorChangeListeners(ColorChangeEvent event)


          Notifies all listeners who listens for the ColorChangeEvent
static voidnotifyFileListSelectionListener(FileListSelectionEvent event)


          Notifies all listeners who listens for the FileListSelectionEvent
static voidnotifyFontChangeListeners(FontChangeEvent event)


          Notifies all listeners who listens for the FontChangeEvent
static voidremoveChangeDirectoryListener(ChangeDirectoryListener listener)


          Removes a listener who listens for the ChangeDirectoryEvent
static voidremoveChangePanelListener(ChangePanelListener listener)


          Removes a listener who listens for the ChangePanelEvent
static voidremoveChangeViewListener(ChangeViewListener listener)


          Removes a listener who listens for the ChangeViewEvent
static voidremoveColorChangeListener(ColorChangeListener listener)


          Removes a listener who listens for the ColorChangeEvent
static voidremoveFileListSelectionListener(FileListSelectionListener listener)


          Removes a listener who listens for the FileListSelectionEvent
static voidremoveFontChangeListener(FontChangeListener listener)


          Removes a listener who listens for the FontChangeEvent
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Broadcaster

public Broadcaster()






Method Detail


addChangeDirectoryListener

public static void addChangeDirectoryListener(ChangeDirectoryListener listener)
Adds a listener who listens for the ChangeDirectoryEvent






removeChangeDirectoryListener

public static void removeChangeDirectoryListener(ChangeDirectoryListener listener)
Removes a listener who listens for the ChangeDirectoryEvent






notifyChangeDirectoryListeners

public static void notifyChangeDirectoryListeners(ChangeDirectoryEvent event)
Notifies all listeners who listens for the ChangeDirectoryEvent






addChangePanelListener

public static void addChangePanelListener(ChangePanelListener listener)
Adds a listener who listens for the ChangePanelEvent






removeChangePanelListener

public static void removeChangePanelListener(ChangePanelListener listener)
Removes a listener who listens for the ChangePanelEvent






notifyChangePanelListeners

public static void notifyChangePanelListeners(ChangePanelEvent event)
Notifies all listeners who listens for the ChangePanelEvent






addChangeViewListener

public static void addChangeViewListener(ChangeViewListener listener)
Adds a listener who listens for the ChangeViewEvent






removeChangeViewListener

public static void removeChangeViewListener(ChangeViewListener listener)
Removes a listener who listens for the ChangeViewEvent






notifyChangeViewListeners

public static void notifyChangeViewListeners(ChangeViewEvent event)
Notifies all listeners who listens for the ChangeViewEvent






addFileListSelectionListener

public static void addFileListSelectionListener(FileListSelectionListener listener)
Adds a listener who listens for the FileListSelectionEvent






removeFileListSelectionListener

public static void removeFileListSelectionListener(FileListSelectionListener listener)
Removes a listener who listens for the FileListSelectionEvent






notifyFileListSelectionListener

public static void notifyFileListSelectionListener(FileListSelectionEvent event)
Notifies all listeners who listens for the FileListSelectionEvent






addColorChangeListener

public static void addColorChangeListener(ColorChangeListener listener)
Adds a listener who listens for the ColorChangeEvent






removeColorChangeListener

public static void removeColorChangeListener(ColorChangeListener listener)
Removes a listener who listens for the ColorChangeEvent






notifyColorChangeListeners

public static void notifyColorChangeListeners(ColorChangeEvent event)
Notifies all listeners who listens for the ColorChangeEvent






addFontChangeListener

public static void addFontChangeListener(FontChangeListener listener)
Adds a listener who listens for the FontChangeEvent






removeFontChangeListener

public static void removeFontChangeListener(FontChangeListener listener)
Removes a listener who listens for the FontChangeEvent






notifyFontChangeListeners

public static void notifyFontChangeListeners(FontChangeEvent event)
Notifies all listeners who listens for the FontChangeEvent












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/IndexAction.html
##-----------------TITLE------------------------##
IndexAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class IndexAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.IndexAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class IndexActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryIndexAction(AbstractStorageServer server,
            JFMFile[] selectedLocalFiles,
            int[] indexes)


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


IndexAction

public IndexAction(AbstractStorageServer server,
                   JFMFile[] selectedLocalFiles,
                   int[] indexes)






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/RemoteFileSystemView.html
##-----------------TITLE------------------------##
RemoteFileSystemView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.FileSystem

Class RemoteFileSystemView

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView

All Implemented Interfaces: java.awt.event.FocusListener, java.awt.event.MouseListener, java.util.EventListener, javax.swing.event.ListSelectionListener, IRemoteFileSystemView, IRemoteView
Direct Known Subclasses: RemoteFileSearchView

public class RemoteFileSystemViewextends java.lang.Objectimplements IRemoteFileSystemView, java.awt.event.FocusListener, java.awt.event.MouseListener, javax.swing.event.ListSelectionListener










Field Summary
protected static java.util.HashMap<java.lang.String,java.lang.String>actions


           
protected  RemoteFileSystemPopupMenupopupMenu


           
protected  javax.swing.JScrollPanescrollPane


           
protected  AbstractStorageServerserver


           
 java.lang.Stringstructure_name


           
protected  XmlFileSystemModelsystem


           
protected  RemoteFileSystemViewModeltableModel


           
protected  javax.swing.JTabletheList


           
 




Constructor SummaryRemoteFileSystemView()


           
 




Method Summary
 voidaddFile(AbstractObjectData object)


           
 voidaddItem(FileObjectData file)


           
 voidassociateServer(AbstractStorageServer s)


           
 voidclearAllFiles()


           
 voiddeleteFile(java.lang.String fileId)


           
 voiddisplayContentsOfDirectory(java.lang.String dirId)


           
 voidfocusGained(java.awt.event.FocusEvent e)


           
 voidfocusLost(java.awt.event.FocusEvent e)


           
 voidformat()


           
 java.lang.StringgetAction(java.lang.String actionType)


           
 javax.swing.JPopupMenugetFilePopupMenu()


           
 XmlFileSystemModelgetFileSystem()


           
 javax.swing.JPopupMenugetFolderPopupMenu()


           
 javax.swing.JComponentgetOutputPane()


           
 java.util.RandomgetRandom()


           
 AbstractStorageServergetRemoteServer()


           
 java.lang.StringgetRemoteUniqueCode()


           
 javax.swing.JScrollPanegetScrollPane()


           
 AbstractObjectDatagetSelectedFile()


           
 AbstractObjectData[]getSelectedFiles()


           
 java.lang.String[]getSelectedFilesName()


           
 intgetSelectedFilesNumber()


           
 javax.swing.JPopupMenugetVoidPopupMenu()


           
protected  voidinitializeMenuItem()


           
 voidmouseClicked(java.awt.event.MouseEvent e)


           
 voidmouseEntered(java.awt.event.MouseEvent e)


           
 voidmouseExited(java.awt.event.MouseEvent e)


           
 voidmousePressed(java.awt.event.MouseEvent e)


           
 voidmouseReleased(java.awt.event.MouseEvent e)


           
 voidopenDirectory(java.lang.String dirName)


           
 voidpopulate()


           
 voidrefresh()


           
 voidsetSystem(XmlFileSystemModel system)


           
protected  voidsetupColumns()


           
 voidvalueChanged(javax.swing.event.ListSelectionEvent e)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


structure_name

public final java.lang.String structure_name
See Also:Constant Field Values




theList

protected javax.swing.JTable theList





tableModel

protected RemoteFileSystemViewModel tableModel





scrollPane

protected javax.swing.JScrollPane scrollPane





system

protected XmlFileSystemModel system





server

protected AbstractStorageServer server





popupMenu

protected RemoteFileSystemPopupMenu popupMenu





actions

protected static java.util.HashMap<java.lang.String,java.lang.String> actions







Constructor Detail


RemoteFileSystemView

public RemoteFileSystemView()






Method Detail


getScrollPane

public javax.swing.JScrollPane getScrollPane()






setupColumns

protected void setupColumns()






addItem

public void addItem(FileObjectData file)






displayContentsOfDirectory

public void displayContentsOfDirectory(java.lang.String dirId)
Specified by:displayContentsOfDirectory in interface IRemoteFileSystemView





focusGained

public void focusGained(java.awt.event.FocusEvent e)
Specified by:focusGained in interface java.awt.event.FocusListener





focusLost

public void focusLost(java.awt.event.FocusEvent e)
Specified by:focusLost in interface java.awt.event.FocusListener





refresh

public void refresh()
Specified by:refresh in interface IRemoteFileSystemView





clearAllFiles

public void clearAllFiles()






mouseClicked

public void mouseClicked(java.awt.event.MouseEvent e)
Specified by:mouseClicked in interface java.awt.event.MouseListener





mousePressed

public void mousePressed(java.awt.event.MouseEvent e)
Specified by:mousePressed in interface java.awt.event.MouseListener





mouseReleased

public void mouseReleased(java.awt.event.MouseEvent e)
Specified by:mouseReleased in interface java.awt.event.MouseListener





mouseEntered

public void mouseEntered(java.awt.event.MouseEvent e)
Specified by:mouseEntered in interface java.awt.event.MouseListener





mouseExited

public void mouseExited(java.awt.event.MouseEvent e)
Specified by:mouseExited in interface java.awt.event.MouseListener





getFileSystem

public XmlFileSystemModel getFileSystem()
Specified by:getFileSystem in interface IRemoteFileSystemView





setSystem

public void setSystem(XmlFileSystemModel system)






valueChanged

public void valueChanged(javax.swing.event.ListSelectionEvent e)
Specified by:valueChanged in interface javax.swing.event.ListSelectionListener





getOutputPane

public javax.swing.JComponent getOutputPane()
Specified by:getOutputPane in interface IRemoteView





populate

public void populate()
Specified by:populate in interface IRemoteView





addFile

public void addFile(AbstractObjectData object)
Specified by:addFile in interface IRemoteFileSystemView





deleteFile

public void deleteFile(java.lang.String fileId)
Specified by:deleteFile in interface IRemoteFileSystemView





format

public void format()
Specified by:format in interface IRemoteFileSystemView





getSelectedFile

public AbstractObjectData getSelectedFile()
Specified by:getSelectedFile in interface IRemoteFileSystemView





getSelectedFiles

public AbstractObjectData[] getSelectedFiles()
Specified by:getSelectedFiles in interface IRemoteFileSystemView





getSelectedFilesName

public java.lang.String[] getSelectedFilesName()
Specified by:getSelectedFilesName in interface IRemoteFileSystemView





getSelectedFilesNumber

public int getSelectedFilesNumber()
Specified by:getSelectedFilesNumber in interface IRemoteFileSystemView





openDirectory

public void openDirectory(java.lang.String dirName)
Specified by:openDirectory in interface IRemoteFileSystemView





associateServer

public void associateServer(AbstractStorageServer s)
Specified by:associateServer in interface IRemoteView





getRemoteServer

public AbstractStorageServer getRemoteServer()
Specified by:getRemoteServer in interface IRemoteView





getRandom

public java.util.Random getRandom()






getAction

public java.lang.String getAction(java.lang.String actionType)
Specified by:getAction in interface IRemoteView





getRemoteUniqueCode

public java.lang.String getRemoteUniqueCode()
Specified by:getRemoteUniqueCode in interface IRemoteView





initializeMenuItem

protected void initializeMenuItem()






getFilePopupMenu

public javax.swing.JPopupMenu getFilePopupMenu()
Specified by:getFilePopupMenu in interface IRemoteFileSystemView





getFolderPopupMenu

public javax.swing.JPopupMenu getFolderPopupMenu()
Specified by:getFolderPopupMenu in interface IRemoteFileSystemView





getVoidPopupMenu

public javax.swing.JPopupMenu getVoidPopupMenu()
Specified by:getVoidPopupMenu in interface IRemoteFileSystemView











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/ObjectData.html
##-----------------TITLE------------------------##
ObjectData
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject

Class ObjectData

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.AbstractObjectData
      org.itr_rescue.dataGuard.DataObject.ObjectData

Direct Known Subclasses: FileObjectData

public class ObjectDataextends AbstractObjectData










Field Summary
protected  java.lang.StringiconType


           
protected  javax.swing.IcontheIcon


           
 
Fields inherited from class org.itr_rescue.dataGuard.DataObject.AbstractObjectDatacontent, id, metadata
 




Constructor SummaryObjectData(java.lang.String name)


           
 




Method Summary
 javax.swing.IcongetIcon()


           
 voidsetIconType(java.lang.String systemExtension)


           
 voidsetMetadata(java.lang.String tag,
            java.lang.String value)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObject.AbstractObjectDatagetId, getMetadataValue, getObjectContent, setId
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


theIcon

protected javax.swing.Icon theIcon





iconType

protected java.lang.String iconType







Constructor Detail


ObjectData

public ObjectData(java.lang.String name)






Method Detail


setMetadata

public void setMetadata(java.lang.String tag,
                        java.lang.String value)





getIcon

public javax.swing.Icon getIcon()





setIconType

public void setIconType(java.lang.String systemExtension)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/IIndex.html
##-----------------TITLE------------------------##
IIndex
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Interface IIndex
All Known Implementing Classes: Index

public interface IIndex











Method Summary
 KeywordEntrygetKeywordEntry(int keywordId)


           
 java.util.Hashtable<java.lang.String,java.util.List<KeywordPointer>>getQ_grams()


           
 






Method Detail


getKeywordEntry

KeywordEntry getKeywordEntry(int keywordId)





getQ_grams

java.util.Hashtable<java.lang.String,java.util.List<KeywordPointer>> getQ_grams()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMFile.html
##-----------------TITLE------------------------##
JFMFile
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMFile

java.lang.Object
  org.itr_rescue.dataGuard.localFileSystem.JFMFile

All Implemented Interfaces: java.lang.Comparable
Direct Known Subclasses: JFMLocalFile

public abstract class JFMFileextends java.lang.Objectimplements java.lang.Comparable



This class is the base class of an File object. It is supposed to be implemented by every filesystem implementation.
 The methods implemented by this class are very similar to those offered by the java.io.File class found in the JDK.
 Even the comments are the same. Why? Because, IMHO, java.io.File represents a very good abstractisation of an file object
 but I can't use it, because of the way its implemented. Or ... I haven't found a way to use it yet.
 If somebody will point me to the proper documentation, i will be more than happy to study it, to see how can I improve my skills.



Author:sergiu







Field Summary
protected  java.lang.Objectdata


          This object holds the data required for the implementing file to initialize itself.
protected  java.lang.StringdisplayName


          This parameter, if setted to a different value than null determines what the toString() method will return
protected  booleanmarked


          This parameter is set to true when the file is marked in the view.
protected  java.util.Hashtable<java.lang.String,java.lang.String>multiPart


          This parameter contains the id of each file which this
 file has been splitted.
 




Constructor SummaryJFMFile(java.lang.Object data)


          Constructor.
 




Method Summary
abstract  booleancanRead()


          Tests whether the application can read the file denoted by the
 abstract pathname.
abstract  booleancanWrite()


          Tests whether the application can modify to the file denoted by the
 abstract pathname.
abstract  intcompareTo(JFMFile pathname)


          Compares two abstract pathnames lexicographically.
 intcompareTo(java.lang.Object o)


          Compares this abstract pathname to another object.
abstract  JFMFilecreateFile(java.lang.String name)


          Creates the file named by the abstract pathname denoted by the parameter.
abstract  booleandelete()


          Deletes the file or directory denoted by the abstract pathname.
abstract  booleanequals(java.lang.Object obj)


          Tests this abstract pathname for equality with the given object.
abstract  booleanexists()


          Tests whether the file or directory denoted by the abstract pathname
 exists.
abstract  JFMFilegetAbsoluteFile()


          Returns the absolute form of this abstract pathname.
abstract  java.lang.StringgetAbsolutePath()


          Returns the absolute pathname string of this abstract pathname.
abstract  JFMFilegetCanonicalFile()


          Returns the canonical form of this abstract pathname.
abstract  java.lang.StringgetCanonicalPath()


          Returns the canonical pathname string of this abstract pathname.
 java.lang.StringgetDisplayName()


          Returns the display name
 java.io.FilegetFile()


          gets the content of the JFMFile if it exists.
abstract  javax.swing.IcongetIcon()


          Returns the filesystem's icon associated with this file, or null if it can't be determined.
abstract  java.io.InputStreamgetInputStream()


          Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)
abstract  java.lang.StringgetMimeType()


          This method returns the string that represents the mime-type of this file, or null if it can't be determined.
 java.util.Hashtable<java.lang.String,java.lang.String>getMultiPart()


          gets the hashtbale multipart.
abstract  java.lang.StringgetName()


          This string represents the short name of the file (e.g.
abstract  java.io.OutputStreamgetOutputStream()


          Returns an OutputStream to write to this file, or null if the write operation isn't supported
 (or doesn;t make sense from the filesystem's point of view).
abstract  java.lang.StringgetParent()


          Returns the pathname string of this abstract pathname's parent, or
 null if this pathname does not name a parent directory.
abstract  JFMFilegetParentFile()


          Returns the abstract pathname of this abstract pathname's parent,
 or null if this pathname does not name a parent
 directory.
abstract  java.lang.StringgetPath()


          Converts this abstract pathname into a pathname string.
 JFMFilegetRootDriveFile()


          This method returns the root directory of the filesystem of witch the file belongs to.
abstract  java.lang.StringgetSystemDisplayName()


          Returns the system display name as returned by the filesystem viewer, or null
abstract  inthashCode()


          Computes a hash code for this abstract pathname.
abstract  booleanisAbsolute()


          Tests whether this abstract pathname is absolute.
abstract  booleanisDirectory()


          Tests whether the file denoted by this abstract pathname is a
 directory.
abstract  booleanisFile()


          Tests whether the file denoted by this abstract pathname is a normal
 file.
abstract  booleanisHidden()


          Tests whether the file named by this abstract pathname is a hidden
 file.
 booleanisMarked()


          Returns true if the file has been marked in the view, false otherwise
abstract  longlastModified()


          Returns the time that the file denoted by this abstract pathname was
 last modified.
abstract  longlength()


          Returns the length of the file denoted by this abstract pathname.
abstract  JFMFile[]listFiles()


          Returns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.
abstract  JFMFilemkdir(java.lang.String name)


          Creates the directory named by the abstract pathname denoted by the parameter.
 voidsetDisplayName(java.lang.String displayName)


          Sets the display name
 voidsetMarked(boolean flag)


          Sets the marked flag.
 voidsetMultiPart(java.util.Hashtable<java.lang.String,java.lang.String> multiPart)


          Sets the hashtbale multipart.
 java.lang.StringtoString()


          If getDisplayName() return null it  returns the pathname string of this abstract pathname.
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, notify, notifyAll, wait, wait, wait
 






Field Detail


data

protected java.lang.Object data
This object holds the data required for the implementing file to initialize itself.
 In the case of an local file, the absolute pathname (String) would be required.
 In the case of other implementing filesystems, it may contain other stuff.
 Usualy it will be used by the implementing filesystem.






displayName

protected java.lang.String displayName
This parameter, if setted to a different value than null determines what the toString() method will return






marked

protected boolean marked
This parameter is set to true when the file is marked in the view.






multiPart

protected java.util.Hashtable<java.lang.String,java.lang.String> multiPart
This parameter contains the id of each file which this
 file has been splitted.








Constructor Detail


JFMFile

public JFMFile(java.lang.Object data)
Constructor.







Method Detail


listFiles

public abstract JFMFile[] listFiles()
Returns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of
 File objects is returned, one for each file or directory in
 the directory.  Pathnames denoting the directory itself and the
 directory's parent directory are not included in the result.  Each
 resulting abstract pathname is constructed from this abstract pathname
 using the File(File, String) constructor.  Therefore if this pathname
 is absolute then each resulting pathname is absolute; if this pathname
 is relative then each resulting pathname will be relative to the same
 directory.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.


Returns:An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns null if this abstract pathname
          does not denote a directory, or if an I/O error occurs.
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the directory




getInputStream

public abstract java.io.InputStream getInputStream()
Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)


Returns:an InputStream to read from the file




getOutputStream

public abstract java.io.OutputStream getOutputStream()
Returns an OutputStream to write to this file, or null if the write operation isn't supported
 (or doesn;t make sense from the filesystem's point of view).
 The way that this is implemented in every filesystem can vary.
 The call to this method might get the file to be emptied (as in the LocalFileSystem implementation)
 You have been warned.


Returns:An OutputStream to write to this file




getName

public abstract java.lang.String getName()
This string represents the short name of the file (e.g. foo.txt)







getParent

public abstract java.lang.String getParent()
Returns the pathname string of this abstract pathname's parent, or
 null if this pathname does not name a parent directory.

  The parent of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.


Returns:The pathname string of the parent directory named by this
          abstract pathname, or null if this pathname
          does not name a parent




getParentFile

public abstract JFMFile getParentFile()
Returns the abstract pathname of this abstract pathname's parent,
 or null if this pathname does not name a parent
 directory.

  The parent of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.


Returns:The abstract pathname of the parent directory named by this
          abstract pathname, or null if this pathname
          does not name a parent




getPath

public abstract java.lang.String getPath()
Converts this abstract pathname into a pathname string.  The resulting
 string uses the default name-separator character to
 separate the names in the name sequence.


Returns:The string form of this abstract pathname




isAbsolute

public abstract boolean isAbsolute()
Tests whether this abstract pathname is absolute.  The definition of
 absolute pathname is system dependent.  On UNIX systems, a pathname is
 absolute if its prefix is "/".  On Microsoft Windows systems, a
 pathname is absolute if its prefix is a drive specifier followed by
 "\\", or if its prefix is "\\".
 Some other filesystems implementations (FTP, NFS, SMB, etc.) can have their own definition
 of the absolute pathname, ven though I would recommend sticking to the UNIX definition.


Returns:true if this abstract pathname is absolute,
          false otherwise




getAbsolutePath

public abstract java.lang.String getAbsolutePath()
Returns the absolute pathname string of this abstract pathname.

  If this abstract pathname is already absolute, then the pathname
 string is simply returned as if by the getPath()
 method.  If this abstract pathname is the empty abstract pathname then
 the pathname string of the current user directory, which is named by the
 system property user.dir, is returned.  Otherwise this
 pathname is resolved in a system-dependent way.  On UNIX systems, a
 relative pathname is made absolute by resolving it against the current
 user directory.  On Microsoft Windows systems, a relative pathname is made absolute
 by resolving it against the current directory of the drive named by the
 pathname, if any; if not, it is resolved against the current user
 directory.


Returns:The absolute pathname string denoting the same file or
          directory as this abstract pathname
Throws:
java.lang.SecurityException - If a required system property value cannot be accessed.See Also:org.jfm.md.filesystems.JFMFile#isAbsolute()




getAbsoluteFile

public abstract JFMFile getAbsoluteFile()
Returns the absolute form of this abstract pathname.


Returns:The absolute abstract pathname denoting the same file or
          directory as this abstract pathname
Throws:
java.lang.SecurityException - If a required system property value cannot be accessed.




getCanonicalPath

public abstract java.lang.String getCanonicalPath()
                                           throws FSException
Returns the canonical pathname string of this abstract pathname.

  A canonical pathname is both absolute and unique.  The precise
 definition of canonical form is system-dependent.  This method first
 converts this pathname to absolute form if necessary, as if by invoking the
 getAbsolutePath() method, and then maps it to its unique form in a
 system-dependent way.  This typically involves removing redundant names
 such as "." and ".." from the pathname, resolving
 symbolic links (on UNIX platforms), and converting drive letters to a
 standard case (on Microsoft Windows platforms).

  Every pathname that denotes an existing file or directory has a
 unique canonical form.  Every pathname that denotes a nonexistent file
 or directory also has a unique canonical form.  The canonical form of
 the pathname of a nonexistent file or directory may be different from
 the canonical form of the same pathname after the file or directory is
 created.  Similarly, the canonical form of the pathname of an existing
 file or directory may be different from the canonical form of the same
 pathname after the file or directory is deleted.


Returns:The canonical pathname string denoting the same file or
          directory as this abstract pathname
Throws:
FSException - If an filesystem error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queries
java.lang.SecurityException - If a required system property value cannot be accessed.




getCanonicalFile

public abstract JFMFile getCanonicalFile()
                                  throws FSException
Returns the canonical form of this abstract pathname.


Returns:The canonical pathname string denoting the same file or
          directory as this abstract pathname
Throws:
FSException - If an filesystem error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queries
java.lang.SecurityException - If a required system property value cannot be accessed.




isDirectory

public abstract boolean isDirectory()
Tests whether the file denoted by this abstract pathname is a
 directory.


Returns:true if and only if the file denoted by this
          abstract pathname exists and is a directory;
          false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




isFile

public abstract boolean isFile()
Tests whether the file denoted by this abstract pathname is a normal
 file.  A file is normal if it is not a directory and, in
 addition, satisfies other system-dependent criteria.  Any non-directory
 file created by a Java application is guaranteed to be a normal file.


Returns:true if and only if the file denoted by this
          abstract pathname exists and is a normal file;
          false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




isHidden

public abstract boolean isHidden()
Tests whether the file named by this abstract pathname is a hidden
 file.  The exact definition of hidden is system-dependent.  On
 UNIX systems, a file is considered to be hidden if its name begins with
 a period character ('.').  On Microsoft Windows systems, a file is
 considered to be hidden if it has been marked as such in the filesystem.


Returns:true if and only if the file denoted by this
          abstract pathname is hidden according to the conventions of the
          underlying platform
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




lastModified

public abstract long lastModified()
Returns the time that the file denoted by this abstract pathname was
 last modified.


Returns:A long value representing the time the file was
          last modified, measured in milliseconds since the epoch
          (00:00:00 GMT, January 1, 1970), or 0L if the
          file does not exist or if an I/O error occurs
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




length

public abstract long length()
Returns the length of the file denoted by this abstract pathname.
 The return value is unspecified if this pathname denotes a directory.


Returns:The length, in bytes, of the file denoted by this abstract
          pathname, or 0L if the file does not exist
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




compareTo

public abstract int compareTo(JFMFile pathname)
Compares two abstract pathnames lexicographically.  The ordering
 defined by this method depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not.


Parameters:pathname - The abstract pathname to be compared to this abstract
                    pathname
Returns:Zero if the argument is equal to this abstract pathname, a
                value less than zero if this abstract pathname is
                lexicographically less than the argument, or a value greater
                than zero if this abstract pathname is lexicographically
                greater than the argument




compareTo

public int compareTo(java.lang.Object o)
Compares this abstract pathname to another object.  If the other object
 is an abstract pathname, then this function behaves like compareTo(JFMFile).  Otherwise, it throws a
 ClassCastException, since abstract pathnames can only be
 compared to abstract pathnames.

Specified by:compareTo in interface java.lang.Comparable
Parameters:o - The Object to be compared to this abstract
             pathname
Returns:If the argument is an abstract pathname, returns zero
          if the argument is equal to this abstract pathname, a value
          less than zero if this abstract pathname is lexicographically
          less than the argument, or a value greater than zero if this
          abstract pathname is lexicographically greater than the
          argument
Throws:
ClassCastException - if the argument is not an
                abstract pathnameSee Also:Comparable




equals

public abstract boolean equals(java.lang.Object obj)
Tests this abstract pathname for equality with the given object.
 Returns true if and only if the argument is not
 null and is an abstract pathname that denotes the same file
 or directory as this abstract pathname.  Whether or not two abstract
 pathnames are equal depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not. With other filesystems implementation ... it's their responsability
 to decide wether it should be case sensitive or not.

Overrides:equals in class java.lang.Object
Parameters:obj - The object to be compared with this abstract pathname
Returns:true if and only if the objects are the same;
          false otherwise




hashCode

public abstract int hashCode()
Computes a hash code for this abstract pathname.  Because equality of
 abstract pathnames is inherently system-dependent, so is the computation
 of their hash codes.  On UNIX systems, the hash code of an abstract
 pathname is equal to the exclusive or of its pathname string
 and the decimal value 1234321.  On Microsoft Windows systems, the hash
 code is equal to the exclusive or of its pathname string,
 convered to lower case, and the decimal value 1234321.

Overrides:hashCode in class java.lang.Object
Returns:A hash code for this abstract pathname




toString

public java.lang.String toString()
If getDisplayName() return null it  returns the pathname string of this abstract pathname.
 This is just the string returned by the getPath() method.
 Otherwise it just returns the displayName.

Overrides:toString in class java.lang.Object
Returns:The string form of this abstract pathname




getSystemDisplayName

public abstract java.lang.String getSystemDisplayName()
Returns the system display name as returned by the filesystem viewer, or null


Returns:




getMimeType

public abstract java.lang.String getMimeType()
This method returns the string that represents the mime-type of this file, or null if it can't be determined.


Returns:the mime type of this file




getRootDriveFile

public JFMFile getRootDriveFile()
This method returns the root directory of the filesystem of witch the file belongs to.
 For example:
        If the active filesystem is the local filesystem and is an Windows filesystem, this
 method should return the drive letter of the drive that this file belongs to. On Unix filesystems it will always return
 '/'. On other filesystems .... it will return whatever the one that implements it wants to.


Returns:JFMFile the root drive (it cannot be null). It can be the same file that was passed as an argument.




getDisplayName

public java.lang.String getDisplayName()
Returns the display name


Returns:String the display name




setDisplayName

public void setDisplayName(java.lang.String displayName)
Sets the display name


Parameters:displayName - String the new display name




canRead

public abstract boolean canRead()
Tests whether the application can read the file denoted by the
 abstract pathname.


Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file specified by this
          abstract pathname exists and can be read by the
          application; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




canWrite

public abstract boolean canWrite()
Tests whether the application can modify to the file denoted by the
 abstract pathname.


Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file system actually
          contains a file denoted by this abstract pathname and
          the application is allowed to write to the file;
          false otherwise.
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file




exists

public abstract boolean exists()
Tests whether the file or directory denoted by the abstract pathname
 exists.


Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file or directory denoted
          by this abstract pathname exists; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file or directory




mkdir

public abstract JFMFile mkdir(java.lang.String name)
Creates the directory named by the abstract pathname denoted by the parameter.


Parameters:file - The file that denotes the abstract pathname
Returns:The new file object created or null otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not permit the named directory to be created




createFile

public abstract JFMFile createFile(java.lang.String name)
Creates the file named by the abstract pathname denoted by the parameter.


Parameters:file - The file that denotes the abstract pathname
Returns:The new file object created or null otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not permit the named directory to be created




delete

public abstract boolean delete()
Deletes the file or directory denoted by the abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.


Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file or directory is
          successfully deleted; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkDelete(java.lang.String) method denies
          delete access to the file




getIcon

public abstract javax.swing.Icon getIcon()
Returns the filesystem's icon associated with this file, or null if it can't be determined.


Returns:The filesystem's icon associated with this file, or null if it can't be determined.




isMarked

public boolean isMarked()
Returns true if the file has been marked in the view, false otherwise


Returns:true if the file has been marked in the view, false otherwise




setMarked

public void setMarked(boolean flag)
Sets the marked flag. This method is usually called by the UI View to signal that the file
 has been marked for selection. It helps to draw the file name with another color, and to
 perform operations on the file.


Parameters:flag - 




setMultiPart

public void setMultiPart(java.util.Hashtable<java.lang.String,java.lang.String> multiPart)
Sets the hashtbale multipart. This method is called when the file is too big
 and must be splitted. The hashtable cointains the information about
 every small file


Parameters:multiPart - 




getMultiPart

public java.util.Hashtable<java.lang.String,java.lang.String> getMultiPart()
gets the hashtbale multipart. This method is usually called when I want
 to check if this file is too big or not, checking the size of the hashtable







getFile

public java.io.File getFile()
gets the content of the JFMFile if it exists.













    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/JLinkLabel.html
##-----------------TITLE------------------------##
JLinkLabel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class JLinkLabel

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  org.itr_rescue.dataGuard.ui.JLinkLabel

All Implemented Interfaces: java.awt.event.MouseListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.SwingConstants
Direct Known Subclasses: JAmazonS3LinkLabel, JDB2LinkLabel, JgVaultLinkLabel

public class JLinkLabelextends javax.swing.JLabelimplements java.awt.event.MouseListener



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryJLinkLabel()


           JLinkLabel(java.lang.String text)


           
 




Method Summary
 java.lang.StringgetServiceDescription()


           
 javax.swing.IcongetServiceIcon()


           
 voidmouseClicked(java.awt.event.MouseEvent arg0)


          This method have to be definied from the subclass,
 specifying what to do after clicking.
 voidmouseEntered(java.awt.event.MouseEvent arg0)


           
 voidmouseExited(java.awt.event.MouseEvent arg0)


           
 voidmousePressed(java.awt.event.MouseEvent arg0)


           
 voidmouseReleased(java.awt.event.MouseEvent arg0)


           
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


JLinkLabel

public JLinkLabel()




JLinkLabel

public JLinkLabel(java.lang.String text)






Method Detail


getServiceDescription

public java.lang.String getServiceDescription()






getServiceIcon

public javax.swing.Icon getServiceIcon()






mouseClicked

public void mouseClicked(java.awt.event.MouseEvent arg0)
This method have to be definied from the subclass,
 specifying what to do after clicking.

Specified by:mouseClicked in interface java.awt.event.MouseListener





mouseEntered

public void mouseEntered(java.awt.event.MouseEvent arg0)
Specified by:mouseEntered in interface java.awt.event.MouseListener





mouseExited

public void mouseExited(java.awt.event.MouseEvent arg0)
Specified by:mouseExited in interface java.awt.event.MouseListener





mousePressed

public void mousePressed(java.awt.event.MouseEvent arg0)
Specified by:mousePressed in interface java.awt.event.MouseListener





mouseReleased

public void mouseReleased(java.awt.event.MouseEvent arg0)
Specified by:mouseReleased in interface java.awt.event.MouseListener











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/DataGuardServiceView.html
##-----------------TITLE------------------------##
DataGuardServiceView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class DataGuardServiceView

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.DataGuardServiceView

All Implemented Interfaces: IRemoteView

public class DataGuardServiceViewextends java.lang.Objectimplements IRemoteView










Field Summary
protected static java.util.HashMap<java.lang.String,java.lang.String>actions


           
 




Constructor SummaryDataGuardServiceView()


           
 




Method Summary
 voidassociateServer(AbstractStorageServer s)


           
 java.lang.StringgetAction(java.lang.String actionType)


           
 javax.swing.JComponentgetOutputPane()


           
 AbstractStorageServergetRemoteServer()


           
 java.lang.StringgetRemoteUniqueCode()


           
 voidpopulate()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


actions

protected static java.util.HashMap<java.lang.String,java.lang.String> actions







Constructor Detail


DataGuardServiceView

public DataGuardServiceView()






Method Detail


getOutputPane

public javax.swing.JComponent getOutputPane()
Specified by:getOutputPane in interface IRemoteView





populate

public void populate()
Specified by:populate in interface IRemoteView





associateServer

public void associateServer(AbstractStorageServer s)
Specified by:associateServer in interface IRemoteView





getRemoteServer

public AbstractStorageServer getRemoteServer()
Specified by:getRemoteServer in interface IRemoteView





getAction

public java.lang.String getAction(java.lang.String actionType)
Specified by:getAction in interface IRemoteView





getRemoteUniqueCode

public java.lang.String getRemoteUniqueCode()
Specified by:getRemoteUniqueCode in interface IRemoteView











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/KeywordsIndex.html
##-----------------TITLE------------------------##
KeywordsIndex
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Class KeywordsIndex

java.lang.Object
  java.util.Dictionary<K,V>
      java.util.Hashtable<java.lang.Integer,KeywordEntry>
          org.itr_rescue.dataGuard.indexing.KeywordsIndex

All Implemented Interfaces: java.io.Serializable, java.lang.Cloneable, java.util.Map<java.lang.Integer,KeywordEntry>

public class KeywordsIndexextends java.util.Hashtable<java.lang.Integer,KeywordEntry>



See Also:Serialized Form








Constructor SummaryKeywordsIndex()


           
 




Method Summary
 KeywordEntrygetKeywordEntry(java.lang.String keyword)


           
 
Methods inherited from class java.util.Hashtableclear, clone, contains, containsKey, containsValue, elements, entrySet, equals, get, hashCode, isEmpty, keys, keySet, put, putAll, rehash, remove, size, toString, values
 
Methods inherited from class java.lang.Objectfinalize, getClass, notify, notifyAll, wait, wait, wait
 






Constructor Detail


KeywordsIndex

public KeywordsIndex()






Method Detail


getKeywordEntry

public KeywordEntry getKeywordEntry(java.lang.String keyword)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/UserIDFileNotMatchException.html
##-----------------TITLE------------------------##
UserIDFileNotMatchException
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.XmlModel

Class UserIDFileNotMatchException

java.lang.Object
  java.lang.Throwable
      java.lang.Exception
          org.itr_rescue.dataGuard.remoteView.XmlModel.UserIDFileNotMatchException

All Implemented Interfaces: java.io.Serializable

public class UserIDFileNotMatchExceptionextends java.lang.Exception



Author:gamboni

 TODO To change the template for this generated type comment go to
 Window - Preferences - Java - Code Style - Code TemplatesSee Also:Serialized Form








Constructor SummaryUserIDFileNotMatchException()


           UserIDFileNotMatchException(java.lang.String msg)


           
 




Method Summary
 
Methods inherited from class java.lang.ThrowablefillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


UserIDFileNotMatchException

public UserIDFileNotMatchException()




UserIDFileNotMatchException

public UserIDFileNotMatchException(java.lang.String msg)










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangeFilesystemEvent.html
##-----------------TITLE------------------------##
ChangeFilesystemEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class ChangeFilesystemEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.ChangeFilesystemEvent


public class ChangeFilesystemEventextends BroadcastEvent










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryChangeFilesystemEvent()


           ChangeFilesystemEvent(java.lang.Object source)


           
 




Method Summary
 java.lang.StringgetFilesystem()


           
 intgetType()


           
 voidsetFilesystem(java.lang.String filesystem)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ChangeFilesystemEvent

public ChangeFilesystemEvent()




ChangeFilesystemEvent

public ChangeFilesystemEvent(java.lang.Object source)






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




getFilesystem

public java.lang.String getFilesystem()
Returns:the filesystem




setFilesystem

public void setFilesystem(java.lang.String filesystem)
Parameters:filesystem - the filesystem to set










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMClassLoader.html
##-----------------TITLE------------------------##
JFMClassLoader
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMClassLoader

java.lang.Object
  java.lang.ClassLoader
      org.itr_rescue.dataGuard.localFileSystem.JFMClassLoader


public class JFMClassLoaderextends java.lang.ClassLoader



This class loader is used to load the classes that are requested by plugins's additional libraries



Author:sergiu








Constructor SummaryJFMClassLoader()


           
 




Method Summary
static voidaddAditionalJar(java.lang.String jarFile)


           
 java.lang.Class<?>findClass(java.lang.String name)


           
static JFMClassLoadergetLoader()


           
 
Methods inherited from class java.lang.ClassLoaderclearAssertionStatus, defineClass, defineClass, defineClass, defineClass, definePackage, findLibrary, findLoadedClass, findResource, findResources, findSystemClass, getPackage, getPackages, getParent, getResource, getResourceAsStream, getResources, getSystemClassLoader, getSystemResource, getSystemResourceAsStream, getSystemResources, loadClass, loadClass, resolveClass, setClassAssertionStatus, setDefaultAssertionStatus, setPackageAssertionStatus, setSigners
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


JFMClassLoader

public JFMClassLoader()






Method Detail


getLoader

public static JFMClassLoader getLoader()





addAditionalJar

public static void addAditionalJar(java.lang.String jarFile)





findClass

public java.lang.Class<?> findClass(java.lang.String name)
                             throws java.lang.ClassNotFoundException
Overrides:findClass in class java.lang.ClassLoader
Throws:
java.lang.ClassNotFoundException










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/MultipleQueue.html
##-----------------TITLE------------------------##
MultipleQueue
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.FileQueue

Class MultipleQueue

java.lang.Object
  org.itr_rescue.dataGuard.FileQueue.MultipleQueue


public class MultipleQueueextends java.lang.Object











Constructor SummaryMultipleQueue()


           
 




Method Summary
static java.util.Collection<QueueManager>getAllQueue()


           
static QueueManagergetQueueManager(java.lang.String key)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


MultipleQueue

public MultipleQueue()






Method Detail


getQueueManager

public static QueueManager getQueueManager(java.lang.String key)





getAllQueue

public static java.util.Collection<QueueManager> getAllQueue()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/FileListSelectionListener.html
##-----------------TITLE------------------------##
FileListSelectionListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface FileListSelectionListener
All Superinterfaces: BroadcastListener

public interface FileListSelectionListenerextends BroadcastListener



Title: Java File Manager
 Description: 
 Copyright: Copyright (c) 2001
 Company: Home



Version:1.0Author:Giurgiu Sergiu








Method Summary
 voidfileListSelectionChanged(FileListSelectionEvent ev)


           
 






Method Detail


fileListSelectionChanged

void fileListSelectionChanged(FileListSelectionEvent ev)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ColorChangeListener.html
##-----------------TITLE------------------------##
ColorChangeListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface ColorChangeListener
All Superinterfaces: BroadcastListener

public interface ColorChangeListenerextends BroadcastListener



The listener that get's notified when the  color changes.



Author:sergiu








Method Summary
 voidcolorChanged(ColorChangeEvent event)


           
 






Method Detail


colorChanged

void colorChanged(ColorChangeEvent event)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/gVault/GmailStorageServer.html
##-----------------TITLE------------------------##
GmailStorageServer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.gVault

Class GmailStorageServer

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.AbstractStorageServer
      org.itr_rescue.dataGuard.StorageServer.gVault.GmailStorageServer

All Implemented Interfaces: IRemoteIndexing, IStorageServer

public class GmailStorageServerextends AbstractStorageServerimplements IRemoteIndexing











Constructor SummaryGmailStorageServer(java.lang.String username,
                   java.lang.String password)


           
 




Method Summary
 intconnect(java.lang.String username,
        java.lang.String password)


           
 intdelete(AbstractObjectData o)


           
 voiddisconnect()


           
 intfetch(AbstractObjectData o,
      java.lang.String path)


           
 java.lang.StringgetServiceDescription()


           
 java.lang.StringgetServiceType()


           
 voidloadService()


           
 java.io.File[]queryIndex(java.lang.String[] searchString,
           java.lang.String path)


           
 intstore(AbstractObjectData o,
      java.lang.String id)


           
 voidstoreIndex(IIndex index)


           
 
Methods inherited from class org.itr_rescue.dataGuard.StorageServer.AbstractStorageServergetPassword, getService_url, getServiceKey, getUsername, setPassword, setService_url, setUsername
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


GmailStorageServer

public GmailStorageServer(java.lang.String username,
                          java.lang.String password)






Method Detail


loadService

public void loadService()
Overrides:loadService in class AbstractStorageServer





connect

public int connect(java.lang.String username,
                   java.lang.String password)
Specified by:connect in interface IStorageServerSpecified by:connect in class AbstractStorageServer





disconnect

public void disconnect()
Specified by:disconnect in interface IStorageServerSpecified by:disconnect in class AbstractStorageServer





fetch

public int fetch(AbstractObjectData o,
                 java.lang.String path)
Specified by:fetch in interface IStorageServerSpecified by:fetch in class AbstractStorageServer





getServiceDescription

public java.lang.String getServiceDescription()
Specified by:getServiceDescription in class AbstractStorageServer





getServiceType

public java.lang.String getServiceType()
Specified by:getServiceType in class AbstractStorageServer





store

public int store(AbstractObjectData o,
                 java.lang.String id)
Specified by:store in interface IStorageServerSpecified by:store in class AbstractStorageServer





delete

public int delete(AbstractObjectData o)
Specified by:delete in interface IStorageServerSpecified by:delete in class AbstractStorageServer





storeIndex

public void storeIndex(IIndex index)
Specified by:storeIndex in interface IRemoteIndexing





queryIndex

public java.io.File[] queryIndex(java.lang.String[] searchString,
                                 java.lang.String path)
Specified by:queryIndex in interface IRemoteIndexing











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/IndexQueryResult.html
##-----------------TITLE------------------------##
IndexQueryResult
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Class IndexQueryResult

java.lang.Object
  org.itr_rescue.dataGuard.indexing.IndexQueryResult


public class IndexQueryResultextends java.lang.Object











Constructor SummaryIndexQueryResult(java.io.File[] encIndex,
                 java.lang.String[] keywordToSearch)


           
 




Method Summary
 java.lang.StringsearchFiles()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


IndexQueryResult

public IndexQueryResult(java.io.File[] encIndex,
                        java.lang.String[] keywordToSearch)






Method Detail


searchFiles

public java.lang.String searchFiles()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/DataGuardServiceRenderer.html
##-----------------TITLE------------------------##
DataGuardServiceRenderer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class DataGuardServiceRenderer

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  javax.swing.table.DefaultTableCellRenderer
                      org.itr_rescue.dataGuard.remoteView.DataGuardServiceRenderer

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.SwingConstants, javax.swing.table.TableCellRenderer

public class DataGuardServiceRendererextends javax.swing.table.DefaultTableCellRenderer



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.table.DefaultTableCellRendererjavax.swing.table.DefaultTableCellRenderer.UIResource
 

Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.table.DefaultTableCellRenderernoFocusBorder
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDataGuardServiceRenderer()


           
 




Method Summary
 java.awt.ComponentgetTableCellRendererComponent(javax.swing.JTable table,
                              java.lang.Object value,
                              boolean isSelected,
                              boolean hasFocus,
                              int row,
                              int column)


           
 
Methods inherited from class javax.swing.table.DefaultTableCellRendererfirePropertyChange, firePropertyChange, invalidate, isOpaque, repaint, repaint, repaint, revalidate, setBackground, setForeground, setValue, updateUI, validate
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


DataGuardServiceRenderer

public DataGuardServiceRenderer()






Method Detail


getTableCellRendererComponent

public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table,
                                                        java.lang.Object value,
                                                        boolean isSelected,
                                                        boolean hasFocus,
                                                        int row,
                                                        int column)
Specified by:getTableCellRendererComponent in interface javax.swing.table.TableCellRendererOverrides:getTableCellRendererComponent in class javax.swing.table.DefaultTableCellRenderer











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/KeywordPointer.html
##-----------------TITLE------------------------##
KeywordPointer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Class KeywordPointer

java.lang.Object
  org.itr_rescue.dataGuard.indexing.KeywordPointer


public class KeywordPointerextends java.lang.Object











Constructor SummaryKeywordPointer()


           KeywordPointer(int value)


           
 




Method Summary
 intgetValue()


           
static voidmain(java.lang.String[] args)


           
 voidsetValue(int value)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


KeywordPointer

public KeywordPointer()




KeywordPointer

public KeywordPointer(int value)






Method Detail


setValue

public void setValue(int value)





getValue

public int getValue()





main

public static void main(java.lang.String[] args)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/DataGuardPanel.html
##-----------------TITLE------------------------##
DataGuardPanel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class DataGuardPanel

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JPanel
                  org.itr_rescue.dataGuard.ui.DataGuardPanel

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible

public class DataGuardPanelextends javax.swing.JPanel



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JPaneljavax.swing.JPanel.AccessibleJPanel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDataGuardPanel()


           
 




Method Summary
 
Methods inherited from class javax.swing.JPanelgetAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


DataGuardPanel

public DataGuardPanel()










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/ObjectIdGenerator.html
##-----------------TITLE------------------------##
ObjectIdGenerator
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject

Class ObjectIdGenerator

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.ObjectIdGenerator


public class ObjectIdGeneratorextends java.lang.Object











Constructor SummaryObjectIdGenerator()


           
 




Method Summary
static java.lang.StringgenerateFixedHash(java.lang.String plainText)


           
static java.lang.StringgenerateID(java.lang.String userid,
           java.lang.String fileName)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ObjectIdGenerator

public ObjectIdGenerator()






Method Detail


generateID

public static java.lang.String generateID(java.lang.String userid,
                                          java.lang.String fileName)





generateFixedHash

public static java.lang.String generateFixedHash(java.lang.String plainText)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/AbstractFileAction.html
##-----------------TITLE------------------------##
AbstractFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class AbstractFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction

All Implemented Interfaces: java.lang.Comparable, IAction
Direct Known Subclasses: CopyFileAction, CutFileAction, DeleteFileAction, FileSearchAction, HelpAction, IndexAction, MakeDirFileAction, MoveFileAction, NewServiceAction, OpenFileAction, PasteFileAction, QuitAction, RenameFileAction, UpdateFileAction, UpdateFileStructure

public abstract class AbstractFileActionextends java.lang.Objectimplements IAction










Field Summary
protected  java.lang.StringactionParameter


           
protected  intactionPriority


           
protected  XmlFileSystemModelfileSystem


           
protected  java.lang.StringlocalPath


           
protected  JFMViewlocalView


           
protected  java.lang.StringremotePath


           
protected  RemoteFileSystemViewremoteView


           
protected  JFMFile[]selectedLocalFiles


           
protected  AbstractObjectData[]selectedRemoteFiles


           
protected  booleantransferType


          transferType = false: localFileSystem --> remoteFileSystem transferType =
 true: remoteFileSystem --> localFileSystem
 




Constructor SummaryAbstractFileAction()


           
 




Method Summary
protected  voidcheckTransferType()


           
abstract  intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 booleanexecuteLocal()


           
 booleanexecuteRemote()


           
protected  voidloadComponent()


          This method initialize the parameters for the execution.
 voidsetActionParameter(java.lang.String params)


           
 voidsetLocalView(JFMView local)


           
 voidsetRemoteView(IRemoteView remote)


           
 voidsetSelectedObjects(AbstractObjectData[] objs)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


remoteView

protected RemoteFileSystemView remoteView





localView

protected JFMView localView





fileSystem

protected XmlFileSystemModel fileSystem





remotePath

protected java.lang.String remotePath





localPath

protected java.lang.String localPath





selectedLocalFiles

protected JFMFile[] selectedLocalFiles





selectedRemoteFiles

protected AbstractObjectData[] selectedRemoteFiles





actionParameter

protected java.lang.String actionParameter





actionPriority

protected int actionPriority





transferType

protected boolean transferType
transferType = false: localFileSystem --> remoteFileSystem transferType =
 true: remoteFileSystem --> localFileSystem








Constructor Detail


AbstractFileAction

public AbstractFileAction()






Method Detail


setActionParameter

public void setActionParameter(java.lang.String params)
Specified by:setActionParameter in interface IAction





executeLocal

public boolean executeLocal()
Specified by:executeLocal in interface IAction





executeRemote

public boolean executeRemote()
Specified by:executeRemote in interface IAction





execute

public boolean execute()
Specified by:execute in interface IAction





setRemoteView

public void setRemoteView(IRemoteView remote)
Specified by:setRemoteView in interface IAction





setSelectedObjects

public void setSelectedObjects(AbstractObjectData[] objs)






setLocalView

public void setLocalView(JFMView local)
Specified by:setLocalView in interface IAction





loadComponent

protected void loadComponent()
This method initialize the parameters for the execution. It must be
 called before the execute method but after the set of remoteView and
 localView.







checkTransferType

protected void checkTransferType()






compareTo

public abstract int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.Comparable











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/CloseableTabbedPaneListener.html
##-----------------TITLE------------------------##
CloseableTabbedPaneListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Interface CloseableTabbedPaneListener
All Superinterfaces: java.util.EventListener

public interface CloseableTabbedPaneListenerextends java.util.EventListener



The listener that's notified when an tab should be closed in the
 CloseableTabbedPane.











Method Summary
 booleancloseTab(int tabIndexToClose)


          Informs all CloseableTabbedPaneListeners when a tab should be
 closed
 






Method Detail


closeTab

boolean closeTab(int tabIndexToClose)
Informs all CloseableTabbedPaneListeners when a tab should be
 closed


Parameters:tabIndexToClose - the index of the tab which should be closed
Returns:true if the tab can be closed, false otherwise










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ExtApps/Application.html
##-----------------TITLE------------------------##
Application
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ExtApps

Class Application

java.lang.Object
  org.itr_rescue.dataGuard.ExtApps.AbstractApplication
      org.itr_rescue.dataGuard.ExtApps.Application

All Implemented Interfaces: java.lang.Runnable, IExtApps

public class Applicationextends AbstractApplication










Field Summary
protected  java.lang.StringobjectId


           
protected  RemoteFileSystemViewremoteView


           
 
Fields inherited from class org.itr_rescue.dataGuard.ExtApps.AbstractApplicationapplicationPath
 




Constructor SummaryApplication(java.lang.String objectId,
            java.lang.String filePath,
            RemoteFileSystemView view)


           
 




Method Summary
 voidrun()


           
 
Methods inherited from class org.itr_rescue.dataGuard.ExtApps.AbstractApplicationgetApplicationPath, setApplicationPath
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


remoteView

protected RemoteFileSystemView remoteView





objectId

protected java.lang.String objectId







Constructor Detail


Application

public Application(java.lang.String objectId,
                   java.lang.String filePath,
                   RemoteFileSystemView view)






Method Detail


run

public void run()
Specified by:run in interface java.lang.RunnableOverrides:run in class AbstractApplication











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/KeywordEntry.html
##-----------------TITLE------------------------##
KeywordEntry
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Class KeywordEntry

java.lang.Object
  org.itr_rescue.dataGuard.indexing.KeywordEntry


public class KeywordEntryextends java.lang.Object










Field Summary
static intNUMBER_OF_FILES


           
 




Constructor SummaryKeywordEntry()


           KeywordEntry(java.lang.String keyword,
             int bitToSet)


           
 




Method Summary
 java.util.BitSetgetBitmask()


           
 java.lang.StringgetBitmaskString()


           
 java.lang.StringgetEnckey()


           
 java.lang.StringgetKeyword()


           
 intgetKeywordIndex()


           
static voidmain(java.lang.String[] args)


           
 voidsetBit(int value)


           
 voidsetBitmask(java.util.BitSet bitmask)


           
 voidsetEnckey(java.lang.String enckey)


           
 voidsetKeyword(java.lang.String keyword)


           
 voidsetKeywordIndex(int keywordIndex)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


NUMBER_OF_FILES

public static final int NUMBER_OF_FILES
See Also:Constant Field Values






Constructor Detail


KeywordEntry

public KeywordEntry()




KeywordEntry

public KeywordEntry(java.lang.String keyword,
                    int bitToSet)






Method Detail


setBit

public void setBit(int value)





getBitmaskString

public java.lang.String getBitmaskString()





getBitmask

public java.util.BitSet getBitmask()





setBitmask

public void setBitmask(java.util.BitSet bitmask)





getEnckey

public java.lang.String getEnckey()





setEnckey

public void setEnckey(java.lang.String enckey)





getKeyword

public java.lang.String getKeyword()





setKeyword

public void setKeyword(java.lang.String keyword)





getKeywordIndex

public int getKeywordIndex()





setKeywordIndex

public void setKeywordIndex(int keywordIndex)





main

public static void main(java.lang.String[] args)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/IAction.html
##-----------------TITLE------------------------##
IAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Interface IAction
All Superinterfaces: java.lang.Comparable
All Known Implementing Classes: AbstractFileAction, CopyFileAction, CutFileAction, DeleteFileAction, FileSearchAction, HelpAction, IndexAction, MakeDirFileAction, MoveFileAction, NewServiceAction, OpenFileAction, PasteFileAction, QuitAction, RenameFileAction, UpdateFileAction, UpdateFileStructure

public interface IActionextends java.lang.Comparable











Method Summary
 booleanexecute()


           
 booleanexecuteLocal()


           
 booleanexecuteRemote()


           
 voidsetActionParameter(java.lang.String params)


           
 voidsetLocalView(JFMView local)


           
 voidsetRemoteView(IRemoteView remote)


           
 
Methods inherited from interface java.lang.ComparablecompareTo
 






Method Detail


executeLocal

boolean executeLocal()






executeRemote

boolean executeRemote()






execute

boolean execute()






setLocalView

void setLocalView(JFMView local)






setRemoteView

void setRemoteView(IRemoteView remote)






setActionParameter

void setActionParameter(java.lang.String params)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/DataGuardMain.html
##-----------------TITLE------------------------##
DataGuardMain
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class DataGuardMain

java.lang.Object
  org.itr_rescue.dataGuard.ui.DataGuardMain


public class DataGuardMainextends java.lang.Object











Constructor SummaryDataGuardMain()


          Construct the application
 




Method Summary
static voidmain(java.lang.String[] args)


          Main method
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


DataGuardMain

public DataGuardMain()
Construct the application







Method Detail


main

public static void main(java.lang.String[] args)
Main method












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/DetailsTableModel.html
##-----------------TITLE------------------------##
DetailsTableModel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.detail

Class DetailsTableModel

java.lang.Object
  javax.swing.table.AbstractTableModel
      org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTableModel

All Implemented Interfaces: java.io.Serializable, javax.swing.table.TableModel

public class DetailsTableModelextends javax.swing.table.AbstractTableModel



Title: Java File Manager Description: Copyright: Copyright (c) 2001 Company:
 Home



Version:1.0Author:Giurgiu SergiuSee Also:Serialized Form







Field Summary
 
Fields inherited from class javax.swing.table.AbstractTableModellistenerList
 




Constructor SummaryDetailsTableModel(JFMFileSystem fs)


           
 




Method Summary
 voidaddRow(java.lang.Object[] newRow)


          Add a row to the data model.
 voidaddRow(java.util.Vector newRow)


          Add a row to the data model.
 voidbrowseDirectory(JFMFile el)


           
 voidclear()


          Removes all rows from the data model.
protected static java.util.VectorconvertToVector(java.lang.Object[] anArray)


          Returns a vector that contains the same objects as the array.
protected static java.util.VectorconvertToVector(java.lang.Object[][] anArray)


          Returns a vector of vectors that contains the same objects as the array.
 java.lang.ClassgetColumnClass(int c)


           
 intgetColumnCount()


          Returns the number of columns
 intgetColumnIndex(java.lang.Class colClass)


           
 java.lang.StringgetColumnName(int column)


          Returns the column name
 java.util.VectorgetCurrentFiles()


          Returns a List of all the files found in the directory.
 JFMFilegetFileAt(int index)


          Returns the JFMFile found at the specific index.
 JFMFileSystemgetFilesystem()


           
 intgetRowCount()


          Returns the number of rows
 java.lang.ObjectgetValueAt(int row,
           int column)


          Returns the element at the specified row and column
 JFMFilegetWorkingDirectory()


          This is the view that this model belongs to.
 booleanisCellEditable(int row,
               int column)


          Returns whether the cell is editable.
 voidremoveRow(int row)


           
 voidsetFilesystem(JFMFileSystem filesystem)


           
 voidsetValueAt(java.lang.Object value,
           int row,
           int column)


          Sets an object at the specified row and column
 
Methods inherited from class javax.swing.table.AbstractTableModeladdTableModelListener, findColumn, fireTableCellUpdated, fireTableChanged, fireTableDataChanged, fireTableRowsDeleted, fireTableRowsInserted, fireTableRowsUpdated, fireTableStructureChanged, getListeners, getTableModelListeners, removeTableModelListener
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


DetailsTableModel

public DetailsTableModel(JFMFileSystem fs)






Method Detail


getWorkingDirectory

public JFMFile getWorkingDirectory()
This is the view that this model belongs to. In order to save the current
 working directory in the users' preferences, we have to call view's
 method setCurrentDirectory






getColumnIndex

public int getColumnIndex(java.lang.Class colClass)





getCurrentFiles

public java.util.Vector getCurrentFiles()
Returns a List of all the files found in the directory.

Returns:Vector




getFileAt

public JFMFile getFileAt(int index)
Returns the JFMFile found at the specific index.

Returns:Vector




browseDirectory

public void browseDirectory(JFMFile el)





getColumnClass

public java.lang.Class getColumnClass(int c)
Specified by:getColumnClass in interface javax.swing.table.TableModelOverrides:getColumnClass in class javax.swing.table.AbstractTableModel





clear

public void clear()
Removes all rows from the data model.






addRow

public void addRow(java.util.Vector newRow)
Add a row to the data model.






addRow

public void addRow(java.lang.Object[] newRow)
Add a row to the data model.






getColumnName

public java.lang.String getColumnName(int column)
Returns the column name

Specified by:getColumnName in interface javax.swing.table.TableModelOverrides:getColumnName in class javax.swing.table.AbstractTableModel





getRowCount

public int getRowCount()
Returns the number of rows






getColumnCount

public int getColumnCount()
Returns the number of columns






getValueAt

public java.lang.Object getValueAt(int row,
                                   int column)
Returns the element at the specified row and column






isCellEditable

public boolean isCellEditable(int row,
                              int column)
Returns whether the cell is editable. It isn't.

Specified by:isCellEditable in interface javax.swing.table.TableModelOverrides:isCellEditable in class javax.swing.table.AbstractTableModel





removeRow

public void removeRow(int row)





setValueAt

public void setValueAt(java.lang.Object value,
                       int row,
                       int column)
Sets an object at the specified row and column

Specified by:setValueAt in interface javax.swing.table.TableModelOverrides:setValueAt in class javax.swing.table.AbstractTableModel





convertToVector

protected static java.util.Vector convertToVector(java.lang.Object[] anArray)
Returns a vector that contains the same objects as the array.

Parameters:anArray - the array to be converted
Returns:the new vector; if anArray is null,
         returns null




convertToVector

protected static java.util.Vector convertToVector(java.lang.Object[][] anArray)
Returns a vector of vectors that contains the same objects as the array.

Parameters:anArray - the double array to be converted
Returns:the new vector of vectors; if anArray is
         null, returns null




getFilesystem

public JFMFileSystem getFilesystem()





setFilesystem

public void setFilesystem(JFMFileSystem filesystem)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/TabManager.html
##-----------------TITLE------------------------##
TabManager
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class TabManager

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.TabManager

All Implemented Interfaces: java.util.EventListener, javax.swing.event.ChangeListener

public class TabManagerextends java.lang.Objectimplements javax.swing.event.ChangeListener











Constructor SummaryTabManager()


           
 




Method Summary
 voidaddTab(IRemoteView rl,
       java.lang.String title)


           
 IRemoteViewgetSelectedTab()


           
 CloseableTabbedPanegetTabbedPane()


           
 java.util.Vector<RemoteFileSystemView>getTabs()


           
 voidnotifyOfNewFile()


           
 voidstateChanged(javax.swing.event.ChangeEvent e)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


TabManager

public TabManager()






Method Detail


addTab

public void addTab(IRemoteView rl,
                   java.lang.String title)






getTabbedPane

public CloseableTabbedPane getTabbedPane()






notifyOfNewFile

public void notifyOfNewFile()






getSelectedTab

public IRemoteView getSelectedTab()






stateChanged

public void stateChanged(javax.swing.event.ChangeEvent e)
Specified by:stateChanged in interface javax.swing.event.ChangeListener





getTabs

public java.util.Vector<RemoteFileSystemView> getTabs()












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AmazonS3/AmazonIndexBuilder.html
##-----------------TITLE------------------------##
AmazonIndexBuilder
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.AmazonS3

Class AmazonIndexBuilder

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonIndexBuilder


public class AmazonIndexBuilderextends java.lang.Object











Constructor SummaryAmazonIndexBuilder()


           
 




Method Summary
static java.lang.StringadaptName(java.lang.String name)


           
static java.io.File[]buildIndex(IIndex index)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


AmazonIndexBuilder

public AmazonIndexBuilder()






Method Detail


buildIndex

public static java.io.File[] buildIndex(IIndex index)





adaptName

public static java.lang.String adaptName(java.lang.String name)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/IRemoteView.html
##-----------------TITLE------------------------##
IRemoteView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Interface IRemoteView
All Known Subinterfaces: IRemoteFileSystemView
All Known Implementing Classes: DataGuardServiceView, RemoteFileSearchView, RemoteFileSystemView

public interface IRemoteView











Method Summary
 voidassociateServer(AbstractStorageServer s)


           
 java.lang.StringgetAction(java.lang.String actionType)


           
 javax.swing.JComponentgetOutputPane()


           
 AbstractStorageServergetRemoteServer()


           
 java.lang.StringgetRemoteUniqueCode()


           
 voidpopulate()


           
 






Method Detail


populate

void populate()





getOutputPane

javax.swing.JComponent getOutputPane()





associateServer

void associateServer(AbstractStorageServer s)





getRemoteServer

AbstractStorageServer getRemoteServer()





getAction

java.lang.String getAction(java.lang.String actionType)





getRemoteUniqueCode

java.lang.String getRemoteUniqueCode()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMViewRepresentation.html
##-----------------TITLE------------------------##
JFMViewRepresentation
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMViewRepresentation

java.lang.Object
  org.itr_rescue.dataGuard.localFileSystem.JFMViewRepresentation


public class JFMViewRepresentationextends java.lang.Object



This class holds the user friendly and  application friendly information about an view



Author:sergiu








Constructor SummaryJFMViewRepresentation()


          Empty constructorJFMViewRepresentation(java.lang.String name,
                      java.lang.String className)


          Constructor that sets the name and the class name
 




Method Summary
 booleanequals(java.lang.Object obj)


          Returns true if the passed object is equals with this one.
 java.lang.StringgetClassName()


           
 java.lang.StringgetName()


           
 voidsetClassName(java.lang.String className)


           
 voidsetName(java.lang.String name)


           
 java.lang.StringtoString()


          String representation of the object.
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


JFMViewRepresentation

public JFMViewRepresentation()
Empty constructor





JFMViewRepresentation

public JFMViewRepresentation(java.lang.String name,
                             java.lang.String className)
Constructor that sets the name and the class name







Method Detail


getClassName

public java.lang.String getClassName()
Returns:Returns the className.




setClassName

public void setClassName(java.lang.String className)
Parameters:className - The className to set.




getName

public java.lang.String getName()
Returns:Returns the name.




setName

public void setName(java.lang.String name)
Parameters:name - The name to set.




toString

public java.lang.String toString()
String representation of the object.

Overrides:toString in class java.lang.Object





equals

public boolean equals(java.lang.Object obj)
Returns true if the passed object is equals with this one. Two objects are considered to be equal
 If both the name and the class name's are not null and are equal.

Overrides:equals in class java.lang.Object











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/UIOptions.html
##-----------------TITLE------------------------##
UIOptions
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class UIOptions

java.lang.Object
  org.itr_rescue.dataGuard.ui.UIOptions


public class UIOptionsextends java.lang.Object










Field Summary
static java.lang.StringJFM_LEFTVIEWPANEL_FILESYSTEM_PREF


          The key that is used to save the user's preference on what filesystem the
 left panel should have
static java.lang.StringJFM_LEFTVIEWPANEL_PREF


          The key that is used to save the user's preference on what the left panel
 should be
static java.lang.StringJFM_LEFTVIEWPANELDIR_PREF


          The key that is used to save the user's preference on what the left panel
 last browsed directory is
static java.lang.StringJFM_RIGHTVIEWPANEL_FILESYSTEM_PREF


          The key that is used to save the user's preference on what filesystem the
 right panel should have
static java.lang.StringJFM_RIGHTVIEWPANEL_PREF


          The key that is used to save the user's preference on what the right
 panel should be
static java.lang.StringJFM_RIGHTVIEWPANELDIR_PREF


          The key that is used to save the user's preference on what the right
 panel last browsed directory is
 




Constructor SummaryUIOptions()


           
 




Method Summary
static java.awt.ColorgetBackgroundColor()


           
static java.awt.ColorgetDefaultBackgroundColor()


           
static java.awt.ColorgetDefaultForegroundColor()


           
static java.awt.ColorgetDefaultMarkedColor()


           
static java.awt.FontgetDefaultPanelsFont()


           
static booleangetDirectoriesSelectedOnAsterisk()


           
static booleangetDirectoriesSelectedOnPlus()


           
static java.awt.ColorgetForegroundColor()


           
static java.awt.ColorgetMarkedColor()


           
static java.awt.FontgetPanelsFont()


           
static java.util.prefs.PreferencesgetPreferences()


           
static voidsavePreferences()


           
static voidsetBackgroundColor(java.awt.Color c)


           
static voidsetDirectoriesSelectedOnAsterisk(boolean flag)


           
static voidsetDirectoriesSelectedOnPlus(boolean flag)


           
static voidsetForegroundColor(java.awt.Color c)


           
static voidsetMarkedColor(java.awt.Color c)


           
static voidsetPanelsFont(java.awt.Font f)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


JFM_LEFTVIEWPANEL_PREF

public static final java.lang.String JFM_LEFTVIEWPANEL_PREF
The key that is used to save the user's preference on what the left panel
 should be

See Also:Constant Field Values




JFM_RIGHTVIEWPANEL_PREF

public static final java.lang.String JFM_RIGHTVIEWPANEL_PREF
The key that is used to save the user's preference on what the right
 panel should be

See Also:Constant Field Values




JFM_RIGHTVIEWPANELDIR_PREF

public static final java.lang.String JFM_RIGHTVIEWPANELDIR_PREF
The key that is used to save the user's preference on what the right
 panel last browsed directory is

See Also:Constant Field Values




JFM_LEFTVIEWPANELDIR_PREF

public static final java.lang.String JFM_LEFTVIEWPANELDIR_PREF
The key that is used to save the user's preference on what the left panel
 last browsed directory is

See Also:Constant Field Values




JFM_LEFTVIEWPANEL_FILESYSTEM_PREF

public static final java.lang.String JFM_LEFTVIEWPANEL_FILESYSTEM_PREF
The key that is used to save the user's preference on what filesystem the
 left panel should have

See Also:Constant Field Values




JFM_RIGHTVIEWPANEL_FILESYSTEM_PREF

public static final java.lang.String JFM_RIGHTVIEWPANEL_FILESYSTEM_PREF
The key that is used to save the user's preference on what filesystem the
 right panel should have

See Also:Constant Field Values






Constructor Detail


UIOptions

public UIOptions()






Method Detail


getPreferences

public static java.util.prefs.Preferences getPreferences()





savePreferences

public static void savePreferences()





getDefaultPanelsFont

public static java.awt.Font getDefaultPanelsFont()





getPanelsFont

public static java.awt.Font getPanelsFont()





setPanelsFont

public static void setPanelsFont(java.awt.Font f)





getDefaultBackgroundColor

public static java.awt.Color getDefaultBackgroundColor()





getBackgroundColor

public static java.awt.Color getBackgroundColor()





setForegroundColor

public static void setForegroundColor(java.awt.Color c)





getDefaultForegroundColor

public static java.awt.Color getDefaultForegroundColor()





getForegroundColor

public static java.awt.Color getForegroundColor()





setBackgroundColor

public static void setBackgroundColor(java.awt.Color c)





setMarkedColor

public static void setMarkedColor(java.awt.Color c)





getDefaultMarkedColor

public static java.awt.Color getDefaultMarkedColor()





getMarkedColor

public static java.awt.Color getMarkedColor()





setDirectoriesSelectedOnAsterisk

public static void setDirectoriesSelectedOnAsterisk(boolean flag)





getDirectoriesSelectedOnAsterisk

public static boolean getDirectoriesSelectedOnAsterisk()





setDirectoriesSelectedOnPlus

public static void setDirectoriesSelectedOnPlus(boolean flag)





getDirectoriesSelectedOnPlus

public static boolean getDirectoriesSelectedOnPlus()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/Layer.html
##-----------------TITLE------------------------##
Layer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer

Class Layer

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.Layer


public class Layerextends java.lang.Object



Author:Roberto








Constructor SummaryLayer()


           Layer(java.lang.String layerCode,
      java.lang.String layerClass)


           
 




Method Summary
 java.lang.StringgetLayerClass()


           
 java.lang.StringgetLayerCode()


           
 voidsetLayerClass(java.lang.String layerClass)


           
 voidsetLayerCode(java.lang.String layerCode)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Layer

public Layer()




Layer

public Layer(java.lang.String layerCode,
             java.lang.String layerClass)






Method Detail


getLayerClass

public java.lang.String getLayerClass()





setLayerClass

public void setLayerClass(java.lang.String layerClass)





getLayerCode

public java.lang.String getLayerCode()





setLayerCode

public void setLayerCode(java.lang.String layerCode)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AbstractStorageServer.html
##-----------------TITLE------------------------##
AbstractStorageServer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer

Class AbstractStorageServer

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.AbstractStorageServer

All Implemented Interfaces: IStorageServer
Direct Known Subclasses: AmazonStorageServer, DB2StorageServer, GmailStorageServer

public abstract class AbstractStorageServerextends java.lang.Objectimplements IStorageServer











Constructor SummaryAbstractStorageServer()


           
 




Method Summary
abstract  intconnect(java.lang.String username,
        java.lang.String password)


           
abstract  intdelete(AbstractObjectData o)


           
abstract  voiddisconnect()


           
abstract  intfetch(AbstractObjectData o,
      java.lang.String path)


           
 java.lang.StringgetPassword()


           
 java.lang.StringgetService_url()


           
abstract  java.lang.StringgetServiceDescription()


           
 java.lang.StringgetServiceKey()


           
abstract  java.lang.StringgetServiceType()


           
 java.lang.StringgetUsername()


           
 voidloadService()


           
 voidsetPassword(java.lang.String password)


           
 voidsetService_url(java.lang.String service_url)


           
 voidsetUsername(java.lang.String username)


           
abstract  intstore(AbstractObjectData o,
      java.lang.String id)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


AbstractStorageServer

public AbstractStorageServer()






Method Detail


connect

public abstract int connect(java.lang.String username,
                            java.lang.String password)
Specified by:connect in interface IStorageServer





disconnect

public abstract void disconnect()
Specified by:disconnect in interface IStorageServer





fetch

public abstract int fetch(AbstractObjectData o,
                          java.lang.String path)
Specified by:fetch in interface IStorageServer





store

public abstract int store(AbstractObjectData o,
                          java.lang.String id)
Specified by:store in interface IStorageServer





delete

public abstract int delete(AbstractObjectData o)
Specified by:delete in interface IStorageServer





getServiceDescription

public abstract java.lang.String getServiceDescription()






getServiceType

public abstract java.lang.String getServiceType()






loadService

public void loadService()






getServiceKey

public java.lang.String getServiceKey()
Specified by:getServiceKey in interface IStorageServer





getPassword

public java.lang.String getPassword()






setPassword

public void setPassword(java.lang.String password)






getService_url

public java.lang.String getService_url()






setService_url

public void setService_url(java.lang.String service_url)






getUsername

public java.lang.String getUsername()






setUsername

public void setUsername(java.lang.String username)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/RenameFileAction.html
##-----------------TITLE------------------------##
RenameFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class RenameFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.RenameFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class RenameFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryRenameFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, execute, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


RenameFileAction

public RenameFileAction()






Method Detail


compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/UpdateFileStructure.html
##-----------------TITLE------------------------##
UpdateFileStructure
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class UpdateFileStructure

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.UpdateFileStructure

All Implemented Interfaces: java.lang.Comparable, IAction

public class UpdateFileStructureextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryUpdateFileStructure()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


UpdateFileStructure

public UpdateFileStructure()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/SplashWindow.html
##-----------------TITLE------------------------##
SplashWindow
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class SplashWindow

java.lang.Object
  java.awt.Component
      java.awt.Container
          java.awt.Window
              org.itr_rescue.dataGuard.ui.SplashWindow

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible

public class SplashWindowextends java.awt.Window



A Splash window.
  
 Usage: MyApplication is your application class. Create a Splasher class which
 opens the splash window, invokes the main method of your Application class,
 and disposes the splash window afterwards.
 Please note that we want to keep the Splasher class and the SplashWindow class
 as small as possible. The less code and the less classes must be loaded into
 the JVM to open the splash screen, the faster it will appear.
 
 class Splasher {
    public static void main(String[] args) {
         SplashWindow.splash(Startup.class.getResource("splash.gif"));
         MyApplication.main(args);
         SplashWindow.disposeSplash();
    }
 }
 



Version:2.2.1 2006-05-27 Abort when splash image can not be loaded.Author:Werner RandelshoferSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class java.awt.Windowjava.awt.Window.AccessibleAWTWindow
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
static java.lang.StringSPLASH_IMAGE_PATH


           
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Method Summary
static voiddisposeSplash()


          Closes the splash window.
static voidinvokeMain(java.lang.String className,
           java.lang.String[] args)


          Invokes the main method of the provided class name.
static voidinvokeMethod(java.lang.String className)


           
static java.lang.ObjectinvokeMethod(java.lang.String className,
             java.lang.String methodName)


           
 voidpaint(java.awt.Graphics g)


          Paints the image on the window.
static voidsplash()


          Open's a splash window using the specified image.
static voidsplash(java.awt.Image image)


          Open's a splash window using the specified image.
 voidupdate(java.awt.Graphics g)


          Updates the display area of the window.
 
Methods inherited from class java.awt.WindowaddNotify, addPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getAccessibleContext, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getGraphicsConfiguration, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOwnedWindows, getOwner, getOwnerlessWindows, getToolkit, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isShowing, pack, postEvent, processEvent, processWindowEvent, processWindowFocusEvent, processWindowStateEvent, removeNotify, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImage, setIconImages, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setVisible, show, toBack, toFront
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, paramString, preferredSize, print, printComponents, processContainerEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getGraphics, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, setBackground, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Field Detail


SPLASH_IMAGE_PATH

public static final java.lang.String SPLASH_IMAGE_PATH
See Also:Constant Field Values






Method Detail


update

public void update(java.awt.Graphics g)
Updates the display area of the window.

Overrides:update in class java.awt.Container





paint

public void paint(java.awt.Graphics g)
Paints the image on the window.

Overrides:paint in class java.awt.Container





splash

public static void splash(java.awt.Image image)
Open's a splash window using the specified image.

Parameters:image - The splash image.




splash

public static void splash()
Open's a splash window using the specified image.

Parameters:imageURL - The url of the splash image.




disposeSplash

public static void disposeSplash()
Closes the splash window.






invokeMain

public static void invokeMain(java.lang.String className,
                              java.lang.String[] args)
Invokes the main method of the provided class name.

Parameters:args - the command line arguments




invokeMethod

public static void invokeMethod(java.lang.String className)





invokeMethod

public static java.lang.Object invokeMethod(java.lang.String className,
                                            java.lang.String methodName)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/FileMetadataQueue.html
##-----------------TITLE------------------------##
FileMetadataQueue
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.FileQueue

Class FileMetadataQueue

java.lang.Object
  org.itr_rescue.dataGuard.FileQueue.FileMetadataQueue

All Implemented Interfaces: java.lang.Runnable

public class FileMetadataQueueextends java.lang.Objectimplements java.lang.Runnable











Constructor SummaryFileMetadataQueue(QueueManager parent)


           
 




Method Summary
 voidaddAction(IAction action)


           
 voidrun()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileMetadataQueue

public FileMetadataQueue(QueueManager parent)






Method Detail


addAction

public void addAction(IAction action)






run

public void run()
Specified by:run in interface java.lang.Runnable











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/list/ComboBoxCellRenderer.html
##-----------------TITLE------------------------##
ComboBoxCellRenderer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.list

Class ComboBoxCellRenderer

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  javax.swing.DefaultListCellRenderer
                      org.itr_rescue.dataGuard.localFileSystem.view.list.ComboBoxCellRenderer

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.ListCellRenderer, javax.swing.SwingConstants

public class ComboBoxCellRendererextends javax.swing.DefaultListCellRenderer



This renderer displays an icon along with the text, if the value is of type JFMFile



Author:sergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.DefaultListCellRendererjavax.swing.DefaultListCellRenderer.UIResource
 

Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.DefaultListCellRenderernoFocusBorder
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryComboBoxCellRenderer()


           
 




Method Summary
 java.awt.ComponentgetListCellRendererComponent(javax.swing.JList list,
                             java.lang.Object value,
                             int index,
                             boolean isSelected,
                             boolean cellHasFocus)


           
 
Methods inherited from class javax.swing.DefaultListCellRendererfirePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, invalidate, isOpaque, repaint, repaint, repaint, revalidate, validate
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


ComboBoxCellRenderer

public ComboBoxCellRenderer()






Method Detail


getListCellRendererComponent

public java.awt.Component getListCellRendererComponent(javax.swing.JList list,
                                                       java.lang.Object value,
                                                       int index,
                                                       boolean isSelected,
                                                       boolean cellHasFocus)
Specified by:getListCellRendererComponent in interface javax.swing.ListCellRendererOverrides:getListCellRendererComponent in class javax.swing.DefaultListCellRenderer











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/conversion/FileNameUtils.html
##-----------------TITLE------------------------##
FileNameUtils
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject.conversion

Class FileNameUtils

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.conversion.FileNameUtils


public class FileNameUtilsextends java.lang.Object











Constructor SummaryFileNameUtils()


           
 




Method Summary
static java.lang.StringgetFileName(java.lang.String filename)


           
static java.lang.StringgetWindowsExtension(java.lang.String filename)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileNameUtils

public FileNameUtils()






Method Detail


getWindowsExtension

public static java.lang.String getWindowsExtension(java.lang.String filename)





getFileName

public static java.lang.String getFileName(java.lang.String filename)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/parser/LikeQueryUtils.html
##-----------------TITLE------------------------##
LikeQueryUtils
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing.parser

Class LikeQueryUtils

java.lang.Object
  org.itr_rescue.dataGuard.indexing.parser.LikeQueryUtils


public class LikeQueryUtilsextends java.lang.Object











Constructor SummaryLikeQueryUtils()


           
 




Method Summary
static booleancheckPattern(java.lang.String keyword,
             java.lang.String[] regex)


           
static java.lang.String[]computeQGrams(java.lang.String source,
              int q)


          Compute the q_grams of length q using the string source
static java.util.List<java.lang.String>extractFileIndex(java.lang.String queryResult)


           
static java.lang.String[]getAllSubqgrams(java.lang.String keyword)


           
static java.lang.String[]getKeywordOriginal(java.lang.String keyword)


           
static java.util.List<java.lang.String>getQGrams(java.lang.String keyword)


           
static voidmain(java.lang.String[] args)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


LikeQueryUtils

public LikeQueryUtils()






Method Detail


getQGrams

public static java.util.List<java.lang.String> getQGrams(java.lang.String keyword)





getKeywordOriginal

public static java.lang.String[] getKeywordOriginal(java.lang.String keyword)





getAllSubqgrams

public static java.lang.String[] getAllSubqgrams(java.lang.String keyword)





computeQGrams

public static java.lang.String[] computeQGrams(java.lang.String source,
                                               int q)
Compute the q_grams of length q using the string source

Parameters:source - - the stringq - - the length of every substring
Returns:an array with the q_grams




extractFileIndex

public static java.util.List<java.lang.String> extractFileIndex(java.lang.String queryResult)





checkPattern

public static boolean checkPattern(java.lang.String keyword,
                                   java.lang.String[] regex)





main

public static void main(java.lang.String[] args)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AmazonS3/AmazonConfiguration.html
##-----------------TITLE------------------------##
AmazonConfiguration
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.AmazonS3

Class AmazonConfiguration

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonConfiguration


public class AmazonConfigurationextends java.lang.Object











Constructor SummaryAmazonConfiguration()


           
 




Method Summary
static java.lang.StringgetS3Password()


           
static java.lang.StringgetS3Url()


           
static java.lang.StringgetS3Username()


           
static voidsetS3Password(java.lang.String password)


           
static voidsetS3Url(java.lang.String url)


           
static voidsetS3Username(java.lang.String username)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


AmazonConfiguration

public AmazonConfiguration()






Method Detail


getS3Password

public static java.lang.String getS3Password()





setS3Password

public static void setS3Password(java.lang.String password)





getS3Username

public static java.lang.String getS3Username()





setS3Username

public static void setS3Username(java.lang.String username)





getS3Url

public static java.lang.String getS3Url()





setS3Url

public static void setS3Url(java.lang.String url)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/FileContentQueue.html
##-----------------TITLE------------------------##
FileContentQueue
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.FileQueue

Class FileContentQueue

java.lang.Object
  org.itr_rescue.dataGuard.FileQueue.FileContentQueue

All Implemented Interfaces: java.lang.Runnable

public class FileContentQueueextends java.lang.Objectimplements java.lang.Runnable











Constructor SummaryFileContentQueue(QueueManager parent)


           
 




Method Summary
 voidaddAction(IAction action)


           
 voidrun()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileContentQueue

public FileContentQueue(QueueManager parent)






Method Detail


addAction

public void addAction(IAction action)






run

public void run()
Specified by:run in interface java.lang.Runnable











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/CheckJRE.html
##-----------------TITLE------------------------##
CheckJRE
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.Utilities

Class CheckJRE

java.lang.Object
  org.itr_rescue.dataGuard.Utilities.CheckJRE


public class CheckJREextends java.lang.Object











Constructor SummaryCheckJRE()


           
 




Method Summary
static booleanisJRECompatible()


           
static voidmain(java.lang.String[] args)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


CheckJRE

public CheckJRE()






Method Detail


isJRECompatible

public static boolean isJRECompatible()





main

public static void main(java.lang.String[] args)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/JgVaultLinkLabel.html
##-----------------TITLE------------------------##
JgVaultLinkLabel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class JgVaultLinkLabel

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  org.itr_rescue.dataGuard.ui.JLinkLabel
                      org.itr_rescue.dataGuard.remoteView.JgVaultLinkLabel

All Implemented Interfaces: java.awt.event.MouseListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.SwingConstants

public class JgVaultLinkLabelextends JLinkLabel



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryJgVaultLinkLabel()


           
 




Method Summary
 java.lang.StringgetServiceDescription()


           
 voidmouseClicked(java.awt.event.MouseEvent arg0)


          This method have to be definied from the subclass,
 specifying what to do after clicking.
 
Methods inherited from class org.itr_rescue.dataGuard.ui.JLinkLabelgetServiceIcon, mouseEntered, mouseExited, mousePressed, mouseReleased
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


JgVaultLinkLabel

public JgVaultLinkLabel()






Method Detail


getServiceDescription

public java.lang.String getServiceDescription()
Overrides:getServiceDescription in class JLinkLabel





mouseClicked

public void mouseClicked(java.awt.event.MouseEvent arg0)
Description copied from class: JLinkLabelThis method have to be definied from the subclass,
 specifying what to do after clicking.

Specified by:mouseClicked in interface java.awt.event.MouseListenerOverrides:mouseClicked in class JLinkLabel











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/UIComponent.html
##-----------------TITLE------------------------##
UIComponent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class UIComponent

java.lang.Object
  org.itr_rescue.dataGuard.ui.UIComponent


public class UIComponentextends java.lang.Object










Field Summary
static intLEFT


           
static intRIGHT


           
 




Constructor SummaryUIComponent()


           
 




Method Summary
static voiddisplayMessage(java.lang.String message)


           
static ActionLoadergetAction()


           
static intgetActivePanel()


           
static javax.swing.JCheckBoxgetContentSearch()


           
static DataGuardFramegetDataGuardFrame()


           
static JFMViewgetLeftPanel()


           
static javax.swing.JCheckBoxgetMetadataSearch()


           
static IRemoteViewgetRightPanel()


           
static javax.swing.JTextFieldgetSearchKeyword()


           
static IRemoteViewgetSelectedRemoteView()


           
static TabManagergetTabManager()


           
static voidsetActivePanel(java.lang.Object panel)


           
static voidsetLeftPanel(JFMView view)


           
static voidsetRightPanel(IRemoteView view)


           
static voidsetSearchKeyword(javax.swing.JTextField SearchKeyword)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


LEFT

public static final int LEFT
See Also:Constant Field Values




RIGHT

public static final int RIGHT
See Also:Constant Field Values






Constructor Detail


UIComponent

public UIComponent()






Method Detail


getTabManager

public static TabManager getTabManager()





getDataGuardFrame

public static DataGuardFrame getDataGuardFrame()





getSelectedRemoteView

public static IRemoteView getSelectedRemoteView()





getLeftPanel

public static JFMView getLeftPanel()





setLeftPanel

public static void setLeftPanel(JFMView view)





setActivePanel

public static void setActivePanel(java.lang.Object panel)





getActivePanel

public static int getActivePanel()





setRightPanel

public static void setRightPanel(IRemoteView view)





getRightPanel

public static IRemoteView getRightPanel()





getSearchKeyword

public static javax.swing.JTextField getSearchKeyword()





setSearchKeyword

public static void setSearchKeyword(javax.swing.JTextField SearchKeyword)





getContentSearch

public static javax.swing.JCheckBox getContentSearch()





getMetadataSearch

public static javax.swing.JCheckBox getMetadataSearch()





displayMessage

public static void displayMessage(java.lang.String message)





getAction

public static ActionLoader getAction()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/CloseableTabbedPane.html
##-----------------TITLE------------------------##
CloseableTabbedPane
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class CloseableTabbedPane

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JTabbedPane
                  org.itr_rescue.dataGuard.remoteView.CloseableTabbedPane

All Implemented Interfaces: java.awt.event.MouseListener, java.awt.event.MouseMotionListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.SwingConstants

public class CloseableTabbedPaneextends javax.swing.JTabbedPaneimplements java.awt.event.MouseListener, java.awt.event.MouseMotionListener



A JTabbedPane which has a close ('X') icon on each tab.

 To add a tab, use the method addTab(String, Component)

 To have an extra icon on each tab (e.g. like in JBuilder, showing the file
 type) use the method addTab(String, Component, Icon). Only clicking the 'X'
 closes the tab.



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JTabbedPanejavax.swing.JTabbedPane.AccessibleJTabbedPane, javax.swing.JTabbedPane.ModelListener
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JTabbedPanechangeEvent, changeListener, model, SCROLL_TAB_LAYOUT, tabPlacement, WRAP_TAB_LAYOUT
 
Fields inherited from class javax.swing.JComponentaccessibleContext, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryCloseableTabbedPane()


          Creates a new instance of CloseableTabbedPaneCloseableTabbedPane(int horizontalTextPosition)


          Creates a new instance of CloseableTabbedPane
 




Method Summary
 voidaddCloseableTabbedPaneListener(CloseableTabbedPaneListener l)


          Adds an CloseableTabbedPaneListener to the tabbedpane.
 voidaddTab(java.lang.String title,
       java.awt.Component component)


          Adds a Component represented by a title and no icon.
 voidaddTab(java.lang.String title,
       java.awt.Component component,
       javax.swing.Icon extraIcon)


          Adds a Component represented by a title and an icon.
protected  booleanfireCloseTab(int tabIndexToClose)


          Notifies all listeners that have registered interest for notification on
 this event type.
 CloseableTabbedPaneListener[]getCloseableTabbedPaneListener()


          Returns an array of all the SearchListeners added to this
 SearchPane with addSearchListener().
 voidmouseClicked(java.awt.event.MouseEvent e)


          Invoked when the mouse button has been clicked (pressed and released) on
 a component.
 voidmouseDragged(java.awt.event.MouseEvent e)


          Invoked when a mouse button is pressed on a component and then dragged.
 voidmouseEntered(java.awt.event.MouseEvent e)


          Invoked when the mouse enters a component.
 voidmouseExited(java.awt.event.MouseEvent e)


          Invoked when the mouse exits a component.
 voidmouseMoved(java.awt.event.MouseEvent e)


          Invoked when the mouse cursor has been moved onto a component but no
 buttons have been pushed.
 voidmousePressed(java.awt.event.MouseEvent e)


          Invoked when a mouse button has been pressed on a component.
 voidmouseReleased(java.awt.event.MouseEvent e)


          Invoked when a mouse button has been released on a component.
 voidremoveCloseableTabbedPaneListener(CloseableTabbedPaneListener l)


          Removes an CloseableTabbedPaneListener from the tabbedpane.
 voidsetCloseIcons(javax.swing.Icon normal,
              javax.swing.Icon hoover,
              javax.swing.Icon pressed)


          Allows setting own closeicons.
 
Methods inherited from class javax.swing.JTabbedPaneadd, add, add, add, add, addChangeListener, addTab, addTab, createChangeListener, fireStateChanged, getAccessibleContext, getBackgroundAt, getBoundsAt, getChangeListeners, getComponentAt, getDisabledIconAt, getDisplayedMnemonicIndexAt, getForegroundAt, getIconAt, getMnemonicAt, getModel, getSelectedComponent, getSelectedIndex, getTabComponentAt, getTabCount, getTabLayoutPolicy, getTabPlacement, getTabRunCount, getTitleAt, getToolTipText, getToolTipTextAt, getUI, getUIClassID, indexAtLocation, indexOfComponent, indexOfTab, indexOfTab, indexOfTabComponent, insertTab, isEnabledAt, paramString, remove, remove, removeAll, removeChangeListener, removeTabAt, setBackgroundAt, setComponentAt, setDisabledIconAt, setDisplayedMnemonicIndexAt, setEnabledAt, setForegroundAt, setIconAt, setMnemonicAt, setModel, setSelectedComponent, setSelectedIndex, setTabComponentAt, setTabLayoutPolicy, setTabPlacement, setTitleAt, setToolTipTextAt, setUI, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.ContaineraddContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


CloseableTabbedPane

public CloseableTabbedPane()
Creates a new instance of CloseableTabbedPane





CloseableTabbedPane

public CloseableTabbedPane(int horizontalTextPosition)
Creates a new instance of CloseableTabbedPane

Parameters:horizontalTextPosition - the horizontal position of the text (e.g.
 SwingUtilities.TRAILING or SwingUtilities.LEFT)






Method Detail


setCloseIcons

public void setCloseIcons(javax.swing.Icon normal,
                          javax.swing.Icon hoover,
                          javax.swing.Icon pressed)
Allows setting own closeicons.


Parameters:normal - the normal closeiconhoover - the closeicon when the mouse is overpressed - the closeicon when the mouse is pressed




addTab

public void addTab(java.lang.String title,
                   java.awt.Component component)
Adds a Component represented by a title and no icon.

Overrides:addTab in class javax.swing.JTabbedPane
Parameters:title - the title to be displayed in this tabcomponent - the component to be displayed when this tab is clicked




addTab

public void addTab(java.lang.String title,
                   java.awt.Component component,
                   javax.swing.Icon extraIcon)
Adds a Component represented by a title and an icon.


Parameters:title - the title to be displayed in this tabcomponent - the component to be displayed when this tab is clickedextraIcon - the icon to be displayed in this tab




mouseClicked

public void mouseClicked(java.awt.event.MouseEvent e)
Invoked when the mouse button has been clicked (pressed and released) on
 a component.

Specified by:mouseClicked in interface java.awt.event.MouseListener
Parameters:e - the MouseEvent




mouseEntered

public void mouseEntered(java.awt.event.MouseEvent e)
Invoked when the mouse enters a component.

Specified by:mouseEntered in interface java.awt.event.MouseListener
Parameters:e - the MouseEvent




mouseExited

public void mouseExited(java.awt.event.MouseEvent e)
Invoked when the mouse exits a component.

Specified by:mouseExited in interface java.awt.event.MouseListener
Parameters:e - the MouseEvent




mousePressed

public void mousePressed(java.awt.event.MouseEvent e)
Invoked when a mouse button has been pressed on a component.

Specified by:mousePressed in interface java.awt.event.MouseListener
Parameters:e - the >MouseEvent




mouseReleased

public void mouseReleased(java.awt.event.MouseEvent e)
Invoked when a mouse button has been released on a component.

Specified by:mouseReleased in interface java.awt.event.MouseListener
Parameters:e - the MouseEvent




mouseDragged

public void mouseDragged(java.awt.event.MouseEvent e)
Invoked when a mouse button is pressed on a component and then dragged.
 MOUSE_DRAGGED events will continue to be delivered to the
 component where the drag originated until the mouse button is released
 (regardless of whether the mouse position is within the bounds of the
 component).
 
 Due to platform-dependent Drag&Drop implementations,
 MOUSE_DRAGGED events may not be delivered during a native
 Drag&Drop operation.

Specified by:mouseDragged in interface java.awt.event.MouseMotionListener
Parameters:e - the MouseEvent




mouseMoved

public void mouseMoved(java.awt.event.MouseEvent e)
Invoked when the mouse cursor has been moved onto a component but no
 buttons have been pushed.

Specified by:mouseMoved in interface java.awt.event.MouseMotionListener
Parameters:e - the MouseEvent




addCloseableTabbedPaneListener

public void addCloseableTabbedPaneListener(CloseableTabbedPaneListener l)
Adds an CloseableTabbedPaneListener to the tabbedpane.


Parameters:l - the CloseableTabbedPaneListener to be added




removeCloseableTabbedPaneListener

public void removeCloseableTabbedPaneListener(CloseableTabbedPaneListener l)
Removes an CloseableTabbedPaneListener from the tabbedpane.


Parameters:l - the listener to be removed




getCloseableTabbedPaneListener

public CloseableTabbedPaneListener[] getCloseableTabbedPaneListener()
Returns an array of all the SearchListeners added to this
 SearchPane with addSearchListener().


Returns:all of the SearchListeners added or an empty array if
 no listeners have been added




fireCloseTab

protected boolean fireCloseTab(int tabIndexToClose)
Notifies all listeners that have registered interest for notification on
 this event type.


Parameters:tabIndexToClose - the index of the tab which should be closed
Returns:true if the tab can be closed, false otherwise










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html
##-----------------TITLE------------------------##
JFMLocalFilesystem
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMLocalFilesystem

java.lang.Object
  org.itr_rescue.dataGuard.localFileSystem.JFMFileSystem
      org.itr_rescue.dataGuard.localFileSystem.JFMLocalFilesystem


public class JFMLocalFilesystemextends JFMFileSystem



TODO change me!!!



Author:sergiu








Constructor SummaryJFMLocalFilesystem()


           
 




Method Summary
 booleancanRead(JFMFile file)


          Tests whether the application can read the file denoted by the
 abstract pathname.
 booleancanWrite(JFMFile file)


          Tests whether the application can modify to the file denoted by the
 abstract pathname.
 booleancreateNewFile(JFMFile file)


           
 booleancreateNewFile(JFMFile parent,
              java.lang.String name)


          Atomically creates a new, empty file named by the abstract pathname if
 and only if a file with that name does not yet exist.
 booleandelete(JFMFile file)


          Deletes the file or directory denoted by the abstract pathname.
 booleanexists(JFMFile file)


          Tests whether the file or directory denoted by the abstract pathname
 exists.
 JFMFilegetDefaultRootDirectory()


          The default root directory in the case of filesystems with more than one root directories (like windows)
 JFMFilegetFile(java.lang.String pathName)


          This method returns an JFMFile object based on the pathname provided
 chargetPathSeparator()


          The system-dependent path-separator character.
 chargetSeparator()


          The system-dependent default name-separator character.
 JFMFilegetStartDirectory()


          This method returns the start directory for this filesystem
 booleanisLocal()


          Tells us if the filesystem is local.
 JFMFile[]listFiles(JFMFile root)


          Returns an array of abstract pathnames denoting the files in the
 directory denoted by the abstract pathname.
 JFMFile[]listFiles(JFMFile rootFile,
          java.io.FilenameFilter filter)


          Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.
 JFMFile[]listRoots()


          List the available filesystem roots.
 booleanmkdir(JFMFile file)


           
 booleanmkdir(JFMFile parent,
      java.lang.String name)


          Creates the directory named by the abstract pathname denoted by the parameter.
 booleanmkdirs(JFMFile file)


           
 booleansetLastModified(JFMFile file,
                long time)


          Sets the last-modified time of the file or directory named by the
 abstract pathname.
 booleansetReadOnly(JFMFile file)


          Marks the file or directory named by the abstract pathname so that
 only read operations are allowed.
 
Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.JFMFileSystemcreateFileSystem, getPathSeparatorString, getRegisteredFilesystems, getRootDriveFile, getSeparatorString, registerFilesystems
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


JFMLocalFilesystem

public JFMLocalFilesystem()






Method Detail


getPathSeparator

public char getPathSeparator()
Description copied from class: JFMFileSystemThe system-dependent path-separator character.  This field is
 initialized to contain the first character of the value of the system
 property path.separator.  This character is used to
 separate filenames in a sequence of files given as a path list.
 On UNIX systems, this character is ':'; on Microsoft Windows systems it
 is ';'.

Specified by:getPathSeparator in class JFMFileSystem
See Also:org.jfm.md.filesystems.JFMFileSystem#getPathSeparator()




getSeparator

public char getSeparator()
Description copied from class: JFMFileSystemThe system-dependent default name-separator character.  This field is
 initialized to contain the first character of the value of the system
 property file.separator.  On UNIX systems the value of this
 field is '/'; on Microsoft Windows systems it is '\'.

Specified by:getSeparator in class JFMFileSystem
See Also:org.jfm.md.filesystems.JFMFileSystem#getSeparator()




getDefaultRootDirectory

public JFMFile getDefaultRootDirectory()
Description copied from class: JFMFileSystemThe default root directory in the case of filesystems with more than one root directories (like windows)

Specified by:getDefaultRootDirectory in class JFMFileSystem
Returns:The default root directorySee Also:org.jfm.md.filesystems.JFMFileSystem#getDefaultRootDirectory()




listRoots

public JFMFile[] listRoots()
Description copied from class: JFMFileSystemList the available filesystem roots.

Specified by:listRoots in class JFMFileSystem
See Also:org.jfm.md.filesystems.JFMFileSystem#listRoots()




listFiles

public JFMFile[] listFiles(JFMFile root)
Description copied from class: JFMFileSystemReturns an array of abstract pathnames denoting the files in the
 directory denoted by the abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of
 File objects is returned, one for each file or directory in
 the directory.  Pathnames denoting the directory itself and the
 directory's parent directory are not included in the result.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.

Specified by:listFiles in class JFMFileSystem
Returns:An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns null if this abstract pathname
          does not denote a directory, or if an I/O error occurs.See Also:org.jfm.md.filesystems.JFMFileSystem#listFiles()




listFiles

public JFMFile[] listFiles(JFMFile rootFile,
                           java.io.FilenameFilter filter)
Description copied from class: JFMFileSystemReturns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.  The behavior of this method is the
 same as that of the #listFiles() method, except
 that the pathnames in the returned array must satisfy the filter.
 If the given filter is null then all
 pathnames are accepted.  Otherwise, a pathname satisfies the filter
 if and only if the value true results when the
 FilenameFilter.accept(java.io.File, java.lang.String) method of the filter is
 invoked on this abstract pathname and the name of a file or
 directory in the directory that it denotes.

Specified by:listFiles in class JFMFileSystem
filter - A filename filter
Returns:An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns null if this abstract pathname
          does not denote a directory, or if an I/O error occurs.See Also:org.jfm.md.filesystems.JFMFileSystem#listFiles(java.io.FilenameFilter)




mkdir

public boolean mkdir(JFMFile file)
See Also:org.jfm.md.filesystems.JFMFileSystem#mkdir(org.jfm.md.filesystems.JFMFile)




mkdirs

public boolean mkdirs(JFMFile file)
See Also:org.jfm.md.filesystems.JFMFileSystem#mkdirs(org.jfm.md.filesystems.JFMFile)




delete

public boolean delete(JFMFile file)
Description copied from class: JFMFileSystemDeletes the file or directory denoted by the abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.

Overrides:delete in class JFMFileSystem
Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file or directory is
          successfully deleted; false otherwiseSee Also:org.jfm.md.filesystems.JFMFileSystem#delete(org.jfm.md.filesystems.JFMFile)




createNewFile

public boolean createNewFile(JFMFile file)
                      throws FSException
Throws:
FSExceptionSee Also:org.jfm.md.filesystems.JFMFileSystem#createNewFile(org.jfm.md.filesystems.JFMFile)




setLastModified

public boolean setLastModified(JFMFile file,
                               long time)
Description copied from class: JFMFileSystemSets the last-modified time of the file or directory named by the
 abstract pathname.

  All platforms support file-modification times to the nearest second,
 but some provide more precision.  The argument will be truncated to fit
 the supported precision.  If the operation succeeds and no intervening
 operations on the file take place, then the next invocation of the
 org.jfm.md.filesystems.JFMFile#lastModified method will return the (possibly
 truncated) time argument that was passed to this method.

Specified by:setLastModified in class JFMFileSystem
Parameters:file - The file that denotes the abstract pathnametime - The new last-modified time, measured in milliseconds since
               the epoch (00:00:00 GMT, January 1, 1970)
Returns:true if and only if the operation succeeded;
          false otherwiseSee Also:org.jfm.md.filesystems.JFMFileSystem#setLastModified(org.jfm.md.filesystems.JFMFile, long)




setReadOnly

public boolean setReadOnly(JFMFile file)
Description copied from class: JFMFileSystemMarks the file or directory named by the abstract pathname so that
 only read operations are allowed.  After invoking this method the file
 or directory is guaranteed not to change until it is either deleted or
 marked to allow write access.  Whether or not a read-only file or
 directory may be deleted depends upon the underlying system.

Specified by:setReadOnly in class JFMFileSystem
Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the operation succeeded;
          false otherwiseSee Also:org.jfm.md.filesystems.JFMFileSystem#setReadOnly(org.jfm.md.filesystems.JFMFile)




canRead

public boolean canRead(JFMFile file)
Description copied from class: JFMFileSystemTests whether the application can read the file denoted by the
 abstract pathname.

Overrides:canRead in class JFMFileSystem
Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file specified by this
          abstract pathname exists and can be read by the
          application; false otherwiseSee Also:org.jfm.md.filesystems.JFMFileSystem#canRead(org.jfm.md.filesystems.JFMFile)




canWrite

public boolean canWrite(JFMFile file)
Description copied from class: JFMFileSystemTests whether the application can modify to the file denoted by the
 abstract pathname.

Overrides:canWrite in class JFMFileSystem
Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file system actually
          contains a file denoted by this abstract pathname and
          the application is allowed to write to the file;
          false otherwise.See Also:org.jfm.md.filesystems.JFMFileSystem#canWrite(org.jfm.md.filesystems.JFMFile)




exists

public boolean exists(JFMFile file)
Description copied from class: JFMFileSystemTests whether the file or directory denoted by the abstract pathname
 exists.

Overrides:exists in class JFMFileSystem
Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file or directory denoted
          by this abstract pathname exists; false otherwiseSee Also:org.jfm.md.filesystems.JFMFileSystem#exists(org.jfm.md.filesystems.JFMFile)




getStartDirectory

public JFMFile getStartDirectory()
Description copied from class: JFMFileSystemThis method returns the start directory for this filesystem

Specified by:getStartDirectory in class JFMFileSystem
Returns:JFMFile the start directory (for example, on the local filesystem it will be the user directory)See Also:org.jfm.md.filesystems.JFMFileSystem#getStartDirectory()




getFile

public JFMFile getFile(java.lang.String pathName)
Description copied from class: JFMFileSystemThis method returns an JFMFile object based on the pathname provided

Specified by:getFile in class JFMFileSystem
Parameters:pathName - String
Returns:JFMFileSee Also:org.jfm.md.filesystems.JFMFileSystem#getFile(java.lang.String)




mkdir

public boolean mkdir(JFMFile parent,
                     java.lang.String name)
Description copied from class: JFMFileSystemCreates the directory named by the abstract pathname denoted by the parameter.

Specified by:mkdir in class JFMFileSystem
Parameters:parent - The parent file that denotes the abstract pathnamename - The name of the new dir
Returns:true if and only if the directory was
          created; false otherwise




createNewFile

public boolean createNewFile(JFMFile parent,
                             java.lang.String name)
                      throws FSException
Description copied from class: JFMFileSystemAtomically creates a new, empty file named by the abstract pathname if
 and only if a file with that name does not yet exist.  The check for the
 existence of the file and the creation of the file if it does not exist
 are a single operation that is atomic with respect to all other
 filesystem activities that might affect the file.

Specified by:createNewFile in class JFMFileSystem
Returns:true if the named file does not exist and was
          successfully created; false if the named file
          already exists
Throws:
FSException - If an filesystem error occurred




isLocal

public boolean isLocal()
Description copied from class: JFMFileSystemTells us if the filesystem is local. This information may be used for some optimizations in some cases

Overrides:isLocal in class JFMFileSystem
Returns:true is the filesystem is a local filesystem (hard-disk) false otherwise (a network one)










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/asymmetric/Encryptor.html
##-----------------TITLE------------------------##
Encryptor
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption.asymmetric

Class Encryptor

java.lang.Object
  org.itr_rescue.dataGuard.encryption.asymmetric.Encryptor


public class Encryptorextends java.lang.Object










Field Summary
static booleanEXISTING


           
static booleanNEW


           
 




Constructor SummaryEncryptor(java.lang.String password,
          java.lang.String XMLKey)


           
 




Method Summary
 byte[]decodeBase64(java.lang.String encoded)


           
 java.security.KeydecodeRSAKey(java.lang.String encodedKey)


           
 byte[]decrypt(java.lang.String data)


           
 byte[]decryptFile(byte[] file,
            java.lang.String encryptedKey)


          Use this function to decrypt a file.
 byte[]decryptPassword(byte[] file)


           
 java.lang.StringdecryptString(byte[] file)


           
 java.lang.StringdecryptString(byte[] file,
              java.lang.String key)


           
 byte[]decryptXML(byte[] file)


           
 java.lang.StringencodeBase64(byte[] file)


           
 java.lang.Stringencrypt(byte[] file)


           
 byte[]encryptFile(byte[] file,
            boolean isNew)


           
 java.lang.StringencryptPassword(java.lang.String password)


           
 java.lang.StringencryptPublicKey(javax.crypto.SecretKey randomKey,
                 byte[] publicKey)


           
 byte[]encryptString(java.lang.String s)


           
 byte[]encryptString(java.lang.String s,
              boolean isNew)


           
 byte[]encryptXML(byte[] file)


           
 byte[]getDecodedKey()


           
 java.lang.StringgetEncodedPublicKey()


           
 java.lang.StringgetKey()


          Use this function to retrieve the random key that was generated to
 encrypt a file.
 javax.crypto.SecretKeygetOnlyKey()


           
 java.security.KeygetPrivateKey()


           
 java.security.KeygetPublicKey()


          Use this function to retrieve the RSA public key generated by the master
 password.
 java.lang.StringgetXMLKey()


           
static voidmain(java.lang.String[] args)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


NEW

public static boolean NEW





EXISTING

public static boolean EXISTING







Constructor Detail


Encryptor

public Encryptor(java.lang.String password,
                 java.lang.String XMLKey)






Method Detail


main

public static void main(java.lang.String[] args)





encrypt

public java.lang.String encrypt(byte[] file)





decrypt

public byte[] decrypt(java.lang.String data)





encryptPassword

public java.lang.String encryptPassword(java.lang.String password)





decryptPassword

public byte[] decryptPassword(byte[] file)





encryptFile

public byte[] encryptFile(byte[] file,
                          boolean isNew)





decryptFile

public byte[] decryptFile(byte[] file,
                          java.lang.String encryptedKey)
Use this function to decrypt a file. The random key is stored in the
 database along with the file. The key is encrypted using the password
 (thus, safe from prying eyes) and Base64 encoded to avoid syntax problems
 when inserted into the database.






getKey

public java.lang.String getKey()
Use this function to retrieve the random key that was generated to
 encrypt a file. Note that the key is encoded in Base64 to avoid MySQL
 syntax errors when inserting into the database.






getOnlyKey

public javax.crypto.SecretKey getOnlyKey()





encryptPublicKey

public java.lang.String encryptPublicKey(javax.crypto.SecretKey randomKey,
                                         byte[] publicKey)





getDecodedKey

public byte[] getDecodedKey()





encodeBase64

public java.lang.String encodeBase64(byte[] file)





decodeBase64

public byte[] decodeBase64(java.lang.String encoded)





getPublicKey

public java.security.Key getPublicKey()
Use this function to retrieve the RSA public key generated by the master
 password. Note that this will be encoded in Base64 to avoid any MySQL
 syntax errors when inserting into the database.






getEncodedPublicKey

public java.lang.String getEncodedPublicKey()





getPrivateKey

public java.security.Key getPrivateKey()





decodeRSAKey

public java.security.Key decodeRSAKey(java.lang.String encodedKey)





encryptXML

public byte[] encryptXML(byte[] file)





decryptXML

public byte[] decryptXML(byte[] file)





getXMLKey

public java.lang.String getXMLKey()





encryptString

public byte[] encryptString(java.lang.String s)





decryptString

public java.lang.String decryptString(byte[] file)





encryptString

public byte[] encryptString(java.lang.String s,
                            boolean isNew)





decryptString

public java.lang.String decryptString(byte[] file,
                                      java.lang.String key)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ExtApps/IExtApps.html
##-----------------TITLE------------------------##
IExtApps
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ExtApps

Interface IExtApps
All Superinterfaces: java.lang.Runnable
All Known Implementing Classes: AbstractApplication, Application

public interface IExtAppsextends java.lang.Runnable











Method Summary
 
Methods inherited from interface java.lang.Runnablerun
 










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/OpenFileAction.html
##-----------------TITLE------------------------##
OpenFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class OpenFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.OpenFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class OpenFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryOpenFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


OpenFileAction

public OpenFileAction()






Method Detail


compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction





execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/SearchView/RemoteFileSearchView.html
##-----------------TITLE------------------------##
RemoteFileSearchView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView

Class RemoteFileSearchView

java.lang.Object
  org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemView
      org.itr_rescue.dataGuard.remoteView.FileSystem.SearchView.RemoteFileSearchView

All Implemented Interfaces: java.awt.event.FocusListener, java.awt.event.MouseListener, java.util.EventListener, javax.swing.event.ListSelectionListener, IRemoteFileSystemView, IRemoteView

public class RemoteFileSearchViewextends RemoteFileSystemView










Field Summary
protected  RemoteFileSystemViewrelatedView


           
protected static java.util.HashMap<java.lang.String,java.lang.String>searchActions


           
 
Fields inherited from class org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemViewactions, popupMenu, scrollPane, server, structure_name, system, tableModel, theList
 




Constructor SummaryRemoteFileSearchView()


           
 




Method Summary
 voiddeleteFile(java.lang.String fileId)


           
 voidformat()


           
 java.lang.StringgetAction(java.lang.String actionType)


           
 XmlFileSystemModelgetFileSystem()


           
 IRemoteFileSystemViewgetRelatedView()


           
 AbstractStorageServergetRemoteServer()


           
 java.lang.StringgetRemoteUniqueCode()


           
 voidmouseClicked(java.awt.event.MouseEvent e)


           
 voidopenDirectory(java.lang.String dirName)


           
 voidsetRelatedView(RemoteFileSystemView relatedView)


           
protected  voidsetupColumns()


           
 
Methods inherited from class org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemViewaddFile, addItem, associateServer, clearAllFiles, displayContentsOfDirectory, focusGained, focusLost, getFilePopupMenu, getFolderPopupMenu, getOutputPane, getRandom, getScrollPane, getSelectedFile, getSelectedFiles, getSelectedFilesName, getSelectedFilesNumber, getVoidPopupMenu, initializeMenuItem, mouseEntered, mouseExited, mousePressed, mouseReleased, populate, refresh, setSystem, valueChanged
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


relatedView

protected RemoteFileSystemView relatedView





searchActions

protected static java.util.HashMap<java.lang.String,java.lang.String> searchActions







Constructor Detail


RemoteFileSearchView

public RemoteFileSearchView()






Method Detail


setupColumns

protected void setupColumns()
Overrides:setupColumns in class RemoteFileSystemView





getRelatedView

public IRemoteFileSystemView getRelatedView()





setRelatedView

public void setRelatedView(RemoteFileSystemView relatedView)





deleteFile

public void deleteFile(java.lang.String fileId)
Specified by:deleteFile in interface IRemoteFileSystemViewOverrides:deleteFile in class RemoteFileSystemView





format

public void format()
Specified by:format in interface IRemoteFileSystemViewOverrides:format in class RemoteFileSystemView





mouseClicked

public void mouseClicked(java.awt.event.MouseEvent e)
Specified by:mouseClicked in interface java.awt.event.MouseListenerOverrides:mouseClicked in class RemoteFileSystemView





openDirectory

public void openDirectory(java.lang.String dirName)
Specified by:openDirectory in interface IRemoteFileSystemViewOverrides:openDirectory in class RemoteFileSystemView





getAction

public java.lang.String getAction(java.lang.String actionType)
Specified by:getAction in interface IRemoteViewOverrides:getAction in class RemoteFileSystemView





getFileSystem

public XmlFileSystemModel getFileSystem()
Specified by:getFileSystem in interface IRemoteFileSystemViewOverrides:getFileSystem in class RemoteFileSystemView





getRemoteServer

public AbstractStorageServer getRemoteServer()
Specified by:getRemoteServer in interface IRemoteViewOverrides:getRemoteServer in class RemoteFileSystemView





getRemoteUniqueCode

public java.lang.String getRemoteUniqueCode()
Specified by:getRemoteUniqueCode in interface IRemoteViewOverrides:getRemoteUniqueCode in class RemoteFileSystemView











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html
##-----------------TITLE------------------------##
JFMFileSystem
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMFileSystem

java.lang.Object
  org.itr_rescue.dataGuard.localFileSystem.JFMFileSystem

Direct Known Subclasses: JFMLocalFilesystem

public abstract class JFMFileSystemextends java.lang.Object



This class represents the base class for all filesystems.



Author:sergiu








Constructor SummaryJFMFileSystem()


          Empy constructor.
 




Method Summary
 booleancanRead(JFMFile file)


          Tests whether the application can read the file denoted by the
 abstract pathname.
 booleancanWrite(JFMFile file)


          Tests whether the application can modify to the file denoted by the
 abstract pathname.
static JFMFileSystemcreateFileSystem(java.lang.String name)


          This method searches through the registered filesystems, loads and returns the requested one.
abstract  booleancreateNewFile(JFMFile parent,
              java.lang.String name)


          Atomically creates a new, empty file named by the abstract pathname if
 and only if a file with that name does not yet exist.
 booleandelete(JFMFile file)


          Deletes the file or directory denoted by the abstract pathname.
 booleanexists(JFMFile file)


          Tests whether the file or directory denoted by the abstract pathname
 exists.
abstract  JFMFilegetDefaultRootDirectory()


          The default root directory in the case of filesystems with more than one root directories (like windows)
abstract  JFMFilegetFile(java.lang.String pathName)


          This method returns an JFMFile object based on the pathname provided
abstract  chargetPathSeparator()


          The system-dependent path-separator character.
 java.lang.StringgetPathSeparatorString()


          The system-dependent path-separator character, represented as a string
 for convenience.
static java.util.Hashtable<java.lang.String,java.lang.String>getRegisteredFilesystems()


           
 JFMFilegetRootDriveFile(JFMFile file)


          This method returns the root directory of the filesystem of witch the supplied file belongs to.
abstract  chargetSeparator()


          The system-dependent default name-separator character.
 java.lang.StringgetSeparatorString()


          The system-dependent default name-separator character, represented as a
 string for convenience.
abstract  JFMFilegetStartDirectory()


          This method returns the start directory for this filesystem
 booleanisLocal()


          Tells us if the filesystem is local.
abstract  JFMFile[]listFiles(JFMFile rootFile)


          Returns an array of abstract pathnames denoting the files in the
 directory denoted by the abstract pathname.
abstract  JFMFile[]listFiles(JFMFile rootFile,
          java.io.FilenameFilter filter)


          Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.
abstract  JFMFile[]listRoots()


          List the available filesystem roots.
abstract  booleanmkdir(JFMFile parent,
      java.lang.String name)


          Creates the directory named by the abstract pathname denoted by the parameter.
static voidregisterFilesystems()


          This method searches the java path and the plugins directory (a subdirectory of the current directory)
 for jar's that contain a filesystem plugin.
abstract  booleansetLastModified(JFMFile file,
                long time)


          Sets the last-modified time of the file or directory named by the
 abstract pathname.
abstract  booleansetReadOnly(JFMFile file)


          Marks the file or directory named by the abstract pathname so that
 only read operations are allowed.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


JFMFileSystem

public JFMFileSystem()
Empy constructor.







Method Detail


getRegisteredFilesystems

public static java.util.Hashtable<java.lang.String,java.lang.String> getRegisteredFilesystems()





registerFilesystems

public static void registerFilesystems()
This method searches the java path and the plugins directory (a subdirectory of the current directory)
 for jar's that contain a filesystem plugin.
 A jar that contains a filesystem plugin, is a jar file that has in its root directory a file named filesystem.xml
 in which it describes the filesystem class used and its friendly name (to be shown in the menu)






createFileSystem

public static JFMFileSystem createFileSystem(java.lang.String name)
This method searches through the registered filesystems, loads and returns the requested one.
 Fielsystems are represented in the vector as full qualified names of the class that represents them.

Parameters:name - The name of the requested filesystem, or null if you accept the default one
Returns:The requested filesystem instance




getDefaultRootDirectory

public abstract JFMFile getDefaultRootDirectory()
The default root directory in the case of filesystems with more than one root directories (like windows)

Returns:The default root directory




getPathSeparator

public abstract char getPathSeparator()
The system-dependent path-separator character.  This field is
 initialized to contain the first character of the value of the system
 property path.separator.  This character is used to
 separate filenames in a sequence of files given as a path list.
 On UNIX systems, this character is ':'; on Microsoft Windows systems it
 is ';'.






getPathSeparatorString

public java.lang.String getPathSeparatorString()
The system-dependent path-separator character, represented as a string
 for convenience.  This string contains a single character, namely
 getPathSeparator().






getSeparator

public abstract char getSeparator()
The system-dependent default name-separator character.  This field is
 initialized to contain the first character of the value of the system
 property file.separator.  On UNIX systems the value of this
 field is '/'; on Microsoft Windows systems it is '\'.






getSeparatorString

public java.lang.String getSeparatorString()
The system-dependent default name-separator character, represented as a
 string for convenience.  This string contains a single character, namely
 getSeparator().






listRoots

public abstract JFMFile[] listRoots()
List the available filesystem roots.

See Also:File.listRoots()




listFiles

public abstract JFMFile[] listFiles(JFMFile rootFile)
Returns an array of abstract pathnames denoting the files in the
 directory denoted by the abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of
 File objects is returned, one for each file or directory in
 the directory.  Pathnames denoting the directory itself and the
 directory's parent directory are not included in the result.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.

Returns:An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns null if this abstract pathname
          does not denote a directory, or if an I/O error occurs.
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the directory




listFiles

public abstract JFMFile[] listFiles(JFMFile rootFile,
                                    java.io.FilenameFilter filter)
Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.  The behavior of this method is the
 same as that of the #listFiles() method, except
 that the pathnames in the returned array must satisfy the filter.
 If the given filter is null then all
 pathnames are accepted.  Otherwise, a pathname satisfies the filter
 if and only if the value true results when the
 FilenameFilter.accept(java.io.File, java.lang.String) method of the filter is
 invoked on this abstract pathname and the name of a file or
 directory in the directory that it denotes.

Parameters:filter - A filename filter
Returns:An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns null if this abstract pathname
          does not denote a directory, or if an I/O error occurs.
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the directory




mkdir

public abstract boolean mkdir(JFMFile parent,
                              java.lang.String name)
Creates the directory named by the abstract pathname denoted by the parameter.

Parameters:parent - The parent file that denotes the abstract pathnamename - The name of the new dir
Returns:true if and only if the directory was
          created; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not permit the named directory to be created




delete

public boolean delete(JFMFile file)
Deletes the file or directory denoted by the abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.

Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file or directory is
          successfully deleted; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkDelete(java.lang.String) method denies
          delete access to the file




createNewFile

public abstract boolean createNewFile(JFMFile parent,
                                      java.lang.String name)
                               throws FSException
Atomically creates a new, empty file named by the abstract pathname if
 and only if a file with that name does not yet exist.  The check for the
 existence of the file and the creation of the file if it does not exist
 are a single operation that is atomic with respect to all other
 filesystem activities that might affect the file.

Parameters:file - The file that denotes the abstract pathname
Returns:true if the named file does not exist and was
          successfully created; false if the named file
          already exists
Throws:
FSException - If an filesystem error occurred
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file




setLastModified

public abstract boolean setLastModified(JFMFile file,
                                        long time)
Sets the last-modified time of the file or directory named by the
 abstract pathname.

  All platforms support file-modification times to the nearest second,
 but some provide more precision.  The argument will be truncated to fit
 the supported precision.  If the operation succeeds and no intervening
 operations on the file take place, then the next invocation of the
 org.jfm.md.filesystems.JFMFile#lastModified method will return the (possibly
 truncated) time argument that was passed to this method.

Parameters:file - The file that denotes the abstract pathnametime - The new last-modified time, measured in milliseconds since
               the epoch (00:00:00 GMT, January 1, 1970)
Returns:true if and only if the operation succeeded;
          false otherwise
Throws:
java.lang.IllegalArgumentException - If the argument is negative
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the named file




setReadOnly

public abstract boolean setReadOnly(JFMFile file)
Marks the file or directory named by the abstract pathname so that
 only read operations are allowed.  After invoking this method the file
 or directory is guaranteed not to change until it is either deleted or
 marked to allow write access.  Whether or not a read-only file or
 directory may be deleted depends upon the underlying system.

Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the operation succeeded;
          false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the named file




canRead

public boolean canRead(JFMFile file)
Tests whether the application can read the file denoted by the
 abstract pathname.

Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file specified by this
          abstract pathname exists and can be read by the
          application; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file




canWrite

public boolean canWrite(JFMFile file)
Tests whether the application can modify to the file denoted by the
 abstract pathname.

Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file system actually
          contains a file denoted by this abstract pathname and
          the application is allowed to write to the file;
          false otherwise.
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file




exists

public boolean exists(JFMFile file)
Tests whether the file or directory denoted by the abstract pathname
 exists.

Parameters:file - The file that denotes the abstract pathname
Returns:true if and only if the file or directory denoted
          by this abstract pathname exists; false otherwise
Throws:
java.lang.SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file or directory




getRootDriveFile

public JFMFile getRootDriveFile(JFMFile file)
This method returns the root directory of the filesystem of witch the supplied file belongs to.
 For example:
        If the active filesystem is the local filesystem and is an Windows filesystem, this
 method should return the drive letter of the drive that this file belongs to. On Unix filesystems it will always return
 '/'. On other filesystems .... it will return whatever the one that imlements it wants to.

Parameters:file - JFMFile the file  whoses root we want to find out.
Returns:JFMFile the root drive (it cannot be null). It can be the same file that was passed as an argument.




getStartDirectory

public abstract JFMFile getStartDirectory()
This method returns the start directory for this filesystem

Returns:JFMFile the start directory (for example, on the local filesystem it will be the user directory)




getFile

public abstract JFMFile getFile(java.lang.String pathName)
This method returns an JFMFile object based on the pathname provided

Parameters:pathName - String
Returns:JFMFile




isLocal

public boolean isLocal()
Tells us if the filesystem is local. This information may be used for some optimizations in some cases

Returns:true is the filesystem is a local filesystem (hard-disk) false otherwise (a network one)










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/UpdateFileAction.html
##-----------------TITLE------------------------##
UpdateFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class UpdateFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.UpdateFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class UpdateFileActionextends AbstractFileAction










Field Summary
protected  java.io.FilefileToUpdate


           
protected  java.lang.StringobjectId


           
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryUpdateFileAction(java.lang.String objectId,
                 java.io.File file,
                 RemoteFileSystemView viewToUpdate)


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


fileToUpdate

protected java.io.File fileToUpdate





objectId

protected java.lang.String objectId







Constructor Detail


UpdateFileAction

public UpdateFileAction(java.lang.String objectId,
                        java.io.File file,
                        RemoteFileSystemView viewToUpdate)






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/VerticalFlowLayout.html
##-----------------TITLE------------------------##
VerticalFlowLayout
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class VerticalFlowLayout

java.lang.Object
  org.itr_rescue.dataGuard.ui.VerticalFlowLayout

All Implemented Interfaces: java.awt.LayoutManager, java.io.Serializable

public class VerticalFlowLayoutextends java.lang.Objectimplements java.awt.LayoutManager, java.io.Serializable



VerticalFlowLayout is a layout manager that arranges
  components vertically from top to bottom. It is similar to a vertical
  version of java.awt.FlowLayout (which is strictly horizontal)
  with 2 key exceptions:
      It puts components in a single column, and will not
  "wrap" the components when it reaches the bottom of the container.
      It is far more flexible for adjusting component
  alignment.
  There are methods to adjust the vertical alignment and the horizontal
  alignment of all components in the container. The horizontal fill of the
  components can also be adjusted, causing them to display at their
  preferred widths, justifying to match the width of the widest component,
  or filling the width of their parent container.  This makes it simple to
  neatly aligned layouts.
  Example:
  
VerticalFlowLayout vfLayout = new VerticalFlowLayout();
vfLayout.setHorizontalAlign(VerticalFlowLayout.LEFT);
vfLayout.setVerticalAlign(VerticalFlowLayout.BOTTOM);
vfLayout.setHorizontalFill(VerticalFlowLayout.NO_FILL);
JPanel pane = new JPanel(vfLayout);
pane.add(new JTextField(14);
pane.add(new JTextField(8);
pane.add(new JTextField(20);
  
  Produces something like this:
  
  Adjusting the layout settings can produce a very different look:
  
vfLayout.setHorizontalAlign(VerticalFlowLayout.CENTER);
vfLayout.setVerticalAlign(VerticalFlowLayout.CENTER);
vfLayout.setHorizontalFill(VerticalFlowLayout.MATCH_COMPONENTS);
  
  



Version:1.0, 2002-03-21Author:James BrundegeSee Also:Serialized Form







Field Summary
static floatBOTTOM


          Sets alignment to the bottom (value = 1).
static floatCENTER


          Sets alignment to the center (value = 0.5).
static intFILL_SPACE


          Sets the horizontal fill so all components are as wide as their
  parent container.
static floatLEFT


          Sets alignment to the left (value = 0).
static intMATCH_COMPONENTS


          Sets the horizontal fill so all components match the width of the
  widest component.
static intNO_FILL


          Sets the horizontal fill to adjust components to their preferred size.
static floatRIGHT


          Sets alignment to the right (value = 1).
static floatTOP


          Sets alignment to the top (value = 0).
 




Constructor SummaryVerticalFlowLayout()


          Creates a VerticalFlowLayout with the defaults of:
  Horizontal alignment: CENTER
  Vertical alignment: TOP
  Horizontal gap: 5 pixels
  Vertical gap: 5 pixels
  Horizontal fill: NO_FILLVerticalFlowLayout(float horizontalAlign,
                   float verticalAlign)


          Creates a VerticalFlowLayout with the specied horizontal
  and vertical alignments and
  with the defaults of:
  Horizontal gap: 5 pixels
  Vertical gap: 5 pixels
  Horizontal fill: NO_FILLVerticalFlowLayout(float horizontalAlign,
                   float verticalAlign,
                   int hgap,
                   int vgap)


          Creates a VerticalFlowLayout with the specied horizontal
  and vertical alignments and horizontal and vertical gaps and
  with the default of:
  Horizontal fill: NO_FILL
 




Method Summary
 voidaddLayoutComponent(java.lang.String name,
                   java.awt.Component comp)


          Not implemented
 intgetHgap()


          Gets the horizontal space next to each component.
 floatgetHorizontalAlign()


          Returns a float value between 0 and 1 that represents the horizontal
  alignment.
 intgetHorizontalFill()


          Returns the Horizontal Fill value that specifies the horizontal fill
  policy which determines how wide the components are.
 floatgetVerticalAlign()


          Returns a float value between 0 and 1 that represents the vertical
  alignment.
 intgetVgap()


          Gets the vertical space between components.
 voidlayoutContainer(java.awt.Container parent)


          Sets the size and location of the components within this
  container and displays the container using this layout.
 java.awt.DimensionminimumLayoutSize(java.awt.Container parent)


          Determines the minimum size of the container using this Layout
  based on the components contained within, and the space surrounding
  each component.
 java.awt.DimensionpreferredLayoutSize(java.awt.Container parent)


          Determines the preferred size of the container using this Layout
  based on the components contained within, and the space surrounding
  each component.
 voidremoveLayoutComponent(java.awt.Component comp)


          Not implemented
 voidsetAlignment(float horizontal,
             float vertical)


          Convienence method that sets both the horizontal and vertical
  alignments.
 voidsetHgap(int hgap)


          Sets the horizontal space next to each component to the specified value.
 voidsetHorizontalAlign(float horizontalAlign)


          Sets the horizontal alignment.
 voidsetHorizontalFill(int fillPolicy)


          Sets the Horizontal Fill
  policy which determines how wide the components are.
 voidsetSpace(int hgap,
         int vgap)


          Sets both the horizontal and vertical space between components to the
  specified values.
 voidsetVerticalAlign(float verticalAlign)


          Sets the vertical alignment.
 voidsetVgap(int vgap)


          Sets the vertical space between components to the specified value.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


TOP

public static final float TOP
Sets alignment to the top (value = 0).

See Also:Constant Field Values




BOTTOM

public static final float BOTTOM
Sets alignment to the bottom (value = 1).

See Also:Constant Field Values




CENTER

public static final float CENTER
Sets alignment to the center (value = 0.5).

See Also:Constant Field Values




LEFT

public static final float LEFT
Sets alignment to the left (value = 0).

See Also:Constant Field Values




RIGHT

public static final float RIGHT
Sets alignment to the right (value = 1).

See Also:Constant Field Values




NO_FILL

public static final int NO_FILL
Sets the horizontal fill to adjust components to their preferred size.

See Also:Constant Field Values




MATCH_COMPONENTS

public static final int MATCH_COMPONENTS
Sets the horizontal fill so all components match the width of the
  widest component.

See Also:Constant Field Values




FILL_SPACE

public static final int FILL_SPACE
Sets the horizontal fill so all components are as wide as their
  parent container.

See Also:Constant Field Values






Constructor Detail


VerticalFlowLayout

public VerticalFlowLayout()
Creates a VerticalFlowLayout with the defaults of:
  Horizontal alignment: CENTER
  Vertical alignment: TOP
  Horizontal gap: 5 pixels
  Vertical gap: 5 pixels
  Horizontal fill: NO_FILL





VerticalFlowLayout

public VerticalFlowLayout(float horizontalAlign,
                          float verticalAlign)
Creates a VerticalFlowLayout with the specied horizontal
  and vertical alignments and
  with the defaults of:
  Horizontal gap: 5 pixels
  Vertical gap: 5 pixels
  Horizontal fill: NO_FILL

Parameters:horizontalAlign - a float between 0 and 1 representing the
  horizontal alignment or the constants:  VerticalFlowLayout.LEFT,
  VerticalFlowLayout.CENTER, VerticalFlowLayout.RIGHT.verticalAlign - a float between 0 and 1 representing the
  vertical alignment or the contstants:  VerticalFlowLayout.TOP,
  VerticalFlowLayout.CENTER, VerticalFlowLayout.BOTTOM.




VerticalFlowLayout

public VerticalFlowLayout(float horizontalAlign,
                          float verticalAlign,
                          int hgap,
                          int vgap)
Creates a VerticalFlowLayout with the specied horizontal
  and vertical alignments and horizontal and vertical gaps and
  with the default of:
  Horizontal fill: NO_FILL

Parameters:horizontalAlign - a float between 0 and 1 representing the
  horizontal alignment or the constants:  VerticalFlowLayout.LEFT,
  VerticalFlowLayout.CENTER, VerticalFlowLayout.RIGHT.verticalAlign - a float between 0 and 1 representing the
  vertical alignment or the contstants:  VerticalFlowLayout.TOP,
  VerticalFlowLayout.CENTER, VerticalFlowLayout.BOTTOM.hgap - The horizontal border size in pixels.vgap - The vertical border size in pixels.






Method Detail


getHgap

public int getHgap()
Gets the horizontal space next to each component.


Returns:The horizontal space size in pixels.




setHgap

public void setHgap(int hgap)
Sets the horizontal space next to each component to the specified value.


Parameters:hgap - The horizontal space size in pixels.




getVgap

public int getVgap()
Gets the vertical space between components.


Returns:The vertical space size in pixels.




setVgap

public void setVgap(int vgap)
Sets the vertical space between components to the specified value.


Parameters:hgap - The vertical space size in pixels.




setSpace

public void setSpace(int hgap,
                     int vgap)
Sets both the horizontal and vertical space between components to the
  specified values.


Parameters:hgap - The horizontal space size in pixels.vgap - The vertical space size in pixels.




getHorizontalFill

public int getHorizontalFill()
Returns the Horizontal Fill value that specifies the horizontal fill
  policy which determines how wide the components are. This will be one of
  the following values:
  
VerticalFlowLayout.NO_FILL (component width determined by its preferred size)
VerticalFlowLayout.MATCH_COMPONENTS (all components have the width of the widest component)
VerticalFlowLayout.FILL_SPACE (all components are as wide as their parent container)
  


Returns:an int matching one of the Fill values described above.




setHorizontalFill

public void setHorizontalFill(int fillPolicy)
Sets the Horizontal Fill
  policy which determines how wide the components are. This will be one of
  the following values:
  
VerticalFlowLayout.NO_FILL (component width determined by its preferred size)
VerticalFlowLayout.MATCH_COMPONENTS (all components have the width of the widest component)
VerticalFlowLayout.FILL_SPACE (all components are as wide as their parent container)
  


Parameters:fillPolicy - an int matching one of the Fill values described above.




getHorizontalAlign

public float getHorizontalAlign()
Returns a float value between 0 and 1 that represents the horizontal
  alignment.


Returns:a float between 0 and 1




setHorizontalAlign

public void setHorizontalAlign(float horizontalAlign)
Sets the horizontal alignment. Can be given any float value
  between 0 and 1 including the predefined values:
  
VerticalFlowLayout.LEFT
VerticalFlowLayout.CENTER
VerticalFlowLayout.RIGHT
  


Parameters:horizontalAlign - a float between 0 and 1.




getVerticalAlign

public float getVerticalAlign()
Returns a float value between 0 and 1 that represents the vertical
  alignment.


Returns:a float between 0 and 1.




setVerticalAlign

public void setVerticalAlign(float verticalAlign)
Sets the vertical alignment. Can be given any float value
  between 0 and 1 including the predefined values:
  
VerticalFlowLayout.TOP
VerticalFlowLayout.CENTER
VerticalFlowLayout.BOTTOM
  


Parameters:verticalAlign - a float between 0 and 1.




setAlignment

public void setAlignment(float horizontal,
                         float vertical)
Convienence method that sets both the horizontal and vertical
  alignments. This is equivalent to calling:
  setHorizontalAlign(horizontal);
  setVerticalAlign(vertical);
  The parameters can use the same predefined value as these two methods.


Parameters:horizontal - a float between 0 and 1.vertical - a float between 0 and 1.




addLayoutComponent

public void addLayoutComponent(java.lang.String name,
                               java.awt.Component comp)
Not implemented

Specified by:addLayoutComponent in interface java.awt.LayoutManager





removeLayoutComponent

public void removeLayoutComponent(java.awt.Component comp)
Not implemented

Specified by:removeLayoutComponent in interface java.awt.LayoutManager





preferredLayoutSize

public java.awt.Dimension preferredLayoutSize(java.awt.Container parent)
Determines the preferred size of the container using this Layout
  based on the components contained within, and the space surrounding
  each component.

Specified by:preferredLayoutSize in interface java.awt.LayoutManager
Parameters:parent - the container in which to do the layout.
Returns:the preferred dimensions to lay out the
                      subcomponents of the specified container.




minimumLayoutSize

public java.awt.Dimension minimumLayoutSize(java.awt.Container parent)
Determines the minimum size of the container using this Layout
  based on the components contained within, and the space surrounding
  each component.

Specified by:minimumLayoutSize in interface java.awt.LayoutManager
Parameters:parent - the container in which to do the layout.
Returns:the dimensions to lay out the
                      subcomponents of the specified container.




layoutContainer

public void layoutContainer(java.awt.Container parent)
Sets the size and location of the components within this
  container and displays the container using this layout.
  This method lays out the components in a single vertical column
  from top to bottom.

Specified by:layoutContainer in interface java.awt.LayoutManager
Parameters:parent - The container in which to do the layout.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ColorChangeEvent.html
##-----------------TITLE------------------------##
ColorChangeEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class ColorChangeEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.ColorChangeEvent


public class ColorChangeEventextends BroadcastEvent



The event that gets fired when the color changes.



Author:sergiu







Field Summary
static intBACKGROUND


          The type that means the background was changed
static intFOREGROUND


          The type that means the foreground was changed
static intMARKED


          The type that means the mark color was changed
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryColorChangeEvent()


           ColorChangeEvent(int type)


           
 




Method Summary
 java.awt.ColorgetColor()


           
 intgetColorType()


           
 intgetType()


           
 voidsetColor(java.awt.Color color)


           
 voidsetColorType(int type)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


BACKGROUND

public static final int BACKGROUND
The type that means the background was changed

See Also:Constant Field Values




FOREGROUND

public static final int FOREGROUND
The type that means the foreground was changed

See Also:Constant Field Values




MARKED

public static final int MARKED
The type that means the mark color was changed

See Also:Constant Field Values






Constructor Detail


ColorChangeEvent

public ColorChangeEvent()




ColorChangeEvent

public ColorChangeEvent(int type)






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




getColorType

public int getColorType()
Returns:Returns the type.




setColorType

public void setColorType(int type)
Parameters:type - The type to set.




getColor

public java.awt.Color getColor()
Returns:Returns the color.




setColor

public void setColor(java.awt.Color color)
Parameters:color - The color to set.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangePanelEvent.html
##-----------------TITLE------------------------##
ChangePanelEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class ChangePanelEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.ChangePanelEvent


public class ChangePanelEventextends BroadcastEvent



Title:        Java File Manager
 Description:  
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu Sergiu







Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryChangePanelEvent()


           
 




Method Summary
 intgetLocation()


           
 intgetType()


           
 voidsetLocation(int location)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ChangePanelEvent

public ChangePanelEvent()






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




getLocation

public int getLocation()





setLocation

public void setLocation(int location)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/gVault/GmailIndexBuilder.html
##-----------------TITLE------------------------##
GmailIndexBuilder
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.gVault

Class GmailIndexBuilder

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.gVault.GmailIndexBuilder


public class GmailIndexBuilderextends java.lang.Object










Field Summary
static java.lang.StringINDEX_FILE_NAME


           
 




Constructor SummaryGmailIndexBuilder()


           
 




Method Summary
static org.itr_rescue.jgmail.data.Message[]buildIndex(IIndex index)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


INDEX_FILE_NAME

public static java.lang.String INDEX_FILE_NAME







Constructor Detail


GmailIndexBuilder

public GmailIndexBuilder()






Method Detail


buildIndex

public static org.itr_rescue.jgmail.data.Message[] buildIndex(IIndex index)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/CutFileAction.html
##-----------------TITLE------------------------##
CutFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class CutFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.CutFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class CutFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryCutFileAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


CutFileAction

public CutFileAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/Index.html
##-----------------TITLE------------------------##
Index
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing

Class Index

java.lang.Object
  org.itr_rescue.dataGuard.indexing.Index

All Implemented Interfaces: IIndex

public class Indexextends java.lang.Objectimplements IIndex










Field Summary
static intKEYWORD_SIZE


           
static intQGRAM_SIZE


           
 




Constructor SummaryIndex()


           
 




Method Summary
 voidaddNewIndexEntry(java.lang.String keyword,
                 int fileIndex)


           
static java.lang.String[]computeFinalQGrams(java.lang.String source,
                   int q)


          Compute the q_grams of length q using the string source
 KeywordEntrygetKeywordEntry(int keywordId)


           
 java.util.Hashtable<java.lang.String,java.util.List<KeywordPointer>>getQ_grams()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


KEYWORD_SIZE

public static final int KEYWORD_SIZE
See Also:Constant Field Values




QGRAM_SIZE

public static final int QGRAM_SIZE
See Also:Constant Field Values






Constructor Detail


Index

public Index()






Method Detail


addNewIndexEntry

public void addNewIndexEntry(java.lang.String keyword,
                             int fileIndex)






computeFinalQGrams

public static java.lang.String[] computeFinalQGrams(java.lang.String source,
                                                    int q)
Compute the q_grams of length q using the string source


Parameters:source - - the stringq - - the length of every substring
Returns:an array with the q_grams




getKeywordEntry

public KeywordEntry getKeywordEntry(int keywordId)
Specified by:getKeywordEntry in interface IIndex





getQ_grams

public java.util.Hashtable<java.lang.String,java.util.List<KeywordPointer>> getQ_grams()
Specified by:getQ_grams in interface IIndex











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ExtApps/AbstractApplication.html
##-----------------TITLE------------------------##
AbstractApplication
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ExtApps

Class AbstractApplication

java.lang.Object
  org.itr_rescue.dataGuard.ExtApps.AbstractApplication

All Implemented Interfaces: java.lang.Runnable, IExtApps
Direct Known Subclasses: Application

public class AbstractApplicationextends java.lang.Objectimplements IExtApps










Field Summary
protected  java.lang.StringapplicationPath


           
 




Constructor SummaryAbstractApplication()


           
 




Method Summary
 java.lang.StringgetApplicationPath()


           
 voidrun()


           
 voidsetApplicationPath(java.lang.String applicationPath)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


applicationPath

protected java.lang.String applicationPath







Constructor Detail


AbstractApplication

public AbstractApplication()






Method Detail


run

public void run()
Specified by:run in interface java.lang.Runnable





getApplicationPath

public java.lang.String getApplicationPath()






setApplicationPath

public void setApplicationPath(java.lang.String applicationPath)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/HelpURLChangeEvent.html
##-----------------TITLE------------------------##
HelpURLChangeEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class HelpURLChangeEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.HelpURLChangeEvent


public class HelpURLChangeEventextends BroadcastEvent










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryHelpURLChangeEvent(java.lang.String url)


           
 




Method Summary
 intgetType()


           
 java.lang.StringgetUrl()


           
 voidsetUrl(java.lang.String url)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


HelpURLChangeEvent

public HelpURLChangeEvent(java.lang.String url)






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




getUrl

public java.lang.String getUrl()
Returns:the url




setUrl

public void setUrl(java.lang.String url)
Parameters:url - the url to set










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/DB2/DB2StorageServer.html
##-----------------TITLE------------------------##
DB2StorageServer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.DB2

Class DB2StorageServer

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.AbstractStorageServer
      org.itr_rescue.dataGuard.StorageServer.DB2.DB2StorageServer

All Implemented Interfaces: IStorageServer

public class DB2StorageServerextends AbstractStorageServer











Constructor SummaryDB2StorageServer(java.lang.String username,
                 java.lang.String password)


           
 




Method Summary
 intconnect(java.lang.String username,
        java.lang.String password)


           
 intdelete(AbstractObjectData o)


           
 voiddisconnect()


           
 intfetch(AbstractObjectData o,
      java.lang.String path)


           
 java.lang.StringgetServiceDescription()


           
 java.lang.StringgetServiceType()


           
 voidloadService()


           
 intstore(AbstractObjectData o,
      java.lang.String id)


           
 
Methods inherited from class org.itr_rescue.dataGuard.StorageServer.AbstractStorageServergetPassword, getService_url, getServiceKey, getUsername, setPassword, setService_url, setUsername
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


DB2StorageServer

public DB2StorageServer(java.lang.String username,
                        java.lang.String password)






Method Detail


loadService

public void loadService()
Overrides:loadService in class AbstractStorageServer





connect

public int connect(java.lang.String username,
                   java.lang.String password)
Specified by:connect in interface IStorageServerSpecified by:connect in class AbstractStorageServer





delete

public int delete(AbstractObjectData o)
Specified by:delete in interface IStorageServerSpecified by:delete in class AbstractStorageServer





disconnect

public void disconnect()
Specified by:disconnect in interface IStorageServerSpecified by:disconnect in class AbstractStorageServer





fetch

public int fetch(AbstractObjectData o,
                 java.lang.String path)
Specified by:fetch in interface IStorageServerSpecified by:fetch in class AbstractStorageServer





getServiceDescription

public java.lang.String getServiceDescription()
Specified by:getServiceDescription in class AbstractStorageServer





getServiceType

public java.lang.String getServiceType()
Specified by:getServiceType in class AbstractStorageServer





store

public int store(AbstractObjectData o,
                 java.lang.String id)
Specified by:store in interface IStorageServerSpecified by:store in class AbstractStorageServer











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/FileListSelectionEvent.html
##-----------------TITLE------------------------##
FileListSelectionEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class FileListSelectionEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.FileListSelectionEvent


public class FileListSelectionEventextends BroadcastEvent



Title: Java File Manager
 Description: 
 Copyright: Copyright (c) 2001
 Company: Home
 
 This is the event that is propagated when an view object changes it's files selection.



Version:1.0Author:Giurgiu Sergiu







Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryFileListSelectionEvent()


           
 




Method Summary
 int[]getFilesIndexes()


           
 intgetPanelLocation()


           
 intgetType()


           
 voidsetFilesIndexes(int[] list)


           
 voidsetPanelLocation(int loc)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileListSelectionEvent

public FileListSelectionEvent()






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




setPanelLocation

public void setPanelLocation(int loc)





getPanelLocation

public int getPanelLocation()





setFilesIndexes

public void setFilesIndexes(int[] list)





getFilesIndexes

public int[] getFilesIndexes()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/FontDialog.html
##-----------------TITLE------------------------##
FontDialog
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class FontDialog

java.lang.Object
  java.awt.Component
      java.awt.Container
          java.awt.Window
              java.awt.Dialog
                  javax.swing.JDialog
                      org.itr_rescue.dataGuard.ui.FontDialog

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants

public class FontDialogextends javax.swing.JDialog



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JDialogjavax.swing.JDialog.AccessibleJDialog
 

Nested classes/interfaces inherited from class java.awt.Dialogjava.awt.Dialog.AccessibleAWTDialog, java.awt.Dialog.ModalExclusionType, java.awt.Dialog.ModalityType
 

Nested classes/interfaces inherited from class java.awt.Windowjava.awt.Window.AccessibleAWTWindow
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JDialogaccessibleContext, rootPane, rootPaneCheckingEnabled
 
Fields inherited from class java.awt.DialogDEFAULT_MODALITY_TYPE
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.WindowConstantsDISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, EXIT_ON_CLOSE, HIDE_ON_CLOSE
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryFontDialog()


           FontDialog(java.awt.Frame frame,
           java.lang.String title,
           boolean modal)


           
 




Method Summary
 java.awt.FontgetSelectedFont()


           
 booleanisCancelled()


           
protected  voidprocessWindowEvent(java.awt.event.WindowEvent e)


           
 voidsetCancelled(boolean b)


           
static java.awt.FontshowDialog(java.awt.Frame parent,
           java.lang.String title,
           boolean modal)


           
 
Methods inherited from class javax.swing.JDialogaddImpl, createRootPane, dialogInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update
 
Methods inherited from class java.awt.DialogaddNotify, getModalityType, getTitle, hide, isModal, isResizable, isUndecorated, setModal, setModalityType, setResizable, setTitle, setUndecorated, setVisible, show, toBack
 
Methods inherited from class java.awt.WindowaddPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getGraphicsConfiguration, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOwnedWindows, getOwner, getOwnerlessWindows, getToolkit, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isShowing, pack, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeNotify, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImage, setIconImages, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, toFront
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paint, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, setBackground, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


FontDialog

public FontDialog(java.awt.Frame frame,
                  java.lang.String title,
                  boolean modal)




FontDialog

public FontDialog()






Method Detail


isCancelled

public boolean isCancelled()





setCancelled

public void setCancelled(boolean b)





showDialog

public static java.awt.Font showDialog(java.awt.Frame parent,
                                       java.lang.String title,
                                       boolean modal)





processWindowEvent

protected void processWindowEvent(java.awt.event.WindowEvent e)
Overrides:processWindowEvent in class javax.swing.JDialog





getSelectedFont

public java.awt.Font getSelectedFont()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObject/conversion/File2FileObjectData.html
##-----------------TITLE------------------------##
File2FileObjectData
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObject.conversion

Class File2FileObjectData

java.lang.Object
  org.itr_rescue.dataGuard.DataObject.conversion.File2FileObjectData


public class File2FileObjectDataextends java.lang.Object











Constructor SummaryFile2FileObjectData()


           
 




Method Summary
static FileObjectDataconvertLocalFile(java.io.File file)


           
static java.io.FilecreateFile(byte[] fileContent,
           java.lang.String fileName)


           
static byte[]getBytesFromFile(java.io.File file)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


File2FileObjectData

public File2FileObjectData()






Method Detail


convertLocalFile

public static FileObjectData convertLocalFile(java.io.File file)





getBytesFromFile

public static byte[] getBytesFromFile(java.io.File file)
                               throws java.lang.Exception
Throws:
java.lang.Exception




createFile

public static java.io.File createFile(byte[] fileContent,
                                      java.lang.String fileName)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangeDirectoryListener.html
##-----------------TITLE------------------------##
ChangeDirectoryListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface ChangeDirectoryListener
All Superinterfaces: BroadcastListener

public interface ChangeDirectoryListenerextends BroadcastListener



Title:        Java File Manager
 Description:  
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu Sergiu








Method Summary
 voidchangeDirectory(ChangeDirectoryEvent event)


           
 






Method Detail


changeDirectory

void changeDirectory(ChangeDirectoryEvent event)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangeViewListener.html
##-----------------TITLE------------------------##
ChangeViewListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Interface ChangeViewListener
All Superinterfaces: BroadcastListener

public interface ChangeViewListenerextends BroadcastListener



Title: Java File Manager
 Description: 
 Copyright: Copyright (c) 2001
 Company: Home



Version:1.0Author:Giurgiu Sergiu








Method Summary
 voidviewChanged(ChangeViewEvent ev)


           
 






Method Detail


viewChanged

void viewChanged(ChangeViewEvent ev)












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangeViewEvent.html
##-----------------TITLE------------------------##
ChangeViewEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class ChangeViewEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.ChangeViewEvent


public class ChangeViewEventextends BroadcastEvent



Title: Java File Manager
 Description: 
 Copyright: Copyright (c) 2001
 Company: Home



Version:1.0Author:Giurgiu Sergiu







Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryChangeViewEvent()


           
 




Method Summary
 java.lang.StringgetFilesystemClassName()


           
 intgetType()


           
 JFMViewRepresentationgetViewRep()


           
 voidsetFilesystemClassName(java.lang.String filesystemClassName)


           
 voidsetViewRep(JFMViewRepresentation viewRep)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ChangeViewEvent

public ChangeViewEvent()






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




getViewRep

public JFMViewRepresentation getViewRep()
Returns:Returns the viewRep.




setViewRep

public void setViewRep(JFMViewRepresentation viewRep)
Parameters:viewRep - The viewRep to set.




getFilesystemClassName

public java.lang.String getFilesystemClassName()
Returns:the filesystemClassName




setFilesystemClassName

public void setFilesystemClassName(java.lang.String filesystemClassName)
Parameters:filesystemClassName - the filesystemClassName to set










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/DetailsTable.html
##-----------------TITLE------------------------##
DetailsTable
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.detail

Class DetailsTable

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JTable
                  org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTable

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.event.CellEditorListener, javax.swing.event.ListSelectionListener, javax.swing.event.RowSorterListener, javax.swing.event.TableColumnModelListener, javax.swing.event.TableModelListener, javax.swing.Scrollable

public class DetailsTableextends javax.swing.JTable



Title:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu SergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JTablejavax.swing.JTable.AccessibleJTable, javax.swing.JTable.DropLocation, javax.swing.JTable.PrintMode
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JTableAUTO_RESIZE_ALL_COLUMNS, AUTO_RESIZE_LAST_COLUMN, AUTO_RESIZE_NEXT_COLUMN, AUTO_RESIZE_OFF, AUTO_RESIZE_SUBSEQUENT_COLUMNS, autoCreateColumnsFromModel, autoResizeMode, cellEditor, cellSelectionEnabled, columnModel, dataModel, defaultEditorsByColumnClass, defaultRenderersByColumnClass, editingColumn, editingRow, editorComp, gridColor, preferredViewportSize, rowHeight, rowMargin, rowSelectionAllowed, selectionBackground, selectionForeground, selectionModel, showHorizontalLines, showVerticalLines, tableHeader
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDetailsTable()


           
 




Method Summary
 voidensureIndexIsVisible(int index)


          Scrolls the viewport to the row at the specified index.
 javax.swing.table.TableCellRenderergetCellRenderer(int row,
                int column)


           
 java.util.List<java.lang.Integer>getMarkedFiles()


           
 voidsetPanelChangeRequestListener(PanelChangeRequestListener l)


           
 
Methods inherited from class javax.swing.JTableaddColumn, addColumnSelectionInterval, addNotify, addRowSelectionInterval, changeSelection, clearSelection, columnAdded, columnAtPoint, columnMarginChanged, columnMoved, columnRemoved, columnSelectionChanged, configureEnclosingScrollPane, convertColumnIndexToModel, convertColumnIndexToView, convertRowIndexToModel, convertRowIndexToView, createDefaultColumnModel, createDefaultColumnsFromModel, createDefaultDataModel, createDefaultEditors, createDefaultRenderers, createDefaultSelectionModel, createDefaultTableHeader, createScrollPaneForTable, doLayout, editCellAt, editCellAt, editingCanceled, editingStopped, getAccessibleContext, getAutoCreateColumnsFromModel, getAutoCreateRowSorter, getAutoResizeMode, getCellEditor, getCellEditor, getCellRect, getCellSelectionEnabled, getColumn, getColumnClass, getColumnCount, getColumnModel, getColumnName, getColumnSelectionAllowed, getDefaultEditor, getDefaultRenderer, getDragEnabled, getDropLocation, getDropMode, getEditingColumn, getEditingRow, getEditorComponent, getFillsViewportHeight, getGridColor, getIntercellSpacing, getModel, getPreferredScrollableViewportSize, getPrintable, getRowCount, getRowHeight, getRowHeight, getRowMargin, getRowSelectionAllowed, getRowSorter, getScrollableBlockIncrement, getScrollableTracksViewportHeight, getScrollableTracksViewportWidth, getScrollableUnitIncrement, getSelectedColumn, getSelectedColumnCount, getSelectedColumns, getSelectedRow, getSelectedRowCount, getSelectedRows, getSelectionBackground, getSelectionForeground, getSelectionModel, getShowHorizontalLines, getShowVerticalLines, getSurrendersFocusOnKeystroke, getTableHeader, getToolTipText, getUI, getUIClassID, getUpdateSelectionOnSort, getValueAt, initializeLocalVars, isCellEditable, isCellSelected, isColumnSelected, isEditing, isRowSelected, moveColumn, paramString, prepareEditor, prepareRenderer, print, print, print, print, print, processKeyBinding, removeColumn, removeColumnSelectionInterval, removeEditor, removeNotify, removeRowSelectionInterval, resizeAndRepaint, rowAtPoint, selectAll, setAutoCreateColumnsFromModel, setAutoCreateRowSorter, setAutoResizeMode, setCellEditor, setCellSelectionEnabled, setColumnModel, setColumnSelectionAllowed, setColumnSelectionInterval, setDefaultEditor, setDefaultRenderer, setDragEnabled, setDropMode, setEditingColumn, setEditingRow, setFillsViewportHeight, setGridColor, setIntercellSpacing, setModel, setPreferredScrollableViewportSize, setRowHeight, setRowHeight, setRowMargin, setRowSelectionAllowed, setRowSelectionInterval, setRowSorter, setSelectionBackground, setSelectionForeground, setSelectionMode, setSelectionModel, setShowGrid, setShowHorizontalLines, setShowVerticalLines, setSurrendersFocusOnKeystroke, setTableHeader, setUI, setUpdateSelectionOnSort, setValueAt, sizeColumnsToFit, sizeColumnsToFit, sorterChanged, tableChanged, unconfigureEnclosingScrollPane, updateUI, valueChanged
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


DetailsTable

public DetailsTable()






Method Detail


setPanelChangeRequestListener

public void setPanelChangeRequestListener(PanelChangeRequestListener l)





getCellRenderer

public javax.swing.table.TableCellRenderer getCellRenderer(int row,
                                                           int column)
Overrides:getCellRenderer in class javax.swing.JTable





ensureIndexIsVisible

public void ensureIndexIsVisible(int index)
Scrolls the viewport to the row at the specified index.
 Stolen from javax.swing.JList.

Parameters:index - the index of the row.




getMarkedFiles

public java.util.List<java.lang.Integer> getMarkedFiles()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/QuitAction.html
##-----------------TITLE------------------------##
QuitAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class QuitAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.QuitAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class QuitActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryQuitAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 booleanexecuteLocal()


           
 booleanexecuteRemote()


           
 voidsetActionParameter(java.lang.String params)


           
 voidsetLocalView(JFMView local)


           
 voidsetRemoteView(IRemoteView remote)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, loadComponent, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


QuitAction

public QuitAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





executeLocal

public boolean executeLocal()
Specified by:executeLocal in interface IActionOverrides:executeLocal in class AbstractFileAction





executeRemote

public boolean executeRemote()
Specified by:executeRemote in interface IActionOverrides:executeRemote in class AbstractFileAction





setActionParameter

public void setActionParameter(java.lang.String params)
Specified by:setActionParameter in interface IActionOverrides:setActionParameter in class AbstractFileAction





setLocalView

public void setLocalView(JFMView local)
Specified by:setLocalView in interface IActionOverrides:setLocalView in class AbstractFileAction





setRemoteView

public void setRemoteView(IRemoteView remote)
Specified by:setRemoteView in interface IActionOverrides:setRemoteView in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/XmlModel/FileNotExistException.html
##-----------------TITLE------------------------##
FileNotExistException
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.XmlModel

Class FileNotExistException

java.lang.Object
  java.lang.Throwable
      java.lang.Exception
          org.itr_rescue.dataGuard.remoteView.XmlModel.FileNotExistException

All Implemented Interfaces: java.io.Serializable

public class FileNotExistExceptionextends java.lang.Exception



See Also:Serialized Form








Constructor SummaryFileNotExistException()


           FileNotExistException(java.lang.String msg)


           
 




Method Summary
 
Methods inherited from class java.lang.ThrowablefillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


FileNotExistException

public FileNotExistException()




FileNotExistException

public FileNotExistException(java.lang.String msg)










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMView.html
##-----------------TITLE------------------------##
JFMView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class JFMView

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JPanel
                  org.itr_rescue.dataGuard.localFileSystem.JFMView

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible
Direct Known Subclasses: ListView

public abstract class JFMViewextends javax.swing.JPanel



Title:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu SergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JPaneljavax.swing.JPanel.AccessibleJPanel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
static JFMViewRepresentationDEFAULT_VIEW


          The default view is the org.jfm.views.list.detailview.DetailView.
protected  JFMFileSystemfilesystem


          The view's filesystem.
protected  booleanisActive


           
protected  javax.swing.JLabelstatusLabel


           
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryJFMView()


          Empty constructor.JFMView(java.lang.String fileSystemName)


           
 




Method Summary
abstract  voidchangeDirectory(JFMFile file)


           
static JFMViewcreateView(JFMViewRepresentation representation,
           java.lang.String filesystem)


          This method creates the view specified by name.
abstract  JFMFilegetCurrentWorkingDirectory()


          This method returns the current working directory of the view.
abstract  JFMFilegetFilefromName(java.lang.String fileName)


           
 java.lang.StringgetFilesystemName()


           
static java.util.VectorgetRegisteredViews()


          Returns the registered views
abstract  JFMFilegetSelectedFile()


          This method returns the current selected file from the view.
abstract  JFMFile[]getSelectedFiles()


          This method returns the current selected files from the view.
static JFMViewRepresentationgetViewRepresentation(java.lang.String className)


          Returns a JFMRepresentation instance (taken from the registered views list)
 that has the className equals with the specified name
 booleanisActive()


           
abstract  voidrefresh()


           
static voidregisterView(JFMViewRepresentation view)


          Add a view to the registered views list
static voidregisterViews()


          This method searches for the defined views, and adds them to the registered view's list.
 voidsetActive(boolean flag)


           
 
Methods inherited from class javax.swing.JPanelgetAccessibleContext, getUI, getUIClassID, paramString, setUI, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Field Detail


isActive

protected boolean isActive





statusLabel

protected javax.swing.JLabel statusLabel





DEFAULT_VIEW

public static final JFMViewRepresentation DEFAULT_VIEW
The default view is the org.jfm.views.list.detailview.DetailView. This is the fallback view that will be created if the requested
 view isn't available.






filesystem

protected JFMFileSystem filesystem
The view's filesystem.








Constructor Detail


JFMView

public JFMView()
Empty constructor. Calls the init() method.





JFMView

public JFMView(java.lang.String fileSystemName)






Method Detail


getCurrentWorkingDirectory

public abstract JFMFile getCurrentWorkingDirectory()
This method returns the current working directory of the view. If it doesn't make sense to return it,
 null should be an acceptable value.

Returns:JFMFile the current working directory.




getSelectedFile

public abstract JFMFile getSelectedFile()
This method returns the current selected file from the view. If no file is selected it just returns null.

Returns:JFMFile the current selected file.




getSelectedFiles

public abstract JFMFile[] getSelectedFiles()
This method returns the current selected files from the view. If no files are selected it just returns null.

Returns:JFMFile the current selected files.




getFilefromName

public abstract JFMFile getFilefromName(java.lang.String fileName)





changeDirectory

public abstract void changeDirectory(JFMFile file)





setActive

public void setActive(boolean flag)





isActive

public boolean isActive()





refresh

public abstract void refresh()





registerViews

public static void registerViews()
This method searches for the defined views, and adds them to the registered view's list.






registerView

public static void registerView(JFMViewRepresentation view)
Add a view to the registered views list

Parameters:view - the view to be registered




getRegisteredViews

public static java.util.Vector getRegisteredViews()
Returns the registered views

Returns:the registered views




getViewRepresentation

public static JFMViewRepresentation getViewRepresentation(java.lang.String className)
Returns a JFMRepresentation instance (taken from the registered views list)
 that has the className equals with the specified name

Parameters:className - the className of the JFMRepresentation class that we're looking for
Returns:a JFMRepresentation instance




createView

public static JFMView createView(JFMViewRepresentation representation,
                                 java.lang.String filesystem)
This method creates the view specified by name. If the view is not found the the default view is returned.

Parameters:name - The views representation
Returns:a representation view




getFilesystemName

public java.lang.String getFilesystemName()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/IndexQueue.html
##-----------------TITLE------------------------##
IndexQueue
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.FileQueue

Class IndexQueue

java.lang.Object
  org.itr_rescue.dataGuard.FileQueue.IndexQueue

All Implemented Interfaces: java.lang.Runnable

public class IndexQueueextends java.lang.Objectimplements java.lang.Runnable











Constructor SummaryIndexQueue(QueueManager parent)


           
 




Method Summary
 voidaddAction(IAction action)


           
 voidrun()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


IndexQueue

public IndexQueue(QueueManager parent)






Method Detail


addAction

public void addAction(IAction action)






run

public void run()
Specified by:run in interface java.lang.Runnable











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/FileQueue/QueueManager.html
##-----------------TITLE------------------------##
QueueManager
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.FileQueue

Class QueueManager

java.lang.Object
  org.itr_rescue.dataGuard.FileQueue.QueueManager


public class QueueManagerextends java.lang.Object











Constructor SummaryQueueManager()


           
 




Method Summary
 voidaddAction(IAction action)


           
 FileContentQueuegetContentQueue()


           
 IndexQueuegetIndexQueue()


           
 FileMetadataQueuegetMetadataQueue()


           
 booleanisContentQueueRunning()


           
 booleanisIndexQueueRunning()


           
 booleanisMetadataQueueRunning()


           
 voidsetContentQueueRunning(boolean contentQueueRunning)


           
 voidsetIndexQueueRunning(boolean indexQueueRunning)


           
 voidsetMetadataQueueRunning(boolean metadataQueueRunning)


           
 voidstartContentQueue()


           
 voidstartIndexQueue()


           
 voidstartMetadataQueue()


           
 voidstopContentQueue()


           
 voidstopIndexQueue()


           
 voidstopMetadataQueue()


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


QueueManager

public QueueManager()






Method Detail


getContentQueue

public FileContentQueue getContentQueue()





getMetadataQueue

public FileMetadataQueue getMetadataQueue()





getIndexQueue

public IndexQueue getIndexQueue()





startContentQueue

public void startContentQueue()





startMetadataQueue

public void startMetadataQueue()





startIndexQueue

public void startIndexQueue()





stopContentQueue

public void stopContentQueue()





stopMetadataQueue

public void stopMetadataQueue()





stopIndexQueue

public void stopIndexQueue()





isContentQueueRunning

public boolean isContentQueueRunning()





setContentQueueRunning

public void setContentQueueRunning(boolean contentQueueRunning)





isMetadataQueueRunning

public boolean isMetadataQueueRunning()





setMetadataQueueRunning

public void setMetadataQueueRunning(boolean metadataQueueRunning)





isIndexQueueRunning

public boolean isIndexQueueRunning()





setIndexQueueRunning

public void setIndexQueueRunning(boolean indexQueueRunning)





addAction

public void addAction(IAction action)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/symmetric/FileEncryptor.html
##-----------------TITLE------------------------##
FileEncryptor
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption.symmetric

Class FileEncryptor

java.lang.Object
  org.itr_rescue.dataGuard.encryption.symmetric.FileEncryptor


public class FileEncryptorextends java.lang.Object











Constructor SummaryFileEncryptor()


           
 




Method Summary
static java.io.FilegetDecryptedFile(java.io.File source,
                 java.io.File dest)


           
static java.io.FilegetEncryptedFile(java.io.File source,
                 java.io.File dest)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


FileEncryptor

public FileEncryptor()






Method Detail


getEncryptedFile

public static java.io.File getEncryptedFile(java.io.File source,
                                            java.io.File dest)





getDecryptedFile

public static java.io.File getDecryptedFile(java.io.File source,
                                            java.io.File dest)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/indexing/parser/IParser.html
##-----------------TITLE------------------------##
IParser
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.indexing.parser

Interface IParser
All Known Implementing Classes: TextExtractorFromTxt

public interface IParser











Method Summary
 java.lang.StringgetNextWord()


           
 booleanhasMoreWords()


           
 voidsetContent(java.lang.String absoluteFilePath)


           
 






Method Detail


hasMoreWords

boolean hasMoreWords()





getNextWord

java.lang.String getNextWord()





setContent

void setContent(java.lang.String absoluteFilePath)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/DataGuardFrame.html
##-----------------TITLE------------------------##
DataGuardFrame
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui

Class DataGuardFrame

java.lang.Object
  java.awt.Component
      java.awt.Container
          java.awt.Window
              java.awt.Frame
                  javax.swing.JFrame
                      org.itr_rescue.dataGuard.ui.DataGuardFrame

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.RootPaneContainer, javax.swing.WindowConstants

public class DataGuardFrameextends javax.swing.JFrame



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JFramejavax.swing.JFrame.AccessibleJFrame
 

Nested classes/interfaces inherited from class java.awt.Framejava.awt.Frame.AccessibleAWTFrame
 

Nested classes/interfaces inherited from class java.awt.Windowjava.awt.Window.AccessibleAWTWindow
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JFrameaccessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled
 
Fields inherited from class java.awt.FrameCROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.WindowConstantsDISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDataGuardFrame()


          Construct the frame
 




Method Summary
 voidjMenuFileExit_actionPerformed(java.awt.event.ActionEvent e)


          File | Exit action performed
 voidjMenuHelpAbout_actionPerformed(java.awt.event.ActionEvent e)


          Help | About action performed
protected  voidprocessWindowEvent(java.awt.event.WindowEvent e)


          Overridden so we can exit when window is closed
 
Methods inherited from class javax.swing.JFrameaddImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update
 
Methods inherited from class java.awt.FrameaddNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setResizable, setState, setTitle, setUndecorated
 
Methods inherited from class java.awt.WindowaddPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getGraphicsConfiguration, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOwnedWindows, getOwner, getOwnerlessWindows, getToolkit, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isShowing, pack, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setVisible, show, toBack, toFront
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paint, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isOpaque, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, setBackground, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setLocation, setLocation, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 
Methods inherited from interface java.awt.MenuContainergetFont, postEvent
 






Constructor Detail


DataGuardFrame

public DataGuardFrame()
Construct the frame







Method Detail


jMenuFileExit_actionPerformed

public void jMenuFileExit_actionPerformed(java.awt.event.ActionEvent e)
File | Exit action performed






jMenuHelpAbout_actionPerformed

public void jMenuHelpAbout_actionPerformed(java.awt.event.ActionEvent e)
Help | About action performed






processWindowEvent

protected void processWindowEvent(java.awt.event.WindowEvent e)
Overridden so we can exit when window is closed

Overrides:processWindowEvent in class javax.swing.JFrame











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/RemoteFileSystemViewModel.html
##-----------------TITLE------------------------##
RemoteFileSystemViewModel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.FileSystem

Class RemoteFileSystemViewModel

java.lang.Object
  javax.swing.table.AbstractTableModel
      javax.swing.table.DefaultTableModel
          org.itr_rescue.dataGuard.remoteView.FileSystem.RemoteFileSystemViewModel

All Implemented Interfaces: java.io.Serializable, javax.swing.table.TableModel

public class RemoteFileSystemViewModelextends javax.swing.table.DefaultTableModel



See Also:Serialized Form







Field Summary
 inteditableRow


           
 
Fields inherited from class javax.swing.table.DefaultTableModelcolumnIdentifiers, dataVector
 
Fields inherited from class javax.swing.table.AbstractTableModellistenerList
 




Constructor SummaryRemoteFileSystemViewModel()


           
 




Method Summary
 booleanisCellEditable(int row,
               int column)


           
 voidnoEditableRow()


           
 voidsetEditableRow(int row)


           
 
Methods inherited from class javax.swing.table.DefaultTableModeladdColumn, addColumn, addColumn, addRow, addRow, convertToVector, convertToVector, getColumnCount, getColumnName, getDataVector, getRowCount, getValueAt, insertRow, insertRow, moveRow, newDataAvailable, newRowsAdded, removeRow, rowsRemoved, setColumnCount, setColumnIdentifiers, setColumnIdentifiers, setDataVector, setDataVector, setNumRows, setRowCount, setValueAt
 
Methods inherited from class javax.swing.table.AbstractTableModeladdTableModelListener, findColumn, fireTableCellUpdated, fireTableChanged, fireTableDataChanged, fireTableRowsDeleted, fireTableRowsInserted, fireTableRowsUpdated, fireTableStructureChanged, getColumnClass, getListeners, getTableModelListeners, removeTableModelListener
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


editableRow

public int editableRow







Constructor Detail


RemoteFileSystemViewModel

public RemoteFileSystemViewModel()






Method Detail


isCellEditable

public boolean isCellEditable(int row,
                              int column)
Specified by:isCellEditable in interface javax.swing.table.TableModelOverrides:isCellEditable in class javax.swing.table.DefaultTableModel





setEditableRow

public void setEditableRow(int row)





noEditableRow

public void noEditableRow()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/NewServiceAction.html
##-----------------TITLE------------------------##
NewServiceAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class NewServiceAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.NewServiceAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class NewServiceActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryNewServiceAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, execute, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


NewServiceAction

public NewServiceAction()






Method Detail


compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Utilities/ByteConverter.html
##-----------------TITLE------------------------##
ByteConverter
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.Utilities

Class ByteConverter

java.lang.Object
  org.itr_rescue.dataGuard.Utilities.ByteConverter


public class ByteConverterextends java.lang.Object



Title: 

 Description: 

 Copyright: Copyright (c) 2007

 Company: 



Version:1.0Author:not attributable








Constructor SummaryByteConverter()


           
 




Method Summary
static java.lang.Stringconvert(long bytes)


           
static java.lang.Stringconvert(java.lang.String bytes)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ByteConverter

public ByteConverter()






Method Detail


convert

public static java.lang.String convert(long bytes)





convert

public static java.lang.String convert(java.lang.String bytes)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/encryption/asymmetric/RSACrypto.html
##-----------------TITLE------------------------##
RSACrypto
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.encryption.asymmetric

Class RSACrypto

java.lang.Object
  org.itr_rescue.dataGuard.encryption.asymmetric.RSACrypto


public class RSACryptoextends java.lang.Object











Constructor SummaryRSACrypto()


           
 




Method Summary
 byte[]decrypt(byte[] CipherText,
        java.security.Key PKey)


          Function Decrypt:
 byte[]encrypt(byte[] PlainText,
        java.security.Key PKey)


          Function Decrypt:
 java.security.KeyPairGenerateKeys(java.lang.String MasterPassword)


          Function that generates an RSA key Pair
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


RSACrypto

public RSACrypto()






Method Detail


GenerateKeys

public java.security.KeyPair GenerateKeys(java.lang.String MasterPassword)
                                   throws java.lang.Exception
Function that generates an RSA key Pair

Parameters:MasterPassword: - Used to deterministically determine the RSA key pair
Throws:
java.lang.Exception




encrypt

public byte[] encrypt(byte[] PlainText,
                      java.security.Key PKey)
               throws java.lang.Exception
Function Decrypt:

Parameters:PlainText: - The unencrypted textPKey: - Public key or the Private Key
Returns:An encrypted representation of the plaintext.
Throws:
java.lang.Exception




decrypt

public byte[] decrypt(byte[] CipherText,
                      java.security.Key PKey)
               throws java.lang.Exception
Function Decrypt:

Parameters:CipherText: - The encrypted textKey: - Public key or the Private Key
Returns:The decrypted representation of the plaintext.
Throws:
java.lang.Exception










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/DetailsTableCellRenderer.html
##-----------------TITLE------------------------##
DetailsTableCellRenderer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.detail

Class DetailsTableCellRenderer

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  javax.swing.table.DefaultTableCellRenderer
                      org.itr_rescue.dataGuard.localFileSystem.view.detail.DetailsTableCellRenderer

All Implemented Interfaces: java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, javax.accessibility.Accessible, javax.swing.SwingConstants, javax.swing.table.TableCellRenderer

public class DetailsTableCellRendererextends javax.swing.table.DefaultTableCellRenderer



Title: Java File Manager Description: Copyright: Copyright (c) 2001 Company:
 Home



Version:1.0Author:Giurgiu SergiuSee Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.table.DefaultTableCellRendererjavax.swing.table.DefaultTableCellRenderer.UIResource
 

Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.table.DefaultTableCellRenderernoFocusBorder
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryDetailsTableCellRenderer()


           
 




Method Summary
 java.awt.ComponentgetTableCellRendererComponent(javax.swing.JTable table,
                              java.lang.Object value,
                              boolean isSelected,
                              boolean hasFocus,
                              int row,
                              int column)


           
 
Methods inherited from class javax.swing.table.DefaultTableCellRendererfirePropertyChange, firePropertyChange, invalidate, isOpaque, repaint, repaint, repaint, revalidate, setBackground, setForeground, setValue, updateUI, validate
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


DetailsTableCellRenderer

public DetailsTableCellRenderer()






Method Detail


getTableCellRendererComponent

public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table,
                                                        java.lang.Object value,
                                                        boolean isSelected,
                                                        boolean hasFocus,
                                                        int row,
                                                        int column)
Specified by:getTableCellRendererComponent in interface javax.swing.table.TableCellRendererOverrides:getTableCellRendererComponent in class javax.swing.table.DefaultTableCellRenderer











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/ui/event/ChangeDirectoryEvent.html
##-----------------TITLE------------------------##
ChangeDirectoryEvent
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.ui.event

Class ChangeDirectoryEvent

java.lang.Object
  org.itr_rescue.dataGuard.ui.event.BroadcastEvent
      org.itr_rescue.dataGuard.ui.event.ChangeDirectoryEvent


public class ChangeDirectoryEventextends BroadcastEvent



Title:        Java File Manager
 Description:
 Copyright:    Copyright (c) 2001
 Company:      Home



Version:1.0Author:Giurgiu Sergiu







Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventCHANGE_BGCOLOR_TYPE, CHANGE_DIR_TYPE, CHANGE_FGCOLOR_TYPE, CHANGE_FILESYSTEM_TYPE, CHANGE_FONT_TYPE, CHANGE_HELP_URL, CHANGE_MKCOLOR_TYPE, CHANGE_PANEL_TYPE, CHANGE_VIEW_TYPE, FILE_LIST_SELECTION_TYPE, UNKNOWN_TYPE
 




Constructor SummaryChangeDirectoryEvent()


           ChangeDirectoryEvent(JFMFile dir)


           
 




Method Summary
 JFMFilegetDirectory()


           
 intgetType()


           
 voidsetDirectory(JFMFile directory)


           
 
Methods inherited from class org.itr_rescue.dataGuard.ui.event.BroadcastEventequals, getSource, getUserObject, setSource, setUserObject
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


ChangeDirectoryEvent

public ChangeDirectoryEvent()




ChangeDirectoryEvent

public ChangeDirectoryEvent(JFMFile dir)






Method Detail


getType

public int getType()
Specified by:getType in class BroadcastEvent
Returns:Returns the type of the event.




getDirectory

public JFMFile getDirectory()





setDirectory

public void setDirectory(JFMFile directory)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/MoveFileAction.html
##-----------------TITLE------------------------##
MoveFileAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class MoveFileAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.MoveFileAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class MoveFileActionextends AbstractFileAction










Field Summary
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryMoveFileAction()


           
 




Method Summary
protected  voidcheckTransferType()


           
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionexecuteLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


MoveFileAction

public MoveFileAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





checkTransferType

protected void checkTransferType()
Overrides:checkTransferType in class AbstractFileAction





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/StorageServerManager.html
##-----------------TITLE------------------------##
StorageServerManager
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer

Class StorageServerManager

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.StorageServerManager


public class StorageServerManagerextends java.lang.Object











Constructor SummaryStorageServerManager()


           
 




Method Summary
 voidaddStorageServer(IStorageServer s)


           
 IStorageServergetDefaultServer()


           
 voidgetStorageServer(java.lang.String serviceKey)


           
 voidloadStorageServer(java.lang.String storageServerCode)


           
 voidsetDefaultServer(IStorageServer defaultServer)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


StorageServerManager

public StorageServerManager()






Method Detail


addStorageServer

public void addStorageServer(IStorageServer s)





getStorageServer

public void getStorageServer(java.lang.String serviceKey)





loadStorageServer

public void loadStorageServer(java.lang.String storageServerCode)





getDefaultServer

public IStorageServer getDefaultServer()





setDefaultServer

public void setDefaultServer(IStorageServer defaultServer)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/view/detail/PanelChangeRequestListener.html
##-----------------TITLE------------------------##
PanelChangeRequestListener
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem.view.detail

Interface PanelChangeRequestListener

public interface PanelChangeRequestListener



This interface is to let the panel that contains the JTable that a panel change request has been
 requested;



Author:sergiu








Method Summary
 voidrequestPanelChange()


           
 






Method Detail


requestPanelChange

void requestPanelChange()











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/FSException.html
##-----------------TITLE------------------------##
FSException
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.localFileSystem

Class FSException

java.lang.Object
  java.lang.Throwable
      java.lang.Exception
          org.itr_rescue.dataGuard.localFileSystem.FSException

All Implemented Interfaces: java.io.Serializable

public class FSExceptionextends java.lang.Exception



FileSystem Exception. this exception is thrown whenever a filesystem related problem might occur (e.g. an i/o problem)



Author:sergiuSee Also:Serialized Form








Constructor SummaryFSException()


           FSException(java.lang.String message)


           FSException(java.lang.String message,
            java.lang.Throwable cause)


           FSException(java.lang.Throwable cause)


           
 




Method Summary
 
Methods inherited from class java.lang.ThrowablefillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


FSException

public FSException()




FSException

public FSException(java.lang.String message)




FSException

public FSException(java.lang.Throwable cause)




FSException

public FSException(java.lang.String message,
                   java.lang.Throwable cause)










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/StorageServer/AmazonS3/AmazonStorageServer.html
##-----------------TITLE------------------------##
AmazonStorageServer
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.StorageServer.AmazonS3

Class AmazonStorageServer

java.lang.Object
  org.itr_rescue.dataGuard.StorageServer.AbstractStorageServer
      org.itr_rescue.dataGuard.StorageServer.AmazonS3.AmazonStorageServer

All Implemented Interfaces: IRemoteIndexing, IStorageServer

public class AmazonStorageServerextends AbstractStorageServerimplements IRemoteIndexing











Constructor SummaryAmazonStorageServer(java.lang.String username,
                    java.lang.String password)


           
 




Method Summary
 intconnect(java.lang.String username,
        java.lang.String password)


           
 intdelete(AbstractObjectData o)


           
 voiddisconnect()


           
 intfetch(AbstractObjectData o,
      java.lang.String path)


           
 java.lang.StringgetServiceDescription()


           
 java.lang.StringgetServiceType()


           
 voidloadService()


           
 java.io.File[]queryIndex(java.lang.String[] searchString,
           java.lang.String path)


           
 intstore(AbstractObjectData o,
      java.lang.String id)


           
 voidstoreIndex(IIndex index)


           
 
Methods inherited from class org.itr_rescue.dataGuard.StorageServer.AbstractStorageServergetPassword, getService_url, getServiceKey, getUsername, setPassword, setService_url, setUsername
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


AmazonStorageServer

public AmazonStorageServer(java.lang.String username,
                           java.lang.String password)






Method Detail


loadService

public void loadService()
Overrides:loadService in class AbstractStorageServer





connect

public int connect(java.lang.String username,
                   java.lang.String password)
Specified by:connect in interface IStorageServerSpecified by:connect in class AbstractStorageServer





disconnect

public void disconnect()
Specified by:disconnect in interface IStorageServerSpecified by:disconnect in class AbstractStorageServer





fetch

public int fetch(AbstractObjectData o,
                 java.lang.String path)
Specified by:fetch in interface IStorageServerSpecified by:fetch in class AbstractStorageServer





getServiceDescription

public java.lang.String getServiceDescription()
Specified by:getServiceDescription in class AbstractStorageServer





getServiceType

public java.lang.String getServiceType()
Specified by:getServiceType in class AbstractStorageServer





store

public int store(AbstractObjectData o,
                 java.lang.String id)
Specified by:store in interface IStorageServerSpecified by:store in class AbstractStorageServer





delete

public int delete(AbstractObjectData o)
Specified by:delete in interface IStorageServerSpecified by:delete in class AbstractStorageServer





storeIndex

public void storeIndex(IIndex index)
Specified by:storeIndex in interface IRemoteIndexing





queryIndex

public java.io.File[] queryIndex(java.lang.String[] searchString,
                                 java.lang.String path)
Specified by:queryIndex in interface IRemoteIndexing











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/DataObjectModel/FileSearchAction.html
##-----------------TITLE------------------------##
FileSearchAction
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.DataObjectModel

Class FileSearchAction

java.lang.Object
  org.itr_rescue.dataGuard.DataObjectModel.AbstractFileAction
      org.itr_rescue.dataGuard.DataObjectModel.FileSearchAction

All Implemented Interfaces: java.lang.Comparable, IAction

public class FileSearchActionextends AbstractFileAction










Field Summary
static intCONTENT_SEARCH


           
static intMETADATA_AND_CONTENT_SEARCH


           
static intMETADATA_SEARCH


           
protected  intsearchType


           
 
Fields inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActionactionParameter, actionPriority, fileSystem, localPath, localView, remotePath, remoteView, selectedLocalFiles, selectedRemoteFiles, transferType
 




Constructor SummaryFileSearchAction()


           
 




Method Summary
 intcompareTo(java.lang.Object arg0)


           
 booleanexecute()


           
 voidsetSearchType(int searchType)


           
 
Methods inherited from class org.itr_rescue.dataGuard.DataObjectModel.AbstractFileActioncheckTransferType, executeLocal, executeRemote, loadComponent, setActionParameter, setLocalView, setRemoteView, setSelectedObjects
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Field Detail


searchType

protected int searchType





METADATA_SEARCH

public static final int METADATA_SEARCH
See Also:Constant Field Values




CONTENT_SEARCH

public static final int CONTENT_SEARCH
See Also:Constant Field Values




METADATA_AND_CONTENT_SEARCH

public static final int METADATA_AND_CONTENT_SEARCH
See Also:Constant Field Values






Constructor Detail


FileSearchAction

public FileSearchAction()






Method Detail


execute

public boolean execute()
Specified by:execute in interface IActionOverrides:execute in class AbstractFileAction





setSearchType

public void setSearchType(int searchType)





compareTo

public int compareTo(java.lang.Object arg0)
Specified by:compareTo in interface java.lang.ComparableSpecified by:compareTo in class AbstractFileAction











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/JDB2LinkLabel.html
##-----------------TITLE------------------------##
JDB2LinkLabel
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView

Class JDB2LinkLabel

java.lang.Object
  java.awt.Component
      java.awt.Container
          javax.swing.JComponent
              javax.swing.JLabel
                  org.itr_rescue.dataGuard.ui.JLinkLabel
                      org.itr_rescue.dataGuard.remoteView.JDB2LinkLabel

All Implemented Interfaces: java.awt.event.MouseListener, java.awt.image.ImageObserver, java.awt.MenuContainer, java.io.Serializable, java.util.EventListener, javax.accessibility.Accessible, javax.swing.SwingConstants

public class JDB2LinkLabelextends JLinkLabel



See Also:Serialized Form







Nested Class Summary
 
Nested classes/interfaces inherited from class javax.swing.JLabeljavax.swing.JLabel.AccessibleJLabel
 

Nested classes/interfaces inherited from class javax.swing.JComponentjavax.swing.JComponent.AccessibleJComponent
 

Nested classes/interfaces inherited from class java.awt.Containerjava.awt.Container.AccessibleAWTContainer
 

Nested classes/interfaces inherited from class java.awt.Componentjava.awt.Component.AccessibleAWTComponent, java.awt.Component.BaselineResizeBehavior, java.awt.Component.BltBufferStrategy, java.awt.Component.FlipBufferStrategy
 




Field Summary
 
Fields inherited from class javax.swing.JLabellabelFor
 
Fields inherited from class javax.swing.JComponentaccessibleContext, listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
 
Fields inherited from class java.awt.ComponentBOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
 
Fields inherited from interface javax.swing.SwingConstantsBOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
 
Fields inherited from interface java.awt.image.ImageObserverABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
 




Constructor SummaryJDB2LinkLabel()


           
 




Method Summary
 java.lang.StringgetServiceDescription()


           
 voidmouseClicked(java.awt.event.MouseEvent arg0)


          This method have to be definied from the subclass,
 specifying what to do after clicking.
 
Methods inherited from class org.itr_rescue.dataGuard.ui.JLinkLabelgetServiceIcon, mouseEntered, mouseExited, mousePressed, mouseReleased
 
Methods inherited from class javax.swing.JLabelcheckHorizontalKey, checkVerticalKey, getAccessibleContext, getDisabledIcon, getDisplayedMnemonic, getDisplayedMnemonicIndex, getHorizontalAlignment, getHorizontalTextPosition, getIcon, getIconTextGap, getLabelFor, getText, getUI, getUIClassID, getVerticalAlignment, getVerticalTextPosition, imageUpdate, paramString, setDisabledIcon, setDisplayedMnemonic, setDisplayedMnemonic, setDisplayedMnemonicIndex, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabelFor, setText, setUI, setVerticalAlignment, setVerticalTextPosition, updateUI
 
Methods inherited from class javax.swing.JComponentaddAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getNextFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintChildren, paintComponent, paintImmediately, paintImmediately, print, printAll, printBorder, printChildren, printComponent, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setNextFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
 
Methods inherited from class java.awt.Containeradd, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusBackward, transferFocusDownCycle, validate, validateTree
 
Methods inherited from class java.awt.Componentaction, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, checkImage, checkImage, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMethods, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, hide, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusUpCycle
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 






Constructor Detail


JDB2LinkLabel

public JDB2LinkLabel()






Method Detail


getServiceDescription

public java.lang.String getServiceDescription()
Overrides:getServiceDescription in class JLinkLabel





mouseClicked

public void mouseClicked(java.awt.event.MouseEvent arg0)
Description copied from class: JLinkLabelThis method have to be definied from the subclass,
 specifying what to do after clicking.

Specified by:mouseClicked in interface java.awt.event.MouseListenerOverrides:mouseClicked in class JLinkLabel











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/Configuration/DataGuardServiceConfiguration.html
##-----------------TITLE------------------------##
DataGuardServiceConfiguration
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.Configuration

Class DataGuardServiceConfiguration

java.lang.Object
  org.itr_rescue.dataGuard.Configuration.DataGuardServiceConfiguration


public class DataGuardServiceConfigurationextends java.lang.Object











Constructor SummaryDataGuardServiceConfiguration()


           
 




Method Summary
static java.lang.StringgetAmazonLink()


           
static java.lang.StringgetAmazonServiceName()


           
static java.lang.StringgetDB2Link()


           
static java.lang.StringgetDB2ServiceName()


           
static java.lang.StringgetGmailLink()


           
static java.lang.StringgetGmailServiceName()


           
static voidgetJAmazonLinkLabel()


           
static voidgetJDB2LinkLabel()


           
static voidgetJgVaultLinkLabel()


           
static java.util.List<JLinkLabel>getLabelCache()


           
static java.util.List<JLinkLabel>getLabels()


           
static voidsetAmazonLink(java.lang.String amazonLink)


           
static voidsetAmazonServiceName(java.lang.String amazonServiceName)


           
static voidsetDB2Link(java.lang.String link)


           
static voidsetDB2ServiceName(java.lang.String serviceName)


           
static voidsetGmailLink(java.lang.String gmailLink)


           
static voidsetGmailServiceName(java.lang.String gmailServiceName)


           
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


DataGuardServiceConfiguration

public DataGuardServiceConfiguration()






Method Detail


getAmazonServiceName

public static java.lang.String getAmazonServiceName()





setAmazonServiceName

public static void setAmazonServiceName(java.lang.String amazonServiceName)





getAmazonLink

public static java.lang.String getAmazonLink()





setAmazonLink

public static void setAmazonLink(java.lang.String amazonLink)





getJAmazonLinkLabel

public static void getJAmazonLinkLabel()





getJDB2LinkLabel

public static void getJDB2LinkLabel()





getJgVaultLinkLabel

public static void getJgVaultLinkLabel()





getLabelCache

public static java.util.List<JLinkLabel> getLabelCache()





getLabels

public static java.util.List<JLinkLabel> getLabels()





getGmailLink

public static java.lang.String getGmailLink()





setGmailLink

public static void setGmailLink(java.lang.String gmailLink)





getGmailServiceName

public static java.lang.String getGmailServiceName()





setGmailServiceName

public static void setGmailServiceName(java.lang.String gmailServiceName)





getDB2ServiceName

public static java.lang.String getDB2ServiceName()





setDB2ServiceName

public static void setDB2ServiceName(java.lang.String serviceName)





getDB2Link

public static java.lang.String getDB2Link()





setDB2Link

public static void setDB2Link(java.lang.String link)











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/remoteView/FileSystem/IRemoteFileSystemView.html
##-----------------TITLE------------------------##
IRemoteFileSystemView
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







org.itr_rescue.dataGuard.remoteView.FileSystem

Interface IRemoteFileSystemView
All Superinterfaces: IRemoteView
All Known Implementing Classes: RemoteFileSearchView, RemoteFileSystemView

public interface IRemoteFileSystemViewextends IRemoteView











Method Summary
 voidaddFile(AbstractObjectData object)


           
 voiddeleteFile(java.lang.String fileId)


           
 voiddisplayContentsOfDirectory(java.lang.String dirName)


           
 voidformat()


           
 javax.swing.JPopupMenugetFilePopupMenu()


           
 XmlFileSystemModelgetFileSystem()


           
 javax.swing.JPopupMenugetFolderPopupMenu()


           
 AbstractObjectDatagetSelectedFile()


           
 AbstractObjectData[]getSelectedFiles()


           
 java.lang.String[]getSelectedFilesName()


           
 intgetSelectedFilesNumber()


           
 javax.swing.JPopupMenugetVoidPopupMenu()


           
 voidopenDirectory(java.lang.String dirName)


           
 voidrefresh()


           
 
Methods inherited from interface org.itr_rescue.dataGuard.remoteView.IRemoteViewassociateServer, getAction, getOutputPane, getRemoteServer, getRemoteUniqueCode, populate
 






Method Detail


addFile

void addFile(AbstractObjectData object)






deleteFile

void deleteFile(java.lang.String fileId)






openDirectory

void openDirectory(java.lang.String dirName)






getSelectedFilesName

java.lang.String[] getSelectedFilesName()






getSelectedFiles

AbstractObjectData[] getSelectedFiles()






refresh

void refresh()






format

void format()






getSelectedFilesNumber

int getSelectedFilesNumber()






getSelectedFile

AbstractObjectData getSelectedFile()






displayContentsOfDirectory

void displayContentsOfDirectory(java.lang.String dirName)






getFileSystem

XmlFileSystemModel getFileSystem()






getFilePopupMenu

javax.swing.JPopupMenu getFilePopupMenu()






getFolderPopupMenu

javax.swing.JPopupMenu getFolderPopupMenu()






getVoidPopupMenu

javax.swing.JPopupMenu getVoidPopupMenu()












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/resource.frk/
##-----------------TITLE------------------------##
Index of /~magda/Courses/resource.frk
##------------------TEXT------------------------##
Index of /~magda/Courses/resource.frk
NameLast modifiedSizeDescriptionParent Directory   -  243b.tar04-Feb-2002 16:21  384  Ntworking Lab04-Feb-2002 15:31  384  Wireless04-Feb-2002 15:31  384  ics15604-Feb-2002 15:33  384  ics156.tar04-Feb-2002 16:21  384  ics243B04-Feb-2002 15:31  384  ics243E04-Feb-2002 15:31  384  lab3_v13.pdf04-Feb-2002 15:31  384  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/netsys230/
##-----------------TITLE------------------------##
Index of /~magda/Courses/netsys230
##------------------TEXT------------------------##
Index of /~magda/Courses/netsys230
NameLast modifiedSizeDescriptionParent Directory   -  243E_Project_List.htm09-Apr-2003 23:36  5.2K Ch0-Overview.ppt09-Apr-2003 23:58  163K Ch1-Introduction.ppt09-Apr-2003 23:58  1.0M Ch2-Wireless_Transmission.ppt10-Apr-2003 01:25  642K Ch3-Media_Access.ppt22-Jan-2001 08:01  903K Ch4-Wireless_Telecommunication_Systems.ppt05-Feb-2001 08:47  366K Ch5-Wireless_LANs.ppt04-Mar-2001 22:33  2.6M Ch6-Network_Protocols.ppt09-Mar-2001 00:41  1.9M Ch7-Transport_Protocols.ppt11-Mar-2001 11:55  1.2M Ch8-Mobility_Support.ppt12-Mar-2001 11:27  483K Ch9-3G_Cellular.ppt11-Mar-2001 16:17  119K Lab_Rules.htm09-Apr-2003 23:36  6.9K Links.html08-Jan-2001 16:22  7.3K announce.html07-Feb-2001 02:09  1.8K outline.html09-Apr-2003 23:56  2.4K projects.html09-Apr-2003 23:49  935  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/ics156/
##-----------------TITLE------------------------##
Index of /~magda/Courses/ics156
##------------------TEXT------------------------##
Index of /~magda/Courses/ics156
NameLast modifiedSizeDescriptionParent Directory   -  Ch1_1.ppt23-Apr-2000 22:49   25K Ch1_files/26-Oct-2000 10:57    -  Ch2_files/26-Oct-2000 13:08    -  Ch3_files/06-Nov-2000 01:03    -  Ch4_files/13-Nov-2000 12:00    -  Image1.gif30-Jun-1998 22:12  8.6K Image2.gif10-Jul-1998 10:26  1.6K Image3.gif10-Jul-1998 10:26  3.6K Image4.gif10-Jul-1998 10:26  3.9K Image5.gif10-Jul-1998 11:25  1.6K Image6.gif10-Jul-1998 10:27  3.8K Image7.gif10-Jul-1998 10:27  3.5K Image8.gif13-Jul-1998 09:50  2.9K Intro.html07-Sep-2001 14:43   30K Man_TCPDUMP.html25-Sep-2000 11:26   47K Schedule.html28-Jul-1998 19:14  2.4K announce.html29-Jan-2002 09:28  2.5K hypernews.html30-Jun-1998 20:48  530  old_Ch1.html02-Oct-2000 10:36  2.4K old_Ch1.ppt02-Oct-2000 10:35  310K old_Ch2.htm09-Oct-2000 11:59  2.4K old_Ch2.html23-Apr-2000 22:49  2.4K old_Ch2.ppt09-Oct-2000 11:58   81K old_Ch3.ppt06-Nov-2000 01:07  154K old_Ch4.html20-Nov-2000 10:23  2.4K old_Ch4.ppt20-Nov-2000 00:07  102K old_Lab_1.html02-Oct-2000 11:27  124K old_Lab_2.html09-Oct-2000 11:41  113K old_Lab_3.html06-Nov-2000 01:07  110K old_Lab_4.html20-Nov-2000 11:47   66K old_outline.html02-Oct-2000 15:55  4.0K outline.html04-Feb-2002 02:46   32K outline.tml07-Jan-2002 07:28    0  quiz_soln.html07-Jan-2002 07:00  427  q18-Sep-2000 10:57  4.0K resource.frk/04-Feb-2002 15:33    -  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/netsys270/
##-----------------TITLE------------------------##
Index of /~magda/Courses/netsys270
##------------------TEXT------------------------##
Index of /~magda/Courses/netsys270
NameLast modifiedSizeDescriptionParent Directory   -  ch1_v1.ppt03-Oct-2007 18:11  727K ch2_v1.ppt03-Oct-2007 18:12  1.3M ch3_1_v1.ppt04-Oct-2007 00:07  1.7M ch3_2_v1.ppt11-Oct-2007 01:15  617K ch3_3_v1.ppt11-Oct-2007 01:15  396K ch3_4_v1.ppt11-Oct-2007 01:15  450K ch3_5_v1.ppt11-Oct-2007 01:15  361K ch4_1_v1.ppt18-Oct-2007 09:21  1.6M ch4_2_v1.ppt01-Nov-2007 01:40  1.3M ch5_1_v1.ppt02-Nov-2007 10:12  1.2M ch5_2_v1.ppt05-Nov-2007 23:48  348K ch6_1_v1.ppt20-Nov-2007 21:18  1.7M ch6_2_v1.ppt20-Nov-2007 21:18  211K ch7_1_v1.ppt29-Nov-2007 06:16  1.9M ch10_1_v1.ppt29-Nov-2007 06:05  322K ch10_2_v1.ppt09-Dec-2007 21:40  1.8M courses.html01-Nov-2007 01:48  697  hw.html05-Nov-2007 23:48  689  outline.html09-Dec-2007 21:41  4.0K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/ics243B/
##-----------------TITLE------------------------##
Index of /~magda/Courses/ics243B
##------------------TEXT------------------------##
Index of /~magda/Courses/ics243B
NameLast modifiedSizeDescriptionParent Directory   -  announce.html25-Oct-2001 16:51  7.5K labrules.html07-Sep-2001 14:42   30K module00-intro.ppt17-Oct-2003 02:36   12M module01-example.ppt17-Oct-2003 02:29  2.0M module02-review.ppt17-Oct-2003 02:38  1.9M module03-ipaddr.ppt17-Oct-2003 02:41  289K module04-internet.ppt17-Oct-2003 02:27  1.1M module05-datalink.ppt17-Oct-2003 02:37  568K module06-arp.ppt17-Oct-2003 02:28  951K module07-ip.ppt17-Oct-2003 02:37  492K module08-icmp.ppt17-Oct-2003 02:38  368K module09-ipforw.ppt17-Oct-2003 02:41  4.0M module10-rip.ppt17-Oct-2003 02:37  837K module11-ospf.ppt17-Oct-2003 02:29  484K outline.html28-Jan-2002 23:59   33K quiz_soln.html11-Nov-2001 03:06  309  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/Ntworking%20Lab/
##-----------------TITLE------------------------##
Index of /~magda/Courses/Ntworking Lab
##------------------TEXT------------------------##
Index of /~magda/Courses/Ntworking Lab
NameLast modifiedSizeDescriptionParent Directory   -  tcom504/29-Mar-2000 14:33    -  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/Wireless/
##-----------------TITLE------------------------##
Index of /~magda/Courses/Wireless
##------------------TEXT------------------------##
Index of /~magda/Courses/Wireless
NameLast modifiedSizeDescriptionParent Directory   -  outline.html08-Jun-1999 07:57  3.9K projects.html15-Apr-1998 08:56  3.1K tcom510/03-Nov-1999 15:37    -  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/index.htm
##-----------------TITLE------------------------##
Assessing the Suitability of UMLfor Modeling Software Architectures
##------------------TEXT------------------------##
Assessing the Suitability of UMLfor Modeling Software Architectures
7/13/99
 Click here to start

   


 
      Table of Contents
            Assessing the Suitability of UMLfor Modeling Software Architectures

        Outline

        Software Architectures

        Key Architectural Concepts

        Example Architecture

        Architecture Description Languages

        Example ADLs

        Unified Modeling Language: Motivation

        Unified Modeling Language:Standardization

        Unified Modeling Language:Benefits

        Unified Modeling Language:Extensibility

        Modeling Software Architecturesin UML

        Strategy #1:Using UML ìAs Isî

        Strategy #1:UML Metamodeling Architecture

        Strategy #1:Example

        Strategy #2:Constraining UML

        Strategy #2:UML Metamodeling Architecture

        Strategy #2:Example

        Strategy #3:Augmenting UML

        Strategy #3:UML Metamodeling Architecture

        Discussion of Integration Strategies 

        Current Status

        From Architectureto Implementation

        Architectural View Mismatches

        Round-Trip Software Engineering Using UML

        Conclusions


   
	 Author: Nenad Medvidovic
      Email:  neno@sunset.usc.edu  
	
	
	
	
	  Download presentation source
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld001.htm
##-----------------TITLE------------------------##
Assessing the Suitability of UMLfor Modeling Software Architectures
##------------------TEXT------------------------##
Assessing the Suitability of UMLfor Modeling Software Architectures 
 Nenad Medvidovic



Computer Science Department



University of Southern California



Los Angeles, CA 90089-0781



neno@usc.edu



http://sunset.usc.edu/~neno/



 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld026.htm
##-----------------TITLE------------------------##
Conclusions
##------------------TEXT------------------------##
Conclusions 
 Software modeling philosophies



Assumptions



Problem domain modeling



Architectural abstractions



Modeling behavior



Architectural style



Architectural views





 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld010.htm
##-----------------TITLE------------------------##
Unified Modeling Language:Benefits
##------------------TEXT------------------------##
Unified Modeling Language:Benefits 
 Large, useful set of predefined constructs



Extensible



Semi-formal definition of syntax and semantics via



a meta model

descriptive text

constraints

Potential for



wide adoption

standardization

substantial tool support

Basis in experience with mainstream development methods



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld004.htm
##-----------------TITLE------------------------##
Key Architectural Concepts
##------------------TEXT------------------------##
Key Architectural Concepts 
 Components ñ loci of computation and state



Connectors ñ loci of interaction



communication

coordination

mediation

Architectural constraints



structural vs. behavioral

local vs. non-local vs. global

Architectural style



interaction constraints + topological constraints

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld024.htm
##-----------------TITLE------------------------##
Architectural View Mismatches
##------------------TEXT------------------------##
Architectural View Mismatches 
 Different UML diagrams present different system views



redundant information across views

Key challenge is to ensure inter-view consistency



Ramifications on round-trip engineering





 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld007.htm
##-----------------TITLE------------------------##
Example ADLs
##------------------TEXT------------------------##
Example ADLs 
 C2



focus on style-based topological constraints and evolution

static component behavior in 1st order logic

Wright



focus on connectors

dynamic subsystem behavior in CSP

Rapide



focus on system events

dynamic system behavior using event patterns and posets

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld011.htm
##-----------------TITLE------------------------##
Unified Modeling Language:Extensibility
##------------------TEXT------------------------##
Unified Modeling Language:Extensibility 
 New constructs may be added to address new development issues



Three extensibility mechanisms



 constraints

 tagged values 

 stereotypesStereotype Person for instances of meta class Class[1] A Person can be either female or malepersonGender : enum { female, male }

The meta model may also be extended



 results in a new notation

 may be incompatible with UML-compliant tools

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld018.htm
##-----------------TITLE------------------------##
Strategy #2:Example
##------------------TEXT------------------------##
Strategy #2:Example 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld009.htm
##-----------------TITLE------------------------##
Unified Modeling Language:Standardization
##------------------TEXT------------------------##
Unified Modeling Language:Standardization 
 Provides an economy of scale



more and better tools

improved tool interoperability

more skilled developers

lower training costs

Combine the benefits of powerful, specialized notations with those of widely adopted, general notations



specific solution: ìintegrateî ADLs with UML

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld005.htm
##-----------------TITLE------------------------##
Example Architecture
##------------------TEXT------------------------##
Example Architecture 
 Components interact via connectors



Connectors enforce interaction constraints

Configurations reflect topological constraints

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld015.htm
##-----------------TITLE------------------------##
Strategy #1:Example
##------------------TEXT------------------------##
Strategy #1:Example 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld014.htm
##-----------------TITLE------------------------##
Strategy #1:UML Metamodeling Architecture
##------------------TEXT------------------------##
Strategy #1:UML Metamodeling Architecture 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld012.htm
##-----------------TITLE------------------------##
Modeling Software Architecturesin UML
##------------------TEXT------------------------##
Modeling Software Architecturesin UML 
 Strategy #1



use UML ìas isî

enables direct comparison of UML and an ADL

Strategy #2



use UMLís built-in extension mechanisms 

allows automated conformance checking  to architectural style rules

Strategy #3



augment the UML meta model to directly support architectural concerns

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld003.htm
##-----------------TITLE------------------------##
Software Architectures
##------------------TEXT------------------------##
Software Architectures 
 High-level model of a software system



software components

their interactions ñ software connectors

their interconnections ñ configurations

Promise of software architectures



better, more reliable software systems

modeling important system aspects early

ensuring system properties throughout



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld017.htm
##-----------------TITLE------------------------##
Strategy #2:UML Metamodeling Architecture
##------------------TEXT------------------------##
Strategy #2:UML Metamodeling Architecture 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld019.htm
##-----------------TITLE------------------------##
Strategy #3:Augmenting UML
##------------------TEXT------------------------##
Strategy #3:Augmenting UML 
 Introduce explicit architectural constructs and constraints in UML



Introduce additional notations for modeling architectural semantics



Follow an approach similar to Strategy #1 to model specific architectures



Follow an approach similar to Strategy #2 to model specific architectural styles





 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld020.htm
##-----------------TITLE------------------------##
Strategy #3:UML Metamodeling Architecture
##------------------TEXT------------------------##
Strategy #3:UML Metamodeling Architecture 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld021.htm
##-----------------TITLE------------------------##
Discussion of Integration Strategies
##------------------TEXT------------------------##
Discussion of Integration Strategies  
 All three approaches have merits and shortcomings



ìStraightî UML



understandable architectures

manipulable by standard tools

architectural constraint violations

ìConstrainedî UML



ensures architectural constraints

requires complete style specifications

requires OCL-compliant tools

ìExtendedî UML



provides ìnativeî support for architectures

requires backward tool compatibility

may result in incompatible UML versions

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld013.htm
##-----------------TITLE------------------------##
Strategy #1:Using UML ìAs Isî
##------------------TEXT------------------------##
Strategy #1:Using UML ìAs Isî 
 Simultaneous consideration of architecture composition rules and UML notational constructs



Develop a UML domain model



Develop an (informal) architectural diagram



Map domain classes to architectural components



Design class (component) interfaces



Provide constructs for modeling connectors



connectors add no functionality at the domain model level

Model architectural structure in class and/or collaboration diagrams





 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld022.htm
##-----------------TITLE------------------------##
Current Status
##------------------TEXT------------------------##
Current Status 
 Integrated environment for transforming C2-style architectures into UML

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld006.htm
##-----------------TITLE------------------------##
Architecture Description Languages
##------------------TEXT------------------------##
Architecture Description Languages 
 High-level architecture modeling notations



Model architectural structure and behavior



Difference in focus



Varying degrees of formality



Varying levels of tool support



Differences in maturity



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld002.htm
##-----------------TITLE------------------------##
Outline
##------------------TEXT------------------------##
Outline 
 Overview of software architectures



Overview of UML



Modeling software architectures in UML



Lessons learned



Current status



Conclusions



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld016.htm
##-----------------TITLE------------------------##
Strategy #2:Constraining UML
##------------------TEXT------------------------##
Strategy #2:Constraining UML 
 Identify UML meta classes semantically  similar to major architectural constructs



operation, message, port

component, connector, architecture

Define stereotypes and apply them to meta class instances 



use stereotypes to model structural aspects of an architecture

Describe semantics using UML diagrams



sequence, statechart, collaboration, activity

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld025.htm
##-----------------TITLE------------------------##
Round-Trip Software Engineering Using UML
##------------------TEXT------------------------##
Round-Trip Software Engineering Using UML 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld023.htm
##-----------------TITLE------------------------##
From Architectureto Implementation
##------------------TEXT------------------------##
From Architectureto Implementation 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-neno/tsld008.htm
##-----------------TITLE------------------------##
Unified Modeling Language: Motivation
##------------------TEXT------------------------##
Unified Modeling Language: Motivation 
 Community fragmentation



Academic Approach

to Architectures

Industrial Approach

to Architectures

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld027.htm
##-----------------TITLE------------------------##
Example: Modeling ArgoUMLís Search Utility
##------------------TEXT------------------------##
Example: Modeling ArgoUMLís Search Utility 
 Use case diagram



One use case in detail



Interaction contexts for use case



IC navigation map



Abstract window layout for one IC



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/index.htm
##-----------------TITLE------------------------##
Assessing UML and Usability
##------------------TEXT------------------------##
Assessing UML and Usability
7/13/99
 Click here to start

   


 
      Table of Contents
            Assessing UML and Usability

        Part 1: Assessing the Usability ofUML Modeling Tools

        What is Usability?

        Why Improve Usability

        How to Assess Usability

        CASE Tools Examined

        Rational Rose

        Rational Rose

        Rational Rose

        PPT Slide

        Comments on Rose

        Together/J

        Together/J

        Together/J

        Together/J

        Comments on Together/J

        ArgoUML

        ArgoUML

        ArgoUML

        ArgoUML

        ArgoUML

        Comments on ArgoUML

        Final Comments on UML Tools

        Part 2: Assessing a UML Extensionfor Modeling User Interfaces

        How Do You Design UIís Now?

        What is Usage-Centered Design?

        Example: Modeling ArgoUMLís Search Utility

        Use Case Diagram

        One Use Case in detail:Search Design

        Interaction Contexts for Search Design

        Interaction Context Navigation Map

        Abstract Layout of Find Window

        Concrete Layout of Find Window

        Final Comments onUsage-Centered Design

        Thank you


   
	 Author: Jason Robbins
      Email:  jrobbins@ics.uci.edu  
	
	
	
	
	  Download presentation source
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld032.htm
##-----------------TITLE------------------------##
Abstract Layout of Find Window
##------------------TEXT------------------------##
Abstract Layout of Find Window 
 Search criteria fields

Start search

Results viewer

(note: select one of many)

Related objects viewer

(note: select one of many)

Find Window

Enables

Fills

Fills

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld033.htm
##-----------------TITLE------------------------##
Concrete Layout of Find Window
##------------------TEXT------------------------##
Concrete Layout of Find Window 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld005.htm
##-----------------TITLE------------------------##
How to Assess Usability
##------------------TEXT------------------------##
How to Assess Usability 
 Adherence to UI guidelines and heuristics



Consider the match between the task and the toolís support for that task



What are the steps of the task?

What are the challenges of the task?

Measure UI complexity and effort needed



You know it when you see it: subjective impressions count



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld001.htm
##-----------------TITLE------------------------##
Assessing UML and Usability
##------------------TEXT------------------------##
Assessing UML and Usability 
 Jason E. Robbins

Information and Computer ScienceUniversity of California, Irvine

jrobbins@ics.uci.edu

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld004.htm
##-----------------TITLE------------------------##
Why Improve Usability
##------------------TEXT------------------------##
Why Improve Usability 
 Benefits to the organization



Safer tools can lower costs by helping catch design errors early

More learnable tools require less training and increase the pool of qualified workers

Efficient tools distract the designer from his or her task less

Benefits to individuals



Increased job satisfaction, reduced stress

More productivity

Difficult tools will not be used: obvious usability difficulties prevent the realization of non-obvious productivity benefits



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld007.htm
##-----------------TITLE------------------------##
Rational Rose
##------------------TEXT------------------------##
Rational Rose 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld035.htm
##-----------------TITLE------------------------##
Thank you
##------------------TEXT------------------------##
Thank you 
 Questions?



 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld028.htm
##-----------------TITLE------------------------##
Use Case Diagram
##------------------TEXT------------------------##
Use Case Diagram 
 ConstructDesign

Designer

ReviewDesign

SearchDesign

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld011.htm
##-----------------TITLE------------------------##
Comments on Rose
##------------------TEXT------------------------##
Comments on Rose 
 Highly modal property sheets make it hard to find and repeatedly access property widgets



Constant switching between mouse and keyboard

No good way to cut-and-paste multiple properties.

Batch code generation makes code v. model comparisons difficult



Diagram editing OK but somewhat clumsy



Text often cut-off or drawn outside of box

No alignment tools or back-to-front ordering

Table-of-contents widget aids users in finding individual elements, but that is all



Rose 98i fixes some of the most offensive usability problems of earlier versions (e.g., not being able to resize the property dialog)



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld025.htm
##-----------------TITLE------------------------##
How Do You Design UIís Now?
##------------------TEXT------------------------##
How Do You Design UIís Now? 
 Good: 



Gain real insight into the userís tasks and background

Build and review UI models and prototypes

OK:



Implement prototype with a GUI builder, focus on layout

Imitate successful or familiar UIís and follow guidelines

Bad:



Focus on system implementation and leave the UI for last

Assume that you are the user

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld002.htm
##-----------------TITLE------------------------##
Part 1: Assessing the Usability ofUML Modeling Tools
##------------------TEXT------------------------##
Part 1: Assessing the Usability ofUML Modeling Tools 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld009.htm
##-----------------TITLE------------------------##
Rational Rose
##------------------TEXT------------------------##
Rational Rose 
 Rose is complex, but follows MS Windows UI guidelines

Too many tabs make finding anything difficult

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld018.htm
##-----------------TITLE------------------------##
ArgoUML
##------------------TEXT------------------------##
ArgoUML 
 Table views are dense and aid in systematic scanning

Wizards provide problem-specific procedural guidance and automation

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld016.htm
##-----------------TITLE------------------------##
Comments on Together/J
##------------------TEXT------------------------##
Comments on Together/J 
 Simpler than Rose. Avoids Roseís property sheet problems.



Several UI elements support a design-and-code task



Tree widget serves many purposes, but there is still only one table-of-contents view



Diagram editing good, but some usability problems



It is much to hard to drag a class

Arc editing is very good

No alignment or back-to-front ordering

No way to lock a given toolbar mode

Audit and Metrics tools provide some knowledge support, but they must be explicitly invoked, and their feedback is unmanageable.



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld024.htm
##-----------------TITLE------------------------##
Part 2: Assessing a UML Extensionfor Modeling User Interfaces
##------------------TEXT------------------------##
Part 2: Assessing a UML Extensionfor Modeling User Interfaces 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld022.htm
##-----------------TITLE------------------------##
Comments on ArgoUML
##------------------TEXT------------------------##
Comments on ArgoUML 
 ArgoUML includes many user interface features that specifically address challenges faced by designers.



Knowledge support via critics and checklists

Process support via ìto doî list

Visualization support via navigational perspectives

Refined diagram editing with strong support for secondary notation



Critics and wizards offer functionality as needed without cluttering the menus



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld020.htm
##-----------------TITLE------------------------##
ArgoUML
##------------------TEXT------------------------##
ArgoUML 
 The broom alignment tool

uses direct-manipulation to establish visual groupings

Selection-action buttons make common construction operations into single clicks

Checklists prompt designers to think like expert designers, improve on paper-based checklists

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld003.htm
##-----------------TITLE------------------------##
What is Usability?
##------------------TEXT------------------------##
What is Usability? 
 Anything can be used, but at what cost?



Types of usability: 



Ease of learning

Ease of remembering

Efficiency in use

Reliability in use

User satisfaction



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld034.htm
##-----------------TITLE------------------------##
Final Comments onUsage-Centered Design
##------------------TEXT------------------------##
Final Comments onUsage-Centered Design 
 Considering the userís task from the start is a good way to build more useful UIís



UCD seems simple, practical, and well aligned with UML style and depth



I hope to work on a meta-model and tool support for UCD in the next year (ArgoUCD?)



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld026.htm
##-----------------TITLE------------------------##
What is Usage-Centered Design?
##------------------TEXT------------------------##
What is Usage-Centered Design? 
 ìSoftware for Useî by Larry Constantine and Lucy Lockwood



Focuses on improving the match between the userís task and the toolís user interface



Somewhat of a popular, practical version of task-modeling



Construct models leading to implementation: 



use cases lead to 

abstract interaction sequences lead to 

interaction contexts with abstract widgets leads to

actual GUI layouts and implementation

Elements of UCD:



Pragmatic design guidelines

Model-driven design process

Organized development activities

Iterative improvement

Measures of quality

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld017.htm
##-----------------TITLE------------------------##
ArgoUML
##------------------TEXT------------------------##
ArgoUML 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld021.htm
##-----------------TITLE------------------------##
ArgoUML
##------------------TEXT------------------------##
ArgoUML 
 Navigational perspectives clarify key hierarchical relationships in the design

Many useful perspectives are predefined,

but you can customize them by selecting child-generation rules

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld014.htm
##-----------------TITLE------------------------##
Together/J
##------------------TEXT------------------------##
Together/J 
 Together/J contains some knowledge about common design patterns and helps the designer construct model fragments based on those patterns.

Some screenshots were taken from a presentation describing Together/J from Object International. It can be downloaded from www.togetherj.com.

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld006.htm
##-----------------TITLE------------------------##
CASE Tools Examined
##------------------TEXT------------------------##
CASE Tools Examined 
 Rational Rose 98i: www.rational.com/rose



The leading CASE tool, full-featured, complex, mature, expensive (often sold w/ training)

Together/J 3.0 beta: www.togetherj.com



An example of a new breed of simpler and cheaper mass-market CASE tools

ArgoUML v0.7: www.argouml.com



Research project on usability and cognitive support in CASE tools, free, open-source

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld013.htm
##-----------------TITLE------------------------##
Together/J
##------------------TEXT------------------------##
Together/J 
 Code is central. The user sees model and code and both are kept in sync. You can compile from within TJ. The find command only searches code, not the model.

Some screenshots were taken from a presentation describing Together/J from Object International. It can be downloaded from www.togetherj.com.

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld015.htm
##-----------------TITLE------------------------##
Together/J
##------------------TEXT------------------------##
Together/J 
 Metrics and Audit rules aid the designer in reviewing the design.

Analyses must be explicitly invoked. 

Not a very effective presentation of results.

Some screenshots were taken from a presentation describing Together/J from Object International. It can be downloaded from www.togetherj.com.

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld010.htm
##-----------------TITLE------------------------##
PPT Slide
##------------------TEXT------------------------##
PPT Slide 
 Find utility is OK, but only searches on names.



New-Existing-Recent is a example of successful imitation.



Print dialog is overly complex.

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld012.htm
##-----------------TITLE------------------------##
Together/J
##------------------TEXT------------------------##
Together/J 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld030.htm
##-----------------TITLE------------------------##
Interaction Contexts for Search Design
##------------------TEXT------------------------##
Interaction Contexts for Search Design 
 Find Window



Search criteria fields: allows designer to enter regexís for name and package name

Start search: button to start the search

Results viewer: displays search results, must allow one to be selected

Related objects viewer: lists objects related to selected result

ìAs Diagramî Pane



Displays details of selected result in the context of a design diagram

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld019.htm
##-----------------TITLE------------------------##
ArgoUML
##------------------TEXT------------------------##
ArgoUML 
 Unstructured graphical annotations can be semantic prompts that help link the design to requirements

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld008.htm
##-----------------TITLE------------------------##
Rational Rose
##------------------TEXT------------------------##
Rational Rose 


 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld031.htm
##-----------------TITLE------------------------##
Interaction Context Navigation Map
##------------------TEXT------------------------##
Interaction Context Navigation Map 
 Main Window

View | Find

Config button

Generate | All ClassesGenerate | Selected Class

NavPane

ToDoPane

EditorPane

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld029.htm
##-----------------TITLE------------------------##
One Use Case in detail:Search Design
##------------------TEXT------------------------##
One Use Case in detail:Search Design 
 User Intention



Request search



Enter search criteria



Start search



Review results



[continue until done]Examine specific result



System Responsibility



Show search criteria fields







Perform search, display results







Display details of selected result and related results, show result in context of diagram



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/july99-jason/tsld023.htm
##-----------------TITLE------------------------##
Final Comments on UML Tools
##------------------TEXT------------------------##
Final Comments on UML Tools 
 The best current commercial tools are unsatisfying to use because they are not well matched to the design activity



Clumsy, uninspired support for common design tasks

Weak support for the challenges of design

There is a usability difference among tools



I predict improved usability will be a key part of the next round of CASE tools



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/index.htm
##-----------------TITLE------------------------##
From Extensibility to Evolvability
##------------------TEXT------------------------##
From Extensibility to Evolvability
10/25/99
 Click here to start

   


 
      Table of Contents
            From Extensibility to Evolvability

        Overview of Talk

        Why Extensions?

        What is an Extension?

        Once Upon a Time...

        Then HTTP/1.0 came along

        And Much More FollowedÖ 

        Thanks to HTTPís Architecture

        The Good PartÖ

        And the Bad PartÖ

        Extensibility vs Evolvability

        Interoperability vs. Evolvability

        Supporting Evolvability

        The Four Rules of Evolvability

        HTTP Extension Framework

        Example of Mandatory Ext.

        Example of Optional Ext.

        Extension Declaration Params

        Extension Declarations

        Server Response

        Client Response


   
	 Author: Henrik Frystyk
      Email:  frystyk@microsoft.com  
	
	
	
	
	  Download presentation source
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld005.htm
##-----------------TITLE------------------------##
Once Upon a Time...
##------------------TEXT------------------------##
Once Upon a Time... 
 HTTP started out as a simple hypertext protocol



Send GET request - get back a document



Hypertext was what you asked for and what you got

There was no information about the document you retrieved



Especially no content-type

This were the early days of HTTP/0.9



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld013.htm
##-----------------TITLE------------------------##
Supporting Evolvability
##------------------TEXT------------------------##
Supporting Evolvability 
 How are Extensions deployed in the Web?



Often by extending existing applications

Spreading from in the small to the large over time

This means that:



Applications have different capabilities at all times

This requires that:



Applications supporting a particular extension should be able to employ this with no prior agreement;

Applications can require that the other party either understand and abide by the new protocol or abort the operation;

Has to work with existing HTTP

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld019.htm
##-----------------TITLE------------------------##
Extension Declarations
##------------------TEXT------------------------##
Extension Declarations 
 Use the header field space for declaring extensions



This means that declarations can



Float between Methods

Float between Status Codes

Can be applied to any HTTP request/response



Few exceptions like 304 (Not Modified) 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld014.htm
##-----------------TITLE------------------------##
The Four Rules of Evolvability
##------------------TEXT------------------------##
The Four Rules of Evolvability 
 Can be accomplished by expressing these four parameters as part of the protocol:



What it is (identify extension)

A URI identifies the extension in the global URI space

May be resolvable (interface description, code, etc.)

How to deal with it (optional or mandatory)

Can recipient ignore it or not?

Who should deal with it (hop-by-hop or end-2-end)

Should this go to the proxy or the user-agent, origin server

When to deal with it (ordering)

First do this; then do this etc.

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld018.htm
##-----------------TITLE------------------------##
Extension Declaration Params
##------------------TEXT------------------------##
Extension Declaration Params 
 What it is (identify extension)



The URI of the extension points to a definition of that extension

This can be a formal interface description, a piece of code, a textual description, or nothing at all (may not be resolvable)

How to deal with it



optional or mandatory

Who should deal with it



hop-by-hop or end-2-end

When to deal with it



ordering

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld016.htm
##-----------------TITLE------------------------##
Example of Mandatory Ext.
##------------------TEXT------------------------##
Example of Mandatory Ext. 
 M-POST http://www.buy.com/payment HTTP/1.1



Man: "http://www.ecommerce.org/ext/payment"



Ö











HTTP/1.1 200 OK



Ext:



Date: Sun, 25 Oct 1998 08:12:31 GMT



Ö





 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld003.htm
##-----------------TITLE------------------------##
Why Extensions?
##------------------TEXT------------------------##
Why Extensions? 
 Why not just a fixed set of features?



Would be a lot easier

Doesnít work becauseÖ

Extensions are fundamental to the Web



The Web is an information space

Not a single service

Every one lives in the same information space

How you live there is up to you

Change of Focus



From creating infrastructure to creating services using that infrastructure

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld006.htm
##-----------------TITLE------------------------##
Then HTTP/1.0 came along
##------------------TEXT------------------------##
Then HTTP/1.0 came along 
 No more only text based documents



Needed type information to distinguish images from text



MIME provided a mechanism for describing protocol messages



Was adopted for describing HTTP messages

A major cross road on the evolutionary path

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld001.htm
##-----------------TITLE------------------------##
From Extensibility to Evolvability
##------------------TEXT------------------------##
From Extensibility to Evolvability 
 Once upon a time, HTTP was simple ñ what happened?



 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld020.htm
##-----------------TITLE------------------------##
Server Response
##------------------TEXT------------------------##
Server Response 
 When a server sees an extended message it can respond with



510 (Not extended)

Message did not contain the information I needed. This can either be parameters or extensions

Client can then try again if it wants to

2xx (OK in some form)

Request succeeded and extension was dealt with

Any other HTTP code

In case it is covered by HTTP already 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld012.htm
##-----------------TITLE------------------------##
Interoperability vs. Evolvability
##------------------TEXT------------------------##
Interoperability vs. Evolvability 
 Cost of evolvability:



As evolvability goes up, ease of deployment goes down

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld007.htm
##-----------------TITLE------------------------##
And Much More FollowedÖ
##------------------TEXT------------------------##
And Much More FollowedÖ  
 Large number of added features



Byte ranges

Cookies

Content negotiation

Authentication and proxy authentication

Proxying, caching, and gateways

Hit metering

Persistent connections and pipelining

Ö

Pattern has been copied in RTSP, SIP etc.



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld021.htm
##-----------------TITLE------------------------##
Client Response
##------------------TEXT------------------------##
Client Response 
 When a client sees an extended response, it can



Ignore optional extension declarations or deal with them if it wants to

The server can only send mandatory extensions in a response if it knows that the client has some way of dealing with it

For example if it has asked for a mandatory extension.

The client can then retry the request with extensions included, or go away and forget about it

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld009.htm
##-----------------TITLE------------------------##
The Good PartÖ
##------------------TEXT------------------------##
The Good PartÖ 
 What are the lessons so far?



The good side of all these extensions:



HTTP could actually support them

The extensions provide very useful features

Several of them have become widespread



Even across trust domains!

Thanks to the IETF WG

HTTP is really quite extensible



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld011.htm
##-----------------TITLE------------------------##
Extensibility vs Evolvability
##------------------TEXT------------------------##
Extensibility vs Evolvability 
 Cost pr feature increases over time



Extensibility:















Evolvability:



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld015.htm
##-----------------TITLE------------------------##
HTTP Extension Framework
##------------------TEXT------------------------##
HTTP Extension Framework 
 Mechanism for lowering cost of extensions



Works with existing HTTP

Stable specification ready to be used

Fulfills the 4 rules through support for



Decentralized deployment based on

URIs for identification

No risk of collisions between methods, status codes, or header fields

Evolution through mandatory declarations

You canít ignore this extension

Separation of end-2-end and hop-by-hop extensions

Allows  

Ordering of extensions

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld017.htm
##-----------------TITLE------------------------##
Example of Optional Ext.
##------------------TEXT------------------------##
Example of Optional Ext. 
 GET http://www.somesite.com/some.doc HTTP/1.1



Opt: "http://www.webalizer.org/ext/hitcount"



Ö







HTTP/1.1 200 OK



Opt: "http://www.webalizer.org/ext/hitcount"; ns=12



12-hitcount: 24



Cache-Control: no-cache="12-hitcount,Opt"



Date: Sun, 25 Oct 1998 08:12:31 GMT



Expires: Sun, 25 Oct 1998 08:12:31 GMT



Ö



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld010.htm
##-----------------TITLE------------------------##
And the Bad PartÖ
##------------------TEXT------------------------##
And the Bad PartÖ 
 All these extensions had to be part of the base protocol



Have blurred the (already implicit) line between base protocol and extensions in HTTP

Cost has been a very complex protocol



HTTP/1.1 has been under way a long time

Not just result of complex extensions but how they interact

Adding new features gets harder and harder

Reason: No way of replacing existing features



Cost of backwards compatibility keeps increasing

Will never be able to replace existing features

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld002.htm
##-----------------TITLE------------------------##
Overview of Talk
##------------------TEXT------------------------##
Overview of Talk 
 What makes an extension?



And why extend in the first place?

In the good old days, HTTP was simple



Why did it get complex?

HTTP is already quite extensible



Why isnít this enough?

What is Evolvability?



How can we support it?

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld004.htm
##-----------------TITLE------------------------##
What is an Extension?
##------------------TEXT------------------------##
What is an Extension? 
 Qualification of a normal HTTP message



authentication, payment, etc.

New HTTP syntax and encoding



Sticky headers, binary encoding etc.

Extensions to the ìHTTP applicationî



WebDAV, etc.

HTTP-like protocols for new applications 



RTSP, IMAP etc. 

Leaving HTTP and TCP entirely 



Multicast etc. 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/bart/flyers/99/presentations/oct99-henrik/tsld008.htm
##-----------------TITLE------------------------##
Thanks to HTTPís Architecture
##------------------TEXT------------------------##
Thanks to HTTPís Architecture 
 All these extensions could fit into HTTP



Using the basic HTTP building blocksÖ

Request Method (one pr message)



GET, HEAD, POST, DELETE, etc.

Response Status Code  (one pr message)



1xx, 2xx, 3xx, 4xx, 5xx, etc. 

Header Fields (many pr message)



Protocol headers 

Upgrade, User-Agent, Accept, Date, Server, etc. 

Entity Headers 

Content-Length, Content-Encoding, etc. 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://luci.ics.uci.edu/lightweight/bioResearchers/ebaumer/index.html
##-----------------TITLE------------------------##
Light Weight: LUCI: The Laboratory for Ubiquitous Computing and Interaction at UCI
##------------------TEXT------------------------##
Lightweight Version
Interactive Flash Version






UP




RESEARCHERS:WE ARE LUCI: BIOGRAPHIES: RESEARCHERS:  Eric Baumer





Contact
More info
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/doc_tab.html
##-----------------TITLE------------------------##
Documentation tab in the Hyperweb Server
##------------------TEXT------------------------##
Home

Documentation Tab

The Documentation Tab provides access to the Hyperweb Server's documentation.

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/hyperwebs_tab.html
##-----------------TITLE------------------------##
Hyperwebs tab in the Hyperweb Server
##------------------TEXT------------------------##
Home

Hyperwebs Tab

The display shows a hierarchy of folder and document icons that represent the hyperwebs on this website. A folder icon denotes a node that has children while a document icon represents a node with no children. Each node is a complete hyperweb of anchors and links. A child hyperweb also has access to the anchors and links stored in its ancestors.

The hostname of the website is the root node of the hierarchy. All hyperwebs share this node as their common ancestor (which is the only node which does not have a set of anchors and links associated with it). This arrangement enables a mapping between a hyperweb and a URL. For instance, a leaf node web1.1 whose parent is web1 whose parent is the root node has an associated URL of <http://host.domain.com/web1/web1.1/>. A user can use this URL to browse the web in a Web browser provided that the host's Web server is properly configured.



Displaying the hyperweb hierarchy

To display the children of a node, double click on it. Double click again to hide the node's children.

Variations between Look-and-Feels

The Metal Look-and-Feel is sensitive to the location of the mouse with respect to double clicks. The cursor must be exactly above the folder in order to work correctly.
The CDE/Motif Look-and-Feel requires only a click on the plus symbol to open the folder, and a click on the minus symbol to close it.


Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/import_menu.html
##-----------------TITLE------------------------##
Import Menu in the Hyperweb Server
##------------------TEXT------------------------##
Home

Import Menu

The Import menu contains three commands: Import VOV, Import Web, and Import Website. The purpose of these commands is to import hypermedia information that was previously exported using the Hyperweb Server's export commands. Note: An exported text file can be imported by any Hyperweb Server. This enables the transfer of hypermedia information between Hyperweb Servers.



Operations

Import VOV

This command imports the information created by the Export VOV command. The information imported by this operation replaces the information currently stored in the VOV database. For this release, there is no concept of merging two separate VOV databases.

To import a VOV database, select the Import VOV command from the Import menu.



A file dialog box allows the user to specify the ASCII text file to import.



An import operation cannot proceed if a client is connected to the Hyperweb Server. A dialog box (see below) will warn the user of this situation and allow them to cancel the operation if necessary.



A dialog box will confirm the creation of the imported VOV database.



Import Web

This command imports the information created by the Export Web command. A hyperweb with the same name as the imported hyperweb cannot currently exist. In this release, there is no notion of merging two hyperwebs.

Note: You must import a hyperweb's parent before you can import the hyperweb itself.

To import a hyperweb, first select the Import Web command from the Import menu.



A file dialog box allows the user to specify the ASCII text file to import.



As discussed above, no clients may be connected during an import operation. If a client is connected, a dialog will appear asking if the operation should continue.

A dialog box will confirm the creation of the imported web.



Warning: If the hyperweb's parent does not exist, the following message will appear.



Import Website

This command imports the information created by the Export Website command. This operation replaces the entire website currently managed by the Hyperweb Server with the imported website. In this release, there is no notion of merging two websites.

To import a website, select the Import Website command from the Import menu.



A file dialog box allows the user to specify the ASCII text file to import.



As discussed above, no clients may be connected during an import operation. If a client is connected, a dialog will appear asking if the operation should continue.

A dialog box will confirm the creation of the imported website.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/log_tab.html
##-----------------TITLE------------------------##
Hyperweb Server Log tab in the Hyperweb Server
##------------------TEXT------------------------##
Home

Hyperweb Server Log tab

The Hyperweb Server creates a log file that records information about its communications. This text file is stored in the home directory of the account that started the Hyperweb Server. Up to the last 500 lines of the log file are visible through this tab.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/export_menu.html
##-----------------TITLE------------------------##
Export Menu in the Hyperweb Server
##------------------TEXT------------------------##
Home

Export Menu

The Export menu contains three commands: Export VOV, Export Web, and Export Website. The purpose of these commands is to export hypermedia information from the Hyperweb Server's databases into ASCII text files. This functionality enables this information to be transferred between websites as well as to allow the information to be placed under configuration management.



Operations

Two of the three Export operations, Export VOV and Export Website, are available at all times.  Export Web is only available when a Chimera 2.0 hyperweb is selected in the Hyperwebs tab.

Export VOV

This command exports the information stored in the Hyperweb Server's VOV database to an ASCII text file.

To export a VOV database, select the Export VOV command from the Export menu.



The export file's location is specified via a file dialog box (shown below):



An export operation cannot proceed if a client is connected to the Hyperweb Server. A dialog box (see below) will warn the user of this situation and allow them to cancel the operation if necessary.



A dialog box will confirm the creation of the exported text file.



Export Web

This command exports the hypermedia information stored in the selected hyperweb to an ASCII text file.

Note: The Export Web command will be disabled unless a hyperweb is selected in the Hyperwebs tab.

In the example below web1 is selected.



Select the Export Web command from the Export menu.



A file dialog box allows the user to specify the location of the exported ASCII file.



As discussed above, no clients may be connected during an export operation. If a client is connected, a dialog will appear asking if the operation should continue.

A dialog box will confirm the creation of the exported text file.



Export Website

This command exports the hypermedia information stored in an entire Chimera website (which includes the VOV database and all hyperwebs) to an ASCII text file.

To export a website, select the Export Website command from the Export menu.



A file dialog box allows the user to specify the location of the exported ASCII file.



As discussed above, no clients may be connected during an export operation. If a client is connected, a dialog will appear asking if the operation should continue.

A dialog box will confirm the creation of the exported text file.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/file_menu.html
##-----------------TITLE------------------------##
File Menu in the Hyperweb Server
##------------------TEXT------------------------##
Home

File menu

The File menu contains the Quit command. The Quit command deactivates the Hyperweb Server.



Operations

Quit: This command deactivates the Hyperweb Server. All connected Chimera servers, as well as the Hyperweb Manager, will lose their connections. These servers can handle the loss of a connection gracefully and will continue to function until access to the Hyperweb Server is restored.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebserver/lookandfeel_menu.html
##-----------------TITLE------------------------##
Look and Feel Menu in the Hyperweb Server
##------------------TEXT------------------------##
Home

Look-and-Feel Menu

The Look-and-Feel menu allows the user to change the nature of the Hyperweb Server's user-interface.  There are three different Look-and-Feels to choose from: Metal, CDE/Motif, and Windows.

While the Look-and-Feel of the display can vary depending on the current selection of this menu, the functionality of the Hyperweb Server remains the same. Menus and Tabs exist in all three Look-and-Feels, and they all behave according to the documentation.

Look-and-Feels

Metal

The user-interface is presented in the Metal look-and-feel:




CDE/Motif

The user-interface is presented in the CDE/Motif look-and-feel:



Note: The Tabs in this look-and-feel may be stacked such that some of the labels are partially obscured.

Windows

The Windows look-and-feel can only be used on Windows-based machines. A screen shot of this look-and-feel is forthcoming.

If the Windows selection is made on a non-Windows-based platform, an error message will appear. This restriction may be lifted in the future. Contact Microsoft's lawyers for more information!

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/log_tab.html
##-----------------TITLE------------------------##
Chimera Server Log tab in the Chimera Server
##------------------TEXT------------------------##
Home

Chimera Server Log tab

The Chimera Server creates a log file that records information about its communications. This text file is stored in the home directory of the account that started the Chimera Server. Up to the last 500 lines of the log file are visible through this tab.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/lookandfeel_menu.html
##-----------------TITLE------------------------##
Look and Feel Menu in Chimera Server
##------------------TEXT------------------------##
Home

Look-and-Feel menu

The Look-and-Feel menu allows the user to change the nature of the Chimera Server's user-interface.  There are three different Look-and-Feels to choose from: Metal, CDE/Motif, and Windows.

While the Look-and-Feel of the display can vary depending on the current selection of this menu, the functionality of the Chimera Server remains the same. Menus and Tabs exist in all three Look-and-Feels, and they all behave according to the documentation.

Look-and-Feels

Metal

The user-interface is presented in the Metal look-and-feel:




CDE/Motif

The user-interface is presented in the CDE/Motif look-and-feel:



Note: The Tabs in this look-and-feel may be stacked such that some of the labels are partially obscured.

Windows

The Windows look-and-feel can only be used on Windows-based machines. A screen shot of this look-and-feel is forthcoming.

If the Windows selection is made on a non-Windows-based platform, an error message will appear. This restriction may be lifted in the future. Contact Microsoft's lawyers for more information!

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/webs_tab.html
##-----------------TITLE------------------------##
Webs tab in the Chimera Server
##------------------TEXT------------------------##
Home

Webs Tab

After a user has connected to a Chimera website, they can choose among the hyperwebs stored at the website in order to provide a context for the work they do with their Chimera clients. In Chimera, each hyperweb contains a set of anchors and links and provides access to the anchors and links stored in the hyperweb's parents. As the user moves between hyperwebs, the set of anchors and links available changes, thus establishing a different context for the connected Chimera clients.

The Webs tab provides the operations required to select among the hyperwebs of a Chimera website. The names of the hyperwebs are displayed in the Webs list. 
The image below shows a list with no member highlighted.



Hyperweb Names

All hyperwebs stored on the currently connected Chimera website are listed in the Webs list. Any name without a slash indicates a hyperweb at the top of the website's hierarchy. A hyperweb's children are indicated by separating the names with slashes. In the example below, web1 is at the top of hierarchy along with web2, while web1.1 and web1.2 are the children of web1.

Operations

The Webs tab provides two operations: Login and Logout.

Login

To connect to a hyperweb, first click on its name within the list. 
The hyperweb name will appear next to the enabled Login button. Then 
click the Login button to connect with the hyperweb selected.



Only one hyperweb can be connected at a time. 
To connect to another hyperweb, logout of the current one.




Note: If the connection attempt with a hyperweb succeeds, the display will shift to the Links tab. See the documentation of the Links tab for further details.

Logout

The Logout operation allows the user to disconnect the connected hyperweb. The Logout button will be enabled only when there is a connected hyperweb.

In the example below, to disconnect web1, click the Logout button.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/selection_example.html
##-----------------TITLE------------------------##
Chimera Server Example
##------------------TEXT------------------------##
Home

Chimera Server Example

Selecting a Chimera hyperweb

The Chimera Server provides its users with the ability to select a Chimera website, hyperweb, and active link. When the Chimera Server is launched, none of these entities are selected. A user must select a Chimera website and hyperweb before his or her clients can provide hypermedia services.

The following example demonstrates selecting each of these entities using the Chimera Server.

Connecting to a Chimera Website

Select the Servers tab by clicking on it.  A list of available Chimera websites is displayed.



Select a website by clicking on its name. In the example below, st-denis.ics.uci.edu is selected.



Then click the Login button to connected to the selected Chimera website.

Note: The display shifts to the Webs tab if the login to the selected website succeeds.

Connecting to a Chimera 2.0 Hyperweb

The Webs tab displays a list of the available Chimera hyperwebs on the connected Chimera website.



To select a Chimera hyperweb, click on its name in the Webs list. In the example below, web1 is selected.



Then click the Login button next to the web name to connect with the hyperweb.


Note: The display shifts to the Links tab if the login to the selected hyperweb succeeds.

Selecting the Active Link

The Links tab displays a list of all the links available in the selected hyperweb (including any links contained in the hyperweb's ancestors).



To select an active Link, click on its name in the Links list. In the example below, joe_link has been selected.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/links_tab.html
##-----------------TITLE------------------------##
Links tab in the Chimera Server
##------------------TEXT------------------------##
Home

Links tab

The Links tab allows the user to manipulate the links stored in the current hyperweb. This tap provides operations to create and delete links as well as to select and deselect the active link. The active link is a link which is shared between all of the user's Chimera clients. This enables a user to select a link and then add anchors to it without having to communicate the details of the link to each connected client. A client simply tells the server to add the selected anchors to the active link and the server takes care of the details.



Operations

The Links tab provides four operations:  Select the Active Link, Deactivate (the Active Link), Create Link, and Delete Link.

Selecting the Active Link

The user may activate a link by clicking on its name (or Id) in the Links list.
The link will be highlighted in the list and it will also appear next to
the enabled Deactivate button.



In the example above, bob link has been selected. This makes bob link the active link. (Note the Deactivate button with bob_link listed next to 
it.

Deactivate (the Active Link)

To dectivate the active link, click on the Deactivate button when
there is an active link selected. This returns the display to 
the first image above.

Create Link

The Create Link operation creates a new link.  To create a link, 
click the Create Link button.

A dialog will ask the user to name the link. In the example below, the new link is called tom link.



The new link is added to the list.



Delete Link

This operation deletes a link from the hyperweb. Since a hyperweb can inherit links from its ancestors, it is possible to delete a link which is not contained in the currently connected hyperweb. Delete Link is only available when
a link has been selected as the active link

To delete a link, select a link in the list.  In the example below, bad link has been selected.



Click the Delete Link button. The selected link is deleted and removed from the Links list.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/servers_tab.html
##-----------------TITLE------------------------##
Servers tab in the Chimera Server
##------------------TEXT------------------------##
Home

Servers tab

The Chimera Server allows the user to select a Chimera website to retrieve and store hypermedia information. These websites can be located on the same machine, on a LAN, or even a WAN. The Chimera Server works with the Hyperweb Manager and the Hyperweb Server to provide the user's Chimera clients with access to the hypermedia information stored in these websites.

The Servers tab allows a user to specify and access Chimera websites. A Chimera website is identified by the name of its host computer. The available hostnames appear in the Servers list.



Operations

The Chimera Server provides four operations within the Servers tab: Login, Logout, Add Server, and Remove Server.

Login

The Login operation allows the user to connect to a Chimera website. 
The Login operation is enabled when there is no Chimera website connected to
the Chimera Server and there is a hostname for a Chimera website selected from the
hostname list.
In order to Login to a Chimera website, first select a hostname from those listed in the Server list. A selected hostname can be selected by clicking on it, 
and will appear in the box next to the Login button.  In order to select another 
Chimera website, you must first logout of the current website. See the documentation for the Logout command below.

In the example below, to connect to the website st-denis.ics.uci.edu
click the Login button.




Note: If the Login attempt with a Chimera website succeeds, the display will automatically shift to the Webs tab.  This allows the user to select a hyperweb that is stored on the connected Chimera website. See the documentation of the Webs tab for further details.

Logout

The Logout operation allows the user to disconnect from the currently connected Chimera website. The Logout button is enabled only when the Chimera Server is connected to a Chimera website. The connected website's hostname is in the box
next to the Logout button. 

In the example below, to disconnect from the st-denis.ics.uci.edu website, click the Logout button.



When the Chimera Server is not connected to a Chimera website, the Servers tab will have a list with no highlighted items and a disabled Logout button.



Add Server

The Add Server operation adds a Chimera website to the hostnames in the 
list.  Add Server is enabled when there is no Chimera websites logged in.  
When the Add Server button is clicked, a dialog box appears where you
assign a new host name to be added to the list.

In the example below, the Add Server button has been clicked and 
the host mirabeau.ics.uci.edu is about to be added to the hostname list.



Remove Server

The Remove Server operation removes a hostname for the list.  Remove Server
is enabled when there is no Chimera website logged in and when there is a 
hostname highlighted in the list.  A hostname becomes highlighted when 
you click on it.  


 In the example below, the first image has a host 
mirabeau.ics.uci.edu which will be removed.
The second image is after the Remove Server button has been clicked.






Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/file_menu.html
##-----------------TITLE------------------------##
File Menu in the Chimera Server
##------------------TEXT------------------------##
Home

File menu

The File menu contains the Quit command. The Quit command deactivates the Chimera Server.



Operations

Quit:  This command shuts down the Chimera Server.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/chimeraserver/doc_tab.html
##-----------------TITLE------------------------##
Documentation tab in the Chimera Server
##------------------TEXT------------------------##
Home

Documentation tab

The Documentation tab provides access to the Chimera Server's documentation.

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebmanager/log_tab.html
##-----------------TITLE------------------------##
Hyperweb Manager Log Tab in the Hyperweb Manager
##------------------TEXT------------------------##
Home

Hyperweb Manager Log Tab

The Hyperweb Manager creates a log file that records information
about its communications. This text file is stored in the home directory
of the account that started the Hyperweb Manager. Up to the last 500
lines of the log file are visible through this tab.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebmanager/hws_info_tab.html
##-----------------TITLE------------------------##
Hyperweb Server Info Tab in the Hyperweb Manager
##------------------TEXT------------------------##
Home

Hyperweb Server Info Tab

This tab displays information about the website's Hyperweb Server. In
particular, it indicates if the Hyperweb server is currently active. If
so, this tab will display the name of the Hyperweb Server's host along
with the number of its communications port. Otherwise it will indicate
that the Hyperweb Server is currently inactive.



Operations

Two operations are available on this tab depending on the state of
the connection with the Hyperweb Server. If the Hyperweb Server is
connected, the Unmanage Webs command will disconnect it.
Otherwise the Manage Webs command will activate it. These
commands are available via the button at the bottom of the tab. It
toggles between the two operations such that both commands are available
from the same button.

Using the Unmanage Webs button

The Unmanage Webs operation deactivates the connected Hyperweb
Server.  It is only available when the Hyperweb Server is connected to
the Hyperweb Manager.

Example: Click the Unmanage Webs button to deactivate the
Hyperweb Server.



The tab responds by listing the Hyperweb Server as inactive.



Note: All Chimera Servers connected to the Hyperweb Server
will be disconnected by the Unmanage command.

Using the Manage Webs button

The Manage Webs operation activates a new Hyperweb Server.  It
is only available when there is no active Hyperweb Server.

To activate a Hyperweb Server, click the Manage Webs
button.

Please be patient after clicking the Manage Webs button. 
Depending on your system, it may take a minute or longer to spawn a new
Hyperweb Server.

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebmanager/doc_tab.html
##-----------------TITLE------------------------##
Documentation Tab in the Hyperweb Manager
##------------------TEXT------------------------##
Documentation Tab

The Documentation Tab provides access to the Hyperweb Manager's
documentation.

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebmanager/file_menu.html
##-----------------TITLE------------------------##
File Menu in the Hyperweb Manager
##------------------TEXT------------------------##
Home

File menu

The File menu contains the Quit command. The Quit command
deactivates the Hyperweb Manager and all other Chimera 2.0 servers on
the website. In general, when the Hyperweb Manager is launched, it
spawns an instance of the Applet Server and an instance of the Hyperweb
Server.



Operations

Quit: This command deactivates the Hyperweb Manager. The
Hyperweb Manager will deactivate the Hyperweb Server and any Applet
Servers running on the website before it quits.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebmanager/hyperwebs_tab.html
##-----------------TITLE------------------------##
Hyperwebs Tab in the Hyperweb Manager
##------------------TEXT------------------------##
Home

Hyperwebs Tab

This tab contains a view of the hyperwebs managed by the Hyperweb Manager. Hyperwebs can be created or deleted using the two buttons at the bottom of this tab.

The display shows a hierarchy of folder and document icons that represent the hyperwebs on this website. A folder icon denotes a node that has children while a document icon represents a node with no children. Each node is a complete hyperweb of anchors and links. A child hyperweb also has access to the anchors and links stored in its ancestors.

The hostname of the website is the root node of the hierarchy. All hyperwebs share this node as their common ancestor (which is the only node which does not have a set of anchors and links associated with it). This arrangement enables a mapping between a hyperweb and a URL. For instance, a leaf node web1.1 whose parent is web1 whose parent is the root node has an associated URL of <http://host.domain.com/web1/web1.1/>. A user can use this URL to browse the web in a Web browser provided that the host's Web server is properly configured.

Displaying the hyperweb hierarchy

To display the children of a node, double click on the folder icon or single click on the dot symbol in front of it. To hide the node's children, double
click on the open folder icon or single click on the dot symbol in front of it.



Openning the root node will display its hyperwebs.



Variations between Look-and-Feels

The Motif Look-and-Feel (shown below) requires only a click on the plus symbol to open the folder, and a click on the minus symbol to close it.




Operations

Two operations can be performed on hyperwebs: Create Subweb and Delete Web. These operations are only available when the hyperweb manager is connected to a hyperweb server and a hyperweb is selected. To determine if a hyperweb server is connected, click on the Hyperweb Server Info tab.

Create Subweb

This operation creates a hyperweb below the selected node.

To create a hyperweb, first select the parent hyperweb (or the root node). In the example below, web1 is selected.



Click the Create Subweb button to begin the creation process.

The Hyperweb Manager will not perform the operation if any Chimera servers are connected to it. The following warning message will be displayed if one or more Chimera servers are connected.



Clicking Yes will allow the operation to proceed. The disconnected Chimera servers can connect back to the Hyperweb Manager after the operation is complete.

A dialog will request the name for the new hyperweb. In the example below, the name for the new hyperweb is web1.3.



The new hyperweb is then created and appears in the hierarchy in the appropriate position.



Note: Only names that begin with a number or a letter are allowed. If an illegal character is used, the following warning will be displayed.



Delete Web

This operation deletes the selected hyperweb along with its children.  This
operation is enabled when a hyperweb has been selected.  

To delete a hyperweb, first select it. In the example below, web1.3 has been selected through a mouse click.



Click Delete Web.

As before, if a Chimera Server is connected, the Hyperweb Manager will display a warning and offer the user the chance to disconnect it. To continue with the deletion operation, click Yes.

As shown below, the selected web will be removed.



If the user attempts to delete a parent hyperweb, the Hyperweb Manager will warn the user with the following dialog.



Clicking Yes will continue with the operation and will delete the parent hyperweb and all of its children.

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/hyperwebmanager/lookandfeel_menu.html
##-----------------TITLE------------------------##
Look and Feel Menu in the Hyperweb Manager
##------------------TEXT------------------------##
Home

Look-and-Feel Menu

The Look-and-Feel menu allows the user to change the nature of the Hyperweb Manager's user-interface.  There are three different Look-and-Feels to choose from: Metal, CDE/Motif, and Windows.

While the Look-and-Feel of the display can vary depending on the current selection of this menu, the functionality of the Hyperweb Manager remains the same. Menus and Tabs exist in all three Look-and-Feels, and they all behave according to the documentation.

Look-and-Feels

Metal

The user-interface is presented in the Metal look-and-feel:



CDE/Motif

The user-interface is presented in the CDE/Motif look-and-feel:



Note: The Tabs in this look-and-feel may be stacked such that some of the labels are partially obscured.

Windows

The Windows look-and-feel can only be used on Windows-based machines. A screen shot of this look-and-feel is forthcoming.

If the Windows selection is made on a non-Windows-based platform, an error message will appear. This restriction may be lifted in the future. Contact Microsoft's lawyers for more information!

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/images/as/
##-----------------TITLE------------------------##
Index of /pub/chimera/docs/images/as
##------------------TEXT------------------------##
Index of /pub/chimera/docs/images/as
NameLast modifiedSizeDescriptionParent Directory   -  as_file.gif27-Apr-1998 17:14  5.4K as_log.gif27-Apr-1998 17:14  5.3K as_metal_look.gif27-Apr-1998 17:14  5.8K as_motif_look.gif27-Apr-1998 17:15  5.1K 
Apache/2.2.15 (CentOS) Server at ftp.ics.uci.edu Port 80
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/images/share/
##-----------------TITLE------------------------##
Index of /pub/chimera/docs/images/share
##------------------TEXT------------------------##
Index of /pub/chimera/docs/images/share
NameLast modifiedSizeDescriptionParent Directory   -  server_notice.gif28-Apr-1998 15:03  1.8K 
Apache/2.2.15 (CentOS) Server at ftp.ics.uci.edu Port 80
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/images/hws/
##-----------------TITLE------------------------##
Index of /pub/chimera/docs/images/hws
##------------------TEXT------------------------##
Index of /pub/chimera/docs/images/hws
NameLast modifiedSizeDescriptionParent Directory   -  hws_export.gif27-Apr-1998 17:28  4.3K hws_export_vov.gif27-Apr-1998 17:28  4.4K hws_export_web.gif28-Apr-1998 15:04  4.0K hws_export_ws.gif28-Apr-1998 15:05  4.0K hws_file_menu.gif10-Feb-1998 15:22  4.4K hws_hyperwebs.gif28-Apr-1998 15:23  4.0K hws_import.gif29-Apr-1998 11:38  4.4K hws_import_vov.gif29-Apr-1998 11:39  4.5K hws_import_web.gif29-Apr-1998 11:39  4.5K hws_import_website.gif29-Apr-1998 11:39  4.5K hws_import_ws.gif10-Feb-1998 15:32  4.8K hws_log.gif28-Apr-1998 15:14  5.7K hws_metal_look.gif28-Apr-1998 15:14  4.3K hws_motif_look.gif28-Apr-1998 15:14  4.6K hws_parent_warning.gif05-Jan-1998 14:37  5.2K hws_quit.gif10-Feb-1998 15:22  4.4K hws_select_web1.gif28-Apr-1998 15:04  3.7K hws_vov_done.gif28-Apr-1998 15:04  1.7K hws_vov_file.gif28-Apr-1998 15:06  4.2K hws_vov_idb.gif05-Jan-1998 14:00  4.4K hws_vov_read.gif05-Jan-1998 14:14  5.1K hws_web_done.gif28-Apr-1998 15:05  1.8K hws_web_file.gif28-Apr-1998 15:04  4.2K hws_web_idb.gif05-Jan-1998 14:30  4.4K hws_web_read.gif05-Jan-1998 14:35  5.2K hws_ws_done.gif28-Apr-1998 15:06  1.8K hws_ws_file.gif28-Apr-1998 15:06  4.3K hws_ws_idb.gif05-Jan-1998 15:14  4.4K hws_ws_read.gif05-Jan-1998 15:17  5.2K 
Apache/2.2.15 (CentOS) Server at ftp.ics.uci.edu Port 80
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/images/cs/
##-----------------TITLE------------------------##
Index of /pub/chimera/docs/images/cs
##------------------TEXT------------------------##
Index of /pub/chimera/docs/images/cs
NameLast modifiedSizeDescriptionParent Directory   -  cs_adding_server.gif29-Apr-1998 10:56  6.3K cs_bad_link.gif29-Apr-1998 11:18  4.7K cs_bob_link_active.gif29-Apr-1998 11:17  4.5K cs_create_tom_link.gif29-Apr-1998 11:17  6.0K cs_deleted_link_list.gif29-Apr-1998 11:18  4.4K cs_example_active_link.gif29-Apr-1998 11:30  4.6K cs_example_link_list.gif29-Apr-1998 11:30  4.4K cs_example_server_list.gif29-Apr-1998 11:29  4.7K cs_example_server_selected.gif29-Apr-1998 11:29  5.0K cs_example_web_list.gif29-Apr-1998 11:29  4.1K cs_example_web_selected.gif29-Apr-1998 11:30  4.3K cs_file_menu.gif28-Apr-1998 15:41  4.3K cs_links.gif29-Apr-1998 11:16  4.3K cs_log.gif28-Apr-1998 15:48  8.2K cs_metal_look.gif28-Apr-1998 15:48  4.8K cs_motif_look.gif28-Apr-1998 15:48  4.7K cs_new_link_list.gif29-Apr-1998 11:18  4.6K cs_quit.gif28-Apr-1998 15:41  4.3K cs_remove_server.gif29-Apr-1998 10:56  4.9K cs_server_login.gif29-Apr-1998 10:56  4.8K cs_server_logout.gif29-Apr-1998 10:56  4.9K cs_server_removed.gif29-Apr-1998 10:56  4.5K cs_web_connected.gif29-Apr-1998 11:05  4.3K cs_web_selected.gif29-Apr-1998 11:29  4.3K cs_webs.gif29-Apr-1998 11:05  4.1K 
Apache/2.2.15 (CentOS) Server at ftp.ics.uci.edu Port 80
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/images/hwm/
##-----------------TITLE------------------------##
Index of /pub/chimera/docs/images/hwm
##------------------TEXT------------------------##
Index of /pub/chimera/docs/images/hwm
NameLast modifiedSizeDescriptionParent Directory   -  hwm_after_create.gif27-Apr-1998 16:03  5.1K hwm_after_delete.gif27-Apr-1998 16:02  5.0K hwm_before_create.gif27-Apr-1998 16:04  4.9K hwm_before_delete.gif27-Apr-1998 16:03  5.1K hwm_delete_children.gif27-Apr-1998 16:02  1.9K hwm_disconnect_dialog.gif27-Apr-1998 16:03  1.8K hwm_display_webs.gif27-Apr-1998 16:04  4.8K hwm_file_menu.gif27-Apr-1998 15:23  4.2K hwm_illegalchar.gif27-Apr-1998 16:03  2.1K hwm_log.gif27-Apr-1998 16:14  7.3K hwm_metal_look.gif27-Apr-1998 16:14  5.3K hwm_motif_look.gif27-Apr-1998 16:14  5.3K hwm_motif_webs.gif27-Apr-1998 16:04  5.0K hwm_new_web.gif27-Apr-1998 16:03  6.3K hwm_quit.gif27-Apr-1998 15:23  4.3K hwm_root_webs.gif27-Apr-1998 16:04  4.5K hws_inactive.gif27-Apr-1998 15:29  3.7K hws_info.gif27-Apr-1998 15:28  3.9K 
Apache/2.2.15 (CentOS) Server at ftp.ics.uci.edu Port 80
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/appletserver/doc_tab.html
##-----------------TITLE------------------------##
Doumentation tab in the Applet Server
##------------------TEXT------------------------##
Home

Documentation Tab

The Documentation Tab provides access to the Applet Server's
documentation.

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/appletserver/lookandfeel_menu.html
##-----------------TITLE------------------------##
Look and Feel Menu in Applet Server
##------------------TEXT------------------------##
Home

Look-and-Feel Menu

The Look-and-Feel menu allows the user to change the nature of the 
Applet Server's user-interface.  There are three different 
Look-and-Feels to choose from: Metal, CDE/Motif, and Windows.

While the Look-and-Feel of the display can vary depending on the 
current selection of this menu, the functionality of the 
Applet Server remains the same.  Menus and Tabs exist in all three 
Look-and-Feels, and they all behave according to the documentation.


Look-and-Feels
Metal

The user-interface is presented in the Metal look-and-feel:




CDE/Motif

The user-interface is presented in the CDE/Motif look-and-feel:



Note: The Tabs in this look-and-feel may be stacked such that 
some of the labels are partially obscured.

Windows

The Windows look-and-feel can only be used on Windows-based machines. A screen
shot of this look-and-feel is forthcoming.

If the Windows selection is made on a non-Windows-based platform, an error 
message will appear. This restriction may be lifted in the future. 
Contact Microsoft's lawyers for more information!

Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/appletserver/log_tab.html
##-----------------TITLE------------------------##
Hyperweb Manager Log tab in Hyperweb Manager
##------------------TEXT------------------------##
Home

Applet Server Log tab

The Applet Server creates a log file that records information
about its communications. This text file is stored in the home directory
of the account that started the Hyperweb Manager. Up to the last 500
lines of the log file are visible through this tab.

Note: Since the Applet Server is always initiated through the 
Hyperweb Manager, the log file will be created in the home directory
of the account that started the Hyperweb Manager.



Home
##------------------URL-------------------------##
http://ftp.ics.uci.edu/pub/chimera/docs/appletserver/file_menu.html
##-----------------TITLE------------------------##
File Menu in the Applet Server
##------------------TEXT------------------------##
Home

File menu


The File menu contains the Quit command.  

Note:  This command will temporarily shut down the Applet Server, 
but a new Applet Server will be started automatically by the Hyperweb Manager. 
The reason for this is that the Applet Server must be available for applets 
at a Chimera website which is  managed by the Hyperweb Manager.

 Applets must have this special arrangement because they may only connect 
back to the website they were loaded from.  Thus any applet which is to act 
as a Chimera client must use the Applet Server to provide the services of 
the Chimera Server. 
This is the job of the Applet Server in general, but since this implies
that the Applet Server must run while the Hyperweb Manager is
running, the Applet Server will restart after the quit command executes. 



Operations

Quit: This command temporarily shuts
 down the Applet Server.


Note: The Applet Server is automatically restarted by the 
Hyperweb Manager, so even if the 
quit command is selected, the Applet Server is only temporarily shut-down.
A new Applet Server will be launched after the current Applet Server
ends executuion.

Home
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld023.htm
##-----------------TITLE------------------------##
Pragmatics: Labeling Resources
##------------------TEXT------------------------##
Pragmatics: Labeling Resources 
 Traditional fixed set of security attributes


UNIX file permissions, AFS ACLs, process handles
Separable security labels as metadata


PICS labels, Resource Description Framwork (RDF)
Deliverable in, with, or from third parties
Self-description of schemas


Loadable rating scales or attribute vocabularies
Difficulty of binding to variable Web pages


Languages, obsolescence, bundling together pages


 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld004.htm
##-----------------TITLE------------------------##
New Conflicts in Open Systems
##------------------TEXT------------------------##
New Conflicts in Open Systems 
 The Bank no longer controls both ends


Assumptions about trusted hardware, ATM card scanners, private communications links invalidated
Furthermore, Web applications tend towards interoperable infrastructure technology
Common cryptographic channel security
Common certificate formats and repositories
Common user interface hooks
How can [online banks] convey trustworthiness without marble?



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld015.htm
##-----------------TITLE------------------------##
Principal: Organizations
##------------------TEXT------------------------##
Principal: Organizations 
 Organizations are much like people


Literally and legally, as ëincorporationí suggests
Scale has a quality all its own


Easier to trust a group of people over time with internal checks and balances and standards
Anytime trust has to be shared with a different principal
Credentials bind people to devices


It is more efficient to intermediate relationships
Reflects the same transaction costs as optimal firm-size theory does in real world economics

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld001.htm
##-----------------TITLE------------------------##
Weaving a Web of Trust
##------------------TEXT------------------------##
Weaving a Web of Trust 
 IRUS Bay Area Roundtable 	Rohit Khare
October 9, 1998 	(Adam Rifkin)
	

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld011.htm
##-----------------TITLE------------------------##
Principle: Be Careful
##------------------TEXT------------------------##
Principle: Be Careful 
 Identify (& Justify) every trust decision


Can be buried in operational logic
Example: Is Scooter a Member?


W3C has Public, Member, and Team web access
Originally, Member IP address masks were used
Verbal contracts trusted employees to protect info
AltaVistaís web crawler was seen as a Member
... And information leaked out to the index!
Required coordination of password database, filesystem permissions, and Robot Exclusion file

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld028.htm
##-----------------TITLE------------------------##
Limits: Web Clients
##------------------TEXT------------------------##
Limits: Web Clients 
 Unprincipled


Does not adapt behavior to specific site	IE4 Zones
Requires trusting monolithic sw vendor instead of self
Not carefully integrated with OS: cache leaks, cookies
Principal identification scattered


Desktop PCs & Macs have a weak concept of User
User interface hides computer address ó spoofable
Organizational identification relies on images, DNS
Inflexible Policies


Content-filtering, applet, and privacy checks built-in

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld026.htm
##-----------------TITLE------------------------##
Limits of Trust
##------------------TEXT------------------------##
Limits of Trust 
 Limits of Web Security


Security services below, at, and above HTTP layer
Trust as a Social Contract


Game-theoretic model of rational opponents	[Axelrod]
Trust is a learning process; how can tools help?
Trust in the Mirror


Moving the world into the box magnifies latent flaws in existing relationships
The Social Security PEBES Case (ìmail vs. e-mailî): speed, anonymity of electronic queries changes the risk profile

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld013.htm
##-----------------TITLE------------------------##
Principal: People
##------------------TEXT------------------------##
Principal: People 
 Trust = behavioral consistency


Legal and social precedent holds individuals liable
Ultimately, people back computers and organizations
Human identity should be established outside of any particular application


E.g. Verisignís multiple levels, from email to notary to credit check to personal investigation
Identity alone is not trustworthy


Bank trusts Clara Customer, not Clara Beekham
Once the organization establishes a role linking the two

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld016.htm
##-----------------TITLE------------------------##
Policies	When
##------------------TEXT------------------------##
Policies	When 
 Principal-Centric	Who you are


Object-Centric	What you have


Action-Centric	What you can do


TM Engines take a proposition (principal, action, object), assertions, and a policy evaluator as input to generate an authorization matrix
Policies can be composable on behalf of several stakeholders

		Credit Line	Savings Account	Vault
	Branch Manager	Create, Read/Write 	Create, Read/Write	Deposit, Withdraw
	Teller	Read	Read/Write	Deposit
	Guard	None	None	Withdraw

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld027.htm
##-----------------TITLE------------------------##
Limits: Web Servers
##------------------TEXT------------------------##
Limits: Web Servers 
 Unprincipled


Not able to specifically identify resources at risk within a server (ìmedical recordsî)
Not responsible for own security; varies by OS
Not careful in logging anomalies or for rollback
Principal identification scattered


E.g. SSL client-auth info cannot pass up to HTTP
Lower-layer IP source or DNS lookup spoofable
Inflexible policies


Typically limited to user-and-password configurations

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld024.htm
##-----------------TITLE------------------------##
Pragmatics: Codifying Policies
##------------------TEXT------------------------##
Pragmatics: Codifying Policies 
 Webís ëtrust problemsí are too varied to compile in


PICS filtering, applet authorization; soon payment method selection and privacy policy negotiation
Externalized policy evaluators


More flexible to put in a general-purpose TM Engine
Possible to compose policies written in several languages and styles
Example: REFEREE can load in policy interpreters as well as policies, rather than PICSRulz alone

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld003.htm
##-----------------TITLE------------------------##
Introduction
##------------------TEXT------------------------##
Introduction 
 Clara Customer fires up her favorite Web browser one morning and connects to her Bank to pay her rent. The Bank's computer duly opens up an encrypted session, and Clara fills out the payment form from her landlord 
A Welter of Decisions...


Can the Bank really believe itís Clara? Vice versa? 
What kind of ëreceiptí can Clara rely on?
Has the rent bill been delegated accurately?
Cryptography answers ëhowí, not ëwhyí


Tamper-proofing is not the same as entrusting

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld009.htm
##-----------------TITLE------------------------##
Principle: Be Specific
##------------------TEXT------------------------##
Principle: Be Specific 
 In real life, holistic judgments are vague:


ìI trust my spouseî ó for what? 
ìI trust my Bankî ó thatís not how they see it
General-purpose Web tools frustrate:


Web servers deal in bags of bits between machines
Not easy to distinguish a medical record file
Not easy to identify the actual user
Web client interfaces donít understand either
ëDo you want to submit this data unencryptedí - swat!
Underlying OS security can thwart limits
Sandboxing mobile code, redistribution limits

 

 Previous slide  Next slide  Back to first slide  View graphic version 



  Notes: 
    

Be specific about the level of trust, too.
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld022.htm
##-----------------TITLE------------------------##
Pragmatics: Identifying Principals
##------------------TEXT------------------------##
Pragmatics: Identifying Principals 
 Digital Certificates alone arenít trustworthy


[Kohnfelder78] introduced Certification Authorities
CA Utility is proportional to its reach


Clearinghouse simplifies group-membership
... But its power is inversely related


The further up the pyramid, the greater the liability 
Unprincipled compared to PGP/SPKI/SDSI:


Identity certificates are not specific about authorization
Hierarchy ends in God, not self
Logistical difficulties of updating global revocation lists


 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld006.htm
##-----------------TITLE------------------------##
Scenario: Content Filtering
##------------------TEXT------------------------##
Scenario: Content Filtering 
 Many transactions can be ërolled-backí


Often some recourse if trust is violated: files recovered, money refunded, boarding denied 
Social effects cannot


ìShould Johnny view page P?î is another trust issue
Indecency and inappropriateness is in the eye of several beholders
Intersection of school, parents, and political policy
Need to integrate several mechanisms
Black- and White- lists
Entrusting publishers vs contents

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld018.htm
##-----------------TITLE------------------------##
Policies: Object-Centric
##------------------TEXT------------------------##
Policies: Object-Centric 
 Placing trust in objects (or keys)


Typically, protect resources with keys


Hand out the combination to a vault
Secret-sharing can require multiple cooperating keyholders (e.g. a safe-deposit box) 
Optionally compartmentalize access


Different interfaces have different keys
Deposit and Withdraw handles in MS COM-speak
Possession of the right pointer limits the visible functions

Useful when there are fewer objects than users or actions

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld029.htm
##-----------------TITLE------------------------##
Implications
##------------------TEXT------------------------##
Implications 
 Web Developers


Commit to developing standardized TM infrastructure
Web Users


Awareness of the flood of trust decisions of ìmereî surfing motivates developers to do their part
Application Stakeholders


Identify and justify your systemsí trust decisions
Citizens


What are the social consequences of fragmenting our trust communities into self-contained world-views?

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld010.htm
##-----------------TITLE------------------------##
Principle: Trust Yourself
##------------------TEXT------------------------##
Principle: Trust Yourself 
 Assertion Chains should lead back to self


ìMy credit card number is xxxxî
CreditCorpís certificate _ Issuing Bank _ own records
ìUnited.com is the airlineî	(it isnít)
Local DNS _ Root Servers _ ICANN _ Jon Postel	(oops!)
ìJonís public key is yyyyî	(X.509)
Signed by USC _ Signed by state of CA _ Signed by Feds
ìJonís public key is zzzzî	(PGP)
Signed by Jon _ Signed by Fred _ Signed by self
ìPublic key nnnn is Jonî	(SDSI/SPKI)
ìSelfís DNSís Jon is nnnnî ó root your own naming tree


 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld005.htm
##-----------------TITLE------------------------##
Scenario: Entrusting an Applet
##------------------TEXT------------------------##
Scenario: Entrusting an Applet 
 Sara Surfer hears about a whiz-bang new financial applet from Jesse Jester. She hops over to FlyByNight.Com and downloads their latest and greatest auto-stock-picker
Automated support for trust decisions:


Helping Sara decide whether to trust the appletís advice: third party ratings, endorsements, &c
Controlling the privileges of that applet: to read portfolios, even execute trades, but not leak info

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld012.htm
##-----------------TITLE------------------------##
Principals	What
##------------------TEXT------------------------##
Principals	What 
 Microsoft Authenticode entrusts ActiveX controls based on: encrypted communication between machines; signed identity of the author(s); and a ësafe applet pledgeí certificate from MS and a ëcommercial sw publisherí certificate from Verisign/D&B
People	Names


An identity which persists across transactions; liable
Computers	Addresses


Limited lifetime; can only prove correct execution
Organizations	Credentials


Persistent lifetime; can link People & Computers

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld002.htm
##-----------------TITLE------------------------##
Weaving a Web of Trust
##------------------TEXT------------------------##
Weaving a Web of Trust 
 


Mission


How can users decide what to trust on the Web?
Mechanism


Does X have permission to do Y with resource Z?





Introduction


Principles	Why


Principals	What


Policies	When


Pragmatics 	How


Applications


Limits of Trust


Implications



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld019.htm
##-----------------TITLE------------------------##
Policies: Action-Centric
##------------------TEXT------------------------##
Policies: Action-Centric 
 Placing trust in demonstrated abilities


Typically test and compile into an authorization certificate


Driverís License or swimming test
Manage classes of capabilities


Bank might be factored into Account Creation, Bookkeeping, and Vault Access
... Then map onto personnel and objects as needed
Example: Drinking age laws are intrinsic, not from a registry of drinkers or access controls on bottles

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld025.htm
##-----------------TITLE------------------------##
Applications
##------------------TEXT------------------------##
Applications 
 Collaborative Authoring & Publication


Extending trust to push networks, readers
Content Filtering


Acceptable content; rights management; privacy
Highlights composable policy, diverse label stores
Electronic Commerce


Negotiating by assertion rather than policy	JEPI
Downloadable Code


Trusted applet; trusted runtime/OS

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld008.htm
##-----------------TITLE------------------------##
Principles	Why
##------------------TEXT------------------------##
Principles	Why 
 Digital TM engines can be more exacting in establishing authority, so:





Be Specific


Broader assertions are less reliable
Trust Yourself


All trust decisions must loop back to own axioms
Be Careful


Logical design doesnít preclude implementation holes

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld030.htm
##-----------------TITLE------------------------##
For Further Information...
##------------------TEXT------------------------##
For Further Information... 
 This Talk	http://www.ics.uci.edu/~rohit/web-of-trust


Our Paper	http://www.cs.caltech.edu/~adam/papers/www


The Book	http://www.w3j.com/7/


Digital Signature Labels	http://www.w3.org/DSig/


Simple PKI	http://www.ietf.org/html.charters/spki-charter.html


REFEREE	http://www.research.att.com/~jf/pubs/www6-97.html


PolicyMaker	ftp://dimacs.rutgers.edu/pub/dimacs/	TechnicalReports/TechReports/1996/96-17.ps.gz


Contact Us	rohit@ics.uci.edu, adam@cs.caltech.edu




 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld014.htm
##-----------------TITLE------------------------##
Principal: Computers
##------------------TEXT------------------------##
Principal: Computers 
 The Webís Trusted Computing Base?


Client PCs have many points of failure
Even https: relies on routing and domain naming
Entrusting Devices as Devices


To execute cryptographic operations correctly
To modify internal state or trigger peripherals
Checksums, clock freshness, channel security, etc can only prove a consistent address
Example: Cellphone cloning fraud conflates device authentication (ser #) with user authorization (bill) 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld017.htm
##-----------------TITLE------------------------##
Policies: Principal-Centric
##------------------TEXT------------------------##
Policies: Principal-Centric 
 Placing trust in principals (or roles)


Typically, classify individuals into groups


[Denning 76] proved information flow w/lattices
Principle of least privilege encourages specificity 
... and label each object or action with a minimum or maximum authorization level


[Bell and LaPadula] compartmentalization of processes ó read downwards, write upwards, sanitization

Useful when there are fewer users than objects or actions

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld020.htm
##-----------------TITLE------------------------##
Policies: Implementation
##------------------TEXT------------------------##
Policies: Implementation 
 Trusting someone to drive a car:


By identity: a list of authorized drivers
By object: a set of keys to be handed out
By capability: rent a car with license & insurance
Choice of ëprimary axisí depends on:


Simplicity: which is the smallest set?	bank employees
Dynamism: avoid enumerating the volatile. 	drivers
Efficiency: whatís easiest to check?	Licenses
Watch for conflicting policy styles


Hotel erred in using payment-ability as identity

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld021.htm
##-----------------TITLE------------------------##
Pragmatics	How
##------------------TEXT------------------------##
Pragmatics	How 
 The topological shift from a single secure node to a net of separately administered domains is driving the development of a new generation of Web TM tools

Identifying Principals	Decentralized PKI


Labeling Resources	Web Metadata


Codifying Policies	Policy Languages


Automating the Web of Trust	TM Engines



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~rohit/web-of-trust/tsld007.htm
##-----------------TITLE------------------------##
Trust Management
##------------------TEXT------------------------##
Trust Management 
 Traditional, ëclosedí security falls short


Access Control Lists and user databases operate over a known, finite universe of principals & resources
PolicyMaker introduced a new approach


Blaze, Feigenbaum, et al. at IEEE Oakland 1996
A TM engine strings together assertions into proofs
...Where assertions can come from many sources
...And the crytpography falls out as just one way to entrust the binding of an assertion to a speaker
We need to ask why rather than how      



 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld043.htm
##-----------------TITLE------------------------##
Properties:
##------------------TEXT------------------------##
Slide 43 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld016.htm
##-----------------TITLE------------------------##
XML-LANG: Markup Types
##------------------TEXT------------------------##
Slide 16 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld001.htm
##-----------------TITLE------------------------##
Web	Automation
##------------------TEXT------------------------##
Slide 1 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld020.htm
##-----------------TITLE------------------------##
XLink: Advanced
##------------------TEXT------------------------##
Slide 20 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld033.htm
##-----------------TITLE------------------------##
Scope of WebDAV Methods
##------------------TEXT------------------------##
Slide 33 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld009.htm
##-----------------TITLE------------------------##
World-Wide Markup Language
##------------------TEXT------------------------##
Slide 9 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld021.htm
##-----------------TITLE------------------------##
XSL: “Behavior Sheets”
##------------------TEXT------------------------##
Slide 21 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld002.htm
##-----------------TITLE------------------------##
“The next phase of the Web”
##------------------TEXT------------------------##
Slide 2 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld041.htm
##-----------------TITLE------------------------##
Metadata Recording Infrastructure
##------------------TEXT------------------------##
Slide 41 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld056.htm
##-----------------TITLE------------------------##
Scenario: Web Portfolio Manager
##------------------TEXT------------------------##
Slide 56 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld018.htm
##-----------------TITLE------------------------##
XML-LANG: DTDs (2/2)
##------------------TEXT------------------------##
Slide 18 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld023.htm
##-----------------TITLE------------------------##
Data Archaeology
##------------------TEXT------------------------##
Slide 23 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld014.htm
##-----------------TITLE------------------------##
XML: Specifications
##------------------TEXT------------------------##
Slide 14 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld062.htm
##-----------------TITLE------------------------##
Internet Scale Event Notifications
##------------------TEXT------------------------##
Slide 62 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld051.htm
##-----------------TITLE------------------------##
Clustering by Application Context
##------------------TEXT------------------------##
Slide 51 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld032.htm
##-----------------TITLE------------------------##
WebDAV Object Model
##------------------TEXT------------------------##
Slide 32 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld024.htm
##-----------------TITLE------------------------##
Every Bit in XML
##------------------TEXT------------------------##
Slide 24 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld026.htm
##-----------------TITLE------------------------##
Across Space
##------------------TEXT------------------------##
Slide 26 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld039.htm
##-----------------TITLE------------------------##
Exclusive Lock
##------------------TEXT------------------------##
Slide 39 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld060.htm
##-----------------TITLE------------------------##
XML: Recommended Reading
##------------------TEXT------------------------##
Slide 60 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld052.htm
##-----------------TITLE------------------------##
Clustering by Notification Features
##------------------TEXT------------------------##
Slide 52 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld017.htm
##-----------------TITLE------------------------##
XML-LANG: DTDs (1/2)
##------------------TEXT------------------------##
Slide 17 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld045.htm
##-----------------TITLE------------------------##
Versioning Infrastructure
##------------------TEXT------------------------##
Slide 45 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld048.htm
##-----------------TITLE------------------------##
Internet-Scale
##------------------TEXT------------------------##
Slide 48 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld055.htm
##-----------------TITLE------------------------##
Security Considerations
##------------------TEXT------------------------##
Slide 55 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld028.htm
##-----------------TITLE------------------------##
Web Distributed
##------------------TEXT------------------------##
Slide 28 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld005.htm
##-----------------TITLE------------------------##
Network Effects
##------------------TEXT------------------------##
Slide 5 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld027.htm
##-----------------TITLE------------------------##
Across Cultures
##------------------TEXT------------------------##
Slide 27 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld036.htm
##-----------------TITLE------------------------##
Collaboration Infrastructure
##------------------TEXT------------------------##
Slide 36 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld047.htm
##-----------------TITLE------------------------##
Document Roadmap
##------------------TEXT------------------------##
Slide 47 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld011.htm
##-----------------TITLE------------------------##
Citation Encodings (1/2)
##------------------TEXT------------------------##
Slide 11 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld040.htm
##-----------------TITLE------------------------##
Shared Lock
##------------------TEXT------------------------##
Slide 40 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld049.htm
##-----------------TITLE------------------------##
WISEN Summary
##------------------TEXT------------------------##
Slide 49 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld022.htm
##-----------------TITLE------------------------##
Capturing the State of Distributed Systems in XML
##------------------TEXT------------------------##
Slide 22 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld029.htm
##-----------------TITLE------------------------##
What is WEBDAV?
##------------------TEXT------------------------##
Slide 29 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld030.htm
##-----------------TITLE------------------------##
Using WebDAV
##------------------TEXT------------------------##
Slide 30 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld050.htm
##-----------------TITLE------------------------##
Things That Go “NOTIFY” in the Night:
##------------------TEXT------------------------##
Slide 50 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld058.htm
##-----------------TITLE------------------------##
Notification Protocol Candidates
##------------------TEXT------------------------##
Slide 58 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld007.htm
##-----------------TITLE------------------------##
Extensible Markup Language
##------------------TEXT------------------------##
Slide 7 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld044.htm
##-----------------TITLE------------------------##
Namespace Management Infrastructure
##------------------TEXT------------------------##
Slide 44 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld046.htm
##-----------------TITLE------------------------##
Searching Infrastructure
##------------------TEXT------------------------##
Slide 46 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld019.htm
##-----------------TITLE------------------------##
XLink : ‘Real’ Hypertext Links
##------------------TEXT------------------------##
Slide 19 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld010.htm
##-----------------TITLE------------------------##
Community-Wide Markup Languages
##------------------TEXT------------------------##
Slide 10 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld025.htm
##-----------------TITLE------------------------##
Across Time
##------------------TEXT------------------------##
Slide 25 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld035.htm
##-----------------TITLE------------------------##
Facets of WEBDAV
##------------------TEXT------------------------##
Slide 35 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld059.htm
##-----------------TITLE------------------------##
For Further Information
##------------------TEXT------------------------##
Slide 59 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld015.htm
##-----------------TITLE------------------------##
XML-LANG
##------------------TEXT------------------------##
Slide 15 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld061.htm
##-----------------TITLE------------------------##
WebDAV and DASL
##------------------TEXT------------------------##
Slide 61 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld054.htm
##-----------------TITLE------------------------##
Taxonomy of Design Decisions
##------------------TEXT------------------------##
Slide 54 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld003.htm
##-----------------TITLE------------------------##
Web Automation & Collaboration
##------------------TEXT------------------------##
Slide 3 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld004.htm
##-----------------TITLE------------------------##
Interdependencies
##------------------TEXT------------------------##
Slide 4 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld038.htm
##-----------------TITLE------------------------##
Lifecycle of a Lock
##------------------TEXT------------------------##
Slide 38 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld042.htm
##-----------------TITLE------------------------##
Properties: Naming
##------------------TEXT------------------------##
Slide 42 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld057.htm
##-----------------TITLE------------------------##
Imminent Notification Users
##------------------TEXT------------------------##
Slide 57 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld034.htm
##-----------------TITLE------------------------##
Application Use of WebDAV
##------------------TEXT------------------------##
Slide 34 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld037.htm
##-----------------TITLE------------------------##
Write Lock
##------------------TEXT------------------------##
Slide 37 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld006.htm
##-----------------TITLE------------------------##
Our Goal: 	Remote, Collaborative
##------------------TEXT------------------------##
Slide 6 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld053.htm
##-----------------TITLE------------------------##
Strawman Definitions
##------------------TEXT------------------------##
Slide 53 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld008.htm
##-----------------TITLE------------------------##
Origin and Mission of XML
##------------------TEXT------------------------##
Slide 8 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld013.htm
##-----------------TITLE------------------------##
The Fossil Record
##------------------TEXT------------------------##
Slide 13 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld031.htm
##-----------------TITLE------------------------##
WebDAV: Extending HTTP
##------------------TEXT------------------------##
Slide 31 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/css/98/mini-tutorial/sld012.htm
##-----------------TITLE------------------------##
Citation Encodings (2/2)
##------------------TEXT------------------------##
Slide 12 of 62
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics22/CodeExamples/JUnit/index.html
##-----------------TITLE------------------------##
ICS 22 / CSE 22 Fall 2012, Unit Testing and Test-Driven Development with JUnit
##------------------TEXT------------------------##
ICS 22 / CSE 22 Fall 2012 |
News |
Course Reference |
Schedule |
Lab Manual |
Code Examples |
About Alex








ICS 22 / CSE 22 Fall 2012
   Unit Testing and Test-Driven Development with JUnit
   What We Did and Why We Did It







Introduction

I asked you fairly early in the demonstration not to take notes, because I wanted you to be able to concentrate on the process of test-driven development by following the example step-by-step.  This document, combined with the step-by-step code examples, are meant to take the place of the notes you might have taken.  I've also taken the liberty of saying a few additional things that I didn't have a chance to talk about in lecture.







The process

Test-driven development encourages you to build a program one small feature at a time, taking small steps from one piece of stable ground to another.  The notion of "small feature" is open to debate, though a good guideline is to prefer features as simple as "The size of a newly-created collection of songs is zero" over features as complex as "A complete SongCollection class."  The goal is to write a test that verifies the behavior of the new feature, then to write the code that implements the feature, using the test as a guide to indicate when you're done.  At this point, you'll have a feature that is complete and tested, which means you've taken a step on to stable ground; more importantly, you have a test that you can keep forever, which you'll be able to run repeatedly to ensure that your feature still works as you make changes and add new features to your program.  (Contrast this approach to the one you've taken as you've worked on your programs thus far this quarter.  With your current approach, how do you know that some part of your program is finished?  How do you ensure that it continues to work correctly as you continue to make changes to your program?)

In lecture, we went through a step-by-step example as a group, developing portions of a SongCollection class using a test-driven development process.  We did our best to follow all of the steps, though we sometimes forgot (or took liberties in the interest of time).  Because it's so different from the programming style we're accustomed to, it takes a little time to adjust and get into the rhythm of test-driven development.  But don't let the learning curve chase you away!  It doesn't take long to get adjusted, and the benefits are higher-quality code — in terms of both how well it works and how well it's designed — and the ability to make changes to your program with confidence.

Pick a new feature that you want to implement, preferring very simple features that can be verified with a single test.  (It's not that you can't implement complex programs using test-driven development; it's just that you have to break them into simpler pieces.  This is a good practice whether you're using a test-driven philosophy or not.)Write a test.  The test is intended to verify the behavior of a feature of a class (or classes) that very likely hasn't been added yet, which means you'll potentially be creating objects of classes that don't yet exist, or calling methods that you haven't written.  This may seem weird, but it's actually the whole point; pretend like the classes and methods you want have already been written.  There are at least a couple of benefits to writing the test first:
    You won't need to guess whether your code works; the test will tell you when you've successfully implemented the feature.You've tested your design before you've ever implemented it.  If you discover that the code that sets up the necessary objects and calls the method(s) you're testing seems more cumbersome than it needs to be, that is a very good indication that your design is probably more convoluted than it needs to be.  Your design is at least as important as the code you write; a clean design ensures that your program will be understandable (to the original author and to others), as well as being maintainable and extensible as users request bug fixes and new features.  These qualities should not be underestimated; programs in the "real world" often live a good deal longer than the original authors intend (and often stay in an organization long after the original author has moved on to greener pastures), and it's important to be able to introduce changes to a program without it falling down like a house of cards.
    It's wise to start with very simple features and work your way up to the somewhat more complex ones, which is why we chose to begin by testing that the size of an empty collection of songs is zero.Compile the test, even though you know it won't compile without errors.  The point here is to get the compiler to tell you what you're missing, rather than guessing at it.  After compiling the test and reading the error messages, you'll have a clear idea of what code needs to be added (or rewritten) in order to make the test compile successfully.  (As we saw in the demonstration, Eclipse automates this step, because it recompiles your code every time you save it.)Write the minimum amount of code in your class that will make the test compile, without worrying about whether the class will then pass the test.  The objective here is to declare the new methods of your class that will be needed by your test, but not to implement them yet.  We'll let the test tell us what code is missing in the next step.Run the test.  It will almost always fail, and when it does, it will tell you precisely why, by telling you what behavior was expected and what behavior was observed.  Occasionally the test won't fail the first time, because the "stub" you wrote is (accidentally) correct.  For example, we initially wrote this method in the SongCollection class when we tried to get the "Is the size of an empty collection zero?" test to compile.
  

    public int size()
    {
        return 0;
    }


It just so happened that returning 0 was the right thing to do, though the reason we said "return 0" was because, in Java, you have to return some integer from the method in order for it to compile.  If the only goal is to get the method to compile, saying "return 0" is as good as anything else.  Luckily, 0 was the right result; it usually won't be.Assuming that the test failed (as it usually will), the test has told you specifically why it failed, so you should write the minimum amount of code in your class that will make the test pass.  This is a difficult habit to get yourself into at first, because it often necessitates writing code that works perfectly in the simple case you're testing, but clearly won't work later on.  That's okay; you'll be able to write code for the more general case later, and will have all your old tests so that you can verify that the simpler cases, as well as all the other functionality you've already built, still work correctly after the change.  The tests are not something you write and then throw away; you'll keep them for as long as you keep your program, so that any time you want to go back and make changes anywhere in the program, your tests will be available to verify that nothing else has been broken as a result.Run the test again.  Hopefully, it will pass, which means that your new feature is implemented!  You've now reached stable ground.  (With the approach you've been using so far this quarter, how often do you feel like you're on stable ground?)Now that you have your new feature implemented, see whether there are any ways to improve the design of the code.  (We're looking for what are often called "code smells": places where the design could be made better.)  Have you duplicated code from another part of the class (or from some other class)?  Did the code you just added render older code useless?  If so, fix the problems now, running the tests after each small change.  (There's a name for this process; it's called refactoring.)  You can make changes with confidence, because your tests provide a valuable safety net; if some change you've made breaks code that once worked, your tests will tell you so immediately, so you can work on the new problem while the change you just made is still fresh in your mind.Now start this process again with another feature.  Continue this until you believe that all of the features of your program are implemented.

After going through one iteration of this process, you'll have added one new feature to your program, verified that the feature works as expected, and cleaned up any brewing design problems before they become significantly bigger problems later.  As the JUnit folks say, "Keep the bar green to keep the code clean."







What if I still discover a bug?

We didn't talk in lecture about what should be done if you discover a bug in your program, even if you've faithfully adhered to a test-driven strategy.  Naturally, using a test-driven development process does not guarantee that a program will work, for a variety of reasons.  Following this process allows the compiler and testing framework to help you avoid many mistakes, but there are many other aspects of software development that this process doesn't do much to improve.  First of all, your program only works as well as your tests say it will; if one of your tests expects behavior that is incorrect (e.g., the size of an empty collection is 1) and you write code that passes the test, that doesn't mean that the code makes sense in a broader context.  Similarly, tests can't verify that the program's requirements are appropriate; if you are tasked with building software that won't meet the business needs of your customer, tests won't help you identify the issue.  In short, testing helps verify that a program is correct, but the notion of "correct" often isn't a black-and-white one.

So, unfortunately, there will still be bugs.  The question is what should be done when you discover one.  The following steps can guide you through your bug-fixing:

Write a test that reproduces the bug and asserts  that the unintended behavior shouldn't happen.  This step is critical, because it will provide you with a way of being sure that you've actually fixed the bug.Run the test to verify that it fails because of the bug.  If it doesn't, you haven't isolated the problem, so you'll need to go back and write a better test.Find and fix the bug as you would normally.  (If you find that you need to add new features to your program in order to fix the bug, follow the set of steps described above for adding them carefully, writing tests first, writing the minimum amounts of code needed to make them work, and so on.)Run all of the tests to verify that the bug is fixed and that all of the other tests still pass, as well.

Now you can have confidence that you've not only fixed the problem, but also haven't broken anything else that previously worked.  You'll again reach stable ground quickly.







Additional thoughts

Give this process a genuine try, even if it feels less productive — or just plain strange — when compared to your usual strategy for writing your programs.  Trust me; if you can get yourself into a rhythm, you will find  yourself writing higher-quality code more quickly, with less mistakes early on and less debugging to do at the end.  As we learned from our experience in lecture, test-driven development works very nicely with pair programming.  I sometimes made mistakes in my haste to get code written while still explaining everything to you, but with you folks working collectively as my "partner," we ended up with virtually no mistakes that lasted longer than a few seconds.

Above all, have fun!  Developing software should be an exciting, enjoyable, and stimulating experience.  Test-driven development takes away a good deal of the frustration involved, allowing you to concentrate on understanding the problem and constructing a clean solution for it.







Adapted from a similar document written by Alex Thornton for Informatics 42, Winter 2005 - Winter 2007.
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics33/CodeExamples/UnitTesting/index.html
##-----------------TITLE------------------------##
ICS 33 Summer 2013, Unit Testing and Test-Driven Development with unittest
##------------------TEXT------------------------##
ICS 33 Summer 2013 |
News |
Course Reference |
Schedule |
Projecft Guide |
Code Examples |
About Alex








ICS 33 Summer 2013
   Unit Testing and Test-Driven Development with unittest
   What We Did and Why We Did It







Introduction

I asked you fairly early in the demonstration not to take thorough notes, because I wanted you to be able to concentrate on the process of test-driven development by following the example step-by-step.  This document, combined with the step-by-step code examples, are meant to take the place of the notes you might have taken.  I've also taken the liberty of saying a few additional things that I didn't have a chance to talk about in lecture.







The process

Test-driven development encourages you to build a program one small feature at a time, taking small steps from one piece of stable ground to another.  The notion of "small feature" is open to debate, though a good guideline is to prefer features as simple as "The size of a newly-created collection of songs is zero" over features as complex as "A class to represent a collection of songs" or "A graphical user interface."  The goal is to write a test that verifies the behavior of the new feature, then to write the code that implements the feature, using the test as a guide to indicate when you're done.  At this point, you'll have a feature that is complete and tested, which means you've taken a step on to stable ground; more importantly, you have a test that you can keep until the feature's required behavior changes, which you'll be able to run repeatedly to ensure that your feature still works as you make other changes and add new features to your program.  (Contrast this approach to the one you've taken as you've worked on your programs to date.  With your current approach, how do you know that some part of your program is finished?  How do you ensure that it continues to work correctly as you continue to make changes to your program?)

In lecture, we went through a step-by-step example as a group, developing portions of a SongCollection class using a test-driven development process.  We did our best to follow all of the steps, though we sometimes forgot (or took liberties in the interest of time).  Because it's so different from the programming style we're accustomed to, it takes a little time to adjust and get into the rhythm of test-driven development.  But don't let the learning curve chase you away!  It doesn't take long to get adjusted, and the benefits are higher-quality code — in terms of both how well it works and how well it's designed — and the ability to make changes to your program with confidence.

Pick a new feature that you want to implement, preferring very simple features that can be verified with a single test.  (It's not that you can't implement complex programs using test-driven development; it's just that you have to break them into simpler pieces.  This is a good practice whether you're using a test-driven philosophy or not.)Write a test.  The test is intended to verify the behavior of a feature of a class (or classes) that very likely hasn't been added yet, which means you'll potentially be creating objects of classes that don't yet exist, or calling methods that you haven't written.  This may seem weird, but it's actually the whole point; pretend like the classes and methods you want have already been written.  There are at least a couple of benefits to writing the test first:
    You won't need to guess whether your code works; the test will tell you when you've successfully implemented the feature.You've tested your design before you've ever implemented it.  If you discover that the code that sets up the necessary objects and calls the method(s) you're testing seems more cumbersome than it needs to be, that is a very good indication that your design is probably more convoluted than it needs to be.  Your design is at least as important as the code you write; a clean design ensures that your program will be understandable (to the original author and to others), as well as being maintainable and extensible as users request bug fixes and new features.  These qualities should not be underestimated; programs in the "real world" often live a good deal longer than the original authors intend (and often stay in an organization long after the original author has moved on to greener pastures), and it's important to be able to introduce changes to a program without it falling down like a house of cards.
    It's wise to start with very simple features and work your way up to the somewhat more complex ones, which is why we chose to begin by testing that the size of an empty collection of songs is zero.Run the test, even though you know it will fail when you do.  The point here is to get the tests to tell you what you're missing, rather than guessing at it.  After running the tests and reading any messages associated with failure, you'll have a clear idea of what code needs to be added (or rewritten) in order to make the test succeed.Write the mimimum amount of code that will make the test pass, without worrying about whether the code you wrote will make the next test you write or satisfy the next feature you plan to implement.  This is a difficult habit to get yourself into at first, because it often necessitates writing code that works perfectly in the simple case you're testing, but clearly won't work later on.  That's okay; you'll be able to write code for the more general case later, and will have all your old tests so that you can verify that the simpler cases, as well as all the other functionality you've already built, still work correctly after the change.  The tests are not something you write and then throw away; you'll keep them for as long as you keep your program, so that any time you want to go back and make changes anywhere in the program, your tests will be available to verify that nothing else has been broken as a result.Run the test again.  Hopefully, it will pass, which means that your new feature is implemented!  You've now reached stable ground.  (With the approach you've been using so far, how often do you feel like you're on stable ground?)  If the test fails, that's okay; go back to the previous step and work on the code some more and try again.  The tests will tell you when you're successful.Now that you have your new feature implemented, see whether there are any ways to improve the design of the code.  (We're looking for what are often called "code smells": places where the design could be made better.)  Have you duplicated code from another part of the class (or from some other class)?  Did the code you just added render older code useless?  If so, fix the problems now, running the tests after each small change.  (There's a name for this process; it's called refactoring.)  You can make changes with confidence, because your tests provide a valuable safety net; if some change you've made breaks code that once worked, your tests will tell you so immediately, so you can work on the new problem while the change you just made is still fresh in your mind.Now start this process again with another feature.  Continue this until you believe that all of the features of your program are implemented.

After going through one iteration of this process, you'll have added one new feature to your program, verified that the feature works as expected, and cleaned up any brewing design problems before they become significantly bigger problems later.  Each subsequent iteration adds new functionality, while verifiably preserving old functionality.  Meanwhile, your design will likely need to be pretty clean — unit testing demands a design in which the individual pieces are broken down and know as little as possible about one another, which is a good goal — and the tests will form a lasting record of your understanding of how your code is supposed to work.

Test-driven development is most likely very different than what you've done in the past, but it leads to a very different kind of result, too.







What if I still discover a bug?

We didn't talk in lecture about what should be done if you discover a bug in your program, even if you've faithfully adhered to a test-driven strategy.  Naturally, using a test-driven development process does not guarantee that a program will work, for a variety of reasons.  Following this process allows the tests to help you avoid many mistakes, but there are many other aspects of software development that this process doesn't do much to improve.  First of all, your program only works as well as your tests say it will; if one of your tests expects behavior that is incorrect (e.g., the size of an empty collection is 1) and you write code that passes the test, that doesn't mean that the code makes sense in a broader context.  Similarly, tests can't verify that the program's requirements are appropriate; if you are tasked with building software that won't meet the business needs of your customer, tests won't help you identify the issue.  In short, testing helps verify that a program is correct, but the notion of "correct" often isn't a black-and-white one.

So, unfortunately, there will still be bugs.  The question is what should be done when you discover one.  The following steps can guide you through your bug-fixing:

Write a test that reproduces the bug and asserts  that the unintended behavior shouldn't happen.  This step is critical, because it will provide you with a way of being sure that you've actually fixed the bug.Run the test to verify that it fails because of the bug.  If it doesn't, you haven't isolated the problem, so you'll need to go back and write a better test.Find and fix the bug as you would normally.  (If you find that you need to add new features to your program in order to fix the bug, follow the set of steps described above for adding them carefully, writing tests first, writing the minimum amounts of code needed to make them work, and so on.)Run all of the tests to verify that the bug is fixed and that all of the other tests still pass, as well.

Now you can have confidence that you've not only fixed the problem, but also haven't broken anything else that previously worked.  You'll again reach stable ground quickly.







Additional thoughts

Give this process a genuine try, even if it feels less productive — or just plain strange — when compared to your usual strategy for writing your programs.  Trust me; if you can get yourself into a rhythm, you will find  yourself writing higher-quality code more quickly, with less mistakes early on and less debugging to do at the end.  As we learned from our experience in lecture, test-driven development works very nicely with pair programming.  I sometimes made mistakes in my haste to get code written while still explaining everything to you, but with you folks working collectively as my "partner," we ended up with virtually no mistakes that lasted longer than a few seconds.

Above all, have fun!  Developing software should be an exciting, enjoyable, and stimulating experience.  Test-driven development takes away a good deal of the frustration involved, allowing you to concentrate on understanding the problem and constructing a clean solution for it.







Finding more information about unittest

Like other modules in the Python standard library, unittest has a set of documentation that describes its behavior in detail.  That document is linked below.

The unittest module documentation







Adapted from a similar document written by Alex Thornton for ICS 22, Winter 2005 - Fall 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld001.htm
##-----------------TITLE------------------------##
Architecture-based Runtime
##------------------TEXT------------------------##
First  

         Previous  

         Next  

         Last  

           Index  

         Text  

     

Slide 1 of 7







ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld007.htm
##-----------------TITLE------------------------##
Critical Problems
##------------------TEXT------------------------##
First  
         Previous  
         Next  
         Last  
           Index  
         Text  
     
Slide 7 of 7
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld005.htm
##-----------------TITLE------------------------##
ArchStudio: Intent
##------------------TEXT------------------------##
First  
         Previous  
         Next  
         Last  
           Index  
         Text  
     
Slide 5 of 7
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld003.htm
##-----------------TITLE------------------------##
Importance of Open Dynamic Systems
##------------------TEXT------------------------##
First  
         Previous  
         Next  
         Last  
           Index  
         Text  
     
Slide 3 of 7
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld004.htm
##-----------------TITLE------------------------##
Research at UC Irvine
##------------------TEXT------------------------##
First  
         Previous  
         Next  
         Last  
           Index  
         Text  
     
Slide 4 of 7
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld002.htm
##-----------------TITLE------------------------##
Degrees of Dynamism
##------------------TEXT------------------------##
First  
         Previous  
         Next  
         Last  
           Index  
         Text  
     
Slide 2 of 7
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/oreizy/sld006.htm
##-----------------TITLE------------------------##
ArchStudio: Conceptual Architecture
##------------------TEXT------------------------##
First  
         Previous  
         Next  
         Last  
           Index  
         Text  
     
Slide 6 of 7
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/~mfinder/main.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/vavoom/
##-----------------TITLE------------------------##
vavoom/
##------------------TEXT------------------------##
vavoom/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / vavoom

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     src/     xdocs/     .classpath1.1111 yearsbpillettrying to add InstanceWeaver
 .cvsignore1.311 yearsbpilletgot argument logging to work
 .project1.311 yearsbpilletworking on an object diagram
pulled out most of graph layout from classCluster
 LICENSE.txt1.211 yearsbpillet*** empty log message ***
 maven.xml1.2611 yearsbpilletadded more javadocs
 my-checkstyle.xml1.611 yearsbpilletcheckstyle and jalopy
 my-jalopy.xml1.211 yearsbpilletcheckstyle and jalopy
 project.properties1.1311 yearsbpilletStill trying to get gui to work correctly
 project.xml1.2011 yearsbpilletworking on an object diagram
pulled out most of graph layout from classCluster
 vavoom-report-johan.pdf1.112 yearsbpillet*** empty log message ***





Show only files with tag:
All tags / default branchyanceesRoot_yanceesMAINHEADAlpha3Alpha2Alpha1
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/nimio/
##-----------------TITLE------------------------##
nimio/
##------------------TEXT------------------------##
nimio/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / nimio

File Parent Directory Attic/ [show] NimioMultihopTest/ NimioRouter/



General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/march/
##-----------------TITLE------------------------##
march/
##------------------TEXT------------------------##
march/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / march

FileRev.AgeAuthorLast log entry Parent Directory     ExtendedAnalyzer.java1.1.1.113 yearsjpdInitial import
 ExtendedLetterTokenizer.java1.1.1.113 yearsjpdInitial import
 ExtendedLowerCaseTokenizer.java1.1.1.113 yearsjpdInitial import
 IndexFiles.java1.1.1.113 yearsjpdInitial import
 MailDocumentFactory.java1.213 yearsjpdAdded some comments.
 March.java1.213 yearsjpdAdded some comments.
 MessageViewer.java1.213 yearsjpdAdded some comments.
 ResultTableRenderer.java1.1.1.113 yearsjpdInitial import
 ResultsTableModel.java1.1.1.113 yearsjpdInitial import
 Search.java1.1.1.113 yearsjpdInitial import
 SearchDump.java1.1.1.113 yearsjpdInitial import
 SearchFile.java1.1.1.113 yearsjpdInitial import
 SearchPath.java1.1.1.113 yearsjpdInitial import
 SearchWindow.java1.213 yearsjpdAdded some comments.





Show only files with tag:
All tags / default branchstartMAINicsHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/testingCVS/
##-----------------TITLE------------------------##
testingCVS/
##------------------TEXT------------------------##
testingCVS/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / testingCVS

FileRev.AgeAuthorLast log entry Parent Directory     src/     .classpath1.18 yearsmopixwah wah
 .project1.18 yearsmopixwah wah





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/NetworkRadar/
##-----------------TITLE------------------------##
NetworkRadar/
##------------------TEXT------------------------##
NetworkRadar/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / NetworkRadar

FileRev.AgeAuthorLast log entry Parent Directory     lib/     res/     src/     .classpath1.18 yearskariInitial Network Monitor.  This version only connects to
NetworkMonitor events.
 .cvsignore1.18 yearskaritell cvs to ignore bin dir
 .project1.18 yearskariInitial Network Monitor.  This version only connects to
NetworkMonitor events.
 Radar.bat1.18 yearskariInitial Network Monitor.  This version only connects to
NetworkMonitor events.





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/aim/
##-----------------TITLE------------------------##
aim/
##------------------TEXT------------------------##
aim/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / aim

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     AimMonitor.java1.212 yearsjpdUpdated AimMonitor so that my password is no longer encoded in it!
 AimViewer.java1.412 yearsjpdAdded scroll bar to the view panels.
 BitVector.java1.1.1.112 yearsjpdInitial import
 BuddyRecord.java1.212 yearsjpdAdded control over the viewing parameters, esp. 4am days and short
days.

Fixed ... BuddyWatcher.java1.210 yearsjudychen*** empty log message ***
 Config.java1.312 yearsjpdAdded control over the viewing parameters, esp. 4am days and short
days.

Fixed ... CopyDB.java1.210 yearsjudychen*** empty log message ***
 DB.java1.212 yearsjpdAdded control over the viewing parameters, esp. 4am days and short
days.

Fixed ... DayRecord.java1.212 yearsjpdAdded control over the viewing parameters, esp. 4am days and short
days.

Fixed ... DbDumper.java1.1.1.112 yearsjpdInitial import
 Test.java1.1.1.112 yearsjpdInitial import
 ViewPanel.java1.312 yearsjpdAdded scroll bar to the view panels.
 ViewStrip.java1.412 yearsjpdUpdated ViewStrip to cache the height data, in the hope of speeding up
painting....




Show only files with tag:
All tags / default branchstartMAINjudycjpdHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/mopix/
##-----------------TITLE------------------------##
mopix/
##------------------TEXT------------------------##
mopix/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / mopix

FileRev.AgeAuthorLast log entry Parent Directory     src/     .classpath1.18 yearsmopix*** empty log message ***
 .project1.18 yearsmopix*** empty log message ***





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/NetworkNeighborhood/
##-----------------TITLE------------------------##
NetworkNeighborhood/
##------------------TEXT------------------------##
NetworkNeighborhood/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / NetworkNeighborhood

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     META-INF/     lib/     res/     src/     .classpath1.19 yearskariInitial version of NetworkNeighborhood application.
 .project1.19 yearskariInitial version of NetworkNeighborhood application.





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/NetworkEqualizer/
##-----------------TITLE------------------------##
NetworkEqualizer/
##------------------TEXT------------------------##
NetworkEqualizer/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / NetworkEqualizer

FileRev.AgeAuthorLast log entry Parent Directory     .settings/     bin/     lib/     res/     src/     .classpath1.18 yearsrsilvafiInitial development
 .project1.18 yearsrsilvafiInitial development
 NE.bat1.28 yearsrsilvafifix of RadarScreen Point method call problem
code cleanup
 README.txt1.48 yearsrsilvafihow to add jpcap.dll to path
 Radar.bat1.28 yearsrsilvafifix of RadarScreen Point method call problem
code cleanup
 yancees.properties1.18 yearsrsilvafiInitial development





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/cvslocks/
##-----------------TITLE------------------------##
cvslocks/
##------------------TEXT------------------------##
cvslocks/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / cvslocks

File Parent Directory CVSROOT/ SNA/ clevermail/ corkboard/ cvslocks/ haimin_test/ journalviz/ test/ textfilter/ vavoom/ ws/ zspace/



General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/speedtest/
##-----------------TITLE------------------------##
speedtest/
##------------------TEXT------------------------##
speedtest/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / speedtest

FileRev.AgeAuthorLast log entry Parent Directory     speedtests/     sql_setup/     MiniTest.java1.112 yearsdanyelf*** empty log message ***
 build.xml1.212 yearsdanyelf*** empty log message ***





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/Geijyutu/
##-----------------TITLE------------------------##
Geijyutu/
##------------------TEXT------------------------##
Geijyutu/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / Geijyutu

FileRev.AgeAuthorLast log entry Parent Directory     edu/     lib/     .classpath1.310 yearsdepaulaFix libraries
 .project1.110 yearsdepaula*** empty log message ***
 art-database.dump.txt1.210 yearsdepauladb fixes





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/swirl-workspace/
##-----------------TITLE------------------------##
swirl-workspace/
##------------------TEXT------------------------##
swirl-workspace/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / swirl-workspace

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     src/     xdocs/     .classpath1.1711 yearsjiejdic died
 .cvsignore1.611 yearsjie*** empty log message ***
 .project1.410 yearsjieno screenshot action
 LICENSE.txt1.111 yearsjie*** empty log message ***
 maven.xml1.6911 yearsjie*** empty log message ***
 my-checkstyle.xml1.211 yearsbpilletmore comments
 my-jalopy.xml1.111 yearsbpilletformatted code with jalopy
fixed checkstyle for AggregateCmd and App
 my-jalopy2.xml1.211 yearsbpilletcleaned up code with jalopy
 project.properties1.3411 yearsbpillettried to get jnlp to work
 project.xml1.7710 yearskariYancees SNAPSHOT is no longer compatible with swirl code base.
Hardcode dependen... runtestcase.txt1.211 yearsdingxlocational consistency and persistency changes merged in
 tmpcvsignore1.211 yearsdingxlocational consistency and persistency changes merged in





Show only files with tag:
All tags / default branchvisualv1-0Swirl-ver3svg1security1Root_visualRoot_svg1Root_security1Root_pico2Root_picoRoot_PerformanceRoot_LocationalConsistencyRoot_jetty4Root_jetty3Root_jetty2Root_jettyRoot_JdicNotificationRoot_Drag-n-DropRoot_dingbranchRoot_consistency1Root_codec1Root_cactus2Root_cactus1Root_ben1pico2Pico-phase1picoPerformanceMAINLocationalConsistencyjetty3jetty2Jetty-phase1jettyJdicNotificationHEADDrag-n-Dropdingbranchconsistency1codec1cactus2cactus1ben1
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/Impromptu/
##-----------------TITLE------------------------##
Impromptu/
##------------------TEXT------------------------##
Impromptu/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / Impromptu

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     .settings/     res/     src/     .classpath1.310 yearskariModify for jmdns-1.0 final release.
 .cvsignore1.210 yearskariignore velocity.log file
 .project1.210 yearskaribranches:  1.2.2;
*** empty log message ***
 build.xml1.39 yearsrsilvafibuild now addes the resource files to the target directory
 maven.xml1.158 yearsrsilvafichanged Mount_I_Drive.bat to use http://%COMPUTERNAME%.%USERDNSDOMAIN%/files/
 project.properties1.29 yearskariThe reason for this is that the public Maven 1 repository is
being moved to http... project.xml1.69 yearskariUpdated list of developers.  Added Paul and Carolina.  Removed Jen.
 repository.zip1.310 yearskariJmDNS 1.0 ommitted from last revision.  This revision should include it.





Show only files with tag:
All tags / default branchVersion4-0-HistVis-StudyRoot_TestBranchRoot_PocketPC-InterfaceRoot_min_thinclientRoot_MediaCharRoot_HistoryVisualizationPocketPC-Interfacemin_thinclientMediaCharMAINImpromptu3-0HistoryVisualizationHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/NetworkMonitor/
##-----------------TITLE------------------------##
NetworkMonitor/
##------------------TEXT------------------------##
NetworkMonitor/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / NetworkMonitor

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     bin/     lib/     res/     src/     .classpath1.88 yearskariTaking install and launcher out of build.  Will release src and bin only.
 .cvsignore1.38 yearskariupdated cvsignore to include .settings file.
 .project1.28 yearskariTaking install and launcher out of build.  Will release src and bin only.
 build.xml1.58 yearskariput back classes dir.
 maven.xml1.198 yearskariModifed to generate RMIReg.bat which will execute a independent RMIRegistry.
 project.properties1.29 yearskariFirst Maven release for Network Monitor.
 project.xml1.48 yearskariUpdated version to .20
Changed inception date to 2006 (was 2005)
Added Min as de... yancees.properties1.38 yearsrsilvaficonfigures YANCEES properties





Show only files with tag:
All tags / default branchRoot_MavenReleaseRoot_ImpromptuEventsRoot_EdgesMavenReleaseMAINImpromptuEventsHEADEdges
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/SwirlNeighbor/
##-----------------TITLE------------------------##
SwirlNeighbor/
##------------------TEXT------------------------##
SwirlNeighbor/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / SwirlNeighbor

FileRev.AgeAuthorLast log entry Parent Directory     lib/     src/     .classpath1.19 yearskari*** empty log message ***
 .project1.19 yearskari*** empty log message ***





Show only files with tag:
All tags / default branchMAINJies-orig-versionHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/erxml/
##-----------------TITLE------------------------##
erxml/
##------------------TEXT------------------------##
erxml/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / erxml

FileRev.AgeAuthorLast log entry Parent Directory     data/     src/     .classpath1.211 yearsbpillet*** empty log message ***
 .cvsignore1.111 yearsbpillet*** empty log message ***
 .project1.111 yearsbpillet*** empty log message ***
 RC.ppt1.111 yearsbpilletimported stuff
 maven.xml1.211 yearsbpillet*** empty log message ***
 project.properties1.211 yearsbpilletreorganized
 project.xml1.311 yearsbpilletreorganized
 todo.txt1.611 yearsbpillet*** empty log message ***





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/clevermail/
##-----------------TITLE------------------------##
clevermail/
##------------------TEXT------------------------##
clevermail/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / clevermail

FileRev.AgeAuthorLast log entry Parent Directory     bin/     cgi-bin/     exec/     notes/     sql/     templates/     SymLinkNotes1.1.1.113 yearsdanyelfinitial import





Show only files with tag:
All tags / default branchstartMAINicsHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/SharonTestBed/
##-----------------TITLE------------------------##
SharonTestBed/
##------------------TEXT------------------------##
SharonTestBed/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / SharonTestBed

FileRev.AgeAuthorLast log entry Parent Directory     src/     .classpath1.111 yearsdingxfirst checkin
 .project1.111 yearsdingxfirst checkin





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/cvs_test/
##-----------------TITLE------------------------##
cvs_test/
##------------------TEXT------------------------##
cvs_test/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / cvs_test

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     package1/     package2/     File1.java1.712 yearstest11author test11 added new interface (Interface2 to package default). Also had File... File2.java1.712 yearstest11author test11 added new interface (Interface2 to package default). Also had File... File3.java1.212 yearstest2author test2 added new interface (called Interface1 in default package). Also in... Interface1.java1.112 yearstest2author test2 added new interface (called Interface1 in default package). Also in... Interface2.java1.112 yearstest11author test11 added new interface (Interface2 to package default). Also had File... ManyAuthorsFile4.java1.212 yearstest313 lines by author: test3
 ProcessADT.java1.212 yearsmtan*** empty log message ***





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/geijyutu/
##-----------------TITLE------------------------##
geijyutu/
##------------------TEXT------------------------##
geijyutu/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / geijyutu

File Parent Directory



General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/tinyos-1.x/
##-----------------TITLE------------------------##
tinyos-1.x/
##------------------TEXT------------------------##
tinyos-1.x/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / tinyos-1.x

File Parent Directory



General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/mopixcvs/
##-----------------TITLE------------------------##
mopixcvs/
##------------------TEXT------------------------##
mopixcvs/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / mopixcvs

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     images/     .project1.17 yearsjrico*** empty log message ***
 .pydevproject1.17 yearsjrico*** empty log message ***
 PythonScriptShell_1_4_2_TestRange_UID.sis1.17 yearsjrico*** empty log message ***
 README_code_walkthrough.txt1.17 yearsjrico*** empty log message ***
 README_preparation.txt1.17 yearsjrico*** empty log message ***
 README_signing.txt1.17 yearsjrico*** empty log message ***
 db_setup.py1.17 yearsjrico*** empty log message ***
 mopix.py1.47 yearsjrico*** empty log message ***





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/status/
##-----------------TITLE------------------------##
status/
##------------------TEXT------------------------##
status/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / status

FileRev.AgeAuthorLast log entry Parent Directory     BitVector.java1.28 yearsdhnnew constructor uses StringBuffer, which is faster.
other minor updates
 DataEntry.java1.1.1.18 yearsjudychenstatus and database stuff
 Database.java1.28 yearsdhnadded getProperties() so class can be used with other projects
 README1.18 yearsjudychen*** empty log message ***
 Record.java1.1.1.18 yearsjudychenstatus and database stuff





Show only files with tag:
All tags / default branchstartMAINjudycHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/journalviz/
##-----------------TITLE------------------------##
journalviz/
##------------------TEXT------------------------##
journalviz/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / journalviz

FileRev.AgeAuthorLast log entry Parent Directory     DayRecord.java1.1.1.113 yearsjpdInitial import
 DayRecordDocumentFactory.java1.1.1.113 yearsjpdInitial import
 EntryFrame.java1.1.1.113 yearsjpdInitial import
 HitBlob.java1.213 yearsjpd*** empty log message ***
 JournalDB.java1.1.1.113 yearsjpdInitial import
 JournalFileParser.java1.1.1.113 yearsjpdInitial import
 JournalProgressMonitor.java1.1.1.113 yearsjpdInitial import
 JournalViz.java1.1.1.113 yearsjpdInitial import
 QueryFrame.java1.1.1.113 yearsjpdInitial import
 ResultsMultiPanel.java1.1.1.113 yearsjpdInitial import
 ResultsPanel.java1.1.1.113 yearsjpdInitial import
 ResultsPanelPopup.java1.1.1.113 yearsjpdInitial import
 SearchHit.java1.211 yearsjpdno real changes, just testing cvs
 SearchResults.java1.1.1.113 yearsjpdInitial import





Show only files with tag:
All tags / default branchstartMAINicsHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/Connected/
##-----------------TITLE------------------------##
Connected/
##------------------TEXT------------------------##
Connected/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / Connected

FileRev.AgeAuthorLast log entry Parent Directory     ambient/     .classpath1.18 yearsdhnInitial entry
 .project1.18 yearsdhnInitial entry
 Connected.properties1.18 yearsdhnInitial entry
 DB.properties1.18 yearsdhnInitial entry
 phidget21.jar1.18 yearsdhnInitial entry





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/newaim/
##-----------------TITLE------------------------##
newaim/
##------------------TEXT------------------------##
newaim/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / newaim

FileRev.AgeAuthorLast log entry Parent Directory     Attic/ [show]     .project1.19 yearsjricoCompleted Mockup of RhythIMs interface.
 AimLayers.java1.78 yearsjudychen*** empty log message ***
 AimMonitor.java1.98 yearsjudychen*** empty log message ***
 AimViewer.java1.1.1.110 yearsjudychenaim project using jabber
 BitVector.java1.48 yearsjudychen*** empty log message ***
 BuddyRecord.java1.1.1.110 yearsjudychenaim project using jabber
 BuddyWatcher.java1.88 yearsjudychen*** empty log message ***
 ColorOption.java1.39 yearsjudychen*** empty log message ***
 Config.java1.1.1.110 yearsjudychenaim project using jabber
 DB.java1.58 yearsjudychen*** empty log message ***
 DayRecord.java1.1.1.110 yearsjudychenaim project using jabber
 LayersPanel.java1.68 yearsjudychen*** empty log message ***
 Status.java1.19 yearsjudychen-continuation of previous update:
 ::idle time is considered offline
 ::buddies ... ViewPanel.java1.38 yearsjudychen*** empty log message ***
 ViewStrip.java1.28 yearsjudychen*** empty log message ***
 clock.php1.19 yearsjudychen-continuation of previous update:
 ::idle time is considered offline
 ::buddies ... create.txt1.29 yearsjricoCleaned up files and optimized a few queries on the home page.
 database.php1.69 yearsjricoFIxed Legend (accidentally un-reversed it)
 drzaius.ics.uci.edu1.19 yearsjricoHome page data is know all gathered and displayed correctly.
 group.php1.69 yearsjricoFixed Headers
 header.php1.38 yearsjricomoved logout link.
 home.php1.108 yearsjricoNew Account/New Group Updates
 index.php1.49 yearsjricoAdded Group Browse
Completed Group Approval/Denial
Displays Group Graphs Correct... invite.php1.19 yearsjricoAdded changes to group building
 joingroup.php1.29 yearsjricoCleaned up files and optimized a few queries on the home page.
 jstools.js1.19 yearsjricoAdded changes to group building
 layers.php1.68 yearsjricoDisplay Name Completed
Bugs fixed for group creation
 login.php1.68 yearsjricoupdate for account creation.
 loginfunction.php1.48 yearsjricoSecured Login
Added Username
Fixing up for Error Handling
 logout.php1.38 yearsjricoadded logout message.
 newaccount.php1.48 yearsjricoupdate for account creation.
 newgroup.php1.58 yearsjricoDisplay Name Completed
Bugs fixed for group creation
 request.php1.39 yearsjricoAdded changes to group building
 session.php1.19 yearsjricoAdded Group Browse
Completed Group Approval/Denial
Displays Group Graphs Correct... stylesheet.css1.29 yearsjricoAdded changes to group building
 viewgroup.php1.29 yearsjricoFixed Headers





Show only files with tag:
All tags / default branchstartMAINjudycHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/abrams/
##-----------------TITLE------------------------##
abrams/
##------------------TEXT------------------------##
abrams/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / abrams

FileRev.AgeAuthorLast log entry Parent Directory     Abrams.java1.411 yearsdanyelf*** empty log message ***
 BidirectionalVertexFilter.java1.111 yearsdanyelf*** empty log message ***
 SteveRenderer.java1.211 yearsdanyelf*** empty log message ***
 TwoPassFilterI.java1.111 yearsdanyelf*** empty log message ***
 TwoPassFilterII.java1.111 yearsdanyelf*** empty log message ***





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/CVSROOT/
##-----------------TITLE------------------------##
CVSROOT/
##------------------TEXT------------------------##
CVSROOT/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / CVSROOT

FileRev.AgeAuthorLast log entry Parent Directory     Emptydir/     checkoutlist1.115 yearsjpdinitial checkin
 commitinfo1.115 yearsjpdinitial checkin
 config1.115 yearsjpdinitial checkin
 cvswrappers1.115 yearsjpdinitial checkin
 editinfo1.115 yearsjpdinitial checkin
 loginfo1.115 yearsjpdinitial checkin
 modules1.115 yearsjpdinitial checkin
 notify1.115 yearsjpdinitial checkin
 rcsinfo1.115 yearsjpdinitial checkin
 taginfo1.115 yearsjpdinitial checkin
 verifymsg1.115 yearsjpdinitial checkin





Show only files with tag:
All tags / default branchMAINHEAD
 
Module path or alias:







General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/motemusic/
##-----------------TITLE------------------------##
motemusic/
##------------------TEXT------------------------##
motemusic/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / motemusic

File Parent Directory



General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://drzaius.ics.uci.edu/cgi-bin/cvsweb.cgi/JungFoolery/
##-----------------TITLE------------------------##
JungFoolery/
##------------------TEXT------------------------##
JungFoolery/

Click on a directory to enter that directory. Click on a file to display
its revision history and to get a chance to display diffs between revisions.


Current directory:  [Local Repository] / JungFoolery

File Parent Directory



General options




Sort files by:

FileAgeAuthorRevisionLog message,
case-insensitive:


Hide files in Attic:


Sort log by:

Not sortedCommit dateRevision
Show line numbers:



Diff format:

ColoredLong coloredUnifiedContextSide by side





FreeBSD-CVSweb <freebsd-cvsweb@FreeBSD.org>
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/package-frame.html
##-----------------TITLE------------------------##
formula (formula package)
##------------------TEXT------------------------##
formula

Interfaces 


Formula



Classes 


Conjunction

Disjunction

Environment

LogicalConstant

LogicalVariable

Named

Negation
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/package-frame.html
##-----------------TITLE------------------------##
formulaVisited (formula package)
##------------------TEXT------------------------##
formulaVisited

Interfaces 


Formula

Visitor



Classes 


Conjunction

Disjunction

Environment

Factory

LogicalConstant

LogicalVariable

Named

Negation

VisitorEvaluate

VisitorToString
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/package-summary.html
##-----------------TITLE------------------------##
formulaVisited (formula package)
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package formulaVisited


Propositional and first-order logic with visitors, singletons, 
and other patterns used.

See:

          Description



Interface SummaryFormulaThe type of all logic formulas that accept visitors.VisitorA visitor to formulas.
 




Class SummaryConjunctionThe conjunction ("and") of two subformulas.DisjunctionThe disjunction ("and") of two subformulas.EnvironmentAn environment in which to evaluate a formula.FactoryA factory for creating formulas from a reader.LogicalConstantA logical constant, representing true or false.LogicalVariableA logical variable, representing true or false
  (but we may not know which).NamedThe superclass of all named objects in the package.NegationThe negation of a formula.VisitorEvaluateA visitor that evaluates each formula, returning
  Boolean.TRUE  if the formula is true,
  Boolean.FALSE if the formula is false, and
  null if its value cannot be determined.VisitorToStringA visitor that produces a string representation for each formula.
 



Package formulaVisited Description




Propositional and first-order logic with visitors, singletons, 
and other patterns used.












    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/overview-tree.html
##-----------------TITLE------------------------##
Class Hierarchy (formula package)
##------------------TEXT------------------------##
Overview     Package     Class     Use   Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes










Hierarchy For All Packages

Package Hierarchies:formula, formulaVisited


Class Hierarchy

java.lang.Objectformula.Conjunction (implements formula.Formula)
formulaVisited.Conjunction (implements formulaVisited.Formula)
formula.Disjunction (implements formula.Formula)
formulaVisited.Disjunction (implements formulaVisited.Formula)
formula.EnvironmentformulaVisited.EnvironmentformulaVisited.Factoryformula.LogicalConstant (implements formula.Formula)
formulaVisited.LogicalConstant (implements formulaVisited.Formula)
formula.Named (implements java.lang.Comparable<T>)
formula.LogicalVariable (implements formula.Formula)

formulaVisited.Named (implements java.lang.Comparable<T>)
formulaVisited.LogicalVariable (implements formulaVisited.Formula)

formula.Negation (implements formula.Formula)
formulaVisited.Negation (implements formulaVisited.Formula)
formulaVisited.VisitorEvaluate (implements formulaVisited.Visitor)
formulaVisited.VisitorToString (implements formulaVisited.Visitor)



Interface Hierarchy

formula.FormulaformulaVisited.FormulaformulaVisited.Visitor








    Overview     Package     Class     Use   Tree     Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/index-all.html
##-----------------TITLE------------------------##
Index (formula package)
##------------------TEXT------------------------##
Overview     Package     Class     Use     Tree     Deprecated   Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes







A B C D E F G L N O V Z 

A
accept(Visitor) - 
Method in class formulaVisited.Conjunction
 
accept(Visitor) - 
Method in class formulaVisited.Disjunction
 
accept(Visitor) - 
Method in interface formulaVisited.Formula
Accepts a visitor.
accept(Visitor) - 
Method in class formulaVisited.LogicalConstant
 
accept(Visitor) - 
Method in class formulaVisited.LogicalVariable
 
accept(Visitor) - 
Method in class formulaVisited.Negation
 



B
bind(LogicalVariable, boolean) - 
Method in class formula.Environment
Binds a logical variable to a boolean value.
bind(LogicalVariable, boolean) - 
Method in class formulaVisited.Environment
Binds a logical variable to a boolean value.



C
compareTo(Object) - 
Method in class formula.Named
Compares two named objects for order, by name.
compareTo(Object) - 
Method in class formulaVisited.Named
Compares two named objects for order, by name.
Conjunction - Class in formulaThe conjunction ("and") of two subformulas.Conjunction(Formula, Formula) - 
Constructor for class formula.Conjunction
Constructs the conjunction of two subformulas.
Conjunction - Class in formulaVisitedThe conjunction ("and") of two subformulas.Conjunction(Formula, Formula) - 
Constructor for class formulaVisited.Conjunction
Constructs the conjunction of two subformulas.



D
Disjunction - Class in formulaThe disjunction ("and") of two subformulas.Disjunction(Formula, Formula) - 
Constructor for class formula.Disjunction
Constructs the disjunction of two subformulas.
Disjunction - Class in formulaVisitedThe disjunction ("and") of two subformulas.Disjunction(Formula, Formula) - 
Constructor for class formulaVisited.Disjunction
Constructs the disjunction of two subformulas.



E
Environment - Class in formulaAn environment in which to evaluate a formula.Environment() - 
Constructor for class formula.Environment
Constructs a new, empty environment.
Environment - Class in formulaVisitedAn environment in which to evaluate a formula.Environment() - 
Constructor for class formulaVisited.Environment
Constructs a new, empty environment.
equals(Object) - 
Method in class formula.Named
Compares two named objects for equality, by name.
equals(Object) - 
Method in class formulaVisited.Named
Compares two named objects for equality, by name.



F
Factory - Class in formulaVisitedA factory for creating formulas from a reader.Factory() - 
Constructor for class formulaVisited.Factory
 
factory(PushbackReader) - 
Static method in class formulaVisited.Factory
Reads a character stream and returns
    the formula corresponding to it, if any.
formula - package formula
Basic classes implementing propositional and first-order logic formulas.Formula - Interface in formulaThe type of all logic formulas.Formula - Interface in formulaVisitedThe type of all logic formulas that accept visitors.formulaVisited - package formulaVisited
Propositional and first-order logic with visitors, singletons, 
and other patterns used.


G
get(LogicalVariable) - 
Method in class formula.Environment
Get the binding of a logical variable.
get(LogicalVariable) - 
Method in class formulaVisited.Environment
Get the binding of a logical variable.



L
LogicalConstant - Class in formulaA logical constant, representing true or false.LogicalConstant(boolean) - 
Constructor for class formula.LogicalConstant
Constructs a logical constant.
LogicalConstant - Class in formulaVisitedA logical constant, representing true or false.LogicalVariable - Class in formulaA logical variable, representing true or false
  (but we may not know which).LogicalVariable(String) - 
Constructor for class formula.LogicalVariable
Constructs a logical variable.
LogicalVariable - Class in formulaVisitedA logical variable, representing true or false
  (but we may not know which).LogicalVariable(String) - 
Constructor for class formulaVisited.LogicalVariable
Constructs a logical variable.



N
Named - Class in formulaThe superclass of all named objects in the package.Named(String) - 
Constructor for class formula.Named
 
Named - Class in formulaVisitedThe superclass of all named objects in the package.Named(String) - 
Constructor for class formulaVisited.Named
 
Negation - Class in formulaThe negation of a formula.Negation(Formula) - 
Constructor for class formula.Negation
Constructs the negation of a formula
Negation - Class in formulaVisitedThe negation of a formula.Negation(Formula) - 
Constructor for class formulaVisited.Negation
Constructs the negation of a formula



O
one() - 
Static method in class formulaVisited.LogicalConstant
Returns a logical constant for 1 (true).



V
visit(Conjunction) - 
Method in interface formulaVisited.Visitor
Calculates the result for a Conjunction.
visit(Disjunction) - 
Method in interface formulaVisited.Visitor
Calculates the result for a Disjunction.
visit(LogicalConstant) - 
Method in interface formulaVisited.Visitor
Calculates the result for a LogicalConstant.
visit(LogicalVariable) - 
Method in interface formulaVisited.Visitor
Calculates the result for a LogicalVariable.
visit(Negation) - 
Method in interface formulaVisited.Visitor
Calculates the result for a Negation.
visit(Conjunction) - 
Method in class formulaVisited.VisitorEvaluate
Calculates the result for a Conjunction.
    A conjunction is true if both its subformulas are true,
    false if either of its subformulas is false,
    and unknown otherwise.
visit(Disjunction) - 
Method in class formulaVisited.VisitorEvaluate
Calculates the result for a Disjunction.
    A disjunction is false if both its subformulas are false,
    true if either of its subformulas is true,
    and unknown otherwise.
visit(LogicalConstant) - 
Method in class formulaVisited.VisitorEvaluate
Calculates the result for a LogicalConstant.
    The value of LogicalConstant.one()  is true, and
    the value of LogicalConstant.zero() is false.
visit(LogicalVariable) - 
Method in class formulaVisited.VisitorEvaluate
Calculates the result for a LogicalVariable.
    The value of a logical variable is
    the value the variable is bound to in the environment,
    and unknown if the variable is bound to no value.
visit(Negation) - 
Method in class formulaVisited.VisitorEvaluate
Calculates the result for a Negation.
    A negation is false if its subformula is true,
    false if its subformula is true,
    and unknown if its subformula's value is unknown.
visit(Conjunction) - 
Method in class formulaVisited.VisitorToString
 
visit(Disjunction) - 
Method in class formulaVisited.VisitorToString
 
visit(LogicalConstant) - 
Method in class formulaVisited.VisitorToString
 
visit(LogicalVariable) - 
Method in class formulaVisited.VisitorToString
 
visit(Negation) - 
Method in class formulaVisited.VisitorToString
 
Visitor - Interface in formulaVisitedA visitor to formulas.VisitorEvaluate - Class in formulaVisitedA visitor that evaluates each formula, returning
  Boolean.TRUE  if the formula is true,
  Boolean.FALSE if the formula is false, and
  null if its value cannot be determined.VisitorEvaluate(Environment) - 
Constructor for class formulaVisited.VisitorEvaluate
Construct a VisitorEvaluate that evaluates formulas
    in the given environment.
VisitorToString - Class in formulaVisitedA visitor that produces a string representation for each formula.VisitorToString() - 
Constructor for class formulaVisited.VisitorToString
 



Z
zero() - 
Static method in class formulaVisited.LogicalConstant
Returns a logical constant for 0 (false).


A B C D E F G L N O V Z 






    Overview     Package     Class     Use     Tree     Deprecated   Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/allclasses-noframe.html
##-----------------TITLE------------------------##
All Classes (formula package)
##------------------TEXT------------------------##
All Classes


Conjunction

Conjunction

Disjunction

Disjunction

Environment

Environment

Factory

Formula

Formula

LogicalConstant

LogicalConstant

LogicalVariable

LogicalVariable

Named

Named

Negation

Negation

Visitor

VisitorEvaluate

VisitorToString
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/help-doc.html
##-----------------TITLE------------------------##
API Help (formula package)
##------------------TEXT------------------------##
Overview     Package     Class     Use     Tree     Deprecated     Index   Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes










How This API Document Is Organized

This API (Application Programming Interface) document has pages corresponding to the items in the navigation bar, described as follows.
Overview



The Overview page is the front page of this API document and provides a list of all packages with a summary for each.  This page can also contain an overall description of the set of packages.

Package



Each package has a page that contains a list of its classes and interfaces, with a summary for each. This page can contain four categories:Interfaces (italic)ClassesEnumsExceptionsErrorsAnnotation Types


Class/Interface



Each class, interface, nested class and nested interface has its own separate page. Each of these pages has three sections consisting of a class/interface description, summary tables, and detailed member descriptions:Class inheritance diagramDirect SubclassesAll Known SubinterfacesAll Known Implementing ClassesClass/interface declarationClass/interface description

Nested Class SummaryField SummaryConstructor SummaryMethod Summary

Field DetailConstructor DetailMethod Detail
Each summary entry contains the first sentence from the detailed description for that item. The summary entries are alphabetical, while the detailed descriptions are in the order they appear in the source code. This preserves the logical groupings established by the programmer.


Annotation Type



Each annotation type has its own separate page with the following sections:Annotation Type declarationAnnotation Type descriptionRequired Element SummaryOptional Element SummaryElement Detail



Enum



Each enum has its own separate page with the following sections:Enum declarationEnum descriptionEnum Constant SummaryEnum Constant Detail


Use

Each documented package, class and interface has its own Use page.  This page describes what packages, classes, methods, constructors and fields use any part of the given class or package. Given a class or interface A, its Use page includes subclasses of A, fields declared as A, methods that return A, and methods and constructors with parameters of type A.  You can access this page by first going to the package, class or interface, then clicking on the "Use" link in the navigation bar.

Tree (Class Hierarchy)

There is a Class Hierarchy page for all packages, plus a hierarchy for each package. Each hierarchy page contains a list of classes and a list of interfaces. The classes are organized by inheritance structure starting with java.lang.Object. The interfaces do not inherit from java.lang.Object.When viewing the Overview page, clicking on "Tree" displays the hierarchy for all packages.When viewing a particular package, class or interface page, clicking "Tree" displays the hierarchy for only that package.


Deprecated API

The Deprecated API page lists all of the API that have been deprecated. A deprecated API is not recommended for use, generally due to improvements, and a replacement API is usually given. Deprecated APIs may be removed in future implementations.

Index

The Index contains an alphabetic list of all classes, interfaces, constructors, methods, and fields.

Prev/Next
These links take you to the next or previous class, interface, package, or related page.
Frames/No Frames
These links show and hide the HTML frames.  All pages are available with or without frames.


Serialized Form
Each serializable or externalizable class has a description of its serialization fields and methods. This information is of interest to re-implementors, not to developers using the API. While there is no link in the navigation bar, you can get to this information by going to any serialized class and clicking "Serialized Form" in the "See also" section of the class description.


Constant Field Values
The Constant Field Values page lists the static final fields and their values.



This help file applies to API documentation generated using the standard doclet.










    Overview     Package     Class     Use     Tree     Deprecated     Index   Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/package-summary.html
##-----------------TITLE------------------------##
formula (formula package)
##------------------TEXT------------------------##
Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes









Package formula


Basic classes implementing propositional and first-order logic formulas.

See:

          Description



Interface SummaryFormulaThe type of all logic formulas.
 




Class SummaryConjunctionThe conjunction ("and") of two subformulas.DisjunctionThe disjunction ("and") of two subformulas.EnvironmentAn environment in which to evaluate a formula.LogicalConstantA logical constant, representing true or false.LogicalVariableA logical variable, representing true or false
  (but we may not know which).NamedThe superclass of all named objects in the package.NegationThe negation of a formula.
 



Package formula Description




Basic classes implementing propositional and first-order logic formulas.












    Overview   Package     Class     Use     Tree     Deprecated     Index     Help 



 PREV PACKAGE 
 NEXT PACKAGE
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/deprecated-list.html
##-----------------TITLE------------------------##
Deprecated List (formula package)
##------------------TEXT------------------------##
Overview     Package     Class     Use     Tree   Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes










Deprecated API


Contents









    Overview     Package     Class     Use     Tree   Deprecated     Index     Help 



 PREV 
 NEXT
  FRAMES   
 NO FRAMES   
 

  All Classes
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/Named.html
##-----------------TITLE------------------------##
Named (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class Named

java.lang.Object
  formula.Named

All Implemented Interfaces: java.lang.Comparable
Direct Known Subclasses: LogicalVariable

public abstract class Namedextends java.lang.Objectimplements java.lang.Comparable



The superclass of all named objects in the package.











Constructor SummaryNamed(java.lang.String _name)


           
 




Method Summary
 intcompareTo(java.lang.Object _b)


          Compares two named objects for order, by name.
 booleanequals(java.lang.Object _b)


          Compares two named objects for equality, by name.
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Named

public Named(java.lang.String _name)






Method Detail


equals

public boolean equals(java.lang.Object _b)
Compares two named objects for equality, by name.

Overrides:equals in class java.lang.Object
Parameters:_b - The other object.
Returns:true iff this objects's name is the same as the other's.
Throws:
java.lang.ClassCastException - If the other object is not also a named object.




compareTo

public int compareTo(java.lang.Object _b)
Compares two named objects for order, by name.

Specified by:compareTo in interface java.lang.Comparable
Parameters:_b - The other object.
Returns:-1, 0, or 1 iff this object's name is 
      less than, the same as, or greater than the other's.
Throws:
java.lang.ClassCastException - If the other object is not also a named object.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/Environment.html
##-----------------TITLE------------------------##
Environment (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class Environment

java.lang.Object
  formula.Environment


public class Environmentextends java.lang.Object



An environment in which to evaluate a formula.
  The environment contains definitions of logical variables (true or false).











Constructor SummaryEnvironment()


          Constructs a new, empty environment.
 




Method Summary
 voidbind(LogicalVariable _variable,
     boolean _value)


          Binds a logical variable to a boolean value.
 java.lang.Booleanget(LogicalVariable _variable)


          Get the binding of a logical variable.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Environment

public Environment()
Constructs a new, empty environment.







Method Detail


bind

public void bind(LogicalVariable _variable,
                 boolean _value)
Binds a logical variable to a boolean value.

Parameters:_variable - The logical variable._value - Its boolean value.




get

public java.lang.Boolean get(LogicalVariable _variable)
Get the binding of a logical variable.

Parameters:_variable - The logical variable
Returns:The domain constant the variable is bound to,
      or null if it is not bound.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/LogicalConstant.html
##-----------------TITLE------------------------##
LogicalConstant (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class LogicalConstant

java.lang.Object
  formula.LogicalConstant

All Implemented Interfaces: Formula

public class LogicalConstantextends java.lang.Objectimplements Formula



A logical constant, representing true or false.











Constructor SummaryLogicalConstant(boolean _value)


          Constructs a logical constant.
 




Method Summary
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


LogicalConstant

public LogicalConstant(boolean _value)
Constructs a logical constant.

Parameters:_value - The constant's value.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/VisitorEvaluate.html
##-----------------TITLE------------------------##
VisitorEvaluate (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class VisitorEvaluate

java.lang.Object
  formulaVisited.VisitorEvaluate

All Implemented Interfaces: Visitor

public class VisitorEvaluateextends java.lang.Objectimplements Visitor



A visitor that evaluates each formula, returning
  Boolean.TRUE  if the formula is true,
  Boolean.FALSE if the formula is false, and
  null if its value cannot be determined.
  The presence of undefined logical values,
  or predicates whoses value is not defined for every domain entity,
  can result in formulas whose logical values that cannot be determined.











Constructor SummaryVisitorEvaluate(Environment _env)


          Construct a VisitorEvaluate that evaluates formulas
    in the given environment.
 




Method Summary
 java.lang.Objectvisit(Conjunction _f)


          Calculates the result for a Conjunction.
    A conjunction is true if both its subformulas are true,
    false if either of its subformulas is false,
    and unknown otherwise.
 java.lang.Objectvisit(Disjunction _f)


          Calculates the result for a Disjunction.
    A disjunction is false if both its subformulas are false,
    true if either of its subformulas is true,
    and unknown otherwise.
 java.lang.Objectvisit(LogicalConstant _f)


          Calculates the result for a LogicalConstant.
    The value of LogicalConstant.one()  is true, and
    the value of LogicalConstant.zero() is false.
 java.lang.Objectvisit(LogicalVariable _f)


          Calculates the result for a LogicalVariable.
    The value of a logical variable is
    the value the variable is bound to in the environment,
    and unknown if the variable is bound to no value.
 java.lang.Objectvisit(Negation _f)


          Calculates the result for a Negation.
    A negation is false if its subformula is true,
    false if its subformula is true,
    and unknown if its subformula's value is unknown.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


VisitorEvaluate

public VisitorEvaluate(Environment _env)
Construct a VisitorEvaluate that evaluates formulas
    in the given environment.

Parameters:_env - The environment.






Method Detail


visit

public java.lang.Object visit(Conjunction _f)
Calculates the result for a Conjunction.
    A conjunction is true if both its subformulas are true,
    false if either of its subformulas is false,
    and unknown otherwise.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(Disjunction _f)
Calculates the result for a Disjunction.
    A disjunction is false if both its subformulas are false,
    true if either of its subformulas is true,
    and unknown otherwise.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(LogicalConstant _f)
Calculates the result for a LogicalConstant.
    The value of LogicalConstant.one()  is true, and
    the value of LogicalConstant.zero() is false.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(LogicalVariable _f)
Calculates the result for a LogicalVariable.
    The value of a logical variable is
    the value the variable is bound to in the environment,
    and unknown if the variable is bound to no value.
    The environment used is the one with which this visitor was constructed.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(Negation _f)
Calculates the result for a Negation.
    A negation is false if its subformula is true,
    false if its subformula is true,
    and unknown if its subformula's value is unknown.

Specified by:visit in interface Visitor











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Disjunction.html
##-----------------TITLE------------------------##
Disjunction (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class Disjunction

java.lang.Object
  formulaVisited.Disjunction

All Implemented Interfaces: Formula

public class Disjunctionextends java.lang.Objectimplements Formula



The disjunction ("and") of two subformulas.
  A disjunction is true if either or both subformulas are true,
  and false if both subformulas are false.











Constructor SummaryDisjunction(Formula _left,
            Formula _right)


          Constructs the disjunction of two subformulas.
 




Method Summary
 java.lang.Objectaccept(Visitor _v)


          Accepts a visitor.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Disjunction

public Disjunction(Formula _left,
                   Formula _right)
Constructs the disjunction of two subformulas.

Parameters:_left - The first  subformula._right - The second subformula.






Method Detail


accept

public java.lang.Object accept(Visitor _v)
Description copied from interface: FormulaAccepts a visitor.
    Each subclass implements this method as 
    {  return _v.visit(this);  },
    and the compiler identifies the right Visitor method
    based on the subclass (which is the type of this).

Specified by:accept in interface Formula
Parameters:_v - The visitor.
Returns:The result _v calculates for this formula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Formula.html
##-----------------TITLE------------------------##
Formula (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Interface Formula
All Known Implementing Classes: Conjunction, Disjunction, LogicalConstant, LogicalVariable, Negation

public interface Formula



The type of all logic formulas that accept visitors.











Method Summary
 java.lang.Objectaccept(Visitor _v)


          Accepts a visitor.
 






Method Detail


accept

java.lang.Object accept(Visitor _v)
Accepts a visitor.
    Each subclass implements this method as 
    {  return _v.visit(this);  },
    and the compiler identifies the right Visitor method
    based on the subclass (which is the type of this).

Parameters:_v - The visitor.
Returns:The result _v calculates for this formula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/LogicalVariable.html
##-----------------TITLE------------------------##
LogicalVariable (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class LogicalVariable

java.lang.Object
  formula.Named
      formula.LogicalVariable

All Implemented Interfaces: Formula, java.lang.Comparable

public class LogicalVariableextends Namedimplements Formula



A logical variable, representing true or false
  (but we may not know which).











Constructor SummaryLogicalVariable(java.lang.String _name)


          Constructs a logical variable.
 




Method Summary
 
Methods inherited from class formula.NamedcompareTo, equals
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


LogicalVariable

public LogicalVariable(java.lang.String _name)
Constructs a logical variable.

Parameters:_name - The variables's name.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Named.html
##-----------------TITLE------------------------##
Named (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class Named

java.lang.Object
  formulaVisited.Named

All Implemented Interfaces: java.lang.Comparable
Direct Known Subclasses: LogicalVariable

public abstract class Namedextends java.lang.Objectimplements java.lang.Comparable



The superclass of all named objects in the package.











Constructor SummaryNamed(java.lang.String _name)


           
 




Method Summary
 intcompareTo(java.lang.Object _b)


          Compares two named objects for order, by name.
 booleanequals(java.lang.Object _b)


          Compares two named objects for equality, by name.
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Named

public Named(java.lang.String _name)






Method Detail


equals

public boolean equals(java.lang.Object _b)
Compares two named objects for equality, by name.

Overrides:equals in class java.lang.Object
Parameters:_b - The other object.
Returns:true iff this objects's name is the same as the other's.
Throws:
java.lang.ClassCastException - If the other object is not also a named object.




compareTo

public int compareTo(java.lang.Object _b)
Compares two named objects for order, by name.

Specified by:compareTo in interface java.lang.Comparable
Parameters:_b - The other object.
Returns:-1, 0, or 1 iff this object's name is 
      less than, the same as, or greater than the other's.
Throws:
java.lang.ClassCastException - If the other object is not also a named object.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~irus/spin/flyers/99/feb99.html
##-----------------TITLE------------------------##
SPIN Flyer
##------------------TEXT------------------------##
University of California at Irvine



Irvine Research Unit in Software 
(IRUS) is proud to sponsor the



Software Process 
Improvement Network (SPIN)


Practical Software Measurement -- 
A Guide to Objective Program Insight




* Friday, February 19, 1999 * (3rd Friday)

9:00 a.m. - 12:00 noon
McDonnell Douglas Auditorium
University of California, Irvine

There is a $15.00 charge for non-sponsors. 
Checks should be made payable to UC Regents.



No reservations required.



Featured Speaker: Leia White, Senior Process Improvement 
Engineer, 
                              
Software Productivity Consortium (SPC), 
white@software.org



This presentation describes the Practical Software Measurement (PSM) 
approach. PSM is sponsored by the Office of Undersecretary of Defense 
for Acquisition & Technology (OUSD A&T). The goal of the project is to 
provide program managers with the objective information needed to 
successfully meet cost, schedule, and technical objectives. 



The PSM process
is based on actual software measurement experience on DoD, Government, 
and industry programs 

treats measurement as a flexible process not a pre-defined list of 
graphs or reports 

integrates the measurement requirements into the developers process 

defines an issue-driven analysis approach which helps the program 
manager make informed decisions 

supports the current software acquisition and measurement 
policy and provides a basis for enterprise level software measurement.




The PSM team produced and deployed a guidebook, training, tools, 
workshops, and a cooperative transition approach that is currently 
being used by DoD, Government and industry.



Biography: 
Leia White joined the Software Productivity Consortium (SPC) in 
November 1998. Previously, she has worked for Logicon Advanced 
Technology, Aerojet ElectroSystems and was a co-founder and a 
principal of the Computing Experience Corporation (CEC). She is a 
Senior Process Improvement Engineer specializing in assessments, 
process definition and improvement, technology transition and 
organization management. Her career covers more than 20 years of 
experience as a software project team leader, software engineer, 
lecturer, consultant, and system developer. She is a voting member 
of the Software Engineering Standards Committee of the IEEE Computer Society.



Coordinator: Leitha Purcell, Project Manager, Software Process Improvement Inititative,  
                       
Northrop Grumman Corporation, 
purcele@mail.northgrum.com




UCI Maps and Directions to meeting are available.



Next Meeting: 


Date: Friday, March 26, 1999
Topic: 
Successes in Achieving High SEI Maturity Levels
Speakers: Pete Puchalski and Linda A. Abelson, The Boeing Company
                  
Leitha Purcell, Northrop Grumman Corporation
Coordinator: Karen Chan, The Boeing Company, karen.chan@west.boeing.com




The Irvine Research Unit in Software wishes to thank its 
corporate sponsors:



Sustaining:

The Boeing Company * IBM * Microsoft Corporation * Northrop Grumman Corporation
Raytheon Company * Sun Microsystems Laboratories *  TRW



Supporting:

     Beckman Coulter * FileNet Corporation * Printronix, Inc.*
    Continuus Software Corporation * Hewlett Packard




For further information on 
SPIN or 
IRUS,
contact Debra Brodbeck
at (949) 824-2260, 
brodbeck@ics.uci.edu





Irvine Research Unit in Software

Information and Computer Science
University of California, Irvine  CA 92697-3425
##------------------URL-------------------------##
http://www.ics.uci.edu/~arcadia/Teamware/demo/category2.html
##-----------------TITLE------------------------##
Online Interactive Teamware Demo, Events and Requests
##------------------TEXT------------------------##
There may be multiple Handlers for an Event or Request.
The way an event or request is handled can be dynamically
decided at runtime.




DONE
##------------------URL-------------------------##
http://www.ics.uci.edu/~arcadia/Teamware/demo/attach.html
##-----------------TITLE------------------------##
Online Interactive Teamware Demo, Specification
##------------------TEXT------------------------##
Artifact Inputs and Outputs, Resource Assignments can all be
attached to a specification.  As an activity is executed, the
interpreter checks to make sure that values are assigned to
the inputs, outputs, and resources before enabling and completing.











DONE
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/LogicalConstant.html
##-----------------TITLE------------------------##
LogicalConstant (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class LogicalConstant

java.lang.Object
  formulaVisited.LogicalConstant

All Implemented Interfaces: Formula

public class LogicalConstantextends java.lang.Objectimplements Formula



A logical constant, representing true or false.











Method Summary
 java.lang.Objectaccept(Visitor _v)


          Accepts a visitor.
static LogicalConstantone()


          Returns a logical constant for 1 (true).
static LogicalConstantzero()


          Returns a logical constant for 0 (false).
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Method Detail


one

public static LogicalConstant one()
Returns a logical constant for 1 (true).
    The same constant is returned for every call.
    The constant is constructed at initialization time (eager initialization).







zero

public static LogicalConstant zero()
Returns a logical constant for 0 (false).
    The same constant is returned for every call.
    The constant is not constructed until the first call (lazy initialization).







accept

public java.lang.Object accept(Visitor _v)
Description copied from interface: FormulaAccepts a visitor.
    Each subclass implements this method as 
    {  return _v.visit(this);  },
    and the compiler identifies the right Visitor method
    based on the subclass (which is the type of this).

Specified by:accept in interface Formula
Parameters:_v - The visitor.
Returns:The result _v calculates for this formula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/LogicalVariable.html
##-----------------TITLE------------------------##
LogicalVariable (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class LogicalVariable

java.lang.Object
  formulaVisited.Named
      formulaVisited.LogicalVariable

All Implemented Interfaces: Formula, java.lang.Comparable

public class LogicalVariableextends Namedimplements Formula



A logical variable, representing true or false
  (but we may not know which).











Constructor SummaryLogicalVariable(java.lang.String _name)


          Constructs a logical variable.
 




Method Summary
 java.lang.Objectaccept(Visitor _v)


          Accepts a visitor.
 
Methods inherited from class formulaVisited.NamedcompareTo, equals
 
Methods inherited from class java.lang.Objectclone, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


LogicalVariable

public LogicalVariable(java.lang.String _name)
Constructs a logical variable.

Parameters:_name - The variables's name.






Method Detail


accept

public java.lang.Object accept(Visitor _v)
Description copied from interface: FormulaAccepts a visitor.
    Each subclass implements this method as 
    {  return _v.visit(this);  },
    and the compiler identifies the right Visitor method
    based on the subclass (which is the type of this).

Specified by:accept in interface Formula
Parameters:_v - The visitor.
Returns:The result _v calculates for this formula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/Negation.html
##-----------------TITLE------------------------##
Negation (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class Negation

java.lang.Object
  formula.Negation

All Implemented Interfaces: Formula

public class Negationextends java.lang.Objectimplements Formula



The negation of a formula.











Constructor SummaryNegation(Formula _subformula)


          Constructs the negation of a formula
 




Method Summary
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Negation

public Negation(Formula _subformula)
Constructs the negation of a formula

Parameters:_subformula - The formula being negated.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Conjunction.html
##-----------------TITLE------------------------##
Conjunction (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class Conjunction

java.lang.Object
  formulaVisited.Conjunction

All Implemented Interfaces: Formula

public class Conjunctionextends java.lang.Objectimplements Formula



The conjunction ("and") of two subformulas.
  A conjunction is true if both subformulas are true,
  and false if either or both subformulas are false.











Constructor SummaryConjunction(Formula _left,
            Formula _right)


          Constructs the conjunction of two subformulas.
 




Method Summary
 java.lang.Objectaccept(Visitor _v)


          Accepts a visitor.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Conjunction

public Conjunction(Formula _left,
                   Formula _right)
Constructs the conjunction of two subformulas.

Parameters:_left - The first subformula._right - The second subformula.






Method Detail


accept

public java.lang.Object accept(Visitor _v)
Description copied from interface: FormulaAccepts a visitor.
    Each subclass implements this method as 
    {  return _v.visit(this);  },
    and the compiler identifies the right Visitor method
    based on the subclass (which is the type of this).

Specified by:accept in interface Formula
Parameters:_v - The visitor.
Returns:The result _v calculates for this formula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/Disjunction.html
##-----------------TITLE------------------------##
Disjunction (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class Disjunction

java.lang.Object
  formula.Disjunction

All Implemented Interfaces: Formula

public class Disjunctionextends java.lang.Objectimplements Formula



The disjunction ("and") of two subformulas.
  A disjunction is true if either or both subformulas are true,
  and false if both subformulas are false.











Constructor SummaryDisjunction(Formula _left,
            Formula _right)


          Constructs the disjunction of two subformulas.
 




Method Summary
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Disjunction

public Disjunction(Formula _left,
                   Formula _right)
Constructs the disjunction of two subformulas.

Parameters:_left - The first subformula._right - The second subformula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/Conjunction.html
##-----------------TITLE------------------------##
Conjunction (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Class Conjunction

java.lang.Object
  formula.Conjunction

All Implemented Interfaces: Formula

public class Conjunctionextends java.lang.Objectimplements Formula



The conjunction ("and") of two subformulas.
  A conjunction is true if both subformulas are true,
  and false if either or both subformulas are false.











Constructor SummaryConjunction(Formula _left,
            Formula _right)


          Constructs the conjunction of two subformulas.
 




Method Summary
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Conjunction

public Conjunction(Formula _left,
                   Formula _right)
Constructs the conjunction of two subformulas.

Parameters:_left - The first subformula._right - The second subformula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Environment.html
##-----------------TITLE------------------------##
Environment (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class Environment

java.lang.Object
  formulaVisited.Environment


public class Environmentextends java.lang.Object



An environment in which to evaluate a formula.
  The environment may contain definitions of logical variables (true or false).











Constructor SummaryEnvironment()


          Constructs a new, empty environment.
 




Method Summary
 voidbind(LogicalVariable _variable,
     boolean _value)


          Binds a logical variable to a boolean value.
 java.lang.Booleanget(LogicalVariable _variable)


          Get the binding of a logical variable.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Environment

public Environment()
Constructs a new, empty environment.







Method Detail


bind

public void bind(LogicalVariable _variable,
                 boolean _value)
Binds a logical variable to a boolean value.

Parameters:_variable - The logical variable._value - Its boolean value.




get

public java.lang.Boolean get(LogicalVariable _variable)
Get the binding of a logical variable.

Parameters:_variable - The logical variable
Returns:The domain constant the variable is bound to,
      or null if it is not bound.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/VisitorToString.html
##-----------------TITLE------------------------##
VisitorToString (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class VisitorToString

java.lang.Object
  formulaVisited.VisitorToString

All Implemented Interfaces: Visitor

public class VisitorToStringextends java.lang.Objectimplements Visitor



A visitor that produces a string representation for each formula.











Constructor SummaryVisitorToString()


           
 




Method Summary
 java.lang.Objectvisit(Conjunction _f)


          Calculates the result for a Conjunction.
 java.lang.Objectvisit(Disjunction _f)


          Calculates the result for a Disjunction.
 java.lang.Objectvisit(LogicalConstant _f)


          Calculates the result for a LogicalConstant.
 java.lang.Objectvisit(LogicalVariable _f)


          Calculates the result for a LogicalVariable.
 java.lang.Objectvisit(Negation _f)


          Calculates the result for a Negation.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


VisitorToString

public VisitorToString()






Method Detail


visit

public java.lang.Object visit(Conjunction _f)
Description copied from interface: VisitorCalculates the result for a Conjunction.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(Disjunction _f)
Description copied from interface: VisitorCalculates the result for a Disjunction.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(LogicalConstant _f)
Description copied from interface: VisitorCalculates the result for a LogicalConstant.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(LogicalVariable _f)
Description copied from interface: VisitorCalculates the result for a LogicalVariable.

Specified by:visit in interface Visitor





visit

public java.lang.Object visit(Negation _f)
Description copied from interface: VisitorCalculates the result for a Negation.

Specified by:visit in interface Visitor











    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Negation.html
##-----------------TITLE------------------------##
Negation (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class Negation

java.lang.Object
  formulaVisited.Negation

All Implemented Interfaces: Formula

public class Negationextends java.lang.Objectimplements Formula



The negation of a formula.











Constructor SummaryNegation(Formula _subformula)


          Constructs the negation of a formula
 




Method Summary
 java.lang.Objectaccept(Visitor _v)


          Accepts a visitor.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Negation

public Negation(Formula _subformula)
Constructs the negation of a formula

Parameters:_subformula - The formula being negated.






Method Detail


accept

public java.lang.Object accept(Visitor _v)
Description copied from interface: FormulaAccepts a visitor.
    Each subclass implements this method as 
    {  return _v.visit(this);  },
    and the compiler identifies the right Visitor method
    based on the subclass (which is the type of this).

Specified by:accept in interface Formula
Parameters:_v - The visitor.
Returns:The result _v calculates for this formula.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Visitor.html
##-----------------TITLE------------------------##
Visitor (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Interface Visitor
All Known Implementing Classes: VisitorEvaluate, VisitorToString

public interface Visitor



A visitor to formulas.
  The visitor traverses the syntax tree of a formula,
  and calculates some result for each kind of formula.
  For kinds of formulas that have subformulas,
  the results for the subformulas are combined
  into the result for the formula.
  Each formula's result is returned from the visit() method.











Method Summary
 java.lang.Objectvisit(Conjunction _f)


          Calculates the result for a Conjunction.
 java.lang.Objectvisit(Disjunction _f)


          Calculates the result for a Disjunction.
 java.lang.Objectvisit(LogicalConstant _f)


          Calculates the result for a LogicalConstant.
 java.lang.Objectvisit(LogicalVariable _f)


          Calculates the result for a LogicalVariable.
 java.lang.Objectvisit(Negation _f)


          Calculates the result for a Negation.
 






Method Detail


visit

java.lang.Object visit(Conjunction _f)
Calculates the result for a Conjunction.






visit

java.lang.Object visit(Disjunction _f)
Calculates the result for a Disjunction.






visit

java.lang.Object visit(LogicalConstant _f)
Calculates the result for a LogicalConstant.






visit

java.lang.Object visit(LogicalVariable _f)
Calculates the result for a LogicalVariable.






visit

java.lang.Object visit(Negation _f)
Calculates the result for a Negation.












    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formulaVisited/Factory.html
##-----------------TITLE------------------------##
Factory (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formulaVisited

Class Factory

java.lang.Object
  formulaVisited.Factory


public class Factoryextends java.lang.Object



A factory for creating formulas from a reader.
  The specific Formula subclass that is returned
  depends on what the reader reads.
  Because the factory is stateless,
  all its methods are static.
  True and false are represented by 1 and 0;
  variables are strings of letters and digits beginnig with a lowercase letter;
  the negation operator is '~';
  conjunctions are in () with '&' as the infix operator;  and
  disjunctions are in [] with '|' as the infix operator.











Constructor SummaryFactory()


           
 




Method Summary
static Formulafactory(java.io.PushbackReader _in)


          Reads a character stream and returns
    the formula corresponding to it, if any.
 
Methods inherited from class java.lang.Objectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
 






Constructor Detail


Factory

public Factory()






Method Detail


factory

public static Formula factory(java.io.PushbackReader _in)
                       throws java.io.IOException
Reads a character stream and returns
    the formula corresponding to it, if any.

Parameters:_in - A pushback reader for the stream.
Throws:
java.io.IOException - If the stream operations do.
java.lang.RuntimeException - If there is a syntax error in the character stream.










    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~alspaugh/cls/shr/javadoc/formula/Formula.html
##-----------------TITLE------------------------##
Formula (formula package)
##------------------TEXT------------------------##
Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD







formula

Interface Formula
All Known Implementing Classes: Conjunction, Disjunction, LogicalConstant, LogicalVariable, Negation

public interface Formula



The type of all logic formulas.

















    Overview     Package   Class     Use     Tree     Deprecated     Index     Help 



 PREV CLASS 
 NEXT CLASS
  FRAMES   
 NO FRAMES   
 

  All Classes




  SUMMARY: NESTED | FIELD | CONSTR | METHOD
DETAIL: FIELD | CONSTR | METHOD
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld003.htm
##-----------------TITLE------------------------##
Higher-order Functions
##------------------TEXT------------------------##
Higher-order Functions 
 Key to everything (DSLs, ADLs, …) is abstraction

Functional abstraction is simple, powerful, and well-understood

Higher-order functions have a strong mathematical foundation

Functional languages support a calculus of equational reasoning 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/index.htm
##-----------------TITLE------------------------##
Higher-Order Typed (HOT) Languages
##------------------TEXT------------------------##
Higher-Order Typed (HOT) Languages
12/26/97
 Click here to start
   


 
      Table of Contents
            Higher-Order Typed (HOT) Languages
        Who are we (Yale, OGI)?
        Higher-order Functions
        Polymorphic Typing
        Functional Languages at the Architecture Level
        ADL is an instance of DSL
        Dynamism
        Current Status
        Conclusions

   
	 Author: James Hook 
      Email:  peterson-john@cs.yale.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld005.htm
##-----------------TITLE------------------------##
Functional Languages at the Architecture Level
##------------------TEXT------------------------##
Functional Languages at the Architecture Level 
 Do we need ADLs?

Or simply abstraction to express both the architecture and its elaboration?

Haskell (or ML) do not have everything, but…provide a well understood foundation

Support executable specifications:

E.g. Hawk specification of a microprocessor at the architecture level can execute instructions
Supports program transformation

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld001.htm
##-----------------TITLE------------------------##
Higher-Order Typed (HOT) Languages
##------------------TEXT------------------------##
Higher-Order Typed (HOT) Languages 
 John Peterson, Yale

James Hook, OGI

Paul Hudak, Yale  (in spirit)

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld009.htm
##-----------------TITLE------------------------##
Conclusions
##------------------TEXT------------------------##
Conclusions 
 We’re right

You’re wrong

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld008.htm
##-----------------TITLE------------------------##
Current Status
##------------------TEXT------------------------##
Current Status 
 Haskell for embedded languages

Fran:  Functional Reactive Animation
Hawk:  Microprocessor Specification Language
Frob:  functional robotics
Integration with COM/CORBA

Integrate with ACME toolset?

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld004.htm
##-----------------TITLE------------------------##
Polymorphic Typing
##------------------TEXT------------------------##
Polymorphic Typing 
 It’s not just safety… Types are very descriptive

Large and useful library of type abstractions

What does this function do?


f :: Event a -> Event b -> Event (Either a b)
Types can encode many important properties

e.g. Independence of state threads, isolation of effects
Give us Polymorphic types or give us Death!

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld006.htm
##-----------------TITLE------------------------##
ADL is an instance of DSL
##------------------TEXT------------------------##
ADL is an instance of DSL 
 Languages for the domain of Architectures

Constraints

Many useful constraints modeled in type system
Some additional static analysis may be needed
Research into expanded type systems with constraints
Need representations where the abstraction is explicit.  

You do not want to recover abstraction by analysis
Abstractions come down from the top, not up from the bottom
Leverage component technologies (CORBA, COM) 

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld002.htm
##-----------------TITLE------------------------##
Who are we (Yale, OGI)?
##------------------TEXT------------------------##
Who are we (Yale, OGI)? 
 Background is Typed Functional Programming Languages

Haskell and ML
Current Research Emphasis

Domain Specific Languages
Functional Programming Implementation
Functional Programming as a formal method
Type systems
EDCS:   

Dynamic Languages and Arch/Gen.
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/peterson/tsld007.htm
##-----------------TITLE------------------------##
Dynamism
##------------------TEXT------------------------##
Dynamism 
 Dynamism is not an accidental side-effect of language choice

Need is to cleanly express the dynamism in the abstractions used to specify and implement the system

HOT (higher-order, typed) languages support this cleanly and soundly

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/index.htm
##-----------------TITLE------------------------##
Specifying Dynamic Architectures using Wright
##------------------TEXT------------------------##
Specifying Dynamic Architectures using Wright
12/26/97
 Click here to start
   


 
      Table of Contents
            Specifying Dynamic Architectures using Wright
        Dynamic Architectures
        Things we would like to know
        Current Approaches	
        Current Approaches (contd)
        Our Approach
        Technical Basis
        Example
        Results

   
	 Author: David Garlan 
      Email:  garlan@cs.cmu.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld005.htm
##-----------------TITLE------------------------##
Current Approaches (contd)
##------------------TEXT------------------------##
Current Approaches (contd) 
 Develop specialized theory for a particular style

e.g., RPC-based systems, C2, RT event-based systems
provides high leverage for that style, but may not be applicable to very many systems
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld008.htm
##-----------------TITLE------------------------##
Example
##------------------TEXT------------------------##
Example 
 Primary server can go down at any time

If it does, Client should talk to the back-up server

When Primary comes back up, switch back to it

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld003.htm
##-----------------TITLE------------------------##
Things we would like to know
##------------------TEXT------------------------##
Things we would like to know 
 What are the set of possible architectural configurations that might occur?

Do any of these configurations violate style constraints?

Can reconfiguration disrupt computations resulting in deadlocks, lost messages, etc.?

Is the dynamic system equivalent to some other static system?

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld007.htm
##-----------------TITLE------------------------##
Technical Basis
##------------------TEXT------------------------##
Technical Basis 
 Treat architecture as set of interacting processes

for both components and connectors
behavior described using a form of CSP specification (Wright)
Specify a reconfiguration program, which handles all architectural reconfigurations

uses primitive operators to create/delete/attach components and connectors
Components and connectors raise control events 

explicitly identifies places where reconfiguration may occur
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld004.htm
##-----------------TITLE------------------------##
Current Approaches
##------------------TEXT------------------------##
Current Approaches	 
 Base notation on formalism designed to handle evolving systems

e.g., Pi Calculus
expressive, but generality may limit ability to predict outcome and to perform static analyses
Just model the structural aspects of reconfiguration

e.g., Darwin, LeMetayer graph grammars
understandable, but limits ability to reason about interaction between behavior and reconfiguration
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld009.htm
##-----------------TITLE------------------------##
Results
##------------------TEXT------------------------##
Results 
 Can analyze a system to detect inconsistencies using commercial model-checking tools

illegal attachments
latent deadlocks
loss of messages
Can check whether all configurations satisfy style constraints

not automatable
Can prove equivalence between reconfigurable system and static (non-reconfigurable) system

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld006.htm
##-----------------TITLE------------------------##
Our Approach
##------------------TEXT------------------------##
Our Approach 
 Uniform semantic base

model both architectural structure and abstract behavior
permits analysis of interactions between the two
Syntactic separation between reconfiguration and “steady-state” behavior

localizes reconfiguration changes
separates concerns
Limit specifications to common case of finite sets of configurations

supports static analysis
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld002.htm
##-----------------TITLE------------------------##
Dynamic Architectures
##------------------TEXT------------------------##
Dynamic Architectures 
 Problem: How can we characterize systems that evolve during run-time?

Approach: Use architectural modeling and analysis

Complicating factors: Architectural reconfiguration may interact with on-going computations

Claim: Need specifications that can expose the interactions between reconfiguration and other architectural properties

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/garlan/tsld001.htm
##-----------------TITLE------------------------##
Specifying Dynamic Architectures using Wright
##------------------TEXT------------------------##
Specifying Dynamic Architectures using Wright 
 David Garlan

Carnegie Mellon University

EDCS

Nov 10-12, 1997

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/feiler/tsld005.htm
##-----------------TITLE------------------------##
Implications of High Assurance
##------------------TEXT------------------------##
Implications of High Assurance 
 Modeling of dynamic reconfiguration, fault tolerance, operating modes

Assurance of

runtime support
recovery path and fallback configuration
Assurance of upgrade

transitive closure of dependencies
impact delimiters to reduce transitive closure
In summary: dependable system upgrade

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/feiler/index.htm
##-----------------TITLE------------------------##
Dynamic Architectures and High Asurance
##------------------TEXT------------------------##
Dynamic Architectures and High Asurance
12/26/97
 Click here to start
   


 
      Table of Contents
            Dynamic Architectures and High Asurance
        Dynamic Architectures
        High Assurance
        Implications of Dynamics
        Implications of High Assurance

   
	 Author: Computing Facilities 
      Email:  phf@sei.cmu.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/feiler/tsld001.htm
##-----------------TITLE------------------------##
Dynamic Architectures and High Asurance
##------------------TEXT------------------------##
Dynamic Architectures and High Asurance 
 
1
Peter H Feiler



Nov. 97



Software Engineering Institute

Carnegie Mellon University

Pittsburgh, PA 15213-3890



Sponsored by the U.S. Department of Defense

© 1997 by Carnegie Mellon University

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/feiler/tsld003.htm
##-----------------TITLE------------------------##
High Assurance
##------------------TEXT------------------------##
High Assurance 
 System validation

System verification

System certification

System reliability

System availability

System robustness

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/feiler/tsld002.htm
##-----------------TITLE------------------------##
Dynamic Architectures
##------------------TEXT------------------------##
Dynamic Architectures 
 Incremental change

Online change

Change in environment (e.g., system being controlled)

System improvement (e.g., performance, capability)

Change in component implementation, interface, system topology


 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/feiler/tsld004.htm
##-----------------TITLE------------------------##
Implications of Dynamics
##------------------TEXT------------------------##
Implications of Dynamics 
 Manage multiple versions of components and systems

Modeling 
Static and runtime selection
Concurrent execution
Static vs. runtime assertion of properties

Modeling of change and reconfiguration

difference between variants
transition between variants
system/component state transfer
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/index.htm
##-----------------TITLE------------------------##
What Dynamic LanguagesCan Do for ADLs
##------------------TEXT------------------------##
What Dynamic LanguagesCan Do for ADLs
12/26/97
 Click here to start
   


 
      Table of Contents
            What Dynamic LanguagesCan Do for ADLs
        Two Truths
        Dynamic Architecture Development Environments
        Type 1: Basic Dynamics
        Type 2: Advanced Dynamics
        ADL Interpreters: Dynamics R Us
        Examples of Other DL Facilities
        Amortizing the Costs of ADL Interpreters
        Type 3: The Frontier
        Summary

   
	 Author: Rick Brenner 
      Email:  rbrenner@draper.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld008.htm
##-----------------TITLE------------------------##
Amortizing the
##------------------TEXT------------------------##
Amortizing the Costs of ADL Interpreters 
 Reduce the cost of developing interpreters by

Writing an “interpreter generator” whose input is the specification of the ADL
Writing an ADL spec for each target ADL
With two interpreters running in the same environment:

You can make changes to the architecture in the ADL of choice
You can use several ADLs to work on the same architecture
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld009.htm
##-----------------TITLE------------------------##
Type 3: The Frontier
##------------------TEXT------------------------##
Type 3: The Frontier 
 What do ADLs need for non-type-1&2 dynamic characteristics?

Layered dynamics: changing the architecture 

Doesn’t immediately change the system until you push the button
Changes some things and not others
Changes the live system immediately
Changes the way that changing the architecture changes the system
Changes the way that changing the architecture changes the way that changing the architecture changes the system
What else?

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld003.htm
##-----------------TITLE------------------------##
Dynamic Architecture
##------------------TEXT------------------------##
Dynamic Architecture Development Environments 
 Three kinds of dynamism

Type 1: Interactive
Type 2: Computed
Type 3: The Frontier  ??
Dynamic Language capabilities cover 1&2

DADE implementors’ choice:

Roll your own: reinvent dynamic language capabilities
Use a DL to implement your DADE

Using a DL to implement your environment allows you to

focus on your environment, not the bookkeeping
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld002.htm
##-----------------TITLE------------------------##
Two Truths
##------------------TEXT------------------------##
Two Truths 
 ADLs are struggling with issues DLs resolved 20-30 years ago

ADLs are struggling with issues DLs never ever thought of


The puzzle is to figure out which is which.
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld001.htm
##-----------------TITLE------------------------##
What Dynamic Languages
##------------------TEXT------------------------##
What Dynamic LanguagesCan Do for ADLs 
 Rick Brenner

Draper Laboratory

rbrenner@draper.com

November 11, 1997

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld007.htm
##-----------------TITLE------------------------##
Examples of Other DL Facilities
##------------------TEXT------------------------##
Examples of Other DL Facilities 
 Fed-X memory management

When it absolutely, positively, can’t leak
Cost of high reliability is amortized across every program ever developed in that DL 
User-controllable 

Class inheritance
Method dispatch
Data types redefined at any time

Incompleteness tolerance

Readtable specification

Parser generators

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld006.htm
##-----------------TITLE------------------------##
ADL Interpreters: Dynamics R Us
##------------------TEXT------------------------##
ADL Interpreters: Dynamics R Us 
 Dynamic languages and interpreters

Historical: DLs arose from the desire to support interpreters
DLs have utilities to support interpreter creation
Dynamism is handled by the DL, not the interpreter implementor

Amortize some of the cost of the interpreter across all interpreters

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld004.htm
##-----------------TITLE------------------------##
Type 1: Basic Dynamics
##------------------TEXT------------------------##
Type 1: Basic Dynamics 
 Basic tools beyond those found in static ADLs

Remove & Delete
Disconnect
Replace
Memory management

Tolerance for incompleteness

Change impact management

Graceful error handling

Example: DeLine, Zelesnik & Shaw  1997

Sort & reorder
Clear
Copy
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld005.htm
##-----------------TITLE------------------------##
Type 2: Advanced Dynamics
##------------------TEXT------------------------##
Type 2: Advanced Dynamics 
 ADL Interpreters++

ADL Procedures & Macros

Computed data types

Computed artifacts of all kinds

Conditional artifact
Computed & derived properties
Architecture classes: inheritance & methods
Computed styles: style choice determined by conditions

Computed scheduling policy

Example: Oreizy 1996

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/brenner/tsld010.htm
##-----------------TITLE------------------------##
Summary
##------------------TEXT------------------------##
Summary 
 Anything you can do in a Dynamic Language, you can do in a Static Language, but:

You will spend resources reinventing the DL’s built-in capability
Development costs may be higher
System may be less reliable
Implementing your DADE in a DL gives you access to a dynamic infrastructure


If you use a DL,

you get to the Frontier first
 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/index.htm
##-----------------TITLE------------------------##
Franz Dynamic LanguageEDCS Project State
##------------------TEXT------------------------##
Franz Dynamic LanguageEDCS Project State
12/26/97
 Click here to start
   


 
      Table of Contents
            Franz Dynamic LanguageEDCS Project State
        Common Lisp Object System
        High Level Languages
        Executable Domain Languages
        CLOSDynamic Languages
        EDCS Projects
        Shared Library Implementation

   
	 Author: Dr. Jim Veitch,  Franz Inc. 
      Email:  info@franz.com
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld006.htm
##-----------------TITLE------------------------##
EDCS Projects
##------------------TEXT------------------------##
EDCS Projects 
 CORBA

Standardization (OMG)
CLOS Mapping
IDL mapping
Shared Libraries

Callable from other non-CLOS modules
Callable from other CLOS modules
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld005.htm
##-----------------TITLE------------------------##
CLOS
##------------------TEXT------------------------##
CLOSDynamic Languages 
 Dynamic update of system at run time

Enables a user-evolved development process

Enables major modification even in deployed applications

Embeddable, Extensible Domain Languages make for clean, compact code

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld007.htm
##-----------------TITLE------------------------##
Shared Library Implementation
##------------------TEXT------------------------##
Shared Library Implementation 
 Make CLOS applications deliverable as DLL’s or Shared Object Libraries

Enable CLOS applications to call any third party DLL’s or Shared Object Libraries

Packaging that fits the industry model.

 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld003.htm
##-----------------TITLE------------------------##
High Level Languages
##------------------TEXT------------------------##
High Level Languages 
 
Functionality per Source Line of Code (Log Scale)

Dynamic

Change

Basic ?

C

C++

CLOS

Non-OOP

Static OOP

Dynamic OOP

Java ?

Assembler

Static

Dynamic

Extension
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld002.htm
##-----------------TITLE------------------------##
Common Lisp Object System
##------------------TEXT------------------------##
Common Lisp Object System 
 Language level support for many EDCS ideas

Supports Incremental Change

Scales up to complex Applications

High Level yet General Purpose

ANSI Standard

 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld001.htm
##-----------------TITLE------------------------##
Franz Dynamic Language
##------------------TEXT------------------------##
Franz Dynamic LanguageEDCS Project State 
 Jim Veitch

Principal Investigator

Franz Inc.



info@franz.com

http://www.franz.com/

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/veitch/tsld004.htm
##-----------------TITLE------------------------##
Executable Domain Languages
##------------------TEXT------------------------##
Executable Domain Languages 
 CORBA -> CLOS mapping


module Bank{

   interface Account {

       float Balance(); 

       };

   interface AccountManager {

      Account open (in string name);

      };

};

(idl “Bank.idl”)

(defclass Account (Bank:Account)

    (balance :accessor get-balance))

(def-corba-method Balance ((account Account))

    (get-balance account))

(defclass AccountManager (Bank:AccountManager)

    ((accounts :accessor get-accounts :initform (make-hash-table :test #’equal))))

(def-corba-method open ((mgr AccountManager) name)

    (gethash name (get-accounts mgr)))

Server Implementation

Bank.idl
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld001.htm
##-----------------TITLE------------------------##
Dynamic Architectures
##------------------TEXT------------------------##
Dynamic Architectures 
 Bob Balzer

ISI

Nov. 11, 1997

 

 Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/index.html
##-----------------TITLE------------------------##
Dynamic Architectures
##------------------TEXT------------------------##
Dynamic Architectures
12/11/97
 Click here to start
   


 
      Table of Contents
            Dynamic Architectures
        Dynamic Architectures
        Types of Architecture Dynamism
        Dnynamism Support
        Compound Architecture OperatorsExamples
        Modification Relativity
        PPT Slide

   
	 Author: Bob Balzer 
      Email:  balzer@isi.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld003.htm
##-----------------TITLE------------------------##
Types of Architecture Dynamism
##------------------TEXT------------------------##
Types of Architecture Dynamism 
 Run Time Structural Changes

Create/Destroy Type Instance: Component, Connector
Attach/Detach Port to Role
Run Time Control Changes
Create/Destroy Process/Thread
Suspend/Resume Process/Thread
Run Time Behavior (i.e. Events)
Design Time Structural Changes
Define Type: 			Component, Connector
Design Time Control Changes
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld005.htm
##-----------------TITLE------------------------##
Compound Architecture Operators
##------------------TEXT------------------------##
Compound Architecture OperatorsExamples 
 Replace Component/Connector

Splice Component In/Out

Refine Component

Aggregate Components

Unfold Aggregated Component


 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld004.htm
##-----------------TITLE------------------------##
Dnynamism Support
##------------------TEXT------------------------##
Dnynamism Support 
 ADLs

Specify Space of Legal Architectures
Architecture Editors

Provide Modification Operators
ACME Editor

Provide Modification Operators
Dynamically Checks Architecture Legality

=> Atomic Updates (i.e. hidden internal states not checked)
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld007.htm
##-----------------TITLE------------------------##
PPT Slide
##------------------TEXT------------------------##
PPT Slide 
 
Track

Server

Doctrine

Authoring

Experiment

Control

Display

Server

Doctrine

Reasoning

GeoServer
 

 Previous slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld006.htm
##-----------------TITLE------------------------##
Modification Relativity
##------------------TEXT------------------------##
Modification Relativity 
 Which architecture changes are significant

Examples

Downloading a WEB page
Instrumenting an architecture
Architecture uses instrumention
Duplicating a stream (AEGIS)
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~peymano/dynamic-arch/austin/balzer/tsld002.htm
##-----------------TITLE------------------------##
Dynamic Architectures
##------------------TEXT------------------------##
Dynamic Architectures 
 
Architecture Model
 

 Previous slide  Next slide  Back to first slide  View graphic version
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/ICS104/course-notes/selection-time.htm
##-----------------TITLE------------------------##
Selection time for menu items
##------------------TEXT------------------------##
Selection time for menu itemsThe 
time necessary to select an item i from a menu of length n is composed of the 
search time S plus  in 
the case of selection via a keyboard code: the time necessary to press the key(s); 
in the case of selection with a pointing 
time: the positioning time P, plus the activation time (e.g. the mouse 
click).Search time S 
1.1
          Beginning users
There are three possible search strategies 
(1) Serial inspection 
     (2) Random inspection without 
    repeat (implausible)  (3) 
    Random inspection with repeat 
  

In 
all three cases, S is proportional to n. In case (3), both the expected means 
and the variance is higher than in (2) and (1).   1.2
          Advanced users
Advanced 
users remember the approximate position of frequently used items fairly well. 
The search time S then is nearly constant (i.e., independent of n).  
     
The length of a menu influences the search time only 
when the user is a beginner. 
     The
      search time of beginners is
      likely to be shorter if frequently-used items are placed on top. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/ICS104/course-notes/ex-better-menu.htm
##-----------------TITLE------------------------##
Improved menu design
##------------------TEXT------------------------##
Improved design   
     Update 
project descriptions                                   
 Options: 1.  
Add project 2.  Update 
project 3.  
Display project 4.  
Delete project 5.  
Project report 
6.  
Changes over previous report 
 Please 
enter selection by pressing 
key 1 - 6: _
(Type 
H for help, B for back)
 
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/ICS104/course-notes/ex-bad-menu.htm
##-----------------TITLE------------------------##
Example of poorly desgned menu
##------------------TEXT------------------------##
Example of poorly designed menu 
    **MENU 
A  PROJECT ADDITION 
B  PROJECT INFO UPDATE 
C  DELETE RECORD 
D  PROJECT INFO DISPLAY 
E  REPORT 
F  REPORT CHANGES 
KEY:   
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/ICS104/course-notes/HTML%20Presentation%20folder/sld001.htm
##-----------------TITLE------------------------##
Videoconferences can change social dynamics
##------------------TEXT------------------------##
Slide 1 of 2





ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/ICS104/course-notes/color-current-screens.htm
##-----------------TITLE------------------------##
color-current-screens.htm
##------------------TEXT------------------------##
Color in a typical contemporary screen 
   
  The screen looks relatively 
colorful, but this is due to text being edited (red font indicates changed text, 
and yellow background signals marked text). The general appearance of the application 
shown here is very much monochrome, as is the case for most other commercial applications 
today.
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/index.html
##-----------------TITLE------------------------##
UC Irvine, ICS 1C: Networked Information Discovery and Retrieval
##------------------TEXT------------------------##
UC Irvine,
	Information and Computer Science Department

ICS 1C: Networked Information Discovery and Retrieval



Summer, 1996.


Instructor:
Vitus Leung

Teaching Assistant:
Jason Cahill




Course Information:
Syllabus.
Schedule.
References.
Information specific to individuals.





Something Special:
Critique of a Technology


Your comments are welcome via e-mail to
vitus@ics.uci.edu or using
a form which allows for anonymous comments:








This information brought to you by
www.ics.uci.edu

Current as of 12 September 1996
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/hw4skel.html
##-----------------TITLE------------------------##
ICS 1C HW 4 for QQ_Names -- Title
##------------------TEXT------------------------##
ICS 1C HW 4 for QQ_Names -- Heading



Team Members:
"QQ_name1" <QQ_ID1@QQ_HOST1.oac.uci.edu>
"QQ_name2" <QQ_ID2@QQ_HOST2.oac.uci.edu>
"QQ_name3" <QQ_ID3@QQ_HOST3.oac.uci.edu>

Five distinct sites:
QQ_URL1
QQ_DESC1
QQ_URL2
QQ_DESC2
QQ_URL3
QQ_DESC3
QQ_URL4
QQ_DESC4
QQ_URL5
QQ_DESC5


Proposal:


QQ_proposal



Submitted QQ-DATE
for 
ICS 1C
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/hw2skel.html
##-----------------TITLE------------------------##
ICS 1C HW 2 for QQ_Skeleton -- Title
##------------------TEXT------------------------##
ICS 1C HW 2 for QQ_Skeleton -- Heading



About QQ_Skeleton
Name:QQ_Skeleton
E-mail: QQMyName@QQHost.oac.uci.edu
Major: Interdisciplinary Basket Weaving

Team Members who have reviewed this document:
QQ1member@QQ1host.oac.uci.edu -- QQ1TeamMemberName
QQ2member@QQ2host.oac.uci.edu -- QQ2TeamMemberName


Three neat Web finds:
 QQ ICS 1C is a great
class
with lots of good things and a chance to work with other students.
 QQ Next favorite thing
 QQ Third/last favorite thing.


Questions I can now answer
What is QQ1?
What is QQ2?
What is QQ3?
What is QQ4?
What is QQ5?



What is QQ1?
My answer is... QQ1
Return to list of questions.

What is QQ2?
My answer is... QQ2
Return to list of questions.

What is QQ3?
My answer is... QQ3
Return to list of questions.

What is QQ4?
My answer is... QQ4
Return to list of questions.

What is QQ5?
My answer is... QQ5
Return to list of questions.




Submitted August QQ, 1996 for 
ICS 1C


HTML 2.0 Checked QQQ???
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/pine.html
##-----------------TITLE------------------------##
Getting Started With Pine
##------------------TEXT------------------------##
Getting Started With Pine



September 16, 1994
University of Washington, Computing & Communications


Pine(TM) is an electronic mail system created and 
maintained by the Computing & Communications group 
at the University of Washington. To help support Pine, a 

starter version of this document
 was created by C&C in 
1994 for Pine 3.9. To meet local needs and conditions, 
modifications may have been made to either Pine or this 
document or both by local computer consultants. The 
local version of this document is maintained by 
aisi@ics.uci.edu.



Pine is a trademark of the University of Washington. Permission to use
this document for non-commercial purposes, in original or modified form,
is granted, provided that the original source of the document is
acknowledged as University of Washington Computing & Communications and
that this paragraph, as well as the notice above, are retained on the title
page of any documentation based on this text. 


Table of Contents

You can view this document by scrolling through it, or you can 
click a line in the following list to jump to that section. 
(You can return to the place you jumped from
by clicking the "Back" button at the bottom of the window.) 


About Pine
About This Document
Before You Start Pine
Starting and Quitting Pine
Writing a Message in Pine
Listing Messages
Viewing a Message
Replying to a Message
Pine Folders
Saving a Message
Forwarding a Message
Deleting a Message
Using the Address Book
Additional Pine Options
Pine Can Do More
Guidelines for Using Email
Quitting Pine and Logging Out


About Pine



Electronic mail (email) allows you to communicate quickly and easily with 
colleagues on campus and around the world. The use of email is rapidly 
increasing, changing teaching, learning, research, health care, business, and 
administration. Pine is a sophisticated yet easy-to-use email program that was 
created at the University of Washington with the specific goal of being 
responsive to new email users. Pine offers:



  On-Screen Menus and Messages: Pine displays your options in menus at 
   the bottom of each screen, so you do not need to memorize commands. 
   On-screen messages appear on a line above the command menu to give you 
   warnings or information as you make a choice.
  

  
   Online HELP: Help is instantly available to provide information about 
   the task you are performing.


About This Document



This document should be read at your computer while you use Pine. The text
that follows does not tell you everything about Pine. It only introduces
Pine's main options and summarizes basic email guidelines. The best way to
learn to use Pine is to explore it on your own. Pine was designed to make
it easy for you to learn to use email: there is information on each screen
and in the online help that shows you what to do or answers your
questions. Try the different options and have fun experimenting with Pine. 


Before You Start Pine



Before you can use Pine to correspond by email, you need to have a userid (an 
account) on a computer and log in. For details, see the computing consultant 
for your department.


Starting and Quitting Pine



To start: The details of how to start Pine vary considerably from site to
site.  Consult your local support staff for further information. After
starting Pine, the Main Menu screen appears. Each Pine screen has a
similar layout: the top line tells you the screen name and additional
useful information, below that is the work area (on the Main Menu screen,
the work area is a menu of options), then the message/prompt line, and
finally the menu of commands. 


To quit: When you want to leave Pine, type Q (Quit). For details, see 
"Quitting Pine and Logging Out".


The Main Menu


The Main Menu lists Pine's main options (see Figure 1). The letter you must 
type to enter your choice is to the left of each option or command name. You 
can usually type either uppercase or lowercase letters, and you should not 
press <Return> to enter commands.


>From the Main Menu, you can read online help, write and send a message, look 
at an index of your mail messages, open or maintain your mail folders, update 
your address book, configure or update Pine, and quit Pine.

  


PINE 3.90   MAIN MENU            Folder:INBOX   2 Messages

   ?   HELP             -    Get help using Pine

   C   COMPOSE MESSAGE  -    Compose and send a message

   I   FOLDER INDEX     -    View messages in current folder

   L   FOLDER LIST      -    Select a folder to view

   A   ADDRESS BOOK     -    Update address book

   S   SETUP            -    Configure or update Pine

   Q   QUIT             -    Exit the Pine program

Copyright 1989-1994. PINE is a trademark of the University of Washington.
                 [Folder "INBOX" opened with 2 messages]

 ?  Help		        P PrevCmd  R RelNotes
 O  OTHER CMDS	L [ListFldrs]	N NextCmd	 




Figure 1.  A Pine Main Menu Screen


Now that you know how to start Pine, you can explore on your own, or you can 
browse the rest of this document for a summary of Pine's main features. 


Getting Help in Pine


To read the online help, use the Help command at the bottom of each
screen.  For example, at the Main Menu screen, type ? (Help). Because the
help text is context sensitive, you never see all of it at once--only the
part that relates to the Pine feature you are using. To exit the online
help, type E (Exit Help). 


Writing a Message in Pine



To write a message, type C (Compose) to see the Compose Message screen.


  


PINE 3.90  COMPOSE MESSAGE                        Folder:INBOX  2 Messages

To	:
Cc	:
Attchmnt:
Subject	:
----- Message Text -----








^G Get Help ^X Send     ^R Rich Hdr ^Y PrvPg/Top ^K Cut Line   ^O Postpone
^C Cancel   ^D Del Char ^J Attach   ^V NxtPg/End ^U UnDel Line ^T To AddrBk






Figure 2.  A Pine Compose Message Screen


In the command menu above, the ^ character is used to indicate the Control 
key. This means you must hold down the Control key (written in this document 
as <Control>) while you press the letter for each command. 


Press <Control>G (Get Help) to see additional commands. To move around, 
use the arrow keys or <Control>N (Next line) and <Control>
P (Previous 
line). To correct errors, use <Backspace> or <Delete>. 


You might start experimenting in Pine by sending yourself a message. The 
following section shows you how.


Writing and Sending a Test Message to Yourself


To write and send a test message to yourself: 


Type C (Compose) to see the Compose Message screen.


In the To: field, type your email address and press <Return>. 


In the Cc: field, press <Return>. 


In the Attachment: field, press <Return>. 


In the Subject: field, type Test and press <Return>. 


Below the Message Text line, type This is a test. 


   If a user Jean Hughes at site art.somewhere.edu whose userid is
   jhughes
   were to compose such a test message, the completed screen would look like 
   the example below.

  


PINE 3.90  COMPOSE MESSAGE                        Folder:INBOX  2 Messages	

To	: Jean Hughes <jhughes@art.somewhere.edu>
Cc	:
Attchmnt:
Subject	: Test
----- Message Text -----

This is a test. 



^G Get Help ^X Send    ^R Read File ^Y Prev Pg ^K Cut Text   ^O Postpone
^C Cancel   ^J Justify ^W Where is  ^V Next Pg ^U UnCut Text ^T To Spell






Figure 3.  A Pine Compose Message Screen



To send your message, press <Control>X (Send). 


   You are asked:


   Send message?



Type y (yes) or press <Return>.


   The message is sent, and a copy is saved to your sent-mail folder. (If you 
   type n (no) the message is not sent, and you can continue to work on it.)


This test message is very simple. There are, of course, other options you can 
use as you compose a message. A few are summarized in the next section, and 
complete information about options for the Compose Message screen is 
available in online help. As you compose a message, you can press 
<Control>G (Get Help) at any time to see details about your current task.


Hints for Writing a Message


To: 

In this field, type the email addresses of your recipients. Separate the 
    addresses with commas. When you are finished, press <Return>.
    Note that if you type in only the userid (login name) of your
    recipient, the
    Pine program assumes that the "right-hand part" of your recipient's
    address
    is the same as yours (e.g., art.somewhere.edu), unless you explicitly
    enter a
    different one.  Always check the addresses in both the To: and
    the Cc: fields for accuracy and completeness before you send a message.


    Finding and Formatting Addresses.
    The best way to get a person's email 
    address is to ask him or her for it. For more information on finding and 
    formatting email addresses on local and remote computers, press 
    <Control>G (Get Help) in the To: field.


    Using the Address Book.
     In both the To: and the Cc: fields, you can 
    enter a person's email address manually, or you can use an entry from your 
    Pine Address Book. See "Using the Address Book".


Cc:

 In this field, type the email addresses of the persons to whom you want to 
    send copies. Separate their addresses with commas. When you are 
    finished, or if you do not want to send any copies, press <Return>. 


Attchmnt: 

This is an advanced Pine feature that allows you to attach files, 
    including word processing documents, spreadsheets, or images that exist on 
    the same computer where you are running Pine. If you do not want to 
    attach a file to your message, press <Return>. For more information, with 
    your cursor in the Attchmnt: field, press <Control>G (Get Help).


Subject: 

In this field, enter a one-line description of your message. A short, 
    pertinent description is appreciated by the recipients, since this is
    what they
    see when they scan their email index. When finished, press <Return>. 


Message Text: 

Type your message. To move around, use the arrow keys. To 
    delete characters, press <Backspace> or 
    <Delete>. To delete a line, 
    press <Control>K. To justify your text, 
    press <Control>J. To check 
    your spelling, press <Control>T. To see other editing commands,
     press 
    <Control>G (Get Help).


    Inserting a Plain Text File. If you want to send a "plain text" 
file with 
    your message, you can insert the file in the body of your message using 
    the <Control>R (Read in a File) command. Plain text files are files 
    created by text editors such as Pico, the editor you use when you compose a 
    Pine message. For information about inserting files, with your cursor
    in the
    Message Text: field, press <Control>G (Get Help).


Hints for Sending a Message


Sending a Message. 

 After your message is composed, press 
    <Control>X, and then type y or press <Return>. Your message is sent 
    and a copy is saved to the sent-mail folder. If a message cannot be 
    delivered, it eventually is returned to you. If you want to re-send a
    message,
    you can use the F (Forward) command.


Changing Your Mind. 

If you change your mind after 
    typing <Control>X), 
    type n  instead of y to continue to work on your message.  While you are 
    writing your message, you can press <Control>O (Postpone) to hold your 
    message so you can work on it later, or you can press <Control>C 
    (Cancel) to delete your message entirely. You are asked to confirm whether 
    or not you want to cancel a message.



Listing Messages



Pine stores messages sent to you (including those you send to yourself) in your 
INBOX folder. Messages remain in your INBOX folder until you delete them 
or save them in other folders. (You will learn more about the INBOX and other 
folders in "Pine Folders".)


To see a list of the messages you have received in your INBOX folder:


At the Pine Main Menu, type I (Folder Index). 



    If you have any messages, they are listed as shown in the following 
    example for the user named "jhughes." 



See "Moving Between Folders" if you want to list the messages in a 
folder other than your INBOX. 

  


PINE 3.90	FOLDER INDEX      Folder:INBOX    Message 3 of 3 NEW

  D 1 Jan 10  Mu Li	            (486) Proposal
+ A 2 Jan 10  Christine Smith	    (500) NSF 
+ N 3 Jan 11  To: jhughes	    (448) Test




? Help	     M Main Menu  P PrevMsg  -   Prev Page  D Delete	R Reply
O OTHER CMDS V [ViewMsg]  N NextMsg  Spc Next Page  U Undelete	F Forward



 
Figure 4.  A Pine Folder Index Screen


The selected message is highlighted. The first 
column on the left shows the message status. It may be blank, or it may contain 
"N" if the message is new (unread), 
"+" if the message was sent directly to you (it is not a copy or from a list), 
"A" if you have answered the message (using the Reply command), or 
"D" if you have marked the message for deletion. 
The rest of the columns in the message line show you the message number, date 
sent, sender, size, and subject. For details, press ? (Help).


Most of the commands you need to handle your messages are listed at the 
bottom of the screen. You can type O (Other Commands) to see the additional 
commands that are available. You do not need to see these commands on the 
screen to use them. That is, you never need to type O as a prefix for any other 
command.


Viewing a Message



To view a message:


At the Folder Index screen, use the arrow keys to highlight the message 
    you want to view. 


Type V (ViewMsg) or press <Return> to read a selected message.


    To see the next message, press N (NextMsg).


    To return to the index, press I (Index).


Replying to a Message



To reply to a message that you have selected at the Folder Index screen or 
that you are viewing:


Type R (Reply). 


    You are asked whether you want to include the original message in your 
    reply. Also, if the original message was sent to more than one person, you 
    are asked if you want to reply to all recipients. Think carefully
    before you
    answer--it may be that you do not want your reply to be sent to more 
    than 
    just the author of the message. It is always a good idea to verify that the 
    addresses in the To: and Cc: fields are correct before you send a message.



Pine Folders



Incoming messages may quickly accumulate in your INBOX folder. Imagine 
what it would be like to find one hundred messages there. If you use email 
often, this may happen sooner than you expect. How should you organize the 
messages you wish to save?


Organizing Messages With Folders


A Pine folder, like a folder in your file cabinet, is a storage place for
messages.  As you use email, you accumulate many messages and can organize
them into different folders by topic, correspondent, date, or any other
category that is meaningful to you. You can create your own folders, and
Pine automatically provides three: 


   The INBOX folder--messages sent to you are listed in this folder. When 
    you first start Pine and go to the Folder Index screen, you are
    looking at the
    list of messages in your INBOX folder. Every incoming message remains in 
    your INBOX until you delete it or save it in another folder.


   The saved-messages folder--copies of messages you save are stored in 
    this folder unless you save them to other folders you create yourself. See 
    "Saving a Message". 


   The sent-mail folder--copies of messages you send are automatically 
    stored in this folder. This is convenient if you cannot remember whether 
    you actually sent a message or if you want to send a message again. 

Keeping Folders Clean


Messages--whether they are in your INBOX or your other Pine folders--occupy
storage space, and your storage space is limited. 


    Check your email frequently to see if you have any new messages. 


    Do not keep too many messages in your INBOX folder. A large INBOX 
    reduces performance: it takes longer to display large lists of messages 
    when you start Pine, and it requires more time to move between messages.


    Delete your incoming messages right away if you do not want them, or save 
    them to other folders if you do.

 
    Routinely delete obsolete messages from all of your Pine folders.


    You will get a monthly message via Pine that asks if you want to delete 
    entire sent-mail folders (and all the messages they contain) from previous 
    months. To conserve space, it is a good idea to do this. If you choose to 
    delete such sent mail, type y.
 


Moving Between Folders


When you start Pine and press I (Index) at the Main Menu, you see a list of 
messages in your INBOX folder. If you want to see the messages in another 
folder, you need to go to that folder. The following text shows you two ways to 
go to another folder from nearly anywhere in Pine. 


To access your folders and the messages that are stored in them:


Type L (Folder List). 


    You see a Folder List screen like the following, in which your current
    folder
    is highlighted. (When you start Pine, the current folder is your INBOX.) 

  


PINE 3.90	FOLDER LIST	Folder:INBOX	 3 Messages

INBOX        sent-mail       saved-messages        101class


? Help	     M Main Menu  P PrevFldr  -   PrevPage  D Delete  R Rename
O OTHER CMDS V [ViewFldr] N NextFldr  Spc NextPage  A Add





Figure 5.  A Pine Folder List Screen


Use the arrow keys to highlight a folder. 


To see an index of the messages in that folder, type  V (ViewFldr) or 
        press <Return>.



Note that this method of moving between folders takes you to the Folder List 
screen, which has a menu of commands that enable you to do such things as 
add, delete, and rename folders. If you simply want to move to and list the 
massages in another folder, try the method below.


To move most quickly to the index of another folder:


Type G (Goto Fldr). You are prompted for the name of a folder.


Type the folder name. 


    If you forget the name of the folder, press <Control>T (ToFldrs) and 
    select a folder using the commands at the bottom of the screen. 


Press <Return>. 


    You see the list of messages in the folder.


Deleting a Folder


To delete a folder and all of the messages it contains:


Type L (Folder List). 


 Use the arrow keys to highlight a folder. 


To delete the entire folder of messages, type D (Delete). 


    You are asked:


    Really delete "folder"? 


Type y (yes) if you want to delete the folder and all of its messages.


    The folder disappears. There is no way to undelete a deleted folder.


Saving a Message



When you save a message, you are given a choice: you can store it in the saved-
messages folder, or you can specify another folder. 


Once you save a message, the copy in the INBOX folder is automatically 
marked for deletion so that you will only have one copy. When you quit Pine, 
you are asked to confirm whether or not you want to expunge the copy from the 
INBOX folder. To conserve space, it is a good idea to do this.


Saving a Message to the Saved-Messages Folder


To save a message to the saved-messages folder:


    At the Index screen, use the arrow keys to [Folder "INBOX" opened with
    2 messages]
    the message you
    want to save, or, at the Message Text screen as you view a message:


    Type S (Save).


    You are asked if you want to save the message to the saved-messages folder 
    or to another folder:


    SAVE to folder [saved-messages]: 


Press <Return> to choose the default folder: ["saved-messages"]. 


    Pine saves your message, and you see the following:


    [Message "#" copied to folder "saved-messages" 
     and marked deleted]


Saving a Message to a Folder You Specify


You will find it useful to create additional folders for storing messages on 
particular subjects.


To save a message to a folder you specify:


    At the Folder Index screen, use the arrow keys to highlight the 
message 
    you want to save, or, at the Message Text screen as you view a message:


    Type S (Save) to save a message.


    You are asked if you want to save it to the saved-messages folder or
    another folder:


    SAVE to folder [saved-messages]: 


Type a foldername and press <Return>. 


    For example, to save a message to a folder named "papers," 
    type papers and press <Return>. 


    If this is the first time you have named this folder, you see the message:


    Folder "papers" doesn't exist. Create? 


    Type y or press <Return> to create the folder. 


    Once you have created the folder, or whenever you type the name of a 
    folder that already exists, you see a message like this one:


    [Message "#" copied to folder "papers" and 
     marked deleted]


Forwarding a Message



To forward to a message that you have selected at the Folder Index screen 
or that you are viewing:

 Type F (Forward). 


    A copy of the message opens and the To: field is highlighted. 


    Enter the address of your recipient and send the message as usual. Note 
    that you can modify the original message if you wish, for example, to 
    forward only a portion of it or to add a message or notes of your own.


Deleting a Message



You keep your Pine folders clean by routinely deleting messages. There are two 
steps to deleting a message: marking it for deletion, then expunging it.


To mark for deletion a message you do not want: 


    Select and open the folder that contains the message you wish to mark for 
    deletion. If you are a Pine beginner, this is probably your INBOX 
    folder. See "Moving Between Folders", if the message you want 
    to mark for deletion is in a folder other than your INBOX.



    At the Folder Index screen, select the message you want to mark for 
    deletion, or simply view the message.


    Type D (Delete). 


    If you are looking at the Folder Index screen when you mark a message for 
    deletion, a "D" appears in the left-hand column of the message line. 


    If you are looking at the Message Text screen when you mark a message for 
    deletion, a "DEL appears in the upper right corner of your screen. The 
    next message, if there is one, appears. 


Repeat this process to mark additional messages for deletion.


Undeleting a Message


If you change your mind about a message you have marked for deletion, use the 
U (Undelete) command to remove the deletion mark any time before you 
expunge a message. After you expunge a message, Pine cannot get it back.


Expunging a Message


A message that is marked for deletion remains in Pine until you expunge 
it. You can expunge a message that is marked for deletion at any time, or you 
can wait until you quit Pine. Once you have a few messages marked for 
deletion, you may want to expunge them before you continue to work, because 
it is easier to look through a folder index that contains fewer messages. 


To expunge a message:


    At the Folder Index screen, type X (Expunge).


    You are asked: 


    Expunge "#" message(s) from "folder"? 


Type y (yes) or press <Return>.


    Messages marked for deletion disappear.


Note that you will be asked whether you want to expunge messages that are 
marked for deletion when you leave a folder (other than the INBOX) that 
contains messages marked for deletion, or when you quit your Pine session.


Using the Address Book



As you use email, you build a list of email correspondents. Some of their 
addresses may be difficult to type or remember. You can use the Pine Address 
Book to store email addresses for individuals or groups, to create easily 
remembered "nicknames" for these addresses, and to quickly retrieve an email 
address when you are composing a message. Here is a sample page from an 
Address Book: 

  


PINE 3.90	ADDRESS BOOK	Folder:INBOX	 Message 1 of 3

gomez	Gonzalez, George    ggonz@unixz.university.ca
mu	Li, Mu	            muli@u.university.edu
chris	Smith, Christine K. cksmith@art.somewhere.edu
rt	Research Team	    DISTRIBUTION LIST:
		            gomez
		            chris
		            jhughes@art.somewhere.edu

		                    
? Help	     M MainMenu	P PrevEntry    - PrevPage  D Delete  S CreateList
O OTHER CMDS E [Edit]	N NextEntry  Spc NextPage  A Add     Z AddToList





Figure 6.  A Pine Address Book Screen


There are two ways to set up an individual address in your Address Book. You 
can add an address manually or take it more easily from an incoming message. 
With either method, you specify nicknames for your correspondents. You can 
also set up a group (list) address in your Address Book, but only manually.


Adding an Individual Address


To add an individual address manually: 


Note the address.


At the Pine Main Menu, type A (Address Book). 


 Type A (Add). 


 Follow the instructions. (Press <Control>G if you need help.)


Taking an Individual Address From an Incoming Message


To take an individual address from a message you are viewing or have 
selected in the index:

    Type T (Take Address). The T command is not visible on your screen 
    unless you type O (Other Commands), but you need not see it to use it. 


    Follow the instructions. (Press <Control>G if you need help.)


Adding a Group (List) Address


If you routinely send messages to a group, you can create a list address. That 
way you do not need to type each personÕs address every time you send a 
message to the group. 


To create a list address: 

   At the Pine Main Menu, type A (Address Book). 


   Type S (CreateList). 


   Follow the instructions. (Press <Control>G if you need help.)


Using Address Book Entries When Composing Email


When composing a message, at the To: or the Cc: (Carbon Copy) fields you 
can enter an email address in any of the following ways:


   Type the entire email address. 


   Type a nickname you have set up in the Address Book. 


   For example, if your Address Book looked like the one in Figure 6, you 
   could type the following nickname in the To: field: 


   mu


   After you pressed <Return>, Pine would provide the full address for Mu 
   from the Address Book as follows:


   To: 		Mu Li <muli@u.university.edu>


   Select a name from the Address Book:


   Move to the Address Book (with your cursor in the To: or  Cc:   field 
   press <Control>T) and use the arrow keys to highlight the name you 
   want. Type S (Select) or press <Return>. 


Additional Pine Options



Pine offers other options. To use them, at the Pine Main Menu, type S (Setup). 
You see a message asking you to choose from the options below or cancel:

 Printer--Choose a printer for Pine messages.


Newpassword--Change your account password while still in Pine.


Config (Setup Configuration)--Select additional options. 


Update--Update Pine. Includes technical notes and PC-Pine information.


The option allowing you to choose a printer is especially useful and is
described in the following section. 


Choosing Printer Variables


Pine provides three options for printing. When choosing the appropriate option, 
you should contact your departmental computer consultant for advice. 


To choose the printing method for Pine:


At the Pine Main Menu, type S (Setup). 


Type P (Printer). 


Follow the instructions. (Press <Control>G if you need help.)


Printing a Message


Once you have chosen the printer variables, to print messages from either the 
Folder Index screen or the View Message screen, type Y (Print). You will be 
asked to confirm your choice. 


Note that you can also use this command to print Pine's online help text.


Pine Can Do More



Pine has other useful features that have not been covered in this
introductory document. Although originally designed for novice email
users, Pine has evolved to support many advanced features. It has become
an easy-to-use program for sending, receiving, and filing Internet
electronic mail messages and bulletin board (Netnews) messages including
multimedia attachments. There is also a PC version of Pine for use with
IMAP mail servers. If you would like to learn more about Pine: 

   Try all of the commands at the bottom of each Pine screen, including the 
    ones that appear when you type O (OTHER CMDS). 


    Read Pine's online help often. It contains tips to help you at every
    stage of
    learning Pine. Read about different functions, even those you do not
    use yet.


    For more advanced information, see the online Unix Manual entries for 
    Pine and Pico. In addition, at the Pine Main Menu, choose R for release 
    notes.


Your local system managers may have customized Pine to suit specific needs, 
and they may or may not offer all of Pine's ever-growing set of 
configuration 
and personal-preference options. Thus, your local system managers are a good 
source of information about additional Pine features.


Guidelines for Using Email



Electronic mail is a unique medium of communication. Messages can be
replied to or forwarded with speed and ease, and email has the potential
to reach a wide audience. These features can also be misused. There are a
few basic guidelines for the responsible use of email that can help you
avoid common mistakes while you enjoy the full benefits of this
technology. 


The privacy of an email message cannot be guaranteed. An email message may 
be forwarded, printed, or permanently stored by any recipient. Email can be 
misdirected, even when you are careful. Do not put something in an email 
message that you would not want read by everybody. And if you receive a 
message intended for someone else, let the sender know. 


Email does not show the subtleties of voice or body language. Avoid
attempts at irony or sarcasm. The most effective email is short, clear,
and relevant. If you receive a message that makes you upset, do not
respond immediately, and in any case, avoid "flaming," that is, sending an
angry or rude message. 


Email Tips


As you use email, keep the following tips in mind:

    Email is easily forwarded to someone else. Although this is convenient, it 
    is not always appropriate. If you are unsure, ask the sender before you 
    forward a message. 


    Email replies may go to more people than you realize. When replying to a 
    message, be sure to look at the list of recipients. 


    Email can be junk mail, so avoid unnecessary proliferation of messages. 


    Email takes up computer space, so delete messages you no longer need. 


    The integrity of an email message cannot be guaranteed. If a received 
    message seems out of character for the sender, double-check before taking 
    it seriously. 


    Email is meant for informal correspondence as well as scholarly,
    scientific,
    and clinical communications. You should not use email for official record 
    purposes where a memo would be required (e.g., personnel actions, 
    organization changes, contracts, and policy statements).


    Email should not be considered private. Confidential information should 
    not be sent by email.


Quitting Pine and Logging Out



To quit Pine:

    At almost any place in Pine, type Q (Quit). 


    You are asked:


    Really quit pine?


    Type y (yes) or press <Return> to quit. 


It is a good idea to log off your computer whenever you are through with it or 
when you must leave it unattended.
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/pico.html
##-----------------TITLE------------------------##
UCI ICS 1C: Pico Help
##------------------TEXT------------------------##
UCI ICS 1C: Pico Help



Pico is designed to be a simple, easy-to-use text editor with a layout
very similar to the pine mailer.  The status line at the top of the
display shows pico's version, the current file being edited and whether
or not there are outstanding modifications that have not been saved.
The third line from the bottom is used to report informational messages
and for additional command input.  The bottom two lines list the
available editing commands.

Each character typed is automatically inserted into the buffer at the
current cursor position.  Editing commands and cursor movement (besides
arrow keys) are given to pico by typing special control-key sequences.
A caret, '^', is used to denote the control key, sometimes marked
"CTRL", so the CTRL-q key combination is written as ^Q.

The following functions are available in pico:

  ^G  Display this help text.

  ^F  move Forward a character.
  ^B  move Backward a character.
  ^P  move to the Previous line.
  ^N  move to the Next line.
  ^A  move to the beginning of the current line.
  ^E  move to the End of the current line.
  ^V  move forward a page of text.
  ^Y  move backward a page of text.

  ^W  Search for (where is) text, neglecting case.
  ^L  Refresh the display.

  ^D  Delete the character at the cursor position.
  ^^  Mark cursor position as beginning of selected text.
      Note: Setting mark when already set unselects text.
  ^K  Cut selected text (displayed in inverse characters).
      Note: The selected text's boundary on the cursor side ends at the
        left edge of the cursor.  So, with selected text to the left of
        the cursor, the character under the cursor is not selected.
  ^U  Uncut (paste) last cut text inserting it at the current cursor position.
  ^I  Insert a tab at the current cursor position.

  ^J  Format (justify) the current paragraph.
      Note: paragraphs delimited by blank lines or indentation.
  ^T  To invoke the spelling checker
  ^C  Report current cursor position

  ^R  Insert an external file at the current cursor position.
  ^O  Output the current buffer to a file, saving it.
  ^X  Exit pico, saving buffer.


Pine and Pico are trademarks of the University of Washington.
No commercial use of these trademarks may be made without prior
written permission of the University of Washington.



HTML 2.0 Checked.
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/fnl.dist.html
##-----------------TITLE------------------------##
ICS 1C, Final Exam Distribution
##------------------TEXT------------------------##
ICS 1C, Final Exam Distribution


Max=94, Median=67, Average=69

94 94
93
--
--
--
89
--
--
--
--
84
83
82 82
--
--
--
--
77
--
--
--
73
--
71
--
69 69
--
67
--
65
--
63
--
61
--
--
--
--
56
--
--
53
--
--
50
49
--
--
46
--
--
43
------
......
------
33



Current as of 11 September 1996.
 
Please send comments to
vitus@ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/hw4a.html
##-----------------TITLE------------------------##
ICS 1C HW 4 Submission Form
##------------------TEXT------------------------##
ICS 1C HW 4 Submission Form





















General Instructions


As part of 
UCI ICS 1C, Homework 4, complete and submit this form during
lab on 26 August 1996.

You fill in the form by typing the information requested in
each of the areas given below.
Instructions on ``submitting'' your responses are given at the end
of this document.
Team Member's Identification Information
Projects can be done individually or by a team of 2 or 3 members.

Team Member 1:

E-mail: .oac.uci.edu

Team Member 2:

E-mail: .oac.uci.edu

Team Member 3:

E-mail: .oac.uci.edu



Five distinct sites you've found

URL of the first distinct site you found:

Short description of this site:



URL of the second distinct site you found:

Short description of this site:



URL of the third distinct site you found:

Short description of this site:



URL of the fourth distinct site you found:

Short description of this site:



URL of the fifth distinct site you found:

Short description of this site:




Proposal




Submitting this assignment.

Select the Preview the way your document will look option
 below and press the
the Do It! button to perform the indicated action.
Note: If you do not like the way your document looks, use the ``Back''
button on your browser to get back to this form.
When you like the way your document looks, view its HTML source
and save a copy of that source on your disk.
Use a new web browser window to view the HTML document you just put
on your disk.
Now, use the ``Back'' button on your browser to get back to this form and
select the second option
(Submit this information via e-mail)
and press the
Do It! button again.  The information will be mailed automatically.
 Use ftp/fetch to move a copy of the HTML document from
your disk to the 
public_html area on your ea.oac.uci.edu or
orion.oac.uci.edu
account, naming it hw4prop.html, so that others can view it
via the Web.







  Preview the way your document will look

  Submit this information via e-mail.







August 27, 1996 for 
ICS 1C
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/ics1c/doc/indivinfo.old.html
##-----------------TITLE------------------------##
ICS 1C Student Information
##------------------TEXT------------------------##
ICS 1C Student Information

Access limited to uci.edu systems.


Access to some information requires using the ``ics1c''
login and the password given in class.


Individuals'
Web areas.


ICS 1C Student
Score Request Form.


Homework 4 Proposals
  as submitted available with class password.
  See also
  Guidelines and Assessment Criteria




Current as of 27 August 1996.
Please send comments to 
vitus@ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~emilyo/SimSE/eval.html
##-----------------TITLE------------------------##
SimSE Feedback
##------------------TEXT------------------------##
SimSE Online



   Home  |   
    News  |  
    Details  |   
	Publications  |   
    Downloads  |   
	FAQ  |   
	Contribute  |   
	Discuss  |   
    Links  |   
	Credits/Contact  
  



 
To give us your feedback, register for SimSE updates, orif you have any other comments, questions, etc., please email Emily Navarro at emilyo@ics.uci.edu.


SimSE is funded by  NSF grant number DUE-0618869.
  SimSE, University of California, Irvine
  Copyright ©2010
##------------------URL-------------------------##
http://www.ics.uci.edu/~emilyo/SimSE/se_rules.html
##-----------------TITLE------------------------##
The Fundamental Rules of Software Engineering
##------------------TEXT------------------------##
“The
Fundamental Rules” of Software Engineering

 

1)     
If you don’t do a system architectural design with
well-defined interfaces, integration will be a big mess.

2)     
Design before coding.

3)     
If a project is late and you add more people, the
project will be even later [3].

4)     
Team members that are new to a project are less
productive (1/3 to 2/3 less) than the adequately trained people.

5)     
The average newly hired employee is about ½ as
productive as an experienced employee [1].

6)     
Two factors that affect productivity are work force
experience level and level of project familiarity due to learning-curve effects
[1].

7)     
Developers’ productivity varies greatly depending on
their individual skills (experience concerning a development activity,
knowledge of the tools, methods, and notations used, etc.) [2, 4, 11].

8)     
Using better and fewer people is more productive than
using more less qualified people [2]


9)     
The greater the number of developers working on a task
simultaneously, the faster that task is finished, but more overall effort is
required due to the growing need for communication among developers.  Thus, the productivity of the individual
developer decreases [2].

10)   The earlier problems are discovered, the less
the overall cost will be [7].

11)   The error detection effectiveness of reviews
depends greatly on the qualifications and preparations of the reviewers and the
completeness and correctness of the documents used as a reference [14].

12)   Reviews of non-technical documents (e.g.,
requirements specification, user manual) are more effective if the customer is
involved [10].

13)   Develop tests before doing the coding.

14)   Extreme time pressure leads to decreased
productivity [7].

15)   Extreme time pressure leads to a faster rate
at which errors are made, which leads to a further delay in the completion date
[9].

16)   Error correction is most efficiently done by
the document’s author(s) [7].

17)   The more errors a document from a previous
phase contains, the more errors will be passed on to the next document [7].

18)   Always test everything.

19)   Talk to users, not to customers to verify the
prototype.

20)   Inspection is the most cost-effective measure
of finding problems in software.

21)   Software inspections find a high percentage of
errors early in the development life cycle [13].

22)   The use of inspections can lead to defect
prevention, because developers get early feedback with respect to the types of
mistakes they are making [13].

23)   Every group has one programmer that is 10
times more productive than everyone else.

24)   If you disable Internet surfing, productivity
will go down.

25)   The number of meetings is determined by the
kinds of processes used.

26)   Changing requirements are inevitable.  Anticipating change with open architectures,
adaptable designs, and flexible planning can help to mediate some of the ill
effects of these changes [6].

27)   Design for change/variability.

28)   Use defensive programming.

29)   Configuration management is good.

30)   Successful software is designed by people who
understand the application of the software (e.g., a well-designed missile
control program was designed by someone who understood missiles) [8].

31)   Software development requires a substantial
time commitment to learning the application domain [5].

32)    Broad application knowledge is acquired more
through relevant experience than through training [5].

33)    The more bugs you find, the more buggy the
rest of your program will likely be.

34)    Tests reveal errors in the code.  The better a test is prepared for, the higher
amount of detected errors.

35)   Sticking with a too-tight schedule increases
cost due to a large work force [1].

36)   Motivation is increased through monetary
incentives (profit sharing, pay for performance, merit pay, work measurement
with incentives, and morale measurement), creating a positive frame of mind at
work (employee involvement in wellness programs and creating fun at work),
encouraging a feeling of commitment and responsibility (worker participation in
decision-making, getting employees to think like owners, self-managing work
teams, commitment to productivity breakthroughs, and providing an environment
with more freedom and less restrictions), and increasing schedule pressure
(using visible milestones and setting individual goals.)  Increased motivation leads to increased
productivity which reduces cycle time [13].

37)   Improving the work environment is done by
making ergonomic considerations, giving employees enclosed offices to reduce
background noise and interruptions, and giving employees access to required
resources, such as computers, software tools, support staff, and information.  Improving the work environment leads to
increased productivity, which reduces cycle time [13].

38)   Getting the most out of employees can be done
by utilizing experts, employee training, skills assessment and job matching,
and reducing turnover.  Getting the most
out of employees leads to increased productivity,
which leads to decreased cycle time [13].

39)   Improving the software development process can
be done by formalizing the process, controlling quality, and taking advantage
of tools.  Improving the software process
increases employees’ motivation, which also increases their productivity [13].

40)   Rework is usually due to customer
requirements, product flaws, and communication breakdown between project
members.  Improving the process to reduce
rework can be done by using prototyping and evolutionary development and by
using formal specification methods, modern programming practices, and
inspections.  Reducing rework increases
productivity [13].

41)   Design complexity can be reduced by using
object-oriented design techniques. 
Reducing design complexity reduces product complexity, which increases
productivity [13]

42)   Code complexity can be reduced by using
modularization and object-oriented programming techniques.  Reducing code complexity reduces product
complexity, which increases productivity [13].

43)   Cognitive complexity can be reduced by modularization,
multiple levels of abstraction, simulation, and prototyping.  Reducing cognitive complexity reduces product
complexity, which increases    
productivity [13].

44)   Test complexity can be reduced by using
testing tools, building the product with testing in mind, and testing for the
type of environment a product will be used in. 
Reducing test complexity reduces  
product complexity, which increases productivity [13].

45)   Management complexity can be reduced by using
project management planning tools and methods. 
Reducing management complexity reduces product complexity, which
increases productivity [13].

46)   Tasks can be eliminated or simplified by using
automation of tasks (e.g., code generators, automated testing) and eliminating
non-value added activities and low-priority tasks.  This leads to increased productivity [13].

47)   Nine ways to reduce cycle time are: increase
productivity, reduce rework, maximize software reuse, reduce product complexity,
eliminate or simplify tasks, maximize task concurrency, reduce undiscovered
work, reduce risk, and use process models aimed at cycle time reduction [13].

48)   Productivity is increased by increasing
motivation, improving the work environment, getting the best people for the
job, improving the process, and maximizing reuse [13].

49)   Product complexity can be reduced by reducing
code complexity, design complexity, cognitive complexity, test complexity, and
management complexity [13].

50)   Decisions made in the upstream portion of the
software development process (requirements and design) impact productivity,
quality, and costs throughout the life cycle more than the other portions [5].

51)   The thin spread of application domain
knowledge is a major phenomenon that greatly reduces software productivity and
quality [5].

52)   Specification mistakes often occur when
designers do not have sufficient application knowledge to interpret the
customer’s intentions from the requirements document [5].

53)   Requirements will appear to fluctuate when the
development team lacks application knowledge and performs an incomplete
analysis of the requirements [5].

54)   Coordinating understanding of an application
and its environment requires constant communication between customers and
developers [5].

55)   Specifications are almost always incomplete
and fraught with ambiguities.  Constant
contact with the customer is required to obtain the correct requirements.
Without this communication, the developers tend to make incorrect assumptions
about what the customer wants [6].

56)   Fluctuating and conflicting requirements is a
major phenomenon that greatly reduces software productivity and quality [5].

57)   Communication and coordination breakdown is a
major phenomenon that greatly reduces software productivity and quality [5].

58)   Truly exceptional designers that are extremely
familiar with the application domain, skilled at communicating their technical
vision to other project members, possess an exceptional ability to map between
the behavior required of the application system and the computational
structures that implement the behavior, and are recognized as the “intellectual
core” of the project are a scarce resource [5].

59)   New requirements frequently emerge during
development since they could not be identified until portions of the system had
been designed or implemented [5].

60)   Besides a developer’s ability to design and
implement programs, his skills in resolving conflicting requirements,
negotiating with the customer, ensuring that the development staff shares a
consistent understanding of the design, and providing communications between
two contending groups are crucial to project performance [5].

61)   Undiscovered work (work that was not
considered in initial planning estimates) can be reduced by using formal
methods, analysis of PERT sizing metrics, the Spiral life cycle model, and prototyping.  Reducing undiscovered work leads to increased
productivity [13].

62)   Risk can be reduced by using risk management
techniques. Reducing risk leads to increased productivity [13].

63)   Inspections should be thought of as part of
the development process, and time must be set aside accordingly.  Once this is done, inspections can have a
significant improvement in the development organization’s ability to meet
internal schedules [13].

64)   Proper use of inspections can even shorten
life cycle [13].

65)   Participants in the inspection team get a high
degree of product knowledge, which leads to higher productivity [13].

66)   Slower programmers show a great deal of
improvement when using inspections [13].

67)   A new project assignee does not become
productive until six months to a year into the project [5].


68)   Collaborators use hand gestures to uniquely
communicate significant information [12].

69)   Employers often limit the number of hours
employees can work, resulting in further pressure to finish a project as
quickly as possible [6].

70)   The customer often changes deadlines to be
earlier than originally agreed-upon, requiring negotiation with the customer for
either allowing some deliverables to be delivered at the earlier date, with the
rest being delivered later, or dropping some deliverables or requirements
altogether [6].

71)   Code comments and documentation are often produced
at the end of a project, creating major problems when a team member is lost at
short notice, leaving others to continue their work.  This can be alleviated by having quality
auditors require inspections at very short notice [6].

72)   Teams often change during projects (members
are added and/or removed.) [6].

73)   Sometimes the software used for development is
upgraded to a new version during development, and despite claims that it is
fully backward-compatible and won’t affect their work, it usually introduces
new problems [6].

74)   Hardware crashes, and customers are often
unsympathetic to this kind of delay [6].

75)   When a project is in its later stages of
development, the development hardware and software tend to be under the
greatest demand, and performance starts to suffer with lengthy compilations,
builds, and test runs [6].

76)   Matching the tasks to the skills and
motivation of the people available increases productivity [2].

77)   Employee motivation is the strongest influence
of productivity [2].

78)   Above a certain threshold, work conditions are
not a powerful motivator, but below that threshold, they are a powerful
de-motivator [2].

79)   The training of new employees is usually done
by the “old-timers,” which results in a reduced level of productivity on the
“old-timer’s” part.  Specifically, on the
average, each new employee consumes in training overhead 20% of an experienced
employee’s time for the duration of the training or assimilation period [1].

80)   The average assimilation delay, the period of
time it takes for a new employee to become fully productive, is 80 days [1].

81)   As schedule pressure increases, quality
assurance activities (especially walk-throughs and
inspections) are often relaxed or suspended altogether [1].

82)   In the absence of schedule pressure, a
full-time employee allocates, on average, 60% of his working hours to the
project (the rest is slack time: reading mail, personal activities, non-project
related company business, etc.) [1].

83)   Under schedule pressure, people tend to
increase their percentage of working hours spent on the project by as much as
100%, due to spending less time on off-project activities, such as personal
business and non-project communication, and/or working overtime [1].

84)   The three “resource-type” variables that have
the greatest impact on programmer productivity are the availability of
programming tools, the availability of programming practices, and programmer
experience [1].

85)   The two “task-type” variables that have the
greatest impact on programmer productivity are the programming language and the
quality of external documentation [1].

86)   The average full-time employee misses 13 – 15
days of work per year (not counting vacation time).  Reasons are broken down in the following
table [Godwins., 1996 #1239]:


  Reasons for Missed
  Work Day
  
  All Employees
  
  Employees with
  Dependents
  
  Stress
  
  1.1
  
  1.1
  
  Personal Matters
  
  1.4
  
  1.5
  
  Sick Child
  
  1.2
  
  2.1
  
  Day Care Availability Issue
  
  0.4
  
  0.8
  
  Elder Parent Care
  
  0.6
  
  0.9
  
  Other Family Matters
  
  4.4
  
  4.6
  
  Sick/Illness
  
  4.5
  
  4.2
  
  Total Annual Downtime (days)
  
  13.6
  
  15.2
  

 

 

 

References

1.         Abdel-Hamid,
T. and S.E. Madnick, Software Project Dynamics: an Integrated Approach. 1991, Upper
Saddle River, NJ: Prentice-Hall, Inc.

2.         Boehm, B.W., Software Engineering Economics. 1981, Upper Saddle River, NJ:
Prentice Hall, Inc.

3.         Brooks, F.P., The Mythical Man-Month: Essays on Software Engineering. 2 ed. 1995:
Addison-Wesley. 336.

4.         Bryan, G.E., Not All Programmers are Created Equal, in Software Engineering Project Management, R.H. Thayer, Editor. 1997,
IEEE Computer Society: Los Alamitos, CA. p. 346-355.

5.         Curtis, B., H. Krasner,
and N. Iscoe, A Field Study of the
Software Design Process for Large Systems. Communications
of the ACM, 1988. 31(11): p.
1268-1287.

6.         Dawson, R., Twenty Dirty Tricks to Train Software Engineers, in Proceedings of the 22nd International
Conference on Software Engineering. 2000, ACM. p.
209-218.

7.         Drappa, A.
and J. Ludewig, Simulation
in Software Engineering Training, in Proceedings
of the 22nd Internation Conference on Software
Engineering. 2000, ACM. p. 199-208.

8.         Humphrey, W.S., Managing the Software Process. 1990: Addison-Wesley.

9.         Levary, R.R.
and C.Y. Lin, Modelling the Software Development Process Using an
Expert Simulation System Having Fuzzy Logic. Software --
Practice and Experience, 1991. 21(2):
p. 133-148.

10.       Pressman, R.S., Software Engineering -- A Practitioner's Approach. 4 ed. 1997, New
York, NY: McGraw-Hill.

11.       Sackman, H.,
W.J. Erikson, and E.E. Grant, Exploratory Experimental Studies Comparing Online and Offline
Programming Performance. Communications of the ACM, 1968.
11(1): p. 3-11.

12.       Tang, J.C., Findings from Observational Studies of Collaborative Work, in Readings in Groupware and Computer-Supported
Cooperative Work, R.M. Baecker, Editor. 1990,
Morgan Kaufmann: San Mateo, CA. p. 251-259.

13.       Tvedt, J.D., An Extensible Model for Evaluating the
Impact of Process Improvements on Software Development Cycle Time. 1996, Ph.D. Dissertation, Arizona State University.

14.       Weller, E.F., Lessons from Three Years of Inspection Data. IEEE Software, 1993. 10(5): p. 38-45.
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/structdynamo__backlight.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
dynamo_backlight Struct ReferenceContains Backlight information.  
More...

Data Fieldsint level Level from 0 - 255.  int status If the backlight is currently on or off 1|0.  
Detailed Description
Contains Backlight information. 

Field Documentation


       int dynamo_backlight::level          
    

       
    


Level from 0 - 255. 

    


       int dynamo_backlight::status          
    

       
    


If the backlight is currently on or off 1|0. 

    
The documentation for this struct was generated from the following files:libDynamoMiddleware.hlibDynamoMiddlewareARM.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/struct_dyn___proxy2_device___comm.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
Dyn_Proxy2Device_Comm Struct Referencecommunications structure for proxy to device  
More...


Detailed Description
communications structure for proxy to device 

This structure can be changed or substituted 

The documentation for this struct was generated from the following file:dyncommunication.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/structdynamo__battery.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
dynamo_battery Struct ReferenceContains Battery information.  
More...

Data Fieldsint ac_status If the device is plugged.  int level The power level of the battery 1 - 100.  int min_remaining minutes until there is no power  
Detailed Description
Contains Battery information. 

Field Documentation


       int dynamo_battery::ac_status          
    

       
    


If the device is plugged. 

    


       int dynamo_battery::level          
    

       
    


The power level of the battery 1 - 100. 

    


       int dynamo_battery::min_remaining          
    

       
    


minutes until there is no power 

    
The documentation for this struct was generated from the following files:libDynamoMiddleware.hlibDynamoMiddlewareARM.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/structdynamo__network.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
dynamo_network Struct ReferenceContains Network Information.  
More...

Data Fieldsint connected If the device is connected to the network.  int wireless If the device is connected to a wireless network.  int link The link strength of the wireless signal.  int signal The signal strength of the wireless network.  
Detailed Description
Contains Network Information. 

Field Documentation


       int dynamo_network::connected          
    

       
    


If the device is connected to the network. 

    


       int dynamo_network::link          
    

       
    


The link strength of the wireless signal. 

    


       int dynamo_network::signal          
    

       
    


The signal strength of the wireless network. 

    


       int dynamo_network::wireless          
    

       
    


If the device is connected to a wireless network. 

    
The documentation for this struct was generated from the following files:libDynamoMiddleware.hlibDynamoMiddlewareARM.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/structdynamo__memory.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
dynamo_memory Struct ReferenceContains Memory Information.  
More...

Data Fieldsint total_mem Total memory available to the device.  int free_mem Free memory on the device.  int total_swap Total swap available on the device.  int free_swap Free swap on the device.  
Detailed Description
Contains Memory Information. 

Field Documentation


       int dynamo_memory::free_mem          
    

       
    


Free memory on the device. 

    


       int dynamo_memory::free_swap          
    

       
    


Free swap on the device. 

    


       int dynamo_memory::total_mem          
    

       
    


Total memory available to the device. 

    


       int dynamo_memory::total_swap          
    

       
    


Total swap available on the device. 

    
The documentation for this struct was generated from the following files:libDynamoMiddleware.hlibDynamoMiddlewareARM.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/struct_dyn___device2_proxy___comm.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
Dyn_Device2Proxy_Comm Struct Referencecommunications structure for device to proxy  
More...


Detailed Description
communications structure for device to proxy 

This structure can be changed or substituted 

The documentation for this struct was generated from the following file:dyncommunication.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/structdynamo__cpu.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
dynamo_cpu Struct ReferenceContains CPU Information.  
More...

Data Fieldschar model [40] The model name of the CPU.  float load load value of the cpu 0 - 1.0 average of CPU over the past min  int total_process total processes active on the device  int active_process currently active processes on the server  
Detailed Description
Contains CPU Information. 

Field Documentation


       int dynamo_cpu::active_process          
    

       
    


currently active processes on the server 

    


       float dynamo_cpu::load          
    

       
    


load value of the cpu 0 - 1.0 average of CPU over the past min 

    


       char dynamo_cpu::model          
    

       
    


The model name of the CPU. 

    


       int dynamo_cpu::total_process          
    

       
    


total processes active on the device 

    
The documentation for this struct was generated from the following files:libDynamoMiddleware.hlibDynamoMiddlewareARM.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/struct_dyn___thread___comm.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
Dyn_Thread_Comm Struct ReferenceCommunication structure.  
More...

Data Fieldsint sock_ptrint sem_ptrint shm_ptrint loop_count
Detailed Description
Communication structure. 

Contains information for the send recive threads to send and recive to the same location 

Field Documentation


       int Dyn_Thread_Comm::loop_count          
    

       
    


    


       int Dyn_Thread_Comm::sem_ptr          
    

       
    


    


       int Dyn_Thread_Comm::shm_ptr          
    

       
    


    


       int Dyn_Thread_Comm::sock_ptr          
    

       
    


    
The documentation for this struct was generated from the following files:device.hproxy.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/functions_vars.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
All | Variables


ac_status
: dynamo_batteryactive_process
: dynamo_cpuconnected
: dynamo_networkfree_mem
: dynamo_memoryfree_swap
: dynamo_memorylevel
: dynamo_battery, dynamo_backlightlink
: dynamo_networkload
: dynamo_cpuloop_count
: Dyn_Thread_Commmin_remaining
: dynamo_batterymodel
: dynamo_cpusem_ptr
: Dyn_Thread_Commshm_ptr
: Dyn_Thread_Commsignal
: dynamo_networksock_ptr
: Dyn_Thread_Commstatus
: dynamo_backlighttotal_mem
: dynamo_memorytotal_process
: dynamo_cputotal_swap
: dynamo_memorywireless
: dynamo_network
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/globals_defs.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
All | Functions | Variables | Defines


KEY
: dyncommunication.hMOBILEIP
: dyncommunication.hMOBILEPORT
: dyncommunication.hPROXYIP
: dyncommunication.hPROXYPORT
: dyncommunication.hSEND_SLEEP_TIME
: dyncommunication.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/globals_vars.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
All | Functions | Variables | Defines


applicationThread
: proxy.happlicatonThread
: device.hsem_ptr
: proxy.h, device.hshm_ptr
: proxy.h, device.h
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/api/globals_func.html
##-----------------TITLE------------------------##
Dynamo Middleware: FnQ
##------------------TEXT------------------------##
Dynamo Middleware
			
			
				Navigation
						HomeDocumentationPeoplePublicationsRelated LinksFAQ
					Downloads
						For Internal Use OnlyDynamo Middleware v0.1DVS KernelDynamo LibrariesChange log
					
			
			

Main Page | Data Structures | File List | Data Fields | Globals
All | Functions | Variables | Defines
c | f | g | m | p | r | s | u | v | w




- c -createSemaphore()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.hcreateSharedMemory()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.hCreateUDPSocket()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
- f -freeSemaphore()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.hfreeSharedMemory()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
- g -get_backlight_info()
: libDynamoMiddlewareARM.hget_backlight_level()
: libDynamoMiddlewareARM.hget_backlight_status()
: libDynamoMiddlewareARM.hget_battery_ac_status()
: libDynamoMiddlewareARM.hget_battery_info()
: libDynamoMiddlewareARM.hget_battery_min_remaining()
: libDynamoMiddlewareARM.hget_battery_power_level()
: libDynamoMiddlewareARM.hget_cpu_info()
: libDynamoMiddlewareARM.hget_cpu_load()
: libDynamoMiddlewareARM.hget_cpu_model()
: libDynamoMiddlewareARM.hget_cpu_running_process()
: libDynamoMiddlewareARM.hget_cpu_total_process()
: libDynamoMiddlewareARM.hget_mem_free()
: libDynamoMiddlewareARM.hget_mem_free_swap()
: libDynamoMiddlewareARM.hget_mem_total()
: libDynamoMiddlewareARM.hget_mem_total_swap()
: libDynamoMiddlewareARM.hget_memory_info()
: libDynamoMiddlewareARM.hget_net_is_connected()
: libDynamoMiddlewareARM.hget_net_is_wireless()
: libDynamoMiddlewareARM.hget_net_link_quality()
: libDynamoMiddlewareARM.hget_net_sig_strength()
: libDynamoMiddlewareARM.hget_network_info()
: libDynamoMiddlewareARM.h
- m -mwReciveThreadFunction()
: proxy.h, device.hmwSendThreadFunction()
: proxy.h, device.h
- p -P()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
- r -readSharedMemory()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
- s -SendDatagram()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.hset_backlight_level()
: libDynamoMiddlewareARM.hset_backlight_status()
: libDynamoMiddlewareARM.h
- u -UDP_Recv()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.hUDP_Send()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
- v -V()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
- w -writeSharedMemory()
: libDynamoMiddlewareARM.h, libDynamoMiddleware.h
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/handouts/syllabus/index.html
##-----------------TITLE------------------------##
ICS-31 Syllabus
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/announcements.html
##-----------------TITLE------------------------##
Announcements
##------------------TEXT------------------------##
Announcements

ICS-31: Introduction to Programming







  #18: 6/9/14
  Quiz #7

The TAs have graded (and I have recorded the grades for) Quiz #7.
The class average was about 21 (or about 85%); the median was 23 (or about
  92%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the final exam.

The TAs decided to grade the materials submitted on paper.
You can examine the grades/problem in
   assignment grades, a
   zipped Excel file.
Also, examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
Both are sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.





  #17: 6/9/14
  Programming Assignment #6 Graded

Programming Assignment #5 has been graded by the reader (Yen Thi Hao Hoang:
  ythoang@uci.edu)
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.
Programs were mostly graded on whether they produced correct answers.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   ability to write functions/scripts using dictionaries and sets (using all
   the standard Python control structures).
The two problems, although very different, used the same basic data structures
  to represent the information they needed to process.

The class average was 43 (or about 87%) and the median was 47 (or about 94%).
So students overall performed very well on this assignment.
There were 40 of 113 early submissions (31 two days early; 19 one day early),
  for for extra credit.
Students average 86% for the "reachability" problem (worth 60% of the
  assignment) but only 77% for the "instant runoff voting" problem (40%).

IMPORTANT:
If you believe that we recorded one or more answers incorrectly, please
  email Yen Thi Hao Hoang: (ythoang@uci.edu) our class reader, and
  arrange a meeting in Lab to discuss the program.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
She will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, she will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #16: 6/9/14
  In-Lab Exam #2

I have graded and recorded the grades for the In-Lab Exam.
The class average was about 108 (or about 72%); the median was about 120 (or
  about 80%: equivalent of solving the first three problems).
The scores were skewed, with many students (39%) scoring As and many students
  (27%) scoring Fs after normalization (and many fewer scoring grades
  in-between: 18% Bs, 9% Cs, 7% Ds).
Note that almost 30% of the students taking the exam scored 150 points (100%).
This kind of distribution often happens in topics like programming, separating
  students into those who mostly get it and those who mostly don't.
Although, there are many possible reasons to score poorly on the exam
  (e.g., panic, not being able to debug), but the only way to score well is to
  know the material.





  #15: 5/29/14
  Programming Assignment #5 Graded

Programming Assignment #5 has been graded by the reader (Yen Thi Hao Hoang:
  ythoang@uci.edu)
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.
Programs were mostly graded on whether they produced correct answers.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   ability to write functions/scripts using lists (using all the standard
   Python control structures).
The early functions appeared in a library module; the later functions (and some
  of the earlier ones) appeared in a script (for simulating the Secretary
  Hiring problem).

The class average was 44 (or about 88%) and the median was 48 (or about 96%).
So students overall performed very well on this assignment.
There were 19 of 112 early submissions (11 two days early; 8 one day early), for
  for extra credit.
Students average 92% for the "library of functions" but only 79% for
  "functions in the secretary-hiring problem script".

IMPORTANT:
If you believe that we recorded one or more answers incorrectly, please
  email Yen Thi Hao Hoang: (ythoang@uci.edu) our class reader, and
  arrange a meeting in Lab to discuss the program.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
She will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, she will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #14: 5/27/14
  Quiz #6

The TAs have graded (and I have recorded the grades for) Quiz #6.
The class average was about 21 (or about 85%); the median was 23 (or about
  92%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the final exam.

I was unhappy with the outcome of turning in all the materials online.
Doing so was supposed to allow easily testing the submitted code.
But many students altered the files in such a way that this could not be done.
As a result I asked the TAs just to examine the code and not run it.
The downside is that code that didn't work could still get full credit, with
  no indication of what was wrong; also there weren't papers to return that
  were marked up.
When we do this for the next and final quiz, I will be more specific about
  how to edit the modules in which you will write your classes.

You can examine the grades/problem in
   assignment grades, a
   zipped Excel file.
Also, examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
Both are sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.

The TAs will return your written quizzes on Tuesday.
Please ensure that your grades are recorded correctly.
I'll be entering thousands of grades for students in my courses this quarter,
  so even if I'm 99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., a quiz score of 22.5 is recorded as 23).

If you believe that the TA has graded any of your work incorrectly, I encourage
  you to see him/her immediately about the discrepancy (in the case of
  programming assignments, you will always see your TA too).
Such a discussion can have only positive outcomes: either he will agree with you
 that you deserve more credit (and, we do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see him.
Also, because of the size of this class, if you have a grading issue, you must
  bring it to TAs attention within a week of when I return the materials.

The TAs reported that many students did not test/debug their code in Eclipse.
Some students didn't know how to use the raise statement to raise
  exceptions, but instead tried to use try/except statements
  (which handle exceptions, not raise them).





  #13: 5/22/14
  Midterm

The TAs have graded (and I have recorded the grades for) the midterm exam
The class average was about 73% and the median was about 76%.
The grades recorded in the spreadsheet are the actual exam grades.
Because the average was below 75%, about 3 normalization points are used in
  computing the average of all graded instruments.
Aditi graded problems 1, 2, 5, and 10; Bailey graded 4, 6, 7, and 9; Yen graded
  problems 3 and 8.

The approximate distribution of grades on the midterm, after normalization,
  is 25% As, 23% Bs, 17% Cs, 16% Ds, and 20% Fs.
(the last time I taught this class the numbers were:
     20% As, 19% Bs, 18% Cs, 28% Ds, and 15% Fs).
The lab averages were Lab 1 73 (quiz average 71), Lab 2 77 (quiz average 76),
  Lab 3 75 (quiz average 76), Lab 4 73 (quiz average 69), and Lab 5 69
  (quiz average 80).

Now is a good time to look at course grades as well, as you have now taken
  about half of the total number of testing instruments (475 of 1,000 points
  total): so this is the first time that recorded grades are meaningful.
The approximate distribution of course grades (for those student who submitted
  a midterm exam) is is 31% As, 33% Bs, 17% Cs, and 19% Ds and Fs, which is
  close to my speculation of 25% in each of these categories.
(the last time I taught this class the numbers at this point were:
                        24% As, 39% Bs, 22% Cs, and 15% Ds and Fs).

After we return your graded work in lab on Thursday, please download the 
  Grades(zipped .xlsm file) from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up.

Remember to read my solutions too (and ask questions about them if you
  don't undertand my answers or why they are correct).





  #12: 5/19/14
  Programming Assignment #4 Graded

Programming Assignment #4 has been graded by the reader (Yen Thi Hao Hoang:
  ythoang@uci.edu)
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.
Programs were mostly graded on whether they produced correct answers.
Note that the columns labelled Reasonable statements were worth 1 point
  and typically meant everything in the program was as it should be for Python.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   ability to write functions, whose bodies consisted of conditional
  (if) statements and looping (for and while) statements
  as control structures.
These functions generally took their "inputs" via parameters and produced
  their "outputs" by returning a value.
The early functions appeared in a library module; the later functions appeared
  in a script (for simulating Tennis matches).

The class average was 45 (or about 89%) and the median was 47 (or about 94%).
So students overall performed very well on this assignment.
There 27 of 80 early submissions (17 two days early; 10 one day early), for
  for extra credit.
Students average 91% for the "functions in a library" but only 80% for
  "functions in the Tennis script".

IMPORTANT:
If you believe that we recorded one or more answers incorrectly, please
  email Yen Thi Hao Hoang: (ythoang@uci.edu) our class reader, and
  arrange a meeting in Lab to discuss the program.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
She will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, she will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #11: 5/13/14
  Quiz #5

The TAs have graded (and I have recorded the grades for) Quiz #5.
The class average was about 19 (or about 77%); the median was 21 (or about
  84%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.

Examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
It is sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.

The TAs will return your written quizzes on Tuesday.
Please ensure that your grades are recorded correctly.
I'll be entering thousands of grades for students in my courses this quarter,
  so even if I'm 99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., a quiz score of 22.5 is recorded as 23).

If you believe that the TA has graded any of your work incorrectly, I encourage
  you to see him/her immediately about the discrepancy (in the case of
  programming assignments, you will always see your TA too).
Such a discussion can have only positive outcomes: either he will agree with you
 that you deserve more credit (and, we do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see him.
Also, because of the size of this class, if you have a grading issue, you must
  bring it to TAs attention within a week of when I return the materials.

The TAs reported that many students did not test/debug their code in Eclipse.
Some students didn't know how to use the raise statement to raise
  exceptions, but instead tried to use try/except statements
  (which handle exceptions, not raise them).





  #10: 5/5/14
  Programming Assignment #3 Graded

Programming Assignment #3 has been graded by the reader (Yen Thi Hao Hoang:
  ythoang@uci.edu)
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.
Programs were mostly graded on whether they produced correct answers.
Note that the columns labelled Reasonable statements were worth 1 point
  and typically meant everything in the program was as it should be for Python.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   ability to write intermediate-level scripts using iterative enhancement.
These scripts used conditional (if) statements and looping (for
   and while) statements as control structures.
They continue to use input, binding, output, and various complicated
   expressions (now including logical expressions) using Python operators.

The class average was 41 (or about 83%) and the median was 45 (or about 90%).
So students overall performed well on this assignment.
There 42 of 103 early submissions (24 two days early; 18 one day early), for
  for extra credit.
You should be feeling very comfortable using Eclipse now for the construction
  of Python programs.
Students seemed to have the most problem getting the second script working
  correctly.

IMPORTANT:
If you believe that we recorded one or more answers incorrectly, please
  email Yen Thi Hao Hoang: (ythoang@uci.edu) our class reader, and
  arrange a meeting in Lab to discuss the program.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
She will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, she will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #9: 5/5/14
  Quiz #4

The TAs have graded (and I have recorded the grades for) Quiz #4.
The class average was about 19 (or about 78%); the median was 21 (or about
  80%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.

Examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
It is sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.

The TAs will return your written quizzes on Tuesday.
Please ensure that your grades are recorded correctly.
I'll be entering thousands of grades for students in my courses this quarter,
  so even if I'm 99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., a quiz score of 22.5 is recorded as 23).

If you believe that the TA has graded any of your work incorrectly, I encourage
  you to see him/her immediately about the discrepancy (in the case of
  programming assignments, you will always see your TA too).
Such a discussion can have only positive outcomes: either he will agree with you
 that you deserve more credit (and, we do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see him.
Also, because of the size of this class, if you have a grading issue, you must
  bring it to TAs attention within a week of when I return the materials.

Here were some common mistakes (see my solution in the drop box on EEE):
Problem 1: Students are still missing the correct answers.
      We have talked about the rules a few times in class, and many examples
        have been presented.
      Watch for a boxing problem on the midterm.
      
  Problem 2: Most students did well in tracing the code.
      But many lost points for not knowing how to write a compact
        trace table (especially blank lines and the Console column).
      
  Problem 3: Most students did well in traching this code.
        If you just typed in the code and ran it, you might have difficulty
          with a problem on the midterm.
  
  Problem 4: Most students seemed to get most points in the various parts
        of this problem.
      The most mistakes occured in parts (d1) and (d2).






  #8: 4/29/14
  Programming Assignment #2 Graded

Programming Assignment #2 has been graded.
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   concepts of controlling your program with the debugger: stopping the program
   via single-stepping or with breakpoints and examining the state of the
   program when it is stopped.

The class average was 22 (or about 89%) and the median was 24 (or about 96%).
So students overall performed well on this assignment; even though you had only
  a few days to complete this program, many students submitted their solutions
  early, for extra credit.
You should now feel comfortable using the Eclipse debugger when debugging your
  future programming assignments.
IMPORTANT
I has the ICS-33 reader grade this assignment because Yen was grading
  Programming Assignment #1.
If you believe that we recorded one or more answers incorrectly, please
  email Austin Sherron: (sherronb@uci.edu) for this assignment only.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
He will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, he will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #7: 4/29/14
  Programming Assignment #1 Graded

Programming Assignment #1 has been graded by the reader (Yen Thi Hao Hoang:
  ythoang@uci.edu)
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.
Programs were mostly graded on whether they produced correct answers.
Note that the columns labelled Reasonable statements were worth 1 point
  and typically meant everything in the program was as it should be for Python:
   many students lost this point on the Expressions part of the
  assignment, for having redundant parentheses in some expressions.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   basics of scripts that use input, binding, output, and various complicated
   expressions using Python operators.

The class average was 50 (or about 100%) and the median was 51 (or about 102%).
So students overall performed well on this assignment, with many submitting
  their solutions early, for extra credit.
Programs will become harder and more interesting, but you will use these same
  Python features repeatedly during the quarter.
You should be feeling comfortable using Eclipse now for the construction of
  Python programs.

IMPORTANT:
If you believe that we recorded one or more answers incorrectly, please
  email Yen Thi Hao Hoang: (ythoang@uci.edu) our class reader, and
  arrange a meeting in Lab to discuss the program.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
She will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, she will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #6: 4/29/14
  Quiz #3

The TAs have graded (and I have recorded the grades for) Quiz #3.
The class average was about 20 (or about 82%); the median was 21 (or about
  84%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.

Examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
It is sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.

The TAs will return your written quizzes on Tuesday.
Please ensure that your grades are recorded correctly.
I'll be entering thousands of grades for students in my courses this quarter,
  so even if I'm 99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., a quiz score of 22.5 is recorded as 23).

If you believe that the TA has graded any of your work incorrectly, I encourage
  you to see him/her immediately about the discrepancy (in the case of
  programming assignments, you will always see your TA too).
Such a discussion can have only positive outcomes: either he will agree with you
 that you deserve more credit (and, we do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see him.
Also, because of the size of this class, if you have a grading issue, you must
  bring it to TAs attention within a week of when I return the materials.

Here were some common mistakes:
Problem 1: Mistakes involved not circling all literal, all variable, or
        all expressions: each had to show a type on the top and a value on the
        bottom, paying attention to operator precedence; note that -1 is
        technically the - unary operator applied to the literal 1
      Some students did not produce oval diagrams at all.
      
  Problem 2: The script must prompt the user correctly, accumulate the
        correct answer using a for loop (you were required to write a
        for loop), and print the correct information formatted correctly.
      
  Problem 2: The script must prompt the user correctly, accumulate the
        correct answer using a for loop (you were required to write a
        for loop), and print the correct information formatted correctly.
      It is easiest to concatenate all the required characters in the the
        answer, but it was also possible to remove the incorrect characters.
  
  Problem 4: There were many possible mistakes here.
        I outlined the major ones in class: boxes around parts of statements,
          not treating blocks correctly (omitting them or indicating too many).






  #5: 4/22/14
  Quiz #2

The TAs have graded (and I have recorded the grades for) Quiz #2.
The class average was about 19 (or about 77%); the median was 20 (or about
  80%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.

Examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
It is sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.

The TAs will return your written quizzes on Tuesday.
Please ensure that your grades are recorded correctly.
I'll be entering thousands of grades for students in my courses this quarter,
  so even if I'm 99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., a quiz score of 22.5 is recorded as 23).

If you believe that the TA has graded any of your work incorrectly, I encourage
  you to see him/her immediately about the discrepancy (in the case of
  programming assignments, you will always see your TA too).
Such a discussion can have only positive outcomes: either he will agree with you
 that you deserve more credit (and, we do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see him.
Also, because of the size of this class, if you have a grading issue, you must
  bring it to TAs attention within a week of when I return the materials.

Here were some common mistakes:
Problem 1: Many notational mistakes: some students did not follow the form
        showed in the notes, or what I showed on the board when I worked a 
        similar problem in class.
      Some mistakes were more important: not drawing an arrow to the correct
        object.
      
  Problem 2: Students mostly wrote correct answers here; some missed the
        empty line caused by the 5th print.
      
  Problem 3: There were many possible mistakes here.
        Mostly I wanted your code to include the "import module" and
        "from module import name" forms, then a call to prompt.for_int
        using predicate.is_prime to filter out bad inputs, followed by
        a print calling math.factorial (with sep='',
        which leaves no spaces in the output.
  
  Problem 4: There were many possible mistakes here too.
        I wanted you to write the correct literals: e.g., decimal points in
           float values, quotation marks surrounding str literals.
        The semantics of all these operators were covered in the readings; I
           expected you to be able to go back and look up such information.






  #4: 4/14/14
  Programming Assignment #0 Graded

Programming Assignment #0 has been graded.
There are two files that you should download, unzip, and examine to understand
  you performance on this assignment and cumulative performance in this class.
Each is sorted by Unique ID.

To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.

The first file to examine stores the
   assignment grades, a
   zipped Excel file that details how each student was graded on this
   instrument: why points were deducted.
You will see the deducted points in cells.
If you hover over a commented cell (those with a red-triangle in the cell's
  upper-right hand corner) you will see a comment that explains why the points
  were deducted.

The second file to examine is the grades spreadsheet that is available from
   the index on the course web: it records all the grades for all the testing
   instruments that I assign over the quarter.
You will notice that in the second spreadsheet all numbers are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate to a 28
  on the second one.
We will use this same process for recording all grades during the quarter.


This assignment was designed to test you on whether you have mastered the
   basics of using Python in Eclipse (and know the course web, via the survey
   questions).
 It was also designed to see if you could follow instructions and ask
    questions: more on that below.

The class avereage was 24 (or about 98%) and the median was 26
   (or about 104%).
The assignment was not meant to be hard, but it was not trivial either, and
  there were many opportunities to lose points.
Now that we are on to real programming assignments, I expect you are gaining
  more familiarity with Eclipse and having an easier time using it.

Let me talk about what will probably be the most contentious single point of
  the 1,000 points that this course is worth (thus .1% of the grade): the point
  was lost by 36 students (or about 20%).
I took off 1 point if you corrected the misspelling Inteprxter (and
  two points if you didn't have either spelling: in this second case you
  obvious failed to meet the specifications because you did not print what was
  required).
When some students hear about this point deduction, their heads explode and
  they cannot believe that I am taking off a point for correcting what you
  thought was my mistake.
But... I am trying to foster an atmosphere where nothing is taken for granted in
  the instructions I give: if anything seems confusing or plain wrong, I should
  be questioned about it -preferably in public, so others can learn about the
  problem and the correction.
For some background, check out Mr. Lill in the course overview.

Some students did ask me in class if they should correct the misspelling, and I
  told them no; some students asked me by email if they should correct the
  misspelling, and I told them no; if anyone would have asked on the Forum
  whether they should have corrected the misspelling, I would have responded
  no on the Forum (which some students would have read).
It is critical for programmers to be sure they know the specifications of the
  problem they are being asked to solve, otherwise they will solve, test, debug
  document, etc. the problem incorrectly, and another cycle of development will
  be needed to fix the misconceptions.
The overview lecture included a graph that showed that the later in development
  a problem is found, the harder/more expensive it is to fix.
So if we can find problems at  the time we are reading the specification of the
  problem to solve, that can save us a lot of work/money later.

The bottom line is that you are responsible for reading the instructions
  carefully and reporting any confusion so that I can clear it up (best reported
  on the MessageBoard Forum for Programming Assignments).
Of course, you can freely talk to anyone about the problem specifications, just
  not the code you write for your solutions.
If you make any assumptions and don't ask about them, they might come back
  later to haunt you (gradewise).
When working with a partner, you'll have two eyes reading the specification.
I am willing to deduct a point from many students to get across this
  perspective.

IMPORTANT
Yen Thi Hai Hoang is the reader/grader for this course and will be grading the
  programs (I'll post a picture of her soon on Facts web page).
If you believe that we recorded one or more answers incorrectly, please
  email her (ythoang@uci.edu) and arrange a meeting in Lab
  to discuss the program.
Please read the comments in the assignment grades spreadsheet carefully
  before contacting the Reader and ensure you understand the correct
  answers.
She will then re-examine your submission, possibly asking you for more
  information if there is still confusion, or talking to you during the lab
  meeting.
If there is a difference, she will email me a revised summary about
  your program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade).
If you feel there is still a problem after talking to the reader, please
  contact me (but always contact the reader first).





  #3: 4/14/13
  Quiz #1

I have graded (and recorded the grades for) Quiz #1.
The class average was about 21 (or about 86%); the median was 22 (or about
  88%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.
Always see your TA first for grading issues with Quizzes and Programming
  Assignments.

Examine the grades spreadsheet that is available from the index on the
  course web: it records all the grades for all the testing instruments that I
  assign over the quarter.
It is sorted by Unique ID.
To compute your Unique ID, go to the grades spreadsheet and go to the
  tab labeled UniqueID and enter your ID in the green cell (A2):
  your Unique ID will appear to the right, in cell B2.
You will notice that all numbers are rounded up to integers: so receiving a
  27.5 on your quiz will translate into a 28 in this spreadsheet.
We will use this same process for recording all grades during the quarter.

The TAs will return your written quizzes on Tuesday.
Please ensure that your grades are recorded correctly.
I'll be entering thousands of grades for students in my courses this quarter,
  so even if I'm 99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., a quiz score of 22.5 is recorded as 23).

If you believe that the TA has graded any of your work incorrectly, I encourage
  you to see him/her immediately about the discrepancy (in the case of
  programming assignments, you will always see your TA too).
Such a discussion can have only positive outcomes: either he will agree with you
 that you deserve more credit (and, we do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see him.
Also, because of the size of this class, if you have a grading issue, you must
  bring it to TAs attention within a week of when I return the materials.

Generally exams (written and programming) and quizzes are graded more closely
  than programming assignments.
If the average on any testing instrument is less than 75%, the column for
  that instrument will show the number of normalization points: the number of
  points each student would have needed to earn to have that instrument's
  average be 75%: these number of points are then added to the sum of the
  points for each student (in a later column).
This is the only curving I do in grading.
On this testing instrument (and typically most others, except the written and
  programming exams), the normalization points are 0.

Here were some common mistakes:
Problem 1: Many students either left out one or two lines needed in the
        syntax chart (some omitted it altogether) or incorrectly computed
        whether a few words were Legal or Illegal according the
        EBNF or syntax chart.
      Note that there is a differnce between the optional choice [+|-]
        and a 3-rung ladder that looks like a choice+|-| with one
        option empty.
      
  Problem 2: Some students got this completely correct while others had
        close solutions; some not so close answers.
      Some had "useless rules" (e.g., comma <= , just use the , in another
        rule) or minor or major bugs in their EBNF rules:
        name-sequence  was
        common, but that  doesn't allow just one name; likewise, the
        rule name-sequence  does allow
        Bob, Bob when it shouldn't.
      
      There were a few students who specified a Right Hand Side without using
        name, some didn't include commas nor the word "and"; these
        students appear lost about synthesizing EBNF descriptions.
      
  Problem 3: Some students did get this completely correct, while others
        had lots of small mistakes: some students didn't put in enough vertical
        lines to separate all the tokens; others did not write the categories
        on top, or include the types of the literals.





  #2: 3/31/14
  Install Course Software

  All students with computers should download and install the course Software:
    Java (to run Eclipse), Python, and Eclipse.
  All three products are available for free on the internet.
  Students can view instructions for downloading and installing this software
    by following then
    Course Software
    link.
  
  Although students can work on their programming assignments on the computers
    in the UCI labs, I expect students with computers to download and instal
    this software by the end of the first week of the quarter.
  If you are having difficulty with this task, the TAs and Lab Tutors will help
    you during the first Lab meeting (or beyond, if necessary: bring your
    computer to the lab); if you have successfully downloaded and
    installed this software, please help other students do so too.





  #1:3/31/14
  First Message

  Welcome to ICS-31
  I am going to post and archive important messages about the class in this
    announcements web page: each entry will be numbered, dated, and labeled.
  The entries will appear in reverse chronological order.
  Whenever you follow the link to this page (and you should check it daily),
    scan  its top for new announcements; scan downward for older announcements.
  This message will always appear at the bottom of this file. 
  
  I will never remove a message from this page, although a subsequent message
    may "cancel" a previous one; in such a case, I'll refer to the number of a 
    canceled message in the message that cancels it.
  
  Expect a few new messages to be posted here each week.
  
  Check this page, along with the Forums on MessageBoard, daily.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/lectures.html
##-----------------TITLE------------------------##
Lectures/Lab
##------------------TEXT------------------------##
Lecture/Lab Schedule

ICS-31: Introduction to Programming




Course Expectations

Lectures and Labs
Learning to program is an intensive activity.
We will have class every day of the week: MWF lectures and TuTh labs.
By staying on task 5-days per week, learning and practicing what we learn,
  we are more likely to master programming in Python.
One learns programming by practicing programming.


Work Before, During, and After Lecture
I expect students to read the assigned lecture materials, either before
  class (as a way to preview the lecture) or after class (where the lecture
  previews the reading), to get the most out of both: cover the material twice.
I will lecture during class, but I prefer discussing the material and
  answering questions; asking you questions about the material, and amplifying
  on those topics that need further discussion.
I expect most "lectures" to be interactive, with students participating.
Class mottos: "Those who are ashamed of asking are ashamed of learning."
  and "The only stupid question is the one left unasked."

Try to work out solutions to the assigned problems, to prove that you have
  understood the material; you can often test/verify/explore your solutions
  on the computer.
Here understanding means "be able to use the information operationally
  to write programs that solve problems".
If you have difficultly with a problem, it indicates that you should probably
  go back over the related reading -or certainly ask a question about it
  on the MessageBoard Forums.
One of the few advantages of a big class like this is the potental for
  peer-teaching.

Because these problems are not graded, feel free to discuss them, but don't
  give away the answers for those still working on them: working on exercises
  like these builds your programming muscles.
Students will be required to solve similar problems on weekly take-home
 quizzes, on which collaboration is NOT allowed.
Don't cheat yourself in this aspect of the course.



Lecture Attendance and Decorum
I expect students to attend class daily, arriving on time, and settling down
  when class starts: I will wait for the noise to subsist before starting class.
I expect students to neither carry on private conversations, nor use
  their computers to answer e-mail, surf the web, day trade stocks, or
  perform any other activities unrelated to this course.

Someone once said, "Distance education begins in the 8th row of the classroom":
  once you are that far back, it is easy to stop paying attention.
So, I recommend that students sit in the rows that are at the front of the room.
I once had the following comment on my final teaching evaluation,
"Write bigger: I could never read what you wrote on the whiteboard from my seat
   in the back of the class."
I have many deficiencies as an instructor; students should help themselves get
 what they need out of this class -like sitting near the front

Ringing cell phones disrupt my lectures.
Unless you are responsible for someone's life, your cell phone should be
  turned off.
Otherwise, you should set it to operate in some silent mode (as mine will be
  set); if it rings silently and you decide you must answer the call, please
  leave the class, with a minimum of disruption to the rest of the students.
If your cell phone rings audibly in class, you will be asked to leave class for
  that day.
Finally, if you know that you must leave early, please sit by a door, so that
  you can exit quietly and without disturbing the class.

Overall, please strive to be a considerate class member, both to me and to
  your fellow students; doing so is especially important in large classes.




Schedule, Topics, Readings, and Problems




Week 
     Activity      DateTopic (read for this date/do problems)Problems#1Lecture3/31
        Course Overview (all)
  1,3,5,9 Lab4/1Download and Install Python, Java, and Eclipse.
    Work through
   
      Python Programming in the Eclipse IDE
    Lecture4/2
      EBNF: A Notation to Describe Syntax
  1,2,6,7 Lab4/3Start
        
        Program #0: Computing Infrastructure  Lecture4/4
      Tokens and Python's Lexical Structure2,3,6,7#2Lecture4/7
      Defining Names in and from Modules1,2,4,5 Lab4/8Work on
        
        Program #0: Computing Infrastructure  Lecture4/9
        Reading Headers and Calling Functions1,2 Lab4/10Start
        
        Program #1: Simple Scripts  Lecture4/11
    Python Operators (5.1-5.2)tba#3Lecture4/14
    Expressions1, 3, 5, 6, 8 Lab4/15Work on 
        
        Program #1: Simple Scripts  Lecture4/16
      if Statements for decisions
      (Boxing Diagram)
      
  2,8,10,11,12 Lab4/17Work on
        
        Program #1: Simple Scripts  Lecture4/18
      Iteration and for loops
        (strings, range/irange, open)
      (Boxing Diagram)
        
      
      forproject
      tba#4Lecture4/21
      Iteration and while loopstba Lab4/22Start
      
      Program #2: The Debug Perspective in Eclipse  Lecture4/23
      Exceptions and the try/except statementtba Lab4/24Start
      
      Program #3: Intermediate Scripts  Lecture4/25
        Program Construction and Debugging
      
      Program Simplificationtba#5Lecture4/28
      Writing Functions and Modules I
  tba Lab4/29Work on
      
      Program #3: Intermediate Scripts  Lecture4/30
      Writing Functions and Modules II
        
      
      functionproject
      
   
      Testing Functions
        
      
      driverbatch
  tba Lab5/1Start
      
      Program #4: Functions and Control Structures  Lecture5/2
      Useful functions and Lambdas (little functions)tba#6Lecture5/5
        Lists        
       
        Picturing Liststba Lab5/6Work on
      
      Program #4: Functions and Control Structures  Lecture5/7
      List Processing 1
        
      
      listproject
  tba Lab5/8Midterm Written Exam
       (covering Lectures 3/31-5/2)  Lecture5/9
      List Processing 2 (Comprehensions)
  tba#7Lecture5/12
      Tuples and  Named Tuples (with List/Tuple Comprehensions)tba Lab5/13Start
        
        Program #5: List Processing  Lecture5/14
      Dictionariestba Lab5/15Work on
        
        Program #5: List Processing  Lecture5/16
      Dictionary Processing 1
        
      
      dictionaryproject
 #8Lecture5/19
      Dictionary Processing (review)
    Lab5/20Work on
        
        Program #5: List Processing  Lecture5/21
      Sets and Frozen Sets
        
      
      updateddictionaryproject

  tba Lab5/22Start
      
      Program #6: Dictionary and Set Processing  Lecture5/23
      Using Classestba#9Lecture5/26Holiday (No Classes): Memorial Day
    Lab5/27Work on
      
      Program #6: Dictionary and Set Processing  Lecture5/28
      Writing Classes
        
      
      Class Object Diagram
        
      
      A simple class and script: Predicate_List
  tba Lab5/29Work On
      
      Program #6: Dictionary and Set Processing  Lecture5/30
      Writing Classes (continued)tba#10Lecture6/2
      Functions as Resultstba Lab6/3Work On
      
      Program #6: Dictionary and Set Processing  Lecture6/4
      Functions as Data: map, filter, reduce, ...   Lab6/5
      In-Lab Programming Exam: From simple scripts to Dictionaries/Sets
      
    Lecture6/6Class Wrapup and
      
      Quick Review for Final Exam Finals Exam Week6/10We will have a comprehensive 2-hour written
      final exam on Tuesday, June 10th,1:30pm - 3:30pm in our lecture hall
      (see the
       
      Final Exam Schedule).
      I will sendemail when I have computed/entered final grades, which
        are due to UCI byThursday, June 19 at 5pm.
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/handouts.html
##-----------------TITLE------------------------##
Handouts
##------------------TEXT------------------------##
Handouts

ICS-31: Introduction to Programming





The following is a list of general-purpose handouts available for this course.
You may also want to look at related materials on the following web pages:
Lecture/lab Schedule/Notes,
Programming Assignments,
Sample Programs
Course Software






Computer Infrastructure


 Java (Download/Installation Instructions)
Instructions and links for downloading and installing Java,
  which is needed to run the Eclipse IDE.
Although we will develop programs using Python in Eclipse,
  you need to follow these instructions for Java first.




 Python (Download/Installation Instructions)
Instructions and links for downloading and installing Python,
  which we will run in the Eclipse IDE.




 Eclipse for Python (Download/Installation Instructions)
Instructions and links for downloading and installing the Eclipse IDE,
  in which we will develop Python programs.




  Python Programming in the Eclipse IDE (Overview/Tutorial)
Instructions for using Eclipse to develop Python programs.
This document acts as an overview and tutorial for using Python in Eclipse.




  The Debugger Perspective in Eclipse
A reference and tutorial on using the Debugger Perspective in Eclipse.
It includes information about observing script variables, single
  stepping through code in scripts, and setting/clearing unconditional and
  conditional breakpoints.





Pair Programming/Program Submission

Pair Programming
An introduction to Extreme Programming (XP) concentrating on testing and
  pair programming.
Read this before doing pair-programming on a programming assignment.




  Checkmate Homework Submissions
Instructions for submitting work on the Checkmate System.






Miscellaneous


  Academic Integrity Contract
Discusses the kinds of collaboration allowed and disallowed for the
  various testing instruments in this course.
You must read and sign a copy.
In case you are interested, here is the standard 
  form
  UCI supplies instructors for reporting acadmic integrity violations.



ASCII Character Set Reference
A table showing how values of the types int and char
  interconvert.


Bugs: An Explanation
A description of bugs in the context of computer programming.



Glossary
A glossary defining many important programming (and Java) terms.


]
Hackers and Painters
The title (and most interesting chapter) in a book written by 
    Paul Graham:
Hackers and Programmers: Big Ideas from the Computer Age.
I highly recommend this book.
All chapters are posted on the author's web pages.



Regular Expressions
In the context of studying EBNF, we will discuss using regular expressions
  for searching in the Eclipse text editor.
Each regular expression is like the right hand side of an EBNF rule,
  although it uses a different notation and includes more options.
Three other popular (by google) web sites are
  
    Regular Expressions and
  
    Using Regular Expressions and
  
    A Tao of Regular Expressions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/programs.html
##-----------------TITLE------------------------##
Sample Modules
##------------------TEXT------------------------##
Sample Modules

ICS-31: Introduction to Programming




The following is a list of zipped Eclipse project files (more might be added
  during the quarter).
Please feel free to download, unzip, run, and study these scripts (both their
  code and their run-time behavior).
Programmers gain tremendous insight into all facets of programming by studying
  the code of other programmers (especially those with more experience; and I
  am happy to improve my code based on your observations -nothing is perfect).
A good programmer typically makes elegant use of the required language
  features, resulting in smaller, more elegant code.

All downloadable projects are listed alphabetically; you can also search this
  page for keywords.
All are zip files, so unzip them first.
Most project files require the
  Download: standard course library
  which contains a variety of useful modules.
If you followed the Eclipse installation instructions, you should have already
  created the courselib folder in your workspace and populated it with
  these modules.






Download: Collatz Conjecture
The Collatz conjecture states: starting with any positive number, repeat the
  process "If it is even, halve it; if it is odd, multiply it by three and
  add one" and eventually the remaining value reduces to one.
No one has been able to prove this conjecture, but a short script allows us
  to investigate it (and others have examined billions of different values
  and found no counterexamples).
It is interesting to observe the number of cycles required to reduce the
  starting number to 1, looking for a pattern.
This script is highlighted in the
  debugger handout.


Download: 
  Craps Statistics
This script prompts the user for the number of craps games to play (craps
  is a dice game whose rules are explained in the block comment at the top
  of this script).
It then simulates that many games of craps, printing the number (and percentage)
  of wins, losses, dice throws (and average dice throws per game), elapsed
  time, and game playing speed.
This script is used inthe problem set for the
  debugger handout.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/weeklyschedule.html
##-----------------TITLE------------------------##
Weekly Schedule
##------------------TEXT------------------------##
Weekly Schedule

ICS-31: Introduction to Programming






For an alternative presentation of the listing of course materials, see the 
  Lectures page.












Week 1


Monday (3/31): Lecture

        Course Overview
      Problems: 1, 3, 5, 9
  
    Distribute Academic Integrity Contract
    (please read for discussion at next lecture)



Tuesday (4/1): Lab
Download and Install Python, Java, and Eclipse.
    Work through
   
      Python Programming in the Eclipse IDE




Wednesday (4/2): Lecture

      EBNF: A Notation to Describe Syntax
  Problems: 1, 2, 6, 7;
  Discuss Academic Integrity Contract




Thursday (4/3): Lab
Start
    
    Program #0: Computing Infrastructure
    (due on Thursday, 4/10, at 11:30pm)




Friday (4/4): Lecture

      Tokens and Python's Lexical Structure
  Problems: 2, 3, 6, 7
       
  Hand in signed Academic Integerity Contracts
  Quiz #1: Handed out in class
     (you can also download 
     it on Friday after class)
     (due on Wednesday, 4/9, at the start of Lecture)













Week 2
Monday (4/7): Lecture

      Defining Names in and from Modules
      Problems: 1, 2, 3, 5





Tuesday (4/8): Lab
Work on
        
        Program #0: Computing Infrastructure
    (due on Thursday, 4/10, at 11:30pm)




Wednesday (4/9): Lecture
Quiz #1 due at the start of lecture
  
        Reading Headers and Calling Functions
      Problems: 1, 2




Thursday (4/10): Lab
Start
        
        Program #1: Simple Scripts
        (due on Tuesday, 4/22, at 11:30pm)




Friday (4/11): Lecture

    Python Operators (5.1-5.2)
  Quiz #2: Handed out in class
     (you can also download 
     it on Friday after class)
     (due on Wednesday, 4/16, at the start of Lecture)












Week 3
Monday (4/14): Lecture

        Expressions
      Problems: 1, 3, 5, 6, 8




Tuesday (4/15): Lab
Work on 
        
        Program #1: Simple Scripts
        (due on Tuesday, 4/22, at 11:30pm)




Wednesday (4/16): Lecture
Quiz #2 due at the start of lecture
   
       if Statements for decisions
      (Boxing Diagram)
      Problems: 2, 8, 10, 11, 12




Thursday (4/17): Lab
Work on 
        
        Program #1: Simple Scripts
        (due on Tuesday, 4/22, at 11:30pm)




Friday (4/18): Lecture

      Iteration and for loops
        (strings, range/irange, open)
      (Boxing Diagram)
        
      
      forproject
  Quiz #3: Handed out in class
     (you can also download 
     it on Friday after class)
     (due on Wednesday, 4/23, at the start of Lecture)












 Week 4
Monday (4/21): Lecture

      Iteration and while loops





Tuesday (4/22): Lab
Start 
     Program #2: The Debug Perspective in Eclipse
       (due on Thursday, 4/24, at 11:30pm)



Wednesday (4/23): Lecture
Quiz #3 due at the start of lecture
  
      Exceptions and the try/except statement




Thursday (4/24): Lab
Start
      
      Program #3: Intermediate Scripts
      (due on Thursday, 5/1, at 11:30pm)



Friday (4/25): Lecture

        Program Construction and Debugging
      
        Program Simplification
  Quiz #4: Handed out in class
     (you can also download 
     it on Friday after class)
     (due on Wednesday, 4/30, at the start of Lecture)













Week 5
Monday (4/28): Lecture

      Writing Functions and Modules I





Tuesday (4/29): Lab
Work on
      
      Program #3: Intermediate Scripts
      (due on Thursday, 5/1, at 11:30pm)




Wednesday (4/30): Lecture
Quiz #4 due at the start of lecture
  
      Writing Functions and Modules II
        
      
      functionproject
  
      Testing Functions
        
      
      driverbatch




Thursday (5/1): Lab
Start
      Program #4:
      Functions and Control Structures
      (due on Tuesday, 5/13, at 11:30pm)




Friday (5/2): Lecture

      Useful functions and Lambdas (little functions)
  Quiz #5: Handed out in class
     (you can also download 
     it on Friday after class)
     (
     Eclipse Helper project for Quiz)
     (due on Wednesday, 5/7, at the start of Lecture)










 

Week 6
Monday (5/5): Lecture

        Lists
  
        Picturing Lists




Tuesday (5/6): Lab
Work on
      
      Program #4: Functions and Control Structures
       Programming with Classes
      (due on Tuesday, 5/13, at 11:30pm)




Wednesday (5/7): Lecture
Quiz #5 due at the start of lecture
  
      List Processing 1
      Download 
      listproject



Thursday (5/8): Lab
Midterm Written Exam
       (covering Lectures 3/31-5/2)



Friday (5/9): Lecture

      List Processing 2 (Comprehensions)
      Download 
      listproject
  No Quiz this weeekend: Work on Program #4














Week 7
Monday (5/12): Lecture

      Tuples and Named Tuples




Tuesday (5/13): Lab
Start
      Program #5
      List Processing
      (due on Thursday, 5/22, at 11:30pm)




Wednesday (5/14): Lecture

      Dictionaries




Thursday (5/15): Lab
Work on
      Program #5
      List Processing
      (due on Thursday, 5/22, at 11:30pm)




Friday (5/16): Lecture

      Dictionary Processing
      Download 
      dictionaryproject
  Quiz #6: Handed out in class
     (you can also download 
     it on Friday after class)
     (
       Eclipse Helper project for Quiz)
     (due on Checkmate Wednesday, 5/21, at the start of Lecture)












Week 8
Monday (5/19): Lecture

      Dictionary Processing (review)




Tuesday (5/20): Lab
Work on
      Program #5
      Writing Classes
      (due on Thursday, 5/22, at 11:30pm)




Wednesday (5/21): Lecture
Quiz #7 due at the start of lecture
  
      Sets and Frozen Sets
  Download
        
      updateddictionaryproject




Thursday (5/22): Lab
Start 
       Program #6:
      Dictionary and Set Processing
      (due on Wednesday, 6/4 at 11:30pm)




Friday (5/23): Lecture

      Using Classes
  No quiz this week















Week 9
Monday (5/26): Lecture
Holiday (No Classes): Memorial Day 




Tuesday (5/27): Lab
Work On
      
      Program #6: Dictionary and Set Processing
      (due on Wednesday, 6/4 at 11:30pm)




Wednesday (5/28): Lecture

      Writing Classes
   
      Class Object Diagram
  
      
      A simple class and script: Predicate_List






Thursday (5/29): Lab
Work on
      
      Program #6: Dictionary and Set Processing
      (due on Wednesday, 6/4 at 11:30pm)



Friday (5/30): Lecture

      Writing Classes (continued)
  Quiz #7 (no #8): Handed out in class
      (you can also download 
        it on Friday after class)
     (
       Eclipse Helper project for Quiz)
     (both paper/Checkmate due on Wednesday 6/4: at the start of Lecture)
      












 Week 10
Monday (6/2): Lecture
  
      Functions as Results




Tuesday (6/3): Lab
Work on 
      
      Program #6: Dictionary and Set Processing
      (due on Wednesday, 6/4 at 11:30pm)




Wednesday (6/4): Lecture
Quiz #7 due at the start of lecture (both paper and Checkmate)
  
      Functions as Data: map, filter, reduce, ... 




Thursday (6/5): Lab

      In-Lab Programming Exam: From simple scripts to Dictionaries/Sets
      



Friday (6/6): Lecture
Class Wrapup and 
       
       Quick Review for Final Exam










 Final Exams Week
Tuesday (6/10): Final Exam
1:30pm - 3:30pm
  SSH 100 (our regular classroom)
  Seating assignments will be emailed before the exam
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-31/assignments.html
##-----------------TITLE------------------------##
Programming Assignments
##------------------TEXT------------------------##
Programming Assignments

ICS-31: Introduction to Programming 




Procedures 

To turn in programs, and verify the submission, use the
  
  Checkmate Homework Dropoff system: it is also available on the
  standard frame index on the course website: it uses UCInetID Secure Web
  Login.
You receive NO POINTS for late programs, unless you have discussed the
  matter with me and gotten my official permission (typically, granted
  well-prior to the due date-not at the last minute- always via email, and not
  just orally; contact me as soon as possible).

IN ALL CASES, you must drop off (on time) whatever part of the program you
  have written, if you are to receive any partial credit for a submission
  (either on time or late with permission); if you drop off no files, I
   must assume that you have done no work on the assignment (which will
  result in a grade of 0 for it).



Pair Programming
We will use pair programming on most assignments (either required
  or recommended, although it is sometimes prohibited); it is only
  on these assignments that students can closely collaborate with their
  partners, turning in one copy of a jointly written program.
See Pair Programming for
  details about pair programming, and the right and wrong ways to do it.
There is a tremendous amount to be gained by both partners, if they pair
  program the right way.

You can keep the same partner for multiple assignments or switch.
Try to find a partner in your lab who has approximately your skill level and
  study habits (e.g., working evening vs. weekends, work ethic to submit
  programs early); try to find someone who lives near you (or with whom you
  can easily meet outside lab) because I expect partners will need time outside
  labs to finish the programs.
I recommend finding a partner in your lab, but there is also a MessageBoard
  Forum for this task.

If you believe that your schedule or life-circumstances disallow the ability to
  work in a pair, contact me immediately by email.
Without making prior arrangments with me, individual students submitting a
  program when pairing is required will receive a substantial point deduction.


Starting/Finishing Programs
Please read each assignment completely and carefully before starting it.
I suggest that you print and then read it, marking relevant material with a
  highlighter (details that you might forget by the end of an assignment).
Then, re-read the assignment before submitting your work.
Students should plan to have finished their current programs by the day before
  when the next program is started, so they can work on the new program during
  that lab; see below for how this leads to extra credit.


Extra Points for Submitting Early
If you drop off your program early, you will receive extra points (1 point if
  you submit it 24 hours early, 2 points if you submit it 48 hours early).
Since each program is worth 50 points, you can raise your grade on a program
  by 4% (almost half a letter grade) by turning it in two days early.
Note that turning in a program more than two days early still results in just
  2 extra points: the maximum you can get for an early turn-in.


Identifying Submissions

Only ONE STUDENT should submit the assignment (all parts of it).
If students work in pairs, BOTH NAMES and their lab numbers must
  appear in a comment at the top of each submitted program; it should appear as
  follows

# Romeo Montague, Lab 1
# Juliet Capulet, Lab 1
# We certify that we worked cooperatively on this programming
#   assignment, according to the rules for pair programming:
#   primarily that both partners worked on all parts together.
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.

If the names do not appear at the top of all your submissions, there will be a
  point deduction.


Multiple Submissions
Checkmate allows students to remove a submission and then resubmit.
We will grade only your final submission (and extra credit points are based on
  only that submission).
For assignments with multiple parts, please turn in each part
  as you finish it, so that I can accurately assess the progress of the
  class as a whole during this assignment.
If you discover something wrong with your code after you submit it, you can
  always correct the code, remove the code, and resubmit the code.


No Retrieval
Students cannot retrieve a submission from Checkmate; so, you are responsible
  for archiving your work so that you have a copy of what you submit.
Also, ensure that you turn in the correct (most up to date) version of your
  code.


Programming Assignments
I will turn text into links below on the assigned date.

ProgramAssignedDueDescriptionPairing?#04/34/10
  Computing Infrastructure

Prohibited#14/104/22
  Simple Scripts

Required#24/224/24
  The Debug Perspective in Eclipse

Prohibited#34/245/1
  Intermediate Scripts

Required#45/15/13
  Functions and Control Structures

Required#55/135/22
  List Processing

Recommended#65/226/4
  Dictionary and Set Processing

Recommended
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/pattisanonymous.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Email sent anonymously to: Richard Pattis (pattis@ics.uci.edu)
This is a small, simple to use tool for sending anonymous email to me.
Please feel free to use it any time that you want to communicate with
me anonymously.

Do NOT ask questions via anonymous email: I don't know who to
reply to (and I don't want to broadcast a reply to the entire class).

Depending on the content, I might forward this note to the class
discussion email list, with my reply.

Enter your email in the text area below.
  Press the Submit button.


Enter anonymous email in the following text area
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/images/
##-----------------TITLE------------------------##
Index of /~pattis/common/images
##------------------TEXT------------------------##
Index of /~pattis/common/images
NameLast modifiedSizeDescriptionParent Directory   -  Thumbs.db17-Sep-2006 16:50  7.5K blue-ball.gif06-Nov-2001 13:34  925  green-ball.gif06-Nov-2001 13:34  886  red-ball.gif06-Nov-2001 13:34  527  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/
##-----------------TITLE------------------------##
Index of /~pattis/common/handouts
##------------------TEXT------------------------##
Index of /~pattis/common/handouts
NameLast modifiedSizeDescriptionParent Directory   -  HONinstructorREPORTINGFORM.DOC30-May-2011 14:32   71K HONinstructorREPORTINGFORM.pdf20-Mar-2013 09:02   19K ascii.html31-Jul-2004 14:22  3.6K bugs.html25-Apr-2013 19:33   10K checkin/17-Sep-2015 12:18    -  checkmate/21-Mar-2013 14:17    -  debugger/22-Mar-2013 21:41    -  debugging hints.txt28-Mar-2013 13:47  110  glossary.html11-Aug-2004 17:13   14K hackerspainters.doc10-Sep-2004 19:09   57K hackerspainters.pdf20-Mar-2013 08:38   42K introtopythonineclipse/09-Mar-2013 12:11    -  linuxinstall.txt11-Jan-2014 09:13  1.7K macinstall.txt08-Jan-2015 23:21  6.0K macmingweclipse/01-Sep-2015 14:13    -  macpythoneclipsejava/27-Aug-2015 19:18    -  mingweclipse/20-Sep-2015 18:37    -  pairprogramming.html18-Mar-2013 21:44  6.0K pythoneclipsejava/30-Mar-2013 17:15    -  stltest.zip18-Dec-2013 19:44  1.9K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules46/
##-----------------TITLE------------------------##
Index of /~pattis/common/modules46
##------------------TEXT------------------------##
Index of /~pattis/common/modules46
NameLast modifiedSizeDescriptionParent Directory   -  courselib.zip30-Aug-2015 15:49   39K courselibmac.html18-Sep-2015 19:21   14K courselibpc.html18-Sep-2015 19:21   13K courselibupdate.html18-Sep-2015 18:01  1.8K googletestlib.zip04-Jan-2014 08:03  923K googletestlibmac.zip07-Jan-2014 09:46  369K googletestmac.html30-Aug-2015 13:46  8.6K googletestpc.html30-Aug-2015 13:22  7.6K gtest-1.7.0.zip19-Dec-2013 14:15  1.1M images/29-Aug-2015 06:50    -  quickguide.txt30-Aug-2015 15:51  2.6K stltest.zip18-Sep-2015 17:55  2.4K test_googletest.zip04-Jan-2014 11:31  1.3K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
