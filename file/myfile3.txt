##------------------URL-------------------------##
http://www.ics.uci.edu/~gbowker/forget_fn.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
1	One of their arguments is that the `truth' or not of a
memory is constructed in discourse in social settings - and so is never fixed
for all time.
2
	Notes taken at Iowa Intervention Project meeting of 8 June,
1995.
Hereinafter IIP 6/8/95.
3 There is clearly a reference to
Thompson's classic (1967) Time, Work
Discipline and Industrial
Capitalism here.  It is questionable of course
whether a ll
nursing has ever been thought of as process - just as
industrial work has
often had it's rhythmic side (the cycles of boom and bust
in the
eighteenth and nineteenth centuries for example).
4 The translations
from Comte's French are my own.
##------------------URL-------------------------##
http://www.ics.uci.edu/~gbowker/tb_fn.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
1 For a picture of the grave, see
http://alexia.lis.uiuc.edu/~star/irgchome.html.
[2] Mainstream, Western.
3 A list of causes of mortality and morbidity, now administered by the World
Health Organization.  See Bowker and Star (1991; 1994) for analysis of its
evolution and importance for STS.
[4 ]AIDS presents a similar challenge, as a condition, not
per se a disease, and equally protean in expression.
[5 A debate which occurs in many arguments about medical
classification, see Bowker, Timmermans and Neumann, in prep, about a similar
argument in nursing classification about algorithmic vs. natural language
approaches.
6  Here we are reminded of the classic work of interactionist sociologist
Donald Roy on breaking up boring, routine time on the factory assembly line
(Roy, 1959)
7 Roth has an eloquent analysis of how this image has come to be a powerful one
in the medical literature; he argues it is in fact statistically quite rare.

8 After the 1847 Dumas novel, ]La belle dame aux camelias[.
9  ]Thanks to Jay Lemke (personal communication) for this useful
distinction, which we hope to explore more in future work.[
##------------------URL-------------------------##
http://www.ics.uci.edu/~lopes/datasets/index.html
##-----------------TITLE------------------------##
UCI Source Code Data Sets
##------------------TEXT------------------------##
UCI Source Code Data Sets 

  







Welcome to the UCI Source Code Data Sets


This page is a repository of various data sets
we have curated in our research in large scale analysis of source code. 
These data sets are available for other researchers and individuals to
use. Please refer to the terms of usage that come with each data set
for any restrictions in usage.



Currently available data sets:


 [04-22-2010] SDS_source-repo-18k 
 is a tarball of Sourcerer Code Repository archived on 04-22-2010. It contains 18,000 
 java projects (~390GB).

[06-04-2010] Koders-log-2007
is a compressed file (in 7z format) containing a Microsoft SQL Server
database backup storing a yearlong usage data of Koders.com, an
Internet-scale code search engine. (~188MB).

[11-14-2013] sourcerer-maven-aug12
is a compressed tarball (.tar.gz) containing 2,232 projects from the
Maven Central repository (~80GB).





Questions, Issues and More Information



Please use the issue tracker in github.



Citation Policy



If you publish material based on data sets obtained from this repository, then, 
in your acknowledgments, please note the assistance you received by using this 
repository. This will help others to obtain the same data sets and replicate 
your experiments. 
We suggest the following pseudo-APA reference format for referring to this repository:



    C. Lopes, S. Bajracharya, J. Ossher, P. Baldi (2010). UCI Source Code Data Sets [http://www.ics.uci.edu/~lopes/datasets]. Irvine, CA: University of California, Bren School of Information and Computer Sciences.


Here is a BiBTeX citation as well:

    @misc{Lopes+Bajracharya+Ossher+Baldi:2010 ,
    author = "C. Lopes and S. Bajracharya and J. Ossher and P. Baldi",
    year = "2010",
    title = "{UCI} Source Code Data Sets",
    url = "http://www.ics.uci.edu/$\sim$lopes/datasets/",
    institution = "University of California, Irvine, 
       Bren School of Information and Computer Sciences" }








 
  This work has been partially supported by the  National Science Foundation.

(c) the mondego group
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/qa/
##-----------------TITLE------------------------##
undergraduate student faq @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > Questions & answers


  
Undergraduate student FAQ








Below are answers to our most frequently asked questions. 
FAQ
If you don't see your question listed here, e-mail it to ucounsel@uci.edu (please use your UCI account and include your student ID number). 
Generally, you can expect a response no later than the end of the next business day (if not sooner).


General Student Affairs Information

Why and when should I talk to an academic counselor?Why and when should I talk to the Associate Dean for Student Affairs?Where do I obtain the "Dean's signature"?What if I want to change my major to another one within the Bren School of ICS?What if I want to change into a Bren School major from another School at UCI?What if I want to change from a Bren School major into a major in another School at UCI?Can I double major, and what are the restrictions?How do I declare a minor?Where do I find information on graduate schools?
Degree and Course Planning

How do I get into the Bren School of ICS Honors Program?What is a degree check and how do I request one?Which courses must I take for a grade?Which courses may I take P/NP?How many units may I take P/NP?May I take classes at a community college after I have matriculated to UCI?How can I take more than 20 units? What is the "UCI residence requirement"?
Preparation for Graduation

What is a degree audit and how do I get one?How and when do I apply to graduate?What are the deadlines for graduation?How do I find out if I am eligible for Latin Honors?
Policies, Practicies, and Deadlines

Where do I obtain the "Dean’s signature"?When is the last day to add a Bren School class?When is the last day to drop a Bren School class?When is the last day to change a grade option for a Bren School class?When/How/Where do I petition for an exception to policy?What are the requirements for part-time status and how do I apply?How does a "W" (Withdrawal) affect my GPA?What does it mean to be on academic probation?What does it mean to be "subject to disqualification"?What is the readmission policy?

General Student Affairs Information


Why and when should I talk to an academic counselor?

Your relationship with the Bren School academic counseling staff typically begins even before you start your first quarter of classes. The counselors will help you clarify your academic goals (including whether you want to add a major, minor, concentration or specialization), map out a plan that leads to completion of all general education and degree requirements by your intended graduation date, and plan your quarterly schedules.
 Add a major, minor, concentration or specialization), map out a plan that leads to completion of all general education and degree requirements by your intended graduation date, and plan your quarterly schedules.As a continuing student, plan to check in at least quarterly, or more often if necessary, with the counseling staff to discuss your academic goals, progress, and challenges. The counselors will inform you about other relevant campus resources, programs, services and opportunities that will complement your personal, social, career or academic goals. 
Both the professional counselors and peer academic advisors have offices in the Student Affairs Office (SAO), located in the ICS building, Suite 352. 
The professional counselors are available by appointment only. You may call (949) 824-5156, or drop by Monday through Friday, between 9-noon and 1-4 pm, to schedule an appointment. 
The peer academic advisors (students who undergo rigorous training and receive close on-site supervision from the professional counselors) are available for drop-in counseling during their posted hours (http://www.ics.uci.edu/~peer/). 
You may also email your question to ucounsel@uci.edu, and an ICS academic counselor will respond as soon as possible. 



Why and when should I talk to the Associate Dean for Student Affairs?

The Associate Dean for Student Affairs (ADSA) holds weekly office hours in the Student Affairs Office.  He is available to talk to students about ways to enrich and broaden their educational experiences through research, internships and work experience, or to hear comments or concerns about particular courses, professors, or the Bren School experience in general.He also meets with students who are petitioning for an exception or waiver from a campus or School policy/requirement, and those who are experiencing serious delays in their academic progress.  
You may schedule an appointment with the Associate Dean by calling the SAO front desk, (949) 824-5156, or by emailing him at adsa@ics.uci.edu.



Where do I obtain the "Dean's signature"?

Always start with the Student Affairs Office (SAO).  Counseling staff are authorized to provide Dean’s review and approval in all instances involving add/drop/grade change enrollment exception requests and other student-related forms issued by the Registrar’s Office or other administrative offices.   In all instances, a student who goes to the Dean’s Office seeking the "Dean’s signature" will be re-directed to the SAO. 
The SAO is open to students from 9-noon and 1-4 p.m., Monday through Friday.  



What if I want to change my major to another one within the Bren School of ICS?

A counselor will review allowed course substitutions (see Note below) and identify the most efficient way to meet the degree requirements for your new intended major.  
Assuming you are eligible to change majors, complete the process by submitting a Change of Major form (available in the ICS Student Affairs Office lobby) and give this to a counselor or the SAO front desk receptionist.  
NOTE:  For the purpose of facilitating a change of major, students who have completed ICS 21 and ICS 22 (or their equivalents) with grades of C or better may use these courses in satisfaction of the requirements of Informatics 41 and 42 (and vice-versa).  Similarly, students who complete ICS 52 with a grade of C or better may use it in satisfaction of Informatics 43 (and vice-versa).  



What if I want to change into a Bren School major from another School at UCI?

The Change of Major guidelines for Business Information Management, Computer Science, Computer Science and Engineering, Informatics or Information and Computer Science are listed at the Change of Major web site.
We encourage you to meet with an ICS academic counselor as soon as possible.  They will help you structure a revised academic plan and determine the most efficient use of coursework-to-date to meet degree and general education requirements.  
Once you have successfully met the Bren School of ICS change of major requirements, please do the following: 
a. Complete and submit a Change of Major form (available in the ICS Student Affairs Office lobby, your major's Student Affairs Office, and the Registrar's office) to the receptionist at the ICS Student Affairs Office.
b. If you have over 120 units, also include an academic plan detailing the courses remaining and your intended graduation date (quarter and year).  
c. Please note that our Double Major policy is entirely different from our Change of Major policy. Please see an ICS academic counselor immediately if you are interested in adding a second or third major.




What if I want to change from a Bren School major into a major in another School at UCI?

All campus change of major policies are located online at the Change of Major web site.
You should meet with an academic counselor in the School of your intended major as soon as possible to receive guidance about the most efficient way to apply earned units toward general education and "intended" major requirements. 



Can I double major, and what are the restrictions?

If you are considering a double major, schedule an appointment with an academic counselor to find out how to most efficiently meet the additional degree requirements.A counselor will also help you map out an academic plan that will keep you on track with your intended timeline to graduation.A double major may not be added during a student’s senior year at UCI; instead, a student is directed to consider a Second Baccalaureate program in CS, ICS or Informatics.BREN SCHOOL DEGREE PROGRAM RESTRICTIONS:
Students majoring in Business Information Management may not double major in Business Administration nor minor in Management, Informatics, or Information and Computer Science.The major in Biomedical Computing may not be combined with the minor in Information and Computer Science.The major or minor in Information and Computer Science (ICS) cannot be combined with the majors in Computer Game Science (CGS), Computer Science (CS), Computer Science and Engineering (CSE), or Informatics.The major in Computer Science (CS) cannot be combined with the major in Computer Science and Engineering (CSE).The major in Computer Science and Engineering (CSE) cannot be combined with the major in Computer Engineering (offered by The Henry Samueli School of Engineering). Bren School of ICS majors may not minor in Informatics.Bren School of ICS majors may not minor in Digital Information Systems. Courses used to complete the minor in Digital Information Systems may not also count towards the requirements for the Information and Computer Science minor or the Informatics minor.

For additional information about double majoring, please consult the individual degree information pages.
 



How do I declare a minor?

If you are interested in adding a Bren School minor, see your Academic Counselor and be sure to have your him or her post the minor to your online Degree Audit located on your Student Access page.
If you are interested in adding a minor outside of the Bren School, check with the School that is offering the minor. 
Most academic units do not require you to declare a minor. However, you may be asked to fill out an "Intent to Pursue the Minor" form which allows the academic unit to plan for course offerings for non-majors but in no way obligates you to finish the minor.
Some schools, such as the Paul Merage School of Management (management and accounting minors), and the Claire Trevor School of the Arts (digital arts minor), may limit the number of students that are accepted into their minor degree programs, or may require that you make academic progress within a certain timeframe.



Where do I find information on graduate schools?

The UCI Career Center offers a range of services regarding graduate school research, preparation and application (including an on-line Letter of Recommendation service).  
The Career Center also has a library of resource materials that are helpful for graduate school research (e.g. the Peterson’s Guide to Graduate Programs (www.petersons.com), program brochures, and campus catalogues. 
Find out more at the Career Center web site.  
After reading about the Bren School's graduate degree programs, you may also talk to one of the Bren School's graduate counselors to learn more about your academic preparedness and suitability for graduate work.Bren ICS graduate counselors hold drop-in hours Monday – Friday, 1-3:30 pm; their offices are located in ICS 1, Suite 352.



Degree and Course Planning


How do I get into the Bren School of ICS Honors Program?

The Bren School Honors Program provides an opportunity for selected students in any one of the Bren School majors to pursue advanced work in one of the research areas in the School. 
Admission to the program is based on a formal application submitted to the School in the spring. Applications are available each year beginning May 1 and should be submitted by June 1 to ensure consideration. Students are notified during August and September since spring and summer (if applicable) grades are considered.
Major-specific courses and GPA requirements are listed at the Bren School Honors Opportunities Program page.
In selecting students for the honors program, the School also considers evidence of ability and interest in research. 
Students admitted to the program participate in the Bren School Honors Seminar (ICS H197), which provides an introduction to research areas in the School, followed by a minimum of two quarters of independent supervised research (CS H198 or Informatics H198).
Passing two H198s counts for one of the project courses required for the ICS and CS majors, provided that at least one of the remaining two project courses is taken in a different area. 
In order for the student to be considered to have successfully completed the honors program, the work must be written up as a final report and certified to be of honors quality by the student’s faculty advisor and the Honors Program advisor.



What is a degree check and how do I request one?

A degree check is an evaluation of your progress towards your degree – what requirements you have fulfilled and which you still must complete. 
It includes an evaluation of all of your records – AP credits, UCI work, courses taken at other colleges and universities. 
All students should schedule a degree check at least once per year. Seniors must meet with a Bren School academic counselor to get a degree check at least 1-2 quarters before their intended graduation date (example, if you are aiming to graduate at the end of spring quarter, you must schedule a Degree Check during fall or winter quarter).  
Stop by the Bren School SAO during office hours or call (949) 824-5156 to set up an appointment with a counselor (or see a Peer Advisor during drop-in hours).



Which courses must I take for a grade?

All major requirements must be taken for a letter grade. This includes courses listed below for the specific major.  
Business Information Management: Computer Science, Economics, Informatics, ICS, Management, Mathematics, Statistics
Computer Science: Computer Science, ICS (including ICS 139W), Mathematics, 3-quarter Physics, Chemistry or Biology sequence, Statistics 67, Philosophy 29 or 30
Computer Science/Engineering: Computer Science, Computer Science and Engineering, ICS, Mathematics, Philosophy 29, Physics 7 series, Statistics 67, and any science elective
Informatics: Computer Science, Informatics, ICS, Statistics/Mathematics 7 and 67, Philosophy 29, and ICS/Math 6B 
Information and Computer Science: Computer Science, Informatics, ICS (excluding ICS 139), any course that satisfies the upper-division mathematics requirement, and Statistics 
ICS Undeclared (Pre-major): Computer Science, Informatics, ICS, Mathematics, Philosophy 29, Science (if you are considering CS or CSE) and Statistics 



Which courses may I take P/NP?

General education requirements and electives not applicable to your major requirements may be taken P/NP. 



How many units may I take P/NP?

You may take an average of 4 units P/NP per quarter and no more than 12 units TOTAL as P/NP during your undergraduate career. 
The P/NP grading option may be used only for courses that count for the unit requirement for the bachelor’s degree and toward the general education requirement. 
Unless designated as 'P/NP Only,' courses taken to complete Bren School or major requirements must be taken for a letter grade. 
No more than two courses may be taken P/NP and applied to any minor on campus.



May I take classes at a community college after I have matriculated to UCI?

Bren School students who have matriculated may petition to take up to four approved UC-transferable lower-division classes, except for writing classes, at a community college or other university.
You must consult www.assist.org to find courses that are UC-transferable. 
It is extremely important to consult with a Bren School academic counselor prior to taking off-campus courses, and especially if you are near or in your last year prior to graduation. 
The counselor will review your list of proposed courses to ensure that they will count towards your general education or major requirements and will not compromise your ability to meet the UCI residence requirement (at least 36 of the final 45 units completed must be earned in residence at the UCI campus; certain exceptions may apply). 



How can I take more than 20 units? 

Freshman entering their first quarter at UCI and the Bren School cannot enroll in more than 20 units. 
After the first quarter, any student with the most recent quarterly GPA and a cumulative GPA of 3.0 or higher may enroll in more than 20 units, with prior authorization from an academic counselor in the Bren ICS Student Affairs Office (ICS 1, Suite 352).  



What is the "UCI residence requirement"?

All students are required to complete at least 36 of the final 45 units preceding graduation while in residence at UCI. 
Exceptions may be allowed for students who participate in certain programs, such as EAP, UCDC, or IOP. 



Preparation for Graduation


What is a degree audit and how do I get one?

A degree audit is an online report that students use as a guide to construct their academic plans.  Here, you will see an audit of your progress toward your degree requirements.  To access your audit online, go to:  www.uci.edu > student access > degree audit > sign in 
It is important that you monitor your degree audit for accuracy as the ICS Student Affairs Office uses it to determine satisfaction of degree requirements for graduation purposes.
If there are omissions or errors, please meet with an academic counselor or peer advisor.  Changes to the degree audit must be done in person; requests via e-mail or phone will not be accommodated.   
If your degree audit is not posted, please send an e-mail toucounsel@uci.edu with your request.



How and when do I apply to graduate?

You apply to graduate by submitting an online Application for Graduation via Student Access no later than the published deadline for the intended quarter. 
Bren School’s deadline is week 10 of the quarter prior to that quarter in which you will complete all required coursework for graduation.
Applications for the spring quarter must be turned in by the end of week 10 of winter quarter to ensure consideration for Latin honors at graduation and inclusion in the commencement program. 
Included on the Application are spaces to indicate minors, concentrations and specializations that you may be completing.
After submitting the online Application, only a Bren School academic counselor may make changes to it. Therefore, please ensure that your diploma notification address and telephone number are correct.



What are the deadlines for graduation?

» Fall: Friday of the 10th week of classes in Spring quarter
» Winter: Friday of the 10th week of classes in Fall quarter
» Spring: Friday of the 10th week of classes in Winter quarter
» Summer with an intent to participate in Commencement:  Friday of the 10th week of classes in Winter quarter 
»  Summer with no intent to participate in Commencement:  Friday of the 10th weeks of classes in Spring quarter 
Applying for graduation can be done online, go to www.uci.edu > student access> application for graduation > sign in > fill out form.  
To make changes, please meet with an academic counselor or peer advisor in the SAO, ICS building, Suite 352.  E-mail or phone requests to change your application for graduation cannot be accommodated and must be done in person.



How do I find out if I am eligible for Latin Honors?

Of the seniors graduating during an academic year (summer to spring), no more than 12 percent of the graduating class will receive Latin honors:
» 1 percent summa cum laude» 3 percent magna cum laude» 8 percent cum laude
The selection for these awards is based on the School’s winter quarter rank-ordered grade point averages. To be eligible for honors at graduation:
» You must file an application to graduate by the first week of February of the academic year you intend to graduate (e.g. if you are graduating spring 2010, the application must be submitted by February of the same year)
» You must be able to verify completion of all course work by the end of spring of the academic year you intend to graduate and be officially declared as a Bren School of ICS major
» Seventy-two (72) quarter units in residence at a UC campus must be completed by the end of winter quarter of the academic year you intend to graduate.  In addition, any corrections to your academic record must be processed by the Registrar's Office by March of the same year.
NOTE:  Summer graduates participating in the June commencement ceremony prior to their date of graduation are not eligible for honors for that academic year but will be considered for the following academic year instead.




Policies, Practices, and Deadlines
NOTE:Effective Fall 2010, paper add/drop cards will no longer be used nor will they be processed by the Registrar's Office.  All enrollment requests past the deadlines listed below will be considered LATE and will require exceptional review either by the school offering the course and/or the student's home school; there is no guarantee that an enrollment exceptions request will be approved.  Plan your schedule and courseload carefully.  If you have questions, contact an SAO counselor in advance of the general campus deadlines outlined below.

Drop a course by the end of week 2 (or the earlier, unique course deadline set by the instructor)Change the grading option by the end of week 2 (or the earlier, unique course deadline set by the instructor)Add a course by the end of week 3 (or the earlier, unique course deadline set by the instructor)


Where do I obtain the "Dean’s signature"?
Always start with the Bren ICS Student Affairs Office (SAO) – located in ICS, Suite 352 – and open to students from 9-noon and 1-4 p.m. Monday through Friday. Counselors are authorized to provide Dean’s review and signature in all instances involving LATE add/drop/change of grading option requests done via the on-line Enrollment Exceptions system, and on other student-related forms issued by the Registrar’s Office or other administrative offices.


When is the last day to add a Bren School class?

The general campus deadline to add an undergraduate course is the end of the 3rd week of classes.  An earlier course add deadline may be imposed by the instructor, so be sure to carefully read WebSOC notes and the course syllabus. A request to add a course AFTER the unique course deadline or the end of week 3 must be initiated using the on-line Enrollment Exceptions system, and will require review and approvals by the course instructor, the Dean of the School that is offering the course and the Dean of the School that houses your major.  



When is the last day to drop a Bren School class?

﻿The general deadline to drop an undergraduate course is the end of the 2nd week of classes.  An earlier course drop deadline may be imposed by the instructor, so be sure to carefully read WebSOC notes and the course syllabus. 
A request to drop a course AFTER the unique course deadline or the end of week 2 must be initiated using the on-line Enrollment Exceptions system, and will require review and approvals by the Dean of the School that is offering the course and the Dean of the School that houses your major.  
Not doing well in a course is generally not considered a valid reason for a late drop petition, so please select your courses carefully.  As a courtesy to your professor, please let him or her know once you have dropped th course.



When is the last day to change a grade option for a Bren School class?

The general campus deadline to change a grade option in an undergraduate course is the end of the 2nd week of classes.  An earlier course deadline to change the grading option may be imposed by the instructor, so be sure to carefully read WebSOC notes and the course syllabus.  A request to change a grading option AFTER the unique course deadline or the end of week 2 must be initiated using the on-line Enrollment Exceptions system, and will require review and approvals by the course instructor, the Dean of the School that is offering the course and the Dean of the School that houses your major.
Not doing well in a course is generally not considered a valid reason for a late request to change a grading option, so please plan carefully.
Bren School majors may take only the following Bren School courses for P/NP grade option:  ICS 90, ICS 93, ICS 139W (except CS majors), CS 190 or Informatics 190 (as long as the 190 will not apply toward degree requirements), ICS H197, CS or Informatics H198 (as long as the H198 will not apply toward degree/honors requirements), and CS or Informatics 199 (as long as the 199 will not apply toward degree requirements).
Students who are pursuing a minor in Biomedical Computing, Informatics, ICS and Statistics may take up to two courses with a P/NP grade option to satisfy their minor requirements.  Please keep in mind that taking too many classes as P/NP is not looked highly upon by graduate schools.



When/How/Where do I petition for an exception to policy?

The Bren School Student Affairs Office has a form entitled "Undergraduate Student Petition." 
You must complete this form to petition for a course substitution or waiver, to seek credit for major or general education courses taken at a college for which there is no articulation agreement, to waive the residence requirement, or when asking for an exception to an administrative decision, policy or deadline. 
In situations where an exception to degree requirements or policy is being requested, the Bren School counselors will inform you about the type of information and documentation that is needed, and will submit your completed request for review by the School’s Associate Dean for Student Affairs (ADSA). 



What are the requirements for part-time status and how do I apply?

You are eligible for part-time status if you meet one of these conditions:  working 30 or more hours a week (this requires documentation), have health problems, or have significant family responsibilities.  
In order to apply, please come into the ICS Student Affairs Office to fill out a part-time status form.  An academic counselor will review and discuss your request, and sign your form if approved. 
Signed part-time petitions must be processed by the Registrar's Office no later than Friday of the 3rd week of classes - there are no exceptions to this policy.



How does a "W" (Withdrawal) affect my GPA?

The "W" notation is placed on a student’s transcript when a course is dropped after the end of the sixth week. 
It is not computed in the GPA. Please note that a withdrawal is not commonly allowed by the Bren School and requires verifiable documentation.  See the section “Bren School Drop Policy and Deadlines” (above).



What does it mean to be on academic probation?

You are subject to probation any time your quarterly or cumulative GPA falls below 2.0. 
The Student Affairs Office will notify you of your probation status by email to your UCI account and U.S. mail to your permanent address, and will specify conditions that must be met to return to good academic standing (quarterly and cumulative GPAs above 2.0).  The conditions constitute a “contract” that outlines specific academic progress expectations and a timeframe by which you must return to good academic standing.   
Contact your Bren School academic counselor soon after your probation notification to ensure that your academic plan is reasonable and to learn about campus resources and success strategies that may be helpful. 
It is your responsibility to manage your UCI account and to read and respond to official messages from your academic counselors in a timely manner. Failure to follow through on the steps outlined in your probation letter may result in an administrative hold being placed on your record.



What does it mean to be "subject to disqualification"?

A student who fails to meet the conditions of an academic contract after two consecutive quarters, OR whose GPA falls below 1.5 for any quarter, will be notified that he/she is “subject to disqualification” (note:  this is a preliminary step in the review and decision-making process – it is NOT the same as being “formally disqualified”).  Official notification will be sent from the Bren School’s Associate Dean for Student Affairs to the student’s UCI email address and by certified letter to the student’s permanent address. 
The notification letter provides instructions for appealing the disqualification action. All students are strongly encouraged to appeal the disqualification by submitting a letter to the Associate Dean,adsa@ics.uci.edu.  This appeal letter should explain any unusual or extenuating circumstances that contributed to the student’s academic difficulties and detail the student’s plans and actions for effectively addressing these circumstances (including the use of campus resources).  The Associate Dean will carefully review the student’s appeal letter, transcript and academic file with the counselors before making a decision.  If the appeal is granted, the student will be held to an academic contract that outlines the expectations and timeframe for returning to good academic standing.  If the appeal is not granted, the student will be formally disqualified (this means dismissed from the major, the Bren School of ICS, and UC Irvine) and restricted from registering for courses or using university services after a stated date.  The Registrar’s Office will also be instructed to note the effective date of the disqualification on the student’s official transcript.  
The Associate Dean for Student Affairs is the chief academic officer for the Bren School of ICS; therefore, his decisions regarding disqualification appeals are FINAL. 



What is the readmission policy?

Readmission to UCI and the Bren School of ICS is NOT automatic.  
Please visit this link for more information about fees, procedures and deadlines.
The Readmission Application Form is available at Registrar's Office or the Bren School Student Affairs Office.  
Bren School Student Affairs Office requires additional documentation for consideration of readmission. 
All materials required for readmission petition must be submitted to the Bren School Student Affairs Office as a complete package. An academic counselor will attach a summary of previous course work and/or contract conditions for the Associate Dean’s consideration. 
Only UC-transferable courses (www.assist.org) will be considered when determining a student’s eligibility for readmission to one of the Bren School majors.
The Associate Dean for Student Affairs will consider the applicant’s number of completed units while at UCI, number of units remaining for completion of general education and degree requirements, grades for coursework taken at other institutions or through ACCESS UCI, and demonstrated readiness for the academic challenge of UCI coursework. 
A readmitted student who has not been enrolled at UCI for three or more consecutive quarters must adhere to the graduation requirements: (a) in effect for the quarter in which the student is readmitted; or (b) those subsequently established.
Readmission to the Bren School after voluntary withdrawal from UCI while in good standing:Readmission will be automatic if the student re-enrolls within one year and will otherwise be considered on a case by case basis. 
A readmission petition can be submitted at the same time as a withdrawal form is filed. 
If known, students should indicate their intended quarter of re-entry at the time of withdrawal.
Readmission to the Bren School after voluntary withdrawal from UCI while student is on Academic Probation:In certain situations, the Bren School may approve a student’s time-limited withdrawal if it becomes evident that doing so will prevent further damage to the student’s academic record. 
Conditions for readmission in this case would be discussed at the time of withdrawal; any academic contract conditions in place at the time of withdrawal would remain in effect upon the student’s return.
The UCI readmission application must be accompanied by:
1) A written statement no longer than 2 pages that details the reason(s) for leaving, the reason(s) for returning (including new or renewed interest/focus on Bren School major), and ways that previous or existing obstacles to academic progress have been addressed and will be addressed in the future.
2) An official transcript showing completion of at least 1 full-time quarter or semester of transferable courses in Computer Science or mathematics with a GPA satisfying the conditions specified in the student’s academic contract.
Readmission to the Bren School after academic disqualification:The Associate Dean will consider the number of units remaining towards breadth and major degree requirements. 
In general, a student applying for readmission will need to demonstrate that he/she can finish remaining coursework within a timeframe that does not violate university policies regarding excessive units (see Catalogue, “UCI Policy on Excessive Units” for more information). 
A student readmitted after academic disqualification will be held to the conditions of a two quarter contract specifying a course plan, unit maximum per quarter, GPA expectations, and mandatory advising sessions. 
Failure to meet the contract conditions for any of two quarters may lead to automatic disqualification.
The UCI readmission application must be accompanied by:
1) A written statement no longer than 2 pages that details the reason(s) for leaving, the reason(s) for returning (including new or renewed interest/focus on Bren School major), and ways that previous or existing obstacles to academic progress have been addressed and will be addressed in the future.
2) An official transcript showing completion of a minimum of one full-time academic year of courses taken through UCI Extension (ACCESS), a community college or another comparable institution. 
At least six of these courses must meet major requirements (includes math courses). 
The overall GPA for this year of work must be at least a 2.5. In some cases the requirement that a full year of coursework be completed elsewhere can be waived, if there is considerable evidence that the student is fully prepared to return to UCI full time.
3) If the student intends to petition for a Change of Major into or out of the Bren School upon readmission, he/she must submit a completed Change of Major form.
4) Students considering applying for readmission after academic disqualification are strongly encouraged to meet with an academic counselor well in advance of preparing their application.







More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/%7epeer/
##-----------------TITLE------------------------##

##------------------TEXT------------------------##

##------------------URL-------------------------##
http://computableplant.ics.uci.edu/models/index.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | Models | Links | Tutorials
  
  
  
    
      Models
            Activator Model (Jšnsson et al, Bioinformatics 21:i232, 2005)One-Dimensional Auxin Model (Jšnsson et al, PNAS 103(5):1633-8, 2006)
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/outreach.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific
        Inference Systems LaboratoryThe Computable Plant
        Home |
        Publications
        | Research
        | Gallery
        | People
        | Outreach
        | Software |
        Models
        | Links |
        Tutorials
  
  

  
  
      
            
            Educational Outreach Activities
            

            
            Grounding in Botany: Integrating Plants into the High
            School Science Classroom - June 22 through July 17
            2009 at the Huntington in San Marino, California
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/publications.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | Models | Links | Tutorials
  
  
  
    
      

            
              Publications
              
                Papers Posters Presentations
              
            
          
    
    
      
            Indicates research sponsored by NSF Award 0330786.

            
              Papers
            
            	(2009)
						Yosiphon G, Mjolsness E. Towards the Inference of Stochastic Biochemical 
						Network and Parameterized Grammar Models, Learning and Inference in Computational 
						Systems Biology (in press) [Download PDF
						Preprint]
						
						
						(2009)
            	   	Mjolsness E, Orendorff D, Chatelain P, Koumoutsakos P.
            	   	An Exact Accelerated Stochastic Simulation Algorithm.
            	   	Journal of Chemical Physics (in press) [ Download PDF Preprint ]
            	   	
            	   (2009)
            	   	Demidenko GV, Likhoshvai VA, Mudrov AV.
            	   	
            	   	On the Relationship Between Solutions of Delay
            	   	Differential Equations and Infinite-Dimensional Systems of Equations.
            	   	
            	   	Differential Equations, 45(1):33-45 (2009), translation of 
                     of original Russian Differentsial'nye Uravneniya,45(1):34-46 (2009).
            	   	[ Download PDF Preprint of English Translation ]
            	   	
            	   
            			
            			(2008) 
            			Hamant O, Heisler MG, Jonsson H, Krupinski P, Uyttewall M, Bokov P, Corson F, Sahlin P, Boudaoud A, Meyerowitz EM.
            			Developmental Patterning by Mechanical Signals in Arabidopsis.
            			Science, 322(5908):1650-1655; Journal Web Site
            			
            		           
            
            
            
     (2007) 
            Michniewicz M, Zago MK, Abas L, Weijers D, Schweighofer A, Meskiene I, 
            Heisler MG, Ohno C, Zhang J, Huang F, Schwab R, Weigel D, Meyerowitz EM, Luschnig C,
            Offringa R, Firiml J. 
            Antagonistic Regulation of PIN Phosphorylation by PP2A and PINOID Directs Auxin Flux
            Cell. 130: 1-13; View at Journal Web Page
            
            
            (2007) 
            Gordon SP, Heisler MG, Reddy GV, Ohno C, Das P, Meyerowitz EM
             Pattern formation during de novo assemply of the Arabidopsis shoot meristem, Development 134:3539-3548, doi:10.1242/dev.010298 Download PDF Preprint(2007) 
            Akberdin IR, Ozonov EA, Mironova VV, Omelyanchuk NA, Likhoshvai VA, Gorpinchenko DN, Kolchanov NA
            
           A cellular automaton to model the development
            of primary shoot meristems of arabidopsis thaliana, 
            J. Bioinf. Comp. Biol. 5(4): 1-10. Download PDF preprint
            

           (2007) 
           Nikolaev SV, Penenko AV, Lavreha VV, Mjolsness ED, Kolchanov NA
            A Model Study of the Role of Proteins CLV1, CLV2, CLV3, 
and WUS in Regulation of the Structure 
of the Shoot Apical Meristem,
Originally published in Russian, Ontogenez 2007, 38(6):457-462. Download PDF preprint
           
            
            (2007) 

            V. A. Likhoshvai VA, Omel'yanchuk NA, Mironova VV, Fadeev SI, Mjolsness ED and Kolchanov NA Mathematical Model of Auxin Distribution in the Plant Root  Russian Journal of Developmental Biology, 38(6):374-384; Original Russian Verison published in Ontogenez 38(6):446-456(2007). Download PDF
            
            (2007)  Heisler MG, Jönsson H Modeling meristem development in plants, Current Opinion in Plant Biology 10:92-97. Download PDF

             (2007) Kirouac M. Experience, Confidence, and Tools: The 'Grounding in Botany' Program.ASTC (Association of Science-Technology Centers) Dimensions, May/June 2007.
            
                (2007) Mjolsness E. On Cooperative Quasi-Equilibrium Models of Transcriptional Regulation. Journal of Bioinformatics and Computational Biology, (in press)Journal Web Site [Preprint Version as UCI TR ]

              
                (2007) Mjolsness E. Towards a Calculus of Biomolecular Complexes at Equilibrium Brief Bioinform 2007 8: 226-233; doi:10.1093/bib/bbm034 Journal Web Site [Preprint Version as UCI TR ]

              
            (2006) Mjolsness E, Yosiphon G Stochastic process semantics for dynamical grammars , Annals of Mathematics and Artificial Intelligence 47(3-4):329-395, August 2006. [Publishers Web Site | Preprint as UCI TR ]
            

                (2006) Mjolsness E. The Growth and Development of Some Recent Plant Models: A Viewpoint. Journal of Plant Growth Regulation, 25:270-277, DOI: 10.1007/s00344-006-0069-7, Publisher's Web Site.
              
                (2006) Heisler MG & Jönsson H, Modeling Auxin Transport and Plant Development. Journal of Plant Growth Regulation, 25:302-312, DOI: 10.1007/s00344-006-0066-x, Publisher's Web Site.

              
                (2006) Mjolsness E. Modeling transcriptional regulation with equilibrium molecular complex composition, 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 1, pp. 118-121. Download PDF
              
                (2006) Nikolaev SV, Fadeev SI, Kogai VV, Mjolsness E, Kolchanov NA. A one-dimensional model for the regulation of the size of the renewable zone in biological tissue, 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 2, pp. 213-217. Download pdf

              
                (2006) Nikolaev SV, Penenko AV, Belavskaya VV, Mjolsness E, Kolchanov NA. A system for simulation of 2D plant tissue growth and development, 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 2, pp. 218-22. Download pdf
              
                (2006) Omelianchuk NA, Mironova VV, Poplavsky AS, Pavlov KS, Savinskaya SA, Podkolodny NL, Mjolsness ED, Meyerowitz EM, Kolchanov NA. AGNS (Arabidopsis GenNet Supplementary Database), release 3.0, 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 2, pp. 223-226. Download pdf

              
                (2006) Ponomaryov D, Omelianchuk N, Kolchanov N, Mjolsness E, Meyerowitz E. Semantically rich ontology of anatomical structure and development for arabidopsis thaliana l. , 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 2, pp. 227-230. Download pdf
              
                (2006) Ponomaryov D, Omelianchuk N, Mironova V, Kolchanov N, Mjolsness E, Meyerowitz E. A program method of constructing ontology of phenotypic abnormalities for arabidopsis thaliana., 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 2, pp. 231-234. Download pdf

              
                (2006) Podkolodny NL, Podkolodnaya NN, Miginsky DS, Poplavsky AS, Likhoshvai VA, Compani B, Mjolsness E. An integration of the descriptions of gene networks and their models presented in Sigmoid (Cellerator) and GeneNet, 5th International Conference on the Bioinformatics of Genome Regulation and Function (BGRS-2006), Volume 3, pp. 86-90. Download pdf
              
                (2006) Bhan, A. and Mjolsness, E. Static and Dynamic Models of Biological Networks. Complexity
                11(6): 57-63. Download from Journal Website
                

              
                (2006) Jönsson H, Heisler M, Shapiro BE, Meyerowitz EM, Mjolsness ED. An Auxin-driven polarized transport model for phyllotaxis. Proc. Natl. Acad. Sci., U.S.A., 103(5):1633-1638.
             
                [ Abstract & Full Paper from Publisher

                 | 
                Supplementary Information at Publisher's Web Site
                 |
                Additional Supplementary Informaton]
              
                (2006) Mjolsness, E. Stochastic Process Semantics for Dynamical Grammer Syntax: An Overview. 9th International Symposium on Artificial Intelligence and Mathematics, Jan 2006. [Preprint from arXiv.org]

              
                (2006) Fadeev SI, Nikolaev SV, Kogay VV, Mjolsness E, Kolchanov NA. [Analysis of a one-dimensional model for the regulation of the size of the renewable zone in biological tissue (in Russian)], Computational Technologies 11(2) [ Publisher's Web Site | Partial English Translation]

              
                (2006) Demidenko GV, Likhoshvai VA, Khropova Yu.E. On one class of systems of differential equations and on retarded systems, Siberian Mathematical Journal, 47(1):58-68. [ Abstract/Paper ]
              
                (2006) Demidenko GV, Likhoshvai VA. On Differential Equations with Retarded Argument, Siberian Mathematical Journal , 46(3):417-430. [ Abstract/Paper ]
              

                (2006) Gor V, Shapiro BE, Jönsson H, Heisler M, Reddy GV,Meyerowitz EM, Mjolsness E A Software Architecture for Developmental Modeling in Plants: The Computable Plant Project. In: Bioinformatics of Genome Regulation and Structure II,(Eds. N.Kolchanov, R. Hofestaedt, L. Milanesi) Springer, pp. 345-354.  [ Abstract | Preprint ]

              
                (2006)  Omelyanchuk N, Mironova V, Poplavsky A, Podkoldny N, Kolchanov N, Mjolsness E, Meyerowitz E AGNS-A Database on expression of Arabidopsis Genes. In: Bioinformatics of Genome Regulation and Structure II (Eds. N.Kolchanov, R. Hofestaedt, L. Milanesi) Springer. 
              

                (2005)   Venugopala Reddy G, Meyerowitz EM. Stem-Cell Homeostasis Growth Dynamics can be Uncoupled in the Arabidopsis Shoot Apex. Science 310(5748):663-667. [ Abstract or paper at publisher's web site. | Pubmed ]

              
                (2005) Heisler M.G., Ohno, C., Das, P., Sieber, P., Reddy, G.V., Long, J.A., and Meyerowitz, E.M. Patterns of Auxin Transport and Gene Expression during Primordium Development Revealed by Live Imaging of the Arabidopsis Inflorescence Meristem. Curr. Biol. 15:1899-1911. [ Full Paper | Pubmed ]

              
                (2005) Jönsson H, Heisler M, Reddy GV, Agrawal V, Gor V, Shapiro BE, Mjolsness E, and Meyerowitz E.M. Modeling the organization of the WUSCHEL expression domain in the shoot apical meristem. Bioinformatics 21(S1): i232-i240.[ View Abstract or Paper at Publisher's Web Site. | Supplementary Material ]

              
                (2005) Gor V. Bacarian T, Elowitz M, Mjolsness E. Tracking Cell Signlas in Fluorescent Images. Workshop on Computer Vision in Bioinformatics, IEEE CVPR Annual Meeting, 2005 [ Abstract | Paper ]

              
                (2004) Reddy, G.V., Heisler, M.G., Ehrhardt, D.W. and Meyerowitz, E.M. Real-time analysis reveals oriented cell divisions associated with morphogenesis at the shoot apex of Arabidopsis thaliana. Development 131:4225-4237 [ View abstract or full paper at publiser's web site]
              
                (2004) Gor V, Shapiro BE, Jönsson H, Heisler M, Venugopala Reddy G, Meyerowitz EM, Mjolsness E, A Software Architecture for Developmental Modeling in Plants: The Computable Plant Project, presented at the 4th International Conference on Bioinformatics of Genome Regulation and Structure (BGRS-2004), Novosibirsk, Russia, July 2004. [ Abstract | Preprint ].
              
            
                (2004)  Jönsson, H., Shapiro, B.E., Meyerowitz, E.M., and Mjolsness, E. Modeling plant development with gene regulation networks including signaling and cell division. in Bioinformatics of Genome Regulation and Structure, eds R. Hofestaedt and N. Kolchanov, Kluwer Publications, pp 311-318. [ Abstract ]

              
                (2003)  Jönsson, H., Shapiro, B.E., Meyerowitz, E.M. and Mjolsness, E. Signaling in Multicellular Models of Plant Development. In S. Kumar and P.J. Bentley (Eds.) On Growth, Form, and Computers, Academic Press, London, UK, pages 156-161. [ Abstract |Publisher's Web Site ]

              
                (2003)  Shapiro, B.E., Levchenko, A., Meyerowitz, E.M., Wold, B.J., and Mjolsness, E.D. Cellerator: extending a computer algebra system to include biochemical arrows for signal transduction simulations. Bioinformatics, 19(5):677-678. [View Abstract or Paper at Publisher's Web Site]
              
                (2003)  M. Hucka, A. Finney, H. M. Sauro, H. Bolouri, J. C. Doyle, H. Kitano , A. P. Arkin , B. J. Bornstein, D. Bray, A. Cornish-Bowden, A. A. Cuellar, S. Dronov, E. D. Gilles, M. Ginkel, V. Gor, I. I. Goryanin, W. J. Hedley, T. C. Hodgman, J.-H. Hofmey, P. J. Hunter, N. S. Juty, J. L. Kasberger, A. Kremling, U. Kummer, N. Le Nov` ere, L. M. Loew, D. Lucio , P. Mendes, E. Minch, E. D. Mjolsness, Y. Nakayama, M. R. Nelson, P. F. Nielsen, T. Sakurada, J. C. Schaff , B. E. Shapiro, T. S. Shimizu, H. D. Spence, J. Stelling. The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models. Bioinformatics Vol 19, no 4, 2003 pp 524-531.[View Abstract or Paper at Publisher's Web Site]
              

                (2002)  Mjolsness E, Jönsson H, Shapiro BE, Meyerowitz EM. Modeling plant development with gene regulation networks including signaling and cell division. Paper presented at the Third International Conference on Bioinformatics of Genome Regulation and Structure (BGRS 2002), Novosibirsk, Russia, July 14-20, 2002. [ Abstract | Paper | Conference Proceedings ].

              
                (2002)  Shapiro BE, Levchenko A, Mjolsness E. Automatic Model Generation for Signal Transduction with Applications to Map Kinase Pathways. In: Foundations of Systems Biology, H. Kitano, ed, MIT Press, pages 145-162) ISBN 0-262-11266-3 [Publisher's web site].
              
                (2001)  Shapiro BE, Mjolsness ED. Developmental Simulations with Cellerator. Paper presented at the Second International Conference on Systems Biology, Pasadena, CA, Novemeber 2001. [Download Preprint | On-line proceedings at conference web site.]
              
                (1991)  Mjolsness E, Sharp DH, Reinitz J. A connectionist model of development. Journal of Theoretical Biology 152: 429-453. [Download pdf].
              Go to top of Page

            
            
              Posters
            
            
                (2005) Sadovsky AV, Heisler MG, Meyerowitz EM, Campilho A, Mjolsness E, Baldi PF. Biostatistics of Arabidopsis thaliana: 1-dimensional Mathematical Models of the Growing Root. International Conference on Systems Biology (ICSB-2005), Boston, MA, USA, Oct. 19-24, 2005. [ Abstract | Dowload Poster ]

              
                (2005) Shapiro BE, Agrawal V, Gor V, Heisler M, Jönsson H, Meyerowitz EM, Mjolsness E, Reddy GV, A Computational Modeling Framework for the Arabidopsis Shoot Apical Meristem. Plant Biology 2005, Annual Meeting of the American Society of Plant Biologists, Seattle, WA USA, 16-20 July 2005. [ View Abstract (pdf) | View Poster ]

              
                (2004)  Agrawal V, Gor V, Heisler M, Jönnson H, Meyerowitz EM, Mjolsness E, Reddy GV, Sadovsky A, Shapiro BE, Developmental Modeling of the Arabidopsis Shoot Apical Meristem. 44th Annual Meeting of the American Society for Cell Biology, Washington, DC, USA, Dec 4-8, 2004. [Author order listed as printed on poster]
                
                View abstract (pdf) (Molecular Biology of the Cell, 15(Supplement):315A, November, 2004, Abstract Number 1204)
                

                Download: Poster (gif 1.2MB) or Poster (pdf 22MB) or Visit ASCB Web Site.
              
                (2004) Mjolsness E, The Computable Plant: Software and Science, Caltech Biology Division Annual Retreat, Redondo Beach, CA, October 16, 2004.

              
                (2004) Jönsson H, Heisler M, Shapiro BE, Gor V, Venugopala Reddy G, Meyerowitz EM, Mjolsness M, Modeling and in vivo live imaging of the Arabidopsis shoot apical meristem. Presented at the 15th International Conference on Arabidopsis Research, Berlin, Germany, July 11-14, 2004.View Abstract (html) | View Conference Web Site
              
                (2004) Jönsson H, Shapiro BE, Gor V, Heisler M, Venugopala Reddy G, Meyerowitz EM, Mjolsness E, A Multicellular Model of a Feedback Network Regulating Spatial Gene Expression Domains in the Shoot Apical Meristem. Presented at: the 5th International Conference on Systems Biology (ICSB-2004), October 9-13, 2004, Heidelberg, Germany. View Abstract (pdf) | Poster (A4, PDF) | View Conference Web Site.

              
                (2004)Mjolsness E, Shapiro BE, Gor V, Jönsson H, Venugopala Reddy G, Heisler M, Meyerowitz EM.The Computable Plant: A Software Architecture for Developmental Modeling in Plants. Pacific Symposium on Biocomputing, Kona Coast, Hawaii, USA.  Download pdf of complete poster.
              
            
                (2003) Jönsson H, Heisler M, Venugopala Reddy G, Meyerowitz EM, Mjolsness.Inferring gene regulatory network models for plant stem cell regulation. International Conference on Systems Biology, St. Louis, MO, USA. Download pdf of poster.
              
                (2002) Jönsson H, Shapiro BE, Meyerowitz EM, Mjolsness E. Signaling in Multicellular Models of Plant Development. International Conference on Systems Biology, Stockholm, Sweden.  Download pdf of poster.

              
                (2001) Shapiro BE, Mjolsness ED. Developmental Simulations with Cellerator. International Conference on Systems Biology, Pasadena, CA, USA. Download pdf of poster.
              

            
              Presentations
            
            
            
                (2006) Burl M, Roeder A, Ohno C, Mjolsness E, Meyerowitz E Automatic Extraction of 3D Nuclear Bounding Surfaces from CLSM Imagery of Developing Arabidopsis Flowers, 2006 Workshop on Multiscale Biological Imaging, Data Mining and Bioinformatics. University of California, Santa Barbara, CA, USA, Sept 7-8, 2006. Download Abstract

              
                (2006) Bacarian T, Heisler M, Schoetz EM, Mjolsness E Calculating Derivative Displacement Fields from Confocal Fluorescence Microscopy Data. 2006 Workshop on Multiscale Biological Imaging, Data Mining and Bioinformatics. University of California, Santa Barbara, CA, USA, Sept 7-8, 2006. Download Abstract
              
                (2005) Meyerowitz EM, Reddy V, Heisler M, Jönsson H, Shapiro B, Mjolsness E. Dynamics Genetics: A New View of Plant Growth, Invited Talk. Society for Developmental Biology, Annual Meeting, San Franscisco, CA USA, 27 July - 1 Aug 2005. View Abstract

              
                (2005) Mjolsness E, Bacarian T, Baldi P, Gor V, Heisler M, Jönsson H, Reddy V, Sadovsky A, Shapiro B, Meyerowitz E, Computational modeling and image processing approaches to understanding the dynamics of the Arabidopsis thaliana shoot apical meristem. International Botanical Conference, Vienna, AUSTRIA, 17-23 July 2005.View Abstract
              

                (2005) Meyerowitz E, Reddy V, Heisler M, Jönsson H, Shapiro B, Mjolsness E,Dynamic Genetics: Experimental and Computational Approaches to the Arabidopsis Shoot Apical Meristem International Botanical Conference, Vienna, AUSTRIA, 17-23 July 2005. View Abstract
              
                (2005) Shapiro BE, Agrawal V, Gor V, Heisler M, Jönsson H, Meyerowitz EM, Mjolsness E, Reddy GV, A Computational Modeling Framework for the Arabidopsis Shoot Apical Meristem. Minisymposium Presentation. Plant Biology 2005, Annual Meeting of the American Society of Plant Biologists, Seattle, WA USA, 16-20 July 2005.View Abstract (pdf)

              
                (2005) Mjolsness E, Physics-inspired models of regulatory networks for cellular and developmental biology, Invited seminar, Center for Theoretical Biological Physics (CTBP) in San Diego, a joint effort between research groups at UCSD, the Salk Institute, the Scripps Research Institute and the San Diego Supercomputer Center, USA, 20 May 2005.
              

                (2005) Mjolsness E, Image understanding and modeling for biological development: the case of a plant shoot meristem, Invited keynote, Eighth Workshop on Mining Scientific and Engineering Datasets, in conjunction with the Fifth SIAM International Conference on Data Mining (SDM 2005), Newport Beach, CA, USA. Apr 23, 2005.[ View Abstract (html) ]
              
                (2005) Shapiro BE, Agrawal V, Gor V, Heisler M, Jönsson H, Meyerowitz EM, Mjolsness E, Reddy GV, Developmental Modeling of the Arabidopsis Shoot Apical Meristem by the Computable Plant Project. Invited Keynote. 35th Biological Systems Simulation Conference, US Water Conservation Laboratory, Agriculture Research Service, Phoenix, AZ USA 19-21 April 2005.View Abstract (pdf)

              
                (2005) Mjolsness E, Modeling and image understanding for biological development: the case of a plant shoot meristem. Presented at Cambridge University,UK, 29 March 2005.[ View Abstract (pdf) ]
              

                (2005) Mjolsness E, Some Mathematical Problems in Computational Systems Biology, Invited Speaker, Applied Mathematics Seminar, University of California, Irvine, CA, USA, 14 March 2005, and Invited Speaker, ETH (Eidgenössische Technische Hochschule, Swiss Federal Institute of Technology), Zurich, SWITZERLAND, July 14, 2005.

              
                (2005) Mjolsness E, Measuring and modeling the growth of a plant shoot apical meristem, 24th Annual Dynamics Days Conference, Long Beach, CA, USA, 8 January 2005. [ View Abstract (html)]
              

                (2004) Jönsson H, Heisler M, Shapiro BE, Gor V, Venugopala Reddy G, Meyerowitz EM, Mjolsness M, Modeling and in vivo live imaging of the Arabidopsis shoot apical meristem. Presented at the 15th International Conference on Arabidopsis Research, Berlin, Germany, July 11-14, 2004.View Abstract (html) | View Conference Web Site
              
                (2004) Shapiro BE, Mjolsness E, Meyerowitz EM, The Computable Plant: A Mathematical Framework for Developmental Modeling in Plants. Presented at the 2004 SIAM Conference on Life Sciences, Portland, Oregon, USA, July 11-14, 2004. View Abstract (pdf) | Download Presentation (ppt.zip) | View Conference Web Site.

              
            
                (2004) Shapiro BE, Using Computer Algebra for Developmental Modeling: Introduction to Signal Transduction, Cellerator, and the Computable Plant, Invited Presentation, Winter School on Complex Systems in Systems Biology and Computer Science (CSSB-2004), Rovereto Italy, University of Trento, 17-24 April 2004. Presentation Web Site or School Web Site.
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/tut.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | Models | Links | Tutorials







	

		References and Tutorials
		




	

				
				Systems Biology
				
				Collections and Textbooks
				Alon, Uri (2006) An Introduction to Systems Biology: Design Principles of Biological Circuits. CRC.Bower, James and Bolouri, Hamid, ed.  (2001) Computational Modeling of genetic and biochemical networks. MIT Press. Kitano, Hiroaki, ed.  (2001) Foundations of systems biology. MIT Press. Klipp, Edda, et. al. (2005) Systems biology in Practice: Concepts, Implementation, and Application. Wiley.
					Kriete, Andres, ed. (2006) Computational Systems Biology. Academic.Palsson, Bernhard (2006) Systems Biology: Properties of Reconstructed Networks. Cambridge University Press.Szallasi, Zoltan, Jörg Stelling and Vipul Periwal (2006) System Modeling in Cellular Biology. MIT Press.Wilkinson, Darren J. (2006) Stochastic Modeling for Systems Biology. CRC Press.

				Papers
				Kitano, Hiroaki (2002) Computational Systems Biology. Nature, 420:206-210.
				
				Plants and Meristems
				
				Texts	
				Taiz, Lincoln and Eduardo Zeiger (1998) Plant Physiogy, 2nd Edition. Sinauer.
				Papers	
				Fletcher, Jennifer C and Elliot M. Meyerowitz (2000) Cell signaling within the shoot apical meristem, Current Opinion in Plant Biology, 3:23-30.Meyerowitz, Elliot M (1997) Genetic control of cell division patterns in developing plants, Cell, 88:299-308.

				
				Biochemical Kinetics
				
				Texts	
				Cantor, Charles R and Schimmel, Paul R (1980) Biophysical Chemistry, Part III: The behavior of biological macromolecules .  W.H. Freeman. Cornish-Bowden, Athel (1995) Fundamentals of Enzyme Kinetics, Portland Press, London. Segal, Lee (ed) (1991) Biological kinetics ,  Cambridge University Press. Segel, Irwin (1993), Enzyme Kinetics: Behavior and Analysis of Rapid Equilibrium and Steady-State Enzyme System , Wiley 
				


				
				Computational/Mathematical Biology
				
				Texts	
				Britton, Nicholas F.  (2003) Essential Mathematical Biology. Springer-Verlag. Edelstein-Keshet, Leah  (1988) Mathematical models in biology. Random House. Ellner, Stephen P. and John Guckenhiemer (2006) Dynamic Models in Biology. Princeton Unverisity Press.
					Fall, Christopher W, Marland, Eric S, Wagner, John M, and Tyson, John D (2002) Computational cell biology. Springer-Verlag.Keener, James and Sneyd, James (1998) Mathematical physiology.  Springer-Verlag. Murray, James D. (1989) Mathematial biology , Springer-Verlag. 

				Papers	
				Mjolsness, Eric, David H Sharp and John Reinitz (1991) A connectionist model of development, Journal of Theoretical Biology, 152:429-453.
				Go to top of Page
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/links.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | Models | Links | Tutorials
  
  
  
    
      Links
    
    
      
            
              Software
            
            Computational MorphodynamicsxCellerator biological model generation system.SIGMOID pathway modeling database project.Systems Biology Software Page.SBML - Systems Biology Markup LanguageMathSBML
            
              Databases
            
            AGNSdb - Arabidopsis Gene Net Supplementary DatabaseTAIR - The Arabidopsis Information ResourceArabidopsis Sequences at TIGRThe Gene Ontology ConsortiumKEGG - The Kyoto Encyclopedia of Genes and GenomesBRENDA - Comprehensive Enzyme Information SystemThe EMP ProjectENTREZ
            
              Research Groups and Institutions
            
            Institute for Genomics and Bioinformatics, University of California, IrvineWold Laboratory, California Institute of TechnologyMeyerowitz Laboratory, California Institute of TechnologySignal Transduction and Cell-Cell Communication Laboratory, Johns Hopkins UniversityCenter for Cell Mimetic Space Exploration, University of California, Los AngelesGo to top of Page
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/gallery/gallery.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | 
Models | 
        
        Links | Tutorials
  
  
  
    
      Gallery
          Movies | Pictures | Legend
          
          Your browser is not compatible. You must have an frames compatible browser such as Camino Version 1.0; Firefox 1.5; Netscape 7; Internet Explorer 5; or Safari.
          
You must have a inline frames compatible browser to display this web page.
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/research.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | Models | Links | Tutorials
  
  

  
    
      Research

      
            
                Annual Report, 2004 (pdf)
              
                Annual Report, 2005 (pdf)
              
                Annual Report, 2006 (pdf)
              
                Annual Report, 2007 (pdf)
              
                Annual Report, 2008 (pdf)
              
          Confocal laser scanning microscope setup dedicated to plant developmental imaging in the Meyerowitz
          laboratory at Caltech, immediately after installation (photo taken 4/26/04). This is a centerpiece and a
          major investment of the FIBR Computable Plant project and is now producing useful imagery.
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/people.html
##-----------------TITLE------------------------##
The Computable Plant
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome | Publications | Research | Gallery | People | Outreach | Software | Models | Links | Tutorials
    
      People

    
  
  
  
    
      
            

              Principal Investigators
            
            Eric Mjolsness
                Asociate Professor of Information and Computer Science
                414 B Computer Science Building

                University of California, Irvine 92697-3425
                email: emj at uci dot edu
                phone: 949 824 3533 / fax: 949 824 4056.

            
            
            Elliot M. Meyerowitz
                George W. Beadle Professor of Biology and

                Chair, Division of Biology
                California Institute of Technology
                M/C 156-29
                Pasadena, CA 91125 USA
                phone: 626 395 4951
                email: meyerow at caltech dot edu
            
              Team Members
            
            Pierre Baldi
                Professor, School of Information and Computer Science (ICS) and
                Department of Biological Chemistry, College of Medicine and
                Director, Institute for Genomics and Bioinformatics (IGB)

                424C Computer Science Building
                University of California, Irvine, 92697-3425, USA
                phone: 949 824 5809
                fax: 949 824 9813
                email: pfbaldi at icis dot uci dot edu
            
            James Folsom Director, Huntington Botanical Gardens

                1151 Oxford Road
                San Marino, CA 91108
                tel: 626 405 2100
            

            Nikolay Kolchanov
                Deputy Directgor, Institute of Cytology and Genetics
                Russian Academy of Sciences, Siberian Branch

                Prospect Lavrenyieva 10
                Novosibirsk, 630090, Russia
                tel: +7 3832 222468 fax: +7 3832 331278 email: kol at bbionet dot nsc dot ru
            

            Bruce E. Shapiro
                Co-Director, Biological Network Modeling Center
                The Beckman Institute at Caltech
                Visiting Associate in Biology

                California Institute of Technology
                Mail Code 139-74, 1200 East California Blvd
                Pasadena CA 91125-7400 USA
                tel: +1.626.395.8161
                email: bshapiro at caltech dot edu
            
            
                  Henrik Jönsson

                  Department of Theoretical Physics
                  Complex Systems Division
                  Lund University
                  Solvegatan 14A, 223 62 Lund, Sweden
                  email: henrik at thep dot lu dot se tel: +46 46 222 3492
                  Supported in part by the Knut and Alice Wallenberg Foundation through Swegene.

                
            
            
 
            Marcus Heisler
                Senior Research Associate in Biology
                California Institute of Technology
                1200 East California Blvd
                Pasadena, California 91125 USA

                email: mheisler at caltech dot edu
                tel: 626 3956895
            
            
            Adrienne Roeder
                Division of Biology
                California Institute of Technology
                1200 East California Blvd
                Pasadena, California 91125 USA

                email: aroeder at caltech dot edu
                tel: 626 3956895
            
            
          
                     Vijay S. Chickarmane
                Division of Biology
                California Institute of Technology
                1200 East California Blvd
                Pasadena, California 91125 USA
                email: vchickar at caltech dot edu

                tel: 626 3956895
            
            
          
          Sean Gordon
                Division of Biology
                California Institute of Technology
                1200 East California Blvd
                Pasadena, California 91125 USA

                email: seang at caltech dot edu
                tel: 626 3956895
            
            Victoria Gor, Senior Researcher
                Machine Learning Systems Group
                Jet Propulsion Laboratory
                California Institute of Technology
                Mail Stop 126-347, 4800 Oak Grove Drive

                Pasadena, CA 91109 USA
                tel: 818 393 5350; fax: 818 393 5244
                email: victoria dot gor at jpl dot nasa dot gov
            

            Alex Sadovsky
                Postdoctoral Scholar
                Genomics & Bioinformatics

                University of California, Irvine
                Irvine, CA 92697-3445
                Tel: 1.949.824.5375
                Fax 1.949.824.9813
                email: sadovsky at math dot uci dot edu
            
            Tigran Bacarian
                Postgraduate Researcher

                Genomics & Bioinformatics
                University of California, Irvine
                Irvine, CA 92697-3445
                Tel:
                Fax 1.949.824.9813

                email:tbacaria at uci dot edu
            
            
            

             Pavel Krupins
                Postgraduate Researcher
                Genomics & Bioinformatics

                University of California, Irvine
                Irvine, CA 92697-3445
              
                email:pkrupins at uci dot edu
 Alexey Vorobyov
                Research Programmer
                Genomics & Bioinformatics
                University of California, Irvine

       
                email:alexey dot vorobyov at uci dot edu

            
            Elaine Wong
                Department of Mathematics
                University of California, Irvine
                Irvine, CA 92697-3875
                email:wongey at uci dot edu
            
            Fang Fang
                Information and Computer Science

                University of California, Irvine
                Irvine, CA 92697-3445
                email:ffang at ics dot uci dot edu
            

              Former Team Members
            
               
                 G. Venugopala Reddy
                Assistant Professor
                Department of Botany and Plant Sciences
                5483 Boyce Hall
                University of California, 
                Riverside, CA 92521-0124
                email: venug at ucr.edu

                tel: 951 827 3482
 
               Vikas Agrawal
                Currently at Intel Corp.
                
            
            
            Go to top of Page
##------------------URL-------------------------##
http://computableplant.ics.uci.edu/sw.html
##-----------------TITLE------------------------##
Computable Plant Software
##------------------TEXT------------------------##
Scientific Inference Systems LaboratoryThe Computable PlantHome
          | Publications
          | Research
          | 
          Gallery | People
          | Outreach
          | Software
          | Models
          | Links
          | Tutorials
  
  

  
  
      
            Software and Documentation
            

              Image Analysis

              
                SegTrack*† - segmenting and tracking
                matlab function library
                SASSIGN*† - tracking software based
                on softassign matching algorithmCostanza†
                - Confocal Stack Analyzer Application, plugin for
                ImageJCLSM
                Tools*† - nuclear segmentation and
                lineage analysis

              Modeling, Simulation, and Analysis

              xCellerator*† - ODE Based Modeling in MathematicaERLeap*† - Stochastic Simulation (Exact Reaction Leaping)SSA*†- Stochastic Simulation (Gillespie Algorithm) in MathematicaLDSA
                - Lam-Delosme Simulated Annealing in
                MathematicaOrganism†
                - ODE based simulation in C++mPower*†
                - Mathematica wrapper for computational geometry using qhullCellzilla*†
                - Static multicellular modeling using Voronoi in Mathematica
                PhasePlot*† - Phase portraits in MathematicaPPM - Particle Particle Mesh Library - meshing and simulation library of continuous and discrete systems using particle-mesh methods.
                Tissue3D*† - Mathematica package for
                compartmental modelingCellerator† - an
                earlier version of xCelleratorkMech†
                - Cellerator plugin for enzyme kineteicsMathSBML†
                - SBML reader and simulator in MathematicaSigmoid†
                - Model database and simulation package (uses
                Cellerator)

              Stochastic Grammars and Model Description
              Tools

              
                Plenum*† Interpreter for
                Stochastic/Dynamical Grammars
                Plenum Model Collection*† 
                SBML Level 3 Proposal: Dynamic
                Arrays*†

              †Indicates
              tools developed by or in collaboration with the
              Computable Plant project.
              *Indicates Partially or fully funded by
              NSF Award 0330786.

              Cambium Intermediate Process
              Language
    
              
 		 TR (Download)
	  	
                 Cellerator
                
                 Plenum
                
                 Organism
                

              
              Other Useful Software Links:

              List
                of Finite Element PackagesList
                of Image Analysis Software ApplicationsCSELab Tools - Software tools from the Computational
                Science and Engineering Laboratory at ETH Zurich.Computing Frameworks:

              SAGE
                Open Source Math Project (Mathematica/Matlab/Maple
                Alternative)Pyre
                Caltech Center for Advanced Computing
                ResourcesPeach
                Caltech Jensen LabSystems Biology
                Workbench (SBW)Systems Biology
                Markup Language - SBMLComputational Geometry:

              CGALQhull
                Libraryregtet/pwrvtx

           revised Mon Jun  1 13:20:03 2009   
			  
##------------------URL-------------------------##
http://cgvw.ics.uci.edu/category/in-the-news/page/2/
##-----------------TITLE------------------------##
In the News – Page 2 – Center for Computer Games & Virtual Worlds
##------------------TEXT------------------------##
Skip to content

		
			
				
											Center for Computer Games & Virtual Worlds
											Bren School of ICS | UC Irvine
									

							

					

		

	
		

		
			
				Category: In the News			

			

	
		
		Studying Computer Games Is No Waste	

	
	
	
		Jim White | Feb 01, 2011 | Comments 1
“Most people have to work for a living; others get to play video games.” That is what United States Senator Tom Coburn, M.D. (R-OK) said about research at UC Irvine’s Center for Computer Games and Virtual Worlds in the Donald Bren School of Information and Computer Science.
The Center for Computer Games and Virtual Worlds is truly interdisciplinary, as befits a research area having broad social impact, with faculty not just from the fields of informatics and computer science but also humanities, law, education, art and anthropology. So it would be fair to say they do a whole lot more than just play video games there.
But last December, Coburn published “Wastebook 2010: A Guide to Some of the Most Wasteful Government Spending of 2010” through his taxpayer-funded senatorial office.  In it, he ranked as No. 6 (out of 100 government-funded projects) work by UCI Professor Bonnie Nardi, Senior Research Scientist Walt Scacchi and 21 other researchers, for which they received a three-year, $3 million grant from the National Science Foundation in 2008.
 Continue reading “Studying Computer Games Is No Waste”
	

	
		Author  venitaPosted on February 15, 2011September 27, 2012Categories In the News			



	
		
		OC Weekly : game on	

	
	
	
		
UC Irvine’s New Computer-Games Major Gets Its Game On
The school is banking big on computer games as an emerging discipline
By MICHELLE WOO Thursday, Dec 9 2010


Open House Night remains a standard of American higher education, an opportunity for colleges and universities to convince prospective students and skeptical parents why their institutions are the best, why the parents should spend the next four to five years scrounging to pay tens of thousands of dollars in tuition, why the student must enroll in that program and ignore the competition. Administrators and professors pull out all the proverbial stops to impress recruits, from spending thousands on glossy packets to name-dropping prominent alumni to offering tours of grandiose campus architecture and boasting about the assured millions in salary that will inevitably come after graduation.
But for UC Irvine’s computer-game-science major, the pitch is simple: computer screens. With computer games loaded onto them. There they are—take them.
 Continue reading “OC Weekly : game on”
	

	
		Author  venitaPosted on January 11, 2011September 27, 2012Categories In the News			



	
		
		Navarro, Van der Hoek win Premier Award for SimSE	

	
	
	
		Project scientist Emily Navarro and Associate Dean André van der Hoek have been recognized with the 2009 Premier Award for SimSE, a game-based educational software engineering simulation environment that allows students to practice “virtual” software engineering processes in a graphical, interactive and fun setting.
SimSE’s direct, graphical feedback enables students to learn the complex cause and effect relationships underlying software engineering processes. During the game, the student takes on the role of the project manager and directs engineers to perform typical process tasks.
SimSE helps bridge the gap between the conceptual knowledge about software engineering that is presented in lecture but that      often times is not fully explored or practiced in assignments or projects.
 Continue reading “Navarro, Van der Hoek win Premier Award for SimSE”
	

	
		Author  adminPosted on November 30, 2009November 30, 2009Categories In the NewsTags van der hoek, emily navarro, simse, premier award			



	
		
		From the New York Times	

	
	
	
		New York Times, November 30, 2009
UCI mentioned:
This fall, the University of California, Irvine is set to begin a four
year undergraduate program in “game science.”
	

	
		Author  adminPosted on November 30, 2009November 30, 2009Categories In the NewsTags latimes, New York Times, nyt			



	
		
		The California Report	

	
	
	
		Public Radio’s The California Report on Computer Game Science.
Click here for MP3.
	

	
		Author  adminPosted on November 30, 2009November 30, 2009Categories In the News			



	
		
		LA Times: UC Irvine takes video games to the next level	

	
	
	
		
By Tony Barboza,
November 30, 2009
UC Irvine has long sought to be known for preeminence in fields such as engineering, medicine and business. But now the university is embracing a new discipline: video games.
Once ridiculed within university halls as merely a nerdy pastime, computer games are being promoted to a full-fledged academic program at the Irvine campus, a medium as ripe for study as the formats before it: film, radio and television.
This fall UC Irvine established the Center for Computer Games & Virtual Worlds, and construction is underway on a 4,000-square-foot, 20-room “Cyber-Interaction Observatory” for faculty research. Plans call for floor-to-ceiling projection screens, 3-D stereoscopic displays and gesture-based interfaces.
If all goes according to plan, next fall UC Irvine will debut a four-year undergraduate program allowing students to declare “game science” as their major — an idea that drew snickers when a few professors first proposed it a decade ago.
“There are people who will say we’re pandering to a trend,” said Dan Frost, an informatics lecturer who teaches a popular computer game development course. “But this really is intellectually justified. Universities are always doing things that seem crazy at first.”
It’s a fitting development for a campus where some students are so gaga for gaming that they spend sleepless nights writing code for their homespun games and like to unwind with pizza-fueled Street Fighter tournaments and Rock Band contests. Continue reading “LA Times: UC Irvine takes video games to the next level”
	

	
		Author  adminPosted on November 30, 2009November 30, 2009Categories In the NewsTags LA Times, latimes			



	
		
		Lopes speaks at Intel CTO  keynote address	

	
	
	
		Cristina Lopes, Associate Professor of Informatics participated as a guest speaker in the keynote address at SuperComputing ’09 in Portland Oregon.  The Keynote was delivered by Justin Rattner, CTO of Intel.  Lopes was a guest at Rattner’s keynote, in her role as one of the main architects of OpenSim.
Justin Rattner’s opening keynote address at SuperComputing’09 message addressed how the super-computing industry has stagnated, and the only thing that will save it from collapse is a drastic change on what people think of as “super-computing.” Other guests were Aaron Duffy, a biology researcher at Utah State University, and Shenlei Winkler, CEO of the Fashion Design Institute.
Lopes’ research is related to languages and communication systems. The ultimate goal of her research is to deepen the knowledge about communication, in particular in systems that involve humans and machines. With this utopic goal in mind, she has done work in a variety of fields such as programming languages, security and applications of audio signal processing.
	

	
		Author  adminPosted on November 23, 2009November 23, 2009Categories In the News			



	
		
		UCI students could soon major in video games	

	
	
	
		The Orange County Register’s Ian Hamilton on the new Center for Computer Games and Virtual Worlds:
IRVINE Freshmen at UC Irvine could be among the first graduates to earn a degree in computer game science as the university expands its research into gaming and virtual worlds.
A new Center for Computer Games and Virtual Worlds established this quarter at UCI is expected to consolidate and expand the research done in those fields. UCI isn’t the first school to offer a degree program in computer gaming, but university officials are keen on turning informal relationships faculty have with video game development companies into formal ones that can lead to internships, scholarships and exclusive research and development agreements. One of the most popular games in the world, World of Warcraft, is made by Irvine-based Blizzard Entertainment and a number of students from UCI already work there, said Information and Computer Sciences associate dean Magda El Zarki.
Click here for the full story.
	

	
		Author  adminPosted on September 12, 2009Categories In the NewsTags oc register			



	
		
		Virtual Worlds, Virtual Property	

	
	
	
		Dan Burke, Professor of Law at UC Irvine, gave a talk on Virtual Worlds, Virtual Property.
http://cast.nacs.uci.edu/tltc/LawSchool/LawSchoolVideo.html
	

	
		Author  staffPosted on July 27, 2009September 27, 2012Categories In the News			


	
		Posts navigation
		Previous page
Page 1
Page 2
	
		
	


	
		Blogroll
	ArtIsAllWeHaveItofisherMetaverse Ink BlogPomo2kUCI VGDCVirtual Politik

Archives		November 2012October 2012September 2012May 2012April 2011February 2011January 2011August 2010April 2010November 2009September 2009July 2009
			

		

		
			
			
			
								Center for Computer Games & Virtual Worlds
				Proudly powered by WordPress
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/overview.htm
##-----------------TITLE------------------------##
Overview
##------------------TEXT------------------------##
 

The 
EXPRESSION project aims to achieve exploration of Systems-On-Chip (SOCs) with 
programmable processor cores and novel memory hierarchies. Effective exploration 
of such SOCs is possible by considering the interaction between the processor 
architecture, the compiler and the target application. In this project we use 
EXPRESSION, an Architecture Description Language (ADL), to specify the 
processor-memory architecture. Further, we automatically generate EXPRESS, 
a highly optimizing, Instruction-Level-Parallelizing (ILP) compiler, and 
SIMPRESS, a cycle-accurate, structural simulator from EXPRESSION. 
EXPRESSION, EXPRESS and SIMPRESS are integrated under a visual environment, 
V-SAT (Visual Specification and Analysis Tool), 
to aid rapid Design Space Exploration (DSE).

EXPRESSION was designed 
with the dual goal of allowing processor description for fast DSE and for 
automatic generation of detailed/accurate simulation/compilation tools. The 
novel features of EXPRESSION include:
    
Integration of the 
Instruction-Set and Structure to avoid redundancy in specification,
      
Automatic generation of resource 
constraints (as reservation tables), and
      
Constructs for explicitly 
specifying novel and traditional memories
      
EXPRESS was developed 
with the goal of providing a retargetable compiler platform for 
Embedded-System/System-on-Chip development. The EXPRESS retargetable 
compiler takes in C programs and produces a highly optimized (and parallel) 
target specific code using state-of-art Instruction-Level Parallelism (ILP) 
techniques. The compiler features an extensive set of integrated transformations 
to perform the traditional compiler tasks of code selection, instruction 
scheduling and register allocation and memory-aware optimizations.

SIMPRESS is a retargetable, cycle-accurate, structural simulator that can 
be used to evaluate the architecture, the application and the effectiveness of 
the compiler transformations. It features an extensive set of statistic 
collector agents that are used to gather information such as resource usage, 
hazard count, inner-loop execution time, etc.

V-SAT provides a visual environment to graphically specify the 
architecture and perform Architectural DSE in an intuitive manner. The 
EXPRESSION description of the processor can be automatically generated from 
the V-SAT specification.
EXPRESSION is an ADL supporting architectural design space exploration (DSE) 
for embedded Systems-on-Chip (SOC) and automatic generation of a retargetable 
compiler/simulator toolkit.  
 
    
 





Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/people.htm
##-----------------TITLE------------------------##
People
##------------------TEXT------------------------##
 
We acknowledge the contribution of the following people who put in their 
valuable time, effort and expertise to help make the EXPRESSION project a 
reality
Professors
    
    
    Nikil Dutt
    
    
    Alex Nicolau
     
     Alumni
    
    
    Peter Grun
    
    
    Asheesh Khare
    
    
    Vijay Ganesh
     Current PhD 
    students
    
    
    Ashok Halambi
    
    
    Prabhat Mishra
    
    
    Aviral Shrivastava 
    
    
    Partha Biswas
    
    
    Mahesh Mamidipaka
    
    
    Ilya Issenin
    
    
    Nick Savoiu
     Current Master 
    students / PhD candidates
    
    
    Sudeep Pasricha
    
    
    Radu Cornea
    
    
    Srikanth Sriniva san
    
    
    Atri Mandal
     
In addition we would like to thank all the members of 
the ACES Lab who gave valuable feedback which helped us immensely.





Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/documentation.htm
##-----------------TITLE------------------------##
Documentation
##------------------TEXT------------------------##
 EXPRESSION 
    User Manual
    The latest version of the 
    EXPRESSION User Manual (version 1.0) can be downloaded from here 
    (full text in postscript)
    (pdf)
     
    Related 
    Publications 
    "A 
    Framework for GUI-Driven Design Space Exploration of a MIPS4K-like 
    Processor",  CECS Technical Report 03-17, by S. Pasricha, P. 
    Biswas, P. Mishra, A. Shrivastava, A. Mandal, N. Dutt, A. Nicolau, April, 
    2003 (full text in postscript)
    (pdf)
    
    "Automatic 
    Verification of In-Order Execution in Microprocessors with Fragmented 
    Pipelines and Multicycle Functional Units", 
    DATE 2002,  by Prabhat Mishra, Hiroyuki Tomiyama, Nikil Dutt, and Alex 
    Nicolau
    
    (full text in postscript)
    
    (pdf)
    
    "Functional 
    Abstraction driven Design Space Exploration of Heterogeneous Programmable 
    Architectures", ISSS 2001, by 
    Prabhat Mishra, Nikil Dutt and Alex Nicolau.
    
    (postscript)
    
    (pdf)
    
    "A Customizable 
    Compiler Framework for Embedded Systems", SCOPES 
    2001, by Ashok Halambi, Aviral Shrivastava, Nikil Dutt and Alex Nicolau.
    
    (postscript)
    
    "Architecture 
    Description Language Driven Design Space Exploration in the Presence of 
    Coprocessors", SASIMI 2001, by  
    Prabhat Mishra, Frederic Rousseau, Nikil Dutt, Alex Nicolau 
    (postscript)
    
    (pdf)
    
    "EXPRESSION: A Language for Architecture Exploration through 
    Compiler/Simulator Retargetability", DATE 99, by Ashok Halambi, 
    Peter Grun, Vijay Ganesh, Asheesh Khare, Nikil Dutt and Alex Nicolau.
    (full text in postscript)
    
      "EXPRESSION: An ADL 
      for System Level Design Exploration ", Technical Report, by 
      Peter Grun, Ashok Halambi, Asheesh Khare, Vijay Ganesh, Nikil Dutt and 
      Alex Nicolau. (full text in postscript) 
      
    
  






Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/news.htm
##-----------------TITLE------------------------##
News
##------------------TEXT------------------------##
 
EXPRESSION will be officially released into the public domain at DAC 2003 
(June 2-6, 2003)





Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/contact.htm
##-----------------TITLE------------------------##
Contact Us
##------------------TEXT------------------------##
For questions, comments or feedback, contact us by email. 
E-Mail
    express@cecs.uci.edu



Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/index.htm
##-----------------TITLE------------------------##
EXPRESSION
##------------------TEXT------------------------##
 

EXPRESSION 
is an Architecture Description Language (ADL) as well as a retargetable 
compiler/simulator tool-kit for architectural design space exploration (DSE). A 
processor-memory architecture can be captured using the Graphical User Interface (GUI). 
The front-end of the tool-kit generates the EXPRESSION description for the 
processor, which in turn steers automatic generation of retargetable compiler 
and simulator.

The key features of our design methodology 
include: 
    
  
  Ease of specification and modification of 
  architecture from the GUI.
  
  Mixed behavioral/structural representation 
  supporting a natural, concise specification of the architecture.
      
  
  Explicit specification of the memory subsystem 
  allowing novel memory organizations and hierarchies.
  
  Efficient specification of architectural 
  resource constraints allowing extraction of detailed Reservation Tables (RTs) 
  for compiler scheduling.

The complete EXPRESSION 
toolkit is now available as an Open Source Release in the public domain. The 
goal of this Open Source release is to promote usage of 
    EXPRESSION ADL to specify processor-memory architectures and provide a 
reference point for further research into ADLs
    
For questions, comments or feedback, send email to
express@cecs.uci.edu 










    



Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~express/system_requirements.htm
##-----------------TITLE------------------------##
System Requirements
##------------------TEXT------------------------##
 
The EXPRESSION toolkit is available as 
downloadable source code which needs to be compiled on a host machine before it 
can be executed. To run EXPRESSION, you will require a machine running Windows 
and Visual C++ installed on it. The EXPRESSION toolkit has been tested on the 
following systems:

OS: Microsoft Windows XP Professional, Windows 2000 Server
System Type: X86-based PC
Processor: x86 Family 15 Model 1 Stepping 2 Genuine Intel ~1 Ghz
Total Physical Memory: 512.00 MB
Total Virtual Memory: 1.72 GB
Page File Space: 1.22 GB

Development Platform: Visual C++ 6.0 Enterprise Edition

Additionally, you will also 
require access to a SUN Sparc workstation if you plan to compile your own C 
applications (see manual for details). This step can also be performed online, 
by clicking
here 
to go to the web based compilation  page where you can upload your C 
program and get the requisite .defs and .procs files needed by the EXPRESSION 
toolkit after compilation.







Home | Overview | System Requirements | Documentation | Download | News | People | Contact


 Copyright University of California, Irvine, 2003.
For problems or questions regarding this web contact 
Sudeep Pasricha.
Last updated: 05/26/03. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~maheshmn/eCACTI/howto.htm
##-----------------TITLE------------------------##
eCACTI: An Enhanced Power Estimation Model for On-chip Caches
##------------------TEXT------------------------##
enhanced CACTI (eCACTI)


[Home |

Technical report |
How-to FAQ |
Download eCACTI ]



Table of Contents

  What can be done?
  
  How to run it?
  
  
  What are the stats printed in eCACTI?
  
  What are the stats printed in eCACTI with verbose option?

 


What can be done?
 For a given set of cache parameters, cache size (C), block size (B),
    associativity (A), and technology, eCACTI can be used to: 
       (1) estimate power dissipation (both static and dynamic) in caches
     				 for both read and write operations
       (2) estimate the cache read access time 
       (3) estimate the cache area 
       (4) find the optimal cache configuration in terms of the sextuplet
    (Ndwl, Ndbl, Nspd, Ntwl, Ntbl, Ntspd)
 

Back to Top



How to run it?
 eCACTI was developed on Sun OS 5.8. It can be run command line
in the following way: 
    eCACTI  C  B  A  TECH  NSubbanks  [paramFile] 
           (or) 
    eCACTI  C  B  A  TECH  RWP  ERP  EWP  NSubbanks  [ParamFile] 
where, C is the cache size, B is the block size, A is the
associativity, TECH is the technology in microns. 
paramFile is an  optional input file that can be used to specify few other parameters.
 Parameters that can specified in paramFile are the following:  

-verbose     # turn verbose on; default is off. 
-config      < Ndwl >:< Nspd > :< Ndbl > :< Ntwl > :< Ntspd > :< Ntbl >      
                  # find the area, power, and, access time for the specified configuration 
                  # default is to  explore all configurations  and find optimal power configuration 
-dualVt     # specifies that the cache design is based on dual-Vt technology 
                  # default is NO dual-Vt technology 

A sample parameter file and command line arguments for running eCACTI are
indicated below.  For these specified inputs, eCACTI estimates the
power, area, and access time for cache of size  16 KB,
block size 32 B,
and associativity of 2 in 0.13u technology and for 1:1:2:1:1:4 configuration. 
The input also requests verbose and the estimates for dualVt technology
based cache design.  

 Example command line arguments:  
eCACTI  16384  32  2  0.13  1  params  
 Example parameter file (params) contents: 
-verbose 
-config 1:1:2:1:1:4 
-dualVt  


Back to Top



What are the stats printed with eCACTI?
 Following is the output of eCACTI for the following command line arguments. 
  Command:  eCACTI  16384  32  2  0.13  1 
Output: 
-------------------------------- 
---------- eCACTI 1.0 ----------  
-------------------------------- 
 
Cache Subarray Parameters (C, B, A): (16384 B, 32 B, 2) 
Number of Subarrays: 1 
Ports (RW, R, W): (1, 0, 0) 
Technology: 0.13 um, Vdd: 1.1 V 
 
#Cache configurations expressed in (Ndwl, Nspd, Ndbl, Ntwl, Ntspd, Ntbl) format  
 
Optimal Power-AccessTime-Area Config: (1, 1, 1, 4, 1, 1)  
 
Power Stats: 
------------ 
Read hit power: 94.0955 mw 
Write hit power: 92.8738 mw 
 
Read miss power: 182.2022 mw 
Write miss power: 102.2757 mw 
 
Timing Stats: 
------------- 
Access time: 1.49748 ns 
Cycle time (wave pipelined):  0.700554 ns 
 
Area Stats: 
----------- 
Aspect ratio (height/width): 1.082291 
Total area one subarray : 0.010465 cm^2




  What are the stats printed in eCACTI with verbose option?
 Following is the output of eCACTI for the following command line arguments
(file params has -verbose option).
  Command:  eCACTI  16384  32  2  0.13  1  params
Output: 
--------------------------------
---------- eCACTI 1.0 ----------
--------------------------------

Cache Subarray Parameters (C, B, A): (16384 B, 32 B, 2)
Number of Subarrays: 1
Ports (RW, R, W): (1, 0, 0)
Technology: 0.13 um, Vdd: 1.1 V

#Cache configurations expressed in (Ndwl, Nspd, Ndbl, Ntwl, Ntspd, Ntbl) format

Area efficient configuration: (1, 1, 32, 16, 1, 1)
  Area = 3.777677, Time = 5.488263 ns, Power = 10287.37 (6118.55033 4168.81488) mW; 6716.21 (6038.79672 677.40940) mW;

Optimal time configuration: (1, 1, 1, 2, 1, 8)
  Area = 70.620714, Time = 0.841453 ns, Power = 236.50 (113.63572 122.86573) mW; 132.49 (112.54673 19.94412) mW;

Lowest power configuration: (1, 1, 4, 1, 1, 4)
  Area = 66.791649, Time = 1.463368 ns, Power = 61.41 (42.96684 18.44211) mW; 35.73 (32.75304 2.97417) mW;

Optimal Power-AccessTime-Area Config: (1, 1, 1, 4, 1, 1)

Power Stats:
------------
Read hit power: 94.0955 mw
Write hit power: 92.8738 mw

Read miss power: 182.2022 mw
Write miss power: 102.2757 mw

Timing Stats:
-------------
Access time: 1.49748 ns
Cycle time (wave pipelined):  0.700554 ns

Area Stats:
-----------
Aspect ratio (height/width): 1.082291
Total area one subarray : 0.010465 cm^2



Power Components (dyn, lkg mW):
-------------------------------

#NOTE: The power values are for a cache read hit

 Total Power all Banks :    76.3,   16.39

  Data Array Split:
  -----------------
        decode :   0.587,  0.3759
      wordline :  0.3529, 0.0007582
       bitline :   52.34,   13.37
       bitline :   3.242,  0.8357
     sense_amp :  0.7294,  0.5283
  read_control :  0.1605, 0.001591
 write_control :       0, 0.001606

     tag comparison :  0.3516, 0.01415
         mux driver :   2.254, 0.02931
       sel inverter : 0.008325,       0
 data output driver :   6.199,   0.4265

Time Components:
----------------
 data side (with Output driver) (ns): 0.836819
 tag side (with Output driver) (ns): 1.49748
 subbank address routing delay (ns): 0
 decode_data (ns): 0.147709
 wordline and bitline data (ns) : 0.458511
 sense_amp_data (ns): 0.134875
 decode_tag (ns): 0.700554
 wordline and bitline tag (ns): 0.238861
 sense_amp_tag (ns): 0.082875
 compare time (ns): 0.165663
 mux driver (ns): 0.165914
 sel inverter (ns): 0.0478887
 data output driver (ns): 0.095724
 total_out_driver (ns): 0
 total data path (without output driver) (ns): 0.741095
 total tag path is set assoc (ns): 1.40176

Area Components:
----------------
 Aspect Ratio Total height/width: 1.082291

 Data array (cm^2): 0.008745
 Data predecode (cm^2): 0.000043
 Data colmux predecode (cm^2): 0.000010
 Data colmux post decode (cm^2): 0.000000
 Data write signal (cm^2): 0.000052

 Tag array (cm^2): 0.001494
 Tag predecode (cm^2): 0.000043
 Tag colmux predecode (cm^2): 0.000010
 Tag colmux post decode (cm^2): 0.000000
 Tag output driver decode (cm^2): 0.000015
 Tag output driver enable signals (cm^2): 0.000052

 Percentage of data ramcells alone of total area: 69.940943 %
 Percentage of tag ramcells alone of total area: 4.371309 %
 Percentage of total control/routing alone of total area: 25.687748 %

 Subbank Efficiency : 74.312252
 Total Efficiency : 79.870352 

 Total area One Subbank (cm^2): 0.010465 
 Total area subbanked (cm^2): 0.009737


Back to Top




 Copyright University of California, Irvine, 2004.
For problems or questions regarding this web, contact 
Mahesh Mamidipaka.
Last updated: 10/06/04. 


  
##------------------URL-------------------------##
http://www.ics.uci.edu/~maheshmn/eCACTI/download.htm
##-----------------TITLE------------------------##
eCACTI: An Enhanced Power Estimation Model for On-chip Caches
##------------------TEXT------------------------##
enhanced CACTI (eCACTI)


[Home |

Technical report |
How-to FAQ |
Download eCACTI ]





The eCACTI tool distribution is licensed
under the License making it freely available
to all interested parties. Please take a moment to read it before downloading
the toolkit.
The latest version of the eCACTI toolkit can be downloaded from here


eCACTI release version 1.0






 Copyright University of California, Irvine, 2004.
For problems or questions regarding this web, contact 
Mahesh Mamidipaka.
Last updated: 10/06/04. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~maheshmn/eCACTI/techRep.htm
##-----------------TITLE------------------------##
eCACTI: An Enhanced Power Estimation Model for On-chip Caches
##------------------TEXT------------------------##
enhanced CACTI (eCACTI)


[Home |

Technical report |
How-to FAQ |
Download eCACTI ]
 



 eCACTI: An Enhanced Power Estimation Model
for On-chip Caches 

Mahesh Mamidipaka and Nikil Dutt
Center for Embedded Computer Systems (CECS) Technical Report TR-04-28, Sept. 2004.

Abstract
There is a growing need for accurate power models at the higher
levels of design hierarchy. CACTI
is a micro-architecture level tool widely used
(i) to estimate power dissipation in caches and (ii) to determine
the cache configuration that best meets the desired optimization
criterion. However,
we observed several limitations in CACTI that lead to
inaccuracies in cache power estimates especially as we move to
deep sub-micron (DSM) technologies: a) lack of models to account for
leakage power, b) use of constant gate widths for most devices
irrespective of its capacitive load, and c) lack of models to
account for power dissipation in sub-blocks that are outside the time
critical path. As a result, the cache configuration determined by CACTI may not
be optimal because of these limitations. Our tool,   eCACTI  
(enhanced CACTI),
addresses these limitations in CACTI thereby improving the
accuracy of its power estimates. We validated  eCACTI power estimates
against SPICE based simulations on industrial designs. Furthermore,
we show that for DSM technologies, CACTI does not generate
power optimal cache configuration, which highlights the need for
the enhancements we developed in  eCACTI .
Finally, we demonstrate the use of  eCACTI  to study the effects of
(i) technology on cache leakage and total cache power,
(ii) dual-Vth optimization on sub-block and total cache leakage power,
(iii) effects of varying cache size, block size, and associativity
for DSM technologies.


Technical report available in
ps
or pdf
eCACTI software download page



 Copyright University of California, Irvine, 2004.
For problems or questions regarding this web, contact 
Mahesh Mamidipaka.
Last updated: 10/06/04. 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/jaewonfarewell05.htm
##-----------------TITLE------------------------##
jaewonfarewell05
##------------------TEXT------------------------##
Jaewon 
      Seo's Farewell (Aug 2005)
      
          
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
          
  






    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    







  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/masonparkparty.htm
##-----------------TITLE------------------------##
masonparkparty
##------------------TEXT------------------------##
CECS 
      Mason Park Party (circa 2004)
      
          
              
              
              
              
              
              
              
              
                 
              
              
              
              
              
              
              
              
                 
              
              
              
              
              
              
              
              
                 
              
              
              
              
              
              
              
              
              
          
  



    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    





  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/isss_97.htm
##-----------------TITLE------------------------##
isss 97
##------------------TEXT------------------------##
ISSS 
      Conference (1997)
      
          
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
              
          
  



    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    





  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/imaivisitjun05.htm
##-----------------TITLE------------------------##
imaivisitjun05
##------------------TEXT------------------------##
Prof 
      Imai's Visit (Jun 2005)
      
          
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
          
  






    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    







  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/dac_97.htm
##-----------------TITLE------------------------##
dac 97
##------------------TEXT------------------------##
DAC 
      Conference (1997)
      
          
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
          
  



    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    





  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
  
 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/isss_99.htm
##-----------------TITLE------------------------##
isss 99
##------------------TEXT------------------------##
ISSS 
      Conference (1999)
      
          
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
              
          
  



    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    





  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/date05.htm
##-----------------TITLE------------------------##
date05
##------------------TEXT------------------------##
ACES at 
      DATE 2005 Conference (March 2005)
      
          
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
          
  






    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    







  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/dec05lunch.htm
##-----------------TITLE------------------------##
dec05lunch
##------------------TEXT------------------------##
ACES 
      Year-end Lunch (Dec 2005)
      
          
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
          
  






    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/cecs99.htm
##-----------------TITLE------------------------##
cecs99
##------------------TEXT------------------------##
CECS 
      Party (circa 1999)
      
          
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
               
          
  



    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    





  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/codes_04.htm
##-----------------TITLE------------------------##
codes 04
##------------------TEXT------------------------##
CODES+ISSS Conference, Stockholm, Sweden (Sep 2004)
      
          
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
                 
              
              
              
              
              
              
          
  



    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    





  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~aces/fall05.htm
##-----------------TITLE------------------------##
fall05
##------------------TEXT------------------------##
Fall 
      Quarter Kickoff Lunch (Sep 2005)
      
          
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
              
              
              
              
              
              
               
               
               
          
  






    
Home | 
Projects | 
Publications | 
News & Events | 
People | 
Sponsors | 
Downloads | 
Links | 
Join ACES | 
About Us
    







  Please e-mail your comments and suggestions to Sudeep Pasricha 
  (sudeep@ics.uci.edu) 
  © Copyright 1997-2004 ACES-UCI. All rights reserved
      

 
##------------------URL-------------------------##
http://sprout.ics.uci.edu/past_projects/sucses/publications.htm
##-----------------TITLE------------------------##
PUBLICATIONS
##------------------TEXT------------------------##
 
             
            
 
            Leak-free Group Signatures with Immediate Revocation
            
      AUTHORS:
               X. Ding and G. Tsudik and S. Xu
      REFERENCE: 
             The 24th
            International Conference on Distributed Computing Systems (ICDCS'04)
            
            Abstract 
            | Full 
            text in pdf
             

 
            Fine-grained Control of Security Capabilities 
            
      AUTHORS:
               D. Boneh and X. Ding and G. Tsudik
      REFERENCE: 
             ACM Transactions on
            Internet Technology, 
            2004
            Abstract 
            | Full 
            text in pdf
             

 
            Simple 
            Identity-Based Encryption with Mediated RSA
      AUTHORS:    X.
      Ding and G. Tsudik
      REFERENCE: 
             Cryptographer's Track RSA Conference, 
            2003
            © 
            Springer-Verlag
            Abstract 
            | Full 
            text in pdf
             

  
            Experimenting with Server-Aided Signatures
      AUTHORS:    X. Ding, G.
      Tsudik and D. Mazzocchi
      REFERENCE: 
             Network and Distributed System Security Symposium,2002
            Abstract 
            | Full 
            text in pdf
             
       
             
            A Method for Fast Revocation of Public Key Certificates and Security Capabilities
      AUTHORS:    D. Boneh, X. Ding, G.
      Tsudik and M. Wong
      REFERENCE:  10th Usenix Security Symposium, Washington D.C. 2001
            Abstract 
            | Full text 
            in pdf
             
       
             
             
            Generating RSA Keys on a Handheld Using an Untrusted Server
      AUTHORS: 
               N. Modadugu, D.
      Boneh, and M. Kim
      REFERENCE:  Cryptographer's 
            Track RSA Conference, 2000
            Abstract 
            | Full 
            text in 
            pdf
             

            
            Server-Supported Signatures
      AUTHORS: 
               N. Asokan, G. Tsudik and M. Waidners
      REFERENCE:  Journal of Computer Security, November 1997
            Abstract 
            | Full 
            text in pdf
             

    

 
 

 
 
##------------------URL-------------------------##
http://www.ics.uci.edu/~keldefra/
##-----------------TITLE------------------------##
karim eldefrawy
##------------------TEXT------------------------##
karim eldefrawy
			homepublicationsteachingresearch philosophy
			
				"the first principle is that you must not fool yourself - and you are the easiest person to fool." - richard feynman
		  
	  
		
			what i do
	        identify and solve security and privacy challenges in distributed and networked systems.
	  	
	  			
		
		
				ph.d. and m.sc. from dan brown school of information and computer science at university of california, irvine (2010 and 2008). 
				m.sc. and b.sc. in electrical engineering from cairo university in egypt (2005 and 2003).
				
                 to contact me: {last name} + {magic character} + {email system of most famous search engine}
		
		
	  
				what i've been up to
				 since october 2010: research staff scientist (march 2014 to present), research staff member (march 2012 to march 2014), post-doctoral research staff (october 2010 to march 2012) in the information systems and sciences lab (issl) at  hughes research laboratories (hrl).



         
        recent professional activities
        information and web director (2011-2015) of the acm transactions on information and system security (tissec) 
          selected program committees:  scn'16, iacr crypto'15,  ieee globecom'15,  acm wisec'12 and wisec'11, acns'11
          selected journal reviews: acm tissec, ieee tmc, ieee tifs, ieee jsac, ieee twc, ieee pervasive computing, elsevier comcom
      	

		
			website templates by solucija · released under a creative commons licence
			© copyright 2008 conceptnova, 2015 karim eldefrawy
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/PEPSI/related.html
##-----------------TITLE------------------------##
PEPSI: a Privacy-Enhancing Participatory Sensing Infrastructure
##------------------TEXT------------------------##
PEPSI
                a Privacy-Enhancing Participatory Sensing Infrastructure
            
            
            



Related Work

The following list may be incomplete. Please contribute to keep it updated by pointing out work that we may have missed.
Privacy in Participatory Sensing

	Raghu K. Ganti, Nam Pham, Yu-En Tsai, and Tarek F. Abdelzaher.
   PoolView: Stream Privacy for Grassroots Participatory Sensing.
	ACM Sensys 2008.

   Cory Cornelius, Apu Kapadia, David Kotz, Dan Peebles, Minho Shin, Nikos Triandopoulos.
    AnonySense: Privacy-Aware People-Centric Sensing.
   ACM Mobisys 2008.

	Kuan Lun Huang, Salil S. Kanhere, Wen Hu.
   Preserving privacy in participatory sensing systems.
	Computer Communications 33 (2010).

	Jing Shi, Rui Zhang, Yunzhong Liu, and Yanchao Zhang.
   PriSense: Privacy-Preserving Data Aggregation in People-Centric Urban Sensing Systems.
	IEEE Infocom 2010.

    Qinghua Li and Guohong Cao.
   Efficient and Privacy-Preserving Data Aggregation in Mobile Sensing.
    IEEE ICNP 2012.

    Tassos Dimitriou, Ioannis Krontiris, and Ahmad Sabouri.
   PEPPeR: A Querier's Privacy Enhancing Protocol for PaRticipatory Sensing.
    MOBISEC 2012.

    Emiliano De Cristofaro and Roberto Di Pietro.
    Preserving Query Privacy in Urban Sensing Systems
    ICDCN 2012.

    Ananth Raghunathan, Peter Chien, Dan Boneh.
   Privately Identifying Location Hotspots
    Stanford Technical Report, 2012.


Security in Participatory Sensing

	Akshay Dua, Nirupama Bulusu, Wu-chang Feng, Wen Hu.
   Towards Trustworthy Participatory Sensing.
	HotSec 2009.

	Peter Gilbert, Landon P. Cox, Jaeyeon Jung, David Wetherall.
   Toward Trustworthy Mobile Sensing.
	ACM HotMobile 2010.

    Akshay Dua, Nirupama Bulusu, and Wu-chang Feng.
   Catching Cheats with Interactive Proofs: Privacy-preserving Crowd-sourced Data Collection Without Compromising Integrity.
    PhoneSense 2010.

    Akshay Dua, Nirupama Bulusu and Wu-chang Feng.
   Privacy-preserving Online Mixing of High Integrity Mobile Multi-User Data.
    SecureComm 2011.

    Delphine Christin, Andreas Reinhardt, Matthias Hollick, Salil S. Kanhere.
    Privacy-Preserving Collaborative Path Hiding for Participatory Sensing Applications.
    IEEE MASS 2011.

    Xinlei (Oscar) Wang, Wei Cheng, Prasant Mohapatra, Tarek Abdelzaher.
   ARTSense: Anonymous Reputation and Trust in Participatory Sensing.
    IEEE Infocom 2013.


Surveys

	Apu Kapadia, David Kotz, Nikos Triandopoulos.
	Opportunistic Sensing: Security Challenges for the New Paradigm.
	COMSNETS 2009. (Invited Paper.)

	Katie Shilton.
   Four billion little brothers?: Privacy, mobile phones, and ubiquitous data collection.
	Communications of the ACM, 52(11), 2009.

	Delphine Christin, Matthias Hollick, Mark Manulis.
   Security and Privacy Objectives for Sensing Applications in Wireless Community Networks.
	IEEE ICCCN 2010. (Invited Paper.)

    Delphine Christin, Andreas Reinhardt, Salil S. Kanhere, Matthias Hollick.
    A survey on privacy in mobile participatory sensing applications.
    Journal of Systems and Software, 2011.

    Mohan, Srikar, Guangzhi Qu, and Fatma Mili.
    Security Analysis of Opportunistic Networks Using Complex Network Properties.
    Wireless Algorithms, Systems, and Applications, 2012.

    Simon Cleveland.
    In Search of User Privacy Protection in Ubiquitous Computing.
    IEEE IRI 2012.


            
            
            
            
                  – 
                Webmaster E. De Cristofaro
##------------------URL-------------------------##
http://sprout.ics.uci.edu/past_projects/gac/publication.html
##-----------------TITLE------------------------##
Publications
##------------------TEXT------------------------##
 
        
             
        
                        
        
            Journal Publications
        
                         
        
                          Robust Self-Keying Mobile Ad-Hoc Networks,                                                                                                Claude 
            Castelluccia, Nitesh 
                                Saxena 
                                and Jeong H. Yi, 
                                 Elsevier Computer Networks, to appear
                                      Admission 
                                Control in Collaborative Groups, 
                                                        Yongdae 
                                Kim, Daniele Mazzocchi and Gene Tsudik, 
                                                        ACM Mobile Computing and Communications Review 
            (MC2R), Vol. 6, No. 
4, 2003.
             
        
                        
        
            Conference Publications
        
                         
        
                          Public 
            Key 
            Cryptography sans Certificates in Ad Hoc Networks 
            (Best 
            Student Paper!), 
                                                                                        Nitesh 
            Saxena,
                                            Applied 
            Cryptography and Network Security (ACNS),  
                                Singapore, June, 2006. 
                                             

             Efficient 
            Node Admission for Short-lived Mobile Ad Hoc Networks, 
                                            
                                            Nitesh 
            Saxena, Gene Tsudik and Jeong H. Yi, 
                                            IEEE International Conference 
                                on Network Protocol (ICNP),  
                                Boston, 
            MA, USA, November, 2005. 
                                             
             Self-configurable Key Pre-distribution in Mobile Ad-Hoc 
Networks,
                                            Claude Castelluccia, Nitesh 
Saxena and Jeong H. Yi, 
             IFIP 
Networking Conference,  Waterloo, Canada, 
May 2005. 
             

             Futher 
                                            Simplifications in Proactive RSA 
                                            Signature Schemes, 
                                            Stanislaw 
                                            Jarecki and Nitesh Saxena, 
                                            Theory 
                                            of Cryptography Conference (TCC), 
                                            February 2005.
                                             
                         Identity-based 
                                            Access Control for Ad Hoc Groups, 
                                                                                        Nitesh 
                                            Saxena, Gene Tsudik 
                                            and Jeong H. Yi, 
                                            International 
                                            Conference on Information Security 
                                            and Cryptology (ICISC), December 
                                            2004.
                         
             An 
                                                        Attack on the Proactive 
                                                        RSA Signature Scheme 
                                                        in the URSA Ad Hoc Network 
            Access 
                                                        Control Protocol, 
                                                        
                                                        
                                                        Stanislaw Jarecki, Nitesh Saxena and Jeong Hyun Yi, 
                                                        
                                                        ACM Workshop on Security of Ad Hoc and Sensor Networks (SASN), Washington, DC, 
                                                         
USA, October 25, 2004.
             
             Access Control 
                                                        in Ad Hoc Groups, 
                                                         
                                                        Nitesh 
                                            Saxena, Gene Tsudik and Jeong H. Yi, 
                                                        International Workshop on Hot Topics in Peer-to-Peer Systems (HOT-P2P 
                                                        2004), October, 
            2004.
             
                         On 
                                the Utility of Distributed Cryptography in P2P 
                                and MANETs: the Case of Membership Control, 
                                                                                        Maithili 
                                Narasimha, Gene Tsudik and Jeong H. Yi, 
                                            IEEE International Conference 
                                on Network Protocol (ICNP),  
                                Atlanta, Georgia, USA, November 4-7, 2003. 
                                
                                  
                         Admission 
                                Control in Peer-to-Peer: Design and Performance 
                                            Evaluation, 
                                                                                                                Nitesh 
                                            Saxena, Gene Tsudik and Jeong H. Yi, 
                                                        ACM Workshop on Security of Ad Hoc and Sensor Networks (SASN), Fairfax, VA, 
USA,  October 31, 2003.
                         
             Admission 
                                Control in Peer Groups, 
                                            Yongdae 
                                Kim, Daniele Mazzocchi and Gene Tsudik, 
                                            IEEE International Symposium on Network Computing and 
Applications (NCA), Cambridge, MA, USA, April 16-18, 2003.
             
        
                        
        
            Book Chapters
        
                         
        
             
             
            Experimenting 
                                            with Admission 
                                Control in P2P Networks, 
                                                                    Nitesh 
                                            Saxena, Gene Tsudik and Jeong H. Yi, 
             
Computer Security in the 21st Century (ISBN: 0-387-24005-5), Springer, 
 2005. 
             
        
                        
        
            Technical 
            Reports
        
                         
        
             
             
            DoS-Resistant 
            Self-Keying Mobile Ad-Hoc Networks,
                                                                                Claude Castelluccia and Jeong H. Yi, 
                                                                                Research Paper, INRIA-5373, France, Nov. 2004.
             
             
            Admission 
                                Control in Collaborative Groups, 
                                                                                
                                Yongdae 
                                Kim, Daniele Mazzocchi and Gene Tsudik, 
                                                                                SCONCE 
            Tech. Report, July, 2002.
             
        
                        
        
            Invited Talks
        
                         
        
             
        
                         
        
             
            "Self-Configurable 
            Key Pre-distribution in Mobile Ad-Hoc Networks", Guest Lecture 
            in "Security in Group Communications" course (ICS 
            280), UC Irvine, 5/2005.
             
            "Identity-based Access Control in 
            Ad Hoc Groups", Samsung Advanced 
            Institute of Technology (SAIT), Korea, 
            12/2004.
             
            "Group Admission Control in P2P and 
            MANETS", Guest Lecture in "Networked 
            Systems Research Seminar" course 
            (NetSys 295), UC Irvine, 10/2004.
             "How 
            to implement ECC Functions using MIRACL", Seoul 
            National University (SNU), Korea, 
            8/2004.
             "Threshold 
            Cryptography for P2P and MANETs", Sungkyunkwan 
            University, Korea, 8/2004.
             "Threshold 
            Cryptography for P2P and MANETs", Korea 
            University, Korea, 8/2004.
             
            "Secure Admission Control in MANETs", 
            Korea Information Security Agency (KISA), 
            Korea, 1/2004.
             "Secure 
            Admission Control in P2P and MANETs", Seoul 
            National University (SNU), Korea, 
            12/2003.
             
            "Certificate-based Admission Control 
            in P2P Communications", Informations 
            and Communications University (ICU), 
            Korea, 12/2002.
             "Admission 
            Control in P2P", National Security 
            Research Institute (NSRI), Korea, 
            12/2002. 
             
        
            Copyright 
            2001 (c) SCONCE. All rights reserved.Best viewed with 
            Internet Explorer 6.0 & 1024*768 resolution or higher.
##------------------URL-------------------------##
http://sprout.ics.uci.edu/past_projects/gac/download.html
##-----------------TITLE------------------------##
Bouncer Toolkit
##------------------TEXT------------------------##
 
        
             
        
                        
        
            Bouncer: 
            Admission Control Toolkit
        
                         
        
            We have implemented Bouncer, a general-purpose 
            toolkit for admission control.  All cryptographic functions 
            are developed using the OpenSSL and 
            MIRACL libraries. The toolkit is written in C on 
            Linux 2.4 and currently consists of about 65,000 lines of codes.
        
                         
        
             
        
                        
        
            System Architecture
        
                         
        
            The Bouncer toolkit is composed of three basic 
            layers of the architecture; Bouncer APIs, security and management services, 
            and the underlying cryptographic functions.
        
                         
             
        
             
            
             
        
                         
        
             The 
            Bouncer APIs define the application programming interface for accessing 
            the admission control services. These APIs are useful when integrating 
            our Bouncer with other peer group applications. The security and 
            management services are carried out by the following modules:
             
               - 
            Policy Management Module
               - 
            Certificate Handling Module
               - 
            Data Encoding Module
               - 
            Protocol Handling Module
            All security services are provided by the 
            underlying cryptographic libraries. Most of the general cryptographic 
            functions such as SHA-1, RSA, DSA, and so on, are supported by OpenSSL. 
            Specifically, we have implemented three distributed cryptographic 
            schemes on top of OpenSSL and MIRACL libraries, and embedded our libraries into it. The 
            Bouncer supports five  different threshold schemes; three for long-lived 
            DPGs and two for short-lived DPGs.
             1) 
            Admission Protocols for Long-lived DPGs
                  
                                     
                                    TS-DSA
                  
            TS-Sch
                  
            ID-GAC (aka, TS-BLS)
             2) 
            Admission Protocols for Short-lived DPGs
                  
            UniAC (aka, PTKP or PSK)
                  
            BiAC
             
        
                        
        
            Source Codes
        
                         
        
             
             
                                    LICENCE Statement
             
                                    README
             
             
            Bouncer toolkit: 
                                    bouncer-0.8.0.tar.gz 
                                    
             
            [Individual 
            Libraries]
             
            TS-DSA library: tsd-0.1.1.tar.gz
             
            TS-Sch library: tsc-0.1.1.tar.gz
             
            ID-GAC library: ibg-0.1.1.tar.gz, 
            
              
            UniAC library: uni-0.1.1.tar.gz
             
            BiAC library: biv-0.1.1.tar.gz
             
            [Trial 
            Integrations with Bouncer]
             Secure 
                                    Gnut: sgnut-0.1.2.tar.gz 
                                    which is a Gnut 
                                    0.4.21 integeated with gac-0.5.0.
                                     
            Spread-GAC: spread-gac.tar.gz 
                                    which is a Spread 
                                    3.17.0 integeated with gac-0.5.0.
             
        
                         
        
             
        
            Copyright 
            2001 (c) SCONCE. All rights reserved.Best viewed with 
            Internet Explorer 6.0 & 1024*768 resolution or higher.
##------------------URL-------------------------##
http://sprout.ics.uci.edu/past_projects/cliques/category.html
##-----------------TITLE------------------------##
Untitled
##------------------TEXT------------------------##
  
  
             
             
             
             
             
             
             
             
 
##------------------URL-------------------------##
http://sprout.ics.uci.edu/past_projects/cliques/main.html
##-----------------TITLE------------------------##
Untitled
##------------------TEXT------------------------##
 
             
            
               CLIQUES is a research project at the
             ICS Secure COmputing & Networking CEnter
             funded by the DARPA 
            Information Technology Office  under Contract Number DABT63-97-C-0031.
	     This project is a subcontract of High
             Performance, Robust and Secure Group Communication
             project at CNDS group of Johns Hopkins University.  
	       This Website is designed 
            and maintained by Yongdae Kim.  
            Best viewed with 1024*1280*32bit Color  If you have any comments 
            on this page, send me an e-mail. 
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/aaa/people.html
##-----------------TITLE------------------------##
Sprout - AAA
##------------------TEXT------------------------##
Author Attribution & Anonymization
          (A.A.A)
        
      
      
        HomePeoplePublications
      
    
    
      
        
      
      
        People
        Mishari AlmishariPaolo GastiMohamed Ali KaafarEkin OguzGene Tsudik
      
    
    
      Copyright 2013, sprout.ics.uci.edu
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/aaa/publications.html
##-----------------TITLE------------------------##
Sprout - AAA
##------------------TEXT------------------------##
Author Attribution & Anonymization
          (A.A.A)
        
      
      
        HomePeoplePublications
      
    
    
      
        
      
      
        Publications
        Mishari Almishari, Dali Kaafar, Gene Tsudik and Ekin Oguz:
            "Are 140 Characters Enough? A Large-Scale Linkability Study of Tweets"
            at arXiv, 2014Mishari Almishari, Dali Kaafar, Gene Tsudik and Ekin Oguz:
            "Stylometric Linkability of Tweets"
            at WPES, 2014Mishari Almishari, Ekin Oguz and Gene Tsudik. 
            "Fighting Authorship Linkability with Crowdsourcing" 
            at ACM COSN, 2014.Mishari Almishari, Paolo Gasti, Gene Tsudik, and Ekin Oguz. 
            "Privacy-Preserving Matching of Community-Contributed Content"
             In Computer Security - ESORICS 2013, pp. 443-462. Springer Berlin Heidelberg, 2013.Mishari Almishari, and Gene Tsudik. 
            "Exploring Linkability of User Reviews"
             In Computer Security - ESORICS 2012, pp. 307-324. Springer Berlin Heidelberg, 2012.
      
    
    
      Copyright 2013, sprout.ics.uci.edu
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/aaa/sidebar.html
##-----------------TITLE------------------------##
Sprout - AAA
##------------------TEXT------------------------##
Latest News
    Paper accepted
      August 25th, 2014
    Paper accepted
      July 26th, 2014
    New Website Launched
      December 1st, 2013
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/aaa/index.html
##-----------------TITLE------------------------##
Sprout - AAA
##------------------TEXT------------------------##
Author Attribution & Anonymization
          (A.A.A)
      
      
        HomePeoplePublications
      
    
    
      
        
      
      
        Welcome to the Sprout's homepage for A.A.A
        The Internet has become a tremendous world-wide bazaar where massive amounts of information are being disseminated and consumed on a constant basis. One source of shared information is textual, e.g., blogs, tweets and various discussion fora. Among those, community reviewing has carved out an important niche. This category includes
        well-known sites, such as: Yelp, CitySearch, UrbanSpoon and TripAdvisor.
        
        Some recent work has shown that many contributors to community reviewing sites accumulate a body of authored content that is sufficient for creating their stylometric profiles, based on rather simple features (e.g., digram frequency). A stylometric profile allows probabilistic linkage among reviews generated by the same person. This could be used to link reviews from different accounts (within a site or across sites) operated by the same user. On one hand, tracking authors of spam reviews can be viewed as a useful service. On the other hand, the ease of highly accurate linkage between different accounts is disconcerting and ultimately detrimental to privacy.
        We consider both sides of this debate to be equally valid and do not choose sides. However, we believe that the privacy argument deserves to be considered, which triggers the motivation for this project:
        Explore and measure linkability of reviews.Develop techniques that mitigate review linkage.
        
      
    
    
      Copyright 2013, sprout.ics.uci.edu
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/iarpa-app/related.html
##-----------------TITLE------------------------##
Automatic Privacy Protection Program
##------------------TEXT------------------------##
IARPA-APP
		Automatic Privacy Protection Program 
	

	
	
	
	
		Site Pages
	
		
			HomeCodeRelated WorkPublications
		
	

		  
	
	
	

	
	
    Related Work
    
    Private Set Intersection
     M. Freedman, K. Nissim, and B. Pinkas.
             Efficient private matching and set intersection. Eurocrypt 2004.
        
            L. Kissner and D. Song. Privacy-preserving set operations. CRYPTO 2005
        
            C. Hazay and K. Nissim.   Efficient Set Operations in the Presence of Malicious Adversaries. PKC 2010.
        
    Authorized Private Set Intersection
    
            J. Camenisch and G. M. Zaverucha. Private intersection of certified sets.
            Financial Cryptography 2009.
        
            J. Camenisch, Markulf Kohlweiss, Alfredo Rial, Caroline Sheedy. Blind and Anonymous Identity-Based Encryption and
                Authorised Private Searches on Public Key Encrypted Data.
            PKC 2009.
        
    Private Information Retrieval
    
            B. Chor, O. Goldreich, E. Kushilevitz, M. Sudan. Private information retrieval. FOCS 1996.
        
            E. Kushilevitz, R. Ostrovsky. Replication Is Not Needed: Single Database, Computationally-Private Information Retrieval. FOCS 1997.
        
            Y. Gertner, Y. Ishai, E. Kushilevitz, T. Malkin. Protecting data privacy in private information retrieval
                schemes. STOC 1998.
            B. Chor, N. Gilboa, M. Naor. Private information retrieval by keywords. Manuscript, 1998.
            C. Gentry and Z. Ramzan.  Single-database private information retrieval with constant communication 
                rate.. ICALP 2005.


	
	
	
	
		Webmaster E. De Cristofaro
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/iarpa-app/code.html
##-----------------TITLE------------------------##
Automatic Privacy Protection Program
##------------------TEXT------------------------##
IARPA-APP
		Automatic Privacy Protection Program 
	

	
	
	
	
		Site Pages
	
		
			HomeCodeRelated WorkPublications
		
	

		  
	
	
	

	
        Code
        Following is the implementation for each subproject
        Privacy-preserving Sharing of Sensitive information Toolkit: psst-psi.tar.gz, psst-ib.tar.gz
        
        


	
	
	
	
		Webmaster E. De Cristofaro
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/iarpa-app/pubs.html
##-----------------TITLE------------------------##
Automatic Privacy Protection Program
##------------------TEXT------------------------##
IARPA-APP
		Automatic Privacy Protection Program 
	

	
	
	
	
		Site Pages
	
		
			HomeCodeRelated WorkPublications
		
	

		  
	
	
	

	
	
    Publications
    
    G. Ateniese, E. De Cristofaro, G. Tsudik.
            (If) Size Matters. Size-hiding Private Set Intersection.
            Available on ePrint.E. De Cristofaro, Y. Lu, G. Tsudik.
            Privacy-Preserving Sharing of Sensitive Information is (Really) Practical.
            Available soon on ePrint.E. De Cristofaro, J. Kim, G. Tsudik.
            Linear-Complexity Private Set Intersection Protocols Secure in Malicious Model.
            Asiacrypt 2010.S. Jarecki, X. Liu.
            Fast Secure Computation of Set Intersection.
            SCN 2010.E. De Cristofaro, G. Tsudik.
            Practical Private Set Intersection Protocols with Linear Complexity.
            Financial Cryptography 2010.E. De Cristofaro, J. Kim.
            Some Like it Private. Sharing Confidential Information based on Oblivious Authorization.
            IEEE Security and Privacy, Volume 8, Number 4, July-August 2010.E. De Cristofaro, S. Jarecki, J. Kim, G. Tsudik.
            Privacy-preserving Policy-based Information Transfer.
            PETS 2009.S. Jarecki, X. Liu.
            Efficient Oblivious Pseudorandom Function with Applications to Adaptive OT and Secure Computation of Set Intersection.
            TCC 2009.
    
    
    
    
    
	
	
	
	
		Webmaster E. De Cristofaro
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/iarpa-app/index.html
##-----------------TITLE------------------------##
Automatic Privacy Protection Program
##------------------TEXT------------------------##
IARPA-APP
		Automatic Privacy Protection Program 
	

	
	
	
	
		Site Pages
	
		
			HomeCodeRelated WorkPublications
		
	

		  
	
	
	

	
	

The Project
The goals of IARPA's Automatic Privacy Protection program are to "develop and demonstrate practical,
sound automated methods for the use of private information retrieval techniques in Intelligence Community systems,
to automatically protect the private data of untargeted individuals, to assure that mandated policies are enforced,
and to enable more effective interagency and intergovernmental data sharing for improved security."

The governemnt, through IARPA, is funding four research teams to develop innovative new
techniques for practical private information retrieval (PIR) and one team to develop techniques
for monitoring queries for policy assurance.




UCI Team
Stanislaw Jarecki, Gene Tsudik (Principal Investigators).
Emiliano De Cristofaro, Xiaomin Liu, Yanbin Lu.



Funding Grants
This project is supported by the U.S. Intelligence Advanced Research Projects Activity under grant: FA8750-09-2-0071.



	
	
	
	
		Webmaster E. De Cristofaro
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/ndn/publications.html
##-----------------TITLE------------------------##
Named Data Networking
##------------------TEXT------------------------##
Named Data Networking
	
      
      
	
	    Home
	  
	    Resources
	  
	    Publications and Reports
	  
      
      
	Publications
	C. Ghali, G. Tsudik, C. A. Wood, E. Yeh, Practical Accounting in Content-Centric Networking, the IEEE/IFIP Network Operations and Management Symposium (NOMS), Istanbul, Turkey, 2016.C. Ghali, M. A. Schlosberg, G. Tsudik, C. A. Wood, Interest-Based Access Control for Information Centric Networks, the 2nd ACM Conference on Information Centric Networking (ICN), San Francisco, CA, 2015.C. Ghali, A. Narayanan, D. Oran and G. Tsudik, Secure Fragmentation for Content-Centric Networks, the 14th IEEE International Symposium on Network Computing and Applications, Cambridge, MA, 2015. (Best Paper award)A. Compagno, M. Conti, C. Ghali and G. Tsudik, To NACK or not to NACK? Negative Acknowledgments in Information-Centric Networking, the 24th International Conference on Computer Communications and Networks (ICCCN), Las Vegas, NV, 2015.A Compagno, M. Conti, P. Gasti, L. V. Mancini1, G. Tsudik, Violating Consumer Anonymity: Geo-locating Nodes in Named Data Networking, the 13th International Conference on Applied Cryptography and Network Security (ACNS), New York, 2015. (Best Student Paper award)J. Burke, P. Gasti, N. Nathan and G. Tsudik, Secure Sensing over Named Data Networking, 13th International Symposium on Network Computing and Applications (NCA), Cambridge, MA, 2014.C. Ghali, G. Tsudik and E. Uzun, Network-Layer Trust in Named-Data Networking, in ACM SIGCOMM Computer Communication Review (CCR), vol. 44, no. 5, pp. 12-19, 2014.M. Almishari, P. Gasti, N. Nathan and G. Tsudik, Optimizing Bi-directional Low-Latency Communication in Named Data Networking, in ACM SIGCOMM Computer Communication Review (CCR), vol. 44, no. 5, pp. 13-19, 2014.M. Ambrosin, M. Conti, P. Gasti and G. Tsudik, Covert Ephemeral Communication in Named Data Networking, 9th ACM Symposium on Information, Computer and Communications Security (AsiaCCS), Japan, 2014.C. Ghali, G. Tsudik and E. Uzun, Needle in a Haystack: Mitigating Content Poisoning in Named-Data Networking, in NDSS workshop on Security Emerging Networking Technologies (SENT), San Diego, CA, 2014.C. A. Wood and E. Uzun, Flexible End-to-End Content Security in CCN, IEEE Consumer Communications & Networking Conference (CCNC), Las Vegas, NV, 2014.M. Conti, P. Gasti and M. Teoli, A Lightweight Mechanism for Detection of Cache Pollution Attacks in Named Data Networking, in Computer Communications, vol. 57, no. 16, pp. 3178-3191, 2013.A. Narayan, N. Nathan, D. Oran and G. Tsudik, Secure Fragmentation for Content-Centric Networks, CCNxCon2013, 2013.A. Compagno, M. Conti, P. Gasti and G. Tsudik, Poseidon: Mitigating Interest Flooding DDoS Attacks in Named Data Networking, IEEE Local Computer Networks (LCN), Australia, 2013.M. Teoli, Cache Pollution Attacks and Detection in Named Data Networking, Master's Thesis, University of Padova (Italy), 2013.A. Compagno, Poseidon: Mitigating Interest Flooding DDoS Attacks in Named Data Networking, Master's Thesis, University of Padova (Italy), 2013.A. Chaabane, E. De Cristofaro, M. A. Kaafar and E. Uzun, Privacy in Content-Oriented Networking: Threats and Countermeasures, ACM SIGCOMM Computer Communication Review (CCR), vol. 43, no. 3, pp. 25-33 ,2013. (Also invited to be presented at SIGCOMM 2013 as one of the two "Best CCR Papers").P. Gasti, G. Tsudik, E. Uzun and L. Zhang, DoS and DDoS in Named-Data Networking, the 22nd International Conference on Computer Communications and Networks (ICCCN), Bahamas, 2013.G. Acs, M. Conti, P. Gasti, C. Ghali and G. Tsudik, Cache Privacy in Named-Data Networking, the 33rd International Conference on Distributed Computing Systems (ICDCS), Philadelphia, PA, 2013.
	J. Burke, P. Gasti, N. Nathan and G. Tsudik, Securing Instrumented Environments over Content-Centric Networking: the Case of Lighting Control, the 2nd IEEE International Workshop on Emerging Design Choices in Name-Oriented Networking (NOMEN), Italy, 2013.S. DiBenedetto, P. Gasti, G. Tsudik and E. Uzun, ANDaNA: Anonymous Named Data Networking Application, the 19th Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, 2012.Z. Zu, P. Gasti, Y. Lu, J. Burke, V. Jacobson and L. Zhang, A New Approach to Securing Audio Conference Tools, Asia Workshop on Future Internet Technologies (AWFIT), Thailand, 2011.
    
    
      
	Copyright 2010, sprout.ics.uci.edu
      

      
	webmaster
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/ndn/resources.html
##-----------------TITLE------------------------##
Named Data Networking
##------------------TEXT------------------------##
Named Data Networking
		
      
	  
		
			Home
		  
			Resources
		  
			Publications and Reports
		  
      
	  
		Presentation Slides
		
		  NDN Security
		NSF FIA PI Meeting - Berkeley, CA, May 25-26, 2011
		
		
		  ANDaNA: Anonymous Named Data Networking Application
		CCNx Community Meeting - Parc, Palo Alto, CA, September 9-13, 2011
		
		
		  ANDaNA: Anonymous Named Data Networking Application (poster)
		CCNx Community Meeting - Parc, Palo Alto, CA, September 9-13, 2011
		
		
		  Named Data Networking
		IEEE CCW, October 10, 2011
		
		Useful Links
		
		  Named Data Networking
		
		
		  CCNx
		
		
		  NDN Wiki
		
	  
	  
        
		  Copyright 2010, sprout.ics.uci.edu
        
        
		  webmaster
##------------------URL-------------------------##
http://sprout.ics.uci.edu/projects/ndn/index.html
##-----------------TITLE------------------------##
Named Data Networking
##------------------TEXT------------------------##
Named Data Networking
		
      
	  
		
			Home
		  
			Resources
		  
			Publications and Reports
		  
      
	  
		
		
		
		
		
		This project investigates a new Internet architecture called
		Named Data Networking (NDN). NDN capitalizes on strengths -
		and addresses weaknesses - of the Internet's current
		host-based, point-to-point communication architecture in
		order to naturally accommodate emerging patterns of
		communication. By naming data instead of their location, NDN
		transforms data into a first-class entity.
		
		 While the current
		Internet secures the data container (i.e., the communication channel), NDN secures the
		contents itself. Thanks to this design choice, trust in data is decoupled from
		trust in hosts, enabling several radically scalable
		communication mechanisms such as automatic caching to
		optimize bandwidth. 
		
		The project studies the technical
		challenges that must be addressed to validate NDN as a
		future Internet architecture: routing scalability, fast
		forwarding, trust models, network security, content
		protection and privacy, and fundamental communication
		theory. The project uses end-to-end testbed deployments,
		simulation, and theoretical analysis to evaluate the
		proposed architecture, and is developing specifications and
		prototype implementations of NDN protocols and
		applications.
		
		
	  
	  
        
		  Copyright 2010, sprout.ics.uci.edu
        

        
		  webmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/restoration.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft

    
    
      Hummingbirds

      Before restoration became her focus, Lynn Carpenter studied Costa Rica's hummingbirds.  Four species are represented in EcoRaft.  Place your mouse cursor over the images to read about them.
	

	

	

	

	

	

	
      
      A Thriving Ecosystem
      The team hikes through thriving rainforest to collect data.      
	

	

	

	

	

	

	

	

	

	

	

	

	

	

	Restoration at Work
	By bringing native plants to overgrazed areas, the team helps the environment return to its original state more quickly.
	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	
	
Last updated: September 1, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/bryant.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Bryant Hornick

      Position: Programmer

Beginning 2nd yr. Bachelor's student

Email: bhornick [at] uci.edu

    

      

      What do you do on the project? I started off working primarily on the computer game version, but I kind of got pulled away, so now I'm just working on various programming tasks for the installation project.

How long have you been with the group? I started around January or February.

Why are you working on the project? Probably for experience.

What do you think is the overall goal of the project? To make a life-changing exhibit about ecological restoration to teach kids.

What was your favorite part of [or working on] the project? I guess getting to work with all the people here and getting to go to the Discovery Science Center and playing with the kids.



Have you gotten any awards and/or publications? Not yet.

Any other questions and/or answers would you like on your site? I don't think so.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/sara.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Sara Goetz

      Position: Website Programmer

2nd yr. Master's student in ACE Program

Email: sgoetz [at] uci.edu

    

      

      What do you do on the project? I have been working on designing and building the website and also maintaining our server.

How long have you been with the group? For EcoRaft, I've been with the group since the beginning of the summer. I was also involved in the VirtualRaft project last fall.

Why are you working on the project? Some of my own work involves web communities and web design, so this is a good way for me to build up those skills. I also think [EcoRaft] is an interesting project that's fun to work on.

What do you think is the overall goal of the project? The goal is to create something that is both fun and educational.

What was your favorite part of [or working on] the project? I really enjoy doing the website design. I also like doing the demos and seeing people have a great time with them.

What are your career goals/interests? I don't know about goals yet, but I'm interested in web communities and online social interaction.

What are the other projects you've worked on? In addition to my earlier involvement with the Virtual Raft project, I've worked on various web community design projects, as well as the beginning stages of an automobile interface evaluation and redesign project.

Have you gotten any awards and/or publications? Not yet.

Any other questions and/or answers would you like on your site? Not any I can think of.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/riley.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Riley Pratt

      Position: Biological Consultant

Graduate student

Email: prattr [at] uci.edu

    

      

      What do you do on the project? In short, my job was to advise on the biological content and structure of the virtual ecosystem in EcoRaft.  I helped select the species that exist in the ecosystem and suggested how they should interact with other species and the non-living environment.  I also wrote the natural history descriptions for each of the species displayed on the EcoRaft website, helped set up and take down the installation at public demonstrations, and provided general suggestions based on the reactions of participants.

How long have you been with the group? I guess I came on board spring quarter, around April. 

Why are you working on the project? First off, I thought it was a neat way to make people aware of the field of restoration ecology and just a unique way to get out our message of what we do and what we're trying to find out in terms of restoration. Working with a different group entirely, like a computer science group, is really neat and I've been able to learn a lot of things I don't think I otherwise would have.

What do you think is the overall goal of the project? I think the goal is to come up with a really neat teaching tool that helps young people understand the field of restoration ecology and hopefully come away with some of the principles behind it.

What was your favorite part of [or working on] the project? It's been kind of a nice change from what I've done before this, so even though I do restoration stuff, I wasn't working with hummingbirds, so I had to learn a lot about them and research them, so it was fun learning about new organisms and plants and systems. It's really neat to see all these people with really different backgrounds can come together and make something useful. 

What are your career goals/interests? Right now, I just want to finish my research and get my degree.

What are the other projects you've worked on? I haven't worked on something like this, my background is mostly in conservation biology, so I worked in Hawaii for the US Geological Survey, studying birds. Right now I'm working with a group in Puerto Rico, so I generally work with people outside of UCI.

Have you gotten any awards and/or publications? I got one publication last year and a couple of technical reports for the US Geological Survey.

Any other questions and/or answers would you like on your site? I don't think so.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/erika.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Erika Ramos

      Position: Evaluator

Beginning 4th yr. bachelors student

Email: eframos [at] uci.edu

    

      

      What do you do on the project? I'm doing a lot of the evaluation for this project, like conducting interviews with our subjects, collecting and analyzing the data, and thinking of questions to ask in the interviews. I also did some sound coding.

How long have you been with the group? I think since April or May, whenever [EcoRaft] started.

Why are you working on the project? Because I want to--I thought it was interesting because I saw Bill [Tomlinson's] past work and wanted to be a part of it, and I'm glad I asked to be in it. I'm mostly working on it for experience and grad school.

What do you think is the overall goal of the project? To educate our subjects, or just people in general, people who experience the project and get something out of it.

What was your favorite part of [or working on] the project?I guess interacting with our subjects (the kids), like at Discovery Science Center. That was really cool, so I'm looking forward to do that at SIGGRAPH.

What are your career goals/interests? I kind of want to be in the medical field, because it seems interesting to me, but I'm also leaning towards bioinformatics.

What are the other projects you've worked on? [EcoRaft] is my first research project.

Have you gotten any awards and/or publications? Not yet.

Any other questions and/or answers would you like on your site? I guess that's it.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/craig.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Craig Yoho

      Position: Technical Artist

5th Year Undergraduate

Email: cyoho [at] uci.edu

    

      

      What do you do on the project?I do a lot of the 3D modeling, all of the texturing, and a little bit of the programming.  I've been helping to modify our custom exporter that takes models I make in 3ds max and turns them into something the game engine understands.  Mostly I find ways to make Robert (the graphics programmer) work harder.

How long have you been with the group? Since April.

Why are you working on the project?Mostly for experience.
I'm interested in both the art and the coding, and this seemed like a
good place to do both at the same time, which is pretty rare.

What do you think is the overall goal of the project?Well, along the way, to teach kids some important ecological things, but also to get this new form of technology tested.  We're using a lot of technology that's been around for a while, but no one's put it all together to do what we're doing.  And restoration ecology is a difficult subject to teach kids, so hopefully the EcoRaft will present it in a way that's engaging enough to be useful.

What was your favorite part of [or working on] the project? Making rodents dance.  But seriously, the hummingbirds really pushed me to learn how to texture things.  So, that involved modifying the model exporter to handle the texture coordinates better, how to build the model with clean texture coordinates, and how to get a 2D image to wrap around it in a predictible way.  It was all good stuff I needed to learn, and it all came together fairly well, I think.

What are your career goals/interests? Probably game design, or at least some place that I can do both the art and the coding.  Game development seems to be the most interesting place for technical artists, and the place where we're most desired. 

What are the other projects you've worked on? I haven't worked on any research projects besides the EcoRaft.

Have you gotten any awards and/or publications? A buddy and I earned a gold medal at the 2001 SkillsUSA/VICA national competetion for 3D Visualization/Animation.  I'm also an honorary SURF Fellow.  That's about it.

Any other questions and/or answers would you like on your site? Nope.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/eric.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Eric Baumer

      Position: Programmer

Beginning 2nd yr. Graduate student

Email: ebaumer [at] uci.edu

    

      

      What do you do on the project? I put together the sound system and coded a couple of things. I've been working a little bit on stuff with the plants, like when you move plants to another island, rather than having the seeds jump in a straight line, they jump in arcs, and stuff on the hummingbirds' behavior. So basically a little bit of everything. 

How long have you been with the group? I started working with Bill [Tomlinson] last fall, but I started working on the EcoRaft project in early April.

Why are you working on the project? Partly because it's a summer job, partly because there are some really interesting coding problems, and partly because it's related to some of my research interests, like synthetic social interaction, and I want to try to find some interesting way for the hummingbirds to interact with one another, [in relation to] their social behavior.

What do you think is the overall goal of the project? I don't think there is a single unified goal--one of the goals is to explore the limits of technology, one of the goals is to create an engaging [environment], and one of the goals is definitely education, trying to educate people about how restoration ecology works, why it's difficult, why it's beneficial, and why it's worth doing. I think that's the most important goal, with the educational aspects.

What was your favorite part of [or working on] the project? Probably working on the hummingbird behavior.

What are your career goals/interests? If and when I finish my Ph.D, I'd like to become a professor, probably of informatics, not computer science, because I like incorporating the human factor into my work, and do research and teach--that may change in the next five years as I finish my Ph.D, but that's pretty much where I see myself going.

What are the other projects you've worked on? I worked a little bit on the VirtualRaft project, but when I came here, they had pretty much finished most of it. I worked a little bit on the social behavior in it. I also worked on an emotion-like state generator for a robotic office assistant before.

Have you gotten any awards and/or publications? I've had two workshop publications, one at CHI and AAAI, mostly about behavior and social interactions.

Any other questions and/or statements would you like on your site? Anyone who likes playing Ultimate Frisbee, talk to me, because we need more people on the team. Shameless self-promotion.       













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/stefan.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Stefan Marinov

      Position: Programmer/Animator

3rd yr. Bachelor's student

Email: smarinov [at] uci.edu

    

      

      What do you do on the project? I'm doing some programming on the project, and also some animating.

How long have you been with the group? I joined last quarter, so about six months.

Why are you working on the project? I was looking for a job, and I picked Bill's class, and I thought it would be a good learning experience and it sure has. I just wanted to experience what it was like working with other people on a project like this. 

What do you think is the overall goal of the project? I think the overall goal is to get a suitable software that deliver fun for kids that would be educational and on the same token for people who know more about technology, it's about exploring different technologies.

What was your favorite part of [or working on] the project? I must say my favorite part would be modeling the plants. Since I haven't done it before, it took a lot of time and restarts, just basically banging your head on the same thing over and over again trying to get it to work.

What are your career goals/interests? First graduate from this place, and go to business school or go work in my dad's company.

What are the other projects you've worked on? I haven't done any projects for UCI, but I've done web design and stuff like that for other companies.

Have you gotten any awards and/or publications? I've gotten an academic achievement award.

Any other questions and/or answers would you like on your site? Not really.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/grace.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Grace Chiang

      Position: Animator

3rd yr. Bachelor's student

Email: gschiang [at] uci.edu

    

      

      What do you do on the project? I do plant modeling and I put them into the demo. 

How long have you been with the group? Since spring quarter, around April.

Why are you working on the project? I like the idea of making something for education purposes and I wanted to learn more about how to do animation.

What do you think is the overall goal of the project? Restoration ecology, where you show little kids it's easy to destroy an environment but it's possible to restore it.

What was your favorite part of [or working on] the project? Working with other people and seeing their abilities, just being able to work with them.

What are your career goals/interests? I like working with [Adobe] Photoshop, it's kind of what I do. I want to go to grad school, too.

What are the other projects you've worked on? This is my first one. 

Have you gotten any awards and/or publications? Not yet.

Any other questions and/or answers would you like on your site? No.       













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/simon.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Man Lok Yau

      Position: Programmer

Beginning 1st Ph. D year

Email: mlyau [at] uci.edu
Website: http://www.ics.uci.edu/~mlyau/
    

      

      What do you do on the project? I work on the game 
version, and the networking code in the installation version.

How long have you been with the group? Nearly two years.

Why are you working on the project? I like programming and this project is really fun.

What do you think is the overall goal of the project? To use computers to connect people so they can be used as a tool for educational purposes and to help the connection between parents, kids, and friends.

What was your favorite part of [or working on] the project? The team is really great and I like working with everyone.

What are your career goals/interests? I want to be a researcher.

What are the other projects you've worked on? I usually work on projects on my own, like games or small programs. I also worked on the VirtualRaft project last year.

Have you gotten any awards and/or publications? I have a CALIT2 Fellowship, UCI ICS Dean's Fellowship, SURP, and UROP Fellowships, and a UCI ICS Outstanding Contribution to Research Award. I was also a finalist for the Peoria Prize for Creativity. I have three publications, all of which are with Bill [Tomlinson] - two for CHI, one for a SIGGRAPH sketch.

Any other questions and/or answers would you like on your site? No.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/robert.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft




    

    

      Robert Moodey

      Position: Graphics Programmer

'05 Graduate

Email: rmoodey [at] uci.edu

    

      

      What do you do on the project? I did various graphic programming jobs. I implemented a technique known as blending and another known as masking, and finally I introduced shaders and normal mapping to the hummingbirds. Most of my work is done in code, but I'm closely related to [Adobe] Photoshop and 3D Studio Max--all the actual graphics come from there.

How long have you been with the group? Since spring quarter, around March.

Why are you working on the project? It was very interesting to me, and it was a challenge to make the hummingbirds look good.

What do you think is the overall goal of the project? The goal of the project is to set up a system to show ecology restoration but to also be implemented in a general scale so it can be placed in science centers all over the nation.

What was your favorite part of [or working on] the project? Probably the late-night code-a-thons.

Do you have any career goals/interests? Definitely. I would like to some day work for a video game developer.

What are the other projects you've worked on? I did a research project with Professor Pajarola, where I took a large model of a building and made a system to keep track of all the parts so it could rendered all in one frame on multiple PCs before being recombined into one graphics card.

Have you gotten any awards and/or publications? Not yet.

Any other questions and/or answers would you like on your site? No.      













Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/bill.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft

    
    
      Bill Tomlinson
      Position: Assistant Professor of Informatics and Drama
Email: wmt [at] uci.edu
Website: http://www.ics.uci.edu/~wmt/
	
      
      What do you do on the project? I'm one of the lead researchers on the project. My responsibilities include overseeing the implementation of various aspects, helping to get the animation, integrating the system, and thinking about how to properly evaluate it to see whether or not it has educational value. I also oversee the production, programming, and demonstrations.
How long have you been with the group? I've been with UCI for two years and just started my third year. I've been the head of this particular project for the whole time, which we've been working on for about five to six months.
Why are you working on the project? VirtualRaft, my previous project, was an interesting new piece of technology of how things work that didn't really have a societal impact, so I'm working with an ecologist, Lynn Carpenter, to make a version [of VirtualRaft] to provide a learning experience in the topic of restoration ecology. [We hope] that this will be exhibited at a science museum like the Discovery Science Center.
What do you think is the overall goal of the project? The main goal of the project is to make an interactive museum exhibit to help kids learn about ecology and restoring it.
What was your favorite part of [or working on] the project? Working with all of the research group.
What are your career goals/interests? The thing I'm interested in is building and enabling technologies in creative and educational products. I think there're a lot of interesting things that come out of autonomous agents' research and human computer interaction research that can help put forward creative projects like films and video games. I think that interactive technology can be really useful for educational purposes and this project is really helping that push forward.
What are the other projects you've worked on? In reverse chronological order, we did the VirtualRaft project in 2004 and a project called AlphaWolf (which basically simulates the role of a wolf in a wolf pack). I worked on five or six other projects before that and did some work with interactive cinematography, animation films, and little independent films, as well as acting and directing.
Have you gotten any awards and/or publications? See my website at the Publications section.
Any other questions and/or answers would you like on your site? I'd just like to talk about what a great research group we have for this project-a lot of people are really passionate about what they do, and it's exciting to have the chance to work with them.
      





Last updated: October 18, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/virtualRaftProject.html
##-----------------TITLE------------------------##
Bill Tomlinson: Virtual Raft Project
##------------------TEXT------------------------##
Virtual
Raft
Project
      
       
      
      
      Team:
Professor Bill Tomlinson
Man Lok Yau
Jesse Gray

Eric Baumer
Jessica O'Connell
Ksatria Williams
So Yamaoka
Sara Goetz      
      Description
The Virtual Raft Project is a multidisciplinary undertaking seeking to
create communities of believable autonomous characters that inhabit
heterogeneous networks of computational devices. In particular, the
project is interested in allowing the characters to break the plane of
the traditional desktop screen. To this end, we have designed an
interactive installation featuring a novel tangible paradigm for
interacting with the characters. This paradigm involves the use of a
mobile device, such as a Tablet PC or handheld computer, as a “virtual
raft” by which a character may be transported among several virtual
worlds. By enabling the character on the raft to react in real time to
the raft’s motion in real space, this installation encourages
participants to become physically engaged with virtual characters. We
believe that this physical engagement can lead to an increase in the
believability of the characters.  
      
      Video
Please watch a
short video about the project.  (~33MB, ~3.5 min, requires the free Quicktime 6 player.)
     
Also, here is another video of a group of homeschooled children and their parents interacting with the system. (~27MB, ~4 min, requires Quicktime 6).  (Here is a version of the video that will work with older versions of Quicktime.  The video is the same as above, but the file is ~63MB).

      
      Images
      
       
      A "virtual raft" is brought up to a "virtual
island."  
       
      A community of autonomous characters 
gathers around a central fire. 
        
      When the raft is tipped, the character needs to
      
try to keep its
balance. 
      
       Publications
      

B. Tomlinson. 2005. "Negative Behavior Space in the Design of Interactive Agents." In: Artificial Intelligence and Interactive Digital Entertainment (AIIDE 05) conference, Marina del Rey, CA. AAAI. (To appear.)

B. Tomlinson. 2005. "A Heterogeneous Animated Platform for Educational Participatory Simulations." In: 10th Computer Supported Collaborative Learning (CSCL 05) conference. Taipei, Taiwan. (To appear.)

B. Tomlinson, J. Gray, M. L. Yau. 2005.
“Multiple Virtual Rafts: A Multi-User Paradigm for Interacting with
Communities of Autonomous Characters.” In: Late Breaking Results (Interactive Poster), ACM Conference On Human Factors In Computing Systems (CHI
2005), Portland, OR.

B. Tomlinson, M. L. Yau, J. O’Connell, K. Williams, S. Yamaoka. 2005.
“The Virtual Raft Project: A Mobile Interface for Interacting with
Communities of Autonomous Characters.” In: Conference Abstracts and
Applications, ACM Conference On Human Factors In Computing Systems (CHI
2005), Portland, OR.

B. Tomlinson. 2005. “Designing Affective Interaction
Paradigms for Animated Characters.” In: Proceedings of the Human
Computer Interaction Consortium Winter Meeting (HCIC 05), Fraser, CO.
            
Exhibition
 This project had its first public exhibition on November
19, 2004 at the opening of the new Cal-(IT)2 on the campus of UCI.
It will also be shown at:CHI 2005 in the new Interactivity venueCSCL 2005 as an interactive presentationSIGGRAPH 2005 in the Emerging Technologies program.
      
       
      The version of the project shown at Cal-(IT)2
worked 
with multiple virtual rafts at the same time.
      
         Presentations
      
Jessica O'Connell, SURP Multidisciplinary Seminar, UCI, March 2005
Man Lok Yau, SURP Multidisciplinary Seminar, UCI, March 2005
Bill Tomlinson, Cal-(IT)2 opening
(tours), November 2004. 
Man Lok Yau, Southern California Conference on Undergraduate
Research, November 2004
Bill Tomlinson, UCI Informatics Seminar, October 2004
Bill Tomlinson, ASU Artist's Lecture, September 2004
      
      Future Work
      The team currently has collaborations under development
with Professor Lynn Carpenter in the Department of Ecology and Evolutionary Biology at UCI; with Professor Thomas Alspaugh and his research group in Informatics at
UCI; with Discovery Science Center in Orange County, CA; and with the International Wolf Center in Ely, MN.
       
      
      
      
       
       Return to Main Site
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/ecoRaft/exhibitgallery.html
##-----------------TITLE------------------------##
The EcoRaft Project
##------------------TEXT------------------------##
About the ProjectInteractive ExhibitEcoRaft: The GameFeedbackExtrasFor Parents & TeachersFor Scholars & MediaEcoRaft GroupSupport EcoRaft

    
    
	Exhibit Gallery
	A
collection of photos from three of our demonstrations. Click on the
thumbnails to see larger versions.
      
      SIGGRAPH 2005
      Photographs from our exhibit in Emerging Technologies.      
	
	

	

	

	

	

	

	
	
	

	

      
      Homeschool Visit
      On
August 19, 2005, nine homeschool children and their parents visited our
lab to interact with the project (giving us signed permission to use
the experience for our research). Photographs include the children,
their parents, and our team observing and recording the interaction. In
addition to usual play, the parents acted as an opposing force that the
children had to prevent from destroying the islands' ecosystems.
	
	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

 	

	

	

	

	

	

	

	

	

	
	

Last updated: August 31, 2005
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/GreenIT/
##-----------------TITLE------------------------##
Index of /~wmt/courses/GreenIT
##------------------TEXT------------------------##
Index of /~wmt/courses/GreenIT
NameLast modifiedSizeDescriptionParent Directory   -  GreenITCourseProposal.doc03-Mar-2008 09:14   29K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/Prog4IntF05/
##-----------------TITLE------------------------##
Index of /~wmt/courses/Prog4IntF05
##------------------TEXT------------------------##
Index of /~wmt/courses/Prog4IntF05
NameLast modifiedSizeDescriptionParent Directory   -  KnockKnockNetworking.zip26-Oct-2005 13:58  2.3K Prog4IntF05Assignment1.html27-Sep-2005 16:57   12K Prog4IntF05Assignment1.zip27-Sep-2005 17:08  5.4K Prog4IntF05Assignment2.html09-Oct-2005 20:57  6.3K Prog4IntF05Assignment3.html19-Oct-2005 06:55  6.1K Prog4IntF05Assignment4.html26-Oct-2005 14:02  6.7K Prog4IntF05FinalProject.html02-Nov-2005 16:03   12K Prog4IntF05Syllabus.html01-Nov-2005 17:40   63K Prog4IntLecture1Intro.ppt25-Oct-2005 22:18  1.7M Prog4IntLecture2Java.ppt25-Oct-2005 22:18   73K Prog4IntLecture3Graphics.ppt25-Oct-2005 22:18  5.2M Prog4IntLecture4DevelopmentEnvironments.ppt25-Oct-2005 22:18  108K Prog4IntLecture7Input.ppt25-Oct-2005 22:18  1.5M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/ICS131W05/
##-----------------TITLE------------------------##
Index of /~wmt/courses/ICS131W05
##------------------TEXT------------------------##
Index of /~wmt/courses/ICS131W05
NameLast modifiedSizeDescriptionParent Directory   -  Lecture1.ppt07-Jan-2005 13:53  734K Lecture2.ppt07-Jan-2005 13:53  408K Lecture6.ppt18-Jan-2005 19:06  113K Lecture7.ppt21-Jan-2005 14:55   72K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/ScriptAnalysisW06/
##-----------------TITLE------------------------##
Index of /~wmt/courses/ScriptAnalysisW06
##------------------TEXT------------------------##
Index of /~wmt/courses/ScriptAnalysisW06
NameLast modifiedSizeDescriptionParent Directory   -  ScriptAnalysisW06Syllabus.html27-Feb-2006 14:43   37K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/Inf201F11/
##-----------------TITLE------------------------##
Index of /~wmt/courses/Inf201F11
##------------------TEXT------------------------##
Index of /~wmt/courses/Inf201F11
NameLast modifiedSizeDescriptionParent Directory   -  Lecture_Week1_Introductions.pptx26-Sep-2011 16:04   80K Lecture_Week2_ResearchInterests.pptx10-Oct-2011 20:24   80K Lecture_Week3_PriorWork.pptx10-Oct-2011 20:25   62K syllabus.html12-Oct-2011 13:18   18K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/Inf201F12/
##-----------------TITLE------------------------##
Index of /~wmt/courses/Inf201F12
##------------------TEXT------------------------##
Index of /~wmt/courses/Inf201F12
NameLast modifiedSizeDescriptionParent Directory   -  syllabus.html21-Oct-2012 17:09   20K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/ICS5_W13/
##-----------------TITLE------------------------##
ICS 5 Class project
##------------------TEXT------------------------##
ENVIRONMENTAL ISSUES MAP BY ICS 5
		This map shows the top environmental issues around the world.
	Click on a country to see a description of the top issues in that country. 
		This map is a class project by the "ICS 5: Environmental Issues in Information Technology" undergraduate course at UCI.
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/Inf241S14/
##-----------------TITLE------------------------##
Index of /~wmt/courses/Inf241S14
##------------------TEXT------------------------##
Index of /~wmt/courses/Inf241S14
NameLast modifiedSizeDescriptionParent Directory   -  Lecture1.pptx04-Apr-2014 22:53  196K papers.zip30-Mar-2014 20:01  9.4M papers/20-Mar-2014 16:28    -  syllabus.html04-Apr-2014 22:54   29K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/ICS131S06/
##-----------------TITLE------------------------##
Index of /~wmt/courses/ICS131S06
##------------------TEXT------------------------##
Index of /~wmt/courses/ICS131S06
NameLast modifiedSizeDescriptionParent Directory   -  BaaseCh10.pdf12-Apr-2006 19:11  2.4M Lecture1Intro.ppt11-Apr-2006 20:02  668K Lecture3SocialIssues.ppt11-Apr-2006 20:02  302K Lecture4SocialAspectsI.ppt13-Apr-2006 19:58  798K Lecture5SocialAspectsII.ppt18-Apr-2006 15:51  172K Lecture6Ethics.ppt22-Apr-2006 14:19   59K Lecture12Education.ppt18-May-2006 20:39  4.8M Lecture13Enviro.ppt18-May-2006 20:39   79K Lecture14CSCW.ppt18-May-2006 20:39  1.8M Lecture15Privacy.ppt03-Jun-2006 16:13  220K Lecture16Email.ppt03-Jun-2006 16:13  2.1M Lecture17Games.ppt03-Jun-2006 16:13  1.3M Lecture18SocialRelations.ppt03-Jun-2006 16:14  4.8M Lecture19Robotics.ppt08-Jun-2006 15:49  1.2M Lecture20Epilogue.ppt08-Jun-2006 15:49   87K Negroponte.pdf03-Apr-2006 15:50  444K Watts.pdf03-Apr-2006 21:15  1.5M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wmt/courses/US12B/
##-----------------TITLE------------------------##
Index of /~wmt/courses/US12B
##------------------TEXT------------------------##
Index of /~wmt/courses/US12B
NameLast modifiedSizeDescriptionParent Directory   -  3DAnimationIICharacter.ppt21-Feb-2007 16:47  1.9M FinalGame.doc05-Mar-2007 15:08   50K us12b-syllabus.html05-Mar-2007 15:12   21K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics32/Schedule.html
##-----------------TITLE------------------------##
ICS 32 Winter 2016, Schedule
##------------------TEXT------------------------##
ICS 32 Winter 2016 |
News |
Course Reference |
Schedule |
Project Guide |
Notes and Examples |
About Alex








ICS 32 Winter 2016
   Schedule







Assigned readings are a combination of pages from this web site (presented as links to those pages) and notes and examples from lecture (presented as links preceded by N:).  It is a good idea to skim the assigned reading before the lecture for the main ideas, attend lecture, and then to go through the assigned reading again to fill in the details that you missed, both in your initial skim of the reading and in the lecture.

DateLecture TopicsReadingsProject WorkWeek 1Tu 1/5
      Course introductionWhat are software libraries?The value of abstractionDesigning and writing larger programs
    
      N: Course Introduction
    
    Th 1/7
      Files, revisitedExceptions and exception handlingtry statementstry, except, else, and finally clauses in try statements
    
      N: Exceptions and Files
    
      
    F 1/8
      Lab sections begin meeting todayComplete Assignment #0 by the end of lab todayChoose a partner for Project #1 todayStart Project #1 in lab today
    Week 2Tu 1/12
      Writing programs incrementallyFinding "stable ground" as easily and as often as possibleHigher-level file accessFile systems and related modules in Python's standard libraryPathsRecursive data structuresFile systems as a recursive data structureRecursive functionsWhen recursion is — and is not — appropriate in Python
    
      N: Paths and File SystemsN: Recursion
    
    Th 1/14
      Overview of computer networks (briefly)Network input and outputSome necessary background on how the Internet worksIP addresses, ports, packets, routers, etc.SocketsA socket's input and output streamsServers and clientsUsing sockets in PythonBytes vs. stringsString encodings (e.g., UTF-8) (briefly)
    
      N: Networks and Sockets 1
    Week 3M 1/18University Holiday: Martin Luther King, Jr. Day — NO LABS TODAYTu 1/19
      An example Python socket "echo" clientUsing "pseudo-file" objects to treat socket input/output as textRevisiting the value of splitting complex functions into shorter, simpler ones
    
      N: Networks and Sockets 2
    
    W 1/20
      Choose a partner for Project #2 todayProject #1 due 11:59pm
    Th 1/21
      Modules and the import statementNetwork protocolsThe importance of knowing who and what to trustPublic and private functions in a moduleImplementing a simple, custom protocol in Python
    
      N: ModulesN: Protocols
    
    Week 4Tu 1/26
      Implementing a simple, custom protocol in Python (continued)Namespaces and name resolution (briefly)More details about import and multiple modulesNaming conventions for modules
    
      N: ModulesN: Protocols
    
    Th 1/28
      Why namedtuples are a limited way to create new kinds of objectsClassesObjects and their attributesConstructors, initialization, methods, and the self parameterThe difference between method calls and function callsWhy we specify some parts of a class as public and others as privateNaming conventions for classes
    
      N: Classes
    
    Week 5Tu 2/2
      Pushing out the boundaries even further: the webURLsHTTPGET requestsWriting a Python program that downloads a web page given its URL
    
      N: URLs and HTTP
    
    W 2/3
      Project #2 due 11:59pm
    Th 2/4
      Why standards are so important on the InternetWhy HTTP is for more than just web browsersWeb APIsURLs with query parametersURL encoding (briefly)JSON (JavaScript Object Notation), and why it matters even if you're not writing JavaScriptUsing Python's standard library to access web APIs
    
      N: Web APIs
    
    Week 6Tu 2/9
      MIDTERM: regular lecture time and locationNote: You must attend the Final Exam in the lecture in which you're officially enrolled
    
      
    
    Th 2/11
      More about classesDuck typingInterfacesConsistently designing multiple similar classesUsing objects of multiple similar classes without explicitly knowing their types
    
      N: Duck Typing and Interfaces
    
    Week 7M 2/15University Holiday: Presidents' Day — NO LABS TODAYTu 2/16
      Some background on Othello, in preparation for Project #4Multidimensional list algorithms
    
      N: Two-Dimensional Lists
    
    W 2/17
      Project #3 due 11:59pm
    Th 2/18
      Graphical user interfacesThe tkinter module in the Python standard libraryEvent-based programmingCreating a window and letting tkinter manage itWidgetsBehaviors and events
    
      N: Tkinter Basics
    
    Week 8Tu 2/23
      Buttons, commands, and event handler functionsEvent binding in tkinterThe Canvas widget and drawing one's own graphicsTwo-dimensional graphics and coordinate systemsWidgets, masters, and layoutUsing the grid layout (briefly)Bound methods in Python
    
      N: Object-Oriented Tkinter
    
    Th 2/25
      
    
      
    
    Week 9M 2/29Project #4 due 11:59pmTu 3/1
      
    
      
    
    Th 3/3
      
    
      
    
    Week 10Tu 3/8
      
    
      
    
    Th 3/10
      
    
      
    
    F 3/11Project #5 due 11:59pmFinals WeekTu 3/15
      FINAL EXAM (Lecture B): 7:00pm-9:00pm, ELH 100Note: You must attend the Final Exam in the lecture in which you're officially enrolled
    Th 3/17
      FINAL EXAM (Lecture A): 4:00pm-6:00pm, ELH 100Note: You must attend the Final Exam in the lecture in which you're officially enrolled
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Assignment0/InstallMac.html
##-----------------TITLE------------------------##
ICS 32 Winter 2016, Assignment #0: The ICS 32 Development Environment: Installation and Configuration on Mac OS X
##------------------TEXT------------------------##
ICS 32 Winter 2016 |
News |
Course Reference |
Schedule |
Project Guide |
Notes and Examples |
About Alex








ICS 32 Winter 2016
   Assignment #0: The ICS 32 Development Environment
   Installation and Configuration on Mac OS X







Introduction

This document explains how to install the ICS 32 development environment on a machine running Mac OS X.  You'll need to be sure you pay attention to small details as you follow through them; as with many technical tasks, misspelling words, leaving out punctuation, or other seemingly minor mistakes can have fairly major consequences.







Step 1: Download and installing Python

If you've taken previous coursework in Python, you may already have a version of Python installed on your machine, but it will be important that you use the right version in this course.  What you need is Python 3.5.1 Mac OS X 64-bit/32-bit Installer, which is available at the following link.

Python 3.5.1 Mac OS X 64-bit/32-bit Installer

Mac OS X ships with an older version of Python already installed, though that version is not sufficient for our work in the course, so you'll need to install Python 3.5.1.  Different versions of Python can safely coexist on a system, and the version that ships with Mac OS X should be left as-is (since built-in parts of the operating system depend on it).

The file linked above is a standard Mac OS X installer (.pkg), so you should be able to simply download and install it as you would other Mac OS X software.  Follow the instructions on the installation screens — it's typically best to just accept the default settings.

By accepting the defaults, Python 3.5.1 will be installed in this location on your hard drive:


/Library/Frameworks/Python.framework/Versions/3.5


After the installation is complete, verify that this directory exists, then make a note of that location; we'll call that location your Python root from now on.

Testing your Python installation

Some of you may never have used a Terminal window in Mac OS X before, but we'll occasionally have use for it in this course.  There are a variety of ways to do it on Mac OS X and any of them will do; a quick Google search should reveal at least one way to do it.  Once you've brought up a Terminal window, type the command python3.5 at the prompt and hit the Return key.  You should see something more or less like this show up in the Terminal window as a result:


Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>


If so, type quit() and press Enter to stop the interpreter, then close the Command Prompt window; you're good to go and are ready to launch IDLE!

If you see a different version, that means you have another version of Python installed instead of the one linked above.  (Don't worry too much about the date or the funny-looking "37a07cee5969" numbering; as long as you see "3.5.1", you're where you need to be.)  If, instead, you see an error message similar to this one:


python3.5: Command not found.


then your installation was not successful.  Seek assistance from your classmates who have successfully installed Python 3.5.1.

Starting IDLE

Lastly, you'll want to be sure that you try starting IDLE and verify that it, too, is running the right version of Python.  The easiest way to launch IDLE is to open Applications, then choose Python 3.5, then choose IDLE.app.  You might also like to dock IDLE on the desktop menu bar, since you'll be using it often.

Once you start IDLE, you should see a window pop up, in which will appear the same message you saw when you started Python from the Terminal:


Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>


If so, you're ready to roll!







Congratulations!

Nice work!  You should now be ready to proceed with your work this quarter.  Additional installation guidance will be given as we need additional tools, but this will be sufficient to get started.







Originally written by Alex Thornton, Winter 2013.
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Assignment0/InstallWindows.html
##-----------------TITLE------------------------##
ICS 32 Winter 2016, Assignment #0: The ICS 32 Development Environment: Installation and Configuration on Windows
##------------------TEXT------------------------##
ICS 32 Winter 2016 |
News |
Course Reference |
Schedule |
Project Guide |
Notes and Examples |
About Alex








ICS 32 Winter 2016
   Assignment #0: The ICS 32 Development Environment
   Installation and Configuration on Windows







Introduction

This document explains how to install the ICS 32 development environment on a machine running the Windows operating system.  You'll need to be sure you pay attention to small details as you follow through them; as with many technical tasks, misspelling words, leaving out punctuation, or other seemingly minor mistakes can have fairly major consequences.







Step 1: Show file name extensions

The first step is not to install a software package at all, but to reconfigure a Windows default that is fine for everyday users, but very troublesome for those of us who write programs or do other serious work.  By default, when Windows displays a list of filenames (e.g., in File Explorer, Windows Explorer, or on the desktop), it hides the "file name extension" (i.e., the part of the filename that follows the last dot), so that a file named alex.txt will simply have its name displayed as alex instead, with an icon used to visually differentiate one "type" of file from another.

This default is fine for casual users, but is certain to cause us problems in this course — and routinely causes my students problems in courses where there is programming involved — so everyone needs to turn this off, which is easy to do:

Windows 10: From the desktop, start File Explorer by holding down the Windows key and pressing E.  In the ribbon at the top of the window, click View.  In the ribbon, you'll then find a checkbox titled File name extensions; check that box, then close File Explorer.Windows 8: From the desktop, start File Explorer by holding down the Windows key and pressing E.  In the ribbon at the top of the window, click View, then select Options, then choose Change folder and search options from the dropdown menu.  On the window that pops up, click the View tab, uncheck Hide extensions for known file types, then click OK.Windows 7 or Vista: Start Windows Explorer by holding down the Windows key and pressing E.  Near the upper left corner of the window is a button that says Organize.  Click that button and select Folder and Search Options from the dropdown menu.  On the window that pops up, click the View tab, uncheck Hide extensions for known file types, then click OK.Windows XP: Start Windows Explorer by holding down the Windows key and pressing E.  From the Tools menu, select Folder Options....  On the window that pops up, click the View tab, uncheck Hide extensions for known file types, then click OK.

Seriously!  Do this!  You'll be very glad you did; as a programmer, it is important to see filenames as they are.







Step 2: Downloading and installing Python

If you've taken previous coursework in Python, you may already have a version of Python installed on your machine, but it will be important that you use the right version in this course.  What you need is Python 3.5.1 64-bit for Windows, which is available at the following link.

https://www.python.org/ftp/python/3.5.1/python-3.5.1-amd64.exe

Before you run this, it's not a bad idea to uninstall any other version you already have installed, particularly if you have a slightly older version of 3.5 (e.g., 3.5.0).  Different versions of Python can safely coexist on a system, but they do cause some confusion, so if you don't have a specific reason to maintain multiple versions, it's easiest to keep just one.  You can uninstall Python just as you would any other Windows application (e.g., Add/Remove Programs, Programs and Features, etc., depending on your Windows version).

The file linked above is a standard Windows installer, so you should be able to simply download and run it.  The most important question you'll be asked along the way is where you want to install Python; otherwise, accept all defaults.  I'd suggest accepting the default installation path of C:\Python35, but anything will do, so long as (a) the path does not contain any spaces, and (b) you make a note of what you chose, as you'll need to refer back to that location again.  We'll call that location your Python root from now on.







Step 3: Configuring your Python installation

Starting a Command Prompt

Many of you may never have used a Command Prompt in Windows before, but we may have occasional use for it in this course.  Whenever I specify that you should start a Command Prompt on any version of Windows, you can most easily do this by holding down the Windows key and pressing R, which will pop up a dialog asking you what you would like to run.  Type cmd into the text field and click OK.  (You can also create shortcuts, find it in your Start Menu, or pin it to your taskbar, but cmd will work if you have no other way to do it.)

Understanding the PATH environment variable

A Command Prompt offers a way to navigate the folders on your storage devices (such as your hard drive(s)) manually and run programs and other commands by typing their names.  For example, there is a command-line version of the Python interpreter; the program is called python.exe, and you can execute it by simply typing its name (and the .exe is not necessary, so you can just type python).  However, you can only run a program from the Command Prompt if Windows can find it.  Rather than searching your entire hard drive for the program, it will search only in the places it's been told to search.  The PATH environment variable specifies all of the folders that will be searched.

Because we may occasionally need to run Python programs from a Command Prompt, we'll need to configure the PATH environment variable to include a couple of new folders in the search.

Configuring your PATH environment variable

The PATH environment variable is a list of folders, separated by semicolons, in which Windows will look for a program whenever you try to execute one by typing its name at a Command Prompt.  You can see the current value of your PATH by typing this command at a Command Prompt:


echo %PATH%


Notice that you'll get back a list of folders separated by semicolons, so you might see something like this — though it will be different, depending on what software you've installed previously.  Mine has 20 or so entries, some of which look like this:


C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\WiFi\bin\


Our goal is to add two new folders to this list, while being sure to remove previously-installed versions of Python from it (if there are any).

The easiest way to permanently change environment variables is to bring up the built-in environment variable editor in Windows.  How you get to this editor is slightly different on different versions of Windows.

On Window 10: Right-click the Start button in the lower-left corner of the screen and select System.  A dialog box will pop up.  Click Advanced system settings, which will pop up another dialog box.  In that dialog box, click the Environment Variables button.On Windows 8: Press the Windows key and type Control Panel to search for the Windows control panels.  Once you've selected the Control Panel, select View by: Large Icons, then click on System.  In the window that pops up, click the Advanced System Settings link, then click the Environment Variables... button.On Windows 7 or Vista: Click the Start button in the lower-left corner of the screen, move your mouse over Computer, right-click, and select Properties from the pop-up menu.  Click the Advanced System Settings link, then click the Environment Variables... button.On Windows XP: Right-click the My Computer icon on your desktop and select Properties.  Select the Advanced tab, then click the Environment Variables... button.

Once you've brought up the environment variable editor, you'll do something similar regardless of which version of Windows you're running.  Under System variables in the bottom half of the editor, find a variable called PATH.  If there is is one, select it, click Edit....  Assuming your Python root is C:\Python35, add these two directories to your path: 

C:\Python35
C:\Python35\Scripts


How you edit the path is slightly different, depending on which version of Windows you're running.

On Windows 10: You'll be shown a list of the folders, and given buttons like New, Edit, and Delete.  Use the New button to create the two new entries in the list.On any older version of Windows: You'll be shown a long string of folders separated by semicolons, so you'll have to be sure you get the semicolons right; there should be a semicolon between each folder in the list when you're done.

Also, if you see folders belonging to another Python installation (e.g., C:\Python33), remove them to avoid conflicts.  After making your edits, press OK.

If you don't have a PATH environment variable at all, add it by clicking New..., specifying the Variable name as PATH, and adding these two directories to it:


C:\Python35
C:\Python35\Scripts


Testing your Python installation

Now that you've come this far, you should be ready to test your Python installation.  Start a Command Prompt and type the command python and hit the Enter key.  You should see something more or less like this show up in the Command Prompt window as a result:


Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>>


If so, type quit() and press Enter to stop the interpreter, then close the Command Prompt window; you're good to go and are ready to launch IDLE!

If you see a different version — don't worry too much about the date or the funny-looking "37a07cee5969" numbering; as long as you see "3.5.1", you're where you need to be — that means you have another version of Python installed and its folder appears earlier in your PATH environment variable than the new one does.  If instead you see an error message like this (note that it varies a bit from one version of Windows to another):


'python' is not recognized as an internal or external command,
operable program or batch file.


then the likeliest cause is that you didn't configure your PATH environment variable correctly, so Windows isn't searching for python.exe in the right place.

Starting IDLE

Lastly, you'll want to be sure that you try starting IDLE and verify that it, too, is running the right version of Python.  The easiest way to launch IDLE is to find it in your Start Menu — there should be a program group called Python 3.4, in which you'll find a link called IDLE (Python GUI).  Click that link; you should see a window pop up, in which will appear the same message you saw when you started Python from the Command Prompt:


Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>>


If so, you're ready to roll!







Congratulations!

Nice work!  You should now be ready to proceed with your work this quarter.  We will likely need additional tools later in the quarter, but this will be sufficient to get started.







Details for Windows 10 clarified by Alex Thornton, Winter 2016.New details for Windows 10 added by Alex Thornton, Fall 2015.Originally written by Alex Thornton, Winter 2013.
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics32/CourseReference.html
##-----------------TITLE------------------------##
ICS 32 Winter 2016, Course Reference
##------------------TEXT------------------------##
ICS 32 Winter 2016 |
News |
Course Reference |
Schedule |
Project Guide |
Notes and Examples |
About Alex








ICS 32 / CSE 42: Programming with Software Libraries
   Winter 2016
   Course Reference







Instructor information

Alex ThorntonOffice: DBH 4048Email: thornton@ics.uci.edu

Contacting me

I tend to be much easier to reach via email than any other way, so I would suggest using email to contact me under normal circumstances.  When you write me an email, please take a few moments to make sure that the following information is placed somewhere in your message: your name, your student ID#, and which course you're enrolled in (important since I'm teaching more than one this quarter).

Office hours

I will be available on Tuesdays and Thursdays from 8:20-9:40pm in ICS 225 — not my office, as it's in a building that will be locked during at least part of that time — during which I'm available to chat with you about whatever's on your mind.







Course staff

In addition to me, this course is staffed by a number of folks in a few different roles.  They are listed below.

Teaching assistants

There are seven teaching assistants, each of whom is assigned to two lab sections; see below for an indication of which TA is assigned to which section.  Among other roles, the teaching assistants are the primary points of contact with regard to the grading of projects.

The names and contact information for the TAs are as follows.

Hamid Mirzaei Buini (mirzaeib AT ics DOT uci DOT edu)Mohammad Eletriby (meletrib AT uci DOT edu)Hirak Kashyap (kashyaph AT uci DOT edu)Niranjam Uma Naresh (numanare AT ics DOT uci DOT edu)Uday Mittal (umittal AT uci DOT edu)Jurngyu Park (jurngyup AT ics DOT uci DOT edu)Syed Shahbaaz Safir (fsyedsha AT uci DOT edu)

Lab tutors

In addition to the TAs, the following lab tutors will also be staffing the labs at various times, specified further below.

Daniel AcevedoEbrahim Al-KabodiAndre AquilerVictor ChangNoah DjenguerianMatthew DowningCody HanGeoffrey KoAlvin LiangViet LyPhi NguyenKishan RajasekharNikita TsvetkovShawn WilliamsYitong WuJason YangPhilip Yun







Times and places

Lecture

This course has two lectures and each of you is enrolled in one or the other.  They meet on the following days and times:

Tuesdays and Thursdays from 5:00-6:20pm in ELH 100Tuesdays and Thursdays from 6:30-7:50pm in ELH 100

The lectures will be more or less the same — there may be slight differences, particularly on days after one lecture ends up a little ahead of the other (due to differences in questions asked, etc.).  However, we do have two full houses — both lectures are enrolled up to the capacity of the room — so you are not permitted to attend a lecture other than the one in which you are enrolled.

Given the course's size, attendance is not graded, but we certainly recommend it.  Naturally, attendance is required on the days when exams are held, which are listed in the Schedule.

It should be noted that you must attend the exams in the lecture in which you are officially enrolled.  NO EXCEPTIONS.

Labs (The ICS 32 Help Center)

There are 14 lab sections, meeting throughout the day on Mondays, Wednesdays, and Fridays.  Collectively, we will refer to all of these hours as the ICS 32 Help Center, which meet at the following locations and times:

Mondays, Wednesdays, and Fridays from 8:00am-7:50pm in ICS 189Mondays, Wednesdays, and Fridays from 12:00pm-3:50pm in ICS 183Mondays, Wednesdays, and Fridays from 12:00pm-3:50pm in ICS 192Mondays, Wednesdays, and Fridays from 8:00am-3:50pm in ICS 364A

While you are required to be enrolled in a lab section — and this enrollment does determine who will grade your projects and with whom you are permitted to partner when working in pairs — you are generally free to attend the ICS 32 Help Center whenever you need it, regardless of which lab section you are enrolled in, with two caveats:

When working in pairs, you are expected to be physically in the same place, working together on everything you do, so you will be expected either to attend your scheduled lab or both you and your partner can mutually agree on an alternative arrangement.  (Note that "mutual agreement" does not mean one partner saying "I'm not going to be able to make it; sorry!"  If you can't make an agreement on times to work, best not to partner with each other.)You will be guaranteed a seat in your enrolled lab section — and, hence, it is possible that you may occasionally be asked to leave to make room for someone else if we are full beyond capacity and you are not officially enrolled in a section.

While it is not a required part of the course, and nothing will be graded in the labs this quarter, attendance does offer some significant benefits:

You will have a chance to consult a TA and one or more lab tutors regarding your work; this kind of fast feedback and help can be invaluable as you work through your projects.Some of your work this quarter will be done in pairs using a technique called pair programming.  The lab sections offer built-in overlap in your and your partner's schedules.You will be surrounded by a large group of other people facing the same problems that you're facing.  This kind of shared journey will help you to build a social network that will last you, in some cases, for the rest of your life.  Don't squander that opportunity!

Some of our lab sections are laptop-only sections, which means that there are no computers available for general use except one that you bring for yourself.  However, these sections will be staffed with the same personal help available in the others, so if you tend to carry a laptop around with you anyway, you will probably find it at least as comfortable as the alternative.

Staffing in the ICS 32 Help Center will be as follows.  The TAs listed for the sections below are the official TAs of record — so, in general, they would be your first point of contact regarding the grading of projects.

Lab SectionLocationTATutor(s)Lab 1
  	    MWF 8:00-9:50amICS 189Hirak KashyapGeoffrey Ko
        Kishan RajasekharLab 2
  	    MWF 10:00-11:50amICS 189Jurngyu ParkEbrahim Al-Kabodi
        Yitong WuLab 3
  	    MWF 12:00-1:50pmICS 189Hamid Mirzaei BuiniAlvin Liang (except W 1-2pm)Lab 4
  	    MWF 2:00-3:50pmICS 189Hamid Mirzaei BuiniDaniel AcevedoLab 5
  	    MWF 4:00-5:50pmICS 189Uday MittalPhilip YunLab 6
  	    MWF 6:00-7:50pmICS 189Niranjam Uma NareshNoah DjenguerianLab 7
  	    MWF 12:00-1:50pmICS 183Hirak KashyapShawn WilliamsLab 8
  	    MWF 2:00-3:50pmICS 183Niranjam Uma NareshMatthew DowningLab 9
  	    MWF 12:00-1:50pmICS 192Uday MittalPhi NguyenLab 10
  	    MWF 2:00-3:50pmICS 192Jurngyu ParkJason YangLab 11
  	    MWF 8:00-9:50amICS 364A
        Laptop OnlyMohammad EletribyViet LyLab 12
  	    MWF 10:00-11:50amICS 364A
        Laptop OnlyMohammad EletribyAndre Aquiler
        Nikita TsvetkovLab 13
  	    MWF 12:00-1:50pmICS 364A
        Laptop OnlySyed Shahbaaz SafirTBDLab 14
  	    MWF 2:00-3:50pmICS 364A
        Laptop OnlySyed Shahbaaz SafirVictor Chang
        Cody Han









Textbooks

This course doesn't use or require a textbook.  Alternatively, I'll be posting a detailed and complete sset of Notes and Examples throughout the quarter, which will serve as a sort of textbook for this course.

Additionally, one of the main skills you'll be building in this course, aside from broadening and strengthening your Python programming skills, is the ability to find, analyze, and synthesize information in online documentation, tutorials, and other materials that make libraries — not just those that are included with Python, but also those that are obtained from third parties — accessible to you and useful in solving real programming problems.  To that extent, the Internet will serve as a significant "textbook" for us, as well.







Obtaining additional assistance

Asking questions of course staff

You can most easily get course questions answered by coming to the lecture, the ICS 32 Help Center, or office hours and asking them.  I am happy to help you in person when I'm available.  You can also ask questions by sending email to me or your TA (or both); we check our email periodically throughout the day, so you can usually get an answer to course-related questions within a few hours (and often much more quickly).  If the questions require a complex or lengthy response, we may ask you to see one of us in person.  As projects approach their due date, particularly on days when projects are due, we begin to receive quite a bit of email all at once, so we may not be able to respond to all messages before the project is due.  We aren't ignoring you on purpose, but unfortunately it's not always possible for the relatively small course staff to answer questions from a large number of students at once.  A great way to mitigate this problem is to get started early and ask questions sooner in the process.

Accommodations for disabilities

Any students who feel that they may need an accommodation based on the impact of a disability should contact me privately to discuss these specific needs.  Also, contact the Disability Services Center online or by phone at (949) 824-7494 as soon as possible to better ensure that such accommodations, such as alternative test-taking environments or note-taking services, can be arranged for you in a timely way.







Grading

Weights of graded artifacts

Your course grade will be determined from the weighted combination of your scores on each of six programming projects, one Midterm, and one Final Exam.  The weights of each of these are:

Five programming projects, 40% (weighted equally at 8% each)Midterm, 25%Final Exam, 35%

Determining final grades

Course grades will be determined neither on a normal curve nor a straight scale.  It is guaranteed that overall scores over 90% will receive an A- or better, scores over 80% will receive a B- or better, and scores over 70% will receive a C or better.  However, the actual cutoffs may be lowered at the end of the quarter.  In short, it is not my intention to fail half of the students, nor am I planning on giving only 2% of the students A's, but I prefer not to constrain myself with either a straight scale or a formalized curve.

Some of the programming projects will ask you to employ a technique called pair programming, which is discussed in more detail in the Project Guide.  There are times that you will be required to participate in pair programming; there are other times when it will either be optional or disallowed.  Each of you will also be asked to fill out an evaluation of your partner after each paired project is due; this will give you an opportunity to let us know, confidentially, whether your experience with your partner was a positive one.  I reserve the right to reduce your overall course grade on paired projects down as far as zero if the evaluations you receive from your partners are consistently problematic (e.g., if your partners report that you made no contribution).

If you're curious about how you're doing in the course, I'm happy to discuss your estimated grade at any time.  It's generally best to have this conversation in person, so that we can explore issues other than just the raw numbers; I'm happy to have this conversation at any time that I'm available, and I'm also glad to do it via email if we can't find a mutually available time.







Dropping the course or changing grade option

Through the end of Week 2 (Friday, January 15), you may drop the course by simply going to WebReg and dropping it.  If you wish to drop the course after that date, you will need to use the Enrollment Exceptions system to request a drop; I do not have the final say over those, ultimately, as the Dean of the Bren School (and your major, if you are majoring in something outside of the Bren School) must approve them.  It is not generally the case that an exception will be accepted simply because you're not doing well in a course, though extenuating circumstances are certainly considered.

Similarly, changing your grade option (to Pass/NotPass or back again) can be done via WebReg through the end of Week 2 (Friday, January 15), after which you must use the Enrollment Exceptions system to request the change.  As with exceptional drops, you must receive approval from the appropriate Deans, and that approval is not guaranteed.







Academic honesty

The policy

As ICS 32 or CSE 42 students, you are expected to know and follow the academic honesty policies of both the Bren School of ICS and the University as a whole.  Please take a few minutes to read the policies, which can be found at this link.

All of your project work is expected to be completed solely by you (and your partner, on paired projects).  Working in larger groups and/or sharing of code between students that are not partners is not permitted.  Note that "high-level discussion of course material for better understanding" is permitted and encouraged, but when it comes time to sit down and write code, that is expected to be done by you and you alone.  All submissions are compared to one another using an automated plagiarism detection system.  This system is extraordinarily good at finding similarities between submissions, even when there are superficial differences.  (Note that we also compare your submissions to those submitted during previous quarters whenever one of these assignments was given during a previous quarter, so it is an exceedingly bad idea to turn in, or even refer to, code written by a friend of yours who took the course already.)

Since all of your work is expected to be completed solely by you (and your partner, on paired assignments), you will be held responsible even if you plagiarize only a small portion of someone else's work.



Academic honesty is a two-way street.  Providing your code to other students for them to turn in as their own is not permitted any more than turning in someone else's code.  Resist the temptation to give code to your friends "for reference."  Based on my experience, I can say that your "friends" may very well betray you and turn it in, anyway, and then you'll have a lot to answer for.

Naturally, the Midterm and Final Exam are also expected to be individual efforts.  Dishonest behavior during an exam will not be tolerated.

Violators of academic honesty policies are subject to the penalties described in the Bren School of ICS policy.  They are also subject to an immediate course grade of F, and you will not be allowed to drop the course to avoid the grade.  Also be aware that a single documented case of academic dishonesty may preclude you from switching into computing majors, registering for computing minors, joining the ICS Honors Program, and graduating from a computing major with honors.

The lesson

Okay, so the moral of the story is that it's wise to avoid cheating.  I believe that it's relatively rare that students enter a course with the conscious intent to cheat their way through it; why come to UCI if you're not planning to get something out of the coursework?  So why do people cheat every quarter in every course?  The answers vary, but here's the easiest way I can boil down the numerous conversations I've had with students caught cheating in my courses over the years: I fell behind and couldn't figure out how to catch up.  Things happen and ten-week quarters are unforgiving.  You might get sick, you might have issues crop up in your family, you might have misunderstood one of the earlier topics in the course on which later topics dependend, you might have an off-campus job that's demanding too much of your time, you might be trying to decide whether you're on the path you want to be on... Any of those things (and many others) can make it hard to keep up.  You fall a little behind, you fall a little further behind, and pretty soon the situation seems hopeless.  You're under pressure, temptation gets the better of you, and suddenly it seems better to submit someone else's work than to submit nothing.  It's not.

If you feel like you're beginning to slip off course or things are getting beyond your control, the best thing to do is to talk to us sooner rather than later.  We're here to help; we understand.  But the reality of taking large-sized courses at a large-sized institution is that we're not going to know you're in need unless you tell us.  If things are happening in your life, tell us; you don't have to be specific if you're not comfortable with it.  Before the fact, there's often a way to work things out.  After the fact, it's usually too late.
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics32/index.html
##-----------------TITLE------------------------##
ICS 32 Winter 2016
##------------------TEXT------------------------##
ICS 32 Winter 2016 |
News |
Course Reference |
Schedule |
Project Guide |
Notes and Examples |
About Alex








ICS 32 Winter 2016
   Course News







Check back here every day or so.  I will generally post important coursewide announcements here.  They will be listed in reverse-chronological order (i.e., newest items first).

Date AddedNews ItemTu 2/16Project #4 and Project #5 are now available.Tu 2/16New sets of Notes and Examples are now available, along with a Schedule update.Th 2/11I've updated today's Notes and Examples, as I thought of a new angle to use in approaching this topic.Tu 2/9I've posted a fix for a bug in the Example Implementation of Project #3, in which elevations were being listed in random order, rather than in the order the locations were listed in the input.W 2/3Project #3 is now available, along with two new sets of Notes and Examples and a Schedule update.Tu 2/2Today's Notes and Examples set is now available.Th 1/28Today's Notes and Examples set is now available.Tu 1/26Two new sets of Notes and Examples are now available, along with a Schedule update.Tu 1/19Project #2 is now available.W 1/13Two new sets of Notes and Examples are now available, along with a Schedule update.W 1/13Due to ongoing problems with over-attendance in the 5pm lecture, students are no longer permitted to attend a lecture other than the one in which they're enrolled.Th 1/7The names and contact information for the TAs, as well as the placement of TAs and tutors into lab sections, is now listed in the Course Reference, with the exception of two of the lab sections where we're still scheduling one more TA.Th 1/7My office hours have been scheduled for Tuesday and Thursday nights from 8:20-9:40pm in ICS 225.Tu 1/5The final exam times were listed incorrectly on the Schedule page.  They've been corrected.M 1/4
      Welcome!  Please note a couple of things as we get started this quarter:
      The first lectures will meet on Tuesday, January 5.  Lab sections begin meeting on Friday, January 8.  For more information about meeting times of lab sections, see the Course Reference.  For information about lecture material and readings, see the Schedule.I encourage you to spend some time reading through the material on the course web site.  It will be updated periodically throughout the quarter, and there will always be an announcement here describing each update.  For now, notice the set of links at the top of this (and every) page, leading you to the Course Reference, the Schedule, and the Project Guide, as well as a set of Notes and Examples — mostly emanating from the lectures — that will be posted throughout the quarter.For those of you planning on using your own machines for at least some of your work, it might be worth spending some time working through Assignment #0, which provides instructions on getting the necessary software installed and configured.  (Read the Project Guide page first, for some context on the necessary software and some background on what we're going to be doing.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/turnitin.com_guidelines_files/plagiarism-don_t_do_it_.html
##-----------------TITLE------------------------##
Plagiarism--don't do it:  Plagiarism means presenting somebody else's work as if it's your own.  Yo
##------------------TEXT------------------------##
Plagiarism--don't do it:  Plagiarism
means presenting somebody else's work as if it's your own.  You
may use whatever outside sources (books, friends, interviews, periodicals)
are appropriate for an assignment, so long as you cite them:  Any time you
use two or more words in a row that you didn't think up and write yourself,
you must put the words in quotation marks and indicate where they came from.
 (There could be situations where this two-word rule isn't appropriate.
 If you think you have one, check with us.)  Even if you paraphrase (state
in your own words) someone else's work or ideas, you should cite the
source (e.g., "Dijkstra says that unrestricted branching is dangerous.").
 Plagiarism is academically dishonest, and we expect that nobody in the
class will engage in it.  

That should be enough said, but unfortunately
there have been instances of plagiarism in these courses in the past.  To
protect the value of the independent work that all students do, all student
work in this course may be compared for textual analysis and evidence of
plagiarism to the work of other students, both in this course and in others,
both manually and by using software that compares students' work with
work from other sources, including the Internet and work submitted in previous
quarters.  This may involve the storage of students' work on computer
systems outside of the university, such as the Turnitin.com reference database;
this storage is solely for purposes of detecting plagiarism.  

ICS school policy is that plagiarists fail
the course and have their offense recorded in the department office.  Academic
honesty violations can affect a student's graduation, financial aid,
and eligibility for honors.  The school deals with plagiarism cases every
quarter, even though most people don't hear about them.  No matter how
pressured you feel, don't plagiarize; it's not worth it.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/139w/
##-----------------TITLE------------------------##
ICS 139W Syllabus—Spring 2013
##------------------TEXT------------------------##
SPRING 2013 —
 Information and Computer Science —  UC Irvine 

ICS 139W Course Reference 
CRITICAL WRITING ON INFORMATION TECHNOLOGY, OR
COMMUNICATIONS SKILLS
FOR COMPUTER SCIENTISTS  

  Instructor:  David G. Kay,
5056 Donald Bren Hall (kay@uci.edu)

Teaching assistant: Steve Slota (sslota@uci.edu).
Steve will devote some of the scheduled discussion section time to individual
consultations; he will also be available at other  times to be
arranged, and by appointment.
Quick links: Email archive Piazza Public Q&A References

Course goals:  Even if you intend to
spend your entire professional life designing software or configuring networks,
you will spend more of it writing prose—memos, proposals, documentation,
electronic mail—than you will writing code.  Yet in most of your courses,
you exercise this vital skill only after you have run the last test case,
in the half-hour before the deadline.  Here we have the luxury of concentrating
on your writing skills, with an emphasis on writing to meet the specific
needs of different audiences; you will also make oral presentations and
design presentation graphics.  

This course satisfies UCI's upper division
writing requirement, which gives students the opportunity to do writing
in ways that are specific to their own academic disciplines, guided by faculty
from that discipline rather than from English.

Prerequisite concepts:  Satisfaction
of the lower division writing requirement is a prerequisite for this course,
so we will expect every student to be able to write cogent, grammatical
English at the level expected in Writing 39C.

Meeting place and times:  Class meets
Tuesdays and Thursdays from 12:30 to 1:50 in ICS 180.  The discussion
sections are scheduled Wednesdays at 9:00 and at 10:00 in ICS 243; some section
days will involve required activities, but others will be set aside for
individual consultations on your work. 

Office hours:  I will be in or near
my office during these scheduled hours, during which course-related matters
will have first priority:  Tuesdays from 11:30 to noon and Thursdays after class. 
Of course emergencies may come up, but I will try to give advance notice
of any change.  If I'm not immersed in something else, I'll be glad
to answer short questions whenever I'm in my office, so feel free to
drop by any time.  I'll also be happy to make appointments for other
times during the week.  The quickest and most effective way to reach me
is by electronic mail, as described below.

Questions and announcements:  You can
usually get a response to your course-related questions most quickly by posting them at Piazza.com; these postings are public to the whole class. For individual questions, send electronic mail
to the ID ics139w@uci.edu.
This goes to both of us, and whoever reads it first can respond.  If you
need to reach one of us individually, our individual addresses are listed
above.

We may also send course announcements by Email
to the official course mailing list, so you should check your Email at least daily.
Note that this mailing list goes to the Email address that the registrar
has for you (your UCInet ID).  If you prefer to read your Email on another
account, you should set your UCInet account to forward your Email to your
preferred account (from http://www.oit.uci.edu/email/deliverypoint.html).  Don't let this slide; if you miss official
announcements, your grade could suffer.   

This course has a home page at http://www.ics.uci.edu/~kay/courses/139w; EEE provides an archive of official course
Email. 

Course materials: Every student in the course should have:
 An English dictionary.  Ideally you should
   have a paperback dictionary as well as a large, unabridged dictionary in
   the place where you'll do most of your writing.  The former has faster
   access time but the latter has greater capacity, so both are valuable. 
   A paperback thesaurus is also useful, though you should remember that a
   thesaurus doesn't give the connotations or appropriate contexts for
   the synonyms it lists. If it's easy to get access to dictionary and thesaurus functionality on your computer, that's also fine. A writing guide, such as UCI's Anteater
 	Guide to Writing or some more comprehensive work that can answer your
   mechanical questions. The UCI Writing Center has a large set of resources, mostly on line.
These additional materials are not required in the sense that we don't have any exams on their content nor do we use them directly for our assignments. Nonetheless, they are valuable for various reasons and we recommend that you acquire one or two that match your needs and interest. We haven't made them available in the UCI Bookstore; you can get the ones you want just as easily on line.
Writing for Computer Science, second edition, by Justin Zobel.  This  guide gives mechanical advice but also addresses writing research papers and giving oral presentations.
 The MIT Guide to
   Science and Engineering Communication, second edition, by James Paradis
   and Muriel Zimmerman.  This brief guide describes the various forms of scientific
   and technical writing, including sections on oral presentations and document
   design.
 Visual & Statistical Thinking: Displays of Evidence for Decision
   Making, by Edward R. Tufte.  This reprint of Chapter 2 of Tufte's
   book, Visual Explanations, describes two situations where the way
   information was presented had life-or-death consequences.The Cognitive Style of PowerPoint, second edition, by Edward R. Tufte. Tufte presents evidence that "PowerPoint, comparied to other common presentation tools, reduces the analytical quality of serious presentations of evidence."

Course requirements and grading:  To
satisfy the upper division writing requirement, you must receive a grade
of C or better in this course; you may also take this class on a pass/not-pass
basis (which also requires work at the C level to pass).  In addition to
satisfactory participation and completion of the assignments, to pass 139W
you must successfully complete an in-class writing sample (described in
more detail in the following section) demonstrating your ability to write
a short passage in clear, correct, grammatical, cogent academic English.

   Four main writing assignments, each with
     multiple parts:  "Writing Instructions" (about 10% of the course
     grade), "Influencing Policy" (about 20%), "Changing the System
     Introductory Tutorial" (about 15%), "Changing the System Proposal"
   (about 25%).
   Two or three smaller exercises, each worth
   about 5%.
   Class attendance and participation, including
     three or four oral presentations, worth about 20% overall.  The importance
     of participation in this course is clear from its weight.  Much of the learning
     comes from activities we conduct in class; there is no other way to make
     them up, and your grade will suffer if you miss them.  The course outline
     indicates certain activities with a bullet (•); it is particularly important
   that you attend class or lab on those dates.

In general we will assign scores on a 100-point
scale, with 95 a clear A, 85 a clear B, and below 70 not of passing quality
(i.e., below C).  It is possible but not guaranteed that the cutoffs for
course letter grades of A and B will be assigned more leniently; that is,
an overall score of 89% might receive an A or A-.

There will be no exams.
We're required to say that in unusual circumstances, these criteria could change, but we do not expect that to happen.
Special needs: Any student who feels he or she may need an accommodation due to a disability should contact the UCI Disability Services Center at (949) 824-7494 as soon as possible to explore the possible range of accommodations. We encourage all students having difficulty, whether or not due to a disability, to consult privately with the instructor at any time. 

In-class writing sample:  Being able to produce clear and correct writing
is a requirement for completing lower division writing, so we expect everyone
in the class to be able to demonstrate this ability.
The first
  in-class writing sample is scheduled for Thursday, April 4; if you don't
  pass the first sample, you will have another chance in section on Wednesday, April 10.
  The topic for each sample will be something designed to be easy to write
  about, so you can concentrate on your writing rather than the underlying
  ideas.  In the hour-plus class period, we will ask you to write roughly
  300 words (for comparison, this paragraph contains about 150 words); this should
  give you plenty of time to revise and rewrite your passage.  To pass, your
  writing must have essentially perfect mechanics, grammar, and usage, and
  it must be reasonably clear and well organized.  You may bring a dictionary
  or any other reference works on paper.  These samples are short enough, and you have enough time, that we do expect everyone to write these samples by hand (unless you have an officially recognized disability, of course).

Computer access:  For the rest of your work, students in ICS 139W
have access to the ICS open labs.  These machines run Windows and the Microsoft
Office suite of  software, including Word and PowerPoint.  For this course
you may use any system to which you legitimately have access; we will require
that you learn and use PowerPoint (or Apple's Keynote or an open-source equivalent) for part of one assignment.

Assignment requirements:  The separate
sheet titled "Writing Assignment Requirements"
contains important advice that can affect your grade.  Read it now and check
it again every time you start a new assignment.  There are also mechanical
details for submitting assignments; each major assignment is submitted in
two ways:  on paper (including all the previously submitted, marked versions)
and electronically via checkmate.ics.uci.edu).
In a class this size, it's important that every
assignment be precisely where it's supposed to be at the time it's
supposed to be there.

What you must do right now to get started
in ICS 139W:



— If you prefer to read your electronic mail on an account other than your
UCInet account, redirect your mail at http://www.oit.uci.edu/email/deliverypoint.html.
— Give a snapshot of yourself (with
your name written on the back) to your TA.  This will help us learn your
names quickly.  (This is not just for fun—it's a course requirement.)
Also log on to 
eee.uci.edu, choose Surveys, and complete the ICS 139W Questionnaire (by the end of the first week for full credit).
— On the Web, go to checkmate.ics.uci.edu,
log in with your UCInet ID, choose "Course Listing" for "Spring
2013," click "Go" next to ICS 139W, and then click "List
me for this course."  You'll submit some of your work electronically;
this step is necessary to set that up.

— Sign yourself up for ICS 139W at Piazza.com and read a little bit there about how the site works.

Good advice and helpful hints:

Check your electronic mail regularly; this
is an official channel for course announcements.

Attendance in class is important (and essential
on the days marked with a bullet (•) in the outline below).  Class participation
of various kinds is rewarded at 20% of the course grade.

Always keep your own copy of each assignment,
both electronically and on paper; if an assignment should get lost in the
shuffle (or if some server should crash, which has happened
in the past), we'll expect you to be able to supply a replacement easily.

If you find yourself having trouble or getting
behind, speak with a TA or the instructor.  But never take the shortcut
of copying someone else's work and turning it in; the consequences can
be far worse than just a low score on one assignment.  The ICS department
takes academic honesty very seriously; for a more complete discussion, see
the ICS academic honesty policy:
http://www.ics.uci.edu/ugrad/policies/index.php#academic_honesty

The best advice we can give you is to read
all the materials with care and pay close attention to what they specify.
Even if a natural language like English is not quite as precise as a formal
language like Java, precise expression in English is precisely what this
course is about and we have tried to reflect that in our course materials.
The time it takes to read each assignment twice will be time well spent.

Approximate course outline: 

Week
Date
Topic
Item(s) Due [see notes below]
1.2 April
Introduction to the course


 

3 April (section)
Consultation on "Changing System"
topics and "Writing Instructions" 

4 April
 • In-class writing sample I
       
 "Changing System"
Email to Steve Slota
(sslota@uci.edu)
2.
9 April 
Oral presentation techniques
 
     10 April (section)• Using other people's writing  
• In-class writing sample II (if necessary)"Writing Instructions"
(draft, 3 copies)* 

11 April
• Oral synopsis of system changes 

"Changing System" synopsis (oral)

3.
16 April• Group editing of letter influencing policy"Influencing Policy"
  (draft)*
"Writing Instructions" (final)

17 April (section)• Group editing of introductory tutorials"Changing System" intro (draft)*

18 April• Oral tutorial introduction to system (videotaped)
"Changing System" intro (oral) 4.23 April• Oral tutorial intro to system continued (video)"Influencing Policy" (revised)
24 April (section)Consultation hour 
"Changing System" intro (final)

25 April
• Group editing of change proposals
"Changing System" proposal (draft
with slides)*
5.
30 April
Effective typography and presentation graphics
[guidelines; specimen]; Information visualization 



1 May  (section)
• Review of videotapes   
    2 MayRésumés and cover letters"Changing System" proposal (revised
with slides)
6.
7 MayProfessional ethics
"Influencing Policy" (final)

8 May (section)Consultation hour 
 Graphics Activity (optional) 

9 MayNature and structure of language 
7.
14 MayNature and structure of language (continued) 
    15 May (section)• Testing of PowerPoint files 

16 May• Oral proposal of change to decision-makers"Changing System" proposal (oral)
8.
21 MayConsultation hour"Changing System" proposal (final)

22 May (section)• Oral proposals (continued once) 
23 May
    • Oral proposals (continued twice) 9. 28 May• Oral proposals (continued thrice)  29 May (section)Consultation hour  30 May• Group editing of promotion pieces  or résumés and cover letters "Changing System" promo or résumé/cover
letter (draft)*10.4 June• Oral promotion of change to users "Changing System" promo or résumé/cover
(final) 
"Changing System" promo (oral) 5 June (section)Consultation hour   6 JuneEpilogue 

All assignments listed above must be submitted
in two ways (on paper at the start of class and via Checkmate), as described
on the previous page, with these exceptions:

   Of course the Email message listed above
   should not be submitted any other way.
   The assignments marked "oral"
   do not entail any other submission (though most of them have related parts
   that do have to be submitted in multiple ways; those parts are all
   listed separately).
   The assignments marked with an asterisk
     (*) should be submitted in class on paper only; they do not have to be submitted
   electronically.

David G. Kay, kay@uci.edu 

Tuesday, May 7, 2013 12:05 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/necc/classroom_tech_necc_ju_files/criteria_for_evaluation.html
##-----------------TITLE------------------------##
Criteria for evaluation
##------------------TEXT------------------------##
Criteria for evaluation

Spontaneity and flexibility

Degree of polish, effectiveness

Robustness (surviving failures)

Learning support

Auditory, visual, kinesthetic

Active learning

Student attentiveness

Costs

Time to prepare materials

Skills required (in advance, in class)

Advance arrangements required

Cash



Classroom Tech (NECC July'97)
  |   Previous
  |   Next
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/necc/classroom_tech_necc_ju_files/spontaneity_and_flexibil.html
##-----------------TITLE------------------------##
Spontaneity and flexibility
##------------------TEXT------------------------##
Hands-on participation

Spontaneity and flexibility

Degree of polish, effectiveness

Robustness (surviving
failures)

Learning support

Auditory, visual, kinesthetic

Active learning

Student attentiveness

Students work at different
speeds

Computers compete with
instructor


Costs

Time to prepare materials

Skills required (in advance, in class)

Advance arrangements required

Cash


Classroom Tech (NECC July'97)
  |   Previous
  |   Next
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/4/hw/hw4.html
##-----------------TITLE------------------------##
Fourth Homework
##------------------TEXT------------------------##
ICS 4 • David G. Kay • UC Irvine
Fourth Homework (Mini-Project Part I)


This assignment is due by 7:00 p.m. on Wednesday, February 20.  
The first part involves a little reading and some software experimentation, which you'll do individually, but the main part involves work in a group of 
three to five students; these groups will probably stay the same for subsequent assignments.  Everyone is fundamentally responsible for arranging to be in a group; do this sooner rather than later so you can find a compatible group. It's best to try to identify your partners in person, right before or right after class, but you can also use Piazza as a kind of Facebook to arrange partnerships.
The amount of work in this assignment isn't much different from the last one, but it requires more coordination (within your group and with others), so it would be wise to start right away.
Part (a)  
 Do this part individually.
(a.1)
 Read each of the following brief items. They'll show up in future lectures, later assignments, and/or the final exam:
"Typographic Design for Computerized Text," by David G. Kay."Caring for your Wrists," by Adam Engst, Tonya Engst, and Jon Hersh.  
 This isn't web-specific, but the consequences can be serious over the years if you're not careful to avoid repetitive stress injuries.
(a.2)
If you haven't already, visit Mockingbird (gomockingbird.com) and/or Moqups (moqups.com). These are "wireframe mockup" programs for building low-fidelity prototypes of web sites. They let you place user interface items on a screen to create a page, they letyou create multiple pages, and they let you establish hyperlinks between pages. Then you (or a user) can run the prototype, following the links to test out the behavior you want to examine. Read about Mockingbird or Moqups on its web site; then click "Try it now" and spend 15 or 20 minutes 
experimenting with the software. (For a concrete task, try to reproduce (part of) a simple web page, like google.com. Try to get the elements in about the right place and create a couple of sub-pages that some of the main page links can link to. Don't go for high fidelity.)
There's nothing to turn in for this part; just develop a little familiarity with wireframe mockup tools, since you'll be using one later. (To save your work, these sites ask you to sign up. On Mockingbird you can sign up for a free account that has a few limitations that won't affect our work, or for an inexpensive paid account that's less limited; on Moqups it's just free.) 
(a.3)
As you're using the Web, look out for sites that use typography or color particularly well (or poorly). Write them down in your HCI notebook.  
There's nothing explicit to turn in for this part, but we may ask you to share some of your examples in class and the good examples may give you ideas as you start the next part of this assignment.
Part (b) 
The main part of this assignment and most of the remaining assignments this quarter will be to design, or redesign, part of a web site.  
You may pick an existing site or you may come up with a new site, either based on existing sites or entirely new.
We'll be referring to this as "your web site," but of course it does not have to be your personal site or a site that you will eventually own or control.  
It may be any web site, currently existing or not; by "your site" we just mean the site your group will be working on.
As usual, you will combine all the written parts of this assignment into one document, which one member of your group will submit via Checkmate 
(making sure that all the group members' names appear at the top of the document).

(b.1)
Form a group of at least three and at most five students.  You'll need at least three to do a user walkthrough (part of a subsequent assignment, not this one);
 more than five leaves too many people idle unless your site is very ambitious (in which case you should check with us, because six people should normally split into two groups).
(b.2) 
Choose the site you will work on, either existing or new.
As you decide, think about the functional requirements of the site (what you want it to do) and the characteristics of your users.  
You'll be more formal about the requirements process later on, but thinking concretely about these issues now will help you reach an informed agreement on what you're going to work on.
It doesn't matter whether you pick a "big" or "small" site; if you pick something big, you won't have to (re)design all of it.
In at most half a page, describe your site and summarize its broad functional requirements and the characteristics of the users you expect.  
You'll be doing this more thoroughly in the next part; you might think of this as an abstract or executive summary.

(b.3)
Determine and describe the requirements of your web site.
Consider the issues we've covered:  Who are the users?  What is their age, experience, familiarity with the site or the tasks or the subject matter?  
Are there other stakeholders to consider as you design the site?  What are the functional requirements, the data requirements, the usability requirements?
You can probably answer many of these questions just in discussion with your group.  But you should at least talk with some potential users 
(e.g., in informal conversations, with a questionnaire, with a focus group).
For this part, turn in:

   a description of your users (about half a page)a description of your system's requirements (at most two pages); this should describe what your web site will do and what your design goals are a description of how you contacted users to answer any of the foregoing, and what the results of those user contacts were (at most one page)


Combine all your answers into one electronic document and submit it via Checkmate. Make sure the document includes the names of all your group members.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/4/hw/hw6.html
##-----------------TITLE------------------------##
Sixth Homework
##------------------TEXT------------------------##
ICS 4 • David G. Kay • UC Irvine 
Sixth Homework (Mini-Project Part III)


This assignment is due by 7:00 p.m. on Thursday, March 14.  
You will continue working with the same group on the same web site.Part (a)  
 By this point, you already have decided what aspect(s) of your web site to (re)design, you have come up with one or two designs 
(depending on whether you've taken the refine-one-design approach or the two-alternatives approach), and you have built at least one 
prototype of that design. The next step is to plan your user tests.
What are the tasks you're going to ask the user to do? What are you going to measure (time, questions, errors, overall satisfaction, …)
 and how will you make the measurements (by what combination of observation, exit interview, other means)? Once you settle on this explicitly,
  you may find that you need to adjust your prototype(s) to include some aspect or alternative that you overlooked earlier.
Who will be your test subjects? Choose people whose characteristics are representative of the intended users of the system. Try not to use
 family members or close friends, because they may not be candidly critical of the design. Aim for five test subjects for each round of testing
  (that's ten user tests in total, whether refine-one-design or two-alternatives); that will allow for no-shows or other failures (consider 
  three subjects per round as an absolute minimum). For convenience, you may use the same group of five for each round, though in reality 
  their experience with the first test may bias their performance on the second; in real life, it would be better for the second group of 
  test subjects to be different, but evenly matched with, the first group.
During the user tests, which of your team members will be the facilitator, the computer, the observer(s), other roles? [In real user testing,
 nobody on the testing team would switch roles between test subjects because it would make the testing inconsistent. For purposes of this assignment,
  however, you may switch roles for different test subjects if you wish, just so each team member can experience more than one role.] 

Part (b) 
Review the slides and the textbook to reacquaint yourselves with the guidelines for running successful user walkthroughs.
If you're following the two-alternatives approach: Run your user tests on each of the two alternative design prototypes, making the measurements 
and observations you decided on earlier. Was one alternative the clear winner, or did you identify aspects of each alternative that you would include 
in the final design? Based on these tests, what will your final design be?
If you're following the refine-one-design approach: Run your user tests on your initial design prototype, making the measurements and observations 
you decided on earlier. What flaws or potential improvements did your tests reveal? Redesign your site based on these insights, and revise your prototype
 or re-create it to reflect this improved design. Then run a second round of user tests on the revised prototype, measuring and observing as before. 
 Did your changes result in an improvement? Based on these tests, what will your final design be?

For this assignment, turn in a document that describes your (re)design effort, which should include
  
an overall description of your site and a description of the aspect(s) you decided to (re)design (about half a single-spaced page of text, 
  not counting any illustrations). You can re-use or revise what you wrote about this for the last assignment; this describes your starting point 
  and we include it again here so that the document you produce for this assignment will be comprehensive and self-contained.a description of the requirements of your (re)design. You can re-use or revise what you wrote about this for Assignment Four.a description of your user testing plan  (including whether you took the two-alternative or the refine-one-design approach): the task(s) for 
  the test subjects and the measurements and observations you planned (at most two pages)a description of how the user testing went in practice: did it go according to plan, were there unforeseen difficulties, did anything surprising happen? (at most one page)a list describing each test subject's relevant characteristics, perhaps including age, gender, occupation, level of technical sophistication, 
  previous experience with your web site (if it previously existed) or the subject matter of the site. To preserve your testers' privacy, it's not 
  necessary to include the subjects' actual names. State whether you used the same test subjects for both rounds of testing.a description of the user testing results and how you applied them to your (re)design (at most four pages):
    If you took the two-alternatives approach: What did you learn about each alternative? Did the results help you pick one alternative or identify 
  positive aspects of each? Describe your final design (with illustrations as appropriate).If you took the refine-one-design approach: What changes did your first round of testing cause you to make? Did those changes turn out to be an 
  improvement in the second round of testing? How did the both rounds influence your final design? Describe your final design (with illustrations as appropriate).
  the names of all your team members along with a sentence for each team member describing his or her roles and contributions to the project. 
   Also indicate whether your HCI notebooks were a useful resource as you did this project. [Except in extraordinary cases, this will not be used 
   for assigning different scores to different team members.]
  Submit this document via Checkmate. Each of you might  want to keep a copy, too; prospective employers 
  may be impressed by the evidence that you know how to do a professional web usability design.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/4/hw/hw1.html
##-----------------TITLE------------------------##
First Homework
##------------------TEXT------------------------##
ICS 4 • David G. Kay • UC Irvine 
First Homework


This assignment is due by 7:00 p.m. on Wednesday, January 16.
Each student will turn in his or her own submission for this assignment. However, you may work together with one other student so long as each of you turns in his or her individual work.
If you haven't read the homework advice on the class assignment page, now's the time to do it.
Web HCI notebook
As we discussed the first day of class, we expect every student this quarter to carry at (nearly) all times a small notebook 
(as simple as two quarter-folded sheets of paper or as complex as a smartphone with a camera). Whenever you observe a particularly bad example 
of  human-computer interaction on the web (or a particularly good one), jot down the URL and other details in your notebook. Often these instances are fleeting 
and subtle; you may think you'll remember and write it down later, but chances are you won't. That's why we expect you to carry the notebook and 
record the details when they occur.
Part (a) 
Complete the ICS 4 Questionnaire and do the other items on the syllabus under "What to do to get started…"
Part (b) 
Pick two different instances of bad web design from your web design notebook. For this part of the assignment, you may pick 
relatively small, simple instances (like the recommendations page at Amazon.com or the "How do you know this person" 
window on Facebook, not that either of these is necessarily a bad design), but don't pick ones we discussed in class. For each,
Describe the relevant details of the  web page(s) (if your web page wouldn't be familiar to the typical UCI student, give enough background description to explain it), giving the URL and using screenshots as necessary.Explain the problem(s) you encountered, relating them to failures of usability goals or principles. 
  (Jakob Nielsen's usability heuristics are available at http://www.useit.com/papers/heuristic/heuristic_list.html.)Suggest a way to remedy each problem, again relating each suggestion to the usability goal or principle that it addresses.
  
Your description of each instance should be shorter than one single-spaced page of text (though with illustrations it may actually span more than one page).
Part (c) 
Pick a web site somewhere at uci.edu that you use frequently. Analyze it as described above, but in somewhat more detail 
involving more than one feature or function. As an upper limit, don't spend more than an hour exploring the site and making 
notes, and don't write more than two single-spaced pages of analysis (which again may span more pages than that as you include illustrations).
Your analysis should address who the intended users of the site are, what the users want to achieve by using the site, how
the site failed to serve these users and their goals (including, if applicable, characteristics of the users and their backgrounds 
that the site designers didn't understand or accommodate well), and what makes your suggested improvements better.
Your analysis should focus on usability issues rather than pure functionality; while the line is sometimes hard to draw 
(adding a search feature, for example, is increased functionality that also affects the usability of a site), don't try to 
solve the problems by making the system into something that it wasn't intended to be.
 
Combine all your answers into one electronic document and submit it via Checkmate.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/4/hw/hw5.html
##-----------------TITLE------------------------##
Fifth Homework
##------------------TEXT------------------------##
ICS 4 • David G. Kay • UC Irvine 
Fifth Homework (Mini-Project Part II)


This assignment is due by 7:00 p.m. on Tuesday, March 5.  
We expect that you will continue this assignment with the same group you worked with on the last assignment. If you need to change personnel,  send a message to ics4@uci.edu.
Overview
For this assignment and the next one, you will continue the (re)design of the web site you chose in the last assignment. This (re)design process will span both assignments.
 Here is an overview of the entire process; the italicized text signals tasks that will be part of the next assignment rather than this one:
Decide on what aspect(s) of your site you will (re)designPick one of these two approaches:Create two alternative designs, build prototypes of each, and run user tests on each alternative. We'll call this the "two-alternative approach."Create one design, build a prototype, run user tests, refine the design based on the tests, build a new prototype, and run another set of user tests. 
  We'll call this the "refine-one-design" approach.
  Describe your (re)design, the user tests you conducted, what you learned from the tests, and how your test results affected your final (re)design.


Part (a)  
 Decide on what aspect(s) of your site you will (re)design. You will probably consider some combination of page design and navigation. Thinking in terms of 
user tasks, you should probably focus on a task or combination of tasks that should ideally take the user from three to five minutes; that's long enough to be interesting but short enough
 to make creating the prototype and running the user tests manageable. If you have concerns over whether the aspects you have chosen are "enough" (or too much),
  send a message to ics4@uci.edu or use Piazza.
Next, choose an approach. If you can think of two different ways to do the design, you might choose the two-alternative approach. If you think there's one good way to do it,
 choose the refine-one-design approach. Note that both approaches should be the same amount of work: in each, you'll build two prototypes and run two sets of user tests. 
 The difference is the order in which you do them.
Part (b) 
Create one or two (re)designs (depending on which approach you're following). Your group should generate a variety of ways your site could better meet its goals 
and consider the alternatives' relative merits before settling on one or two. Your HCI notebooks should be a good source of examples or inspiration.
Build a prototype for your design(s). (If you're following the two-alternative approach, build both prototypes now. If you're doing refine-one-design, 
just build the first-round prototype now.) Your prototype should include all the alternative clicks/entries/actions/displays that the user may see or need 
while working through the tasks using the prototype. Follow the guidelines we discussed in class (and saw in a couple of video clips).
You may build your prototype on paper or using a wireframe mockup tool; it's your choice. In preparation for the user-testing part of the next assignment, some of your teammates should use your prototype to "walk through" the tasks you're 
focusing on; this will help find obvious bugs or flaws in your prototype.
Part (c) 
Conducting the user tests and using their results will be part of the next assignment, but it would be wise to think about recruiting your user test subjects and making arrangements now.
 
For this assignment, turn in:

   a description of the aspect of your site you will (re)design (about half a page)a sentence or two that describes which approach you are taking: designing two alternatives and testing them both, or creating a design, testing it, 
  creating a refined design, and testing the refined design your prototype(s)—two of them for the two-alternative approach, one (now) for the refine-one-design approach. 
  If you're using Mockingbird, (a) from Mockingbird's File menu, export your project to a PDF file and submit it, and (b) using the Share icon on Mockingbird's toolbar, get a URL for your project and paste that URL into the document you're submitting. The default sharing settings should allow anyone with the URL to view your site. If you're using Moqups, the process is similar; the Share and Preview menu is a the top right of the screen (it's a box with an arrow coming out of it). 
    If you're using paper, take a few photos of your paper prototype and submit them.
    
Submit these materials via Checkmate. Make sure the description/approach document includes the names of all your group members.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/4/hw/hw2.html
##-----------------TITLE------------------------##
Second Homework
##------------------TEXT------------------------##
ICS 4 • David G. Kay • UC Irvine 
Second Homework


This assignment is due by 7:00 p.m. on Thursday, January 24.
For this assignment you must work in pairs, according to the guidelines on the assignment page.  One member of each pair submits the assignment to Checkmate, taking care that both partners' names are included at the top of the document submitted. You may use Piazza to look for a partner, or you may make arrangements just before or just after class. But you won't get full credit if you don't do this with a partner; it won't be an excuse that you couldn't find one or didn't know anybody.
Part (a)  
 Read Bruce Tognazzini's article, "A Quiz Designed to Give You Fitts". There's nothing to turn in for this part, but these ideas may show up later. There's a lot of interesting material at his asktog.com site.
Look over the "Perception in Visualization" web page by Christopher G. Healy. You don't have to read the entire text, but you should scan the examples and spend a few minutes playing with each of the two interactive demonstrations on the page.
Part (b)   (optional) Do this on-line study illustrating Fitts' Law. It doesn't include much explanation, but the task should give you a tangible understanding of the principle behind Fitts' Law. There's nothing to turn in for this part.
Part (c)   How many different items have you recorded in your HCI notebook so far? (That is, each partner should supply his or her own number.) We'll give full credit for any truthful answer to this, even zero, but we'd like to know how much use the class is making of these notebooks. 
Part (d)  In class recently we have discussed these topics, among others:

 Miller's 7 +/– 2 items (capacity of short-term memory)  Pre-attentive processing, gestalt laws  Mental models, metaphors, or agents  Fitts' Law  Graphical coding  Affordances  Auditory, visual, and kinesthetic learning 
You and your partner together should pick three of these seven topics; for each of the three, choose an example from your HCI notebooks of a web site that illustrates the topic (if neither noteboook has an example, go look for one). Don't choose examples we discussed in class or that come directly from the readings. Your examples may show a misapplication or misunderstanding of the principles or may be a particularly good example; in either case, describe and analyze each example using the terms and guidelines that pertain to the topic it illustrates. If your example is a negative one, suggest an improvement and describe why your suggestion is better.
A dozen pithy lines of text should be sufficient for each of the three examples (where "pithy" means clean, clear, well-organized, terse, and not padded); half a page for each is an absolute maximum. (Again, this refers just to the text; you will probably use more than half a page each if you count illustrations.)
The point of doing this in pairs is for you to talk about it together. It is not okay just to split up the work, each person doing half independently and then combining the result.
 
Combine all your answers (from parts (c) and (d)) into one electronic document, which one partner should submit  via Checkmate. Make sure the document includes the names of both partners.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/4/hw/hw3.html
##-----------------TITLE------------------------##
Third Homework
##------------------TEXT------------------------##
ICS 4 • David G. Kay • UC Irvine 
Third Homework


This assignment is due by 7:00 p.m. on Monday, February 4.
For this assignment you are required to work in pairs, according to the guidelines on the assignment page.  
One member of each pair submits the assignment to Checkmate, taking care that both partners' names are included at the top of the document submitted. You may work with the same person as before, but you may also pick a new partner. But either way, the point of having partners is to work jointly, discussing the tasks; it is not okay just to split up the work with each partner doing half independently.
Part (a)  
 Read "Guidelines for Designing Web Navigation," by David K. Farkas and Jean B. Farkas. Technical Communication 4 (2000), 341-358; 
it's available electronically for class use at http://www.ics.uci.edu/~kobsa/courses/ICS104/lit/Farkas&Farkas-TC.pdf. 
Also read Jakob Nielsen's Top Ten Mistakes in Web Design.
There's nothing to turn in for this part.
Part (b)   Pick a partner who is also enrolled in the class. Together, find three different web sites that perform the same function: 
travel sites (expedia.com, orbitz.com, kayak.com), book sites (amazon.com, barnesandnoble.com, borders.com), departmental home pages (anthro.uci.edu, anthro.ucla.edu, anthro.ucsd.edu), 
government sites (whitehouse.gov, www.number10.gov.uk, www.eylsee.fr), anything.
As you're browsing for your three sites, write down in your HCI notebook any particularly good (clear, clever, attractive, efficient, informative) web pages you encounter, 
and any that are particularly bad (unclear, frustrating, clumsy, ugly).  Besides the URL, write down briefly what impressed you (positively or negatively) about the site.
Next, identify a task that each of the three sites performs:  For example,  find a flight to Paris on a given date, order the textbook for this course,
 find all the faculty who study people's use of technology, identify the leader's policy on energy conservation.  Pick a task of moderate complexity:  
 Don't pick one that only requires three or four clicks on one page and don't pick one that requires 25.  Of course, the different sites will probably 
 require different steps to perform the task.
Which of the three sites lets the user perform the task the most quickly?  Consider everything the user needs to do:  reading and recognition time, 
mouse movement time, anything else.  (Pay less attention to slow response time, since that may vary from one time of day to another.  But if a site is consistently slow to respond, it's worth mentioning.) 
Which of the three sites is the slowest?  Is there something about the slowest site that explains the slowness—for example, that it gives the user more choices than the others?
You'll want to decide on the characteristics of the hypothetical user you're talking about here—beginning or experienced, old or young or in-between, 
whatever characteristics are relevant—and keep those assumptions constant throughout.
Produce screen shots of the steps involved for the fastest and slowest sites.  Describe and explain your conclusions in at most half a 
(single-spaced) page (not counting illustrations). As always, give reasons that relate to what we've covered, such as these: The button is too small to hit easily;
 the alternatives are lined up so it's easy to scan the list; the user is required to make too many fine visual distinctions based on the amount of blue in the images;
  the categories are named using terms that the intended users will know.
Then, take your best-performing website and redesign it for the task you analyzed to make that task even faster.  (If you think your winning site is perfect, 
choose one of the other sites and redesign it to improve it, maintaining consistency with the rest of the original site—that is, don't just redesign it to look like the winner.) 
Think about how to rearrange the elements on the page, how to use features like color and alignment to group items and guide the user's eye, how to categorize and organize the content, 
and anything else we've discussed in class or you've read in the book. Of course not every aspect will apply to your task on your site.
Sketch out your redesign on paper. You and your partner should each walk through the redesign (following through the task, step by step), looking for problems and making improvements. 
After you're satisfied with your redesign, decide whether your redesign would be better represented as a low-fidelity prototype or a high-fidelity prototype. If the improvements are mostly about layout and interaction, choose low-fidelity. If they're more about color, typography, detailed illustrations, or fine-tuned arrangement of elements, choose high-fidelity.
• If you've chosen a low-fidelity prototype, create a mock-up of your redesign using Mockingbird (gomockingbird.com) or Moqups (moqups.com). Mockingbird and Moqups are "wireframe mockup" tools for building low-fidelity prototypes of web sites. They let you place user interface items on a screen to create a page, they let you create multiple pages, and they let you establish hyperlinks between pages. Then you (or a user) can run the prototype, following the links to test out the behavior you want to examine. (To save or export your work, Mockingbird asks you to sign up; you can sign up for a free account that has a few limitations that won't affect our work, or for an inexpensive paid account that's less limited. Moqups also asks you to sign up, but there's no for-pay version and there are fewer limitations. They're pretty similar and you can choose either one.) 
For this assignment, you  just need to show the new (redesigned) screen(s) and how they link to each other; you don't need to implement the underlying functionality of your redesign. This is a mock-up, not a polished design, 
  so don't spend more than an hour or two putting the redesign mock-up together. When you're done,  export your work to a PDF file and share the file (the system will give you a URL). Submit that PDF file along with the main electronic document you turn in; in that document, be sure you paste the sharing URL.

• If you've chosen a high-fidelity prototype, 
 use a WYSIWYG GUI builder (software that lets you place predesigned buttons, menus, scrollbars, and other user interface elements onto a screen design, e.g., Visual Basic, Visual C++, Dreamweaver, FrontPage, 
  Interface Builder  or RapidWeaver or OmniGraffle (on the Mac)). Some of these tools are available on the ICS lab machines or for free trial download; 
  nobody needs to purchase new software for this part.  Even if neither partner is a proficient software user, you should try to learn your way around one of these tools. If you'd like to use Photoshop for this task, you may, but the tools listed above have built-in interface elements like windows, buttons, and so on, 
 while in Photoshop you have to build them from the ground up. Incorporate your high-fidelity illustrations into the electronic document you turn in.
In half a page at most, describe your redesign and explain how it improves the original. Give reasons for each change that relate to what we've covered 
  (i.e., not, "We think this looks cooler," but something like, "We used terms familiar to the user, following Nielsen's guideline of matching
  the system with the real world; we grouped similar tasks together visually, following the gestalt principle of using physical proximity to reinforce the 
  closeness in meaning; we listed more available options on the first page, promoting recognition over recall (Nielsen) and following users' general preference for broad,
  shallow hierarchies over narrow, deep ones").


Combine all your group's written answers into one electronic document (plus the wireframe PDF export file in the low-fidelity case) and submit it via Checkmate. Make sure the document includes the names of both partners.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i141/hw/asst2.html
##-----------------TITLE------------------------##
Information Retrieval Assignments
##------------------TEXT------------------------##
INFX 141 / CS 121 • DAVID G. KAY • UC IRVINE • WINTER 2015
Assignment #2Text Processing Functions


This assignment is to be done individually; you may not use code written by your classmates. Use code found over the Internet at your own peril -- it may not do exactly what the assignment requests. If you do end up using code you find on the Internet, you must disclose the origin of the code. As stated in the collaboration guidelines, concealing the origin of a piece of code is plagiarism. Use Piazza for general questions whose answers can benefit you and everyone.
General Specifications

You may use Java, Python, or Scheme/Racket for this assignment.  Java is the safest choice because the assignment is written with Java in mind and contains a variety of helpful Java resources.  Using Python or Scheme will require you to translate these Java resources.

If you use Java, your solution must fill out the program skeleton provided.
(i) Fill in each method according to its Javadoc specification. 
(ii) Feel free to create additional methods / classes where necessary.
If you don’t use Java, you should produce a similar skeleton to start with and fill it out. You should also be very precise with instructions for how to run your program -– what programs are needed, what versions, and so on. If the TA can’t run your program, your grade will reflect that.

You should test your code thoroughly, of course, with test data you create. You may exchange test data with anyone in the class. We will test your program with our own text files.
At points, this assignment may be underspecified (i.e., not fully describe what to do in every situation). In those cases, post your questions on Piazza or check with the TA. For minor issues, make your own
assumptions and document them.
Project Skeleton:
  http://www.ics.uci.edu/~kay/courses/i141/hw/Assignment2.zip


Part A: Utilities (20 points)
Write a method that reads in a text file and returns a list of the tokens in that file. Write a method to print out frequency results.

Package: ir.assignments.two.a

File: Utilities.java

Method: tokenizeFile(File)

Method: printFrequencies(List<Frequency>)

Part B: Word Frequencies (20 points)
Count the total number of words and their frequencies in a token list.
￼
Package: ir.assignments.two.b

File: WordFrequencyCounter.java
Method: computeWordFrequencies(ArrayList<String>)

Part C: 2-grams (30 points)
A 2-gram is two words that occur consecutively in a file. For example, "two words", "words that", and "that occur" are all 2-grams from the previous sentence.
Count the total number of 2-grams and their frequencies in a token list.

Package: ir.assignments.two.c

File: TwoGramFrequencyCounter.java
Method: computeTwoGramFrequencies(ArrayList<String>)

Part D: Palindromes (30 points)
A palindrome is a words or phrase that reads the same in both directions. For example, these are all palindromes: "kayak",  "Do geese see god", "A man, a plan, a canal--Panama".
Count the total number of palindromes and their frequencies in a text file.

Package: ir.assignments.two.d

File: PalindromeFrequencyCounter.java
Method: computePalindromeFrequencies(ArrayList<String>)


Once you have implemented your palindrome counting algorithm, please perform a short analysis of its runtime complexity: Does it run in linear time relative to the size of the input? polynomial time? exponential time? This analysis should go in the analysis.txt file in this package.

Submitting Your Assignment
Submit your assignment via Checkmate (checkmate.ics.uci.edu). 

Evaluation Criteria
Your assignment will be graded on the following four criteria:Correctness:
How well does the behavior of the program match the specification?
How does your program handle bad input? 
Efficiency:
How quickly does the program work on large inputs?

Style/documentation/aesthetics: Is the program clearly documented and well written?

Understanding:
Do you understand the program you wrote? This will be tested during meetings with the TA. If you show poor understanding of your program, that will outweigh the other criteria.

David G. Kay, kay@uci.edu 

Friday, January 23, 2015 4:03 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i141/hw/asst5.html
##-----------------TITLE------------------------##
Information Retrieval Assignments
##------------------TEXT------------------------##
INFX 141 / CS 121 • DAVID G. KAY • UC IRVINE • WINTER 2015
Assignment #5Search Engine

[Still subject to clarifying changes]
Like the last assignment, this one comes in two alternative versions, a Developer version (appearing immediately
below) and an Analyst version (appearing later in this document).  Both versions have milestones (intermediate deadlines),
so mark your calendars and plan accordingly.

You may do this assignment individually or in groups of 2 or 3. As before, the expectations of each size group
are the same; shared labor is offset by communication and coordination costs.  All group members receive the
same score except in truly extraordinary circumstances.  You may use Java or Python to write the software you need for either part; if you'd like to use other tools not mentioned here, check with us.
Use Piazza for general questions whose answers can benefit everybody.

 
DEVELOPER VERSION

In this assignment you will develop an entire search engine for a large collection of books: those avaiable
free from Project Gutenberg.  Here is a summary of the milestones:


 Due DateDescriptionDeliverablesPointsEvaluation CriteriaM123 FebruaryGet the dataScreen shot (.jpg)10Were you able to get the data? M22 MarchLucene up and runningZIP file with code20Were you able to get the demo up and running with the small changes? Did you provide a correct index?M312 MarchSearch engineCode and ZIP file with pictures 20Were you able to index the entire collection? Does your search seem to work? Did you add the Author and Title fields? M412–16 MarchDemonstrations 50Does your search engine work for the TA's queries? Do you understand how it works?Extra Credit12 MarchExtra credit Web UIShow at demo15Does the UI work?


[Developer] M1. Get the data
Get the entire collection of English ebooks from Project Gutenberg.
The collection is available here as an ISO file: http://www.gutenberg.org/wiki/Gutenberg:The_CD_and_DVD_Project .  (Just download the contents of the April 2010 DVD; don't include earlier versions.)

Deliverable:  A screen shot (in JPG form) showing the folder structure of the collection with evidence that it's located on your computer (i.e., a directory path should be displayed that includes your computer's name).

[Developer] M2. Get the Lucene demo up and running
Download the Apache Lucene text search engine library from
lucene.apache.org.  Be sure to get the latest version, 4.10.3, and to download both (a) the package
containing the source code, so you can see all the example code, and
(b) the binary package so you don't need to build Lucene from scratch.  Place both packages in the same folder.
If you'd like to try this in Python with the PyLucene wrapper,
follow the additional instructions at
http://lucene.apache.org/pylucene/ (and note that according to their page, PyLucene is compatible with Java Lucine version 4.10.1).


Once you have everything in place, navigate to the simple demo folder at contrib/demo.
Own it—that is, copy and paste the code to your own project. Then:
  
Change the demo so that the Usage messages for both IndexFiles and SearchFiles ends with a smiley face :-)

Run it over these 2 text files using IndexFiles. Then use the search program SearchFiles. The two test files can be found here: 
http://www.ics.uci.edu/~kay/courses/i141/hw/asst5-test-text-files.zip.


Deliverable: the modified IndexFiles.java and SearchFiles.java, or the equivalent Python files, and the Lucene index folder (and its contents) for the couple of files in the test run. Zip the index folder. Add any additional files you need to convey information to the TA. 

[Developer] M3. Search engine for the Gutenberg collection
Make sure you understand the demo code in M2: Study the Lucene API and documentation.
Here are some additional notes and requirements:

Ignore ETEXT* in the Gutenberg collection.Study the raw data; you will notice that things aren't completely consistent.
  Some books are provided in Rich Text Format, others are plan text, zipped.
  Focus on the plain text books, i.e., the ones with the .txt extension that you find inside ZIP files.Add Title and Author fields to your Lucene "Documents."  Include more fields you think will improve the
  quality of search results.  (The challenge here is to devise how to scrape that information
  out of the raw data.)Boost matches in the Title and Author fields, and any other fields you see fit.Luke is a very useful tool
  for inspecting Lucene indexes; download it at https://github.com/DmitryKey/luke.
  
 To unzip files in Java, look at java.util.zip.

Deliverable:  Your source code as a Zip archive, plus one
  or more screen shots (JPG) of your index as seen by Luke.
  Make sure the picture(s) show the structure and the total number of documents in the index.
[Developer] M4. Demo
Keep an eye out for a message arranging the demonstrations and follow the instructions in that message.
[Developer] Extra credit:  Give your search engine a Web UI
Instead of a command line interface, let people search the index with a web interface.
Use whatever web framework you're familiar with.  Tomcat is known to be a good container for Lucene apps.
The extra credit work will be assessed during the live demo; there is no separate deliverable.
If you choose to do it, make sure to tell the TA that you did it.




ANALYST VERSION
In this assignment you will develop a search engine for a collection of poems, specifically haiku.
The collection you will search is the Harold
G. Henderson Memorial Award Collection available for free from the Haiku Society of America.
This will be a physical search engine, not an electronic one, and you are going to be the agent
of computation.  Here is a summary of the milestones:

 
 Due DateDescriptionDeliverablesPointsEvaluation CriteriaM123 FebruaryGet the dataPDF report10Were you able to get the data? Are the poems properly identified? Does the layout of the poems look as if it will work well for mechanical search? M22 MarchBuild the IndexPDF report20Is the index you provded correct: Does it map all words? Does it map the words to all poems in which they occur? Is TF-IDF computed correctly?M312 MarchSearch enginePDF report20Does your search produce the correct poems with the correct ranking? Does your mechanical search device exist, with pictures to prove it? M412–16 MarchDemonstrations 50Are you able to search, given the TA's queries? Are your search results correct? Is your search process fast (shooting for 30 seconds for a three-term query)?Extra Credit12 MarchExtra credit: better searchShow at demo20Is your search able to retrieve documents containing words not in the query but related to it?

 
[Analyst] Overview
Your "search engine" will be a physical one, which you will manipulate to carry out searches "by hand."
We envision it something like this:

 



At the end, you will show the TA the components of your engine and use it to search for specific
queries the TA will give, e.g., "lawless mother cooking."
When the TA gives you a query, you will play the computer's role:
search the index, make some calculations, and produce a ranked list
of poems. This is your search process; you are the computing agent.


Your search should be as fast as possible and it should produce a ranked list of poems for each query,
ordered by how well they satisfy the query (using TF-IDF as the scoring heuristic).

Materials: You will need:
All the haiku [poems] on the page cited above.

A binder, sheets of white paper, and labels (possibly small Post-Its)

A rolodex, or another binder with tabs

A calculator or calculator app

Construction:
The binder holds the collection of poems, one or more per sheet.
Make sure to place identifiers on labels, sticking out past the page edge.
You can decide what kind of identifier you need.  The rolodex (or second binder)
holds the index to the words.

[Analyst] M1. Get the data
Get the entire collection of haiku poems from the cited page and place them in a document.
Make sure to give identifiers to all poems. This document will be the source of what you will be printing and filing in the binder. As such, think carefully about how many poems you place per page, and what kinds of identifiers you will use.
Deliverable: A PDF document with the collection of properly identified poems.
[Analyst] M2.  Build the index
This is going to be the most time-consuming step of this project,
so you should start it as early as possible, the first week of the project. Here is what you need to do:
Scan through the poems and build an inverted index that maps words to poems. Do this in a document.
Besides mapping words to poems, the index should also have the TF-IDF of the words in each poem. Consider doing a little bit of programming to help you compute all this data. (Partial credit will be given for incomplete indexes. If you show a complete index at milestone M4, your score for that milestone will improve.)
Deliverable: A PDF document with the index.
[Analyst] M3. Physical search engine
Print and mount the poems document and the index document into the physical devices, i.e., the rolodex and the binder. Place the necessary labels.
Deliverable: A PDF document that explains the search process for the query “lawless mother cooking”. Include plenty of pictures of how your physical device is being used at each step. Explain the scoring process clearly.
[Analyst] M4. Demo
Bring your physical devices to your appointment with the TA.
[Analyst] Extra credt: Word associations
Sometimes people don’t know what they are searching for and use the wrong words. For example, users could say “mother” when they really mean “father” or “parent”; they could say “woods” for “forest”, and so on.
This collection of poems has several words that are associated with each other. Find those words and add their occurrences in the index in a way that makes sense.
The goal is for you to index those associated words so that if a user searches, for example, for “father,” the poems that have occurrences of “mother” will also be retrieved, possibly with a lower rank than poems with occurrences of “father”. (Do this not just for “mother” and “father” but for several other words in the collection that are associated with each other.)
The goal here is to capture the deeper semantics of concepts beyond the face value of words.
The extra credit work will be assessed during the live demo, there is no separate deliverable. If you choose to do it, make sure to tell the TA that you did it.



  
 
 
 

David G. Kay, kay@uci.edu 

Wednesday, February 25, 2015 7:25 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i141/hw/asst4.html
##-----------------TITLE------------------------##
Information Retrieval Assignments
##------------------TEXT------------------------##
INFX 141 / CS 121 • DAVID G. KAY • UC IRVINE • WINTER 2015
Assignment #4Text Analysis and Indexing


In this assignment you will be exploring a corpus of Email messages about the Enron scandal. The corpus consists of the messages that were sent by or to Enron executives in the months preceding the scandal. It's a 400+MB file, tarred and gzipped, that you can download from  https://www.cs.cmu.edu/~./enron/enron_mail_20110402.tgz. A description of the data is available at https://www.cs.cmu.edu/~./enron/. You are going to play the role of a data analyst hired to examine the evidence by doing some simple fact-finding and data processing.
General specifications:
You may do this assignment individually or in groups of 2 or 3. As before, the expectations of each size group are the same; shared labor is offset by communication and coordination costs. All group members receive the same score except in truly extraordinary circumstances.We know there is great diversity in programming skill among class members. Moreover, we recognize that not everyone in the class is in a major or has a career goal that involves significant software development. Thus, Part 3 of this assignment has two alternative options that we'll call "Developer" and "Analyst." Your group may choose either. The Developer option is for students who are secure in their programming ability. The Analyst option is for those whose programming skills are less strong. We caution you that "Analyst" does not mean "easy," as you will see.You may use Java, Python, or Scheme/Racket to write the tools you need for your analysis.Use Piazza for general questions whose answers can benefit everybody.

Part 1. Context (20 points)
Find out about the Enron scandal, for example by finding documentaries on YouTube or text articles online. (One good one, called "The Smartest Guys in the Room," is reportedly available on Netflix.)
Create PDF document named context.pdf that includes:
A concise summary of the scandal (maximum half a page)A list of each main player with their organizational affiliation, title (if any), and role in the scandalThe year in which the main events unfolded
Part 2. Quantify the data (40 points)
Unzip and untar the data file; if you don't know how to do this, find out. Then quantify the evidence by finding the answers to these questions (keeping notes on the steps you take):
Create a PDF file called quant.pdf that includes answers to those questions and, for each, a description of the process you followed to find those answers. If you used scripts or programs for this part, include them in a zipped folder called part2.How many people are targeted in this data set? (We're just asking about the folder structure, not about the people mentioned in the emails themselves.)How many individual data files are we dealing with?How many messages were sent by these people in total? (Explain how you're interpreting the term "sent.")How many messages were sitting in these people's Inboxes in total? (Explain how you're determining what counts as an "inbox.")
Who are the 10 people with the largest number of data files?
Part 3 [Developer]. Index the data (40 points)
Create inverted indices for the entire set of data files in the manner explained below. Here are some general notes about these indices:

For the purposes of this homework, create these indices as ASCII (.txt) files so the TA can read them directly.

Filter out email header words.
Filter out English stop words (see  http://www.ranks.nl/resources/stopwords.html).
  Use the Porter Stemming algorithm to "normalize"the terms (see
http://tartarus.org/martin/PorterStemmer/).
 Place each posting on a separate line.
 Create each posting to follow this format (where \t is a tab character): 
  <term>[\t<doc>:<frequency>:<position>[,<position>]*]+
  Order terms alphabetically in the index file.
  Within each posting, order document lists alphabetically.

(Required)  Create an index that uses human-readable terms and document identifiers. For example:
    amendment   allen-p/_sent_mail/465.:1:34    stclair-c/sent/993.:5:45,60,76,84,100
    Call this index file index_plain.txt.

(Extra credit, maximum 10 points) Create a second index that uses some encoding of, at least, terms and document identifiers in a way that decreases the size of the index file significantly (at least 20%). You may also compress the position information.  Call this index file index_compressed.txt.  [You can create this second index by parsing the files again or create it from the first index.]
Part 3 [Analyst]. Estimation (40 points)
Create a PDF document called estimation.pdf that includes responses to the following:
Find all documents that have the terms "conflict of interest", independent of capitalization. Explain what you did to get your answer.Estimate how many distinct terms are in this data set. Explain the reasoning behind your estimate. If you used scripts or programs, explain what they do.With respect to the index_plain.txt file described in Part 3 [Developer] above, estimate the size of that file in megabytes. State all of your assumptions and your calculations. You may use scripts, programs, or other tools to help create your estimate, but of course you must disclose what you used.
Submitting your assignment: Your will submit your work via Checkmate. For groups of two or three, just one of you should submit all parts of the assignment; the names of all group members must appear near the top of every submitted file. 
First, submit your context.pdf file from Part 1. 
Second, submit your quant.pdf file and your zipped part2 folder from Part 2. 
Third, for Part 3 [Developer], submit your index_plain.txt file, optionally your index_compressed.txt file, a zipped folder called programs containing your program(s),
and optionally (for those who do part 2) a fille called encoding.pdf that explains your encoding.
Third, for Part 3 [Analyst], submit your estimation.pdf file and optionally a zipped folder called programs containing any [non-mainstream, non-public] code you wrote or used for this part.


David G. Kay, kay@uci.edu 

Sunday, February 15, 2015 2:55 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i141/hw/asst1.html
##-----------------TITLE------------------------##
Information Retrieval Assignments
##------------------TEXT------------------------##
INFX 141 / CS 121 • DAVID G. KAY • UC IRVINE • WINTER 2015
Assignment #1Quantifying Big Data



You may do this assignment alone, or with one partner.

The Task:
Similar to the activity we did on the first day of class, write two statements that express 
large quantities of storage in everyday terms:
One statement should be of the form, "One petabyte is the aggregate amount of disk storage on the 
  laptops of all the students who use our classroom in a quarter." [You may use petabyte, exabyte, zettabyte, or yottabyte.]One statement should be of the form, "The UCI registrar's photos of every UCI student in the next 50 years will take up 1.1 terabytes." [Try, unlike this example, to get a quantity that's at least half a petabyte.]
Both statements express equalities, so in some sense they're equivalent in form. But the first one expresses the peta-exa-zetta-yotta term in a round quantity (one exabyte; 10 zettabytes); the second expresses the real-world quantity as a round number (all the images saved in one month; the audio generated by 1000 DJs).
Give a short synopsis of how you reached your figure. (For example: A typical student laptop holds 500 GB or half a terabyte. Our classroom seats about 130. There are 10 "periods" on MWF (starting hourly 8:00 to 5:00) and 7 on TuTh for a total of 17, assuming that the classes are full each period. That comes out to 1105 terabytes or about one Petabyte.)
Try to be accurate, and cite where you got quantities that aren't obvous. But this isn't a research project; just find a plausible figure on the web and go with it.
Reference:
  · 1 Bit = Binary Digit
  · 8 Bits = 1 Byte
  · 1000 Bytes = 1 Kilobyte 
  · 1000 Kilobytes = 1 Megabyte 
  · 1000 Megabytes = 1 Gigabyte 
  · 1000 Gigabytes = 1 Terabyte 
  · 1000 Terabytes = 1 Petabyte 
  · 1000 Petabytes = 1 Exabyte
  · 1000 Exabytes = 1 Zettabyte 
· 1000 Zettabytes = 1 Yottabyte 
Why not 1024 instead of 1000? Probably the best answer is that 2% difference isn't significant for this purpose.  But while processor and memory designers work in units of 1024, the secondary storage (hard disk and solid-state disk) industry has long used 1000.

Submitting Your Assignment
Submit your assignment via Checkmate (checkmate.ics.uci.edu).

If you worked with a partner, only one of you should submit, and the document must have both partners' names and student ID numbers at the top. The non-submitting partner should probably be present when the work is submitted, just to verify that both names are present and the submission was successful.
David G. Kay, kay@uci.edu 

Wednesday, January 7, 2015 12:20 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i141/hw/asst3.html
##-----------------TITLE------------------------##
Information Retrieval Assignments
##------------------TEXT------------------------##
INFX 141 / CS 121 • DAVID G. KAY • UC IRVINE • WINTER 2015
Assignment #3Crawling


Goal: 
  Using the specified library and program skeleton, write a program to crawl the domain www.ics.uci.edu in order to answer a series of questions specified below.

Crawling library: http://code.google.com/p/crawler4j/ or 
			https://github.com/Mondego/crawler4py
Project skeleton: http://www.ics.uci.edu/~kay/courses/i141/hw/Assignment3.zip

General specifications:

This assignment may be done individually or in groups of 2 or 3. 
For each size group, the expectations are the same; solo workers save time by not having to talk to anyone while group workers can split the work with the addition of communications costs.  All group members receive the same score (except possibly as modified by the TA in the interview phase; see below).You may use text processing code that you or any classmate wrote for the previous assignment. You may not use crawler code written by non-group-member classmates. Use code found over the Internet at your own peril—it may not do exactly what the assignment requires. If you do end up using code you find on the Internet, you must disclose the origin of the code. As stated in the collaboration guidelines, concealing the origin of a piece of code is plagiarism. 
Use Piazza for general questions whose answers can benefit everybody.
You may use Java, Python, or Scheme/Racket for this assignment.  As before, Java is the
safest choice because the assignment is written with Java in mind and the skeleton is in Java.  This time there are some resources provided in Python; you'd still have to translate the skeleton. The Python resources, being newer, may be less robust (meaning you should allow extra time in case of snags).
But there may be extra credit for identifying and documenting specific bugs in the Python resources.
Your task is to fill in the one method in the skeleton according to its specification.  You may create additional methods and classes where necessary, provided the interface is the same.

More specific specifications:(Very important for getting credit)
Set the name of your crawler's User Agent to this precise string: UCI Inf141-CS121 crawler StudentID(s), where the last part is the eight-digit student ID of each team member, separated by one space.
Start with the seed http://www.ics.uci.edu and crawl from there.  Crawl only the domain ics.uci.edu and all of its subdomains (anything.ics.uci.edu).
(Very important for politeness) Wait at least 300ms between page requests to the same subdomain.
We will verify execution by checking the server logs of some pages in the domain.  These servers are in any correctly-written crawler path.
If we don't find log entries for your student ID, that means that your crawler didn't perform correctly or you didn't set its name correctly.  If we can't
verify that your crawler did run successfully, we will assume that it didn't.

At points, this assignment may be underspecified (i.e., not fully describe what to do in every situation).
In those cases, post your questions on Piazza or check with the TA.  For minor issues, make your own assumptions and document them.

Questions:

How much time did it take to crawl the entire domain?

How many unique pages did you find in the entire domain? (Uniqueness is established by the URL, not the page's content.)

How many subdomains did you find? Submit the list of subdomains ordered alphabetically and the number of unique pages detected in each subdomain. The file should be called Subdomains.txt, and its content should be lines containing the URL, a comma, a space, and the number.

What is the longest page in terms of number of words? (Don't count HTML markup  as words.)

What are the 500 most common words in this domain? (Ignore English stop words, which can be found, for example, at http://www.ranks.nl/stopwords.) Submit the list of common words ordered by frequency (and alphabetically for words with the same frequency) in a file called CommonWords.txt.

Submitting your assignment:
Your will submit your work via Checkmate. For groups of two or three, just one of you should submit all parts of the assignment; the names of all group members must appear near the top of every submitted file.
First, submit a single zip file that matches the structure of the project skeleton and contains your code in the src folder.  Second, submit a plain text file called  Answers.txt with your answers to questions 1, 2, and 4. Third, submit the 
  Subdomains.txt file described above. Fourth, submit the CommonWords.txt file described above. Fifth, if there is anything else you wish to communicate to the TA, such as implementation assumptions made, this should be placed into an additional README.txt file included in your source code zip file.

 
Evaluation criteria:
Your assignment will be graded on the following three criteria.

Correctness:
(a) Did you crawl the domain correctly? We will verify that in our servers’ logs.
(b) Does your crawler pass our tests of the crawl method?
(c) Are your answers to the questions reasonable?
(Note that correct answers are not valid without evidence of correct crawling.
Answers by different crawlers will vary due to a number of factors. “Correctness” of answers will be based on how reasonable they are.)

Style/documentation/aesthetics:
Is the program clearly documented and well written?
Understanding:
You will have an in-person meeting with the TA where you will be asked
questions about your crawler’s implementation.
All members of the group are expected to demonstrate solid
understanding of the crawler. In cases where understanding is
clearly lacking, the scores will reflect that.


David G. Kay, kay@uci.edu 

Wednesday, February 4, 2015 12:42 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/131/index.html
##-----------------TITLE------------------------##
Informatics 131 Course Reference
##------------------TEXT------------------------##
Summer 2015 — Information and Computer Sciences — UC Irvine

Informatics 131  Course Reference
HUMAN-COMPUTER
INTERACTION

Instructor:  David G. Kay,
5056 Donald Bren Hall (kay@uci.edu). TA:
 
 Yubo Kou
  
(yubok@uci.edu)
Quick links: 

Slides
Slides (4-up) 
Textbook
  Assignments
  Piazza Q&A (public) 
  Email archive
Resources
Course goals: The first 40 years of
  computer science were concerned mainly with computers themselves—making
  them faster, smaller, more reliable, and better understood mathematically.
  Perhaps that's still the main concern of the field as a whole, but
  today computer scientists devote increasing attention to computers in their
  real-world context, which usually involves the people who use them.

Computers may be complex systems, but human
beings are even more complex, and when we try to understand how computers
and people work together—well, there's a lot to cover.  This course
will introduce the broad field of human-computer interaction (HCI):  the
psychological underpinnings of cognition and perception; the variety of
interaction devices, media, and styles; methods for designing systems
and evaluating their usability; and the principles and guidelines the field has developed.  The success of most systems today, especially
consumer products, depends largely on HCI decisions.

This course is also the prerequisite for Informatics 132, the project course in HCI requirements and evaluation. Also of note are Informatics 133, the course in HCI programming, Informatics 134, the HCI programming project course,  Informatics 143, on information visualization, and Informatics 153, on computer-supported cooperative work.

Prerequisite courses and concepts:
 The prerequisite for Informatics 131 is one course in computing and upper division
standing. The course will not require any significant programming—that's
for Informatics 133—but we do expect each student to be able to write clear, cogent,
grammatical English at an upper division level because much of the work
in this course will involve describing and justifying the design decisions
and evaluation judgements you make.  We also expect you to have these basic
computing skills:  Searching and browsing the Web, reading and sending Email,
downloading files, viewing and printing PDF (Adobe Acrobat) documents, and
creating or saving documents for Email and other purposes in plain ASCII
text form (not HTML or Word attachments). 

Meeting place and times:  Lecture meets
Tuesdays and Thursdays from 1:00 to 3:50 p.m. in Engineering Tower 202. 
The projection screen and audio of each class will be recorded and available through UCI Replay; after each class, you will receive electronic mail with the link for access. We must note, however, that this process is not 100% reliable; some classes may end up not being recorded. Moreover, in some classes we will be designing and critiquing our designs; being present to participate in those activities is an important part of the learning and counts towards the participation portion of your course grade.

Office hours:  
I will plan to be available to discuss course-related matters right after class on Tuesdays and Thursdays.       The TA
will have scheduled hours as needed at a time and place to be announced. We'll also be
happy to make appointments for other times during the week.

Questions and announcements:  You can
usually get a response to your course-related questions within a few hours
(perhaps a bit longer on the weekends) by sending electronic mail to the
address i131@uci.edu. We will never intentionally ignore a message, so if you don't receive a response, write again; sometimes overactive spam fiters snag a legitimate message. Using course-specific subject lines and your UCInet Email address will help your messages get noticed.
Email you send to i131@uci.edu is private between you, the TA, the reader, and me. We have also set up a more public discussion forum at www.piazza.com. Piazza has some advantages over the typical noteboard or discussion group; we'll use it this term and analyze its usability, too.

We may also send course announcements by Email
to the official course mailing list, so you should check your Email regularly.
 Note that this mailing list goes to the Email address that the registrar
has for you (your UCInet ID).  If you prefer to read your Email on another
account, you should set your UCInet account to forward your Email to your
preferred account (you can do this on the web at http://www.oit.uci.edu/email/deliverypoint.html).
 Don't let this slide; if you miss official announcements, your grade
could suffer.

This course has a home page at http://www.ics.uci.edu/~kay/courses/131/; an archive of official course Email is available on your MyEEE page.

  Textbook and course materials:  
  
Interaction Design:  Beyond Human-Computer Interaction, fourth edition, by Jennifer
Preece, Yvonne Rogers, and Helen Sharp. The third edition is okay, too. The publisher's site contains purchasing options, including a rental e-book at a reduced price.

The Cognitive Style of PowerPoint: Pitching Out Corrupts Within, second edition, by 
Edward R. Tufte. This short monograph takes a critical look at the use of
PowerPoint, a pervasive means of presenting information. (This document and the following one are available on Amazon for $7 each; we'll be using them in the second half of the course.)

Visual & Statistical Thinking: Displays
of Evidence for Decision Making, by Edward R. Tufte.  This reprint of
Chapter 2 of Tufte's book, Visual Explanations, describes two
situations where the way information was presented had life-or-death consequences.

Annals of Medicine: The Checklist, by Atul Gawande (The New Yorker, December 10, 2007). A broad, practical discussion of how people can better cope with complex systems (in this case, surgery).

Course structure:

Assignments
(40% of the course grade, with later assignments generally weighted more
heavily than earlier ones)

Class participation (15%).  This mostly involves being present in class so you can take part in the in-class design and evaluation activities.
Plan to attend every class meeting. 
One midterm, given in class on Thursday, August 20 (15%)

One final exam, on Tuesday, September 8, from 1:00 to 3:00 p.m. (30%)
We determine final grades neither on a formal curve (with equal numbers of As and Fs, Bs and Ds, and so on) nor on a straight, fixed scale.
  
Grades below C are rare in this course; they result mostly from not completing assignments or otherwise not being engaged with the course. We recommend that you focus not on letter grades but on learning what's necessary to earn high scores; the grades will follow from that.

We're required to say that in unusual
circumstances, these criteria could change, but we do not expect that to
happen.
Special needs: Any student who feels he or she may need an accommodation due to a disability should contact the UCI Disability Services Center at (949) 824-7494 as soon as possible to explore the possible range of accommodations. We encourage all students having difficulty, whether or not due to a disability, to consult privately with the instructor at any time. 
What you must do right now to get started
  in Informatics 131:
  
  — If you do not have a UCInet ID,
  get one.  See http://activate.uci.edu/.
  
  — If you prefer to read your electronic mail on an account other than your
  UCInet account, redirect your mail at http://www.oit.uci.edu/email/deliverypoint.html.
  — Complete the Informatics 131 Questionnaire at http://eee.uci.edu/survey/infx131summer2015 (by 5:00 on Friday, August 7).
  — Go to checkmate.ics.uci.edu, log in with your UCInet ID, choose "Course Listing" and "Summer II 2015," click "Go" next to Informatics 131, and then click "List me for this course." You'll submit most of your work electronically; this step is necessary to set that up.
  
  — Sign yourself up for Informatics 131 on Piazza.com.

Good advice and helpful hints:

Check your electronic mail regularly; this
is an official channel for course announcements. When sending course-related mail, start the subject line with "Infx 131" or "HCI class".

Attendance in class is essential; concepts
and issues that come up in class will find their way onto the exams and
class participation in various forms counts towards the  course grade. Note that missing a day of class in the summer session is like missing a whole week in the regular year. We will only take attendance occasionally; if you're not present one of those times, it counts for a lot.

Always keep your own copy of each assignment,
both electronically and on paper; if an assignment should get lost in the
shuffle (or if a file server should crash, which has happened
in the past), we'll expect you to be able to supply a replacement easily.

If you find yourself having trouble or getting
behind, speak with the instructor.  But never take the shortcut
of copying someone else's work and turning it in; the consequences can
be far worse than just a low score on one assignment.  The ICS department
takes academic honesty very seriously; for a more complete discussion, see
the ICS academic honesty policy: 
http://www.ics.uci.edu/ugrad/policies/index.php.

Approximate course outline:

Week
Date
Topic
Readings*

1.4 August
Introduction to the course and HCI
Conceptual models and metaphors
1
2
6 AugustCognitive foundations: memory, learning, vision, movement, language
3  
2.11 AugustHow interactions affect users; collaboration and social interaction; interaction styles4, 5, 6
 13 AugustDesign process: needs and requirements, data gathering and analysis; prototyping 
3.18 AugustDesign process (continued)7, 8, 9
20 AugustMidterm; Design process (continued)
10, 11
4.25 AugustDesign process (continued); evaluation12, 13, 14
27 AugustEvaluation (continued); interaction devices15
5.1 Sept.Guidelines for hypermedia, feedback, errors, help, menus, forms, screens, typographyOther readings*
3 Sept.Users with disabilities; information visualization; PowerPoint issues; epilogue Tuesday8 Sept.Final Exam, Tuesday 8 September, 1:00 to 3:00 p.m.
   

* Chapters shown are in the Preece/Rogers/Sharp text.
 Read the Tufte monographs and the Gawande article whenever you like, but before the last class meeting.

Acknowledgements:  Alfred Kobsa and
Nayla Nassif generously contributed materials to this course.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/131/hw/hw4.html
##-----------------TITLE------------------------##
Informatics 131 * Assignment 4
##------------------TEXT------------------------##
Information and Computer Science — UC Irvine — David G. Kay — Informatics 131
FOURTH HOMEWORK (MINI-PROJECT)
This assignment is  a long one with many parts, some involving third parties
and others involving unfamiliar software, so you'll need to start early
and allow for the inevitable stumbling blocks. This assignment is worth about 50% of the overall assignment score in the class.

Summary:  Evaluate the usability of
a website or application chosen from the  alternatives below and propose a validated
redesign of the site or application.  The alternatives are
The ICS Undergraduate Education site, www.ics.uci.edu/ugrad/. This site serves as the main source of academic information about the School of ICS at UCI.
UCI's WebReg, www.reg.uci.edu/webreg (possibly including parts of WebSoc, http://websoc.reg.uci.edu/).

  Customer-operated checkout stations (as deployed at many large grocery stores and other retail establishments)

If you have a fourth alternative you'd like to work on, check with us right away.
This assignment has three phases: Evaluate
  the existing site or application, redesign it to improve the shortcomings you identified
  (including user tests of the new design), and propose the new design to
  the  individual or organization in charge.  Be sure to read the entire assignment right away so
  you're aware of everything that's involved.

You will work on this assignment in groups
of three or four.  We estimate that the increase in coordination and communication
necessary in a four-person group roughly equals the decrease in individual
workload over a three-person group and we expect that the products of three-person groups will be
at least as complete and thorough as the  results of four-person groups. In forming your groups, it would be wise to compare schedules, other obligations, and level of commitment to the class; your work will go most easily if all group members are roughly compatible in these respects. All members of the group will receive the same score (unless there are circumstances more extraordinary than any I've run into in the past).

  Each of the alternatives poses its own challenges, which your group needs to handle as best it can. WebReg, for example, is a "live" system; you can only test aspects of it that you're actually authorized to use. The checkout stations are also "live"; it would probably be wise to observe their operation only when the store isn't busy and only after getting permission from the store management (imagine how you'd feel if you were a customer with a bunch of people  hanging around the checkout station watching you and taking notes).

  As in past assignments, when we give page
    counts here we're referring to single-spaced text in 10- or 12-point
    type with one-inch margins.  We encourage helpful illustrations, but illustrations
do not count towards the page limits.


Part I:  Evaluate the existing site
 

Determine three or four typical tasks that a user might
perform on the site or with the application (e.g., 

find out when you can make an appointment with a counselor or whether you can take Informatics 131 on a P/NP basis).  Choose tasks that
are realistic, broadly representative of what users might want to do on
the site, and substantial enough that the user can't complete them with
just a few clicks in a minute or two. (The design changes you will propose in the next part should be based on the flaws you identify in this evaluation. If you already have in mind some particular changes, choose user tasks now that you think will point up problems that your contemplated changes will address.)

Find at least three people who aren't enrolled
in our class but who might be typical users of your site or application.  Have each person, one at a time, do a walkthrough of the
site, attempting to complete each of your three or four tasks.  Follow the walkthrough
guidelines discussed in class and in the book:  Encourage the users to narrate
what they're thinking and what problems or questions they're encountering.
 One team member should encourage the user to talk through the process (using
non-judgemental, non-leading prompts); the other(s) should observe and take
notes on the difficulties that come up. One good way to summarize the results of these walkthroughs would be to create a table with a row for each user and a column for each task; in the cells, write what happened with that user on that task: mistakes, questions, time taken, clicks or keytrokes required [not all of those, but whichever are relevant to your testing].

For web sites, use the guidelines in the Farkas & Farkas paper
(which you read as part of the previous assignment) to categorize the usability
problems your users encountered. For other applications, use Farkas & Farkas where appropriate and otherwise use other guidelines from the course.

Write a usability evaluation report of at
least two and at most three pages, which could include the table mentioned above. Describe very briefly what your evaluation
process was and at more length what results you found, referring to the
Farkas guidelines where applicable.  This will eventually
be an appendix to your redesign proposal, so you should write it with an
eye towards convincing the site management that you have made a thorough,
methodologically sound evaluation and that the flaws you identified are
more than just your personal opinion.  Of course you must also write in
a polite, professional tone; the site management won't take your advice
if they feel it's nasty, sarcastic, or making fun of them.

Try to be comprehensive, addressing most of
the major flaws, even if that means overlooking minor issues or repeated
instances of the same problems.  (If a site includes many links that are
hard to identify, for example, just say once something like, "Many
links, such as the 'Policies' link on the home page, are hard to
identify as links because they're not distinguished from other content.
 Farkas guideline 1.1 says, 'Be sure that all links indicate that they
are links.' "  Don't list every link that has a problem; that
will fill up the available space before you have time to cover most of the
important issues.)  It's a good strategy to mention some successful
aspects of the site, since it will make your report sound less unremittingly
critical and thus more palatable to the site management, but your main goal
is to propose a redesign so most of your report should address areas for
improvement.


Part II:  Redesign the site

Develop a new design for the site or application, one that
improves the areas you identified in your usability evaluation.  The changes you propose should mainly be changes that address problems your prior user walkthroughs identified. Don't just make a bunch of changes you think would be a good idea; the point is that your redesign address the problems found in your initial user testing. Focus mainly
on global issues of navigation and usability; don't spend much of your
time polishing details like typefaces and graphics and the wording of the
text on the pages.

Build a prototype of your new design using
Mockingbird; check with us if you think Mockingbird isn't an appropriate tool for the prototype you need to build.

Test your prototype informally on each other
during your design, making changes as necessary.

Find at least three people who aren't in
the class; they don't have to be the same people who you used before,
but they may be.  With each person, walk through your prototype, asking
the user to perform each of the original three or four tasks and any others that
you think are appropriate or necessary.  As always, follow the guidelines
for working with users. 

As flaws or improvements become apparent during
your user testing, adjust your design and prototype and re-test the changed
aspects.  Keep iterating until you are satisfied with your design.


Part III:  Propose your new design

Write a proposal of three to five pages describing
your redesign.  The major part of the proposal should describe the design
and how it improves the usability issues you identified in Part I.  Of course
you will include illustrations as appropriate.

A smaller part of your proposal, not more
than a page out of the maximum of five, should describe your prototyping
and evaluation process and what changes resulted from that user testing.
We're assuming here that the site management is interested in the process
and how thorough a job you did.  This part might not always reflect reality;
the typical real-world proposal probably wouldn't describe the false
starts and intermediate steps towards the solution.  But in this case, include
it.
Share your Mockingbird prototype: Using the Share icon on Mockinbird's toolbar, get a URL for your project and paste that URL into the proposal document you're submitting. The default sharing settings should allow anyone with the URL to view your prototype.
Submit your proposal document via Checkmate.

  Submit a PDF export of your Mockingbird site via Checkmate. If you're not using Mockingbird, submit other documentation of your prototype(s) (e.g., photos of your paper prototypes).

  Submit your usability evaluation from Part
  I via Checkmate.

A realistic proposal would have a cover letter,
a single simple page in business letter format whose body would say something
like, "Enclosed is our proposal for the redesign of your web site.
 We hope you find it useful and we look forward to hearing from you."
 But you do not have to write or submit a cover letter for this assignment.

Part IV: Attribution 
 Submit a half-page via Checkmate that describes the contributions made by each member of your team. This is not for grading purposes; except in the most extraordinary of circumstances, all team members receive the same score. But it will help us in the future (for refining the assignment or for letters of recommendation) to know who was responsible for what parts of the work.


If you would like to ask the site management
what their goals and requirements are, you may do that 
by sending Email to i131@uci.edu.

    Don't pester the actual management of the site.




Written by David G. Kay, Winter 2004. Revised by David G. Kay, Summer 2007, Summer 2008, Summer 2010, Summer 2011, Summer 2012, Summer 2013.


  David G. Kay, kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/131/hw/hw3.html
##-----------------TITLE------------------------##
Informatics 131 * Assignment 3
##------------------TEXT------------------------##
Information and Computer Science — UC Irvine — David G. Kay — Informatics 131
THIRD HOMEWORK


This assignment is longer than the previous ones and it requires coordination with other people; don't wait until after the midterm to think about it.

You will do the main part of this assignment
(Part I) with the partner you chose at the end of the previous assignment.


Part I

In the previous assignment, you identified
three applications that perform the same function.  For this part, pick
a single task (e.g., starting a new game, or setting the user preferences,
or initiating a chat with someone on the buddy list) that each application
performs with mouse or pointer movements.  (If there is no common task in
your applications that's pointer-based, talk to us right away to work
out an alternative.)  Try to identify a task that takes four or five different
movements, on the average.  (This is a rough guideline; don't pick a
task that requires a single click in each application and don't pick
one that requires a dozen steps, either.)  If you have difficulty identifying
an appropriate task, send us Email.

(a)  Which of the three applications
lets the user perform the task most quickly?  Consider everything—recognition
time, movement time, anything else.  Which application makes the task slowest?

(You'll need to decide on the characteristics
of the hypothetical user you're talking about here—beginning or experienced,
old or young or in between, whatever characteristics are relevant—and keep
those assumptions constant throughout.)

Produce illustrations of the steps involved,
with the movements marked.  Describe and explain your conclusions in at
most half a (single-spaced) page (not counting the illustrations).

(b)  Use Fitts' Law (P = C1 + C2
(log2(2D/W))) to analyze the speed of performing the task on each system.
 For each step in the task, measure the distance and the target size and
apply the formula.  You'll have to make some assumptions and adopt some
conventions (Will you use inches,
centimeters, or pixels as your unit?  What's the user's starting
point at the beginning of the task?); just keep those decisions consistent
as you analyze the three systems so your results should be valid for comparison
purposes, even if the numbers might need some scaling to produce actual
times.  Don't bother with the constants C1 or C2, either.  (If there's
some reason that you think your systems aren't comparable in this way,
talk to us.  It's possible, for example, that the task has a step or two that don't involve pointing, such as text entry. Fitts' law only applies to acquiring a target with a pointer, so you'll have to make some other time estimate for non-pointer steps.)

Show your calculations and analysis (probably
a spreadsheet would be best, with a row for each step in the process), keyed
to the illustrations in part (a).  State clearly what results this
analysis produced.

(c)  Did your Fitts' Law analysis
of part (b) reach the same conclusion as your holistic analysis of
part (a) about which application was fastest?  Unless the results were identical in every respect, describe
and explain the differences.  (Half a page is the maximum here.)

(d)  Take your best-performing application
and redesign the screen(s) for the task you analyzed to make that task even
faster.  (If you think your winning application is perfect, choose one of
the other applications and redesign it to improve it, maintaining consistency
with the rest of the original application (i.e., don't just redesign
it to look like the winner).)

(d.1)  Sketch out your redesign on
paper.  You and your partner should each walk through the redesign, looking
for problems and making improvements.  There's nothing to turn in for
this part.

(d.2)  After you're satisfied with your redesign, decide whether your redesign would be better represented as a low-fidelity prototype or a high-fidelity prototype. If the improvements are mostly about layout and interaction, choose low-fidelity. If they're more about color, typography, detailed illustrations, or fine-tuned arrangement of elements, choose high-fidelity.
(d.2a) If you've chosen a low-fidelity prototype, create a mock-up of your redesign using Mockingbird (gomockingbird.com). [An alternative to Mockingbird is moqups.com; either tool allows free access for our purposes and you may pick either. Where we say "Mockingbird", we mean either tool.] Mockingbird is a "wireframe mockup" program for building low-fidelity prototypes of web sites [If you're redesigning an application that can't reasonably be represented with hyperlinks using Mockingbird, get in touch with us to arrange an alternative.] Mockingbird lets you place user interface items on a screen to create a page, it lets you create multiple pages, and it lets you establish hyperlinks between pages. Then you (or a user) can run the prototype, following the links to test out the behavior you want to examine. (To save your work, Mockingbird asks you to sign up; you can sign up for a free account that has a few limitations that won't affect our work, or for an inexpensive paid account that's less limited. Moqups.com also requires you to sign up; it has no paid version.) 
You just need to show the new screen(s) and how they link to each other; you don't need to implement the underlying functionality of your redesign. This is a mock-up, not a polished design, so don't spend more than an hour or two putting the redesign mock-up together. When you're done, (a) use File:Export and export to a PDF file; submit that PDF file along with the main electronic document you turn in, and (b) using the Share icon on Mockinbird's toolbar, get a URL for your project and paste that URL into the main document you're submitting; the default sharing settings should allow anyone with the URL to view your prototype.
(d.2b) If you've chosen a high-fidelity prototype, use a WYSIWYG GUI builder (software that lets you place predesigned buttons, menus, scrollbars, and other user interface elements onto a screen design, e.g., Visual Basic, Visual C++, Dreamweaver or FrontPage (for web pages), Interface Builder or RapidWeaver or OmniGraffle (on the Mac)). Some of these tools are available on the ICS lab machines or for free trial download; nobody needs to purchase new software for this part. Even if neither partner is a proficient software user, you should try to learn your way around one of these tools. If you'd like to use Photoshop for this task, you may, but the tools listed above have built-in interface elements like windows, buttons, and so on, while in Photoshop you have to build them from the ground up. You just need to show the new screen(s); you don't
  need to implement the functionality.  This is a mock-up, not a polished
design, so don't spend more than an hour or two putting this together.Incorporate your high-fidelity illustrations into the electronic document you turn in.

  (d.3)  Describe your redesign and explain
how it improves the original.  (Half a page maximum.)

Combine all your answers into one electronic
document and submit it via Checkmate; if you used Mockingbird, also submit your exported PDF file.    Just one member of your group should submit
the work, but of course both group members' names must appear clearly
in the body of the assignment itself.


Part II

Read each of the following.  They'll
show up in future lectures, later assignments, and/or the final exam:

"Caring for your Wrists," by Adam
Engst, Tonya Engst, and Jon Hersh.  http://www.ics.uci.edu/~kay/TidBITS-Caring_for_Wrists.pdf"


"Typographic Design for Computerized
Text," by David G. Kay.  http://www.ics.uci.edu/~kay/typography.pdf


"Guidelines for Designing Web Navigation,"
by David K. Farkas and Jean B. Farkas. Technical Communication 4
(2000), 341-358.  Available electronically for class use at  http://www.ics.uci.edu/~kobsa/courses/ICS104/lit/Farkas&Farkas-TC.pdf

There's nothing to turn in for this part.

Written by David G. Kay, Winter 2004; using
GUI-building tools in assignments was suggested by Alfred Kobsa and Nayla
Nassif. Modified by David G. Kay, Summer 2007, Summer 2008, Summer 2010, Summer 2011, Summer 2012, Summer 2013.


David G. Kay,
 kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/131/hw/hw1.html
##-----------------TITLE------------------------##
Informatics 131 * Assignment 1
##------------------TEXT------------------------##
Information and Computer Science — UC Irvine — David G. Kay — Informatics 131

FIRST HOMEWORK
HCI Notebook: As we discussed the first
day of class, we expect every student this quarter to carry at (nearly)
all times small notebook (as simple as two quarter-folded sheets of paper
or as complex as a hand-held PDA or smartphone).  Whenever you observe a particularly
bad example of interaction design (or a particularly good one), jot down
the details in your notebook.  Often these instances are fleeting and subtle;
you may think you'll remember and write it down later, but chances are
you won't, which is why we want you to carry the notebook and record the details
when they occur.

(a) Complete the Informatics 131 Questionnaire and do the other items on the syllabus under "What to do to get started…", including signing yourself up at www.piazza.com.
(b) Pick two different instances of
  bad design from your HCI notebook.  These may involve computer systems or
  any human-created object.  For this part of the assignment, you may pick
  relatively small, simple instances (like the signage in Donald Bren Hall, but don't pick ones we discussed in class). 
  For each,

Describe the relevant details of the system
(if your system wouldn't be familiar to the typical computer science
student, give enough background description to explain it).


Explain the problem(s) you encountered, relating
them to failures of usability goals or principles.  (Jakob Nielsen's
usability heuristics are available at http://www.useit.com/papers/heuristic/heuristic_list.html.  The same principles are illustrated by Theresa Neil at http://designingwebinterfaces.com/6-tips-for-a-great-flex-ux-part-5).

Suggest a way to remedy each problem, again
relating each suggestion to the usability goal or principle that it addresses.

Your description of each instance should be
shorter than one single-spaced page of text (though with illustrations it
may actually span more than one page). You may prepare any standard type of document (Word, plain text, Open Office); please put your name, student ID number, and UCInet ID at the top.

(c)  Pick a web site somewhere at uci.edu
that you use frequently.  Analyze it as described above, describing its HCI flaws in terms of Nielsen's guidelines, but in somewhat
more detail involving more than one feature or function.  As an upper limit,
don't spend more than an hour exploring the site and making notes, and
don't write more than two single-spaced pages of analysis (which again
may span more pages than that as you include illustrations).  Add this text to the same document you started in part (b). 

Your analysis should address who the intended
users of the site are, what the users want to achieve by using the site,
how the site failed to serve these users and their goals (including, if
applicable, characteristics of the users and their backgrounds that the
site designers didn't understand or accommodate well), and what makes
your suggested improvements better.

Your analysis should focus on usability issues
rather than pure functionality; while the line is sometimes hard to draw
(adding a search feature, for example, is increased functionality that also
affects the usability of a site), don't try to solve the problems by
making the system into something that it wasn't intended to be.
Submitting your work: Please make sure your name, student ID, and UCInet ID are at the top of your document. Submit your work via Checkmate (checkmate.ics.uci.edu). If you're new to Checkmate, here are the instructions: Log in to checkmate.ics.uci.edu with your UCInet ID, choose "Course Listing" for Summer Session 2 2015, click "Go" next to Informatics 131, and then click "List me for this course."

Written by David G. Kay, Winter 2004, based
on assignments by Alfred Kobsa and Nayla Nassif. Modified Summer 2007, Summer 2008, Summer 2010, Summer 2011, Summer 2012, and Summer 2013 by David G. Kay. 


David G. Kay,kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/131/hw/hw2.html
##-----------------TITLE------------------------##
Informatics 131 * Assignment 2
##------------------TEXT------------------------##
Information and Computer Science — UC Irvine — David G. Kay — Informatics 131
 SECOND HOMEWORK
(a) 
  
 Read Bruce Tognazzini's article, "A Quiz Designed to Give You Fitts." There's a lot of interesting material at his asktog.com site.
Look over the "Perception in Visualization" page by Christopher G. Healy. You don't have to read the entire text, but you should scan the examples and spend a few minutes playing with each of the two interactive demonstrations on the page.
There's nothing to turn in for this part, but these ideas may show up later.
(b) (optional) Do this on-line demo illustrating Fitts' Law. It doesn't include much explanation, but the task should give you a tangible understanding of the principle behind Fitts' Law. 

There's nothing to turn in for this part. 
(c) In class this week we have
  discussed these topics, among others:

Miller's 7 +/– 2 items (capacity of short-term memory)

Pre-attentive processing, gestalt lawsFitts' Law

Graphical coding
AnthropomorphismAffordances

Pick three of these six topics; for each of
the three, choose an example from your HCI notebook that illustrates
the topic (or find an example
from your own experience if your notebook doesn't have one).  Don't choose examples we discussed in class or that come directly from the readings. Your examples may show a misapplication or misunderstanding
of the principles or may be a particularly good example; in either case,
describe and analyze each example using the terms and guidelines that pertain
to the topic it illustrates.  If your example is a negative one, suggest
an improvement and describe why your suggestion is better.

A dozen pithy lines of text should be sufficient for each of the three examples
(where "pithy" means clean, clear, well-organized, terse, and
not padded); half a page for each is an absolute
maximum.  (Again, this refers just to the text; you will probably use more
than half a page each if you count illustrations.)
(d) One measure of user efficiency for certain systems is to count the number of steps or keystrokes that common operations require.
Monitor your own cellphone usage over at least two full days. What are the (four or five) most common tasks you perform (making a call, sending a text, ...)? Treat tasks that have different keystroke sequences (like phoning someone from your contact list vs. phoning someone by typing in their phone number) as separate tasks. For each of your common tasks:
How many keystrokes does the task take? [For some tasks, like playing a game or sending text message, the total number of keystrokes depends on the game play or the particular message. In those cases, just count the other keystrokes—what it takes to select and launch the function (and to quit it at the end). On some phones, the user makes gestures instead of or in addition to keystrokes; if your phone is like that, you can count gestures, but a gesture typically conveys more information than a single keystroke.] Does the task require visual confirmation or can you do it all with audio and tactile feedback? (In other words, could you do this task while keeping your eyes on the road?)
 You can use your HCI Notebook to record this information (since you're carrying it with you at all times, right?).
A simple table would be enough to communicate your results for this part.
(If you don't have a cellphone, check with us for an alternative.)
(e) How many different items have
  you recorded in your HCI notebook so far?  We'll give full credit for
  any truthful answer to this, even zero, but we'd like to know how much
  use the class is making of these notebooks.


(f)  This part is preparation for a
later assignment. You can do it before, during, or after this week's class meeting. 

Pick a partner who is also enrolled in the
class.  Together, find three different application programs that perform
the same function.  Choose applications that do something relatively simple:
 Rather than a word processor or a database or a graphics editor, choose
a desktop calculator, a virtual alarm clock, a Shanghai game, an instant
messaging client, or any other single-function tool.  Identify three different
versions (perhaps using shareware sources on the Internet; nobody should
have to purchase anything for this assignment) and install them on a machine
(or machines) you can use.  It would also be acceptable to choose three
web sites with similar aims (e.g., the travel sites Expedia, Orbitz, and
Travelocity), though they may be more complex than single-function applications.

In a later assignment, we will ask you to
compare the user interfaces of these applications.  They are likely to have
some differences in functionality, but we will ask you to concentrate on
tasks that all three perform and the HCI aspects of those comparable tasks.
 For now, though, just find a partner, decide on an application category,
and locate and install the software (or locate the web sites).  You don't
need to turn anything in for this part.


Combine all your answers into one electronic
document (making sure your name, student ID number, and UCInet ID are at the top) and submit it via Checkmate.  


Written by David G. Kay, Winter 2004; modified Summer 2008 and Summer 2013.


David G. Kay, kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw4.html
##-----------------TITLE------------------------##
Fourth Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Fourth Homework


As usual, you'll do parts of this assignment with a partner, preferably someone you haven't worked with on a prevoius assignment. Please do what it takes to get partnered up early in the week: Having a partner is part of each assignment; not having one will lower your score. This week, again we need you to send a message to ics10@uci.edu with the names and UCInet IDs of both partners.
Part (a) 
Read Chapters 1 and 3 of Blown to Bits, which talk about the consequences of representing information digitally. We'll be touching on this material over the next week or two, so there's no huge rush.
Part (b) 
Start with this code that plays a simple game of "tag": [Snap version] [BYOB version] (right- or control-click on the link to download it). Click the green flag to start. If you move your mouse over the sprites, they say "Ouch," draw a square, and jump somewhere else (that's it). 
With your partner, improve the code in these ways:
Change the "draw square" block (right-click or control-click on it to edit) to take an additional parameter: the pen color. (In Snap/BYOB, colors range from 0 (reddish) to 100 (blueish); colors 101 through 200 cycle back from blue towards red.) Then create a new sprite that behaves like the other(s), except that it draws squares in a different color.To make the game a little harder, have each sprite change its size (perhaps by –10) every time it's tagged.Change the "React if touched" block so that it takes parameters for what to say when tagged, the pen color, and the amount to change size. Then for each of your sprites, call the "React if touched" block with different parameter values so that each sprite behaves differently when tagged (even though each sprite calls the same "React if touched" block).
When you're done, export your Snap project into a file whose name is in the usual form (e.g., hw4b-joeq-jane25). Submit this document via Checkmate. Just one partner should submit one copy; the file name and your Email message will let us give both partners credit.
Part (c) 
This part is optional, in that you're not required to turn anything in. But if you didn't get a perfect score on last week's (Deus X) assignment, we'd recommend that you get a little more practice since similar problems will turn up on the midterm and final. First of all, go back and make sure you know how to get the correct answers on the assignment itself (not just what the correct answers are—we sent those out—but how to get them). If you tried to "eyeball" the problems rather than painstakingly step through each instruction, or worse yet, if you just relied on your partner to figure it out, you're missing the point: The first key concept to understand is the rudimentary, step-by-step nature of machine language program behavior. So step your way through each of the two programs on the assignment, using the input data we provided. If you don't remember what an instruction does, drop us a message (at ics10@uci.edu) and we'll help you out. It's also a good idea to re-read the instructions and advice we provided on the assignment page. We've also put a copy of the Deus X Instruction Set on line, in case you lost yours.
If you're still not seeing the big picture, don't worry. Try the programs again, but this time with different input. Try Part I with these input lines
  7
  9
  1
  2
  0
  1
  (blank line) 
  
and again with these

    7
    9
    1
    2
 3758
    1
    (blank line)

Try Part II with these input lines 

  4
  Mycroft
and again with these:

  1
  Watson
For most people, working through these problems is not quite as much fun as a trip to Disneyland.  But the concepts will show up again and again in this course, so it's worth learning them because they'll help  you understand other concepts (that you may enjoy more).


  David G. Kay, kay@uci.edu
  
  Sunday, June 22, 2014 6:00 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw3.html
##-----------------TITLE------------------------##
Third Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Third Homework


As usual, you'll do parts of this assignment with a partner, preferably someone you haven't worked with on a previous ssignment. Please do what it takes to get partnered up early in the week; it's awkward when people come to us at the end of the week saying they never bothered to find a partner. This is part of each assignment; not doing it will lower your score. Completely apart from that, this assignment is probably the most technically detailed one we'll have; you're sure to have some questions, so you'll want to leave plenty of time to get them answered. (If you haven't used Piazza.com yet, it's a good place to ask questions about the homework.)
Part (a) 
[This is repeated from last week's assignment; we'll be touching on some of these issues this week.] Read Chapter 4 of Blown to Bits, which talks about internet searching. 
Part (b) 
With your partner, solve the two Deus X problems at 
http://www.ics.uci.edu/~kay/courses/10/hw/DeusXercises.pdf. A copy of the Deus X Instruction Set is available on line, as are the Deus X examples we worked on in class.
Read the problems carefully, stepping through the fetch-decode-execute cycle for the programs given. Here are two hints/reminders: (a) Draw a box for each of the registers and for the comparison indicators; as your program makes comparisons and changes values in the registers, reflect those changes on your drawing. It's just about impossible to keep those values in your head (and if you find it easy, you may have a future as a software developer). (b) Remember that each input instruction reads a whole line from the input file; each subsequent input instruction reads the next line (the system keeps track of how much of the file you've already read). (c)  When you're doing comparisons, remember that the Deus X instructions 50 and 51 compare the register to the memory address (i.e., the register's value is on the left side of the comparison) and that blanks are less than letters or numbers (although in these problems, when we compare with blanks, we only check for equality or not, so if you happen to treat blanks as greater than text, it won't matter).
Even though you'll do these problems with pencil and paper, (a) it's important to start early because it involves intricate technical details and it's possible you will have some misconceptions that need to be resolved before you can finish, and (b) you and your partner should follow the "pair programming" model, with one person holding the pencil and the other raising issues and helping guide the process. 
Do not fall into the trap of thinking that getting the answer is what's important. In fact, we'll tell you the answer to the first part of the first question right here:  0, 7, and 9. The important part is knowing how to get the answer. That's what you're supposed to be learning (and that's the skill that you'll need to answer test questions). You can only learn this by actually doing it; you can't learn it by asking your classmate for the answer and just writing it down. (It's like physical exercise. If you need to get in shape, you can't make it happen by asking your roommate to run a couple of miles for you.)
Any Deus X problems on the midterm or final will require skills and knowledge similar to what these problems require. We may give you a Deus X program and ask you what it does, or we may ask you other questions about the Deus X machine. We will not ask you to write any Deus X code. And for any Deus X problem, we will provide you with a copy of the instruction set reference sheet; it would be insane to have to memorize it.
When you're done, type your solutions into a simple document (in Word or plain text) that includes this information:
Both partners' names and UCInet IDsThe solutions to the two problems
Save this document using a file name that includes the problem number and both partners' UCInet IDs (e.g., hw3b-lee27-sam14). Submit this document via Checkmate. Just one partner should submit one copy; the file name will let us give both partners credit.
Part (c) 
Don't forget your Snap/BYOB. We'll be back to it soon. Keep working on your pong game if you like.
The TA  will be available in the third-floor ICS lab, room 364 ICS,  at times to be announced.  Remember too that Piazza is a good forum for getting questions answered.


  David G. Kay, kay@uci.edu
  
  Monday, March 30, 2015 8:15 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw5.html
##-----------------TITLE------------------------##
Fifth Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Fifth Homework


As usual, you'll do parts of this assignment with a partner, preferably someone you haven't worked with on a prevoius assignment. Please do what it takes to get partnered up early in the week: This is part of each assignment; not doing it will lower your score. This week, again we need you to send a message to ics10@uci.edu with the names and UCInet IDs of both partners.
Part (a) 
[This is repeated from the previous assignment.] Read Chapters 1 and 3 of Blown to Bits, which talk about the consequences of representing information digitally. We'll be touching on this material in class.


Part (b) 
[This part you can do without a partner.] Watch the video Sorting Out Sorting, which beautifully illustrates nine different sorting algorithms. Sorting, the activity of putting items into some specified order, is one of the most prevalent tasks in information processing (according to Donald Knuth of Stanford, perhaps America's most famous computer scientist). It's about 30 minutes long; here's a brief viewer's guide:
There's more detail in this video than you'll be responsible for. We won't ask you about the specific algorithms they describe or about the mathematical characterization of their performance ("n-squared" or "n-log-n"). We would like you to know the basic principle that there can be many different algorithms to do the same task, that those different algorithms can have markedly different performance, and that there's a difference between doing things in a straight line (linearly) and doing them hierarchically (logarithmically) by successively dividing the task into  pieces.Don't let your concentration waver during the boring parts—that's when the funniest lines come.The music is goofy in places. Deal with it.The best part of the film comes after the credits, so don't quit when the credits start running.
It wouldn't be fair to expect Gravity or Captain Phillips here; it's a film about algorithms, after all. But it is an excellent example of "information visualization," using graphics effectively to get a point across.
Part (c) 
For this assignment, you will measure information: how much space some object requires, how much it might cost to store it, how long it might take to transmit it. Feel free to use a calculator, spreadsheet, or other tool (such as the "word count" feature of Microsoft Word), and to consult the web references we mention.
How much space is required by the web page you created for Assignment 2? For now, let's just consider the text and not the images. There are two different ways of measuring it:
The size of the text displayed in the browser. You can get this by viewing your page, selecting all the text, copying it, pasting it into a Word document, and using "Word Count."The size of the HTML source to your page. You can get this by choosing "View Source" in your browser and proceeding as above.
(b.1) Figure out each of these quantities.
(b.2) How big (all together) are the images on your page?
Write these answers into a document (Word, text, PDF),  naming it in the usual form: (w5b-jane12-joelee.pdf), and submit it via Checkmate. Just one partner should submit one copy, and the same partner should submit this part as the next part.


Part (d) 
Fill in the table below; there's a copy available on-line.  Save a copy of the document, fill it out, then use "Downoad as" PDF from the Google Docs File menu, naming it in the usual form:  hw5c-jane12-joelee.pdf. Submit this document via Checkmate. Just one partner should submit one copy; the file name and your Email message will let us give both partners credit.
Before you start, make sure you know how many bits are in a byte and the difference between kilobytes (KB) and megabytes (MB) and kilobits (Kb) and megabits (Mb). This is a general characteristic of working with technical material: The terms have very precise, specific meanings, and you can't work with them unless you understand them precisely.
 
 
Information packages 
Size in bytes (or KB, MB, GB, ...) [5] 
How many copies of the information package
can you fit on one of the storage media listed below?  (Or, how many of
the storage media would it take to store one information package?) 
How much would it cost to store this information
on 16 GB flash drives? [6] 
How long would it take to download this information
package using: 
  
  
USB flash drives ("thumb drives"), 16 GB 
DVD-R disks, 4.7 GB 
500 GB hard drive 
  
The 3G cellular network in a car (384 Kb/sec) [7] 
A 30Mb cable modem [7] 
The first paragraph under Part (c) above  
320 bytes 
  
  
  
  
  
 
The course syllabus [1] 
  
  
  
  
  
  
 
The text of Tolstoy's Anna Karenina 
[2] (in plain text form) 
  
  
  
  
  
  
 
A bitmap of a black & white drawing, 640
x 
480 pixels [8] 
  
  
  
  
  
  
 
An on-screen color picture, 1920 x 1080 pixels, 16 bits per pixel 
  
  
  
  
  
  
 
A high-quality 18 megapixel digital photo, 5184 x 3456
, 32 bits per pixel [9] 
  
  
  
  
  
  
 
A 30-second web ad at 30 frames per second,
each frame 352 x 
240 pixels, 24 bits per pixel [3] 
  
  
  
  
  
  
 
An 85-minute movie at 60 frames per second,
each frame 1920 x 1080, 32 bits per pixel, plus stereo sound [4] 
  
  
  
  
  
  
 
Notes:
 
[1] The syllabus is available on line at http://www.ics.uci.edu/~kay/courses/10/
[2] Check Project Gutenberg at www.gutenberg.org
[3] Assume there's no sound involved
[4] CD-quality stereo sound involves two channels (left and right). Each channel takes 44,100 samples per second at 16 bits per sample. 
[5] Use 1 KB = 1024 bytes, 1 MB = 1000 KB, 1 GB = 1000 MB, and so on.
[6] Look up the price on line
[7] Note that data transmission rates are typically given in bits (or kilobits or megabits) per second
[8] In a black-and-white bitmap, each pixel is one bit (black or white, typically represented by 0 and 1)
[9] Multiply 5184 by 3456: That's where 18 megapixels comes from; it's the total number of pixels in the image

  


  David G. Kay, kay@uci.edu
  
  Monday, June 23, 2014 8:34 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw8.html
##-----------------TITLE------------------------##
Eighth Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Eighth Homework
As usual, you'll do parts of this assignment with a partner, but this time you may work with someone you've worked with before. The main part of this assignment is open-ended; you might want to pick a partner who has the same level of interest and commitment as you do; see more partner-choosing advice below. This week, again we need you to send a message to ics10@uci.edu with the names and UCInet IDs of both partners.
Part (a) 
Read Chapter 2 of Blown to Bits, which talks about privacy. Pay particular attention to these points:
examples of data collected for one purpose being used for an entirely different purpose examples of incorrect inferences being made from data found on linethe "Fair Information Practices" section.
Part (b) 
For this final assignment, we invite you to create your own Snap/BYOB project. It could be a game; it could be a tutorial; it could be a simulation. Use your imagination and creativity to build something that's entertaining, enlightening, surprising or useful. If you're having trouble coming up with a good idea, think of a concept from your major that you could demonstrate, or a story to tell, or a genre of game you enjoy.
You'll want to know how much effort and complexity we expect.  That's hard to quantify, and of course on the high end the sky's the limit. But on the lower end, (a) your project should not be less involved or less capable than the previous projects this quarter, (b) it should be clear to the user who launches your project what to do—display the rules of the game  or a brief explanation of what the project does, (c) try to use loops, if statements, user-built blocks, lists, and messages where appropriate—don't include them just to have them, but try to demonstrate your facility with some of the language tools, and (d) the weight in the course of this assignment  is the same as the weight of every other assignment, so we don't expect you to treat this as a term project (though of course you're welcome to go wild).
You should pick a partner  (a) who wants to spend about the same amount of time as you want to spend, and (b) with whom you can agree on the general subject of your project, so this isn't a great week to wait 'til Thursday night to post on Piazza, "I still need a partner."
Here's some software development advice (which actually is valuable for designing any kind of complex system):
Decide in advance what you want your project to do. Make sketches or storyboards or outlines or whatever lets you plan its actions conveninently. Think first about the ideas you want to get across; don't start by thinking in terms of Snap language features.  Don't expect to be able to compose your project free-form on the fly in Snap, without having planned it out first.You might also think about a "lite" version of your project, just in case your full version turns out to be too elaborate to complete in time. You'll get more credit for turning in a project that does something sensible and interesting, even if it's not everything you envisioned, than for turning in a project that's ambitious but that doesn't work correctly (or at all).Divide the whole task into parts. Now's the time to start thinking in terms of Snap: What sprites do you need? What does each sprite do? (How does it react to being clicked, hitting the edge, receiving a message, getting the green flag? Does it need to change appearance using different costumes?) Do you need the stage to do something special? What variables or lists do you need?Work in small increments. Take it one sprite at a time, and one behavior at a time for each sprite. After you complete each block, save a copy of your work so far. If you end up getting in too deep and losing track of what you're doing, you'll want to be able to "roll back" to the last stable version.Don't get carried away too soon with the graphic beauty of your sprites and backgrounds. Graphic beauty is great, but it's not our focus, and you could spend all your time perfecting the look of things and run out of time to make them actually do anything. We'll give much more credit for action than for beauty.
Save your project, naming it in the usual form: hw8-dkay-kmlo. Submit the project via Checkmate. Just one partner should submit one copy; the file name and your Email message will let us give both partners credit.

  David G. Kay, kay@uci.edu
  
  Tuesday, April 14, 2015 7:49 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw6.html
##-----------------TITLE------------------------##
Sixth Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Sixth Homework


As usual, you'll do parts of this assignment with a partner, preferably someone you haven't worked with on a prevoius assignment. This week, again we need you to send a message to ics10@uci.edu with the names and UCInet IDs of both partners.
Part (a) 
[This part is repeated from the last assignment.] Don't forget to watch the video Sorting Out Sorting. See the previous assignment for more information.
Part (b) 
In class we described the (lossless, syntactic) compression method called run-length encoding (RLE).  Find three images of flags on the Web:  one that will compress very well using RLE, one that will compress very poorly using RLE, and one in the middle.  Justify your choices in a few brief sentences (i.e., say why the good one is good, and so on), illustrated with copies of the images.  (You'll put your answers to the subsequent parts of the assignment in the same document.)
Part (c) 
Below are three images. Image A is the original; the other two are compressed using lossy techniques. One uses reduced quantization; the other uses coarser sampling. Which is which? Give a sentence explaining your answer.
 
Part (d) 
Below are three graphs representing different series of data. Which series would compress best using delta encoding? Which would compress worst? Again, justify your answer in a sentence or two.

Part (e) 
(optional) A cryptogram is a message or quotation written in a substitution cipher—for each letter in the original message, a different letter has been uniformly substituted in the cryptogram.
Below is a cryptogram from the Saturday Review. Decode it back into the original English message. 
BSL PLXB NFIB CR BSL RDEBDCV DV JFVA VCYLUX DX BSL VCBDEL BSFB BSL ESFIFEBLIX FIL NHILUA DJFKDVFIA. -- RIFVOUDV N. FTFJX
Now ask yourself: What property of natural langauge do cryptograms illustrate? Write your solution to the cryptogram and the one-word answer to this question, marked as part (e) of the document you submit.
 
Save the document containing your responses to parts (b), (c), (d), and optionally (e) into one document, naming it in the usual form: hw6-jimb-annw. Submit this document via Checkmate. Just one partner should submit one copy; the file name and your Email message will let us give both partners credit.

[Parts (b), (c), and (d) written originally by Eamonn Keough.]

  David G. Kay, kay@uci.edu
  
  Sunday, June 22, 2014 6:01 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw1.html
##-----------------TITLE------------------------##
First Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
First Homework


There's some reading and preparation as part of this assignment, but for the main active part, part (d), you will work with a partner. We'll try to set aside a little time for choosing partners in Thursday's class, but in general it will be your responsibility to pair up with someone for each assignment. You can read more about working in pairs on the assignment page. Working in pairs is required, not optional; not having a partner for an assignment will affect your class participation score. 
When you've picked a partner, be sure to exchange contact information (Email, cellphone, whatever). Then—and this is critical—send a message to ics10@uci.edu that gives the full names and UCInet IDs of both partners.
If you haven't read the homework advice on the class assignment page, now's the time to do it.
A certain amount of frustration is inherent in working with computers; think of all the cartoons you've seen whose theme is frustrated computer users. People are complex (and diverse, messy, and not well understood) and computers, fundamentally, are mechanical and simplistic;  we're not yet at the point when we can count on computer systems always to do what we expect. For most people, the satisfaction of completing a computing task makes up for the frustration experienced along the way and we hope that's the case for you. To keep your frustration level manageable, make a point of starting on each assignment early. That way, you have time to ask questions that will help you past any rough  spots. 
Part (a) 
Complete the ICS 10 Questionnaire and do the other items on the syllabus under "What to do to get started …" Be sure you've read the rest of the syllabus, too.
Part (b) 
Read the appendix of Blown to Bits, which describes how the internet works.
Using and understanding computer systems often involves mastering a lot of details. Good system design (using good abstractions) can help keep those details manageable, but stilll, it can seem overwhelming. Consider, for example, the number of buttons on the typical TV remote conntrol, or all the different features in Microsoft Word.
You'll also find a lot of details in the readings we assign. One of the goals of this course is to help you learn to navigate through detailed technical material. On the other hand, for this course you don't need the same level of detail as you'd need if you were planning on a career as a computer professional. Even though it may still seem very detailed to you, we've tried to hit an appropriate level in the readings and assignments we've chosen. 
This guideline may help you determine which details in the assigned readings are important for you to learn: If concepts or terms we mention in class occur in the readings, you're responsible for them. But if the readings mention terms or concepts that we do not mention in class, we won't expect you to know them. In other words, when we write exam questions we're not going to go looking through the readings for topics we haven't already mentioned in class.
Part (c) 
This quarter we're going to build some animations and simulations using a tool called Snap (related to tools called BYOB and Scratch). This is actually a form of programming, but it's not the painstaking, heavy-duty, industrial-strength, text-based programming you'd learn in ICS 31. Nor is our goal to turn you into programmers, even in Snap/BYOB/Scratch; we just want you to have some experience with describing procedures that a computer can carry out. And besides, this kind of programming is fun.
Here's some more precise background: The original Scratch tool was developed at MIT; its home page is scratch.mit.edu. BYOB is a version of Scratch developed at Berkeley. BYOB stands for "build your own blocks"; it contains a few useful capabilities that original Scratch doesn't. Snap is a web-based version of BYOB that doesn't require you to install anything on your computer.  
We expect that you'll be able to do all your work using Snap on the web at snap.berkeley.edu (here's a direct link to the Snap start page). If you'd like to do some of your work on your own machine without web access, you can download your own (free) copy of BYOB from byob.berkeley.edu. It may also be that the standalone version of BYOB works faster than Snap on the web. We also suggest that you use the Firefox or Chrome web browser; Safari is possible, but some students have reported confusion with exporting projects, and Internet Explorer does not always work reliably with Snap.View at least one  Snap/BYOB/Scratch tutorial on the web (e.g., on YouTube). Here are two possibilities:  
  Tutorial 1 Tutorial 2. If you continue looking around on YouTube and elsewhere, you will see dozens of similar tutorial videos. Feel free to watch others (and if you find one you really like, drop us a message).
   But there's a limit to what you'll learn just by watching. You need to dive in, get your feet wet, and play around with Snap itself. This is true for learning any new software: Nobody learns just by reading the manual or viewing a tutorial; proficiency is a skill, and people develop skills by  practicing them. This also means that you can't expect to have complete, perfect knowledge before you start working; just get started and your comfort level will increase as you continue working. Note, too, that there may be subtle differences between what's shown in a tutoral (possibly based on Scratch instead of Snap); use the tutorials as a broad overview of the process rather than a reference for precise details. If you find a discrepancy you can't work around, ask about it in Piazza (or by Email).
Part (d) 
With your partner, do the following:
As a warm-up, spend 20 minutes playing the game LightBot. The object is to drag commands into the "main method" and function boxes, choosing movement commands to make the robot visit each blue square and light it up (using the light-bulb command). See how many levels you can get through in 20 minutes; some of the higher levels are tricky. Use this opportunity to practice "pair programming"; after each level, the "driver" and the "navigator" should switch roles. (Refer to the assignments page if you don't recall what this is about.) There's nothing to turn in for this part (but of course that doesn't mean you can skip it.)Open up Snap and spend a couple of minutes re-familiarizing yourself with the screen layout.Re-create one of the examples we did in class or the example in one of the video tutorials. You don't have to duplicate it precisely in every detail (and you should feel free to enhance it), but you should try to include most of the same capabilities. Don't spend more than  about 15 minutes on this.
  The example we did on the first day of class is available for you to import and examine (right-click on the link, save/download the file, and then import it from Snap).  But try to re-create it on your own; you won't learn anything if you just copy it block for block. When you're done, export your project. Choose "Export project ..." from Snap's "file menu"; it's at the top left of the screen, a folded-page icon). In some browsers this will create a new window that displays some cryptic-looking XML code; from the browser, save the contents of that window using a file name that includes the problem number and both partners' UCInet IDs (e.g., hw1d4-johnz-janex. Snap will add the ".xml" suffix). To test that your export worked correctly, open a new Snap window, and import the file you just exported.Submit the saved project file via Checkmate. Just one partner should submit one copy; the file name and your partner-choosing Email will let us give both partners credit.Spend about 20 minutes experimenting with the various blocks Snap provides. Your goal should be just to see them in action, rather than to memorize every block and it's functionality. Experiment with some blocks in each of the tabs.Create your own short animation or simulation or game containing at least two sprites. Be as creative as you like, but follow this advice: Start out with something very simple, which of course you can enhance later; before putting blocks together in Snap, plan out what you want to do (maybe by sketching it out step by step on paper); focus more on the actions and interactions than on polishing the appearance of the sprites and background (it's possible, and fun, to spend all your time making things look good, but our focus here is on making things happen). When you're done, save your project (as hw1d7-johnz-janex) and submit it, following the instructions above. The same partner must submit both parts of the assignment on Checkmate; this helps us keep track of who does what.
Our TA will hold lab hours this week in the third-floor ICS lab, room 364 ICS. 
 Stay tuned for details. You can also get brief questions answered on Piazza (see the syllabus).
Have fun!

  David G. Kay, kay@uci.edu
  
  Sunday, February 14, 2016 1:21 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw2.html
##-----------------TITLE------------------------##
Second Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Second Homework


As usual, you'll do parts of this assignment with a partner, preferably someone you didn't work with on last week's assignment.   When you and a classmate agree to be partners, in addition to exchanging contact information (and maybe both Email and cellphone number would be good to exchange), it's a good idea to agree on when you plan to get together to start working on the assignment.  It's an aspect of basic professionalism to keep in touch with your colleagues, to be clear and definite about your commitments, and to follow through. Employers all say that one quality they look for is the ability to work as part of a group; that's what we're talking about here.
Part (a) 
Read Chapter 4 of Blown to Bits, which talks about internet searching. We won't be covering this topic in class until next week, so you have a little time.
Part (b) 
Create a very brief "fan page" on the web about one of the subject individuals chosen from our list. To pick a subject (and to register your partnership), both partners need to fill out the EEE signup sheet for this assignment; do that as early as possible for the best selection of subjects. Both partners need to sign up for the same subject at (about) the same time: If one person from another group is signed up for a subject already, pick someone else; if one person from each of two groups picks the same person, there's a deadlock and neither group will be able to sign up for that person fully.
You may not ever have heard of the subject you pick; that's fine. There's plenty of information available about each of them, so this is an opportunity to learn something (and someone) new.
To create your web page, you will use Google Sites; if you already have a Google account (e.g., for Gmail), you already have access to this feature. Even if you don't have a personal Google account, your UCInet ID should give you access (see http://www.google.uci.edu).
Gather information about your person—birthdate, birthplace, family, background—together with some description of the person's major accomplishments. Use at least three sources, the first of which should probably be Wikipedia.  You don't need to make this an extensive treatment; we already have Wikipedia for that. Just a paragraph or two will do. But try to find at least one photograph or other appropriate image. (For this purpose, it will be fine to copy short passages of text directly to your page from your source(s), but it's still essential that you say on the page what sources you used.)Set up your web site using sites.google.com (or the UCI equivalent). Using it should be straightfoward; just allow yourself enough time to experiment. Your site should include the information you gathered, including at least one image, your three sources, and at least four hyperlinks to other relevant pages.Test your page out by viewing it in at least two different browsers (the lab machines have Firefox and Internet Explorer). Also look at the underlying HTML using the browser's View Source option (though you don't have to do anything with the HTML at this point).
When you're satisfied with your page, create a simple document (in Word or plain text) that includes this information:
Both partners' names and UCInet IDsThe URL of the web site you createdA sentence or two to answer these questions: What did you find hardest or most confusing about this task? What differences in appearance, if any, did you notice when viewing your page in different browsers? What would you add to your site if you had the time and ability?
Save this document using a file name that includes the problem number and both partners' UCInet IDs (e.g., hw2b-bjones-asmith). Submit this document via Checkmate. Just one partner should submit one copy; the file name will let us give both partners credit.
Part (c) 
Take a look (or another look) at the Scratch Pong Game tutorial on YouTube. With your partner, build that game on your computer and then modify it as follows.  After each step, test out what you've done to make sure you're still on the right track.
Make the paddle move when the user hits the left-arrow and right-arrow keys (instead of when the user moves the mouse)Make it a two-person game by creating a paddle at the top of the screen that a (different) user can move left with the "a" key and right with the "s" key. Also make a "dead area" at the top that corresponds with the "dead area" at the bottom.Create two variables named "Top Score" and "Bottom Score," starting each one at zero. Check the boxes so that the values appear on the stage.Any time the ball hits the dead area at the bottom, increase Top Score by one. When it hits the dead area at the top, increase Bottom Score by one. Then automatically start another game with the ball starting in the middle again. (Optionally, you can have the ball start moving towards the person who lost the last point, as it would in tennis or volleyball if the winner got the next serve.)Display a message declaring the first player whose score reaches 10 as the winner. (You could do this with "say" or by creating new costumes ("top winner" and "bottom winner") that the paddle or dead zone can change to when that side wins.)Play the game a few times with your partner. You might find that you need to add some blocks so that each new game starts out the same way (with scores of 0 and 0, with the ball in the middle, and so on). Then think about what features might make the game better. Optionally, try to implement one or two of those features.
Because this task is a little more tightly specified than the open-ended task on last week's assignment, you may run into a little difficulty. Start early so you have the easy opportunity to get your questions answered (and time to go on to the next part). And don't give in to the temptation just to split up the work with your partner; working in pairs and talking about your solution really helps you learn the concepts.
When you're done, export your project, using a file name that includes the problem number and both partners' UCInet IDs (e.g., hw2c-ann23-bill42; Snap will add the ".xml" suffix). Submit the saved project file via Checkmate. Just one partner should submit one copy, and it must be the same partner who submits both parts of this assignment; the file name will let us give both partners credit.
The TA will hold some lab hours during the week in the third-floor ICS lab, room 364 ICS: Stay tuned for details. 
Have fun!

  David G. Kay, kay@uci.edu
  
  Monday, August 10, 2015 7:04 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10/hw/hw7.html
##-----------------TITLE------------------------##
Seventh Homework
##------------------TEXT------------------------##
ICS 10 • David G. Kay • UC Irvine
Seventh Homework


As usual, you'll do parts of this assignment with a partner, preferably someone you haven't worked with on a prevoius assignment. This week, again we need you to send a message to ics10@uci.edu with the names and UCInet IDs of both partners.
Part (a) 
Read the following short articles, each on an aspect of human-computer interaction or information visualization:
Caring for your Wrists, by Adam Engst, Tonya Engst, and Jon Hersh. How to avoid debilitating wrist pain caused by computer use.Typographic Design for Computerized Text, by David G. KayA Quiz Designed to Give You Fitts, by Bruce Tognazzini.  His web site, asktog.com, has a wide range of articles on HCI (including a discussion of the notorious "butterfly ballot" in the Florida 2000 election), but only the Fitts' Law article is required.
Optionally, read the article Absolute Powerpoint by Ian Parker, which talks about the limitations of PowerPoint as a medium of expression.
Part (b) 
Part I of the Deus X homework was a machine language program that identified the largest in a group of numbers.  It used register A to store the largest number the program had encountered so far—we started it at 0, then checked each number against register A and, if it was larger, we moved it into register A to replace the previously-largest value. After checking all the numbers, register A contained the largest in the group.
(b.1)  Implement the same thing in Snap/BYOB. You just need one sprite with one script that starts when the green flag is clicked. The script should proceed in the same way the Deus X version proceeded, as described above. But since the Snap/BYOB environment (with sprites and the stage and so on) is different from the Deus X's (with text input and output), let's specify some tips for the new environment:
Use "ask" and the associated variable "answer" to prompt the user to enter each number.Keep asking for numbers until the user types something that's not a number (there's an operator to check for that). (You could include an instruction for the user, saying something like, "Enter 'done' to quit.")At the end, have the sprite "say" the vaue of the largest number.
Export this project into a Snap file named in the usual way: hw7b1-ann17-sara20.
(b.2) Now, what if you wanted to sort the numbers (display them in order, lowest to highest)? You can't do that just by reading each number and discarding it; you'd need to store the whole list in Snap's memory (and then run a sorting algorithm on it). Sorting is just one task that requires us to store a whole collection of values, rather than just a single value at a time; there are lots of computational tasks that require us to store a collection of values at once. In Snap, we call these collections lists; we can create a list in the Variables tab and process it as in the following example, like the one we saw in class:

Create and run this Snap script to see how it works; you can download a copy of this script and the following one (right-click to download the file). [BYOB version]
We can traverse the list (process each item in turn) using a script like the one below. We use a variable  to point to each item in the list, one by one; we start it at 1 and increase it by 1 each time, until we've visitied every item.

In the downloaded Snap/BYOB file, click on the clam to see this in operation.
We're not going to ask you to code up a sorting algorithm in Snap/BYOB. Instead, modify this Snap/BYOB project so that it reads a sequence of numbers (instead of names) into a list and then  displays the average of all the numbers entered instead of listing all the items. (For the first step in computing the average, start a variable called "sum" at zero and traverse the list, adding each item to the variable.)
[Side note: It's actually possible to compute the average (mean) of a sequence of numbers without storing all the numbers in a list. But to compute other things, such as the midpoint (median) or a graph showing the distribution of the numbers, you would need to store all the numbers at once. Even though we're not asking you to compute these other things, use a list in this part of the assignment.]
When you're done, save the project in a file named in the usual form: hw7b2-ann17-sara20.ypr and submit both projects ((b.1) and (b.2)) via Checkmate. Just one partner should submit both projects; the file names and your Email message will let us give both partners credit. 


Part (c) 
(c.1) (Each partner can do this individually) Write down the five activities you do most often on your computer. You don't have to worry about precisely which one is #2 and which is #3; just list five things you do pretty frequently (e.g., read Email, shop for music, play World of Warcraft, look at Facebook, …).
(c.2) (Each partner can do this individually, too) If you've never used an iPad before, go to the UCI Computer Store (or anywhere else where there are iPads you can use) and spend at least 15 minutes trying it out.
(c.3) Discuss with your partner which of your common activites (your five and your partner's five) would be easier or more convenient to do on an iPad and which would be harder. For each activity (you may not have ten, if you and your partner have some in common), write down whether you think it would be easier or harder on an iPad, and (in just a few words) what it is about the iPad that leads you to that opinion. (If you and your partner don't agree, that's fine; just give each person's reasoning.)
Save the document containing your responses to part (c) into one document, naming it in the usual form: hw7c-amyq-janet3. Submit this document via Checkmate. Just one partner should submit one copy and the same partner should submit both parts (b) and (c).

  David G. Kay, kay@uci.edu
  
  Wednesday, July 23, 2014 9:45 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/wildride/problem_description_files/index.html
##-----------------TITLE------------------------##
Wild Ride Case Study
##------------------TEXT------------------------##
MR. KAY'S
  WILD RIDE
  
  PROBLEM
DESCRIPTION
[This document provides an overview of the
simulation.  It discusses some details of behavior  and implementation,
but it is not a complete, formal specification document.] 
1. Introduction 

At amusement parks like Disneyland, there are
many attractions (usually rides, but also stores and restaurants).  In successful
amusement parks (also called theme parks), there are also many customers.
Customers visit one attraction after another; usually more customers want
to visit an attraction than the attraction can hold at one time, so often
customers spend time waiting in line.  

Amusement park operators pay a lot of attention
to the way customers flow through the park.  They want all the attractions
to be operating at full capacity, and they want people to spend as little
time as possible in line so they will have a good time and come back again.
 

Since hundreds of millions of dollars go into
the design of a new amusement park, it pays to plan ahead, and to predict
as accurately as possible how people will behave when the park is open.
 One good tool for this is computer simulation.
2. Simulation
Simulation is different from reality.  If we
want to know how well a newly-designed helicopter or racing schooner will
perform, we might build a prototype and try it out.  If we want to know
how many incoming freshmen will graduate in four years or less, we might
simply admit those students and keep track of them over their college careers.
 If we want to know which arrangement of rides works best, we could build
them and see what happens.  But those approaches cost a lot and take too
long. 

  We can call the helicopter, the schooner, the
    students, or the amusement park a system (which means no more than "a
    group of things forming a unified whole").  We can design models of
    these systems and how they behave, simplified descriptions that leave out
    unnecessary detail (like the color of the sail or the freshman's height
    or the shape of the cars in "Mr. Toad's Wild Ride").  [Of course,
    the major pitfall in designing these models is omitting a detail that is
    not unnecessary; perhaps a freshman's height does affect his or her success
    in school.]  And we can code these models as computer programs, running
    them over and over, easily changing various values, to help predict the
    systems' performance without all the bothersome cost, time, and detail of
the real thing.  That's simulation. 

One type of simulation involves the behavior
of a population (such as the students above, but not the schooner or helicopter).
One approach to population simulation involved statistical changes to the
population as a whole (e.g., "If there's a black plague epidemic, the
population decreases by 25%").  Another approach is to represent each
individual in the population separately, by an object in a program; object-oriented
programming is a natural way to implement simulations like this.  The simulator,
then, gives each object a turn, during which the object can change its status
and possibly affect its environment.  We can call it one "round"
of the simulation when each individual object has had one turn.  The simulation
will typically continue for a specified number of rounds, or until some
condition occurs (such  as all the objects finishing their work). 
3.  This Problem 

Since Orange County is a center of theme parks,
you decide to offer a simulation service for theme park designers.  Your
first step is to design and implement the software that you will use.  

Your program will simulate two different classes
of objects: attractions and customers.  

As described below, each attraction will have
certain information, such as its location in the park, the number of customers
it can handle at once, the amount of time customers have spent waiting in
line before actually starting the ride, and the amount of time it takes
a customer to complete the ride once he or she starts it.  Each attraction
will also perform  operations such as taking the next customers in line,
releasing customers after their turn is over, informing customers how long
the wait will be, and so on. 

Each customer will start with a "wishlist"—the
list of attractions he or she wants to visit during the day, each with a
priority that indicates how important the attraction is to that customer.
 Each customer will also have some way of deciding, at any moment, which
attraction to visit next.  The customer might use a simple-minded decision
algorithm, such as "Always go to the ride with the next highest priority."
 But some customers might be more clever; they might decide to start with
the rides that are furthest from the entrance, because the crowds will be
smaller, or they might decide to postpone some rides if the wait in line
looks too long, or they might choose a lower-priority ride if it happens
to be nearby. 

When you specify each customer to the system,
you will be able to choose from a few different decision strategies; others
could be implemented.  [In fact, prospective customers who want to get the
most out of their trip will also be able to use your  service (providing
you an additional stream of income); they will be able to try out different
decision strategies and see which one works best.  In fact, we think we've
seen a web site that provides just such a planning service.]  More information
about customers appears below. 

Your program, then,
will be a simulation system that manages the two kinds of objects.  After
setting things up initially—the attractions, the customers, the opening
and closing times of the park—it will cycle through the minutes of the day.
 At each minute, it will give a turn to each customer entering the park
and each customer just leaving a ride, so they can  apply their decision
strategies, coming up with the ride to visit next. Also, every ride will
get a turn to take in some customers and release some customers, depending
on the size of its line and the amount of time it takes to go through the
attraction.   Finally, each customer who is "in transit"  from
one place to the next will move closer to his or her goal. So at the end
of each cycle, some customers will be in line for rides, some will actually
be on the rides, and some will be walking from one ride to another. 

Then, at the next minute, the whole cycle repeats
again. The simulator stops shortly after it reaches the park's closing time.
 (Since  customers might actually be on a ride at the exact time the park
closes, you have to allow time for them to finish and leave the park). At
the end of the day, the simulator prints some statistics about each customer's
visit.  

A realistic simulation might operate second-by-second
instead of a minute at a time; however, that would take 60 times the computing
power so to keep things simple, especially if we have a lot of customers,
we'll leave things on a minute-by-minute basis for now. 
4. Attractions 

Each ride will store this information:

Name

Entrance location (where in the park the ride's
entrance is)

Exit location (some rides take you from one
location to another)

How many cars are in use on the ride at present

Maximum number of people per car

Maximum number of cars the ride can handle

  Parameters for loading and ride time (see below)

Queue of customers waiting in line for this
ride

Different rides load and discharge their passengers
differently; this affects the length of time it takes to complete the ride
and the number of passengers the ride can handle.

4.1.  Ride Loading Characteristics

Each ride maintains a queue of customers waiting
to ride it. At each minute, the ride may take some people from this queue
and put them on the ride, and it will take any people who have completed
the ride and send them back out into the park to decide which ride to visit
next.  This continues until closing time, after which nobody else can get
in line and the ride empties out its queue.  

At each minute, the ride has to figure out
if any cars are loaded and ready to be dispatched on the ride, if any cars
are empty and ready to load, and if any cars have completed the ride and
are ready to unload.  Different rides differ in the precise details of how
they handle their passengers; we can categorize rides as cycle rides, continuous
rides, or interval rides. 
4.1.1.  Cycle Rides

  You could also call cycle rides "stop-and-go"
  rides. Everyone gets on the ride at once, the ride does what it does, and
  then everyone gets off.  Nobody is riding while people are unloading and
  the new people are loading.  A show in a theater is a cycle ride; so are
  carousels and the "Dumbo" ride at Disneyland.  To describe a cycle
    ride, you need to specify the amount of time the ride is in motion and the
    amount of time it takes to unload and load the ride.  Finally, a cycle ride
    will start as scheduled if some of its cars are empty, but it will not start
if it has no passengers at all. 

At the beginning of each cycle, the ride will
decide whether to add one more car to the ride, remove one car, or make
no change.  If the number of people waiting in line is greater than the
current capacity of the ride, and if fewer than the maximum number of cars
are in use, it will add one car.  It will remove one car from the ride if
two or more cars were empty during each of the last three cycles.   
4.1.2.  Continuous Rides

  Continuous rides never stop; they are like
    a circular conveyer belt that goes around and around.  Escalators and ski
    lifts are continuous rides; so was the "Sky Ride" aerial tram
    at Disneyland.  There is no separate loading time for a continuous ride;
    it loads one car per minute and  you need only the length of the ride to
    describe it.   On a continuous ride, if an empty car is ready to leave,
    it can leave even if nobody's in it.  However, no more than one car may
leave in a single minute. 

At any minute, if more than five carloads of
people are waiting in line, the ride will add one car (up to the maximum).
 If there has been a sequence of empty cars launched that's longer than
one-third of the number of cars on the ride, then the ride will remove one
car. 
4.1.3.  Interval Rides

  On an interval ride, cars are loaded, unloaded,
    and dispatched at certain set intervals. As a car pulls up to the load point,
    riders who have just completed the ride exit to their left.  Then the people
    who are waiting to ride enter the car from the right. The loaded car is
    released to the dispatch point a few yards down the line, where it is launched.
    If nobody is waiting for the ride, cars remain waiting to be loaded; on
    interval rides, no empty cars are launched.  On the other hand, no more
    than one car may be launched per minute.  To describe an interval ride,
    you need the length of the ride and the length of time it takes to unload
    and reload a car.  Subways are interval rides (except that subways have
    multiple loading points and not everybody in a car gets on and off at the
    same place); so are roller coasters, including Disneyland's "Matterhorn"
and "Space Mountain". 

At any minute, the ride will add one car to
be loaded if the number of people waiting is more than the current number
of cars could accommodate in one full circuit of the ride.  (Thus, if there
are currently 10 cars on the ride, each holding 6 people, you'll add one
car if there are more than 60 people in line.)  It will remove one car if
more than one empty car has been waiting to load for over 10 minutes.
4.2.  Other Kinds of Rides

You can imagine still other kinds of rides.
 For example, some attractions allow the customer to spend as much time
as he or she wants:  stores and museums are like this, and so is "Tom
Sawyer's Island" at Disneyland.  But for now, the simulator will not
model rides like  these. 
5. Customers 

   Each customer who enters the park has
these characteristics:

Name

  Arrival time at the park

  Initial wishlist of rides and priorities

  Current "working agenda" of rides
  to visit

  Decision strategy

  Exit strategy 

5.1.  The Customer Wishlist
Each customer comes to the park with a prioritized
wishlist, listing the names of the rides the customer wants to ride  with
a priority for each ride.   Some customers may just visit each ride in priority
order and then leave the park, but customers may also have more sophisticated
ways of choosing their rides.  

  Starting from the original wishlist, the customer
    creates and maintains a working agenda, another prioritized list of rides
    that can change from time to time.  Every time the customer finishes a ride,
    for example, the customer removes the ride just finished from the agenda.
    We discuss below what happens when the agenda is empty or the park's closing
    time arrives.  The customer will also keep track of which rides he or she
has visited, which may be used in deciding which ride to visit next.

The priorities are represented by integers,
with lower values indicating higher priorities (so a customer's number-one
priority comes before the number-two priority, for example). 
5.2.  Decision Strategies 

The simulator allows customers to specify one
of three strategies for choosing a next ride  (i.e., reprioritizing the
agenda so that the  next ride is at the front): 

The default strategy, following the priorities
on the original wishlist

  Pick the closest ride on the wishlist first

  Pick first the ride that has the shortest waiting
    time (including both walking to the ride and the estimated waiting time
  in line)

(In our park, the waiting time for any ride
is available to  the customer  from  any location; there are courtesy phones
and large message boards that keep the customers up to date, so they don't
have to walk over to a ride to see how long the wait is.)  

Other strategies could be imagined and implemented.
 

Each customer can also specify an exit strategy
that determines when the customer will leave the park: 

Head for the exit when the agenda is empty

  Head for the exit at a specific time

  Stay until the park closes

When the working agenda is empty, if the customer
is not yet ready to leave, the customer will refill the working agenda as
follows:  Add all the rides in the park that  the customer hasn't visited
yet, and if the agenda runs out again, add the closest 15 rides to the customer's
current location.

6.  Distance

Distances in the park are measured in "distance
units"; one unit is the distance someone can walk in one minute, which
makes calculation easy.  Locations are given in an x-y (Cartesian) coordinate
system, in which the park's entrance/exit is (0,0).  The simulator calculates
distances between rides by the straight-line Euclidean distance; it does
not take obstacles into account.  When you calculate walking times based
on distances, you should convert any non-integer distances to the next highest
integer, since the simulator keeps track of everything in whole minutes.

7.  Operation of the Simulator 

Broadly speaking, your simulator will let the
user run one or more simulations, each of which will behave as follows:

Read in descriptions of the rides and the customers
(according to the specified input format)

  For each clock tick (each minute),
  
    Check the queue at the front gate for any customers
      whose arrival time has come
  
    Check the customers in transit for any who
      have arrived at their destination
  
    Check each ride and, as appropriate for that
      ride, (a) launch the first loaded car that is ready to go, (b) unload any
      cars that have completed the ride, sending the finished riders back into
      transit, (c) load the available cars, and (d) decide whether to add or remove
      cars from the ride
  

  After the park closes, print some overall statistics
  and allow the user to request other, more detailed statistics.


8.  Input
The simulator will read plain text input files,
one describing the rides and one describing the customers.  In both files,
lines with an asterisk in the first column are ignored (and thus can serve
as comments in the input) and empty lines are also ignored.  

8.1.  Input of Rides
The basic input format for rides is as follows:
    Ride_Name
    entrance_X  entrance_Y
    exit_X  exit_Y
    initial_num_of_cars  max_num_of_cars  capacity_per_car
    Ride_Type
    ride_time  loading_time

The ride type must be one of the following:
Continuous, Cycle, or Interval.  For continuous rides, no loading time is
specified.
Here is an example:
* Sample ride file
Polymorphic Paddleboats
4 1
4 1
1 2 1
Cycle
3 3
Inheritance Insanity
2 2
4 6
1 3 1
Continuous
5

8.2.  Input of Customers
The basic input format for customers is as
follows:
    Customer_name
    time_entered_hour  time_entered_minutes
    Customer_type
    Exit_strategy
    exit_time_hour  exit_time_minuts
    wish_list_priority1  wish_list_ride1
    wish_list_priority2  wish_list_ride2
    wish_list_priority3  wish_list_ride3
    ...
    wish_list_priorityN  wish_list_rideN
    ----

The customer type must be one of the following:
Closest Ride First, Highest Priority First, or Shortest Time First.  The
exit strategy must be one of the following:  Empty Wish List, Park Closing
Time, or Set Time. If the exit strategy is Set Time, the following line
must specify an exit time (both hours and minutes); for the other exit 
strategies no exit time line will appear. 

All the hour fields are based on a 24-hour
clock.

The delimiter "----",
starting in the first column, signals the end of a customer's wishlist.

Here is an example:
* Sample customer file:
John McCarthy
9 15
Closest Ride First
Empty Wish List
3 Polymorphic Paddleboats
2 Inheritance Insanity
----
Donald E. Knuth
9 25
Highest Priority First
Set Time
10 00
2 Inheritance Insanity
8 Casting Coaster
----

9.  Output

  The simulator gathers a variety of statistics
on the rides and the customers.

For each customer, it keeps track of the name
of each attraction visited, and for each, the times when the customer got
in line, got onto the ride, and completed the ride.  It can also compute
the total time spent in the park, the total time spent in line, the total
time spent riding rides, and the percentage of rides on  the original wishlist
that the customer visited.   The user can also view the customer with the
most or least time in the park or in line.

For each ride, it keeps track of the total
number of  riders, the average number per minute, the minimum, maximum,
and average number of cars, and the minimum, maximum, and average line length
and waiting time.  The user can also view the attraction with the most or
fewest visitors or the longest or shortest average waiting time.

The user can also view the statistics for a
specific customer or attraction by name or write all the statistics to a
file for later review.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/labB.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Lab Assignment B: Anteater Bed and Breakfast
This assignment is due at the end of lab on
Monday, February 6. 
Assignment summary: You will write a program to keep track
  of reservations at a small "bed and breakfast" hotel.

This assignment is divided into six required stages and optional
seventh stage. Each succeeding stage is built upon what you
have already written for the previous stage. We expect you to design,
write, and test this program according to these stages—first get the
first-stage program working, then modify it to satisfy the second
stage, and so on.  As always, be sure to keep a copy of each completed
stage. That way, if you decide you've gotten off on the wrong track
for a stage, you can start again easily from the end of the previous
stage, without the painstaking task of removing each addition.
You should make sure that each stage is entirely correct and working
perfectly before you go on to the next. As you complete each stage,
you must demonstrate briefly to your TA or tutor that it works
correctly before you go on to the following stage. 

What to turn in:
On Checkmate, a single Python file containing your last-stage code.
  
Grading: Your grade depends on organized development (did you design and debug each stage in sequence), completeness (does your program do everything the specification requires), correctness (does it produce the correct results), quality and clarity of your output, good modularity, good data organization (using data structures appropriately), and good programming style (are your identifier names descriptive, is your organization clea).
  
  You will receive appropriate partial credit for each stage you
  complete correctly. You will receive no credit for work on a later
  stage if the previous stages are incomplete or incorrect. The whole
  point of incremental development (i.e., stages) is to keep a
programmer from biting off more than he or she can chew.

Statement of the problem: UCI has just started a
  program in hotel and restaurant management; its dean has established
  a small "bed and breakfast" hotel as a lab for the program's
  students. The dean has asked you to write the reservations software
  for this new inn, which will be called the Anteater BandB.

Your program will keep track of the rooms available for rent (these
  vary, since sometimes a room is closed for redecoration) and the
  reservations that guests have made for these rooms.

When the full Anteater BandB system is completed, it may have a
  graphical user interface, but for now your program will be a batch
  program; this means that you will read all of your input from an
  external data file and produce output as described below.

You could easily convert this program to an interactive one with a
  fancy user interface, where the program presents the user with a
  menu of commands, accepts the user's selection, prompts the user for
  whatever additional information the command requires, and then
  displays the results of that command. We made this assignment a
  batch program for three reasons: First, it's extra work for you to
  write the menu- printing and input-prompting commands, some of which
  you have already done in other assignments. It's easier simply to
  assume that the data appears in the correct format in the input
  files. Second, it gives you practice learning how to read data from
  external text files. Third, testing your program will be much easier
  when you can create files of test data rather than typing in each
  test interactively every time.

The input for this program comes from a single file, which
  consists of an unlimited number of input command lines. We will
  describe the various commands below; for each stage, you will
implement (or modify) a few more commands
Stage I: For this stage, your program will keep
  track of the rooms that are available. This stage implements four
  commands, as described below. On each command line, the first two non-whitespace characters are the command, command letters may be upper or lower case.
NB(for "add a new bedroom") followed by
an integer room number (in the range 1–999). Add a new bedroom with
the specified room number.LB(for "list bedrooms").  Print a list of the bedrooms currently available.
The input file may contain any number of these commands in any order;
    each LB command prints a list of available bedrooms based on what
    has been added as of that point. See the sample output below for
    the format of the printed bedroom list. For this stage, it doesn't
    matter what order the bedrooms appear in.PL(for "print line"), followed by any text. Simply print (or "echo") a line,
copying the input (not counting the PL and leading whitespace) to the output. You'll find it useful in testing, and it's also a simple way to make the program's reports clearer or fancier.**Comment, followed by any text. Like comments in a
    program, comment lines don't have any effect on the program's
    behavior; they just serve as annotations in the command
    file. 
Below is a sample input file for this stage.
** This is a sample command file for the Anteater BandB, Stage I
PL ***********************************************************
** A well-written program works gracefully with empty lists.
Lb
PL ***********************************************************
** Now let's add a bedroom:
NB 101
LB
** And some more:
NB 104
** Extra blanks around the command should be ignored
nb    102
    NB 201
    Nb      203
 LB
PL Thank you for using the Anteater BandB Reservation System!
** That's the end of the sample data for Stage I.

From this input file, your program should produce the following
output:
***********************************************************
Here is a list of available bedrooms (before adding any!)
Number of bedrooms in service:  0
------------------------------------
***********************************************************
Number of bedrooms in service:  1
------------------------------------
101
Number of bedrooms in service:  5
------------------------------------
101
104
102
201
203
Thank you for using the Anteater BandB Reservation System!
Stage II: Each stage of this assignment will
  continue to handle all the commands of the previous stages, of
  course. For this stage, your program will handle deletions from the
  list of available bedrooms.
DB(for "delete bedroom"), followed by a bedroom number.
Delete the specified room from the list.  Print an error message if
    the specified room isn't on the list.
Here is some sample input for this stage:
** This is a sample command file for the Anteater BandB, Stage II
** First, add some bedrooms:
NB 301
nb 302
nb 303
** Now list what we have:
PL First list of available bedrooms:
LB
** Next, delete one:
DB 302
** And show the list reflecting the deletion:
PL List of available bedrooms after deleting one:
LB
** Try to delete a bedroom that doesn't exist, and get an error message.
DB 405
** Now add some more:
NB 302
NB 304
NB 305
PL List of available bedrooms:
LB
** We delete a bedroom ...
db   301
** ... we add another to the list.
NB 307
PL Another list, having deleted one and added another:
LB
PL Thank you for choosing the Anteater BandB Reservation System!
** That's the end of the sample data for Stage II.

For the above input, your program should produce the following output:
First list of available bedrooms:
Number of bedrooms in service:  3
------------------------------------
301
302
303
List of available bedrooms after deleting one:
Number of bedrooms in service:  2
------------------------------------
301
303
Sorry, can't delete room 405; it is not in service now
List of available bedrooms:
Number of bedrooms in service:  5
------------------------------------
304
305
301
302
303
Another list, having deleted one and added another:
Number of bedrooms in service:  5
------------------------------------
302
303
304
305
307
Thank you for choosing the Anteater BandB Reservation System!

Stage III: For this stage, your program will keep
  track of reservations for specific rooms on specific dates. The
  first new command for this stage adds a reservation:
NR(followed by a bedroom number, then an arrival date in the form
  mm/dd/yyyy, then a departure date in the form mm/dd/yyyy, then the
  guest's name):  Add a new reservation for the specified room on the
  specified dates.

Your program will keep track of all the reservations.  An attempt
  to reserve a room that isn't on the list of available rooms should
  produce an error message. (Note that "available" means the same
  thing here that it has in the previous stages: Any room that is "in
  service," whether reserved by a guest or not, is "available." At
  this stage your program is not checking for occupied or free
  rooms.)
  At this stage, your program does not have to perform any checking that the dates are valid, nor does it have to identify conflicting reservations. Each new reservation prints and saves a unique "confirmation number" so the user can refer to it later (to cancel it, for example); this confirmation number should just be 1 for the first reservation added, 2 for the next, and so on, always increasing.
To make your coding task easier, import the Python
  library datetime and use it for date
  calculations. The split function with a "/" argument will be helpful, too.


Also handle these commands:
LR(for "list reservations").  Print all the reservations.DR(for "delete a reservation"), followed by the
    confirmation number of a reservation.  Deletes the specified
    reservation. If a DR command gives a confirmation number that isn't in the list of
  reservations, your program should produce an error message.

Here is some sample input for this stage.
  [It's a common temptation to use an elaborate test case like this one
  as the first test of your newly modified program. It's all right to
  indulge that temptation once, if you must; of course, your test will
  fail. Newly modified programs always have bugs. At that point,
  however, you should try a succession of smaller, more circumscribed
  tests, rather than ramming this same large test through the program
  over and over again until you finally force it through
  successfully. It's more productive, more thorough, and better
  organized in the long run to test each feature separately before
  going on to complex combinations. By the same token, however,
  adequate testing involves more than this single combination test
  case; this one case does not test everything that needs testing for
  this stage.]
** This is a sample command file for the Anteater BandB, Stage III
** First, add some bedrooms:
NB 301
nb 302
nb 303
** Now make some reservations
NR 303 10/17/2012 10/19/2012 Conrad Hilton
NR 303 12/31/2012   1/2/2013 Cesar Ritz
NR 301 11/3/2012  12/15/2017 Leona Helmsley
NR 777 1/1/2012     1/2/2012 Ian Schrager
LR
** Next, delete one:
DR 2
** And show the list reflecting the deletion:
PL List of reservations after deleting one:
LR
** Now try to delete that one again (which should give an error):
DR 2
** Now add another two reservations:
NR 302 1/1/2013  2/15/2013 Howard Johnson
NR 303 11/25/2012 11/30/2012 Sultan of Brunei
** And try two more bogus deletions:
DR 2
DR 17
** Finally, list the remaining reservations:
LR
PL Thank you for perusing the Anteater BandB Reservation System!
** That's the end of the sample data for Stage III.

The sample input above should produce results as shown below:
Reserving room 303 for Conrad Hilton -- Confirmation #1
    (arriving 10/17/2012, departing 10/19/2012)
Reserving room 303 for Cesar Ritz -- Confirmation #2
    (arriving 12/31/2012, departing 1/2/2013)
Reserving room 301 for Leona Helmsley -- Confirmation #3
    (arriving 11/3/2012, departing 12/15/2017)
Sorry; can't reserve room 777; room not in service
Number of reservations:  3
No. Rm. Arrive      Depart     Guest
------------------------------------------------
  1 303 10/17/2012 10/19/2012 Conrad Hilton
  2 303 12/31/2012  1/ 2/2013 Cesar Ritz
  3 301 11/ 3/2012 12/15/2017 Leona Helmsley
List of reservations after deleting one:
Number of reservations:  2
No. Rm. Arrive      Depart     Guest
------------------------------------------------
  1 303 10/17/2012 10/19/2012 Conrad Hilton
  3 301 11/ 3/2012 12/15/2017 Leona Helmsley
Sorry, can't cancel reservation; no confirmation number 2
Reserving room 302 for Howard Johnson -- Confirmation #4
    (arriving 1/1/2013, departing 2/15/2013)
Reserving room 303 for Sultan of Brunei -- Confirmation #5
    (arriving 11/25/2012, departing 11/30/2012)
Sorry, can't cancel reservation; no confirmation number 2
Sorry, can't cancel reservation; no confirmation number 17
Number of reservations:  4
No. Rm. Arrive      Depart     Guest
------------------------------------------------
  1 303 10/17/2012 10/19/2012 Conrad Hilton
  3 301 11/ 3/2012 12/15/2017 Leona Helmsley
  4 302  1/ 1/2013  2/15/2013 Howard Johnson
  5 303 11/25/2012 11/30/2012 Sultan of Brunei
Thank you for perusing the Anteater BandB Reservation System!
Stage IV: In this stage, your program will check each command for various inconsistencies and impossible situations.
First, your program should reject any reservation whose arrival date
  is later than the departure date, or any reservation where the
  guest arrives and departs on the same day (we're running a
  respectable establishment). [Check the documentation for the
  datetime library for functions that help you with this.]
Your program must also check each reservation for a given bedroom
  for conflicts with any existing reservations for that bedroom; you
  can't rent the same room to two different guests on the same
  night. (Note, however, that one reservation can have the same
  arrival date as another reservation's departure date, since the
  departure date is the date the guest leaves, so the room is
  vacant that night.)
Next, your program should print an error message if the user
  attempts to add a bedroom with the same number as one that is
  already on the list.

Finally, if the user deletes a bedroom, your program should cancel all
the reservations for that bedroom (printing an appropriate message for
each cancellation).
Here is some sample input for this stage:
** This is a sample command file for the Anteater BandB, Stage IV
** First, add some bedrooms:
NB 101
nb 102
nb 103
** Now make some reservations:
NR 101 12/17/2012 12/19/2012 Claude Crillon
NR 102 12/31/2012  1/5/2013 Donald Dorchester
** Try a few reservations that go backwards in time:
NR 103 11/3/2012 12/15/1989 Bonnie Bonaventure
NR 103 12/17/2012 11/18/2012 Osamu Okura
NR 103 12/31/2012 12/25/2012 Penelope Peninsula
** And one that comes and goes on the same date:
NR 103 12/1/2012 12/1/2012 Randolph Raffles
LR
** Now try some conflicting reservations
** One that overlaps exactly:
nr 101 12/17/2012 12/19/2012 George Cinq
** One that overlaps a couple of days:
nr 102 12/25/2012  1/1/2013 Renata Rossiya
** One that's completely contained:
nr 102 1/1/2013 1/3/2013 Mark Hopkins
** And one that doesn't conflict, barely:
nr 102 12/25/2012 12/31/2012 Belle Air
LR
** Now try to add an already-existing bedroom:
nb 103
** Finally, delete a bedroom (which cancels all its reservations):
db 102
nr 103 12/17/2012 12/19/2012 Alfreda Algonquin
PL The final list of reservations:
LR
PL Thank you for confusing the Anteater BandB Reservation System!
** That's the end of the sample data for Stage IV.

 The sample input above should produce results as shown below:

Reserving room 101 for Claude Crillon -- Confirmation #1
    (arriving 12/17/2012, departing 12/19/2012)
Reserving room 102 for Donald Dorchester -- Confirmation #2
    (arriving 12/31/2012, departing 1/5/2013)
Sorry, can't reserve room 103 (11/3/2012 to 12/15/1989);
    can't leave before you arrive.
Sorry, can't reserve room 103 (12/17/2012 to 11/18/2012);
    can't leave before you arrive.
Sorry, can't reserve room 103 (12/31/2012 to 12/25/2012);
    can't leave before you arrive.
Sorry, can't reserve room 103 (12/1/2012 to 12/1/2012);
    can't arrive and leave on the same day.
Number of reservations:  2
No. Rm. Arrive     Depart     Guest
------------------------------------------------
  1 101 12/17/2012 12/19/2012 Claude Crillon
  2 102 12/31/2012  1/ 5/2013 Donald Dorchester
Sorry, can't reserve room 101 (12/17/2012 to 12/19/2012);
   it's already booked (Conf. #1)
Sorry, can't reserve room 102 (12/25/2012 to  1/ 1/2013);
   it's already booked (Conf. #2)
Sorry, can't reserve room 102 ( 1/ 1/2013 to  1/ 3/2013);
   it's already booked (Conf. #2)
Reserving room 102 for Belle Air -- Confirmation #3
    (arriving 12/25/2012, departing 12/31/2012)
Number of reservations:  3
No. Rm. Arrive     Depart     Guest
------------------------------------------------
  1 101 12/17/2012 12/19/2012 Claude Crillon
  2 102 12/31/2012  1/ 5/2013 Donald Dorchester
  3 102 12/25/2012 12/31/2012 Belle Air
Sorry, can't add room 103 again; it's already on the list.
Deleting room 102 forces cancellation of this reservation:
   Donald Dorchester arriving 12/31/2012 and departing  1/ 5/2013 (Conf. #2)
Deleting room 102 forces cancellation of this reservation:
   Belle Air arriving 12/25/2012 and departing 12/31/2012 (Conf. #3)
Reserving room 103 for Alfreda Algonquin -- Confirmation #4
    (arriving 12/17/2012, departing 12/19/2012)
The final list of reservations:
Number of reservations:  2
No. Rm. Arrive     Depart     Guest
------------------------------------------------
  1 101 12/17/2012 12/19/2012 Claude Crillon
  4 103 12/17/2012 12/19/2012 Alfreda Algonquin
Thank you for confusing the Anteater BandB Reservation System!

Stage V: For this stage, your program
 will produce various information listings.
RB(for "reservations by bedroom"), followed by a number. Lists all reservations for a given bedroom.RC(for "reservations by guest"), followed by a string.  List all reservations for a given guest.LA(for "list arrivals"), followed by a date in the same
    mm/dd/yyyy form as before.  Print a list of all guests arriving
    on the specified date.LD(for "list departures"), followed by a date in the same
    mm/dd/yy form as before. Print a list of all guests departing on
    the specified date.LF(for "list free bedrooms"), followed by two dates.
    List all bedrooms that are free each night for a guest arriving on
    the first date and departing on the second.
LO (for "list occupied bedrooms"), followed by two
    dates.  List all bedrooms that are occupied for at least one night
    between the given arrival and departure dates.

Here is some sample input for this stage:
** This is a sample command file for the Anteater BandB, Stage V
** First, add some bedrooms:
NB 501
nb 502
nb 503
nb 504
** Now make some reservations
NR 503 12/10/2012 12/15/2012 I. Joliet
nr 502  1/10/2013  1/15/2013 I. Joliet
nr 502 12/10/2012 12/14/2012 K. Leavenworth
nr 502 12/10/2013 12/14/2013 K. Leavenworth
nr 504  2/15/2013 12/14/2013 C. S. Quentin
LR
** List reservations for a bedroom
RB 502
** List reservations for two guests
RC K. Leavenworth
RC C. S. Quentin
** List everyone arriving December 10, 2012
LA 12/10/2012
** List everyone (i.e. nobody) arriving December 9
LA 12/9/2012
** List everyone departing December 14, 2013
LD 12/14/2013
** List the free rooms when the hotel is empty
LF 12/20/2012 12/25/2012
** List the free rooms when some are reserved
LF 12/12/2012 12/20/2012
** List the free rooms on a single date
** (Remember that a room isn't occupied on the night of a departure)
LF 12/14/2012 12/14/2012
** List occupied rooms on various dates
LO 12/14/2012 12/14/2012
LO 12/12/2012 12/20/2012
LO 12/20/2012 12/25/2012
PL Thank you for abusing the Anteater BandB Reservation System!
** That's the end of the sample data for Stage V.

The sample input above should produce results as shown below:
Reserving room 503 for I. Joliet -- Confirmation #1
    (arriving 12/10/2012, departing 12/15/2012)
Reserving room 502 for I. Joliet -- Confirmation #2
    (arriving 1/10/2013, departing 1/15/2013)
Reserving room 502 for K. Leavenworth -- Confirmation #3
    (arriving 12/10/2012, departing 12/14/2012)
Reserving room 502 for K. Leavenworth -- Confirmation #4
    (arriving 12/10/2013, departing 12/14/2013)
Reserving room 504 for C. S. Quentin -- Confirmation #5
    (arriving 2/15/2013, departing 12/14/2013)
Number of reservations:  5
No. Rm. Arrive     Depart     Guest
------------------------------------------------
  1 503 12/10/2012 12/15/2012 I. Joliet
  2 502  1/10/2013  1/15/2013 I. Joliet
  3 502 12/10/2012 12/14/2012 K. Leavenworth
  4 502 12/10/2013 12/14/2013 K. Leavenworth
  5 504  2/15/2013 12/14/2013 C. S. Quentin
Reservations for room 502:
    1/10/2013 to  1/15/2013:  I. Joliet
   12/10/2012 to 12/14/2012:  K. Leavenworth
   12/10/2013 to 12/14/2013:  K. Leavenworth
Reservations for K. Leavenworth:
   12/10/2012 to 12/14/2012:  room 502
   12/10/2013 to 12/14/2013:  room 502
Reservations for C. S. Quentin:
    2/15/2013 to 12/14/2013:  room 504
Guests arriving on 12/10/2012:
   K. Leavenworth (room 502)
   I. Joliet (room 503)
Guests arriving on 12/9/2012:
Guests departing on 12/14/2013:
   C. S. Quentin (room 504)
   K. Leavenworth (room 502)
Bedrooms free between 12/20/2012 to 12/25/2012:
   504
   501
   502
   503
Bedrooms free between 12/12/2012 to 12/20/2012:
   504
   501
Bedrooms free between 12/14/2012 to 12/14/2012:
   504
   501
   502
Bedrooms occupied between 12/14/2012 to 12/14/2012:
   503
Bedrooms occupied between 12/12/2012 to 12/20/2012:
   502
   503
Bedrooms occupied between 12/20/2012 to 12/25/2012:
Thank you for abusing the Anteater BandB Reservation System!

Stage VI: This stage has two parts. First, the LB command should print the room list in order by room number and the LR command should list the reservations in order by arrival date. 
The second part of this stage makes the file handling more
  realistic. In a real hotel, the room reservation system must save
  the reservation information at the end of the day, to be used as the
  following day's starting data. Before exiting, your program should
  write out the room and reservation information to an external file
  as a series of NB and NR commands, in the same format as the input
  command file. You should not automatically write the end-of-day data
  on top of the original input file; prompt the user for a new file
  name. Thereafter, when your program starts it will prompt the user
  for the file containing the previous day's ending data and read in
  those commands before it asks for the current day's command file and
  handles the commands there. In addition to the program's output for
  the four test cases you will turn in, you should also turn in a
  printed copy of the final end-of-day files for each of those four
  test cases.

[In fact, there is an inconsistency here, because the NR command doesn't have space for an existing reservation's confirmation number. Thus, any carried-forward reservation will get a new confirmation number, and the number the guest has won't be any good. Optionally, propose a solution to this problem (you don't have to implement it, but it should be something you could implement if you had a few more days).]
Stage VII (optional): In this stage, before
cancelling a reservation you check to see if it can be moved to
  another room.  First check if there's another room free for the
entire duration of the reservation, and move it there.  If no single
room can accommodate the reservation, but if it could be split
between two rooms, do that.  Only if that's not possible,
cancel it.
 
The following usual warnings, advice, policies,
  and practices apply to this assignment:

Get started early.

Read and re-read the specifications.

Do this with a partner you haven't worked
with yet this quarter (and let the TA know who your partner is).

Submit all your Python source code in one .py
file via Checkmate.  Each pair should submit just one solution.

The usual grading criteria
for lab assignments apply. 

Fill out a partner evaluation at EEE.


Written by David G. Kay, Winter 2005, based on earlier assignments. Modified by David G. Kay for Python, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw9.html
##-----------------TITLE------------------------##
Ninth Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Ninth (and last!) Homework
 Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, March 12.   This
assignment is short; use the remaining time to complete the lab assignment.
(a) Suppose you have an electronic cookbook that contains a list of
recipes defined as follows:
     Recipe = namedtuple('Recipe', 'title ingredients steps')
The title is a string, ingredients is a list of strings, and steps is
a list of strings.  For example:
     r = Recipe('Thai Iced Coffee', ['coffee', 'sugar', 'condensed milk', 'ice'],
                ['brew coffee', 'mix with sugar and condensed-milk',
                 'pour coffee mixture over ice'])

(a.1)
Define the function is_ingredient_in_recipe
as described below.
def is_ingredient_in_recipe(r: Recipe, ing: str) -> bool:
   """ Return true if the string occurs in the recipe's ingredients list """

(a.2)
  Define the function are_all_steps_short
  as described below.
def are_all_steps_short(r: Recipe, limit: int) -> bool:
   """ Return true if every step in the recipe is no longer than the limit """

Try to do this using list comprehensions or map/filter/reduce (and
  remember that reduce has to be imported from the
  functools library). [Hint:  First, try defining count_words and
is_step_short, each of which can be done in one line.]

(a.3)
Define the function is_recipe_simple
as described below.
def is_recipe_simple(r: Recipe) -> bool:
   """ Return true if recipe has 10 or fewer steps and each step is
       no longer than 6 words. """

(a.4)
The first word of each step is a verb (e.g., bake, mix, grill); we can
call that the technique involved in that step. Define the function
does_recipe_use_technique as described below.
def does_recipe_use_technique(r: Recipe, technique: str) -> bool:
   """ Return true if at least one step has the specified technique """


  (a.5)
  Now, suppose you want to select recipes that will help you practice a
  particular technique. Define the function
  simple_practice_recipes as described below, using
  previously defined functions where appropriate.  Try to use list
  comprehensions and/or map/filter/reduce.
def simple_practice_recipes(rList: 'list of Recipe', technique: str) -> 'list of Recipe':
   """ Return a list of the recipes from the input that are simple
       and that use the specified technique"""

(a.6)
  Most of you probably recognize this problem from a quiz last quarter.
  Now that you've had some experience in two programming languages,
  what do you think are the advantages and disadvantages of programming
  in each?  (You don't have to write anything formal for this; just
  spend a little time reflecting on the issues.)
(b) Be able to give answers to questions
  like these about the theme park simulator.  Feel free to talk with your classmates about them, but realize
  that the point isn't to have the answer but to know how to
    get the answer, especially if similar questions should show up on exams.

The function parseAttractionFile reads attractions into a dictionary, then converts the dictionary into a list and passes the list to the AmusementPark. What data structure does the AmusementPark useto store the attractions, and why?

The function parseCustomerFile reads customers into a dictionary (why?), then converts the dictionary values into a list and passes it to the AmusementParkSimulation. What data structure(s) does the AmusementParkSimulation use to store the customers, and why? What other data structures is a customer part of during a day in the park? 

  What data structure(s) does the simulator use
    to store the rides a customer has visited? 


Written by David G. Kay, Winter 2005; modified
Winter 2006 and Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/pair.html
##-----------------TITLE------------------------##
Pair Programming Guidelines
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE 
 Pair Programming Guidelines

Two heads are better than one, according to
an old saying.  This even applies to writing programs:  A pair of programmers
(working as described here) nearly always beats the stereotypical solitary
loner.  The pair produces more high-quality code in less time, by far more
than two-to-one.

In pair programming, two programmers share
one computer.  One is the "driver," who controls the keyboard
and mouse.  The other is the "navigator," who observes, asks questions,
suggests solutions, and thinks about slightly longer-term strategies.  The
two programmers switch roles frequently—every 15 minutes would be a good
interval for us, though that's flexible.  Even the activities of the
driver and navigator are flexible (except for who does the typing); the
goal is to work collaboratively, each partner assisting the other as needed,
to produce the best joint result possible.  It is not pair programming if
one person does all the work or if the partners just split up the work and
each does half independently.

That's the basic idea:  Spend your time in the scheduled labs working with your partner,
one of you as driver and the other as navigator, switching regularly.  You
may need to arrange other times to meet, beyond the scheduled lab sections.
 We expect everyone to be as flexible and professional as possible in arranging
those times as necessary; if your schedule is highly constrained, explore
possible outside meeting times with your prospective partners before you commit to the partnership.

You may enjoy reading this paper about pair
programming:  All I Really Need to Know About Pair Programming I Learned in Kindergarten,
by Laurie A. Williams and Robert R. Kessler (Communications of the ACM,
May 2000).  [Alternate link]

What about individual differences? People new to pair programming often ask what
happens if the members of the pair have different abilities.  Actually,
that is true of any pair of people in the world, probably even including
identical twins.  The differences may be great or small, one member may
have more strengths than the other, but this is exactly like most real-world
working situations.  Part of accomplishing a task is to get the most out
of each member and make each member stronger and more productive on subsequent
tasks.

A clearly stronger partner may feel frustrated
or slowed down by the other partner, but the stronger partner still benefits
from the teamwork in many ways: The other partner's requests for clarification
often point out flaws in the approach or solution, the teamwork skills gained
have great value in the job market, and the exercise of providing a clear
explanation solidifies and deepens the explainer's own understanding.

The less strong partner may feel that questions
hold the other partner back or that there is no benefit to participating
actively, but pair programming studies show that paired work is consistently
better than work the stronger partner does individually.  It is part of
each partner's job to understand the whole task; that means asking questions
when necessary and answering them when possible.
You will choose a different partner for every assignment, so your partners' skill levels are certain to vary from week to week. Still, when you have a choice, you should try to pick a partner whose skill level is close to your own. This won't always be possible, and it's sometimes hard to compare skill levels at all, but we find that pairs are most productive when the partners are at about the same level—there's a more balanced give-and-take.
How does this affect my grade? Participation in pair programming won't be the cause of any low grades. (Failure to participate fully and cooperatively, on the other hand, could be a problem.) On assignments that specify pair programming,
  each pair will submit one solution, marked with both partners' names.
  (For electronic submissions via Checkmate, just one member of the pair
  should submit the solution, which should still contain both partners'
  names at the top of the file; we'll keep track of who's in what pair, so long as you keep
  us informed of your pairings in the first place.)  Each pair will receive
  a single score on the assignment.

Also, for each paired assignment, each student
individually will submit a brief partner evaluation form, administered electronically,
which will ask these questions:  Did your partner come to the scheduled meetings on time and ready to work? Did your partner read the assignment and preparatory materials before coming to the scheduled meetings, showing up either with specific questions or ready to contribute? Did your partner cooperatively follow the pair programming model (rotating roles of driver and navigator, questioning and making observations as the navigator)? Did your partner contribute fully, fairly, and actively, to the best of his or her ability, to the completion of the lab assignment? Was your partner's participation professional and cooperative overall?

Filling out the evaluation is required of each
student for each assignment; forgetting the evaluation will lower your participation
score. We will tally these evaluation scores and use them in computing the
participation part of the grade (taking care that nobody's score is
hurt by a single bad partnership or a selection of partners that happen
to give low scores).  



It may be instructive to read a selection of
students' partner evaluation comments
from a previous course; they give a picture of what good partnerships are
like (and a few disasters, too).

Additional information: Pair programming is one aspect of the trendily-named
programming methodology Extreme Programming.  A search for "pair programming"
or "extreme programming" on the Web will yield many references.


David G. Kay, kay@uci.edu

Tuesday, September 20, 2011 9:23 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw2.html
##-----------------TITLE------------------------##
Second Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
• UC Irvine

Second Homework
 With this homework assignment, to be done individually (but with questions to i42@uci.edu or Piazza), we'll get into our usual rhythm of homeworks over the weekend and lab assignments in the lab hours).
Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, January 23.

Part I

Continue with the class-based restaurants
program (RPList.py) that you worked on last week. You can start with the original version at http://www.ics.uci.edu/~kay/python/RPList.py or you can use the modified version (with sentences and erasing) you developed for the last homework (so long as that version works correctly).

  Add the menu item "c:
    Change all prices".  This should
      prompt the user for an amount representing a percentage
      change in price (so that 100 would double a price and –50 would cut it in
      half).  Then it should apply that price change to the prices for all the
      restaurants in the collection.
  
  This will require a new method in the Restaurant
    class and a new method in the Collection class. (Try to work this out for yourself; you've seen all the components and patterns. Only read the following details if you're stuck [really, now, stop reading and think before continuing this paragraph]: 
  The method in the Restaurant class, let's call it adjustPrice, takes the percentage number and changes the Restaurant's price (self.price) accordingly. The method in the Collection class applies the Restaurant's  adjustPrice method to each Restaurant in the Collection (which you can do with a loop (for r in self.rests: ...) or with a list comprehension.)


  Add an averagePrice
    method to the Collection class; it should return a float representing the average
    price at all the restaurants.  You know the formula for calculating an average and you know how to obtain the constituent parts—the total price [following code we've seen in class] and the number of restaurants in the Collection. To be thorough, this method should check that the collection isn't empty; if it is empty, it should print a message and return zero. Then modify Collection's print
  method to print the average price after it prints all the restaurants.

Part II

This Python code copies a file, line by line.  It presumes that the input and output files will be in the same directory (folder) as the code itself. (This is a restriction we could relax by using libraries that let us navigate around file systems and use the operating system's standard file dialog boxes. But those are topics for another day.)
inFileName = input("Please enter the name of the file to copy: ")
inFile = open(inFileName)
outFileName = input("Please enter the name of the new copy:  ")
outFile = open(outFileName, 'w')
for line in inFile:
  outFile.write(line)
inFile.close()
outFile.close()


  (a)  Install and run this code on
your own system.  Test it out with a short file.
Then download the Project
  Gutenberg version of The Adventures of Sherlock Holmes from http://www.gutenberg.org/cache/epub/1661/pg1661.txt
  (Project Gutenberg is a wonderful resource for non-copyright-protected texts).
  Run your file copying program to make a copy of this
  file.  [Late update: Some problems have been reported with reading Project Gutenberg files. If you run into messages saying that Python can't decode a character, just find some other long text file and use that instead.]
(b)  Modify a copy of your program so
that the copied file includes line numbers at the start of each line:
    1: Project Gutenberg's The Adventures of Sherlock Holmes, by Arthur Conan Doyle
    2: 
    3: This eBook is for the use of anyone anywhere at no cost and with
...
13052: subscribe to our email newsletter to hear about new eBooks.
(Note that the line number is formatted and right-justified
in a five-character field.)

  Additional challenges:  If you have some time and enjoy coding, try some of the following. If you don't have more time for more coding for this homework, that's okay; move on to the lab assignment and wait for next week's homework. (These additional challenges don't yield any actual extra
    credit, but if you implement some of them, we'll be impressed.  It's generally good to impress instructors because it gives
    them something special to write in recommendation letters.)  But it wouldn't hurt for everyone to read these and think about how to code them up, even if you don't actually
do it.
Write a program called Reverse.
 It should prompt for two file names and copy the first
file to the second, except in reverse order (with the last line of the original
file as the first line of the new one).  This requires that you store the
whole file in your program; probably the best way is with the f.readlines() method..

Implement a simple version of the diff
  command that reads two files and prints out the
  lines that don't match.  (The real diff
    will recognize where one file has an extra line, and not act as if nothing
    matches after that point, but your program doesn't have to do this.)

Implement head
and tail,
with the number of lines and the file name as arguments.  Doing
head
is easy; doing tail
is a little trickier.

If you examine the file from Project Gutenberg,
you see that it contains some "housekeeping" information at the
beginning and at the end.  You'll also see that the text itself starts
after a line beginning with "***
START" and ends just before a line
beginning with "*** END".
 Write the program CopyTextOnly that copies only the body of a Project Gutenberg
file, omitting the "housekeeping" material at the front and end.

Write a program Mirror that's like Reverse
above, except that it also reverses each line.

Modify the line-numbering program so that the
line number field is no wider than it has to be.  (So, for example, a file
with under 1000 lines, but over 99, would have its line numbers in a three-character-wide
field.)  You'll need to read the file into memory (as Reverse did) or
read it twice (which we generally wouldn't do if the file is short enough
to fit in memory, because I/O is so much slower than processing data already
in memory).  


Written by David G. Kay, Winter 2005.  Modified
Winter 2006. Modified by Alex Thornton, Winter 2007, and by David G. Kay, Winter 2008. Modified for Python by David G. Kay, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/labF.html
##-----------------TITLE------------------------##
Lab Assignment F
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Lab Assignment F
This assignment is due at the end of lab on Wednesday, March 14. Turn in whatever you have completed by that date; since it's the end of the quarter, there isn't much leeway for later submissions.  Please read the introductory instructions carefully.

For this lab, you will implement some more
enhancements to the theme park simulator.  There are nine parts to the
assignment, each of which is independent.  You don't have to do them
in order, and you don't have to do all of them (we don't expect
anyone to do all of them).  More important than how many of the parts
you implement is that what you do implement is thorough and correct.
 Partial but correct implementations (that state clearly what they do and
don't include) will receive much more credit than attempts to do everything, but
that contain bugs or other unexpected or undocumented behavior.  It's
your choice whether you make your enhancements cumulatively (e.g., implementing
part (b) on top of the changes you made for part (a)) or independently
(i.e., starting from the base simulator for each part).

There is ample opportunity in many of these
parts for you to make design decisions in three different areas:  the precise
functionality and behavior of the enhancement, the user interface, and the
design of the code you write.  A thorough discussion of the design choices
you made in each area will contribute to your score.  In that way, a group
that thought a lot about the user interface they designed for one of the
parts, describing clearly the rationale for their design choices, may get
as high a score as a group that implemented more features (correctly) but
that followed a straightforward design approach without much analysis or
description.  We expect every group actually to implement some of these
features, but thorough consideration and description of design choices can
be as valuable as raw coding.
Along with your code, submit a short document explaining very clearly what parts of the assignment you completed correctly and including the discussion and analysis mentioned in the previous paragraph.

The simulator's home page is at http://www.ics.uci.edu/~kay/courses/i42/wildride/.
 

(a)  Using the tkinter examples as
a basis, create a setup or preference panel for the simulator.  The panel
should display the default parameters, allow the user to change those values,
and include a button for starting the actual simulation.

You should allow the user to set such values
as opening time, closing time, park entrance, park exit, the name of the
customers file, the name of the rides file, and (if you implement the timer
code below) the simulation speed.  If there are other constants in the code,
consider adding them to your preference pane.
A good way to approach designing many GUIs is to start with the model/view distinction. Write a separate function to supply the information you'll want your GUI to supply, but first write an equivalent function that's text-based, prompting the user for the needed information (or calculating it). Once that text-based version works, you can write the GUI version (with the same parameters and return type).

Think about the GUI components that make the
most sense for entry of each kind of information.  "Making sense"
in this context means minimizing effort (both in terms of typing and in
terms of thinking) for the user and taking advantage of conventions that
other software follows.  

You should make your display pleasing and legible,
using the pack or grid layout manager.

(b) Implement the commands that write complete statistics out to a file; these should include the summary statistics followed by a line of statistics for each customer or each ride. Choose a format that is complete, concise, and easy to scan.

(c) Using your plan from Lab E (or
your partner's plan, or a new plan), change the simulator's tick
length from one per minute to one per second.
 Then re-run your tests (rescaling the data,
  too, of course) and see whether the results are significantly different.
(d)  Using Tkinter's Canvas widget, implement a graphical display for the overview 
  statistics printed for the customers and for the attractions.  (Bear in
  mind the general principle that every pixel should contribute to conveying
  information.  Don't get carried away with fancy decoration.)

(e)  Using Tkinter, create a real-time graphical display so that some aspect of
the simulation can be viewed while the simulation is running.  Here are
some ideas:

Display the queue length for each ride (or
selected rides)

Plot a map of the park showing the location
of each customer

Plot a map of the park showing the location
of each ride, perhaps using a color to indicate the estimated wait

(f)  Implement store-type rides as 
mentioned in the problem description.

(g)  Create a GUI for the customer-file
generator you created in Lab E.  You might integrate this with the simulator
itself, perhaps having a pane or button in the setup panel that allows the
user to generate the customer data.  You might also implement a way for
users to describe random numbers generated according to some distribution
(other than randomly across the whole space of possible values).

If you'd like to generate ride data using
a grammar-based approach and turn that into a GUI, too, go right ahead.

(h)  Change the implementation of one
or more of the data structures you identified in the Ninth Homework to make
them more efficient.  Be sure to describe your choices and their performance
relative to the original.

(i)  Create a GUI progress bar that
shows how far a simulation has come (or has to go until completion).  

The usual warnings, wisdom, and what-to-dos
apply to this assignment:

Get started early.

Read and re-read the specifications.

Do this with a partner you haven't worked
with yet this quarter and make sure Joel knows whom you're paired with.

Use Checkmate for your submissions as usual;
each pair should submit just one solution.

The usual grading criteria
for lab assignments apply.

Fill out a partner evaluation at EEE. Do this by the end of the day on Friday, March 16, or you won't get credit.


Written by David G. Kay and Jeff Ridenour,
Winter 2005; modified Winter 2006, Winter 2008, and Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw4.html
##-----------------TITLE------------------------##
Fourth Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Fourth Homework
 Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, February 6. This assignment is all pencil-and-paper, which should
give you some more time to work on your lab assignment.

(a) Give the average-case run-time
polynomial and the O-notation for the following code segment, as we did in class.  Count each
assignment statement and each function
call.
print("This line is executed only once.")
total = 0
for i in range(n):
    x = readAnInt()  # count this line twice:  assignment plus call
    total += x
    if i % 2 == 0:   # equivalent to (even? i); % is mod (remainder)
        print(x)
print("Total:  ")
print(total)
print("The end.")

(b) You have been asked to write the spell checker
  for SnazzyWrite, a word processing program that competes with Microsoft
  Word.  Your software will take words from the user's document and look
  each word up in a list of correctly spelled words.  (Sometimes this is called
  a dictionary, but for clarity we'll call it a word list even if may not be implemented in Python as either a list or a dictionary.)

If your program doesn't find a word in
the word list, it notifies the user that the word is probably misspelled.
 In that case, it also gives the user the opportunity to add the word to
the word list, since the word may be a new word rather than a misspelling.

You consider the following alternatives for
implementing the word list:

I.  A dynamically allocated singly-linked list,
ordered alphabetically, plus a single integer to store the number of words

II.  An array/vector ordered alphabetically, plus
a single integer to store the number of words

III.  A hash table as described in class (with
a good hash function, an appropriate table size, and collisions resolved
by chaining)

IV.  A reasonably balanced binary search tree,
ordered alphabetically

(b.1)  Complete the following table, giving
the best O-notation for each operation on each data structure, assuming
that each operation is implemented using the most efficient algorithm
available.  Assume that the word list contains w words and the user's
document contains d words--use these variables, not n.

Operation
Linked List
Array
Hash Table
Bin. S. Tree
Look up (search for) a single word in the word
list






Add a new word to the word list





Spell-check an entire document (assuming no
new words)







Print all the words in the word list in alphabetical
order





(b.2)  In the table above, some of the
  entries measure primarily comparisons and others mainly measure data movements.
  Circle each entry above whose O-notation measures primarily data movements.

(b.3)  Which of these data structures
would be best for this task?  Give a very brief but clear and valid reason
for your choice. 


(b.4)  Considering only the O-notations
above, which two data structures should, logically, never be used for this
task?

  (c) Take some time to read through Alex Thornton's ICS 22 lab assignment, "What's Simple is True." We will be doing a version of this as our next lab assignment. We may spend some class time starting it together, so you should be prepared to get the most out of that discussion by having a decent idea in advance of what the problem's about.
The assignment involves building an interpreter for a simple programing language like Basic; Alex calls his language Facile. This may seem a little infrastructural for us, but actually, it's not: Sometimes the right way to solve a problem is to make up a special-purpose language that makes it easy to express the various aspects of the problem (and then build an interpreter to process that language). Even the restaurants program is an anemic example of this; we have a "restaurant collection manipulation language" that consists of half a dozen single-letter commands. 
Alex makes a big point in his writeup about how hefty this assignment is, but besides the fact that you're intrepid informaticians, always up for new experiences and challenges, you have two distinct advantages over the ICS 22 students doing this assignment: You're doing it with pair programming, and you've spent a week (last quarter) thinking about machine-level programming, so the concepts in this assignment will be familiar.

Written by David G. Kay, Winter 2001.  Modified by Alex Thornton, Winter 2007. Modified by David G. Kay, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw8.html
##-----------------TITLE------------------------##
Eighth Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Eighth Homework
Get your work checked and signed off by a classmate, then show it to your TA in lab on Monday, March 5.
(a)  Finish up the problems from last week's homework, in particular:
Read the problem description for the amusement park simulator.
Watch the Sorting Out Sorting video
Complete the modification of your Stats program.  Everyone in this course is expected to achieve a baseline of coding proficiency in Python; even if you're not headed for software development as a career, you'll need to write some code in your subsequent classes.
(b) Some review questions for the final are on line. They're not required as part of this homework, but it would be a good idea if you were able to do these problems. (Some of the code hasn't been translated into Python, but for this purpose it should be easy enough to follow.) Answers are also available, but actually try to do the problems before looking.
(c)  Beyond that, spend your time working
  on the lab assignment.

Written by David G. Kay, Winter 2005; modified
Winter 2006, Winter 2008, and Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/labE.html
##-----------------TITLE------------------------##
Lab Assignment E
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Lab Assignment E

This assignment is due at the end of lab on
Monday, March 5. 

This will be your first real opportunity to
explore and enhance the simulator, whose home page is at http://www.ics.uci.edu/~kay/courses/i42/wildride/.

(a)  Spend at least 20 minutes running
the simulator, using the larger sets of test data available on the web page
and perhaps other sets you make up.  As you work on this assignment, develop
a list of improvements or enhancements to the simulator, including at least
two in each of these categories:

The functionality—what features the program
provides.  But your suggestions here have to be something that you think
you could implement, if you had enough time; don't just ask for the moon. You won't be obligated actually to implement the enhancements you suggest, but they should be something you basically understand how to build.

The user interface—how the program interacts
with its user.  Again, suggest only things that you think you could implement.
 Don't just say, "Make a GUI with little animations for each customer
and ride."

The coding style of the program, including
variable/class/method names and physical arrangement of the code.

The program's overall design—how the problem
was organized into classes, the responsibilities of each class and the relationships
between classes.  The question here is whether there could be changes to
this organization that would make modifications or enhancements easier.
 (This one may be a little tough at this point, but it's the central
issue in software design, so give it some thought.)

The run-time efficiency of the program—how
the choice of data structures and algorithms affects the performance.  (This
one is optional at this point, because we haven't gotten deeply into
the program's internal design.)


(b)  Pick one of the functionality changes
you propose above and give a sketch of how you would implement it.  This
should be about half a page of text, possibly with some diagrams, that describes
at a high level which part(s) of the program would have to change (which
classes, which methods) and what those changes should be.
(c)  Devise at least three "micro
test cases" that you can use to verify that the actual, step-by-step
behavior of the rides and customers matches the specification.  An example
might be a park with one ride and one customer, whose progress you can track,
tick by tick.  Other cases can examine other types of customers or rides,
or different locations in the park.  Feel free to coordinate these tests
with other groups so you don't all test the same things.

  Along with each set of data, describe what
    behavior you're trying to test (e.g., the loading behavior of cycle
    rides or the movement of a customer around the park), what results you expected,
    and what results you actually obtained.  If you got something different
    from what you expected, determine whether the discrepancy was due to an
    ambiguity or misunderstanding of the specifications, a mistake in your hand-calculation
of the expected result, or a bug in the code.  Any group(s) that can identify and document an actual bug in the code (a place where the behavior clearly contradicts the specification) will receive a reward; those who identify questionable program behavior or ambiguities in the spec will also receive (lesser) rewards. Bring these to the TA's attention.
(d) Pick two functions that are part of one class in the simulator, and write "unit tests" for each. That is, write a set of assert statments that test thoroughly that the function works correctly, in the same spirit as we wrote check-expect expressions in Racket. You may need to create some simple test objects to use in your assertions, depending on which functions you choose. Then run your code to make sure none of the assertions fails.
Writing these tests isn't really hard, but it does take some time. That's why we haven't been insisting that you write them comprehensively for every function in every program you've done this quarter: We have to choose where our limited time is most effectively spent. But in any kind of serious programming, the effort spent in writing good unit tests in advance is well paid back over the life of the software.
(e)  Now it's time to modify the
  code.  Make a copy and work on the copy.  Each time you add a feature and
  test it successfully, make another copy and continue working on the new
  copy.  That way, if you get into trouble, you can "roll back"
  to the previous copy without having messed up all your previous work.

  The simulator displays some statistics about attractions and some statistics about customers. It should also display these overall statistics about the customers: the total number of visitors to the park; the number of people who didn't get into the park (because they arrived after closing time); the total time they
  spent in the park, in line, and riding rides; and the average time per customer
spent in the park, in line, and riding rides.

Likewise, calculate and print the following
overall statistics about the attractions:  the total number of attractions
in the park, the total number of riders and average riders per ride, the
total time spent riding and average riding time per ride, and the total
time spent waiting in line and average waiting time per ride.
(f)  Using your random sentence generator
(either yours or your partner's or parts of both),  generate random customer data for the simulator, along the
lines we discussed in class.  Optionally, you could find on the web lists of popular names—family names and male/female given names—and have your grammar generate a realistically representative list of names. (You may optionally also generate random ride
data.  Presumably that would just involve preparing a different grammar,
but we're not requiring that now.)  

  At least your test data generator should generate
    valid data; it would be nice if it could choose realistic-seeming names
    and numbers in plausible ranges.  Test your generated data by asking the
simulator to read it in. Turn in a text document containing your grammar for customer data and some sample customers it generated.
(g)  Suppose you wanted to make each
tick of the clock last one second instead of one minute.  What would you
have to change in the program (and data)?  Make a list of those changes,
but don't implement them yet (or, optionally, implement them on a separate
copy of the code.)  Why hesitate to make this change?  Think about your
micro test cases; it's a lot more tedious to track the behavior second-by-second. 

(h)  (optional) While walking to a ride,
a customer might change his or her mind.  The customer might walk by a ride
that looks interesting (or that has a short line), or the customer might
get hungry and stop for a snack.  We can't model every kind of mind-changing
behavior, but we can allow the customer to recalculate his or her priorities
every n steps.  We might think of n as a measure of decisiveness;
if n is high (or zero), the customer seldom re-thinks; if it's
low, the customer frequently reevaluates.  

Modify the simulator to allow customers in
transit to reprioritize their agendas (according to their existing strategy,
which means that they might decide to keep going to the same place) every
n steps.  Specify n for each customer in the input, at the
beginning of the line that currently specifies the customer type.

Make this modification on a separate copy of
the simulator.  You may want to go back to the original version for later
assignments.


The usual admonitions, advice, and administrivia
apply to this assignment:

Get started early.

Read and re-read the specifications.

Do this with a partner you haven't worked
with yet this quarter and make sure Joel knows whom you're pairing with.

Use Checkmate for your submissions as usual;
each pair should submit just one solution.

    For parts (a) and (b), submit a text
      document (Word or PDF or RTF or plain text) with your suggestions and your
      implementation sketch.  (Actual sketches or other graphics are welcome,
      but not required.)
   For parts (c), (f), and (g), submit
    text documents.
  For part (d), your unit tests should remain in the simulator code you turn in later, so there's nothing separate to turn in here.For part (e), submit all the source
    code in one .py
      file. The same goes for optional part (h).



The usual grading criteria
for lab assignments apply. 

Fill out a partner evaluation at EEE.


Written by David G. Kay, Winter 2005; modified by Alex Thornton, Winter 2007, and by David G. Kay, 
Winter 2006, Winter 2008, and Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw3.html
##-----------------TITLE------------------------##
Third Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Third Homework
 Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, January 30.
(a) If you haven't already, take the time to read the whole writeup for Lab Assignment B. You'll be revisiting it many times, but it's good to get an overview up front.
 (b) Make a copy of your line-numbering
program from last week; rename it to stats.py.  It should read a file and print
out (to the standard output, not to another file) the total number of lines,
the average line length (to three decimal places), the number of empty (zero-length)
lines, the average length of non-empty lines (again to three places), the
length of the longest line, the longest line itself, the length of the shortest
non-empty line, and the shortest non-empty line itself.
These are some classic "micro-algorithms"
  on a collection of data:  Count the items, sum the items, find the largest,
  find the smallest. By this time, computing these should be nearly second nature for you.

(c) Years ago, before they built a
bridge, you could reach the Isle of Skye in the Scottish Highlands from
two points on the mainland:  Mallaig and Kyle of Lochalsh.  Each town ran
a car ferry service—a boat that takes cars (and people) to Skye and back.
 (c.1) Each Mallaig ferry has a single
  automobile entrance.  The cars drive on and go as far back in the boat as
  they can.  When the ferry reaches Skye, the cars leave the boat by the same
  entrance, so the car at the far end of the boat is the last one off.  Is
  the Mallaig ferry more like a list, a stack, a queue, or a tree?
 (c.2) Each ferry from Kyle of Lochalsh
  has a ramp at both ends.  The cars drive onto the boat using the ramp at
  one end; each car drives as far down the boat as possible.  When the ferry
  reaches Skye, it docks so that the ramp at the other end connects with the
  dock and the cars drive straight off.  (The Balboa Island ferry works the
  same way.)  Is the Kyle of Lochalsh ferry more like a list, a stack, a
  queue, or a tree?
 (c.3) Which ferry is more efficient
  for loading and unloading cars, and why?

(d)   Read over (for the gist, not to memorize) the documentation at Python.org for the datetime library. You'll be using this in the current lab.  [We've given you the link, but you should be able to find the page yourself at python.org].
To use a library (analogously to using a Teachpack in DrRacket), you say import datetime near the top of the program, after which you can use the classes and methods defined in the library, e.g., finalDate = datetime.date(2012, 3, 6).  You can also import individual identifiers (class and method names) from the library by saying, e.g., from datetime import date, after which you can just say flagDay = date(2012,6,14).
Write a few lines of Python code to:
Create the date February 1, 2012 and another date, February 18, 2012.Print the difference between those two datesCreate a date from a string like '2/14/2012' (the string method split will help a lot; look it up)Use the strftime method to print a date in a format like Today is Tuesday, February 1, 2012.


  Written by David G. Kay, Winter 2005.  The Skye ferry question is an exam questions
from ages ago. Modified by David G. Kay, Winter 2006, by Alex Thornton, Winter 2007,  by David G. Kay, Winter 2008, and by David G. Kay for Python, WInter 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/labA.html
##-----------------TITLE------------------------##
Lab Assignment A
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
• UC Irvine

Lab Assignment A
"Luck, Be a Lady Tonight"

This assignment is due at the end of lab on
Wednesday, January 25.  This is enough time for a novice Python programmer to
complete the task, bearing in mind that Informatics 42 is a six-unit course
that typically will require work outside of the normally scheduled lab hours.

You will also notice that the specifications
for most assignments in this course are longer than we've seen before.
 This is a good thing:  the more explanation we give, the more guidance
you have.  But technical specifications are not like novels.  You cannot
speed-read through them just one time and expect to gain the information
you need.  Plan to read the specifications carefully, and plan to go back
and read them again to pick up additional details.

We expect you to complete this assignment in
pairs, following the usual pair programming guidelines.
 You may not choose
this project as your one "pair programming holiday" this quarter.
 There are lots of little details to get through, and it's really hard
to do it alone.  We suggest that you try to pick a partner whose experience
level is relatively close to your own; that seems to optimize both the effectiveness
and the efficiency of both partners' learning (i.e., you'll learn
more with less effort).

Problem synopsis: 
Write a program to play the dice game "craps," including playing
against the computer, compiling statistics on the fairness of the
dice, and handling bets.

This assignment is divided into four stages. Each succeeding stage is built upon what you have already written for the previous stage. We expect you to design, write, and test this program according to these stages—first get the first-stage program working, then modify it to satisfy the second stage, and so on.


You should make sure that each stage is entirely correct and working perfectly before you go on to the next. As you complete each stage, you must demonstrate briefly to your TA or tutor that it works correctly before you go on to the following stage. If you try to add the second-stage features before your first stage is debugged, you'll just have twice as large a program to search through for errors. In fact, breaking up the problem into several subprograms will speed up your coding, aid you in debugging, and keep you from getting too far off on the wrong track.
Sometimes students think, "Yes, this business about stages would be a
nice idea if I had the time, but it'll take me too long." This is
wrong. What will take you the most time (and thus cause you the most
frustration and unhappiness) is trying to debug the whole program at
once. If it seems longer to do it by stages, it's only because each
stage is a nicely manageable piece that's not too taxing by itself.


You will find that this program focuses mostly on control
structures—how to get the right things to happen in the right
order, including managing interactions with the user.  
These are skills you need to program in languages like Python.
But you won't find that object-oriented design, model-view-controller
organization, or even unit testing will help you all that much.  You
should certainly try to isolate separate functionality (like rolling
two dice and returning the result) into separate functions, but the
interactive nature of the program and the randomness of the dice will
lead you simply to run interactive tests as frequently as you can.


Grading: Your score will depend primarily on correctness and on adherence to
the specifications (which is essentially the same thing).  It is
always far better to implement a subset of the functionality correctly
than to attempt to implement more features in a program that retains
some bugs.  Secondary aspects of your score will include contract
and purpose information where appropriate, reasonable adherence to
Python coding conventions and idioms, and avoidance of grossly clumsy
or stylistically poor code.

In assignments for this class, code that doesn't
compile correctly will receive very little credit, no matter how long or
how hard you worked on it.  If it doesn't compile, there's no real
way to tell what it does or doesn't do.

  Statement of the problem: 
  The operators of the oldest established permanent floating crap game in New York have decided to computerize their racket, figuring that since a computer can shoot craps faster than a human, more games can be played, so more money can be made. Sky Masterson has fingered you to write the program.

Craps is a game played with two six-sided dice; each die's faces are
numbered from 1 to 6. The player (or "shooter") rolls the dice. The shooter wins
right away If the total of the two faces is a "natural" (7 or 11).
If it is "craps" (2, 3, or 12), the shooter loses. 
Anything else becomes the shooter's "point". The shooter then keeps on
rolling until either winning by 
"making the point" (i.e., rolling that number again) or losing by
"crapping out" (rolling a 7). (The rolls 2, 3, 11, and 12 have no
special meaning when the shooter is trying to make the point.)


Stage I:
 In this stage you will write an interactive program to play a single
 game of craps. When you complete this stage, it should produce sample
 sessions like the following:
Welcome to Sky Masterson's Craps Game 

Roll is  7
Natural; shooter wins
Thank you for playing
Another possible session is:
Welcome to Sky Masterson's Craps Game 

Roll is  6
The point is 6
Roll is  12
Roll is  12
Roll is  4
Roll is  10
Roll is  7
Crapped out; shooter loses
Thank you for playing

Use your reference materials (the online Python documentation or the textbook) to find out how to generate random numbers.  Often we'll just tell you specific details like this, but you do need the experience of looking things up yourself and this is an easy thing to find. (But if it takes you more than ten minutes, ask someone rather than spending more time on it.)
Stage II: 
  [Make your enhancements for this stage on a separate copy of your
  Stage I program.  Don't modify your only copy.]

For this stage, modify your program so that it plays a succession of
games, continuing until the player asks to quit, and alternating games
played between the human player and the computer. That is, after the
human player plays a single game (as described in Stage I), the
computer will roll dice for a game. Then, your program should ask the
player if he would like to play another round. If the answer is yes,
then the whole process is repeated. If not, the program prints its
final message and halts, as before.

A sample session for this stage follows;
the user's input is shown in bold face.
Welcome to Sky Masterson's Craps Game 

Your game:
Roll is  7
Natural; shooter wins

Computer's game:
Roll is  3
Craps; shooter loses

Would you like to play again? (y or n):  y
Your game:
Roll is  3
Craps; shooter loses

Computer's game:
Roll is  8
The point is 8
Roll is  7
Crapped out; shooter loses

Would you like to play again? (y or n):  y
Your game:
Roll is  6
The point is 6
Roll is  8
Roll is  11
Roll is  10
Roll is  5
Roll is  7
Crapped out; shooter loses

Computer's game:
Roll is  8
The point is 8
Roll is  6
Roll is  10
Roll is  4
Roll is  8
Made the point; shooter wins

Would you like to play again? (y or n):  n
Thank you for playing
Stage III:
Sky doesn't trust you completely, though; he's afraid you might make
the game crooked so a pal of yours can beat the odds. In this stage
you will demonstrate that the dice aren't loaded (i.e., that the roll
function is pretty random). Modify your program so that it keeps track
of the number of times each possible total (2 through 12) comes up
during the entire session.

 After the player decides to stop playing,
continue rolling silently until you have exactly 2000 rolls. Then plot
the results in histogram form, showing how frequently each possible
two-dice total (2 through 12) came up.  Your results might look like
this:
Welcome to Sky Masterson's Craps Game

Your game:
Roll is  2
Craps; shooter loses

Computer's game:
Roll is  10
The point is 10
Roll is  5
Roll is  10
Made the point; shooter wins

Would you like to play again? (y or n):  n

Thank you for playing

Distribution of dice rolls

 2:    54 ( 2%)  **
 3:   118 ( 5%)  *****
 4:   164 ( 8%)  ********
 5:   228 (11%)  ***********
 6:   253 (12%)  ************
 7:   333 (16%)  ****************
 8:   284 (14%)  **************
 9:   227 (11%)  ***********
10:   157 ( 7%)  *******
11:   116 ( 5%)  *****
12:    66 ( 3%)  ***
Stage IV:
We expect that every pair will be able to complete this final stage;
similar students in similar classes in the past have done it (singly).  
But if your pair runs into unusual difficulty on this stage, you
should know that you can get a reasonable score on the assignment
without it (assuming that what you do turn in is entirely correct).

In this stage you will add betting to the game. Initially, the player
and the computer are both given $500. The program will play a series
of games, alternating turns between the human player and the computer,
just as in Stage II. The program ends either when the player doesn't
want to play any more (as before) or when the player runs out of money
(goes broke). When play is over, the program will print betting
statistics (described below) before printing its final message and
ending.

The computer, unlike the human player, has infinite credit; its funds can go below zero without affecting the play. But neither player may make a negative bet.

Before the human player's turn starts, the program asks how much the
player wants to bet.
And if the human player needs to roll to make a point, the program
will ask before each roll how much more to add to the current bet.
If the player tries to bet more money than he or she has, the program
will print a message and ask for another amount.

When it is the human player's turn, the computer will simply match the
human player's bet.


When it is the computer's turn, the computer will bet half of its
current funds or $75, whichever is lower. But if the computer is in
debt or broke, it will bet $15. The amount of the computer's bet is
displayed, and the player will be asked to make a bet. The most the
player can bet is the amount the computer bet or the amount the player
has, whichever is lower. If the player attempts to bet more than he or
she has, handle it as above. If the player bets more than the computer
bet, the program lowers the player's bet to match. If the player bets
less than the computer, the computer will reduce its bet to match the
player's bet. After these initial bets, no other betting occurs during
the computer's turn.


Finally, your program should also keep track of some statistics and
print them out at the end of the entire session. Keep track of how
much each player (human and computer) has bet and has won, and how
much they have left at the end. Also, keep track of the smallest and
largest pot of the game and the average pot size.

Here is a sample session for this stage:
Welcome to Sky Masterson's Craps Game

Your game:
How much would you like to bet?  100
Roll is  10
The point is 10
How much would you like to bet?  300
Roll is  9
How much would you like to bet?  50
Roll is  8
How much would you like to bet?  100
Sorry; you've already bet $450.00 and you can't bet more than the $50.00 you have left.
How much would you like to bet?  0
Roll is  8
How much would you like to bet?  0
Roll is  2
How much would you like to bet?  0
Roll is  9
How much would you like to bet?  0
Roll is  10
Made the point; shooter wins

You have $950.00; computer has $50.00.

Computer's game:
Computer bets $25.00
How much would you like to bet?  100
You can't bet more than the computer; bet changed to $25.00.
Roll is  6
The point is 6
Roll is  10
Roll is  11
Roll is  6
Made the point; shooter wins

You have $925.00; computer has $75.00.
Would you like to play again? (y or n):  y

Your game:
How much would you like to bet?  500
Roll is  7
Natural; shooter wins

You have $1425.00; computer has $-425.00.

Computer's game:
Computer bets $15.00
How much would you like to bet?  15
Roll is  8
The point is 8
Roll is  7
Crapped out; shooter loses

You have $1440.00; computer has $-440.00.
Would you like to play again? (y or n):  n

Final game statistics

        Total amount bet        Total amount won        Final balance
You               990.00                 1930.00              1440.00
Computer          990.00                   50.00              -440.00

Smallest pot of game: $   30.00
Largest pot of game:  $ 1000.00
Average pot value:    $  495.00

Thank you for playing

Distribution of dice rolls

 2:    70 ( 3%)  ***
 3:   120 ( 6%)  ******
 4:   151 ( 7%)  *******
 5:   218 (10%)  **********
 6:   266 (13%)  *************
 7:   319 (15%)  ***************
 8:   289 (14%)  **************
 9:   240 (12%)  ************
10:   173 ( 8%)  ********
11:    98 ( 4%)  ****
12:    56 ( 2%)  **

  How to get started:  Read the assignment
specification.  Reading it through twice wouldn't hurt.  

  It is absolutely essential that you work in
    very small increments.  After each tiny change, run your code to make sure it behaves correctly.  Novice programmers (and even some experienced
    ones) sometimes fall into this terrible trap:  They add a whole lot of code
    to their program all at once, then they try to run it, and their code doesn't
    even compile correctly.  The debugging job is enormous at that point, because
    there's no easy way to tell which part of the code has the error in
    it.  When you add one tiny portion of code at a time, rerunning
    after each addition and not adding more until what you have is correct,
    your overall development time is shorter because you can locate any error
in the small part of code you most recently added. (For a non-computing-related illustration of how it's better to take small, easy steps rather than trying to bite off a lot at once, everyone should read Atul Gawande's article about ICU checklists.)
Keep adding new functionality, small piece
by small piece, running and testing as you go, until you've satisfied
all the requirements in the assignment specification.  When you have a way
to approach a task, it's less daunting.
Here's one more hint: As you add functionality, add extra print statements that print out the values of variables that are changing. That way you can see the progress (correct or otherwise) of your computations. Even if you'll remove those statements once you're sure the code works, having them during development is helpful.

  What to turn in:  Turn in via Checkmate
    one Python source code (.py) file containing all your code for the final version you completed.  If you haven't registered yourself for
  Checkmate this quarter, do it now; instructions are on the syllabus.  As usual, each pair should submit just one
solution, with both partners' names clearly listed at the top of each
file.

  Also as usual, every student must fill out
    a partner evaluation form at eee.uci.edu.  You can get to the partner evaluation for this lab by
    logging in at eee.uci.edu, choosing MyEEE, and selecting Survey.  Your class
    participation score will suffer if you neglect to do this.  We have not
    turned on the Email nagging option for this evaluation; it's up to you
to remember to do it within a day or so of the due date.

  Original concept (and references to the musical Guys and Dolls) by David A. Smallberg. Rewritten by David G. Kay, September 1985. Modified for use in ICS 21 by David G. Kay, October 1990. Revised by Norman Jacobson, Winter 1991. Minor revisions by Norman Jacobson, Fall 1991, by David G. Kay, Winter 1992, by Norman Jacobson, Fall 1992, and by David G. Kay, Winter 1993. Revised for Python and Informatic 42 by David G. Kay, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw6.html
##-----------------TITLE------------------------##
Sixth Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Sixth Homework
 Get your work checked and signed off by a classmate, then show it to your TA in lab by Wednesday, February 22 (since Monday is a holiday).
(a)  Write regular expressions to match
    each of the following patterns.  Note that these are natural language descriptions,
    so they will certainly be ambiguous; disambiguate them as you see fit and
    note what decisions you made.  In some cases you may not be able to match
the described set completely; it's fine to make some simplifying assumptions.
Comma-separated dollars-and-cents amounts
  (e.g., $1,234.56 and $17).  The differences between this expression and
  the one we did in class are (a) the "cents" portion isn't
required and (b) leading zeroes are allowed.
Lines that are empty or all blanks.  (The
caret ("^")
matches the start of a line and the dollar sign matches the end of the line.)
Email addresses
URLs in HTML anchor tags (e.g., <A
href="http://www.ics.uci.edu/~kay">)
Lines containing exactly one integer (perhaps
surrounded by non-numeric characters)
Feel free to write FSAs for these languages if you'd like the practice.

(b) A grammar is a set of rules that
  can generate all the strings in a formal language.  In the right form, a
grammar for a programming language can be used with other software to produce automatically part of a compiler for that language.
 Below is a grammar (in Backus-Naur Form, or
  BNF notation) that describes arithmetic expressions:
<expression> ::=    <real> | <variable> | ( <expression> ) | 
                                       <expression> <operator> <expression> | 
                                       ( <variable>  ==  <expression> ) <real> ::=    <positive-real>  | -  <positive-real> 
<positive-real> ::=    <integer-part>  | <integer-part> . <integer-part>  
<integer-part> ::=    <digit> | <digit> <integer-part> 
<variable> ::=    <letter> 
<digit> ::=    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
<letter> ::=       a | b | c | d | e | f | g | h | i | j | k | l | m | 
                 n | o | p | q | r | s | t | u | v | w | x | y | z 
<operator> ::=    + | - | * | / | %
(b.1)  Some of the following expressions
can be generated by this grammar; others can not.  Indicate which are the
valid expressions.  (The easiest way to do this might be to photocopy the
page, or print it from the on-line version, and circle the valid expressions.)

  
    
  

 (b.2)  Using the grammar, generate four
  more expressions that aren't on the above list.  Each expression should
  involve applying at least ten rules.  For each expression, show its derivation
  tree (with <expression> at the root and terminal symbols—i.e., without
  angle brackets—at the leaves).
 (b.3)  Give three arithmetic expressions
  that are syntactically valid in Python but are not generated by this grammar.
 (b.4)  Modify the grammar to allow multi-letter
  variable names.  This requires changing only one of the existing rules.
(c) Read the problem description for Lab D, the Random Sentence Generator.
(d)  For Labs E and F, we'll use an already existing program that simulates visitors to an amusement park. Read the problem description
  for the amusement park simulator, noting (a) that it's not essential that you memorize every detail and (b) that your task won't be to build this from scratch, but to enhance it in various ways (though for that, you'll need to become familiar with the existing code that we will supply.
  



Written by David G. Kay, Winter 2005, and
modified Winter 2006; regular expression exercise written by David G. Kay,
Winter 2001. BNF grammar exercise written by David G. Kay,
  Spring 1999. Reorganized by David G. Kay, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw1.html
##-----------------TITLE------------------------##
First Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
• UC Irvine

First Homework

Get your work checked and signed off by a classmate, then show it to your TA in lab by Wednesday, January
18 (because Monday is a holiday).

We suggest that you use some of your lab time on Wednesday and Friday, plus the weekend, to work on these exercises independently; then you'll be able to ask any
questions in lab next week.

First, we'd like to give everyone a little
advice about how to deal with new, unfamiliar, complex systems.  Python fits
that category for most of you, particularly because the complexity comes
not only from the language itself but also from the new environment.  But
Python won't be the only new, complex system you'll learn in your
careers.  Learning new systems is a regular activity for computer scientists.
 So it might pay to think for a minute about how to approach the task.

When something doesn't behave as you expect,
it's sometimes hard to know where the problem lies—is your understanding
incomplete, is the text unclear or misleading, is there a bug in your code
or in the environment?  The only way to approach this is slowly and systematically,
starting from a point that you know is correct.  This approach is second
nature to some people, but others may benefit from our pointing it out explicitly.
 Start with code that you know will work—usually code from the text fits
this category, and so does code that we distribute.  If you can't get
that to work, you probably have what we call a procedural error, a problem
in getting things set up, and that's something you need to ask somebody
about.  

Once you have working code, make one small
change at a time, testing it each time to make sure each change still produces
a working program.  We should continue to follow our practice of designing
test cases in advance and keeping them active in our code as we develop
it further.  That way, when something doesn't work, you know
it's due to the most recent change you made.  When you reach major milestones,
continue your development on a fresh copy of your code, so if you run into
serious trouble, you can "roll back" to a stable previous version.

The second point is that when you find an error,
don't just tinker with the code in the hope it will fall into place
correctly.  Try to determine what's really wrong, and make corrections
that have a reasonable chance of success.  When you're learning a new
system, you may need to ask for advice at this stage.  This is slower, more
painstaking, and more demanding of serious reading and thinking than just
throwing code at the compiler over and over, but it's the way you build
up your real understanding.  As always, we recommend working with your classmates
to help each other; even if you can't solve each other's problems,
frustrations are less burdensome when they're shared and both of you can ask a question about it. 

(a)  Run the class-based restaurants
program (RPList.py) that we passed out in class on Tuesday; it's available at http://www.ics.uci.edu/~kay/python/RPList.py. Run it in the IDLE environment, which comes with the downloaded Python software.
When you're learning a new tool, some stumbling blocks are inevitable; just ask your classmates or the TA to help you. But start right away so you can get past the setup hassles quickly.
There's nothing to show the TA for this part.
(b)  Read through the introductory chapter(s) of whichever book you're using.

  (c)  Make a copy of the RPList.py
  file; call it RP2.py.
        Then modify the
program as follows:

Create a new method (function) in the Restaurant class, called toSentence.
 It should return a string from the fields of a Restaurant that looks like this:

McDonald's (394-4345) serves burgers;
order a Big Mac for $3.95.

In the main (controller) part of RP2, add a menu item "S:
 Print restaurant info in sentence form"
 that will print all the restaurants in the new format. (Since the input is case-sensitive, this will be distinguished from the
existing lower-case "s"
menu item for searching.  This is not good user interface design, though,
forcing users to distinguish upper and lower case.  We could have changed
the existing item to "f"
for "find," but we're assuming that would be easy for everyone
so we're not asking you to do it.)


Then add a line to handle the sentence-printing
command.  This in turn will require a new printSentence
method in the Collection class. 

Modify the program to give the user an additional
menu choice: "e:  Erase all
the restaurants from the collection".
 When the user types "e",
the program should remove all the restaurants from the collection (so that,
for example, if the next command were "p",
nothing would be printed).  You can implement this the same simple way you
did it in Scheme.

We understand, and you should understand, that
you do not already know precisely how to make these modifications.  This
is not an entirely mechanical task; it will require that you look things
up, figure things out, and possibly ask for advice.  This is all part of
the learning process, something you'll do over and over in your career
as new technologies emerge.  But of course in this class, you're not
alone; if you've spent five or ten minutes trying to look up or figure
out how to do something without success, you should ask a classmate or us
(in person, on Piazza, or via i42@uci.edu).
  But don't just ask how to do it; try to figure out how to find out the answers to similar questions in the future. [It would also be helpful if, when you finish this part of the assignment,
you could send us a message describing any concepts that you found especially
hard to figure out for yourself.  That's entirely optional, of course.]

As we said earlier, test as you go.  When you're
done, demonstrate your program for a classmate, to sign off, and then show it to the TA and let him look at your code.

(d) Go to codingbat.com/python and do at least two of the warmup problems there.  You don't have to show your work to the TA, but keep this site in mind for help and practice learning to program in Python.
(e)  If you plan to do some of your
  work at home, set up your environment.  Realize, though, that everyone's individual machine is configured a
    little differently, so leave time to deal with the nearly inevitable difficulties.


  Written by David G. Kay with some inspiration
    from Informatics 41 and ICS H21 assignments, Winter 2005 and Winter 2006. Modified by Alex Thornton, Winter 2007, and David G. Kay, Winte r 2008. Modified for Python by David G. Kay, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/honesty.html
##-----------------TITLE------------------------##
Collaboration and Independence
##------------------TEXT------------------------##
Informatics 41 * Fall 2005 * David G. Kay *
UC Irvine

COLLABORATION AND INDEPENDENT
WORK

Part of being a professional is following the
profession's norms of accepted behavior.  As you know, you may not copy
commercial programs from the lab machines to use at home.  Likewise, in
an academic setting you may not turn in someone else's work as your
own.  ("As your own" is the key phrase:  If you use code from
the textbook or from your TA, you should include a comment indicating where
the code came from.  This is perfectly permissible unless an assignment
explicitly restricts what code you may use.  Joint work may be allowed or
required by an assignment, as we are doing with pair programming.  However,
using code from other students or from sources outside of the course is
not permissible in Informatics 41 except when an assignment explicitly allows
or requires it.)

As a general principle, we expect you to do
your own independent work in all parts of this course.  In this course it
is always permissible, even desirable, to talk with your classmates about
the conceptual course material or the requirements of an assignment (though
the instructor or TA will be most reliable for this).  It is always permissible
to get help from anyone about using the programming environment or other
system details, help with minor syntax errors, or suggestions of possible
test cases for your programs (though when an assignment requires it, you
must write your own description of your test plan).  It is never permissible
(except if an assignment explicitly allows or requires working in groups)
to copy another student's solution (whether code, prose, or math). 
A good rule of thumb is this:  Any time you find yourself writing down
(on paper or by electronic means) part of someone else's solution, you
are copying impermissibly.

Turning in another person's work as your
own violates the honesty policies of ICS and UCI (http://www.ics.uci.edu/ugrad/current/policies/index.php).
The School of ICS takes academic honesty very seriously and imposes serious
penalties on students who violate its guidelines. Detected violations could
result in your failing the course, having a letter filed with the school,
and losing a variety of other benefits and privileges.  We do check for
academic dishonesty both manually and automatically.  It is an unfortunate
fact that nearly every quarter, some students in ICS classes are found to
have violated these policies; to protect the privacy of the guilty, violations
are not made public, but sadly, they do occur.  No matter how much pressure
you feel from deadlines or other sources, no matter how inconceivable it
is to you that you might not complete an assignment on time, never
take the shortcut of turning in someone else's code.  Compared to the
consequences of academic dishonesty, one low assignment score is a minor
disadvantage.  If you feel as if you're falling behind or have other
difficulties, see your TA or the instructor; we will help you work around
your trouble.

We do encourage all students to help their
classmates with the course material and the labs, within these limits. 
Helping someone else doesn't hurt your grade; we don't have any
quota on how many As or Bs we can give.  It is even permissible in Informatics
41 to let someone else look over your code to get an idea of how
you organized it.  However, you should not let anyone copy your code,
either on paper or electronically.  In fact, it is wise to keep your code
in your own possession; if you give a copy to someone else, even if it's
just "for reference," that person might be tempted to copy portions
of your code; then you could be accused of academic dishonesty. 

Most importantly, realize that getting "the
answer" is only the last part of each assignment.  Equally important
is the process of getting the solution--including the false starts,
bugs, misconceptions, and mistakes--because the learning occurs in the doing.
 Completely apart from the ethical issues, copying a solution deprives you
of the whole point of the assignment.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw7.html
##-----------------TITLE------------------------##
Seventh Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Seventh Homework
 Get your work checked and signed off by a classmate, then show it to your TA in lab on Monday, February 27. 

Part I
(a) For Labs E and F, we'll use an already existing program that simulates visitors to an amusement park. Read over the problem description for the amusement park simulator, noting (i) that it's not essential that you retain every detail and (ii) that your task won't be to build this from scratch, but to enhance it in various ways (though for that, you'll need to become familiar with the existing code that we will supply).
(b) Using tkinter, write a GUI for a window that could be used to set some initial values in the dice-playing program from Lab A. As we discussed in class, your window should have three labeled text fields: one for the player's stake (the amount of money the player starts with), one for computer's stake, and one for number of test rolls. You should also have three buttons at the bottom: Cancel, Clear, and Submit or OK. When the user clicks Submit/OK, the entered values should be checked (empty values shouldn't be accepted) and transmitted back to the calling program.
To start out, create one label and one text entry field; then create a Submit button that transmits the entered text back to the calling program (which can just print it out). This much should be pretty easy to do by adapting the code we developed in class. Continue to work on the rest of this as time permits, but don't let it interfere with the rest of this homework or the current lab. Only if you're very ambitious or have a lot of spare time should you actually install your GUI in a copy of your Lab A program.
(c) In the California Lottery game SuperLotto, a player would pay $1.00 to pick six different numbers (between 1 and 51) for the next draw. (We're describing the original SuperLotto game, not the current SuperLotto Plus with a separate "Mega" number; the probabilities for SuperLotto Plus are a little more complicated.) Every Wednesday and Saturday, the Lottery draws six numbers. If the player's six numbers match the Lottery's six numbers, the player wins the multi-million-dollar jackpot (or splits it with any other players who also picked the same six winning numbers). If nobody matches the six winning numbers, the jackpot "rolls over" to the next draw; that is, the jackpot amount for the draw with no winners is added to the jackpot for the next draw. If many draws go by with no winners, the jackpot can get very large; it has been over $100,000,000.
Which of the following statements are supported by the principles of probability? Give a yes or no answer to each, with a few words of explanation.
(c.1) If you pay $2.00 for two different sets of numbers, you are twice as likely to win as if you paid $1.00.
(c.2) If you pay $100.00 for 100 different sets of numbers, you are 100 times as likely to win as if you paid $1.00.
(c.3) If you buy one ticket for every drawing for ten years, your chances of winning are roughly a thousand times greater than if you buy just one ticket.
(c.4) If you decide to play the same six numbers in every draw from now on, you should check the winning numbers in the past to be sure your numbers haven't come up already.
(c.5) If you play for a few months and not a single number you choose is included in the winning numbers, you are a little more likely to win the next draw (because you're "due").
(c.6) If you play for a few months and two or three of your numbers are included in the winning numbers of each draw, you are a little more likely to win the next draw (because you're "on a roll").
(c.7) Since 50% of the ticket revenues goes to prizes, in general the expected value of a $1.00 ticket is 50 cents.
(c.8) The expected value of your $1.00 ticket will be higher if you only play when the jackpot is over $20,000,000.
(c.9) Your probability of winning is greater if you pick numbers between 1 and 31 (because many people pick birthdates as their numbers).
(c.10) Your expected value is greater if you pick numbers greater than 31.
(d) [from Patterns of Problem Solving by Moshe F. Rubinstein] In one brief sentence, how is information related to probability? If you know that 5 people out of every 1000 have cancer, and if we have a perfectly accurate test that predicts whether a person has cancer, which of the following gives us more information:
The test indicates that a person has cancer.The test indicates that a person does not have cancer.

(e) Make a small relevance tree (with five to ten "leaves") on any topic you like; then rank two or three alternatives on the tree you've designed. Be sure to state the criteria for the rating scales you use (e.g., 0: over $500; 1: $300-500; . . .) and pay attention to the "deal-breaking" bottom threshold; using a narrow scale, like 0 to 3, will make this easier.
(f) View the video "Sorting Out Sorting". This may be the greatest piece of computer science pedagogical cinematography every made (but even so, it's about sorting algorithms, so don't be expecting Harry Potter or Star Wars). Here are a few points that will enhance your enjoyment and understanding of this video:
We don't expect you to learn the specific sorting algorithms described in the video.  (You may have the opportunity to learn them in a subsequent course.)We might ask you about the video's main concepts. 
Don't fall asleep or let your attention wane during the boring parts—that's when the funniest lines come.
The music is goofy in places; deal with it. The graphics are fuzzy (it's 1980 technology); deal with that, too.
The best part of the video comes after the credits, so don't quit when the credits come up. The whole thing is 28 minutes long, in three parts on YouTube.
Part II
Take the
  opportunity to go back and make some enhancements to the Stats program from the
  third homework, with an eye toward continuing to solidify your Python programming
  skills. Everyone should be able to do this on his or her own, but if you can't finish it by Monday, it's fine to carry this part over to the following week's homework.

(a)  Enhance your Stats program from
the third homework to keep track of word (token) frequencies.  Along with
all the other statistics, it should print out the most frequently occurring
token in its input file, along with the number of times that token occurred.

Which of Python's built-in data structures is right for keeping track of the tokens and the frequency of each? This is something everyone should be able to answer; talk with your classmates to make sure you all agree. Then implement it: Once you've processed the text and counted the frequencies, you can
go through your structure to find the highest value and the associated
token.

  [You may feel uncomfortable returning to a
    program you wrote a few weeks ago and then making modifications to it.
    Parts of it may no longer seem familiar to you, or you may not remember
    why you made the decisions you did when you were working on it.  It's
    important to realize that, in a real-world software development context,
    you might often be in a position where you have to work on something that
    you haven't seen in a while, or where you have to work on something that
    you didn't even build in the first place.  Unlike undergraduate homework
    assignments, which you can often just "submit and forget," real-world
    projects tend to have a long lifespan.  If you're finding it difficult
    to get yourself back into the swing of working on this assignment, take the
    opportunity to consider what you might have done differently four weeks ago
    to make this experience better.  Are there design choices you might have
    made differently?  Documentation that you might have written?  Names
that you might have chosen differently?]

(b)  But what if
you want the 10 most frequent tokens?  You need to sort the frequency list.
But since your frequency list is a Python dictionary [oops—gave it away!], which is stored as a hash table, you can't sort it in place. So you need to turn it into a list of key-value pairs (e.g., with L = list(d.items())), swap the pairs so the value comes first (either N = []; for i in L: N.append( (i[1],i[0]) ) or with a list comprehension, N = [ (v,k) for (k,v) in L]), sort on the value (S = sorted(N, reverse=True)), and then print the first 10.

  (c)  Now, let's keep track of actual
    words, not just tokens.  Modify your Stats program so that it continues
    to gather all the statistics about tokens as before, but also gathers a
parallel set of statistics about "real words."

What's a "real" word?  At http://www.ics.uci.edu/~kay/wordlist.txt
is a file of about 380,000 words.  For our purposes, a word is real if it's
on this list.  (We could think about ways of managing the list, allowing
the user to add new words and delete questionable ones, but let's just
think about it and not do it for now.)  

Implementation hints and advice (think before
reading; that's how you learn):  You'll need to read in the wordlist
and store it; then as you process each token
in the input text file, you'll look it up on the wordlist to determine
whether to include it in the real-word statistics.  There is a fine opportunity
for code reuse here:  If you have a class for a collection of tokens, with
methods that produce various statistics, you can create one instance of
the class for all the tokens in the input and a second instance that will
contain just the real words.
 

  Written by David G. Kay, Winter 2005; modified
Winter 2006 and Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/assignments_index_files/grading_criteria_for_lab.html
##-----------------TITLE------------------------##
Grading Criteria for Lab Assignments
##------------------TEXT------------------------##
Grading Criteria for Lab Assignments

Lab assignments will be graded on the following
qualities, in rough order of priority:

Correctness (Nothing else matters if
the results aren't right.)


Completeness (We expect everyone to
finish the required features of each assignment, but if it comes to a choice,
it's much better, both in class and in real life, to submit something
that works perfectly but doesn't implement every feature than something
that could produce a wrong answer.)

Design (Correctness matters, but it's
not the only thing that matters.  Your design choices should not be awkward,
cumbersome, or inappropriate; your methods should be broken into parts rather
than getting too long.  In early assignments, though, we will specify most
of the design for you.)

Style (Your program should be appropriately
formatted, your class, method, field, and constant names should be meaningful,
and in general you should follow the conventions described at http://www.python.org/dev/peps/pep-0008/.
 We use the term "style" here in the sense of "good style"
and "bad style," not in the sense of Hemingway's style being
different from Joyce's.  Everybody's code should adhere both to
the generally accepted rules of good programming style and to the specific
style guidelines of their organization.)


Documentation (Every class and every
method should include a docstring (a string as the first line of the definition) that provides brief but pithy description of their meaning and
behavior, along the lines of the purpose statements we wrote in Scheme.
 You'll note that the Scheme contracts are now part of the actual code
as annotations in the function header.)



David G. Kay, kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/hw5.html
##-----------------TITLE------------------------##
Fifth Homework
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Fifth Homework
 Get your work checked and signed off by a classmate, then show it to your TA in lab by Monday, February 13.
Part I
Your local radio station wants to computerize its collection of CDs. They have asked you consider these three alternative data structures:
A conventional linked list, in no particular orderAn array ordered by CD title, with an additional field that stores the number of CDs in the collectionA binary search tree, ordered by CD title.
When we ask for O-notations below, give the closest-fit O-notation in terms of n, the number of CDs n the collection, assuming each operation is coded as efficiently as possible in Java.
(a) Suppose the first task is to add all the CD data into the new system. Which of the three data structures would be most efficient for this task alone? As part of your answer, give each alternative's O-notation for adding a CD to the collection. 
  
(b) A DJ spends most of his or her time looking up CDs by title. What is each data structure's O-notation for locating a CD by title? Which data structure do you most want to avoid for this task?

(c) The station manager wants to know at any given moment exactly how many CDs are in the collection. Give each alternative's O-notation for determining the number of CDs and say which alternative is most efficient for this operation. Don't assume the existence of any data fields not specified above.
  
(d) What would be the best data structure to use for implementing this collection, and (in one brief sentence including O-notations where appropriate) why? Assume that task (a) will be done just once and that most of the collection's usage will be split evenly between tasks (b) and (c). You may propose small modifications to the data structures described above if they would help produce a clear winner.
  
Part II
(a) As we did in class on Thursday afternoon, draw the state transition diagram (STD) for a finite-state automaton (FSA) that accepts the language of dollars-and-cents amounts with comas in the right places. Accepted strings include:
$1.00     $1,234.56      $1,234,567.89       $1,234,567,890.00
$13.27    $12,345.00     $12,345,678.90      $0.00
$125.50   $123,456.78    $123,456,789.00     $0.25
Rejected strings include:
$1        $5.000         $123,45.00          $1,234,00      $00.00
$25       $17.5          $1,234,5.67         $1,234,.00     $03.50
$234.     $1234.56       $1234,567.00        $,123,456.00   $0,123.45

(b) Below is some Python code that implements
  a kind of finite-state automaton.
SECRET1 = 35
SECRET2 = 127
SECRET3 = 33

stateList = [ "Init", "GotFirst", "GotSecond", "Success" ]

count = 1

state = "Init"

while state != "Success" and count 


(b.1)  Draw the state transition diagram
that represents the FSA this program implements.  The input tokens here
are whole integers, not individual characters.

(b.2)  Describe in one brief English
sentence what this FSA does.  Try to think of a simple, real-world, non-computer-related
object that this FSA models.

Intermezzo:  State transition diagrams
are one way to describe FSAs.  Another way (which is easier to represent
in a computer) is a transition table.  A transition table has a row
for each state and a column for each input (or each disjoint category of
inputs); the value at each position in the table tells you what state to
go to when you read a given input in a given state.  Below is a transition
table for the program above:
 
Secret1
Secret2
Secret3
other
Init
GotFirst
Init
Init
Init
GotFirst
Init
GotSecond
Init
Init
GotSecond
Init
Init
Success
Init
Success
 
 
 


This table says just what the program and the
state transition diagram say:  If you're in Init and you read Secret1,
you go into state GotFirst; if you're in state Init and you read anything
else, you stay in Init.  If you're in state GotFirst and you read Secret2,
you go into state GotSecond; if you read anything else in state GotFirst
you go to state Init.  And finally, if you're in state GotSecond and
you read Secret3, you go to state Success; otherwise, you go to Init.  In
state Success the machine stops, so you don't make any transitions out
of that state; it's the accept state.

As we noted, transition tables make FSAs easy
to represent in a computer.  In fact, we can write a very simple but very
general FSA simulator according to the following pseudocode:

initialize TransitionTable, ListOfAcceptStates 
state ← initial state

while there are more tokens:
    get a token;
    state ← TransitionTable[state][token];

if state in ListOfAcceptStates:
    accept
else:
    reject


Because this code is so simple, it's the
preferred way to implement FSAs in programs.  The only tricky part is finding
a data type that will represent the range of tokens and will at the same
time be acceptable as an array index in your programming language.  Scheme,
for example, handles symbolic names very easily, and so does Python, allowing any string to be an index into a dictionary.

(c)  Think about the task of extracting
words from a stream of text.  In Python, you can use split() to divide lines around whitespace (or other separators), but sometimes you need to specify "words" idiosyncratically.
 You can do this kind of input-parsing task much more easily using state
machines than by writing code directly.

(c.1)  Draw a state transition diagram
that accepts words defined as follows:  a sequence of non-separator characters
whose end is marked by a separator.  Separators are symbols that separate
English words—space, comma, semicolon, colon, and so on.  Note that the
hyphen (-), the apostrophe ('), and the percent sign (%) are not separators:
 treat "mother-in-law," "don't," and "23%"
as single words.   The end of the line is a separator, unless the last word
of the line ends with a hyphen.  That way, if a word like mother-in-law
is hyphenated across two lines, it will still count as one word.  (We will
assume that in our input, only words that are always hyphenated will be
hyphenated at the end of a line; that is, you should not expect normally-unhyphenated
words to be broken across two lines.)  Watch for multiple separators in
a row—for example, a comma followed by a space is two separators, but there
is no word between them.

You could code up this FSA into a method called
getNextWord, and call it to parse a stream of input.
 Coding this isn't a required part of this assignment, though.

(c.2)  Write a transition table for
the state machine you drew in part (c.1).

(d) One of Scheme's attractions
is that its syntax is very simple.  Unlike Python, which has quite a few different
statements, each with its own grammar and punctuation rules, every program
or expression in Scheme is just a list of words surrounded by parentheses.
 This provides a rich variety of expression because a "word" can
be (a) any sequence of characters delimited (separated from other words)
by white space, or (b) a parenthesized list of words nested within the outside
list.  The following are all valid Scheme expressions (each is one line
long except the last, which starts with the word
define):
(Fee fie fo fum)
(+ 3.14159 1776 -45 quantity)
(equal? (+ 2 2) (+ 3 1))
(define square
  (lambda (x)
    (* x x)))

Novice Scheme programmers sometimes worry about
keeping all the parentheses balanced, but most Scheme systems have "syntax-based"
text editors that automatically keep track of the parentheses, so that any
time you type a right parenthesis it automatically flashes the left parenthesis
that matches it.  That way you can see effortlessly what matches what. 
(This idea has found its way into some program editors for Python and other
languages, where it's also useful.)

Suppose you decide to write a syntax-based
editor for Scheme, and as your first task you want to write some code that
checks whether the parentheses are balanced in a Scheme expression.  Astutely,
you start by designing an FSA.  To make it truly a finite-state machine,
we have to put an upper limit on the depth to which parentheses can be nested;
the example below shows the FSA for an upper limit of three-deep nesting.
(In the diagram, "other" means an input symbol other than an open
or close parenthesis.)



(d.1) After scanning the entire Scheme
expression, in what state should your machine be if the parentheses were
correctly balanced?

(d.2) This FSA works fine in theory,
but for a realistic nesting depth of a few dozen, the diagram would be tediously
repetitious.  So you decide to simplify things and encapsulate the state
information in a simple integer counter.  Then you can have a single state
on the page, and all the action happens in the transition steps, where you
increment the counter for each left parenthesis and decrement it for each
right parenthesis.  [Having a variable may appear to violate the definition
of a finite-state machine, all of whose information is encapsulated in a
finite number of states.  But since integer variables on computers (as opposed
to integers in mathematics) always have a finite upper bound, we're
technically safe.  If our machine used a stack to keep track of the unbalanced
parentheses (which is what our integer counter is modeling), it would no
longer be an FSA—it would be a PDA (push-down automaton), which can accept
a broader class of languages.]  

The modified (augmented) machine appears below.






In the augmented machine, being in the stop
state is not enough to know that the Scheme program has balanced parentheses;
the value of the counter must be considered as well. What should the counter's
value be if the machine accepts the Scheme source (that is, if the parentheses
are correctly balanced)? What must have happened for the machine to end
up in the error state?

(d.3)  Things are rarely quite as simple
as they first seem.  Comments in Scheme programs start with a semicolon
and extend to the end of the line.  Thus, the following is a valid Scheme
expression; everything to the right of the semicolon on each line is a comment.
 Of course the contents of comments are ignored when checking for balanced
parentheses.
  (define print-it        ; In this routine we
    (lambda (p)           ; a) accept a parameter,
      (display p)         ; b) display it, and
      (newline)))         ; c) hit carriage return

Draw a new FSA-like machine, similar to the
one above, to account for comments correctly; you will have to add more
states.

(d.4)  And there's one more wrinkle.
 Literal character strings in Scheme are enclosed in double-quote marks.
 As in any programming language, the contents of literal strings are ignored when analyzing
the syntax of the program.  The following three expressions are valid in
Scheme.
(display "Oh; really?") 
(list  "a)"  "b)"  "c)" ) 
(let ((delims ".,;:)(("))) ; This has an extra '(' in quotes

Draw a new FSA-like machine to handle both
strings and comments correctly.

(d.5)  Write a transition table for
the state machine you designed in part (e.4).  Note that some of
the transitions in some conditions will also increment or decrement the
count of parentheses.

(d.6)  Test your FSA from part (e.4)
 thoroughly on paper—devise a thorough test plan and work each test
through your FSA.

(e)  (Optional)  Available on the web
is a program called JFLAP, written at Duke University
(http://www.jflap.org/).
 You can download this Java application and use it to build and test your
own simple FSAs (as well as do other formal-language activities).  Other
state machine simulators are available on the web; you can find some of
them by using search strings like "state machine applet" or "FSA
animation."


Written by David G. Kay, Winter 2005. 

FSA exercises written by David G. Kay, Winter
1991 (based on materials from 1990 and earlier).  Revised by Joe Hummel,
Norman Jacobson, Theresa Millette, Brian Pitterle, Alex Thornton, Rasheed
Baqai, Li-Wei (Gary) Chen, and David G. Kay, 1992-1999.
Modified by David G. Kay to reflect Python, Winter 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/labD.html
##-----------------TITLE------------------------##
Lab Assignment D
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
• UC Irvine
 Lab Assignment D
This assignment is due at the end of lab on
Monday, February 27. This is a pair programming assignment; do it with someone you haven't worked with yet this quarter and make sure Joel knows whom you've paired with.
The problem: The assignment, originally written at Stanford, involves building a program that reads a grammar and generates a specified number of strings (or "sentences") from that grammar.  Before you work on your own program, you can get a broader idea of what's possible by trying out the applet at  http://www-cs-faculty.stanford.edu/~zelenski/rsg.  The "Extension Request" grammar (the default) is pretty funny; also try out "CS assignment," "Programming bug,", and "Math expression," along with any others that strike your fancy.  Then follow the "Directory of the collected grammar files" link at the bottom of the page.  For a general idea of the kind of input your program will take, pick some of these grammars to look at; "Math expression" is the easiest to follow. (There are differences in format between the grammars shown there and what's shown here in our assignment; theirs should be readable, but use our format for this assignment.)
Entertainment isn't the only application of this program.  Sometimes we need to test our software with a lot of data, more than we can conveniently generate by hand.  With a program like this, we only need to create a grammar describing our test data and we can produce as much of it as we want.
Background on grammars:
A grammar is a collection of substitution rules that describe a set of strings or sentences.  Each sentence is a sequence of terminal symbols or just terminals.  Different kinds of sentence fragments are represented by nonterminal symbols or variables, with a rule for each variable specifying how it can be replaced by one of a set of possible sequences of variables and terminals.  One of the variables is designated as the start variable, which means that it represents an entire sentence.

An example of a grammar follows, to supplement the ones we covered in class.  The start variable is A.  The variables are A and B, while the terminals are 0, 1, and #.

A → 0A1A | BB → #

This grammar says that the variable A can be replaced either with the sequence 0A1A or the variable B, while the variable B can only be replaced with #.

From a conceptual point of view, a grammar can be used to generate strings of terminals in the following manner.  (We should point out that this isn't precisely how your program will generate its strings, but your program will do something that has an equivalent effect.)

Begin with the start variable.So long as there are still variables that have not been substituted, pick a variable and a rule with that variable on the left-hand side.  Replace the variable with the right-hand side of the rule that you chose.

A sequence of substitutions leading from the start variable to a string of terminals is called a derivation.  When the leftmost variable is always replaced at each step, the derivation is called a leftmost derivation.  The string 00#1#1# can be generated by the grammar above.  The following leftmost derivation — which begins with the start variable, with one substitution made at each step — proves that it can be done; the new part of each step is shown underlined.

A ⇒ 0A1A ⇒ 00A1A1A ⇒ 00B1A1A ⇒ 00#1A1A ⇒ 00#1B1A ⇒ 00#1#1A ⇒ 00#1#1B ⇒ 00#1#1#

Since 00#1#1# can be generated by the grammar, we would say that the string 00#1#1# is in the language of the grammar.  In other words, the language of a grammar is the set of all strings that can be generated from it.  (Many grammars, including this one, have an infinite number of strings in their languages.  This grammar generates an infinite number of strings since the rule A → 0A1A can be used an arbitrary number of times in a derivation.)

In our random sentence generator, a grammar will describe a set of sentences (which may indeed be infinite).  Each sentence you generate will be a sequence of characters, with the characters being the terminals in the grammar.  The variables in the grammar will describe sentence fragments, with the start variable describing an entire sentence.

The program:
You will write a Python program that prompts the user for three things: the name of a file containing a grammar, the name of the start symbol for that grammar, and a number of sentences to generate with that grammar.

Grammar file format:
The grammar file will contain a series of grammar rules in the format described below.  Our simple cat-and-dog example from class is available in this format; so is a grammar for Facile programs.
Each rule starts with a left curly brace ("{") on its own line and ends with a right curly brace ("}") on its own line.  Other lines in the file, outside of the rules, are ignored by your program; they can serve as annotations or comments in the rule file. 

After the opening brace, the first line of the rule is the rule's left-hand side.  Remember that the left-hand side of a rule is always a single nonterminal (variable).  In our grammar files, all nonterminal/variable names are enclosed in square brackets ("[" and "]"); you should remove these before you store the variable names in your program.  Variable names will not contain whitespace (spaces, tabs, or newlines).

Each of the remaining lines in the rule (before the closing brace) is an alternative right-hand side (i.e., a different way of rewriting the left-hand side).  Each righthand side consists of a sequence of variables (whose names are enclosed in brackets, of course) and strings of terminal symbols (that may not contain whitespace, though you may use the Python conventions of \t for tab, \n for newline, and \x20 (hexadecimal 20) for space). (If you're wondering how to have a grammar for a language that includes brackets in its terminal alphabet, again you can use their hexadecimal escape sequences,  \x5C for "[" and \x5D for "]".) 

  You may assume that the grammar files will always be correctly formatted; you do not have to anticipate or correct any errors in the grammar file.

Stage I: 
First, make sure you can parse the input file correctly.  As we've seen all quarter, an essential part of many programs is converting data from some external form into the internal form we've chosen to use in our program as the model.  Parsing text files can be painstaking and tedious (although Python provides good tools to help), and it's not usually very interesting.  But until you're comfortable doing it, you won't be able to use Python to write real programs.


For this stage, just produce output that convinces you that your program is recognizing the tokens in the input file correctly; don't try to store the data in your program's ultimate data structures yet.  For this (partial) grammar file:
Cat-and-Dog Grammar
{
[S]
[NP] [SPACE] [VP]
}
{
[Art]
a
the
}
your output might look like this:
Rule
   variable --S--
   RightSide
      variable --NP--      
      variable --SPACE--      
      variable --VP--
Rule
   variable --Art--
   RightSide
      terminal --a--
   RightSide
      terminal --the--     
You don't have to match the precise appearance of this example, particularly not the indentation (though you may do it that way if you like).  You just want to identify each token and what its function is; the dashes are there to make sure you don't have extra whitespace in the wrong places.

Ultimately, you'll remove or comment out this code, since this output isn't part of the program specification.  [Note, though, that writing this kind of testing code is a valuable technique; it helps you be sure your parsing works independent of other parts of your program.  Don't be inhibited from writing code that's useful during development just because it won't make it into the final product.]

Stage II: Implement these data structures in
your program (possibly in classes, possibly in namedtuples, possibly
just in Python code):
Grammar: The name of the start symbol (initial variable) plus a collection of rules.
  Rule: The name of a nonterminal symbol (variable) and a collection of right-hand sides (alternatives for rewriting the variable) from which you'll choose one alternative at random each time the start symbol occurs in your derivation.
  (Hint: You might just implement this as a key-value pair.)Right-hand side: A sequence of terminal and nonterminal symbols; each right-hand side of a rule is one alternative for rewriting a nonterminal symbol.
  Symbol: Either nonterminal (which must be rewritten with one of the right-hand sides of that symbol's rules) or terminal (which is a literal character or string to appear in the final sentence).
  
Then fill these data structures with the grammar data from the input.

Stage III:
Handle the derivations of the specified number of sentences.
Here's some advice about the sentence generation algorithm.  Each of the data structures above has its own way of processing its part of the derivation.  (Probably the easiest way to code this is with one generate function that can be called with any of the data structures above; it would use an if-ladder to determine what data structure it's dealing with and handle that structure as described below.)
To generate a sentence from a grammar, look up the rule corresponding to its start variable and apply it (i.e., call generate with it).  Ultimately it should return a string (sentence) of terminals generated by the grammar, but each part is handled by a separate call to generate.
  To generate from a rule, choose one of its right-hand sides at random and call generate on it.
  To generate from a right-hand side, go through each symbol from left to right, whether terminal or nonterminal, and call generate on each.
  To generate from a nonterminal, look up the corresponding rule in the grammar and call generate on it, returning the result as a sentence fragment.
  To generate from a terminal, simply return the terminal's value as a sentence fragment.
  

You'll find Python's
random module useful; import it so you can use choice() and possibly other functions.

When you're done:
Submit all your Python source code in one .py file via Checkmate.
Also submit at least two additional grammar files of your own.
  Each pair should submit just one solution with both partners' names clearly indicated.
  Along the lines of Alex's Facile grammar, make up a grammar for (a tiny subset of) Scheme or Python and see what kinds of programs it generates.  You can see full grammars for Scheme and Python; the links are on the course reference page.  You don't have to turn this in.
The usual grading criteria for lab assignments apply.Fill out a partner evaluation at EEE.

    
  Modified by David G. Kay, Winter 2012.
 Originally written by Alex Thornton (with heavy influence from "The Worst Joke Ever," by Alex Thornton), Winter 2007.
Original concept by Mike Cleron of Stanford University; modified and adapted by Allison Hansen, Julie Zelinski, and others.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i42/hw/labC.html
##-----------------TITLE------------------------##
Lab Assignment C
##------------------TEXT------------------------##
Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Lab Assignment C
This assignment is due at the end of lab on
Friday, February 17. This is a pair programming assignment; do it with someone you haven't worked with yet this quarter and make sure Joel knows whom you've paired with.
The problem: The assignment, originally written by Alex Thornton, involves building an interpreter for a simple programing language like Basic; Alex calls his language Facile. This may seem a little infrastructural for us, but actually, it's not: Sometimes the right way to solve a problem is to make up a special-purpose language that makes it easy to express the various aspects of the problem (and then build an interpreter to process that language). Even the restaurants program is an anemic example of this; we have a "restaurant collection manipulation language" that consists of half a dozen single-letter commands. In a couple of weeks we'll talk a little more about the way computer scientists look at languages.
You have some advantages over the ICS 22 students who are doing this problem:  You're doing it with pair programming, rather than solo;  you've spent a week (last quarter) thinking about machine-level programming, so the concepts in this assignment will be familiar; and you're coding in Python, which is higher-level than Java (meaning that it does more of the work for you).
 Alex's introduction: When I was a kid, one of my teachers introduced me to a computer for the first time — a Radio Shack TRS-80 Model I (anybody remember it?). Immediately, I was interested. I played little math games and messed around with other "state of the art" educational tools from the early 1980's; as you might imagine, the state of the art wasn't much then, but it was fun.
Then one day, my teacher asked me if I wanted to learn how to write my own programs. I thought it sounded like a great idea. So I picked up a book about a language called BASIC — some of you may have played with it before — and typed in a short program that asked a user for a number of hits and a number of at-bats and printed out a batting average. (Believe it or not, my mother still has a printout of it, including the comment at the top: "My first program, by Alex Thornton." Yes, I commented my first program.) I ran the program, tried it out, and I was mesmerized; the computer did exactly what I asked it to, exactly the way I asked it to. And my lifelong obsession with what I would later know to be computer science began.
BASIC was a good teaching tool for its day: versatile and easy-to-learn. For this project, we've designed a simpler version of BASIC called Facile, which supports only eleven kinds of statements. You'll be building a Facile interpreter, to read and execute Facile programs.
The Facile language: We'll discuss the requirements for your interpreter later in the write-up. First, let's talk about the Facile language. A Facile program is a sequence of statements, one per line. Here's an example of a Facile program:
LET A 3
PRINT A
GOSUB 7
PRINT A
PRINT B
GOTO 10
LET A 4
LET B 6
RETURN
PRINT A
END
.
Each line contains exactly one statement (i.e., there may be no blank lines). Facile assigns a line number to each of the lines, where the first line of the program is numbered 1, the second line is numbered 2, and so on. The last line of the program is a period (.) on a line by itself. Execution of a Facile program always begins at line number 1. There is no predefined limit on the number of lines in a Facile program.
Variables: A Facile program has variables, each named by a sequence of characters that does not include whitespace. Each variable is capable of storing an integer value. The value of a variable may be assigned or changed with a LET statement. A LET statement changes the value of one variable. Some examples are:
LET A 3 — changes the value of the variable A to 3LET Z –9 — changes the value of the variable Z to –9
You can print the value of a variable to the console by using a PRINT statement. A PRINT statement prints the value of one variable, followed by a newline. So, consider the following short Facile program:
LET A 3
LET Z -9
PRINT A
PRINT Z
.
Its output would be:
3
-9

Execution of a Facile program: A Facile program is executed one line at a time, beginning at line number 1. Ordinarily, execution proceeds forward, so that line 1 will execute first, followed by line 2, followed by line 3, and so on. Execution continues until either an END statement is reached, or until it reaches the "." line that appears at the end of the program.
As in any programming language, it is possible in Facile to write programs that execute out of sequence, though the mechanisms are a bit more primitive than they are in a language like Python. A GOTO statement causes execution to "jump" immediately to the given number. For example, the statement GOTO 4 jumps execution to line 4. Here's an example Facile program that uses GOTO:
LET A 1
GOTO 4
LET A 2
PRINT A
.

In this program, line 1 is executed first, setting the variable A's value to 1. Then the GOTO statement will immediately jump execution of the program to line 4, skipping the second LET. Line 4 prints the value of A, which is 1. So, the output of the program is 1.
A GOTO statement may jump either forward or backward, meaning that the following program is a legal Facile program. See if you can figure out what its output would be.
LET Z 5
LET C 0
GOTO 8
LET C 4
PRINT C
PRINT Z
END
PRINT C
PRINT Z
GOTO 4
.
GOTO statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the "." that completes the program. If such a GOTO statement is encountered while a program is executed, the interpreter terminates with an error message.
Mathematical operations: Facile provides the typical mathematical operations that can be performed on variables: addition, subtraction, multiplication, and division. Each operation is provided as a statement that changes the value of the given variable. Here are examples of their use:
LET A 4
ADD A 3
PRINT A
LET B 5
SUB B 3
PRINT B
LET C 6
MULT C 7
PRINT C
LET D 7
DIV D 2
PRINT D
.

In the example above, the ADD statement adds 3 to the value of A, storing the result in A. So, printing A will display 7 on the console. The output of the program above is:
7
2
42
3

It is important to note that, since all variables in Facile are integers, the DIV statement implements integer division, meaning that its result is the floor (or integral part) of the quotient. So, in the example above, 7 / 2 = 3. [Note: Python has an integer division operator.] The second operand may not be zero, meaning that the statement DIV A 0 is illegal. When a Facile program encounters a division by zero, it immediately terminates with an error message.
The IF statement: Facile provides an IF statement, which acts like a conditional GOTO. It compares the value of some variable to some value, and jumps execution of the program to the given line number if the comparison is true. The comparison can use one of the typical relational operators: <, <=, >, >=, = (equal to), or <> (not equal to).
LET A 3
LET B 5
IF A < 4 THEN 5
PRINT A
PRINT B
.

In the program above, the variables A and B are given the values 3 and 5, respectively. An IF statement then compares A to 4. Since A is less than 4, execution jumps to line 5. B's value is printed out. So this program's output is simply a line containing 5.
The IF statement in Facile is substantially less flexible than its Python equivalent. In an IF statement in Facile, the token IF must be followed by exactly five tokens. The first must be the name of a variable. The second must be one of the relational operators (<, <=, >, >=, =, or <>). The third must be an integer constant. The fourth must be the word THEN. The fifth must be a line number. They behave in the way you might expect. For example: IF C <> 0 THEN 4 means "jump to line 4 if C is not equal to 0".
Like GOTO statements, IF statements are not permitted to jump beyond the boundaries of the program. An attempt to do so should cause the Facile program to terminate with an error message.
Subroutines: There are no methods or functions in Facile, but there is a simplified mechanism called a subroutine. A subroutine is a chunk of Facile code that can be "called" by issuing a GOSUB statement. GOSUB is much like GOTO; it causes execution to jump to a particular line. However, GOSUB also causes the Facile program to remember where it jumped from. Subsequently, when a RETURN statement is reached, execution continues at the line following the GOSUB statement that caused the jump. Here's an example:
LET A 1
GOSUB 6
PRINT A
PRINT B
END
LET A 2
LET B 3
RETURN
.
In the program above, line 1 is executed first, setting the value of A to 1. Next, a GOSUB statement is reached. Execution jumps to line 6, but Facile also remembers that when a RETURN statement is reached, execution should jump back to the line following the GOSUB — in this case, line 3. Line 6 is executed next, setting A to 2, then line 7 sets B to 3. Now we reach a RETURN statement, causing execution to jump back to the line number that we're remembering — line 3. Line 3 prints the value of A (which is 2), then line 4 prints the value of B (which is 3). Next, we reach line 5, which is an END statement, so the program ends.
Subroutines can be used very similarly to Python functions, except they do not take parameters or return a value. Consider the following example, which contains a subroutine that prints the values of A, B, and C each time it's called:
LET A 3
LET B 0
LET C 0
GOSUB 12
LET B 4
GOSUB 12
LET C 5
GOSUB 12
LET A 1
GOSUB 12
END
PRINT A
PRINT B
PRINT C
RETURN
.
Subroutines may call other subroutines, meaning that two or more GOSUB's may be reached before a RETURN is reached. The rules for this are very similar to methods that call other methods in Python; for each GOSUB that is reached, Facile will remember the line to which it should return. When a RETURN is reached, execution will move to the line remembered from the most recent GOSUB. Here's an example:
LET A 1
GOSUB 7
PRINT A
END
LET A 3
RETURN
PRINT A
LET A 2
GOSUB 5
PRINT A
RETURN
.
In this example, execution begins at line 1 by setting the variable A to 1. Next, we jump to line 7 with a GOSUB, remembering that we should jump back to line 3 when we encounter a RETURN. Line 7 prints A (which is 1), then line 8 changes A's value to 2. Now we've reached line 9, which is another GOSUB statement. At this point, execution will jump to line 5, but we'll also need to remember to jump back to the line following this GOSUB — line 10 — when we reach a RETURN. But we also need to remember the line from the previous GOSUB — line 3.
Line 5 sets A to 3, then we encounter our first RETURN statement. We're remembering two lines — line 3 and line 10. But line 10 is the most recently remembered line, so execution jumps to line 10. Line 10 prints A (which is 3). Now we encounter another RETURN statement on line 11. We're remembering the line 3 from the first GOSUB. So execution jumps to line 3, printing A (which is still 3), then ending the program on line 4.
So, the output of this program is:
1
3
3
Like GOTO statements, GOSUB statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the "." that completes the program. If such a GOSUB statement is encountered while a program is executed, the interpreter terminates with an error message.
It is also an error for a RETURN statement to be encountered when there has been no previous GOSUB. The Facile program will immediately terminate and print an error message in this case, as well.
Whitespace: While Facile programs may not have blank lines in them, the amount and placement of blank space between the words on each line is considered irrelevant. So, the following is a legal Facile program:
    LET    Zebra  5
 GOTO   7
LET Chimpanzee   4
 PRINT Chimpanzee
PRINT         Zebra
  END
PRINT Chimpanzee
        PRINT  Zebra
    GOTO      3
.

Experimenting with Facile: An interpreter is a program that is capable of executing a program written in some programming language. To give you the ability to experiment, we've implemented a Facile interpreter for Windows already. (For those of you who don't ordinarily use Windows, remember that our machines in the ICS labs run Windows, so you'll have ample opportunity to experiment with Facile. You might even want to "pair program" while you experiment.) This Zip archive contains the interpreter (Facile.exe) and most of the Facile programs that appear in this write-up, along with a few additional ones that demonstrate fatal errors (division by zero, a RETURN statement without a corresponding GOSUB, and a GOTO to a non-existent line). Feel free to write your own, as well. Unzip the archive into one folder, then double-click the program. From there, it's fairly self-explanatory. A word of warning about this interpreter: we wrote it without making a serious attempt at handling syntax problems, so it assumes that the input file is a legal Facile program. If you attempt to run an input file that is not legal Facile, you may see the message "ERROR IN PROGRAM", but it's also possible that my interpreter may simply crash.  Moreover, this interpreter's version of Facile has a few subtle differences from the version described here:  In particular, it recognizes only the 26 variables A through Z, and it initializes all of them to 0 automatically.
We're providing this interpreter so you can experiment with the language as you have questions about it. Once you're comfortable with it, it'll be your turn to implement a Facile interpreter. (Bear in mind that this Facile interpreter implements much of the optional work described in the "Additional challenges" section below, but it will behave correctly on the samples given in this write-up.)
Your program: For this project, you'll be building your own Facile interpreter, which is a program that is capable of executing a Facile program, generating the correct output according to the specification in the previous sections. Since you're already familiar with Python, you'll write your Facile interpreter in Python. (Since Python runs on many operating systems, that means, once completed, you'll be able to use your interpreter to run Facile programs on Windows, Mac OS X, Linux, Unix, and several other platforms.)
The Facile interpreter that we've provided runs in a (very simple) graphical user interface. Your program, on the other hand, should read one Facile program from an input file, then execute it, writing any output from the Facile program to the console (i.e., using print statements).
As a starting point, we will discuss the organization of this program in class.  Of course you may use the code we develop as a basis for your complete solution.
How an interpreter works: A typical interpreter will execute a program one statement at a time, keeping track of what we might call the program state as it goes along. In the case of a Python interpreter, you might imagine that there would be quite a bit of work to be done. The interpreter would need to keep track of all of the objects — creating new ones and garbage-collecting old ones as necessary — as well as maintain the "call stack," along with various other tasks required by Python programs. Implementing an efficient, complete Python interpreter is a project that would easily take many programmer-years.
A Facile interpreter is a much simpler program, since Facile is a much simpler programming language. Your interpreter will need to execute a Facile program one statement at a time, updating the program state as necessary, until either an END statement or the "." is reached. (The "." can simply be treated as an END statement, if you'd like.) The program state consists of the following information:
what line of code is currently executing (you might call this the program counter, which you may remember from the Deus X machine)the integer value in each of the variablesthe call stack; that is, the line numbers remembered because of any GOSUB statements (Since each RETURN jumps back to the line following the most recent GOSUB, it makes sense to store these line numbers in a stack.)
Each statement has a different effect on the program state. For example, a LET statement will cause the value of one of the variables to change, then cause the program counter to be incremented (since, after a LET statement, execution continues on to the next statement), a GOTO statement will cause the program counter to be changed to the line number specified in the statement, and so on.
Reading the program and representing it in memory: Your program will need to begin by reading the Facile program from an input file and representing it in memory. There are a number of ways to solve this problem. One way is to read the program into memory as a collection of strings, with each of the strings containing one line of the input program. Every time a particular line is executed, it would need to be parsed (to see what kind of statement it was), then executed. As you might imagine, this is a terribly inefficient way to implement an interpreter, since the same statement may need to be parsed over and over again. You are not permitted to use this approach for your interpreter.
A better approach — one that we're requiring you to use instead — is to read the input program once, parse it once, and represent it as a list of statement objects. The object-oriented programming concept of inheritance  provides a very natural design approach for this problem.
A base class called Statement contains any functionality common to all statements. The only common functionality for all statements is that they can be executed, though what happens when they are executed is different depending on the type of the statement. We can represent this in the Statement class with a method called execute(). A Statement object might also contain a list containing whatever arguments appeared after the keyword.For each kind of statement (e.g., LET, PRINT, etc.), a subclass of Statement can be designed (e.g., LetStatement, PrintStatement). Each subclass will inherit the field listing the arguments — the information needed to execute the statement. In the case of a LET statement, for example, the necessary information is the name of the variable and the value to assign into it. Also needed in each of these Statement subclasses is an actual implementation of the execute() method. 
You'll need code that can parse the input file and create the appropriate sequence of Statement objects, reading the input file and returning a list of Statement objects (actually, Statement subclass objects) containing all the statements in the program. Note that line numbers in Facile start at 1, not 0, so we suggest storing None as the first element in the list, then storing the actual Statement objects with indices beginning at 1. (An alternative, storing the statements beginning at index 0, will require the error-prone practice of adding or subtracting one when converting between line numbers and list indices, which can easily lead to chaos.)
You may assume that the input file contains a syntactically legal Facile program. It's acceptable for your program to either print an error message, ignore lines that aren't understood, or even crash in the event that it's given an input file that is not legal Facile. (It's a good thing Python interpreters don't behave this way.) We will only test your interpreter with syntactically legal Facile programs, though the programs may have run-time errors in them. As was discussed above, there are three kinds of run-time errors: division by zero, a RETURN statement without a corresponding GOSUB, and a GOTO/GOSUB/IF..THEN to a line outside of the boundaries of the program. Your interpreter will need to behave reasonably in these cases, by printing a meaningful error message and terminating gracefully.
Designing your interpreter: As the size of a program increases, one of the most difficult obstacles that programmers face is the need to "separate their concerns." One of the primary strategies that programmers use to separate their concerns is to break a large program into a set of smaller pieces. The obvious mechanism for breaking up a program in an object-oriented language is the use of classes.
Separating concerns is something novice programmers need to learn. The temptation is always to try to think about the complete picture, since this strategy works well for the short programs that you write when you're first starting out. As programs become larger, confusion naturally sets in, as the complete picture can be difficult to keep in your brain all at once. Even moderately small programs can be built out of many classes and encompass a great deal of complexity. This project will encourage you to begin thinking about your programs the same way, which will give you the ability to write much larger programs than you could before.
The main tasks that your program must perform are:
Read the contents of the input file, parsing each line, and storing an object into memory that represents the Facile statement appearing on that line.Create a representation of the initial program state, then begin executing the program one statement at a time. The execution of each statement will cause the program state to be changed, and may also cause output to appear on the console.Continue executing the program until an END statement or the "." is reached.
We suggest breaking up your program in the following way:
Main program. This will oversee the execution of the interpreter on one input file. Interpretation requires following the sequence of steps above: parsing the input file, creating an initial program state, then executing one statement at a time until the program ends. Most of the actual work is delegated to other classes, with Interpreter acting as a manager.Parser. This parses the input file and returns a list of objects representing statements.CallStack. A generic stack (which you can implement easily with a list). You'll use this to store the return points from GOSUB statements. ProgramState. This represents the state of an executing Facile program. It contains the program counter, the values in each of the variables, and the call stack.Statement. This class represents a Facile statement. Subclasses such as LetStatement, PrintStatement, etc., implement the actual statements.
It's a good idea to build as many of the underlying pieces as you need to implement a couple of the statements, say LET and PRINT, first. Afterwards, add new kinds of statements one or two at a time, making any changes required in the underlying pieces.
Facile quick reference: Here is a list of all of the Facile statements that should be supported by your interpreter, with a brief description of the effect of each. In each of the statements below, var may be the name of a variable, int may be an integer constant (e.g., 1, –3, 15), and linenum may be a line number (1 or greater).

        Statement
      
        Description
      
        LET var int
      
        Changes the value of the variable var to the integer int.
      
        PRINT var
      
        Prints the value of the variable var to the console.
      
        ADD var int
      
        Adds int to the value of the variable var.
      
        SUB var int
      
        Subtracts int from the value of the variable var.
      
        MULT var int
      
        Multiplies the value of the variable var by the integer int.
      
        DIV var int
      
        Divides the value of the variable var by the integer int.
      
        GOTO linenum
      
        Jumps execution of the program to the line numbered linenum.
      
        IF var op int THEN linenum
      
        Compares the value of the variable var to the integer int using the relational operator op (=, <>, <, <=, >, >=). If the comparison is true, jumps execution of the program to the line numbered linenum. If not, this statement has no effect.
      
        GOSUB linenum
      
        Temporarily jumps to the line numbered linenum. A RETURN statement will cause execution to jump back to the line following the GOSUB.
      
        RETURN
      
        Jumps execution of the program back to the line following the most recently-executed GOSUB statement.
      
        END
      
        Ends the program immediately.
      
        .
      
        Special marker that indicates the end of the program text. Behaves as an END statement when encountered.
      
Additional challenges: Your Facile interpreter may implement some additional features; these are not required.Here are two additional statements:

        Statement
      
        Description
      
        INC var
      
        Adds 1 to the value of the variable var. For example, the statement INC A adds one to the value of A.
      
        DEC var
      
        Subtracts 1 from the value of the variable var. For example, the statement DEC A subtracts one from the value of A.
      
Including these statements in Facile does not dramatically increase its power, but it does allow for convenient incrementing and decrementing, which can be handy for constructing simple "loops."
Another improvement to the interpreter can increase the expressiveness of the language quite a bit: Consider a statement such as LET. As defined above, the LET statement sets the value of some variable to some integer constant. But imagine that you wanted to set the value of some variable to be equal to the value of some other variable. Facile, as defined above, does not allow this fundamental operation. But there's no reason it couldn't.
In many places where an integer constant may normally appear in a Facile program, your interpreter could also allow the name of a variable to appear. In the case of PRINT, you could also allow an integer constant instead of a variable name. So, for example, these statements may be given to the interpreter:
LET A B — Sets the value of A to be equal to the value of B.PRINT 3 — Prints the integer constant 3 to the console.ADD B C — Adds the value of C to the value of B, storing the result in B.SUB B C, MULT B C, DIV B C — similar to the ADD statement aboveIF A <= B THEN 4 — Jumps to line 4 if A is less than or equal to B.IF 3 <= B THEN 4 — Jumps to line 4 if 3 is less than or equal to B.IF 4 <= 9 THEN 4 — Jumps to line 4 is 4 is less than or equal to 9.
You might also consider designing and implementing some new statements to accomplish some of these important goals, or others of your own choosing:
Allow Facile programmers to put comments into their code. (This could bring up an interesting question about the design of the language: how should line numbers be counted if not all lines contain code?)Define additional variables that can store string values instead of integers. The BASIC language names such variables with trailing $ characters. So you might have the variables A$, B$, C$, ...,  each of which is capable of storing a string.Add a statement, or perhaps a variant of the PRINT statement, to output a string of text (a string literal or the value of a string variable) to the console.Allow the IF statement to compare two string variables, or to compare a string variable to a string literal.Add a statement to read an integer and/or string from the console and store it in a variable.Add a LABEL statement that takes a variable name whose value will be the next line number in the program.  Then that variable could be used as the target for a GOTO or IF statement, saving you from having to count lines.  (Even though it occurs in your code, LABEL isn't an executable statement at all; your parser needs to handle it once, when parsing.)
Finally, here's one more sample program. You can run it in Alex's Facile interpreter; you can read it to see what it does; you can use it to test your own interpreter (but it does require that you implement one of the optional features—two if you count comments).
* MY FIRST FACILE PROGRAM BY DAVID KAY
LET N 5
LET F 1
GOSUB 6
PRINT F
END
IF N > 1 THEN 8
RETURN
MULT F N
SUB N 1
GOSUB 6
RETURN
.
When you're done:
Submit all your Python source code in one .py file via Checkmate. Each pair should submit just one solution with both partners' names clearly indicated.
  The usual grading criteria for lab assignments apply.
  Fill out a partner evaluation at EEE.

    Modified slightly to reflect Python by David G. Kay, Winter 2012.
    Testing section added back into the assignment by Alex Thornton, Winter 2007.
    Clarification to the GOTO/GOSUB error condition, specifying that the THEN part of IF statements is to be included, made by Alex Thornton, along with necessary changes 
  A new error condition (GOTO/GOSUB to non-existent line) added by Alex Thornton, along with necessary changes to provided interpreter, Winter 2006.
  A couple of very minor changes made by Alex Thornton, Fall 2005.
  Some minor changes introduced by Alex Thornton, Spring 2005.
  Assignment restructured (to require the use of an object-oriented solution, while no longer requiring the testing portion) by Alex Thornton, Fall 2004.
  Almost all of the work that was previously optional is now required, along with other heavy modifications, as well as improvements to the given interpreter by Alex Thornton, Winter 2003.
  Originally written by Alex Thornton, Fall 2002.
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics22/Schedule.html
##-----------------TITLE------------------------##
ICS 22 / CSE 22 Fall 2012, Schedule
##------------------TEXT------------------------##
ICS 22 / CSE 22 Fall 2012 |
News |
Course Reference |
Schedule |
Lab Manual |
Code Examples |
About Alex








ICS 22 / CSE 22 Fall 2012
   Schedule







All assigned readings are from the Goodrich text, 5th Edition.  It is a good idea to skim the assigned reading before the lecture for the main ideas, attend lecture, and then to go through the assigned reading again to fill in the details that you missed, both in your initial skim of the reading and in the lecture.

Several lectures have little or no reading corresponding to them.  In some cases, this is because a block of reading corresponds to more than one lecture.  In other cases, the material covered in that lecture is not discussed in the textbook.

DateLecture TopicsReadingsProject DueWeek 0Th 9/27
      Introduction to the courseEnumerations in Java
    
      skim Ch. 1
    Week 1M 10/1
      Labs begin meeting todayIn-Lab Assignment #0
            (to be done, optionally, in today's lab section)Tu 10/2
      Exception handling in Javatry and catchWhen to handle an exception and when to allow it to propagateReading input from text files, and how exceptions fit into it
    Ch 2.3Th 10/4
      Singly-linked listsGeneric classesIteration and iterators
    
      Ch. 2.5Ch. 3.2Ch. 6.1 - 6.3
    Week 2Tu 10/9
      The importance of automated testingTest-driven developmentUnit testing using JUnit
    
      
    W 10/10Project #1 due 11:59pmTh 10/11
      Unit testing using JUnit (continued)Inheritance and polymorphism
    
      Ch. 2.1 - 2.2
    Week 3Tu 10/16
      Inheritance and polymorphism (continued)The Object class
    
      
    Th 10/18
      Algorithm analysis and O-notation
    
      Ch. 4
    Week 4M 10/22Project #2 due 11:59pmTu 10/23
      Linear and binary searchArrayLists and arrays
    
      Ch. 3.1
    Th 10/25
      Comparing the performance of ArrayLists and linked listsVariations on linked lists
    
      Ch. 3.3 - 3.4
    Week 5Tu 10/30
      The need for "classic data structures"StacksImplementing stacks using linked lists and ArrayLists
    
      Ch. 5.1
    Th 11/1
      MIDTERM — regular lecture time and location
    
    Week 6Tu 11/6
      QueuesImplementing queues using linked lists and arrays
    
      Ch. 5.2
    W 11/7Project #3 due 11:59pmTh 11/8
      MapsImplementing maps using sorted and unsorted listsThe case for non-linear data structuresBinary search trees (briefly)Hash tables (briefly)
    
      Ch. 9.1Ch. 9.3skim Ch. 9.2
    Week 7M 11/12University Holiday — Veterans' Day (NO LABS TODAY)Tu 11/13
      InterfacesThe AutoCloseable interface and try-with-resourcesComparability and natural orderingsThe distinction between abstract classes and interfaces
    
      Ch. 2.4
    Th 11/15
      Programming paradigmsIntroduction to functional programming in Racket
    
    Week 8M 11/19Project #4 due 11:59pmTu 11/20
      Introduction to functional programming in Racket (continued)
    
      
    Th 11/22University Holiday — Thanksgiving (NO LECTURE TODAY)F 11/23University Holiday — ThanksgivingWeek 9Tu 11/27
      Introduction to functional programming in Racket (continued)
    
      
    W 11/28Project #5 due 11:59pmTh 11/29
      Introduction to the sorting problemInsertion sort and selection sortGeneralizing sorting with comparability
    
      Ch. 3.1.2
    Week 10Tu 12/4
      Something cool to be announced later
    
      
    Th 12/6
      Conclusion
    
      
    F 12/7Project #6 due 11:59pmFinals WeekTh 12/13
      FINAL EXAM: 4:00pm-6:00pm, ELH 100
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics22/index.html
##-----------------TITLE------------------------##
ICS 22 / CSE 22 Fall 2012
##------------------TEXT------------------------##
ICS 22 / CSE 22 Fall 2012 |
News |
Course Reference |
Schedule |
Lab Manual |
Code Examples |
About Alex








ICS 22 / CSE 22 Fall 2012
   Course News







Check back here every day or so.  I will generally post important coursewide announcements here.  They will be listed in reverse-chronological order (i.e., newest items first).

Date AddedNews ItemTu 12/18Final course grades are now available.Tu 11/20A code example mirroring our conversation in lecture about interfaces, comparability, and natural ordering is now available.Su 10/28Last week's code example of inheritance and polymorphism is now available.Tu 10/16Today's code example demonstrating how to write an equals() method is now available.F 10/12A complete code example for our test-driven development and JUnit conversation in lecture — which we're not finished yet, but will conclude on Tuesday — is now available.Tu 10/2Two code examples are available: the DayOfWeek example of enums from today's lecture, along with a preview of a file-reading (with exceptions) example that we'll talk about on Thursday, but that might benefit you in your work on Project #1 sooner.W 9/26
      Welcome!  A few things:
      The first lecture will meet on Thursday, September 27 and lab sections will begin meeting on Monday, October 1.  For more information about meeting times of labs, see the Course Reference.  For information about lecture material and readings, see the Schedule.I encourage you to spend some time reading through the material on this course web site.  Notice the set of links at the top of this (and every) page, leading you to the Course Reference, the Schedule, and the Lab Manual, as well as a set of commented Code Examples that will be posted during the course of the quarter.
##------------------URL-------------------------##
http://www.ics.uci.edu/~thornton/ics22/CourseReference.html
##-----------------TITLE------------------------##
ICS 22 / CSE 22 Fall 2012, Course Reference
##------------------TEXT------------------------##
ICS 22 / CSE 22 Fall 2012 |
News |
Course Reference |
Schedule |
Lab Manual |
Code Examples |
About Alex








ICS 22 / CSE 22: Introduction to Computer Science II
   Fall 2012
   Course Reference







Instructor information

Alex ThorntonOffice: DBH 4048Email:  thornton@ics.uci.edu

Contacting me: I tend to be much easier to reach via email than any other way, so I would suggest using email to contact me under normal circumstances.  When you write me an email, please take a few moments to make sure that the following information is placed somewhere in your message: your name, your student ID#, and which course you're enrolled in (important since I'm teaching more than one this quarter).







Teaching assistants

We have two teaching assistants this quarter, each assigned to a subset of the labs.  Your TA will be attending labs and also in charge of grading the project submissions for your section.  Names and contact information are below.

Lab SectionTALab 1 (MW 5:00-6:50pm)Yan Kityaev (mkityaev AT ics DOT uci DOT edu)Lab 2 (MW 7:00-8:50pm)Yan Kityaev (mkityaev AT ics DOT uci DOT edu)Lab 3 (MW 3:00-4:50pm)Golnaz Ghiasi (gghiasi AT uci DOT edu)Lab 4 (MW 1:00-2:50pm)Golnaz Ghiasi (gghiasi AT uci DOT edu)









Times and places

Lecture

A lecture meets on Tuesdays and Thursdays from 5:00-6:20pm in ELH 100.  Given the course's size, attendance is not graded, but we certainly recommend it.  (Naturally, attendance is required on the days when exams are held, which are listed in the Schedule.)

Labs (The ICS 22 Help Center)

There are four lab sections, meeting throughout the afternoon and evening on Mondays and Wednesdays.  Collectively, we will refer to these as the ICS 22 Help Center, which meets at these locations and times:

Mondays and Wednesdays, 1:00-8:50pm, in ICS 189

While you are required to be enrolled in a lab section — and this enrollment does determine who will grade your projects and who you are permitted to partner with when working in pairs — you are generally free to attend the ICS 22 Help Center whenever you need it, regardless of which lab section you enrolled in.  While it is not a required part of the course, and nothing will be graded there this quarter, attendance does offer some significant benefits:

You will have a chance to consult a TA and/or a lab tutor regarding your work; this kind of instant feedback and help can be invaluable as you work through your projects.Some of your work this quarter will be done in pairs using a technique called pair programming.  The lab sections offer built-in overlap in your and your partner's schedules.You will be surrounded by a large group of other people facing the same problems that you're facing.  This kind of shared journey will build a social network that will last you, in some cases, for the rest of your life.  Don't squander that opportunity!

Office hours

I will be available on Tuesdays and Thursdays from 7:15-8:45pm in ICS 253 — not my office, as it's in a building that will be locked during at least part of that time — during which I'm available to chat with you about whatever's on your mind.  (Note that this block of time is listed as a discussion in the UCI Schedule of Classes, but it is actually my office hours, so you do not have to feel obligated to enroll in the discussion, nor to attend it, and you do not have to be enrolled in order to attend.)







Textbooks

Data Structures and Algorithms in Java, 5th Editionby Michael T. Goodrich and Roberto TamassiaJohn Wiley & Sons, Inc. 2010ISBN 0-470-38326-7RECOMMENDED

You may also find a Java reference book to be useful.  If you took an introductory programming course using Java (e.g., ICS 21 / CSE 21), you'll probably find your textbook from that course to be sufficient as a reference.  If not, there are many suitable ones out there, and different styles will appeal to different people, so I suggest going to a local bookstore and finding one that you feel comfortable with.







Obtaining additional assistance

Asking questions of course staff

You can most easily get course questions answered by coming to the lecture, the ICS 22 Help Center, or office hours and asking them.  I am happy to help you in person when I'm available.  You can also ask questions by sending email to me or your TA (or both); we check our email frequently throughout the day, so you can usually get an answer to course-related questions within a few hours (and often much more quickly).  If the questions require a complex or lengthy response, we may ask you to see one of us in person.  As projects approach their due date, particularly on days when projects are due, we begin to receive quite a bit of email all at once, so we may not be able to respond to all messages before the project is due.  We aren't ignoring you on purpose, but unfortunately it's not always possible for the relatively small course staff to answer questions from a large number of students at once.

Accommodations for disabilities

Any students who feel that they may need an accommodation based on the impact of a disability should contact me privately to discuss these specific needs.  Also, contact the Disability Services Center online or by phone at (949) 824-7494 as soon as possible to better ensure that such accommodations, such as alternative test-taking environments or note-taking services, can be arranged for you in a timely way.







Grading

Weights of graded artifacts

Your course grade will be determined from the weighted combination of your scores on each of six programming projects, one Midterm, and one Final Exam.  The weights of each of these are:

Six programming projects, 40% (weighted equally at approx. 6.7% each)Midterm, 25%Final Exam, 35%

Determining final grades

Course grades will be determined neither on a normal curve nor a straight scale.  It is guaranteed that overall scores over 90% will receive an A- or better, scores over 80% will receive a B- or better, and scores over 70% will receive a C or better.  However, the actual cutoffs may be lowered at the end of the quarter.  In short, it is not my intention to fail half of the students, nor am I planning on giving only 2% of the students A's, but I prefer not to constrain myself with either a straight scale or a formalized curve.

Some of the programming projects require the use of a technique called pair programming, which is discussed in more detail in the Lab Manual.  This is not an optional component of the course; all students are required to participate in pair programming when assigned.  Each of you will also be asked to fill out an evaluation of your partner after each paired project is due; this will give you an opportunity to let us know, confidentially, whether your experience with your partner was a positive one.  I reserve the right to reduce your overall course grade by as much as 10% if the evaluations you receive from your partners are consistently problematic.

If you're curious about how you're doing in the course, I'm happy to discuss your estimated grade at any time.  It's generally best to have this conversation in person, so that we can explore issues other than just the raw numbers; I'm happy to have this conversation at any time that I'm available, and I'm also glad to do it via email if we can't find a mutually available time.







Dropping the course or changing grade option

Through the end of Week 2 (Friday, October 12), you may drop the course by simply going to WebReg and dropping it.  If you wish to drop the course after that date, you will need to use the Enrollment Exceptions system to request a drop; I do not have the final say over those, ultimately, as the Dean of the Bren School (and your major, if you are majoring in something outside of the Bren School) must approve them.  It is not generally the case that an exception will be accepted simply because you're not doing well in a course, though extenuating circumstances are certainly considered.

Similarly, changing your grade option (to Pass/NotPass or back again) can be done via WebReg through the end of Week 2 (Friday, October 12), after which you must use the Enrollment Exceptions system to request the change.  As with exceptional drops, you must receive approval from the appropriate Deans.







Academic honesty

The policy

As ICS 22 or CSE 22 students, you are expected to know and follow the academic honesty policies of both the Bren School of ICS and the University as a whole.  Please take a few minutes to read the policies, which can be found at this link.

All of your lab work is expected to be completed solely by you (and your partner, on paired assignments).  Worker in larger groups and/or sharing of code between students that are not partners is not permitted.  Note that "high-level discussion of course material for better understanding" is permitted and encouraged, but when it comes time to sit down and write code, that is expected to be done by you and you alone.  All submissions are compared to one another using an automated plagiarism detection system.  This system is extraordinarily good at finding similarities between submissions, even when there are superficial differences.  (Note that we also compare your submissions to those submitted during previous quarters whenever one of these assignments was given during a previous quarter, so it is an exceedingly bad idea to turn in, or even refer to, code written by a friend of yours who took the course already.)

Since all of your work is expected to be completed solely by you (and your partner, on paired assignments), you will be held responsible even if you plagiarize only a small portion of someone else's work.

You are not permitted to reuse code that you wrote along with a partner during a previous quarter.  You may only reuse code that you wrote on your own, and you may only reuse it for a project that is not paired this quarter.  (The reason for this rule is simply that I do not want students repeating the course to pair up with someone new and deprive them of the opportunity to work on the project.  Besides, if you're repeating the course, it's generally a good idea to start fresh, to solidify the ideas you missed the first time around.)

Academic honesty is a two-way street.  Providing your code to other students for them to turn in as their own is not permitted anymore than turning in someone else's code.  Resist the temptation to give code to your friends "for reference."  Based on my experience, I can say that your "friends" may very well betray you and turn it in, anyway.

Naturally, the Midterm and Final Exam are also expected to be individual efforts.  Dishonest behavior during an exam will not be tolerated.

Violators of academic honesty policies are subject to the penalties described in the Bren School of ICS policy.  They are also subject to an immediate course grade of F, and you will not be allowed to drop the course to avoid the grade.  Also be aware that a single documented case of academic dishonesty may preclude you from switching into computing majors, registering for computing minors, joining the ICS Honors Program, and graduating from a computing major with honors.

The lesson

Okay, so the moral of the story is that it's wise to avoid cheating.  I believe that it's relatively rare that students enter a course with the conscious intent to cheat their way through it; why come to UCI if you're not planning to get something out of the coursework?  So why do people cheat every quarter in every course?  The answers vary, but here's the easiest way I can boil down the numerous conversations I've had with students caught cheating in my courses over the years: I fell behind and couldn't figure out how to catch up.  Things happen and ten-week quarters are unforgiving.  You might get sick, you might have issues crop up in your family, you might have an off-campus job that's demanding too much of your time, you might be trying to decide whether you're on the path you want to be on... Any of those things (and many others) can make it hard to keep up.  You fall a little behind, you fall a little further behind, and pretty soon the situation seems hopeless.  You're under pressure, temptation gets the better of you...

If you feel like you're beginning to slip off course or things are getting beyond your control, the best thing to do is to talk to us sooner rather than later.  We're here to help; we understand.  But the reality of taking large-sized courses at a large-sized institution is that we're not going to know you're in need unless you tell us.  If things are happening in your life, tell us; you don't have to be specific if you're not comfortable with it.  Before the fact, there's often a way to work things out.  After the fact, it's usually too late.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw4.html
##-----------------TITLE------------------------##
Fourth Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY• UC IRVINE • FALL 2011
 Fourth Homework 

This assignment is due at the start of lab on
Monday, October 17. 

(1)  In Chapter 22, do exercises 22.5.11, 22.5.12, and 22.6.3, most of which are similar to problems we did in class.
(2) In Chapter 23, do exercise 23.1.3. What kind of operation is this: mapping, filtering, or reducing/folding?

(3) Chapter 24 uses the tools we already have to build something else. As it happens, the "something else" in this case is numbers, which of course are already predefined in the language. That might lead you to ask what the point is of building it ourselves "from scratch." But showing this building process helps you understand how it works and how to build other, more complicated things later. Skim through Chapter 24, but at this point we're not assigning any exercises from that chapter.

(4)  The code for the restaurants program
  we did in class is available at http://www.ics.uci.edu/~kay/scheme/restaurants1.scm.  The teachpack for text input and output is at http://www.ics.uci.edu/~kay/scheme/simple-text-io.ss.   If you're using your own machine, download and install these files so you can run the restaurants program. (Download the teachpack rather than just copying and pasting its text; to do this, right-click or control-click on the link and then choose to download or save the linked file into the folder where you'll be storing your own code. Then you can add the teachpack via the Language menu in DrScheme: Use "Add Teachpack to the List" to locate the teachpack file; then select it and click OK. Be sure to change the language level to Intermediate Student.)  [Technical problems are always possible when installing new software; as always, let us know if things don't work as you think they should.]

Look over the
  restaurants code to become familiar with how it's organized. The first time you see a few pages of code, it can be daunting, but learning to find your way through a whole program is an important skill and now's the time to start developing it. (Real programs, of course, are hundreds of pages long.) So don't just glance at it and say, "Yeah, whatever." Spend some time studying it. Reading code is an excellent (and under-appreciated) way to build your own programming skills.
Recognize that this code is divided into parts: One part describes individual restaurants and the operations on them; another part describes the collection of restaurants and operations on the collection; that's the most imporant part for our purposes, and the part you should understand thoroughly. Another part (that starts on the first page) controls the whole program, presenting the menu to the user and accepting the commands. In model-view-controller terms, the restaurant and collection parts make up the model, and the first page (plus the get-it function at the end) make up the view and controller.  The view/controller parts are less important; you should be able to follow how they work, but we won't be asking you to reproduce code like that without having a reference copy to work from.
Now, try these
  two tasks. When you modify large, unfamiliar programs, you want to be especially careful (a) to make and test only small changes at one time, (b) to make your changes deliberately, with high confidence that they will work as intended, rather than just changing things haphazardly and hoping they'll work, and (c) make each small set of changes on a new copy of the code, so if you have to "roll back" those changes you won't have far back to go because you'll have a copy of your most recent, stable version. It's easy to lose your way when navigating around a large program; these steps will help keep you on track.

Change the command for adding a new restaurant to 'n' instead of
      'a'.Try to add an additional menu choice: e: Remove (erase) all the
      restaurants from the collection.
      If the user types 'e' and then 'p', for example, nothing would
      be printed.  [This will require modifications or additions in a few places. You can do the
      main part of the work very easily indeed, with a single procedure call. The key is to think
      functionally, not of changing values but of describing or creating the new value.] Test out your modified program interactively to satisfy yourself that it works as intended.

  Based in part on ICS H21 assignments by David
G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009. Modified by David G. Kay to reflect the Picturing Programs text, Fall 2010. Modified by David G. Kay, Fall 2011.

David G. Kay, kay@uci.edu 

Friday, October 14, 2011 7:40 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab4.html
##-----------------TITLE------------------------##
Lab Assignment 4
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 4 

This assignment is due at the end of lab on
Friday, October 21. 

Choose a partner for this assignment, someone
you haven't worked with already. Make sure you use the signup sheet to register your partnership.

(a) Do exercises 22.5.20 (for which the predefined length function will be useful) and 23.2.1 (is substitute a mapping, filtering, or folding/reducing operation?).

  (b)  In class we wrote a function like
in-ascending-order? as described below; we used it in testing the results of a sorting program. 
;; in-ascending-order?: list-of-numbers -> boolean
;; Return true if the list is empty or if each item 
The function as described above only works for numbers and ascending order. As we did in class with the sorting functions, generalize this function so that it works for ascending or descending order, numbers or strings or restaurants, or lists of any type of data for which two elements can be compared and put into order. Take a minute to go back and look at the code we wrote in class to see how this was done. Rename your generalized function in-order?.  Write check-expect tests that demonstrate your function's correctness on lists of numbers (correctly ordered or not), strings, and restaurants, in both ascending and descending order, correctly ordered or not. (If you're counting, that's at least 12 tests).
Here's a question to think about:  If we want to test the correctness
  of a sorting function, is it enough to have tests of
  the form (check-expect (in-ascending-order? (sort L)) true)?
  That is, if the results of our sorting function are
  in ascending order, are we satisfied that our
  sorting function works correctly?  (Put another way,
  can we think of a way to write sort so that its result
  always passes the in-ascending-order? test but the 
  result is not correctly sorted?)
Collect your definitions
  for parts (a) and (b) into one Scheme file, make sure both partners' names
  are in a comment at the top, and submit it via Checkmate. (Remember to make just one submission for both partners.)
(c)  As you start working with the restaurants program, change your language level to Intermediate Student.
Copy the code for the restaurants
  program to your machine and run it to make sure it works properly in your
  environment. See the Fourth Homework for details.
Add one new feature to the program: c:
      Change prices for the dishes served.
        When the user types "c",
          the program should ask the user for an amount (positive or negative) representing
          a percentage change in price (so that 100 would double a price and –50 would
          cut it in half).  Then it should apply that price change to the prices for
          all the restaurants in the collection.  [Here are some hints on how to approach
          this.  Before reading further, you might want to think, yourselves, about how you'd do it; you'll learn better if you think about it before reading on. You might approach
          this task by first writing a rrant-change-price
          function that takes a restaurant and a percentage change number, as above,
          and returns a restaurant that has all the same information, except that
          the price is changed appropriately.  Next you might write a function to
          apply rrant-change-price
          to all the restaurants in the collection.  Finally, you can incorporate
          these calls into the main program, adding the appropriate command handling
  and so on.]
Submit your modified restaurants program (the whole definitions file, including parts you didn't change) via Checkmate.
(d) As we start this part of the lab, we'll review a feature of Scheme we mentioned in class: the quote operator. If we type (+ 2 2) in the interactions window, Scheme evaluates it by applying the 
    + 
operator to its arguments to get 4. If we type 
"(+ 2 2)",
Scheme doesn't evaluate it as an arithmetic expression; the quotation marks just say to evaluate it as a string, and return the literal value 
"(+ 2 2)".
  Sometimes we want Scheme to evaluate what we type; sometimes we just want Scheme to treat it as data.  The way we say "don't evaluate" in Scheme is not to use double quote marks (which actually say "evaluate this as a string").  Instead, we use the quote operator, which can take the form 
  (quote x)
   or 
   'x.
     This is particularly convenient if we want to indicate a constant list in our code:  We can still say
     (list 1 2 3),
      but we can also say 
      (quote (1 2 3))
       or 
       '(1 2 3).
         Of course 
         (1 2 3)
          (without the 
          list
           or 
           quote
            or apostrophe) would give us an error, because 
            1
isn't the name of a defined function.  In this lab problem, you can see how we mght want to use quoted lists.
In this problem, we're also using symbols instead of strings. For our purposes, they're basically the same thing, but symbols are single words (whereas strings can include spaces and punctuation and anything you can type on the keyboard). Because symbols are single words, we can quote them with a single apostrophe instead of with double-quotes.
A recipe is a structure
    (make-recipe T IL SL)

  where T is the title (a symbol), IL is a list
of ingredients, and SL is a list of steps.

  An single ingredient is a symbol (like 
  'eggs);
    a single step is a list of symbols (like 
  '(beat the eggs)).
      A recipe contains a list
of ingredients and a list of steps; for example:
(make-recipe 'ThaiIcedCoffee 
     '(coffee sugar condensed-milk ice) 
     '((brew coffee) (add sugar and condensed-milk) (pour coffee mixture over ice)))
  (Here you can see one advantage of using symbols instead of strings; with strings, we'd have to double-quote every individual word, but with symbols, we can just single-quote the whole list of them. Ask yourselves: What would be the problem with double-quoting the whole list of symbols here?)
(d.1) Write the structure definition
  for a recipe, using "title," "ingredients," and "steps"
  as the names of the fields.

  (d.2) Some people say that any recipe
    can be improved by the addition of chocolate.  (Others say sesame oil, or
  Tabasco sauce.)  Write a definition of 
  add-special-ingredient
  .
      You may use an auxiliary function if you like.
  ; add-special-ingredient:  list-of-recipes  symbol   ->  list-of-recipes 
; Return a list containing all the recipes in the input list, but with the symbol added
;      at the beginning of the ingredients list of each recipe.

  (d.3)  Write a definition for 
  complete-ingredients-list

; complete-ingredients-list:  list-of-recipes  ->  list-of-symbols
; Return a list containing all the ingredients from all the recipes in the list,
;     with no duplications.  (You may assume that all the elements of a single
;     ingredients list are unique.)

[Hint:  Define an auxiliary function called add-unique.]

  (d.4) Sometimes we have to substitute
  one ingredient for another in a recipe. Write a definition for replace-ingredient as described below.  Auxiliary functions are essential here. 

; replace-ingredient: symbol1  symbol2  recipe  ->  recipe 
; Return a recipe like the input, but with every instance of symbol1 replaced by symbol2, 
;     both in the ingredients list and in the list of steps. 
; Example: Suppose TIC is the Thai Iced Coffee recipe defined above. 
;    (replace-ingredient 'coffee 'decaf  TIC) would return 
;    (make-recipe 'ThaiIcedCoffee 
;        '(decaf sugar condensed-milk ice)
;        '((brew decaf) (add sugar and condensed-milk) (pour decaf mixture over ice)))
 (d.5) (optional) Some recipes are so complex that they include in their steps some references to other recipes. A cake recipe in a cookbook, for example, might have as one step, "Use the chocolate icing recipe on page 23." To reflect this in our Scheme recipes, we change our definition of a "list of steps":
A list of steps (LOS) is either
empty;(cons S LOS), where S is a single step (i.e., a list of symbols); or(cons R LOS), where R is a recipe.
 Write a definition for complete-ingredients-list2 that accommodates these (possibly nested) recipes.
; complete-ingredients-list2:  list-of-recipes ->  list-of-symbols 
; Return a list containing all the ingredients from all the recipes in the list, 
;     including nested recipes, with no duplications.  (You may assume that all the
;     elements of a single ingredients list are unique.)  
Collect these definitions and submit them via Checkmate.  Turn in what you have by the due date; then consult with the TA if you'd like to keep working.


 (e) If you have time, do exercises 22.5.15, 22.6.7, and 23.4.1. 

(f) Remember that each partner must
  complete a partner evaluation form on eee.uci.edu.


  Based in part on ICS H21assignments by David
G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004–Fall 2009. Modified to reflect the Picturing Programs text by David G. Kay, Fall 2010 and Fall 2011.

David G. Kay, kay@uci.edu 

Monday, October 24, 2011 6:54 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw6.html
##-----------------TITLE------------------------##
Sixth Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Sixth Homework 

This assignment is due at the start of lab on
Monday, October 31. 

(1) If you haven't had an easy time solving the lab problems, go back through the textbook and read carefully through the worked exercises and the various versions of the design recipe. We're at the midpoint of the quarter now; there's time to go back and solidify your understanding. Nobody should be "winging it" at this point; to do the rest of the work in the course, you need to understand what we've done so far.

(2)  Read Chapter 28, which discusses functions as first-class objects (i.e., functions that take other functions as inputs). Do exercises 28.2.3, 28.2.4. Look at exercises 28.2.10 and 28.3.1: You should know how to write them, but you'll also notice that they're the same as two predefined functions we went over in class. Do exercises 28.2.11, 28.2.12, and 28.3.6, using filter or map as appropriate.

  (3)  Take a look back at the discussion
  of the function combine
  in section 28.5.  (Combine
  is sometimes called reduce, accumulate
  or foldr,
            sometimes with the arguments in a different order. DrRacket uses the name foldr.)  Using foldr,
  map,
    and filter,
      you can define many powerful operations very compactly, without explicit
      recursion.  For example, suppose we have a list of restaurant structures  ((define-struct rrant (name cuisine phone dish price)) ; call that list RL.  To produce
        a list of the names of the cheap Thai restaurants in RL, we only need to
say 

(map rrant-name (filter cheap? (filter Thai?
RL))). 

Look at this step by step: First we select just the Thai restaurants from the list; then we take just the cheap restaurants from that list; then we turn the resulting list of restaurants into a list containing just their names.
To calculate the average price of the cheap
  Thai restaurants, we can say 
(local ((define cheap-thai-restaurant-prices
                  (map rrant-price (filter cheap? (filter Thai? RL)))))
    (/ (foldr + 0 cheap-thai-restaurant-prices)
       (length cheap-thai-restaurant-prices)))

(In the above example, note that using the local expression saves us from computing the list of prices two separate
times.)  If you have trouble figuring out how these expressions work, first
make sure you understand map,
filter,
and foldr
individually (look at their contracts) and then look at what each part of
the expression returns, starting from the inside out.

Do each of the following problems.  Be aware, also,
that problems like these will show up on quizzes.

(3.1)  Write the function convert-to-1 that takes one argument (of any type) and returns the number 1, no matter
what the argument is.  Next, use map and convert-to-1 to define the function
list-of-ones that takes a list of items and returns a list of 1s that's
the same length as its argument.  Finally, use foldr and list-of-ones to
rewrite the last line of the average-price code above without using length. 

(3.2)  What is the result of evaluating
each of these expressions? (Of course you should be able to do these in your head, possibly with pencil and paper. It would totally miss the point just to copy and paste them into DrRacket, although that would be a fine way to check your results.)
(foldr + 0 '(1 2 3 4 5))(foldr (lambda (a b) (+ b (if (even? a) a 0))) 0 '(1 2 3 4 5))(foldr cons '() '(Huey Dewey Louie))(foldr max -1 '(1953 1956 1949 1991 1964))
The second expression above uses if, which we may not have seen before; it's just a shortcut for writing a two-way cond. The equivalent using cond would be (foldr (lambda (a b) (+ b (cond ((even? a) a) (else 0)))) 0 '(1 2 3 4 5)). 

(3.3)  Assume you have a function (interval
a b) that returns a list of all the integers between a and b, inclusive
(so that (interval 5 10) would return (5 6 7 8 9 10)).  (Re-)write the function
factorial using foldr (and interval), without any explicit recursion.

(3.4)  Now, think back to the restaurant
collection program and assume we have a list (called RL) of the restaurant
objects as described there.  For each of the following expressions, describe
in one English sentence what value it returns.  Don't just say, "It
does a foldr of plus and zero to a map of ... ;" give a description
of what the expression means, something you could put in a software catalog
so that a prospective buyer could find what he or she wanted.
  (foldr + 0 (map (lambda (R) 1) RL))  (filter (lambda (R) (equal? "Ethiopian" (rrant-cuisine R))) RL)  (/ (foldr + 0 (map (lambda (R) (rrant-price R)) RL)) 
     (foldr + 0 (map (lambda (R) 1) RL)))  (local ((define PRL (filter (lambda (R) (equal? "pizza" (rrant-dish R))) RL))) 
     (/ (foldr + 0 (map rrant-price PRL)) 
        (foldr + 0 (map (lambda (R) 1) PRL))))

(3.5)  Using map, filter, and foldr,
write an expression to return each of the following values without using
explicit recursion:

    a list of all the French and
    Italian restaurants in RL
    a list of all the (best) dishes
    served at the French and Italian restaurants in RL;
    it's okay for this list to have duplicates in it, though you may attempt
    to remove them if you'd like (as it can be done without explicit recursion)
    a list of all the restaurants
    in RL whose best dish costs between $10.00 and $20.00 (inclusive)
    the name of the lowest-priced
    French restaurant in RL
    a list of all the restaurants
      in RL, where every French restaurant whose best dish's price is less
      than the average (price of best dishes at French restaurants) has its price
    changed to that average price (this one is tough, but take it one step at a time)
(4) Section 28.6 talks about anonymous lambda, which we went over in class. Section 28.7 finally explains MIT-style function definitions, which we've known from the start of the course. Section 28.8 talks about functions that produce other functions, which we've also done in class. Section 28.9 covers how we can represent a sequence (of numbers or other values); it's interesting, but you can treat it as optional.
(5) Review the code we've developed in class for processing binary search trees. You should understand the algorithms for inserting an item, searching for an item, and traversing the tree (in order mainly, but you should also know what pre-order, post-order, and breadth-first mean), and you should know what lazy deletion means and its advantages and disadvantages over deletion that changes the structure of the tree. You may find it helpful to review this code: http://www.ics.uci.edu/~kay/scheme/restaurants1d.scm; we might ask questions about it on a quiz (providing you with a copy of the code, of course).
(6)  All the programs we've written
  so far have done their work, displayed their results, and quit without leaving
  a trace.  Now it's time to learn how to read data from a file and write
  results back to a file so we can maintain information more permanently,
  even when our program isn't running.  For a programming language to
  enable file input and output, it must work with the operating system (or
  multiple operating systems) to handle a variety of issues involving different
  user interfaces, different ways of storing data in files, different naming
  conventions for files, and different hardware devices.  Because there are
  many options, there are details to consider when we work with files that
  we haven't had to worry about so far.

There are three main approaches to reading
from and writing to files of text.  (Reading and writing data directly in
the internal form the computer uses to store it in memory is yet another
approach, one we'll skip over for now.)

    Read and write a single character
      at a time.  If you read each character individually, you have the most precise
      control over how you analyze the input and build up the data structures
      in your program.  But this approach is the most painstaking and tedious.
      We'll cover some techniques for organizing this process in Informatics
    42, but we won't use it this quarter.
    Read each line of the file into
      a string, perhaps collecting the strings into a list representing the whole
      file.  Then you could process the list conventionally, processing each string
    using Scheme's string functions.  This week we'll do some of this.
    Write all the data as Scheme
      expressions, and read it back in the same way.  If your program's data
      is organized into lists of structures and so on, you can preserve all of
      that organization using this approach.  This is the easiest approach in
      many ways, since you're maintaining the structure of the data and letting
      Scheme do a lot of the work for you.  We'll see this approach in later
    assignments.


Based in part on ICS H21assignments by David
G. Kay; modified and new material added by David G. Kay for the Informatics
Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009, Fall 2010, and Fall 2011.

David G. Kay, kay@uci.edu 

Friday, October 28, 2011 8:38 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab7.html
##-----------------TITLE------------------------##
Lab Assignment 7
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 7

This assignment (shortened because Friday, November 11 is a university holiday) is  still officially due on Friday. As a practical matter, you should try to finish it by the end of Wednesday's lab, but it would be wise to choose a partner whom you haven't worked with already and whose out-of-class schedule fits with yours on Wednesday or Thursday.
(a) Start with a copy of your copy-file function from last week's lab (without the line numbers); you may use either partner's code or rewrite it from scratch.
(a.1) Write the function pick,
  which takes three arguments.  The first should be a string that the function
  will search for in the file; the second is a string naming the input file;
  the third is a string naming the output file.  The output file should contain
  only those lines in the input file that contain the specified string somewhere
  in the line.  (We've provided some code for string processing to make this task easier.)
 (a.2) Define the function stats, which
  takes a string naming a file and a symbol that indicates what statistic
  to compute (and return) about the file, according to the list below.  Thus (stats "myfile" 'total-lines) would return the number of lines in the file myfile. You
  should try to use local definitions in your function so that you don't
  calculate intermediate results more than once.  You'll want to use the
  predefined function string-length.  You can also use map, filter, and foldr to calculate these values compactly.
'total-lines: The total number of lines in the file
'average-length:  The average length of lines in the file
'empty-lines: The number of empty (zero-length) lines in the file
'average-nonempty-length: The average length of the non-empty lines in the file
'longest-line: The longest line in the file (you can do this with foldr)
'longest-line-length: The length of the longest line in the file
'shortest-line: The shortest non-empty line in the file
'shortest-line-length: The length of the shortest line in the file.
(a.3) (optional, only if you have time) Redefine  stats to
  take a string naming a file and a list of symbols, each indicating a statistic
to compute about the file. Your revised version should include a list of results corresponding to the list of statistics (or better yet, a list of pairs with the statistic name and its value).  Thus (stats "myfile" (list 'total-lines 'shortest-line)) might return (list (list 'total-lines 3982) (list 'shortest-line "Yes.")).
 Submit these definitions via Checkmate.
(b) This week is an excellent time to shore up
  your understanding of material from previous weeks that you're still not sure about.
  Before we delve into what follows, take some time to fill in or reinforce your knowledge
  from past weeks by reworking any problems from previous homeworks or labs that you or
  your partner struggled with or never finished.
The goal here, as in any lab assignment, is to do this work in pairs, and to ensure
  that both partners are clear on how you arrived at a new solution.  It's best to pick
  a few problems that each of you struggled with, so that both partners benefit from the
  time spent, but if one partner feels more confident, it's preferable for that partner
  to help raise the other one's confidence.  Remember, again, that many of you will be each other's
  classmates for the next four years, so each of you benefits from other students' strengths. If both of you feel confidently up to date, go back and do some of the optional parts from past assignments.

Collect your definitions into one or more .rkt files.  You may find it necessary to
spread the definitions into multiple .rkt files, since different homeworks required
different language levels and/or different teachpacks.  Include a comment at the top of
each file, indicating which language and which teachpacks (if any) are required to execute
the code within.  There are no explicit requirements about how many problems to (re)submit,
but you can expect that we'll take your diligence into account when assigning final
grades if you redo many problems that you had trouble with, and if you help your partner
to do the same.

Submit your reworked definitions to Checkmate.

  (c)  (You don't have to complete this section, but you should at least do part (c.1) below) At http://www.ics.uci.edu/~kay/scheme/restaurants4.scm
  you will find a version of the restaurants program that implements menus
  and also reading and writing restaurant collections from a file.  This program
  uses the Intermediate Student with Lambda language level.  You'll also
need to install the teachpack called simple-file-io.ss. (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) 

(c.1) Download this program and run it, creating
restaurants and saving them when you quit.  Run it again, starting with
the saved file.  (You can restart the program in the same interactions window
in DrScheme with another call to (restaurants
'x).)  Take a little time to look
over the code, most of which should be familiar.  If your DrScheme window
doesn't show the high-level program profile in a column at the right,
select Show Program Contour from the View menu.  You'll see large section
headings in that view (which you can create with Insert Large Letters from
the Insert menu).

Note that we're reading and writing our
collection as a Scheme expression (the third approach we mentioned in last
week's assignment).  This makes sense, since it means we don't have
to rebuild every restaurant when we read it back in.

(c.2)  Modify this program by adding
the search-by-cuisine and search-by-menu-word menu commands you wrote in
last week's assignment.  (You may use either partner's code from
last week, or you may reimplement it from scratch.)

(c.3)  Add a command to the menu (of commands) that
will let users add new dishes to a restaurant currently in the collection.
There are two steps to this: First, change the command-menu code to recognize the new command, prompt the user for the restaurant's name, print a message if the name isn't found, and otherwise and call a function  to add dishes to a restaurant. Second, approach the dish-adding process layer by layer, with a function that takes a restaurant and returns the restaurant with a new menu, a function that takes a menu and adds some dishes, and a function that prompts the user for a (new) dish's name and price and returns a dish structure. Look at the existing code to see what functions are already available.
Once you've done this, refine
  the dish-adding process as follows:  If a dish being added has the same
  name as a dish already on that menu, then just replace the old price with
  the new price.  This should happen when you're initially adding dishes
  as well as when you're adding new dishes later; use the same code. 
  This also means (automatically) that no menu will have two dishes with the
  same name.

(c.4)  Add a menu command to import
another restaurant collection from another file, adding all the restaurants
in that file to the main collection.  Re-use the file-reading code where
possible.  
After you've done the basic task of adding all the imported
  restaurants to the collection, go back and implement this refinement:  If
  a restaurant you're adding has the same name and phone number as a restaurant
  that's already in the collection, then just add the new restaurant's
  dishes to the existing record for that restaurant.  (Add uniquely, of
  course, as in the previous part.) Do this same adding of restaurants that are unique by name-plus-phone for restaurants that the user adds manually.

You'll note that with interactive interfaces,
even text-based ones, handling testing isn't as easy as it is when we're
just using the interpreter.  Now that we have files, so we can save restaurant
set-ups, it's a little easier again.  But of course this doesn't
mean that testing is no longer important.  It's just another illustration
that interactivity adds an extra layer of complexity and that it's important
to build and test our model (the underlying restaurant, menu, dish, and
collection classes in this case) independently of the view and controller
(the interface).

You'll also note as you're doing this
that you need to work with file-handling functions that are unfamiliar.
 You have a description of the functions (and more detail is available in
the DrScheme Help Desk, although looking there isn't necessary; you also
have some working code to use as an example.  This is all you'll get
(aside from a little assistance from your instructional staff, but you wouldn't
have that in the real world); the thing is, it's more than you'd get in a similar situation in the real world, so learning how to make practical use of the information you do have is an important skill. One of the nice things about the Scheme we've
done so far is that we could understand everything "down to the ground,"
evaluating everything in terms of the basic rules of substituting values
for expressions over and over.  But as we learn how to handle other interfaces
(as we did with the graphics earlier, as we're doing here with external
files, and as we could do with many other interfaces), we don't get to look
under the hood.  We have to use the API (the application programming interface—the
behavior, the contract and purpose of the functions, not their definitions),
fitting the functions we're given together like pieces of a jigsaw puzzle
to get the result we need.  Sometimes this involves taking code that we
know works for a similar task, duplicating it, and modifying the copy to
fit the new circumstances (and then perhaps abstracting and refactoring
the new code with the original, if they're in the same program).  Becoming
comfortable working with APIs is a crucial skill, since software is rarely
built today without using some pre-existing library.

Turn in your modified program via Checkmate.





(d)  Remember that each partner must
complete a partner evaluation form via the Survey tool on eee.uci.edu.  Please
do this by the end of the day Friday.


Based in part on ICS H21assignments by David
G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2010.

David G. Kay, kay@uci.edu 

Thursday, November 10, 2011 10:21 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw8.html
##-----------------TITLE------------------------##
Eighth Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Eighth Homework 

This assignment is due at the start of lab on Monday, November 14.

(1) Continue your exercise from this past week's
  lab of going back and doing problems that you've found to be a struggle.  Be sure that
  you can do these problems on your own without your notes; this will be good practice
  for the final exam, and will shore up your skills for what is to follow.  Of course,
  you should always feel free to ask us, in person or by email, if there are problems
  that continue to be vexing; don't wait until the end of the quarter to get these
  kinds of questions answered.
(2) Consider in particular these two activities:
(2.1) Read some Scheme code—like the InfxTunes program and the various versions of the restaurants program—to become more familiar with how they're organized and how the code works. Concentrate more on the model part (how the programs represent and manipulate the data internally) than on the view or user interface (printing menus, reading user input, reading and writing with files). You should understand what the interface parts are doing, but we're not going to ask you to reproduce them on exams. On the other hand, exams will cover the model part, the data structures and algorithms, topics like lists, lists containing structures (containing other lists or structures), binary search trees, high-order functions like map, filter, and foldr, and the performance characteristics (O-notations) of the associated algorithms.
(2.2) For any topics you'd like a stronger background in, go through some of the Worked Exercises on those topics in the textbook. It requires a certain discipline to use the Worked Exercises effectively. The ineffective way is simply to read through the description, not looking too closely at the code, and telling yourself, "Yeah, that makes sense." The effective way is to pause at each step, ask yourself what the next step should be, even write it down or sketch it out, before looking at how the book solves it, and then, seeing the solution, look carefully at the code, tracing through its evaluation, to convince yourself that it behaves as described. This kind of internal questioning and testing is the proper, effective way to read any academic material critically.

  Based in part on ICS H21assignments by David
    G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005,
Fall 2009, Fall 2010, and Fall 2011.

David G. Kay, kay@uci.edu 

Thursday, November 10, 2011 10:17 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab5.html
##-----------------TITLE------------------------##
Lab Assignment 5
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 5

This assignment is due at the end of lab on
Friday, October 28.

Choose a partner for this assignment, someone
you haven't worked with already. If you're thinking about doing more software development after this course, try to find a partner with similar interests.

(a) In class we described how to change our restaurant
structure so that instead of just one best dish and its price, each restaurant
has a menu of dishes.  So a (new) rrant
is now
(make-rrant
name cuisine phone menu)

where name is a string, cuisine is a string,
phone is a string, and menu is a list of dish structures (see below).  We
defined the new structure more or less like this:
(define-struct
rrant (name cuisine phone menu))

The menu was a list of dishes—that is,
the rrant
structure contains a list as one of its fields.  Each dish on the list has a name and a price.  So a dish
is
(make-dish
name price)

where name is a string and price is a number,
defined with

  (define-struct dish (name price))

(a.1) To the restaurant definition below,
add a third dish:  Paht Woon Sen at $7.95.

(define R1 (make-rrant "Thai
Touch" "Thai" "949-640-0123" 
                       (list (make-dish "Mee Krob" 8.50) 
                             (make-dish "Larb Gai" 10.25))))

Write a Scheme expression that defines R2 as
a (new) rrant
structure for the French restaurant Pascal whose phone number is 940-752-0107;
they serve escargots for $12.95, poached salmon for $18.50, rack of lamb
for $24.00 and marjolaine cake for $8.50.

(a.2)  Write the function rrant-first-dish-name
that takes a rrant
as its argument and returns the name of the first dish on the restaurant's
menu.  Remember to write the test cases and examples before you write the
function.  You should include code to check whether the menu has zero dishes
and return empty if so.

You may find yourself needing to extract the
menu from the argument twice; use local
to avoid that.

(a.3)  Write the function dish-cheap?
that takes a dish structure and a number and returns true if (and only if)
the price of the dish is less than the specified number.

(a.4)  Write the function menu-all-cheap?
that takes a menu (i.e., a list of dish structures) and a number and returns
true if (and only if) all the dishes on the menu have a price less than
the specified number. You may write your code to return true if the menu
doesn't have any dishes; don't produce an error message.  Of course
you should use dish-cheap?
in your definition.

(a.5)  Write the function rrant-all-cheap?
that takes a rrant
and a number and returns true if all the dishes the restaurant serves cost
less than the specified number.  Of course you should use menu-all-cheap?
in your definition.

(a.6)  Write the function menu-prices
that takes a menu and returns a list of numbers where each number is the
price of a dish on the menu.  That is, your function will collect all the
prices of the dishes into a list and return that list. (This is an alternative approach to what we did in class.)

(a.7)  Write the function menu-average
that takes a menu and returns the average price of the dishes on that menu.
 Think about how you compute an average, what quantities you need, and how
to get them.  The predefined function length
will be helpful; it will also be helpful to write a function sum
that returns the sum of a list of numbers.  Note also that you'll need
to check for an empty menu and return zero in that case, so you don't
divide by zero.

(a.8)  Write the function rrant-cheap?
that takes a rrant
and a number and returns true if the average price of the restaurant's
menu is less than the specified number.

(a.9)  Write the function rrant-keep-cheap
that takes a rrant
and a number and returns (a newly constructed copy of) that restaurant with
all the menu items that aren't cheap removed.  The right way to go about
this is to follow the pattern of the functions above:  Start by writing
a function to operate on a menu, and then call that function from your rrant-keep-cheap
function.  The actual removal task follows the pattern of some of the functions
we've already seen.

(a.10)  Write the function cheap-rrants
that takes a list of rrant
structures and a number and returns a list containing only the cheap restaurants—the
ones whose average menu price is less than the number.  Use rrant-cheap?
in your definition, of course. 

Collect all of these definitions and submit
them via Checkmate.
(b) In class, we did an "inorder traversal" of a BST; we called it BST->list.  We also did the insertion of an item into a BST; we called it BST-insert.  And we wrote a function to take a list of items and insert each item into a BST; we called it list->BST.  You should know how to recognize these functions and how to write them.
(b.1) At the end of class, we reimplemented (rebuilt) our BST to keep track of duplicate items by storing a count of how many times each item occurred. We redefined the node structure and we defined an insertion function to increase the count each time we find a duplicate item.  But we didn't finish rewriting BST->list to produce, for example, three 19s on the sorted list if there were three 19s in the input.  The skeleton is at the bottom of Thursday afternoon's class transcript (available in the course Email archive); complete that definition (including enough check-expect tests to demonstrate that your definition is correct). 
(b.2) In class we did not write a function to search for an item in a binary tree.  So we'll give you a chance to do it now.  Write the function BST-member? as described below.  Write it to process BSTs as we defined them in class (with counts or without, your choice).
;; BST-member?: number  BST  ->  boolean
;; Return true if number appears in BST and false otherwise
(check-expect (BST-member? 17 empty) false)
(check-expect (BST-member? 17 (list->BST (list 17))) true)
(check-expect (BST-member? 17 (list->BST (list 34 43 28 16 17 24 134 34))) true)
(check-expect (BST-member? 17 (list->BST (list 34 3 23 2 25 26 24))) false)
Here are some hints if you'd like them: You have the contract, purpose statement, and examples above. Next, write the function header (define and lambda). Since a tree is either empty or not, have a cond to distinguish. Now, what do you return if the tree's empty? If it's not empty, what two things do you have to look at? What if they're equal, what do you return? If they're not equal, you're going to have to keep looking (recursively) in either the left subtree or the right subtree; how do you decide which?
Submit your definitions
  via Checkmate. 

(c) This part is optional. If you don't get to it, that's fine. But if you think your interests might be in the area of software development or software engineering, then we highly recommend giving it a try.
Reimplement the collection class in the restaurants program to store
  the restaurants in a binary search tree ordered by the restaurants'
  names.  This will involve changing all the definitions in the collection
  part of the code, but none of the definitions elsewhere. [In fact, you'd do exatly the same thing whether the restaurant structures are old-style (with one dish and price) or new-style (with a menu of dishes).]

Your data definition will be as follows:
;; A treenode is either
  ;; 1. empty
  ;; 2. (make-treenode rootvalue left right), where rootvalue is a rrant and left
  ;; and right are treenodes, representing the left subtree and right subtree,
  ;; and (this is the BST property) where all of the restaurant names in the left
  ;; subtree are earlier alphabetically than the name of the rootvalue restaurant,
;; all names in the right subtree are greater, and both subtrees are BSTs.

Here are some tips, hints, and simplifications:

    The BST code you wrote earlier and the code we did in class should
    be a useful guide. 
    To compare strings alphabetically, use string=?,
      string>?,
        or string<?.
        
    The collection->list
    function should do an inorder traversal of the tree, so it produces a sorted
    list.  
    Assume that every restaurant in the collection
      will have a unique name.  Under that assumption, there will be no duplications,
    so that collection-search
    will always return a one-element collection or an empty collection.
    Deleting items from a BST is very tricky
      if the item has two children, because you can't leave holes and you
      need to maintain the BST property.  We'll learn the algorithm for this
    some day, but for now, you can skip it:  collection-remove
  can just return the same collection unchanged.
What's the point of this exercise? The restaurant collection in our program is an interchangeable part. We can change how we build it internally (from a list to a BST) without affecting the rest of the program (i.e., without requiring the authors of those parts of the program to make any changes in their code). This interchangeability is a key aspect of any well-designed modern software system and it's a fundamental principle of object-oriented programming.
(d)  Remember that each partner must
  complete a partner evaluation form via the Survey tool on eee.uci.edu.


Based in part on ICS H21assignments by David
G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009, Fall 2011.

David G. Kay, kay@uci.edu 

Saturday, October 22, 2011 10:35 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw9.html
##-----------------TITLE------------------------##
Ninth Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Ninth Homework 

This assignment is due by the start of lab on Monday, November 21. 
(1) Read Chapter 29 of the How to Design Programs textbook on line. It talks about O-notation and vectors, so it should supplement our coverage of that material in class. We'll have a couple of exercises from that chapter on the coming lab assignment. 

(2) Just as lists can contain other lists, vectors can contain lists, or even other vectors. That's how we can represent two-dimensional tables, still with constant-time access by row and column. Read this coverage of vectors containing vectors; it's also a good example of processing complex data structures layer by layer, which has been one of our main themes this quarter. Do the exercises given in the document. This material could easily show up on quizzes or the final.
(3) Chapter 30 of the Picturing Programs text    begins the discussion of programs
that have "state"—that is, functions that save values from one invocation to the next.
(This meaning of "state" is the same one we use when we talk about some system being in a
"dormant state" or an "overloaded state.")  A system's "state" is its status, and we often
implement that with saved values which we can change with assignment statements. Programs with state (sometimes called "stateful" programs) are the opposite of functional-style programs. Functional programs don't have side effects; they don't have an independently existing state that assignment statements can change. In functional programs, everything is passed as arguments to functions and return values from those functions.
Read through the chapter; assigning values to variables and reassigning new values as the program progresses is a common idiom in languages like Java and C++. Don't expect to see quiz or exam questions or assignment usug set! this quarter, though.

  Based in part on ICS H21assignments by David
  G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2010, and Fall 2011.


David G. Kay, kay@uci.edu 

Saturday, November 19, 2011 12:52 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw1.html
##-----------------TITLE------------------------##
First Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 First Homework 
 This homework assignment is due at the start of lab on
  Monday, September 26. Your TA will come around and check you off (at 2:00, for the early section). 
 The second homework assignment will be available on
the web by next Friday and will be due the following Monday at the start of lab; we'll follow
that pattern all quarter.  The URL for the assignments is http://www.ics.uci.edu/~kay/courses/i41/hw;
we won't distribute printed copies of the subsequent assignments (unless,
after a couple of weeks, there's a great clamor for them).
Our homework assignments will include the reading in the textbook and some exercises for you to try out as you read. People learn best when they apply what they read as they go, so it's best to read the book with a computer at hand so you can type things in and try them out. There's always a big gap between thinking you understand something you read and actually being able to apply it. We expect these exercises to go quickly, but if you find yourself spending more than a couple of minutes on an exercise without making any progress, you should ask us (or a classmate) about it rather than continuing to spin your wheels unproductively. Note that this also means you should get started early, so that you'll have the time to get any questions answered.
The homework asssignments don't carry much weight in the course grade (though the lab assignments do). The point is to get you started with the next week's concepts. Thus, it's not a big deal if you don't have answers to every exercise on the homework, so long as you have questions about the ones you can't answer. In fact, we'd expect that if you run into a problem, you'll ask a classmate or send a question to i41@uci.edu even before Monday's lab.
You should also expect to find, especially after a week or two, that when you have the right answer you'll know that it's right. (Of course, having a computer to check it will help, but you will probably observe this even before you check it on the machine. This makes a contrast from the usual experience with other popular programming languages,
  where "Click 'Run' and cross your fingers" is the way people often work.)

(1)  Do everything on the course syllabus
under the heading, "What to do this week to get started in Informatics
41."  This includes registering yourself at checkmate.ics.uci.edu,
filling out the questionnaire at http://eee.uci.edu/survey/i41.f11.q, and turning in your photo.

(2) Read through Lab Assignment 0 before you come to lab on Friday just to get an idea of what you'll be doing with your partner. 


(3) We encourage you to talk with
each other and help each other understand how to do the assignments.  There
are some limits, though; in particular, remember that knowing how to do it (when the quiz comes, for example) is much more important than just putting down the answer.  If you haven't already, read the guidelines
for collaboration and independent work at http://www.ics.uci.edu/~kay/courses/i41/hw/collab.html. You may also wish to read some general advice (at http://www.ics.uci.edu/~kay/college.html) about how to approach college work; the practices that served you well in secondary school don't all work here.

(4) If you haven't already, read
the guidelines for pair programming
at http://www.ics.uci.edu/~kay/courses/i41/hw/pair.html. This describes how you will be doing all your work in the lab. Pair programming is not a simple as just working together; there are specific roles and specific things each person needs to do. 

(5)  Read Chapters 0 through 5 of the Picturing Programs textbook (PP). In most chapters, there are exercises designated "Worked Exercise." The author uses these to introduce some new concepts in the context of an actual problem. Thus, you shouldn't just glance over them quickly; you should try to follow along closely and, at least sometimes, work along with the book, typing and running the solutions in DrRacket.  It's not enough just to glance over the solution and say, "Yeah, I guess that makes sense."

(5.1) In Chapter 1, write an answer to exercises 1.5.2,  typing it into the definitions window of DrRacket and then running them, of course, to make sure your solution works). Remember that you need to click Run to get DrRacket to evaluate the Picturing Programs teachpack; that happens automatically when you type code in the definitions window, but if you're just typing simple expressions in the interactions window, you still need to click Run that one first time at the start of your session. Also write an answer to exercise 1.8.9, which it's easiest to do on paper.
 (5.2) In Chapter 2,  answer exercises 2.1.3 and 2.4.3 (which it's easiest to do on paper).
 (5.3) In Chapter 3, answer exercise 3.4.4.
 (5.4) In English, there's more than one way to say the same thing. "The teacher kicked the chalk" means the same as "The chalk was kicked by the teacher" (even though you can get picky about the stylistic nuances of the passive voice). The ability to paraphrase, to say the same thing in different ways, is common in natural languages (human languages). It's also common in programming languages.
Chapter 4 introduces function definitions—the fundamental way we "teach" the computer new tricks. You'll notice that in class we use one way of defining functions (called "MIT style," with lambda) while the textbook uses another way (called "Indiana style"). They both do the same thing; you'll see both ways in this course; you may use either way (though if you don't have a strong preference, use the MIT style because it will make some things easier later on).
The MIT style looks like this:
(define double    ; Define double as (lambda (n) (* 2 n)), that is, as a function 
  (lambda (n)     ; that takes one argument, n, and returns (* 2 n).
    (* 2 n)))
 The Indiana style looks like this:
(define (double n)  ; Define a function double that takes one argument, n,
  (* 2 n))          ; and returns (* 2 n)
 The MIT style uses the same define syntax we already know, (define name value); it's just that the value here is a function, a lambda expression. The Indiana style adds a second syntax for define: (define (name parameter1 parameter2 ...) expression) to go along with the original form of define we still use for variables.
 Do the two exercises listed below for this chapter; after that, you may skip down to item (5.5), but if you'd like more details about MIT and Indiana style, read the rest of this section.
MIT and the University of Indiana are two places that have done a lot of work on Scheme over the years. Scheme was invented at MIT, in fact (based on the language Lisp, which was also invented at MIT in 1958 by John McCarthy; Lisp, in turn, was based on a kind of logic called the lambda calculus, a logic that described the behavior of functions, invented by the logician Alonzo Church). In Lisp and Scheme, it is much easier to create and manipulate functions than it is in most programming languages. A function can be treated as a piece of data in a Scheme program, just like a number or an image or a string. The Scheme term we use when we're building or describing functions is lambda. (This comes from Alonzo Church. If Greek letters bother you, just think of it as the Greek word for "function." It's not, but it doesn't hurt to think of it that way.)
Do exercise 4.2.1 (in both MIT style and Indiana style, varying the function name in the second case so you can have both definitions in the same file).
On pages 62 and 63, the textbook gives syntax rules that include a description of the Indiana style for defining functions. Rules 4 and 5 each give a different syntax  for using define. For the MIT style, Rule 4 remains unchanged as the only rule for define. Rule 5 would would just describe a lambda expression as another kind of legal expression, like this:
Syntax Rule 5-MIT: A left parenthesis followed by the word lambda, a left parenthesis, one or more identifiers, a right parenthesis, a legal expression, and another right parenthesis is a legal expression. Think of it as matching the pattern (lambda (identifier ...) expression)
This sort of lambda expression's value is a function that takes as many parameters as there are identifiers. Those names can appear inside the expression as though they were defined variables; the funciton will return the value of the expression.
The MIT style makes the explicit point that functions in Scheme are "first-class objects," values that can be handled just like numbers or strings or images. We'll see some implications of this in a few weeks.
Do exercise 4.6.2 in both styles (on paper).
(5.5) In Chapter 5, do exercise 5.3.2. Note that it just asks for a contract and purpose statement; we don't know enough Scheme yet to write the actual function.
 (5.6) Just skim Chapter 6 for now. It describes how to set up animations. It's fun to build animations, but they need more complicated set-up than conventional functions in DrRacket's interactions window. Despite the additional details, the underlying programming principles are the same in both contexts. We will do some animations in the lab assignments, but we won't emphasize them on the quizzes or final. Anything we ask about them won't require you to memorize the details; we'll provide whatever reference material is necessary. We also have a reference sheet on these operations that you may find useful.
(6) Look at sections A, B, and C of the Scheme Finger Exercises.  If you're absolutely sure you know how to do them, you don't have to write the answers down or turn them in. But if you're still feeling a little uncertain, working through them will help build your ability.
(7) We have posted a group of short videos  that cover various helpful background information. We'll expect you to watch them over the next week or so; the information could show up on quizzes. 
(8) Read through Lab Assignment 1 before lab on Monday, so you have an idea of what's coming. You should take a minute to consult the DrRacket Help Desk from the Help
  menu; it will be useful all quarter long. Enter "Picturing Programs" in the search box and skim the documentation for the Picturing Programs teachpack. This kind of documentation describes an API, an application
  programming interface; an API is a library of functions that someone has added,
  a toolkit we can use for some task. (Don't try to learn or memorize this page; just get an overview of what's there. We'll introduce the necessary features as we go along.) Also follow the "image teachpack" link and scan that API.


What to turn in: Most of these items you just need to do on your own. At the start of lab on Monday, show the TA your solutions to the exercises in part (5) above (or let him know where you had difficulty).

Based in part on ICS H21 and H22 assignments
by David G. Kay from Fall 2003 and earlier; modified by David G. Kay for
the Informatics Core Course, Fall 2004–Fall 2008 (with Alex Thornton in Fall 2006 and Richard Pattis in Fall 2008). Modified for Picturing Programs by David G. Kay iin Fall 2010.

  David G. Kay, kay@uci.edu
  
  Saturday, September 24, 2011 5:42 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw10.html
##-----------------TITLE------------------------##
Tenth Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Tenth Homework 

There are no individual exercises to turn in this week, but
you should still try to have this assignment done before the lab meets on Monday, November 28.



(1) Look over Chapter 31 of the textbook. We won't test you on this material, but it provides some useful context.

(2) Read over 
Lab Assignment 9; in particular, you should do part (a). 
(3) Start to prepare for the final; see the Final Exam Details page.

  Written by David G. Kay for the inaugural
Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2010, Fall 2011.

David G. Kay, kay@uci.edu 

Wednesday, November 23, 2011 10:14 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab2.html
##-----------------TITLE------------------------##
Lab Assignment 2
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 2 

This assignment is due at the end of lab on
Friday, October 8.

Choose a partner for this assignment, someone
you haven't worked with already, and make sure the TA knows who your partner is. Remember to follow the pair programming model throughout; sometimes students are tempted just to split the work up, but that totally misses the point.

(a) In Chapter 7, do exercises 7.2.4, 7.2.7, and 7.3.2. Then do 7.7.4, 7.7.7, 7.7.8, 7.7.9, and 7.7.10. Next, do 7.7.20 (for which the predefined function round may be helpful; check the Help Desk), 7.7.22, and 7.7.24. Finally, do 7.8.2, 7.8.9, 7.8.11, 7.9.2, 7.9.3, and 7.9.4.
Again, remember to follow the design recipe for every function you define. (See part (c) of Lab 1 for details.)

(b) In Chapter 8, do exercises 8.2.3, 8.3.3, 8.3.9, 8.4.5, and 8.5.3. In Chapter 9, do exercise 9.2.7. 

(c) In Chapter 10, do exercises 10.2.4 and 10.2.6. In Chapter 11, do exercises 11.6.1 and 11.6.2.
[All groups should try to submit solutions to the problems above (part (c), Chapter 11); doing that much can get you full credit if your solutions are good. You'll start next week's lab with next week's partner where you left off this week, though, so it's better to work further if you can.]
(d) In Chapter 13, do exercises 13.2.5, 13.4.2, and 13.7.13. In Chapter 14, do exercises 14.1.6, 14.1.10, and 14.1.11.
(e) In Chapter 15, do exercises 15.3.7, 15.5.6, and 15.8.2. In Chapter 17, do exercises 17.1.3, 17.1.6, and 17.2.6. If time permits, do exercises 18.1.2, 18.1.3, 18.2.4, and 18.2.5.
(f) Combine all your definitions from parts (a) through (e) into one file. Run it to make sure everything still works. Then submit it via Checkmate.
(g) Remember that each partner must
  complete a partner evaluation form and submit it individually using the Survey tool at eee.uci.edu. Do this by the end of the day on Friday. 


Written by David G. Kay to reflect Picturing Programs by Stephen Bloch, Fall 2010.  


David G. Kay, kay@uci.edu


Friday, October 7, 2005 -- 6:25 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw7.html
##-----------------TITLE------------------------##
Seventh Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Seventh Homework 

This assignment is due in lab next week. Try to do it
by Monday, but expect that it will generate some questions
that you'll need to get answered before you can finish it.

(1) Read Chapter 29, which talks about sequential programming and input/output, topics we've been doing since the first restaurant program. You can skip sections 29.5, 29.6, and 29.7.
(2)  At http://www.ics.uci.edu/~kay/courses/i41/hw/DeusXercises.pdf there are a couple of problems that will give you some concrete practice
  with machine-level programming.  Download the file, do the problems, and
  turn them in (on paper) to the TA at the start of lab on Monday, if possible.  Each of
  you should submit a solution individually because everyone should get the
  practice of working through the steps.  But feel free to work together and
  help each other out.  

We almost certainly will ask a question about machine
  language and the Deus X on a quiz and on the final.  If we do, we will provide
  a copy of the Deus X Instruction Set sheet; it would be nuts to expect anyone
  to memorize it.


  Based in part on ICS H21assignments by David
    G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004
and Fall 2005. Modified by David G. Kay, Fall 2010.

David G. Kay, kay@uci.edu 

Friday, November 4, 2011 8:00 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/collab.html
##-----------------TITLE------------------------##
Collaboration and Independence
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE 

COLLABORATION AND INDEPENDENT
WORK

Part of being a professional is following the
profession's norms of accepted behavior.  As you know, you may not copy
commercial programs from the lab machines to use at home.  Likewise, in
an academic setting you may not turn in someone else's work as your
own.  ("As your own" is the key phrase:  If you use code from
the textbook or from your TA, you should include a comment indicating where
the code came from.  This is perfectly permissible unless an assignment
explicitly restricts what code you may use.  Joint work may be allowed or
required by an assignment, as we are doing with pair programming.  However,
using code from other students or from sources outside of the course is
not permissible in Informatics 41 except when an assignment explicitly allows
or requires it.)

As a general principle, we expect you to do
your own independent work in all parts of this course.  In this course it
is always permissible, even desirable, to talk with your classmates about
the conceptual course material or the requirements of an assignment (though
the instructor or TA will be most reliable for this).  It is always permissible
to get help from anyone about using the programming environment or other
system details, help with minor syntax errors, or suggestions of possible
test cases for your programs (though when an assignment requires it, you
must write your own description of your test plan).  It is never permissible
(except if an assignment explicitly allows or requires working in groups)
to copy another student's solution (whether code, prose, or math). 
A good rule of thumb is this:  Any time you find yourself writing down
(on paper or by electronic means) part of someone else's solution, you
are copying impermissibly.

Turning in another person's work as your
own violates the honesty policies of ICS and UCI (http://www.ics.uci.edu/ugrad/policies/index.php/index.php#cheating).
The School of ICS takes academic honesty very seriously and imposes serious
penalties on students who violate its guidelines. Detected violations could
result in your failing the course, having a letter filed with the school,
and losing a variety of other benefits and privileges.  We do check for
academic dishonesty both manually and automatically.  It is an unfortunate
fact that nearly every quarter, some students in ICS classes are found to
have violated these policies; to protect the privacy of the guilty, violations
are not made public, but sadly, they do occur.  No matter how much pressure
you feel from deadlines or other sources, no matter how inconceivable it
is to you that you might not complete an assignment on time, never
take the shortcut of turning in someone else's code.  Compared to the
consequences of academic dishonesty, one low assignment score is a minor
disadvantage.  If you feel as if you're falling behind or have other
difficulties, see your TA or the instructor; we will help you work around
your trouble.

We do encourage all students to help their
classmates with the course material and the labs, within these limits. 
Helping someone else doesn't hurt your grade; we don't have any
quota on how many As or Bs we can give.  It is even permissible in Informatics
41 to let someone else look over your code to get an idea of how
you organized it.  However, you should not let anyone copy your code,
either on paper or electronically.  In fact, it is wise to keep your code
in your own possession; if you give a copy to someone else, even if it's
just "for reference," that person might be tempted to copy portions
of your code; then you could be accused of academic dishonesty. 

Most importantly, realize that getting "the
answer" is only the last part of each assignment.  Equally important
is the process of getting the solution—including the false starts,
bugs, misconceptions, and mistakes—because the learning occurs in the doing.
 Completely apart from the ethical issues, copying a solution deprives you
of the whole point of the assignment.


David G. Kay, kay@uci.edu



Tuesday, September 20, 2011 9:19 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw2.html
##-----------------TITLE------------------------##
Second Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Second Homework 

This assignment is due at the start of lab on
Monday, October 3; show your completed work to the TA. We have already covered most of this material in class. If you don't quite finish this by Monday's lab, try to finish by Wednesday; you need to develop these skills. 

(1)  Re-read Chapter 6, remembering that we won't expect you to memorize the details of creating animations. Then read Chapters 7–18. That sounds like a lot, but some of it we've already seen and most of it is pretty straightforward. Let us know, as always, if you have questions.

(2) In Chapter 7, do exercises 7.1.2, 7.1.3, 7.1.5, 7.3.1, 7.6.2 (just for one of the operations), 7.7.2, and 7.7.14. Note that the build3-image function described in section 7.8.2 takes two numbers and three functions as its arguments. This is an example of treating functions as first-class objects, which we will return to later. It shouldn't seem that odd to have a function that takes and uses other functions: Think of a robotic arm in an auto factory. We can put a screwdriver attachment on the end of the arm and the arm will tighten screws; then we can put a spray-painting attachment on the end of the arm and it will paint something. The robotic arm is a machine (a function) that takes as its parameter another machine (the screwdriver or painting attachment) and uses that parameter machine to do some task.

(3) In Chapter 8, do exercise 8.4.2. In Chapter 9, do exercise 9.2.2. In Chapter 10, do exercise 10.2.1.

(4)  In Chapter 11, the extended example in section 11.2 uses inexact numbers in a very unusual way, to indicate real-world measurements that aren't precise. It's true that real-world measurements can be imprecise, but that's not what inexact numbers in Scheme are intended for. For our purposes, it is perfectly fine to use normal numbers like 28 for the miles per gallon and to forget about inexact numbers. (What inexact numbers in Scheme are intended for is situations where a decimal representation, like .33333, doesn't exactly equal the exact number 1/3. Using inexact numbers in repeated computations can accumulate those small errors into something significant; this is often called roundoff error. Scheme lets us represent rational numbers as actual ratios, or fractions—1/3 is a perfectly legal Scheme number—and that saves us from worrying about imprecise representations. However, we sometimes do need to convert our numeric results into a decimal representation, rounding off as necessary, and Scheme lets us do that with the function exact->inexact.  So long as a programmer uses that at the end of the computations, he or she can avoid significant inaccuracy.)
Do exercises 11.2.2 (replacing all the inexact numbers, too) and 11.5.2 (which gives you valuable practice finding your way around a slightly larger program; note that you can get all the code at once from the textbook's web site).
(5) In Chapter 13, do exercises 13.2.4, 13.3.3, and 13.7.3. In Chapter 14, do exercises 14.1.2 and 14.2.2. In Chapter 15, do exercises 15.3.1, 15.32, and 15.5.1.
 
 (6) Look at the  sections D, E, F, G, I, and J (except J7 and J8) of the Scheme Finger Exercises. You don't have to write the answers down or turn them in, but make sure you know how to do them.


Written by David G. Kay to reflect Picturing Programs by Stephen Bloch, Fall 2010; revised Fall 2011.

David G. Kay, kay@uci.edu 

Friday, September 30, 2011 8:37 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab3.html
##-----------------TITLE------------------------##
Lab Assignment 3
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 3 

This assignment is due at the end of lab on
Friday, October 14. 

Choose a partner for this assignment, someone
you haven't worked with already. You will start where you left off on Lab Assignment 2, so you should pick a partner who left off about where you did. If you both didn't stop at exactly the same place, start with the earlier exercise. Remember that the point is for both partners to know how to do all the exercises; don't just copy down the further-ahead partner's solutions.

(a) Starting where you left off last week, finish the exercises listed in Lab Assignment 2. Collect all these definitions into one file and submit them via Checkmate.  

  (b) In Chapter 19, do exercise 19.3.4.

(c) In Chapter 20, do exercise 20.4.5. If time permits at the end of the week, come back and do one or more of 20.6.3,  20.6.4,  20.7.2, and 20.6.5 through 20.6.9. 
(d) In Chapter 21, do exercises 21.3.8, 21.4.10, 21.8.9, and 21.8.10. Note that when 21.8.9 says, "Define a data type," what you're actually doing is defining structures for three different types (car, bicycle, and train) and then just saying, "A vehicle is either a car, a bicycle, or a train."
Only if you have time should you do exercises 21.4.11 and 21.6.3.
(e) In Chapter 22, do exercises 22.5.5, 22.5.7, and 22.5.8. We've done problems very similar to all three of these in class.
(f) Suppose you have  restaurant structures  defined as in class: (define-struct rrant (name cuisine phone dish price)). Write a function called average-for-cuisine that takes  as its inputs a list of restaurants and a string representing a cuisine; it returns the average price of the restaurants on the input list whose cuisine matches the input string. This too is similar to what we did in class; look up the transcript from that day and modify the code as necessary. Work thoughtfully and make your modifications systematically. Sometimes people just guess at what to change, click Run, and hope for the best; this is not a winning strategy.
Combine all your definitions from parts (b) through (f) into one file and submit it via Checkmate.
(g) Remember that each partner must
  complete a partner evaluation form and submit it individually via eee.uci.edu.


Written by David G. Kay to reflect thePicturing Programs textbook, Fall 2010.

David G. Kay, kay@uci.edu 

Thursday, October 6, 2011 7:40 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw5.html
##-----------------TITLE------------------------##
Fifth Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Fifth Homework 

This assignment is due at the start of lab on
Monday, October 24. 
(1)  In Chapter 25, do exercise 25.4.2. Read Chapter 26 and Chapter 27, which cover material we've seen in class.

(2) Create a file with the sorting code from last week: sort4, BST-sort, build-list, and the functions they call. Create five lists of random numbers with 20,000, 40,000, 60,000, 80,000, and 100,000 elements. Set up timing expressions to sort each of those lists with the insertion sort and again with the BST sort. Make a table (using a spreadsheet, a word processor, or paper) with two columns, one for insertion sort and the other for BST sort, and five rows, one for each size list. Fill out the table with the timing figures (just use the first figure in each timing, the CPU time). Can you predict what the entries would be for a list of 120,000 elements, or 200,000, or 1,000,000?
We'll talk about these issues next week.
(3) In last week's lab you saw an example of nested lists (lists containing other lists). Here's another:
;; Data definition:  A book is either
;; -- empty, or
;; -- (cons symbol book), where a symbol represents a word, or
;; -- (cons book book)
So this is a book:
(define TTC '(A Tale of Two Cities
                 (It was the best of times)
                 (It was the Dover road)))
This gives us a hierarchical (tree-shaped) organization; each nested list could be a chapter, which itself could contain lists for each section or paragraph. But suppose we want to count the words in this book.
;; word-count:  book -> number
;; Return number of words in book

(check-expect (word-count TTC) 16)
(check-expect (word-count empty) 0)
We can't just say (length TTC); that gives us the number of elements at the top level (7 in this case), counting each nested list as a single item. Instead, we need to look into each nested list. We can write the code for this by following the data definition, which has three parts: The list is empty, the first item is a symbol, or the first item is a list:
(define word-count
  (lambda (B)
    (cond
      ((empty? B) ...)
      ((symbol? (first B)) ...)
      (else ...))))
If the book is empty, it has zero words. If the first item is a word (a symbol), add 1 to the number of words in the rest of the book. If the first item is a book (a list), add the number of words in that book to the number of words in the rest of the book.
(define word-count
  (lambda (B)
    (cond
      ((empty? B) 0)
      ((symbol? (first B)) (add1 (word-count (rest B))))
      (else (+ (word-count (first B)) (word-count (rest B)))))))
Notice that there's a recursive call in this code at exactly the same places as "book" appears in the data definition above.
Now, define the function word-count2 as described below. This is a good measure of your comfort with reading and understanding Scheme code; if it gives you difficulty, sit down with the instructor or TA to get it cleared up.
;; word-count2:  book  list-of-symbols  ->  number
;; Return the number of words in the book that are not on the input list
(check-expect (word-count2 TTC '(A a An an The the It it Of of)) 9)
[Hint: This is very similar to word-count; you just need to focus on the second cond clause. The predefined function member? should be very helpful.]
(4) Take this opportunity to go back over all the previous homework assignments and do problems you didn't get to or redo problems that gave you trouble. Since there's not much new Scheme here, you have a chance to shore up your understanding.
Based in part on ICS H21 assignments by David G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004-Fall 2009.  Modified Fall 2010 and Fall 2011 by David G. Kay to reflect the Picturing Programs text.

David G. Kay, kay@uci.edu 

Saturday, October 22, 2011 10:09 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab6.html
##-----------------TITLE------------------------##
Lab Assignment 6
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 6 

This assignment is due at the end of lab on
Friday, November 4. 

Choose a partner for this assignment, someone
you haven't worked with already.  Starting with this assignment, change
your language level to Intermediate Student with Lambda. There's a lot to do this week, so work with deliberate speed.

(a)  Do exercises 28.2.5, 28.2.6, 28.2.8, 28.2.9. Then do exercises 28.3.10 and 28.3.11. It's important to understand what these exercises are asking for and what the terminology means.  Don't just guess; don't just wing it; do be meticulous about following the design recipe, especially contracts and examples (check-expects). Submit your definitions via Checkmate.

(b)  At the end of the Functions as
First-Class Objects sheet, we refactored the functions find-all-matches
and remove-all-matches,
defining both in terms of a more general handle-all-matches.

(b.1)  Do the same thing in the second
restaurants program (available at http://www.ics.uci.edu/~kay/scheme/restaurants2.scm)
with collection-search
and collection-remove,
redefining both in terms of a general collection-check
function.

(b.2)  Now redefine collection-check
and collection-change
in terms of a still-more-general collection-process
function.  This one is complicated; treat it as optional.

(b.3)  Simplify your definition of collection-process
(or collection-check
and collection-change)
using map,
filter,
foldr,
and similar functions.

Collect all of these definitions and submit
them via Checkmate. You should try to get at least this far by the end of Monday's lab.
(c) Be sure you've read the section in
Homework 6 about files; now it's time to write a few file-handling functions.  Download and
install the simple-file-io.ss teachpack at http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss.
 (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) We also have some file-handling code
(which you should copy into your definitions file) that provides an API consisting of these four functions for reading and writing text files:
;; file->list: string -> list
;; Given a string naming a file, read the lines in a file into a list of strings.
;; file-dialog->list: anything -> list
  ;; Show user a dialog box to choose a file; read the file into a list of strings
  ;; Call with (file-dialog->list 'x) because student Schemes don't allow
  ;; parameterless functions.
;; list->file: string list -> side effects (a new file)
  ;; Given a string naming a new file, write list of strings that file,
  ;; one string per line.
;; list->file-dialog: list -> side effects (a new file)
  ;; Write a list of strings to a new file
  ;; (chosen by showing the user a file selection dialog)

These functions operate on text files—files
with the extension ".txt" or other files that consist only of
characters you can type on the keyboard.  Word documents don't work
unless they're saved as plain text; Scheme/Racket files do work unless they're
saved with images, comment boxes, or other non-textual features.
Take the time to understand what these functions do. Try a few sample calls to read and write some simple files. It's a vital skill to be able to read an API to see what tools are available. As you work on this part of the assignment, take it step by step and make sure you know what's expected before you try to write the code. The final product will be rather large and complex, but we build it up using small, relatively simple steps.

(c.1)  Define the function copy-file that takes two strings—the name of an existing file and the name of a new
file—and copies the contents of one to the other.  Use file->list and list->file.
 Test it out with a short file.  Then download the Project Gutenberg version
of The Adventures of Sherlock Holmes from http://www.gutenberg.org/cache/epub/1661/pg1661.txt.
 (Project Gutenberg is a wonderful resource for non-copyright-protected
texts).  If you have to work on a slow network connection, you may pick
a smaller file; this one is 577K.  Use your copy-file program to make another
copy of this file.

(c.2)  Write the function copy-file-dialog that takes one parameter (that it ignores—parameterless functions aren't
allowed in the DrRacket student languages), displays a dialog box for the
user to select a file to copy, displays another dialog box for the user
to select the name of the copied file, and then creates the copy.  Use file-dialog->list and list->file-dialog.  Test this function with a couple of files.  (Testing
of these file-handling programs isn't quite as convenient as just putting
examples into your code, but it is essential nonetheless.  This is just
an illustration of how interactive (and imperative, non-functional) programs add an extra layer of complexity
to the computing task.)

(c.3)  Write the function copy-with-line-numbers that behaves like copy-file, except that the copied file has line numbers
in this form:

1: Project Gutenberg's The Adventures of Sherlock Holmes, by Arthur Conan Doyle
2: 
3: This eBook is for the use of anyone anywhere at no cost and with
4: almost no restrictions whatsoever.  You may copy it, give it away or
...
13052: subscribe to our email newsletter to hear about new eBooks.

The pre-defined functions 
string-append and 
number->string  may be helpful.

(c.4)  (optional)  You'll notice that in your line-numbered file,
the lines don't line up neatly because the numbers have different lengths.
 It would be nice to be able to display a number in a five-character field,
so that 17 would display as "   17" (with three spaces before
the number).
;; pad5: string -> string
  ;; If input string is 5 characters or longer, return it unchanged. Otherwise,
;; add enough blanks at the left of the string to make it 5 characters long.

Use this function in your line-numbering program;
the pre-defined function string-length
 will be useful here.

Next, write a generalized version of the function:
;; pad: string number symbol string -> string
  ;; The first argument is the input string. The second is the desired length.
  ;; The third, 'left or 'right, indicates which end of the string should be padded.
  ;; The fourth is the string that should be added repeatedly
  ;; until the string is at least as long as the desired length.
  ;; Examples: (pad "Hi" 5 'right "!") -> "Hi!!!"
;; (pad "Preface" 12 'right "_.") -> "Preface_._._."

Finally, use these functions in your line-numbering
program so that the numbers are printed in five-character fields (except
for numbers over 99,999, which should be as long as necessary).

Submit these definitions via Checkmate.
(d) Let's go back to our (new)
restaurants with menus.  
 (define-struct rrant (name cuisine phone
  menu))
 where name, cuisine, and phone are strings
  and menu is a list of dishes:
 (define-struct dish (name price)). 
 To the extent possible, write the following
  definitions without using explicit recursion (i.e., using map, filter, foldr,
    and similar functions).  None of these modifications should require any
    change to the code for collections, either.
 (d.1) Make up a big list of rrant structures to use in your testing.  Trade and combine lists with your classmates. 
 (d.2) Make a copy of the restaurants2.scm
  program (as modified in part (b), if possible) and call it restaurants3.scm.
 (d.3) Modify the program to handle rrant objects that include menus.  You should try at least to make a list of all
  the changes you will need before looking at our checklist of modification steps and before looking back at the code we wrote in class.
 (d.4) Modify the program to display
  the average price (of all the dishes on the menu) whenever a restaurant
  is printed.
 (d.5) Add a command to the main menu
  that allows the user to search for (and display) all the restaurants that
  serve a given cuisine along with the average price of (all the menus of
  the restaurants that serve) that cuisine.
 (d.6) Add a command to the main menu
  that allows the user to search for (and display) all the restaurants that
  serve a dish containing a given word or phrase.  (This is more realistic
  than forcing the user to type the exact name of the dish; here, at least,
  the user can just type "fava beans" and match all the dishes that
  include that phrase.  The string-processing functions from the previous part will make this task easier.)

 Collect all of these definitions and submit
  them via Checkmate.

(e)  Remember that each partner must
complete a partner evaluation form via the Survey tool on eee.uci.edu. 


Based in part on ICS H21assignments by David
G. Kay; modified and new material added by David G. Kay for the Informatics
Core Course, Fall 2004 and Fall 2005; file-handling code written by Angelo
Pioli, Fall 2005. Modified by David G. Kay, Fall 2009, Fall 2010, and Fall 2011.

David G. Kay, kay@uci.edu 

Friday, November 4, 2011 8:03 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/hw3.html
##-----------------TITLE------------------------##
Third Homework
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Third Homework 

This assignment is due at the start of lab on
Monday, October 10. The concepts here (of working with structures and lists) are fundamental to the rest of the course. Be sure to check with us if you'd like clarification or help.

(1) Read Chapters 16 (which gives some advice for designing functions), 17 (which uses cond in animations), and 18 (which covers key handlers and mouse handlers). Since you probably haven't gotten to them yet from Lab Assignment 2, look over exercises 17.1.3, 17.1.6, 17.2.6, 18.1.2, 18.1.3, 18.2.4, and 18.2.5; you'll do them as part of Lab Assignment 3, but scan them now to get an idea of what's coming.
(2) Chapter 19 briefly covers error handling, the error function (that you can put in your code to stop it and produce an error message), and the check-error function (so you can have tests of situations that are supposed to cause errors).

(3) Chapter 20 introduces structures.  Read it and do exercises 20.4.6 and 20.5.7. Look at exercise 20.6.2, which suggests "refactoring" some code (reorganizing it to reduce duplication). You don't have to show the TA a solution to 20.6.2, but you do have to have written solutions (or questions) about the other exercises listed here. Do exercise 20.7.3.
(4) Chapter 21 continues with structures. Read it and do exercises 21.1.1, 21.4.4, 21.5.3.
 (5) Chapter 22 introduces lists.  Read it and do exercises 22.5.3 and 22.5.4 (which are very similar to examples we did in class).
 (6) Suppose you have restaurant structures as defined in class: (define-struct rrant (name cuisine phone dish price)). Write a function called cheap-Thai that takes a list of restaurants as its input and returns a list of all the cheap Thai restaurants on the input list (where cheap means the price is under $10). This too is similar to what we did in class; look up the transcript from that day and write the necessary extra "helper" or "auxiliary" functions (like cheap?) to separate out each part of the task. (7) Look at the  sections K, L, M, N, and O of the Scheme Finger Exercises. You don't have to write the answers down or turn them in, but make sure you know how to do them. If you aren't perfectly, 100% comfortable with structures and lists, you need to check these out.


  Based in part on ICS H21assignments by David
    G. Kay from Fall 2001; modified by David G. Kay for the Informatics Core
  Course, Fall 2004–Fall 2011.  


David G. Kay, kay@uci.edu 

Thursday, October 6, 2011 7:40 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab9.html
##-----------------TITLE------------------------##
Lab Assignment 9
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 9 

This assignment is due at the end of lab on
Friday, December 2.  

Choose a partner for this assignment, someone
you haven't worked with already. It will work best if you choose someone whose level of commitment to developing programming ability is close to your own (whether that's high or low).
Professor Andrea Anteater wants you to design
  a grade management system for her students in Applied Epistemology 101.
  This system will read and write students' scores from a file and allow
  the user to produce statistics and histograms (frequency graphs) of the
  scores.
 Your task this week is to create this program
  from scratch.  It's not really from scratch, though, so don't panic:  We provide a set
  of specifications for you to implement and you can use all of the example
  programs we've seen all quarter.  Hardly any programming today is totally
  from scratch; we have application frameworks (skeleton programs with all
  the infrastructure supplied), we have function libraries that provide commonly
  useful tasks, we have object libraries and class hierarchies that we can
  adopt and adapt to our own purposes.
 To help you along, here are six pieces of
  development advice:
 Read the specifications carefully, more
    than once.  Technical documents must be milked for all the detailed information
    they contain; you can't just read them one time quickly, like a mystery
    novel. Follow the model-view-controller organization;
    have a separate top-level "front end" part of your program (the view and controller part) that handles interaction
    with the user and a "back end" part (the model) that implements the operations
    on the different classes of data. This is how the restaurants program is organized. As you build the "model" part
    of the program, follow the design recipes, especially for creating examples
    and tests in advance.How do you know if you have enough tests, or the right tests? One simple measure of test effectiveness is called "code coverage"—your tests should, at the very least, evaluate each expression in the code. DrScheme helps you with this: After running your program, if you haven't tested every expression, some of the code appears highlighted in black. The highlighted code hasn't been evaluated, so you should add  tests to exercise those parts of the program. Implement one small feature at a time, test
    it thoroughly, and then save a copy of your program so far.  That way, if
    your next phase of development runs into trouble, you can "roll back"
    to the previous version and start over.Nearly every technique needed for this lab is something you've seen or done earlier this quarter. If you find yourself working on something that seems much more complex or convoluted than we've done before, reconsider your approach.
 You'll be using Advanced Student Scheme
  for this program, with the advanced-file-io.ss teachpack. (Download the file; don't just copy and paste the code.)
One more thing before you get started: This assignment has two different starting points; you and your partner can choose either, and we'll make sure that either way, successful work is rewarded. If you're interested in software development, software engineering, or building your programming skills, start with part (a) below; that's the fully "from-scratch" approach, including building the input and output ("view") part. If you're less committed to software development, though, you can start with part (c), skipping parts (a) and (b) and using our "starter version" of the program; this will let you focus on the more substantial parts of the assignment and skip the input and output, which is important as a practical matter but kind of tedious to code up. If you choose the second approach, you'll still need to read through parts (a) and (b) below to understand what's involved, and read through the starter version of the program to understand how it works and how to modify it.
(a) Your program will handle these
  classes of data: 
 Assignments, each represented by a name, a
    weight in computing the course grade [the weights of all assignments should
    sum to 100, though we're not requiring you to check this], and a number
    of points possible [which is independent of the weight; a three-point assignment
    could be worth 50% of the course grade].  ("Graded item" would
    be a better term, since it includes things like exams and projects.  But
    we'll use "assignment" just because it's shorter.)
   A collection of assignment descriptions that
    together describe the graded items in the course
    
   Students, each represented by a name, an ID
    number, and a vector of scores (which should be the same size as the collection
    of assignments, one score for this student on each assignment)
   A collection of students
 To start out, make sure you understand these
  data structures:  Make up some examples; draw a picture; get comfortable
with how they're organized.  Then you'll want to define  functions to display the information in an assignment and a student clearly; base these on rrant-print.
Then, test out those functions with objects you construct using make-assignment and 
make-student. [Note on terminology]
 (b) When your program starts, it will
  read the collection of assignments from a plain text file called Assignments.txt.
    (If you place your program file and these data files in the same directory/folder,
    DrScheme will find them without your having to do anything fancy.)  Then
    it will read the collection of students from a text file called Students.txt.
      Since the user can create these files without knowing any Scheme, your
      program won't have to handle changes to the data (although that's
      an enhancement we discuss below).
 The user can create these files using a plain
  ASCII text editor like NotePad (or from Word by using Save As and the Text
  Only format, which saves plain ASCII without the additional Word formatting
  information that your Scheme program can't read). 
 For a course with a 75-point midterm worth
  40% of the grade and a 100-point final worth 60%, the assignments file would
  look like this:
2 
  Midterm Exam
  40 75
  Final Exam
  60 100
 The first line contains the number of assignments.
  Then each assignment has two lines, the first containing the assignment's
  name and the second containing two numbers, the weight followed by the possible
  points. [The code for creating one assignment should be similar to the rrant-get-info
function, except that it's reading from a file instead of from the keyboard.]
 A file of students for this course would look
  like this:
2
  Aardvark, Aaron
  11223344
  68 85
  Tapir, Tamara
  44332211
  74 92
 The first line contains the number of students.
  Then each student has three lines, the first containing the student's
  name, the second containing the student's ID, and the third containing
  the student's scores on each assignment, in order.
Here are two lines of code to set up the reading from the two files listed above (in the same folder as your Scheme code):
(define assignment-port (open-input-file "Assignments.txt"))
  (define student-port (open-input-file "Students.txt"))
Here are two examples of reading from the files:
(read assignment-port) ; Read one expression from the assignments file 
  (read-line student-port 'any) ; Read one line from the students file and return it as a string.
 The 'any argument to read-line will handle files on both Windows and Mac; these systems use different characters to signal the end of a line.
As you read the input files, remember that the read-line function reads an entire line of input and returns a string (this is useful
  for reading strings that may contain blanks, without requiring the user
  to enclose the strings in quotation marks).  The read function reads the next Scheme expression (e.g., a single number) from the
    input.  You'll also want to call read-line (ignoring its return value) after reading numbers from a line; this will
      put you at the start of the next line so you're ready to read what's
      there.   Some sample code using read-line is available. 
[This organization of the input files should make it easy for you to use read and read-line to create the internal representation of the data in your program; your task is to fit these components together, and you should spend some time trying to do that. But if you decide you need some additional guidance, start by reading the assignments file, because it's simpler. As always when designing programs with more than one "layer" of data structures, you should treat one layer at a time. For the file of assignments, for example, you should have (a) a function to read the information for one assignment and create that assignment, and (b) a function to read the number of assignments (from the first line of the assignments file), call the single-assignment-creation function that number of times, and finally create the collection of assignments. Do make sure you  understand how to use read and read-line: Choose the right function for the right kind of data, as described above.]
 Define functions that will fill the assignment
  and student collections by reading these files. It will also be helpful to write functions that print out these collections legibly; they'll help you in testing.
 (c) Since assignments don't necessarily
  all have the same number of points possible, it will be useful to compute
  and store a scaled score on each assignment (i.e., a number from 0 to 100,
  calculated from the student's raw score and the number of points possible
  on the assignment).  It might be easiest to implement this by storing for
  each student a second, parallel vector of scaled scores.
 You should also compute and store for each
  student the weighted overall score in the course, a number from 0 to 100
  calculated from the scaled scores and the weights of each assignment.
 To make the output look reasonable, use the
  function format-decimal. It takes two numbers (the first is the value to display, the second is
    the number of digits after the decimal point) and returns a string, suitable
    for use as an argument to display.
      So, (format-decimal 25 2) returns "25.00" and (format-decimal 17.9876 3) returns "17.988".
 (d) Your program will have a text-based
  menu interface like the one in the restaurants programs.  It should include
  commands to
 Search for a student by name or by ID (and
    display the student's information).
    
   Display all the students' information sorted
    by name or by overall score.  [If your collection of students is a list,
    you can use the predefined quicksort function with a carefully constructed lambda expression to accomplish this
      automatically.]
    
   Display the information for all the assignments.
      
   Display a histogram for overall course scores
    or for the scores on a single assignment (see below).
    
   Quit.
 [Your first step here should be to write the
  menu-handling code, based on the restaurants programs, before writing code
  to do anything when the user selects a given command.  For each menu command besides Quit, just print out "Received command X," where X is the command; we call this a "program stub," a simple placeholder so you can see that the menu framework works before you write the code that actually performs each command. Then take each command, one by one, and code and test its implementation. You should use the restaurants code as a starting point, just changing the things you need to change for this task; don't try to create a new view/controller from scratch. Start with displaying the assignment information (because that's
  the easiest).]
 (e) A histogram is a bar graph showing
  the distribution of all the students' scores, from highest to lowest.
  Given a list of scores, for example
(list 23 23 20 18 25 14 16 18 15 16 23)
 the histogram should display
   25 *
     24
     23 ***
     22
     21
     20 *
     19
     18 **
     17
     16 **
     15 *
     14 *
 Hints:  You might find it particularly convenient
  to create a vector of frequencies where (vector-ref
    freqency-vector N) contains the number
      of students whose score was N.  A simpler histogram would display the frequencies
      of scaled (0 to 100) scores, with 101 lines from 100 down to 0; start by
      implementing it that way.  You'll want to use the predefined round function to convert all the scores to integers.
 (f) Implement at least one of the following
  enhancements.  In a comment at the top of your definitions, list which one(s)
  you implemented.  Note that it is never acceptable (in class or in the real
  world) to submit buggy code.  It is much better to deliver fewer features,
  but features that work correctly, than to provide fancier functionality
  that "almost works."   [This doesn't mean that you have to
  implement every single aspect of a bullet item below, but it does mean that
  whatever you do implement must work correctly and consistently with the
  rest of your program.]
 Allow the user to change assignment and student
    information within the program, rather than just by editing the data files.
    Of course this also requires recomputing scaled and weighted scores and
    writing the files out when the user quits the program.
    
   Allow the user to add new students and new
    assignments, and to remove students and assignments, within the program
    rather than just by editing the data files.  This will require creating
    new, larger (or smaller) vectors (or else creating vectors with a default
    size and keeping separate track for each vector of how much of it is actually
    being used).  Adding a new student would require adding scores for that
    student on each assignment (although you could implement a default score
    of zero), and adding a new assignment would require adding scores for all
    students on that assignment (though you might handle it by reading the new
    scores in from a separate file).
    
   Improve the interface somehow (to give the
    user clearer or better organized information, help the user navigate through
    the functions and menus, or make it easier and less error-prone to enter
    data--not just to add decoration that doesn't serve any purpose).  For
    example, you could allow the user to request a list of students sorted by
    score on an individual assignment (or to specify sorting in ascending or
    descending order).  Or, you could implement a log file that saves a record
    of each transaction (each operation that changes the data); this could be
    useful for reconstructing the data files if they get damaged or deleted.
    
    
    
   Implement some error checking.  What if the
    input file doesn't exist (or what if it does exist when you ask to create
    a new file)?  What if the input data are not in the right order or format?
    Do the weights of the assignments add up to 100%?  And so on.
     
   Implement hierarchical, nested assignments.
    In a typical course, there might be lab assignments worth 30% of the course
    grade (let's say five assignments, each equally weighted at 20% of the
    total lab assignment score), a midterm worth 25% of the course grade, and
    a final exam worth 45% of the course grade (made up of eight problems whose
    points total to 100).  The point is that each graded item can be a single
    item (as we've been handling all along) or it can be a compound item
    (with its overall weight in the course along with some number of subcomponents
    (each of which has its own name, possible points, and weight as part of
    its parent component).   Of course that means a subcomponent is just a graded
    item, and that there's no reason subcomponents can't have their
    own subcomponents.  You'll need to represent these graded items in the
    "model" part of the program and work out how to read, write, and
    display them.
    
   Enhance the file-handling.  You could get a
    name or number for each course; incorporating that into the names of the
    data files would allow using the program for more than one course.  Then,
    when the program starts, you'd need to ask the user which course to
    handle.  You might also give the user the option to create a new class rather
    than reading information from an existing one, or to choose any name for
    the assignment and student files.
  Add a command to produce a histogram of the scores for a given graded item (e.g., just the midterm).
   Enhance the histogram in a variety of ways:
   The original histogram displays scores in one-point
      intervals.  That could lead to a pretty big histogram on a 100-point test.
      This interval is sometimes called the "bin size." You can allow
      the user to specify the bin size and display scores grouped accordingly.
     Make the upper end of the top bin's interval
      the highest score on the list (so if nobody scored above, say, 80, you don't
      have empty space between 80 and 100.  Likewise, don't go lower than
      the lowest score.
      
     Take the number of bins as the parameter (so
      you'd calculate the bin size based on the top score, the bottom score,
      and how many bins the user wants).
     Take the lowest 5% of the scores and collect
      them into the bottom bin, "N points and under."  This may spare
      the feelings of the person who had the very lowest score in the class.
      
     Scale the histogram horizontally, too:  The
      bars may be too wide if the class is large.  Let the user specify the length
      of the widest bar and scale the others accordingly.
     Print the histogram horizontally (on its back,
      so to speak).
      
     Use the functions in the picturing-programs.rkt teachpack to produce the histograms graphically.
        
    
   Implement the collection of students as a binary
    search tree, sorted by the students' names.
   Distinguish between no score (which would be
    appropriate if someone missed an assignment entirely) and a zero (for someone
    who did the assignment but earned zero credit).
 (g) Submit the file containing all
  your definitions as usual via Checkmate.
 (h) Complete your  last partner evaluation
  form at eee.uci.edu.  Please do this by Saturday morning at the latest,
  or you won't get credit.

 Written by David G. Kay for the innaugural Informatics Core Course, Fall 2004, and modified Fall 2005, Fall 2008, and Fall 2009. Modified Fall 2010 by David G. Kay to reflect the Picturing Programs text and Fall 2011 to include multiple starting points.

David G. Kay, kay@uci.edu 

Wednesday, November 23, 2011 12:12 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab1.html
##-----------------TITLE------------------------##
Lab Assignment 1
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 1 

This assignment is due at the end of lab on
Friday, September 30.

Choose a partner for this assignment, someone
you haven't worked with already, and make sure the TA knows who your partner is (by using his online signup sheet). Refer back to the pair programming guidelines for tips on choosing partners.
(a) With your partner, do these exercises
  from the Chapter 1 of the PP textbook: 1.5.4, 1.5.5. Type your solutions into the definitions (top) window of DrRacket. Remember to follow the pair programming model: Two people, one computer; the "driver" types, the "navigator" contributes questions and suggestions; the partners change roles frequently. This is how you will do all your work in the lab, all quarter long; the partners just change every week.
(b) Do exercises
  3.3.5 and 3.3.6, for which there isn't anything to turn in. Then do exercises 3.3.7, 3.5.5, 3.5.8, and 3.5.9.
(c) Do exercises 4.2.2, 4.3.1 (because knowing and using the right technical terminology is important), 4.4.2 (for which there's nothing to turn in), and 4.6.3 (you don't have to turn this one in, either, since it's a pencil-and-paper exercise, but you do have to try it; check with the TA or tutor if you run into trouble).
Now that you are writing functions, it is absolutely essential that you follow the design recipe. Even if many of the answers come easily now, it's important to get into the habit. In particular, every function you write should have a contract/signature, a purpose statement, some examples of the expected results (using check-expect, at least for the non-graphic functions)—all of these come before you write the function itself—then a skeleton or function header ((define f (lambda (a b) ...))), an inventory (this is the one part that you can treat as optional, if you really already know how to write the function; if not, it's helpful to lay out all the possibly useful components), the function body (finally), and tests (which are just the examples you created earlier).
(d) Do exercises 5.3.7, 5.4.7, 5.8.6, 5.9.7, 5.11.5, 5.14.1, and 5.14.2. Follow the design recipe, as described above, for every function you define all quarter long.
(e) Do exercises 6.1.3, 6.2.3, 6.4.2, 6.4.4, 6.5.2 (note that the stick figure is available on the textbook web site, but you're free to use whatever other image you like), 6.6.2, and 6.7.1.
(f) If you have more time, go back and experiment with some other exercises or animations, especially the ones (like 3.5.6 and 3.5.11) that suggest that you "go wild."
(g) You should be able to place all the definitions
and tests into one definitions file.  Click Run and make sure all the tests still pass. (If you run into problems, it's probably because you have more than one function with the same name. Change one of the names [everywhere necessary] and try to Run again.) It's essential that the definitions file you submit doesn't produce any error messages, because that will keep us from evaluating any of your work that appears after the error-producing code.
Include your name and your partner's
  in a comment at the top, save the file, and submit it via Checkmate.
(h)  Remember that each partner must
  complete a partner evaluation form and submit it individually using the Survey tool at eee.uci.edu. Do this by the end of the day on Friday. Remember that your participation score suffers if you don't do it. 


Written by David G. Kay to reflect Picturing Programs by Stephen Bloch, Fall 2010.

David G. Kay, kay@uci.edu 

Monday, October 3, 2011 7:08 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab0.html
##-----------------TITLE------------------------##
Lab Assignment 0
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
 Lab Assignment 0 
 This lab assignment is due at the end of lab on
  Friday, September 23. 
 The next lab assignment (Lab Assignment 1) will be available on
  the web by Friday and will be due the following Friday at the end of lab; we'll follow
  that pattern all quarter.  
 (a) Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this Friday. All your computer-based work on this (and every) lab assignment must follow the pair programming guidelines.
 (b) It's especially important that
  you be able to receive electronic mail sent to your UCInet ID (you@uci.edu).
    You may redirect this mail to another account of your choosing (see the
    course reference sheet), but don't let that mail go unread.  Also, be
    sure your UCInet account doesn't exceed its disk quota.  When it does, you
    won't receive official Email.
 With your partner, test this out by sending
  each other Email at your UCI addresses. There's nothing to turn in for this part. 
 (c) Locate and launch the DrRacket
  software. 
 Each DrRacket window has two panes:  The bottom
  half is the interactions (or transcript) window, where you can type Scheme
  expressions and see the interpreter evaluate them immediately.  To type expressions or programs you
  wish to save, you will use the top pane (the definitions window) and click "Run" (at the top right) to evaluate the code (this makes the code
  available for use in the interactions window below).
 The DrRacket system actually includes many
  different versions of Scheme.  We'll be using  a graduated series of languages that build up to full
  Scheme step by step; in DrRacket, this series is called the "How to Design Programs teaching languages."  (One might wonder why it's necessary to take these
  "baby steps"; the answer is that by restricting the language features
  to those that a student needs at the moment, DrRacket can provide error
  messages that describe the actual problem more clearly.  Programming language
  error messages are notoriously inaccurate. The compiler is just a computer
  program, so it can't know for sure what the programmer intended when
  it finds something wrong. But with these different language levels, DrRacket
  does better than most.)  We will start with the "Beginning Student"
  language; if it's not the level currently installed (look for "Programming language"
  in the lower pane), change it in the Language menu and click Run again.
Most modern programming languages provide some basic features and allow the programmer to select specific, specialized features for the task at hand (e.g., network programming or animations or cryptography). We call these specialized collections libraries (or "teachpacks" in DrRacket). For much of the course, we will use a teachpack called picturing-programs.rkt; this supports the image processing and animation described in the textbook.
The ICS lab machines should already be set up with DrRacket, Beginning Student Language, and the picturing-programs.rkt teachpack. Chapter 0 of the textbook describes how to install the picturing-programs.rkt teachpack on your own machine. There's nothing to turn in for this part.
 (d) Experiment with DrRacket to get
  familiar with it, following the suggestions below. One person "drives" (types); the other "navigates" (observes, questions, suggests); if you don't know what this is about, go back and read the pair programming guidelines. The point of this assignment is to get you familiar with the mechanics of DrRacket, Scheme, and pair programming.
 Try evaluating some expressions, like 
(* 3 4 5)
   and 
  (expt 2
    5)
  
     and 
    (gcd 15 230).  (In DrScheme, calculating
        greatest common divisors is predefined (built in)). 
 Type in some definitions of symbols in the
  interactions window, like 
  (define
    number-of-students 54)
     and 
    (define number-of-staff 7)
   and then try 
    (+  number-of-students number-of-staff).  There's nothing to turn in for this part.
 (e) The "driver" and "navigator" should switch roles now. Even though you haven't typed anything in the definitions window, click the Run button before doing these image-processing exercises; that activates the picturing-programs.rkt teachpack.  (But don't click Run again while you're working on this part.  You're working in the 
interactions window and clicking Run clears it out before you can save it.)
Do exercise 1.2.1 in the Picturing Programs textbook; you can find it on line at www.picturingprograms.com.  (As the book suggests, pick smallish images.  DrRacket can handle a 12-megapixel image from a digital camera, but when the time comes to submit your work, huge images will clog up Checkmate.)
Switch roles, then do exercise 1.2.2. Switch again and do exercise 1.2.3. Do exercises 1.2,4, 1.2.5, and 1.2.6, switching roles after each one.
Save a copy of the interactions window that shows
  your work for this part (using Save Other and Save Interactions As from the File menu).  A
  good name for the file would be lab0e.rkt; stick with a naming pattern like this for the rest of the quarter.
  It's fine if your interactions show false starts and mistakes; it's also fine
  if you just produce a short, clean copy.  Edit the file to make sure it
includes your name and your partner's; submit this file via Checkmate. (Don't know what Checkmate is? Look at the "What to do this week" section of the course syllabus).
(f) The "driver" and "navigator" should switch roles again. The factorial function (written
  in mathematical notation with an exclamation point, so "n factorial" would be n!)
  is used in calculating how many ways there are to arrange things (like the number of different ways to arrange five students in a row).  The value
  of n! is n · (n-1) · (n-2) · ... · 1, so 5!
  = 5 · 4 · 3 · 2 · 1 = 120.
 Type the following function definition into
  the definitions window.  Actually do the typing so you can get used to the
  way it works; don't just copy and paste.  (We'll go over the details
  of this code in class some time soon; for now, this is just a typing exercise
and you shouldn't try too hard to figure out how it works. If you're not used to typing programs, be careful to type accurately.) Watch what happens every time you type a right-parenthesis.


;; fact: number -> number
;; Compute n! (n factorial).
(check-expect (fact 0) 1)
(check-expect (fact 5) 120)

(define fact
  (lambda (n)
    (cond
      ((<= n 0)  1 )                 ; 0! is 1 by definition
      (else (* n (fact (- n 1)))))))
Notice how DrRacket indents and highlights
  blocks of code so you don't lose your place.
 Don't forget to click Run.  Now try evaluating
  expressions like 
  (fact 5), (fact 50), (fact 120), and (fact 500).
      Next, evaluate
      (fact (fact 5)).  Scheme can handle long numbers
          effortlessly, but any computer is finite; what do you think might happen
          if you evaluate
          (fact (fact 50))?  You can try it, but you'll
              have to stop the evaluation (click the stop sign) if you don't want to wait until the machine
              finally runs out of memory.
 Save a copy of the interactions window that shows
  your work for this part, as described in part (e).  Make sure both partners' names are in the saved file.
 (g) Switch roles again. Follow this role-switching pattern in all your lab work this quarter; we won't keep mentioning it.
Scheme represents and manipulates numbers more flexibly than most programming languages, in part because it doesn't tie what the user sees to the way the hardware stores the number.
What is the value produced by 
(/ pi 2)?  The result is prefixed by #i,
    which signals "inexact representation"; this means that the decimal
    number may be rounded off (as the value of pi would have to be).
 Enter this definition (you can copy and paste
  it into the definitions window): 
  


(define decimal-format
  (lambda (num)
    (string->number (number->string (exact->inexact num)))))
 Then evaluate (decimal-format (/ pi 2)). Type it at the bottom of the definitions window and click Run; that will save you from retyping it later.
Using decimal-format  gives you a more human-readable number, in case you need
  to produce polished results.  (There are also ways to specify the precise
  number of digits, but that's for another time.) Next, evaluate 
  (/ 4 3)and 
  (+ 125 (/ 22 7));
    DrScheme indicates that the results are repeating decimals with a bar over the repeating digits. Evaluate (/ (fact 5) (expt 7 2)); this result repeats, too, but not in a discernible pattern. Save a copy of the interactions window that shows your work for this part so far.
 Now, go to the Language menu, select Choose
  Language, and click Show Details.  Then select Mixed Fractions.
 Next, evaluate again the four expressions above. (See why it's convenient to have them in the definitions window?) These results, in fractional form, are not what we expect to see on a computer, but they're useful in further calculations because nothing is lost by rounding off to a decimal representation. Try some other divisions.
Save a copy of the interactions window that shows your work for this second part, following the instructions in part (e) above. Notice that the fractions in the file are saved in a slightly different form than the one DrScheme uses in the interactions window. Combine both files for this part into one, remembering to include both partners' names, and submit the file via Checkmate.
 (h) Remember that each partner must
  complete a partner evaluation form and submit it individually.
  Do this by connecting to eee.uci.edu and choosing the Survey tool for Informatics 41.   Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation
    by the end of the day on Friday, or Saturday morning at the latest.  It
only takes a couple of minutes and not doing it hurts your participation score.
What to turn in: Submit via Checkmate the interactions (transcripts) for parts (e), (f), and (g) above. It would be an excellent idea to go back and re-read parts (e), (f), and (g) carefully now, to make sure you've completed all the steps specified. Also remember that each student must complete a partner evaluation form by logging in to eee.uci.edu and selecting the Survey tool; these evaluations contribute to your class participation score. Get in the habit of doing this every week. 
 Based in part on ICS H21 and H22 assignments
  by David G. Kay from Fall 2003 and earlier; modified by David G. Kay for
  the Informatics Core Course, Fall 2004–Fall 2007 (with Alex Thornton in Fall 2006 and Rich Pattis in Fall 2008. Modified by David G. Kay to reflect Picturing Programs by Stephen Bloch, Fall 2010.

David G. Kay, kay@uci.edu

Tuesday, September 27, 2011 9:08 AM

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/hw/lab8.html
##-----------------TITLE------------------------##
Lab Assignment 8
##------------------TEXT------------------------##
INFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 8 

This assignment is due at the end of lab on
Wednesday, November 23, which is the day before Thanksgiving. 

Choose a partner for this twelve-day assignment, someone
you haven't worked with already. Choose someone whose Thanksgiving schedule is compatible with yours; if you won't be here for lab on the day before Thanksgiving (when the lab is due), pick someone who's able to work with you for a few extra out-of-lab hours before then.
(a) We have posted some code to implement parts of a music-playing application like iTunes.  This is similar to the code we developed in class. You should download, install, and run this code now. And then you should read it. Reading code is an important skill,  one that beginning programmers ignore all too often. Sure, code isn't as easy to read as a novel; you need to go over it carefully and ask yourself what it does and how it works. Don't let this intimidate you! Just take it one function at a time.
We used  the following data definitions to define a music collection in the form of "albums of songs":

   A music collection is a list of albums.
    An album is a number (a unique ID number), a string (the artist's name), a string (the title), a number (the year), and a list of songs.
    A song is a  number (the track number), a string (the title), a number (the length in seconds), and a number (the play count, indicating how many times the song has been played).
  These data definitions led us to write these structure definitions:
  (define-struct album (id artist title year songs))
    (define-struct song (track-num title length play-count))

(a.1) We wrote a function called top-10-songs, which finds the songs in a music collection that have the ten highest play counts.  Generalize this function as top-n-songs, which takes a number n and a list of albums and returns a list of the n songs with the highest play count.  This is simple given the existing code.
(a.2) Write a function unplayed-songs, which takes a list of albums and returns a list of the songs that have never been played.
(a.3) Write a function favorite-album, which takes a list of albums and returns the album that is the "favorite."  We'll define the "favorite" album to be the one that the user has spent the most time listening to.  (Hint: The total time the user has spent listening to an album is a function of the play counts and song lengths.)
Try to work out this function out together; that's how you learn. Use the following hints only if you're totally stuck (and then take them just one at a time): (i) Write a function song-listening-time, which takes a single song and returns the total number of seconds the user has spent listening to it (see the hint above). (ii) Write a function album-listening-time, which returns the total listening time for all the songs in an album together. (iii) Write a function album-listening-time>?, which takes two albums and returns true if the total listening time of the first album is greater than the total listening time of the second. (iv) Use quicksort and first-n and the functions you defined to implement favorite-album.
(a.4) Time spent listening to an album isn't the only metric for defining a "favorite" album.  Generalize your favorite-album function so that it takes another argument, a "favorite measurement function"; that way, favorite-album can be called with any metric for determining the favorite.  (Before you get too far, consider what the appropriate contract for the favorite function might be, if the goal is to find the one and only favorite, rather than a list of many albums that the user likes.)  Add a comment after your generalized function that suggests, in English, at least two other ways to define a favorite album; show, for each of your suggestions, how you would call your generalized function to find the favorite album according to your suggestion.
(a.5) One useful option that iTunes provides is a "Search" box, into which you can type a keyword, and iTunes will automatically search your collection for songs containing that keyword in their title, their artist, or their album's title.  Implement a function music-search that does the same, returning a list of matching songs given a string containing the search keyword.  (You'll likely find the string processing code from Lab 6 helpful; in fact, this entire task is quite similar to a task you did for Lab 6.)
 Submit your definitions via Checkmate.
 (b) Three of the five functions you wrote in part (a) return a list of songs.  Unfortunately, our "album of songs" model for a music collection has a drawback: An individual song by itself doesn't contain enough information to display it usefully (on an iPod screen or on a web page, for example) because the album information is not included.  In the code, we solved this problem by introducing a new structure definition that combines information about a song and the album that contains it.  That definition looks like this:

    (define-struct song-display (artist a-title year track-num s-title length play-count))

Rewrite top-n-songs, unplayed-songs, and music-search so that they each return a list of song-displays, rather than a list of songs.  (Note that if you solved top-n-songs and unplayed-songs using a similar technique to the one we used for top-10-songs, you'll find that you don't have to change very much of your existing code to make this work.  On the other hand, it's likely that music-search can be significantly simplified.)
 Submit your definitions via Checkmate.
 (c) We have talked often in class about how the model (the data structure) that you choose to represent your data can  have a profound impact on how hard it is to operate on that data—how difficult it will be to write the code and also how much time it will take for the computer to execute it.  Sometimes, the data model you choose may even make some tasks impossible or too inefficient (e.g., you can't search an unordered list in logarithmic time).
Let's consider three ways that we might model a music collection.  (This is hardly an exhaustive list, but it includes three alternatives that are available to us based on what we've learned so far this quarter.)
The "album of songs" model we used in parts (a) and (b), where a music collection is a list of albums, each of which contains a list of songs.The "list of songs" model, where a music collection is represented as a list of song-displays, using the definition of song-display from part (b).The "BST of albums of songs" model, where a music collection is a binary search tree of albums, each of which contains a list of songs, implemented using the following structure definitions: 
      
    (define-struct node (value left right))
    (define-struct album-info (id artist title year songs))
    (define-struct song-info (track-num title length play-count))
      Each node in the binary search tree contains one album as its value.  The albums are sorted in order by the albums' names.  An empty binary search tree is represented by empty.
 (c.1) Using the "albums of songs" model, write the function album-names, which takes a music collection and returns a list of the names of all albums in the collection.
 (c.2) Write the album-names function again, this time so it takes a music collection in the "list of songs" model.  A particular album name should only appear once in the output list.
 (c.3) Write the album-names function one more time, this time so it takes a "BST of albums of songs."
 (c.4) All three of these functions have the same basic contract—take a music collection as input and return a list of the names of all the albums in the collection—but they differ in terms of how they expect the collection to be organized.  Will all three functions give the same output if given the same input collection?  If not, what will be different about the output of one as opposed to the others?  What does your answer to these questions suggest about which of the models are appropriate to use in an actual music application like iTunes?
 (c.5) Which of the models would you expect to enable the best implementation of a find-album function, if we measure "best" based on which one will run the fastest if given a music collection with tens of thousands of albums in it?  Why?
 Collect your definitions and your answers to (c.4) and (c.5), expressed as comments, and submit them to Checkmate.
 (d) (optional, but there's a required section after this) A favorite feature of iTunes is the "smart playlist" feature.  Rather than selecting songs manually to include into a playlist, a "smart playlist" allows you to specify a set of qualities that a song can have—year of release, play count, artist, and so on—and then allow iTunes to select them for you, and even keep the list updated as your collection changes over time.  We can implement this easily in Scheme like this:

    (define smart-playlist
      (lambda (quality-func collection)
        (filter quality-func (all-song-displays collection))))

Recall that all-song-displays is a function that takes a music collection and turns it into a list of song-display structures.  (While our version takes an "albums of songs" collection and returned a list of song-displays, you could replace all-song-displays with a function that takes a collection implemented using some other model and transforms it into a list of song displays.) The quality-func parameter is a Scheme function that selects songs that have whatever quality defines our smart playlist.
 The challenge in implementing a "smart playlist" feature in Scheme is handling the quality function.  While you could easily implement a single quality function, the trick is that you'd like users to be able to specify multiple qualities—say, short songs about love written before 1970. We need a way to combine into one function a series of predicates (here, the length less than, say, 3 minutes; the title containing "love"; and the year less than 1970). One way would be to code up a Scheme function using and. We could do that by hand, but we'd like to design a more automated way.
Suppose we already have a user interface that prompts the user for smart playlist qualities.  You've seen this kind of thing: There's a pull-down menu for which field, a pull-down for the comparison operator, and a text field for the value to compare it with, for example. How might that user interface (part of the "view" portion of the program) represent each quality for the "model" part of our program to process? (The "model" part would then have to turn a list of these qualities into Scheme predicates and filter the songs by each item on the list in turn.) One way to represent the qualities (following a common programming idiom) is as "quality-func-options": Each quality-func-option describs one kind of predicate, one kind of question we can ask about a song. Let's say that each quality-func-option will be one of these structures:
 ;; Songs played by a particular artist.
  (define-struct quality-func-artist-option (val))
;; Songs with a particular title.
  (define-struct quality-func-title-option (val))
;; Songs released between "from-val" and "to-val". 
  (define-struct quality-func-year-option (from-val to-val))
;; Songs played at least a specified number of times. 
  (define-struct quality-func-min-play-count-option (val)) 
 Write a function called make-quality-func that takes a list of quality-func-options and returns a function that takes a song-display and returns true if it is a "quality" song (according to the options given) or false if it's not.  When the list of qualities is empty, the quality function should always return true.  (Hint: The quality function ends up being a chain of functions, each one checking one quality and then calling the next function in the chain; there's one link in the chain for each quality option in the list.)
 Submit your definitions to Checkmate.
(e) In DrRacket, vectors are available in the Advanced Student language. Change to that language in DrRacket and use it for the rest of the quarter.
As we discussed in class, a vector in Scheme is a linear data structure containing a collection of homogeneous items. Vectors are like lists, except that we can access any element of the vector (the first, the last, any one in between) in O(1) (constant) time. That's not true of lists, where to get to the end of the list we have to work our way down the list element by element, (rest L) after (rest L); that's O(n) (linear) time. Vectors achieve constant-time access because they're stored in contiguous memory locations, so we can get the address of any element with one calculation (using the starting address of the vector, the element number, and the size of each element). In Scheme and related languages, lists are the most common structure for collections of data. In many other languages, including Java and C++, vectors (also called arrays) are the most commonly used structure for collections. Both language families offer both lists and vectors/arrays; it's just a question of which idiom is most common in which language.
Figures 81 and 82 in the online version of Chapter 29 of the How to Design Programs text show code for traversing a vector, processing each of its elements.  The code in the figures adds up the elements of  a vector of numbers, but we can use it as a framework for all kinds of vector processing. 
Remember that in most modern programming languages, the elements of a vector are numbered starting at zero; we call this zero-based indexing. That means that (vector-ref V 3), for example, returns the fourth element of V.
(e.1) Figures 81 and 82 show code that sums all the elements in a vector of numbers; Exercise 29.3.6 shows code that sums all the elements in a list of numbers. What's the O-notation for the execution time of the vector-based code? What is it for the list-based code (noting, as the exercise states, that a call to list-ref is O(n))?
(e.2) Define this function:
;; vector-contains-turkey?: vector-of-string -> boolean
;; Return true if the string "turkey" appears anywhere in the vector, and false otherwise
Next, generalize the function to vector-contains? (which might also be called vector-member?):
;; vector-contains?: vector-of-string string -> boolean
;; Return true if the string appears anywhere in the vector, and false otherwise
Next, write a function that says where an item occurs in a vector. It will be easiest if you start at the right end and count downwards.
;; vector-position: vector-of-string string -> number
;; If the string appears in the vector, return its position number (zero-based).
  ;; If not, return -1.
Finally, write a function that counts the number of times an item occurs in a vector:
;; vector-occurrences: vector-of-string string -> number
  ;; Return the number of times the string occurs in the vector
(e.3) Define the function vector+ as described below. The easiest way will be to use build-vector. Think of this function using this scenario:  You have a class of 47 students, each student
    takes a two-problem quiz, and all the students' scores for a given problem
    are stored in a 47-element vector (with the score for Student 1 in the first
element, Student 2 in the second, and so on).  Then vector+ produces a 47-element vector with the total score on the quiz for each student.
;; vector+: vector-of-number vector-of-number -> vector-of-number
  ;; Return a vector containing the sum of the corresponding elements in the input vectors
Next, define the function total-quiz-scores that takes as input a list of score vectors as described above (representing
  the scores on problems 1 through n of some quiz) and returns a vector
  containing the total scores for each student on the quiz.  [Hint:  What
  pattern/template do you use to process a list of anything?  Second hint:
Draw a picture of this data structure to help you see how it's organized.]

 Submit your definitions via Checkmate.
 (f) Remember that each partner must
  complete a partner evaluation form via the Survey tool on eee.uci.edu.  Please
  do this as soon as you complete and submit the lab.

 Based in part on ICS H21assignments by David
  G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009, Fall 2010. InfxTunes example by Alex Thornton.

David G. Kay, kay@uci.edu 

Thursday, November 10, 2011 10:15 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/scheme/finger.html
##-----------------TITLE------------------------##
Scheme Finger Exercises
##------------------TEXT------------------------##
INTRODUCTION TO CS *UC
IRVINE * D. G. KAY   SCHEME
FINGER EXERCISES * PAGE


Introduction to Computer Science * UC Irvine
* David G. Kay

SCHEME FINGER
EXERCISES


We provide these short exercises to give you
practice with some of the fundamental mechanics of Scheme.  We recommend
that you try exercises in each section.  The later exercises in each section
are more complex than the earlier ones, so if you feel comfortable with
the topics, just try the last exercise or two in a section.  If you find
that you can't do them quickly and correctly, try the earlier ones first
 Of course you should ask your TA or instructor if you'd like further
explanation.  [Since these are brand new, it is just barely possible that
some errors have crept in.  If you think you've found one, please contact
kay@uci.edu.]

The answers appear on this page in white text;
you can view them by selecting or highlighting the area below the problem.
 You'll get the greatest benefit by using pencil and paper to write
down your own answer before looking at ours; otherwise, it's too easy
just to browse through, thinking, "Yes, that looks right," without
building your own essential understanding.

If we don't show the definition of a function
here, that function is predefined in (built into) DrScheme; the Help Desk
will describe it.


Simple and nested arithmetic expressions. 
What is the value of each expression?

(+ 25 30)

55

(+ 40 50 60)

150

(- 15 5)

10

(- 5 15)

-10

(* 5 (+ 2 3))

25

(/ 100 (- 7 2))

20

(* (- 10 2) (+ 1 4))

40

(+ (- 12 4) (* 2 (+ 5 1)))

20

(+ (* (- 5 3) 6) 3)

15

(+ (* 5 6) (/ (* 6 4) (- 20 (* 7 2))) (- 5
10))

29


Defining constants.  What is the value returned
at the end of each sequence of expressions?

(define SIZE 15)

(+ 1 SIZE)

16

(define HEIGHT 10)

(define WIDTH 20)

(* WIDTH HEIGHT)

200


Defining functions.  What is the value returned
at the end of each sequence of expressions?

(define triple

   (lambda (num)

      (* 3 num)))

(triple 5)

15

(define area

   (lambda (height width)

      (* height width)))

(area 10 12)

120

(define total-pennies

   (lambda (dollars cents)

      (+ (* dollars 100) cents)))

(total-pennies 5 43)

543

;; [Same definition of total-pennies]

(total-pennies 43 5)

4305

(define SECONDS-PER-MINUTE
60)

(define MINUTES-PER-HOUR 60)

(define HOURS-PER-DAY 24)

(define total-seconds

   (lambda (days hours minutes seconds)

      (+    seconds 

         (*    SECONDS-PER-MINUTE


            (+   
minutes 

               (*
   MINUTES-PER-HOUR 

                 
(+ hours (* HOURS-PER-DAY days))))))))


Boolean expressions with relational operators.
 What is the value of each expression?

(= 12 (* 4 3))

true

(> 12 (* 4 4))

false

(<= (* 5 4) (* 3 7))

true

(< (* 6 3) (* 9 2))

false


Boolean expressions with predicate functions.
 What is the value of each expression?  As you evaluate each sub-expression,
ask yourself what type of value (number, boolean, ...) the function returns.

(even? 16) ; Is the input an even number?

true

(odd? (* 6 3))

false

(number? (= 5 (+ 3 2))) ; Is the input a number?

false; = returns a boolean, not a number

(equal? (negative? (- 10 5)) (odd? (* 4 2)))

true; both inputs to equal? are false


Boolean expressions with logical operators.
 What is the value of each expression?

(and (= 5 (+ 4 1)) (even? 12))

true

(and (odd? 17) (odd? 18) (odd? 19))

false

(and (even? 100) (odd? 101) (even? 102) (odd?
103))

true

(and (odd? 2) (odd? 4) (odd? 6))

false

(or (= 5 (+ 4 1)) (even? 12))

true

(or (odd? 17) (odd? 18) (odd? 19))

true

(or (even? 100) (odd? 101) (even? 102) (odd?
103))

true

(or (odd?2) (odd? 4) (odd? 6))

false

(not (odd? 13))

false

(not (even? 13))

true

(not (= (+ 4 3) 7))

false

(not (= (* 4 2) 9))

true

(or (odd? 14) (and (= (+ 6 1) 7) (< (+ 6
2) 9)))

true

(and (or (= (+ 6 1) 7) (< (+ 6 2) 9))

     (odd? 14))

false

(define A true)

(define B false)

(equal?   (not (and A B))

      (or (not A) (not B)))

true; in fact, this is one of DeMorgan's
laws.  It's true no matter what A and B are.

(define A false)

(define B false)

(equal?   (not (or A B))

      (and (not A) (not B)))

true; this is another of DeMorgan's laws.


Cond expressions.  What is the value returned
by each expression?

(cond

   ((= 6 (- 5 1)) 17)

   (else 18))

18

(cond

   ((even? (* 5 4)) 21)

   (else 20))

21

 


Expression types:  What type of value
(number, boolean, symbol) does each expression return?

Include some conds.


Symbols.

What type.

Structure definitions

Structure manipulations--constructors

Structure manipulations--field selectors

Structure manipulations--type-checking predicates

What type

Function definitions

lambda; 1 arg, 2 args, 3 args


Function calls

What type returned?

List stuff

 

 

 

 

 

 

 

 

 

 

 






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Sunday, October 9, 2005 -- 8:48 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/questions.html
##-----------------TITLE------------------------##
Sample Questions
##------------------TEXT------------------------##
Informatics 41 * Fall 2009 * David G. Kay *
UC Irvine

SAMPLE QUESTIONS

Below are some questions of the sort that could
appear on our final exam.  This is not a sample exam--it's not the same
length, it doesn't have the same mix of questions, it doesn't cover
all the topics.  But these questions will help you review some important
concepts and most of them have appeared on exams in the past.  Try to do
them by yourself, but then compare your answers with your classmates. Do
this long enough in advance that you'll have a chance to ask us if there
are issues you can't resolve yourself.

(a.1)  Write a definition for the function
vector->list.
 (Hints:  Remember that vectors are zero-based.  Be careful not to produce
a reverse-order list.  Use an auxiliary function.)

; vector->list: vector  ->  list

; Return a list containing the same elements
as the vector argument, in the same order.

; (vector->list (vector 1 2 3) returns
(list 1 2 3)


(a.2)  Write a definition for the function
list->vector.
 (Hint:  You can do this without an auxiliary function and without vector-set!,
but you may use them if you need to.)

; list->vector: list  ->  vector

; Return a vector containing the same elements
as the list argument, in the same order.

; (list->vector (list 1 2 3) returns
(vector 1 2 3)


(b)  Consider the following function:


(define (DoSomething a b)  ; assume b >=
0

  (cond

    ((= b 0) a)

    (else (DoSomething (sub1 a) (sub1
b)))))


(b.1) What is returned by each of the
following statements?

   (DoSomething 3 1

   (DoSomething 6 2)

   (DoSomething 29 5)

   (DoSomething 25000 23000)

(b.2) In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.


(b.3)  Now look at this function:


(define (DoSomethingElse a b)  ; assume
b >= 0

  (cond

    ((= b 0) a)

    (else (sub1 (DoSomethingElse a
(sub1 b))))))

Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.


(b.4)  Which of these routines are
tail recursive--DoSomething,
DoSomethingElse,
neither, or both?  For any non-tail-recursive routine, indicate (by circling
it) which specific operation in its code makes it non-tail-recursive.


(c)  A set is a collection of distinct
objects (i.e., without duplicates).  Suppose you have the following operations
defined on sets:

empty-set
is a constant representing the empty set.

(empty? S)
returns true if the set S is empty and false otherwise.

(element? S E)
returns true if E is an element of the set S, and false otherwise.

(insert S E)
returns the set S if E is already in S, or returns S with E added otherwise.

(intersection S1 S2)
returns a set containing only the elements that are in both S1 and S2.

(subtract S1 S2)
returns a set containing the elements of S1 that are not in S2.

(union S1 S2)
returns a set containing every element in either S1 or S2 (without   
duplicates, of course).

(c.1)  Using any of the above routines
where appropriate, but using no list processing functions, define a Scheme
function called ski-trip
that takes the following four sets as arguments

*   friends,
the set of all your friends;

*   early-risers,
the set of people you know (perhaps including people who aren't your
friends) who will wake up early enough to get out on the slopes when the
lifts open;

*   rowdy-people,
the set of people who are likely to get too excited and wreck your cabin;

*   fun-folks,
the set of people who really know how to party

and returns the set of people you'd like
to invite on your ski trip over winter break:  all your friends who are
early risers and fun folks, but not rowdy people.


(c.2)  Assuming we implement sets as
normal Scheme lists, write a definition for the function union.


(c.3)  Using the operations map,
filter,
reduce,
and/or for-each,
and without using any explicit recursion, write a definition for the function
intersection.
 (Hint:  This can be quite short.)


(c.4)  Write a definition for subtract
and rewrite a definition for union,
using the operations map,
filter,
reduce,
and/or for-each
and no explicit recursion.


(d)  In the restaurants program
(a copy of which is provided), define the following function that could
be used at the top level of the program (i.e., without knowing whether the
collection is implemented as a list, a BST, a vector, or whatever; that
means you have to call collection-change).

;; increase-price-for-cuisine: collection
number symbol -> collection

;; The symbol is the name of a cuisine; the number is a number of dollars

;; to add to the price of each restaurant serving that cuisine.  Return
the

;; collection with those price changes.


(e)  [This one is tough towards the
end, probably tougher than would be on the test.]

Anteater Airlines stores each of its scheduled flights in a structure with
five fields:

origin (the three-letter airport code, e.g..
'LAX)

departure (the departure time)

destination (a three-letter airport code)

arrival (the arrival time)

passengers (a list of passengers, each of
whom is represented by a string, e.g., "Jane
Jones")

(e.1)  Define the structure flight
with the field names given above.


(e.2)  Complete the following definition
for the predicate function valid-flight?,
which takes an expression and checks whether it appears to be a valid flight.
 

(define valid-flight?

    (lambda (X)

      (and              
                ; and, like +, can take more than 2 arguments

         (________________
X)           ; is it a flight structure at all?

         (airport-code-valid?
(flight-origin X))

         (time-valid?
(________________ X)) ; is the departure time valid?

         (airport-code-valid?
(flight-destination X))

         (time-valid?
(________________ X)) ; is the arrival time valid?  

         (list-of-strings?
(flight-passengers X))))


(e.3)  Assume that you have already
defined the variable airport-code-list,
which is a list of all the valid three-letter airport abbreviations (e.g.,
LAX, SFO, SNA).  Write a definition for the predicate function airport-code-valid?,
which takes a symbol (an atom) and returns true if the symbol is contained
in airport-code-list.
 (Hint:  You can do this without recursion if you use a function we defined
in class and in the book.)


(e.4)  The predefined predicate string?
takes a single argument and returns true (#t)
if and only if the argument is a string.  Write a definition for the predicate
list-of-strings?,
which takes a list and returns true if and only if every element of the
list is a string (or if the list is empty).


(e.5)  Define the predicate flight-goes-to?,
which takes two arguments, a flight structure and a symbol (representing
an airport code), and returns true if the flight's destination matches
that symbol.


(e.6)  Anteater Airlines stores all
of its scheduled flights in a list of flight structures--the same flight
structure you defined in the previous problem. 

Write a definition for the function first-flight-to,
which takes a flight list and a symbol (representing an airport code) and
returns the first flight on the list whose destination matches that symbol
(or the null list if there's no match).  Use flight-goes-to?
as described above, whether or not your definition was correct.


(e.7)  Write a definition for the function
keep-flights-to,
which takes a flight list and a symbol (representing an airport code) and
returns a list of flights containing only those flights in the original
list whose destination matches that symbol.


(e.8)  To enhance security, an anonymous
air marshal will be assigned to every Anteater Airlines flight.  Write a
definition of add-marshals,
which takes a flight list and a code name and adds that code name at the
beginning of the passenger list of each flight.  (Hint:  First write a function
to take a single flight and add the name; then call that function from your
definition of add-marshals.)


(e.9)  Write a definition for complete-passengers-list,
which takes a flight list and returns a list of strings containing all the
passengers from all the flights on the list, with no duplications.  (You
may assume that all the passengers on a single flight are unique.)


(e.10)  (5 points)  Write the function
average-passengers
that takes a flight list and returns the average number of passengers on
the flights on the flight list. 


(e.11)  Rewrite average-passengers
to make it tail-recursive.  (If your answer for part (a) is already
tail-recursive, just write "I did this already," and if you did
it correctly, you'll get full credit.)


(e.12)  Anteater Airlines plans to
merge with Aardvark Airlines to form a new airline, AAAir.  Luckily (and
incredibly), both airlines store their flights in a list of flight structures
as described above.

Write the function merge-flight-lists,
which takes two flight lists and returns a flight list containing all the
flights from both arguments, except that when a flight from the first list
matches a flight from the second list (i.e., they have the same origin,
departure time, destination, and arrival time), the merged list contains
just one flight with the two matching flights' passenger lists combined.

You may assume that you have already defined
flights-match?,
which takes two flight structures and returns true if they match as described
above, and merge-lists,
which takes two lists and returns a list that contains all the elements
of both arguments.  You may also assume that the names on any single passenger
list are unique and that within each of the original flight lists, no flights
match.  (Hint:  Be careful and consistent about what types of data come
into and go out of each function.)


(f)  Evaluate each of the following
expressions.  That is, what does the Scheme interpreter (DrScheme in our
case) display when each of these expressions is executed? 

(f.1) (*
(- 15 4) (/ 40 4))

(f.2) (>
(/ 55 5) 12)

(f.3) (+
100

       (cond

         ((>= 5 (/ 10 2)) 37)

         (else 6)))


(g.1)  True or false:  The features
and capabilities of Scheme make it the best choice for the great majority
of programming tasks. 

(g.2)  True or false:  A programmer
with a knowledge of Java can be sure that his or her knowledge will be enough
to sustain a productive and innovative 40-year career. 


(h)  Students in the course Applied
Epistemology 101 are graded on two items, a midterm and a final exam, each
of which has 100 points possible.  The midterm's weight 40% of the course
grade; the final is worth 60%.

Write the function AE101-score
that takes two arguments--a student's midterm score and final exam score--and
returns that student's overall weighted score in the class (in the range
0 to 100).  Write two constant definitions for the weights, a contract,
a brief purpose statement, the Scheme function definition, and two tests
in the form of boolean expressions that should return true if the function
works correctly.


(i)  Complete the definition of the
function between?
below.

;; between?:  number number number ->
boolean

;; Return true if the first argument's value is between the second and
the third, inclusive

;; Examples:  (between? 7 0 10) is true; (between 3 3 4) is true; (between
1 2 3) is false

(define between?   
                 

   (lambda (value low high)

      (and



(j)  Complete the definition of item-on-list?
below.  

;; item-on-list?:  expression list ->
boolean

;; Return true if the expression occurs on the list

(define item-on-list?

   (lambda (item L)

      (cond


(k)  A date
is a structure (make-date month day year),
where month
is a symbol ('Jan,
'Feb,
and so on), day
is a number from 1 to 31, and year
is a number from 1000 to 3000.

(k.1)  Define the structure date
with the field names given above.

(k.2) Define a date
object called TODAY
with the appropriate values.

(k.3)  Complete the following definition
for the predicate function valid-date?,
which takes an expression and checks whether it appears to be a valid date.
 Use the functions you defined in the previous problems where necessary.

;; valid-date?:
 anything -> boolean

(define MONTHLIST (list 'Jan 'Feb
'Mar 'Apr 'May 'Jun 'Jul 'Aug 'Sep 'Oct
'Nov 'Dec))

(define valid-date?

   (lambda (D)

      (and    

         (________________
D)                             ; is it a date structure
at all?

         (item-on-list?
(________________ D)________________)        ; is the month valid?

         (________________
(date-day D) 1 31)
                                                    ;
is the day valid?

         (________________
(date-year D) ________  ________))))      ; is the
year valid?


(k.4)  Define the predicate function
all-valid-dates?.

;; all-valid-dates?:
 list -> boolean

;; Return true if all the items on the list are valid dates.
 If the list is empty, return true.


(l)  Suppose you wish to write a spelling
checker that takes a string of text as input and returns a list of the misspelled
words in that string.  Because the input may contain white space and punctuation,
we will need to extract the words from the string, where a word is a string
of characters that are separated from the next word by white space or punctuation.
 (The precise characters that count as white space or punctuation we won't
worry about here.)

Define the function spell-check,
which takes a string and returns a list of the words in the string that
are misspelled (more precisely, words that don't occur in the dictionary
of all correctly spelled words).  You should use each of the following in
your definition:

* first-word,
a function that takes a string and returns the first word in that string

* rest-of-words,
a function that takes a string and returns a copy of that string with the
first word removed

* string-empty?,
a function that takes a string and returns true if it's empty or if
it contains only white space and punctuation

* DICTIONARY,
a (long) list of correctly spelled words, where each word is a string.

;; spell-check: string -> list-of-strings

;; Return a list of the words in the input string that aren't in the
dictionary.


(m)  In this problem you may not use
the predefined functions member
or list-ref.
 You may use other functions defined earlier in this exam (and you may lose
points if you re-implement here something that was already described above).

(m.1)  Define the function position-on-list.

;; position-on-list: any list-of-any ->
number

;; Return the place on the list where the first input occurs, or zero if
list is empty

;; Examples:  (position-on-list 'a '(a b c)) is 1; (position-on-list
1 empty) is 0;

;;            (position-on-list 3 '(2 3 4)) is 2


(m.2)  Define the function item-at-position.

;; item-at-position: number list-of-any
-> any

;; From the input list, return the item specified by the input number, or
empty if out of range

;; Examples:  (item-at-position 3 '(a b c)) is c; (item-at-position
7 '(a b)) is empty; 

;;            (item-at-position 0 '(3 4)) is empty


(m.3)  Define next-on-list.
 You may wish to use the predefined function length,
which returns the number of items on a list.  [Hint:  Use prior definitions,
not recursion.]

;; next-on-list: any list-of-any -> any

;; Return the item on the input list that follows the first input, or empty
if none

;; Examples:  (next-on-list 'b '(a b c)) is c; (next-on-list 'c
(a b c)) is empty;

;;            (next-on-list 'x '(a b c)) is empty; (next-on-list
'a empty) is empty


(m.4)  Define next-on-circular-list.

;; next-on-circular-list: expression list
-> expression

;; Like next-on-list, but the item after the last on the list is the first
item again

;; Example:  (next-on-circular-list 'c '(a b c)) is a.


(m.5)  Define the function next-month
that uses the constant MONTHLIST
(see Problem (k)) to take in a symbol ('Jan,
'Feb,
...) representing a month and return the symbol for the following month.

;; next-month:  symbol -> symbol

;; Take a month name ('Jan, 'Feb, ...) and return the name of the
following month.


(m.6)  Define the function advance-a-month
that takes a date
(see Problem (k)) and returns that date moved one month into the
future.

;; advance-a-month: date -> date

;; Advance the input date by one month (on the same day)


(m.7)  Suppose you have a list of dates
representing events on your calendar, but you decide to take a month's
skiing vacation in February.  You'll need to postpone all the events
scheduled in February, perhaps moving them one month later.  Generalize
this to the function clear-the-month.

;; clear-the-month: symbol list-of-dates
-> list-of-dates

;; Return the input list after advancing by one month 

;; every date whose month matches the input symbol.


(m.8)   Define this function:

;; days-to-start-of-month: symbol
-> number

;; Return the number of days from January 1 to the start of the named month
in non-leap years

;; Examples:  (days-to-start-of-month 'Jan) is 0; (days-to-start-of-month
'Feb) is 31

(define DAYSINMONTH  '(31 28 31 30 31 30 31 31 30 31 30 31)) ; this
will be useful

(m.9)
 Define this function:

;; days-from-jan1: date -> number

;; Return number of days from January 1 of the same year to the specified
date, inclusive

;; Examples: (days-from-jan1 (make-date 'Jan 3 2005)) = 3; (days-from-jan1
(make-date 'Feb 1 2005)) = 32


(n)
  For each of the two sets of data
shown below, draw the binary search tree that results from inserting the
items in the order shown.  Distinguish left branches clearly from right
branches.

(n.1a) 
(13 19 22 7 17 10 2)   (n.1b)
 (Scheme Python Java Fortran C Basic)

            
                             

(n.2)  For each of the trees above,
if you traverse the tree in order, printing each node, what is the result?

(n.2a) [result of (n.1a)]
  (n.2b) [result of (n.1b)]



(o)  Evaluate each of the following
Scheme expressions:

(o.1)

(local      ((define make-checker


              
(lambda (threshold)

              
   (lambda (n) (< n threshold))))

             (define
a1 (filter (make-checker 6) '(3 1 4 1 5 9 2 6)))

             (define
a2 (filter (make-checker 4) '(3 1 4 1 5 9 2 6))))

   (list a1 a2))


(o.2) 

(local      ((define make-checker

              
(lambda (comparison-op threshold)

              
   (lambda (n) (comparison-op n threshold))))

             (define
b1 (filter (make-checker = 1) '(3 1 4 1 5 9 2 6)))

             (define
b2 (filter (make-checker >= 3) '(3 1 4 1 5 9 2 6))))

   (list b1 b2))


(p)  This problem involves the restaurant collection program.
 For each part below, indicate your answer by making any additions, changes,
or deletions to the table of data shown in that part.

(p.1) Suppose the collection C contains
the information shown below.

Thai Dishes
Thai
434-3434
Mee Krob
10.95
Jacopo's Pizzeria
Pizza
343-3434
Goat Cheese Pizza
12.00
Mitsuki
Japanese
232-5353
Edamame
4.50
Tommy Tang's
Thai
454-4545
Paht Woon Sen
8.75
Thai Touch
Thai
242-2424
Larb Guy
9.95
Kitayama
Japanese
335-3535
Okonomiyaki
8.50

What is the result returned by the following
code?  (Show your results by making changes to the table above--change values,
cross lines out, add new lines, as appropriate.)

(define Thai?        
      

   (lambda (R)

      (equal? (rrant-cuisine R) 'Thai)))

(collection-remove C Thai?) 


(p.2) Suppose the collection C contains
the information shown below.

Thai Dishes
Thai
434-3434
Mee Krob
10.95
Jacopo's Pizzeria
Pizza
343-3434
Goat Cheese Pizza
12.00
Mitsuki
Japanese
232-5353
Edamame
4.50
Tommy Tang's
Thai
454-4545
Paht Woon Sen
8.75
Thai Touch
Thai
242-2424
Larb Guy
9.95
Kitayama
Japanese
335-3535
Okonomiyaki
8.50

What is the result of the following expression?


(collection-remove C (lambda (R) (equal?
(rrant-cuisine R) 'Japanese)))


(p.3) Suppose the collection C contains
the information shown below.

Thai Dishes
Thai
434-3434
Mee Krob
10.95
Jacopo's Pizzeria
Pizza
343-3434
Goat Cheese Pizza
12.00
Mitsuki
Japanese
232-5353
Edamame
4.50
Tommy Tang's
Thai
454-4545
Paht Woon Sen
8.75
Thai Touch
Thai
242-2424
Larb Guy
9.95
Kitayama
Japanese
335-3535
Okonomiyaki
8.50

What is the result of the following expression?

(collection-remove C 

   (lambda (R)

      (or (Thai? R) (equal? (rrant-cuisine
R) 'Japanese))))


(p.4) Suppose the collection C contains
the information shown below.

Thai Dishes
Thai
434-3434
Mee Krob
10.95
Jacopo's Pizzeria
Pizza
343-3434
Goat Cheese Pizza
12.00
Mitsuki
Japanese
232-5353
Edamame
4.50
Tommy Tang's
Thai
454-4545
Paht Woon Sen
8.75
Thai Touch
Thai
242-2424
Larb Guy
9.95
Kitayama
Japanese
335-3535
Okonomiyaki
8.50
 
 
 
 


What is the result of the following expression?

(define raise-price

   (lambda (R)

      (make-rrant (rrant-name
R) (rrant-cuisine R) (rrant-phone
R)

                  (rrant-dish
R) (+ 1.00 (rrant-price R)))))

(collection-change C Thai? raise-price)


(p.5) Suppose the collection C contains
the information shown below.

Thai Dishes
Thai
434-3434
Mee Krob
10.95
Jacopo's Pizzeria
Pizza
343-3434
Goat Cheese Pizza
12.00
Mitsuki
Japanese
232-5353
Edamame
4.50
Tommy Tang's
Thai
454-4545
Paht Woon Sen
8.75
Thai Touch
Thai
242-2424
Larb Guy
9.95
Kitayama
Japanese
335-3535
Okonomiyaki
8.50
 
 
 
 


What is the result of the following expression?

(collection-remove (collection-change
C Thai? raise-price) ; raise-price is defined above

                   (lambda (R) (>
(rrant-price R) 10.00)))


(p.6) Suppose the collection C contains
the information shown below.

Thai Dishes
Thai
434-3434
Mee Krob
10.95
Jacopo's Pizzeria
Pizza
343-3434
Goat Cheese Pizza
12.00
Mitsuki
Japanese
232-5353
Edamame
4.50
Tommy Tang's
Thai
454-4545
Paht Woon Sen
8.75
Thai Touch
Thai
242-2424
Larb Guy
9.95
Kitayama
Japanese
335-3535
Okonomiyaki
8.50

What is the result of the following expression?

(collection-change 

   (collection-remove C (lambda
(R) (< (rrant-price R) 9.00)))   

   (lambda (R) (or (equal? (rrant-cuisine
R) 'Pizza)   (equal? (rrant-cuisine R) 'Thai)))   (lambda
(R) (make-rrant (rrant-name R) (rrant-cuisine R)
(rrant-phone R)                     
           (rrant-dish R) (-
(rrant-price R) 2.00))))

(q)  Below are the definitions of five
functions.

(q.1)  Write "R" next to
each of the five routines below that is recursive.

(q.2)  Write "T" next to
each of the five routines that is tail-recursive.

Some routines may be both "R" and
"T"; some may be neither.  Consider each function independently
of the others (i.e., pay no attention to the other functions a given function
calls).

(define print-stars-A   

   (lambda (N)

      (cond

         [(zero? N)
(newline)]

         [else (begin
                      ; do these two things, in the order shown:

              
      (print-stars-A (- N 1))     ; print n-1 stars

              
      (display "*"))])))          ; print out a star


(define print-stars-B   

   (lambda (N)

      (cond

         [(zero? N)
(newline)]

         [else (begin
                       ; do these two things, in the
order shown:

              
      (display "*")            
              ; print out a star 

              
      (print-stars-B (- N 1)))])))      ; print n-1
stars


(define keep-matches-A   

   (lambda (L X)

      (cond

         [(null? L)
empty]

         [(equal? X
(first L)) (cons (first L) (keep-matches-A (rest L) X))]

         [else (keep-matches-A
(rest L) X)])))


(define keep-matches-B   

   (lambda (L X)

      (keep-matches-help
L X '())))   


(define keep-matches-B-help  

   (lambda (L X list-so-far)

      (cond

         [(null? L)
list-so-far]

         [(equal? X
(first L)) (keep-matches-B-help (rest L) 

              
                          
                  X 

              
                          
                  (cons (first L) list-so-far))]

         [else (keep-matches-B-help
(rest L) X list-so-far)]))) 


(r) Suppose we have a list called RL
of restaurants with menus, according to the usual definitions:

(define-struct rrant (name cuisine phone
menu))

where menu is a list of dishes

(define-struct dish (name price)).

Define the following function:

;; name-and-phone-serving-dish: (listof
rrant) string -> (listof name-phone-list)

;; Returns a list of the names and phone numbers of all the restaurants
that 

;; serve the dish named in the second input.  Each name/phone-number pair

;; should be in its own list; for example 

;; (("Cobras and Matadors" "343-3434") ("La Cote
Basque" "344-3334")).


(s)  Below are definitions of map
and filter.


(define (map f L)        
                  (define (filter p? L)

   (cond        
                          
      (cond

      ((empty? L) empty)
                       ((empty?
L) empty)

      (else (cons (f (first
L))               ((p? (first L)) 

              
      (map f (rest L))))))              
(cons (first L) (filter p? (rest L))))

               
                          
            (else (filter p? (rest L)))))


(s.1)  Write a definition for the function
process
that abstracts both map
and filter.
 (Hint:  You may find it useful to think about these two functions:  

(define (always-true x) true)
and (define (no-change x) x).)

(s.2)  Write new one-line definitions
for map
and filter
that call process.


(t) A nested list of items (NL) is
either

1.  empty   


2.  (cons item NL), or 

3.  (cons NL NL).      

Write a definition for the function deep-unique
as described below.

; deep-unique:  NL -> list-of-items

; Return a list of all the items that occur in the input, no matter how
deeply nested,

;    with no duplications.  Order of result doesn't matter.

; Example:  (deep-unique '(3 17 (3 Huey) Huey ((17)))) returns (3 17
Huey)

You may assume that the predicate list?
is already defined to return true if its argument is a list and false otherwise.



David G. Kay, kay@uci.edu


Wednesday, November 23, 2005 -- 8:40 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/i41/answers.html
##-----------------TITLE------------------------##
Answers to Sample Questions
##------------------TEXT------------------------##
Informatics 41 * Fall 2009 * David G. Kay *
UC Irvine

ANSWERS TO SAMPLE
QUESTIONS

Below are some questions of the sort that could
appear on our final exam.  This is not a sample exam--it's not the same
length, it doesn't have the same mix of questions, it doesn't cover
all the topics.  But these questions will help you review some important
concepts and most of them have appeared on exams in the past.  Try to do
them by yourself, but then compare your answers with your classmates. Do
this long enough in advance that you'll have a chance to ask us if there
are issues you can't resolve yourself.

(a.1)  Write a definition for the function
vector->list.
 (Hints:  Remember that vectors are zero-based.  Be careful not to produce
a reverse-order list.  Use an auxiliary function.)

; vector->list: vector  ->  list

; Return a list containing the same elements
as the vector argument, in the same order.

; (vector->list (vector 1 2 3) returns
(list 1 2 3)

(define (vector->list
V)

  (vtl-help V (vector-length V) empty))

(define (vtl-help V i list-so-far)

  (cond

    ((= i 0) list-so-far)

    (else (vtl-help V 

                    (sub1 i) 

                    (cons (vector-ref V (sub1 i)) list-so-far)))))

; Scoring:  Deduct
a point if they don't deal with the vector being zero-based (though they
don't have to subtract 1 in the same place the solution above does).

; Deduct a point if
they count upwards and thereby produce a reverse-order list.

(a.2)  Write a definition for the function
list->vector.
 (Hint:  You can do this without an auxiliary function and without vector-set!,
but you may use them if you need to.)

; list->vector: list  ->  vector

; Return a vector containing the same elements
as the list argument, in the same order.

; (list->vector (list 1 2 3) returns
(vector 1 2 3)

(define (list->vector
L)

  (build-vector (length L) (lambda (n) (list-ref L n))))

; --------------------------------------------------------------- That's
the nice way, but here's the other way:

(define (list-to-vector L)

  (ltv-help L (build-vector (length L) (lambda (n) 1)) 0))

(define (ltv-help L V i)

  (cond

    ((empty? L) V)

    (else (begin

            (vector-set! V i (first L))

            (ltv-help (rest L) V (add1 i))))))


(b)  Consider the following function:


(define (DoSomething a b)  ; assume b >=
0

  (cond

    ((= b 0) a)

    (else (DoSomething (sub1 a) (sub1
b)))))


(b.1) What is returned by each of the
following statements?

   (DoSomething 3 1)2

   (DoSomething 6 2)4

   (DoSomething 29 5)24

   (DoSomething 25000 23000)2000

(b.2) In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.

Subtraction:   a -
b

(b.3)  Now look at this function:


(define (DoSomethingElse a b)  ; assume
b >= 0

  (cond

    ((= b 0) a)

    (else (sub1 (DoSomethingElse a
(sub1 b))))))

Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.

Yes, they produce
the same results.

(b.4)  Which of these routines are
tail recursive--DoSomething,
DoSomethingElse,
neither, or both?  For any non-tail-recursive routine, indicate (by circling
it) which specific operation in its code makes it non-tail-recursive.

DoSomethingElse is
not tail-recursive because of the last subtraction (which is done after
returning from the recursive call). 

(c)  A set is a collection of distinct
objects (i.e., without duplicates).  Suppose you have the following operations
defined on sets:

empty-set
is a constant representing the empty set.

(empty? S)
returns true if the set S is empty and false otherwise.

(element? S E)
returns true if E is an element of the set S, and false otherwise.

(insert S E)
returns the set S if E is already in S, or returns S with E added otherwise.

(intersection S1 S2)
returns a set containing only the elements that are in both S1 and S2.

(subtract S1 S2)
returns a set containing the elements of S1 that are not in S2.

(union S1 S2)
returns a set containing every element in either S1 or S2 (without   
duplicates, of course).

(c.1)  Using any of the above routines
where appropriate, but using no list processing functions, define a Scheme
function called ski-trip
that takes the following four sets as arguments

*   friends,
the set of all your friends;

*   early-risers,
the set of people you know (perhaps including people who aren't your
friends) who will wake up early enough to get out on the slopes when the
lifts open;

*   rowdy-people,
the set of people who are likely to get too excited and wreck your cabin;

*   fun-folks,
the set of people who really know how to party

and returns the set of people you'd like
to invite on your ski trip over winter break:  all your friends who are
early risers and fun folks, but not rowdy people.

(define (ski-trip
friends early-risers rowdy-people fun-folks)

   (subtract
(intersection (intersection friends early-risers) fun-folks) rowdy-people))


(c.2)  Assuming we implement sets as
normal Scheme lists, write a definition for the function union.

(define union

   (lambda (s1 s2)

      (cond

      ((empty? s1) s2)

      ((element? s2 (first s1)) (union (rest s1) s2))

      (else (cons (first s1) (union (rest s1) s2))))))


(c.3)  Using the operations map,
filter,
foldr,
and/or for-each,
and without using any explicit recursion, write a definition for the function
intersection.
 (Hint:  This can be quite short.)

(define intersection

   (lambda (s1 s2)

      (filter (lambda (E) (element? s1 E)) s2)))


(c.4)  Write a definition for subtract
and rewrite a definition for union,
using the operations map,
filter,
foldr,
and/or for-each
and no explicit recursion.

(define subtract

   (lambda (s1 s2)

      (filter (lambda (E) (not (element? s2 E))) s1)))

(define union

   (lambda (s1 s2)

      (foldr insert s1 (subtract (s2 s1)))))


(d)  In the restaurants program
(a copy of which is provided), define the following function that could
be used at the top level of the program (i.e., without knowing whether the
collection is implemented as a list, a BST, a vector, or whatever; that
means you have to call collection-change).

;; increase-price-for-cuisine: collection
number symbol -> collection

;; The symbol is the name of a cuisine; the number is a number of dollars

;; to add to the price of each restaurant serving that cuisine.  Return
the

;; collection with those price changes.

(define increase-price-for-cuisine

  (lambda (RC amount c)

    (collection-change RC 

                    (lambda (r) (eq? (rrant-cuisine r) c))

                    (lambda (r) (make-rrant (rrant-name r) (rrant-cuisine
r) (rrant-phone r)

                             (rrant-dish r) (+ amount (rrant-price
r))))))


(e)  [This one is tough towards the
end, probably tougher than would be on the test.]

Anteater Airlines stores each of its scheduled flights in a structure with
five fields:

origin (the three-letter airport code, e.g..
'LAX)

departure (the departure time)

destination (a three-letter airport code)

arrival (the arrival time)

passengers (a list of passengers, each of
whom is represented by a string, e.g., "Jane
Jones")

(e.1)  Define the structure flight
with the field names given above.

(define-struct flight
(origin departure destination arrival passengers))

The parentheses here
have to be correct.  In general, all the parentheses have to be correct,
except for counting the parentheses at the end of a definition.

(e.2)  Complete the following definition
for the predicate function valid-flight?,
which takes an expression and checks whether it appears to be a valid flight.
 

(define valid-flight?

    (lambda (X)

      (and              
                ; and, like +, can take more than 2 arguments

         (________________
X)           ; is it a flight structure at all?  flight?

         (airport-code-valid?
(flight-origin X))

         (time-valid?
(________________ X)) ; is the departure time valid?flight-departure

         (airport-code-valid?
(flight-destination X))

         (time-valid?
(________________ X)) ; is the arrival time valid?    
flight-arrival

         (list-of-strings?
(flight-passengers X))))


(e.3)  Assume that you have already
defined the variable airport-code-list,
which is a list of all the valid three-letter airport abbreviations (e.g.,
LAX, SFO, SNA).  Write a definition for the predicate function airport-code-valid?,
which takes a symbol (an atom) and returns true if the symbol is contained
in airport-code-list.
 (Hint:  You can do this without recursion if you use a function we defined
in class and in the book.)

(define airport-code-valid?

   (lambda (c)

      (member? c airport-code-list)))

; Okay if the order of arguments to member? is switched.  Don't deduct
but make a note if they use a cond to explicitly return #t or #f.  It's
also okay if they write it out recursively and don't use member?


(e.4)  The predefined predicate string?
takes a single argument and returns true (#t)
if and only if the argument is a string.  Write a definition for the predicate
list-of-strings?,
which takes a list and returns true if and only if every element of the
list is a string (or if the list is empty).

(define list-of-strings?

   (lambda (L)

      (cond

         ((null? L) #t)

         ((string? (first L)) (list-of-strings? (rest L)))

         (else #f))))

This can also be done in just two cond clauses, with the second using AND.


(e.5)  Define the predicate flight-goes-to?,
which takes two arguments, a flight structure and a symbol (representing
an airport code), and returns true if the flight's destination matches
that symbol.

(define flight-goes-to?

   (lambda (F d)

      (equal? (flight-destination F) d)))

; Okay to use eq? or symbol=? instead of equal?


(e.6)  Anteater Airlines stores all
of its scheduled flights in a list of flight structures--the same flight
structure you defined in the previous problem. 

Write a definition for the function first-flight-to,
which takes a flight list and a symbol (representing an airport code) and
returns the first flight on the list whose destination matches that symbol
(or the null list if there's no match).  Use flight-goes-to?
as described above, whether or not your definition was correct.

(define first-flight-to

  (lambda (L d)

   (cond

      ((null? L) '())

      ((flight-goes-to? (first L) d) (first L))

      (else (first-flight-to (rest L) d))))


(e.7)  Write a definition for the function
keep-flights-to,
which takes a flight list and a symbol (representing an airport code) and
returns a list of flights containing only those flights in the original
list whose destination matches that symbol.

(define keep-flights-to

  (lambda (L d)

   (cond

      ((null? L) '())

      ((flight-goes-to? (first L) d) (cons (first L) (keep-flights-to
(rest L) d)))

      (else (keep-flights-to (rest L) d))))


(e.8)  To enhance security, an anonymous
air marshal will be assigned to every Anteater Airlines flight.  Write a
definition of add-marshals,
which takes a flight list and a code name and adds that code name at the
beginning of the passenger list of each flight.  (Hint:  First write a function
to take a single flight and add the name; then call that function from your
definition of add-marshals.)

(define add-marshals

  (lambda (L name)

   (cond

      ((null? L) '())

      (else (cons (enhance (first L) name) (add-marshals
(rest L) name)))))

(define enhance 

  (lambda (F codename)

   (make-flight (flight-origin F) (flight-departure F) (flight-destination
F) (flight-arrival F)

      (cons codename (flight-passengers F)))))


(e.9)  Write a definition for complete-passengers-list,
which takes a flight list and returns a list of strings containing all the
passengers from all the flights on the list, with no duplications.  (You
may assume that all the passengers on a single flight are unique.)

(define complete-passengers-list

  (lambda (L)

   (cond 

      ((null? L) '())

      (else (add-unique (flight-passengers (first L)) (complete-passengers-list
(rest L))))))

(define add-unique 

  (lambda (one-flights-list master-passengers-list)

   (cond

      ((null? one-flights-list) master-passengers-list)

      ((member? (first one-flights-list) master-passengers-list)

         (add-unique (rest one-flights-list) master-passengers-list))

      (else (cons (first one-flights-list) (add-unique (rest
one-flights-list) master-passengers-list)))))


(e.10)  (5 points)  Write the function
average-passengers
that takes a flight list and returns the average number of passengers on
the flights on the flight list. 

(define average-passengers

  (lambda (L)

   (/ (total-passengers L) (length L))))

(define total-passengers

  (lambda (L)

   (cond

      ((null? L) 0)

      (else (+ (length (flight-passengers (first L))) (total-passengers
(rest L)))))))


(e.11)  Rewrite average-passengers
to make it tail-recursive.  (If your answer for part (a) is already
tail-recursive, just write "I did this already," and if you did
it correctly, you'll get full credit.)

(define average-passengers

  (lambda (L)

   (/ (total-passengers L 0) (length L))))

(define total-passengers

  (lambda (L acc)

   (cond

      ((null? L) acc)

      (else (total-passengers

                   (rest L)

                   (+ acc (length (flight-passengers (first
L)))))))))


(e.12)  Anteater Airlines plans to
merge with Aardvark Airlines to form a new airline, AAAir.  Luckily (and
incredibly), both airlines store their flights in a list of flight structures
as described above.

Write the function merge-flight-lists,
which takes two flight lists and returns a flight list containing all the
flights from both arguments, except that when a flight from the first list
matches a flight from the second list (i.e., they have the same origin,
departure time, destination, and arrival time), the merged list contains
just one flight with the two matching flights' passenger lists combined.

You may assume that you have already defined
flights-match?,
which takes two flight structures and returns true if they match as described
above, and merge-lists,
which takes two lists and returns a list that contains all the elements
of both arguments.  You may also assume that the names on any single passenger
list are unique and that within each of the original flight lists, no flights
match.  (Hint:  Be careful and consistent about what types of data come
into and go out of each function.)

(define merge-flight-lists

  (lambda (F G)

   (cond

      ((null? F) G)

      (else (merge-flight-lists (rest F) (merge-a-flight
(first F) G))))))

(define merge-a-flight

  (lambda (f L)

   (cond

      ((null? L) (list f))

      ((flights-match? f (first L)) (cons (merge-flights
f (first L)) (rest L))

      (else (cons (first L) (merge-a-flight (f (rest L)))))))

(define merge-flights

  (lambda (f g)

   (make-flight (flight-origin f) (flight-departure f) (flight-destination
f) (flight-arrival f)

       (merge-lists (flight-passengers f) (flight-passengers
g)))))


(f)  Evaluate each of the following
expressions.  That is, what does the Scheme interpreter (DrScheme in our
case) display when each of these expressions is executed? 

(f.1) (*
(- 15 4) (/ 40 4))

110 (1 point)

(f.2) (>
(/ 55 5) 12)

#f or false (1 point)

(f.3) (+
100

       (cond

         ((>= 5 (/ 10 2)) 37)

         (else 6)))

137 (2 points)


(g.1)  True or false:  The features
and capabilities of Scheme make it the best choice for the great majority
of programming tasks.  False

(g.2)  True or false:  A programmer
with a knowledge of Java can be sure that his or her knowledge will be enough
to sustain a productive and innovative 40-year career.  False


(h)  Students in the course Applied
Epistemology 101 are graded on two items, a midterm and a final exam, each
of which has 100 points possible.  The midterm's weight 40% of the course
grade; the final is worth 60%.

Write the function AE101-score
that takes two arguments--a student's midterm score and final exam score--and
returns that student's overall weighted score in the class (in the range
0 to 100).  Write two constant definitions for the weights, a contract,
a brief purpose statement, the Scheme function definition, and two tests
in the form of boolean expressions that should return true if the function
works correctly.

(define MT-WEIGHT
0.40) ; Could also be 40, if the arithmetic later is right

(define FINAL-WEIGHT 0.60) ; Could be 60.  [ 1 point for defining both correctly]

;; AE101-score: number number -> number [1 point; part credit if "midterm",
e.g., for "number"]

;; Compute weighted score given midterm and final scores (all 0-100) [-1/2
if missing or blatantly untrue]

(define AE101-score

  (lambda (midterm final)

   (+ (* midterm MT-WEIGHT) (* final FINAL-WEIGHT))))

;; Tests

(= 0 (AE101-score 0 0))

(= 100 (AE101-score 100 100))  [1 point for both correct tests, returning
a boolean]

SCORING THE CODE:

  1 point for correct form of define:  (define AE101-score (lambda
(ANYTHING..., or (def (A-s ANYTHING) ...)

  1 point for correct parameter list---two names in parentheses (with
AE101-score if using Indiana style)

  1 point for any attempt to add something involving both arguments

  1 point for completely correct arithmetic

  1 point for everything else correct.  Parentheses must be right except
for counting all the trailing ones.


(i)  Complete the definition of the
function between?
below.

;; between?:  number number number ->
boolean

;; Return true if the first argument's value is between the second and
the third, inclusive

;; Examples:  (between? 7 0 10) is true; (between 3 3 4) is true; (between
1 2 3) is false

(define between?   
                   ;; 1 point for right form:  compare value to low and
compare value to high

   (lambda (value low high) ;;
1 pt for correctness:  going right way on =, not switching low and high

      (and
(>= value low) (<= value high))))
 ;;
Parens around comparisons must be right (or -1/2);         
                           ;; trailing parens don't matter here.


(j)  Complete the definition of item-on-list?
below.  

;; item-on-list?:  expression list ->
boolean

;; Return true if the expression occurs on the list

(define item-on-list?

   (lambda (item L)

      (cond

     
   ((empty? L) false)

     
   ((equal? item (first L)) true)

     
   (else (item-on-list? item (rest L))))))

Scoring:  2 points
for empty case---1 for test, 1 for returning false

         2 points for matching case---1 for test, 1 for returning
true

         2 points for recursive case---1 for attempt at recursive
call, 1 for getting it all correct.

It's okay if they
use some other comparison besides equal?, but note it.  It's okay if
they split this into nested conds as they do in the book.  Minus 3 if they
cross out the cond and just call member? (correctly). [If anybody uses member?
without deleting the cond--e.g. (cond (true (member? item L))(else 'whatever))--I
want to hear about it.  They should get credit.] ** You may deduct points
for nontrivial syntax problems, but beware of "double jeopardy."
** Some answers may be right but not follow the pattern of the rubric. 
Score as appropriate and consult with me as necessary.


(k)  A date
is a structure (make-date month day year),
where month
is a symbol ('Jan,
'Feb,
and so on), day
is a number from 1 to 31, and year
is a number from 1000 to 3000.

(k.1)  Define the structure date
with the field names given above.

(define-struct date
(month day year))

The parentheses here
have to be correct.  In general, all the parentheses have to be correct,
except for counting the parentheses at the end of a definition.  If they
get any field names wrong, deduct 1/2 point.

(k.2) Define a date
object called TODAY
with the appropriate values.

(define TODAY (make-date
'Oct 19 2004))

If the day is off
by 1 or 2, I don't think I care.

(k.3)  Complete the following definition
for the predicate function valid-date?,
which takes an expression and checks whether it appears to be a valid date.
 Use the functions you defined in the previous problems where necessary.

;; valid-date?:
 anything -> boolean

(define MONTHLIST (list 'Jan 'Feb
'Mar 'Apr 'May 'Jun 'Jul 'Aug 'Sep 'Oct
'Nov 'Dec))

(define valid-date?

   (lambda (D) (line
1) 1 point for date?; (line 2) 1 point for date-month, 1 point for MONTHLIST;

      (and     (line
3/4) 1 point for both between?s; (line 4) 1 point for 1000 & 3000

         (________________
D)                             ; is it a date structure
at all?

         (item-on-list?
(________________ D)________________)        ; is the month valid?

         (________________
(date-day D) 1 31)
                                                    ;
is the day valid?

         (________________
(date-year D) ________  ________))))      ; is the
year valid?


(k.4)  Define the predicate function
all-valid-dates?.

;; all-valid-dates?:
 list -> boolean

;; Return true if all the items on the list are valid dates.
 If the list is empty, return true.

(define
all-valid-dates?

  (lambda (L)

   (cond

      ((empty? L) true)

      ((valid-date? (first L)) (all-valid-dates? (rest L)))

      (else false))))

1 point for correct
define/lambda/cond

5 points for the rest.
Any logically equivalent version (e.g., one with and) is okay.  You might
give a point each for the empty and non-matching cases and three points
for the recursive case.


(l)  Suppose you wish to write a spelling
checker that takes a string of text as input and returns a list of the misspelled
words in that string.  Because the input may contain white space and punctuation,
we will need to extract the words from the string, where a word is a string
of characters that are separated from the next word by white space or punctuation.
 (The precise characters that count as white space or punctuation we won't
worry about here.)

Define the function spell-check,
which takes a string and returns a list of the words in the string that
are misspelled (more precisely, words that don't occur in the dictionary
of all correctly spelled words).  You should use each of the following in
your definition:

* first-word,
a function that takes a string and returns the first word in that string

* rest-of-words,
a function that takes a string and returns a copy of that string with the
first word removed

* string-empty?,
a function that takes a string and returns true if it's empty or if
it contains only white space and punctuation

* DICTIONARY,
a (long) list of correctly spelled words, where each word is a string.

;; spell-check: string -> list-of-strings

;; Return a list of the words in the input string that aren't in the
dictionary.

(define
spell-check   1 point -- Correct define, lambda, and argument list

   (lambda (s)   1 point -- Dividing the problem into 3 cases
that relate somehow to the arg

      (cond   1 point -- Correctly identifying the empty/base
case [continued below]

        ((string-empty? s) empty)

        ((item-on-list? (first-word s) DICTIONARY) (spell-check
(rest-of-words s)))

        (else 

(cons (first-word s) (spell-check (rest-of-words s)))))))

1 point -- Correctly returning empty in the empty/base case

1 point -- Attempt to use both first-word and rest-of-words to traverse
list

1 point -- Correct use of first-word and rest-of-words in at least one case
to traverse list

1 point -- Traversal of list using first-word and rest-of-words completely
correct in both cases

1 point -- Attempt to find first-word in DICTIONARY

1 point -- Correct location of first-word in DICTIONARY (item-on-list? or
member?; -1/2 for rewriting it)

1 point -- Correct case where first-word is in the dictionary (no word added
to return list)

1 point -- Correct case where first-word isn't in dictionary (consing
first-word onto return list)

1 point -- Everything else correct

(m)  In this problem you may not use
the predefined functions member
or list-ref.
 You may use other functions defined earlier in this exam (and you may lose
points if you re-implement here something that was already described above).

(m.1)  Define the function position-on-list.

;; position-on-list: any list-of-any ->
number

;; Return the place on the list where the first input occurs, or zero if
list is empty

;; Examples:  (position-on-list 'a '(a b c)) is 1; (position-on-list
1 empty) is 0;

;;            (position-on-list 3 '(2 3 4)) is 2

(define
position-on-list

  (lambda (item L)

    (cond

      ((empty? L) 0)

      ((equal? item (first L)) 1)

      (else (+ 1 (position-on-list item (rest L)))))))

SCORING:  1 for empty
case,  2 for matching case, 3 for increment/recursive case.


(m.2)  Define the function item-at-position.

;; item-at-position: number list-of-any
-> any

;; From the input list, return the item specified by the input number, or
empty if out of range

;; Examples:  (item-at-position 3 '(a b c)) is c; (item-at-position
7 '(a b)) is empty; 

;;            (item-at-position 0 '(3 4)) is empty

(define
item-at-position

  (lambda (n L)

    (cond

      ((empty? L) empty)

      ((<= n 0) empty)

      ((= n 1) (first L))

      (else (item-at-position (- n 1) (rest L))))))

SCORING: 1 for handling
empty input list; 1 for handling index <= 0 (not checking negative is
okay);  3 for recognizing the item at the right position and returning it;
3 for the correct recursive case.  Partial credit as warranted.


(m.3)  Define next-on-list.
 You may wish to use the predefined function length,
which returns the number of items on a list.  [Hint:  Use prior definitions,
not recursion.]

;; next-on-list: any list-of-any -> any

;; Return the item on the input list that follows the first input, or empty
if none

;; Examples:  (next-on-list 'b '(a b c)) is c; (next-on-list 'c
(a b c)) is empty;

;;            (next-on-list 'x '(a b c)) is empty; (next-on-list
'a empty) is empty

(define
next-on-list

  (lambda (item L)

    (cond

      ((= 0 (position-on-list item L)) empty)

      ((= (length L) (position-on-list item L)) empty)

      (else (item-at-position (+ 1 (position-on-list item L)) L)))))

SCORING:  2 points
for correctly recognizing input not on list and returning empty; 2 points
for correctly recognizing last item on list and returning empty; 3 points
for returning correct next item otherwise.


(m.4)  Define next-on-circular-list.

;; next-on-circular-list: expression list
-> expression

;; Like next-on-list, but the item after the last on the list is the first
item again

;; Example:  (next-on-circular-list 'c '(a b c)) is a.

(define
next-on-circular-list

  (lambda (item L)

    (cond

      ((= 0 (position-on-list item L)) empty)

      ((= (length L) (position-on-list item L)) (first L))

      (else (item-at-position (+ 1 (position-on-list item L)) L)))))

SCORING:  3 points
for correctly handling the circular case; 2 points for everything else right.
 Don't deduct for the same mistakes as in the previous part, but do
deduct if they messed something new up.


(m.5)  Define the function next-month
that uses the constant MONTHLIST
(see Problem (k)) to take in a symbol ('Jan,
'Feb,
...) representing a month and return the symbol for the following month.

;; next-month:  symbol -> symbol

;; Take a month name ('Jan, 'Feb, ...) and return the name of the
following month.

(define next-month

  (lambda (this-month)

    (next-on-circular-list this-month MONTHLIST)))

(m.6)  Define the function advance-a-month
that takes a date
(see Problem (k)) and returns that date moved one month into the
future.

;; advance-a-month: date -> date

;; Advance the input date by one month (on the same day)

(define
advance-one-month

  (lambda (d)

    (make-date (next-month (date-month d)) (date-day d)

         (cond ((eq? (date-month d) 'Dec) (+ 1 (date-year
d)))

                   (else (date-year d))))))

SCORING:  2 points
for returning a date (call to make-date with three arguments);  2 points
for correct call to next-month; 3 points for handling December correctly;
1 point for everything else correct.


(m.7)  Suppose you have a list of dates
representing events on your calendar, but you decide to take a month's
skiing vacation in February.  You'll need to postpone all the events
scheduled in February, perhaps moving them one month later.  Generalize
this to the function clear-the-month.

;; clear-the-month: symbol list-of-dates
-> list-of-dates

;; Return the input list after advancing by one month 

;; every date whose month matches the input symbol.

(define
clear-the-month

  (lambda (m L)

    (cond

      ((empty? L) empty)

      ((eq? (date-month (first L)) m) (cons (advance-one-month (first
L)) (clear-the-month m (rest L))))

      (else (cons (first L) (clear-the-month m (rest L)))))))

SCORING:  1 point for empty case; 4 points for matching-month case; 1 point
for non-matching case.


(m.8)   Define this function:

;; days-to-start-of-month: symbol
-> number

;; Return the number of days from January 1 to the start of the named month
in non-leap years

;; Examples:  (days-to-start-of-month 'Jan) is 0; (days-to-start-of-month
'Feb) is 31

(define DAYSINMONTH  '(31 28 31 30 31 30 31 31 30 31 30 31)) ; this
will be useful

No key
currently available.

(m.9)
 Define this function:

;; days-from-jan1: date -> number

;; Return number of days from January 1 of the same year to the specified
date, inclusive

;; Examples: (days-from-jan1 (make-date 'Jan 3 2005)) = 3; (days-from-jan1
(make-date 'Feb 1 2005)) = 32

No key currently available.


(n)
  For each of the two sets of data
shown below, draw the binary search tree that results from inserting the
items in the order shown.  Distinguish left branches clearly from right
branches.

(n.1a) 
(13 19 22 7 17 10 2)   (n.1b)
 (Scheme Python Java Fortran C Basic)

            
 Balanced (2 points)                                       Linear to
the left (2 points)


(n.2)  For each of the trees above,
if you traverse the tree in order, printing each node, what is the result?

(n.2a) [result of (n.1a)]  2
7 10 13 17 19 22   (n.2b)
[result of (n.1b)]
Basic C Fortran Java Python Scheme


(o)  Evaluate each of the following
Scheme expressions:

(o.1)

(local    ((define make-checker 

            (lambda
(threshold)

              
   (lambda (n) (< n threshold))))

          (define a1
(filter (make-checker 6) '(3 1 4 1 5 9 2 6)))

          (define a2
(filter (make-checker 4) '(3 1 4 1 5 9 2 6))))

   (list a1 a2))

((3 1 4 1 5 2) (3
1 1 2)) -- Correct numbers and order, but list structure wrong: -1. 

Branching the wrong
way on equality: another -1

(o.2) 

(local    ((define make-checker

            (lambda
(comparison-op threshold)

              
   (lambda (n) (comparison-op n threshold))))

          (define b1
(filter (make-checker = 1) '(3 1 4 1 5 9 2 6)))

          (define b2
(filter (make-checker >= 3) '(3 1 4 1 5 9 2 6))))

   (list b1 b2))

((1 1) (3 4 5 9 6))
-- Don't deduct again for problems mentioned above.


(p)  This problem involves the restaurant collection program.
 For each part below, indicate your answer by making any additions, changes,
or deletions to the table of data shown in that part.

(p.1) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95<--
remove

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese Pizza   12.00

Mitsuki   Japanese   232-5353   Edamame   4.50

Tommy Tang's   Thai   454-4545   Paht Woon Sen  
8.75<--
remove

Thai Touch   Thai   242-2424
  Larb Guy   9.95<--
remove

Kitayama   Japanese   335-3535
  Okonomiyaki   8.50

What is the result returned by the following
code?  (Show your results by making changes to the table above--change values,
cross lines out, add new lines, as appropriate.)

(define Thai?        
      

   (lambda (R)

      (equal? (rrant-cuisine R)
'Thai)))

(collection-remove C Thai?) 


(p.2) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95

Jacopo's Pizzeria   Pizza   343-3434   Goat Cheese Pizza
  12.00

Mitsuki   Japanese   232-5353   Edamame   4.50<--
remove

Tommy Tang's   Thai  
454-4545   Paht Woon Sen   8.75

Thai Touch   Thai   242-2424   Larb Guy   9.95

Kitayama   Japanese   335-3535   Okonomiyaki   8.50<--
remove

What is the result of the following expression?


(collection-remove C (lambda (R) (equal?
(rrant-cuisine R) 'Japanese)))


(p.3) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95<--
remove

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese Pizza   12.00

Mitsuki   Japanese   232-5353   Edamame   4.50<--
remove

Tommy Tang's   Thai  
454-4545   Paht Woon Sen   8.75<--
remove

Thai Touch   Thai   242-2424
  Larb Guy   9.95<--
remove

Kitayama   Japanese   335-3535
  Okonomiyaki   8.50<--
remove

What is the result of the following expression?

(collection-remove C 

   (lambda (R)

      (or (Thai? R) (equal? (rrant-cuisine
R) 'Japanese))))


(p.4) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95-->
11.95

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese Pizza   12.00

Mitsuki   Japanese   232-5353   Edamame   4.50

Tommy Tang's   Thai   454-4545   Paht Woon Sen  
8.75-->
9.75

Thai Touch   Thai   242-2424
  Larb Guy   9.95-->
10.95

Kitayama   Japanese   335-3535
  Okonomiyaki   8.50

What is the result of the following expression?

(define raise-price

   (lambda (R)

      (make-rrant (rrant-name
R) (rrant-cuisine R) (rrant-phone
R)                  (rrant-dish
R) (+ 1.00 (rrant-price R)))))

(collection-change C Thai? raise-price)


(p.5) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95<--
remove (was 11.95)

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese Pizza   12.00<--
remove 

Mitsuki   Japanese   232-5353
  Edamame   4.50

Tommy Tang's   Thai   454-4545   Paht Woon Sen  
8.75-->
9.75

Thai Touch   Thai   242-2424
  Larb Guy   9.95<--remove
(was 10.95)

Kitayama   Japanese   335-3535
  Okonomiyaki   8.50

What is the result of the following expression?

(collection-remove (collection-change
C Thai? raise-price) ; raise-price is defined above

                   (lambda (R) (>
(rrant-price R) 10.00)))


(p.6) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95-->
8.95

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese Pizza   12.00-->10.00

Mitsuki   Japanese   232-5353
  Edamame   4.50<--remove

Tommy Tang's   Thai  
454-4545   Paht Woon Sen   8.75<--remove

Thai Touch   Thai   242-2424
  Larb Guy   9.95-->
7.95

Kitayama   Japanese   335-3535
  Okonomiyaki   9.50

What is the result of the following expression?

(collection-change 

   (collection-remove C (lambda
(R) (< (rrant-price R) 9.00)))   

   (lambda (R) (or (equal? (rrant-cuisine
R) 'Pizza)   (equal? (rrant-cuisine R) 'Thai)))   (lambda
(R) (make-rrant (rrant-name R) (rrant-cuisine R)
(rrant-phone R)                     
           (rrant-dish R) (-
(rrant-price R) 2.00))))

(q)  Below are the definitions of five
functions.

(q.1)  Write "R" next to
each of the five routines below that is recursive.

(q.2)  Write "T" next to
each of the five routines that is tail-recursive.

Some routines may be both "R" and
"T"; some may be neither.  Consider each function independently
of the others (i.e., pay no attention to the other functions a given function
calls).

(define print-stars-A   R

  (lambda (N)

    (cond

      [(zero? N) (newline)]

      [else (begin                    ; do these two things,
in the order shown:

         (print-stars-A (- N 1))     ; print n-1 stars

         (display "*"))])))          ; print out a star


(define print-stars-B   RT

  (lambda (N)

    (cond

      [(zero? N) (newline)]

      [else (begin                     ; do these two
things, in the order shown:

         (display "*")        
        ; print out a star 

         (print-stars-B (- N 1)))]))) ; print n-1 stars


(define keep-matches-A   R

  (lambda (L X)

    (cond

      [(null? L) empty]

      [(equal? X (first L)) (cons (first L) (keep-matches-A (rest L)
X))]

      [else (keep-matches-A (rest L) X)])))


(define keep-matches-B   neither

  (lambda (L X)

    (keep-matches-help L X '())))   


(define keep-matches-B-help   RT

  (lambda (L X list-so-far)

    (cond

      [(null? L) list-so-far]

      [(equal? X (first L)) (keep-matches-B-help (rest L) 

                          
                      X 

                          
                      (cons (first L) list-so-far))]

      [else (keep-matches-B-help (rest L) X list-so-far)]))) 


(r) Suppose we have a list called RL
of restaurants with menus, according to the usual definitions:

(define-struct rrant (name cuisine phone
menu))

where menu is a list of dishes

(define-struct dish (name price)).

Define the following function:

;; name-and-phone-serving-dish: (listof
rrant) string -> (listof name-phone-list)

;; Returns a list of the names and phone numbers of all the restaurants
that 

;; serve the dish named in the second input.  Each name/phone-number pair

;; should be in its own list; for example 

;; (("Cobras and Matadors" "343-3434") ("La Cote
Basque" "344-3334")).

(define name-and-phone-serving-dish

  (lambda (RL dishname)

   (map make-name-phone

      (filter (lambda (R) (rrant-serves-dish? R dishname))
RL))


Probably the best
way to handle this is to define functions like these individually first:

;; menu-includes?: menu string -> boolean [This appears above]

;; Return true if string is the name of a dish on menu

(define (menu-includes?
M s)

  (> (length
(filter (lambda (D) (string=? (dish-name D) s)) M)) 0))


;; rrant-serves-dish?:
rrant string ->boolean

;; Return true if string is the name of any menu item in rrant

(define (rrant-serves-dish?
R s)

   (menu-includes?
(rrant-menu R) s))


;; make-name-phone:
rrant -> list

;; Returns list containing rrant's name and phone

(define (make-name-phone
R)

   (list
(rrant-name R) (rrant-phone R)))

Determining whether
a given restaurant serves the specified dish:  3 points (2 points for examining
the menu and 1 point for extracting the menu from the restaurant).  In my
solution, the 2 points are captured by menu-includes?; if they rewrote the
 same thing they wrote for (b.2), rather than just calling it, they should
lose a point; if they did the task some different way, that's okay.  The
1 point is captured by rrant-serves-dish?, but again, it's okay if they
achieve this some other way.

Selecting restaurants
from the list that pass some test [ideally, the test is whether the restaurant
serves the dish in question, but for this point, credit if they select some
restaurants from the list using any criterion]:  1 point

Specifying the correct
restaurant-choice criterion [i.e., correctly applying the equivalent of
 rrant-serves-dish? to the list]:  1 point

Returning a list of
name/phone pairs [two-element lists---not technically pairs]:  2 points.
 In my solution, this is captured in make-name-phone, but they could get
the same result some other way.

Everything else correct
(including not using explicit recursion):  2 points [So this says if they
coded it right using recursion, they can get 7/9]

(s)  Below are definitions of map
and filter.

(define (map f L)        
                  (define (filter p? L)

  (cond             
                          
   (cond

    ((empty? L) empty)       
                    ((empty? L) empty)

    (else (cons (f (first L))  
               ((p? (first L)) 

                 (map f (rest
L))))))           (cons (first L) (filter p? (rest L))))

               
                          
            (else (filter p? (rest L)))))


(s.1)  Write a definition for the function
process
that abstracts both map
and filter.
 (Hint:  You may find it useful to think about these two functions:  

(define (always-true x) true)
and (define (no-change x) x).)

(define (process
f p? L)

  (cond

    ((empty? L) empty)

    ((p? (first L)) (cons (f (first L)) (process f p? (rest L))))

    (else (process f p? (rest L)))))

(s.2)  Write new one-line definitions
for map
and filter
that call process.

(define (map2
f L) (process f always-true L))

(define (filter2 p? L) (process no-change p? L))

(t) A nested list of items (NL) is
either

1.  empty   
        

2.  (cons item NL), or

3.  (cons NL NL).      

Write a definition for the function deep-unique
as described below.

; deep-unique:  NL -> list-of-items

; Return a list of all the items that occur in the input, no matter how
deeply nested,

;    with no duplications.  Order of result doesn't matter.

; Example:  (deep-unique '(3 17 (3 Huey) Huey ((17)))) returns (3 17
Huey)

You may assume that the predicate list?
is already defined to return true if its argument is a list and false otherwise.

(define (deep-unique
L) (deep-unique-aux L empty))

(define (deep-unique-aux L unique-list) 

  (cond   ((empty?
L) unique-list)

 
     ((list? (first L)) (deep-unique-aux (rest L) (deep-unique-aux
(first L) unique-list)))

      ((member? (first L) unique-list) (deep-unique-aux (rest
L) unique-list))

      (else (deep-unique-aux (rest L) (cons (first L) unique-list)))))
; produces reverse order, fwd or rev OK


Written by David G. Kay, 1995-2004.  Corrections
to some solutions by Felix Morariu, Fall 2005.



David G. Kay, kay@uci.edu


Wednesday, November 23, 2005 -- 8:40 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab3.html
##-----------------TITLE------------------------##
Lab Assignment 3
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 3 

This assignment is due at the end of lab on
Friday, October 16. 
Choose a partner for this assignment, someone
you haven't worked with already.

(a) Do exercises 9.1.3, 9.3.2 (Hint:  What kind
of operators work on two boolean values?), and 9.3.3.  Then do exercises
9.5.3, 9.5.4, 9.5.6, and 9.5.7.  As you do them, follow the design recipe
in Figure 26.  

Do exercises 10.1.2, 10.1.4, 10.1.5, and 10.1.6.
  Then do exercises 10.2.2, 10.2.7, and 10.2.9 (you don't have to write
name-robot, but it might help you get to substitute).  

Instead of doing exercises 10.3.1 through
10.3.6, create a new version of the world-drawing code you wrote last week based
on section 7.4.  This time, your world will contain a list of shapes (based on the definitions in exercise 7.4.1); each
time you draw the world, you'll overlay all the shapes on the list.
 Each shape will contain a posn (a two-number structure) that indicates
how far (in the x and y directions) to move on each tick; each time you
create the next world, you'll translate each shape by the amounts specified.
  You'll want to be sure to choose names for all these functions that
  are different from the ones you used earlier, since they'll all be submitted
as part of one big Scheme file.

Collect your definitions for all these exercises
into one Scheme file, make sure both partners' names are in a comment
at the top, and submit it via Checkmate.

(b)  Set your language level to Beginning
Student with List Abbreviations and include the image.ss teachpack (if you've
included universe.ss, that's fine).  Click Run.

Now, a color is a structure, (make-color
red green blue), where red, green,
and blue are numbers from 0 to 255.  You can represent any color by some
amount of red, green, and blue; try out some combinations and see.  These
colors can represent pixels in an image—that is, each of the dots that
makes the image up.

So evaluate (image->color-list
(rectangle 3 4 "solid" "blue")).
 You get a list of the 12 blue pixels that make up the 3x4 rectangle.  Likewise,


(color-list->image 

  (list (make-color 0 0 0) (make-color 0 0 0) (make-color 0 0 0)

        (make-color 0 0 0) (make-color 0 0 0) (make-color 0 0 0))

  3 2 0 0) 

makes a 3x2 rectangle of black pixels.  (The
last two arguments have to do with aligning images; we'll leave them
at zero for now.)

Remember that you can consult the documentation
for the image.ss teachpack in the DrScheme Help Desk.

There's nothing to turn in for this part.

(c) You can insert images (any image
from a JPEG or GIF file) into DrScheme using the Insert Image item on the
Special menu.  To give the image a name to use in your program, you could
say (define my-pic X),
where instead of the X you just insert the image. 

Write the function remove-green
that takes a color and returns a color with the same red and blue values
but the green value replaced by zero.

Write the function remove-color
that takes a color and a string ("red",
"green",
or "blue")
and returns that pixel with the specified field set to zero.

Write the function remove-color-from-image
that takes an image and a string ("red", "green",
or "blue")
and returns that image with all its pixels altered as in remove-color.
 Try this out on some pictures you find on the web.

Submit your definitions via Checkmate.   If
you have images in the file you submit, make sure they're small.

(d)  Do exercises 11.2.1 and
11.2.4; then do exercise 11.3.1 and exercises 11.5.1 and 11.5.4.

(e)  (extra credit) Do exercises 11.3.5 and 11.4.7.


(f)  Remember that each partner must
complete a partner evaluation form and submit it individually via Checkmate.


Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004–Fall 2009.
 The image exercises were adapted from Matthias Felleisen's TeachScheme
2 Workshop.

David G. Kay, kay@uci.edu 

Wednesday, October 7, 2009 8:29 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab6.html
##-----------------TITLE------------------------##
Lab Assignment 6
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 6 
This assignment is due at the end of lab on
  Friday, November 6. 

Choose a partner for this assignment, someone
you haven't worked with already.  Be sure your language level is set
 to Intermediate Student with Lambda.
(a) Do exercises 19.1.4, 19.1.5, 19.1.6, and 19.2.2.
 (b) Suppose we change our restaurant
    structure so that instead of just one best dish and its price, each restaurant
has a menu of dishes.  So a rrant is now
    (make-rrant
  name cuisine phone menu)
 where name, cuisine,
  and phone are strings and menu is a list of dish structures:
   (make-dish
  name price)
 where name is a string and price is a number.
None of these modifications should require any
  change to the code for collections.
 (b.1) Make up a big list of rrant structures to use in your testing.  Trade and combine lists with your classmates.
 (b.2) Download version 1d of the restaurants program. Spend some time studying it; it's a version that includes the erase and adjust commands, plus binary search trees using lazy deletion.
Make a copy of the restaurants1d.scm
  program and call it restaurants1e.scm.
 (b.3) Modify the program to handle rrant objects that include menus as described above.  You should try at least to make a list of all
  the changes you will need before looking at our checklist of modification steps.
 (b.4) Modify the program to display
  the average price (of all the dishes on the menu) whenever a restaurant
  is printed.
 (b.5) Add a command to the main menu
  that allows the user to search for (and display) all the restaurants that
  serve a given cuisine along with the average price of (all the menus of
  the restaurants that serve) that cuisine.
 (b.6) Add a command to the main menu
  that allows the user to search for (and display) all the restaurants that
  serve a dish containing a given word or phrase.  (This is more realistic
  than forcing the user to type the exact name of the dish; here, the user
  can just type "fava beans" and match all the dishes that include
  that phrase.  We've provided some code for string processing to make this task easier.) 
 Collect all of these definitions and submit
  them via Checkmate.
(c)  At the end of the Functions as
First-Class Objects sheet, we refactored the functions find-all-matches
and remove-all-matches,
defining both in terms of a more general handle-all-matches.

  (c.1)  Do the same thing in the second
  restaurants program (available at http://www.ics.uci.edu/~kay/scheme/restaurants2.scm)
      with collection-search
      and collection-remove,
          redefining both in terms of a general collection-check
function.

(c.2)  (extra credit, but the next part's required) Now redefine collection-check
and collection-change
in terms of a still-more-general collection-process
function.

(c.3)  Simplify your definition of collection-process
(or collection-check
and collection-change)
using map,
filter,
foldr,
and similar functions.

Collect all of these definitions and submit
them via Checkmate.

(d) Be sure you've read the section in
Homework 6 about files;
now it's time to write a few file-handling functions.  Download and
install the simple-file-io.ss teachpack at http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss.
(Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) We also have some file-handling code that provides four functions for reading and writing text files:
;; file->list: string -> list
;; Given a string naming a file, read the file into a list of strings.
;; file-dialog->list: anything -> list
  ;; Show user a dialog box to choose a file; read the file into a list of strings
  ;; Call with (file-dialog->list 'x) because student Schemes don't allow
  ;; parameterless functions.
;; list->file: string list -> side effects (a new file)
  ;; Given a string naming a new file, write list of strings that file, 
  ;; one string per line.
;; list->file-dialog: list -> side effects (a new file)
  ;; Write a list of strings to a new file 
  ;; (chosen by showing the user a file selection dialog)

These functions operate on text files
with the extension ".txt" or other files that consist only of
characters you can type on the keyboard.  Word documents don't work
unless they're saved as plain text; Scheme files do work unless they're
saved with comment boxes, images, or other special features.

(d.1)  Define the function copy-file
that takes two strings—the name of an existing file and the name of a new
file—and copies the contents of one to the other.  Use
file->list
and list->file.
 Test it out with a short file.  Then download the Project Gutenberg version
of The Adventures of Sherlock Holmes from http://www.gutenberg.org/dirs/etext99/advsh12.txt.
 (Project Gutenberg is a wonderful resource for non-copyright-protected
texts).  If you have to work on a slow network connection, you may pick
a smaller file; this one is 577K.  Use your copy-file program to make another
copy of this file.

(d.2)  Write the function copy-file-dialog that takes one parameter (that it ignores—parameterless functions aren't
allowed in the DrScheme student languages), displays a dialog box for the
user to select a file to copy, displays another dialog box for the user
to select the name of the copied file, and then creates the copy.  Use file-dialog->list and list->file-dialog.  Test this function with a couple of files.  (Testing
of these file-handling programs isn't quite as convenient as just putting
examples into your code, but it is essential nonetheless.  This is just
an illustration of how interactive programs add an extra layer of complexity
to the computing task.)

(d.3)  Write the function copy-with-line-numbers that behaves like copy-file, except that the copied file has line numbers
in this form
1: The Project Gutenberg EBook of The Adventures of Sherlock Holmes
  2: by Sir Arthur Conan Doyle
  3: (#15 in our series by Sir Arthur Conan Doyle)
  4:
   ...
13014: *END THE SMALL PRINT! FOR PUBLIC DOMAIN EBOOKS*Ver.02/11/02*END*

The pre-defined functions string-append and number->string may be helpful.

(d.4)  (optional, but there are required
parts further down)  You'll notice that in your line-numbered file,
the lines don't line up neatly because the numbers have different lengths.
 It would be nice to be able to display a number in a five-character field,
so that 17 would display as "   17" (with three spaces before
the number).
;; pad5: string -> string
  ;; If input string is 5 characters or longer, return it unchanged. Otherwise, 
;; add enough blanks at the left of the string to make it 5 characters long.
Use this function in your line-numbering program;
  the pre-defined function string-length
  will be useful here.

Next, write a generalized version of the function:
;; pad: string number symbol string -> string
  ;; The first argument is the input string. The second is the desired length.
  ;; The third, 'left or 'right, indicates which end of the string should be padded.
  ;; The fourth is the string that should be added repeatedly 
  ;; until the string is at least as long as the desired length.
  ;; Examples: (pad "Hi" 5 'right "!") -> "Hi!!!"
;; (pad "Preface" 12 'right "_.") -> "Preface_._._."

Finally, use these functions in your line-numbering
program so that the numbers are printed in five-character fields (except
for numbers over 99,999, which should be as long as necessary).

(d.5)  Starting with a copy of your
copy-file function (without the line numbers), write the function pick,
which takes three arguments.  The first should be a string that the function
will search for in the file; the second is a string naming the input file;
the third is a string naming the output file.  The output file should contain
only those lines in the input file that contain the specified string somewhere
in the line.  (The string-processing functions from the previous assignment
should be useful here.)

(d.6)  Define the function stats, which
takes a string naming a file and a symbol that indicates what statistic
to compute (and return) about the file, according to the list below.  You
should try to use local definitions in your function so that you don't
calculate intermediate results more than once.  You'll want to use the
predefined function string-length.  You can also use map, filter, and foldr to calculate these values compactly.

  'total-lines:
 The total number of lines in the file

  'average-length:
 The average length of lines in the file

  'empty-lines:
 The number of empty (zero-length) lines in the file

  'average-nonempty-length:
 The average length of the non-empty lines in the file

  'longest-line:
 The longest line in the file (you can do this with foldr)

  'longest-line-length:
 The length of the longest line in the file

  'shortest-line:
 The shortest non-empty line in the file

  'shortest-line-length:
 The length of the shortest line in the file.

Submit these definitions via Checkmate.
(e)
    
Do exercises 21.2.1, 21.2.2, and 21.2.3.
 Collect these definitions and submit them
  as usual via Checkmate.
(f) For extra credit, try to refine the evaluate function from section 14.4 to handle all-numeric expressions (as before)
  and also expressions with one variable.  You'd start with (define
    evaluate (lambda (exp var num) ...),
      which returns the value of exp (with num substituted for each occurrence of var).
        Refine evaluate further to take a list of variable-value pairs and substitute all the values
          for their respective variables.
(g)  Remember that each partner must
complete a partner evaluation form via the Survey tool on eee.uci.edu.  



Based in part on ICS H21assignments and exams
by David G. Kay from Fall 2001; modified by David G. Kay with material from
Informatics 41, Fall 2004 and Fall 2005; file I/O code written by Angelo
Pioli, Fall 2005. Modified by David G. Kay, Fall 2009.

David G. Kay, kay@uci.edu 

Saturday, October 31, 2009 3:16 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw2.html
##-----------------TITLE------------------------##
Second Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009 
Second Homework

This homework assignment is due  at the beginning of lab on Monday, October 5; show your completed work to the TA. We have already covered most of these topics in class. If you don't quite finish by Monday's lab, try to finish by Wednesday; you need to develop these skills. 
 (1) As you read Chapter 3 of the HtDP
  text, do exercises 3.1.1 and 3.1.2.  If  you understand why the left-hand
  side of Figure 5 is better than the right-hand side, and if you promise
  to write your code following the style on the left, then you may skip exercises 3.1.3 and 3.1.4; otherwise, do them.  Look at exercise 3.2.1 to
  be sure you understand how to do it.  From the exercises 3.3.1 through 3.3.6,
  pick a couple and do them (but save 3.3.4 to do with your partner in the
  lab).

(2)  As you read Chapter 4 of the HtDP
text, do exercises 4.1.1, 4.1.2, and a couple of the parts of 4.2.1.  Do
a few of the translations at the start of 4.2.2; formulate a contract and
purpose for the first one only, in-interval-1?;
evaluate by hand just the expression (in-interval-1?
-2).  Do the last part of 4.2.3; do
4.3.1 and 4.3.2 by hand; do 4.3.3 by hand or in DrScheme.

(3) Skim over Chapter 5 of the HtDP
text; for our purposes, we can design our programs to use strings rather than symbols.

(4)  As you read Chapter 6, do exercise
6.1.1; also do some parts of 6.3.1 and 6.3.2.  Do one part of 6.4.1; do
6.4.2; do one part of 6.5.1.    (You can skim sections 6.2, 6.6, and 6.7;
instead of the draw.ss teachpack described in the text, we're using the more modern teachpacks, image.ss and universe.ss.)
The authors enhance the design recipe with
something they call a template.  The point of a template is to lay out all
the components of the inputs that you might want to use in your solution.
 In the function you write, you might not need every component you lay out
in the template, and you might use them in a different order than you listed
them in the template.  But the template gives a menu of the likely parts you'll need and the skeleton of a function to process that kind of input. A professional chef sets up a work area with open containers of the common ingredients ready to use; it's called the mise-en-place (literally, put in place); the template for your program is the same idea.

(5) As you read Chapter 7 of the HtDP
  text, do exercises 7.1.1, 7.1.2, 7.1.3, 7.3.1, and 7.5.1.
 (6) Skim briefly over Intermezzo 1
  (Chapter 8), just to get a brief feel for the ideas.  You'll revisit
  some of them in ICS 22 and CS 141 (programming languages). 

 (7) Look at the remaining sections of the Scheme Finger Exercises. You don't have to write the answers down or turn them in, but make sure you know how to do them.


Based in part on ICS H21 assignments by David
G. Kay from Fall 2001.  Modified by
David G. Kay, Fall 2005–Fall 2009.

David G. Kay, kay@uci.edu 

Wednesday, October 7, 2009 8:29 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab8.html
##-----------------TITLE------------------------##
Lab Assignment 8
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 8
This assignment is due at the end of lab on
  Wednesday, November 25, which is the day before Thanksgiving. 

Choose a partner for this twelve-day assignment, someone
you haven't worked with already.  Choose someone whose Thanksgiving schedule is compatible with yours; if you won't be here for lab on the day before Thanksgiving (when the lab is due), pick someone who's able to work with you for a few extra out-of-lab hours before then.
(a) We have posted some code to implement parts of a music-playing application like iTunes.  You should download, install, and run this code now. And then you should read it. Reading code is an important skill,  one that beginning programmers ignore all too often. Sure, code isn't as easy to read as a novel; you need to go over it carefully and ask yourself what it does and how it works. Don't let this intimidate you; just take it one function at a time.
We used  the following data definitions to define a music collection in the form of "albums of songs":

   A music collection is a list of albums.
    An album is a unique ID (number), an artist (string), a title (string),
    a year (number), and a list of songs.
    A song is a track number (number), a title (string), a length in seconds (number), and a play count (number).  The play count indicates how many times the song has been played.
  These data definitions led us to write these structure definitions:
  (define-struct album (id artist title year songs))
    (define-struct song (track-num title length play-count))

(a.1) We wrote a function called top-10-songs, which finds the songs in a music collection that have the ten highest play counts.  Generalize this function as top-n-songs, which takes a number n and a list of albums and returns a list of the n songs with the highest play count.  This is simple given the existing code.
(a.2) Write a function unplayed-songs, which takes a list of albums and returns a list of the songs that have never been played.
(a.3) Write a function favorite-album, which takes a list of albums and returns the album that is the "favorite."  We'll define the "favorite" album to be the one that the user has spent the most time listening to.  (Hint: The total time the user has spent listening to an album is a function of the play counts and song lengths.)
(a.4) Time spent listening to an album isn't the only metric for defining a "favorite" album.  Generalize your favorite-album function so that it takes another argument, a "favorite measurement function"; that way, favorite-album can be called with any metric for determining the favorite.  (Before you get too far, consider what the appropriate contract for the favorite function might be, if the goal is to find the one and only favorite, rather than a list of many albums that the user likes.)  Add a comment after your generalized function that suggests, in English, at least two other ways to define a favorite album; show, for each of your suggestions, how you would call your generalized function to find the favorite album according to your suggestion.
(a.5) One useful option that iTunes provides is a "Search" box, into which you can type a keyword, and iTunes will automatically search your collection for songs containing that keyword in their title, their artist, or their album's title.  Implement a function music-search that does the same, returning a list of matching songs given a string containing the search keyword.  (You'll likely find the string processing code from Lab 6 helpful.)
 Submit your definitions via Checkmate.
 (b) Three of the five functions you wrote in part (a) return a list of songs.  Unfortunately, our "album of songs" model for a music collection has a drawback: An individual song by itself doesn't contain enough information to display it usefully (in a GUI or on a web page) because the album information is not included.  In the code, we solved this problem by introducing a new structure definition that combines information about a song and the album that contains it.  That definition looks like this:

    (define-struct song-display (artist a-title year track-num s-title length play-count))

Rewrite top-n-songs, unplayed-songs, and music-search so that they each return a list of song-displays, rather than a list of songs.  (Note that if you solved top-n-songs and unplayed-songs using a similar technique to the one we used for top-10-songs, you'll find that you don't have to change very much of your existing code to make this work.  On the other hand, it's likely that music-search can be significantly simplified.)
 Submit your definitions via Checkmate.
 (c) We have talked often in class about how the model (the data structure) that you choose to represent your data can  have a profound impact on how hard it is to operate on that data—how difficult it will be to write the code and also how much time it will take for the computer to execute it.  Sometimes, the data model you choose may even make some tasks impossible or too inefficient (e.g., you can't search an unordered list in logarithmic time).
Let's consider three ways that we might model a music collection.  (This is hardly an exhaustive list, but it includes three alternatives that are available to us based on what we've learned so far this quarter.)

The "album of songs" model we used in parts (a) and (b), where a music collection is a list of albums, each of which contains a list of songs.The "list of songs" model, where a music collection is represented as a list of song-displays, using the definition of song-display from part (b).The "BST of albums of songs" model, where a music collection is a binary search tree of albums, each of which contains a list of songs, implemented using the following structure definitions: 
      
    (define-struct node (value left right))
    (define-struct album-info (id artist title year songs))
    (define-struct song-info (track-num title length play-count))

      Each node in the binary search tree contains one album as its value.  The albums are sorted in order by the albums' names.  An empty binary search tree is represented by empty. (c.1) Using the "albums of songs" model, write the function album-names, which takes a music collection and returns a list of the names of all albums in the collection.
 (c.2) Write the album-names function again, this time so it takes a music collection in the "list of songs" model.  A particular album name should only appear once in the output list.
 (c.3) Write the album-names function one more time, this time so it takes a "BST of albums of songs."
 (c.4) All three of these functions has the same basic contract—take a music collection as input and return a list of the names of all the albums in the collection—but differ in terms of how they expect the collection to be organized.  Will all three functions give the same output if given the same input collection?  If not, what will be different about the output of one as opposed to the others?  What does your answer to these questions suggest about which of the models are appropriate to use in an actual music application like iTunes?
 (c.5) Which of the models would you expect to enable the best implementation of a find-album function, if we measure "best" based on which one will run the fastest if given a music collection with tens of thousands of albums in it?  Why?
 Collect your definitions and your answers to (c.4) and (c.5), expressed as comments, and submit them to Checkmate.
 (d) (optional; extra credit) A favorite feature of iTunes is the "smart playlist" feature.  Rather than selecting songs manually to include into a playlist, a "smart playlist" allows you to specify a set of qualities that a song can have—year of release, play count, artist, and so on—and then allow iTunes to select them for you, and even keep the list updated as your collection changes over time.  We can implement this easily in Scheme like this:

    (define smart-playlist
      (lambda (quality-func collection)
        (filter quality-func (all-song-displays collection))))

Recall that all-song-displays is a function that takes a music collection and turns it into a list of song-display structures.  (While our version takes an "albums of songs" collection and returned a list of song-displays, you could replace all-song-displays with a function that takes a collection implemented using some other model and transforms it into a list of song displays.) The quality-func parameter is a Scheme function that selects songs that have whatever quality defines our smart playlist.
 The challenge in implementing a "smart playlist" feature in Scheme is handling the quality function.  While you could easily implement a single quality function, the trick is that you'd like users to be able to specify multiple qualities—say, short songs about love written before 1970. We need a way to combine into one function a series of predicates (here, the length less than, say, 3 minutes; the title containing "love"; and the year less than 1970). One way would be to code up a Scheme function using and. We could do that by hand, but we'd like to design a more automated way.
Suppose we already have a user interface that prompts the user for smart playlist qualities.  You've seen this kind of thing: There's a pull-down menu for which field, a pull-down for the comparison operator, and a text field for the value to compare it with, for example. How might that user interface (part of the "controller" portion of the program) represent each quality for the "model" part of our program to process? (The "model" part would then have to turn a list of these qualities into Scheme predicates and filter the songs by each item on the list in turn.) One way to represent the qualities (following an idiom we'll see often in Java) is as "quality-func-options": Each quality-func-option describs one kind of predicate, one kind of question we can ask about a song. Let's say that each quality-func-option will be one of these structures:
;; Songs played by a particular artist.
  (define-struct quality-func-artist-option (val))
;; Songs with a particular title.
  (define-struct quality-func-title-option (val))
;; Songs released between "from-val" and "to-val". 
  (define-struct quality-func-year-option (from-val to-val))
;; Songs played at least a specified number of times. 
  (define-struct quality-func-min-play-count-option (val))
 Write a function called make-quality-func that takes a list of quality-func-options and returns a function that takes a song-display and returns true if it is a "quality" song (according to the options given) or false if it's not.  When the list of qualities is empty, the quality function should always return true.  (Hint: The quality function ends up being a chain of functions, each one checking one quality and then calling the next function in the chain; there's one link in the chain for each quality option in the list.)
 Submit your definitions to Checkmate.
(e) Remember that each partner must
  complete a partner evaluation form via the Survey tool on eee.uci.edu.


Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008. Infx-tunes example originally by Alex Thornton, Fall 2006.

David G. Kay, kay@uci.edu 

Friday, November 14, 2008 2:20 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab1.html
##-----------------TITLE------------------------##
Lab Assignment 1
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY  • FALL 2009
Lab Assignment 1


This assignment is due at the end of lab on
Friday, October 2.

Choose a partner for this assignment, someone
you haven't worked with already, and make sure the TA knows who your partner is.
(a) With your partner, do these exercises
  from HtDP:  2.1.1; 2.2.1 and 2.2.3 (these may require knowledge about a particular "problem domain;" of course the web is the most convenient
  source for that information); 2.2.5; 2.3.1, and
2.3.3.
 You should be able to place all the definitions
  and tests into one definitions file.  Include your name and your partner's,
save the file, and submit it via Checkmate.
 (b) With your partner, do exercises
2.4.1 through 2.4.4.  There's nothing to turn in for this part, but it's still important that you have the experience of looking at error messages. 
(c) For this part, you will use a teachpack called fabric-teachpack.scm.  (Download the file and save it as a file on your machine; in DrScheme's Language menu, choose Add Teachpack and click Add Teachpack to List; find and select the file you saved; click OK; then click Run.)

This teachpack comes with documentation; skim it to get an idea of what it provides and refer back to it as necessary. (The conventional terms for a teachpack—extra functions for a particular task that aren't part of the programming language to begin with—are library or API (application programming interface) or SDK (software developer's kit).)
(c.1) Familiarize yourself with the images and functions in the
  teachpack.  Enter the names of the images one at a time in the
  interactions window.  Try the functions that create fabric images
  (create-solid-fabric, add-print, add-horiz-stripe, and
  add-vertical-stripe) to see what each one does.
(c.2) Write an expression to create blue fabric with red stripes in one
  direction and purple stripes in the other (you pick the size).
(Here are some more detailed steps, if you'd like them:  First, write an expression to create a blue fabric of some size.  Click Run to test it.  Then create a blue fabric with red stripes, let's say horizontally; do this by calling add-horiz-stripe with your blue-fabric expression as its third argument.  That is, copy your blue-fabric expression as the third argument at the end of your add-horiz-stripe expression. This last part is key:  We can use the result of one expression as an argument to another expression, as we saw with (+ 1 (* 3 5)), and that's how we create more complex, interesting results.  Click Run to see this red-stripe fabric.  Finally, to add the purple stripes, let's say vertically, call add-vertical-stripe with your whole red-stripe-fabric expression as its third argument.  "Nesting" the calls to functions in this way will be basic to everything we do this term.  You'll find that if you hit the Return key before each new function call, DrScheme will indent your program to make it more readable.)
  
  Keep this expression in the definitions (top) window and add the subsequent expressions to the same window; you can save them to turn in.
(c.3) Write an expression to create a small green stripe fabric with a
  chili print on it (you pick the size).
(c.4) Invent two fabrics of your own using the teachpack functions.
 One way to do this is to find images anywhere (on your computer, on the web) and import the image files into your definitions, using Insert Image from the Special menu. You can also construct your own images using the circle, rectangle, and other operators from the teachpack called image.ss. This teachpack is included in the fabric teachpack; for documentation of the image.ss teachpack, use the DrScheme Help Desk (in the Help menu) and click Teachpacks. Note that the reference material there will contain some ideas and information that's unfamiliar to you so far. That's okay; reference material concentrates on conveying a lot of information, not on giving long explanations. You should just look through the document for the names of some image-creating functions and experiment with them.
  
  
Each fabric you design should involve at least two calls to functions that create fabrics. Be creative!
(c.5) If you overlay a fabric on top of a clothing image (like tshirt or hat), you can see what the fabric might look like on the clothing.  The overlay function from the image teachpack does this.  The fabric and the clothing image should be the same size; you can find out the size of an image using the image-width and image-height functions, also described in the image teachpack documentation.
  
  Write a function create-from-fabric that consumes an image for a
  white clothing item (like the tshirt or hat) and a fabric image sized
  to fit that item, and produces an image of the clothing item in the
  given fabric.
(c.6) Write a function add-center-logo that consumes an image for a logo
  and an image for a clothing item and produces an image of the clothing
  item with the logo centered on it.  The given clothing item may
  already be printed in fabric.
(c.7) Write a function stack-logos that consumes images of two logos and
  returns an image with the first logo just above the second logo. You
  do not need to center the logos, but you may if you wish. (Hint:  Check the image teachpack documentation for overlay/xy and image-height.)
(c.8) Write a function side-by-side-logos that consumes images of two
  logos and returns an image with the first logo to the left of the
  second logo. You do not need to center the logos, but you may if you
  wish.
(c.9) Define three pieces of clothing using a combination of the
  teachpack functions and your definitions.  You should use each of the
  functions you defined at least once.  Again, be creative!

(d) The universe.ss teachpack provides
some functions that let you animate images.  Clear the fabric teachpack, then add the universe.ss teachpack and click Run.
Animating images can be a lot of fun, and the universe.ss setup makes it relatively simple. Even so, there's more to think about than when you're just dealing with text.  The information you need is all here, but like much technical material, you may need to read through it carefully, more than once.

  When we use this teachpack, we create a world
    that might change at every tick of the clock.  We (re)display the (changed)
world at every tick; that gives us the animation. To set this up, the universe.ss teachpack provides us the function big-bang to start the animation off. Every universe.ss animation will end with four lines like this:
(big-bang  (make-world 1 1) ; Start the whole thing going with an initial world.
                            ; In this case our world holds two numbers---two 1s
                            ; to start with (more on what that means later) 
  (on-tick world-next)      ; Tell it to call world-next at each tick of the clock
  (on-draw world-draw)      ; Tell it to call world-draw at each tick to redraw the scene
  (stop-when are-we-done?)) ; Tell it to call are-we-done? to check if we're done

The   big-bang expression contains four clauses: an expression (in this case, one that constructs a new world structure containing two ones), on-tick  (to say what function will change the world every time the clock ticks), on-draw (to say what function will redraw the scene every time the clock ticks), and stop-when (to say what function will check at each tick whether we're finished).
 In this case, we have to define what a world is (from the above, we can tell it is a structure that contains two numbers, so we have to define that structure) and we have to provide definitions for the functions world-draw,  world-next, and  are-we-done?.
Let's imagine a very simple world, one
  that has a falling rock and a flying bird.  To make it even simpler, the
  rock will be a 10-pixel brown circle and the bird will be a 10-pixel yellow
  square.  Not only that, but the rock will fall straight down, 5 pixels at
  every clock tick, and the bird flies straight from left to right at the
  same rate.

In terms of our animation, what needs to change
in this world?  Really, just two things:  the horizontal position of the
bird and the vertical position of the rock.  The background scene, the bird's image
and its height, and the rock's image and its horizontal position, all
stay constant.  We need to draw them as part of the overall scene, but when we define a world to use
with this teachpack, we only need the world to represent the aspects that
might change from time to time.  In this case, that's just two numbers:
 the x-coordinate (horizontal position) of the bird and the y-coordinate
(vertical position) of the rock.  So let's define a structure to represent
our world:


(define-struct world (birds-x rocks-y))
  ;; A world is (make-world Number Number)
  ;; where the first number is the x-coordinate of the bird
  ;; and the second number is the y-coordinate of the rock.



Remember that as with any structure, you will
use make-world
to create a world, world-birds-x
to get the bird's position from a world, and world-rocks-y
to get the rock's position.

(There's one other little detail to note.
 In computer graphics—not just in Scheme—the convention for x-y coordinates
is that the origin is in the upper left corner, the x axis extends positively
to the right, and the y axis extends positively downwards.  So (5,20) would
be five pixels from the left side, 20 pixels down from the top.)
(d.1) Develop the function world-next that takes a world as input and returns a new world, one that represents how the input
world should be at the next clock tick. Follow the design recipe: contract, purpose, examples, header, body, tests.  Hints:  What is the world?  How
does it change at each tick?  How do you create a (new) world?
 (d.2) Develop the function are-we-done? that takes a world and returns true if the animation should end (let's say, when the rock nearly reaches the bottom of the scene, with a y-value of 190); it should return false otherwise. Follow the design recipe, making up examples/tests like (check-expect (are-we-done? (make-world 1 1)) false) and (check-expect (are-we-done? (make-world 1 190)) true). Are those enough for thorough testing?
(d.3) Develop the function world-draw that takes a world as input and returns a scene created using empty-scene and place-image (as described in the universe.ss documentation).  You should create an empty
scene of 200 by 200 pixels; into that scene you should place the image of
the bird (at a constant height of 120 pixels above the ground) and place
the image of the rock (at a constant 80 pixels from the left edge).  Test
this out by calling it with (world-draw
(make-world 1 1)). 


(d.4) Combine the structure definition
  above, your three function definitions, and the four setup lines (starting with the call to big-bang). These should make a runnable animation.
(d.5)  Make the bird fly twice as fast
as the rock falls.

(d.6)  There's a strong wind blowing.
 Make the rock fall at a 45-degree angle to the right.  You can do this
without changing how the world is defined.

Submit your definitions via Checkmate.
(e) (extra credit) Extra credit problems
  in ICS H21 follow different rules.  The first rule is that you must finish
  the main part of the assignment before starting on the extra credit.  The
  second rule is that you may work with whomever you like on the extra credit
  problems—your partner on the main part, one or more other students, or
  yourself alone; group work must clearly indicate who contributed and how
  much.  The third rule is that extra credit must be turned in on paper to
  the TA (clearly marked with the contributors' names and including, where
  appropriate, printouts of the relevant definitions and interactions).  The
  fourth rule is that extra credit is mainly for the fun and the glory; it
  also gives a little bit of credit, but not so much as to make up for low
  performance on the required work and exams.
 (e.1) Do exercise 2.2.4.
 (e.2) What's the longest number
  you can generate in DrScheme, without running out of memory and taking no
  more than 60 seconds of elapsed time?  Generating the big numbers is one
  part of the question; counting the digits is another.
 Try to count digits using (string-length
  (number->string your-big-number)).
    How do you get your-big-number into that expression without
    copying and pasting it (or typing the entire number)?
 Try to count the digits using some tool(s)
  other than Scheme (or any programming language).
 Using your wristwatch (or slow, measured counting),
  time how long it takes for Scheme to calculate and display your big number.
  Now, time how long it takes to calculate the big number and then its length (by nesting the expression to generate the big number inside
  the length-calculating expression above). You'd expect the second,
  combined task to take longer, but on some Scheme systems it doesn't.
  Does it on your system?  Why might the generate-and-calculate-length task
  take less time than generating the number without calculating its
  length?

(f)  (extra credit—the same rules apply) Think of some other, clever ways to enhance
the bird-and-rock animation (e.g., have the bird fly more creatively) or create another (e.g.,  draw a simple face
whose eye winks).  Just keep to the
same basic organization:  A world to represent what changes, a function
to draw the world, and a function to create the next world from the previous
one.  Show your results to your classmates and the TA.

(g)  Remember that each partner must
complete a partner evaluation form and submit it individually at eee.uci.edu by Saturday morning at the latest.


Based in part on ICS H21 assignments by David
G. Kay from Fall 2001.  Modified for image.ss and world.ss teachpacks by
Angelo Pioli and David G. Kay, Fall 2005. Modified by David G. Kay in Fall 2007 and Fall 2008. The rock-and-bird example was
adapted from CS 211 at Northeastern University, taught by Matthias Felleisen
and John Clements in Fall 2004. The fabric exercise was written by Kathi Fisler at Worcester Polytechnic Institute and modified slightly by David G. Kay. Modified by David G. Kay, Fall 2009, to reflect universe.ss.

David G. Kay, kay@uci.edu 

Wednesday, September 23, 2009 11:00 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw4.html
##-----------------TITLE------------------------##
Fourth Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Fourth Homework 

This assignment is due at the start of lab on
Monday, October 19.

(1)  In Chapter 12 of the HtDP text,
do exercise 12.2.2 (noting that both functions, search and search-sorted,
are examples of linear search because they look through the list, item by
item, in a straight line)

(2)  In Intermezzo 2 (Chapter 13),
do the manipulations in exercises 13.0.3 through 13.0.7.


(3) The code for the restaurants program
we will do in class is available at http://www.ics.uci.edu/~kay/scheme/restaurants1.scm
.  The teachpack for text input and output is at http://www.ics.uci.edu/~kay/scheme/simple-text-io.ss.   If you're using your own machine, download and install these files so you can run the restaurants program. (Download the teachpack rather than just copying and pasting its text; to do this, right-click or control-click on the link and then choose to download or save the linked file into the folder where you'll be storing your own code. Then you can add the teachpack via the Language menu in DrScheme. Be sure to change the language level to Intermediate Student.)  [Technical problems are always possible when installing new software; as always, let us know if things don't work as you think they should.] 
Look over the
  restaurants code to become familiar with how it's organized. The first time you see a few pages of code, it can be daunting, but learning to find your way through a whole program is an important skill and now's the time to start developing it. (Real programs, of course, are hundreds of pages long.) So don't just glance at it and say, "Yeah, whatever." Spend some time studying it. Reading code is an excellent (and under-appreciated) way to build your own programming skills.
Recognize that this code is divided into parts: One part describes individual restaurants and the operations on them; another part describes the collection of restaurants and operations on the collection; another part (that starts on the first page) controls the whole program, presenting the menu to the user and accepting the commands. In model-view-controller terms, the restaurant and collection parts make up the model, and the first page (plus the get-it function at the end) make up the view and controller.
Now, try these
  two tasks.
Change the command for adding a new restaurant to 'n' instead of
      'a'.See if you know how to add an additional menu choice: e: Remove (erase) all the
      restaurants from the collection.
      If the user types 'e' and then 'p', for example, nothing would
      be printed.  [This will require modifications or additions in a few places. You can do the
      main part of the work very easily indeed, with a single procedure call. The key is to think
      functionally, not of changing values but of describing or creating the new value.]

Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004–Fall 2009.

David G. Kay, kay@uci.edu 

Sunday, October 18, 2009 4:53 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab7.html
##-----------------TITLE------------------------##
Lab Assignment 7
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 7 

  This assignment is due at the end of lab on Friday, November 13. This lab is a little shorter than usual since Wednesday is a holiday.

Choose a partner for this assignment, someone
you haven't worked with already.

(a) Do exercises 29.3.6 and 29.3.7.
 Then choose two of 29.3.8, 29.3.9, and 29.3.10.  When these exercises ask
for the abstract running time, they mean the O-notation of the algorithm.
 When they ask you which representation is preferable, consider also binary
search trees.  When they ask why one representation is better than another,
you just need to give a sentence or so comparing the performance of the
alternatives.  Just put those answers in a comment in your definitions file.  [Some printed versions of
the text may number some of these exercises as 29.4.x; if in doubt, refer
to the on-line version.]

Do exercises 30.1.1, 30.1.2, 30.2.1, and 30.2.2.
 Then do exercises 31.3.3 and 31.3.4.

Choose one of the three sections in Chapter
32 and do all the exercises in that section.  (If you choose 32.1, be aware that
the gensym function referred to in exercise 32.1.3
requires a different language level: "Pretty Big," which is part of a set of
language levels called "PLT."  "Pretty Big" combines the "Advanced Student"
version of Scheme with some aspects of the more professional versions of Scheme
supported by DrScheme.)

Collect these definitions and submit them
as usual via Checkmate.

(b) At http://www.ics.uci.edu/~kay/scheme/restaurants4.scm
you will find a version of the restaurants program that implements menus
and also reading and writing restaurant collections from a file.  Make sure
your language level is set to Intermediate Student with Lambda; you'll also
need to download and install a new teachpack, simple-file-io.ss.  (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) 

Download this program and run it, creating
restaurants and saving them when you quit.  Run it again, starting with
the saved file.  (You can restart the program in the same interactions window
in DrScheme with another call to (restaurants
'x).)  Take a little time to look
over the code, most of which should be familiar.  If your DrScheme window
doesn't show the high-level program profile in a column at the right,
select Show Program Contour from the View menu.  You'll see large section
headings in that view (which you can create with Insert Large Letters from
the Special menu).

(b.1)  Modify this program by adding
the search-by-cuisine and search-by-menu-word menu commands you wrote in
Lab Assignment 5.  (You may use either partner's code from
that assignment, or you may reimplement it from scratch.)

(b.2)  Add a menu command to add new
dishes to a restaurant currently in the collection.  It should prompt for
the restaurant's name, print a message if that name isn't found,
and otherwise prompt the user for additional dishes to add to the named
restaurant's menu.  Once you've done this, refine the dish-adding
process as follows:  If a dish being added has the same name as a dish already
on that menu, then just replace the old price with the new price.  This
should happen when you're initially adding dishes as well as when you're
adding new dishes later; use the same code.  This also means (automatically)
that no menu will have two dishes with the same name.

(b.3)  Add a menu command to import
another restaurant collection from another file, adding all the restaurants
in that file to the main collection.  Re-use the file-reading code where
possible.  After you've done the basic task of adding all the imported
restaurants to the collection, go back and implement this refinement:  If
a restaurant you're adding has the same name and phone number as a restaurant
that's already in the collection, then just add the new restaurant's
dishes to the existing record for that restaurant.  (Add uniquely, of
course, as in the previous part.) Do this same adding of restaurants that are unique by name-plus-phone for restaurants that the user adds manually.

You'll note that with interactive interfaces,
even text-based ones, handling testing isn't as easy as it is when we're
just using the interpreter.  Now that we have files, so we can save restaurant
set-ups, it's a little easier again.  But of course this doesn't
mean that testing is no longer important.  It's just another illustration
that interactivity adds an extra layer of complexity and that it's important
to build and test our model (the underlying restaurant, menu, dish, and
collection classes in this case) independently of the view and controller
(the interface).

You'll also note as you're doing this
that you need to work with file-handling functions that are unfamiliar.
 You have a description of the functions (and more detail is available in
the DrScheme Help Desk, although looking there isn't necessary and if
you do look, you have to change the language for the help desk window to
"Pretty Big" under PLT instead of Intermediate Student); you also
have some working code to use as an example.  This is all you'll get
(aside from a little assistance from your instructional staff, but you wouldn't
have that in the real world); the thing is, it's more than you'd get in a similar situation in the real world, so learning how to make practical use of the information you do have is an important skill.  One of the nice things about the Scheme we've
done so far is that we could understand everything "down to the ground,"
evaluating everything in terms of the basic rules of substituting values
for expressions over and over.  But as we learn how to handle other interfaces
(as we did with the graphics earlier, as we're doing here with external
files, and as we could do with many other kinds of interfaces), we don't get to look
under the hood.  We have to use the API (the application programming interface—the
behavior, the contract and purpose of the functions, not their definitions),
fitting the functions we're given together like pieces of a jigsaw puzzle
to get the result we need.  Sometimes this involves taking code that we
know works for a similar task, duplicating it, and modifying the copy to
fit the new circumstances (and then perhaps abstracting and refactoring
the new code with the original, if they're in the same program).  Becoming
comfortable working with APIs is a crucial skill, since software is rarely
built today without using some pre-existing library.

Turn in your modified program via Checkmate.



(c)  This week is an excellent time to shore up
your understanding of material from previous weeks that you're still not sure about.
Before we delve into what follows, take some time to fill in or reinforce your knowledge
from past weeks by reworking any problems from previous homeworks or labs that you or
your partner struggled with or never finished.

  The goal here, as in any lab assignment, is to do this work in pairs, and to ensure
    that both partners are clear on how you arrived at a new solution.  It's best to pick
    a few problems that each of you struggled with, so that both partners benefit from the
    time spent, but if one partner feels more confident, it's preferable for that partner
    to help raise the other one's confidence.  Remember, again, that you'll be each other's
classmates for the next four years, so each of you benefits from other students' strengths.

Collect your definitions into one or more .scm files.  You may find it necessary to
spread the definitions into multiple .scm files, since different homeworks required
different language levels and/or different teachpacks.  Include a comment at the top of
each file, indicating which language and which teachpacks (if any) are required to execute
the code within.  There are no explicit requirements about how many problems to submit,
but you can expect that we'll take your diligence into account  if you redo many problems that you had trouble with, and if you help your partner
to do the same.

Submit your reworked definitions to Checkmate.


(d)  For extra credit, do exercises
25.2.1 through 25.2.6.  You'll see this material again in ICS H23.
 For more extra credit, do exercises 27.1.1,
  27.1.2, 27.1.4, and/or 27.1.5.  The code in the book uses the draw.ss teachpack, but you'll want to use image.ss (which we used earlier this
  quarter) instead.
 For still more extra credit, enhance the restaurant
  program in some more interesting ways.
For extra credit, do exercises
  29.3.14 and 29.3.15.  Also try 31.3.6, 31.3.7, and 31.3.8.

(e)  Remember that each partner must
complete a partner evaluation form via the Survey Tool on eee.uci.edu.


Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008, Fall 2009.

David G. Kay, kay@uci.edu 

Friday, November 13, 2009 8:50 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw7.html
##-----------------TITLE------------------------##
Seventh Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Seventh Homework 
This assignment is due at the start of lab on Monday, November 9. 

(1) Take a look back at the discussion of the
function reduce in
section 21.5.  (Reduce is sometimes called accumulate or foldr,
sometimes with the arguments in a different order. In DrScheme, the predefined function is named foldr.)  Using foldr/reduce, map,
and filter,
you can define many powerful operations very compactly, without explicit
recursion.  For example, suppose we have a list of restaurant (rrant)
structures as we've used in class before; call that list RL.  To produce
a list of the names of the cheap Thai restaurants in RL, we only need to
say 
(map rrant-name (filter cheap? (filter Thai?
  RL))).
 To calculate the average price of the cheap
  Thai restaurants, we can say 
(local ((define cheap-thai-restaurant-prices
                  (map rrant-price (filter cheap? (filter Thai? RL)))))
    (/ (foldr + 0 cheap-thai-restaurant-prices)
       (length cheap-thai-restaurant-prices)))
 (In the above example, note that using the
  local expression saves us from computing the list of prices two separate
  times.)  If you have trouble figuring out how these expressions work, first
  make sure you understand map, filter,
    and foldr individually (look at their "contracts") and then look at what
      each part of the expression returns, starting from the inside out.
 Do each of the following problems.  Be aware, also,
  that problems like these are likely to show up on exams.
 (1.1) Write the function convert-to-1 that takes one argument (of any type) and returns the number 1, no matter
  what the argument is.  Next, use map and convert-to-1 to define the function list-of-ones that takes a list of items and returns a list of 1s that's
    the same length as its argument.  Finally, use foldr and list-of-ones to
      rewrite the last line of the average-price code above without using length. We did this in class; now you should be able to do it, too.
 (1.2) What is the result of evaluating
  each of these expressions?
   (foldr
    + 0 '(1 2 3 4 5))   (foldr
    (lambda (a b) (+ b (if (even? a) a 0))) 0 '(1 2 3 4 5))   (foldr
    cons '() '(Huey Dewey Louie))   (foldr
    max -1 '(1953 1956 1949 1991 1964))
(1.3) Assume you have a function (interval
  a b) that returns a list of all
    the integers between a and b,
      inclusive (so that (interval 5 10) would return (5 6 7 8 9 10)).
        (Re-)write the function factorial using foldr (and interval),
          without any explicit recursion.
 (1.4) Now, think back to the restaurant
  collection program and assume we have a list (called RL)
    of the restaurant objects as described there.  For each of the following
    expressions, describe in one English sentence what value it returns.  Don't
    just say, "It does a foldr of plus and zero
    to a map of ... ;" give a description of what the expression means, something you could put in a software catalog so that a prospective buyer
    could find what he or she wanted.
   (foldr
    + 0 (map (lambda (R) 1) RL))   (filter
    (lambda (R) (equal? 'Ethiopian (rrant-cuisine R))) RL)   (/
    (foldr + 0 (map (lambda (R) (rrant-price R)) RL)) 
            (foldr + 0 (map (lambda (R) 1) RL)))   (local
    ((define PRL (filter (lambda (R) (equal? 'pizza (rrant-dish R))) RL))) 
           (/ (foldr + 0
    (map rrant-price PRL)) 
                   (foldr + 0 (map (lambda (R) 1) PRL))))
 (1.5) Using map, filter,
  and foldr,
    write an expression to return each of the following values without using
    explicit recursion:
 a list of all the French and
    Italian restaurants in RL a list of all the (best) dishes
    served at the French and Italian restaurants in RL; it's okay for this list
    to have duplicates in it, though you may attempt to remove them if you'd like
    (as it can be done without explicit recursion) a list of all the restaurants
    in RL whose best dish costs between $10.00 and $20.00 (inclusive) the name of the lowest-priced
    French restaurant in RL a list of all the restaurants
    in RL, where every French restaurant whose best dish's price is less
    than the average (price of best dishes at French restaurants) has its price
    changed to that average price
 (2) Chapter 25 talks about recursive
  algorithms that don't follow a conventional template or formula. Chapters
  26, 27, and 28 continue this theme.  You can certainly skip sections 27.3,
  27.4, and 27.5.  The discussion of backtracking in Chapter 28 is something
  you'll see in ICS H23.
(3)  Intermezzo 5 (Chapter 29) of the
  HtDP text talks about O-notation and vectors.  For a preview of topics in
  ICS H22, look at exercises 29.2.1, 29.2.2, and 29.2.3; you're not responsible
  for those exercises this quarter, though.
Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004–Fall 2009.

David G. Kay, kay@uci.edu 

Saturday, November 7, 2009 6:11 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/pair.html
##-----------------TITLE------------------------##
Pair Programming Guidelines
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2007 
Pair Programming Guidelines

Two heads are better than one, according to
an old saying.  This even applies to writing programs:  A pair of programmers
(working as described here) nearly always beats the stereotypical solitary
loner.  The pair produces more high-quality code in less time, by far more
than two-to-one.

In pair programming, two programmers share
one computer.  One is the "driver," who controls the keyboard
and mouse.  The other is the "navigator," who observes, asks questions,
suggests solutions, and thinks about slightly longer-term strategies.  The
two programmers switch roles frequently—every 15 minutes would be a good
interval for us, though that's flexible.  Even the activities of the
driver and navigator are flexible (except for who does the typing); the
goal is to work collaboratively, each partner assisting the other as needed,
to produce the best joint result possible.  It is not pair programming if
one person does all the work or if the partners just split up the work and
each does half independently.

That's the basic idea:  Spend your time in the scheduled labs working with your partner,
one of you as driver and the other as navigator, switching regularly.  You
may need to arrange other times to meet, beyond the scheduled lab sections.
 We expect everyone to be as flexible and professional as possible in arranging
those times as necessary; if your schedule is highly constrained, explore
possible outside meeting times with your prospective partners before you commit to the partnership.

You may enjoy reading this paper about pair
programming:  All I Really Need to Know About Pair Programming I Learned in Kindergarten,
by Laurie A. Williams and Robert R. Kessler (Communications of the ACM,
May 2000).  [Alternate link]


What about individual differences?  People
new to pair programming often ask what happens if the members of the pair
have different abilities.  Actually, that is true of any pair of people
in the world, probably even including identical twins.  The differences
may be great or small, one member may have more strengths than the other,
but this is exactly like most real-world working situations.  Part of accomplishing
a task is to get the most out of each member and make each member stronger
and more productive on subsequent tasks.

A clearly stronger partner may feel frustrated
or slowed down by the other partner, but the stronger partner still benefits
from the teamwork in many ways: The other partner's requests for clarification
often point out flaws in the approach or solution, the teamwork skills gained
have great value in the job market, and the exercise of providing a clear
explanation solidifies and deepens the explainer's own understanding.

The less strong partner may feel that questions
hold the other partner back or that there is no benefit to participating
actively, but pair programming studies show that paired work is consistently
better than work the stronger partner does individually.  It is part of
each partner's job to understand the whole task; that means asking questions
when necessary and answering them when possible.
You will choose a different partner for every assignment, so your partners' skill levels are certain to vary from week to week. Still, when you have a choice, you should try to pick a partner whose skill level is close to your own. This won't always be possible, and it's sometimes hard to compare skill levels at all, but we find that pairs are most productive when the partners are at about the same level. 

How does this affect my grade?  Of
course the expectation in ICS H21 is that everyone will get a grade in the
A range.  Participation in pair programming won't be the cause of any
low grades.  (Failure to participate fully and cooperatively, on the other
hand, could be a problem.)

On assignments that specify pair programming,
each pair will submit one solution, marked with both partners' names.
 (For electronic submissions via Checkmate, just one member of the pair
should submit the solution, which should still contain both partners'
names; we'll keep track of who's in what pair, so long as you keep
us informed of your pairings in the first place.)  Each pair will receive
a single score on the assignment.

Also, for each paired assignment, each student
individually will submit a brief partner evaluation form, administered electronically,
which will ask these questions:  Did your partner come to the scheduled
meetings on time and ready to work?  Did your partner read the assignment
and preparatory materials before coming to the scheduled meetings, showing up wither with specific questions or ready to contribute?  Did
your partner cooperatively follow the pair programming model (rotating roles
of driver and navigator, questioning and making observations as the navigator)?
 Did your partner contribute fully, fairly, and actively, to the best of his or her ability, to the completion
of the lab assignment?  Was your partner's participation professional
and cooperative overall?  

Filling out the evaluation is required of each
student for each assignment; forgetting the evaluation won't help your grade. We haven't yet determined exactly how the evaluations will be factored
into assignment scores or grades:  We hope and expect that everyone's
responses will be positive, in which case it won't make much difference,
but we will be looking for recurring negative evaluations.

It may be instructive to read a selection
of students' partner evaluation comments
from a previous course; they give a picture of what good partnerships are
like (and a few disasters, too).

Additional information:  Pair programming
is one aspect of the trendily-named programming methodology Extreme Programming.
 A search for "pair programming" or "extreme programming"
on the Web will yield many references.

David G. Kay, kay@uci.edu

Thursday, September 27, 2007 3:56 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab4.html
##-----------------TITLE------------------------##
Lab Assignment 4
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 4

This assignment is due at the end of lab on
Friday, October 23. 

Choose a partner for this assignment, someone
you haven't worked with already.

(a)  Do exercise 11.2.2. What they're asking for is a list of n pairs (each pair is a posn structure; each pair has the values i and f(i) where i starts at n and goes down by one each time until it reaches zero). Next do exercise 12.2.1 (just adapting
the program in Figure 33).
Write the function 
  in-ascending-order? as described below; you might use this in testing the results of a sorting program.

;; in-ascending-order?: list-of-numbers -> boolean
;; Return true if the list is empty or if each item 
(Hint: A one-element list is always in ascending order; consider treating that case in a separate cond clause.)
Here's a question to think about:  If we want to test the correctness
of our sorting function, is it enough to have tests of
the form 
(check-expect (in-ascending-order? (sort L)) true)?
That is, if the results of our sorting function are
sorted into ascending order, are we satisfied that our
sorting function works correctly?  (Put another way,
can we think of a way to write sort so that its result
always passes the in-ascending-order? test but the 
result is not correctly sorted?)

Collect your definitions for all these exercises
into one Scheme file, make sure both partners' names are in a comment
at the top, and submit it via Checkmate.

  (b)   At this point in the assignment, change
your language level to Intermediate Student.
Copy the code for the restaurants
  program to your machine and run it to make sure it works properly in your
  environment.
After completing the task of reimplementing the collection,
  add one new feature to the program: c:
    Change prices for the dishes served.
      When the user types 'c',
    the program should ask the user for an amount (positive or negative) representing
    a percentage change in price (so that 100 would double a price and -50 would
    cut it in half).  Then it should apply that price change to the prices for
    all the restaurants in the collection.  [Here are some hints on how to approach
    this.  Before reading further, you might want to think about how you'd do it.  You might approach
    this  byfirst writing a rrant-change-price
    function that takes a restaurant and a percentage change number, as above,
    and returns a restaurant that has all the same information, except that
    the price is changed appropriately.  Next you might write a function to
    apply rrant-change-price
    to all the restaurants in the collection.  Finally, you can incorporate
    these calls into the main program, adding the appropriate command handling
    and so on.]
(c) As we start this part of the lab, we need to explain one new feature of Scheme: the quote operator. If we type (+ 2 2) in the interactions window, Scheme evaluates it by applying the + operator to its arguments to get 4. If we type "(+ 2 2)", scheme doesn't evaluate it as an arithmetic expression; the quotation marks just say to evaluate it as a string, and return the literal value "(+ 2 2)".  Sometimes we want Scheme to evaluate what we type; sometimes we just want Scheme to treat it as data.  The way we say "don't evaluate" in Scheme is not to use double quote marks (which actually say "evaluate this as a string").  Instead, we use the quote operator, which can take the form (quote x) or 'x.  This is particularly convenient if we want to indicate a constant list in our code:  We can still say (list 1 2 3), but we can also say (quote (1 2 3)) or '(1 2 3).  Of course (1 2 3) (without the list or quote or apostrophe) would give us an error, because 1 isn't the name of a defined function.  In this lab problem, you can see how we mght want to use quoted lists.
A recipe is a structure
    (make-recipe T IL SL)
where T is the title (a symbol), IL is a list
of ingredients, and SL is a list of steps.
 An single ingredient is a symbol (like 'eggs);
  a single step is a list of symbols (like '(beat the eggs)).  A recipe contains a list
    of ingredients and a list of steps; for example:
(make-recipe 'ThaiIcedCoffee 
     '(coffee sugar condensed-milk ice) 
     '((brew coffee) (add sugar and condensed-milk) (pour coffee mixture over ice)))
 (Here you can see one advantage of using symbols instead of strings; with strings, we'd have to double-quote every individual word, but with symbols, we can just single-quote the whole list of them. Ask yourselves: What would be the problem with double-quoting the whole list of symbols here?)
(c.1) Write the structure definition
  for a recipe, using "title," "ingredients," and "steps"
  as the names of the fields.
 (c.2) Some people say that any recipe
  can be improved by the addition of chocolate.  (Others say sesame oil, or
  Tabasco sauce.)  Write a definition of add-special-ingredient.
    You may use an auxiliary function if you like. 
; add-special-ingredient:  list-of-recipes  symbol   ->  list-of-recipes 
; Return a list containing all the recipes in the input list, but with the symbol added
;      at the beginning of the ingredients list of each recipe.
 (c.3) Write a definition for complete-ingredients-list
.
; complete-ingredients-list:  list-of-recipes  ->  list-of-symbols
; Return a list containing all the ingredients from all the recipes in the list,
;     with no duplications.  (You may assume that all the elements of a single
;     ingredients list are unique.)
 [Hint:  Define an auxiliary function called add-unique.]
 (c.4) Sometimes we have to substitute
  one ingredient for another in a recipe. Write a definition for replace-ingredient
as described below.  Auxiliary functions are essential here.
; replace-ingredient: symbol1  symbol2  recipe  ->  recipe 
; Return a recipe like the input, but with every instance of symbol1 replaced by symbol2, 
;     both in the ingredients list and in the list of steps. 
; Example: Suppose TIC is the Thai Iced Coffee recipe defined above. 
;    (replace-ingredient 'coffee 'decaf  TIC) would return 
;    (make-recipe 'ThaiIcedCoffee 
;        '(decaf sugar condensed-milk ice)
;        '((brew decaf) (add sugar and condensed-milk) (pour decaf mixture over ice)))
 (c.5) Some recipes are so complex that they include in their steps some references to other recipes. A cake recipe in a cookbook, for example, might have as one step, "Use the chocolate icing recipe on page 23." To reflect this in our Scheme recipes, we change our definition of a "list of steps":
A list of steps (LOS) is either
empty;(cons S LOS), where S is a single step (i.e., a list of symbols); or(cons R LOS), where R is a recipe.
 Write a definition for complete-ingredients-list2 that accommodates these (possibly nested) recipes.
; complete-ingredients-list2:  list-of-recipes ->  list-of-symbols 
; Return a list containing all the ingredients from all the recipes in the list, 
;     including nested recipes, with no duplications.  (You may assume that all the
;     elements of a single ingredients list are unique.)  
Collect these definitions and submit them via Checkmate.  Turn in what you have by the due date; then consult with the TA if you'd like to keep working.
(d) (extra credit,
according to the usual rules) Do exercises 12.4.1 and 12.4.2.

  (e)  Remember that each partner must
complete a partner evaluation form via the Survey tool on eee.uci.edu.


Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004–Fall 2009.

David G. Kay, kay@uci.edu 

Sunday, October 18, 2009 4:53 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw3.html
##-----------------TITLE------------------------##
Third Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Third Homework

This assignment is due at the start of lab on
Monday, October 12. There are fewer questions on this homework than on last week's, but the concepts (of working with lists) are fundamental to the rest of the cours.

(1)  If there were problems from
Chapter 6 that you didn't get through when you worked on the previous
homework assignment, be sure that you go through them now so that you
know how to do them. Likewise, make sure you can do all the Scheme Finger Exercises; you should have these concepts down as you start to work with lists.

(2) As you read Chapter 9 of the HtDP
text, do exercises 9.1.1, 9.1.2, 9.2.3, and 9.5.2 (except write how-many-strings instead of 
how-many-symbols).

(3)  As you read Chapter 10, do exercise 10.1.1.
As you look at exercises 10.1.2, 10.1.4, 10.1.5,
and 10.1.6 (which are assigned for the lab below), note that they perform
these related tasks:  Change every item (in 10.1.4), keep selected items
(in 10.1.5), substitute new values (in 10.1.6).  You'll see these patterns
over and over.  Determine which of those patterns exercise 10.1.7 follows
most closely.

Do exercises 10.2.1, 10.2.3, 10.2.4,
10.2.5, 10.2.6, and 10.2.8, all of which are similar to the restaurant examples
we did in class.

(4)  In Chapter 11, the authors use
the concepts we already know to define the natural numbers.  Even if you
don't find number theory particularly compelling, you might appreciate
how elegantly it all fits together.


Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004–Fall 2009.

David G. Kay, kay@uci.edu 

Wednesday, October 7, 2009 8:29 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw5.html
##-----------------TITLE------------------------##
Fifth Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009 
Fifth Homework 

  This assignment is due at the start of lab on
  Monday, October 26.

  (1)  A fresh  copy  of the midterm is available here.  Answer all the questions
  correctly, including the extra credit, and turn your answers in. For any problem that you got full credit for
      on the actual midterm, you can simply write "I got full credit for
this the first time around."

We're not trying to make anyone  relive unpleasant memories; the midterm scores were generally  good.  But everyone needs to
know how to do all the problems on the midterm, and you need to test yourself
to make sure that's true for you.  It's fine if you've discussed the midterm in section, but you should try to answer each question
without consulting your notes or anyone else.  You're not forbidden
from asking your classmates for help, but this isn't a pair-programming
activity; you need to be confident that you can do each of these problems
yourself.

Turn in your original graded midterm to the TA
in section along with the correctly answered copy; try to do this by Monday. 
(2) Chapter 14 introduces trees. 
Do exercises 14.1.3, 14.1.4, and 14.1.5.  Read through Chapters
15 (which covers "mutually referential" data, where an X may contain
some Ys and a Y may contain some Xs) and 16 (which talks about iterative
design). 
(3) Copy into DrScheme the sorting code from Thursday's class (you can get it in the course Email archive on EEE if you don't still have the message). The function i-sort uses an algorithm called "insertion sort"—we take each item and insert it into its correct place on the list of what we've already sorted.
Write the function i-sort-descending, which is like i-sort except that it produces its result in descending order, highest to lowest. (Note that having both functions involves a lot of duplicate code; later on, we'll learn how to avoid that.)
Rerun the timing we did in class on a 10,000-item list; see how long it takes on your machine. You can do this with the expression (time (local ((define SNL (i-sort NL)))"done")):  NL is a 10,000-item list like the one we defined in the code from class; i-sort sorts it; to keep from displaying the whole sorted list, we put the call to i-sort into a local definition whose body just returns the string "done" (when it's finished evaluating the definition), and we enclose the whole thing with the time function, which counts the processor time and actual time the task takes (in thousandths of a second). You need to be using Intermediate Student Scheme for the time function.
The Binary Search Tree (BST) code we wrote in class included the functions BST-insert, BST->list, and list->BST. We didn't write an explicit function BST-sort, but you can do it now by combining those components as we did in class.
;; BST-sort: list-of-numbers -> list-of-numbers
;; Return the input list with all its elements in ascending order.
(check-expect (BST-sort empty) empty)
(check-expect (BST-sort (list 1)) (list 1))
(check-expect (BST-sort (list 1 2 3 4 5)) (list 1 2 3 4 5))
(check-expect (BST-sort (list 5 4 3 2 1)) (list 1 2 3 4 5))
(check-expect (BST-sort (list 1 3 5 2 4 6)) (list 1 2 3 4 5 6))

Rerun the timing we did in class on the 10,000-item list using BST-sort. Then rerun the timing on the 100,000-item list (with BST-sort; don't do it with the insertion sort algorithm unless you have something else to do while you're waiting!). Try BST-sort on a 1,000,000-item list. (If you try to sort a million-item list using insertion sort, it might take your computer a couple of days. Later on, we'll see how to analyze and predict this.)
(4) Chapter 15 of the HtDP text covers
  data structures that are "mutually recursive"—an X might contain
  some Ys, and Ys in turn could contain Xs. A related example appears below; read it over so you understand how it works.
;; Example of nested lists (lists containing other lists)
;; Data definition:  A book is either
;; -- empty, or
;; -- (cons symbol book), where a symbol represents a word, or
;; -- (cons book book)
;; So this is a book:
(define TTC '(A Tale of Two Cities
                 (It was the best of times)
                 (It was the Dover road)))
;; This gives us a hierarchical (tree-shaped) organization;
;; each nested list could be a chapter, which itself could
;; contain lists for each section or paragraph.
;; But suppose we want to count the words in this book.
;; word-count:  book -> number
;; Return number of words in book
#|
(check-expect (word-count TTC) 16)
(check-expect (word-count empty) 0)
|#
;; We can't just say (length TTC); that gives us the number
;; of elements at the top level (7 in this case), counting
;; each nested list as a single item.  Instead, we need to
;; look into each nested list.  We can write the code for 
;; this by following the data definition, which has three
;; parts:  The list is empty, the first item is a symbol,
;; or the first item is a list:
#|
(define word-count
  (lambda (B)
    (cond
      ((empty? B) ...)
      ((symbol? (first B)) ...)
      (else ...))))
|#
;; If the book is empty, it has zero words.
;; If the first item is a word (a symbol), add 1 to the
;; number of words in the rest of the book.
;; If the first item is a book (a list), add the number
;; of words in that book to the number of words in the 
;; rest of the book
(define word-count
  (lambda (B)
    (cond
      ((empty? B) 0)
      ((symbol? (first B)) (add1 (word-count (rest B))))
      (else (+ (word-count (first B)) (word-count (rest B)))))))
;; Notice that there's a recursive call in this code
;; at exactly the same places as "book" appears in the
;; data definition above.
(check-expect (word-count TTC) 16)
(check-expect (word-count empty) 0)
 (5) Chapter 16 goes through a longer
  example of the development process (using file management).  It's also another illustration
  of defining and processing tree-shaped structures. 
 (6) Chapter 17 talks about handling
  functions that process two different kinds of complex data.  Do exercises
  17.1.1, 17.1.2, 17.2.1, 17.2.2, and 17.3.1.
 (7) Intermezzo 3 (Chapter 18) covers
  local definitions, which we saw in the restaurants program.  Do exercises
  18.1.1, 18.1.2, 18.1.3, 18.1.5, and 18.1.15.


Based in part on ICS H21assignments and exams
by David G. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008, Fall 2009.

David G. Kay, kay@uci.edu 

Friday, October 23, 2009 9:05 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw10.html
##-----------------TITLE------------------------##
Tenth Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009 
Tenth Homework 
There's nothing to turn in for this homework, but try to complete it by 
  Monday, November 30. 

(1) Read the epilogue of the book,
  starting on page 677.  On line, if you take the "next" link past
  the end of Chapter 43, you'll get there (even though it doesn't
seem to appear in the on-line list of contents). 
(2) Read over Lab Assignment 9 so you're ready to go on Monday. In particular, work through part (b.1).


Based in part on ICS H21assignments by David
G. Kay from Fall 2003; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008, Fall 2009.


David G. Kay, kay@uci.edu 

Saturday, November 22, 2008 11:00 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab0.html
##-----------------TITLE------------------------##
Lab Assignment 0
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 0
 This lab assignment is due at the end of lab on
  Friday, September 25.  
 The next lab assignment (Lab Assignment 1) will be available on
  the web by Friday and will be due the following Friday at the end of lab; we'll follow
  that pattern all quarter.  
 (a) Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this Friday. All your computer-based work on this (and every) lab assignment must follow the pair programming guidelines. 
 (b) It's especially important that
  you be able to receive electronic mail sent to your UCInet ID (you@uci.edu).
    You may redirect this mail to another account of your choosing (see the
    course reference sheet), but don't let that mail go unread.  Also, be
    sure your UCInet account doesn't exceed its disk quota.  When it does, you
    won't receive official Email.
 With your partner, test this out by sending
  each other Email at your UCI addresses. 
 (c) Locate and launch the DrScheme
  software. 
 Each DrScheme window has two panes:  The bottom
  half is the interactions (or transcript) window, where you can type Scheme
  expressions and see the interpreter evaluate them immediately.  To type expressions or programs you
  wish to save, you will use the top pane (the definitions window) and click "Run" (at the top right) to evaluate the code (this makes the code
available for use in the interactions window below).
 The DrScheme system actually includes many
  different versions of Scheme.  We'll be using the How to Design Programs teaching languages, a graduated series of languages that build up to full
  Scheme step by step.  (One might wonder why it's necessary to take these
  "baby steps"; the answer is that by restricting the language features
  to those that a student needs at the moment, DrScheme can provide error
  messages that describe the actual problem more clearly.  Programming language
  error messages are notoriously inaccurate. The compiler is just a computer
  program, so it can't know for sure what the programmer intended when
  it finds something wrong. But with these different language levels, DrScheme
  does better than most.)  We will start with the "Beginning Student"
  language; if it's not the level currently installed (look for "Programming language"
  in the lower pane), change it in the Language menu and click Run again.
 (d) Experiment with DrScheme to get
  familiar with it. One person "drives" (types); the other "navigates" (observes, questions, suggests); if you don't know what this is about, go back and read the pair programming guidelines.
 Try evaluating some expressions, like (*
  3 4 5) and (expt 2
    5) and (gcd
      15 230).  (In
        DrScheme, calculating greatest common divisors is predefined (built in)). 
 Type in some definitions of symbols in the
  interactions window, like (define number-of-students
    31) and (define
      number-of-staff 2) and then try (+
        number-of-students number-of-staff).
          
 (e) The "driver" and "navigator" should switch roles now. 
The factorial function (written
  in mathematical notation with an exclamation point, so "n factorial" would be n!)
  is used in calculating how many ways there are to arrange things (like the number of different ways to arrange five students in a row).  The value
  of n! is n * (n-1) * (n-2) * ... * 1, so 5!
  = 5 * 4 * 3 * 2 * 1 = 120.
 Type the following function definition into
  the definitions window.  Actually do the typing so you can get used to the
  way it works; don't just copy and paste.  (We'll go over the details
  of this code in class some time soon; for now, this is just a typing exercise
and you shouldn't try too hard to understand how it works. If you're not used to typing programs, be careful to type accurately.)


;; fact: number -> number
;; Compute n! (n factorial).
(define fact
  (lambda (n)
    (cond
      ((<= n 0)  1 )   ; 0! is 1 by definition
      (else (* n (fact (- n 1)))))))

Notice how the environment indents and highlights blocks of code so you don't get the parentheses confused.
 Don't forget to click Run.  Now try evaluating
  expressions like (fact 5), (fact 50), (fact 120), and (fact 500).
      Next, evaluate (fact (fact
        5)).  Scheme can handle long numbers
          effortlessly, but any computer is finite; what do you think might happen
          if you evaluate (fact (fact
            50))?  You can try it, but you'll
              have to stop the evaluation if you don't want to wait until the machine
              finally runs out of memory.
 Save a copy of the interactions window that
  shows your work for this part (using Save Other and Save Interactions as
  Text from the File menu).  A good name for the file would be lab1e.scm; stick with a naming pattern like this for the rest of the quarter.  It's fine if your interactions show false starts and mistakes; it's
  also fine if you just produce a short, clean copy.  Edit the file to make
  sure it includes your name and your partner's; submit this file via
  Checkmate.
 (f) Switch roles again.  Follow this pattern in all your lab work this quarter; we won't keep mentioning it.
Scheme represents and manipulates numbers more flexibly than most programming languages, in part because it doesn't tie what the user sees to the way the hardware stores the number.
What is the value produced by (/ pi 2)?
  The result is prefixed by #i,
    which signals "inexact representation"; this means that the decimal
    number may be rounded off (as the value of pi would have to be). 
 Enter this definition (you can copy and paste
it into the definitions window):


(define decimal-format
  (lambda (num)
    (string->number (number->string (exact->inexact num)))))


Then evaluate (decimal-format
  (/ pi 2)).  This gives you a more human-readable number, in case you need to produce polished
    results.  (There are also ways to specify the precise number of digits, but
  that's for another time.) Next,  evaluate (/ 4 3) and (+ 125 (/ 22 7)); DrScheme indicates that the results are repeating decimals with a bar over the repeating digits. Evaluate (/
  (fact 5) (expt 7 2)); this result repeats, too, but not in a discernible pattern. Save a copy of the interactions window that shows your work for this part so far.
 Now, go to the Language menu, select Choose
  Language, and click Show Details.  Then select Mixed Fractions.
  Next, evaluate again the four expressions above. These results, in fractional form, are not what we expect
    to see on a computer, but they're useful in further calculations because
    nothing is lost by rounding off to a decimal representation.  Try some other
    divisions.
 Save a copy of the interactions window that
  shows your work for this second part, following the instructions in part (e) above.  Notice that the fractions in the file are saved in a slightly different form than the one DrScheme uses in the interactions window. Combine both files for this part into one, remembering to include both partners' names, and submit the file via Checkmate.
 (g) Remember that each partner must
  complete a partner evaluation form and submit it individually.  Do this
  by connecting to eee.uci.edu and choosing the Survey tool for ICS H21. Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation
    by the end of the day on Friday, or Saturday morning at the latest.  It
    only takes a couple of minutes and not doing it hurts your participation score.
What to turn in: Submit via Checkmate the interactions (transcripts) for parts (e) and  (f) above. It would be an excellent idea to go back and re-read parts (e) and (f) carefully now, to make sure you've completed all the steps specified. Also remember that each student must complete a partner evaluation form by logging in to eee.uci.edu and selecting the Survey tool; these evaluations contribute to your class participation score. 
 Based in part on ICS H21 and H22 assignments
  by David G. Kay from Fall 2001 and earlier; modified by David G. Kay, Fall
  2002, Fall 2003,  Fall 2004, Fall 2006 (with Alex Thornton), and Fall 2007.

David G. Kay, kay@uci.edu

Wednesday, September 23, 2009 11:24 PM

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/collab.html
##-----------------TITLE------------------------##
Collaboration and Independence
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2007 
Collaboration and Independent Work

  Part of being a professional is following
  the profession's norms of accepted behavior.  As you know, you may not
  copy commercial programs from the lab machines to use at home.  Likewise,
  in an academic setting you may not turn in someone else's work as your
  own.  ("As your own" is the key phrase:  If you use code from
  the textbook or from your TA, you should include a comment indicating where
  the code came from.  This is perfectly permissible unless an assignment
  explicitly restricts what code you may use.  Joint work may be allowed or
  required by an assignment, as we are doing with pair programming.  However,
  using code from other students or from sources outside of the course is
  not permissible in ICS H21 unless an assignment explicitly allows or requires
  it.)

As a general principle, we expect you to do
your own independent work in all parts of this course.  In this course it
is always permissible, even desirable, to talk with your classmates about
the conceptual course material or the requirements of an assignment (though
the instructor or TAs will be most reliable for this).  It is always permissible
to get help from anyone about using the programming environment or other
system details, help with minor syntax errors, or suggestions of possible
test cases for your programs (though when an assignment requires it, you
must write your own description of your test plan).  It is never permissible
(except if an assignment explicitly allows or requires working in groups)
to copy another student's solution (whether code, prose, or math). 
A good rule of thumb is this:  Any time you find yourself writing down
(on paper or by electronic means) part of someone else's solution, you
are copying impermissibly.

Turning in another person's work as your
own violates the honesty policies of ICS and UCI (http://www.ics.uci.edu/ugrad/current/policies/index.php).
The School of ICS takes academic honesty very seriously and imposes serious
penalties on students who violate its guidelines. Detected violations could
result in your failing the course, having a letter filed with the school,
and losing a variety of other benefits and privileges.  We do check for
academic dishonesty both manually and automatically.  It is an unfortunate
fact that nearly every quarter, some students in ICS classes are found to
have violated these policies; to protect the privacy of the guilty, violations
are not made public, but sadly, they do occur.  No matter how much pressure
you feel from deadlines or other sources, no matter how inconceivable it
is to you that you might not complete an assignment on time, never
take the shortcut of turning in someone else's code.  Compared to the
consequences of academic dishonesty, one low assignment score is a minor
disadvantage.  If you feel as if you're falling behind or have other
difficulties, see your TA or the instructor; we will help you work around
your difficulties.

We do encourage all students to help their
classmates with the course material and the labs, within these limits. 
Helping someone else doesn't hurt your grade; we don't have any
limits on how many As or Bs we can give.  It is even permissible in ICS
H21 to let someone else look over your code to get an idea of how
you organized it.  However, you should not let anyone copy your code,
either on paper or electronically.  In fact, it is wise to keep your code
in your own possession; if you give a copy to someone else, even if it's
just "for reference," that person might be tempted to copy portions
of your code; then you could be accused of academic dishonesty. 

Most importantly, realize that getting "the
answer" is only the last part of each assignment.  Equally important
is the process of getting the solution—including the false starts,
bugs, misconceptions, and mistakes—because the learning occurs in the doing.
 Completely apart from the ethical issues, copying a solution deprives you
of the whole point of the assignment.





David G. Kay, kay@uci.edu



Thursday, September 27, 2007 3:53 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab2.html
##-----------------TITLE------------------------##
Lab Assignment 2
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY  • FALL 2009
Lab Assignment 2


This assignment is due at the end of lab on
Friday, October 9.

Choose a partner for this assignment, someone
you haven't worked with already, and make sure the TA knows who your partner is.
(a) Do exercise 3.3.4 (just the several-function
  version).  Pick two of exercises 4.4.1, 4.4.2, 4.4.3, and 4.4.4.  Pick one
  of exercises 5.1.2, 5.1.3, or 5.1.5.  Collect all of these definitions into
  one file (with both partners' names at the top) and submit it via Checkmate.

(b)  Using the image.ss teachpack in
DrScheme, we can write functions that process graphic images.  Here is some
sample code:


;; Traffic Light example, HtDP Section 6.2, Figure 8
;; Revised to use image.ss teachpack by Matthias Felleisen
(define WIDTH 50)
(define HEIGHT 160)
(define RADIUS 20)
(define OFFSET 50)

(define RED (circle RADIUS 'solid 'red))
(define YELLOW (circle RADIUS 'solid 'yellow))
(define GREEN (circle RADIUS 'solid 'green))

(define LIGHT-FRAME (rectangle WIDTH HEIGHT 'outline 'black))

(define ALL-THREE-ON
  (overlay/xy (overlay/xy (overlay/xy LIGHT-FRAME 0 OFFSET GREEN)
                          0 0 YELLOW)
              0 (- OFFSET) RED))

"All three lights on:"
ALL-THREE-ON



Copy this code and run it.  Don't forget
to add the image.ss teachpack (via the Language menu).

(b.1)  Define the images RED-ON,
YELLOW-ON,
and GREEN-ON,
each of which represents a traffic light with just one color light on in
the conventional position.  Make sure you display each image to see that
they look right.

(b.2)  Write the function turn-off-red
that takes a traffic light image as its input and returns a traffic light
image that's the same as the input, except that the red-light position
is off (i.e., there's a white circle in the top position).  You don't
have to check whether the red light (or any other light) is on to start
with.

If you test this with (turn-off-red
ALL-THREE-ON), you should see a traffic
light with the yellow and green lights on.  Do that, and then just evaluate
the symbol ALL-THREE-ON
again.  Its value didn't change; it still shows all three colors.  Nothing
we've done changes the value we associated with ALL-THREE-ON;
we just used that value as input to a function, which returned another image,
another value based on that input.

If you have experience programming in other
languages, you might have expected ALL-THREE-ON
to change.  That's because your previous language probably uses the
imperative programming style, which generally relies on changing
the values of variables.  But in Scheme, we're programming in the functional
programming style.  This means that we're not changing the values
of variables; instead, we're just sending values as inputs to functions,
which return other values.  You may wonder how it's even possible to
write programs without assigning new values to variables.  Well, just stay
tuned, and for the moment just remember that the functions we write don't
change the values of their inputs.

(b.3)  Write the function turn-off-light
that takes a traffic light and a symbol ('red,
'yellow,
or 'green)
and returns the traffic light with the specified color position turned off.
 Again, you don't have to check the status of the specified light in
the input image.  Hint:  Chapter 5 describes how to design functions that
take one of a list of symbols.  Design at least one test case for this function
(by explicitly creating an expected result and displaying it alongside the
result your function produces).

(b.4)  Write the function turn-on-light
that takes a traffic light and a symbol ('red,
'yellow,
or 'green)
and returns the traffic light with the specified color position turned on.
 Again, you don't have to check the input.

(b.5)  Write the function switch
that takes a traffic light and two symbols (chosen from 'red,
'yellow,
or 'green);
the function returns a traffic light with the first-specified light turned
off and the second-specified light turned on.  You don't have to check
the input.  Hint:  In defining new functions, it is always best to employ
functions you've already defined rather than re-creating the same functionality
from scratch.

(b.6)  Now it's time to check the
input.  Write a predicate function called red-on?
that takes a traffic light as input and returns a boolean--true if the red
light is on in the input and false if it's off.  Hint:  Use the function
image-inside?
from the image.ss teachpack.

(b.7)  Write the predicate function traffic-light-working?
that takes a traffic light as input and returns a boolean—true if the light
is working correctly (i.e., just the red is on, just the yellow is on, or
just the green is on) and false otherwise.

(b.8)  Write the function next
that takes a traffic light as input.  If the image doesn't represent
a working traffic light, just return the image unchanged.  Otherwise, return
an image representing the next light in the conventional cycle (a green
light becomes yellow; a yellow light becomes red; a red light becomes green).
 Write tests that check each of these transitions.

Submit your definitions via Checkmate.

(c) Do exercises 6.3.3 and 6.5.2 (on
which you should follow the design recipe completely).  Submit your definitions
via Checkmate.
(d) Do exercise 7.2.1.
 For this part, clear all teachpacks and then add the universe.ss teachpack. Do these exercises
  in section 7.4, which involve shape structures that include a shape's
  position in a scene:  7.4.1, 7.4.2 (which places the shape's image in
  an empty scene according to the shape's position), and 7.4.3 (which
  returns a shape like the input, but with a new position).  Then create a
  world (for use with universe.ss) that holds a shape, write a world-draw function, like the one from last week, that draws this world, and write
    a world-next function that produces a world with the translated image your function from
      7.4.3 creates.  Now you can test these functions with universe.ss, using code
      similar to the code on last week's lab.  Finally, notice that exercises
      7.4.4, 7.4.5, and 7.4.6 are unnecessary because of what universe.ss does for
      us automatically.
 Do just one of the functions in exercise 7.5.2.

(e)  Remember that each partner must
complete a partner evaluation form and submit it individually at eee.uci.edu by the end of the day on Friday.


Based in part on ICS H21 assignments by David
G. Kay from Fall 2001.  Modified for image.ss and world.ss teachpacks by
Angelo Pioli and David G. Kay, Fall 2005. Modified by David G. Kay in Fall 2007 and Fall 2009.


David G. Kay, kay@uci.edu


Friday, October 7, 2005 -- 6:25 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw1.html
##-----------------TITLE------------------------##
First Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009 
First Homework 
 This homework assignment is due at the start of lab on
  Monday, September 28. 
 The second homework assignment will be available on
  the web next Friday and will be due the following Monday at the start of lab; we'll follow
  that pattern all quarter.  The URL for the assignments is http://www.ics.uci.edu/~kay/courses/h21/hw;
    we won't distribute printed copies of the subsequent assignments (unless,
    after a couple of weeks, there's a great clamor for them).
Our homework assignments will include the reading in the textbook and some exercises for you to try out as you read. People learn best when they apply what they read as they go. 
 There's always a big gap between thinking you understand something
you read and actually being able to apply it.  We expect these exercises to go
quickly, but if you find yourself spending more than a couple of minutes
on an exercise without making any progress, you should ask us (or a classmate)
about it rather than continuing to spin your wheels unproductively.  Note that this also
means you should get started early, so that you'll have the time to
get any questions answered.  
It's not a big deal if you come to lab on Monday without having been able to answer a couple of the homework exercises, but if that happens, we'll expect that you will already have asked a few classmates or sent us a question at icsh21@uci.edu.
You should also expect to find, especially
  after a week or two, that when you have the right answer you'll know
  that it's right. (Of course, having a computer to check it will help,
  but you will probably observe this even before you check it on the machine.
  This makes a contrast from the usual experience with other popular programming languages,
  where "Click 'Run' and cross your fingers" is the way people often work.)
(1)  Do everything on the course syllabus
under the heading, "What to do this week to get started in ICS H21."
 This includes registering yourself with Checkmate at http://checkmate.ics.uci.edu,
filling out the questionnaire at http://eee.uci.edu/survey/h21.f09.q, and turning in your photo.
(2) Read through Lab Assignment 0 before you come to lab on Friday just so you get an idea of what you'll be doing with your partner. 

(3)  We encourage you to talk
with each other and help each other understand how to do the assignments.
 There are some limits, though; in particular, remember that knowing how to do it (so you can do it on the midterm, for example) is much more important than just putting down the answer.  If you haven't already, read the
guidelines for collaboration and independent work at http://www.ics.uci.edu/~kay/courses/h21/hw/collab.html.  You may also wish to read some general advice (at http://www.ics.uci.edu/~kay/college.html) about how to approach college; the practices that served you well in secondary school don't all work here.

(4)  If you haven't already, read
the guidelines for pair programming
at http://www.ics.uci.edu/~kay/courses/h21/hw/pair.html. This describes how you will be doing all your work in the lab. 
(5)  Read Chapters 1 and 2 of the How to Design Programs textbook (HtDP). The on-line version is a bit newer than the printed version, though many people prefer to read longer documents on paper. As you read Chapter 2 of the HtDP
  text, do exercises 2.2.2 and 2.3.2.
(6)  Look at sections A, B, and C of the Scheme Finger Exercises.  You don't have to write the answers down or turn them in, but make absolutely sure that you know how to do them.
(7) Read through Lab Assignment 1 before lab on Monday so you have an idea of what's coming.  You should take a minute to consult the DrScheme Help Desk from the Help
menu, find the list of teachpacks, and look at the documentation for image.ss.
 This lists all the functions that teachpack makes available for you.  We
won't be using all of them, but you should get an idea of what operations are
available.  This kind of documentation describes an API, an application
programming interface (also called an SDK, for software development kit); it's a list of functions that someone has added,
a toolkit we can use for some task.

What to turn in: Most of these items you just need to do on your own. At the start of lab on Monday, show the TA your solutions to the exercises in part (5) above.

Based in part on ICS H21 and H22 assignments
by David G. Kay from Fall 2001 and earlier; modified by David G. Kay, Fall
2002, Fall 2003,  Fall 2004, Fall 2006 (with Alex Thornton), and Fall 2007. 

David G. Kay, kay@uci.edu

Wednesday, September 23, 2009 11:23 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab9.html
##-----------------TITLE------------------------##
Lab Assignment 9
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 9
This assignment is due at the end of lab on
  Friday, December 4.  

  Choose a partner for this assignment, someone
you haven't worked with already.
(a) Do exercises 35.2.2, 35.2.3, and
35.4.1. Then do exercises 37.5.1, 37.5.2, and 37.5.3.
 Submit your definitions via Checkmate.
(b) Professor Andrea Anteater wants you to design
  a grade management system for her students in Applied Epistemology 101.
  This system will read and write students' scores from a file and allow
  the user to produce statistics and histograms (frequency graphs) of the
scores.
 Your task this week is to create this program
  from scratch.  It's not really from scratch, though:  We provide a set
  of specifications for you to implement and you can use all of the example
  programs we've seen all quarter.  Hardly any programming today is totally
  from scratch; we have application frameworks (skeleton programs with all
  the infrastructure supplied), we have function libraries that provide commonly
  useful tasks, we have object libraries and class hierarchies that we can
  adopt and adapt to our own purposes.
 To help you along, here are five pieces of
  development advice:
 Read the specifications carefully, more
    than once.  Technical documents must be milked for all the detailed information
    they contain; you can't just read them one time quickly, like a mystery
    novel. Follow the model-view-controller organization;
    have a separate top-level "front end" part of your program (the view and controller part) that handles interaction
    with the user and a "back end" part (the model) that implements the operations
    on the different classes of data. As you build the "model" part
    of the program, follow the design recipes, especially for creating examples
    and tests in advance.How do you know if you have enough tests, or the right tests? One simple measure of test effectiveness is called "code coverage"—your tests should, at the very least, evaluate each expression in the code. DrScheme helps you with this: After running your program, if you haven't tested every expression, some of the code appears highlighted in black. The highlighted code hasn't been evaluated, so you should add  tests to exercises those parts of the program. Implement one small feature at a time, test
    it thoroughly, and then save a copy of your program so far.  That way, if
    your next phase of development runs into trouble, you can "roll back"
    to the previous version and start over.
 You'll be using Advanced Student Scheme
  for this program, with the advanced-file-io.ss teachpack. (Download the file; don't just copy and paste the code.)
(b.1) Your program will handle these
  classes of data: 
 Assignments, each represented by a name, a
    weight in computing the course grade [the weights of all assignments should
    sum to 100, though we're not requiring you to check this], and a number
    of points possible [which is independent of the weight; a three-point assignment
    could be worth 50% of the course grade].  ("Graded item" would
    be a better term, since it includes things like exams and projects.  But
    we'll use "assignment" just because it's shorter.)
   A collection of assignment descriptions that
    together describe the graded items in the course
    
   Students, each represented by a name, an ID
    number, and a vector of scores (which should be the same size as the collection
    of assignments, one score for this student on each assignment)
   A collection of students
 To start out, make sure you understand these
  data structures:  Make up some examples; draw a picture; get comfortable
  with how they're organized.  Then you'll want to define functions
  that create objects in each of these classes (these can be quite simple)
  and that display those objects. [Note on terminology]
 (b.2) When your program starts, it will
  read the collection of assignments from a plain text file called Assignments.txt.
    (If you place your program file and these data files in the same directory/folder,
    DrScheme will find them without your having to do anything fancy.)  Then
    it will read the collection of students from a text file called Students.txt.
      Since the user can create these files without knowing any Scheme, your
      program won't have to handle changes to the data (although that's
      an enhancement we discuss below).
 The user can create these files using a plain
  ASCII text editor like NotePad (or from Word by using Save As and the Text
  Only format, which saves plain ASCII without the additional Word formatting
  information that your program can't read). 
 For a course with a 75-point midterm worth
  40% of the grade and a 100-point final worth 60%, the assignments file would
  look like this:
2 
  Midterm Exam
  40 75
  Final Exam
  60 100
 The first line contains the number of assignments.
  Then each assignment has two lines, the first containing the assignment's
  name and the second containing two numbers, the weight followed by the possible
  points.
 A file of students for this course would look
  like this:
2
  Aardvark, Aaron
  11223344
  68 85
  Tapir, Tamara
  44332211
  74 92
 The first line contains the number of students.
  Then each student has three lines, the first containing the student's
  name, the second containing the student's ID, and the third containing
  the student's scores on each assignment, in order.
 As you read these files, remember that the read-line function reads an entire line of input and returns a string (this is useful
  for reading strings that may contain blanks, without requiring the user
  to enclose the strings in quotation marks).  The read function reads the next Scheme expression (e.g., a single number) from the
    input.  You'll also want to call read-line (ignoring its return value) after reading numbers from a line; this will
      put you at the start of the next line so you're ready to read what's
      there.   Some sample code using read-line is available. 
[This organization of the input files should make it easy for you to use read and read-line to create the internal representation of the data in your program; your task is to fit these components together, and you should spend some time trying to do that. But if you decide you need some additional guidance, start here: (a) As always when designing programs with more than one "layer" of data structures, you should treat one layer at a time. For the file of students, for example, you should have a function to read and create the collection of n students (where n is the number specified on the first line of the file); that function will call a function to read and create the strucure for one student; that function, in turn, will call a function to read m numbers from one line (where m is the number of assignments, from the first line of the assignments file) and create a vector of those scores. (b) Make sure you understand how to use read and read-line: Choose the right function for the right kind of data, as described above.]
 Define functions that will fill the assignment
  and student collections by reading these files. It will also be helpful to write functions that print out these collections legibly; they'll help you in testing.
 (b.3) Since assignments don't necessarily
  all have the same number of points possible, it will be useful to compute
  and store a scaled score on each assignment (i.e., a number from 0 to 100,
  calculated from the student's raw score and the number of points possible
  on the assignment).  It might be easiest to implement this by storing for
  each student a second, parallel vector of scaled scores.
 You should also compute and store for each
  student the weighted overall score in the course, a number from 0 to 100
  calculated from the scaled scores and the weights of each assignment.
 To make the output look reasonable, use the
  function format-decimal. It takes two numbers (the first is the value to display, the second is
    the number of digits after the decimal point) and returns a string, suitable
    for use as an argument to display.
      So, (format-decimal 25 2) returns "25.00" and (format-decimal 17.9876 3) returns "17.988".
 (b.4) Your program will have a text-based
  menu interface like the one in the restaurants programs.  It should include
  commands to
 Search for a student by name or by ID (and
    display the student's information).
    
   Display all the students' information sorted
    by name or by overall score.  [If your collection of students is a list,
    you can use the predefined quicksort function with a carefully constructed lambda expression to accomplish this
      automatically.]
    
   Display the information for all the assignments.
      
   Display a histogram for overall course scores
    or for the scores on a single assignment (see below).
    
   Quit.
 [Your first step here should be to write the
  menu-handling code, based on the restaurants programs, before writing code
  to do anything when the user selects a given command.  For each menu command besides Quit, just print out "Received command X," where X is the command; we call this a "program stub," a simple placeholder so you can see that the menu framework works before you write the code that actually performs each command. Then take each command, one by one, and code and test its implementation. You should use the restaurants code as a starting point, just changing the things you need to change for this task; don't try to create a new view/controller from scratch. Start with displaying the assignment information (because that's
  the easiest).]
 (b.5) A histogram is a bar graph showing
  the distribution of all the students' scores, from highest to lowest.
  Given a list of scores, for example
(list 23 23 20 18 25 14 16 18 15 16 23)
 the histogram should display
   25 *
     24
     23 ***
     22
     21
     20 *
     19
     18 **
     17
     16 **
     15 *
     14 *
 Hints:  You might find it particularly convenient
  to create a vector of frequencies where (vector-ref
    freqency-vector N) contains the number
      of students whose score was N.  A simpler histogram would display the frequencies
      of scaled (0 to 100) scores, with 101 lines from 100 down to 0; start by
      implementing it that way.  You'll want to use the predefined round function to convert all the scores to integers.
 (b.6) Implement at least one of the following
  enhancements.  In a comment at the top of your definitions, list which one(s)
  you implemented.  Note that it is never acceptable (in class or in the real
  world) to submit buggy code.  It is much better to deliver fewer features,
  but features that work correctly, than to provide fancier functionality
  that "almost works."   [This doesn't mean that you have to
  implement every single aspect of a bullet item below, but it does mean that
  whatever you do implement must work correctly and consistently with the
  rest of your program.]
 Allow the user to change assignment and student
    information within the program, rather than just by editing the data files.
    Of course this also requires recomputing scaled and weighted scores and
    writing the files out when the user quits the program.
    
   Allow the user to add new students and new
    assignments, and to remove students and assignments, within the program
    rather than just by editing the data files.  This will require creating
    new, larger (or smaller) vectors (or else creating vectors with a default
    size and keeping separate track for each vector of how much of it is actually
    being used).  Adding a new student would require adding scores for that
    student on each assignment (although you could implement a default score
    of zero), and adding a new assignment would require adding scores for all
    students on that assignment (though you might handle it by reading the new
    scores in from a separate file).
    
   Improve the interface somehow (to give the
    user clearer or better organized information, help the user navigate through
    the functions and menus, or make it easier and less error-prone to enter
    data--not just to add decoration that doesn't serve any purpose).  For
    example, you could allow the user to request a list of students sorted by
    score on an individual assignment (or to specify sorting in ascending or
    descending order).  Or, you could implement a log file that saves a record
    of each transaction (each operation that changes the data); this could be
    useful for reconstructing the data files if they get damaged or deleted.
    
    
    
   Implement some error checking.  What if the
    input file doesn't exist (or what if it does exist when you ask to create
    a new file)?  What if the input data are not in the right order or format?
    Do the weights of the assignments add up to 100%?  And so on.
     
   Implement hierarchical, nested assignments.
    In a typical course, there might be lab assignments worth 30% of the course
    grade (let's say five assignments, each equally weighted at 20% of the
    total lab assignment score), a midterm worth 25% of the course grade, and
    a final exam worth 45% of the course grade (made up of eight problems whose
    points total to 100).  The point is that each graded item can be a single
    item (as we've been handling all along) or it can be a compound item
    (with its overall weight in the course along with some number of subcomponents
    (each of which has its own name, possible points, and weight as part of
    its parent component).   Of course that means a subcomponent is just a graded
    item, and that there's no reason subcomponents can't have their
    own subcomponents.  You'll need to represent these graded items in the
    "model" part of the program and work out how to read, write, and
    display them.
    
   Enhance the file-handling.  You could get a
    name or number for each course; incorporating that into the names of the
    data files would allow using the program for more than one course.  Then,
    when the program starts, you'd need to ask the user which course to
    handle.  You might also give the user the option to create a new class rather
    than reading information from an existing one, or to choose any name for
    the assignment and student files.
  Add a command to produce a histogram of the scores for a given graded item (e.g., just the midterm).
   Enhance the histogram in a variety of ways:
   The original histogram displays scores in one-point
      intervals.  That could lead to a pretty big histogram on a 100-point test.
      This interval is sometimes called the "bin size." You can allow
      the user to specify the bin size and display scores grouped accordingly.
     Make the upper end of the top bin's interval
      the highest score on the list (so if nobody scored above, say, 80, you don't
      have empty space between 80 and 100.  Likewise, don't go lower than
      the lowest score.
      
     Take the number of bins as the parameter (so
      you'd calculate the bin size based on the top score, the bottom score,
      and how many bins the user wants).
     Take the lowest 5% of the scores and collect
      them into the bottom bin, "N points and under."  This may spare
      the feelings of the person who had the very lowest score in the class.
      
     Scale the histogram horizontally, too:  The
      bars may be too wide if the class is large.  Let the user specify the length
      of the widest bar and scale the others accordingly.
     Print the histogram horizontally (on its back,
      so to speak).
      
     Use the functions in the image.ss teachpack to produce the histograms graphically.
        
    
   Implement the collection of students as a binary
    search tree, sorted by the students' names.
   Distinguish between no score (which would be
    appropriate if someone missed an assignment entirely) and a zero (for someone
    who did the assignment but earned zero credit).


  (b.7) Submit the file containing all your definitions as usual via Checkmate.
(c) Fill out your last partner evaluation
  form at eee.uci.edu.  Please do this by noon on Saturday at the latest,
  or you won't get credit.


Based in part on ICS H21assignments by David
G. Kay from Fall 2003; modified by David G. Kay, Fall 2004, Fall 2008, Fall 2009..


David G. Kay, kay@uci.edu 

Saturday, November 21, 2009 9:57 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw9.html
##-----------------TITLE------------------------##
Ninth Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Ninth Homework 
This assignment is due at the start of lab on
  Monday, November 23. 

(1)  We're not going to make completing
  the second midterm a part of the homework this time.  That doesn't mean
  you don't need to know how to do all the problems, though, because similar
  problems will turn up on the final exam (and, more importantly, because
  solving these problems represents the material you should be learning).
  Especially for those of you who received lower scores, it's important
  for you to determine for yourself that you can produce the answer to each
midterm question without referring to notes or an existing solution.
(2) Just as lists can contain other lists, vectors can contain lists, or even other vectors. That's how we can represent two-dimensional tables, still with constant-time access by row and column. Read this coverage of vectors containing vectors; it's also a good example of processing complex data structures layer by layer, which has been one of our main themes this quarter.
(3) Chapter 34 of the HtDP text begins
  the discussion of programs that have "state"—that is, programs
  that save values from one invocation to the next.  (This meaning of "state"
  is the same one we use when we talk about some system being in a "dormant
  state" or an "overloaded state."  A system's "state"
  is its status, and we often implement that with saved values which we can
  change with assignment statements.)  There aren't exercises in this chapter,
  but read it anyway.
 (4) Chapter 35 introduces set!.
  You should be able to do exercise 35.2.1. But please note that using set! means your program isn't following the functional style any more; assignment statments have their uses, but in Scheme programs those uses are very limited. You should know about them, but don't start writing all your Scheme programs in the imperative style.
 (5) Chapter 36 talks about the situations
  in which you'd choose to use "stateful" programs.  Note, though,
  that their examples can still be accomplished in a functional style, simply
  by keeping the state as part of the data (having a separate field in the
  traffic light, for example, to say what its current color is) and passing
  the whole object back and forth as usual.
 (6) Chapter 37 gives further examples
  of programs with state.  The rest of the book is interesting, too, but we
  just don't have the time for all of it.  You might note, though, the
  examples in Section 43.2; one use of mutation is to create data structures
  with cycles—that is, with interconnecting links.


Based in part on ICS H21assignments by David
G. Kay from Fall 2003; modified by David G. Kay, Fall 2004, Fall 2007, Fall 2008.

David G. Kay, kay@uci.edu 

Saturday, November 21, 2009 10:10 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw8.html
##-----------------TITLE------------------------##
Eighth Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Eighth Homework 
  Complete this assignment by the start of lab on
  Monday, November 16.
(1) Chapter 30 of HtDP introduces
accumulators; Chapter 31 continues the topic.  Being able to rewrite a function
using an accumulator can give you significantly better performance, so it's
a technique worth mastering.  Chapter 32 gives three longer examples. Do exercises 30.1.1 and 30.1.2.
 (2) We're not doing Intermezzo
  6 (Chapter 33).  You'll see this material in ICS 51.
 (3) We have posted some code to implement parts of an iTunes-like system. Look it over in preparation for the next lab. There's nothing to turn in for this part.


  Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008, Fall 2009.

David G. Kay, kay@uci.edu 

Saturday, November 21, 2009 9:57 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/lab5.html
##-----------------TITLE------------------------##
Lab Assignment 5
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 5 

  This assignment is due at the end of lab on
  Friday, October 30. 

  Choose a partner for this assignment, someone
    you haven't worked with already.  Starting with this assignment, change
your language level to Intermediate Student with Lambda.

(a) 

In class, we did an "inorder traversal" of a BST, the equivalent of exercise 14.2.3; we called it BST->list.  (Note that the textbook arranges their trees a little differently, with an empty node as false where we used empty.  Either way works, so long as you stick to one way consistently.  Also, each node in their trees has two value fields, a number and a name, rather than just the single number we used.)  We also did the insertion of an item into a BST, the equivalent of exercise 14.2.5; we called it BST-insert.  And we wrote a function to take a list of items and insert each item into a BST, the equivalent of exercise 14.2.6; we called it list->BST.  You should know how to recognize these functions and how to write them.
In class we did not write a function to search for an item in a binary tree, the equivalent of exercise 14.2.4.  So we'll give you a chance to do it now.  Write the function BST-member? as described below.  Write it to process BSTs as we defined them in class (rather than as described in the book).
;; BST-member?: number  BST  ->  boolean
;; Return true if number appears in BST and false otherwise
(check-expect (BST-member? 17 empty) false)
(check-expect (BST-member? 17 (list->BST (list 17))) true)
(check-expect (BST-member? 17 (list->BST (list 34 43 28 16 17 24 134 34))) true)
(check-expect (BST-member? 17 (list->BST (list 34 3 23 2 25 26 24))) false)
Here are some hints if you'd like them: You have the contract, purpose statement, and examples above. Next, write the function header (define and lambda). Since a tree is either empty or not, have a cond to distinguish. Now, what do you return if the tree's empty? If it's not empty, what two things do you have to look at? What if they're equal, what do you return? If they're not equal, you're going to have to keep looking (recursively) in either the left subtree or the right subtree; how do you decide which?
Submit your definitions
  via Checkmate. 


(b) 
Do exercises 14.3.2, 14.3.3, and 14.3.4
  (in which the predefined function max, which returns the largest of its arguments,
    will be useful).  Note that the representation of web pages used in this
    section is a bit odd, since each linked page is nested within the page that
    links to it (and you can't, therefore, have two pages that link to each
    other).  It's still a useful vehicle for these exercises, which explore
    some fundamental operations on trees, and the authors refine this representation
    later in the book.
 After that, do exercises 14.4.1 (do the data
  definition and just two of the parts), 14.4.2 (this goes through a list
  containing other lists, following the same general pattern as the exercises
  in the previous section), 14.4.3, and 14.4.4. 
Do exercises
  15.3.1, 15.3.3, and 15.3.4.

Do exercise 17.6.1 and one exercise chosen
from 17.6.2 through 17.6.6. (If you choose 17.6.2, write the reveal-list function, but it's not necessary to do the part of the problem where you use the hangman.ss teachpack to make a complete Hangman game, since that depends
on a problem that was not assigned previously.)

Do exercises 17.7.1, 17.7.2 (just parts 1,
3, and 5), 17.7.3, and 17.7.4.  Then do exercises 17.8.3 and 17.8.5.

  Collect these definitions and submit them
as usual via Checkmate.
(c) In class we will discuss how to change our restaurant
structure so that instead of just one best dish and its price, each restaurant
has a menu of dishes.  So a new-rrant is
(make-new-rrant
  name cuisine phone menu)
 where name is a string, cuisine is a string,
  phone is a string, and menu is a list of dish structures (see below).  We'll
  define the new structure more or less like this:
(define-struct
  new-rrant (name cuisine phone menu))
 The menu is a list of dishes—that is,
  the new-rrant structure contains a list as one of its fields.  Each dish on the list has a name and a price.  So a dish is
(make-dish
  name price)
 where name is a string and price is a number,
  defined with
 (define-struct dish (name price))
 (c.1) To the restaurant definition below,
  add a third dish:  Paht Woon Sen at $7.95. 
  (define R1 (make-new-rrant "Thai
    Touch" "Thai" "949-640-0123" 
                             (list (make-dish "Mee Krob" 8.50) 
                                 (make-dish "Larb Gai" 10.25))))
 Write a Scheme expression that defines R2 as
  a new-rrant structure for the French restaurant Pascal whose phone number is 940-752-0107;
    they serve escargots for $12.95, poached salmon for $18.50, rack of lamb
    for $24.00 and marjolaine cake for $8.50.
 (c.2) Write the function new-rrant-first-dish-name that takes a new-rrant as its argument and returns the name of the first dish on the restaurant's
  menu.  Remember to write the test cases and examples before you write the
  function.  You should include code to check whether the menu has zero dishes
  and return empty if so.
 You may find yourself needing to extract the
  menu from the argument twice; use local to avoid that.
 (c.3) Write the function dish-cheap? that takes a dish structure and a number and returns true if (and only if)
  the price of the dish is less than the specified number.
 (c.4) Write the function menu-all-cheap? that takes a menu (i.e., a list of dish structures) and a number and returns
  true if (and only if) all the dishes on the menu have a price less than
  the specified number. You may write your code to return true if the menu
  doesn't have any dishes; don't produce an error message.  Of course
  you should use dish-cheap? in your definition.
 (c.5)  Write the function new-rrant-all-cheap? that takes a new-rrant and a number and returns true if all the dishes the restaurant serves cost
  less than the specified number.  Of course you should use menu-all-cheap? in your definition.
 (c.6) Write the function menu-prices that takes a menu and returns a list of numbers where each number is the
  price of a dish on the menu.  That is, your function will collect all the
  prices of the dishes into a list and return that list.
 (c.7) Write the function menu-average that takes a menu and returns the average price of the dishes on that menu.
  Think about how you compute an average, what quantities you need, and how
  to get them.  The predefined function length will be helpful; it will also be helpful to write a function sum that returns the sum of a list of numbers.  Note also that you'll need
    to check for an empty menu and return zero in that case, so you don't
    divide by zero.
 (c.8) Write the function new-rrant-cheap? that takes a new-rrant and a number and returns true if the average price of the restaurant's
  menu is less than the specified number.
 (c.9)  Write the function new-rrant-keep-cheap that takes a new-rrant and a number and returns (a newly constructed copy of) that restaurant with
  all the menu items that aren't cheap removed.  The right way to go about
  this is to follow the pattern of the functions above:  Start by writing
  a function to operate on a menu, and then call that function from your new-rrant-keep-cheap function.  The actual removal task follows the pattern of some of the functions
    we've already seen.
 (c.10) Write the function cheap-new-rrants that takes a list of new-rrant structures and a number and returns a list containing only the cheap restaurants—the
  ones whose average menu price is less than the number.  Use new-rrant-cheap? in your definition, of course. 
 Collect all of these definitions and submit
  them via Checkmate.

  (d) Now, reimplement the collection class to store
    the restaurants in a binary search tree ordered by the restaurants'
  names.  This will involve changing all the definitions in the collection
part of the code, but none of the definitions elsewhere.
 Your data definition will be as follows:
;; A treenode is either
  ;; 1. empty
  ;; 2. (make-treenode rootvalue left right), where rootvalue is a rrant and left 
  ;; and right are treenodes, representing the left subtree and right subtree, 
  ;; and (this is the BST property) where all of the restaurant names in the left
  ;; subtree are earlier alphabetically than the name of the rootvalue restaurant, 
    ;; all names in the right subtree are greater, and both subtrees are BSTs.
 Here are some tips, hints, and simplifications: 
 —The code you wrote in part (a) and the code we wrote in class should be
  a useful guide. 
 —To compare strings alphabetically, use string=?, string>?,
  or string<?. 
 —The collection->list function should do an inorder traversal of the tree, so it produces a sorted
  list. 
 —Assume that every restaurant in the collection
  will have a unique name.  Under that assumption, there will be no duplications,
  so that collection-search will always return a one-element collection or an empty collection.
 —Deleting items from a BST is very tricky
  if the item has two children, because you can't leave holes and you
  need to maintain the BST property.  We'll learn the algorithm for this
  some day, but for now, you can skip it: collection-remove can just return the same collection unchanged.
 (e) Remember that each partner must
  complete a partner evaluation form  on eee.uci.edu.


Based in part on ICS H21assignments and exams
by David G. Kay from Fall 2001; modified by David G. Kay, Fall 2004–Fall 2009.

David G. Kay, kay@uci.edu 

Friday, October 23, 2009 12:45 PM


ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h21/hw/hw6.html
##-----------------TITLE------------------------##
Sixth Homework
##------------------TEXT------------------------##
ICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Sixth Homework

  This assignment is due in lab on Monday, November 2.  If you haven't already, change your language level to Intermediate Student
  with Lambda before you begin.
(1) Chapter 19 starts the book's
discussion of higher-order functions (functions as arguments).  Look at exercises 19.1.1 and 19.1.2; they should be easy for you now, so you don't have to write down the answers.
 (2) Chapter 20 continues with higher-order
  functions.  Do exercises 20.1.3, 20.2.1, 20.2.2, 20.2.3, and 20.2.4.

(3)  Chapter 21 of the HtDP text starts
with an unusually clear design recipe for abstracting, or refactoring, functions.
It continues by introducing the predefined functions map, filter, and foldr (also known as reduce or accumulate); we'll talk about these in class on Tuesday. Do exercises 21.1.1., 21.1.2, 21.2.2 (pick just one of the three parts), 21.2.3.

(4)  Chapter 22 of HtDP has a section
that introduces graphical user interfaces (GUIs).  We won't be doing GUIs explicitly this quarter, but
if you're intrigued with the GUI-building tools in DrScheme, note that
the gui.ss teachpack  works differently from the description in section
22.3 of the printed text.  You can look up the current gui.ss teachpack documentation
in the Help Desk.  (DrScheme also has a full-blown set of GUI operations,
but they're not in the student languages.)

(5)  We're not doing Chapter 23.
 It's interesting, and functional programming is beautifully suited
to mathematical problems, but there are only so many hours in the quarter.
 If you're interested, come back to this chapter over the winter break.

(6)  Intermezzo 4 (Chapter 24) talks
about lambda, which you know already.  Do exercises 24.0.8 and 24.0.9.
(7)  All the programs we've written
so far have done their work, displayed their results, and quit without leaving
a trace.  Now it's time to learn how to read data from a file and write
results back to a file so we can maintain information more permanently,
even when our program isn't running.  For a programming language to
enable file input and output, it must work with the operating system (or
multiple operating systems) to handle a variety of issues involving different
user interfaces, different ways of storing data in files, different naming
conventions for files, and different hardware devices.  Because there are
many options, there are details to consider when we work with files that
we haven't had to worry about so far.

  There are three main approaches to reading
    from and writing to files of text.  (Reading and writing data directly in
    the internal form the computer uses to store it in memory is yet another
approach, one we'll skip over for now.)

    Read and write a single character
      at a time.  If you read each character individually, you have the most precise
      control over how you analyze the input and build up the data structures
      in your program.  But this approach is the most painstaking and tedious.
      You may cover some techniques for organizing this process in ICS H22, but
    we won't use it this quarter.Read each line of the file
      into a string, perhaps collecting the strings into a list representing the
      whole file.  Then you could process the list conventionally, processing
      each string using Scheme's string functions.  This week we'll do
    some of this.Write all the data as Scheme
      expressions, and read it back in the same way.  If your program's data
      is organized into lists of structures and so on, you can preserve all of
      that organization using this approach.  This is the easiest approach in
      many ways, since you're maintaining the structure of the data and letting
      Scheme do a lot of the work for you.  We'll see this approach in later
    assignments.


Based in part on ICS H21assignments and exams
by David G. Kay from Fall 2001; modified by David G. Kay with material from
Informatics 41, Fall 2004-Fall 2009.

David G. Kay, kay@uci.edu 

Friday, October 31, 2008 1:08 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/398b/hw/intro.html
##-----------------TITLE------------------------##
Advanced TA Seminar
##------------------TEXT------------------------##
ICS 398B — UC Irvine — David G. Kay
 Activity 1: Design an Introductory Course
You've just taken a new job as an assistant professor. Your department chair has asked you to design a course that will introduce (some aspects of) your field (computing, engineering, math) to students with no previous background.  
Prepare three slides as follows (though in some forms, like PowerPoint, it might take more than three to fit this information):
The goals of your course: Roughly five things that your students should be able to do at the end of the course.  (We call these "student learning outcomes" and we phrase them using active verbs.  This is generally clearer, more concrete, and easier to measure or assess than just listing topics.)  These goals are independent of the order in which you cover them; that's a question for later.
  
  The major graded items (assignments, projects, quizzes, tests) you plan to assign.  Just give a five-word description of each (e.g., "Group project to analyze a business's information usage" or "final exam"); designing actual assignments and exams is a topic for later in the course.
   
  A brief course outline, with two or three words per class meeting. (In a ten-week quarter, you might have 20 meetings, two 80-minute meetings per week, or 30 meetings with three 50-minute meetings. These are the choices at UCI; of course it could be different elsewhere.) Unlike the goals, this outline is chronological and lists topics you plan to cover.  You may wish to look at this detailed checklist for instructors planning a course or an actual course syllabus (or two or three) for a list of the kinds of things you want to have decided by the start of the course. 
Your goal  is to produce a brief synopsis of your work, so we can see what your class involves.  Don't spend a lot of time making it look polished; it's better that you spend that time thinking about course design tradeoffs. 
Please  bring an electronic version to class to present  (anything that will work with the classroom projection system is fine).

 David G. Kay,  kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/398b/hw/exams.html
##-----------------TITLE------------------------##
Advanced TA Seminar
##------------------TEXT------------------------##
ICS 398B — UC Irvine — David G. Kay
Activity 4: Design Exams for Your Course
For next time, think about the quizzes and/or exams you'll be giving in your class. If your course wasn't designed to include exams, pick one of these approaches:
Design an exam you'd give if your 
institution required that every class
have a final examDesign a diagnostic test to give
students at the beginning to make
sure they have the necessary
prerequisite knowledge and skillsRefine further your design for the 
major assignment(s)Prepare three slides (give or take) and add them to your existing presentation:
An outline of the exam structure in the course, showing where each exam would come in the course outline.  (The best way to do this would be to copy your class-by-class course outline and add each quiz or exam to the copy at the place where it would occur.) For each quiz or exam at this point, yhou'd just need a few words (e.g., "First quiz, covering basics of O-notation, 20 minutes" or "First midterm, covering all topics through trees, 80 minutes").
  
  A more detailed outline of the first quiz or exam. For each question, describe what you're testing, the form of the question, and its weight. For example:
  
  O-notation:  Give students code, ask them for
         the O-notation of its execution time (10%)Recursion:  Ask students to describe in English
         what value a short recursive function returns (5%)Binary trees:  Given a tree, produce its contents in the
         order that a preorder traversal would visit them (5%)
  
  
  One page of actual questions from that first quiz or exam. Write the question(s) exactly as you'd give them to the students. (Remember back to vague, incomplete, ambiguous, or otherwise flawed exam questions you have seen, and avoid those characteristics.)Please  bring an electronic version to class to present  (anything that will work with the classroom projection system is fine). Remember to combine this with your goals and outline from last time, so we can refer back to the previous material.
As always, feel free to send me e-mail or visit me with questions or comments.

 David G. Kay,  kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/398b/hw/assts.html
##-----------------TITLE------------------------##
Advanced TA Seminar
##------------------TEXT------------------------##
ICS 398B — UC Irvine — David G. Kay
Activity 3: Design Assignments for Your Course
For the next class, think about the assignment structure for your course: How many? What kinds, and where do they fit in Bloom's taxonomy? Will you allow or require collaboration? How do your assignments address the most valuable parts of the course or the most difficult parts (which you identified earlier)?
Prepare two slides (give or take) and add them to your existing presentation, so everything is in one document:
An outline and summary of each assignment with a line or two to describe each, plus answers to these questions: Which level(s) in Bloom's taxonomy does this assignment exercise? Which of the student learning outcomes does it help achieve? What does it do to help with the hardest or most important concepts you identified?
    
  A good way to present this would be to make a copy of your course outline and on the copy, show each assignment at the point in the course where it would be due.
  
  A detailed description of one assignment. Write a half-page (more is okay) of the actual assignment language you would give to the students. Then describe the rest of the assignment, if the half-page doesn't describe it completely, in a detailed outline.Please  bring an electronic version to class to present  (anything that will work with the classroom projection system is fine). Remember to combine this with your goals and outline from last time, so we can refer back to the previous material.

 David G. Kay,  kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/398b/hw/overview.html
##-----------------TITLE------------------------##
Advanced TA Seminar
##------------------TEXT------------------------##
ICS 398B — UC Irvine — David G. Kay
Activity 2: Design a Course of Your Choice
For most of the rest of the quarter,
each of you will design a course
of your choosing.  We will approach this in stages.
For the next class, first choose the topic of your course.
  You may stick with the intro course you've already started or you may choose any
  other topic that might reasonably be offered
  in your field.  You should not feel
  bound by any course that currently exists, in ICS or elsewhere.  On the other
  hand, if you wish to borrow from an existing
  course, that's fine; just cite which course and
  whose materials you're using.  There's a long
  tradition in teaching of borrowing materials
  from other instructors; not everything you use
  has to be perfectly original.  But for purposes
  of our seminar, you're not going to learn much
  if you just copy someone else's materials
  wholesale.
Prepare four slides as follows (though it may take more if you use PowerPoint):
Background:  What institution is your
course offered at (UCI, MIT, ...)?  What are
the students like?  Is it on quarters or
semesters?  What's the topic of your course?
What audience level are you aiming at
(first-year students, seniors, ...)?  Is the
course required?  What are the prerequisites?
What do you expect the class size to be?
Will you have TAs or graders?  Will there
be scheduled discussion or lab sessions?
You have free rein to make up the answers
to these questions, but once you decide, you
need to design your course to meet those
constraints.
  
  Student learning outcomes:  As before, what are the 5-10 goals or outcomes
of your course (things
you want students to be able to do by the end
of the course)?  (Think about how you might
measure how students have attained these
goals, but don't write anything about that yet.)
Also answer these questions:  What are the
three most valuable or most important concepts
in the course for students?  What do you think
will bethe three most difficult concepts or skills
in the course (for you to teach, for the students to learn)?
  
  Outline/schedule:  For each class meeting,
write 3-5 words about the topic or activity for
that meeting.  In a typical quarter-long class
with 10 weeks and 2 meetings per week, that
would be 20 lines.  Be sure to leave time for
holidays (usually one or two per quarter) and
for exams (if you're having any). 
  Active learning: Everything we currently know about learning tells us that straight lecturing is not a very effective way to get students to learn. Pick one class meeting from your outline above and describe how you will address those topics using some kind of active learning techniques.Please  bring an electronic version to class to present (anything that will work with the classroom projection system is fine). Keep your own copy of these slides; you'll be adding to them as the quarter goes on and sending/presenting the whole revised package each time, so we can refer back to the previous material.
As always, feel free to send questions or comments by e-mail (or stop by in person, of course).

 David G. Kay,  kay@uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/131/Companies.html
##-----------------TITLE------------------------##
Companies Finding Some Computer Jobs Best Done in U.S.
##------------------TEXT------------------------##
International National Politics Business Technology Science Health Sports New York Region Education Weather Obituaries NYT Front Page Corrections Editorials/Op-Ed Readers' Opinions Arts Books Movies Travel Dining & Wine Home & Garden Fashion & Style New York Today Crossword/Games Cartoons Magazine Week in Review Photos College Learning Network Archive Classifieds Theater Tickets Premium Products NYT Store NYT Mobile E-Cards & More About NYTDigital Jobs at NYTDigital Online Media Kit Our Advertisers Your Profile E-Mail Preferences News Tracker Premium Account Site Help Privacy Policy Home Delivery Customer Service Electronic Edition Media KitText Version 



    

 
   
   
 
    News by SubjectAll of Nytimes.com 
	Sign Up for Newsletters
    Create/Edit E-Mail Alerts 
   
  

    






             
           


             
          
	       
		  April 28, 2004
		  
		  

		  
		  Companies Finding Some Computer Jobs Best Done in U.S.

	           By EDUARDO PORTER

		   
            
                   
             
          
             

	     
              •Cap on U.S. Work Visas Puts Companies in India in a Bind (Oct 1, 2003)•Computer Programmer Faces U.S. Fraud Charge in Virus Attack (Dec 18, 2002)•Offshore Jobs in Technology: Opportunity or a Threat? (Dec 22, 2003) 
                                         
                            

                            

                            
					
Find more related articles by selecting from the following topics:
				

                            


  Business Administration and Management
  Computer Science



                                 Track a subject by e-mail
                            
	  ven as the prospect of high-skilled American jobs moving to low-wage countries like India ignites hot political debate, some entrepreneurs are finding that India's vaunted high-technology work force is not always as effective as advertised.     "For three years we tried all kinds of models, but nothing has worked so far," said the co-founder and chief technology officer of Storability Software in Southborough, Mass. After trying to reduce costs by contracting out software programming tasks to India, Storability brought back most of the work to the United States, where it costs four times as much, and hired more programmers here. The "depth of knowledge in the area we want to build software is not good enough" among Indian programmers,  the executive said.     If it sounds like "Made in the U.S.A." jingoism, consider this: The entrepreneur, Hemant Kurande, is Indian. He was born and raised near Bombay and received his master's degree from the Indian Institute of Technology in that city, now known as Mumbai. Mr. Kurande is not alone in his views on "outsourcing" technology work to India. As more companies in the United States rush to take advantage of India's ample supply of cheap yet highly trained workers, even some of the most motivated American companies — ones set up or run by executives born and trained in India — are concluding that the cost advantage does not always justify the effort.     For many of the most crucial technology tasks, they find that a work force operating within the American business environment better suits their needs.      "Only certain kinds of tasks can be outsourced — what can be set down as a set of rules," said Nariman Behravesh, chief economist of Global Insight, a forecasting and consulting firm based in Waltham, Mass. "That which requires more creativity is more difficult to manage at a distance."     Another Indian executive in the United States who has soured on outsourcing is Dev Ittycheria, the chief executive of Bladelogic, a designer of network management software with 70 workers, also in Waltham. Bladelogic, whose client list includes  General Electric and Sprint, outsourced work to India within months of going into business in 2001. But it concluded that projects it farmed out — one to install an operating system across a network, another to keep tabs on changes done to the system — could be done faster and at a lower cost in the United States.     That was true even though programmers in India cost Bladelogic $3,500 a month versus a monthly cost of $10,000 for programmers in the United States.  "The cost savings in India were three to one," Mr. Ittycheria said . "But the difference in productivity was six to one."     Bladelogic's chief technology officer, Vijay Manwani, born and educated in India, predicts that once the "hype cycle" about Indian outsourcing runs its course, projects will come back to the United States "when people find that their productivity goals have not been met."      The upshot is that high-technology corporations are likely to ship more and more business functions to India to take advantage of its well-trained work force. However, even as they do so they will keep many essential tasks here.      For instance, Storability Software, which designs systems to manage data storage and has 25 employees in the United States, first tried to outsource some core programming tasks to a big software contractor in India. When that did not work, it tried a more specialized boutique. When this company did not deliver up to Storability's specifications either, the company hired four programmers in the United States to help rewrite the code.      But Storability also stuck to India, setting up its own small shop in Pune late last year, where its 25 programmers perform noncore tasks. "We essentially realigned our motivations," Mr. Kurande said. "We were able to figure out areas of our engineering that suited them."    The Indian entrepreneurs in this country — business executives with the cultural affinity and local connections that might be most conducive to making offshore partnerships work — do not fault the work ethic of the programmers in India. But they say the geographic distance and the differences in business contexts can be difficult to bridge.     A typical challenge is the difficulty of finding programmers overseas who can go beyond following well-known procedures to the next steps of identifying problems and creating new solutions.      For instance, ConnecTerra, a Cambridge, Mass., company that designs software to manage data from electronic devices like new radar-based ID tags that companies can use to track inventory, tried programmers in India last year. But ConnecTerra, which has 30 employees in the United States, ultimately gave up on outsourcing because the Indian company that it worked with could not deal with the fast-changing requirements.      Murali Menon, an Indian-born executive who was ConnecTerra's vice president for engineering at the time, dealt with the recruitment of the Indian company. He said the Indian programmers required more detailed instructions to write the software code than would a programmer here, who would be more familiar with the customer's needs. This slowed the process, which was a major drawback because this technology is new and changing very fast. Ultimately, the product that the Indian programmers delivered was unwieldy, with software code written in one big chunk rather than more flexible modules that top programmers use now.   No one questions the dedication of Indian programmers. "They worked hard," Mr. Menon said of the programmers in India, "but couldn't keep up."   (Executives at Bladelogic, Storability and ConnecTerra declined to divulge the names of the companies they have worked with in India, saying that it might damage potential business relationships for other work in the future.)      In the end, many say the advantages of keeping some of the most sophisticated work in the United States are related to the factors that draw technology entrepreneurs from India and elsewhere to this country in the first place: Indian engineers and software designers in this country know that the businesses whose needs are driving technological innovation are mostly in the United States. It comes down to being where the customers are.      A defense of the programming industry in India comes from Bassab Pradhan, the senior vice president for worldwide sales for  Infosys Technologies. Infosys, based in Bangalore, is India's largest software services company. Of its revenue of $1.06 billion last year, about two-thirds came from American corporate clients including Visa International,  Boeing and  Cisco Systems; it provides them  with services like data entry, programming and customer technical support.      Mr. Pradhan, who is Indian-educated, disagrees with critics who say that Indian-trained workers lack creative ability. When outsourcing fails, he said, it is typically because "less disciplined" businesses try to farm out projects that are not properly defined.     But Mr. Pradhan agreed that the need for proximity to the final user of the technology does place limits on what types of tasks can be outsourced. "Whenever the pace of innovation is very rapid," he said, "is when the work should be done closer to the client."     In the future international division of labor, Mr. Pradhan said, the production of the technology will be done in places like India, which can deliver it reliably at a low cost. What cannot be sent to India, he said, is the invention of new business processes and technologies.      Conceiving inventory-management software that helps a retailer make the best use of electronic product tags, for example, might be something best done by system designers in the United States working closely with the retailer. Once such a system and its tasks have been mapped out, though, the software code could be written by programmers in India.   Such distinctions are why even the champions of India's programmers-for-hire industry are trying to do more work within the United States. This month, for instance, Infosys announced that it would spend $20 million to set up a consulting company in the United States. It has already hired some top consultants from companies including Deloitte Consulting, Cap Gemini, Ernst & Young and E.D.S., and plans to recruit others.   Innovative business processes result from "an understanding of the business that happens when people get into a room and talk to each other," Mr. Pradhan said. "That is very difficult to outsource."



Return to College Times

       

        
        
         







        


Copyright 2001 The New York Times Company

  |  

Privacy Information

   



 








    
    








 
Stay connected to the news that interests you with free e-mail alerts from The New York Times using your edu-based e-mail address.
Begin by entering your topic here:
  
 
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/computer.law/cyberlawcourse/
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Use your browser's BACK button to return to this index


Faculty


Meet Our 
Faculty
Introduction

Lesson 
1Introduction
Copyright Law

Lesson 
2Copyright 1:Copyright In Cyberspace
Lesson 
3Copyright 2:Pretty Much All Writings are Copyrighted
Lesson 
4Copyright 3:Electronic Copying Can Infringe a Copyright
Lesson 
5Copyright 4:"Copying" Covers Many Kinds of Copying
Lesson 
6Copyright 5:It's OK to Copy Facts and Ideas
Lesson 
7Copyright 6:A Copyright Owner's Conduct May *Sometimes* Create an 
"Implied License" that Lets Others Copy
Lesson 
8Copyright 7:Some Copies are OK Because they are "Fair 
Uses"
Lesson 
9Copyright 8:More on "Fair Use"
Lesson 
10Copyright 9:Still More on "Fair Use"
Lesson 
11Copyright 10:Some "Fair Use" Examples
Lesson 
12Copyright 11:The Liability of Service Providers
Privacy Law

Lesson 
13Privacy 1:Privacy Law in Cyberspace
Lesson 
14Privacy 2:Informational Privacy
Lesson 
15Privacy 3:Informational Privacy on the Net
Lesson 
16Privacy 4:Privacy and the Fourth Amendment, Part 1
Lesson 
17Privacy 5:Privacy and the Fourth Amendment, Part 2
Lesson 
18Privacy 6:Privacy and the Fourth Amendment, Part 3
Lesson 
19Privacy 7:Statutory Protections for Privacy
Lesson 
20Privacy 8:Exceptions to ECPA Protection
Lesson 
21Privacy 9:ECPA: Material You Might Have Stored on Your Computer
Lesson 
22Privacy 10:Self-Help: Encryption
Lesson 
23Privacy 11:Privacy: Self-Help: Anonymity, Part 1
Lesson 
24Privacy 12:Privacy: Self-Help: Anonymity, Part 2
Lesson 
25Privacy 13:Private Spaces
Trademark  Law

Lesson 
26Trademark 1:Overview and Definition
Lesson 
27Trademark 2:How Do You Obtain a Trademark?
Lesson 
28Trademark 3:What Happens if I Use Someone Else's Trademark?
Lesson 
29Trademark 4:What Does that Little "tm" Symbol Mean, 
Anyway?
Lesson 
30Trademark 5:Are Domain Names Trademarks?
Lesson 
31Trademark 6:Trademarks on the Net II - Other Uses of Trademarks
Libel Law

Lesson 
32Libel 1:Libel and Defamation
Lesson 
33Libel 2:Libel: Defenses
Lesson 
34Libel 3:Libel and the First Amendment
Lesson 
35Libel 4:Libel Online: I
Lesson 
36Libel 5:Libel Online II
Lesson 
37Libel 6:Libel Online III
Lesson 
38Libel 7:Injury to a Pseudonym's Reputation?
Lesson 
39Libel 8:Trade Libel
Free Speech Law

Lesson 
40Free Speech 1:A Brief Road Map
Lesson 
41Free Speech 2:The First Amendment Applies Only to the Government
Lesson 
42Free Speech 3:In What Capacity is the Government Acting?
Lesson 
43Free Speech 4:Government as Sovereign -- Three Levels of Protection
Lesson 
44Free Speech 5:Government as Sovereign and Fully Protected Speech, Part 
I
Lesson 
45Free Speech 6:Restrictions of Fully Protected Speech, Part II
Lesson 
46Free Speech 7:Speech and Sex: Obscenity and Child 
Pornographyø
Lesson 
47Free Speech 8:Speech and Sex (Continued): 
Mostly About Child Listeners
Lesson 
48Free Speech 9:Anonymous Speech
Lesson 
49Free Speech 10:Annoying / Offensive / Harassing Speech, Part 1 of 4
Lesson 
50Free Speech 11:Annoying / Offensive / Harassing Speech, Part 2 of 4
Lesson 
51Free Speech 12:Annoying / Offensive / Harassing Speech, Dissent Part 3 of 
4
Lesson 
52Free Speech 13:Annoying / Offensive / Harassing Speech Continued, Dissent Part 
4 of 4
Lesson 
53Free Speech 14:Commercial Advertising
Lesson 
54Free Speech 15:Government as Employer
Lesson 
55Free Speech 16:Government as Proprietor, Generally
Lesson 
56Free Speech 17:Government as Proprietor in Cyberspace
Lesson 
57Free Speech 18:Government as K-12 Educator
Lesson 
58Free Speech 19:More on Government as Educator, Including Universities
Lesson 
59Free Speech 20:Government as Subsidizer or Speaker

Lesson 
60Free Speech 21:Academic Freedom -- Scholarship
Lesson 
61Free Speech 22:Academic Freedom -- Teaching
Lesson 
62Free Speech 23:Vagueness
Lesson 
63Free Speech 24:Prior Restraints
Lesson 
64Free Speech 25:"Congress Shall Make No Law . . ." / "The 
Framers Meant To . . ."  /
 "The Framers Never Meant To . . ."
Lesson 
65Free Speech 26:A Few Examples -- Problem 1




Contract Law in Cyberspace


Lesson 66Contract Law in Cyberspace 1:The Basic 
FrameworkLesson 
67Contract Law in Cyberspace 2:How Do You 
Accept Offers?Lesson 
68Contract Law in Cyberspace 3:Contracts 
of AdhesionLesson 
69Contract Law in Cyberspace 4:The Terms 
of the ContractLesson 
70Contract Law in Cyberspace 5:The 
Requirement of a *Signed* Contract


Content Regulation: The CDA

Lesson 
71Content Regulation: The CDA 1: Content 
Regulation and the Communications Decency Act of 1996Lesson 
72Content Regulation: The CDA 2: Applying 
the Law, Part 1Lesson 
73Content Regulation: The CDA 3: Applying 
the Law, Part 2Lesson 
74Content Regulation: The CDA 4: The Case 
For the CDALesson 
75Content Regulation: The CDA 5: The 
CDA:  Rebuttal and ConclusionLesson 
76Content Regulation: The CDA 6: The 
CDA:  We Report from the Supreme Court


Dispute Resolution in Cyberspace


Lesson 77Dispute Resolution in Cyberspace 1:Introduction
Lesson 78Dispute Resolution in Cyberspace 2:Dispute Resolution in Cyberspace: What 
It Is
Lesson 79Dispute Resolution in Cyberspace 3:Disputes In Cyberspace
Lesson 80Dispute Resolution in Cyberspace 4:Online Dispute Resolution






Downloadable Cyberspace Law Papers For 
Cyberspace Law Abstracts
Edited by Larry Lessig.

Lawpaper

Cyberspace-Law for Non-Lawyers is presented by 
the Cyberspace Law Institute, Social Science Electronic 
Publishing.



[ Return to SSRN ]
[ CyberSpce Law Seminars  |
 CyberSpace Law Papers ]





Copyright Â© 1999 Social Science Electronic Publishing, Inc. All Rights 
Reserved
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/104/hw/hw1.html
##-----------------TITLE------------------------##
ICS 104 * Assignment 1
##------------------TEXT------------------------##
WINTER 2004
-- Information and Computer Science
-- UC Irvine -- David G. Kay
-- ICS 104


FIRST HOMEWORK


This assignment is due by noon on Monday,
January 26. 

HCI Notebook: As we discussed the first
day of class, we expect every student this quarter to carry at (nearly)
all times small notebook (as simple as two quarter-folded sheets of paper
or as complex as a hand-held PDA).  Whenever you observe a particularly
bad example of interaction design (or a particularly good one), jot down
the details in your notebook.  Often these instances are fleeting and subtle;
you may think you'll remember and write it down later, but chances are
you won't, so it's best to carry the notebook and record the details
when they occur.

(a)  Pick two different instances of
bad design from your HCI notebook.  These may involve computer systems or
any human-created object.  For this part of the assignment, you may pick
relatively small, simple instances (like the elevator buttons in the new
CS building elevators, but don't pick ones we discussed in class). 
For each,

Describe the relevant details of the system
(if your system wouldn't be familiar to the typical computer science
student, give enough background description to explain it).

Explain the problem(s) you encountered, relating
them to failures of usability goals or principles.  (Jakob Nielsen's
usability heuristics are available at http://www.useit.com/papers/heuristic/heuristic_list.html.)

Suggest a way to remedy each problem, again
relating each suggestion to the usability goal or principle that it addresses.

Your description of each instance should be
shorter than one single-spaced page of text (though with illustrations it
may actually span more than one page).

(b)  Pick a web site somewhere at uci.edu
that you use frequently.  Analyze it as described above, but in somewhat
more detail involving more than one feature or function.  As an upper limit,
don't spend more than an hour exploring the site and making notes, and
don't write more than two single-spaced pages of analysis (which again
may span more pages than that as you include illustrations).  

Your analysis should address who the intended
users of the site are, what the users want to achieve by using the site,
how the site failed to serve these users and their goals (including, if
applicable, characteristics of the users and their backgrounds that the
site designers didn't understand or accommodate well), and what makes
your suggested improvements better.

Your analysis should focus on usability issues
rather than pure functionality; while the line is sometimes hard to draw
(adding a search feature, for example, is increased functionality that also
affects the usability of a site), don't try to solve the problems by
making the system into something that it wasn't intended to be.

Written by David G. Kay, Winter 2004, based
on assignments by Alfred Kobsa and Nayla Nassif.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Friday, January 16, 2004 -- 12:22 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/104/hw/hw4.html
##-----------------TITLE------------------------##
ICS 104 * Assignment 4
##------------------TEXT------------------------##
WINTER 2004
-- Information and Computer Science
-- UC Irvine -- David G. Kay
-- ICS 104


FOURTH HOMEWORK


This assignment is due by noon on Wednesday,
March 17.  It's a long one with many parts, some involving third parties
and others involving unfamiliar software, so you'll need to start early
and allow for the inevitable stumbling blocks.

Summary:  Evaluate the usability of
a retail website chosen from the two alternatives below and propose a validated
redesign of the site.  The alternatives are

The UCI Bookstore, http://www.book.uci.edu

Levin's Shoes and Dry Goods, http://www.drygoodstore.com
, a clothing store

This assignment has three phases: Evaluate
the existing site, redesign the site to improve the shortcomings you identified
(including user tests of the new design), and propose the new design to
the site management.  Be sure to read the entire assignment right away so
you're aware of everything that's involved.

You will work on this assignment in groups
of two or three.  We estimate that the increase in coordination and communication
necessary in a three-person group roughly equals the 17% decrease in individual
workload and we expect that the products of three-person groups will be
at least as complete and thorough as the better results of two-person groups.

As in past assignments, when we give page
counts here we're referring to single-spaced text in 10- or 12-point
type with one-inch margins.  We encourage helpful illustrations, but illustrations
do not count towards the page limits.


Part I:  Evaluate the existing site
 

Determine five typical tasks that a user might
perform on the site (e.g., find the textbooks for a student's spring
quarter classes, compare the laptop computers available for under $1500,
find the warmest set of long underwear for a ski trip).  Choose tasks that
are realistic, broadly representative of what users might want to do on
the site, and substantial enough that the user can't complete them with
just a few clicks in a minute or two.

Find two or three people who aren't enrolled
in our class.  Have each person, one at a time, do a walkthrough of the
site, attempting to complete each of your five tasks.  Follow the walkthrough
guidelines discussed in class and in the book:  Encourage the users to narrate
what they're thinking and what problems or questions they're encountering.
 One team member should encourage the user to talk through the process (using
non-judgemental, non-leading prompts); the other(s) should observe and take
notes on the difficulties that come up.

Use the guidelines in the Farkas & Farkas paper
(which you read as part of the previous assignment) to categorize the usability
problems your users encountered.

Write a usability evaluation report of at
least two and at most four pages , describing very briefly what your evaluation
process was and at more length what results you found, referring to the
Farkas guidelines where applicable and documenting .  This will eventually
be an appendix to your redesign proposal, so you should write it with an
eye towards convincing the site management that you have made a thorough,
methodologically sound evaluation and that the flaws you identified are
more than just your personal opinion.  Of course you must also write in
a polite, professional tone; the site management won't take your advice
if they feel it's nasty, sarcastic, or making fun of them.

Try to be comprehensive, addressing most of
the major flaws, even if that means overlooking minor issues or repeated
instances of the same problems.  (If a site includes many links that are
hard to identify, for example, just say once something like, "Many
links, such as the 'Policies' link on the home page, are hard to
identify as links because they're not distinguished from other content.
 Farkas guideline 1.1 says, 'Be sure that all links indicate that they
are links.' "  Don't list every link that has a problem; that
will fill up the available space before you have time to cover most of the
important issues.)  It's a good strategy to mention some successful
aspects of the site, since it will make your report sound less unremittingly
critical and thus more palatable to the site management, but your main goal
is to propose a redesign so most of your report should address areas for
improvement.


Part II:  Redesign the site

Develop a new design for the site, one that
improves the areas you identified in your usability evaluation.  Focus mainly
on global issues of navigation and usability; don't spend much of your
time polishing details like typefaces and graphics and the wording of the
text on the pages.

Build a prototype of your new design using
the Denim system you installed as part of the previous assignment.  Denim
allows you to sketch pages and link tags and makes live links associated
with the tags.  (If you encounter major problems with Denim, let us know
well in advance; don't revert to pencil, paper, and sticky notes for
your prototype without getting our permission first.)

Test your prototype informally on each other
during your design, making changes as necessary.

Find two or three people who aren't in
the class; they don't have to be the same people who you used before,
but they may be.  With each person, walk through your prototype, asking
the user to perform each of the original five tasks and any others that
you think are appropriate or necessary.  As always, follow the guidelines
for working with users. 

As flaws or improvements become apparent during
your user testing, adjust your design and prototype and re-test the changed
aspects.  Keep iterating until you are satisfied with your design.


Part III:  Propose your new design

Write a proposal of three to six pages describing
your redesign.  The major part of the proposal should describe the design
and how it improves the usability issues you identified in Part I.  Of course
you will include illustrations as appropriate.

A smaller part of your proposal, not more
than a page out of the maximum of six, should describe your prototyping
and evaluation process and what changes resulted from that user testing.
We're assuming here that the site management is interested in the process
and how thorough a job you did.  This part might not always reflect reality;
the typical real-world proposal probably wouldn't describe the false
starts and intermediate steps towards the solution.  But in this case, include
it.

Submit your proposal document via Checkmate.

Save your Denim prototype as a web document
(using "Export to Web" under "Save As...").  This produces
one HTML file and one folder of other files.  Collect the file and folder
together into one archive (in .zip, .gz, .sit, or .tar format--ask a classmate
or the TA how to do this if you don't know) and submit it via Checkmate.

Submit your usability evaluation from Part
I via Checkmate.

A realistic proposal would have a cover letter,
a single simple page in business letter format whose body would say something
like, "Enclosed is our proposal for the redesign of your web site.
 We hope you find it useful and we look forward to hearing from you."
 But you do not have to write or submit a cover letter for this assignment.


If you would like to ask the site management
what their goals and requirements are, you may do that through the NoteBoard
set up for this class at eee.uci.edu.
 Don't pester the actual management of the site; ask your questions
through the NoteBoard and the instructor will respond as if he were the
management.  Everyone in the class may read the exchanges on the NoteBoard,
since requirements clarifications apply equally to everyone.  [Also, everyone
should use the EEE NoteBoard system because we might ask an exam question
about it and how it compares with newsgroups or other broadcast communications
channels.]  Questions on other aspects of the assignment may be asked in
class, in section, or by Email to ics104@uci.edu.

In the interest of full disclosure, everyone
should know that Levin's Shoes and Dry Goods is owned by the instructor's
brother-in-law, Robert Levin  We included it here as a fresh alternative
to the UCI Bookstore site, which presumably is already familiar to everyone,
and as a site where students' recommendations might be put into practice.
 If Mr. Levin chooses to redesign his site and incorporate your ideas, he
may give you credit on the site (which you could refer to on your résumé)
but he's under no obligation to compensate you in any other way.  If
you don't care for this arrangement, you have two alternatives:  First,
you may work on the UCI Bookstore site instead (which also has no obligation
to use your ideas or compensate you).  Second, you may evaluate and redesign
drygoodstore.com but state clearly at the top of your proposal that you
do not wish your proposal sent to the owner.  In the latter case, your work
will still be graded on the same basis (which means that you still have
to write it in the same polite, professional tone).


Written by David G. Kay, Winter 2004.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Monday, March 1, 2004 -- 6:14 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/104/hw/hw2.html
##-----------------TITLE------------------------##
ICS 104 * Assignment 2
##------------------TEXT------------------------##
WINTER 2004
-- Information and Computer Science
-- UC Irvine -- David G. Kay
-- ICS 104


SECOND HOMEWORK


This assignment is due by noon on Friday,
February 6.


(a)  In the last week or two, we have
discussed (and you have read about) these topics among others:

Cognition (attention, perception, memory)

Pre-attentive processing, gestalt laws

Graphical coding

Unconventional input or output devices (i.e.,
not displays, keyboards, mice, or trackballs)

Computer-supported cooperative work

Anthropomorphism

Pick three of these six topics; for each of
the three, choose an example from your HCI notebook (or find an example
from your own experience if your notebook doesn't have one) that illustrates
the topic.  Your examples may show a misapplication or misunderstanding
of the principles or may be a particularly good example; in either case,
describe and analyze each example using the terms and guidelines that pertain
to the topic it illustrates.  If your example is a negative one, suggest
an improvement and describe why your suggestion is better.

A dozen pithy lines of text should be sufficient
(where "pithy" means clean, clear, well-organized, terse, and
not padded) for each of the three examples; half a page for each is an absolute
maximum.  (Again, this refers just to the text; you will probably use more
than half a page each, counting illustrations.)

(b)  How many different items have
you recorded in your HCI notebook so far?  We'll give full credit for
any truthful answer to this, even zero, but we'd like to know how much
use the class is making of these notebooks.

(c)  Look at the HP Cooltown video
(giving a vision of ubiquitous computing) at http://cooltown.hp.com/mpulse/backissues/0601/0601-cooltown.asp,
considering it in terms of agents, anthropomorphism, social conventions,
and its emotional effects on its users.  You may answer in terms of the
technological vision (i.e., assuming that the system will be implemented
essentially as described in the video) or in terms of technological realities
and limitations (i.e., considering what difficulties might actually prevent
the video's vision from being realized), or both.  What social and emotional
effects, especially unintended ones, might Cooltown produce?

Give your reaction, opinion, and analysis
of these issues in half a (single-spaced) page, with one page as a maximum.
 At that relatively short length, of course you won't be able to cover
every aspect in depth; just show us that you've thought seriously about
these issues.

(d)  This part is preparation for a
later assignment.

Pick a partner who is also enrolled in the
class.  Together, find three different application programs that perform
the same function.  Choose applications that do something relatively simple:
 Rather than a word processor or a database or a graphics editor, choose
a desktop calculator, a virtual alarm clock, a Shanghai game, an instant
messaging client, or any other single-function tool.  Identify three different
versions (perhaps using shareware sources on the Internet; nobody should
have to purchase anything for this assignment) and install them on a machine
(or machines) you can use.  It would also be acceptable to choose three
web sites with similar aims (e.g., the travel sites Expedia, Orbitz, and
Travelocity), though they may be more complex than single-function applications.

In a later assignment, we will ask you to
compare the user interfaces of these applications.  They are likely to have
some differences in functionality, but we will ask you to concentrate on
tasks that all three perform and the HCI aspects of those comparable tasks.
 For now, though, just find a partner, decide on an application category,
and locate and install the software (or locate the web sites).  You don't
need to turn anything in for this part.


Combine all your answers into one electronic
document and submit it via Checkmate.  (The guidelines about hand-drawn
illustrations also apply.)


Written by David G. Kay, Winter 2004.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Thursday, February 5, 2004 -- 4:29 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/104/hw/hw3.html
##-----------------TITLE------------------------##
ICS 104 * Assignment 3
##------------------TEXT------------------------##
WINTER 2004
-- Information and Computer Science
-- UC Irvine -- David G. Kay
-- ICS 104


THIRD HOMEWORK


This assignment is due by noon on Wednesday,
February 25.

You will do the main part of this assignment
(Part I) with the partner you chose at the end of the previous assignment.


Part I

In the previous assignment, you identified
three applications that perform the same function.  For this part, pick
a single task (e.g., starting a new game, or setting the user preferences,
or initiating a chat with someone on the buddy list) that each application
performs with mouse or pointer movements.  (If there is no common task in
your applications that's pointer-based, talk to us right away to work
out an alternative.)  Try to identify a task that takes four or five different
movements, on the average.  (This is a rough guideline; don't pick a
task that requires a single click in every application and don't pick
one that requires a dozen steps, either.)  If you have difficulty identifying
an appropriate task, send Email to ics104@uci.edu.

(a)  Which of the three applications
lets the user perform the task most quickly?  Consider everything--recognition
time, movement time, anything else.  Which application makes the task slowest?

(You'll need to decide on the characteristics
of the hypothetical user you're talking about here--beginning or experienced,
old or young or in between, whatever characteristics are relevant--and keep
those assumptions constant throughout.)

Produce illustrations of the steps involved,
with the movements marked.  Describe and explain your conclusions in at
most half a (single-spaced) page (not counting the illustrations).

(b)  Use Fitts' Law (P = C1 + C2
(log2(2D/W))) to analyze the speed of performing the task on each system.
 For each step in the task, measure the distance and the target size and
apply the formula.  You'll have to make some assumptions and adopt some
conventions (Is W the width of the target or its area?  Will you use inches,
centimeters, or pixels as your unit?  What's the user's starting
point at the beginning of the task?); just keep those decisions consistent
as you analyze the three systems so your results should be valid for comparison
purposes, even if the numbers might need some scaling to produce actual
times.  Don't bother with the constants C1 or C2, either.  (If there's
some reason that you think your systems aren't comparable in this way,
talk to us.)

Show your calculations and analysis (probably
a spreadsheet would be best, with a row for each step in the process), keyed
to the illustrations in part (a).  State clearly what results this
analysis produced.

(c)  Did your Fitts' Law analysis
of part (b) reach the same conclusion as your holistic analysis of
part (a)?  Unless the results were identical in every respect, describe
and explain the differences.  (Half a page is the maximum here.)

(d)  Take your best-performing application
and redesign the screen(s) for the task you analyzed to make that task even
faster.  (If you think your winning application is perfect, choose one of
the other applications and redesign it to improve it, maintaining consistency
with the rest of the original application (i.e., don't just redesign
it to look like the winner).)

(d.1)  Sketch out your redesign on
paper.  You and your partner should each walk through the redesign, looking
for problems and making improvements.  There's nothing to turn in for
this part.

(d.2)  After you're satisfied with
your redesign, create a mock-up using a WYSIWYG GUI builder (e.g., Visual
Basic, Visual C++, Dreamweaver (for web pages), Interface Builder or OmniGraffle
(on the Mac)).  Some of these tools are available on the lab machines or
for free trial download.  You just need to show the new screen(s); you don't
need to implement the functionality.  This is a mock-up, not a polished
design, so don't spend more than an hour or two putting this together.
 Incorporate your finished illustrations into the electronic document that
you turn in.

(d.3)  Describe your redesign and explain
how it improves the original.  (Half a page maximum.)


Combine all your answers into one electronic
document and submit it via Checkmate.  (The guidelines about hand-drawn
illustrations also apply.)  Just one member of your group should submit
the work, but of course both group members' names must appear clearly
in the body of the assignment itself.


Part II

(a) Read each of the following.  They'll
show up in future lectures, later assignments, and/or the final exam:

"Caring for your Wrists," by Adam
Engst, Tonya Engst, and Jon Hersh.  http://ftp.tidbits.com/pub/misc/caring-for-wrists.pdf

"Typographic Design for Computerized
Text," by David G. Kay.  http://www.ics.uci.edu/~kay/typography.pdf

"Guidelines for Designing Web Navigation,"
by David K. Farkas and Jean B. Farkas. Technical Communication 4
(2000), 341-358.  Available electronically for class use at  http://www.ics.uci.edu/~kobsa/courses/ICS104/lit/Farkas&Farkas-TC.pdf

(b)  Download and install the program
Denim, from the Berkeley Group for User Interface Research (http://guir.berkeley.edu/projects/denim/).
 Spend a few minutes reading about Denim on their web page, viewing one
of the introductory videos there, and playing around with the program itself.
 Skim through the tutorial that comes with the software, but don't go
through it in detail at this point.

There's nothing to turn in for this part.

Written by David G. Kay, Winter 2004; using
GUI-building tools was suggested in assignments by Alfred Kobsa and Nayla
Nassif.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Friday, February 13, 2004 -- 12:22 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw6.html
##-----------------TITLE------------------------##
Sixth Homework
##------------------TEXT------------------------##
  

This assignment is due on Monday, February
24.

(a)  Take the Button2
class we went over last Thursday (adapted from Bruce Eckel's Thinking in Java, third edition)
and change it as follows:

Make the text field display a counter that
starts at zero.

Make one button say "Increment";
when you click it, the counter is increased by one.

Make the other button say "Decrement";
when you click it, the counter is decreased by one.

Add another button called "Reset"
that sets the counter to zero.

See http://www.ics.uci.edu/~kay/courses/h22/hw/Button2.java
for the version of the Button2
code we used in class.

For some extra credit, which you absolutely
may not attempt until you finish the rest of this assignment (come on now,
GUIs are fun, but no dessert until you eat your vegetables!), take a look
at Eckel's text (try the "Catalog of Swing Components" section
of Chapter 14, Creating Windows & Applets) to get an idea of some of
the other components you can create.  Then add some bells and whistles to
your counter:  Some simple possibilities are counting by twos (or a user-specified
increment, possibly specified by a slider), highlighting particular values
(e.g., values evenly divisible by 10), or allowing the user to specify starting
or reset values.

(b)  Design and implement a class DVD,
which has the following 14 fields:  title, studio, pending release date,
status (e.g., out or released, discontinued, pending), sound, versions,
price, rating, year, genre, aspect ratio, UPC (universal product code),
release date, and ID number.  The file http://www.ics.uci.edu/~kay/courses/h22/hw/DVD.txt
contains data for about 25,000 DVDs (the original source of this file is
http://hometheaterinfo.com/dvdlist.htm).
 Note that the first line contains the field names.

(b.1)  Your DVD class should have conventional
getter and setter methods for each field.  

(b.2)  You should also have a constructor
that takes a single string (a line of information about the DVD, in the
format of the input file listed above) and extracts from it the field values,
creating a new DVD object appropriately.  The data file contains a single
line for each DVD; you can read that line into a string and then call this
constructor. Parsing these strings requires a little bit of attention:

In each string, the 14 fields of DVD information
are separated from one another by commas.  Some fields have null values;
they are represented in the input by two commas with nothing in between
(or by a comma at the end of the string).

Most of the fields are strings, surrounded
by double-quote marks (and where a double-quoted string contains
a double-quote mark, two double-quote marks appear in a row).  When you
store these string values, of course you should not store the surrounding
double-quote marks (and any internal double-quote marks should not be doubled
in the stored version as they were in the input).

The price field appears with a dollar sign
and no quotation marks.  Store it as an integer number of cents.

The pending release date field is null if
the status isn't pending; this field and the other release date field,
when they aren't null, contain a date and time (in the format 2/14/03
12:00, not enclosed in quotation marks).  You may store each date/time value
as a single string.

The ID number field is either null or an integer;
store this field as an integer with null values as zero.

(b.3)  You should also have a toString
method that produces from a DVD object a string in the same form as the
original data.

(b.4)  Write a simple driver program
that reads lines from the input file, creates DVD objects, and writes lines
back to a new text file.  You should eventually test your program on the
entire input file, but of course you can use just a small portion of it
as you're working.

(c)  For the next part of this assignment,
you will design and implement a "bag" of objects.  A bag (or multiset)
is a collection of objects, each with a string as its key, in which the
order isn't important (like a set) but the number of times each item
occurs is important (unlike a set).  You might use a bag, for example,
in an automated building entry system where you look up each entrant and
keep a count of how many times that person has passed through the door;
you might also use one to support a web site that counts votes for a favorite
song or book.

Your bag will implement the interface described
below.  You will write two classes that implement the Bag interface, one
class using a binary search tree and the other using a hash table.  For
the hash table class, you will experiment with different hash functions
and compare their results.  You will also write one or more simple driver
programs to read in the data specified below and insert it into your various
Bags.  

For the hash table version, you will implement
five alternative hash functions.  Then you will hash each set of data using
each of the five hash functions, producing statistics on the effectiveness
of each combination.  [You may choose to parameterize your choice of hash
function (and of data file), combining all your tests into one single run
of the program.  You may also recompile the class and run the test separately
with each hash function and each data set.]  Finally you will write a brief
summary of your findings, describing which functions worked best and worst
for which data.

(c.1:  the Bag interface)  A bag has
the operations described below; the behavior of the classes that implement
this interface is also described.

Constructor--Creates an empty Bag.  If an
argument is specified, the binary search tree version ignores it but the
hash table version uses that argument as the table size.  (For a little
extra credit, make your hash table constructor use as the table size a prime
number greater than or equal to the argument.)

isEmpty--Return
true if the Bag contains no elements.  (Implement this so that it works
in constant time.)

makeEmpty--Remove
all the items stored in the Bag.

insert--Take
a string (the key) and an object as arguments and insert the object into
the Bag (according to the key).

find--Take
a string (the key) as an argument and return a reference to the object with
that key if it's present in the Bag (or null if it's not present).

delete--Take
a string (the key) as an argument and remove from the Bag one object with
that key (if it's present).  (E.g., if you insert objects with keys
A, B, A, C, and B, and then delete A, the table will contain A, C, and two
Bs.)

totalElements--Return
the total number of elements currently stored in the Bag.  (E.g., if you
insert A, B, A, C, and B, totalElements
should return 5.)  Implement this so that it works in constant time.

uniqueElements--Return
the number of unique elements currently stored in the Bag.  (E.g., if you
insert A, B, A, C, and B, uniqueElements
should return 3.)  Implement this so that it works in constant time.

printStats--Print
statistics that show how evenly elements are distributed in the Bag.  This
function will produce different results for each implementation.  

--The binary search tree version should print out some indication of whether,
or how well, the tree is balanced.  

--The hash table version should print one line for each index (i.e., each
bin) in the hash table; on that line should be the index, the total number
of items in that bin, the number of unique items in that bin, and an asterisk
for each unique item in that bin.  For example, suppose we have a HashTable
of size 3 in which the following items are inserted:  A
B a c 3 9 D E D 4 9 5 7 5.  Suppose
further that all upper-case letters hash to bin 0, all lower-case letters
hash to bin 1, and all digits hash to bin 2.  The output of printStats
for this table might look like this:

0.  5  4 ****

1.  2  2 **

2.  7  5 *****

(c.2:  binary search tree details)
 Your binary search tree should be a simple (unbalanced) binary search tree.
 You may use as a guide the Scheme code at http://www.ics.uci.edu/~kay/courses/h22/hw/bst.scm,
as well as any code in Goodrich's text.  Note that even though the order
of the items isn't important to the Bag class, you will need to compare
strings internally to construct your binary search tree.

(c.3: hash table details)  Your hash
table should resolve collisions by linear chaining, as described in class
and in Goodrich's text.

(c.4: hash functions)  The Insert
and Find
operations must (of course) use a function that computes a hash code from
the key field of the data.  This hash function is critical to the performance
of your hash table, since you'll lose the performance advantages of
hashing if your data are not distributed evenly (i.e., randomly) throughout
the table.  You should code each of the hash functions listed below.  (Where
a function speaks of a character's ASCII code, you may use any numeric
value that's unique for every character.)

* the sum of the ASCII codes of each character
of the key, mod the table size

* the product of the ASCII codes of each character
of the key, mod the table size

* the product of the ASCII codes of the first,
fifth, ninth, thirteenth, seventeenth, and twenty-third characters of the
key, mod the table size

* the hash function given on page 346 of the
Goodrich text

* at least one other hash function of your
own design (which may be a variation of one of the functions described above)

(c.5: experimental runs and input data)
 Write simple driver programs to read the two data sets below, insert them
into a bag, and observe and analyze their performance:

* The DVD objects described in part (b)
above.  Use the DVD's title as the key.  There are about 40 titles that
aren't unique.  Your bag should count those as multiple occurrences
of the same DVD object.  (For some extra credit, you can create from each
title a "main title" field.  You'll notice that in the DVD
list, multiple versions of the same work are distinguished by adding to
the title some extra information like "(Animated)" or "(Live
Action)."  You can create a "main title" by finding the first
character of the title that isn't a letter, upper or lower case, a digit,
a space, or an apostrophe; everything from the start of the string up to
that point could be the main title.  If you use this main title as the key,
you will produce more duplicate keys for your bag to count.)

* Any list of at least 2000 English words.
 There is a file of many words available at http://www.ics.uci.edu/~kay/courses/h22/hw/wordlist.txt.

Ask yourself this question and check with
someone if you don't know the answer:  What is the problem with these
two input files when you're testing the performance of your BST-based
Bag?  (Hint:  To make your life easier, we have provided these two files:
 http://www.ics.uci.edu/~kay/courses/h22/hw/DVD-random.txt
and http://www.ics.uci.edu/~kay/courses/h22/hw/wordlist-random.txt.)

(c.6: extra credit)  For a little extra
credit, try one or both of these:

* Run your tests and experiments on a third
set of test data that you download from the Web, including the results in
your written analysis.  Your data should contain at least 5000 items.  Be
sure to supply the URL where you found the data.

* So far, we have been concerned with how
effective our hash functions are--that is, how evenly they distribute the
data throughout the table.  For this part, you will concentrate on the efficiency
of the function itself--that is, how long it takes to compute the hash value
from the key.  You will measure how long each of your hash functions takes
to hash 10,000 data items, including a description of your results in your
written analysis.  You should write a separate driver for this task that
just reads the data and calls the hash function, because you don't want
to skew the results by including the time it takes to insert the data into
the table.  Produce timing results for each of the different hash functions
on each of the different sets of test data, to see if there are any efficiency
differences that depend on the characteristics of the data.

(d)  Write an interpreter for the programming
language Facile 2.0, which is like the original version of Facile except
for these two enhancements:

Long variable names.  Everywhere a single-letter
variable could occur in an original Facile program, Facile 2.0 accepts a
string of one or more alphabetic characters (A-Z).  You'll need to build
a symbol table (as either a binary search tree or a hash table, similar
to your Bag implementations from part (c); you may use your implementations
or a class from the Java library) to store each variable and its value and
to retrieve the value when an already-defined variable appears in the code.

Statement labels:  Perhaps the most painful
part of programming in original Facile is having to count statements to
get the statement numbers correct in goto, gosub, and if statements.  In
Facile 2.0, the programmer may include statement label lines.  Each statement
label is a variable name (as above) followed by a colon, as shown below.
 (Note that if the first word on a line isn't a statement keyword known
to Facile (like LET or GOSUB), it's a label.)  When your program finds
a label, it adds the label to the symbol table with the value of the statement/line
number where the label occurred.  When a label occurs in a goto, gosub,
or if statement, the interpreter looks up the label in the symbol table
and substitutes its value.  An example appears below.

LET N 5

LET F 1

GOSUB FACT

PRINT F

END

FACT:

IF N > 1 THEN KEEPGOING

RETURN

KEEPGOING:

MULT F N

SUB N 1

GOSUB FACT

RETURN

.


(e)  This part is extra credit, and
it is not due with the rest of the assignment.  It will be due in a couple
of weeks, but we wanted to give you the chance to start thinking about it
now.  Either individually or in pairs, add a graphical user interface to
one of the programs you've written this quarter:  The restaurant database
program, the restaurant ordering program, the bank accounts, or the Facile
interpreter.  Think about the design before you start coding, and develop
incrementally:  That is, add a little bit at a time so that if you don't
have time to implement that one last feature, at least you'll have the
previous features working and ready to turn in.

What to turn in:  

Turn in your Java files via Checkmate for
parts (a) through (d).  Also turn in a prose document with
part (c) that gives your analysis of the hash functions you tested.

GUI counter problem written by David G. Kay,
Winter 2003 to build on code from Bruce Eckel's Thinking in Java,
Third Edition. 

DVD class problem written by David G. Kay, Winter 2003.

Hash table implementation assignment written by David G. Kay, Winter 1997
and modified by David G. Kay, Spring 1997 and Fall 1998. Bags and binary
search trees included by David G. Kay, Winter 1999 with residual revisions
by David G. Kay, Spring 1999 and Winter 2003.

Facile enhancements written by David G. Kay, Winter 2003, to build on the
Facile lab assignment by Alex Thornton.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw3.html
##-----------------TITLE------------------------##
Third Homework
##------------------TEXT------------------------##
  

We're all back together this week; everyone
will do the same thing.  This assignment is due on Friday, January 24. 

(a) In Chapter 3 of the Goodrich and
Tamassia book, do these problems: 

R-3.8.  Unless you have already completed
this by hand, use a spreadsheet to help with the calculations; Excel is
available on the machines in the lab.  Every computer scientist should have
some spreadsheet experience, so take this opportunity.

C-3.1.  A sentence or two is all that's
required here; numerical examples or pictures are also welcome.

P-3.1.  Treat the linear-log scale as extra
credit.  Also for some extra credit, plot your results as a chart in Excel
(which does allow log scales if you poke around the various options).

(b)  Look at Alex Thornton's Project
#1 from ICS 22, available on the web at http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/
. 

(b.1)  Code the problem as specified.
 The coding here should be pretty easy, but pay particular attention to
the discussion about testing and to designing and carrying out a thorough
test plan.

(b.2)  Change the program to handle
dollars and cents rather than just integer dollars.  As the write-up points
out, this is tricky because floating-point numbers (floats and doubles in
Java) aren't exact (think of 1/3 or 2/7) and that inexactness can be
compounded in repeated calculations.  

The right way to handle this is to treat each
balance as an integer number of cents.  You then have two problems:  How
to print the quantities with a decimal point and two digits to the right,
and how to let the user specify dollar-and-cents quantities.

For the output, you'll want to write a
method called toCurrencyString
that takes an integer and returns a string including a decimal point, so
that toCurrencyString(12345)
would return "123.45".
 The algorithm for this isn't hard if you use both division and the
mod (remainder) operator (%--so
that 12345 % 100
is 45)
to extract the dollars, dimes and cents.

For the input, you may do it the easy but
clumsy way:  Prompt the user separately for the dollars and for the cents,
combining them in your program.  For a little extra credit, parse the input
string containing a decimal point.

Redraft (and re-apply) your test plan to include
tests of dollars-and-cents amounts (thinking carefully about what those
amounts can look like).

(b.3)  For some extra credit, try one
or more of these:

Allow each person to have a collection of
accounts (creating an AccountCollection class that you could implement as
an array, or even as a linked list).  You'd probably want to give each
account a number and think about what interface changes you'd need.

Have (at least) two subclasses of accounts,
Checking and Savings; each class could have a different associated interest
rate (that applies to every account of that class, not one for each instance),
and allow each person's account collection to include any combination
of accounts.  (A clever thing to do would be to use a static field in the
Account class so that every new account, of whatever type, gets a unique
account number.)

The "Additional Challenges" listed
in Alex Thornton's write-up.


What to turn in:  

For part (a), paste all your answers
into a single Word document and submit it via Checkmate.  (If you'd
prefer another format besides Word, let us know and we'll see about
alternate arrangements.  Likewise, if you already completed this part before
reading about the Excel requirement, you may turn in a paper version in
class on Tuesday.)

For part (b), turn in via Checkmate
a Word document containing your test plan and a Java file for each class
from part (b.2).  As indicated by Checkmate, turn in the main, required
part separately from any enhanced, extra credit version from (b.3).



Written by David G. Kay, Winter 2003 to build
on "Money (That's What I Want)," an ICS 22 lab by Alex Thornton.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Saturday, January 18, 2003 -- 11:01 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw5.html
##-----------------TITLE------------------------##
Fifth Homework
##------------------TEXT------------------------##
  

This assignment is due on Friday, February
14.  Don't wait until the weekend; there's a fair bit to do here.
 

(a) Look again at Chapter 6 of Goodrich
and Tamassia.  Write out answers to problems R-6.1 and R-6.2.

(b)  Code up Alex Thornton's Project
#4 from ICS 22, available on the web at http://www.ics.uci.edu/~thornton/ics22/LabManual/Simple/
.   This project lets you write a tiny little interpreter for a tiny little
programming language (though the job isn't so tiny that it won't
take you the extra few days we've allowed).  What you may not realize
is that Facile, Alex's simple language, is essentially equivalent to
Java!  We'll talk later this quarter about the notion of "Turing
equivalence," but except for the fact that Facile has a small, fixed
number of variables, there aren't any algorithms you can code in Java
that you can't code in Facile.  (Of course, Turing equivalence doesn't
say anything about programmer convenience, efficiency, safety, flexibility,
and so on.)

There's one part of Alex's assignment
that is strictly optional for H22, though:  the use of JUnit for testing.
 Of course you need to test your code thoroughly and demonstrate your tests,
but you don't need to use JUnit to do that.

(c)  Here is some Facile code (that
uses some of Alex's additional features).  What does it do?  (Try to
figure it out by reading it rather than by running it.)

LET N 5

LET F 1

GOSUB 6

PRINT F

END

IF N > 1 THEN 8

RETURN

MULT F N

SUB N 1

GOSUB 6

RETURN

.


What to turn in:  

Via Checkmate, turn in one Word or text document
with your answers to part (a) and part (c).

For part (b), turn in via Checkmate
all of your Java files, including the tester.


Written by David G. Kay, Winter 2003 to build
on "What's Simple Is True," an ICS 22 lab by Alex Thornton.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Monday, February 17, 2003 -- 8:07 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw1.html
##-----------------TITLE------------------------##
First Homework
##------------------TEXT------------------------##
  

This assignment is due at the start of your
discussion section on Friday, January 10. 

(a)  Do everything on the course syllabus
under the heading, "What to do this week to get started in ICS H22."
 This includes your questionnaire and photo.

(b)  If you aren't already familiar
with using Windows, spend some time in the lab trying things out.  

(c)  Be sure you know how to read your
mail on your UCInet account.  (If you prefer to read your mail on a different
account, make sure you have redirected your UCInet ID's mail to your
preferred account; you can do this at http://phwww.cwis.uci.edu/cgi-bin/phupdate.
 We won't mention this again.)  Also be sure you know how to use a web
browser to find, for example, the home page for this class.

(d)  The course outline specifies the
readings in the Goodrich and Tamassia text  that apply to each class meeting;
you should consider these readings part of every assignment, even though
we won't usually mention them explicitly.  In particular, read the first
two chapters for a concise (re)view of Java.

(e)  Read the "Writing Professional Programs"
handout attached to the syllabus.

(f)  The officially supported Java
environment for ICS H22 is a text editor, such as TextPad, the command-line
compiler javac,
and the command-line virtual machine java,
all of which are available on the machines in the ICS labs.  You should
be(come) familiar with running programs in this environment.  The "Development
environment" section of Alex Thornton's ICS 22 Lab Manual
(www.ics.uci.edu/~thornton/ics22/LabManual/)
gives details about acquiring a similar environment for your own machine.
 If you would like to use DrJava
(drjava.sourceforge.net)
or BlueJ (www.bluej.org),
which are environments that make it easy to test your classes without writing
a separate test class, you may, but we can't promise to provide support
for learning that software or installing it on your own machine. 

(g)  Even professional programmers
often need to check how a particular Java class works; there's too much
to the language and libraries to memorize completely.  Locate Sun's
Java 2 documentation
at java.sun.com/j2se/1.4.1/docs/api/index.html
and bookmark it so you can refer back to it as needed.

(h) [only for students who took
ICS H21] Using a text editor and the command-line
Java interface, write a small program that contains a Person class with
fields for a name and an age, appropriate getter and setter methods, and
two simple boolean methods:  canVote(),
which returns true if the person's age is at least 18, and canBePresident(),
which returns true if the age is at least 35.  Also write a test class with
a main method that uses BufferedReaders for console I/O and that has an
interaction like this with the user (where the user's input is shown
in bold face):

   Hello.  What's your name?

   Peter Programmer

   How old are you, Peter Programmer?

   27

   Peter Programmer, you are eligible
to vote.

   Peter Programmer, you are not
eligible to be President.

   Good-bye.

Of course the program should work correctly
for any reasonable age.  Feel free to embellish it further (perhaps by identifying
unreasonable ages or by repeating the exchange with multiple users).

(i) [only for students who did not
take ICS H21] Object-oriented programming is an excellent approach
to designing software, but it is not the only good approach or even the
best one in every situation.  One part of regular ICS 22 is a unit on functional
programming and the Scheme programming language.  We did this material at
the beginning of ICS H21, so for those of you who didn't take ICS H21
we'll do the shorter ICS 22 version of this material early in ICS H22
to bring everyone's backgrounds closer together.

(i.1)  Locate and launch the DrScheme
software.  It's on the lab machines; it's also available for nearly
any platform, free of charge, from www.drscheme.org.

Each DrScheme window has two panes:  The bottom
half is the interactions (or transcript) window, where you can type Scheme
expressions and see the interpreter evaluate them.  To type programs you
wish to save, you will use the top pane (the definitions window) and click
the green "Execute" arrow to evaluate the code (this makes the
code available for use in the interactions window below).  You can print
the contents of each window.  Printing the interactions window gives a record
of your activity; do that as you complete each part below so you can turn
it in.

The DrScheme system actually includes many
different versions of Scheme.  The one we'll be using is called "Pretty
Big."  You can see whether it's the one installed by looking for
the word "Language" in the lower pane.  If it doesn't say
"Pretty Big," you can fix it this way:  From the Language menu,
select "Choose Language"; in the resulting window, click on "PLT"
and then choose "Pretty Big."  Click "OK" and then click
on the green Execute arrow at the top of the DrScheme window, and you're
set.

(i.2)  Experiment with DrScheme to
get familiar with it

Try evaluating some expressions, like (*
3 4 5) and (expt 2
5) and (gcd
15 230) and
(/ pi
2).  In our
version of Scheme, the value of pi and the computation of greatest common
divisors are predefined (built in).

Type in some definitions of symbols in the
interactions window, like (define number-of-students
21) and (define
number-of-staff 2) and then try (+
number-of-students number-of-staff).
 (You may get a yellow warning message.  This is telling you that you've
typed in the interactions window instead of the definitions window, so what
you've typed won't be saved.  That's fine for the experimentation
we're doing now, but as you start making your own definitions, you'll
want to type them in the top window, save them periodically, and have Scheme
evaluate them by clicking Execute.)

(i.3)  The factorial function (written
with an exclamation point, so "n factorial" would be n!)
is used in calculating how many ways there are to arrange things.  The value
of n! is n * (n-1) * (n-2) * ... * 1, so 5!
= 5 * 4 * 3 * 2 * 1 = 120.

Type the following function definition into
the definitions window.  Actually do the typing so you can get used to the
way it works; don't just copy and paste.  (We'll go over the details
of this code in class some time soon; we don't expect it to be particularly
clear now.)

; Compute n! (n factorial). 

(define fact                                 

   (lambda (n)                      
       

      (cond                    
             

         ((<= n 0)  1 )
              ; 0! is 1 by definition   

         (else (* n (fact (-
n 1))))))) 

Notice how the environment indents and highlights
blocks of code so you don't get the parentheses confused.

Don't forget to click Execute.  Now try
evaluating expressions like (fact 5),
(fact 50),
and (fact 500).
 Next, evaluate (fact (fact
5)).  What will happen when you evaluate
(fact (fact 50))?
 Before you try it, save your work; (50!)! is awfully big.

What is the value produced by (/
(fact 5) (expt 7 2))?  This result
is called "exact representation"--it's not what we expect
to see on a computer, but it's useful in further calculations because
nothing is lost by rounding off to a decimal representation.

Enter this definition (you can copy and paste
it):

 (define
decimal-format

   (lambda (num)

      (string->number (number->string
(exact->inexact num)))))

Then evaluate (decimal-format
(/ (fact 5) (expt 7 2))).

(i.4)  (extra credit)  What's the
longest number you can generate in DrScheme, without running out of memory
and taking no more than 60 seconds of elapsed time?  Generating the big
numbers is one part of the question; counting the digits is another.

Try to count digits using (string-length
(number->string your-big-number)).
 How do you get your-big-number into that expression without
copying and pasting it (or typing the entire number)?

Try to count the digits using some tool(s)
other than Scheme (or any programming language).

Using your wristwatch (or slow, measured counting),
time how long it takes for Scheme to calculate and display your big number.
 Now, time how long it takes to calculate the big number and then
its length (by nesting the expression to generate the big number inside
the length-calculating expression above).  You'd expect the second,
combined task to take longer, but on some Scheme systems it doesn't.
 Does it on your system?  Why might the generate-and-calculate-length task
take less time than generating the number without calculating its
length?


What to turn in:  

-- For part (h), turn in a printed
copy of your Java code along with a printed copy of one or more interactive
sessions showing thoroughly how your program works.

-- For part (i), turn in a printed
copy of the interactions window showing what you did for each part.  Don't
print out more than two solid pages of digits, though.


Based in part on ICS H22 assignments by David
G. Kay from Winter 2000 and earlier; modified by David G. Kay, Winter 2001.

Modified by David G. Kay, Winter 2003, including
some logistical information from the ICS 22 Lab Manual by Alex Thornton.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Friday, January 10, 2003 -- 2:15 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw7.html
##-----------------TITLE------------------------##
Seventh Homework
##------------------TEXT------------------------##
  

This assignment is due on Monday, March 3.

(a) Code up Alex Thornton's Project
#5 from ICS 22, available on the web at http://www.ics.uci.edu/~thornton/ics22/LabManual/GoneToTheMovies/.
 This project lets you write a simulator of people standing in line at a
movie theater.  This is a specific instance of a situation that comes up
frequently, not just in the real world but also in computer systems.  Computer
networks, in particular, consist in some sense of client requests (like
your browser requesting a web page or your computer sending a document to
a shared printer) and servers satisfying them.  When the server can't
satisfy each request immediately, the waiting requests are typically queued
up.  Determining the overall performance of a network (how long do requests
have to wait, how many can be satisfied per minute) is a crucial task, since
decisions about the size and number of servers and the necessary bandwidth
depend on that analysis (and on a more practical level, if your web site
makes visitors wait annoyingly and your competitor's site serves them
quickly, your competitor will receive more traffic, be more successful,
and have a better chance of being bought out for $100 million by AOL).

This project analyzes the performance of a
queueing system experimentally, by simulating it.  Queueing system performance
can also be analyzed mathematically, which is the focus of a subdiscipline
of computer science called queueing theory.  Take just a second to reflect
on the differences between experimental and mathematical analysis:  What
are the advantages and disadvantages of each?

Of course you must test your code thoroughly,
but you are not required to use JUnit.

There are more design decisions for you to
make in this program than in the previous ones.  It's a wise idea to
attend section early in the project, to discuss various approaches and make
sure you're on the right track.

(b)  For a little extra credit, make
your simulation more realistic by accommodating some variability.  But before
you start, save a completed, correct copy of your required version and make
any extra credit enhancements on a fresh copy.  You'll turn in the required
and extra credit versions separately.

We all know that not every transaction (at
a ticket window, in the supermarket, or on the Web) takes the same amount
of time.  Instead, there's a range.

Change your program so that instead of a fixed
transaction time for each window, the user can specify a minimum and a maximum
transaction time, with the program choosing a value at random from that
range.  (Look up java.util.Random.)

You could also generate customers at random
for an even more realistic simulation.

(c)  Continue to think about your optional
GUI-building project, part (d) of the Sixth Homework.  It will be
due in about a week and a half.  You may build a GUI onto the movie theater
simulator if you like.

What to turn in:  Turn in your Java
files via Checkmate.

Written by David G. Kay, Winter 2003, to build
on Alex Thornton's "Gone to the Movies," an ICS 22 project.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw2.html
##-----------------TITLE------------------------##
Second Homework
##------------------TEXT------------------------##
  

This assignment is due at the start of your
discussion section on Friday, January 17. 

(a)  [only for students who did
not take ICS H21]  Now it's time to play with the Restaurants program
we passed out in class.  The code is available on the web at http://www.ics.uci.edu/~kay/courses/h21/restaurants.txt.
 You won't be able to do all of this part until after Tuesday's
lecture, but the first few subparts are accessible now.

(a.1)  Make your own copy of this file
and open it in DrScheme.  Evaluate it by clicking the green arrow.  Remember
that you'll need to use at least the Pretty Big version of Scheme. 
Then, in the interactions (lower) window, type (Restaurants)
to run the program, typing commands to add, remove, print, and search for
restaurants.

[For simplicity, the Restaurants program asks
users to enter nonnumeric information as Lisp lists (i.e., in parentheses).
 Scheme does have strings; it makes better sense enter non-numeric information
enclosed in double-quotes instead of parentheses.  This doesn't require
any change in the code, other perhaps than changing the prompt to the user.]

(a.2)  Modify the code so that the
command for adding a new restaurant is 'n'
instead of 'a'.
 (This should require a change in two places.)

(a.3)  When you print the collection
of restaurants, it would be nice to have a blank line separating the information
on each restaurant.  Modify the program to achieve this.  (You only need
to add one procedure call--(newline)--in
one place.)

(a.4)  Modify the program code so that
it gives the user an additional menu choice:

e:  Remove (erase) all the restaurants from the
collection

When the user types 'e',
the program should remove all the restaurants from the collection (so that,
for example, if the next command were 'p',
nothing would be printed).

[This will require modifications or additions
in a few places.  You can do the main part of the work very easily indeed,
with a single procedure call.  The key is to think functionally, not of
changing values but of describing or creating the new value.]

(a.5)  Modify the program so that it
adds another menu item:

a:  Adjust prices for the dishes served

When the user types 'a',
the program should ask the user for an amount (positive or negative) representing
a percentage change in price (so that 100 would double a price and -50 would
cut it in half).  Then it should apply that price change to the prices for
all the restaurants in the collection.  

[Here are some hints on how to approach this.
 If you want to be cool, you can postpone looking at them.  You might approach
this first by writing a change-price
procedure that takes a restaurant and a percentage change number, as above,
and returns a restaurant that has all the same information, except that
the price is changed appropriately.  Next you might write a call to collection-change
that uses change-price
and changes the prices in all the restaurants in the collection.  Finally,
you can incorporate these calls into the main program, adding the appropriate
command handling and so on.]

(a.6)  (extra credit; this is rather
tough at this point)  The search command currently allows the user to search
only for restaurants by name.  We can see that collection-select
allows much more flexible searching, however.  

Modify the search-collection
routine in the main program to give the user a choice of searching by name
or by cuisine.  If the user chooses to search by cuisine, prompt for the
type of cuisine and perform the requested search with appropriate calls
to collection-select.
  [Hint:  Consider using some of the code on the second page of the "Notes
on Scheme" handout.]

Be sure you're comfortable with the overall
organization and operation of this program; some day you might be asked
about it.

(b) [only for students who took
ICS H21] We'll build a rudimentary
telephone book.  From now on, you should follow the conventional Java practice
of writing each class in its own file whose file name is the same as the
class name (so your Person class would be in the file Person.java--be
sure the spelling and capitalization are identical).  To compile all the
classes in a given directory, say "javac
*.java" and to run the code, say
"java X"
where X is the name of the class containing the main function.

(b.1)  First, create a class PhoneNumber
that has four integer fields:  areaCode, exchange, number, and extension,
so that for the phone number (949) 824-5072 ext. 1000, 949 is the areaCode,
824 is the exchange, 5072 is the number, and 1000 is the extension.  (The
extension field may be zero for numbers without an extension.)  Of course
you need a constructor and getter methods; you should also have a toString
method that produces the number in the format given above and a promptUser
method that takes a BufferedReader as a parameter and returns a newly constructed
PhoneNumber, asking the user to enter the number's components one by
one. 

(b.2)  Modify your Person class from
last week's assignment to include, along with the name and age fields,
a phone field that contains a PhoneNumber object.  

(b.3)  Create a class called Phonebook;
it should contain zero or more objects of the Person class.  You should
implement the Phonebook in an array whose maximum size (defined as a constant,
i.e., a static final int)
is 1000.  

Aside from a constructor to create an empty
People class, your class should have these methods:

int size()--returns
the number of Person objects in the class (initially, zero)

void add(Person P)--adds
the specified person to the class (in no particular order).  If the Phonebook
is already full, you should print an error message and not add the Person.

Person lookup(String n)--returns
the Person object whose name matches the parameter.  You may return the
first Person who matches (so you don't have to check for multiple entries
of the same name).  If the name isn't found, return null.

void remove(String n)--removes
from the Phonebook the Person whose name matches the parameter.  Again,
you don't have to check for duplicate names.

void print()--prints
all the Persons in the class, in some compact format.  You should rely on
the toString method of the Person class.

double averageAge()--returns
the average age of all the Persons in the Phonebook (or zero, if the Phonebook
is empty)

(b.4)  Create a PhonebookTest class
that contains statements to exercise all the operations of your class and
demonstrate to a critical reader that they work properly.  For some good
advice about testing, read the two sections on testing in Alex Thornton's
first ICS 22 lab
at (http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/).
 One thing to think about his how to test your program's behavior when
the array is full.  Typing 1001 names isn't feasible; what other approach
could you take?

(b.5)  For extra credit, you may enhance
your program in one or more of the following ways, but remember that you
should never start on extra credit until all the required parts are working
perfectly.

Enhance the promptUser method of the PhoneNumber
class to allow the user to type in a whole phone number in some form, parsing
that string to extract its components.  (This is not so easy; this probably
shouldn't be the first extra credit you attempt.)

Check for duplicate names and prohibit them
(or treat the attempt to add a duplicate name as an update of the name's
other field values).  Or, return not a single Person but a new Phonebook
containing all the matching people.

Add a reverseLookup method that takes a PhoneNumber
and returns the Person in the Phonebook whose PhoneNumber matches.

Add a partialLookup method that takes a string
and returns (in a new Phonebook) all the Persons whose name starts with
that string.  (You'll need to look up the methods on the String class
to find one to help you with this comparison.)


What to turn in:  

The Checkmate system (checkmate.ics.uci.edu)
is now up and running.  Go to that site and follow the instructions to associate
yourself with ICS H22.

For part (a), turn in one file via
Checkmate containing all your modified Restaurants code.

For part (b), turn in a Java file for
each class; Checkmate guides you through this.

We don't anticipate any problems with
the Checkmate system, which has been used successfully for three quarters.
 But if some trouble or confusion should arise, follow this procedure: 
First, wait an hour and try again.  Then, if the issue isn't resolved,
send us Email.  Nobody's grade will suffer because of Checkmate problems,
so long as you have done everything you can do.


Based in part on ICS H22 assignments by David
G. Kay from Winter 2000 and earlier; modified by David G. Kay, Winter 2001.

Based in part on ICS H21 assignments by David
G. Kay from Fall 2002 and earlier.

Modified by David G. Kay, Winter 2003, including
some logistical information from the ICS 22 Lab Manual by Alex Thornton.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Friday, January 17, 2003 -- 12:46 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/profpgms.html
##-----------------TITLE------------------------##
Writing Professional Programs
##------------------TEXT------------------------##
  


Nearly all of the ICS 22 lab assignments require
that you write some Java code.  In ICS 21 you concentrated mostly on the
correctness and completeness of your programs, but from now on your grade
will also depend on other qualities.  A good program has many attributes,
such as correctness, efficiency, ease of learning and use, reliability,
modifiability, and clarity.  Correctness is paramount, but "anything
that works" is the attitude of a hacker, not a professional.  A professional-quality
program must score highly in all these categories, and we intend to help
you learn how to write professional programs.

One aspect of professional programs is their
style.  When we speak of programming style, we use the term "style"
not in the sense of an author's manner of expression--Hemingway's
style is different from Joyce's--but in the sense of "good, clear
style" that everyone should strive for.  Achieving that clarity requires
work at many levels, from the overall design of the program's classes,
algorithms, and data structures, to the mundane details of indentation,
capitalization, and spacing.

Throughout the course we will concentrate
on the major design issues; in this document we focus on the smaller details.
 Yet these details are not cosmetic trivialities.  Adhering to consistent
style guidelines helps you write clearer, more modifiable, more reliable,
and generally higher quality code.

The style guidelines we present here are good
ones.  We require that you follow them (perhaps with amendments your TA
makes) for your programming in this course.  That is not to say that every
detail of these guidelines is superior to any other way of doing things,
but for the sake of consistency we require that you follow these guidelines
in this course.  You will find that many organizations have coding style
guidelines that all their programmers must follow.

However, nobody should follow style guidelines
slavishly.  If you come upon a specific situation where the rules don't
make a program clearer, the rules should give way (though you should check
with your TA to make sure).

Program design and organization:  You
should organize your program so that its structure is clear, using abstraction
of various kinds to hide unnecessary detail at each level. 

*   A main strength of Java is the set
of features it provides to support object-oriented programming.  Wherever
appropriate, you should design your program in terms of the real-world objects
it represents, making good use of classes and their associated operations.

*   Your classes should use the features
Java provides for abstraction and information hiding, including where appropriate
inheritance and private methods and instance variables.

* Methods should almost never be longer than
one screenful; break long methods into sub-programs.

* Use symbolic constants wherever applicable.
 Other than zero and one, you should have no literal constants (i.e., no
numbers) in the body of your program.  Every number has a meaning, and you
should capture that meaning in a constant definition.  (But that doesn't
mean following the silly practice of defining eponymous constants like
static final int TEN = 10; --use
meaningful identifier names.)

Choosing identifier names:  You must
choose identifier names that convey their function clearly to anyone reading
your program.

* The names of void functions (and of methods
whose return value is only a status indicator of successful completion)
should be imperative words or phrases-- commands that describe their actions.

      public
void printFormLetter (Name n, Address a) {...}

      public boolean fillRecord
() {...}

      public int sortByVegetableName
() {...}

* Other method names should usually be nouns,
naming the value returned.

      public
double insurancePremium (long ZipCode)  {...}

      public numberOfFlights sizeOfFlightRecordCollection
()  {...}

* Names of methods that return boolean values
should be declarative statements, so that they "read correctly"
when they're called.

      public
boolean cityNameIsValid (Response nameToCheck) {...}

      if (cityNameIsValid (usersInput)

         System.out.println("That's a city name,
all right.");

Indentation and spacing:  The key concept
here is to include enough white space so that more closely related items
appear closer together than less closely related items.  This should make
the program's organization apparent.  Never be stingy with blank lines;
use them to help guide the reader's eye to what's important.* Start
each new statement and each new data definition on a new line.  Break long
lines at a clear, convenient place and indent the continuation to indicate
that it's not a separate new statement.

Documentation:  The documentation required
varies from one assignment to the next, but at a minimum every assignment
should have the following.  Remember that comments can't make up for
poorly chosen identifier names or unclear code.* Include a comment at the
top of the program that includes your name, your student ID number, the
course, your TA's name, and the name and number of the assignment.

* Every procedure should include a comment
that describes the procedure's purpose, the kinds of parameters it expects
and any assumptions about their values (this is called the procedure's
precondition--what's true before it starts), the values it returns or
actions its performs (its postcondition--what's true after it executes),
and a high-level description of the method it uses if that method isn't
obvious from reading the code.

* Explain any intricate or obscure sections
of code in comments if you can't rewrite them to be less obscure.

* Because comments appear along with the code,
you can assume that the reader of your comments knows how to read Java,
even though he or she isn't familiar with your particular program. 
Thus, you should avoid silly, redundant comments like this:

total++;  // Add one to the total.

Safety and reuse:  Don't reinvent
the wheel, at least when you have permission to use an existing wheel. 
In real-world software development, program designers learn and use vast
libraries of classes and programs so they don't have to rebuild everything
from the ground up.  

In an introductory course such as this one,
there will be times when we ask you to build something from the ground up
because you need to learn the construction techniques involved.  But when
we don't tell you to build something from scratch, you should use existing
code where possible and where permissible (which means, of course, that
you can't use your classmates' or roommates' code--see below).

Code reuse is particularly valuable when the
existing code has qualities that your code lacks, such as extra features,
clearer design, or thorough error-checking.

We will use the program grading form shown
below; you should read it now and use it as a guide when you write your
code.  Notice how large a portion of your grade depends on issues of programming
style.

Turning in lab assignments:  Each assignment
describes what to turn in.  Typically this includes both a paper copy
and an electronic copy.  

Place all the parts of your paper submittal
into a manila envelope so that it forms one package. Make sure your name,
your student ID, and your TA's name are written on the front of the
envelope.  Then give the envelope to your TA in section. 

For electronic submission, use the Checkmate
system at checkmate.ics.uci.edu.


Please refer to the course outline on the
importance of keeping backups; papers do get lost, and servers do crash,
and we'll expect you to be able to produce a replacement copy easily
if either misfortune should occur again.

Late assignments:  Assignments will
typically be due at the start of your discussion section on the date specified
on the assignment; your submission to Checkmate should be complete by then
and your paper submission should be ready to hand in. We expect everyone
to turn in by the due date whatever work they have completed; significant
lateness will incur penalties.  (We can make exceptions for major illness
or emergency, but not for conflicts with other classes or work.)  We will
give partial credit for work that is partially complete but correct as far
as it goes; this is another reason why you should develop your programs
in stages, coding and testing and debugging as you go, rather than trying
to do it all in one big push.

Early assignments:  We will award a
bonus of 5% for any assignment that is turned in more than 48 hours before
the due date; we hope this will encourage you to begin work early on your
assignments.  This bonus, like all extra credit on labs, can make up for
points missed on other lab assignments, but it does not "spill over"
past 100% to make up for points missed on exams.  The 48-hour figure is
firm; please don't come asking for the bonus if you miss the cut-off,
even by a short while or in circumstances beyond your control.

Academic honesty:  Part of being a
professional is following the profession's norms of accepted behavior.
 As you know, you may not copy commercial programs from the lab machines
to use at home.  Likewise, in an academic setting you may not turn in someone
else's work as your own.Footnotes

As a general principle, we expect you to do
your own independent work in all parts of this course.  In this course it
is always permissible, even desirable, to talk with your classmates about
the conceptual course material or the requirements of an assignment (though
the instructor or TA will be most reliable for this).  It is always permissible
to get help from anyone about using the programming environment or other
system details, help with minor syntax errors, or suggestions possible test
cases for your programs (though when an assignment requires it, you must
write your own description of your test plan).  It is never permissible
(except if an assignment explicitly allows or requires working in groups)
to copy another student's solution (whether code, prose, or math). 
A good rule of thumb is this:  Any time you find yourself writing down
(on paper or by electronic means) part of someone else's solution, you
are copying impermissibly.

Turning in another person's work as your
own violates the honesty policies of ICS and UCI (http://www.ics.uci.edu/academics/policies/icsAcademicHonestyPolicy.php,
http://www.ics.uci.edu/academics/policies/uciAcademicHonestyPolicy.php).
The ICS Department takes academic honesty very seriously and imposes serious
penalties on students who violate its guidelines. Detected violations could
result in your failing the course, having a letter filed with the school,
and losing a variety of other benefits and privileges.  We do check for
academic dishonesty both manually and automatically.  It is an unfortunate
fact that nearly every quarter, some students in ICS classes are found to
have violated these policies; to protect the privacy of the guilty, violations
are not made public, but sadly, they do occur.  No matter how much pressure
you feel from deadlines or other sources, no matter how inconceivable it
is to you that you might not complete an assignment on time, never
take the shortcut of turning in someone else's code.  Compared to the
consequences of academic dishonesty, one low assignment score is a minor
disadvantage.  If you feel as if you're falling behind or have other
difficulties, see your TA or the instructor; we are more sympathetic than
you might expect.

We do encourage all students to help their
classmates with the course material and the labs, within certain limits.
 Helping someone else doesn't hurt your grade; we don't have any
limits on how many As or Bs we can give.  It is even permissible in ICS
22 to let someone else look over your code to get an idea of how
you organized it.  However, you should not let anyone copy your code,
either on paper or electronically.  In fact, it is wise to keep your code
in your own possession; if you give a copy to someone else, even if it's
just "for reference," that person might be tempted to copy portions
of your code; then you could be accused of academic dishonesty. 

Most importantly, realize that getting "the
answer" is only the last part of each assignment.  Equally important
is the process of getting the solution--including the false starts,
bugs, misconceptions, and mistakes--because the learning occurs in the doing.
 Completely apart from the ethical issues, copying a solution deprives you
of the whole point of the assignment.

Working at home:  Doing your lab work
at home is comfortable, convenient, economical, and safe.  It also benefits
students who work in the lab, by freeing up the machine you would otherwise
be using.  You are welcome to do your lab work at home or anywhere else
you have legitimate access to a computer, but in addition to the advantages
just noted, there are also some potentially serious disadvantages which
we will address below, and which you must consider as you decide how best
to complete your labs.

*   To ensure fairness, consistency,
and efficiency in the grading, all the code you turn in must work correctly
in the Java environment in our lab.  If you develop your code on a different
computer, operating system, or Java environment, it is entirely your responsibility
to "port" your software to work in the lab by the due date.  Java
is supposed to be perfectly portable across platforms, but (especially if
you're using Java or Java-like products from Microsoft) there still
may be subtle, undocumented differences that are extremely difficult to
identify and work around.  You can imagine how frustrating it would be to
have a program that worked fine at home crash in the lab, especially right
before a due date.  It will be your responsibility to avoid these frustrations
to the extent you can, and to deal with them yourself, without doing damage
to the lab machines or your classmates, when they arise despite your best
efforts.  To reiterate, porting problems will not be an excuse for late
assignments.

*   For some of the lab assignments,
there will be data or code that you'll need to incorporate, which we'll
supply on the lab servers. You will need to copy this information from the
servers onto floppies (or via the Internet) to use at home. 

*   For some of the labs, we will use
software other than Java, though we anticipate that any such software will
be available over the Web.

*   Working at home is convenient, but
it's also isolated; close friendships and a "support network"
develop among students who use the labs.  These are your first "professional
contacts;" it would be unfortunate to close yourself off from them
completely.


Grading Criteria for ICS 22 Programs

Here are some guidelines for how we will assign
points for the programming portions of lab exercises. (Note that most exercises
have points for others activities as well, such as test plans and prose
analysis.)  Your TA's criteria may vary slightly; he or she has the
primary grading responsibility for your laboratory work.

Correctness for valid data.  Are the
answers right? Is the output spacing correct?  Does the program do what
it is supposed to do for any data that meets the problem's specifications
(i.e., does the program handle every situation that it's supposed to
handle?)
40%
Robustness in the face of unusual data.
Does it crash when given no data, more than the maximum allowable, bad data
values? Within the limits of the specifications, does the program bomb when
it gets garbage?  Instead, it should print an informative message in these
situations.
10%
Quality of solution; choice of algorithm.
Points deducted for particularly graceless, awkward, cumbersome, or inappropriate
way of going about the problem.
10%
Design quality. Is the program divided
into logical parts using classes where appropriate, each encapsulating a
single task and using abstraction techniques where applicable, or are the
statements for a given task scattered all over the program or run together
with other tasks?
10%
Identifiers. Were the identifier names
and symbolic constants chosen to reflect their function? Are they meaningful
to the reader, or do they require a lot of explanation? 
5%
Format of source program. Does the
program follow the course's style conventions? Is white space used well?
5%
Documentation: Are there enough comments
to make the program clear to the reader (noting that good modularity and
identifiers make the commenting burden lighter)? Are any unusual portions
of the code explained? Do the comments clutter up or interfere with the
program text? Does the external written documentation, if required, give
the reader a lucid overview of the program's organization?
20%
TOTAL
100%
 








Written by David G. Kay (1990), including
much material adapted with permission from Appendix E of Programming
for People/Pascal by David G. Kay (Mayfield, 1985).

Revisions made to reflect THINK Pascal by
Joe Hummel and Norman Jacobson, January, 1992.

Minor revisions by Norman Jacobson & Theresa
Millette, December 1992.

Prose polished by David G. Kay, January 1995.

Revised for C++ and object-oriented programming
by David G. Kay, with assistance from Rasheed Baqai, January 1997.

Revised January 1998 and September 1998 by
David G. Kay.

Revised yet again by David G. Kay, April 1999,
particularly to address honesty and professionalism.

Revised January 2000 to reflect Java by David
G. Kay, and revised further in January 2001 and January 2003.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Friday, January 10, 2003 -- 6:18 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw8.html
##-----------------TITLE------------------------##
Eighth Homework
##------------------TEXT------------------------##
  

This assignment is due on Wednesday, March
12.  There's not much coding here except for the last part, which you
may do in pairs.

(a) Below is some code that implements
a finite-state machine.

final int Secret1 = 35;

final int Secret2 = 127;

final int Secret3 = 33;

String[] stateList = {"Init",
"GotFirst", "GotSecond", "Success");


int number;

int count = 1;

String state;

void main()

{

  state = "Init";   

  while ((!state.equals("Success"))
&& (count <= 3))

  {

    number = getNext();


    if (state.equals("Init"))

     {

       if (number == Secret1)

      state = "GotFirst";

       else state = "Init";

     }

    else if (state.equals("GotFirst"))

     {

       if (number == Secret2)

      state = "GotSecond";

       else state = "Init";

     }

    else if (state.equals("GotSecond"))

     {

       if (number == Secret3)

      state = "Success";

       else state = "Init";

     }

    count++;

  }

  

if (state.equals("Success"))

    System.out.println("Input
accepted.");

else

    System.out.println("Input
rejected.");

}


(a.1) Draw the state transition diagram
that represents the FSA this program implements.  The input tokens here
are whole integers, not individual characters.

(a.2) Describe in one brief English
sentence what this FSA does.  Try to think of a simple, real-world, non-computer-related
object that this FSA models.

Intermezzo:  State transition diagrams
are one way to describe FSAs.  Another way (which is easier to represent
in a computer) is a transition table.  A transition table has a row
for each state and a column for each input; the value at each position in
the table tells you what state to go to when you read a given input in a
given state.  Below is a transition table for the program above:

 
Secret1
Secret2
Secret3
other
Init
GotFirst
Init
Init
Init
GotFirst
Init
GotSecond
Init
Init
GotSecond
Init
Init
Success
Init
Success
 
 
 



This table says just what the program and
the state transition diagram say:  If you're in Init
and you read Secret1,
you go into state GotFirst;
if you're in state Init
and you read anything else, you stay in Init.
 If you're in state GotFirst
and you read Secret2,
you go into state GotSecond;
if you read anything else in state GotFirst
you go to state Init.
 And finally, if you're in state GotSecond
and you read Secret3,
you go to state Success;
otherwise, you go to Init.
 In state Success
the machine stops, so you don't make any transitions out of that state;
it's the accept state.

As we noted, transition tables make FSAs easy
to represent in a computer.  In fact, we can write a very simple but very
general FSA simulator according to the following pseudocode:

initialize TransitionTable;

state 
initial state;

while there are more tokens:

      get a token;

      state 
TransitionTable[state][token];

if state = accept state

      then accept

      else reject.

Because this code is so simple, it's the
preferred way to implement FSAs in programs.  The only tricky part is finding
a data type that will represent the range of tokens and will at the same
time be acceptable as an array index in your programming language.  Scheme,
for example, handles symbolic names very easily.  But in the above Java
code, you can't have an array with four columns labeled 35, 127, 33,
and 'other'.  The cleanest way to deal with this is to have a routine
that would translate each token (or category of tokens) to its corresponding
column in the transition table--effectively a switch statement or sequence
of if-statements that map the tokens (or token categories) to the range
0..3.

(b)  Think about the task of extracting
words from a stream of text.  In Java, StringTokenizer does this for you,
but sometimes you need to specify "words" idiosyncratically (as
with the DVD information).  You can do this kind of input-parsing task much
more easily using state machines than by writing code directly.

(b.1)  Draw a state transition diagram
that accepts words defined as follows:  a sequence of non-separator characters
whose end is marked by a separator.  Separators are symbols that separate
English words--space, comma, semicolon, colon, and so on.  Note that the
hyphen (-), the apostrophe ('), and the percent sign (%) are not separators:
 treat "mother-in-law," "don't," and "23%"
as single words.   The end of the line is a separator, unless the last word
of the line ends with a hyphen.  That way, if a word like mother-in-law
is hyphenated across two lines, it will still count as one word.  (We will
assume that in our input, only words that are always hyphenated will be
hyphenated at the end of a line; that is, you should not expect normally-unhyphenated
words to be broken across two lines.)  Watch for multiple separators in
a row--for example, a comma followed by a space is two separators, but there
is no word between them.

You could code up this FSA into a method called
getNextWord,
and call it to parse a stream of input.  Coding this isn't a required
part of this assignment, though.

(b.2)  Write a transition table for
the state machine you drew in part (b.1).

(c)  Now it's time to think about
finite-state machines and the DVD information fields defined in the Sixth
Homework.

(c.1)  Draw a state transition diagram
that accepts DVD information.  You should design your machine to accept
a single field--maybe a quoted string, maybe an integer, maybe a date--and
to go back to the initial state when it encounters a comma (that isn't
quoted, of course).  This makes processing quite simple so long as you're
willing to forego checking which field is of which type, or that you have
the correct number of fields.  (In coding, you could easily add actions
for some transitions that would maintain a field count.  It might also help
to assume that there's an input token or character called EOS, for "end
of string," that your character-reading routine would return and that
your machine could check for.)

(c.2)  For extra credit, recode your
DVD-parsing program to implement the FSA you designed above.

(d)  (This part is optional, but don't
stop here; subsequent parts of this homework are required.)  Available on
the web is a program called JFLAP, written at Duke University (http://www.cs.duke.edu/~rodger/tools/jflaptmp/).
 You can download this Java application and use it to build and test your
own simple FSAs (as well as do other formal-language activities).  Other
state machine simulators are available on the web; you can find some of
them by using search strings like "state machine applet" or "FSA
animation."  If you'd like to work on building or enhancing tools
like these (especially to allow graphical construction of useful FSAs with
regular expressions as the transitions), come talk to me some time.

(e)  The programming language Lisp
(whose name is a contraction of the words "LISt Processing") was
invented by John McCarthy in 1958.  It was such an advanced language for
its time that existing machines could not run it efficiently, and its early
use was mostly limited to researchers in artificial intelligence.  Today,
however, computers are thousands of times faster than they were in the 1950s,
and Lisp's power is practical for a very wide range of programming tasks.
 Scheme and Common Lisp are two modern members of the Lisp family of programming
languages.

One of Scheme's attractions is that its
syntax is very simple.  Unlike Java, which has a few dozen different statements,
each with its own grammar and punctuation rules, every program or expression
in Scheme is just a list of words surrounded by parentheses.  This provides
a rich variety of expression because a "word" can be (a) any sequence
of characters delimited (separated from other words) by white space, or
(b) a parenthesized list of words nested within the outside list.  The following
are all valid Scheme expressions (each is one line long except the last,
which starts with the word define):

(Fee fie fo fum)

(+ 3.14159 1776 -45 quantity)

(equal? (+ 2 2) (+ 3 1))

(define square

   (lambda (x)

      (* x x)))

Novice Scheme programmers sometimes worry
about keeping all the parentheses balanced, but most Scheme systems have
"syntax-based" text editors that automatically keep track of the
parentheses, so that any time you type a right parenthesis it automatically
flashes the left parenthesis that matches it.  That way you can see effortlessly
what matches what.  (This idea has found its way into some program editors
for Java and other languages, where it's also useful.)

Suppose you decide to write a syntax-based
editor for Scheme, and as your first task you want to write some code that
checks whether the parentheses are balanced in a Scheme expression.  Astutely,
you start by designing a FSA.  To make it truly a finite-state machine,
we have to put an upper limit on the depth to which parentheses can be nested;
the example below shows the FSA for an upper limit of three-deep nesting.
(In the diagram, "other" means an input symbol other than an open
or close parenthesis.)





(e.1) After scanning the entire Scheme
expression, in what state should your machine be if the parentheses were
correctly balanced?

(e.2) This FSA works fine in theory,
but for a realistic nesting depth of a few dozen, the diagram would be tediously
repetitious.  So you decide to simplify things and encapsulate the state
information in a simple integer counter.  Then you can have a single state
on the page, and all the action happens in the transition steps, where you
increment the counter for each left parenthesis and decrement it for each
right parenthesis.  (Having a variable may appear to violate the definition
of a finite-state machine, all of whose information is encapsulated in a
finite number of states.  But since integer variables on computers (as opposed
to integers in mathematics) always have a finite upper bound, we're
technically safe.  If our machine used a stack to keep track of the unbalanced
parentheses (which is what our integer counter is modeling), it would no
longer be an FSA--it would be a PDA (push-down automaton), which can accept
a broader class of languages.)  

The modified (augmented) machine appears below.






In the augmented machine, being in the stop
state is not enough to know that the Scheme program has balanced parentheses;
the value of the counter must be considered as well. What should the counter's
value be if the machine accepts the Scheme source (that is, if the parentheses
are correctly balanced)? What must have happened for the machine to end
up in the error state?

(e.3)  Things are never quite as simple
as they first seem.  Comments in Scheme programs start with a semicolon
and extend to the end of the line.  Thus, the following is a valid Scheme
expression; everything to the right of the semicolon on each line is a comment.
 Of course the contents of comments are ignored when checking for balanced
parentheses.

   

   (define print-it    ;In this
routine we

      (lambda (p)      ; a) accept a parameter,

         (display p)   ; b) display it, and

         (newline)))   ; c) hit carriage return

Draw a new FSA-like machine, similar to the
one above, to account for comments correctly; you will have to add more
states.

(e.4)  And there's one more wrinkle.
 Literal character strings in Scheme are enclosed in double-quote marks.
 As in Java, the contents of literal strings are ignored when analyzing
the syntax of the program.  The following three expressions are valid in
Scheme.

(display "Oh; really?")

(list  "a)"  "b)"  "c)" )

(let ((delims ".,;:)(("))) ; This has an extra '(' in quotes

Draw a new FSA-like machine to handle both
strings and comments correctly.

(e.5)  Write a transition table for
the state machine you designed in part (e.4).  Note that some of
the transitions in some conditions will also increment or decrement the
count of parentheses.

(e.6)  Test your FSA from part (e.4)
 thoroughly on paper--devise a thorough test plan and work each test
through your FSA.

(f)  A grammar is a set of rules that
can generate all the strings in a formal language.  In the right form, a
grammar for a programming language can be used with other software to produce
automatically part of a compiler for that language.

Below is a grammar (in Backus-Naur Form, or
BNF notation) that describes arithmetic expressions:

<expression> ::=    <real> | <variable>
| (
<expression> )
|

    <expression> <operator> <expression> |

   (
<variable>  =
 <expression> )

<real> ::=    <positive-real>
 | -
 <positive-real>

<positive-real> ::=    <integer-part>  | <integer-part>
.
<integer-part> 

<integer-part> ::=    <digit> | <digit> <integer-part>

<variable> ::=    <letter>

<digit> ::=    0
| 1 |
2 | 3
| 4 |
5 | 6
| 7 |
8 | 9

<letter> ::=      
a | b | c | d | e | f | g | h | i | j |
k | l | m |

   n | o | p | q | r | s | t | u | v | w | x | y | z 

<operator> ::= 
  + | -
| * |
/ | %


(f.1)  Some of the following expressions
can be generated by this grammar; others can not.  Indicate which are the
valid expressions.  (The easiest way to do this might be to photocopy the
page, or print it from the on-line version, and circle the valid expressions.)







(f.2)  Using the grammar, generate
four more expressions that aren't on the above list.  Each expression
should involve applying at least ten rules.  For each expression, show its
derivation tree (with <expression> at the root and terminal symbols--i.e.,
without angle brackets--at the leaves).

(f.3)  Give three arithmetic expressions
that are syntactically valid in Java but are not generated by this grammar.

(f.4)  Modify the grammar to allow
multi-letter variable names.  This requires changing only one of the existing
rules.

(g)  Write regular expressions to match
each of the following patterns.  Note that these are natural language descriptions,
so they will certainly be ambiguous; disambiguate them as you see fit and
note what decisions you made.  In some cases you may not be able to match
the described set perfectly; don't obsess over it.

*  Comma-separated dollars-and-cents amounts
(e.g., $1,234.56 and $17)

*  Lines that are empty or all blanks.  (The
caret ("^")
matches the start of a line and the dollar sign matches the end of the line.)

*  Email addresses

*  URLs in HTML anchor tags (e.g., <A
href="http://www.ics.uci.edu/~kay">)

*  Lines containing exactly one integer (perhaps
surrounded by non-numeric characters)

(h) Write a program that generates
random sentences according to a user-supplied grammar, as specified below.
 The final product doesn't require a lot of code, but it does require
careful, thoughtful design in advance.  You may do this assignment in pairs.
 Each member of a pair should turn in the (identical) program via Checkmate;
each source code file should have a comment at the top that says something
like "// Joint work of Carl Coder and
Petra Programmer."

(h.1)  Get an idea of what this assignment
can do by trying out the applet at http://www-cs-faculty.stanford.edu/~zelenski/rsg/
.  The "Extension Request" grammar (the default) is pretty funny;
also try out "CS assignment," "Programming bug," and
"Math expression," along with any others that strike your fancy.

(h.2)  Follow the "Directory of
the collected grammar files" link at the bottom of the page.  Pick
grammars that you chose in part (h.1) ("Math expression"
is the easiest to follow) and look at them to get an idea of your program's
input.

A grammar file for input to your program contains
one or more rules of the following form:

-- Each rule starts with a left brace "{"
on its own line and ends with a right brace "}" on its own line.

-- After the opening brace, the first line
of the rule is its left-hand side; this non-terminal is a string delimited
by angle brackets.

-- Subsequent lines of the rule are alternative
productions, different ways of rewriting the left-hand side.  Each production
consists of non-terminals (enclosed in angle brackets) and terminals (other
characters) in any combination, ending with a semicolon.

-- There may be lines of text outside of the
braces that delimit the rules; those lines are ignored by the program (and
thus can serve as comments in the grammar).

You may assume that the grammar files take
this form; you do not have to check for errors. 

(h.3)  Write code to read grammar files
and store the grammars.  Use a symbol table (either a hash table or a BST)
keyed on the non-terminals; the value of each entry in the table contains
the non-terminal's alternative productions.

(h.4)  Now, write code to generate
sentences from the grammar.  Each grammar contains one non-terminal symbol
named <start>,
which (obviously enough) is the start symbol for each derivation.  As your
program expands each non-terminal, it chooses at random one of the non-terminal's
alternative productions, and so on recursively until every non-terminal
is expanded.

You may assume that every non-terminal in
the grammar will appear on the left side of exactly one rule; you do not
have to check for undefined or multiply-defined non-terminals (though for
a bit of extra credit you may check for and handle those issues and a missing
start symbol).

Your output should include a hierarchical
description of the derivation process as well as the final sentence, as
shown in the following example.

Here is a simple grammar:








Here is the output, showing the final generated
sentence at the bottom.  The first level of indentation shows the first
production taken (This <Y> !),
the second level shows the expansion of <Y>
(<Z> cool),
and so on.


<start>

   This

   <Y>

      <Z>

         is
really

      cool

   !


This is really cool !

(h.5)  Design and build an interface.
 The simplest would be a console interface that prompts the user for the
name of a grammar file and then generates a sentence from that grammar.
 Enhancements could include letting the user request new sentences repeatedly
or specify a new grammar file.  Building an applet or GUI application is
another alternative.

(h.6)  Make up a grammar for (a tiny
subset of) Java and see what kinds of programs it generates.  (You could
copy your random program output into a Java environment like DrJava, not
to run it but to get it automatically formatted to make it readable.)

(h.7)  Make up at least one other grammar
of your choice and generate some sentences with it.

(h.8)  On the last day of class, bring
a printed copy of your best, cleverest, or funniest grammar and some of
the sentences it generates; we can share them (anonymously if you like).

(i)  The GUI you may have built as
extra credit suggested by the Sixth Homework is due at the same time this
assignment is due. 

What to turn in:  For parts (a)
through (g), which involve so many diagrams and tables, you will
probably find it easiest to produce and submit your work on paper (clearly
marked with your name, of course) and turn it in during section.  Checkmate
will accept a Word document for those parts, but please use Checkmate for
those parts only if everything, including all the diagrams, is included
in the electronic copy.  Of course you may use Word to produce a printed
copy onto which you draw some of your answers by hand, but we need everything
in one place, not split between Checkmate and paper.

For part (h), turn in via Checkmate
your Java code, your grammar for (partial) Java, and the other grammars
you designed.


FSA exercises written by David G. Kay, Winter
1991 (based on materials from 1990 and earlier).

Revised by Joe Hummel, Norman Jacobson, Theresa Millette, Brian Pitterle,
Alex Thornton, Rasheed Baqai, Li-Wei (Gary) Chen, and David G. Kay, 1992-1999

Revised to include BNF grammars by David G. Kay, Spring 1999. 

Revised and consolidated by David G. Kay, Winter 2000; revised to add DVD
information, Winter 2003.

Random sentence generator original concept
by Mike Cleron of Stanford University; modified by Allison Hansen, Julie
Zelenski, and others.

Revised and adapted by David G. Kay, Winter 2000 and Winter 2003.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/h22/hw/hw4.html
##-----------------TITLE------------------------##
Fourth Homework
##------------------TEXT------------------------##
  

This assignment is due on Friday, January
31.  

(a) If you don't have much experience
coding dynamically allocated, linked structures, you might want to postpone
this part of the assignment until after Tuesday's lecture, proceeding
straight on to part (b) now.

In the Goodrich and Tamassia book, you should
look closely at problems R-4.1 through R-4.7 and know how to do them.  We're
not going to ask you to write down and turn in the answers, but do be sure
you know what's going on here; something similar might show up on an
exam.

Likewise, you should understand the concepts
behind P-4.3 through P-4.7.  Again, we aren't asking you to turn anything
in for this (so you can spend your time on the rest of this assignment)
and for now we're not expecting you to be able to do these perfectly
from memory, but you should understand the concepts and be able to apply
them given some hints, reference points, or context.

(b)  Look at Alex Thornton's Project
#3 from ICS 22, available on the web at http://www.ics.uci.edu/~thornton/ics22/LabManual/Scenes/
. 

(b.1)  Code the problem as specified.
 First, download the file that contains the skeleton of the program; the
Java files for the classes you will write (MenuItem, Menu, Order, Table,
and Restaurant) contain good advice and detailed specifications of the methods
you'll need to code.

(b.2)  Here are a few questions about
this problem and its implementation.  Answer them briefly in a Word (or
plain text) document:

The Menu and Order classes allow you to assume
that they will never contain more than 1000 items.  Why?  What would you
have to do differently if you weren't allowed to make those assumptions?

What parts of your program (which fields and
methods in which classes) would have to change if restaurants were allowed
to add and remove tables (dynamically, during the time they're serving)?

There are three multiple-valued structures
in this program:  the collection of Tables in the Restaurant, the collection
of MenuItems in an order, and the collection of MenuItems on the Restaurant's
Menu.  Probably you implemented all of them as unordered arrays.  Which
one of them is the best candidate to be implemented in one of the other
multiple-valued structures we have discussed (ordered array, linked list,
binary search tree, hash table)?  Which alternative would you choose, and
why?  (There may be no single, obvious, compelling answer to this.  Just
think of how the restaurant's business might change over time, or how
the technology used might change, and think about which re-implementation
might plausibly provide the greatest benefit.)

(extra credit)  What's the pun behind
Chez Quis, the name of the restaurant in Alex's example? Can you come
up with a funnier one?
What to turn in:  

For part (b), turn in via Checkmate:

your five Java files

your test files, both the code files and the
"restaurant info" files

a Word document describing how to run your
test cases

a Word document answering the questions posed
above


Written by David G. Kay, Winter 2003 to build
on "Scenes from an Italian Restaurant," an ICS 22 lab by Alex
Thornton.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Friday, January 24, 2003 -- 4:48 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Academic_Standing.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Course_Outside_UCI.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Grade_Options.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Computer_Copyrights.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Withdrawal_Readmission.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Laptop_ComputerUse.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Computer_RemoteAccess.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Add_Drop_ChangeOption.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Computer_Acct_Backup.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/ugrad/policies/index.php/Academic_Honesty.php
##-----------------TITLE------------------------##
undergraduate student policies @ the bren school of information and computer sciences
##------------------TEXT------------------------##
ABOUT

                    
                    About the SchoolDean's WelcomeFacts and FiguresDonald Bren HallVisit the Bren SchoolEquity & Diversity
                        Contact Us               
                
                
                     DEPARTMENTS 
                    

                    Computer ScienceInformaticsStatistics               
                
                
                     RESEARCH 
                
                
                    Research AreasResearch CentersResearch Highlights
                
                
                    EDUCATION
                    

                    Graduate ▸ 
                        
                            Prospective StudentsHow to ApplyPrograms of StudyAcademic Year PlanFormsPoliciesFunding & HousingComputing SupportCampus ResourcesVisit the Bren SchoolGraduate Student HandbookContact

                        Undergraduate ▸ 
                        
                            ContactAcademic AdvisingAcademic Year PlanPetitionsICS MajorsICS MinorsPolicies: Academic IntegrityPolicies: Academic StandingPolicies: Add, drop, & change optionsPolicies: Coursework outside UCIPolicies: Grade policyPolicies: Laptop & computer usePolicies: Withdrawal/ReadmissionGraduationICS Student LifeComputing Support
                        Prospective UndergradScholarships & Fellowships               
                
                    
                    PEOPLE                      
                    
                
                    FacultyStaffGraduate Students   
                 
                
                    COMMUNITY
                    
                    
                    AlumniFriendsNewsUCI Parents   
                
                
                    GET INVOLVED
                
                
                    Make a GiftLeadership CouncilCorporate PartnersSponsor ProjectsProduct Development CompetitionZotLink Jobs & Internships               
                






            




    










    

Bren school home > Undergraduate > policies > 


  
Undergraduate Student Policies




Undergraduate Student PoliciesAcademic HonestyAcademic StandingAdds, drops, & change of grade option Computer Account Allocation and BackupsCopyright InfringementCoursework outside UCIEthical Use of ComputingGrade PolicyLaptop and computer useRemote Computer AccessWithdrawal/Readmission

* Other policies important for students to know include the Non-Discrimination Policy Statements, Americans with Disabilities Act, and Jeanne Clery Act. It is recommended that students be familiar with the rules and regulations that govern students at UCI as outlined in 
the UCI General 
Catalogue.





More Undergraduate »
ContactAcademic advisingAcademic year planICS majors
Double major2nd baccalaureate
ICS minorsPetitionsPolicies
Academic honestyAcademic standingAdd, drop, & change optionsCoursework outside UCIGrade policyLaptop & computer useWithdrawal/Readmission
GraduationICS student lifeComputing support
Quick Links - select a page -Computing supportCS Seminar SeriesEmploymentFacilitiesFind faculty and staffGiving to the Bren SchoolGraduate degreesKay Family Foundation LabProject ICSProspective undergraduatesSafety proceduresUndergraduate degrees
           

Copyright Inquiries |
   UCI Directory |
   Intranet |
   
   
 
  icswebmaster
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/22/scheme-refs.html
##-----------------TITLE------------------------##
Scheme References
##------------------TEXT------------------------##
Scheme References


The following references to Scheme are available
on-line.  For ICS 22, please consider these optional; you can do what you
need to do in the lab based on what we covered in class (and some serious
thinking to work through the concepts for yourself), and all of these contain
much more detail than we will need for our brief coverage this quarter.

Schemers, Inc.
(www.schemers.com) makes EdScheme
and other products for teaching Scheme.  Their comprehensive Web site points
to all the major Scheme resources on the net.

The Programming Languages Team
at Rice University also produces a wide set of Scheme materials, including
a textbook draft
(available at http://www.cs.rice.edu/CS/PLT/Teaching/Lectures/Released/curriculum/)
and the free Dr. Scheme programming environment,
which is available for all major platforms.  We expect that the Scheme work
we do in ICS 22 will be compatible with Dr. Scheme, but as always we can't
make any guarantees.

http://turing.scs.carleton.ca/~csgs/resources/scheme_intro.html

http://www.math.grin.edu/~stone/events/scheme-workshop/

http://www.cs.indiana.edu/eip/workshop1.html

   






David G. Kay,
408E Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Wednesday, October 28, 1998 -- 3:09 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw3.html
##-----------------TITLE------------------------##
Asst. 3 * Syntax, Vars, Real F.P
##------------------TEXT------------------------##
This assignment is due on Monday, February
7, by 7:00 p.m. in the locking box in CS 189.  Turn in everything you have
completed at that time; we can't grade straggling assignments.

Summary:  In this assignment you will
work with some realistic functional programs.  You'll also get experience
with BNF and with issues of scoping and binding.

Readings and review questions:  This
assignment covers more of Sebesta, chapters 3 and 4.  You should know the
answers to the review questions listed below, but you do not have to turn
them in.  This list should help you identify some of the more important
concepts in the text.  (On the other hand, don't infer that the topics
we skip or omit are entirely unimportant.)

Chapter 3:  1, 7, 8, 14

Chapter 4:  1, 2, 4, 6-14, 16, 18-23.

Part I:  Syntax description

(a)  In the Sebesta text, do the following
problems in the problem set starting on page 152: pick one of the five parts
of problem 2; pick two of the four parts of problem 4; problem 6; problem
8; problem 10; and problem 11 (which, as written, is a trick question).

(b)  Write an EBNF grammar for HTML
documents.  You don't have to cover all of HTML; just handle about ten
of the most popular tags (including <A></A>) in their basic
forms.  Use | boxed text | instead of <angle brackets>
for your nonterminals, so you don't get confused with the angle brackets
that are part of HTML itself.

Part II:  Scoping and binding

In the Sebesta text, do the following problems
in the problem set starting on page 189 (this is labeled "problem set,"
not "review questions."): 2, 4, 6, 9.  Draw two contour models
for problem 9 (one for static scoping, one for dynamic), as we did in class;
it will help a lot.  The other problems in the section aren't required,
but if you don't feel comfortable with the scoping issues you should
try to work them out.

Part III:  Functional programming in
real programs

(a)  Attached to this assignment is
a simple Scheme program to maintain a database of restaurant objects.  It's
available on the lab server.  Load the program into EdScheme (click the
lambda button) and play around with it for a while:  Evaluate (restaurants)
in the transcript window and give commands to add, remove, print, and search
for restaurants.  (Represent restaurant names either as double-quoted strings
or as Lisp lists of symbols--just keep to one representation consistently.)
 You don't have to turn anything in to demonstrate your experimentation.

(a.1)  Modify the program code so that
it gives the user an additional menu choice:

   c:  Clear all the restaurants from
the collection

When the user types 'c',
the program should remove all the restaurants from the collection (so that
if the next command were 'p',
for example, nothing would be printed).

This will require modifications or additions
in a few places; you can do the main part of the work very easily indeed,
with a single function call.  The key is to think functionally, not of changing
values but of describing or creating the new value.

(a.2)  The search command currently
allows the user to search only for restaurants by name.  We know that collection-select
allows much more flexible searching, however.  

Modify the search-collection
routine in the main program to give the user a choice of searching by name
or by cuisine.  If the user chooses to search by cuisine, prompt for the
type of cuisine and perform the requested search with appropriate calls
to collection-select.
  [Hint:  Consider using some of the code on the second page of the "Notes
on Scheme" handout.]

(a.3)  Now, ask yourself how much code
it would have taken to accomplish the same thing in C++.  You don't
have to write an answer, but it's worth thinking about.

(b)  Also attached to this assignment
is an implementation of binary search trees in Scheme.  It, too, is available
on the server.  Load it and experiment with it.

(b.1)  What happens when you add a
duplicate item (an item whose value is already in the tree)?

(b.2)  Enhance the implementation by
adding a "count" field to each node, so that when a duplicate
is added, the count is increased, and when an item is deleted, its count
is decreased (and the node isn't actually deleted until the count reaches
zero).

(b.3)  After saving a copy of your
code from (b.2), modify it to implement "lazy deletion"
of nodes:  Instead of actually removing a node from the tree when its count
gets to zero, just mark it as deleted (and alter the routines for searching
and adding appropriately).  This is useful in situations where the same
values enter and leave the tables repeatedly.  Turn in your final code for
this part on paper and electronically, to the ICS 141 dropbox on the Masterhit
server in the lab, labeled clearly with your name and student ID.

(b.4)  Go back to the original binary
search tree code, before you made your modifications for parts (b.2)
and (b.3).  Note that bst-add
and bst-delete
have a common structure.  Combine them, as we did with find-all-matches
and remove-all-matches
in the "Notes on Scheme" handout.  You can do this on paper; you
do not have to turn it in electronically.

(b.5)  (extra credit)  Once lazy deletion
and a count field are implemented, handling normal (non-lazy) deletion is
just a question of doing something different when the node's count gets
to zero.  Modify your code from (b.3) to let the user specify when
creating the tree whether it should use lazy or normal deletion.  You'd
need to modify the "constructor" to take another parameter (whose
value would be either 'lazy
or 'normal--or,
you could make it an optional parameter, using normal deletion as
the default case).  You'd store with each new tree an indication of
which kind of deletion it uses, and you'd do that kind of deletion when
called for.

(b.6)  (extra credit)  Allow for more
complex values (like structures) in the tree, in essence building a "templated
class."  You'll need to supply key-selector and key-comparison
functions when you create a tree.

(b.7)  (extra credit)  Implement your
favorite tree-balancing algorithm.

(c)  (extra credit)  Find as many indications
as you can in the Sebesta text that Sebesta doesn't "get"
functional programming or Scheme--that he doesn't treat Scheme as completely
or seriously as other popular languages.  Look for omissions and subtleties
in the wording. 

(d)  For some examples of the practical
applications of functional programming, check out the web site Functional Programming in the Real World,
http://www.cs.bell-labs.com/~wadler/realworld/.
 You should also take a look at www.scheme.com,
which describes a Scheme implementation that claims to generate code with
the same performance as C.  There's nothing to turn in for this.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw8.html
##-----------------TITLE------------------------##
Asst. 8 * Concurrency and Exceptions
##------------------TEXT------------------------##
This assignment is due on Monday, March 13,
by 7:00 p.m. in the box in CS 189.

Summary:  Finally, we consider concurrency
and exceptions.

Readings and review questions:  You
should know the answers to the review questions listed below, but you do
not have to turn them in.  Remember that going over all of the review questions
we've singled out is good preparation for the final.

Chapter 12:  1-6, 19-24

Chapter 13:  1-4, 11-23

(a)  This part refers to the Java code
on pages 524 and 525, with these substitutions:

Use new Queue(5)
instead of new Queue(100)
(in other words, just create a queue with 5 elements).

In Producer's
run method on page 525, change the loop to read:

while (true) {

   if TimeToAct() {

      //-- Create a new_item

      buffer.deposit(new_item);

}}

Change the loop in Consumer's
run method to call TimeToAct
the same way.

Assume that both threads start running at
7:00 a.m.  Assume that consumer1
tries to consume a new item every 5 minutes, starting at 7:10 a.m., stopping
at 7:36 a.m., and starting again at 9:25 a.m.  These timings are handled
(magically) by the function TimeToAct,
which just returns false until the time for the next action comes up.

Assume that producer1
produces an item every 10 minutes from at 7:21 a.m. to 9:21 a.m.  Each item
is an integer representing the time (721, 731, 741, ..., 921).

(a.1)  Give a snapshot of the concurrent
processes' execution every 5 minutes, starting at 7:03 a.m. (7:03, 7:08,
7:13, 7:18, ...) and continuing until the contents don't change any
more.  Each snapshot should show the contents of buff1
and the state of execution of the threads producer1
and consumer1
(i.e., where in the code they are executing).

(a.2)  (extra credit)  Rewrite the
producer/consumer code to use the sleep
method instead of the TimeToAct
function described above.

(a.3)  (extra credit)  Implement this
producer/consumer problem in Java; turn in your code, a test plan, and the
results.  Make sure you can do part (e.1) by hand, though; you won't
have a computer on the final exam.

(b)  Briefly answer problems 6, 7,
8, and 15 in the problem set on page 564.  For extra credit, do either problem
12 or 13.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw7.html
##-----------------TITLE------------------------##
Asst. 7 * ADTs and OOP
##------------------TEXT------------------------##
This assignment is due on Monday, March 6,
by 7:00 p.m. in the box in CS 189.

Summary:  Here we look at abstract
data types and object-oriented programming.

Readings and review questions:  You
should know the answers to the review questions listed below.

Chapter 10: 1-4, 10-16

Chapter 11:  1-7, 21-32

(a)  Do problem 9 from the problem
set that starts on page 433 of Sebesta

(b)  Give a brief answer to problem
12 on page 488 of Sebesta.

(c) Come up with an example of a small
class hierarchy representing real-world objects that makes appropriate use
of all three types of class members:  public, private, and protected.  For
each member, give one sentence justifying why you chose its type (public,
private, or protected).  For this part, feel free to work with your classmates.
 Any joint solution simply has to list all the people who worked on it.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw2.html
##-----------------TITLE------------------------##
Asst. 2 * Functional Programming
##------------------TEXT------------------------##
This assignment is due on Monday, January
31; deposit your assignment in the locking drop box in room CS 189.  Try
to finish the assignment by Friday morning so you can ask questions about
it in discussion.

Summary:  In the last lab, you became
comfortable (or at least conversant) with the Scheme interpreter, with Scheme
syntax, and with the recursive style of list processing.  In this assignment
you will work with list structures and explore some programming techniques
using higher-order functions.

(a)  Draw box-and-pointer diagrams
(as shown on page 579 of Sebesta) for the following expressions.  For the
empty list, use an empty cell (rather than a cell pointing to the symbol
NIL,
as Sebesta does).

   *  (Franz
() Klefstad)

   *  ((Pratt
Mehrotra Baldi))

   *  ((Pratt
Gennari) (Venkatasubramanian Mehrotra) (Mark Kobsa))

   *  (Ackerman
(King (Grudin (Kling))))

   *  (define
fact (lambda (x) (if (<= 0 x) 1 (* x (fact (- x 1))))))

(b)  Write the Scheme expression that
corresponds to each of the two box-and-pointer diagrams below. 








(c)  Sebesta defines the function mapcar,
more commonly called map:

   * (map
action list),
which returns a list, each of whose elements is the result of applying action
(a function) to the corresponding element of list.

Another function that takes another function
as an argument is filter:

   * (filter
test? list),
which returns a list of those elements in list that satisfy
test? (which is a predicate--a function that returns true
or false, given an element of list.)

Write a definition of filter.
 Check the Notes on Scheme handout, which contains a function that does
the same task.

Now look at this third function:

   *  (accumulate
action initial-value
list),
which is defined as follows:

   

(define accumulate

   (lambda (action initial-value list)

      (cond

         ((null? list) initial-value)

         (else (action (first list) 

                       (accumulate action
initial-value (rest list)))))))

(c.1)  What is the result of evaluating
each of these expressions?  Try them by hand before typing them in to check
your answer; you won't have a Scheme interpreter on the exams.

   * (accumulate
+ 0 '(1 2 3 4 5))

   * (accumulate
(lambda (a b) (+ b (if (even? a) a 0))) 0 '(1 2 3 4 5))

   * (accumulate
cons '() '(Huey Dewey Louie))

   * (accumulate
max -1 '(1953 1956 1949 1991 1964))

(c.2)  Assume you have a function (interval
a b) that returns a list of all the
integers between a
and b,
inclusive (so that (interval 5 10)
would return (5 6 7 8 9 10)).
 (Re-)write the function factorial
using accumulate
(and interval),
without any explicit recursion.

(c.3)  Now, think back to the restaurant
database and assume we have a standard Lisp list (called RL)
of the restaurant objects as we described.  For each of the following expressions,
describe in one English sentence what value it returns.  Don't just
say, "It does an accumulate of plus and zero to a map of ... ;"
give a description of what the expression means, something you could
put in a software catalog so that a prospective buyer could find what he
or she wanted.

   * (accumulate
+ 0 (map (lambda (R) 1) RL))

   * (filter
(lambda (R)(equal? 'Ethiopian (rest-cuisine R))) RL)

   * (/
(accumulate + 0 (map (lambda (R) (rest-price R)) RL))

        (accumulate + 0 (map (lambda (R) 1) RL)))

   * (let
((PRL (filter (lambda (R) (equal? 'pizza (rest-dish R))) RL)))

       (/ (accumulate + 0

            (map (lambda (R) (rest-price R)) PRL))

         (accumulate + 0 (map (lambda (R) 1) PRL))))

(c.4)  Using map,
filter,
and accumulate,
write an expression to return each of the following values without using
explicit recursion:

   * a list of all the French and
Italian restaurants in RL

   * a list of all the names
of the French and Italian restaurants in RL

   * a list of all the restaurants
in RL whose best dish costs between $10.00 and $20.00 (inclusive).

   * the name of the lowest-priced
French restaurant in RL

   * (extra credit) a list of all
the restaurants in RL, where every French restaurant whose best dish's
price is less than the average (price of best dishes at French restaurants)
has its price changed to that average price.

You aren't required to code up and run
the solutions to this problem; you can do them with pencil and paper.  However,
coding them up is good practice, it can help you verify that your solutions
are right, and it might earn you a bit of extra credit.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw6.html
##-----------------TITLE------------------------##
Asst. 6 * Control Structures and Procedures
##------------------TEXT------------------------##
This assignment is due on Monday, February
28, by 7:00 p.m. in the box in CS 189.

Summary:  Here we explore issues surrounding
control structures and subroutines.

Readings and review questions:  You
should know the answers to the review questions listed below, but you do
not have to turn them in (except for the questions listed in part (a)
below).

Chapter 7: 1, 4 (the first part only), 5,
8-18, 20

Chapter 8:  1-10, 13-21

Chapter 9:  1-7, 13, 18

(a)  Give a very brief answer to review
questions 8, 13, and 17 on page 324 of Sebesta.

(b)  Do the following problems from
the problem set (not the review questions) that starts on page 324 of Sebesta:
 

10, for Pascal, C++, Java, and Scheme.  You
should be able to use what you know from previous assignments and the examples
in the book; you don't really need to know all those languages.  (For
Scheme, use recursion and let
instead of do
and set!.
 Don't worry that nothing gets done with the variable i.)
 Keep the "discuss" part to about one sentence, but give a good
reason for your conclusion.

12, for Pascal, C++, Java, and Scheme.  (For
Scheme, you can use cond
or case,
the syntax of which you can find in the on-line help.  Again, don't
worry about j
going out of scope and being lost.  For extra credit (both here and in problem
10), you can redesign the Scheme code to return the correct value
of i
or j.)

13.

17 (C and C++ should be interchangeable in
this case).

19; two or three clear, concise sentences
should be enough here.

(extra credit) 14 and 15, commenting particularly
on how you think Knuth's arguments hold up 25 years later.

(c)  Do problems 9 and 10 from the
problem set (not the review questions) that starts on page 375 of Sebesta.
 Problem 15 is extra credit.

(d)  Do problems 3 and 5 from the problem
set (not the review questions) that starts on page 409 of Sebesta.  For
extra credit, do problems 4 and 6.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw5.html
##-----------------TITLE------------------------##
Asst. 5 * Logic Programming
##------------------TEXT------------------------##
This assignment is due on Monday, February
28, by 7:00 p.m. in the locking box in CS 189.  The next assignment will
be due on that date, too; we're just giving you some scheduling flexibility
by extending the date of this one.  Because this assignment involves an
unfamiliar language and system, you should expect some difficulty and start
early.

Summary:  In this assignment you will
get some experience with logic programming and Prolog.

Readings and review questions:  You
should know the answers to the review questions listed below, but you do
not have to turn them in (except for questions 12 and 18; see part (a)
below).

Chapter 15: 1-13, 15, 17-19

Prolog implementations:  You can find
Prolog implementations as follows:

For home use, you can download the free SWI-Prolog
implementation from http://www.swi.psy.uva.nl/projects/SWI-Prolog/
.

On the ICS Unix machines, the Prolog software
is cprolog.
 To use it, you need the line "module
load cprolog" in your .cshrc
file.

On the Macintosh, use Open Prolog, available
from http://www.cs.tcd.ie/open-prolog/.


(a)  In the review questions (not the
problem set) on page 638 of the Sebesta text, do problems 12 and 18, answering
each in one short sentence.

(b) Start up your Prolog system and,
consulting its documentation as necessary, learn how to enter rules and
goals.

Visit Dick Botting's Prolog tutorial site
at Cal State San Bernardino, http://www.csci.csusb.edu/cs320/lab/08.html
.  It contains a series of short and interesting Prolog examples.  Download
and try two or three of them; then write a short paragraph describing the
one that most impressed or surprised you.  

This site isn't local, so don't panic
if not everything works as expected.  But if nothing works as expected,
consult with your classmates or the TAs in the lab for help.

(c)  Write a Prolog description of
your family tree, going back at least to your grandparents (if possible).
 You may use some famous public family (such as the British royal family)
if you prefer not to use your own.  Here are more details:

(c.1)  First, describe all the relationships
in terms of these three predicates:  parent(Parent,Child),
male(Person),
and female(Person).

(c.2)  Then, define rules for these
predicates:

father(Parent,Child),
mother(Parent,Child),
child(Child,Parent),
son(Child,Parent),
daughter(Child,Parent)

grandparent(GP,GC),
grandmother(GM,GC),
grandfather(GF,GC),
grandchild(GC,GP),
grandson(GS,GP),
granddaughter(GD,GP)

spouse(Husband,Wife),
husband(Person,Wife),
wife(Person,Husband).

sibling(Person1,Person2),
brother(Person,Sibling),
sister(Person,Sibling).

Similar rules for aunt, uncle, nephew, niece,
and first cousin.

(extra credit) Add rules for nth cousins,
for cousins n times removed, and for greatn-grandparents.
 You may need to find definitions of these terms on the web.

(c.3)  Enter, run, and test your code.
 Turn in your code and transcripts of your tests.

(d)  In the problem set (not the review
questions) starting on page 638 of Sebesta, do one problem chosen from problems
5, 6, and 7.  Feel free to work with your classmates on this problem.

(e)  (extra credit)  Try to identify
in the Sebesta text some indication of his bias against Prolog or logic
programming.  Don't simply cite his descriptions of Prolog's disadvantages;
that's not bias.  Look instead for subtler wording or organizational
points.  Hint:  Compare section titles.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw4.html
##-----------------TITLE------------------------##
Asst. 4 * Data Types and Expressions
##------------------TEXT------------------------##
This shorter-than-usual assignment is due
on Monday, February 14, by 7:00 p.m. in the locking box in CS 189.  Turn
in everything you have completed at that time.

Summary:  In this assignment you will
explore data types and expressions.

Readings and review questions:  This
assignment covers most of Sebesta, chapters 5 and 6.  You should know the
answers to the review questions listed below, but you do not have to turn
them in.  This list should help you identify some of the more important
concepts in the text.  (On the other hand, don't infer that the topics
we skip or omit are entirely unimportant.)

Chapter 5:  1-8, 13, 14, 17-19, 22, 24, 26-32

Chapter 6:  1-5, 7-12, 14-16

(a)  In the Sebesta text, do problems
1 and 2 in the problem set starting on page 255.  For Problem 2, he's
referring to storing each decimal digit separately in memory, rather than
representing the entire decimal value in binary.

It's a good idea to think about the comparisons
that other problems in this chapter address, even though we're not assigning
them.

(b) In the problem set starting on
page 284 of Sebesta:

Pick two of these three problems:  4, 7, and
8.

Do four of the sub-parts of problem 10.  (This
problem starts with the word "Assume"--the actual number 10 is
missing from the page, at least in early printings.)

For problem 11, do two of the parts you did
in problem 10.

Do problems 14 and 15.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/141/hw/hw1.html
##-----------------TITLE------------------------##
Asst. 1 * Scheme Introduction
##------------------TEXT------------------------##
About the assignments in ICS 141: 
This course teaches not only new concepts but also new ways of thinking.
 Learning to think in new ways usually requires practice-- actually doing
the new things a few times (or more).  The homeworks are your opportunity
to get that practice.  Don't just say to yourself, "Let me just
get the answer down and turn it in; I'll learn how to do it later."
 Keep working (by yourself, with the instructor or TAs, or with your classmates)
until you can produce the answers on your own, without help.

It's no secret that some of the problems
we assign this quarter are the same as we assigned last quarter.  It is
entirely possible for you to find the answers from someone who took the
course before and just copy them down and turn them in.  But besides being
academically dishonest, it also won't prepare you to do similar problems
on the exams, so your course grade will suffer.  Give the assignments the
time and attention they require, and enjoy stretching your "mental
muscles."

Due date:  This assignment is due on
Monday, January 24, by 3:00 PM.  Deposit your assignment in the locking
drop box in room CS 189.  The due date is closer than it seems; be sure
to get started this week so you can ask questions in discussion on Friday.

Summary:  For this assignment you will
become acquainted with running the Scheme interpreter and the basic patterns
of recursive list processing code in Scheme.  A few of the problems will
seem familiar to those who took ICS 22 here from me; I apologize for the
repetition but your work back then will pay off now.

Part I (Readings and review questions):
 Each chapter of Sebesta ends with two sets of exercises, one called "review
questions" and one called "problem set."  Each set is numbered
starting from 1, so be careful to verify which set we're asking for
on each assignment.

You should know the answers to the review
questions listed below, but you do not have to turn them in.  This list
should help you identify some of the more important concepts in the text.
 (On the other hand, don't infer that topics we skip or omit are entirely
unimportant.)

Chapter 1:  1-11, 13, 15-17, 19-25, 27-32.
 Come back to these questions at the end of the course, as you review for
the final.

Chapter 2:  8, 14-17, 21, 26-30, 35-38, 42,
43, 46.

Chapter 14:  1, 4, 6-9, 14.

Part II:  In Chapter 2 of Sebesta,
answer in one or two brief sentences each of the following questions in
the problem set on page 104:  6, 7, 8, 9, and 14.  (Note that these are
questions from the "problem set," not from the "review questions.")

Feel free to try some of the exercises we
don't assign, but if you get stuck, ask us before spending too much
time on any problem; not all of them address issues that will be important
to us.

Part III:  We cover Scheme in ICS 141
for two main reasons:  To illustrate concepts of functional programming,
including higher-order functions, and to give you experience learning a
new language that's significantly different from what you already know.
 Learning to think in a new way isn't easy; some frustration is inevitable
as you stretch your mind in new directions.  But middle school and high
school students learn this material (see www.schemers.com
and www.cs.rice.edu/CS/PLT/Teaching/),
so you can, too.

Scheme language details:  Writing textbooks
is hard work, so maybe we can forgive Sebesta missing a few details about
the current status of the Scheme language standard:

-- The two boolean constants are #t
and #f.
 NIL
is no longer used, and while the empty list counts as false, it's bad
programming practice to use it that way.

-- Many Scheme implementations allow first
and rest
in place of the historically interesting but hopelessly non-mnemonic car
and cdr.
 If yours doesn't, you can just say (define
first car) and (define
rest cdr).

-- Some Scheme implementations allow curly braces or square brackets instead
of parentheses, as a visual aid to matching pairs up.  That's not standard;
you should just use parentheses and let your environment do the matching
for you.

-- There are two equivalent styles for defining functions, which I'll
call the prototype form and the lambda form.  Sebesta uses the prototype
form, which is shorter and which illustrates what a call might look like:
(define (cube x) (* x x x)).
 I prefer the lambda form, which doesn't hide the underlying lambda
expression and which is consistent in form with other uses of define:
 (define cube (lambda (x)
(* x x x))).

Scheme implementations:  The NT machines
in the labs have an implementation of Scheme called EdScheme.

For use at home, you can download a limited-time
version of EdScheme for free from www.schemers.com;
you can also purchase a copy for about 50% off (see us for details).  We
also recommend DrScheme, another implementation from Rice University that's
available entirely for free on most every platform (www.cs.rice.edu/CS/PLT/packages/drscheme/).

Problems:  For most of these problems,
we'll ask you to print out the transcript window showing your interaction
with the Scheme interpreter.  You'll probably want to produce a separate
transcript for turning in, rather than printing out pages and pages showing
all your experimentation.  But don't worry if your transcript contains
a few typos.

(a)  Get used to the Scheme environment.
 Try some expressions like (* 123 456)
and (expt 2 100)
and (/ 3.14159265 2).

Type in some definitions of symbols in the
global environment, like (define pi 3.14159265),
and then try (/ pi 2).

Type in a function definition like this one:

(define fact                            
     ; Compute n! (n factorial).

   (lambda (n)                                ; 0! is 1 by definition

      (cond                                   ; The extra
horizontal space

         ((<= n 0)  1 )                       ; isn't
needed; it just lines

         (else      (* n (fact (- n 1)))))))  ; up the
cond clause parts.

Notice how the environment indents and highlights
blocks of code so you don't get the parentheses confused.

Make sure you know how to save your code in
a file and load that file into Scheme for evaluation.  EdScheme doesn't
automatically re-evaluate changes you make in your code, any more than Visual
C++ does (you have to recompile there, too).

Try some compound expressions, like (gcd
(fact 100) (expt 2 1000)) and
(fact (fact 5))
and (first (rest '(Huey Dewey Louie))).
 

What is the value produced by (/
(fact 5) (expt 7 2))?  This result
is called "exact representation"--it looks unusual to us, but
it's useful in further calculations because nothing is lost by rounding
off to a decimal representation.  On the other hand, evaluate (output-fixed-point
(/ (fact 5) (expt 7 2)) 15 10).  (The
15 is the total size in characters of the result; the 10 is the number of
digits to the right of the decimal point.)  The code for output-fixed-point
is available on Masterhit, the NT lab server.

What happens when you evaluate
(fact (fact 500))?

Play around more with EdScheme, trying other
expressions.  Experiment with the list operators--cons,
first,
rest,
list,
append,
null?--until you're comfortable
with how they work.  You can look at the online help (available under the
Help menu or question-mark button) for some more information.  To understand
what a function does, be sure you understand what kinds of data it expects
as its arguments (atoms? lists? numbers?) and what kind of data it returns.
 The function cons,
for example, takes any expression as its first argument and a list as its
second argument, and it returns a list.

You don't have to turn anything in for
this part (III (a)) of the lab.  But of course if you short-change
the time you spend building familiarity, you'll have much more trouble
later on.

(b)  This function, called Ackerman's
function, grows really fast:

(define A

  (lambda (x y)

    (cond ((= x 0) (+ 1 y))

          ((= y 0) (A (- x 1) 1))

          (else (A (- x 1)

                   (A x (- y 1)))))))

(b.1)  Type it in and
try it out (with very small arguments).  Then print out the Transcript window
showing what you did.  (But you don't have to print out results that
show pages and pages of solid digits.)

(b.2)  Rewrite Ackerman's function
on paper using standard mathematical notation.

(c)  What's the longest number
you can generate in the Scheme you're using, without running out of
memory and taking no more than 60 seconds of processor time?  Generating
the big numbers is one part of the question; counting the digits is another.

(c.1)  Try using (string-length
(number->string your-big-number)).

(c.2)  Try to approximate it using
the log base 10.

(c.3)  Try to do it using some tool(s)
other than Scheme (or any programming language).

(c.4)  Using your wristwatch (or slow,
measured counting), time how long it takes for Scheme to calculate and display
your big number.  Now, time how long it takes to calculate the big number
and then its length (by nesting the expression to generate the big
number inside the length-calculating expression from part (c.1) or
(c.2)).  You'd expect the second to take longer, but on some
Scheme systems it doesn't.  Does it on your system?  Why might the generate-and-calculate-length
task take less time?

(c.5)  Type up your answers to these
questions and print a transcript showing what you did.  Again, don't
print more than a page or two of solid digits.

(d)  Write each of the following functions
in Scheme.  For each, pay attention to the type of value that's returned:
 Is it a list, a single item, a number, a boolean?  If you're new to
recursive thinking, it will take you a while to start seeing the patterns;
that's why there are so many exercises (and even this many may not be
enough).

Go back and read what the course reference
sheet says about collaboration.  It's good to work with your classmates,
but remember that the goal is that you be able to write routines like this
independently.

(member? A B)
returns #t
(true) if A
occurs in the list B,
and #f
(false) if it doesn't.  (Sebesta solves this in the text, but try it yourself
first.)

(member? 'a '())
returns #f;

(member? 'a '(b a t t y))
returns #t;

(member? '(b (c)) '(a b (b (c)) d
(b (c)))) returns #t;

(member? '(b (c)) '(a b (c)))
returns #f.

(find-all-evens A)
takes a list of numbers and returns a list containing all the numbers from
the original list that are even.  The predefined predicate even?
is useful here.

(find-all-evens '())
returns ();

(find-all-evens '(3 9 7))
returns ();

(find-all-evens '(1 2 3 4 5))
returns (2 4);

(find-all-evens '(3 2 7 2 6))
returns (2 2 6).

(all-even? A)
takes a list of numbers and returns #t
if they're all even, and #f
otherwise.

(all-even? '())
returns #t;

(all-even? '(3 5 7 2 6))
returns #f;

(all-even? '(2 8 0 4 88))
returns #t.

(count-all-matches A B)
returns the number of times A
occurs in the list B.

(count-all-matches 'a '())
returns 0;

(count-all-matches 'a '(a b a c a
d)) returns 3;

(count-all-matches 'a '(a b (a) c
(a d))) returns 1;

(count-all-matches '(a (b)) '(a b
(a (b)) a (b) (a (b)) ((a (b)))))
returns 2.

(subst A B C)
returns C
with all occurrences of A
changed to B.

(subst 'x 'y '())
returns ();

(subst 'a 'b '(a c e))
returns (b c e);

(subst 'a 'b '(b c d))
returns (b c d);

(subst 'a '(a b) '(a b r a))
returns ((a b) b r (a b));

(subst '(a b c) 'abc '(w x (a b c)
y (a b c) z)) returns (w
x abc y abc z).

(first-atom A)
returns the first atom in the list A,
no matter how deeply nested.  Use the predefined predicates pair?
and null?
to test whether something is an atom or not.

(first-atom '())
returns ();

(first-atom '(a b c))
returns a;

(first-atom '(((a b) c)))
returns a;

(first-atom '( () a b c))
returns (),
which is easy because (atom? '())
is #t.

(atomize A)
returns a list of all the atoms in A,
no matter how deeply nested.  (Hint:  Use the predefined function (append
L1 L2) to join the atoms in (first
A) with the atoms in (rest
A).)

(atomize '())
returns ();

(atomize '(a b c))
returns (a b c);

(atomize '((a b) c))
returns (a b c);

(atomize '(((a) () (b c)) (d e)))
returns (a () b c d e).

Again, print out a transcript showing your
definitions and some tests indicating that they're right.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw3a.html
##-----------------TITLE------------------------##
ICS 10A * Assignment 3A
##------------------TEXT------------------------##
  

This assignment is due by the beginning of
your discussion section on Wednesday, October 22.

Summary:  You will use Microsoft Excel
to build two spreadsheets:  one to compile simple baseball statistics (but
you don't have to know anything about baseball) and another to produce
invoices for a picture framing service.  The key to this assignment is reading
the specifications very closely and carefully to extract every bit of necessary
information.

Introduction to spreadsheets:  You
will be using the spreadsheet program Excel, part of the Microsoft Office
suite of programs.

A spreadsheet program is a visual calculator,
laid out in rows and columns like the paper spreadsheets that accountants
once used, before they had computers.  The first spreadsheet program, in
1979, was called VisiCalc.  It ran on the Apple II, and more than any other
program it was responsible for the wide use of personal computers today.
 Before VisiCalc, people used personal computers mainly for word processing
and for games; VisiCalc opened up a such a wide range of new uses for computers
(in forecasting, finance, planning, record-keeping, and so on) that sales
of personal computers soared.

A spreadsheet is a big page filled with boxes.
 The columns are labeled with letters (A, B, C, and so on) and the rows
with numbers (1, 2, 3, ...).  The box in the upper left hand corner is called
A1, since it is on the intersection of column A and row 1.

Each box on the spreadsheet can contain a
number, like 98.7, or a label, like Tax
Return.  This is called the value
of the box.  Each box can also contain a formula, such as =A1+B1
(all formulas in Excel start with an equals sign).

Normally you see the box's value when
you examine the spreadsheet on the computer, whether or not there's
a formula there too.  But if a box does contain a formula, the value of
that box is calculated  from the formula.  For instance, if box C3
contains the formula =A1*B1, then the spreadsheet looks up the values in
boxes A1 and B1, multiplies them together, and displays the result as the
value of C3.  If you later change the value of A1 or B1, the spreadsheet
automatically figures out (and displays) the new value for C3.

This automatic updating feature is the key
to spreadsheets' utility.  For instance, you can set up all the formulas
for paying taxes and then play around with various numbers, letting the
spreadsheet calculate how much tax is due under each scenario.  In a similar
way, you can set up a spreadsheet to do financial forecasting, keep bowling
averages, or model the population of goldfish and dragonflies in your ornamental
pond.  In the case of our picture framing service, you can set up an invoice,
then change the matting material's cost and see immediately its effect
on the total amount due.

In fact, spreadsheets are to numbers what
word processing programs are to text:  Once the spreadsheet is set up, its
user can make whatever changes he or she needs without having to respecify
the formulas or calculations, or retype any of the other, unchanged data.

First spreadsheet (baseball statistics):
 You are the new manager of the California Angels baseball team, and
you want to keep a spreadsheet to record a player's batting statistics.
 Completing this assignment shouldn't require any knowledge about baseball
beyond what appears in this document, but feel free to ask your TA or send
mail to ics10a@uci.edu
for clarification of any details.

Part 1:  First, set up a spreadsheet
that looks like this (with your own name in the appropriate place, of course):




Cell A1 is a label, containing the player's
name; Cell A8 is a label containing your name as the manager.  Cells A2
through A7 are also labels; they correspond with the values you will enter
in B2 through B6.  B2 is the number of times the player came up to bat (i.e.,
took a turn to hit the ball) so far this season.  B3 through B6 show how
many singles, doubles, triples, and home runs the player made (i.e., how
far around the bases the player got each time he hit the ball safely). 
C1, D1, and D3 are also labels.

B7 and E3 should contain formulas.  B7 is
the total of B3 through B6, and E3 is the player's average for the year
(the total number of hits divided by the number of at-bats).

Now, create a page header to give this spreadsheet
the title "Baseball Statistics -- Part 1."  (Check the on-line
help to find out how to do this.)  Save this spreadsheet (showing the player's
total hits and batting average) in a file called part1.xls
and submit it via Checkmate.

Part 2:  Now, you'll modify your spreadsheet
to keep track of the player's "slugging percentage."  That's like
the batting average, except that a double counts for two hits, a triple
for three hits, and a home run for four hits.  Change your spreadsheet to
include the "Total Bases" (that's the weighted total of the
hits) and the slugging percentage:




D5 and D6 are labels.  E5 should contain a
formula that figures out the number of total bases, as described above.
 E6 should calculate the slugging percentage, which is the number of total
bases (from E5) divided by the at-bats (B2).  

Now change the page header of your spreadsheet
to read "Baseball Statistics -- Part 2", save a copy of this spreadsheet
with the name part2.xls,
and submit it via Checkmate.

Part 3:  If the player has a hitting
streak and hits a lot of triples, the slugging percentage will go up.  Increase
the number of triples until the slugging percentage is over 2.00.  How many
triples do you have to hit to get to a slugging percentage of 2.00?  Save
the spreadsheet that shows this number as a file with the name part3.xls
and submit it via Checkmate.

Part 4 (optional):  After you produce
your spreadsheets to turn in, you might try to experiment with these items:

* To make your spreadsheet more readable,
vary the widths of the columns, move the cells around, change the type styles
or other formatting (always remembering that the soul of good design is
restraint--just because a dozen different type styles are available doesn't
mean that the document is improved by using all of them together), or add
graphics.

* Try to rearrange all the player's information
onto one horizontal line; then add further lines for other players, and
add statistical totals for each column.

* Modify the page header to include your name,
the date, and a page number.

Save the spreadsheet reflecting all these
optional modifications with the name part4.xls
and submit it via Checkmate.  You'll get a little extra credit for this,
though it won't substitute for skipping required parts of the assignment.


Second spreadsheet (picture framing):
 The Framous Amos picture framing service has asked you to design a spreadsheet
to computerize its charging and billing.  Picture framing charges depend
on a number of factors:


* The size of the art itself

* The size of the frame (which may be somewhat
larger than the art, to allow for some empty space to set off the art itself)


* The cost of the framing material (plain
wood is more expensive than plexiglass, for example, and lacquered wood
is more expensive than plain)

* The cost of the matting material, if any
(matting, if it's used, surrounds the art inside the frame, taking up
the blank space between the art itself and the frame)

* The cost of the face material, if any (glass,
plexiglass, or UV-screening plexiglass)

* Any discount given to the customer

* Sales tax (which we will assume to be fixed
at 8.5% for this exercise)



Your spreadsheet will have cells for the user
to specify each of the following items  (we have also included some example
values the user might enter):

Client's name   Space
Gallery

Client's street address   6016
Santa Monica Blvd.

Client's city, state, and Zip code  
Los Angeles, CA  90038

Title of the artwork   Akira
Kurosaki, Thumbs (1976)

Height of the artwork in inches   7.25

Width of the artwork in inches   9.5

Height of the frame in inches   11.75

Width of the frame in inches   14

Type of framing material   black
lacquer frame

Cost per linear inch of framing   2.40

Type of facing material   plexiglass
face

Cost per square inch of facing   0.75

Type of matting material   black
silk mat

Cost per square inch of mat   0.12

Percentage discount (zero if none)  
15

Reason for discount   gallery
discount

The cost of the framing material is given
per linear inch (an 8-by-10 inch frame is 36 linear inches), the facing
cost is given per square inch, and the matting cost is given per square
inch (note that the matting area is the difference between the artwork area
and the framed area).

(There really is a print by Akira Kurosaki
called Thumbs.  It's in David Kay's office; feel free to
stop by for a look.)

You will use Excel to build a spreadsheet
that models the Framous Amos invoice.  It should look essentially like the
example shown below: 




Note particularly how this spreadsheet is
organized:  The user enters the data in the area above the thick horizontal
line (we've used the data shown in the example above) and the invoice
itself appears below the line.  The spreadsheet user only needs to type
above the line, entering just the bold-faced information.  The spreadsheet
automatically calculates everything below the line from the values entered
above.  Besides helping to make the data entry task clearer, this organization
helps avoid errors; the user is less likely to type over a cell containing
a formula if his or her typing is in a distant part of the spreadsheet.
 (In fact, Excel has a feature that allows the spreadsheet designer to protect
and lock selected cells, so the user can't type anything there
by mistake.)

Part 1:   Create this spreadsheet as
described above.  Put your own name into a page header.  Save two copies
of the spreadsheet, with different data, and submit them via Checkmate.


Part 2:  Look closely at the subtotal
figure in the example spreadsheet.  It isn't the correct sum of the
three lines above it!  Why not?  Write a two-sentence explanation of what
caused the problem, including an example of some other set of three
numbers that would cause the same kind of error.  Save your explanation
and example in a file (either Word or plain text) and submit it via Checkmate.

(This is not simply some mistake on the part
of the spreadsheet designer, nor is it a bug in the Excel software.  To
investigate this further, select all the cells in the totals column and
reformat the numbers (choose Cells from the Format menu, click the Number
tab, and select the "General" format from the top of the list
of choices).  Do the numbers you now see add up?  This kind of problem is
common in computing; it's called "roundoff error," and it
comes from a discrepancy between the data and the way you choose to represent
it when it's displayed.)

Feel free, within the time available, to make
the screen display as clear as possible for the user, taking advantage of
changing the column widths, row heights, typefaces, graphics, and so on.

Want to see more?  For a full-blown,
professional web-based framing service, check out the Metropolitan Picture
Framing site, http://www.metroframe.com.


Your score will depend on completeness (do
your spreadsheets do everything the specification requires; do you answer
all the questions; and so on), correctness (do they produce the correct
results), and quality and clarity of the spreadsheets' format.


Written by David G. Kay (1985)

Modified for use in ICS 21 by David G. Kay, Fall 1990

Minor revisions by Norman Jacobson, Winter 1991

Revised by Norman Jacobson, Fall 1991

Minor revisions by David G. Kay, Winter 1992

Modified for use in ICS 1A by David G. Kay, Summer 1992, Fall
1993, Fall 1994, Fall 1995.

Revised for ICS 10A and Microsoft Excel by David G. Kay, Fall
1999; revised again Fall 2000, Fall 2001, and Fall 2003.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw6.html
##-----------------TITLE------------------------##
ICS 10A Assignment 6 * Fall 2003
##------------------TEXT------------------------##
  

This assignment is due at the beginning of
your discussion section on Wednesday, November 12.  Unlike previous assignments,
this one requires some open-ended experimentation in the labs, so don't
expect to be able to complete it in one sitting.

Summary: In this assignment you will
gain familiarity different tools for creating, editing, and storing images
and with applying compression techniques and understanding their effects.


(a) The lab machines provide these
three tools for image manipulation:

   * The drawing layer in Microsoft
Word

   * Paint (in the Accessories menu)

   * Microsoft Photo Editor (in the Office Suite) or Iview image
editor (the labs will have one or the other)

Spend some time familiarizing yourself with
each of these tools, getting answers to the questions below.  Remember that
the main point is finding the answer, not the answer itself.  You
won't get much from the assignment if you let someone else do the work.

Most people who become experts at using a
particular application program get their expertise through experience, not
(primarily) by reading the documentation.  Moreover, that experience comes
not only from working on specific tasks but also from experimentation, or
"playing around"--trying different commands or actions to see
what results.  You should take this opportunity to do the same.

Which tool(s) do vector (line) graphics? 
Which edit bitmaps?

What graphics file formats (GIF, JPEG, BMP,
etc.) do these tools read?  (Check the "Open" dialog or the "Import"
command.)  Which do they write?  (Check "Save As" or "Export".)

Create one or two images of some complexity
using each tool (or read images, e.g., from the Web, if the tool doesn't
allow creation of new images).  Spend some time trying out the menus and
buttons to see what they do, and make a note of the most useful or interesting
features (which will probably be different in the different tools).

How big is each of these images when you save
it in the tool's default format?  How does the size change if you choose
other resolutions, other bit depths, and other file formats?  What's
the smallest size at which you can save your image without losing noticeable
quality?  What's the smallest size that may lose quality but still keeps
the image recognizable?  Are these results what you expect, given your knowledge
of image representation, or were there surprising results?

What happens when you copy an image from one
tool and paste it into another?  Are there things you can do to the image
in the second tool that you can't in the original tool, or vice versa?
 

Can the second tool save the image as a significantly
smaller file (and if so, is any noticeable quality lost)?
The main goal of this lab is to give you enough
experience with these tools to appreciate the ways you might use them. 
Don't short-change the time you spend exploring and experimenting. 
Your answers to the questions above don't have to be long, but they
should be complete enough to show you've spent some time.  Printed illustrations
will be helpful.  You'll submit this on paper, clearly marked "part
(a)."


(b)  Below is a cryptogram from the
Saturday Review.  Your job is to decode it back into the original
English message.  Feel free to work on this in groups of two or three. 
However, if you have past experience solving cryptograms, please work by
yourself; otherwise, the experienced person will overwhelm everyone else
in the group.

A cryptogram is a message or quotation written
in a substitution cipher--for each letter in the original message, a different
letter has been uniformly substituted in the cryptogram.

Here's a hint for working in groups: 
Everyone should work on the same copy of this sheet at once.  That way,
if you want to start over you can use a new, clean worksheet.

BSL  PLXB  NFIB  CR  BSL  RDEBDCV  DV  JFVA
VCYLUX  DX  BSL  VCBDEL BSFB  BSL  ESFIFEBLIX  FIL  NHILUA  DJFKDVFIA. 
     -- RIFVOUDV N. FTFJX

Now, ask yourself:  What property of natural
language do cryptograms illustrate?  Print your solution to the cryptogram
and the one-word answer to this question, both clearly marked "part
(b)."


(c)  In class we discussed delta encoding.
 Here you will perform delta encoding on two sequences and calculate their
compression ratios.  You will also plot the two sequences in a line graph
and write a paragraph or two describing your results.  In addition, you
will compress one of the sequences by varying the quantization (i.e., by
using fewer digits of precision), again plotting and commenting on the results.

(c.1)  First, download the file http://www.ics.uci.edu/~kay/courses/10a/hw/CompressionMaster.xls
.  Then open the file in Excel.

Follow the instructions in the file for identifying
the two columns of data you will work with.  (Everyone gets different data,
depending on their student ID; use the correct set or you won't get
credit.)

Create a new spreadsheet with your name and
other identifying information.  Copy into that spreadsheet your own two
columns of data from the CompressionMaster spreadsheet.  Mark those columns
"Original Data A" and "Original Data B."

(c.2)  Do these three steps for both
A and B:

-- In an adjacent column, produce a delta-encoded
version of the sequence (i.e., compute just the differences between each
item and its predecessor).  (Selecting the cells in the new column and using
"Fill Down" from the Edit menu will save you from having to type
repetitively similar formulas.)

-- Calculate the compression rate (the number
of ASCII symbols in the compressed data divided by the number of ASCII symbols
in the uncompressed data).  (Cutting and pasting to use "Word Count"
from the "Tools" menu of Microsoft Word is better than counting
by hand.)

-- Plot a chart of the sequence, using a line
graph with no markers.  Be sure to include an appropriate heading.

(c.3)  Now, do this additional task,
just for the A data:  Create a new column, dividing each value by 1000.
 (The original data was in millimeters; your new column is in meters.) 
This new column will have three digits to the right of the decimal point.
 To vary the quantization, create three more columns:  One with two
digits to the right, one with one digit to the right, and one with no digits
to the right of the decimal point.  The Round function helps here.

As before, calculate the compression rates
for each of the three reduced-precision columns.  Then produce a bar graph
showing the relative sizes of the four representations.

Next, plot the original data (in meters) against
each of the three reduced-precision versions (i.e., produce three plots).
 Be sure to label the graphs appropriately.

(c.4)  Finally, write a couple of paragraphs
describing your results.  What you write should provide answers and explanations
to the following questions, at least:  Did both sequences compress equally
well using delta encoding?  Could you have predicted the results from looking
at the graphs?  How much reduction of precision was possible before the
quality of the data degraded significantly (i.e., at what point could you
detect a difference between the original and compressed data)?

Print these answers, marking them clearly
"part (c)."


(d)  The class and the text describe
run-length encoding (RLE).  Find three images of flags on the Web:  one
that will compress very well using RLE, one that will compress very poorly
using RLE, and one in the middle.  Justify your choices in a few brief sentences
(i.e., say why the good one's good, and so on).  (Hint:  The study of
flags is called vexillology, so using that as a search term will point to
lots of flag images.)  Download the images from the Web and place them in
your report, adjusting them so they're uniformly sized and neatly aligned.
 (The graphics tools from the first part of this assignment should help.)
 Mark this all "part (d)."


(e)  Below are three images.  Image
A is the original; the other two are compressed using lossy techniques.
 One used a reduced quantization; the other used coarser sampling.  Which
is which (with a sentence explaining your answer)?  Print it and mark it
as usual.





(f)  Below are three more images. 
Which would compress best using delta encoding?  Which would compress worst?
 Again, justify your answer in a sentence or two, printed out and marked
"part (f)."





(g)  Select a pair of DNA strings from
the list below.  (Be sure to select the correct pair according to the instructions,
or you won't get credit.)  Compress the two strings using run-length
encoding and calculate the compression rates, showing your work fully. 
Then describe in a couple of sentences why the strings didn't compress
equally well (i.e., what is it about one string that made it more amenable
to compression than the other?).  Print and mark this part, too.

If the first digit of your student ID is 0,
compress the following two DNA strings:

1)  ACGGGGGGGGGGGGGGGGGCCCCCCCCCCGGGGGGGGGGGGGGGGGGGGG

2)  AAGGGGGGAAGAGTATGGAGTAAGGGATTGGGCACCCCGTCCCGGTCGCA

If the first digit of your student ID is 1,
compress the following two DNA strings:

1)  GGGGGGGAAAAAACCCCCCCCCGGGGGGGGGGGGGGGGGGGTAAAAAAAA

2)  TTAAGGGTTTATATGTTTTTAAACACCGGCATTTAACCAACCCGTTTTAA

If the first digit of your student ID is 2,
compress the following two DNA strings:

1)  AAAAATTTTTTTTTAAAAAATTTTGGTTTTTCCCCCCCCCTAATTTTTTT

2)  AAGATTGTACCGGAAAAAACCAGTTTTTGGCCCGTTCTTATATTTCGCTA

If the first digit of your student ID is 3,
compress the following two DNA strings:

1)  TTTTGGGGGGGGGGGGGGGGAAAAAAAAAAAGGGGGGGGGGGGGGGGGGG

2)  TAATTTGCGTCCAGAGCCGTGCAGGCAACGGGGAAACCTCGGTTTTCTTA

If the first digit of your student ID is 4,
compress the following two DNA strings:

1)  TTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAT

2)  GCCCCAATAAAAATTCTCCCCTCCAAGCGTTTAGCGGCCAAACCTCAAAA

If the first digit of your student ID is 5,
compress the following two DNA strings:

1)  AAGGGGGGGGGGGGGGCCCCCCCCCCCGGGGGGTTTAATTTTTTTTTTTA

2)  GAGGACAAGCGCCTTTTTGGAGGGAAGGGGCGCAAACCGGGTGGGCGTGC

If the first digit of your student ID is 6,
compress the following two DNA strings:

1)  CCCGGGGGGGGGGTTTTAAAAAACCCCCCCTTAAAAAAAAAATTTTTTTT

2)  CAGCCGCCCTGGCATACGGCCGGACAATTTGTTTTTAAGCCTCCCTTAAA

If the first digit of your student ID is 7,
compress the following two DNA strings:

1)  CCCCCCCGGGGGGGGGGGGGGGCCCCCTTTTTTTTTTTTTTTTGGGGGGG

2)  CCCTTTAGCGTTCCCTATTCCGCCCATAGAAATACAAACTTTCTAGATAC

If the first digit of your student ID is 8,
compress the following two DNA strings:

1)  CCCCCAAAAAAAAAAAAAAAAAAAAAAAAAATTTCCCGGGGGGGGGAAAA

2)  CATGGCGCTGGAACCCCCAAAAAAGGTTTCTTTTTCCAAAGTTCTCAAAG

If the first digit of your student ID is 9,
compress the following two DNA strings:

1)  AAAAAGACCCAAAAAAAAAAAAAAAAAGGGGGGGTTTTTTTTTTTTTGGG

2)  CTTCAAAAAAACGGGGGATGAAATTTTTTCTAGTCCCTTGCCGGGGAGTT


(h) (extra credit)  As we showed in
class, LZW compression finds previously occurring portions of a text and,
rather than spelling them out again fully, includes a (shorter) reference
to the portion's first occurrence.  Thus, "Mississippi" could
be compressed to "Miss[2,3]ippi" (without compressing single-letter
pieces).  Another way to represent this same kind of compression is with
a dictionary:

   #
iss  (This single-entry dictionary
says to substitute "iss"
for the shorter "#")

   M##ippi

Even the above short example saves one character
if we ignore white space.  If we do the same with "Hodgepodge,"
we save even more since the dictionary would contain the one entry "#
odge "  and the word itself contains
just the characters "H#p#";
this would be a compression rate of 0.9, since the dictionary plus the word
take up 9 characters (ignoring white space) while the original word took
up 10.

Here, then is the task:  Find an English word
with a better compression ratio (using this method) than 0.9.  You're
allowed to have multiple entries in the dictionary; that might help in some
cases.  We'll share the best ones in class.  (For a slightly easier
task, find a short English sentence that has a better compression
ratio than 0.9.)


Written by David G. Kay, Summer 1999; revised Fall 1999, Fall
2000, Fall 2001, and Fall 2003.

Compression exercises written by Eamonn Keough and David G.
Kay, Summer 1999; revised Fall 1999, Fall 2000, Fall 2001, and Fall 2003.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Wednesday, November 5, 2003 -- 8:26 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw7.html
##-----------------TITLE------------------------##
ICS 10A * Assignment 7
##------------------TEXT------------------------##
  

This assignment is due at the beginning of
your discussion section on Wednesday, November 19.

Summary: This assignment will give
you practice with some basic probability concepts.


Feel free to discuss these problems with others,
but be sure you know how to solve them (and similar problems) on your own.


(a)  Every day you download some investment
information from a web site whose server's load varies on different
days of the week.  On Monday through Thursday, the download takes you 15
minutes.  On Friday, it takes you 25 minutes.  On Saturday and Sunday, it
takes you 10 minutes.  What is your overall expected download time (i.e.,
imagine you don't know what day it is)?

(b)  A standard slot machine has three
wheels, each with 20 symbols distributed as shown below.  When the arm is
pulled, each of the 20 symbols on each wheel is equally likely to come up.

Symbol
Wheel 1
Wheel 2
Wheel 3
bar
1
3
1
bell
1
3
3
plum
5
1
5
orange
3
6
7
cherry
7
7
0
lemon
3
0
4

(b.1)   What is P(a bar comes
up on Wheel 1)?

(b.2)   What is P(a bar comes
up on Wheel 2)?

(b.3)   What combination of symbols
on the three wheels should yield the highest payoff (assuming payoffs decrease
with higher probabilities)?  There are two equivalent answers to this.

(b.4)   What is P(a lemon comes
up on all three wheels)?

(b.5)   What is P(not getting
a plum on Wheel 1)?  (Complementary probabilities may help here.)

(c)  In the California Lottery game
SuperLotto, a player would pay $1.00 to pick six numbers (between 1 and
51) for the next draw.  (We're describing the original SuperLotto game,
not the current SuperLotto Plus with a separate "Mega" number;
the probabilities for SuperLotto Plus are a little more complicated.)  Every
Wednesday and Saturday, the Lottery draws six numbers.  If the player's
six numbers match the Lottery's six numbers, the player wins the multi-million-dollar
jackpot (or splits it with any other players who also picked the same six
winning numbers).  If nobody matches the six winning numbers, the jackpot
"rolls over" to the next draw; that is, the jackpot amount for
the draw with no winners is added to the jackpot for the next draw.  If
many draws go by with no winners, the jackpot can get very large; it has
been over $100,000,000.

Which of the following statements are supported
by the principles of probability?  Give a yes or no answer to each, with
a few words of explanation.

(c.1)  If you pay $2.00 for two different
sets of numbers, you are twice as likely to win as if you paid $1.00.

(c.2)  If you pay $100.00 for 100 different
sets of numbers, you are 100 times as likely to win as if you paid $1.00.

(c.3)  If you buy one ticket for every
drawing for ten years, your chances of winning are roughly a thousand times
greater than if you buy just one ticket.

(c.4)  If you decide to play the same
six numbers in every draw from now on, you should check the winning numbers
in the past to be sure your numbers haven't come up already.

(c.5)  If you play for a few months
and not a single number you choose is included in the winning numbers, you
are a little more likely to win the next draw (because you're "due")

(c.6)  If you play for a few months
and two or three of your numbers are included in the winning numbers of
each draw, you are a little more likely to win the next draw (because you're
"on a roll").

(c.7)  Since 50% of the ticket revenues
goes to prizes, in general the expected value of a $1.00 ticket is 50 cents.

(c.8)  The expected value of your $1.00
ticket will will be higher if you only play when the jackpot is over $10,000,000.

(c.9) Your probability of winning is
greater if you pick numbers between 1 and 31 (because many people pick birthdates
as their numbers).

(c.10) Your expected value is greater
if you pick numbers greater than 31.

(c.11)  (extra credit--we won't
ask you to do something like this on an exam) Calculate the probability
of winning the SuperLotto jackpot.  

(c.12)  (extra credit)  Calculate the
expected value of playing a $1.00 SuperLotto ticket.  The hard part about
this isn't the calculation; it's finding the payout amounts over
the last year.  They're not available at the California Lottery web
site (www.calottery.com),
and we don't know if they're available anywhere, so this is an opportunity
for you to do some creative web searching.

(d)  [from Patterns of Problem Solving
by Moshe F. Rubinstein] In one brief sentence, how is information related
to probability?

If you know that 5 people out of every 1000
have cancer, and if we have a perfectly accurate test that predicts whether
a person has cancer, which of the following gives us more information:

* The test indicates that a person has cancer.

* The test indicates that a person does not
have cancer.


What to turn in:  A word processing
document that includes the answers to all the questions in each part above.
 Grading depends on completeness, thoroughness, correctness, and clarity.


Written by David G. Kay, Summer 1999; revised Fall 1999, Fall
2000, Fall 2001, and Fall 2003.

Problem (b) was adapted from Harold Jacobs' text, Mathematics: A
Human Endeavor.

Problem (d) comes from Moshe Rubinstein's text, Patterns of Problem
Solving.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Tuesday, November 18, 2003 -- 4:41 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw1.html
##-----------------TITLE------------------------##
ICS 10A * Assignment 1
##------------------TEXT------------------------##
This assignment is due by the beginning of
your discussion section on Wednesday, October 8.  One key to success in
computer science is a meticulous attention to detail; be sure to read this
assignment with great care so you don't miss anything it requires. Another
key to success is to realize that problems and frustrations often come up
when dealing with computers; this assignment has many parts and will take
you longer than you think, so don't expect to be able to do it all at
once.

 Summary:  There are a few computing
skills every student needs.  Many of you may have these skills already;
those who don't should have little trouble acquiring them.  This assignment
gives you a chance to exercise these basic skills.

Necessary skills:  Listed below are
the skills you should have by the end of the week.  If you don't have
them yet, feel free to ask your TA or classmates for help.

With electronic mail, you should be able to
(a) log onto your EA account with your UCInet ID, (b) read your Email using
Webmail or some other software, (c) send Email.  Note that you should check
your Email daily, using your UCInet ID on EA, since that's a source of official
course announcements.  (If you prefer to read your Email on another system,
you may change the delivery of your UCInet ID mail via http://phwww.cwis.uci.edu/cgi-bin/phupdate.)

On the Web, you should be able to (a) view
web pages using Netscape Communicator (Navigator) and Microsoft Internet
Explorer, (b) follow hyperlinks (both text and image), (c) enter a URL to
link to it directly (e.g., http://www.ics.uci.edu/~kay),
(d) use a web directory like www.yahoo.com),
(e) use a search engine like www.google.com
or www.altavista.com,
and log in to Checkmate (checkmate.ics.uci.edu,
the assignment submission system), register yourself for ICS 10A, and submit
this assignment when done.

On the Windows machines in the lab, you should
be able to (a) log in using your ICS ID, (b) log out when you're done
(remembering to wait for the "logged out" screen to be sure you're
really logged out), (c) open applications like Navigator or Word,
(d) locate files (on Masterhit (the file server on the ICS instructional
network); on the local hard disk; on your own floppy), (e) copy files from
one place to another, (f) move files to the recycling bin and empty it,
and (g) cut and paste text from one source (such as a web page in Navigator)
to another (such as a Word document).

In Microsoft Word, you should be able to create
a document, entering and editing text, using basic formatting tools (like
setting margins and paragraph indentation and changing font, size, and style).

Electronic mail tasks:  Do these tasks
with electronic mail:

Send your TA a message containing a joke,
a story, or a suggestion about the course.

Read a message sent to the ICS 10A class mailing
list.  Take the text of that message, add your name to the top, and modify
the rest of the message in some humorous way.  Send the modified message
to your TA.

Web-based tasks (part one): 

From the on-line version of the course syllabus,
find the mailing list archive for the class and review the messages posted
there.

Connect to eee.uci.edu,
log in, and find the ICS 10A class Note Board.  Read the introduction and
any messages posted there.

If you haven't used the Web much before,
spend at least half an hour browsing and searching.  Look for your own home
address, your favorite author, the current market value of your (or a friend's)
car, a local restaurant serving your favorite kind of food.

Word-based tasks (part one):

Create a new document in Microsoft Word. 
Type your name, student ID, and TA's name at the top.  Give it the title,
"ICS 10A Fall 2003 Assignment 1."  Then type your responses to
each of the items in the following section.

Web-based tasks (part two):

Go to the URL http://members.tripod.com/~andybauch/trick.html
(an alternative site is http://www.mts.net/~oldguy/fun/crds1.html)
and follow the instructions.  Include in your document one or two sentences
describing how you think the trick works.  (Don't tell your classmates;
let them figure it out on their own.  It does not require any technical
expertise.)

Using a web directory or search service, find
the current population of Mexico.  Compare the result you get with some
of your classmates.  Include in your document the population you found,
the URL where you found it, and one sentence explaining why your figure
is likely to be more or less reliable than your classmates' figures.

Log on to Checkmate (checkmate.ics.uci.edu)
 and submit this Word document.  To get credit for this (and future) assignments,
Checkmate must work smoothly for you, so send Email to ics10a@uci.edu
if you find anything unclear or troublesome about using Checkmate.

Windows-based tasks:

Print the document you created above and turn
it in to your TA.  We may not have you print out every assignment, but you
should know how to do it.  Remember to make a copy for yourself on a diskette.

Find the file asst1.txt
in the ICS 10A folder on the instructional lab file server, called Masterhit.
 Copy the file to your local hard disk.

Word-based tasks (part two):

Open your copy of asst1.txt
in Word and reformat it so that it looks as close to this document as you
can make it.  (Perfect duplication won't be possible; in particular,
don't spend too much time trying to mimic the title and page headers.)

After "Assignment 1" at the top
of your document, type your name and student ID in the same style.

Using "Save As" from the File menu,
save this document in Microsoft Word (.doc)
format. Also save a copy on your diskette.  We won't keep reminding
you about this, but you should get in the habit of keeping backups.

Web-based tasks (part three):

Log on to Checkmate and submit the Word file
containing your recreation of this assignment.

Written by David G. Kay, Summer 1999, and
modified Fall 1999, Fall 2000, Fall 2001, and Fall 2003.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Saturday, September 27, 2003 -- 2:48 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw4.html
##-----------------TITLE------------------------##
ICS 10A * Assignment 4
##------------------TEXT------------------------##
  

This assignment is due by the beginning of
your discussion section on Wednesday, October 22.  The material covered
here will appear on the midterm, so you'll want to become comfortable
with it by then.

Summary:  For this assignment, you
will measure information:  how much space some object requires, how much
it might cost to store it, how long it might take to transmit it.  Feel
free to use a calculator, spreadsheet, or other tool (such as the "word
count" feature of Microsoft Word), and to consult the web references
we mention.

Part I. Fill in this table.  We suggest
completing the first column ("Size in bytes") first, since this
may involve a few intermediate data-gathering steps.  Bracketed numbers
(like "[12]") refer to notes and hints, which appear below the
table.

Information packages
Size in bytes (or KB, MB, GB, ...) [5]
How many copies of the information package
can you fit on one of the storage media listed below?  (Or, how many of
the storage media would it take to store one information package?)
How much would it cost to store this information
on ZIP disks? [6]
How long would it take to download this information
package using:
 
 
Floppy disks (1.4 MB)
ZIP disks (250 MB)
60 GB hard drive
 
A 56K modem [7]
A 52Mb cable modem
The summary paragraph above
332 bytes
 
 
 
 
 

The course syllabus [1]
 
 
 
 
 
 

The text of Tolstoy's Anna Karenina
[2]
 
 
 
 
 
 

A bitmap of a black & white drawing, 640

480 pixels
 
 
 
 
 
 

An on-screen color picture, 640 
480 pixels, 16 bits/pixel
 
 
 
 
 
 

A high-quality 5 megapixel digital photo,
2593 
1944, 32 bits per pixel
 
 
 
 
 
 

A 30-second TV ad at 30 frames per second,
each frame 352 
240 pixels, 24 bits per pixel [3]
 
 
 
 
 
 

An 85-minute movie at 60 frames per second,
each frame 1536 
922, 32 bits per pixel, plus stereo sound [4]
 
 
 
 
 
 


[1]  Recall that the syllabus is available
on line, most easily by following the link from the instructor's home
page, http://www.ics.uci.edu/~kay
.

[2]  Check Project Gutenberg at http://promo.net/pg
.

[3]  Assume there's no sound involved.

[4]  CD-quality stereo sound involves two
channels (left and right).  Each channel takes 44,100 samples per second,
at 16 bits per sample.

[5]  Use 1 KB = 1024 bytes, 1 MB = 1000 KB,
1 GB = 1000 MB, and so on.

[6]  For the price of a ZIP disk, try http://www.staples.com
.  ZIP disks come in two sizes, 100 MB and 250 MB.  Use the 250 MB size
here.

[7]  Note that data transmission rates are
typically given in bits (or kilobits or megabits) per
second.


Part II.  How much space is required
by the web page you created for Assignment 2?  For now, let's just consider
the text, and not the images.  There are three different ways of measuring
it:

(a)  The size of the text displayed
in the browser.  You can get this text size by viewing your page in Navigator
or Explorer (not in Composer), selecting all the text, copying it, pasting
it into a Word document, and using the Word Count menu item.

(b)  The size of the HTML source to
your page.  You can get this by choosing View Source on your page in the
browser, selecting it all, and using the word count in Word as before.

(c) The size of the Composer file that
contains your web page.  You can get this by checking the size of the file
in Windows; ask a classmate or your TA if you don't know how to do this.

Figure out each of these quantities.  Which
is the largest, which the smallest, and why?  (This is something you can
discuss with your classmates and TA; there's no single right answer.)

How big are the images on your web page?


For this assignment, turn your answers in
on paper.


References:

Units of Measure:  http://csd1.dawsoncollege.qc.ca/~pkidd/units.htm

Data Powers of Ten:  http://www.sims.berkeley.edu/research/projects/how-much-info/datapowers.html

Written by David G. Kay, Summer 1999; revised Fall 1999, Fall
2000, Fall 2001, and Fall 2003.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Sunday, October 19, 2003 -- 6:59 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw8.html
##-----------------TITLE------------------------##
ICS 10A * Assignment 8
##------------------TEXT------------------------##
  

This assignment is due at the beginning of
your discussion section on Wednesday, December 3.  We've allowed two
weeks for this assignment so you have more flexibility to plan around the
Thanksgiving holiday, but this assignment is somewhat larger and more open-ended
than the others, so don't look at it as a week's vacation.

Summary: This assignment will also
give you practice with boolean searches, help you recognize good typographic
design, good software user interfaces, and effective presentation graphics.


Part I:  Boolean Searches

For this part of the homework, use the "Advanced
Search" feature of the AltaVista search engine (www.altavista.com)
to formulate boolean searches.  You should start by reading the Help page
there.

(a)  Formulate a boolean search to
find information that will help you calculate the probability of each of
the following events:

A person being struck by lightning.

A person dying in an earthquake.

A person dying in an automobile accident.

A person dying of influenza.

For each event, print out or write down the
search queries you used, the pages where you found the information, and
your estimate of the probability (showing how you arrived at the figure--both
your calculations and the sources of the numbers you used).

(b)  Compare the probabilities you
estimated above with the probability of wining the SuperLotto jackpot.


Part II:  User Interface

(a)  Pick two application programs,
ones you use regularly, that don't work as well as they should from
a user interface perspective.  Describe their shortcomings and how you would
improve them.  Also give, if you can, the reasons why the software might
work as it currently does.  (Is it intended for a different audience than
people like you?  Would fixing it be too hard technically?)  Consult with
your TA or instructor on this if you like.

(b)  Find three examples, on the Web
or in print, of documents that violate the principles of good typography
described in class and on the handout.  Choose documents that violate a
variety of the principles as egregiously as possible.  Print or photocopy
the documents, annotating them with the violations and your suggestions
for improving them.


Part III:  Presentation Graphics

(a) A broad range of data about UCI
is available at http://www.oas.uci.edu/.
 Most of this data appears in table form; how would you present it graphically?
 From the UCI data available from this page, locate three different sets
of data:

-- One that would be most effectively shown in a pie chart

-- One that would be most effectively shown in a line chart

-- One that would be most effectively shown as a bar chart.

(a.1)  For each of the three sets,
print out the page containing the data (if there's more than a page
or two, just print the first two pages) and give a sentence describing why
the chart type you've chosen is effective for that data.

(a.2)  For one of the three sets (your
choice), copy the data out of the web page, paste it into Excel, clean it
up as necessary, and actually produce the chart.  Make your chart as clear
and effective as possible.

(b)  Find an example, on the Web or
in print media, of particularly bad information display.  Turn in a copy
along with your critique, describing all the ways in which it is misleading
or unclear or incomplete.  

(c)  Edward Tufte criticizes the user
interface of most software for devoting too little of the screen area to
actual content (as opposed to borders, decoration, controls, and so on).

Find two different application programs on
the lab machines, one that's particularly bad about devoting space to
content and one that's particularly good.  (Consider just the part of
the screen that the application uses--its main window, typically.  Don't
count the task bar and other things displayed by Windows.)  Print a screen
shot of each, indicating which is bad and which is good about devoting space
to content.  These don't have to be applications that you've used
before; you just need to start them up and see how much space is devoted
to content. 


What to turn in:  Turn in a printed
document with answers, clearly labeled, to all the questions raised above.
 Include the illustrations and samples we specified.


Written by David G. Kay, Summer 1999.

Revised by David G. Kay, Fall 2000, Fall 2001, and Fall 2003.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Wednesday, November 19, 2003 -- 8:00 AM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw5.html
##-----------------TITLE------------------------##
ICS 10A Assignment 5 * Fall 2003
##------------------TEXT------------------------##
  

This assignment is due at the beginning of
your discussion section on Wednesday, November 5. 

Summary: In this assignment you will
gain familiarity with the components and configurations of personal computers.

(a)  There are many ways to describe
a computer.  Take the computer you are using now (in the lab or at home)
and determine as many of the following characteristics as you can:

Manufacturer and model name or number

Operating system

Processor manufacturer, processor model number,
processor clock speed (MHz)

Amount of RAM

Amount of hard disk space

Other storage peripherals (e.g., CD-ROM, CD-RW,
DVD, or ZIP drives)

Monitor manufacturer, size and resolution

Printer manufacturer and model number; printer
characteristics (resolution, color, speed)

Other peripherals, if any (speakers, scanner,
...)

To learn where to find this information, feel
free to consult with your TA, your classmates, or others; just remember
that you may need to know how to find it on your own later on.

(b)  Find on the Internet the best
price for a computer that's as close as possible to the one you described.
 In most cases this will be a used computer; if your machine is still sold
new, that's also fine.  Find at least two web pages that show prices
for the comparable system and print them out along with your description.
 Where you can't find identical components (i.e., the same make and
model), substitute equivalent ones (e.g., with the same capacity or speed).

Along with your description from part (a),
turn in the web pages you printed, a description of the comparable machine
you found, where you found it, its price, and any differences between your
machine and the comparable machine.  Submit this on paper.


Written by David G. Kay, Summer 1999; revised Fall 1999, Fall
2000, Fall 2001 and Fall 2003.






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Sunday, October 19, 2003 -- 7:39 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~kay/courses/10a/hw/hw2.html
##-----------------TITLE------------------------##
ICS 10A * Assignment 2
##------------------TEXT------------------------##
  

This assignment is due by the beginning of
your discussion section on Wednesday, October 15, but on October 8 you will
need to choose a subject during your lab section and on October 10 you will
need to show your TA an intermediate stage of your work.  Computing tasks
always take longer than you think they will because unexpected problems
and misunderstandings inevitably come up.  Even if you have experience with
the tools already, you won't be able to leave this until the day before
it's due.

Summary:  For this assignment, you
will use the Web to gather information about a person (chosen from our list);
using this information you will create a Web page that gives a biographical
sketch of the person.

Part I

Choosing your subject:  First, you
must choose your subject--the person about whom you will gather information
and create a web page.  You can't choose just anyone; you must select
a name from the list we will distribute in class.

Your task will be to produce a web page containing
a short biographical sketch of this person.  Your sketch should contain
the basic details of the person's life--e.g., birthdate, birthplace,
family, background--together with some description of the person's major
accomplishments.  This does not have to be lengthy; a single page of text
will be plenty, not counting lists or quotations or illustrations.  

You may never have heard of the person you
pick; that's fine.  There is information on the Web for each of them,
so this is an opportunity to learn something (and someone) new (which is
what research is all about in the first place).  In your lab section on
Wednesday, October 8, your TA will have a sign-up sheet for selecting your
person.

Gathering information:  Next, you must
gather information about your person.  If possible, gather all of your information
from the Web.  You're not prohibited from using other sources, but using
the Web is the point of the assignment.

As you gather your information, keep a search
log describing which index and search services you visited, what search
queries you used, and what results they produced.  (Of course this should
be a computer-based document, Word or plain text.  You will copy and paste
URLs and queries from your web browser into this document to save yourself
from unpleasant transcribing.)  For each different search (and you should
do at least four), your search log should answer these questions:

-- Which search service are you using?  (Give its URL.)

-- Which options of the service have you selected?  (In Altavista, for example,
you may choose simple or advanced search; other services have other choices.)

-- What was your query?

-- How many "hits" did your query generate (i.e., how many matching
documents were retrieved)?

-- Does the service attempt to list the best hits first?  (There should
be a "Help" or "Tips" link that answers this.)  How
does the service define "best"?

-- How many of the "hits" looked promising enough to check out?
 Were there any humorously or outrageously inappropriate hits appearing
early in the list?

-- What did you find at the sites you checked out?  (Give the URL and a
few words describing each useful site and the information you found there
that you plan to use on your web page.)

-- How might you change your query (or selected options) next time to produce
better results?

After you have found enough information, conclude
your search log with a paragraph giving your evaluation of which search
service was the most helpful and effective.

For each major fact on your web page that
isn't common knowledge, you will need to specify where you found it.
 Your search log will contain this information.  Provide those sources as
links in the text of your web page; it is your choice whether you interleave
your sources in your text or gather them into an annotated source list at
the end.

As you do your research, note that your web
page must include at least two images, one of which is a picture of the
person.  You must also include at least four hyperlinks to other information
about the person.  (For example, a page about Bill Clinton might include
links to the White House, a list of Rhodes Scholars, a list of governors
of Arkansas, and a page describing impeachment.)  Add this list of links
to the end of your search log.

Also consider these hints and tips:

-- To copy an image from the Web, just right-click on it and choose "Save
Image As".

-- Try to avoid copying text or images that are copyrighted.

-- Choose images that have high contrast, or they won't show up when
you print them on the grey-scale printers in the lab.

In lab on Friday, October 10, show your TA
your search log, the list of links you will use on your web page, and the
image(s) you will use.  You will also submit these items through Checkmate.

Part II

Creating your web page:  The first
step in any kind of writing, for the Web or not, is to decide what you want
to say.  Write your text, using paper or some word processor, and decide
how and where you want to include your images, your sources, and any lists,
quotations, or other features.  Take the time to produce clear and correct
academic prose.

You will turn this text into a web page in
two steps, using two different tools:  You will start by using a plain text
editor (called Notepad) to write HTML manually; you will finish with a WYSIWYG
(what you see is what you get) editor, Netscape Composer.

Editing HTML manually:  For a web browser
like Navigator or Explorer to display a web page, that page must be described
in a language called HTML (Hypertext Markup Language).  HTML includes the
plain text that appears on the page, along with "tags" or commands
that specify how to display the text, where to put images, and where links
link to.  An appendix to our text gives a reference to some common HTML
tags.

To start your page, open Notepad (from the
Start menu, choose Programs, then Accessories).  Then type in the basic
HTML template shown on the next page, along with one test sentence you can
remove later:



<HTML>     

<!-- This
is a comment, readable in the source but ignored by the browser >

   <HEAD>

      <TITLE>

         David G. Kay's
Page on Charles and Ray Eames

      </TITLE>

   </HEAD>

   <BODY>

      This is a test sentence.

   </BODY>

</HTML>

Now save the file, naming it yourname.html--substitute
your own name, of course, and don't forget the .html
suffix.

Next, open Netscape Communicator (Navigator),
click File, then Open Page, and choose your file.  Does it look the way
you expected it to?

You will repeat this cycle, a very common
one in all kinds of software development:  Add some more text and tags to
your file using Notepad, then Save.  Switch to Navigator, click Reload/Refresh
(because Navigator doesn't automatically know about your saved changes),
and verify that your page looks as you intend.  Keep making small changes,
then checking your work; if you make too many changes before checking and
the check reveals something wrong, finding the problem becomes much harder.

When you have finished entering about half
of your page, save your work and submit it via Checkmate.  Print out the
HTML source from Notepad; save a separate copy of that file for backup purposes;
then load your half-done page into Navigator and print the interpreted version
of the page from there.  Now you are ready to go on to the second tool.

Using Netscape Composer as a WYSIWYG editor:
 Open Netscape Composer, and then open the HTML file you have been working
on.  Composer will display the file in (almost) the same way a browser will,
but it will let you edit the file directly in this view!

Continue editing your page until it is done,
saving and checking periodically in Navigator (which should not look much
different).  Make sure you have all the required elements:  images, references,
hyperlinks.

When you are done, print two versions of the
page from Navigator:  the HTML source (using the View Source menu item)
and the interpreted (finished) page.  Save the final HTML source and submit
it via Checkmate.  Also submit the final set of images your page uses.

With WYSIWYG tools available, why would anyone
bother writing raw HTML?  There might be two reasons:  The WYSIWYG tools
don't always provide all the features of HTML, and hand-coding the HTML
allows the designer more precise control over the page's ultimate appearance.

Also consider these hints and tips for building
your web page:

-- Keep all your files, including images, in the same folder; otherwise
they may not show up when viewed with a browser.

-- You can see the HTML source of any web page by using the "View Source"
menu item.  Often the source is impenetrably complex, but not always; see,
for example, the instructor's home page (http://www.ics.uci.edu/~kay).

-- The more elaborate your web page, the likelier there are to be differences
in how it appears in different browsers.  Even though the Web is supposed
to be a standard, universal medium, you will find that Navigator and Explorer
don't show the same HTML precisely the same way, nor do browsers on
Macintosh or Unix systems.  You need not achieve a uniform look for this
assignment, but trying to achieve uniformity gives real headaches to professional
web designers.

Open your web page using Explorer, print the
page, and circle on the printout any differences between that version and
the Navigator version.  Show these differences to your TA in lab on the
due date.

Your grade will depend on how thoroughly you
provide all the information we specify (including sources for that information),
various lab activities (signing up, showing your TA your search log, and
showing your TA the differences between Navigator and Explorer), and the
correctness and clarity of your web page's presentation (including clear
and correct English prose). 


Written by David G. Kay and Hung Tran, 1995
and 1996.

Substantially revised by Eamonn Keough and
David G. Kay, Summer 1999, and revised Fall 1999, Fall 2000, Fall 2001,
and Fall 2003






David G. Kay,
406B Computer Science

University of California, Irvine

Irvine, CA  92697-3425
 --  (949) 824-5072
 --  Fax (949) 824-4056
 --  Email  
kay@uci.edu




Saturday, September 27, 2003 -- 2:47 PM
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/kterm-minden.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Date:           Sun, 27 Oct 1996 16:53:18 -0800 (PST)
From:           Milo Gardner <gardnerm@gaia.ecs.csus.edu>
To:             David Eppstein <eppstein@ICS.UCI.EDU>
Subject:        Unit Fractions, smallest last term




Dear David and Stan:

I offer this information as a question. Kevin comments that
Richard K. Guy's Unsolved Problems in Number Theory may list an
error or a typo (*).

Since I do no own a copy of Guy's book, could the point
to discussed?  Better yet, could Guy's email address be
provided so that Guy can respond to the typo or error point?

Kevin's table cites the smallest last term 'Egyptian' solutions to

1 = 1/a + ... + 1/n

Thanks again for the interesting Egyptian fractions discussions.

Milo Gardner
Sacramento, CA

ksb wrote:
By the way, the optimum expansions of 1 into k distinct unit fractions
for k=3,4,... are as listed below:

        k             denominators of optimum expansion
       ---       -----------------------------------------------
        3         2   3   6
        4         2   4   6  12
        5         2   4  10  12  15
        6         3   4   6  10  12  15
        7         3   4   9  10  12  15  18
        8         3   5   9  10  12  15  18  20
        9         4   5   8   9  10  15  18  20  24
       10         5   6   8   9  10  12  15  18  20  24
       11         5   6   8   9  10  15  18  20  21  24  28
       12         6   7   8   9  10  14  15  18  20  24  28  30

Richard Guy's book on Unsolved Problems in Number Theory states that the 
smallest max denominator for k=3 is 6, and for k=4 is 12, both in agreement
with the above table.  However, he then says that the smallest max
denominator for k=12 is 120 (*), whereas the above table shows that it is
actually 30.  I suppose it's just a typo in Guy's book.  (It may even
be less than 30, because I didn't have the patience to check all
possibilities for k=12, but it's certainly no greater than 30.)




From:           ksbrown@seanet.com (Kevin Brown)
Date:           Sun, 27 Oct 1996 21:27:08 GMT
Newsgroups:     sci.math
Subject:        Sum of 12 Distinct Unit Fractions = 1




On page 161 of Guy's excellent book "Unsolved Problems in Number
Theory" (2nd Ed) it discusses expressing 1 as the sum of t distinct
unit fractions.  Letting m(t) denote the smallest possible maximum
denominator in such a sum, he notes that m(3)=6 and m(4)=12.  These
follow from the optimum 3-term and 4-term expressions

              1  =  1/2 + 1/3 + 1/6

              1  =  1/2 + 1/4 + 1/6 + 1/12

However, the book goes on to say that m(12)=120.  Is this just a typo?
If I've interpreted the definition of m(t) correctly it seems to me
m(12) cannot be greater than 30.  Here's a table of the optimum
expansions for t=3 to 12:

      t             denominators of optimum expansion
     ---       -----------------------------------------------
      3         2   3   6
      4         2   4   6  12
      5         2   4  10  12  15
      6         3   4   6  10  12  15
      7         3   4   9  10  12  15  18
      8         3   5   9  10  12  15  18  20
      9         4   5   8   9  10  15  18  20  24
     10         5   6   8   9  10  12  15  18  20  24
     11         5   6   8   9  10  15  18  20  21  24  28
     12         6   7   8   9  10  14  15  18  20  24  28  30

I'm not actually certain the above expansion for t=12 is optimum, but
it proves that the maximum denominator of the optiumum expansion is
certainly no greater than 30.  Am I missing something?
  _________________________________________________________________
 |                /*\                                              |
 |   MathPages   /   \     http://www.seanet.com/~ksbrown/         |
 |______________/_____\____________________________________________|
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/qgrady.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
From:           Quentin Grady  <quentin@inhb.co.nz>
Newsgroups:     sci.math
Subject:        Egyptian Fractions & Parallel Resistors.
Date:           10 Jun 1996 10:12:45 GMT
Organization:   Ram Management Ltd




G'day G'day Folks,

I teach electrical theory a fairly introductory level.   
When resistors are added in parallel, the recipocals add

1/R(total) = 1/R1 + 1/R2.
 
In writing test questions it is often desirable to have the answers
as integers.    As it happens I have read that Egyptian 
mathematicians expressed all fractions as the sum of reciprocals.  

              eg  2/3 would be written as 1/2 + 1/6   

I believe they compiled tables of these sums of reciprocals and one
such table was found on an historic monument. 

Does anyone have or know how to generate a set of integral solutions
for 1/z = 1/y + 1/x  that I could use for writing simple parallel resistor 
problems?

Please email if possible.  

Quentin Grady       ^  ^  __/
New Zealand,       >#,#<   [
                                        / \   /\    
"... and the blind dog was leading." 




To:             quentin@inhb.co.nz
Subject:        Egyptian fractions
Date:           Mon, 10 Jun 1996 10:35:02 -0700
From:           David Eppstein <eppstein@ICS.UCI.EDU>




Quentin Grady <quentin@inhb.co.nz> wrote:
> I teach electrical theory a fairly introductory level.   
> When resistors are added in parallel, the recipocals add
> 
> 1/R(total) = 1/R1 + 1/R2.
> 
> Does anyone have or know how to generate a set of integral solutions
> for 1/z = 1/y + 1/x  that I could use for writing simple parallel resistor 
> problems?

I have probably more than you wanted to know about generating Egyptian
fractions, online at my web page
    http://www.ics.uci.edu/~eppstein/numth/egypt/

However, regarding your particular equation 1/z = 1/y + 1/x:
let g=gcd(x,y), p=x/g, q=y/g, then your equation can be rewritten
1/z = 1/g (1/p + 1/q) with gcd(p,q)=1.

But now 1/p+1/q= (p+q)/pq must be in lowest terms already,
since any divisor of pq must divide either p or q,
and we know that gcd(p+q,p)=gcd(p+q,q)=1.

So if z is to be an integer, g must cancel the factor p+q in the
numerator.  Suppose g=(p+q)r. To generate fractions of the form you
describe, simply choose p, q, and r, then you have

    1/p(p+q)r + 1/q(p+q)r = 1/pqr

E.g. p=2, q=3, r=7 gives 1/70 + 1/105 = 1/42.
The analysis above shows that all solutions can be generated in this way.
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




To:             quentin@inhb.co.nz
Subject:        Egyptian fractions
Date:           Mon, 10 Jun 1996 18:08:51 -0700
From:           David Eppstein <eppstein@ICS.UCI.EDU>




    I assume the technique for Egyptian fractions can be extended to the 
    form,  1/z = 1/y + 1/x + 1/w   This would be really useful for setting 
    up two-mesh circuit problems. 

I think the following procedure generates all the solutions:

    choose five numbers w,x,y,z,r, with w<x and gcd(x,w)=gcd(y,z)=1
    let f = gcd(xw(y+z),yz(x-w))
    let g = yz(x-w)/f
    let h = xw(y+z)/f

    then 1/wgr = 1/xgr + 1/yhr + 1/zhr

e.g.
    w,x,y,z=2,5,4,11,1
    f = gcd(150,132)=6
    g = 132 / 6 = 22
    h = 150 / 6 = 25

    1/44 = 1/110 + 1/100 + 1/275
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




From:           Quentin Grady  <quentin@inhb.co.nz>
Newsgroups:     sci.math
Subject:        Re: Egyptian Fractions & Parallel Resistors.
Date:           11 Jun 1996 16:37:18 GMT
Organization:   Ram Management Ltd




Thanks all you people who came up with an answer and emailed it to me.
 You have been most helpful.  It will make the marking more certain as 
rounding errors are eliminated in multipart questions. 

One simple method sent me,  is to  factorise the total resistance thus, 

              1/pq = 1/p(p + q)  + 1/q(p +q)  

Thanks again.    

Quentin Grady       ^  ^ __ /
New Zealand,       >#,#<  [
                                       / \   /\    
"... and the blind dog was leading." 




From:           ksbrown@ksbrown.seanet.com (Kevin Brown)
Newsgroups:     sci.math
Subject:        Unit Fractions and Fibonacci
Date:           Tue, 18 Jun 1996 23:26:13 GMT
Organization:   Seanet Online Services, Seattle WA




Quentin Grady  <quentin@inhb.co.nz> wrote:
> When resistors are added in parallel, the recipocals add
>             1/R(total) = 1/R1 + 1/R2
> Does anyone have or know how to generate a set of integral 
> solutions for 1/z = 1/y + 1/x ...?

Quentin Grady  <quentin@inhb.co.nz> wrote:
> ...Thanks all you people who came up with an answer and emailed it 
> to me.  You have been most helpful.  One simple method sent me is to 
> factorise the total resistance thus:  1/pq  =  1/p(p+q) + 1/q(p+q)  

This can be regarded as a special case of a more general expansion
related to the Fibonacci numbers.  Let s[j], j=0,1,2,... be a sequence
of integers that satisfy the recurrence s[k] = s[k-1] + s[k-2] with
arbitrary initial values s[0] and s[1].  It can be shown that for 
any integers m,n with m>n we have

        1                 1            m          1
   -----------   =   -----------  +  SUM    -------------       (1)
   s[n-1] s[n]       s[m] s[m+1]      j=n   s[j-1] s[j+1]

For example, setting s[0]=s[1]=1 and n=5, m=10 gives

       1        1     1     1      1      1      1      1
      ---  =   --- + --- + --- + ---- + ---- + ---- + -----
       40       65   168   442   1155   3026   7920   12816

In general, to expand 1/D into a sum of unit fractions, the method
is to split D into two factors, D = pq.  Then we can set s[0]=p and
s[1]=q and generate the s sequences as follows

           k    s[k]     s[k] s[k-1]      s[k] s[k-2]
          ---  -------   -----------      -----------
           0    p
           1    q        pq
           2    p+q      q(p+q)           p(p+q)
           3    p+2q     (p+q)(p+2q)      q(p+2q)
           4    2p+3q    (p+2q)(2p+3q)    (p+q)(2p+3q)
           5    3p+5q    (2p+3q)(3p+5q)   (p+2q)(3p+5q)
           6    5p+8q    (3p+5q)(5p+8q)   (2p+3q)(5p+8q)
           7    8p+13q   (5p+8q)(8p+13q)  (3p+5q)(8p+13q)
                 etc            etc            etc

We can now express 1/pq as the sum of the inverses of the numbers 
in the third column down to the mth row, plus the inverse of the mth
number in the second column.  Thus we have

 1/pq  =  1/p(p+q) + 1/q(p+q)

       =  1/p(p+q) + 1/q(p+2q) + 1/(p+q)(p+2q)

       =  1/p(p+q) + 1/q(p+2q) + 1/(p+q)(2p+3q) + 1/(p+2q)(2p+3q)

                              etc.

Of course, we can let m in equation (1) go to infinity, giving the
infinite unit fraction expansion

                  1              inf         1
             -----------   =    SUM    -------------           (2)
             s[n-1] s[n]         j=n   s[j-1] s[j+1]

This can also be generalized to higher order recurrences.  For
example, if we define the sequence s[j] to satisfy the 3rd order
recurrence s[k] = s[k-2] + s[k-3] with the initial values a,b,c,
then we can generate the following sequences

       k    s[k]      s[k]s[k-1]s[k-2]        s[k]s[k-1]s[k-3]
      ---  ------   --------------------    ----------------------
       0    a
       1    b
       2    c          abc
       3    a+b        bc(a+b)                ac(a+b)
       4    b+c        c(a+b)(b+c)            b(a+b)(b+c)
       5    a+b+c      (a+b)(b+c)(a+b+c)      c(b+c)(a+b+c)
       6    a+2b+c     (b+c)(a+b+c)(a+2b+c)   (a+b)(a+b+c)(a+2b+c)
             etc              etc                     etc

so we have

1/abc = 1/ac(a+b) + 1/bc(a+b)

    = 1/ac(a+b) + 1/b(a+b)(b+c) + 1/c(a+b)(b+c)

  = 1/ac(a+b) + 1/b(a+b)(b+c) + 1/c(b+c)(a+b+c) + 1/(a+b)(b+c)(a+b+c)

and so on.  To illustrate, with a=3,b=7,c=11 this last formula gives

    1/231  =  1/330 + 1/770

           =  1/330 + 1/1260 + 1/1980

           =  1/330 + 1/1260 + 1/3780 + 1/4158

and with a=23,b=c=1 it gives

     1/23  =  1/24 + 1/552

           =  1/48 + 1/50 + 1/552 + 1/1200

=====================================================================
MathPages at -->  http://www.seanet.com/~ksbrown/
=====================================================================
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/plusminus.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
From:           mathwft@math.canterbury.ac.nz (Bill Taylor)
Date:           13 Nov 1996 03:10:17 GMT
Newsgroups:     sci.math
Subject:        MORE Egyptian fraction queries.




Egyptian fractions seem to be in, at the moment.

I was checking out Guy's UPiNT and saw this conjecture:-

All m  Exists N   n>N ==>  Exist x,y,z    m/n = 1/x +- 1/y +- 1/z.

Note the plus-or-minuses.  So we're in Z rather than N.

Guy observes that it may be that  N > m;  and quotes instance  N=23  for m=18.

So presumably this means  18/23 CANNOT be expressed as the sum/diff of 3 unit
fractions.  And is (presumably) the "first" counterexample.

Query:  Is there any reason for 18/23.  I guess not; it just seems to be a
        random-looking phenomenon.  No doubt there are many others in this
        much-conjectured but imperfectly known field; I bet the law of
        small numbers has great sway in Egyptian fractions!

Query:  What are the next few that cannot be so expressed.  Can some of those
        newsgroupies who've announced the possession of fast software for
        unit fractions, post a list of examples of other failures; up to
        some convenient denominator size.

That is,  fractions  m/n  with  m<n, that cannot be written  1/x +- 1/y +- 1/z.

Thanks!

-------------------------------------------------------------------------------
             Bill Taylor            W.Taylor@math.canterbury.ac.nz
-------------------------------------------------------------------------------
   This stupid computer never does what I want it to, only what I tell it to!
-------------------------------------------------------------------------------
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/cfrac.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Algorithms for Egyptian Fractions



Continued Fraction Methods



The Continued Fraction Method


One can derive a good Egyptian fraction algorithm from
continued fractions:
the algorithm is quick, generates reasonably few terms, and uses fractions with very small denominators
[Ble72].

Any real number q can be represented as a continued fraction:

                        1
x = a[0] + ----------------------------
                            1
           a[1] + ---------------------
                               1
                  a[2] + --------------
                                   1
                         a[3] + -------
                                a[4]...


in which all the values a[i] are integers.   This terminates in a finite sequence if and only if q is rational.

The
convergents
of q are formed by truncating the sequence; they are alternately above and below q, and are useful for finding good rational approximations to the original number.
(For instance the famous approximation 355/113 ~= pi can be found as a convergent in this way.)  Successive convergents have differences that are unit fractions.  The sequence of these differences gives something like an Egyptian fraction representation of q, but unfortunately every other fraction in the sequence is negative.

If h[i]/k[i] denotes the ith convergent, we can define a sequence of
secondary convergents:

h[i - 1] + j h[i]
-----------------
k[i - 1] + j k[i]


As j ranges from 0 to a[n+1] the secondary convergents give an increasing sequence ranging from the (i-1)st convergent to the (i+1)st convergent
[NZ80]. As with the primary convergents, successive secondary convergents differ by a unit fraction.  If we interleave the sequence of every other primary convergent, connected by the appropriate sequences of secondary convergents, the differences of this interleaved sequence give an Egyptian fraction representation of q.

We first find the continued fraction representation of q=x/y.
Mathematica
provides a package for continued fractions, but one must supply a bound on the number of terms to compute.  We don't need or want such a bound, so we use our own code.  In order to use this method, the continued fraction must have an odd number of terms, so if necessary we replace the last term a[i] with two terms a[i]-1 and 1.

CFNextTerm[q_Integer] := 0;
CFNextTerm[q_Rational] := 1/(q-Floor[q])

ContinuedFractionList[q_] :=
    Floor /@ Drop[FixedPointList[CFNextTerm, q],-2];

CFMakeOdd[l_] :=
    If[OddQ[Length[l]],l,Join[Drop[l,-1],{Last[l]-1,1}]]


We next find the primary and secondary sequences of unit fractions from these continued fraction representations.

CFPSAux[{a_,b_},c_] := {b + a c, a};
CFPrimarySeq[l_] :=
    Transpose[Drop[FoldList[CFPSAux,{0,1},l],1]][[1]];
       
CFSecondarySeq[l_] :=
    If[Length[l] < 3, l,
       Table[l[[1]] + i l[[2]],
       		 {i, 0, (l[[3]]-l[[1]])/l[[2]]-1}] ~Join~
		  CFSecondarySeq[Drop[l,2]]]


As described above, our final representation is formed by hooking together secondary sequences.  We first separate out the integer part of the input, which we leave as is.  The remaining fractions are formed by multiplying pairs of values in the secondary sequence.

EgyptContinuedFraction[q_] :=
	CFSecondarySeq[CFPrimarySeq[CFMakeOdd[
						ContinuedFractionList[q]]]] //
    1/(Drop[#,1] Drop[#,-1])& //
    If[Floor[q]==0, #, Prepend[#, Floor[q]]]&


Termination of the algorithm follows from the termination of the continued fraction representation algorithm, which is essentially the same as Euclid's algorithm for integer GCD's.  It is clear from the construction of the secondary sequence, and from the fact that the final result has denominators that are products of pairs of numbers in the secondary sequence, that all fractions are distinct.  The fact that the sum of the fractions is the original input number
is a straightforward but tedious exercise in algebraic manipulation.  The number of terms in the Egyptian fraction representation of x/y is the sum of the odd terms after the first in the continued fraction list,  which is at most x.  Each fraction is a difference between two secondary convergents with denominator at most y, so each fraction has denominator at most y^2.

EgyptContinuedFraction[18/23]


 1  1  1   1    1
{-, -, --, --, ---}
 2  6  12  36  207



The Grouped Continued Fraction Method


The worst case for the continued fraction method above occurs when the continued fraction representation has only three terms producing a long secondary sequence.  In this case the Egyptian fraction representation will involve long sequences of fractions of the form
1/(a+b i)(a+b(i+1)).  If we add k consecutive values in such a sequence, we get
k/(a+b i)(a + b(i + k)); it may happen that this can be simplified to a unit fraction again.  By performing several simplifications, we both reduce the number of terms in the overall representation and also reduce some denominators.  For instance, the continued fraction method for 7/15 gives

 1  1   1   1   1    1    1
{-, --, --, --, --, ---, ---}
 3  15  35  63  99  143  195


But 1/15 + 1/35 + 1/63 = 1/9, and 1/99 + 1/143 + 1/195 = 1/45, so we can replace these triples and find the shorter representation 

 1  1  1
{-, -, --}
 3  9  45


This phenomenon is not unusual, and Bleicher
[Ble72] showed how to take advantage of it to dramatically reduce the number of terms produced by the continued fraction method.  Some care is required: if in the above list we instead group the last five terms, we get

 1  1   1
{-, --, --}
 3  15  15


which is not an Egyptian fraction representation.

Our implementation finds all shortest representations rather than a single representation, so if they had distinct fractions we would return both representations above.  We partition the secondary sequence into blocks of arithmetic progressions and find groupings separately within each progression; this is safe as the sum of all fractions from one progression is smaller than half of any fraction in a previous progression.  Within a progression, we determine which groups of terms can be combined to form a unit fraction, and represent each group as an edge in a graph, labelled with the corresponding unit fraction.  For the example above, the graph has eight vertices and ten edges, as follows:


Each edge is directed from left to right.  The horizontal edges represent the original terms produced by the continued fraction method, while the longer edges represent the groupings that result in unit fractions.  Our task then becomes one of finding the shortest path through this graph, with the restriction that we cannot use two edges with the same label.

Unfortunately finding paths without repeated labels is NP-complete, so an efficient algorithm for this subproblem is unlikely to exist.  Fortunately most of the time our graphs have few repeated labels and the problem is not as hard as its worst case.  We use the following heuristic: for increasing values of k, find all paths of k or fewer edges, and filter out the paths with repeated labels; if not all paths are filtered out, return the remaining list of paths.  The theoretically fastest algorithm for listing all short paths takes constant time per path, after preprocessing time proportional to the time to find a single shortest path
[Epp94], however for ease of implementation we use a simpler method invented by Byers and Waterman
[BW84]. (The motivation of both papers was not Egyptian fractions, but rather comparison of DNA and protein sequences; this also turns out to be equivalent to a certain shortest path problem.)

First we include code to make an adjacency matrix for a graph, containing in each entry either the fraction corresponding to an edge in the graph, or the empty set if no such edge exists (i.e. if the corresponding sum of terms does not reduce to a unit fraction).  The input to this routine is the secondary sequence of the continued fraction.

ECFMakeGraph[l_] :=
	Table[If[i<j, (If[Numerator[#]===1,#,{}]&)
					[Rational[j-i, l[[i]] l[[j]] ]],
			 {}],
   		  {i,1,Length[l]},
    	  {j,1,Length[l]}]


Next we include a shortest path algorithm, which takes as input the adjacency matrix above and produces a vector of distances from vertices to the last vertex.  This vector is needed for our bounded length path search.

ECFPathLengths[g_] := ECFPathLengths[g,Length[g]-1,{0}];
ECFPathLengths[g_,i_,vec_] :=
	Prepend[vec, Min@@Table[If[g[[i,j]]==={},
    		 					Infinity,
    							vec[[j-i]]+1],
    						{j,i+1,i+Length[vec]}]] //
    (If[i===1,#,ECFPathLengths[g,i-1,#]]&);


We now implement Byers and Waterman's algorithm for finding all paths that contain at most b more edges than are in the shortest path itself.  We will call this algorithm repeatedly, using larger and larger values of b, until we find a path without repeated labels.  Our implementation takes as input the graph, the value of b, the vertex to start at, the number of vertices, and the vector of distances produced above, but all but the first two can be omitted (in which case we supply appropriate values automatically).

The technique is simply to build the path one edge at a time.  At each step we compute a value d measuring the amount by which the path length would increase if we followed the given edge instead of keeping to the shortest path (d=0 for shortest path edges).  We subtract d from b and continue recursively as long as the result is nonnegative.

ECFBoundedPaths[g_,b_] :=
	ECFBoundedPaths[g,b,1,Length[g],ECFPathLengths[g]];
ECFBoundedPaths[g_,b_,i_,l_,v_] :=
    If[i===l,{{}},
       Join@@Table[If[g[[i,j]]==={},Infinity,
       								1+v[[j]]-v[[i]]] //
       			   (If[#>b,{},(Prepend[#,g[[i,j]]]&) /@
       					  	  ECFBoundedPaths[g,b-#,j,l,v]]&),
       			   {j,i+1,l}]]
       					  	 	 


We next include code for removing from the list those paths that contain a duplicated fraction.
It is not clear that the paths will have the fractions listed in sorted order, so we sort them first.

ECFContainsDupl[{___,q_,q_,___}] := True;
ECFContainsDupl[l_] := False;
   		 
ECFFilterDuplSub[x_] :=
   If[ECFContainsDupl[x],{},{x}];


ECFFilterDupls[l_] :=
   Join @@ (ECFFilterDuplSub[Reverse[Sort[#]]]&) /@ l;
   
ECFShortFilter[g_] := ECFShortFilter[g,ECFPathLengths[g],0];
ECFShortFilter[g_,v_,b_] :=
	ECFFilterDupls[ECFBoundedPaths[g,b,1,Length[g],v]] //
   	(If[#==={},ECFShortFilter[g,v,b+1],#]&);


The next function applies all of the above steps for three-term continued fractions.  The final algorithm applies this to several three-term subsequences of the whole continued fraction.

ECFArithSeq[a_,b_,c_]:=ECFShortFilter[
					  	  ECFMakeGraph[CFSecondarySeq[{a,b,c}]]]


The next function takes two lists of lists, and forms all pairwise concatenations of one item from the first list and one from the second.  The obvious approach of using Outer[Join,...] doesn't work since Outer interprets lists of lists as tensors, so we use an alternate method based on Distribute.

OuterJoin[ll_,mm_] :=
	Distribute[{ll,mm},List,List,List,Join];


We are finally ready to define the overall modified continued fraction method, which breaks the primary sequence into subsequences and calls ECFArithSeq on each one.

ECFSecondaryPaths[l_] :=
    If[Length[l]<3,{{}},
       OuterJoin[ECFArithSeq[l[[1]],l[[2]],l[[3]]],
       			 ECFSecondaryPaths[Drop[l,2]]]]


EgyptGroupedCF[q_] :=
    ECFSecondaryPaths[CFPrimarySeq[
    	CFMakeOdd[ContinuedFractionList[q]]]]


Every step involves a fixed number of nested loops with indices bounded by the length of the secondary sequence, so (with the possible exception of finding a short repetition-free path) the overall time is polynomial in the numerator of the original rational number given as input.
It is not hard to see that the algorithm produces sequences of fractions formed by grouping the results of the continued fraction method, so the sum of the sequence is correct.  It remains to verify that no fraction is duplicated.  This is checked explicitly within each subsequence, and the entire sum of any subsequence is less than half any single fraction in previous subsequences, so no two separate subsequences can produce duplications.

As in the continued fraction method, the largest denominator in the representation of x/y is O[y^2].  The number of terms is still O[x] but it can also be analyzed in terms of y.
Bleicher [Ble72] shows that by choosing a prime p with gcd(a,p)=1 and p=O(log a),
and using groups with sizes equal to powers of p, one can find a representation with
O(p Log[b]/Log[p]) = O(Log[x]Log[y]/Log Log[y]) terms.
Since the actual representation is chosen to have minimum length, it can be no longer than this.
It remains unclear whether the implementation above really takes polynomial time, or whether there can be sufficiently many repeated labels that the algorithm for listing short paths has to list a large number of paths and slows down to exponential.  However in practice this method seems to work well.  (Bleicher's method of grouping can apparently be done in polynomial time.)

EgyptGroupedCF[31/311]


  1    1    1     1      1
{{--, ---, ----, ----, -----}}
  11  121  2541  9933  93611


The graph constructed for 31/311 is too complicated to depict here.  It has two paths of length five; however one of the paths is eliminated because it has two copies of the label 1/231.

A Hybrid Pairing / Continued Fraction Method


We can use potentially even fewer terms than the grouped continued fraction method, at the expense of possibly increasing the maximum denominator in the representation.  We simply find shortest paths in the same graph constructed by that method, ignoring the possibility of repeated labels, and then make the unit fractions in the resulting representation distinct by applying
EgyptPairList.

EHArithSeq[a_,b_,c_] := ECFBoundedPaths[
	ECFMakeGraph[CFSecondarySeq[{a,b,c}]],0]

EHSecondaryPaths[l_] :=
    If[Length[l]<3,{{}},
       OuterJoin[EHArithSeq[l[[1]],l[[2]],l[[3]]],
       			 EHSecondaryPaths[Drop[l,2]]]]

EgyptHybrid[q_] := EgyptPairList /@
    EHSecondaryPaths[CFPrimarySeq[
    	CFMakeOdd[ContinuedFractionList[q]]]];


This method uses O(Log[x]Log[y]/Log Log[y]) terms to represent any number x/y.  In the following example, we see representations corresponding to both shortest paths in the graph constructed for 31/311.

EgyptHybrid[31/311]


  1    1    1      1      1
{{--, ---, ----, -----, -----}, 
  11  116  9933  26796  93611
 
   1    1    1     1      1
  {--, ---, ----, ----, -----}}
   11  121  2541  9933  93611


Egyptian Fractions,
Number Theory,
David Eppstein,
ICS,
UC Irvine
Formatted by
nb2html and
filter.
Last update:
.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pubs/p-egypt.html
##-----------------TITLE------------------------##
David Eppstein - Publications
##------------------TEXT------------------------##
David Eppstein - Publications



Ten algorithms for Egyptian fractions.
D. Eppstein.
Mathematica in Education and Research 4 (2): 5–15, 1995.

Number theory.
I survey and implement in Mathematica several methods
for representing rational numbers as sums of distinct unit fractions.
One of the methods involves searching for paths in a certain graph
using a k shortest paths heuristic.
(BibTeX --
Citations --
Also available
in HTML and Mathematica notebook formats)




Publications --
David Eppstein --
Theory Group --
Inf. & Comp. Sci. --
UC Irvine

Semi-automatically filtered
from a common source file.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/curtiss.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
From:           stu30219@srv1.mail.uni-kiel.de (Stefan Bartels)
Newsgroups:     sci.math.research
Subject:        Number theory proof of Curtiss is wrong
Date:           16 Jul 1996 10:52:23 GMT
Organization:   Rechenzentrum Universitaet Kiel



Did anybody ever realize a bad mistake in the proof of Curtiss
in his article "On Kellogg's Diophantine Problem", Amer. Math.
Monthly, 29 (1922), pp. 380-387?

I don't think so, because Richard K. Guy in his book "Unsolved
Problems in Number Theory", Springer 1994, pp. 162f., and even
Erdös in his article "Comment on problem E2427", Amer. Math.
Monthly, 81 (1974), pp. 780-782, not only cite Curtiss' article in
their bibliography but also mention in their text explicitly him to
have proved the result.

Introduction to the subject

By Kellogg was the question raised, what the greatest
denominater in a representation of 1 as a sum of k unit-fractions
of integers (1 = sumkn=1 1/xn) is.
He conjectured for the maximum of the xn: x1
= 1, xk+1 = xk (xk + 1). This
result was "proved" by Curtiss.

The mistake mentioned below is just concerning the proof and not
the theorems of Curtiss, because Takenouchi in his article "On an
Indeterminate Equation", Proc. of the Physico-Mathematical Society
of Japan, 3rd series, vol. 3, pp. 78-92, proved something similar.
Also Erdös in his article mentioned above says that he has
proved a generalization of the theorem in his Hungrian article "On
a Diophantine Equation", Mat. Lapok, 1 (1950), pp. 192-210.

To prove the theorem by the methods introduced by Curtiss one
need (as I think and as I did) a lot more space than he did.

The "proof" of the mistake

To understand the following you have to have the original
article. I use "g" instead of "\varphi".

The mistake is on page 385. On page 384 he states the Theorem
III. To prove the theorem he starts with any set
satisfying equation (11) and "shows" that a transformation by his
second method leads to a reduced set which also satisfies equation
(11). This statement is wrong: Consider the set (3,3,4), which is
obviously reduced. Thus the set (3,3) is satisfying equation (11).
By his second method he gains the set (2,6) which does not satisfy
equation (11) for fn-2(x) = 3 < 6!! (He should have
taken instead the set (2,4) for gn-2(3,3) = 36 < 40 =
gn-2(2,4)! Even if you consider the whole new set
(2,4,6), it is impossible to prove what he "did" that
Xn-2/2 ( Xn-2/2 + 1) <=
fn-2(x), for 4,6 > 3 = fn-2(x)! Thus the
real problem on how to gain a new set satisfying equation (11) and
increasing gn-2 from any set satisfying equation (11) is
not solved by Curtiss.)

His mistake is in the line "But since X is compact ...". He has
two sets X. The original set (x1, ...
xn-1) was compact, but the shortened set (x1,
... xn-2) is **not** always compact! This is the case
with the set (3,3,4) from above.

Thus the Theorem III is not proven by Curtiss.

Stefan Bartels



From:           stu30219@srv2.mail.uni-kiel.de (Bartels)
Date:           24 Oct 1996 15:06:25 GMT
Newsgroups:     sci.math.research
Subject:        Maximums of sums of Egyptian fractions



In the book

Paul Erdös & Ronald L. Graham: "Old and New
Problems and Results in Combinatorial Number Theory", 
L'Engseignement Mathematique Universite de Geneve,
1980

one can read on page 31:

It is true that for any rational a/b, the
closest strict underapproximation Rn(a/b) of 
a/b by a sum of n unit fractions is given by 

Rn(a/b) = Rn-1(a/b)
+ 1/m

where m is the least denominator not yet used for which
Rn(a/b) < a/b, provided that n is
sufficiently large.


The authors do not give any citation of the proof of this
theorem. Does anybody know in which article it is proven or maybe
know how it can be proven?

Stefan Bartels



From:           gerry@mpce.mq.edu.au (Gerry Myerson)
Date:           25 Oct 1996 06:19:23 GMT
Newsgroups:     sci.math.research
Subject:        Re: Maximums of sums of Egyptian fractions



In the case where the rational you are trying to approximate is
1 (one), see D. R. Curtiss, On Kellogg's diophantine problem, Amer.
Math. Monthly 29 (1922) 380--387. However, Curtiss' proof, while
entirely elementary, is not easy to follow and, according to a post
to this group earlier this year, is incorrect.

A simpler proof is given by O. Izhboldin and L. Kurliandchik,
Unit fractions, Proc. St. Petersburg Math. Soc. 3 (1995) 193--200.
This appears in English translation in Amer. Math. Soc.
Translations, Series 2, 166.

They say nothing about the general rational, and I have no
opinion as to whether their methods generalize.

Gerry Myerson (gerry@mpce.mq.edu.au)



From:           stu30219@srv2.mail.uni-kiel.de (Bartels)
Date:           30 Oct 1996 11:23:49 GMT
Newsgroups:     sci.math.research
Subject:        Re: Maximums of sums of Egyptian fractions



This posting is a completion to the posting of Gerry Myerson (gerry@mpce.mq.edu.au) with
two purposes:

correction of my former statement concerning the proof of
Curtiss andexplaining my strong interest in the proof for Erdös' and
Grahams theorem.

Gerry mentioned a "former posting" saying that the proof of
Curtiss is wrong. This posting was submitted to this newsgroup by
me in July. In the meantime I found out that the proof is
definitely right (but obviously difficult to understand). (Sorry
for that.) But this mistake (of me) led to a generalization of
Curtiss' theorem that has not been published elsewhere yet: The
best underapproximation of a rational a/b is given by the
greedy algorithm at least for the case 
b = -1 mod a. (In the case 
a=b=1 this is Curtiss' theorem; in the case a=1
this is a statement proved by Erdös in 1950.)

I was also able to prove that the methods Curtiss invented work
if and only if b = -1 mod a. But
there seem to be a lot more rationals for which the
underapproximation is given by the greedy algorithm. While trying
to characterize these rationals I came across the theorem of
Erdös and Graham, which I mentioned in my first posting on
this subject.

Any hint on the proof of this theorem would be helpful.

Stefan Bartels
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/odd-one.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Date:           Fri, 8 Nov 1996 21:53:44 -0500
From:           RKetcheso@aol.com
To:             eppstein@ics.uci.edu
Subject:        Egyptian fractions




Do you know if it is possible for a group of Egyptian fractions with odd,
distinct denominators to add up to 1?

Thanx in advance for answering my question.

Dave Ketcheson




To:             RKetcheso@aol.com
Subject:        Re: Egyptian fractions
Date:           Sat, 09 Nov 1996 10:37:08 -0800
From:           David Eppstein <eppstein@ICS.UCI.EDU>




1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/11 + 1/13 + 1/23 + 1/721 + 1/979007 + 
    1/661211444787 + 1/622321538786143185105739 + 
    1/511768271877666618502328764212401495966764795565 + 
    1/209525411280522638000804396401925664136495425904830384693383280180439963265695525939102230139815

I found this  by applying EgyptOddGreedy[2/3,5] from my Egyptian fractions
notebook, http://www.ics.uci.edu/~eppstein/numth/egypt/.
For a less horrible example, found with more work by hand, try

1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/35 + 1/45 + 1/55 +
    1/77 + 1/165 + 1/275 + 1/385 + 1/495 + 1/825 + 1/1925 + 1/2475

-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




From:           mlerma@pythagoras.ma.utexas.edu (Miguel Lerma)
Date:           9 Nov 1996 06:09:43 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




rketcheso@aol.com wrote:
> Can someone tell me if it is known whether a group of Egyptian fractions
> with odd, distinct denominators can add up to 1?

1/3 + 1/5 + 1/7 + 1/9 + 1/11 + 1/13 + 1/23 + 1/721 + 1/979007 
+ 1/661211444787 + 1/622321538786143185105739
+ 1/511768271877666618502328764212401495966764795565
+ 1/209525411280522638000804396401925664136495425904
    830384693383280180439963265695525939102230139815
= 1

The last denominator has 96 digits and is written in two lines.

A slightly simpler example:

1/3 + 1/5 + 1/7 + 1/9 + 1/11 + 1/13 + 1/25 + 1/207 + 1/28307 
+ 1/24439202289 + 1/398183072324002690725
= 1

Another one:

1/3 + 1/5 + 1/7 + 1/9 + 1/11 + 1/15 + 1/19 + 1/403 + 1/103237 
+ 1/6779784609 + 1/52906135762881315915 
= 1

Miguel A. Lerma




From:           eppstein@ics.uci.edu (David Eppstein)
Date:           9 Nov 1996 11:45:50 -0800
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




In <19961109044200.XAA09315@ladder01.news.aol.com> rketcheso@aol.com wrote:
> Can someone tell me if it is known whether a group of Egyptian fractions
> with odd, distinct denominators can add up to 1?

to which I responded
> 1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/35 + 1/45 + 1/55 +
>     1/77 + 1/165 + 1/275 + 1/385 + 1/495 + 1/825 + 1/1925 + 1/2475

I now have an even better solution:

1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/35 + 1/45 + 1/55 + 1/77 +
    1/165 + 1/231 + 1/385 + 1/495 + 1/693

...anyone have further improvements?
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




From:           cet1@cus.cam.ac.uk (Chris Thompson)
Date:           10 Nov 1996 02:39:56 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




In article <19961109044200.XAA09315@ladder01.news.aol.com>, rketcheso@aol.com writes:
|> Can someone tell me if it is known whether a group of Egyptian fractions
|> with odd, distinct denominators can add up to 1?

Yes. Try 

 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/27 + 1/35 + 1/63 + 1/105 + 1/135

The lcm of the denominators in this example is 945, the smallest odd
pseudoperfect number [a pseudoperfect number is one which is the sum
of *some* of its proper divisors] - the connection should be obvious.

For more information, see section D11 "Egyptian Fractions" in "Unsolved
Problems in Number Theory" (R.K.Guy, Springer, 1994).

Chris Thompson
Email: cet1@cam.ac.uk




From:           ksbrown@seanet.com (Kevin Brown)
Date:           Sun, 10 Nov 1996 03:31:36 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




rketcheso@aol.com wrote:
> Can someone tell me if it is known whether a group of Egyptian fractions
> with odd, distinct denominators can add up to 1?

eppstein@ics.uci.edu (David Eppstein) wrote:
> to which I responded
>> 1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/35 + 1/45 + 1/55 +
>>     1/77 + 1/165 + 1/275 + 1/385 + 1/495 + 1/825 + 1/1925 + 1/2475
> I now have an even better solution:
> 1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/35 + 1/45 + 1/55 + 1/77 +
>    1/165 + 1/231 + 1/385 + 1/495 + 1/693
>...anyone have further improvements?

Here's another 15-term expansion with a smaller max denominator:

  1 = 1/3 + 1/5 + 1/7 + 1/11 + 1/15 + 1/23 + 1/35 + 1/39 +

            1/55 + 1/65 + 1/91 + 1/115 + 1/161 + 1/195 + 1/253

In Richard Guy's "Unsolved Problems In Number Theory" John Leech is
credited with the 11-term expansion

   1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/27 +

                                   1/35 + 1/63 + 1/105 + 1/135

although it isn't stated whether this is optimal, either for fewest
terms or for smallest max denominator.  I wouldn't be surprised if
this was the optimum in both senses, because it comes from the
partition of 945 into its divisors, and recall that 945 is the
smallest odd abundant number

          315 + 189 + 135 + 105 + 63 + 45 + 35 + 27 + 15 + 9 + 7
   1 =    ------------------------------------------------------
                                 945

In general I think these expansions can be generated from partitions
of any odd abundant number.  My 15-term example with max denoninator
of 253 is based on the odd abundant number

                    345345 = (3)(5)(7)(11)(13)(23)

Similarly, if we take the odd abundant number 

                      15015 = (3)(5)(7)(11)(13)

we can partition 15015 into distinct divisors of itself as follows

   15015 = 5005+3003+2145+1365+1155+1001+455+385+231+165+105

so we have another 11-term expansion

  1 = 1/3 + 1/5 + 1/7 + 1/11 + 1/13 + 1/15 + 1/33 +

                                     1/39 + 1/65 + 1/91 + 1/143

  ___________________________________________________________________
 |                /*\                                                |
 |   MathPages   /   \    http://www.seanet.com/~ksbrown/            |
 |______________/_____\______________________________________________|




From:           fredh@ix.netcom.com (Fred W. Helenius)
Date:           Sun, 10 Nov 1996 21:33:42 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




ksbrown@seanet.com (Kevin Brown) wrote:

>rketcheso@aol.com wrote:
>> Can someone tell me if it is known whether a group of Egyptian fractions
>> with odd, distinct denominators can add up to 1?

>In Richard Guy's "Unsolved Problems In Number Theory" John Leech is
>credited with the 11-term expansion
>
>   1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/15 + 1/21 + 1/27 +
>
>                                   1/35 + 1/63 + 1/105 + 1/135

>although it isn't stated whether this is optimal, either for fewest
>terms or for smallest max denominator.

Fewest terms [9]:

   1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/11 + 1/15 + 1/33 + 1/45 + 1/385.

Smallest maximum denominator [105]:

   1 = 1/3 + 1/5 + 1/7 + 1/9 + 1/11 + 1/33 + 1/35 + 1/45 + 1/55 +
         1/77 + 1/105.

Both are given as lower bounds in UPiNT, and it turns out they are
achievable.

--
Fred W. Helenius    <fredh@ix.netcom.com>




From:           cet1@cus.cam.ac.uk (Chris Thompson)
Date:           13 Nov 1996 00:44:35 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




In article <563g2p$4e6@q.seanet.com>, ksbrown@seanet.com (Kevin Brown) writes:
[...]
|> 
|> In general I think these expansions can be generated from partitions
|> of any odd abundant number. 

In the nomenclature of UPiNT this conjecture is "every odd abundant number
is pseudoperfect", or even more charmingly "there are no odd weird numbers".
[A weird number is a primitive abundant number that is not pseudoperfect.]
Sadly, this seems too good to be true... Counterexample, anyone?

Chris Thompson
Email: cet1@cam.ac.uk




From:           cet1@cus.cam.ac.uk (Chris Thompson)
Date:           13 Nov 1996 11:35:27 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




In article <56b5lj$kvt@lyra.csx.cam.ac.uk>, I wrote
>In article <563g2p$4e6@q.seanet.com>, ksbrown@seanet.com (Kevin Brown) writes:
>[...]
>|> 
>|> In general I think these expansions can be generated from partitions
>|> of any odd abundant number. 
>
>In the nomenclature of UPiNT this conjecture is "every odd abundant number
>is pseudoperfect", or even more charmingly "there are no odd weird numbers".
>[A weird number is a primitive abundant number that is not pseudoperfect.]
>Sadly, this seems too good to be true... Counterexample, anyone?

Well, now I have UPiNT in front of me {moral: never post without it...] I
should correct this: primitiveness is not required for weirdness. Still,
"no odd primitive weird numbers" <=> "no odd weird numbers", obviously.

The existence of odd weird numbers is said to be open by UPiNT, but the
Erdos prize for settling this is a mere $10. Nothing much seems to have 
changed between the 1982 and 1994 editions, or indeed since:

  S.J. Benkoski & P. Erdos
  On weird and pseudoperfect numbers
  Math. Comp. 28 (1974) 617-623   + corrigendum 29 (1975) 673

Chris Thompson
Email: cet1@cam.ac.uk




From:           ksbrown@seanet.com (Kevin Brown)
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions
Date:           Sun, 17 Nov 1996 20:18:09 GMT
Organization:   Seanet Online Services, Seattle WA




ksbrown@seanet.com (Kevin Brown) writes:
> In general I think these expansions can be generated from partitions
> of any odd abundant number. 

cet1@cus.cam.ac.uk (Chris Thompson) wrote:
> In the nomenclature of UPiNT this conjecture is "every odd abundant 
> number is pseudoperfect", or even more charmingly "there are no odd 
> weird numbers"...  The existence of odd weird numbers is said to be 
> open by UPiNT, but the Erdos prize for settling this is a mere $10. 

I imagine he valued the answer so low because he believed there 
DOES exist an odd weird number, and it would just take a little
number crunching to find it.  A proof that no such number exists
would (I think) be worth at least $11.  [By the way, has a fund
been established to pay off the open "Erdos prizes" if/when they
are settled?  Seems like a good idea, and wouldn't cost much.]

Of course, the typical odd abundant number has not just one but
MANY distinct representations as a sum of its divisors.  In this
respect the question resembles Goldbach's conjecture (where we can
see empirically that an even number is generally expressible as a
sum of two primes in MANY different way, and yet we can't prove
that there must be at least one way).

It's interesting to note that if you apply the greedy algorithm
to express the odd abundant integer N as a sum of its divisors, then
it usually works.  Moreover, in all the cases where it doesn't work,
the left-over remainder is just 1, at least for all N < 40000.  In
that range the only odd obundant numbers for which the greedy
algorithm doesn't succeed are

 4095 5775 9555 12915 21945 22275 24255 27405 29925 35805 38745

and in every one of these cases the remainder is 1.  What is the
smallest odd abundant number such that the remainder is greater
than 1?

  _________________________________________________________________
 |              /*\                                                |
 |  MathPages  /   \     http://www.seanet.com/~ksbrown/           |
 |____________/_____\______________________________________________|




From:           fredh@ix.netcom.com (Fred W. Helenius)
Date:           Mon, 18 Nov 1996 02:15:52 GMT
Newsgroups:     sci.math
Subject:        Re: Egyptian fractions




ksbrown@seanet.com (Kevin Brown) wrote:

>It's interesting to note that if you apply the greedy algorithm
>to express the odd abundant integer N as a sum of its divisors, then
>it usually works.  Moreover, in all the cases where it doesn't work,
>the left-over remainder is just 1, at least for all N < 40000.  In
>that range the only odd obundant numbers for which the greedy
>algorithm doesn't succeed are

> 4095 5775 9555 12915 21945 22275 24255 27405 29925 35805 38745

>and in every one of these cases the remainder is 1.  What is the
>smallest odd abundant number such that the remainder is greater
>than 1?

The greedy algorithm leaves a remainder greater than one for 94
values less than 2^25; the first few are:

207207, 223839, 279279, 1828827, 1851759,
2721411, 2909907, 2999997, 4603599, 5432427,
6467769, 6724809, 8027019, 8045037, 8646183,
8909901, 9124731, 9648639, 9993753, 10153143

In each case, with one exception, the remainder is two.  The
exceptional value is 15630225, for which the remainder is
three.

--
Fred W. Helenius    <fredh@ix.netcom.com>
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/carmichael.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
From:           Bill Daly <bill.daly@tradition-ny.com>
To:             sci.math
Subject:        Re: Perfect numbers and Carmichael numbers - a hidden relation
Date:           Thu, 25 Jan 2001 12:23:42 -0800

In article <94no7t$37v$1@nnrp1.deja.com>,
  tim_robinson@my-deja.com wrote:
> ...
> This is an important result.   You should submit it for publication.

Actually, it is a special case of a much more general result. Suppose
that N has a set of distinct divisors d[1]..d[k] whose sum is divisible
by N. Suppose that for some x the numbers p[i] = x*N*d[i]+1 are all
prime. Let A be the product of the p[i]. Then A is a Carmichael number.
It is easy to show that A-1 is divisible by x*N^2, and that x*N^2 is
divisible by x*N*d[i] = p[i]-1 for all i, thus the necessary conditions
are satisfied.

For example, 20 = 1+4+5+10, thus if 20x+1, 80x+1, 100x+1 and 200x+1 are
all prime, then their product is a Carmichael number. This is the case
for x=333 and x=741.

It is relatively easy to find such partitions of N. If rN =
d[1]+...+d[k], then dividing by N we get r = 1/e[1]+...+1/e[k], where
e[i] = N/d[i]. Thus, every Egyptian fraction representation of the
integer r will lead to a partition of the desired type. The example
above is derived from 1 = 1/2 + 1/4 + 1/5 + 1/20.

Note that if the set of divisors d[1]..d[k] does not include N itself,
then we can always append d[k+1] = N to the set. Thus, for example, not
only is (6x+1)(12x+1)(18x+1) a Carmichael number whenever the three
factors are prime, but also (6x+1)(12x+1)(18x+1)(36x+1) is a Carmichael
number if in addition 36x+1 is prime. For example, both 7*13*19 and
7*13*19*37 are Carmichael numbers.

An interesting possibility is the following. There are numbers N for
which there are two (or more) distinct sets of divisors whose sums are
divisible by N. (By distinct, I mean having no elements in common.) For
example, 120 = 20+40+60 = 1+2+3+4+5+6+8+10+12+15+24+30. If we can find
an x such that the corresponding p[i] are all prime, then we will have
found a Carmichael number which is the product of two smaller Carmichael
numbers. Another possibility (with fewer divisors) is 360 = 60+120+180 =
5+12+36+40+45+60+72+90.

Regards,

Bill

Sent via Deja.com
http://www.deja.com/

From:           Bill Daly <bill.daly@tradition-ny.com>
To:             sci.math
Subject:        Re: Perfect numbers and Carmichael numbers - a hidden relation
Date:           Thu, 25 Jan 2001 18:02:37 -0800

In article <94pvi9$7k$1@nnrp1.deja.com>,
  Bill Daly <bill.daly@tradition-ny.com> wrote:
> ... Another possibility (with fewer divisors) is 360 = 60+120+180 =
> 5+12+36+40+45+60+72+90.
>

Please excuse this blunder. The sets are not disjoint.

Regards,

Bill

Sent via Deja.com
http://www.deja.com/
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/conflict.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Algorithms for Egyptian Fractions



Conflict Resolution Methods


We next examine two methods for Egyptian fraction representation that employ the following simple idea: from a fraction x/y we can form a representation in unit fractions by making x copies of 1/y.  This is not an Egyptian fraction since the unit fractions are not distinct.  However we can now search for
conflicting pairs
(two copies of the same fraction) and resolve the conflict by replacing the pair with some other fractions adding to the same value.  The methods differ in the way they choose the replacement fractions.  It is trivial to prove that such methods give correct representations, but it may be harder to prove that they always halt or to analyze how well they perform.

The Pairing Method


This method uses the conflict resolution idea above.  Whenever we have a conflicting pair (two copies of some fraction 1/y), we replace them either by a single fraction 2/y if y is even, or by 2/(y+1)+2/(y(y+1)) if y is odd.  (Note that in all cases, the fractions simplify to have unit numerators.)   The order in which this is done does not matter.  Note that this process may combine pairs of fractions to form integers; e.g. this happens with sufficiently many copies of 1/7.  If this happens, we allow integers to be combined to make larger integers.
This type of method is a natural fit to the pattern-matching capabilities of
Mathematica,
so our implementation defines a function DoPairing in such a way that
Mathematica
repeatedly transforms its argument list using the replacement defined above.

DoPairing[p___,q:Rational[1,y_],q_,r___] :=
	If[OddQ[y], DoPairing[p,2/(y+1), 2/(y(y+1)),r],
				DoPairing[p,2/y,r]];
DoPairing[p___,q_Integer,r_Integer,s___] :=
    DoPairing[p,q+r,s];
		
SetAttributes[DoPairing, Orderless];

EgyptPairList[l_] := Reverse[List @@ DoPairing @@ l];
EgyptPairing[Rational[x_,y_]] :=
   	EgyptPairList[Table[1/y, {x}]]


Each replacement of 1/y+1/y by 2/y reduces the number of terms, initially x, by one, which can happen at most x times.  Each other replacement leaves the number of terms the same but reduces the list of terms in lexicographic order; one can only perform such reductions a finite number of times.  Therefore the algorithm eventually halts, with a representation having at most x terms.

Next let us determine the largest denominator that can arise.  One of the fractions must be at least 1/y, and in general if the remainder after the first few terms is a/b, the next largest fraction in the representation must be at least a/xb.  So if we remove the fractions from the final representation in order by size, then at each step the denominator is at most increased to its square times x, and the largest denominator is at most (xy)^(2^x).  But this seems somewhat pessimistic ­­ with the heuristic assumption that equal fractions are not usually generated from different starting pairs, we get  at most x replacements and in this case the largest denominator is roughly y^x (or even fewer if some denominators of intermediate terms are divisible by two).

EgyptPairing[18/23]


 1  1  1   1    1    1
{-, -, --, --, ---, ----}
 2  6  12  35  276  2415


Perhaps more important than the direct use of this method for finding Egyptian fractions is the following fact, which shows that if we want to find a representation with few terms, it suffices to represent the given number as a sum of unit fractions without worrying about distinctness.

Theorem:
Let q be represented as a sum of t unit fractions, not necessarily distinct.
Then q has a t-term Egyptian fraction representation.
Proof:
apply the function EgyptPairList defined above to the given representation.
Each step leaves the sum of the fractions unchanged, and either shrinks the list by one fraction or leaves its length unchanged.  The fact that this halts can be shown by the same argument given for the termination of EgyptPairing.

Stefan Bartels has informed me that this was first proven by Tanzo Takenouchi
[Tak21]. It would be of interest to bound the number of replacement steps performed by EgyptPairList and EgyptPairing.

The Splitting Method


The next method we describe is similar to the pairing method, but less clever: we keep a list of unit fractions as before, and resolve conflicts by replacing fractions with smaller fractions adding to the same quantity.  However, instead of replacing 2/y with 2/(y+1) + 2/(y(y+1)), we replace it with 1/y + 1/(y+1) + 1/(y(y+1)).  In other words, when two fractions conflict, we leave one of them in place and split the other one, creating a list with one more fraction than before.

DoSplitting[p___,q:Rational[1,y_],q_,r___] :=
	DoSplitting[p,q,1/(y+1),1/(y(y+1)),r];
		
SetAttributes[DoSplitting, Orderless];

EgyptSplitting[Rational[x_,y_]] :=
   	Reverse[List @@ DoSplitting @@ Table[1/y, {x}]]


It is not obvious that this method halts, but this has been proven by Graham and Jewett
[Wag91]; see also Beeckmans
[Bee93]. If no fraction arises in two different ways (once as 1/(y+1) and once as 1/(y(y+1)), we could analyze the algorithm on input x/y as having x-1 levels of splitting, each of which essentially doubles the number of terms in the representation.  The total number of terms produced would then be O(2^x), and the largest denominator would be O(y^(2^x)).  This is a best-case analysis; in practice the results will be even worse.

EgyptSplitting[5/6]


 1  1  1  1  1   1   1   1   1   1   1   1   1   1   1
{-, -, -, -, --, --, --, --, --, --, --, --, --, --, --, 
 6  7  8  9  10  42  43  44  45  56  57  58  72  73  90
 
   1     1     1     1     1     1     1     1     1
  ----, ----, ----, ----, ----, ----, ----, ----, ----, 
  1806  1807  1808  1892  1893  1980  3192  3193  3306
 
   1       1        1        1        1        1
  ----, -------, -------, -------, -------, --------, 
  5256  3263442  3263443  3267056  3581556  10192056
 
        1
  --------------}
  10650056950806


Egyptian Fractions,
Number Theory,
David Eppstein,
ICS,
UC Irvine
Formatted by
nb2html and
filter.
Last update:
.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/perfect.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
From:           don@cam.ov.com (Donald T. Davis)
Newsgroups:     sci.math
Subject:        Re: Egyptian Fractions
Date:           12 Nov 1996 12:07:00 -0500
Organization:   ....




Le Compte de Beaudrap <jd@cpsc.ucalgary.ca> writes:
>
> what is an Egyptian Fraction?

egyptian scribes did arithmetic calculations in a
seemingly bizarre way. when they had to handle a
fractional quantity, they represented it as a sum
of an integer and several "unit fractions," each of
the form 1/n. so, for example, they handled 4 5/6
as 4 + 1/2 + 1/3.  fractions with big denominators
were very cumbersome in this system, and both addition
and multiplication of fractional quantities required
a lot of table-lookup, so as to reduce 2/n terms to
standardized sums of distinct 1/m terms.

no-one knows why the egyptians found this style
necessary; it may be that they just couldn't conceive
of a better way, or that they found it more practical
for the problems that they had to solve. in their
defense, we should remember that our modern "better
ways" seem obvious to us now, but 8,000 years ago,
none of this was obvious; these people invented a lot
of what we now take for granted as "civilization."

it does seem, though, that the mental gymnastics
necessary to handle egyptian arithmetic was part
of what informed both greek number mysticism, and
the early number theory that grew out of it. for
example, the notion of a "perfect number," which
is equal to the sum of its divisors, now seems
silly and useless, but perfect numbers were of
great practical importance in working with egyptian
fractions.

                -don davis, boston
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/3-179.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Date:           Sat, 12 Oct 1996 17:05:31 -0700 (PDT)
From:           WAGON@thuban.ac.hmc.edu
Subject:        Odd Greediness
To:             eppstein@ics.uci.edu




I am busily updating my Egyptian fraction algorithms for a revision of
Mma in Action. I was testing your heuristic for the Odd Greedy, when I
discovered  3/179

Odd Greedy doesnot do well on this at all. In fact, I have not
completed the representation. So far I am at a term with 55,000
digits. The number of digits is doubleing at each stage. I hesitate
to suggest that this might be a counterexample......

stan wagon
macalester college
(visiting Harvey Mudd for a couple of weeks).




Date:           Sun, 13 Oct 1996 12:11:32 -0700 (PDT)
From:           WAGON@thuban.ac.hmc.edu
Subject:        an amazing Egyptian fraction
To:             Klee, Campbell, Guy, Eppstein, Wellin




The number 3/179 has a rather amazing output when the greedy odd Egyptian
fraction algorithm is tried out on it. Recall that it is a famous
open question whether ODD GREEDY always halts.

On 3/179 the algorithm produces 19 terms, the last of which has
439492 digits!!!

Takes a little under an hour for my computer to get this.

ANd the sequence of numerators of the remainders is somewhat amazing:

3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 3, 4, 1

Of course, when I saw the 3,4,5,6...I thought I was on to something....could
this continue forever? Well, I don't think so.

But I have to say that this puts Eppstein's heuristic, based on the fact
that the remainder/numerators might behave like a random walk, in some
doubt.

Perhaps this is the largest Egyptian fraction ever computed?

stan wagon (at Harvey Mudd College for a couple of weeks).




Date:           Sat, 19 Oct 1996 18:13:40 -0700 (PDT)
To:             Milo Gardner <gardnerm@gaia.ecs.csus.edu>
From:           Kevin Brown <ksbrown@ksbrown.seanet.com>
Subject:        Re: Is this view interesting?




Hi,
Here's something about the 3/179 phenomenon that was probably obvious 
to you, but that just occured to me.  In general if you have a fraction
N/D you can generate an expansion

       N         1         1          1          1
      ---  =   ----  +   ----   +   ----   +   ----   +  ...
       D       d[0]      d[1]       d[2]       d[3]

that is quadratically convergent (i.e., the number of correct digits 
roughly doubles with each term) using the recurrence

    (N+k) d[k+1]    =    (N+k-1) d[k]^2  -  (N+k) d[k]  +  (N+k+1)

with the initial value d[0] = 1 + (D+1)/N.  We can re-write this
recurrence in the form

                                            d[k]^2 - 1
      d[k+1]  =  d[k]^2  -  d[k]  +  1  -   ----------              (1)
                                               N+k

Of course this doesn't guarantee that the values of d[j] are necessarily
integers.  To make d[0] an integer we must have D=-1 (mod N).  Thereafter
on the kth step we must have d[k]^2 - 1 divisible by (N+k), which implies
that d[k] = +1 or -1 (mod N+k).

Taking the fraction 5/179 as an example, we have N=5 and D=179, which
gives 
          d[0] = 37
          d[1] = 1105
          d[2] = 1045489
          d[3] = 956415297493
          d[4] = 813093530024486866555885
          d[5] = 2975044898554565064901765456700565614513893820093/5

This gives a unit fraction expansion up until the denominator d[5], 
which is not an integer because d[4] = 4 (mod 9), so it's not congruent 
to +1 or -1 (mod N+k).  As a result, the sequence of remainders is

            6, 7, 8, 9, 2,...

The numerator of 

             N/D - 1/d[0] - 1/d[1] - 1/d[2] - 1/d[3] - 1/d[4]

should be 10, but d[4] happens to be divisible by 5, so the reduced 
numerator is 2.  As a result the recurrence stops giving integers, because
it's based on the assumption that the remainders increase by 1 at each
step.  Of course, we can start the recurrence over again with this new
value of N/D.

For another example, consider the fraction found by Stan Wagon, 3/179.
In this case the recurrence formula (1) gives

     d[0] = 61
     d[1] = 2731
     d[2] = 5963959
     d[3] = 29640666497443
     d[4] = 753059237496518829212535343
     d[5] = 496210938281483556785833636950652507016084391058576351

                  and so on

As Stan discovered, recurrence (1) with the initial value d[0]=61 gives
integer values for a long time, up to 19 terms.  The factorizations of 
d[k]-1 are somewhat cumulative, as shown below

   d[0]-1 = (2)(2)(3)   (5)
   d[1]-1 = (2)   (3)   (5)(7)    (13)
   d[2]-1 = (2)   (3)(3)   (7)(11)(13)(331)
   d[3]-1 = (2)   (3)      (7)    (13)(331)                     (14909897)
   d[4]-1 = (2)   (3)         (11)(13)(331)(7505)(77839)(323759)(14909897)
   d[5]-1 = (d[4]-1)(3)(3)(5)(5)(big composite)

If we let f_N(n) denote one less than the index of the first non-integer 
value given by the recurrence formula (1) with the initial value d[0]=n, 
then we saw previously that f_5(37) = 4.  I've also found that f_3(51)=2.  
Judging from the remainders quoted by Stan in his email I'd guess that 
f_3(61)=13.  It would be interesting to tabulate f(n) for each value of n 
up to, say 1000.  Of course, this doesn't completly describe an expansion,
because once the integers break down you can start over again with the 
new N/D, as illustrated by the remainders in Stan's example

  3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,    2, 3, 4,    1
 |---------------------------------------------------|   |--------|  |-|

Nevertheless, it would be interesting to know the lengths of just the
first unbroken sequence for each initial value, to see if 61 is the
optimum.  I wouldn't be surprised if there are arbitrarily large values
of f_3(n).  To put it another way, it would be surprising if there was
some finite upper limit to f_3(n).  A similar survey could be done for
f_N(n) for other values of N.

This all must be closely related to Sylvester's sequence, defined in
Sloane's Handbook of Integer Sequences (M0865) as 

                  a(n+1) = a(n)^2 - a(n) + 1

This is the same as formula (1) except it doesn't have the last term
involving N.

Anyway, I suppose you could estimate the expected value of f_N(n) for
any given N and n, because it seems to just be a matter of whether each
d[k] is or is not congruent to +-1 (mod N+k).  Assuming d[k] is equally
likely to be in any of the N+k equivalence classes mod N+k, this gives
a probability of 2/(N+k) that the kth step will give an integer.  This
certainly suggests that small numerators N will give the best chance
for long strings.  I suppose the probability of j consecutive integers
is something like
                           N!
                         ------ 2^j
                         (N+j)!

Hmmm...this suggests that Stan's example has a probability of about
1 in 425,675,250.  Maybe the assumption of equi-probable equivalence
classes is wrong?

Regards,
Kevin Brown




Date:           Sun, 20 Oct 1996 12:35:54 -0700 (PDT)
From:           Milo Gardner <gardnerm@gaia.ecs.csus.edu>
To:             David Eppstein <eppstein@ICS.UCI.EDU>
Subject:        Re: Is this view interesting?




Hi David ad Stan:

It appears that Kevin's approach would benefit by appying Mathematica
to Stan's 3/179 discussion. Kevin notes several well known areas in a 
manner that is beyond by readings. Could either of you comment on 
Kevin's latest suggestions?

At the same time I would like to receive a few clues on understanding
Sylvester's references.

Thanks again for this interesting discussion.

Milo 

attachment:

It's interesting to ponder these things. I've found more examples of 
fractions like Stan's 3/179 that persist for a long time under the 
odd-greedy algorithm.  Here's a short of list of fractions that act 
somewhat like 3/179 under iterations of
 
       x[k]   ->   x[k-1]^2 - x[k-1] + 1  -  (x^2-1)/(N+k)           (1)

Table of "Persistently Odd & Greedy" Denominators:
                            numerators
      3       5        7        11       13        17         19
    -----   -----   ------    ------   ------    ------    --------
     179     139     12473     1627     50387\   218483\    168149
     197    1399     18143    14299     84239/   223651/    223211
     377    2209     20663    17071    129947    366283\    334931
     629    2699     22049    41381    260597    371449/
     827    3649     24023    46331    594047\   398071
    1079    4909     32129    58057    627899/   589933
    1367    5039     40193    77417    674309
    1619    5809     43679    99439
    1817    5849     45863
    1997    7289     46073
    2069    8549
    2249

For example, the first "persistent" fraction with numerator 5 is 5/139.
The next is 5/1399, and so on.  Stan's example is the first with numerator 
3, followed by 3/197, 3/377, and so on.  Each of these gives integer values 
for AT LEAST the initial 9 steps of the recurrence.  That's as far as 
UBASIC will go before overflowing.  I may try to get access to a program
like Maple or Mathematica that (I think) can handle larger numbers.  Failing
that, I may try to write a program that evaluates the recurrence (mod p)
for various primes p, which should enable me to determine how long the
sequence goes on giving integers (although it won't tell me what those
integers are).

ksb wrote:
>> This all must be closely related to Sylvester's sequence, defined in
>> Sloane's Handbook of Integer Sequences (M0865) as 
>> 
>>                   a(n+1) = a(n)^2 - a(n) + 1

At 09:04 AM 10/20/96 -0700, Milo Gardner wrote:
> That is to say, in what context did Sylvster define the above
> relationship?

I don't really know.  I tried expanding the number 1 into unit fractions 
using the "prime-greedy" algorithm and got the sequence of denominators 
2, 3, 7, 43, 1811,...etc.  Then I looked up this sequence in Neil Sloane's
Handbook of Integer Sequences and didn't find it...but I did notice the 
sequence 2,3,7,43,1807,...etc, which Sloane identifies as "Sylvester's 
sequence: a(n+1) = a(n)^2 - a(n) + 1".  That didn't mean much to me, but 
then later when I derived the recurrence formula (1) from the requirement 
that the remainders increase by 1 at each step I noticed that it's very 
similar to Sylvester's recurrence.  Sloane gives a couple of references, 
so I may try to check them out and see what Sylvester was doing.

Regards,
Kevin Brown

P.S.  Here are the first 10 denominators of the odd-greedy expansion
for 5/139 = 1/29 + 1/673 + ...etc.  The remainders are 5,6,7,8,9,10,
11,12,13,14,15,...?  This is as far as UBASIC will go.

d[0] = 29

d[1] = 673

d[2] = 387553

d[3] = 131422274281

d[4] = 15352723712926705785241

d[5] = 212135512864915777239968297129711897866300033

d[6] = 409104325622371338467604953357978082953878048586177214938\
       97280640199932919070783202610049

d[7] = 153419153472690634864150017185777107559299805417890183499\
       272997519053632772626491340819360118174137086820455429713\
       416964590925749755511324783696772099377098474672840615225\
       6857153

d[8] = 217268646021018488189693240228565514275160177407850629994\
       495520904153601210114475821596442873445136368464250383097\
       897470481550522003668308567157956616246526980656914868188\
       905828194669545264606583504719656586700910755790573361615\
       845263856445950094950269233409307815652091171689242021513\
       593190860971424799113988467435498218586244472773775258862\
       7179171387841

d[9] = 438338313621061591588732697821632657090815994417952651750\
       196843659141963784334595668404882949721754133099877843743\
       374090880740156878962453066485105197189108338604511165159\
       768822504094680333940958695870836714033324261355500454558\
       525274938130297837873483082255474634839353884981645950349\
       045757155675850817042667805401129890205592460676557856529\
       369921355099326487841647049276293102282576484783153789299\
       984977815226510311393133766384512554064764350054278720622\
       297467299808394262911741266558602742112068945931175493740\
       121781914338509607752570075598240917421138794963961060662\
       320227329206946215033007635394390156167460854714040381731\
       965702377595200628217672038155021026743769778253209871213\
       9173378898005200153921921

d[10]= 179331112042279073368723150909617862212578651817045112473\
       033793212576666742738879759694836161880734798621541980956\
       679622943552391824636146352741936377202926901576036490930\
       256443385820060816291558642490866183873861387186944020506\
       814251252783375196463130031627842572919866122071468966546\
       573738820818479096114782810135863865974403720621477539052\
       840476004951966657591621894615323232240542958762462166401\
       548942120482448740243703912882459890829581318610631061799\
       774440947096694300142945116991159305470971403961209302671\
       952021385098987681550798314457193958037317087362621280207\
       909446575877818231067825488998187769831187656371958407642\
       484015049725777147870394269432019929966228079927508733554\
       577859054727030112759510495607432338531897715400945878151\
       499019285887398030789861054109403198132708748563229334549\
       903997620682547365812663388912532598542080837704907809526\
       844778550961523820410590635784859939278772894258968557133\
       396901525617285485004221406978362535131539776991167438862\
       219286151610238945433593358912118104891770182053255809299\
       911747571517307395191688603507795725851523276015400616021\
       197318989653677873226258152326576201471874885514819400669\
       481006327197732192759053734209905723597692802968611079561\
       143702311576995799510059797294457983741322023047146079841\
       196474419128836722512690797867793784728592281545700924188\
       502267396800499731996854139165660769476566424052661655801\
       39668678886207435906351359208691567820467092786305

KSB




From:           eppstein@ics.uci.edu
To:             WAGON@macalester.edu
Subject:        Re: Problem 848 (fwd)
Date:           Tue, 04 Nov 1997 11:41:37 -0800




Jeff Erickson forwarded me your above-titled message on odd Egyptian
fraction representations of 3/179.  You asked to be sent any solutions.

As I believe you know, I have a large collection of algorithms for
constructing Egyptian fractions, published in Mathematica in Educ. &
Res., and online at http://www.ics.uci.edu/~eppstein/numth/egypt/
Most of these methods produce some even denominators, but a few do not.
(Beware, I probably introduced some typos transferring these from my Mac
to my Sun.)

EgyptOddGreedy[3/179] didn't terminate in a reasonable amount of time.
I assume this is why you chose this particular fraction to ask about...

The proofs I know of that odd representations exist are I think pretty
similar to the method I implemented as EgyptRemainder, which takes as a
second argument a "powerful" number (with lots of divisors so that there
are lots of ways to form sums of divisors).  If the powerful number is
odd, you get odd representations, modulo some recombination that happens
because of possible repeated terms.  EgyptRemainder[3/179,3*3*3*5*5*7]
yielded the following:
    1/105 + 1/189 + 1/525 + 1/33831 + 1/93795
    1/105 + 1/189 + 1/525 + 1/31325 + 1/120825
    1/105 + 1/175 + 1/675 + 1/33831 + 1/93795
    1/105 + 1/175 + 1/675 + 1/31325 + 1/120825
    1/75 + 1/525 + 1/675 + 1/33831 + 1/93795
    1/75 + 1/525 + 1/675 + 1/31325 + 1/120825
    1/75 + 1/315 + 1/4725 + 1/33831 + 1/93795
    1/75 + 1/315 + 1/4725 + 1/31325 + 1/120825
    1/63 + 1/1575 + 1/4725 + 1/33831 + 1/93795
    1/63 + 1/1575 + 1/4725 + 1/31325 + 1/120825

EgyptShort[3/179,3], a close-to-brute-force search for representations
 with few terms (the second argument is the number of terms) produced a
 number of three-term representations, among them the odd
    1/61 + 1/2745 + 1/491355
    1/63 + 1/1253 + 1/11277
    1/63 + 1/1611 + 1/3759
These are therefore the only odd three-term representations.
The last of these is particularly succinct.
There is only one two-term representation of 3/179, not odd.

A small modification of EgyptSmallMult (another brute force method,
which combines small multiples of the original fraction in order to get
something that differs from the input by a fraction not divisible by the
original denominator) shows that
    3/179 = 1/895 + 1/1611 + 1/1969 + 1/2685 + 7/495,
    3/179 = 1/179 + 1/537 + 1/895 + 1/1253 + 1/2327 + 1/2685 + 3/455,
and that any other set of odd unit fractions having a difference from 3/179
that is not itself a multiple of 1/179 must include a higher denominator.
Calling EgyptShort on 7/495 produces the representations
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/77 + 1/1485 + 1/2079
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/77 + 1/1575 + 1/1925
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/77 + 1/1683 + 1/1785
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/81 + 1/891 + 1/1485
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/81 + 1/935 + 1/1377
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/81 + 1/561 + 1/1683
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/81 + 1/693 + 1/1071
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/81 + 1/765 + 1/935
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/87 + 1/495 + 1/1595
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/91 + 1/585 + 1/693
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/95 + 1/495 + 1/627
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/99 + 1/275 + 1/2475
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/99 + 1/285 + 1/1881
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/99 + 1/297 + 1/1485
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/99 + 1/315 + 1/1155
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/99 + 1/385 + 1/693
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/99 + 1/429 + 1/585
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/105 + 1/315 + 1/693
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/105 + 1/385 + 1/495
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/117 + 1/195 + 1/2145
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/117 + 1/209 + 1/1235
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/117 + 1/221 + 1/935
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/135 + 1/165 + 1/1485
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/135 + 1/189 + 1/693
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/135 + 1/209 + 1/513
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/143 + 1/195 + 1/495
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/165 + 1/225 + 1/275
    1/895 + 1/1611 + 1/1969 + 1/2685 + 1/171 + 1/209 + 1/285
which have the minimum max denominator (2685) of any odd representation
of 3/179. Unless I missed one in going through the results, all other
representations with the same max denominator have more terms.
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




Date:           Tue, 04 Nov 1997 20:26:26 -0500 (CDT)
From:           Stan Wagon <WAGON@macalester.edu>
Subject:        Re: Problem 848 (fwd)
To:             eppstein@ics.uci.edu




thanks for news.

David Bailey (NASA) has just finished with 3/2879. Last term has
3,000,000 digits. 




From:           eppstein@ics.uci.edu
To:             WAGON@macalester.edu
Subject:        Re: Problem 848 (fwd)
Date:           Tue, 04 Nov 1997 21:15:38 -0800




    David Bailey (NASA) has just finished with 3/2879. Last term has
    3,000,000 digits. 

3/2879 has 11 three-term odd representations, the one with the smallest
max denominator being 1/963 + 1/308053 + 1/2772477.

The minimum possible max denominator in any odd representation is 60459;
the unique shortest representation having that max denominator is
1/14395 + 1/20153 + 1/25911 + 1/43185 + 1/48943 + 1/54701 + 1/60459
+ 1/1615 + 1/5355.

Is there some systematic procedure of finding bad examples for the odd
greedy method, or do you and Bailey just try all of them and see which
ones run long?




Date:           Wed, 05 Nov 1997 08:58:49 -0500 (CDT)
From:           Stan Wagon <WAGON@macalester.edu>
Subject:        Re: Problem 848 (fwd)
To:             eppstein@ics.uci.edu




nope, we do not know a systematic way to find bad examples. Would be
nice to have some sort of heuristic, as I would like to find one that stumps 
Bailey's algorithm....

Stan Wagon, Professor of Mathematics
Macalester College, St. Paul, Minnesota 55105
(612) 696-6057             fax = (612) 696-6518
primary e-mail: wagon@macalester.edu
secondary e-mail: wagon@compuserve.com
web page: http://www.math.macalester.edu/~wagon

To subscribe to the Problem of the Week send a message to
<<MAILSERV@MACALESTER.EDU>>. Body of message should read
simply  SUBSCRIBE POTW-L  Macalester students should NOT
subscribe to the e-list, but get printed postings instead.




Date:           Sun, 9 Nov 1997 18:37:29 -0500
From:           stan wagon <wagon@compuserve.com>
Subject:        Egyptian fraction Mma package
To:             "INTERNET:eppstein@ics.uci.edu" <eppstein@ics.uci.edu>




1. Best to use  wagon@macalester.edu

You sounded pretty confident that the smallest-denominator example you to=
ld
me for 3/179 was indeed the smallest. Is that a certainty?

Brief Comments on Package (I have not really exercised it yet).

I note that "Splitting" is not an option for Method.
But it was surely in your MiER paper.

What about ODD GREEDY? Is that what results when one using the OddQ
restriction on Greedy?

You should follow standard Mma style for usage
messages:

Smallest::usage =3D "Select is an option to EgyptianFraction that, when s=
et
to Smallest, causes only those decompositions minimizing the maximum
denominator to be retuned.";

Several of my correspondents -- Milo Gardner, Charles Rees -- seem
interested in how exactly the Egyptians came up with their forms. M.G. ha=
s
some code that he belives captures their work, so presumably he does inde=
ed
have a rigorous algorithm....

I have found it VERY valuable to have a
ShowNumerators option. Perhaps ShowRemainderNumerators is a better name.
This causes the numerators of the remainders to be returned as part of th=
e
answer. I guess for some methods the concept of a "remainder" might not b=
e
meaningful.

I have not wholly exercised your package. Not clear
how to publicize it. I could mention it on my PoW-e-list if you don't min=
d
receiving requests for it.

Bailey is now up to 50,000,000 digits with 5/3809 via odd greedy!




From:           eppstein@ics.uci.edu
To:             wagon@compuserve.com
Subject:        Re: Egyptian fraction Mma package
Date:           Sun, 09 Nov 1997 18:49:25 -0800




    You sounded pretty confident that the smallest-denominator example
    you to= ld me for 3/179 was indeed the smallest. Is that a certainty?

Yes.  179 is prime, and the SmallMultiples method found that that
denominator was necessary even to get 3/179-(unit fractions) to have a
denominator coprime to 179.

    Bailey is now up to 50,000,000 digits with 5/3809 via odd greedy!

It has many three-term representations, the best being
    1/897 + 1/6739 + 1/20217.
Unfortunately 3809 is not prime, making it harder to find
representations minimizing the denominator.  SmallMultiples ran out of
memory and crashed my machine -- I have some ideas on reducing its
memory a little but I don't think they'd help enough.  However, I
implemented a variant, FactorMultiples (try combinations of multiples of
the largest prime factor of the denominator until the remaining fraction
is coprime to that factor) which (together with reverse greedy) found
    1/2051 + 1/2925 + 1/5567 + 1/5985 + 1/7325
The information printed by Debug->True (I renamed this to Trace->True
since it's useful for tracing progress not just debugging, and added the
partial numerators and denominators you requested) can be used to prove
that this expansion minimizes the maximum denominator.
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




Date:           Wed, 12 Nov 1997 13:27:35 -0800 (PST)
From:           Milo Gardner <gardnerm@ecs.csus.edu>
To:             eppstein@ics.uci.edu
Subject:        5/3809




Dear David,

Stan Wagon suggested that it would be alright to mention
points related to 'optiminally' converting 5/3809.

------------------------------------------------------------
Not much new to report on Egyptian fractions. I sent out a long report several
days ago.

Eppstein is working on a Mathematica package that incorporates a variety of
methods. David Bailey (and I) continue to wonder about 5/3809's behavior under
odd greedy. His program checks to 60,000,000 digits, but it did not halt. So,
if this halts, it leads to numbers having more than 60,000,000 digits.

Eppstein's package has no trouble finding reps. of 5/3809 such as: 1/897 +
1/6739 + 1/20217  and  1/2051 + 1/2925 + 1/5567 + 1/5985 + 1/7325. Eppstein
adds that his small max-denominator result reported in previous mailing is
provably optimal. Readers interested in his general-purpose Egyptian fractions
package should contact him: eppstein@ics.uci.edu  .

------------------------------------------------------------

I wonder if you have factor 3809 into:

5/13(1/293) such that

5/13 - 1/4 = (20 - 13)/(4*13)
           = (4 + 2 + 1)/(4*13)

or 

4/13 - 1/4 = (16 -13)/(4*13)
           = (2 + 1)/(4*13)

as Greeks would have considered the 

solution:

5/3809 = 293'(4' 13' 26' 52')?

pretty close to your 5-term 25 times last term denominator.

I guess 13' 26' 52' can be reduced by adding a 4th term,
by using several methods. 

Of course another historical factoring can be considered,
to find a 3-term series.

5/3809 = 1/13(5/293)

where,

5/293 = 60' + (4 + 3)/(60*293)
      = 60' + 293'(15' + 20')

or,

5/3809 = 13'(60' + 293'(15' + 20')

It appears that your optimal solution lists a 5-term series one
with a last term of 25 times 293, rather than my first attempt of 
260 times near your 3-term 69 times series.

I did all of my calculations in my head, as noted above.

Regards,

Milo Gardner




From:           eppstein@ics.uci.edu
To:             gardnerm@ecs.csus.edu
Subject:        Re: 5/3809
Date:           Wed, 12 Nov 1997 14:00:37 -0800




    It appears that your optimal solution lists a 5-term series one
    with a last term of 25 times 293, rather than my first attempt of 
    260 times near your 3-term 69 times series.

You should note that I was looking for solutions in which all
denominators are odd, since this was in the context of the odd greedy
method performing badly.  Most of the denominators in the solution you
mention 293'(4' 13' 26' 52') are even.

If you don't require denominators to be odd there are better solutions,
e.g. 762' 2902458' (if you are trying to minimize the number of terms)
or 2344' 3223' 3432' 3516' (if you are trying to minimize the max denominator).

-d




From:           eppstein@ics.uci.edu
To:             wagon@macalester.edu
Subject:        odd greedy
Date:           Tue, 25 Nov 1997 16:08:30 -0800




Your and D. Bailey's experiments with odd greedy have been casting a lot
of doubt on my heuristic argument that the numerator declines on average
(the argument based on assuming that the next numerator for a fraction
x/y should behave like a random variable uniformly distributed over
the integers in the interval (0,2x)).

Here is some more doubt.

I tried implementing a method for computing the numerators of the odd
greedy method based only on the knowledge of the denominator mod some base
(rather than the true denominator).  At each step the divisions you do
cause the base to (usually) decrease; so the method could terminate due
to lack of information rather than terminating due to reaching zero.

Anyway, I started from 3/x and worked through all possible sequences of
numerators from there.  There are many fewer than one might expect:

- If x is 1 mod 5 the sequence is {3,1}.
- If x is 5 or 11 mod 30 the sequence is {3,4,1}.
- If x is 23 mod 30 the sequence is {3,4,5,4,1}.
- If x is 29,47,59, or 77 mod 90 the sequence is {3,4,5,1}.
- If x is 17,269,287 or 539 mod 630 the sequence is {3,4,5,6,1}.
- If x is 89 or 467 mod 630 the sequence is {3,4,5,6,7,2,1}.

The remaining cases, 107,179,197,359,377,449,557, and 629 mod 630
all begin with the same sequence {3,4,5,6,7,8,9,10,...}.
Starting from here I got a little sloppy about exhaustively searching
all values, so my results are a little suspect, but it seems that
depending on the value of x mod 3050, the next numerator should be
either 3 or 11. The values of x leading to a 3 seem to all have the
sequence {3,4,5,6,7,8,9,10,3,4,1}.  The values of x leading to 11
either have the sequence {3,4,5,6,7,8,9,10,1} (if x has the right value
mod 11 to cause a cancellation) or {3,4,5,6,7,8,9,10,11,...}.

As you computed over a year ago, the full sequence of numerators for
3/179 is {3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,2,3,4,1} so this pattern
of increasing the numerator by one continues for many more steps.  But
why does this increase happen so often for such a small number as 179?
Why are there so few other choices for possible numerator sequences?
All numerator sequences I've seen so far either terminate quickly or
eventually fall into the increase-by-one pattern e.g. 5/3809:
{5,2,3,4,5,6,7,...}; why?

-d




From:           eppstein@ics.uci.edu
To:             wagon@macalester.edu
Subject:        odd greedy
Date:           Tue, 25 Nov 1997 16:19:12 -0800




    All numerator sequences I've seen so far either terminate quickly or
    eventually fall into the increase-by-one pattern e.g. 5/3809:
    {5,2,3,4,5,6,7,...}; why?

Oops, not 3809, I meant 3803 (or other numbers congruent to 83, 203, or
263 mod 300).

In fact I wonder whether you meant 3809 when you sent the following
paragraph to your potw mailing list:

    David Bailey (and I) continue to wonder about 5/3809's behavior
    under odd greedy. His program checks to 60,000,000 digits, but it
    did not halt. So, if this halts, it leads to numbers having more
    than 60,000,000 digits.

My calculations indicate it has a three-term odd greedy expansion:
5/3809 = 1/763 + 1/484379 + 1/201104957599.  What number is Bailey
really working on?  Not 3803 either, it has numerator sequence
{5,2,3,4,5,6,7,8,9,10,1}.

-d




Date:           Tue, 25 Nov 1997 19:03:30 -0500 (CDT)
From:           Stan Wagon <WAGON@macalester.edu>
Subject:        Re: odd greedy
To:             eppstein@ics.uci.edu




5/5809

is the cute one. Sorry for the typo.

I am glad to see you are relooking at your heuristic. It would be nice
to have a heuristic for this question....but I am rather hoping some
examples DO go to infinity!

Looks like you are getting some insight into the "increase-by-one"
sequence?....or are you just observing that they exist?

stan

(I have no info about the Japanese...will ask Bailey again if
he has asked them.)




From:           eppstein@ics.uci.edu
To:             wagon@macalester.edu
Subject:        Re: odd greedy
Date:           Tue, 25 Nov 1997 18:16:03 -0800




In a few seconds Mathematica was able to carry out the odd greedy
method for 5/5809 modulo 37943838567204570000 and determine that its
numerator sequence is
{5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1}.

In fact this was much quicker than finding the expansion
1/2355 + 1/4239 + 1/4995 (this same expansion was returned both by
searching for min number of terms with Method->MinimizeTerms and by
searching for min max denomator with Method->SmallMultiples, both slower
than doing the odd greedy modulo arithmetic).
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




From:           eppstein@ics.uci.edu
To:             WAGON@macalester.edu
Subject:        Re: odd greedy
Date:           Mon, 01 Dec 1997 10:45:03 -0800




    Late news: David Eppstein, by working modulo 37943838567204570000,
    has shown that the odd greedy algorithm for a halts with 27 terms,
    and the numerator remainder sequence is: 5, 6, 7, . . . , 30, 1.

    Correct?

Sounds good to me.

    I guess we could change the problem to:
    Given n, determine the total number of digits in the odd greedy expansion.

One observation I made over the weekend is that with my new code,
finding the sequence of odd greedy numerators (if finite) now takes time
polynomial in the combined input and output sizes.  Computing the exact
denominators is exponential if all you want is the numerators since the
integer precision needed roughly doubles at each step -- the modular
code's required precision increases at each step too but linearly rather
than exponentially.

In other words, it's not a coincidence that my code worked for 5/5809
and Bailey's didn't.  The new modular code is so fast that only an
extremely long finite sequence, much longer than the sequence for
5/5809, would fail to be distinguished from an infinite sequence.




Date:           Wed, 03 Dec 1997 12:52:02 -0500 (CDT)
From:           Stan Wagon <WAGON@macalester.edu>
Subject:        from helaman
To:             _eppstein: ;




some old comments from helaman ferguson.....

--Boundary_(ID_XvH1SeoOMjDRjTmJrmDg2g)
Content-type: TEXT/PLAIN; CHARSET=US-ASCII

> [**** Insert text here ****]
> 
> --Boundary_(ID_q0gHSkKJWP+ylWQg0CBy5Q)
> Content-type: MESSAGE/RFC822
> 
> Return-path: <helamanf@super.org>
> Received: from super.super.org by macalester.edu (PMDF V5.1-8 #15853)
>  with ESMTP id <01IPVM94RJJO001WO4@macalester.edu> for WAGON@macalester.edu;
>  Tue, 11 Nov 1997 09:02:42 CDT
> Received: by super.super.org; id KAA18669; Tue, 11 Nov 1997 10:01:56 -0500 (EST)
> Received: from gotham.super.org(192.239.79.2) by super.super.org via smap (3.2)
>  id xma018665; Tue, 11 Nov 1997 10:01:36 -0500
> Received: from opal.super.org (opal [192.239.79.68])
>  by gotham.super.org (8.6.12/8.6.12.1) with ESMTP id KAA11021; Tue,
>  11 Nov 1997 10:01:34 -0500
> Received: (helamanf@localhost) by opal.super.org (8.6.12/8.6.12.client)
>  id KAA20510; Tue, 11 Nov 1997 10:01:34 -0500
> Date: Tue, 11 Nov 1997 10:01:34 -0500
> From: helamanf@super.org (Helaman R.P. Ferguson)
> Subject: Re:  Egypt
> To: WAGON@macalester.edu, dbailey@nas.nasa.gov, helamanf@super.org,
>  jborwein@cecm.sfu.ca, njas@research.att.com, pborwein@cecm.sfu.ca
> Message-id: <199711111501.KAA20510@opal.super.org>
> 
> It is not surprising that the reciprocal odd expansions for
> rationals p/q, q odd should have arbitrarily long lengths.
> When q is even the reciprocal odd expansions are infinite,
> so whenever p/q, q odd is particularly close to another
> rational a/b, b even or sum thereof we expect the
> reciprocal odd expansion to be long. For example,
> 
> 5/5809 = 1/1162 + 1/6750058
> 
> 
> --Boundary_(ID_q0gHSkKJWP+ylWQg0CBy5Q)--

Stan Wagon, Professor of Mathematics
Macalester College, St. Paul, Minnesota 55105
(612) 696-6057             fax = (612) 696-6518
primary e-mail: wagon@macalester.edu
secondary e-mail: wagon@compuserve.com
web page: http://www.math.macalester.edu/~wagon

To subscribe to the Problem of the Week send a message to
<<MAILSERV@MACALESTER.EDU>>. Body of message should read
simply  SUBSCRIBE POTW-L  Macalester students should NOT
subscribe to the e-list, but get printed postings instead.

--Boundary_(ID_XvH1SeoOMjDRjTmJrmDg2g)--




From:           eppstein@ics.uci.edu
To:             WAGON@macalester.edu, helamanf@super.org
Subject:        Re: from helaman
Date:           Wed, 03 Dec 1997 11:13:45 -0800




> It is not surprising that the reciprocal odd expansions for
> rationals p/q, q odd should have arbitrarily long lengths.
> When q is even the reciprocal odd expansions are infinite,
> so whenever p/q, q odd is particularly close to another
> rational a/b, b even or sum thereof we expect the
> reciprocal odd expansion to be long. For example,
> 
> 5/5809 = 1/1162 + 1/6750058

Does this really make sense?

I don't see how being within 1/6750058 is "particularly close"
to the even rational 1/1162 when the odd greedy expansion gets
within much closer distances after a very small number of terms.

In general if p/q (q odd) is within distance d of an even fraction r/s
(suppose as above that s<q) then d is bounded below by something like
1/q^2, but the odd greedy expansion for p/q will have denominators much
bigger than q^2 in only three terms.  So after those three terms the odd
greedy expansions for p/q and r/s should diverge.

In this particular example the expansions don't even stay similar for
more than two terms: 5/5809 = 1/1163 + 1/1125979 + ... 
while 1/1162 = 1/1163 + 1/1351407 + ...

By the way, I've been experimenting more with my modular code,
looking for fractions having the same pattern as 5/5809 of the
numerators increasing by one at each term.  Starting with 7, I was able
to find plenty of fractions 7/x for which the numerators increased all
the way to 38 (for instance 7/1113923414579765333660423), but I am
having trouble finding any for which they increase to 39.
Other arithmetic sequences of numerators also seem easy enough to generate.
-- 
David Eppstein      UC Irvine Dept. of Information & Computer Science
eppstein@ics.uci.edu  http://www.ics.uci.edu/~eppstein/




From:           eppstein@ics.uci.edu
To:             WAGON@macalester.edu
Subject:        Re: size
Date:           Thu, 04 Dec 1997 11:50:06 -0800




    In the traditional greedy situation it is easy to prove a functional
    relationship between the number of digits in the denominators and
    the length of the representation. It is in the Egyptian chapter in
    Klee/Wagon. Quite possibly the same ideas would work in the odd
    case.

It should be easy to compute the approximate denominators in floating
point, to any reasonable number of significant digits, since each is a
simple function of the previous denominator and numerator, and we can
now find the numerators exactly.  So the first digits of the
denominators are easy, and the last digits are also easy (by the modular
arithmetic I've been doing), it's the middle that's hard (because it's
too big, not unlike certain peoples' middles in this holiday season). 

I could even modify my program to output a straight-line-program for
evaluating all the denominators, e.g. d1=(an explicit integer),
d2=(some explicit quadratic in d1), d3=(some explicit quadratic in d2),
etc.  But of course you wouldn't have the time and space to actually
expand all these quadratics in exact integer arithmetic...

    So your latest example might involve a trillion digits! 

From 7 to 38 involves 32 doublings of the number of digits.
So the total number of digits should be roughly 25*2^32 ~ 10^11,
somewhat shy of the trillions.

-d
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/intro.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Algorithms for Egyptian Fractions



Introduction


When we use fractional numbers today, there are two ways we usually represent them: as fractions (ratios of integers) such as 5/6, and as decimal numbers such as 0.8333.
Computers typically use binary versions of either of these two representations.   But these are not the only possibilities.  The ancient Egyptians used a third method: instead of writing down a single fraction, they would write a sum of several distinct
unit fractions,
each having numerator one.  For instance the Egyptians would have written 5/6 as 1/2 + 1/3 (of course, they would have used hieroglyphics instead of Arabic numerals).  Today such sums are known as
Egyptian fractions.
(We will see another important modern representation,
continued fractions,
later.)

Any number has infinitely many Egyptian fraction representations, although there are only finitely many having a given number of terms
[Ste92]. It is not known how the Egyptians found their representations, but today many algorithms are known for this problem, each behaving differently in terms of the number of unit fractions produced, the size of the denominators of the fractions, and the time taken to find the representations.  For a good but brief introduction to Egyptian fraction algorithms and their implementation in
Mathematica,
see Wagon's book
[Wag91]. Here we examine a number of algorithms in more detail, implement them, and analyze their performance.  We also include some investigations into how many unit fractions are needed to represent rational numbers having small numerators.

We will represent Egyptian fractions as lists of unit fractions.  The original rational number represented by such a list can be recovered by Plus@@%.  Throughout we use q to denote the rational number we are trying to represent, or x/y when we want to talk about its numerator and denominator separately.

An earlier version of this notebook was published as "Ten Algorithms for Egyptian Fractions" in
Mathematica in Education and Research.
I have since improved the
binary remainder method, and added the
reverse greedy,
generalized remainder, and small multiple methods.


Methods Based on Approximation



Conflict Resolution Methods



Methods Based on the Binary Number System



Continued Fraction Methods



Reverse Greedy Methods



Brute Force Methods



Small Numerators



References


Egyptian Fractions,
Number Theory,
David Eppstein,
ICS,
UC Irvine
Formatted by
nb2html and
filter.
Last update:
.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/numth/egypt/why.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
From:           chavey@beloit.edu (Darrah Chavey)
Date:           Fri, 15 Nov 1996 10:36:09 -0600
Newsgroups:     sci.math
Subject:        Re: Egyptian Fractions




In article <56aark$cdr@gza-client1.cam.ov.com>, don@cam.ov.com (Donald T.
Davis) wrote:

>Le Compte de Beaudrap <jd@cpsc.ucalgary.ca> writes:
>>
>> what is an Egyptian Fraction?
>
>egyptian scribes did arithmetic calculations in a
>seemingly bizarre way. when they had to handle a
>fractional quantity, they represented it as a sum
>of an integer and several "unit fractions," each of
>the form 1/n. so, for example, they handled 4 5/6
>as 4 + 1/2 + 1/3.  fractions with big denominators
>were very cumbersome in this system, and both addition
>and multiplication of fractional quantities required
>a lot of table-lookup, so as to reduce 2/n terms to
>standardized sums of distinct 1/m terms.

They did have a special number for 2/3-rds.

>no-one knows why the egyptians found this style
>necessary; it may be that they just couldn't conceive
>of a better way, or that they found it more practical
>for the problems that they had to solve. ...

There are a couple of reasons. First, they wrote a number 1/n
as the number n with an oval above it. This makes it difficult
to come up with a notation for m/n without really inventing a
completely new notation, which is always difficult.

   Second, the unary fractions come up naturally in their method
for division. For example, to divide 53 by 8, they would proceed
as follows: Begin with two columns, one headed by "1" and the other
by "8". Double each column until just less than 53:
               1      8
               2     16
               4     32
Now start over from the 1 and 4 and halve each number until the 
second column is "1". I use () to stand for the oval that should
really be above the numbers in the first column:
   1/2 =    () 2      4
   1/4 =    () 4      2
   1/8 =    () 8      1
Now mark the numbers in the second column which add up to 53 (by the notion 
of binary expansion of a number, there will be a unique way to do this)
               1      8
               2     16  *
               4     32  *
   1/2 =    () 2      4  *
   1/4 =    () 4      2
   1/8 =    () 8      1  *
The corresponding marked numbers in column 1 give you your answer:
    53 / 8  =  2 + 4 + ()2 + ()8, or 2 + 4 + 1/2 + 1/8.
Thus the notion of unary fractions, 1/n, comes up naturally from this
algorithm for division. (Division by numbers other than powers of 2
make life more interesting for the Egyptians.)

   Dominic Alivastro, "Ancient Puzzles", suggests a third reason why 
this use of unary fractions is good. Consider the problem Ahmes poses 
of dividing 3 loaves of bread between 5 people. We would answer "each
person gets 3/5-ths of a loaf". If we implemented our solution, we might
then cut 2 loaves into 3/5 | 2/5 pieces, with bread for 3 people; then
cut one of the smaller pieces in half, giving the other two people 
2/5 + 1/5 pieces. Mathematically acceptable, but try this with kids and
they will insist that it is not an even division. Some have larger pieces,
some have smaller. Ahmes would calculate 3/5 as :
   3/5 = ()3 + ()5 + ()15    [ = 1/3 + 1/5 + 1/15 ]
Now cut one loaf into fifths, cut two more into thirds, then take one of
the 1/3-rd pieces and cut it into 5-ths (for the 1/15-th pieces), and you
can now distribute everyone's 3/5-ths share in a way that _looks_ equal,
since they will have exactly the same size pieces. (And no, I don't want
to argue about the crust.)

Darrah Chavey             -- I'm dead, Horatio.  (Hamlet)
Math/CS Dept.             -- He's dead Jim!      (Not quite Hamlet)
Beloit College
700 College St. Beloit, WI 53511
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/cryptogram/source.html
##-----------------TITLE------------------------##
Cryptogram Helper Source Code
##------------------TEXT------------------------##
Cryptogram Helper Source Code




Cryptogram.javaUser interface and main solver loop.LetterProbability.java26x26 probability matrix of letter translation likelihoods,
    and solver code for computing new matrix from word probabilities.WordPatterns.javaWord frequency list lookup, code for parsing phrases into words,
    and computation of letter repetition patterns within words.freqc.txt.gzEnglish word frequency dictionary (provided for reference only;
    the actual applet doesn't use this file).trie.gzList of dictionary words, compressed by running
    trieize.c on words.txt and
    gzipping the output.freq.gzList of word frequencies, compressed by running
    freq.c on words.txt and
    gzipping the output.puzzles.txt.gzPlaintext list of lines for "Import Random Cryptogram" button.
    Pressing the button chooses one line and picks a random cryptogram
    (with no letter translated to itself).


Return to
Cryptogram HelperCryptogram Helper algorithm
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/construct.html
##-----------------TITLE------------------------##
B35/S236 Construction Universality
##------------------TEXT------------------------##
B35/S236

Construction Universality

Like life, it seems possible to build programmable replicators as
well as programmable computers. The only
ingredients needed for the computers above (using the sliding block
memory) are p68s and gliders. p68s can be built by colliding three
gliders: 



The glider "side-tracking" mechanism from Life doesn't seem to
work for placing gliders on perpendicular tracks arbitrarily far
away from the replicator -- the kickback reactions I know of move
the track of the kicked glider inwards, towards the source of the
glider causing the kickback, rather than outwards as in life.
Instead, Dean suggests pushing a block to the desired track then
hitting it with two gliders to form a third sideways-going
glider:



These reactions together with the glider kickbacks are
sufficient to place gliders on arbitrary tracks, far away from the
source of the gliders. It remains to be seen whether these gliders
can all be synchronized in such a way that they put together a
computer, but it seems likely that this should all work.


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/glider.html
##-----------------TITLE------------------------##
B35/S236 Gliders and Spaceships
##------------------TEXT------------------------##
B35/S236

Gliders and Spaceships

Despite the resemblance of the rules to Life's (differing only
in B5 and S6), none of the usual life gliders and
spaceships seem to work here. But the reason I started looking
at B35/S236 was its small 2c/5 glider, which arises spontaneously
from a lot of reactions:



There are also other 2c/5 spaceships (the second one below has
period 10):





Many large c/2 spaceships:



Several large c/3 spaceships:



c/4, c/5, c/6, and 3c/7 spaceships, and a c/4 diagonal
(glide-reflect) spaceship:





All three 2c/5 spaceships, and the c/6 spaceship, can be shot from guns.  Many higher-period c/2 spaceships
can be made using
Jason Summers' puffer constructions.


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/logic.html
##-----------------TITLE------------------------##
B35/S236 Glider Logic
##------------------TEXT------------------------##
B35/S236

Glider Logic

We can build logic circuits out of several elements: guns to create constant-one signals; vanishing reactions used as "a and not b" gates
(which are sufficient to build up all other boolean formulas);
eaters to delete stray gliders; turns to
connect and resynchronize signal paths; and two-to-one or
two-to-two glider reactions to copy
signals. 

The only remaining ingredient for
universality
is some kind of
memory. Dean suggests a sliding block memory, based on reactions in
which glider salvos push or pull a block two squares:





To detect a block in the zero position, we shoot a glider at
it:



If the glider disappears we know the block was at zero; we then
rebuild the block using a head-on collision:



I prefer a delay line memory to a sliding block, for reasons of
computational efficiency. The best version of this I've been able
to set up involves reflecting salvos of gliders off the back of a
pair of c/3 spaceships:



One could instead base a delay line on a reaction with the c/5
spaceship that turns a glider into a block, but that would require
more careful synchronization.

These all haven't been put together into an explicit universal
computer, but I think it should be clear that such a computer
exists.


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/guns.html
##-----------------TITLE------------------------##
B35/S236 Glider and Spaceship Guns
##------------------TEXT------------------------##
B35/S236

Glider and Spaceship Guns

Dean found a very simple gun based on two p68 oscillators: 



The p68 can also eat gliders, or turn them 180 or 90
degrees:





The timing of p68 glider streams turns out to be quite
convenient for many reactions, but if the p68 gun is not thin
enough, one can use these thinner guns:





Perhaps the most versatile gun is one with period 408, allowing
glider reactions to involve both p24 and p68 oscillators:



It is also possible, but more difficult, to base a gun on the
p24 oscillator alone. It seems likely that the following gun can be
modified to produce periods of the form 24*k for all
sufficiently large values of k; the gun shown has 
k = 9.



Three glider guns can be combined to form a 4c/10 spaceship
gun:



One can also use glider collisions to make a gun for the wide
2c/5 spaceship



and for the c/6 spaceship: 




B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/breeder.html
##-----------------TITLE------------------------##
B35/S236 Quadratic Growth
##------------------TEXT------------------------##
B35/S236

Quadratic Growth

It seems likely, but very difficult to prove, that chaotic regions in
B35/S236 tend to grow quadratically. In life, quadratic growth can
instead be achieved by "breeders", puffer train convoys that lay out a
linear sequence of glider guns.  In B35/S236,
also, breeders exist.  I used to not know of any puffer trains, so instead I formed the following
breeder out of "tethered rakes": fixed gun emplacements which send out
glider salvos towards a slower (c/3) spaceship, forming sideways gliders which meet to
make the sequence of guns. The only technical complication is that the
gun sequence ends up between the tethers, so the gliders need to be
timed to pass through the tethers unharmed.



(Note: this breeder was developed before I found the three-glider p68 synthesis, or the 7x7 c/3 spaceship, and could likely be somewhat
simplified by using both of these newer ideas.)


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/react.html
##-----------------TITLE------------------------##
B35/S236 Glider Reactions
##------------------TEXT------------------------##
B35/S236

Pure Glider Reactions

There are many ways of colliding two gliders so both vanish: 



These vanishing reactions can be used as sparks for other
reactions, or to form glider logic
circuits. There are also several ways of colliding two gliders so
that only one glider results:



These reactions can be used to position gliders for another
reaction, to synchronize glider logic streams, or to
nondestructively test for the presence of a glider. The reactions
in which two head-on gliders produce a sideways glider should be
especially useful in building glider salvos by setting up pairs of
guns on opposite sides of the salvo track; this reaction is also
used in my delay line construction.

Less useful curiosities are reactions in which two head-on
gliders turn into two sideways gliders, and in which four gliders
become six or six become eight. (However the first reaction could
be used for duplicating glider streams, and the second forms the
basis of the p216 gun.)






B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/open.html
##-----------------TITLE------------------------##
B35/S236 Open Questions
##------------------TEXT------------------------##
B35/S236

Open Questions

I haven't found anything in B35/S236 similar to Life's eater. Is
there a stable glider eater? Or a stable glider mirror?

One of the most common chaotic growth seeds is the boat, V, or W
pentomino (all different phases of the same pattern). Can this
pattern be stabilized and made to follow tracks formed by still
lifes or oscillators, the way the Herschel can in life?

Which still lifes, oscillators, and spaceships can be
synthesized by glider crashes
or produced by puffers?

Which other spaceships can be shot from
guns? Is it possible to
make a spaceship gun in which none of the intermediate patterns is
a glider?

There exist stable infinite patterns with density at least 80%
(compared to life for which the maximum density is 50%). Can such
density be achieved in a finite stable or oscillating pattern? Is
there a finite pattern which grows to fill space at this
density?


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/puffer.html
##-----------------TITLE------------------------##
B35/S236 Puffers and Rakes
##------------------TEXT------------------------##
B35/S236

Puffers and Rakes

Jason Summers and I independently discovered a small pattern
that acts like a period-38 c/2 "chaos puffer" -- it repeats after
38 generations with a chaotic mess behind it. It is shown below in
two forms; the larger one is more robust to perturbations, but
nevertheless is eventually killed off by the growing chaos behind
it. The third pattern below is a larger almost-puffer found by
Jason, that also eventually gets killed off by its own debris.





We don't know how to make a tame p38 puffer from these patterns.
Fortunately, by perturbing the smoke very early, Jason was able to
make spaceships of other periods, such as
8, 10, and 20:





He also found another chaos puffer perturbation, with period
24.



The p20 spaceship is easy to turn into a simple puffer that
puffs 2 or 4 tubs:



It proved to be difficult to turn this into a rake (puffer that
emits only gliders), but after considerable noodling around, Jason
came up with this p40 example:



The rake about sends its gliders sideways, to the right. It
would also be useful to send gliders forwards and backwards. Period
40 is not large enough to build a forward rake. Using a 3c/6
spaceship, the rake can be thinned out to p120, allowing a forward
rake to be built. Jason thinks there's probably a better way to do
this; e.g. using p4 c/2 spaceships to turn the 2c/5 spaceships.



Period 80 would also work, but we don't know how to build a p80
sideways rake. Here's a way to build a chaotic "p80" puffer based
on de-phasing a p6 spaceship:



Now that we have rakes, it should also be possible to use them to
construct breeders. However, since these
rakes are unable to produce closely-spaced glider salvos directly,
one would either need to combine forward and back rakes to make
such salvos, or to use a gun synthesis
that allows the gliders to come in one-at-a-time.


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/osc.html
##-----------------TITLE------------------------##
B35/S236 Still Lifes and Oscillators
##------------------TEXT------------------------##
B35/S236

Still Lifes and Oscillators

Many of Life's simpler still lifes and oscillators continue to work
in B35/S236, but there are some surprises. 



Particularly useful seem to be the small period 24 and period 68
oscillators, which shoot off large sparks that could be useful in
various reactions.


B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/b35s236/shuttle.html
##-----------------TITLE------------------------##
B35/S236 Glider Shuttles
##------------------TEXT------------------------##
B35/S236

Glider Shuttles

The p216 gun uses a variety of different
p24-glider interactions, but there is one more 180-degree turn that
I didn't use. Here is a period-120 shuttle that shows it off:



One can also base shuttles on reflections from other
oscillators; Dean found this family of period 24+30n shuttles based
on a p3 turn.




B35/S236 -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b36s23.html
##-----------------TITLE------------------------##
Replicators: HighLife
##------------------TEXT------------------------##
Replicators: B36/S23 (HighLife)

This near-relative of Conway's Life was the first interesting rule in
which a replicator was discovered, by Nathan Thompson in 1994.
The replicator (shown in its symmetric phase) operates in a
one-dimensional diagonal 2-unit grid, replicating itself every 12 generations.



Rows of replicators can be capped off by blocks or eaters, resulting in
arbitrarily high-period oscillators.


   


Since HighLife is so similar to life, it has
many
of the same spaceships, including the small c/4 diagonal glider.
An alternate method of capping a row of replicators produces glider guns
of arbitrarily high periods.



Another method of capping a row of replicators, by a single
blinker, produces a spaceship known as the bomber.
The bomber moves diagonally 4 positions every 24 generations,
after which a blinker appears in the same position on the other side
of the bomber.



Two side-by-side bombers can form puffers such as these two rakes,
which leave sideways- and backwards-going trails of gliders.


   


Dirtier puffers, spewing irregular patterns of blinkers and biloafs,
can be formed by capping a row of replicators in yet another way.



It's even possible for a puffer based on a bomber and replicator to spew
out a trail of rows of replicators.  Each row copies itself
perpendicularly to the motion of the puffer.  The pattern evolves to
form a large 
Sierpinski triangle
filled with replicators.  The growth rate of the pattern
(number of live cells after n generations) is O(nlog23),
where the exponent is the fractal dimension of the Sierpinski triangle.



It's possible to use replicator-based oscillators to make a gun
that periodically shoots bombers



or a "breeder" that shoots sideways glider rakes, producing a quadratic
growth rate.



Finally, Dean Hickerson has found a "push
reaction" in which two sets of replicators push a blinker forward
eight units diagonally.  Since the bomber reaction allows replicators to
pull a blinker the same amount, it should be possible to set up
arbitrarily-slow replicator-based spaceships in which two sets of
replicators push a blinker at the front end, and each pull a blinker at
the other end.  However, the likely size of these things is so huge
(exponential in the period, leading to a pattern size of around
236 replicator units for Dean's reaction with the shortest
possible repeat time) that no explicit example has been made.
ETA January 2013: After the discovery of better reactions, Adam Goucher,
Helmut Postl, and others have
explicitly constructed "basilisks", spaceships of this type, with speeds c/24, c/32,
c/63, and c/69. In principle infinitely
many other speeds should also be possible. Goucher even constructed a
basilisk gun, for the c/24 basilisk.

For more detailed descriptions of many more interesting patterns in this
rule,
see David
Bell's article on HighLife.


Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/highper.html
##-----------------TITLE------------------------##
The twenty highest period gliders
##------------------TEXT------------------------##
The twenty highest period gliders

			
				The Caterpillar (glider 1), size 4195x330721, speed 17c/45, orthogonal, period 270, rule B3/S23Glider 1432, size 4x5, speed c/132, orthogonal, period 264, rule B0135/S014Glider 1434, size 4x5, speed c/230, diagonal, period 230/2, rule B34568/S268Glider 4241, size 5x7, speed 3c/170, orthogonal, period 340, rule B012456/S1Glider 6000, size 6x8, speed c/33, orthogonal, period 264, rule B01247/S1236Glider 6009, size 6x8, speed 7c/296, diagonal, rule B0145/S234Glider 6010, size 6x8, speed 5c/388, diagonal, rule B0123456/S1356Glider 6801, size 8x8, speed c/368, diagonal, rule B3457/S456Glider 6802, size 8x8, speed c/2068, orthogonal, rule B34578/S456Glider 9089, size 10x8, speed c/158, orthogonal, period 316/2, rule B34567/S0456Glider 9553, size 10x10, speed c/723, diagonal, rule B34578/S4568Glider 9863, size 11x6, speed 7c/330, slope 7/5, rule B015/S14Glider 10356, size 9x11, speed 3c/340, orthogonal, rules B367/S35678 and B3678/S35678Glider 10671, size 11x11, speed c/245, diagonal, rule B3457/S456Glider 11888, size 7x13, speed c/20, orthogonal, period 220, rule B012567/S3Glider 13047, size 12x14, speed c/5648, orthogonal, rule B3457/S4568Glider 13114, size 14x13, speed 5c/256, orthogonal, rule B0123457/S0346Glider 13207, size 15x5, speed c/2, orthogonal, period 400, rule B378/S3567Glider 20015, size 17x38, speed 7c/150, orthogonal, period 300, rule B36/S245Glider 21681, size 280x163, speed 7c/300, orthogonal, period 1200, rule B36/S245

				
					[Cellular Automata]
					[Smallest]
					[Biggest]
					[Slowest]
					[Jumpiest]
					[Most versatile]
					[Off-slope]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/slowest.html
##-----------------TITLE------------------------##
The twenty slowest gliders
##------------------TEXT------------------------##
The twenty slowest gliders

			
				Glider 1432, size 4x5, speed c/132, orthogonal, period 264, rule B0135/S014Glider 1433, size 5x4, speed c/132, diagonal, rule B01348/S14Glider 1434, size 4x5, speed c/230, diagonal, period 230/2, rule B34568/S268Glider 5213, size 7x7, speed c/156, diagonal, rule B0124/S12346Glider 6406, size 8x7, speed c/180, diagonal, rule B01235/S013456Glider 6797, size 8x8, speed c/118, diagonal, rule B347/S356Glider 6798, size 8x8, speed c/129, diagonal, rule B34578/S458Glider 6801, size 8x8, speed c/368, diagonal, rule B3457/S456Glider 6802, size 8x8, speed c/2068, orthogonal, rule B34578/S456Glider 7683, size 9x7, speed c/161, diagonal, rule B34568/S458Glider 8224, size 9x9, speed c/125, diagonal, rule B34568/S18Glider 8226, size 9x9, speed c/178, diagonal, rule B0124/S0136Glider 8227, size 9x9, speed c/195, diagonal, rule B3458/S456Glider 9088, size 8x10, speed c/154, orthogonal, rule B0235/S1234Glider 9089, size 10x8, speed c/158, orthogonal, period 316/2, rule B34567/S0456Glider 9553, size 10x10, speed c/723, diagonal, rule B34578/S4568Glider 10670, size 11x11, speed c/177, diagonal, rule B34568/S4578Glider 10671, size 11x11, speed c/245, diagonal, rule B3457/S456Glider 12066, size 13x9, speed c/141, orthogonal, rule B3458/S05678Glider 13047, size 12x14, speed c/5648, orthogonal, rule B3457/S4568

				
					[Cellular Automata]
					[Smallest]
					[Biggest]
					[Jumpiest]
					[Highest period]
					[Most versatile]
					[Off-slope]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/biggest.html
##-----------------TITLE------------------------##
The twenty biggest gliders
##------------------TEXT------------------------##
The twenty biggest gliders

			
				The Caterpillar (glider 1), size 4195x330721, speed 17c/45, orthogonal, period 270, rule B3/S23Glider 21664, size 28x148, speed c/2, orthogonal, rules B25/S02457 to B258/S024578Glider 21665, size 18x159, speed c/2, orthogonal, period 4/2, rule B3457/S357Glider 21666, size 16x161, speed 2c/5, orthogonal, rule B357/S024Glider 21667, size 15x162, speed 2c/5, orthogonal, rule B3467/S1468Glider 21668, size 12x168, speed 2c/7, orthogonal, rule B3567/S14578Glider 21669, size 20x171, speed c/2, orthogonal, period 4/2, rule B36/S123Glider 21670, size 24x173, speed c/3, orthogonal, rule B34568/S04578Glider 21671, size 12x177, speed c/5, orthogonal, rule B357/S03467Glider 21672, size 15x177, speed 2c/5, orthogonal, rule B358/S1347Glider 21673, size 15x178, speed 2c/5, orthogonal, rule B356/S2368Glider 21674, size 15x187, speed 2c/5, orthogonal, rule B3568/S03467Glider 21675, size 24x190, speed c/3, orthogonal, rule B345678/S0258Glider 21677, size 7x196, speed c/6, orthogonal, rule B0123458/S13457Glider 21678, size 17x201, speed 2c/5, orthogonal, rules B3578/S0137 and B3578/S01378Glider 21679, size 18x203, speed c/5, orthogonal, rule B3456/S457Glider 21680, size 19x232, speed 2c/5, orthogonal, rule B35678/S14Glider 21681, size 280x163, speed 7c/300, orthogonal, period 1200, rule B36/S245Glider 21682, size 20x307, speed c/5, orthogonal, rule B345678/S028Glider 21688, size 17x171, speed c/5, orthogonal, rule B34568/S057

				
					[Cellular Automata]
					[Smallest]
					[Slowest]
					[Jumpiest]
					[Highest period]
					[Most versatile]
					[Off-slope]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/versatile.html
##-----------------TITLE------------------------##
The twenty most versatile gliders
##------------------TEXT------------------------##
The twenty most versatile gliders

			
				The Glider (glider 115), size 3x3, speed c/4, diagonal, period 4/2, rules B3/S23 to B3678/S0235678Glider 195, size 4x2, speed c/1, orthogonal, rules B2/S to B245678/S0345678Glider 212, size 4x2, speed c/3, orthogonal, rules B34/S34 to B34678/S0134578Glider 230, size 4x3, speed c/1, orthogonal, rules B2/S to B245678/S2345678Glider 231, size 4x3, speed c/1, orthogonal, rules B2/S to B245678/S345678Glider 365, size 4x3, speed c/4, diagonal, period 4/2, rules B34/S13 to B34678/S0135678Glider 953, size 3x5, speed c/11, orthogonal, rules B24/S02 to B245678/S025678Glider 1006, size 4x5, speed c/1, orthogonal, period 4, rules B24/S to B245678/S345678Glider 2070, size 6x3, speed c/3, orthogonal, period 6, rules B24/S024 to B245678/S0245678Glider 2419, size 6x5, speed c/1, orthogonal, rules B24/S35 to B245678/S135678Glider 2430, size 5x6, speed c/1, orthogonal, period 4, rules B2/S to B245678/S345678Glider 3536, size 7x3, speed c/3, orthogonal, rules B24/S024 to B245678/S0245678Glider 4252, size 6x7, speed c/1, orthogonal, period 5, rules B25/S to B25678/S45678Glider 6011, size 8x7, speed c/1, orthogonal, rules B24/S4 to B245678/S024678Glider 10066, size 8x11, speed c/2, orthogonal, rules B2/S3 to B25678/S345678Glider 10228, size 11x9, speed c/2, orthogonal, rules B24/S3 to B245678/S35678Glider 11416, size 12x11, speed c/1, orthogonal, rules B24/S14 to B245678/S145678Glider 12874, size 14x11, speed c/1, orthogonal, rules B24/S35 to B24678/S0135678Glider 16284, size 20x18, speed c/1, orthogonal, rules B24/S24 to B245678/S0245678Glider 16323, size 20x20, speed c/1, orthogonal, rules B245/S2 to B245678/S0245678

				
					[Cellular Automata]
					[Smallest]
					[Biggest]
					[Slowest]
					[Jumpiest]
					[Highest period]
					[Off-slope]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/smallest.html
##-----------------TITLE------------------------##
The smallest gliders
##------------------TEXT------------------------##
The smallest gliders

			
				Glider 2, size 2x2, speed c/4, diagonal, rule B028/S0124Glider 3, size 2x2, speed c/6, diagonal, rules B01456/S1 to B014568/S01Glider 4, size 2x2, speed c/6, diagonal, rules B0234/S014 and B02348/S014Glider 5, size 2x3, speed c/1, orthogonal, period 2, rules B0236/S2345 to B023456/S012345Glider 6, size 2x3, speed c/2, orthogonal, rules B0125/S5 to B0124578/S015Glider 7, size 2x3, speed c/2, orthogonal, rules B01256/S25 to B012568/S0125Glider 8, size 3x2, speed c/2, orthogonal, rules B01356/S1 to B013568/S013Glider 9, size 3x2, speed c/2, orthogonal, rules B01367/S12 to B0134567/S0123Glider 10, size 3x2, speed c/2, orthogonal, rules B0146/S13 to B01468/S013Glider 11, size 2x3, speed c/2, orthogonal, rules B016/S15 to B0168/S0135Glider 12, size 2x3, speed c/2, orthogonal, rules B0167/S23 to B014567/S01234Glider 13, size 2x3, speed c/2, orthogonal, period 4, rules B0125/S35 to B01258/S0135Glider 14, size 3x2, speed c/2, orthogonal, period 4, rules B0145/S2 to B01458/S024Glider 15, size 2x3, speed c/2, orthogonal, period 4, rules B015/S0 to B01578/S023Glider 16, size 3x2, speed c/2, orthogonal, period 4, rules B024/S23 to B024/S0123Glider 17, size 3x2, speed c/2, orthogonal, period 4, rules B0248/S23 to B0248/S0123Glider 18, size 2x3, speed c/2, orthogonal, period 4, rules B03/S03 to B0378/S034Glider 19, size 3x2, speed c/2, orthogonal, period 8, rule B0237/S024Glider 20, size 3x2, speed c/2, orthogonal, period 12, rules B03/S2 to B0378/S2Glider 21, size 2x3, speed c/2, orthogonal, period 16, rule B0137/S123Glider 22, size 2x3, speed c/2, diagonal, period 4, rules B02356/S34 to B023456/S0134Glider 23, size 3x2, speed c/2, diagonal, period 4, rules B02357/S34 to B023457/S0134Glider 24, size 2x3, speed c/2, diagonal, period 4, rules B0256/S234 to B02456/S01234Glider 25, size 3x2, speed c/2, diagonal, period 4, rules B0257/S234 to B02457/S01234Glider 26, size 3x2, speed c/4, orthogonal, rules B345/S126 to B345678/S12678Glider 27, size 3x2, speed c/4, orthogonal, rules B01267/S345 to B0124567/S01345Glider 28, size 2x3, speed c/4, orthogonal, rules B013/S15 to B0134/S135Glider 29, size 2x3, speed c/4, orthogonal, rules B013578/S23 and B013578/S123Glider 30, size 3x2, speed c/4, orthogonal, rules B017/S0124 to B0178/S01234Glider 31, size 3x2, speed c/4, orthogonal, period 8, rules B0135/S03 and B01358/S03Glider 32, size 2x3, speed c/4, orthogonal, period 8, rule B014578/S024Glider 33, size 2x3, speed c/4, orthogonal, period 8, rule B0238/S02Glider 34, size 3x2, speed c/4, diagonal, rules B015/S124 to B0158/S0124Glider 35, size 3x2, speed c/4, diagonal, rules B04/S2 to B0478/S024Glider 36, size 3x2, speed c/4, diagonal, period 8, rules B0134/S0245 and B01348/S0245Glider 37, size 3x2, speed c/4, diagonal, period 8, rules B013467/S234 and B013467/S0234Glider 38, size 2x3, speed 2c/5, orthogonal, period 10, rules B01347/S14 and B013478/S14Glider 39, size 3x2, speed c/6, orthogonal, rules B012467/S25 to B0124678/S025Glider 40, size 2x3, speed c/6, orthogonal, rule B01256/S1236Glider 41, size 3x2, speed c/6, orthogonal, rule B0138/S135Glider 42, size 2x3, speed c/6, orthogonal, period 12, rule B01347/S134Glider 43, size 2x3, speed c/6, diagonal, period 12, rules B0137/S1235 to B013457/S1235Glider 44, size 3x2, speed c/8, orthogonal, period 16, rule B0137/S124Glider 45, size 2x3, speed c/8, diagonal, rule B01368/S015Glider 46, size 2x3, speed 7c/18, orthogonal, rule B013478/S014

				
					[Cellular Automata]
					[Biggest]
					[Slowest]
					[Jumpiest]
					[Highest period]
					[Most versatile]
					[Off-slope]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/knightships.html
##-----------------TITLE------------------------##
The off-slope gliders
##------------------TEXT------------------------##
The off-slope gliders

			
				Glider 1364, size 5x4, speed c/13, slope 2, rule B358/S0346Glider 1590, size 5x5, speed c/4, slope 2, rule B01347/S024Glider 1667, size 5x5, speed c/5, slope 2, rule B0137/S5Glider 1968, size 5x5, speed 2c/23, slope 2, rules B36/S01347 to B368/S013478Glider 2642, size 5x6, speed c/4, slope 2, rules B01235/S0136 and B012358/S0136Glider 2803, size 6x5, speed c/8, slope 2, rule B012457/S035Glider 2893, size 6x5, speed c/13, slope 2, rules B3/S01367 to B38/S013678Glider 2947, size 6x5, speed 3c/23, slope 3/2, rules B345/S126 and B3458/S126Glider 2956, size 6x5, speed 2c/25, slope 2, rule B34578/S358Glider 2957, size 6x5, speed 3c/26, slope 3, rule B357/S024578Glider 2975, size 5x6, speed 2c/41, slope 2, rule B348/S2567Glider 3333, size 6x6, speed 3c/10, slope 3, rule B0234/S24Glider 3341, size 6x6, speed 2c/11, slope 2, rules B356/S02456 and B3567/S02456Glider 3437, size 6x6, speed 3c/20, slope 3, rules B01235/S13456 and B01235/S013456Glider 3444, size 6x6, speed c/22, slope 3, rule B01347/S12345Glider 4616, size 6x7, speed 2c/13, slope 4, rule B0124568/S345Glider 4683, size 6x7, speed 2c/31, slope 2, period 62, rule B0234/S134Glider 5274, size 3x8, speed c/19, slope 2, rule B0134/S34Glider 5464, size 8x5, speed c/2, slope 2, rule B012356/S2347Glider 5657, size 8x5, speed c/21, slope 8/7, rule B0123456/S146Glider 5991, size 6x8, speed c/25, slope 2, period 150, rule B01246/S12346Glider 7891, size 9x8, speed 2c/7, slope 2, period 28, rule B01234/S127Glider 9275, size 10x9, speed c/7, slope 2, rule B012/S05Glider 9591, size 11x4, speed c/3, slope 2, period 24, rule B02345/S034Glider 9863, size 11x6, speed 7c/330, slope 7/5, rule B015/S14Glider 10998, size 7x12, speed 4c/29, slope 4, rules B3/S12567 and B3/S125678

				
					[Cellular Automata]
					[Smallest]
					[Biggest]
					[Slowest]
					[Jumpiest]
					[Highest period]
					[Most versatile]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/ca/gliders/jumpiest.html
##-----------------TITLE------------------------##
The twenty jumpiest gliders
##------------------TEXT------------------------##
The twenty jumpiest gliders

			
				The Caterpillar (glider 1), size 4195x330721, speed 17c/45, orthogonal, period 270, rule B3/S23Glider 3955, size 7x5, speed c/2, orthogonal, period 182, rule B378/S3567Glider 4391, size 6x7, speed c/2, orthogonal, period 152, rule B3678/S3567Glider 5784, size 8x6, speed c/2, orthogonal, period 176, rule B0125/S0125Glider 7993, size 9x9, speed c/2, orthogonal, period 66, rule B01347/S123Glider 8294, size 4x10, speed c/2, orthogonal, period 84, rule B0123456/S0236Glider 9656, size 11x5, speed c/2, orthogonal, period 76, rule B0235/S123Glider 12471, size 4x14, speed c/2, orthogonal, period 144, rule B0137/S1Glider 13207, size 15x5, speed c/2, orthogonal, period 400, rule B378/S3567Glider 13325, size 15x8, speed c/2, orthogonal, period 140, rule B02345/S23Glider 13381, size 15x9, speed c/2, orthogonal, period 70, rule B0125/S125Glider 14515, size 8x17, speed c/2, orthogonal, period 78, rule B012345/S136Glider 15026, size 7x18, speed c/2, orthogonal, period 70, rules B012345/S0146 and B0123458/S0146Glider 15171, size 18x11, speed c/2, orthogonal, period 126, rule B012345/S12356Glider 15495, size 7x19, speed c/2, orthogonal, period 126, rule B012345/S0146Glider 15711, size 19x13, speed c/2, orthogonal, period 96, rule B012345/S2346Glider 16276, size 17x20, speed c/2, orthogonal, period 180, rule B016/S23Glider 16734, size 7x22, speed c/2, orthogonal, period 72, rule B0235/S1234Glider 17050, size 23x6, speed c/2, orthogonal, period 144, rules B01234/S036 to B0123458/S036Glider 18208, size 27x6, speed c/2, orthogonal, period 96, rules B01234/S036 to B0123458/S036

				
					[Cellular Automata]
					[Smallest]
					[Biggest]
					[Slowest]
					[Highest period]
					[Most versatile]
					[Off-slope]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b34s0235.html
##-----------------TITLE------------------------##
Replicators: B34/S0235
##------------------TEXT------------------------##
Replicators: B34/S0235

This replicator repeats every four generations,
on a one-dimensional 2-unit grid.



No spaceships are known; finding some is probably 
the highest priority for research on this rule.
It would also be of interest to find a way of capping a row of replicators
to make high-period oscillators.

The same replicator works in 15 other rules of the form B34xx/S0235.
Of these, only
B347/S0235
and
B348/S0235
have known spaceships.


Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b02s4.html
##-----------------TITLE------------------------##
Replicators: B02/S4
##------------------TEXT------------------------##
Replicators: B02/S4

B02/S4 has
a two-cell 5c/10 replicator. The same pattern works in many other
rules.




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b0235s23.html
##-----------------TITLE------------------------##
Replicators: B0235/S23
##------------------TEXT------------------------##
Replicators: B0235/S23


B0235/S23 has a diagonal replicator, formed by a diagonal pair
of cells. It repeats with period 8, moving diagonally at speed
c/2.




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01357s0123.html
##-----------------TITLE------------------------##
Replicators: B01357/S0123
##------------------TEXT------------------------##
Replicators: B01357/S0123


B01357/S0123 has a period-six 2c/3 replicator, consisting of a
block of two cells:



Three parallel tracks of these replicators can interact to form
an 8c/24 spaceship:



More curiously, three perpendicular tracks can also form a
spaceship, again moving at speed c/3 but with period 12. The
replicators from the middle track stop the backwards replication of
the other two tracks, destroying themselves in the process, but are
reformed from the resulting debris.



With random initial conditions, this rule fills space with a chaotic
pattern of interacting replicators. If the initial density of live cells
is approximately 48%, the pattern also features large regions of
opposite phases (live replicators on dead backgrounds in even
generations, or vice versa) with slowly annealing region boundaries.
For densities away from this critical value, one phase or the other eventually takes over the
whole space.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b0235s0.html
##-----------------TITLE------------------------##
Replicators: B0235/S0
##------------------TEXT------------------------##
Replicators: B0235/S0

B0235/S0
has a diagonal replicator that repeats with period 4, moving
diagonally at speed c/2.



The same rule also has a small 7c/14 orthogonal replicator:



The orthogonal replicator can pull a dot behind it at 14c/28,
making the largest known spaceship with only three live cells in any rule:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01468s02.html
##-----------------TITLE------------------------##
Replicators: B01468/S02
##------------------TEXT------------------------##
Replicators: B01468/S02


B01468/S02 has a small 9c/20 replicator:



Replicators can cancel each other around corners, forming large
square replicator-based oscillators.



From random initial conditions, this rule develops a chaotic patchword of small regions of live and dead cells.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b016s12.html
##-----------------TITLE------------------------##
Replicators: B016/S12
##------------------TEXT------------------------##
Replicators: B016/S12


B016/S12 has a 6c/12 beehive-shaped replicator:



A copy of the replicator can be perturbed to make an 18c/36
spaceship in the related rule B01468/S12:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b357s3458.html
##-----------------TITLE------------------------##
Replicators: B357/S3458
##------------------TEXT------------------------##
Replicators: B357/S3458

I found this replicator on Oct. 31, 2001. It repeats every 15
generations, on a one-dimensional 5-unit grid.



This rule has several known
spaceships. It is unknown whether the replicator can lead to
high-period oscillators, spaceships, guns, or other interesting
technology.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b3568s2347.html
##-----------------TITLE------------------------##
Replicators: B3568/S2347
##------------------TEXT------------------------##
Replicators: B3568/S2347

I found this replicator on Oct. 27, 2001. It repeats every 4
generations, on a one-dimensional 2-unit grid.



This rule has a few known
spaceships. It is unknown whether the replicator can lead to
high-period oscillators, spaceships, guns, or other interesting
technology.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b0267s3.html
##-----------------TITLE------------------------##
Replicators: B0267/S3
##------------------TEXT------------------------##
Replicators: B0267/S3


B0267/S3 has a 3c/6 replicator:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b0147s1.html
##-----------------TITLE------------------------##
Replicators: B0147/S1
##------------------TEXT------------------------##
Replicators: B0147/S1

B0147/S1
and several related rules have a simple period-two c/2 replicator,
consisting of a block of two cells:



In 
B01347/S13, two rows of replicators can be terminated by a pair
of cells to form a 4c/8 spaceship.



In 
B01347/S1, there is a small breeder pattern that leaves behind
a trail of rows of replicators.




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b3578s23.html
##-----------------TITLE------------------------##
Replicators: B3578/S23
##------------------TEXT------------------------##
Replicators: B3578/S23

This replicator for rule
B3578/S23,
was found by Dominique Giard in 1999.  It replicates
itself every 12 generations, on a two-dimensional 4-unit grid.



Intriguingly, the same rule has two almost-replicators,
of periods 29 and 41, formed by placing two beehives end-to-end near
each other.

The same period 12 replicator also works in three other rules, of which
B3578/S237
has the most interesting small spaceships.


Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b2s13.html
##-----------------TITLE------------------------##
Replicators: B2/S13
##------------------TEXT------------------------##
Replicators: B2/S13

B2/S13
and related rules have a simple replicator
that acts with period three on a one-dimensional 3-unit grid:



Jason Summers discovered 3c/3 spaceship based on this
replicator:



and a similar one in the related rule
B25/S13:





Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b026s12.html
##-----------------TITLE------------------------##
Replicators: B026/S12
##------------------TEXT------------------------##
Replicators: B026/S12

B026/S12
and several related rules have a diagonal replicator that repeats
with period 4, moving diagonally at speed c/2.




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b36s245.html
##-----------------TITLE------------------------##
Replicators: B36/S245
##------------------TEXT------------------------##
Replicators: B36/S245

Soon after the discovery of a replicator in
HighLife,
Mark Niemiec found another rule with a replicator: B36/S245.
The initial pattern consists of a pair of "shuttles".



Frankly, I don't understand this replicator's behavior very well.  It
does not follow the typical parity-rule replicator pattern.  Instead,
each shuttle above, if sufficiently far from everything else, repeats
its shape in 102 generations, flipped 180 degrees, after laying a pair
of "eggs" (period 4 oscillators).  But, if an egg is already present, it
produces a collection of sparks, which in the presence of the
symmetrically placed shuttle end up hatching another replicator after 96
generations.
So, the first few generations at which a copy of the replicator
reappears are 102, 204, 300 (the first hatched egg), 306, 402, 504, 606,
702, and 708.  There is no replicator e.g. at generation 408 because the
replicator that should form then crashes with another formed by the
generation-306 replicator.  Somehow, despite all this asynchrony,
the replication of shuttles and eggs always continues
with the usual sawtooth growth pattern
instead of degenerating into chaos.

Rule B36/S245 is also interesting because, like Life, it has
many small spaceships,
including a 3x3 period-7 diagonal glider,
and a 4c/23 spaceship I found based on a combination of a form of the shuttle
with two p4 oscillators.



As Niemiec discovered, replicator-based oscillators can be used to form
a glider gun.



Dean Hickerson later discovered a simpler way of capping
rows of replicator by period-4 oscillators.  As with the parity-rule
replicators, this can be used to make arbitrarily high period oscillators.
Hickerson also found an alternate (double-barreled) gun mechanism
for replicators capped by p6 oscillators.



Later, Hickerson, investigating other ways of combining pairs of
shuttles to make replicators, found that they could instead be used to
make puffers, moving 28 steps every 600 or 1200 generations:


   


Finally, these puffers can be tamed, to produce spaceships which move at
speed 14c/300



and 28c/1200



Probably the next interesting but still-unknown pattern to look for in
this rule would be some kind of breeder.
Other interesting patterns to look for include guns or glider syntheses
of the 4c/23 or 14c/300 spaceships.


Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01367s012.html
##-----------------TITLE------------------------##
Replicators: B01367/S012
##------------------TEXT------------------------##
Replicators: B01367/S012


B01367/S012 has an 11c/22 replicator:



It also has a larger 10c/20 replicator:



This pattern, based on the smaller replicator, is a rake, moving
in one direction at 11c/22 and, every 22 steps, spitting out a
small c/2 glider moving in the opposite direction.



A different tail turns the 11c/22 replicator into a more
conventional spaceship.



Finite oscillators with periods that are multiples of 22 can be
made from the replicator by blocking it by small p2's. The
following example repeats with period 44.



Combinations of oscillators can be used to make glider guns; for
instance this p44 gun produces 11c/22 spaceships. By adjusting the
lengths of the oscillators, higher multiple-of-22 periods can also
be achieved. It seems likely that guns for simpler gliders (such as
the 3x2 or 4x2 c/2's) can be constructed similarly.



A simpler pattern can be used for higher period 11c/22 spaceship
guns. Here, the period is 88.



Another interesting replicator-based pattern is the following
breeder, which moves at 12c/24, at each repetition leaving behind a
replicator at right angles to its path. As the pattern evolves the
system of replicators behind the breeder forms a two-dimensional
Sierpinski triangle fractal pattern.



The breeder produces O(n1.585) live cells after n
generations.

With random initial conditions, this rule eventually develops into a
chaotic pattern in which small patches of dead cells are filled with
live oscillators or vice versa. Therefore, it seems likely that most
patterns eventually lead to a quadratic growth in the number of live
cells.  However, an explicit quadratic growth pattern remains unknown.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b25s4.html
##-----------------TITLE------------------------##
Replicators: B25/S4
##------------------TEXT------------------------##
Replicators: B25/S4

Like the one in B2/S13,
this replicator copies itself every three generations
on a one-dimensional 3-unit grid.
However, the replicator is asymmetric.



When started from a single copy, adjacent replicators will always meet
head-to-head or tail-to-tail, but the replication action still works
if they are set up to meet head-to-tail.

B25/S4 has several interesting
known spaceships,
including small c/2 orthogonal and c/8 diagonal ships.


Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01367s01.html
##-----------------TITLE------------------------##
Replicators: B01367/S01
##------------------TEXT------------------------##
Replicators: B01367/S01

In 
B01367/S01, a 1x2 block forms an unstable replicator; it can be
stabilized by making four copies of itself, forming a 10c/20
replicator.



These replicators can be stabilized by pairs of small
oscillators, making larger replicator-based oscillators. The one
below has period 60.



With random initial conditions, this rule fills space with a chaotic
pattern of interacting replicators. If the initial density of live cells
is approximately 35%, the pattern also features large regions of
opposite phases (live replicators on dead backgrounds in even
generations, or vice versa) with slowly annealing region boundaries.
For densities away from this critical value, one phase or the other eventually takes over the
whole space.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b368s12578.html
##-----------------TITLE------------------------##
Replicators: B368/S12578
##------------------TEXT------------------------##
Replicators: B368/S12578

I found this replicator in rule B368/S12578 in 1999.  It replicates
itself every 13 generations, on a one-dimensional 4-unit grid.
The same replicator works also in B3678/S12578.



Arbitrarily high period oscillators can be made by terminating a row of
replicators by still lifes in any of several ways.

This rule has
several
known spaceships, including a small c/8 diagonal glider.
As I discovered, two replicator-based oscillators can crash to form a
glider and some random debris, which can be removed by more replicators.
The following cleaned-up versions of this glider gun idea
were made by Dean Hickerson.



It would be of interest to find puffers or spaceships based on this
replicator, that move at speed 4c/13.
However, much slower spaceships may also exist:
Dean Hickerson has found "push"
and "pull"
reactions in which a set of replicators pushes or pulls a still life by
twelve units.  It should be possible to set up
arbitrarily-slow replicator-based spaceships in which a set of
replicators periodically forms a push reaction at the front end and a
pull reaction at the other end.  However, the likely size of these
things is so huge
(exponential in the period) that no explicit example has been made.


Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b0136s123.html
##-----------------TITLE------------------------##
Replicators: B0136/S123
##------------------TEXT------------------------##
Replicators: B0136/S123

In 
B0136/S123, a 3x2 block forms a 9c/30 replicator:



Replicators can cancel each other around corners, forming large
square replicator-based oscillators. 



With random initial conditions, this rule quickly settles down to
large regions of live cells on even generations and dead cells on odd
generations, or vice versa, with only a sparse scattering of oscillators and replicators within each
region. With an initial density of approximately 45% live cells, the
regions of both phases are equally balanced and have gradually annealing
phase boundaries; for other densities one phase or the other eventually takes over the whole space. However, the chaotic phase boundaries occasionally create new replicators which grow and interact to eventually fill space with a dense chaotic pattern in place of its initial stability.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b017s016.html
##-----------------TITLE------------------------##
Replicators: B017/S016
##------------------TEXT------------------------##
Replicators: B017/S016


B017/S016 has a 3c/4 replicator:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01378s123.html
##-----------------TITLE------------------------##
Replicators: B01378/S123
##------------------TEXT------------------------##
Replicators: B01378/S123

B01378/S123
  has a period-26 replicator, formed by three dominos, that moves at
  speed 9c/26.



It also contains a small puffer that leaves a trail of staggered dots.



When this rule is run with random initial conditions, the space fills
up with scattered oscillators (primarily single dots) that prevent
replicators from spreading. If the initial density of live cells is
approximately 43%, regions that have live cells on a dead background on
even steps are separated from regions with the opposite parity by
chaotic boundaries that anneal slowly; with other initial densities, one
phase or the other eventually takes over the whole space.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b36s124.html
##-----------------TITLE------------------------##
Replicators: B36/S124
##------------------TEXT------------------------##
Replicators: B36/S124

This replicator repeats every two generations,
on a one-dimensional 1-unit grid.  It works in several rules, the
simplest of which is B36/S124.



B36/S124 also has
several interesting spaceships
including a very small c/2 spaceship formed by
attaching a tail to a single replicator.



Dean Hickerson and I discovered that the small c/6 spaceship can
interact with
a row of replicators to form a pseudo-random number generator.



A more complicated pseudo-random number generator can be formed by
interacting replicators with a 2c/4 double-domino puffer (also by Hickerson):



Dean and I analyzed the average speed at which the replicator-domino
boundary moves, by examining the possible results
of a replicator-domino collision:
it may leave no residue, or a single domino,
the next collision with
which can again either leave no trace, or form a block;
hitting a block can again leave either no trace, or form a c/2 spaceship,
which finally must crash into the replicators leaving no trace.
The times between several of these events are exponentially-distributed
random variables depending on the state of the replicator field.
But, amazingly, the end result is that the boundary moves at the same
speed as the simpler spaceship-based generator: c/6!

Finally, arbitrarily high-period oscillators can be formed
by using period-4 oscillators to cap a row of replicators.




Replicators --
Cellular Automata --
D. Eppstein --
UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01367s0124.html
##-----------------TITLE------------------------##
Replicators: B01367/S0124
##------------------TEXT------------------------##
Replicators: B01367/S0124

In 
B01367/S0124, the following pattern replicates itself every 8
steps. The replicated copies are oriented at right angles to the
original pattern, so as the pattern continues to expand it fills
out a diamond pattern the corners of which move at speed c/2.



With random initial conditions this rule remains formless and chaotic.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b37s345.html
##-----------------TITLE------------------------##
Replicators: B37/S345
##------------------TEXT------------------------##
Replicators: B37/S345

I found this replicator on Oct. 20, 2001. It repeats every 35
generations, on a one-dimensional 6-unit grid. 



Along with several less-interesting oscillators, this rule has a
period-29 oscillator, which somehow resembles a thwarted pair of
replicators:



Jason Summers quickly found a way to confine a set of
replicators behind a pair of period-5 oscillators:



B37/S345 also has a few interesting
spaceships including a very small c/2 spaceship.

It is unknown whether the replicator can lead to high-period
spaceships, guns, or other interesting technology.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b0236s1.html
##-----------------TITLE------------------------##
Replicators: B0236/S1
##------------------TEXT------------------------##
Replicators: B0236/S1

B0236/S1
has a diagonal replicator, formed by a diagonal pair of cells. It
repeats with period 4, moving diagonally at speed c/2.




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b02356s34.html
##-----------------TITLE------------------------##
Replicators: B02356/S34
##------------------TEXT------------------------##
Replicators: B02356/S34


B02356/S34 and some related rules have a 6c/12 diagonal
replicator:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b01368s03.html
##-----------------TITLE------------------------##
Replicators: B01368/S03
##------------------TEXT------------------------##
Replicators: B01368/S03


B01368/S03 has a 5c/10 replicator formed by a three-cell
block:



Unlike many other known replicators, this one turns into an
  oscillator when stabilized by replicators in adjacent positions in its
  row. Thus, a single replicator will eventually grow to form a
  one-dimensional row of copies of itself without gaps. Random patterns
  in this rule eventually fill the plane with a chaotic grid of
  interacting vertical and horizontal rows of replicators; when the
  initial fraction of random live cells is approximately 38%, this grid pattern
  will be confined within slowly-annealing boundaries between large
  regions of the plane with the same parity (live replicator cells on
  dead background in even generations and dead on live in odd
  generations, or vice versa).

Two parallel replicators can interact to form a breeder that leaves perpendicular trails of replicators behind them, producing a quadratic growth pattern:




The replicator for this rule also forms the basis of this 5c/10 spaceship:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b016s123.html
##-----------------TITLE------------------------##
Replicators: B016/S123
##------------------TEXT------------------------##
Replicators: B016/S123


B016/S123 has a 6c/16 replicator, consisting of a 2x4 block of
cells:




Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/ca/replicators/b358s23467.html
##-----------------TITLE------------------------##
Replicators: B358/S23467
##------------------TEXT------------------------##
Replicators: B358/S23467

I found this replicator on Oct. 25, 2001. It repeats every 11
generations, on a one-dimensional 4-unit grid.



This rule has only one known
spaceship. It is unknown whether the replicator can lead to
high-period oscillators, spaceships, guns, or other interesting
technology.


Replicators -- Cellular Automata -- D.
Eppstein -- UCI Inf. & Comp. Sci.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/projects/pairs/Applications/RayDiagram/source/
##-----------------TITLE------------------------##
Index of /~eppstein/projects/pairs/Applications/RayDiagram/source
##------------------TEXT------------------------##
Index of /~eppstein/projects/pairs/Applications/RayDiagram/source
NameLast modifiedSizeDescriptionParent Directory   -  ClearRayDiag.java19-May-1997 13:07  679  CodeWarriorProject.hqx19-May-1997 13:21   28K DistancedObject.java19-May-1997 13:07  354  FastPair.java19-May-1997 13:07  4.0K RayDiagObj.java19-May-1997 13:20  969  RayDiagram.java24-May-1997 15:09  3.2K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~jcarlson/w_03_161_1.html
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
Were you expecting something worthwhile up here?
    
  
    
    
News
Papers/Research
Schedule/TA Resources
Courses
Interests
People
Grad School
Cisco Clean Access
Contact me
    
  
        
    Below are the mathematical descriptions of the different asymptotic notations.

I hope this helps.











      


News | 
Papers/Research | 
Schedule/TA Resources | 
Courses | 
Interests | 
People | 
Grad School | 
Cisco Clean Access | 
Contact me
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pal/index.html
##-----------------TITLE------------------------##
Mt. Palomar, August 17-19, 2001
##------------------TEXT------------------------##
Prev: Hammock and GardenUp: Summer 2001Next: Family
Mt. Palomar, August 17-19, 2001
Click on any picture for a gallery of more images.

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/famgar/index.html
##-----------------TITLE------------------------##
Family and Garden
##------------------TEXT------------------------##
Prev: Playgroup Swim PartyUp: Summer 2002Next: 9-to-5 in Anaheim
Family and Garden
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ham/index.html
##-----------------TITLE------------------------##
Hammock and Garden, August 6, 2001
##------------------TEXT------------------------##
Prev: Helicopters over UC IrvineUp: Summer 2001Next: Mt. Palomar
Hammock and Garden, August 6, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bbb/index.html
##-----------------TITLE------------------------##
Brownies at the Back Bay
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Winter 2002-2003Next: Garden Park SunsetPrev Brownies: InvestitureBrownies at the Back BayNext Brownies: Cookie Sale
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sv/men/index.html
##-----------------TITLE------------------------##
Mendocino, July 2 - 7, 2001
##------------------TEXT------------------------##
Prev: ExploratoriumUp: Summer VacationNext: Albion River InnMendocino, July 2 - 7, 2001Next Mendocino

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uhfall/index.html
##-----------------TITLE------------------------##
Autumn in University Hills
##------------------TEXT------------------------##
Prev: Tanaka Farms Pumpkin PatchUp: Fall 2001Next: Boo Bash and U. Hills party
Autumn in University Hills
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sjws4/index.html
##-----------------TITLE------------------------##
San Joaquin Wildlife Sanctuary
##------------------TEXT------------------------##
Prev: Face PaintUp: Spring 2003Next: Cabrillo BeachPrev SJWSSan Joaquin Wildlife SanctuaryNext SJWS
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc5/index.html
##-----------------TITLE------------------------##
Crystal Cove Labor Day Picnic Dinner
##------------------TEXT------------------------##
Prev: L.A. ZooUp: Fall 2002Next: Heritage ParkPrev Beach: LagunaCrystal Cove Labor Day Picnic DinnerNext Beach: Crystal Cove
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc8/index.html
##-----------------TITLE------------------------##
Crystal Cove
##------------------TEXT------------------------##
Prev: Halloween PumpkinsUp: Fall 2003Next: ThanksgivingPrev Beach: Obstruction PassCrystal CoveNext Beach: Laguna Point
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino5/lp/index.html
##-----------------TITLE------------------------##
Laguna Point
##------------------TEXT------------------------##
Prev: Jack Peters CanyonUp: Mendocino and EnvironsNext: Surfwood BarnPrev Beach: Crystal CoveLaguna Point
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc4/index.html
##-----------------TITLE------------------------##
Crystal Cove State Park
##------------------TEXT------------------------##
Prev: Family science nightUp: Summer 2002Next: ICS beach partyPrev Beach: Crystal CoveCrystal Cove State ParkNext Beach: Corona Del Mar
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc2/index.html
##-----------------TITLE------------------------##
Crystal Cove, Labor Day, 2001
##------------------TEXT------------------------##
Prev: CloudsUp: Summer 2001Next: BarcelonaPrev Beach: Big RiverCrystal Cove, Labor Day, 2001Next Beach: Sitges
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/laguna/index.html
##-----------------TITLE------------------------##
With Stacy and Family at Laguna Main Beach
##------------------TEXT------------------------##
Prev: 9-to-5 in AnaheimUp: Summer 2002Next: Heartbreakers SoccerPrev Beach: ICS PartyWith Stacy and Family at Laguna Main BeachNext Beach: Crystal Cove
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino4/glassbeach/index.html
##-----------------TITLE------------------------##
Glass Beach
##------------------TEXT------------------------##
Prev: July 4th ParadeUp: MendocinoNext: SurfwoodPrev Beach: Crystal CoveGlass BeachNext Beach: Pt. Lawrence
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc6/index.html
##-----------------TITLE------------------------##
Crystal Cove
##------------------TEXT------------------------##
Prev: Family and FriendsUp: Winter 2002-2003Next: Brownies at the Back BayPrev Beach: Crystal CoveCrystal CoveNext Beach: Crystal Cove
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bar/cm/index.html
##-----------------TITLE------------------------##
Casa Milà (La Pedrera)
##------------------TEXT------------------------##
Prev: Palau de Musica CatalanaUp: BarcelonaNext: Casa Batlló
Casa Milà (La Pedrera)
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/avila/index.html
##-----------------TITLE------------------------##
Avila Beach and Environs
##------------------TEXT------------------------##
Prev: Sycamore Springs LabyrinthUp: Summer 2004Next: San Luis Obispo
Avila Beach and Environs
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/getty2/index.html
##-----------------TITLE------------------------##
The Getty
##------------------TEXT------------------------##
Prev: MiscellaneousUp: Summer 2004Next: Sycamore Springs Labyrinth
The Getty
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino5/fr/index.html
##-----------------TITLE------------------------##
Fort Ross
##------------------TEXT------------------------##
Prev: Mendoma CoastUp: Mendocino and EnvironsNext: Cobbling
Fort Ross
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/thomas/index.html
##-----------------TITLE------------------------##
A Day Out with Thomas at the Orange Empire Railway Museum
##------------------TEXT------------------------##
Prev: Brownie InvestitureUp: Fall 2002Next: Garden Park
A Day Out with Thomas
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/orcas/emp/index.html
##-----------------TITLE------------------------##
Experience Music Project
##------------------TEXT------------------------##
Prev: Friday HarborUp: Orcas and SeattleNext: Miscellaneous Seattle
Experience Music Project
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino5/h1/index.html
##-----------------TITLE------------------------##
Mendoma Coast
##------------------TEXT------------------------##
Prev: Pygmy ForestUp: Mendocino and EnvironsNext: Fort Ross
Mendoma Coast
Down Highway 1 from Mendocino to the Russian River.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dv/index.html
##-----------------TITLE------------------------##
Death Valley
##------------------TEXT------------------------##
Prev: Mariners T-ballUp: Spring 2004Next: Easter Eggs
Death Valley
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino2/misc/index.html
##-----------------TITLE------------------------##
Miscellaneous
##------------------TEXT------------------------##
Prev: GroundbreakingUp: MendocinoNext: Pt. Cabrillo Lighthouse
Miscellaneous
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/rio/index.html
##-----------------TITLE------------------------##
Rio de Janeiro
##------------------TEXT------------------------##
Prev: Hat ConcertUp: Summer 2013Next: Crystal Cove
Rio de Janeiro
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/Cassel50th/index.html
##-----------------TITLE------------------------##
Phyllis and Richard Cassel's 50th Wedding Anniversary Party
##------------------TEXT------------------------##
Prev: Windermere BeehivesUp: Summer 2013Next: Bordeaux
Phyllis and Richard Cassel's 50th Wedding Anniversary Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hatconcert/index.html
##-----------------TITLE------------------------##
Rancho Middle School end-of-year concert, with silly hats
##------------------TEXT------------------------##
Prev: Bending RealityUp: Summer 2013Next: Rio de Janeiro
Rancho Middle School end-of-year concert, with silly hats
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc9/index.html
##-----------------TITLE------------------------##
Crystal Cove
##------------------TEXT------------------------##
Prev: RioUp: Summer 2013Next: OC Fair
Crystal Cove
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/windermere/index.html
##-----------------TITLE------------------------##
Windermere Manor Beehives
##------------------TEXT------------------------##
Prev: OC FairUp: Summer 2013Next: Cassel 50th anniversary
Windermere Manor Beehives


Taken Wednesday, August 14, 2013, 07:56:53AM.
Original image size: 3888x2592, 2.1Mb
Technical details: Canon EOS 40D, 1/200s@ F11, ISO 100, 17-85mm f/4-5.6, ... ], 35mm (56mm equiv)
PS CS5 5000:10, B0 CVS 40:40:10, Profile, USM 50:1
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ocfair13/index.html
##-----------------TITLE------------------------##
OC Fair
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Summer 2013Next: Windermere Beehives
OC Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/slo/index.html
##-----------------TITLE------------------------##
San Luis Obispo
##------------------TEXT------------------------##
Prev: Avila BeachUp: Summer 2004Next: Jazz and Fireworks
San Luis Obispo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/j4p04/index.html
##-----------------TITLE------------------------##
July 4th Parade
##------------------TEXT------------------------##
Prev: BaywoodUp: Summer 2004Next: Mendocino Coast Botanic Gardens
July 4th Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/frost/index.html
##-----------------TITLE------------------------##
Jazz and Fireworks at Frost Amphitheater
##------------------TEXT------------------------##
Prev: San Luis ObispoUp: Summer 2004Next: Housewarming
Jazz and Fireworks at Frost Amphitheater
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/misc3/index.html
##-----------------TITLE------------------------##
Miscellaneous
##------------------TEXT------------------------##
Prev: FiretrucksUp: Summer 2004Next: The Getty
Miscellaneous
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/quadmeet04/index.html
##-----------------TITLE------------------------##
Quad Meet at Crawford Hall
##------------------TEXT------------------------##
Prev: Mendocino Coast Botanic GardensUp: Summer 2004Next: Back to school
Quad Meet at Crawford Hall
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/back2school04/index.html
##-----------------TITLE------------------------##
Back to school
##------------------TEXT------------------------##
Prev: Quad MeetUp: Summer 2004Next: College Park Swim MeetPrev Vista Verde: Gold Rush DayBack to schoolNext Vista Verde: Holiday Vocal Concert
All photos taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mcbg/index.html
##-----------------TITLE------------------------##
Mendocino Coast Botanic Gardens
##------------------TEXT------------------------##
Prev: July 4th ParadeUp: Summer 2004Next: Quad Meet
Mendocino Coast Botanic Gardens
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dolphinawards/index.html
##-----------------TITLE------------------------##
Dolphins end-of-year potluck and awards night
##------------------TEXT------------------------##
Prev: College Park Swim MeetUp: Summer 2004Next: Zoids
Dolphins end-of-year potluck and awards night
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/labyrinth/index.html
##-----------------TITLE------------------------##
Sycamore Springs Labyrinth
##------------------TEXT------------------------##
Prev: The GettyUp: Summer 2004Next: Avila Beach
Sycamore Springs Labyrinth
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/baywood/index.html
##-----------------TITLE------------------------##
Belated Housewarming
##------------------TEXT------------------------##
Prev: Jazz and FireworksUp: Summer 2004Next: July 4th Parade
Belated Housewarming
My parents had been living in their new house for over a year, but
chose this date for a housewarming party as it was the second anniversary of
their groundbreaking.

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/colpkswim/index.html
##-----------------TITLE------------------------##
College Park Swim Meet
##------------------TEXT------------------------##
Prev: Back to schoolUp: Summer 2004Next: Dolphin awards
College Park Swim Meet
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/venice/index.html
##-----------------TITLE------------------------##
Venice
##------------------TEXT------------------------##
Prev: LeidenUp: Summer 2012Next: University Hills graduating seniors
Venice
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lacma/index.html
##-----------------TITLE------------------------##
LACMA
##------------------TEXT------------------------##
Prev: OC FairUp: Summer 2012Next: Eades Workshop
LACMA
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/leiden/index.html
##-----------------TITLE------------------------##
Leiden Poetry Walk
##------------------TEXT------------------------##
Prev: Hot Rods for RanchoUp: Summer 2012Next: Venice
Leiden Poetry Walk
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/prague2/index.html
##-----------------TITLE------------------------##
Prague
##------------------TEXT------------------------##
Prev: MiniUp: Summer 2012Next: Two Amandas
Prague
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ocfair12/index.html
##-----------------TITLE------------------------##
Orange County Fair
##------------------TEXT------------------------##
Prev: Two AmandasUp: Summer 2012Next: LACMA
Orange County Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uhgrads/index.html
##-----------------TITLE------------------------##
Party for Graduating U. Hills seniors
##------------------TEXT------------------------##
Prev: VeniceUp: Summer 2012Next: Sara's Graduation
Party for Graduating U. Hills seniors
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/saragrad/index.html
##-----------------TITLE------------------------##
Sara's High School Graduation
##------------------TEXT------------------------##
Prev: Uni Hills Grad PartyUp: Summer 2012Next: Mini
Sara's High School Graduation
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/amandas/index.html
##-----------------TITLE------------------------##
Amanda Ross-Ho and Amanda Palmer
##------------------TEXT------------------------##
Prev: PragueUp: Summer 2012Next: OC Fair
Amanda Ross-Ho and Amanda Palmer
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mini/index.html
##-----------------TITLE------------------------##
British Racing Green Mini Cooper S
##------------------TEXT------------------------##
Prev: Sara's GraduationUp: Summer 2012Next: Prague
British Racing Green Mini Cooper S
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/galice/index.html
##-----------------TITLE------------------------##
Galice, OR
##------------------TEXT------------------------##
Prev: Turtle BayUp: Summer 2009Next: Rafting on the Rogue River
Galice, OR
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/montpellier/index.html
##-----------------TITLE------------------------##
Montpellier, France
##------------------TEXT------------------------##
Prev: NetherlandsUp: Summer 2009Next: Turtle Bay
Montpellier, France
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/craterlake/index.html
##-----------------TITLE------------------------##
Crater Lake
##------------------TEXT------------------------##
Prev: Rogue RiverUp: Summer 2009Next: Russian Gulch
Crater Lake
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/rogue/index.html
##-----------------TITLE------------------------##
Rafting on the Rogue River
##------------------TEXT------------------------##
Prev: GaliceUp: Summer 2009Next: Crater Lake
Rafting on the Rogue River
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/banff/index.html
##-----------------TITLE------------------------##
Banff
##------------------TEXT------------------------##
Prev: Russian GulchUp: Summer 2009Next: Diana's Banff photos
Banff
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tbxp/index.html
##-----------------TITLE------------------------##
Turtle Bay Exploration Park, Redding
##------------------TEXT------------------------##
Prev: MontpellierUp: Summer 2009Next: Galice
Turtle Bay Exploration Park, Redding
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/rgsp/index.html
##-----------------TITLE------------------------##
Russian Gulch State Park
##------------------TEXT------------------------##
Prev: Crater LakeUp: Summer 2009Next: Banff
Russian Gulch State Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/netherlands2/index.html
##-----------------TITLE------------------------##
The Netherlands
##------------------TEXT------------------------##
Prev: Turtle Rock ConcertUp: Summer 2009Next: Montpellier
The Netherlands
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dianabanff/index.html
##-----------------TITLE------------------------##
Diana's photos of Banff
##------------------TEXT------------------------##
Prev: BanffUp: Summer 2009Next: Trinity College
Diana's photos of Banff
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ehvmaas/index.html
##-----------------TITLE------------------------##
Eindhoven and Maastricht
##------------------TEXT------------------------##
Prev: Willoughby WindowsUp: Fall 2011Next: Spui
Eindhoven and Maastricht
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/berenkuil/index.html
##-----------------TITLE------------------------##
De Berenkuil, Eindhoven
##------------------TEXT------------------------##
Prev: SpuiUp: Fall 2011Next: Sara's birthday
De Berenkuil, Eindhoven
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka11/index.html
##-----------------TITLE------------------------##
Tanaka Farms
##------------------TEXT------------------------##
Prev: Sara's birthdayUp: Fall 2011Next: Gaiman-Palmer Halloween
Tanaka Farms
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/gph/index.html
##-----------------TITLE------------------------##
Neil Gaiman and Amanda Palmer in Los Angeles, Halloween 2011
##------------------TEXT------------------------##
Prev: Tanaka FarmsUp: Fall 2011Next: Engineering Hall Stair Shadows
Neil Gaiman and Amanda Palmer in Los Angeles, Halloween 2011
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sara17bd/index.html
##-----------------TITLE------------------------##
Sara's 17th birthday
##------------------TEXT------------------------##
Prev: BerenkuilUp: Fall 2011Next: Tanaka Farms
Sara's 17th birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/EngineeringHallStairShadows/index.html
##-----------------TITLE------------------------##
Engineering Hall Stair Shadows
##------------------TEXT------------------------##
Prev: Gaiman-Palmer HalloweenUp: Fall 2011Next: Cooper's Hawk
Engineering Hall Stair Shadows


Taken Wednesday, November 23, 2011, 01:05:37PM.
Original image size: 2592x3888, 1.7Mb
Technical details: Canon EOS 40D, 1/160s@ F8, ISO 100, 50mm f/1.4 (80mm equiv)
PS CS5 Daylight, Con50, USM 20:100
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/spui/index.html
##-----------------TITLE------------------------##
Spui Graffiti
##------------------TEXT------------------------##
Prev: Eindhoven and MaastrichtUp: Fall 2011Next: Berenkuil
Spui Graffiti
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/2gfsnvv/index.html
##-----------------TITLE------------------------##
2nd Grade Family Science Night at Vista Verde
##------------------TEXT------------------------##
Prev: San Diego ZooUp: Spring 2002Next: Crystal CovePrev Vista Verde: Jogathon2nd Grade Family Science Night at Vista VerdeNext Vista Verde: Adventure Playground
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uci/index.html
##-----------------TITLE------------------------##
UCI Architectural Details
##------------------TEXT------------------------##
Prev: San Joaquin Wildlife SanctuaryUp: Spring 2002Next: First light from my D60
UCI Architectural Details
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh/index.html
##-----------------TITLE------------------------##
Semiannual playgroup campout in Joshua Tree, April 2002
##------------------TEXT------------------------##
Prev: MammothUp: Spring 2002Next: Family and FriendsPrev PlaygroupSemiannual playgroup campout in Joshua Tree, April 2002Next Playgroup
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tim3bd/index.html
##-----------------TITLE------------------------##
Timothy's 3rd Birthday Party
##------------------TEXT------------------------##
Prev: Vista Verde JogathonUp: Spring 2002Next: UCI Arboretum
Timothy's 3rd Birthday Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/helkel/index.html
##-----------------TITLE------------------------##
Sara as Helen Keller
##------------------TEXT------------------------##
Prev: UCI ArboretumUp: Spring 2002Next: Spring Break in Mammoth
Sara as Helen Keller
Sara did a project on Helen Keller for her 2nd grade class, and dressed up for the presentation.
It's probably not what Helen Keller would have worn, but at least it looks old-fashioned...
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sjws2/index.html
##-----------------TITLE------------------------##
San Joaquin Wildlife Sanctuary
##------------------TEXT------------------------##
Prev: Family and FriendsUp: Spring 2002Next: UCI Architectural DetailsPrev SJWSSan Joaquin Wildlife SanctuaryNext SJWS
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/arboretum/index.html
##-----------------TITLE------------------------##
UCI Arboretum
##------------------TEXT------------------------##
Prev:
Timothy's 3rd Birthday PartyUp: Spring 2002Next: Sara as Helen Keller
UCI Arboretum
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdz2/index.html
##-----------------TITLE------------------------##
San Diego Zoo
##------------------TEXT------------------------##
Prev: First light from my D60Up: Spring 2002Next: 2nd Grade Science NightPrev ZooSan Diego ZooNext Zoo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam5/index.html
##-----------------TITLE------------------------##
Family and Friends
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Spring 2002Next: San Joaquin Wildlife Sanctuary
Family and Friends
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/d60l1/index.html
##-----------------TITLE------------------------##
First light from my new D60
##------------------TEXT------------------------##
Prev: UCI Architectural DetailsUp: Spring 2002Next: San Diego Zoo
First light from my new D60
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mammoth/index.html
##-----------------TITLE------------------------##
Spring Break in Mammoth
##------------------TEXT------------------------##
Prev: Sara as Helen KellerUp: Spring 2002Next: Joshua Tree
Spring Break in Mammoth
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/beoy/index.html
##-----------------TITLE------------------------##
Brownie end of year party and awards ceremony
##------------------TEXT------------------------##
Prev: Sara's RoomUp: Summer 2003Next: San Diego ZooPrev Brownies: Cabrillo BeachBrownie end of year party and awards ceremonyNext Brownies: Bridging Ceremony
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdz3/index.html
##-----------------TITLE------------------------##
San Diego Zoo
##------------------TEXT------------------------##
Prev: Brownie end-of-year partyUp: Summer 2003Next: Adventure PlaygroundPrev Zoo: Living Desert MuseumSan Diego ZooNext Zoo: San Diego
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvap/index.html
##-----------------TITLE------------------------##
Vista Verde 2nd and 3rd Grades at Adventure Playground
##------------------TEXT------------------------##
Prev: San Diego ZooUp: Summer 2003Next: Bommer CanyonPrev Vista Verde: Family Science NightVista Verde 2nd and 3rd Grades at Adventure PlaygroundNext Vista Verde: Bommer Canyon
All photos taken by Diana. Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/quadmeet/index.html
##-----------------TITLE------------------------##
Quad meet with SI Dolphins at Crawford Hall
##------------------TEXT------------------------##
Prev: MendocinoUp: Summer 2003Next: Orcas Island
Quad meet with SI Dolphins at Crawford Hall
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvbc/index.html
##-----------------TITLE------------------------##
Vista Verde campout in Bommer Canyon
##------------------TEXT------------------------##
Prev: Adventure PlaygroundUp: Summer 2003Next: Dance EmotionPrev Vista Verde: Adventure PlaygroundVista Verde campout in Bommer CanyonNext Vista Verde: Holiday Concert
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ottawa/index.html
##-----------------TITLE------------------------##
Ottawa
##------------------TEXT------------------------##
Prev: Orcas and SeattleUp: Summer 2003Next: Bridging Ceremony
Ottawa
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/desrr/index.html
##-----------------TITLE------------------------##
Dance Emotion: Shake Rattle 'n Roll
##------------------TEXT------------------------##
Prev: Bommer CanyonUp: Summer 2003Next: MendocinoPrev Dance Emotion: Winter WonderlandDance Emotion: Shake Rattle 'n RollNext Dance Emotion: Honolulu Holiday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino4/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: Dance EmotionUp: Summer 2003Next: Quad MeetPrev MendocinoMendocinoNext Mendocino
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/orcas/index.html
##-----------------TITLE------------------------##
Orcas Island and Seattle
##------------------TEXT------------------------##
Prev: Quad meetUp: Summer 2003Next: Ottawa
Orcas Island and Seattle
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc3/index.html
##-----------------TITLE------------------------##
Crystal Cove
##------------------TEXT------------------------##
Prev: Infant Toddler CenterUp: Winter 2001-2002Next: Vista Verde JogathonPrev Beach: SitgesCrystal CoveNext Beach: Crystal Cove
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvj/index.html
##-----------------TITLE------------------------##
Vista Verde Jogathon
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Winter 2001-2002Next: Timothy's 3rd Birthday PartyVista Verde JogathonNext Vista Verde: Family Science Night
Photos taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/getty/index.html
##-----------------TITLE------------------------##
Getty Museum
##------------------TEXT------------------------##
Prev: In Transit: SFOUp: Winter 2001-2002Next: San Joaquin Wildlife Sanctuary
Getty Museum
Photos taken by Diana.  Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/rain/index.html
##-----------------TITLE------------------------##
Rainy days
##------------------TEXT------------------------##
Prev: Dance Emotion in SpaceUp: Winter 2001-2002Next: On The Road
Rainy days
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pp2/index.html
##-----------------TITLE------------------------##
Playgroup Pizza
##------------------TEXT------------------------##
Prev: DisneylandUp: Winter 2001-2002Next: Infant Toddler CenterPrev PlaygroupPlaygroup PizzaNext Playgroup
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/disneyland/index.html
##-----------------TITLE------------------------##
Disneyland
##------------------TEXT------------------------##
Prev: San Joaquin Wildlife SanctuaryUp: Winter 2001-2002Next: Playgroup Pizza
Disneyland
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/despace/index.html
##-----------------TITLE------------------------##
Dance Emotion in Space
##------------------TEXT------------------------##
Prev: Decorating for ChristmasUp: Winter 2001-2002Next: Rainy daysPrev Dance Emotion: Harvest FestivalDance Emotion in SpaceNext Dance Emotion: At the Movies
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam4/index.html
##-----------------TITLE------------------------##
Family and Friends
##------------------TEXT------------------------##
Prev: MendocinoUp: Winter 2001-2001Next: In Transit: SFO
Family and Friends
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/SFO/index.html
##-----------------TITLE------------------------##
In Transit: SFO
##------------------TEXT------------------------##
Prev: Family and FriendsUp: Winter 2001-2002Next: Getty MuseumPrev Transit: LoganIn Transit: SFO

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/house/index.html
##-----------------TITLE------------------------##
Around the house, December 1, 2001
##------------------TEXT------------------------##
Prev: Family and MiscellaneousUp: Winter 2001-2002Next: Decorating for Christmas
Around the house, December 1, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/itc/index.html
##-----------------TITLE------------------------##
Infant Toddler Center
##------------------TEXT------------------------##
Prev: Playgroup PizzaUp: Winter 2001-2002Next: Crystal Cove
Infant Toddler Center
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: On The RoadUp: Winter 2001-2001Next: Family and FriendsPrev MendocinoMendocinoNext Mendocino
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ontheroad/index.html
##-----------------TITLE------------------------##
On The Road
##------------------TEXT------------------------##
Prev: Rainy DaysUp: Winter 2001-2002Next: Mendocino
On The Road
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sjws/index.html
##-----------------TITLE------------------------##
San Joaquin Wildlife Sanctuary
##------------------TEXT------------------------##
Prev: Getty MuseumUp: Winter 2001-2002Next: DisneylandSan Joaquin Wildlife SanctuaryNext SJWS

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmasdec01/index.html
##-----------------TITLE------------------------##
Decorating for Christmas
##------------------TEXT------------------------##
Prev: Around the houseUp: Winter 2001-2002Next: Dance Emotion in Space
Decorating for Christmas
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/loh/index.html
##-----------------TITLE------------------------##
From the Palace of the Legion of Honor, San Francisco
##------------------TEXT------------------------##
Prev: California AvenueUp: Winter 2008-2009Next: Strassen
From the Palace of the Legion of Honor, San Francisco
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/strassen/index.html
##-----------------TITLE------------------------##
Volker Strassen's Knuth Prize Lecture, SODA 2009
##------------------TEXT------------------------##
Prev: Legion of HonorUp: Winter 2008-2009Next: Flat equilateral torus
Volker Strassen's Knuth Prize Lecture, SODA 2009
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/equilateral/index.html
##-----------------TITLE------------------------##
Flat equilateral torus
##------------------TEXT------------------------##
Prev: Volker StrassenUp: Winter 2008-2009Next: Timothy's birthday
Flat equilateral torus
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t10bd/index.html
##-----------------TITLE------------------------##
Timothy's tenth birthday
##------------------TEXT------------------------##
Prev: Flat equilateral torusUp: Winter 2008-2009Next: Turtle Rock Concert
Timothy's tenth birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/calave/index.html
##-----------------TITLE------------------------##
California Avenue, Palo Alto
##------------------TEXT------------------------##
Prev: HalloweenUp: Winter 2008-2009Next: Legion of Honor
California Avenue, Palo Alto
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh8/index.html
##-----------------TITLE------------------------##
Joshua Tree
##------------------TEXT------------------------##
Prev: HalloweenUp: Fall 2007Next: Balboa Pier
Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/halloween07/index.html
##-----------------TITLE------------------------##
Halloween
##------------------TEXT------------------------##
Prev: University Hills Neighborhood PartyUp: Fall 2007Next: Joshua Tree
Halloween
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino7/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: RaftingUp: Summer 2006Next: Berrying
Mendocino
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/junglemural/index.html
##-----------------TITLE------------------------##
Timothy's Jungle Mural
##------------------TEXT------------------------##
Prev: U. Hills BBQUp: Summer 2006Next: Sara's 12th birthday
Timothy's Jungle Mural
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uci3/index.html
##-----------------TITLE------------------------##
UCI ICS/Engineering Quad
##------------------TEXT------------------------##
Prev: BerryingUp: Summer 2006Next: Camp Surf
UCI ICS/Engineering Quad
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bhwt/index.html
##-----------------TITLE------------------------##
Bren Hall Walkthrough
##------------------TEXT------------------------##
Prev: KittensUp: Summer 2006Next: U. Hills BBQ
Bren Hall Walkthrough
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tlgfn/index.html
##-----------------TITLE------------------------##
The Living Garden presents Force of Nature at the San Diego Zoo
##------------------TEXT------------------------##
Prev: Camp SurfUp: Summer 2006Next: Kittens
The Living Garden presents Force of Nature at the San Diego Zoo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tgbbq/index.html
##-----------------TITLE------------------------##
Theory Group BBQ at Mason Park
##------------------TEXT------------------------##
Prev: Spring ConcertUp: Summer 2006Next: Wild Horse Chardonnay
Theory Group BBQ at Mason Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/kittens/index.html
##-----------------TITLE------------------------##
Cocoa and Mocha
##------------------TEXT------------------------##
Prev: The Living GardenUp: Summer 2006Next: Bren Hall Walk-Through
Cocoa and Mocha
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uhbbq/index.html
##-----------------TITLE------------------------##
University Hills Barbecue Party
##------------------TEXT------------------------##
Prev: Bren Hall Walk-ThroughUp: Summer 2006Next: Jungle Mural
University Hills Barbecue Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/whc04/index.html
##-----------------TITLE------------------------##
Wild Horse Chardonnay, 2004
##------------------TEXT------------------------##
Prev: Theory BBQUp: Summer 2006Next: Flag Day
Wild Horse Chardonnay, 2004
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/campsurf06/index.html
##-----------------TITLE------------------------##
Camp Surf
##------------------TEXT------------------------##
Prev: UCIUp: Summer 2006Next: Force of Nature
Camp Surf
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvsc06/index.html
##-----------------TITLE------------------------##
Vista Verde Vocal Music Spring Concert
##------------------TEXT------------------------##
Prev: Candy Store HikeUp: Summer 2006Next: Theory Group BBQ
Vista Verde Vocal Music Spring Concert
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sfar-hs/index.html
##-----------------TITLE------------------------##
Rafting on the South Fork of the American River
##------------------TEXT------------------------##
Prev: O.A.R.S. CampUp: Summer 2006Next: Mendocino
Rafting on the South Fork of the American River
Photos taken by Hotshot Imaging.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/berrying/index.html
##-----------------TITLE------------------------##
Blackberry Picking at Webb Ranch, Portola Valley
##------------------TEXT------------------------##
Prev: MendocinoUp: Summer 2006Next: UCI
Blackberry Picking at Webb Ranch, Portola Valley
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/flagday/index.html
##-----------------TITLE------------------------##
Flag Day First Grade Vocal Concert
##------------------TEXT------------------------##
Prev: Wild Horse ChardonnayUp: Summer 2006Next: American River
Flag Day First Grade Vocal Concert
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sfar/index.html
##-----------------TITLE------------------------##
With O.A.R.S. on the South Fork of the American River, Coloma
##------------------TEXT------------------------##
Prev: Flag DayUp: Summer 2006Next: Rafting
With O.A.R.S. on the South Fork of the American River, Coloma
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvwf/index.html
##-----------------TITLE------------------------##
Vista Verde World Fair
##------------------TEXT------------------------##
Prev: International DayUp: Spring 2005Next: Butter BattlePrev Vista Verde: Peter RabbitVista Verde World FairNext Vista Verde: Cabaret
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ditr/index.html
##-----------------TITLE------------------------##
Diamonds in the Rough
##------------------TEXT------------------------##
Prev: Timothy's Sixth BirthdayUp: Spring 2005Next: Cardinals
Diamonds in the Rough
Click on any picture for a gallery of more images.
Opening Day CeremonyBlue CrushWolf PackHuskiesPiranhasShooting StarsTNTPanther PowerLime DrivesBatbustersLime DrivesBatbusters
PlayoffClosing ceremony
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh5/index.html
##-----------------TITLE------------------------##
Indian Cove, Joshua Tree
##------------------TEXT------------------------##
Prev: Balboa ParkUp: Spring 2005Next: International DayPrev Playgroup: Joshua TreeIndian Cove, Joshua TreeNext Playgroup: Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cardinals/index.html
##-----------------TITLE------------------------##
Cardinals T-Ball
##------------------TEXT------------------------##
Prev: Diamonds in the RoughUp: Spring 2005Next: Peter Rabbit
Cardinals T-Ball
Click on any picture for a gallery of more images.
IndiansAngels
YankeesTwinsCubsIndiansDodgersIndians
Red SoxPennants
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/peterrabbit/index.html
##-----------------TITLE------------------------##
Peter Rabbit Kindergarten Vocal Concert
##------------------TEXT------------------------##
Prev: Cardinals T-BallUp: Spring 2005Next: San Diego ZooPrev Vista Verde: Holiday ConcertPeter Rabbit Kindergarten Vocal ConcertNext Vista Verde: World Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/balboapark/index.html
##-----------------TITLE------------------------##
Balboa Park, Marcy Sculpture Garden and Carousel
##------------------TEXT------------------------##
Prev: San Diego ZooUp: Spring 2005Next: Joshua Tree
Balboa Park, Marcy Sculpture Garden and Carousel
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/iday05/index.html
##-----------------TITLE------------------------##
International Day
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Spring 2005Next: Vista Verde World Fair
International Day
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdz4/index.html
##-----------------TITLE------------------------##
San Diego Zoo
##------------------TEXT------------------------##
Prev: Peter RabbitUp: Spring 2005Next: Balboa ParkPrev Zoo: San DiegoSan Diego Zoo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/iday08/index.html
##-----------------TITLE------------------------##
International Day
##------------------TEXT------------------------##
Prev: WayzgooseUp: Spring 2008Next: Vista Verde World Fair
International Day
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvwf08/index.html
##-----------------TITLE------------------------##
Vista Verde World's Fair
##------------------TEXT------------------------##
Prev: International DayUp: Spring 2008Next: Seussical
Vista Verde World's Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/seussical/index.html
##-----------------TITLE------------------------##
Seussical
##------------------TEXT------------------------##
Prev: Vista Verde World FairUp: Spring 2008Next: Silver Award
Seussical
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wayzgoose08/index.html
##-----------------TITLE------------------------##
Wayzgoose 2008
##------------------TEXT------------------------##
Prev: PetroglyphsUp: Spring 2008Next: International Day
Wayzgoose 2008
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/6spring/index.html
##-----------------TITLE------------------------##
6th and Spring
##------------------TEXT------------------------##
Prev: Family portraitsUp: Fall 2015Next: Solar decathlon
6th and Spring


Taken Friday, September 25, 2015, 08:06:15AM.
Original image size: 5312x2988, 1.9Mb
Technical details: SM-N910V, 1/40s@ F2.2, ISO 40, 23/5mm
PS CS5 Auto contrast, USM 20:100 50:2
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/familyportraits15/index.html
##-----------------TITLE------------------------##
Family Portraits
##------------------TEXT------------------------##
Prev: WADSUp: Fall 2015Next: 6th & Spring
Family Portraits
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/solardecathlon/index.html
##-----------------TITLE------------------------##
Solar Decathlon Houses
##------------------TEXT------------------------##
Prev: 6th and SpringUp: Fall 2015Next: Black Star Canyon
Solar Decathlon Houses
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/trcon09/index.html
##-----------------TITLE------------------------##
Turtle Rock Elementary School Concert at Concordia College
##------------------TEXT------------------------##
Prev: Timothy's birthdayUp: Spring 2009Next: Netherlands
Turtle Rock Elementary School Concert at Concordia College
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/menagerie/index.html
##-----------------TITLE------------------------##
Mendocino Menagerie
##------------------TEXT------------------------##
Prev: Zoya and JessaUp: Winter 2014-2015Next: Westin San Diego
Mendocino Menagerie
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/zj/index.html
##-----------------TITLE------------------------##
Zoya and Jessa
##------------------TEXT------------------------##
Prev: Univ. of WürzburgUp: Winter 2014-2015Next: Mendocino Menagerie
Zoya and Jessa


Taken Sunday, December 28, 2014, 12:35:23PM.
Original image size: 2441x3662, 1.7Mb
Technical details: Canon EOS 40D, 1/1000s@ F4, ISO 400, 17-40mm f/4L, 28mm (44mm equiv)
PS CS5 Exp0.25 B15, Level
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/WestinSanDiego/index.html
##-----------------TITLE------------------------##
From the Westin Gaslamp, San Diego
##------------------TEXT------------------------##
Prev: Mendocino MenagerieUp: Winter 2014-2015Next: Bellairs
From the Westin Gaslamp, San Diego


Taken Saturday, January 03, 2015, 04:25:27PM.
Original image size: 2538x1459, 1.1Mb
Technical details: DROID2 GLOBAL, 149/31250s@ F2.8, ISO 102, 4mm
PS CS5 Perspective crop, Sat15, Levels 15:0.9:255, USM 20:20
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/petroglyphs/index.html
##-----------------TITLE------------------------##
Petroglyphs in Saguaro National Park
##------------------TEXT------------------------##
Prev: Sonora Desert MuseumUp: Winter 2007-2008
Petroglyphs in Saguaro National Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/kai3bd/index.html
##-----------------TITLE------------------------##
Kai's 3rd birthday
##------------------TEXT------------------------##
Prev: Balboa pierUp: Winter 2007-2008Next: MacKerricher State Park
Kai's 3rd birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mck07/index.html
##-----------------TITLE------------------------##
MacKerricher State Park
##------------------TEXT------------------------##
Prev: Kai's birthdayUp: Winter 2007-2008Next: Sonora Desert Museum
MacKerricher State Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bp07/index.html
##-----------------TITLE------------------------##
Balboa Pier
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Winter 2007-2008Next: Kai's birthday
Balboa Pier
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdm/index.html
##-----------------TITLE------------------------##
Sonora Desert Museum
##------------------TEXT------------------------##
Prev: MacKerricher State ParkUp: Winter 2007-2008Next: Petroglyphs
Sonora Desert Museum
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ocfair/index.html
##-----------------TITLE------------------------##
Orange County Fair
##------------------TEXT------------------------##
Previous: De YoungUp: Summer 2011Next: New York
Orange County Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/willoughby/index.html
##-----------------TITLE------------------------##
Willoughby Windows
##------------------TEXT------------------------##
Prev: New YorkUp: Summer 2011Next: Eindhoven and Maastricht
Willoughby Windows
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/easttotemwest/index.html
##-----------------TITLE------------------------##
East Totem West
##------------------TEXT------------------------##
Prev: ParisUp: Summer 2011Next: Mendocino Coast Botanic Gardens
East Totem West
A show of poster art from the 1960s San Francisco collective East Totem West, curated by John Sisson at the Orange County Friends Meeting House, Irvine, California, June 16–18, 2011.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/j4p11/index.html
##-----------------TITLE------------------------##
Mendocino July 4th Parade
##------------------TEXT------------------------##
Prev: JessicaUp: Summer 2011Next: De Young
Mendocino July 4th Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/paris/index.html
##-----------------TITLE------------------------##
Paris and SoCG 2011
##------------------TEXT------------------------##
Prev: End of school yearUp: Summer 2011Next: East Totem West
Paris and SoCG 2011
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/deyoung/index.html
##-----------------TITLE------------------------##
De Young Museum Sculpture Garden
##------------------TEXT------------------------##
Prev: July 4th ParadeUp: Summer 2011Next: OC Fair
De Young Museum Sculpture Garden
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mcbg2/index.html
##-----------------TITLE------------------------##
Mendocino Coast Botanic Gardens
##------------------TEXT------------------------##
Prev: East Totem WestUp: Summer 2011Next: Jessica
Mendocino Coast Botanic Gardens
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/nyc/index.html
##-----------------TITLE------------------------##
New York
##------------------TEXT------------------------##
Prev: OC FairUp: Summer 2011Next: Willoughby Windows
New York
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/jessica/index.html
##-----------------TITLE------------------------##
Jessica
##------------------TEXT------------------------##
Prev: Mendocino Coast Botanic GardensUp: Summer 2011Next: July 4th Parade
Jessica
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/misc/index.html
##-----------------TITLE------------------------##
Miscellaneous
##------------------TEXT------------------------##
Prev: ICS Beach PartyUp: Summer 2002Next: At the upper pool
Miscellaneous
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino2/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: SF PeninsulaUp: Summer 2002Next: Cassel PoolPrev MendocinoMendocinoNext Mendocino
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dencp/index.html
##-----------------TITLE------------------------##
Dance Emotion at Northridge Community Park
##------------------TEXT------------------------##
Prev: Cassel PoolUp: Summer 2002Next: Holcombs at Heritage ParkPrev Dance Emotion: MoviesDance Emotion at Northridge Community ParkNext Dance Emotion: Winter Wonderland
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/icsbp/index.html
##-----------------TITLE------------------------##
ICS beach party
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Summer 2002Next: MiscellaneousPrev Beach: Crystal CoveICS year-end beach party at Corona Del Mar Main BeachNext Beach: Laguna Main
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/holherpk/index.html
##-----------------TITLE------------------------##
With the Holcombs at Heritage Park
##------------------TEXT------------------------##
Prev: Dance Emotion at NorthridgeUp: Summer 2002Next: Playgroup swim party
With the Holcombs at Heritage Park

We brought a takeout sushi picnic dinner with the plan of watching the free movie in the park;
after dinner, Diana and Michal took the dog for a walk while the kids played in the playground
and Tyler and I played with my camera.  But then we found out that it was a dive-in movie at the
swimming pool, so instead we went out for ice cream and boba tea.

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/peninsula/index.html
##-----------------TITLE------------------------##
SF Peninsula
##------------------TEXT------------------------##
Prev: Dance Emotion at the MoviesUp: Summer 2002Next: Mendocino
SF Peninsula
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/casselpool/index.html
##-----------------TITLE------------------------##
Cassel Pool
##------------------TEXT------------------------##
Prev: MendocinoUp: Summer 2002Next: Dance Emotion
Cassel Pool
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/925anaheim/index.html
##-----------------TITLE------------------------##
9-to-5 in Anaheim
##------------------TEXT------------------------##
Prev: Family and GardenUp: Summer 2002Next: Laguna Beach
9-to-5 in Anaheim
Stacy and family came to Orange County for their vacation,
so the 9-to-5 (now WorkingMoms) crowd had to have a party...
we met at their hotel in Anaheim for an afternoon swim and barbecue.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/deatm/index.html
##-----------------TITLE------------------------##
Dance Emotion at the Movies
##------------------TEXT------------------------##
Prev: At the upper poolUp: Summer 2002Next: SF PeninsulaPrev Dance Emotion: SpaceDance Emotion at the MoviesNext Dance Emotion: Northridge
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/upool/index.html
##-----------------TITLE------------------------##
At the upper pool
##------------------TEXT------------------------##
Prev: MiscellaneousUp: Summer 2002Next: Dance Emotion at the Movies
At the upper pool
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pgswim/index.html
##-----------------TITLE------------------------##
Playgroup swim party
##------------------TEXT------------------------##
Prev: Holcombs in Heritage ParkUp: Summer 2002Next: Family and GardenPrev PlaygroupPlaygroup swim partyNext Playgroup
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dublin/index.html
##-----------------TITLE------------------------##
Dublin
##------------------TEXT------------------------##
Prev: Trinity CollegeUp: Fall 2009Next: Guinness Storehouse
Dublin
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/trinity/index.html
##-----------------TITLE------------------------##
Mathematical Sculpture at Trinity College Dublin
##------------------TEXT------------------------##
Prev: Diana in BanffUp: Fall 2009Next: Dublin
Mathematical Sculpture at Trinity College Dublin
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/gd09/index.html
##-----------------TITLE------------------------##
Graph Drawing 2009
##------------------TEXT------------------------##
Prev: ChicagoUp: Fall 2009Next: Halloween
Graph Drawing 2009
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/guinness/index.html
##-----------------TITLE------------------------##
Guinness Storehouse
##------------------TEXT------------------------##
Prev: DublinUp: Fall 2009Next: Chicago
Guinness Storehouse
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/chicago/index.html
##-----------------TITLE------------------------##
Chicago
##------------------TEXT------------------------##
Prev: Guinness StorehouseUp: Fall 2009Next: Graph Drawing
Chicago
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/halloween09/index.html
##-----------------TITLE------------------------##
Halloween
##------------------TEXT------------------------##
Prev: Graph DrawingUp: Fall 2009Next: Boat Parade
Halloween
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/eades60/index.html
##-----------------TITLE------------------------##
Workshop on Theory and Practice of Graph Drawing on the occasion of the 60th birthday of Peter Eades
##------------------TEXT------------------------##
Prev: LACMAUp: Fall 2012Next: San Joaquin Wildlife Sanctuary
Workshop on Theory and Practice of Graph Drawingon the occasion of the 60th birthday of Peter Eades
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sjws6/index.html
##-----------------TITLE------------------------##
San Joaquin Wildlife Sanctuary
##------------------TEXT------------------------##
Prev: Workshop on Theory and Practice of Graph DrawingUp: Fall 2012Next: Urbana
San Joaquin Wildlife Sanctuary
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/labparking/index.html
##-----------------TITLE------------------------##
Parking lot at The Lab
##------------------TEXT------------------------##
Prev: Parachute RatUp: Spring 2014Next: Dobby
Parking lot at The Lab


Taken Sunday, May 18, 2014, 07:32:57PM.
Original image size: 2592x1456, 612kb
Technical details: DROID2 GLOBAL, 383/62500s@ F2.8, ISO 102, 4mm
Reduce noise, Sat10, USM 15:150 25:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bellairs/index.html
##-----------------TITLE------------------------##
Bellairs Research Institute, Barbados
##------------------TEXT------------------------##
Prev: Steward Mirror LabUp: Spring 2014Next: Celebrate UCI
Bellairs Research Institute, Barbados
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/parachuterat/index.html
##-----------------TITLE------------------------##
Parachute Rat
##------------------TEXT------------------------##
Prev: Celebrate UCIUp: Spring 2014Next: Lab Parking
Parachute Rat


Taken Sunday, April 27, 2014, 06:21:26PM.
Original image size: 736x1296, 464kb
Technical details: DROID2 GLOBAL, 3963/1000000s@ F2.8, ISO 102, 4mm
PS CS5 Color balance 15:0:-15, Levels 20:0:255, USM 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wayzgoose14/index.html
##-----------------TITLE------------------------##
Celebrate UCI Car Show
##------------------TEXT------------------------##
Prev: BellairsUp: Spring 2014Next: Parachute Rat
Celebrate UCI Car Show
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bridging/index.html
##-----------------TITLE------------------------##
Girl Scout Bridging Ceremony
##------------------TEXT------------------------##
Prev: OttawaUp: Fall 2003Next: Slumber partyPrev Girl Scouts: Brownie End of YearGirl Scout Bridging CeremonyNext Girl Scouts: International Day

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cchw03/index.html
##-----------------TITLE------------------------##
Childrens Center Halloween Party
##------------------TEXT------------------------##
Prev: U. Hills Halloween PartyUp: Fall 2003Next: Pumpkins
Childrens Center Halloween Party
All photos taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pumpkins03/index.html
##-----------------TITLE------------------------##
Halloween Pumpkins
##------------------TEXT------------------------##
Prev: Childrens CenterUp: Fall 2003Next: Crystal Cove
Halloween Pumpkins
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boobash03/index.html
##-----------------TITLE------------------------##
Boo Bash
##------------------TEXT------------------------##
Prev: Tanaka FarmsUp: Fall 2003Next: Univ. Hills Halloween Party
Boo Bash
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam7/index.html
##-----------------TITLE------------------------##
Sara and Timothy
##------------------TEXT------------------------##
Prev: Winter LodgeUp: Fall 2003Next: Dance Emotion
Sara and Timothy
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s9bd/index.html
##-----------------TITLE------------------------##
Sara's 9th birthday slumber party
##------------------TEXT------------------------##
Prev: Bridging ceremonyUp: Fall 2003Next: Tanaka Farms
Sara's 9th birthday slumber party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tg03/index.html
##-----------------TITLE------------------------##
Thanksgiving Dinner at Eric and Rebecca's House
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Fall 2003Next: Winter Lodge
Thanksgiving Dinner at Eric and Rebecca's House
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/winterlodge/index.html
##-----------------TITLE------------------------##
Skating at the Winter Lodge
##------------------TEXT------------------------##
Prev: ThanksgivingUp: Fall 2003Next: Sara and Timothy
Skating at the Winter Lodge
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hw03/index.html
##-----------------TITLE------------------------##
Univ. Hills Halloween Party
##------------------TEXT------------------------##
Prev: Boo BashUp: Fall 2003Next: Childrens Center
Univ. Hills Halloween Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka3/index.html
##-----------------TITLE------------------------##
Tanaka Farms
##------------------TEXT------------------------##
Prev: Birthday sleepoverUp: Fall 2003Next: Boo Bash
Tanaka Farms
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvvmhc/index.html
##-----------------TITLE------------------------##
Vista Verde Vocal Music Holiday Concert
##------------------TEXT------------------------##
Prev: Dance EmotionUp: Winter 2003-2004Next: Santa at South CoastPrev Vista Verde: Bonita CanyonVista Verde Vocal Music Holiday ConcertNext Vista Verde: Wax Museum
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dehh/index.html
##-----------------TITLE------------------------##
Dance Emotion: Honolulu Holiday
##------------------TEXT------------------------##
Prev: Sara and TimothyUp: Winter 2003-2004Next: Vista Verde Holiday ConcertPrev Dance Emotion: Shake Rattle & RollDance Emotion: Honolulu Holiday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino5/index.html
##-----------------TITLE------------------------##
Mendocino and Environs
##------------------TEXT------------------------##
Prev: Christmas EveUp: Winter 2003-2004Next: San Joaquin Wildlife SanctuaryPrev MendocinoMendocino and Environs
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t5bd/index.html
##-----------------TITLE------------------------##
Timothy's Fifth Birthday Party
##------------------TEXT------------------------##
Prev: Birthday at Children's CenterUp: Winter 2003-2004Next: Hot Shots
Timothy's Fifth Birthday Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/santa03/index.html
##-----------------TITLE------------------------##
Santa Claus at South Coast Plaza
##------------------TEXT------------------------##
Prev: Holiday ConcertUp: Winter 2003-2004Next: Wax Museum
Santa Claus at South Coast Plaza
All photos taken by Diana. Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hbkf/index.html
##-----------------TITLE------------------------##
Huntington Beach Kite Festival
##------------------TEXT------------------------##
Prev: Family and GardenUp: Winter 2003-2004Next: Timothy's birthday at Children's Center
Huntington Beach Kite Festival
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvwm/index.html
##-----------------TITLE------------------------##
Wax Museum of California Native Americans
##------------------TEXT------------------------##
Prev: Santa at South CoastUp: Winter 2003-2004Next: Boat ParadePrev Vista Verde: Holiday ConcertWax Museum of California Native AmericansNext Vista Verde: Gold Rush Day
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boatparade03/index.html
##-----------------TITLE------------------------##
Newport Beach Parade of Lights
##------------------TEXT------------------------##
Prev: Wax MuseumUp: Winter 2003-2004Next: Christmas Eve
Newport Beach Parade of Lights
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/famgar2/index.html
##-----------------TITLE------------------------##
Family and garden
##------------------TEXT------------------------##
Prev: San Joaquin Wildlife SanctuaryUp: Winter 2003-2004Next: Huntington Beach Kite Festival
Family and garden
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmas03/index.html
##-----------------TITLE------------------------##
Christmas Eve
##------------------TEXT------------------------##
Prev: Boat ParadeUp: Winter 2003-2004Next: Mendocino
Christmas Eve
Opening presents at the Cassels after church,
or, an excuse to try out the new tripod Diana gave me.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sjws5/index.html
##-----------------TITLE------------------------##
San Joaquin Wildlife Sanctuary
##------------------TEXT------------------------##
Prev: MendocinoUp: Winter 2003-2004Next: Family and gardenPrev SJWSSan Joaquin Wildlife Sanctuary
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t5cc/index.html
##-----------------TITLE------------------------##
Timothy's 5th Birthday Celebration at Children's Center
##------------------TEXT------------------------##
Prev: Huntington Beach Kite FestivalUp: Winter 2003-2004Next: Timothy's Birthday Party
Timothy's 5th Birthday Celebration at Children's Center
All photos taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino9/index.html
##-----------------TITLE------------------------##
Mendocino and environs
##------------------TEXT------------------------##
Prev: Baxman Gravel CompanyUp: Summer 2010Next: Konstanz
Mendocino and environs
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/aikido/index.html
##-----------------TITLE------------------------##
Aikido
##------------------TEXT------------------------##
Prev: SnowbirdUp: Summer 2010Next: Avalon
Aikido
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/zoocousins/index.html
##-----------------TITLE------------------------##
Cousins at the San Francisco Zoo
##------------------TEXT------------------------##
Prev: Gunderson's mathematical modelsUp: Summer 2010Next: A walk across the Golden Gate
Cousins at the San Francisco Zoo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/gunderson/index.html
##-----------------TITLE------------------------##
David Gunderson's mathematical models
##------------------TEXT------------------------##
Prev: AvalonUp: Summer 2010Next: Cousins at the Zoo
David Gunderson's mathematical models
Machray Hall, University of Manitoba, Winnipeg
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/littlewomen/index.html
##-----------------TITLE------------------------##
Little Women
##------------------TEXT------------------------##
Prev: Turtle Rock Band ConcertUp: Summer 2010Next: Snowbird
Little Women
South Coast Repertory's Teen Ensemble presents scenes from Little Women together with staged readings of Go Bananas by Amanda Koppe and The Dream by Gemmenne De La Pena,
under the direction of Mercy Vasquez.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/snowbird/index.html
##-----------------TITLE------------------------##
Snowbird
##------------------TEXT------------------------##
Prev: Little WomenUp: Summer 2010Next: Aikido
Snowbird
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/trcon10/index.html
##-----------------TITLE------------------------##
Turtle Rock Band Concert
##------------------TEXT------------------------##
Prev: Mesa Storm SewerUp: Summer 2010Next: Little Women
Turtle Rock Band Concert
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/avalon/index.html
##-----------------TITLE------------------------##
Avalon
##------------------TEXT------------------------##
Prev: AikidoUp: Summer 2010Next: David Gunderson's mathematical models
Avalon
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ggwalk/index.html
##-----------------TITLE------------------------##
A Walk Across the Golden Gate
##------------------TEXT------------------------##
Prev: Cousins at the ZooUp: Summer 2010Next: Baxman Gravel Company
A Walk Across the Golden Gate
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/baxman/index.html
##-----------------TITLE------------------------##
Baxman Gravel Company
##------------------TEXT------------------------##
Prev: A walk across the Golden GateUp: Summer 2010Next: Mendocino and environs
Baxman Gravel Company
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bsc/index.html
##-----------------TITLE------------------------##
Black Star Canyon
##------------------TEXT------------------------##
Prev: Solar DecathlonUp: Winter 2015–2016
Black Star Canyon
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lim/index.html
##-----------------TITLE------------------------##
Limerick and Environs
##------------------TEXT------------------------##
Prev: Taavi's birthdayUp: Fall 2005Next: Cabaret
Limerick and Environs
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvcab/index.html
##-----------------TITLE------------------------##
Vocal Ensemble Dessert and Cabaret
##------------------TEXT------------------------##
Prev: LimerickUp: Fall 2005Next: Sara's 11th birthdayPrev Vista Verde: World FairVocal Ensemble Dessert and Cabaret
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka05/index.html
##-----------------TITLE------------------------##
Tanaka Farms
##------------------TEXT------------------------##
Prev: O'Neill Regional ParkUp: Fall 2005Next: Boo Bash
Tanaka Farms
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pumpkins05/index.html
##-----------------TITLE------------------------##
Halloween Pumpkins
##------------------TEXT------------------------##
Prev: Univ. Hills Halloween PartyUp: Fall 2005Next: Joshua Tree
Halloween Pumpkins
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boobash05/index.html
##-----------------TITLE------------------------##
Boo Bash
##------------------TEXT------------------------##
Prev: Tanaka FarmsUp: Fall 2005Next: Univ. Hills Halloween Party
Boo Bash
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hw05/index.html
##-----------------TITLE------------------------##
Univ. Hills Halloween Party
##------------------TEXT------------------------##
Prev: Boo BashUp: Fall 2005Next: Pumpkins
Univ. Hills Halloween Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/onrp/index.html
##-----------------TITLE------------------------##
O'Neill Regional Park
##------------------TEXT------------------------##
Prev: Sara's BirthdayUp: Fall 2005Next: Tanaka Farms
O'Neill Regional Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh6/index.html
##-----------------TITLE------------------------##
Indian Cove, Joshua Tree
##------------------TEXT------------------------##
Prev: PumpkinsUp: Fall 2005Next: Christmas KidsPrev Playgroup: Joshua TreeIndian Cove, Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s11bd/index.html
##-----------------TITLE------------------------##
Sara's 11th Birthday
##------------------TEXT------------------------##
Prev: CabaretUp: Fall 2005Next: O'Neill Regional Park
Sara's 11th Birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvgo/index.html
##-----------------TITLE------------------------##
Grand Opening of new Vista Verde Campus
##------------------TEXT------------------------##
Prev: Sara's 12th birthdayUp: Fall 2006Next: Tanaka Farms
Grand Opening of new Vista Verde Campus
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s12bd/index.html
##-----------------TITLE------------------------##
Sara's 12th birthday, and a visit from Charlie and family
##------------------TEXT------------------------##
Prev: Jungle MuralUp: Fall 2006Next: Vista Verde Grand Opening
Sara's 12th birthday, and a visit from Charlie and family
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka06/index.html
##-----------------TITLE------------------------##
Tanaka Farms
##------------------TEXT------------------------##
Prev: Vista Verde Grand OpeningUp: Fall 2006Next: Halloween party
Tanaka Farms
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh7/index.html
##-----------------TITLE------------------------##
Indian Cove, Joshua Tree
##------------------TEXT------------------------##
Prev: U. Hills Halloween PartyUp: Fall 2006Next: Christmas Tree Cat
Indian Cove, Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hw06/index.html
##-----------------TITLE------------------------##
University Hills Halloween Party
##------------------TEXT------------------------##
Prev: Tanaka FarmsUp: Fall 2006Next: Joshua Tree
University Hills Halloween Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvpromo/index.html
##-----------------TITLE------------------------##
Vista Verde 8th Grade Promotion Ceremony
##------------------TEXT------------------------##
Prev: Angela and Chris' weddingUp: Summer 2008Next: Sequoia National Monument and Kern River
Vista Verde 8th Grade Promotion Ceremony
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/silver/index.html
##-----------------TITLE------------------------##
Silver Award Ceremony
##------------------TEXT------------------------##
Prev: SeussicalUp: Summer 2008Next: Angela and Chris' wedding
Silver Award Ceremony
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/angela+chris/index.html
##-----------------TITLE------------------------##
Spring 2008 Photos
##------------------TEXT------------------------##
Prev: Silver AwardUp: Summer 2008Next: Vista Verde promotion
Angela and Chris' wedding
Click on any picture for a gallery of more images.


David Eppstein, ICS, UC Irvine
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/robot/index.html
##-----------------TITLE------------------------##
The Robot Cometh
##------------------TEXT------------------------##
Prev: Kern RiverUp: Summer 2008Next: Santa Barbara
The Robot Cometh
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/kern/index.html
##-----------------TITLE------------------------##
Sequoia National Monument and the Kern Valley
##------------------TEXT------------------------##
Prev: Vista Verde promotionUp: Summer 2008Next: The Robot Cometh
Sequoia National Monument and the Kern Valley
The first twelve photos are mine; the rest are by the photographer from Kern River Outfitters.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sb/index.html
##-----------------TITLE------------------------##
Santa Barbara
##------------------TEXT------------------------##
Prev: The Robot ComethUp: Summer 2008Next: The Netherlands
Santa Barbara
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/korea/index.html
##-----------------TITLE------------------------##
Korea
##------------------TEXT------------------------##
Prev: KinderdijkUp: Winter 2010-2011Next: Wayzgoose
Korea
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t8bd/index.html
##-----------------TITLE------------------------##
Timothy's 8th Birthday
##------------------TEXT------------------------##
Prev: Windy HillUp: Winter 2006-2007Next: Renaissance Faire
Timothy's 8th Birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmaskids06/index.html
##-----------------TITLE------------------------##
Christmas Kids
##------------------TEXT------------------------##
Prev: Christmas Tree CatUp: Winter 2006-2007Next: Boat Parade
Christmas Kids
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/windyhill/index.html
##-----------------TITLE------------------------##
Windy Hill
##------------------TEXT------------------------##
Prev: Cake TrainUp: Winter 2006-2007Next: Timothy's 8th birthday
Windy Hill
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bp06/index.html
##-----------------TITLE------------------------##
Newport Beach Parade of Lights
##------------------TEXT------------------------##
Prev: Christmas KidsUp: Winter 2006-2007Next: Mendocino
Newport Beach Parade of Lights
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xtcat/index.html
##-----------------TITLE------------------------##
Christmas Tree Cat
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Winter 2006-2007Next: Christmas Kids
Christmas Tree Cat


Original image size: 2048x2560, 1.9Mb
Technical details: Canon EOS D60, 1/13s @ F2.8, ISO 800, 70-200mm/F2.8 @
200mm (320mm equiv)
PS7 CRW 3000:15, 1:0:50:50:0:25:45, Crop, USM 20:20
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino8/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: Boat ParadeUp: Winter 2006-2007Next: Cake Train
Mendocino
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/caketrain/index.html
##-----------------TITLE------------------------##
Cake Train
##------------------TEXT------------------------##
Prev: MendocinoUp: Winter 2006-2007Next: Windy Hill
Cake Train
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boatparade12/index.html
##-----------------TITLE------------------------##
Newport Beach Parade of Lights
##------------------TEXT------------------------##
Prev: UrbanaUp: Winter 2012-2013Next: Sara in Lost Hills
Newport Beach Parade of Lights
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/keplerphone/index.html
##-----------------TITLE------------------------##
Phone Booth @ Kepler's, Menlo Park
##------------------TEXT------------------------##
Prev: Sara in Denny'sUp: Winter 2012-2013Next: Office view
Phone Booth @ Kepler's, Menlo Park


Taken Monday, December 31, 2012, 04:00:45PM.
Original image size: 4868x2792, 1.8Mb
Technical details: DROID2 GLOBAL, 733/500000s@ F2.8, ISO 102, 4mm
Channel mixer R 0:0:100 B 100:0:0 G 30:70:0; Channel mixer R 0:100:0 G 100:0:0 B 0:0:100
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/officeview/index.html
##-----------------TITLE------------------------##
The view from my office
##------------------TEXT------------------------##
Prev: Phone boothUp: Winter 2012-2013Next: Stevens Creek Park

The view from my office
Taken Monday, January 07, 2013, 06:12:24PM.
Original image size: 3888x2592, 1.2Mb
Technical details: Canon EOS 40D, 1/13s@ F5.6, ISO 200, 17-85mm f/4-5.6, 17mm (27mm equiv)
PS CS5 Con50, CVS 40:40:20, LS25, profile
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/saradennys/index.html
##-----------------TITLE------------------------##
Sara in Denny's, Lost Hills
##------------------TEXT------------------------##
Prev: Boat ParadeUp: Winter 2012-2013Next: Phone Booth
Sara in Denny's, Lost Hills


Taken Sunday, December 23, 2012, 01:13:25PM.
Original image size: 2355x1325, 506kb
Technical details: DROID2 GLOBAL, 1/30s @ F2.8, ISO 114, 4mm
PS CS5 Crop, Median 1, USM 30:20, Levels 15:1.05:255
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/urbana/index.html
##-----------------TITLE------------------------##
Urbana
##------------------TEXT------------------------##
Prev: San Joaquin Wildlife SanctuaryUp: Winter 2012-2013
Urbana
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/palm/index.html
##-----------------TITLE------------------------##
Fall palms
##------------------TEXT------------------------##
Prev: Garden Park KidsUp: Fall 2002Next: Long Beach Aquarium
Fall palms
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/holherpk2/index.html
##-----------------TITLE------------------------##
With the Holcombs at Heritage Park, II
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Fall 2002Next: Sara's 8th Birthday Party
With the Holcombs at Heritage Park, II
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/misc2/index.html
##-----------------TITLE------------------------##
Miscellaneous
##------------------TEXT------------------------##
Prev: Upper Newport BayUp: Fall 2002Next: Brownie Investiture
Miscellaneous
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh2/index.html
##-----------------TITLE------------------------##
Joshua Tree
##------------------TEXT------------------------##
Prev: LegolandUp: Fall 2002Next: Tanaka FarmsPrev Playgroup: Swim PartyJoshua TreeNext: Playgroup: Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hw02/index.html
##-----------------TITLE------------------------##
University Hills Halloween Party
##------------------TEXT------------------------##
Prev: Boo BashUp: Fall 2002Next: Pumpkins
University Hills Halloween Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/legoland/index.html
##-----------------TITLE------------------------##
Legoland
##------------------TEXT------------------------##
Prev: San Diego Wild Animal ParkUp: Fall 2002Next: Joshua Tree
Legoland
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/gpkids/index.html
##-----------------TITLE------------------------##
Kids in the garden park
##------------------TEXT------------------------##
Prev: ThomasUp: Fall 2002Next: Fall Palms
Kids in the garden park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/balboa/index.html
##-----------------TITLE------------------------##
Balboa Peninsula
##------------------TEXT------------------------##
Prev: Sara's 8th Birthday PartyUp: Fall 2002Next: Carlsbad
Balboa Peninsula
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/carlsbad/index.html
##-----------------TITLE------------------------##
Carlsbad
##------------------TEXT------------------------##
Prev: Balboa PeninsulaUp: Fall 2002San Diego Wild Animal Park
Carlsbad
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lazoo/index.html
##-----------------TITLE------------------------##
Los Angeles Zoo
##------------------TEXT------------------------##
Prev: Heartbreakers SoccerUp: Fall 2002Next: Crystal CovePrev ZooLos Angeles ZooNext Zoo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boobash02/index.html
##-----------------TITLE------------------------##
Boo Bash
##------------------TEXT------------------------##
Prev: Tanaka FarmsUp: Fall 2002Next: U. Hills Party
Boo Bash at University Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bihp/index.html
##-----------------TITLE------------------------##
Brownie investiture ceremony at Heritage Park
##------------------TEXT------------------------##
Prev: MiscellaneousUp: Fall 2002Next: ThomasPrev Brownies: Fashion IslandBrownie investiture ceremony at Heritage ParkNext Brownies: Back Bay
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/backbay/index.html
##-----------------TITLE------------------------##
Upper Newport Bay Nature Preserve and Ecological Reserve
##------------------TEXT------------------------##
Prev: PumpkinsUp: Fall 2002Next: Miscellaneous
Upper Newport Bay Nature Preserve and Ecological Reserve
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s8bd/index.html
##-----------------TITLE------------------------##
Sara's 8th Birthday Party
##------------------TEXT------------------------##
Prev: Heritage ParkUp: Fall 2002Next: Balboa Peninsula
Sara's 8th Birthday Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdwap/index.html
##-----------------TITLE------------------------##
San Diego Wild Animal Park
##------------------TEXT------------------------##
Prev: CarlsbadUp: Fall 2002Next: LegolandPrev ZooSan Diego Wild Animal ParkNext Zoo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/heartbreakers/index.html
##-----------------TITLE------------------------##
Heartbreakers Soccer
##------------------TEXT------------------------##
Prev: Laguna BeachUp: Fall 2002Next: L. A. Zoo
Heartbreakers Soccer
Click on any picture for a gallery of more images.
First practiceFourth practice

Game 1: Blue Angels
Game 2: Green Gryffindors
Game 3: Fire Eagles

Game 4: Pink Panthers
Game 5: White Dynamite
Game 7: Orange Tigers

Game 8: Purple Puppies
Game 9: Pink Angels
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka2/index.html
##-----------------TITLE------------------------##
Tanaka Farms Pumpkin Patch
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Fall 2002Next: Boo Bash
Tanaka Farms Pumpkin Patch
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lbaq/index.html
##-----------------TITLE------------------------##
Long Beach Aquarium
##------------------TEXT------------------------##
Prev: Fall palmsUp: Fall 2002Next: San Joaquin Wildlife SanctuaryPrev AquariumLong Beach AquariumNext Aquarium
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pumpkins/index.html
##-----------------TITLE------------------------##
Halloween Pumpkins
##------------------TEXT------------------------##
Prev: U. Hills partyUp: Fall 2002Next: Upper Newport Bay
Halloween Pumpkins
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wwrmarlins/index.html
##-----------------TITLE------------------------##
Woodbridge Waveriders vs Westpark Marlins
##------------------TEXT------------------------##
Prev: PisaUp: Summer 2005Next: July 4th Parade
Woodbridge Waveriders vs Westpark Marlins
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/j4p05/index.html
##-----------------TITLE------------------------##
Mendocino July 4th Parade
##------------------TEXT------------------------##
Prev: Waveriders vs MarlinsUp: Summer 2005Next: Fuente art car
Mendocino July 4th Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/taavi6bd/index.html
##-----------------TITLE------------------------##
Taavi's Tumbling Birthday
##------------------TEXT------------------------##
Prev: Camp SurfUp: Summer 2005Next: Limerick
Taavi's Tumbling Birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pisa/index.html
##-----------------TITLE------------------------##
Pisa
##------------------TEXT------------------------##
Prev: Butter BattleUp: Summer 2005Next: Waveriders vs Marlins
Pisa
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fuente/index.html
##-----------------TITLE------------------------##
Fuente Art Car
##------------------TEXT------------------------##
Prev: July 4th ParadeUp: Summer 2005Next: Headlands
Fuente Art Car
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/butterbattle/index.html
##-----------------TITLE------------------------##
The Butter Battle
##------------------TEXT------------------------##
Prev: Vista Verde World FairUp: Summer 2005Next: Pisa
The Butter Battle
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/headlands/index.html
##-----------------TITLE------------------------##
Mendocino Headlands
##------------------TEXT------------------------##
Prev: Fuente art carUp: Summer 2005Next: Camp Surf
Mendocino Headlands
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/campsurf/index.html
##-----------------TITLE------------------------##
Camp Surf
##------------------TEXT------------------------##
Prev: Mendocino HeadlandsUp: Summer 2005Next: Taavi's Birthday
Camp Surf
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/utrechtgraffiti/index.html
##-----------------TITLE------------------------##
Graffiti in Westplein bicycle underpass, Utrecht
##------------------TEXT------------------------##
Prev: AmersfoortUp: Fall 2010Next: Kinderdijk
Graffiti in Westplein bicycle underpass, Utrecht
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/amersfoort/index.html
##-----------------TITLE------------------------##
Amersfoort
##------------------TEXT------------------------##
Prev: DagstuhlUp: Fall 2010Next: Utrecht Graffiti
Amersfoort
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dagstuhl/index.html
##-----------------TITLE------------------------##
Dagstuhl
##------------------TEXT------------------------##
Prev: KonstanzUp: Fall 2010Next: Amersfoort
Dagstuhl
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/kinderdijk/index.html
##-----------------TITLE------------------------##
Kinderdijk
##------------------TEXT------------------------##
Prev: Utrecht GraffitiUp: Fall 2010Next: Korea
Kinderdijk
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/konstanz/index.html
##-----------------TITLE------------------------##
Konstanz
##------------------TEXT------------------------##
Prev: MendocinoUp: Fall 2010Next: Dagstuhl
Konstanz
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvgrd/index.html
##-----------------TITLE------------------------##
Gold Rush Day
##------------------TEXT------------------------##
Prev: International DayUp: Spring 2004Next: Fire TrucksPrev Vista Verde: Wax MuseumGold Rush Day at Vista VerdeNext Vista Verde: Back to school
All but the first two photos taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/eggs/index.html
##-----------------TITLE------------------------##
This year's batch
##------------------TEXT------------------------##
Prev: Death ValleyUp: Spring 2004Next: West Yale
This year's batch


Taken Sunday, April 11, 2004, 07:41:06am.  Original image size: 3072x2048, 6.4Mb
Technical details: Canon EOS D60, 1/30s @ F2.8, ISO 400, 28mm/F2.8 (45mm equiv)
PS7 CRW 0.65:0:55:60:3:25:10, Crop, Heal counter, USM 30:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/firetrucks/index.html
##-----------------TITLE------------------------##
Fire Trucks at Irvine Civic Center
##------------------TEXT------------------------##
Prev: Gold Rush DayUp: Spring 2004Next: Miscellaneous
Fire Trucks at Irvine Civic Center
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tball/index.html
##-----------------TITLE------------------------##
Mariners T-Ball
##------------------TEXT------------------------##
Prev: Hot ShotsUp: Spring 2004Next: Death Valley
Mariners T-Ball
Click on any picture for a gallery of more images.

Mariners vs Dodgers
Mariners vs Athletics
Mariners vs Giants
Mariners vs White Sox
Mariners vs Cubs
Mariners vs White Sox
Mariners vs Dodgers
Mariners vs White Sox
Mariners vs Cubs
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/westyalebridge/index.html
##-----------------TITLE------------------------##
West Yale between Alton and Barranca
##------------------TEXT------------------------##
Prev: Easter EggsUp: Spring 2004Next: International Day
West Yale between Alton and Barranca
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hotshots/index.html
##-----------------TITLE------------------------##
Hot Shots Softball
##------------------TEXT------------------------##
Prev: Timothy's birthday partyUp: Spring 2004Next: Mariners T-Ball
Hot Shots Softball
Click on any picture for a gallery of more images.

Opening Day Ceremony andHot Shots vs Spunkee Monkeez
Hot Shots vsRed Hot Chili Peppers
Hot Shots vs Dragons
Hot Shots vs Blue Crew
Hot Shots vs Blue Devils
Hot Shots vs Blizzards
Hot Shots vs Afterburners
Hot Shots vs Gold Rush
Hot Shots vs Ice Breakers
Hot Shots vs Major Pain
Hot Shots vsRed Hot Chili Peppers
Hot Shots vs Spunkee Monkeez
Hot Shots vs Blue Crew
Hot Shots vs Fire on the Field
Hot Shots vs Dragons

Hot Shots vsRed Hot Chili Peppers
Hot Shots vs Major Pain
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/iday04/index.html
##-----------------TITLE------------------------##
International Day
##------------------TEXT------------------------##
Prev: West YaleUp: Spring 2004Next: Gold Rush DayPrev Girl Scouts: Bridging CeremonyInternational Day

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka/index.html
##-----------------TITLE------------------------##
Tanaka Farms Pumpkin Patch, Oct. 21, 2001
##------------------TEXT------------------------##
Prev: Sea WorldUp: Fall 2001Next: Autumn in University Hills
Tanaka Farms Pumpkin Patch, Oct. 21, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dragonflys.html
##-----------------TITLE------------------------##
Dragonflys Soccer, 2001
##------------------TEXT------------------------##
Prev: EggUp: Fall 2001Next: Sara's 7th Birthday Party

Dragonflys Soccer, 2001


Practice, August 25
Practice, September 25
Blue Dolphins, September 29
Burgundy Butterflies, October 13
Red Hots, October 27
Lightning Bolts, November 3
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bar/index.html
##-----------------TITLE------------------------##
Barcelona, Sept. 7 - 17, 2001
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Fall 2001Next: Egg
Barcelona, Sept. 7 - 17, 2001
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/egg/index.html
##-----------------TITLE------------------------##
Standing Egg on White Plate
##------------------TEXT------------------------##
Prev: BarcelonaUp: Fall 2001Next: Dragonflys
Standing Egg on White Plate

For Bill Jones' great egg shootout.


It's too bad the images had to be converted to greyscale,
the original has some
pretty color contrast between the egg and the trellis/sky reflection 
in the plate.
Taken Sunday, September 23, 2001, 02:33:48pm.  Original image size: 1600x1200, 675kb
Technical details: Olympus C700UZ, 1/250s @ F3.5, ISO 100, 99mm
PS6 Greyscale, Levels 100 3 195, USM 30:20 - 30:4 - 100:0.5, Clone upper right rim
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ihf/index.html
##-----------------TITLE------------------------##
Irvine Harvest Festival, Oct. 6, 2001
##------------------TEXT------------------------##
Prev: Sara's 7th Birthday PartyUp: Fall 2001Next: Dance Emotion @ Harvest Festival
Irvine Harvest Festival, Oct. 6, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hw01/index.html
##-----------------TITLE------------------------##
Boo Bash and U.Hills party, Halloween 2001
##------------------TEXT------------------------##
Prev: Autumn in University HillsUp: Fall 2001Next: Massachusetts
Boo Bash and U.Hills party, Halloween 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mass/index.html
##-----------------TITLE------------------------##
Massachusetts, November 2001
##------------------TEXT------------------------##
Prev: Boo Bash and U. Hills partyUp: Fall 2001Next: Charlotte and family
Massachusetts, November 2001
Click on any picture for a gallery of more images. All shot times Pacific.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s7bd/index.html
##-----------------TITLE------------------------##
Sara's 7th birthday party, Sept. 29, 2001
##------------------TEXT------------------------##
Prev: DragonflysUp: Fall 2001Next: Irvine Harvest Festival
Sara's 7th birthday party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam3/index.html
##-----------------TITLE------------------------##
Family and Miscellaneous
##------------------TEXT------------------------##
Prev: Mason Regional ParkUp: Fall 2001Next: Around the house
Family and Miscellaneous
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dehf/index.html
##-----------------TITLE------------------------##
Dance Emotion @ Harvest Festival
##------------------TEXT------------------------##
Prev: Irvine Harvest FestivalUp: Fall 2001Next: Sea WorldDance Emotion @ Harvest FestivalNext Dance Emotion: Space
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/charlotte/index.html
##-----------------TITLE------------------------##
Charlotte and family
##------------------TEXT------------------------##
Prev: MassachusettsUp: Fall 2001Next: Mason Regional Park
Charlotte and family
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mason/index.html
##-----------------TITLE------------------------##
Mason Regional Park
##------------------TEXT------------------------##
Prev: Charlotte and familyUp: Fall 2001Next: Family and Miscellaneous
Mason Regional Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/seaworld/index.html
##-----------------TITLE------------------------##
Sea World, Oct. 8, 2001
##------------------TEXT------------------------##
Prev: Dance Emotion @ Harvest FestivalUp: Fall 2001Next: Tanaka Farms Pumpkin Patch
Sea World, Oct. 8, 2001
Pictures taken by Diana. Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boatparade11/index.html
##-----------------TITLE------------------------##
Newport Beach Boat Parade
##------------------TEXT------------------------##
Prev: Cooper's HawkUp: Winter 2011-2012Next: Hendy Woods
Newport Beach Boat Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hawk/index.html
##-----------------TITLE------------------------##
Cooper's Hawk
##------------------TEXT------------------------##
Prev: Engineering Hall Stair ShadowsUp: Winter 2011-2012Next: Boat Parade
Cooper's Hawk


Taken Sunday, December 18, 2011, 12:24:39PM.
Original image size: 861x1291, 362kb
Technical details: Canon EOS 40D, 1/500s@ F8, ISO 400, 70-200mm f/2.8L IS, 280mm (448mm equiv)
PS CS5 Daylight, 0.35:0:0:15:50:0, CVS 70:40:0, Lum10, RC20, Crop, USM 20:20
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/greerpark/index.html
##-----------------TITLE------------------------##
Greer Park Skateboard Bowl
##------------------TEXT------------------------##
Prev: Hoover ParkUp: Winter 2011-2012Next: Family and Friends
Greer Park Skateboard Bowl
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hendywoods2/index.html
##-----------------TITLE------------------------##
Hendy Woods
##------------------TEXT------------------------##
Prev: Boat ParadeUp: Winter 2011-2012Next: Hoover Park
Hendy Woods
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hooverpark/index.html
##-----------------TITLE------------------------##
HooverPark
##------------------TEXT------------------------##
Prev: Hendy WoodsUp: Winter 2011-2012Next: Greer Park
HooverPark
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wayzgoose/index.html
##-----------------TITLE------------------------##
Wayzgoose / Celebrate UCI
##------------------TEXT------------------------##
Prev: Santiago CanyonUp: Spring 2003Next: Easter
Wayzgoose / Celebrate UCI
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ivy/index.html
##-----------------TITLE------------------------##
Poison Ivy Softball
##------------------TEXT------------------------##
Prev: Timothy's birthday partyUp: Spring 2003Next: Girl Scout Cookie Sale
Poison Ivy Softball
Click on any picture for a gallery of more images.

Game 1: Blue Angels
Game 2: Tidal Waves
Game 3: Purple Panthers
Game 4: Sluggers
Game 5: Rally Monkeys
Game 6: Stingers
Game 7: Tigers
Angels vs. Oakland A's
Game 8: Stingers
Game 9: Blue Angels
Game 10: Lucky Leprechauns
Game 11: Sharks

Game 12: Sluggers
Game 13: Red Hot Chile Peppers
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc7/index.html
##-----------------TITLE------------------------##
Crystal Cove
##------------------TEXT------------------------##
Prev: EasterUp: Spring 2003Next: International DayPrev Beach: Crystal CoveCrystal CoveNext Beach: Glass Beach
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/braces/index.html
##-----------------TITLE------------------------##
Before and After Braces
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Spring 2003Next: Santiago Canyon
Before and After Braces
"Before" photos taken by Diana.  Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cookiesale/index.html
##-----------------TITLE------------------------##
Girl Scout Cookie Sale
##------------------TEXT------------------------##
Prev: Poison Ivy SoftballUp: Spring 2003Next: Joshua TreePrev Brownies: Back BayGirl Scout Cookie SaleNext Brownies: Santiago Canyon

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/facepaint/index.html
##-----------------TITLE------------------------##
Face Paint
##------------------TEXT------------------------##
Prev: International DayUp: Spring 2003Next: San Joaquin Wildlife Sanctuary
Face Paint
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sarasroom/index.html
##-----------------TITLE------------------------##
In Sara's Room
##------------------TEXT------------------------##
Prev: Cabrillo BeachUp: Spring 2003Next: Brownie end of year party
In Sara's Room
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t4bd/index.html
##-----------------TITLE------------------------##
Timothy's 4th birthday party
##------------------TEXT------------------------##
Prev: Childrens CenterUp: Spring 2003Next: Poison Ivy Softball
Timothy's 4th birthday party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cabrillo/index.html
##-----------------TITLE------------------------##
Campout at Cabrillo Beach
##------------------TEXT------------------------##
Prev: San Joaquin Wildlife SanctuaryUp: Spring 2003Next: Sara's RoomPrev Brownies: International DayCampout at Cabrillo BeachNext Brownies: End of year
All photos taken by Diana.
Click on any picture for a larger copy.
An aerial view of the site is available from
the
California Coastal Records Project.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/easter/index.html
##-----------------TITLE------------------------##
Easter morning
##------------------TEXT------------------------##
Prev: WayzgooseUp: Spring 2003Next: Crystal Cove
Easter morning
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh3/index.html
##-----------------TITLE------------------------##
Joshua Tree and Living Desert Museum
##------------------TEXT------------------------##
Prev: Girl Scout Cookie SaleUp: Spring 2003Next: Before and After BracesPrev Playgroup: Joshua TreeJoshua Tree and Living Desert MuseumNext Playgroup: Joshua TreePrev Zoo: San FranciscoNext Zoo: San Diego

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/santiago/index.html
##-----------------TITLE------------------------##
Brownie hike in Santiago Canyon
##------------------TEXT------------------------##
Prev: Before and After BracesUp: Spring 2003Next: WayzgoosePrev Brownies: Cookie SaleBrownie hike in Santiago CanyonNext Brownies: International Day
Photos taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/iday/index.html
##-----------------TITLE------------------------##
International Day
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Spring 2003Next: Face PaintPrev Brownies: Santiago CanyonInternational DayNext Brownies: Cabrillo Beach
All but the last three photos were taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmas04/index.html
##-----------------TITLE------------------------##
Christmas Morning in Mendocino
##------------------TEXT------------------------##
Prev: Van Damme State ParkUp: Winter 2004-2005Next: Big River
Christmas Morning in Mendocino
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmaskids04/index.html
##-----------------TITLE------------------------##
Sara and Timothy
##------------------TEXT------------------------##
Prev: Diana's PhotosUp: Winter 2004-2005Next: Holiday Vocal Concert
Sara and Timothy


Taken Saturday, December 11, 2004, 02:38:34PM.
Original image size: 3072x2048, 4.2Mb
Technical details: Canon EOS D60, 1/160s @ F5.6, ISO 100, 50mm/F1.4 (80mm equiv)
PS7 CRW 5250:-15, 0.85:5:55:70:0:25:20, Burn ctr top, Crop, USM 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hendywoods/index.html
##-----------------TITLE------------------------##
Hendy Woods
##------------------TEXT------------------------##
Prev: Big RiverUp: Winter 2004-2005Next: New Year's Eve
Hendy Woods
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t6bd/index.html
##-----------------TITLE------------------------##
Timothy's Sixth Birthday Party
##------------------TEXT------------------------##
Prev: New Year's EveUp: Winter 2004-2005Next: Diamonds in the Rough
Timothy's Sixth Birthday Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/charliecassel/index.html
##-----------------TITLE------------------------##
At the Cassels with Charlie
##------------------TEXT------------------------##
Prev: Holiday Vocal ConcertUp: Winter 2004-2005Next: Van Damme State Park
At the Cassels with Charlie
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vdsp/index.html
##-----------------TITLE------------------------##
Van Damme State Park
##------------------TEXT------------------------##
Prev: At the CasselsUp: Winter 2004-2005Next: Christmas Morning
Van Damme State Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/nye04/index.html
##-----------------TITLE------------------------##
New Years Eve
##------------------TEXT------------------------##
Prev: Hendy WoodsUp: Winter 2004-2005Next: Timothy's 6th Birthday
New Years Eve
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvhvc04/index.html
##-----------------TITLE------------------------##
Vista Verde Holiday Vocal Music Concert
##------------------TEXT------------------------##
Prev: Sara and TimothyUp: Winter 2004-2005Next: At the CasselsPrev Vista Verde: Back to SchoolVista Verde Holiday Vocal Music ConcertNext Vista Verde: Peter Rabbit
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bigriver/index.html
##-----------------TITLE------------------------##
Big River
##------------------TEXT------------------------##
Prev: Christmas MorningUp: Winter 2004-2005Next: Hendy Woods
Big River
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/jaffas/index.html
##-----------------TITLE------------------------##
Jaffas
##------------------TEXT------------------------##
Prev: Stevens Creek ParkUp: Spring 2013Next: Bending Reality
Jaffas


Taken Friday, April 05, 2013, 11:22:24PM.
Original image size: 2337x3505, 994kb
Technical details: Canon EOS 40D, 30s@ F22, ISO 100, 50mm f/1.4 (80mm equiv)
PS CS5 2700:0, B10, CVS 40:40:10, Lens profile, Level, USM 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bending-reality/index.html
##-----------------TITLE------------------------##
Bending Reality
##------------------TEXT------------------------##
Prev: JaffasUp: Spring 2013Next: Hat Concert
Bending Reality
Images of the exhibit Bending Reality: Where arc and science meet, Schloss Dagstuhl, April 2013.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/scp/index.html
##-----------------TITLE------------------------##
Stevens Creek Park
##------------------TEXT------------------------##
Prev: Office ViewUp: Spring 2013Next: Jaffas
Stevens Creek Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sky-park/index.html
##-----------------TITLE------------------------##
Sky Park, Irvine
##------------------TEXT------------------------##
Prev: MOCA and Disney HallUp: Spring 2010Next: San Diego Creek Bridge
Sky Park, Irvine
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mesa-sewer/index.html
##-----------------TITLE------------------------##
Mesa Storm Sewer, UCI
##------------------TEXT------------------------##
Prev: San Diego Creek BridgeUp: Spring 2010Next: Turtle Rock Band Concer
Mesa Storm Sewer, UCI
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/moca-dh/index.html
##-----------------TITLE------------------------##
MOCA and Disney Hall
##------------------TEXT------------------------##
Prev: Timothy's birthdayUp: Spring 2010Next: Sky Park
MOCA and Disney Hall
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdcbcw/index.html
##-----------------TITLE------------------------##
San Diego Creek Bridge Climbing Wall
##------------------TEXT------------------------##
Prev: Sky ParkUp: Spring 2010Next: Mesa Sewer Graffiti
San Diego Creek Bridge Climbing Wall
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/insulindeplein/index.html
##-----------------TITLE------------------------##
Insulindeplein (Berenkuil), Eindhoven, The Netherlands
##------------------TEXT------------------------##
Prev: AmsterdamUp: Fall 2008Next: Bruges
Insulindeplein (Berenkuil), Eindhoven, The Netherlands
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/halloween08/index.html
##-----------------TITLE------------------------##
Halloween
##------------------TEXT------------------------##
Prev: Sara's birthdayUp: Fall 2008Next: California Avenue
Halloween
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s14bd/index.html
##-----------------TITLE------------------------##
Sara's 14th birthday
##------------------TEXT------------------------##
Prev: BrugesUp: Fall 2008Next: Halloween
Sara's 14th birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bruges/index.html
##-----------------TITLE------------------------##
Bruges
##------------------TEXT------------------------##
Prev: InsulindepleinUp: Fall 2008Next: Sara's 14th birthday
Bruges
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/amsterdam/index.html
##-----------------TITLE------------------------##
Amsterdam
##------------------TEXT------------------------##
Prev: The NetherlandsUp: Fall 2008Next: Insulindeplein
Amsterdam
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/netherlands/index.html
##-----------------TITLE------------------------##
The Netherlands
##------------------TEXT------------------------##
Prev: Santa BarbaraUp: Fall 2008Next: Amsterdam
The Netherlands
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/slovenia/index.html
##-----------------TITLE------------------------##
Slovenia
##------------------TEXT------------------------##
Prev: BomunUp: Summer 2007Next: Vienna
Slovenia
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vienna/index.html
##-----------------TITLE------------------------##
Vienna
##------------------TEXT------------------------##
Prev: SloveniaUp: Summer 2007Next: Prague
Vienna
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bomun/index.html
##-----------------TITLE------------------------##
Bomun
##------------------TEXT------------------------##
Prev: Vista Verde World's FairUp: Summer 2007Next: Slovenia
Bomun
From the balcony of room 1229, Hyundai Hotel, Gyeongju.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uh07/index.html
##-----------------TITLE------------------------##
University Hills Neighborhood Party
##------------------TEXT------------------------##
Prev: HalifaxUp: Summer 2007Next: Halloween
University Hills Neighborhood Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/london/index.html
##-----------------TITLE------------------------##
London
##------------------TEXT------------------------##
Prev: PragueUp: Summer 2007Next: Halifax
London
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/halifax/index.html
##-----------------TITLE------------------------##
Halifax
##------------------TEXT------------------------##
Prev: LondonUp: Summer 2007Next: University Hills Party
Halifax


Taken Thursday, August 16, 2007, 12:08:46AM.
Original image size: 3072x2048, 1.2Mb
Technical details: Canon EOS D60, 1/125s @ F8.0, ISO 100, 50mm/F1.4 (80mm equiv)
PS7 CRW 6000:20, 1.5:5:50:50:10, Slight crop
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/prague/index.html
##-----------------TITLE------------------------##
Prague
##------------------TEXT------------------------##
Prev: ViennaUp: Summer 2007Next: London
Prague
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh9/index.html
##-----------------TITLE------------------------##
Joshua Tree
##------------------TEXT------------------------##
Prev: BordeauxUp: Fall 2013Next: Thanksgiving
Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tg2013/index.html
##-----------------TITLE------------------------##
Thanksgiving
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Fall 2013Next: Boat Parade
Thanksgiving
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bordeaux/index.html
##-----------------TITLE------------------------##
Bordeaux
##------------------TEXT------------------------##
Prev: Cassel anniversaryUp: Fall 2013Next: Joshua Tree
Bordeaux



Jaume Plensa, House Of Knowledge, 2008

Taken Sunday, September 22, 2013, 07:20:57AM.
Original image size: 3888x2592, 1.1Mb
Technical details: Canon EOS 40D, 1/100s@ F11, ISO 100, 17-85mm f/4-5.6, ... ], 17mm (27mm equiv)
PS CS5 5500:0 B10, CVS 40:20:20, Profile, USM 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dianafall04/index.html
##-----------------TITLE------------------------##
Diana's Fall Photos
##------------------TEXT------------------------##
Prev: Timothy and Jack-o-lanternsUp: Fall 2004Next: Sara and Timothy
Diana's Fall Photos
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/timdragjack/index.html
##-----------------TITLE------------------------##
Timothy as a dragon, and the Halloween Jack-o-lanterns
##------------------TEXT------------------------##
Prev: Boo BashUp: Fall 2004Next: Diana's Photos
Timothy as a dragon, and the Halloween Jack-o-lanterns
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/josh4/index.html
##-----------------TITLE------------------------##
Joshua Tree
##------------------TEXT------------------------##
Prev: Sara's BirthdayUp: Fall 2004Next: Tanaka FarmsPrev Playgroup: Joshua TreeJoshua TreeNext Playgroup: Joshua Tree
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/s10bd/index.html
##-----------------TITLE------------------------##
Sara's 10th Birthday Party
##------------------TEXT------------------------##
Prev: ZoidsUp: Fall 2004Next: Joshua Tree
Sara's 10th Birthday Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hw04/index.html
##-----------------TITLE------------------------##
Univ. Hills Halloween Party
##------------------TEXT------------------------##
Prev: Two LaptopsUp: Fall 2004Next: Boo Bash
Univ. Hills Halloween Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boobash04/index.html
##-----------------TITLE------------------------##
Boo Bash
##------------------TEXT------------------------##
Prev: Univ. Hills Halloween PartyUp: Fall 2004Next: Timothy as a dragon, and the Halloween Jack-o-lanterns
Boo Bash
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/twofisted/index.html
##-----------------TITLE------------------------##
Two laptops are better than one
##------------------TEXT------------------------##
Prev: Tanaka FarmsUp: Fall 2004Next: Univ. Hills Halloween Party
Two laptops are better than one


Taken Monday, October 25, 2004, 08:47:20AM.
Original image size: 2048x3072, 1.7Mb
Technical details: Canon EOS D60, 1/80s @ F4.0, ISO 800, 50mm/F1.4 (80mm equiv)
PS7 CRW Cloudy, 0.25:3:50:0:3:25:50+M, USM 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/zoids/index.html
##-----------------TITLE------------------------##
Zoids
##------------------TEXT------------------------##
Prev: Dolphin awards nightUp: Fall 2004Next: Sara's 10th birthday party
Zoids
Click on any picture for a gallery of more images.
Zoids vs LasersZoids vs LasersZoids vs SpidermenZoids vs Dragons
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tanaka4/index.html
##-----------------TITLE------------------------##
Tanaka Farms
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Fall 2004Next: Two Laptops
Tanaka Farms
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hr4r/index.html
##-----------------TITLE------------------------##
Hot Rods for Rancho
##------------------TEXT------------------------##
Prev: Easter EggsUp: Spring 2012Next: Leiden
Hot Rods for Rancho
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ff12/index.html
##-----------------TITLE------------------------##
Family and Friends
##------------------TEXT------------------------##
Prev: Greer ParkUp: Spring 2012Next: Easter Eggs
Family and Friends
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/easter12/index.html
##-----------------TITLE------------------------##
Easter Eggs
##------------------TEXT------------------------##
Prev: Family and FriendsUp: Spring 2012Next: Hot Rods for Rancho
Easter Eggs


Taken Saturday, April 07, 2012, 11:36:03PM.
Original image size: 3240x2592, 996kb
Technical details: Canon EOS 40D, 1/160s@ F2.5, ISO 400, 50mm f/1.4 (80mm equiv)
PS CS2 3700:0, Exp1.65 B7 Con50 CVS 40:20:20, LS25, Lens auto, Crop, USM 20:20
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/eosya/index.html
##-----------------TITLE------------------------##
End-of-school-year activities
##------------------TEXT------------------------##
Prev: UCIUp: Spring 2011Next: Paris
End-of-school-year activities
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uci11/index.html
##-----------------TITLE------------------------##
UCI
##------------------TEXT------------------------##
Prev: The LabUp: Spring 2011Next: End-of-school-year activities
UCI
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/thelab/index.html
##-----------------TITLE------------------------##
The Lab
##------------------TEXT------------------------##
Prev: Taco MesaUp: Spring 2011Next: UCI
The Lab


Taken Sunday, May 22, 2011, 02:17:11AM.
Original image size: 2593x1458, 974kb
Technical details: DROID2
PS CS5 Level, USM 20:100 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tacomesa/index.html
##-----------------TITLE------------------------##
Taco Mesa
##------------------TEXT------------------------##
Prev: WayzgooseUp: Spring 2011Next: The Lab
Taco Mesa


Taken Sunday, May 01, 2011, 5:37:23PM.
Original image size: 2549x1434, 1.1Mb
Technical details: DROID2
PS CS5 Desat DV, USM 20:100, Median sky 1
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wayzgoose11/index.html
##-----------------TITLE------------------------##
Car Show at Celebrate UCI
##------------------TEXT------------------------##
Prev: KoreaUp: Spring 2011Next: Taco Mesa
Car Show at Celebrate UCI
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/delft/index.html
##-----------------TITLE------------------------##
Delft and the Royal Delft Museum
##------------------TEXT------------------------##
Prev: The Red DoorUp: Summer 2015Next: Thorn
Delft and the Royal Delft Museum
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lily/index.html
##-----------------TITLE------------------------##
Lily in Thorn
##------------------TEXT------------------------##
Prev: ThornUp: Summer 2015Next: July 4th Parade
Lily in Thorn
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/thorn/index.html
##-----------------TITLE------------------------##
Thorn
##------------------TEXT------------------------##
Prev: DelftUp: Summer 2015Next: Lily
Thorn
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tillys/index.html
##-----------------TITLE------------------------##
Tillys mural, 17 Pasteur, Irvine
##------------------TEXT------------------------##
Prev: OC FairUp: Summer 2015Next: WADS 2015
Tillys mural, 17 Pasteur, Irvine
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/ocfair15/index.html
##-----------------TITLE------------------------##
Orange County Fair
##------------------TEXT------------------------##
Prev: July 4th paradeUp: Summer 2015Next: Tillys mural
Orange County Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wads15/index.html
##-----------------TITLE------------------------##
WADS 2015
##------------------TEXT------------------------##
Prev: Tilly'sUp: Summer 2015Next: Family portraits
WADS 2015
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/j4p15/index.html
##-----------------TITLE------------------------##
Mendocino July 4th Parade
##------------------TEXT------------------------##
Prev: LilyUp: Summer 2015Next: OC Fair
Mendocino July 4th Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cnyhac/index.html
##-----------------TITLE------------------------##
Chinese New Year Family Arts Day at the Heritage Art Center
##------------------TEXT------------------------##
Prev: Long Beach AquariumUp: Winter 2002-2003Next: Disneyland
Chinese New Year Family Arts Day at the Heritage Art Center
Photos taken by Diana.  Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boatparade/index.html
##-----------------TITLE------------------------##
Newport Beach Parade of Lights
##------------------TEXT------------------------##
Prev: Sawdust FestivalUp: Winter 2002-2003Next: Mendocino
Newport Beach Parade of Lights
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t4bdcc/index.html
##-----------------TITLE------------------------##
Timothy's fourth birthday at  Childrens Center
##------------------TEXT------------------------##
Prev: DisneylandUp: Winter 2002-2003Next: Timothy's birthday party
Timothy's fourth birthday at  Childrens Center
Photos taken by Diana.  Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/gpss/index.html
##-----------------TITLE------------------------##
Sunset behind the Garden Park
##------------------TEXT------------------------##
Prev: Brownies at the Back BayUp: Winter 2002-2003Next: Long Beach Aquarium
Sunset behind the Garden Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino3/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: Boat ParadeUp: Winter 2002-2003Next: SurfwoodPrev MendocinoMendocinoNext Mendocino
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/disneyland2/index.html
##-----------------TITLE------------------------##
Disneyland
##------------------TEXT------------------------##
Prev: Chinese New Year at the Heritage Arts CenterUp: Winter 2002-2003Next: Timothy's 4th birthday at Childrens Center
Disneyland
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sjws3/index.html
##-----------------TITLE------------------------##
San Joaquin Wildlife Sanctuary
##------------------TEXT------------------------##
Prev: Long Beach AquariumUp: Winter 2002-2003Next: Dance EmotionPrev SJWSSan Joaquin Wildlife SanctuaryNext SJWS
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sawdust/index.html
##-----------------TITLE------------------------##
Sawdust Winter Festival
##------------------TEXT------------------------##
Prev: Dance EmotionUp: Winter 2002-2003Next: Parade of Lights
Sawdust Winter Festival
All pictures taken by Diana.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/deww/index.html
##-----------------TITLE------------------------##
Dance Emotion: Winter Wonderland
##------------------TEXT------------------------##
Prev: San Joaquin Wildlife SanctuaryUp: Winter 2002-2003Next: Sawdust FestivalPrev Dance Emotion: NorthridgeDance Emotion: Winter WonderlandNext Dance Emotion: Shake Rattle 'n Roll
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam6/index.html
##-----------------TITLE------------------------##
Family and Friends
##------------------TEXT------------------------##
Prev: San Francisco ZooUp: Winter 2002-2003Next: Crystal Cove
Family and Friends
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/surfwood/index.html
##-----------------TITLE------------------------##
Under Construction in Surfwood
##------------------TEXT------------------------##
Prev: MendocinoUp: Winter 2002-2003Next: San Francisco Zoo
Under Construction in Surfwood
My parents have been keeping a photographic log of the construction on
their new house in Surfwood, near Mendocino
(coincidentally on a street with the same name as one we lived on
long ago in Cupertino), and asked me to take some photos for
that week's selection.
Here are my own selections
from the same shoot.  Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lbaq2/index.html
##-----------------TITLE------------------------##
Long Beach Aquarium
##------------------TEXT------------------------##
Prev: Garden Park SunsetUp: Winter 2002-2003Next: Chinese New YearPrev AquariumLong Beach Aquarium
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sfzoo/index.html
##-----------------TITLE------------------------##
San Francisco Zoo
##------------------TEXT------------------------##
Prev: SurfwoodUp: Winter 2002-2003Next: Family and FriendsPrev Zoo: San Diego Wild Animal ParkSan Francisco ZooNext Zoo: Living Desert Museum
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/dobby/index.html
##-----------------TITLE------------------------##
Dobby is a free elf
##------------------TEXT------------------------##
Prev: The LabUp: Summer 2014Next: Black phoebe
Dobby is a free elf


Taken Thursday, June 26, 2014, 10:01:05AM.
Original image size: 1673x1338, 779kb
Technical details: DROID2 GLOBAL, 2941/1000000s@ F2.8, ISO 102, 4mm
PS CS5 Crop, Sat30, Levels 0:1:225, USM 25:100, Shape blur license plate
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/phoebe/index.html
##-----------------TITLE------------------------##
Black phoebe nest
##------------------TEXT------------------------##
Prev: Dobby is freeUp: Summer 2014Next: Comptche
Black phoebe nest
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/moa/index.html
##-----------------TITLE------------------------##
Museum of Anthropology at UBC
##------------------TEXT------------------------##
Prev: VancouverUp: Summer 2014Next: Bren Stairs
Museum of Anthropology at UBC
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/van/index.html
##-----------------TITLE------------------------##
Vancouver
##------------------TEXT------------------------##
Prev: Montgomery WoodsUp: Summer 2014Next: Museum of Anthropology
Vancouver
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/comptche/index.html
##-----------------TITLE------------------------##
Comptche
##------------------TEXT------------------------##
Prev: Black PhoebeUp: Summer 2014Next: Montgomery Woods
Comptche
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/montywoods/index.html
##-----------------TITLE------------------------##
Montgomery Woods
##------------------TEXT------------------------##
Prev: ComptcheUp: Summer 2014Next: Vancouver
Montgomery Woods
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/t7bd/index.html
##-----------------TITLE------------------------##
Timothy's Harry Potter 7th Birthday Party
##------------------TEXT------------------------##
Prev: MendocinoUp: Winter 2005-2006Next: Riptide
Timothy's Harry Potter 7th Birthday Party
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmas05/index.html
##-----------------TITLE------------------------##
Christmas Eve and Christmas in Palo Alto
##------------------TEXT------------------------##
Prev: UCI CampusUp: Winter 2005-2006Next: Mendocino
Christmas Eve and Christmas in Palo Alto
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvvmhc05/index.html
##-----------------TITLE------------------------##
Vista Verde Vocal Music Holiday Concert
##------------------TEXT------------------------##
Prev: Christmas KidsUp: Winter 2005-2006Next: UCI Campus
Vista Verde Vocal Music Holiday Concert
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino6/index.html
##-----------------TITLE------------------------##
Mendocino
##------------------TEXT------------------------##
Prev: ChristmasUp: Winter 2005-2006Next: Timothy's Harry Potter 7th Birthday Party
Mendocino
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uci2/index.html
##-----------------TITLE------------------------##
UCI Campus
##------------------TEXT------------------------##
Prev: Vocal Music Holiday ConcertUp: Winter 2005-2006Next: Christmas
UCI Campus
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/xmaskids05/index.html
##-----------------TITLE------------------------##
Sawdust Festival and Christmas Kids
##------------------TEXT------------------------##
Prev: Joshua TreeUp: Winter 2005-2006Next: Holiday Concert
Sawdust Festival and Christmas Kids
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sdz/index.html
##-----------------TITLE------------------------##
San Diego Zoo, Memorial Day, 2001
##------------------TEXT------------------------##
Prev: Playgroup PizzaUp: Summer 2001Next: Brownies @ Fashion IslandSan Diego Zoo, Memorial Day, 2001Next Zoo

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bfi/index.html
##-----------------TITLE------------------------##
Brownies @ Fashion Island, June 6, 2001
##------------------TEXT------------------------##
Prev: San Diego ZooUp: Summer 2001Next: Lunch with DashiBrownies @ Fashion Island, June 6, 2001Next Brownies: Investiture
Pictures taken by Diana Eppstein.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam/index.html
##-----------------TITLE------------------------##
Family, May-June 2001
##------------------TEXT------------------------##
Up: Summer 2001Next: Playgroup Pizza
Family, May-June 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/fam2/index.html
##-----------------TITLE------------------------##
Family, July-August 2001
##------------------TEXT------------------------##
Prev: Mt. PalomarUp: Summer 2001Next: Clouds
Family, July-August 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/whfi/index.html
##-----------------TITLE------------------------##
Walking home from ITC, June 19, 2001
##------------------TEXT------------------------##
Prev: Crystal CoveUp: Summer 2001Next: Summer Vacation
Walking home from ITC, June 19, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sv/index.html
##-----------------TITLE------------------------##
Summer Vacation, June-July, 2001
##------------------TEXT------------------------##
Prev: Walking Home from ITCUp: Summer 2001Next: Helicopters over UC Irvine
Summer Vacation, June-July, 2001
Click on any picture for a gallery of more images.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lwd/index.html
##-----------------TITLE------------------------##
Lunch with Dashi, June 10, 2001
##------------------TEXT------------------------##
Prev: Brownies @ Fashion IslandUp: Summer 2001Next: Crystal Cove
Lunch with Dashi, June 10, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/pp/index.html
##-----------------TITLE------------------------##
Playgroup pizza, May 27, 2001
##------------------TEXT------------------------##
Prev: Family, May-June 2001Up: Summer 2001Next: San Diego ZooPlaygroup pizza, May 27, 2001Next Playgroup
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/cc/index.html
##-----------------TITLE------------------------##
Crystal Cove, June 17, 2001
##------------------TEXT------------------------##
Prev: Lunch with DashiUp: Summer 2001Next: Walking home from ITCCrystal Cove, June 17, 2001Next Beach: Pismo
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/clouds/index.html
##-----------------TITLE------------------------##
Clouds, Sept. 2, 2001
##------------------TEXT------------------------##
Prev: FamilyUp: Summer 2001Next: Crystal Cove
Clouds, Sept. 2, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/heli/index.html
##-----------------TITLE------------------------##
Helicopters over UC Irvine, July 23, 2001
##------------------TEXT------------------------##
Prev: Summer VacationUp: Summer 2001Next: Hammock and Garden
Helicopters over UC Irvine, July 23, 2001
The news choppers came out in force to cover a fire in the chemistry building.
Click on any picture for a larger copy.
Most images have been cropped and sharpened.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/vvwf07/index.html
##-----------------TITLE------------------------##
Vista Verde World's Fair
##------------------TEXT------------------------##
Prev: WayzgooseUp: Spring 2007Next: Bomun
Vista Verde World's Fair
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wayzgoose07/index.html
##-----------------TITLE------------------------##
Wayzgoose
##------------------TEXT------------------------##
Prev: Ren FaireUp: Spring 2007Next: Vista Verde World Fair
Wayzgoose
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/renfair07/index.html
##-----------------TITLE------------------------##
Renaissance Pleasure Faire
##------------------TEXT------------------------##
Prev: Timothy's birthdayUp: Spring 2007Next: Wayzgoose
Renaissance Pleasure Faire
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/roseparade/index.html
##-----------------TITLE------------------------##
Rose Parade
##------------------TEXT------------------------##
Prev: Gaviota State BeachUp: Winter 2013-2014Next: LACMA
Rose Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/gaviota/index.html
##-----------------TITLE------------------------##
Gaviota State Beach
##------------------TEXT------------------------##
Prev: Jug Handle State Natural PreserveUp: Winter 2013-2014Next: Rose Parade
Gaviota State Beach
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/lacma2/index.html
##-----------------TITLE------------------------##
LACMA
##------------------TEXT------------------------##
Prev: Rose ParadeUp: Winter 2013-2014Next: Caffe Luce
LACMA
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/caffeluce/index.html
##-----------------TITLE------------------------##
Caffe Luce, Tucson
##------------------TEXT------------------------##
Prev: LACMAUp: Winter 2013-2014Next: Steward Mirror Lab
Heart Cappucino


Taken Friday, February 14, 2014, 08:58:46AM.
Original image size: 2592x1456, 1.6Mb
Technical details: DROID2 GLOBAL, 733/500000s@ F2.8, ISO 102, 4mm
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/stewardmirrorlab/index.html
##-----------------TITLE------------------------##
Steward Observatory Mirror Laboratory
##------------------TEXT------------------------##
Prev: Caffe LuceUp: Winter 2013-2014Next: Bellairs
Steward Observatory Mirror Laboratory
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/jughandle/index.html
##-----------------TITLE------------------------##
Jug Handle State Reserve
##------------------TEXT------------------------##
Prev: Mendocino HeadlandsUp: Winter 2013-2014Next: Gaviota State Beach
Jug Handle State Reserve
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boatparade13/index.html
##-----------------TITLE------------------------##
Newport Beach Parade of Lights
##------------------TEXT------------------------##
Prev: ThanksgivingUp: Winter 2013-2014Next: Mendocino Headlands
Newport Beach Parade of Lights
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendoheadlands/index.html
##-----------------TITLE------------------------##
Mendocino Headlands
##------------------TEXT------------------------##
Prev: Newport Beach Parade of LightsUp: Winter 2013-2014Next: Jug Handle
Mendocino Headlands


Taken Tuesday, December 24, 2013, 02:59:47PM.
Original image size: 2592x1456, 1.1Mb
Technical details: DROID2 GLOBAL, 359/500000s@ F2.8, ISO 102, 4mm
PS CS5 Sat Y 20, USM 20:5
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uni-wuerzburg/index.html
##-----------------TITLE------------------------##
University of Würzburg graffiti
##------------------TEXT------------------------##
Prev: Bren StairsUp: Fall 2014Next: Zoya and Jessa
University of Würzburg graffiti
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/brenstairs/index.html
##-----------------TITLE------------------------##
Bren Hall, East Stairs
##------------------TEXT------------------------##
Prev: Museum of AnthropologyUp: Fall 2014Next: University of Würzburg
Bren Hall, East Stairs
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/nats/index.html
##-----------------TITLE------------------------##
Nationals
##------------------TEXT------------------------##
Prev: RiptideUp: Spring 2006Next: Wayzgoose
Nationals
Machine-Pitch Baseball, South Irvine Little League.
Click on any picture for a gallery of images from that game.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/uh/index.html
##-----------------TITLE------------------------##
University Hills
##------------------TEXT------------------------##
Prev: International DayUp: Spring 2006Next: Candy Store Hike
University Hills
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/iday06/index.html
##-----------------TITLE------------------------##
International Day
##------------------TEXT------------------------##
Prev: WayzgooseUp: Spring 2006Next: University Hills
International Day
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/riptide/index.html
##-----------------TITLE------------------------##
Riptide Softball
##------------------TEXT------------------------##
Prev: Harry Potter birthday partyUp: Spring 2006Next: Nationals
Riptide Softball
Click on any picture for a gallery of images from that game.
Game 1: Cruel PunishmentGame 2: Steal SistersGame 4: Killer FrogsIGSA at Angels StadiumGame 5: OutkastGame 6: WolfpackGame 7: Blue FlamesGame 9: ThunderGame 10: Sub-ZeroGame 11: Silver BulletsGame 12: Killer FrogsGame 13: Silver BulletsPlayoffs: Steal SistersClosing CeremonySemifinal: Wolfpack
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/candystore/index.html
##-----------------TITLE------------------------##
Candy Store Hike
##------------------TEXT------------------------##
Prev: University HillsUp: Spring 2006Next: Spring Concert
Candy Store Hike
More formally it's called the Bear Canyon or Four Corners Trail, but everyone knows it by the candy store that marks the trailhead.
Of course, after the hike we had to stop there and clean out their supply of marzipan...Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/wg06/index.html
##-----------------TITLE------------------------##
Wayzgoose
##------------------TEXT------------------------##
Prev: NationalsUp: Spring 2006Next: International Day
Wayzgoose (and my office)
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/brenglass/index.html
##-----------------TITLE------------------------##
Bren Hall Stairwell Glass
##------------------TEXT------------------------##
Prev: BellairsUp: Spring 2015Next: The Red Door
Bren Hall Stairwell Glass
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/reddoor/index.html
##-----------------TITLE------------------------##
The Red Door
##------------------TEXT------------------------##
Prev: Bren Hall Stairwell GlassUp: Spring 2015Next: Delft
The Red Door
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bellairs15/index.html
##-----------------TITLE------------------------##
Third Bellairs Workshop on Geometry and Graphs
##------------------TEXT------------------------##
Prev: Westin San DiegoUp: Spring 2015Next: Bren Hall Broken Glass
Third Bellairs Workshop on Geometry and Graphs
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tim11bd/index.html
##-----------------TITLE------------------------##
Timothy's 11th Birthday
##------------------TEXT------------------------##
Prev: Surfwood BarnUp: Winter 2009-2010Next: MOCA and Disney Hall
Timothy's 11th Birthday
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/boatparade09/index.html
##-----------------TITLE------------------------##
Newport Beach Boat Parade
##------------------TEXT------------------------##
Prev: Halloween 2009Up: Winter 2009-2010Next: Surfwood Barn
Newport Beach Boat Parade
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/surfwoodbarn/index.html
##-----------------TITLE------------------------##
Surfwood Barn
##------------------TEXT------------------------##
Prev: Boat ParadeUp: Winter 2009-2010Next: Timothy's birthday
Surfwood Barn
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino2/fireworks/index.html
##-----------------TITLE------------------------##
Ft. Bragg Fireworks
##------------------TEXT------------------------##
Prev: July 4th ParadeUp: MendocinoNext: Groundbreaking
Ft. Bragg Fireworks
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino5/ta/index.html
##-----------------TITLE------------------------##
Thursday Afternoon in Surfwood
##------------------TEXT------------------------##
Prev: Russian GulchUp: Mendocino and EnvironsNext: Pygmy Forest
Thursday Afternoon in Surfwood
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/orcas/misc/index.html
##-----------------TITLE------------------------##
Miscellaneous Orcas
##------------------TEXT------------------------##
Prev: Obstruction PassUp: Orcas and SeattleNext: Friday Harbor
Miscellaneous Orcas
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/bar/mj/index.html
##-----------------TITLE------------------------##
Montjuïc
##------------------TEXT------------------------##
Prev: Museu d'Art ContemporaniUp: BarcelonaNext: Sitges
Montjuïc
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino5/pf/index.html
##-----------------TITLE------------------------##
Pygmy Forest
##------------------TEXT------------------------##
Prev: Thursday AfternoonUp: Mendocino and EnvironsNext: Mendoma Coast
Pygmy Forest
...in Van Damme State Park.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/orcas/moransp/index.html
##-----------------TITLE------------------------##
Moran State Park
##------------------TEXT------------------------##
Prev: Pt. Lawrence BeachUp: Orcas and SeattleNext: Obstruction Pass
Moran State Park
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mendocino4/surfwood/index.html
##-----------------TITLE------------------------##
Surfwood
##------------------TEXT------------------------##
Prev: Glass BeachUp: MendocinoNext: July 4th Parade
Surfwood
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sv/mgt/index.html
##-----------------TITLE------------------------##
Matheson get-together, July 1, 2001
##------------------TEXT------------------------##
Prev: Foothills ParkUp: Summer VacationNext: Exploratorium
Matheson get-together, July 1, 2001
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/mass/brunch/index.html
##-----------------TITLE------------------------##
Post-Wedding Brunch
##------------------TEXT------------------------##
Prev: Heading to the WeddingUp: MassachusettsNext: Sara and Dashi in Amherst
Post-Wedding Brunch
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hotshots/ib/index.html
##-----------------TITLE------------------------##
Hot Shots vs Ice Breakers
##------------------TEXT------------------------##
Prev: Gold RushUp: Hot ShotsNext: Major PainHot Shots vs Ice Breakers
The game started close, staying 1-1 through 2 1/2 innings, but after that the Ice Breakers blew out the Hot Shots 11-1.  The Hot Shots were hitting well off the Ice Breaker pitcher but stranded a lot of players due to a strong Ice Breakers defense.

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tball/ws2/index.html
##-----------------TITLE------------------------##
Mariners vs White Sox
##------------------TEXT------------------------##
Prev: CubsUp: Mariners T-BallNext: Dodgers
Mariners vs White Sox
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tball/dodgers/index.html
##-----------------TITLE------------------------##
Mariners vs Dodgers
##------------------TEXT------------------------##
Prev: CubsUp: Mariners T-BallNext: Athletics
Mariners vs Dodgers
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/heartbreakers/pinkangels/index.html
##-----------------TITLE------------------------##
Heartbreakers vs Pink Angels
##------------------TEXT------------------------##
Prev: Purple PuppiesUp: Heartbreakers
Heartbreakers vs Pink Angels
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/heartbreakers/blueangels/index.html
##-----------------TITLE------------------------##
Heartbreakers vs Blue Angels
##------------------TEXT------------------------##
Prev: 4th PracticeUp: HeartbreakersNext: Green Gryffindors
Heartbreakers vs Blue Angels
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hotshots/fotf/index.html
##-----------------TITLE------------------------##
Hot Shots vs Fire on the Field
##------------------TEXT------------------------##
Prev: Blue CrewUp: Hot ShotsNext: DragonsHot Shots vs Fire on the Field
Fire on the Field was too strong, winning 6-2 despite a late rally by the Hot Shots.

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tball/ws3/index.html
##-----------------TITLE------------------------##
Hot Shots vs White Sox
##------------------TEXT------------------------##
Prev: DodgersUp: Mariners T-BallNext: Cubs
Hot Shots vs White Sox
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/hotshots/bliz/index.html
##-----------------TITLE------------------------##
Hot Shots vs Blizzards
##------------------TEXT------------------------##
Prev: Blue DevilsUp: Hot ShotsNext: Afterburners
Hot Shots vs Blizzards
A close game, which the Hot Shots eventually won 10-8 after coming back from a 6-7
deficit in the fourth and holding the Blizzards to one run in the final inning.
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/tball/as/index.html
##-----------------TITLE------------------------##
Mariners vs Athletics
##------------------TEXT------------------------##
Prev: DodgersUp: Mariners T-BallNext: Giants
Mariners vs Athletics
Click on any picture for a larger copy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pix/sv/mba/index.html
##-----------------TITLE------------------------##
Monterey Bay Aquarium, June 28, 2001
##------------------TEXT------------------------##
Prev: Andrew MoleraUp: Summer VacationNext: Palo AltoMonterey Bay Aquarium, June 28, 2001Next Aquarium

Click on any picture for a larger copy.
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Michiel-Smid.html
##-----------------TITLE------------------------##
Michiel Smid
##------------------TEXT------------------------##
Michiel Smid

			
				Carleton Univ., School of Computer Science
				http://www.scs.carleton.ca/~michiel/
				michiel@scs.carleton.ca

				Author, editor, or reviewer of:
				An $O(n\log n)$ algorithm for finding a $k$-point subset with minimal $L_\infty$-diameterApproximating geometric bottleneck shortest pathsApproximating the stretch factor of Euclidean graphsApproximation algorithms for the bottleneck stretch factor problemClosest-point problems in computational geometryComputing the smallest T-shaped polygon containing $k$ pointsConstructing plane spanners of bounded degree and low weightGeometric algorithms for density-based data clusteringMaintaining the visibility map of spheres while moving the viewpoint on a circle at infinityStatic and dynamic algorithms for $k$-point clustering problemsTranslating a planar object to maximize point containmentProc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Publication/Epp-WADS-03.html
##-----------------TITLE------------------------##
Epp-WADS-03
##------------------TEXT------------------------##
Epp-WADS-03

			
				
					@inproceedings{Epp-WADS-03,
						title = {The traveling salesman problem for cubic graphs},
						author = {David Eppstein},
						booktitle = {Proc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)},
						number = {2748},
						editor = {Frank K. H. A. Dehne and J{\"o}rg-Rudiger Sack and Michiel Smid},
						series = {Lecture Notes in Computer Science},
						publisher = {Springer-Verlag},
						pages = {307--318},
						year = {2003},
						eprint = {cs.DS/0302030}}
				

				
					[D. Eppstein publications]
					[Citation database]
					[Publications]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Lecture-Notes-in-Computer-Science.html
##-----------------TITLE------------------------##
Lecture Notes in Computer Science
##------------------TEXT------------------------##
Lecture Notes in Computer Science

			
				Axioms and Hulls, Knu-LNCS-92Bounded incremental computation, Ram-LNCS-96Computer Science Today: Recent Trends and DevelopmentsFrom QoS Provisioning to QoS Charging: Proc. 3rd Int. Worksh. Quality of Future Internet Services (QoFIS 2002) and 2nd Int. Worksh. Internet Charging and QoS Technologies (ICQT 2002)New Results and Trends in Computer Science: on occasion of H. Maurer's 50th birthdayProc. 10th Conf. Eur. Assoc. for Computer Science Logic (CSL 2001)Proc. 10th Eur. Symp. Algorithms (ESA 2002)Proc. 10th Int. Symp. Algorithms & Computation (ISAAC 1999)Proc. 10th Int. Symp. Graph Drawing (GD 2002)Proc. 10th Scand. Worksh. Algorithm Theory (SWAT 2006)Proc. 10th Symp. Theoretical Aspects of Computer Science (STACS 1993)Proc. 10th Worksh. Algorithms and Data StructuresProc. 11th Conf. Foundations of Software Technology & Theoretical Computer Science (FSTTCS 1991)Proc. 11th Eur. Symp. Algorithms (ESA 2003)Proc. 11th Int. Symp. Algorithms & Computation (ISAAC 2000)Proc. 11th Int. Symp. Graph Drawing (GD 2003)Proc. 12th Eur. Symp. Algorithms (ESA 2004)Proc. 12th Int. Symp. Algorithms & Computation (ISAAC 2001)Proc. 12th Int. Symp. Graph Drawing (GD 2004)Proc. 12th Symp. Theoretical Aspects of Computer Science (STACS 1995)Proc. 13th Int. Conf. Rewriting Techniques & Applications (RTA 2002)Proc. 13th Int. Symp. Algorithms & Computation (ISAAC 2002)Proc. 13th Int. Symp. Graph Drawing (GD 2005)Proc. 14th Int. Symp. Graph DrawingProc. 14th Symp. Combinatorial Pattern Matching (CPM 2003)Proc. 14th Symp. Theoretical Aspects of Computer Science (STACS 1997)Proc. 15th Conf. Foundations of Software Technology & Theoretical Computer Science (FSTTCS 1995)Proc. 15th Int. Coll. Automata, Languages, and Programming (ICALP 1988)Proc. 15th Symp. Theoretical Aspects of Computer Science (STACS 1998)Proc. 16th Int. Coll. Automata, Languages, and Programming (ICALP 1989)Proc. 17th Int. Coll. Automata, Languages, and Programming (ICALP 1990)Proc. 17th Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 1991)Proc. 18th Int. Coll. Automata, Languages, and Programming (ICALP 1991)Proc. 19th Int. Coll. Automata, Languages, and Programming (ICALP 1992)Proc. 19th Int. Conf. Foundations of Software Technology and Theoretical Computer Science (FSTTCS 1999)Proc. 19th Int. Symp. Theoretical Aspects of Computer Science (STACS 2002)Proc. 19th Symp. Theoretical Aspects of Computer Science (STACS 2002)Proc. 1st Asian Symp. Programming Languages and Systems (APLAS 2003)Proc. 1st Eur. Symp. Algorithms (ESA 1993)Proc. 1st Heinz Nixdorf Symp. Parallel Architectures and Their Efficient Use: State of the Art and PerspectivesProc. 1st IEEE Int. Conf. Networking (ICN'01), part IIProc. 1st Int. Conf. Computing & Combinatorics (COCOON 1995)Proc. 1st Int. Symp. Algorithms (SIGAL 1990)Proc. 1st Int. Worksh. Parameterized and Exact Computation (IWPEC 2004)Proc. 1st Japan Conf. Discrete & Computational Geometry (JCDCG 1998)Proc. 1st Joint Conf. Computer Vision, Virtual Reality, and Robotics in Medecine (CVRMed-MRCAS 1997)Proc. 1st Latin American Symp. Theoretical Informatics (LATIN 1992)Proc. 1st Worksh. Algorithms and Data Structures (WADS 1989)Proc. 20th Int. Coll. Automata, Languages, and Programming (ICALP 1993)Proc. 20th Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 1994)Proc. 20th Symp. Theoretical Aspects of Computer Science (STACS 2003)Proc. 21st Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 1995)Proc. 22nd Int. Coll. Automata, Languages, and Programming (ICALP 1995)Proc. 23rd Int. Coll. Automata, Languages, and Programming (ICALP 1996)Proc. 24th Int. Coll. Automata, Languages, and Programming (ICALP 1997)Proc. 24th Symp. Mathematical Foundations of Computer Science (MFCS 1999)Proc. 25th Int. Coll. Automata, Languages, and Programming (ICALP 1998)Proc. 25th Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 1999)Proc. 26th Int. Coll. Automata, Languages, and Programming (ICALP 1999)Proc. 27th Int. Coll. Automata, Languages and Programming (ICALP 2000)Proc. 27th Int. Symp. Mathematical Foundations of Computer Science (MFCS 2002)Proc. 28th Int. Coll. Automata, Languages, and Programming (ICALP 2001)Proc. 28th Int. Symp. Mathematical Foundations of Computer Science (MFCS 2003)Proc. 28th Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 2002)Proc. 29th Int. Coll. Automata, Languages, and Programming (ICALP 2002)Proc. 29th Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 2003)Proc. 2nd Eur. Conf. Distributed Memory Computing (EDMCC2)Proc. 2nd Eur. Symp. Algorithms (ESA 1994)Proc. 2nd Int. Conf. Computing and Combinatorics (COCOON 1996)Proc. 2nd Int. Symp. Graph Drawing (GD 1994)Proc. 2nd Int. Symp. Logical Foundations of Computer ScienceProc. 2nd Int. Worksh. Distributed Algorithms (WDAG 1988)Proc. 2nd Int. Worksh. Experimental and Efficient Algorithms (WEA 2003)Proc. 2nd Int. Worksh. Quality of Service in Multiservice IP Networks (QoS-IP 2003)Proc. 2nd Scandinavian Worksh. Algorithm Theory (SWAT 1990)Proc. 2nd Worksh. Algorithms and Data Structures (WADS 1991)Proc. 30th Int. Coll. Automata, Languages and Programming (ICALP 2003)Proc. 3rd Eur. Symp. Algorithms (ESA 1995)Proc. 3rd Int. Conf. Artificial Intelligence and Symbolic Mathematical Computation (AISMC-3)Proc. 3rd Int. Worksh. Algorithm Engineering (WAE 1999)Proc. 3rd Int. Worksh. Efficient and Experimental Algorithms (WEA 2004)Proc. 3rd Japan Conf. Discrete & Computational Geometry (JCDCG 2000)Proc. 3rd Scandinavian Worksh. Algorithm Theory (SWAT 1992)Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993)Proc. 4th Eur. Symp. Algorithms (ESA 1996)Proc. 4th Int. Conf. Computing and Combinatorics (COCOON 1998)Proc. 4th Int. Conf. Parallel Architectures and Languages Europe (PARLE 1992)Proc. 4th Int. Symp. Algorithms & Computation (ISAAC 1993)Proc. 4th Int. Worksh. Algorithm Engineering & Experiments (ALENEX 2002)Proc. 4th Int. Worksh. Distributed Computing (IWDC 2002)Proc. 4th Int. Worksh. Graphics Recognition, Algorithms and Applications (GREC 2001)Proc. 4th Int. Worksh. Quality of Future Internet Services (QoFIS 2003)Proc. 4th Latin American Symp. Theoretical Informatics (LATIN 2000)Proc. 4th Scandinavian Worksh. Algorithm Theory (SWAT 1994)Proc. 4th Worksh. Algorithms and Data Structures (WADS 1995)Proc. 5th Eur. Symp. Algorithms (ESA 1997)Proc. 5th Int. Conf. Concurrency Theory (CONCUR 1994)Proc. 5th Int. Conf. Mathematics of Program Construction (MPC 2000)Proc. 5th Int. Symp. Solving Irregularly Structured Problems in Parallel (IRREGULAR 1998)Proc. 5th Int. Worksh. Approximation Algorithms for Combinatorial Optimization (APPROX 2002)Proc. 5th Int. Worksh. Combinatorial Optimization – Eureka, You ShrinkProc. 5th Latin American Symp. Theoretical Informatics (LATIN 2002)Proc. 5th Scandinavian Worksh. Algorithm Theory (SWAT 1996)Proc. 5th Worksh. Algorithm Engineering (WAE 2001)Proc. 5th Worksh. Algorithms and Data Structures (WADS 1997)Proc. 6th Eur. Symp. Algorithms (ESA 1998)Proc. 6th Int. Conf. Computing and Combinatorics (COCOON 2000)Proc. 6th Int. Symp. Graph Drawing (GD 1998)Proc. 6th Int. Symp. Parallel Architectures & Languages Europe (PARLE '94)Proc. 6th Scandinavian Worksh. Algorithm Theory (SWAT 1998)Proc. 6th Symp. Combinatorial Pattern Matching (CPM 1995)Proc. 6th Worksh. Algorithms and Data Structures (WADS 1999)Proc. 7th Eur. Symp. Algorithms (ESA 1999)Proc. 7th Int. Conf. Computing & Combinatorics (COCOON 2001)Proc. 7th Int. Conf. Developments in Language Theory (DLT 2003)Proc. 7th Int. Symp. Algorithms & Computation (ISAAC 1996)Proc. 7th Int. Symp. Functional and Logic Programming (FLOPS 2004)Proc. 7th Int. Symp. Graph Drawing (GD 1999)Proc. 7th Int. Symp. Programming Languages: Implementations, Logics, and Programs (PLILP 1995)Proc. 7th Scandinavian Worksh. Algorithm Theory (SWAT 2000)Proc. 7th Symp. Combinatorial Pattern Matching (CPM 1996)Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)Proc. 8th Eur. Symp. Algorithms (ESA 2000)Proc. 8th Int. Conf. Computing & Combinatorics (COCOON 2002)Proc. 8th Int. Conf. Discrete Geometry for Computer Imagery (DCGI 1999)Proc. 8th Int. Conf. Principles & Practice of Constraint Programming (CP 2002)Proc. 8th Int. Symp. Algorithms & Computation (ISAAC 1997)Proc. 8th Int. Symp. Spatial and Temporal Databases (SSTD 2003)Proc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)Proc. 8th Scandinavian Worksh. Algorithm Theory (SWAT 2002)Proc. 8th Symp. Combinatorial Pattern Matching (CPM 1997)Proc. 9th Eur. Symp. Algorithms (ESA 2001)Proc. 9th Int. Symp. Algorithms & Computation (ISAAC 1998)Proc. 9th Int. Worksh. Algorithms and Data Structures (WADS 2005)Proc. 9th Int. Worksh. Quality of Service (IWQoS 2001)Proc. Dagstuhl Sem. Experimental Algorithmics: From Algorithm Design to Robust and Efficient SoftwareProc. Int. Conf. Computational Science (ICCS 2002), part IIIProc. Int. Conf. Computational Sciences (ICCS 2001), part IProc. Int. Conf. High-Performance Computing and Networking (HPCN 1996)Proc. Int. Worksh. Approximation Algorithms for Combinatorial Optimization (APPROX 1998)Proc. Workshops Held in Conjunction with 12th Int. Parallel Processing Symp. (IPPS 1998)The Essence of Computation, Complexity, Analysis, Transformation: Essays Dedicated to Neil D. Jones on occasion of his 60th birthdayTopics in Cryptology: Cryptographers' Track at RSA Conf. 2003

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Frank-K-H-A-Dehne.html
##-----------------TITLE------------------------##
Frank K. H. A. Dehne
##------------------TEXT------------------------##
Frank K. H. A. Dehne

			
				Carleton Univ., School of Computer Science
				http://www.dehne.net/
				frank@dehne.net

				Author, editor, or reviewer of:
				Proc. 1st Int. Worksh. Parameterized and Exact Computation (IWPEC 2004)Proc. 1st Worksh. Algorithms and Data Structures (WADS 1989)Proc. 2nd Worksh. Algorithms and Data Structures (WADS 1991)Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993)Proc. 4th Worksh. Algorithms and Data Structures (WADS 1995)Proc. 5th Worksh. Algorithms and Data Structures (WADS 1997)Proc. 6th Worksh. Algorithms and Data Structures (WADS 1999)Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)Proc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)Proc. 9th Int. Worksh. Algorithms and Data Structures (WADS 2005)

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Joerg-Rudiger-Sack.html
##-----------------TITLE------------------------##
Jörg-Rudiger Sack
##------------------TEXT------------------------##
Jörg-Rudiger Sack

			
				Carleton Univ., School of Computer Science
				http://www.scs.carleton.ca/~sack/
				sack@scs.carleton.ca

				Author, editor, or reviewer of:
				Parallel neighborhood modellingHandbook of Computational GeometryProc. 1st Worksh. Algorithms and Data Structures (WADS 1989)Proc. 2nd Worksh. Algorithms and Data Structures (WADS 1991)Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993)Proc. 4th Worksh. Algorithms and Data Structures (WADS 1995)Proc. 5th Worksh. Algorithms and Data Structures (WADS 1997)Proc. 6th Worksh. Algorithms and Data Structures (WADS 1999)Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)Proc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)Proc. 9th Int. Worksh. Algorithms and Data Structures (WADS 2005)

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-8th-Int-Worksh-Algorithms-and-Data-Structures-(WADS-2003).html
##-----------------TITLE------------------------##
Proc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)
##------------------TEXT------------------------##
Proc. 8th Int. Worksh. Algorithms and Data Structures (WADS 2003)

			
				Adapting (pseudo)-triangulations with a near-linear number of edge flips, AicAurKra-WADS-03On simultaneous planar graph embeddings, BraCenDun-WADS-03The traveling salesman problem for cubic graphs, Epp-WADS-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Organization/Springer-Verlag.html
##-----------------TITLE------------------------##
Springer-Verlag
##------------------TEXT------------------------##
Springer-Verlag

			
Publisher of:				Complexity and Approximation: Combinatorial Optimization Problems and Their Approximability, AusCreGam-99Computational Geometry: Algorithms and Applications, BerKreOve-97Algorithmics for Hard Problems: Introduction to Combinatorial Optimization, Randomization, Approximation, and Heuristics, Hro-01Geometric Level Set Methods in Imaging, Vision and Graphics, OshPar-03Mathematica in Action, Wag-99Advances in Spatial Data Handling: Proc. 10th Int. Symp. Spatial Data Handling (SDH 2002)Algorithms and Computation in MathematicsComputing with Bio-Molecules: Theory and ExperimentsEncyclopaedia of Mathematical SciencesGraduate Texts in MathematicsLecture Notes in Artificial IntelligenceLecture Notes in BioinformaticsLecture Notes in Computer ScienceProc. 3rd Int. Symp. Computing in Object-oriented Parallel EnvironmentsProc. 7th Worksh. Bildverarbeitung für die MedizinProc. Simulation of Semiconductor Devices and Processes (SISDEP '93)Sequences II: Communication, Security, and Computer ScienceSequences: Combinatorics, Compression, Security, TransmissionSpringer Tracts in Advanced RoboticsThe IMA Volumes in Mathematics and its ApplicationsThe Visual Computer

				
					[D. Eppstein publications]
					[Citation database]
					[Organizations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Space-and-time-complexity-of-exact-algorithms-some-open-problems.html
##-----------------TITLE------------------------##
Space and time complexity of exact algorithms: some open problems
##------------------TEXT------------------------##
Space and time complexity of exact algorithms: some open problems

			
				Gerhard J. Woeginger
				Proc. 1st Int. Worksh. Parameterized and Exact Computation (IWPEC 2004), Lecture Notes in Computer Science 3162, Rod Downey,
Michael Fellows,
and Frank K. H. A. Dehne, ed., Springer-Verlag, Sep 2004, pp. 281–290

				Cites:
				The traveling salesman problem for cubic graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Publication/Epp-JGAA-07.html
##-----------------TITLE------------------------##
Epp-JGAA-07
##------------------TEXT------------------------##
Epp-JGAA-07

			
				
					@article{Epp-JGAA-07,
						title = {The traveling salesman problem for cubic graphs},
						author = {David Eppstein},
						journal = {J. Graph Algorithms & Applications},
						volume = {11},
						number = {1},
						pages = {61--81},
						year = {2007},
						eprint = {cs.DS/0302030}}
				

				
					[D. Eppstein publications]
					[Citation database]
					[Publications]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/J-Graph-Algorithms-+-Applications.html
##-----------------TITLE------------------------##
J. Graph Algorithms & Applications
##------------------TEXT------------------------##
J. Graph Algorithms & Applications

			
				Confluent drawings: visualizing non-planar diagrams in a planar way, DicEppGoo-JGAA-05Geometric thickness of complete graphs, DilEppHir-JGAA-00Small maximal independent sets and faster exact graph coloring, Epp-JGAA-03The traveling salesman problem for cubic graphs, Epp-JGAA-07Subgraph isomorphism in planar graphs and related problems, Epp-JGAA-99Fast approximation of centrality, EppWan-JGAA-04Planarizing graphs — a survey and annotated bibliography, Lie-JGAA-01Shelling hexahedral complexes for mesh generation, Mue-JGAA-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Confluent-layered-drawings.html
##-----------------TITLE------------------------##
Confluent layered drawings
##------------------TEXT------------------------##
Confluent layered drawings

			
				David Eppstein,
Michael T. Goodrich,
and Jeremy Yu Meng
				Algorithmica 47(4):439–452, 2007
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 184–194
				ACM Computing Research Repository, cs.CG/0507051

				Cited by:
				Crossings in Clustered Level Graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-coloring-quadtrees.html
##-----------------TITLE------------------------##
Algorithms for coloring quadtrees
##------------------TEXT------------------------##
Algorithms for coloring quadtrees

			
				Marshall Wayne Bern,
David Eppstein,
and Brad Hutchings
				Algorithmica 32(1):87–94, Jan 2002
				ACM Computing Research Repository, cs.CG/9907030
				Mathematical Reviews 2002h:68036

				Cited by:
				Graphical representations and infinite virtual worlds in a logic and functional programming course

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pubs/p-confluent.html
##-----------------TITLE------------------------##
David Eppstein - Publications
##------------------TEXT------------------------##
David Eppstein - Publications



Confluent drawings: visualizing non-planar diagrams in a planar way.
M. Dickerson,
D. Eppstein,
M. T. Goodrich,
and
J. Meng.
arXiv:cs.CG/0212046.
11th Int. Symp. Graph Drawing, Perugia, Italy, 2003.
Springer, Lecture Notes in
Comp. Sci. 2912, 2004, pp. 1–12.
J. Graph
Algorithms and Applications
(special issue for GD'03) 9 (1): 31–52, 2005.

We describe a new method of
drawing graphs, based on allowing the edges to
be merged together and drawn as "tracks" (similar to train tracks).
We present heuristics for finding such drawings
based on my previous algorithms
for finding maximal bipartite subgraphs, prove that several
important families of graphs have confluent drawings, and provide
examples of other graphs that can not be drawn in this way.

(BibTeX --
Citations --
GDEA)




Publications --
David Eppstein --
Theory Group --
Inf. & Comp. Sci. --
UC Irvine

Semi-automatically filtered
from a common source file.
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Roberto-Tamassia.html
##-----------------TITLE------------------------##
Roberto Tamassia
##------------------TEXT------------------------##
Roberto Tamassia

			
				Brown Univ., Computer Science Dept.
				http://www.cs.brown.edu/people/rt/home.html
				rt@cs.brown.edu

				Author, editor, or reviewer of:
				A case study in algorithm engineering for geometric computingA framework for dynamic graph drawingAlgorithms for drawing graphs: an annotated bibliographyAuthenticated data structures for graph and geometric searchingCombine and conquer: a general technique for dynamic algorithmsData structuresDynamic expression treesDynamic ray shooting and shortest paths via balanced geodesic triangulationsDynamic trees and dynamic point locationIncremental convex planarity testingMaintenance of a minimum spanning forest in a dynamic planar graphOn-line convex planarity testingOn-line graph algorithms with SPQR-treesOn-line planar graph embeddingOn-line planarity testingOutput-sensitive reporting of disjoint pathsStrategic directions in computational geometry: working group reportProc. 2nd Int. Symp. Graph Drawing (GD 1994)Proc. 5th Worksh. Algorithms and Data Structures (WADS 1997)Proc. 6th Worksh. Algorithms and Data Structures (WADS 1999)Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-number-of-maximal-independent-sets-in-a-graph.html
##-----------------TITLE------------------------##
On the number of maximal independent sets in a graph
##------------------TEXT------------------------##
On the number of maximal independent sets in a graph

			
				Jesper Makholm Byskov
				Tech. report RS-02-15, Aarhus Univ., Datalogisk afdeling, Center for Basic Research in Computer Science (BRICS), Apr 2002
				http://www.brics.dk/RS/02/15/

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfactionSmall maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Enumerating-maximal-independent-sets-with-applications-to-graph-colouring.html
##-----------------TITLE------------------------##
Enumerating maximal independent sets with applications to graph colouring
##------------------TEXT------------------------##
Enumerating maximal independent sets with applications to graph colouring

			
				Jesper Makholm Byskov
				Operations Research Letters 32:547–556, 2004

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfactionSmall maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-simple-and-fast-approach-for-solving-problems-on-planar-graphs.html
##-----------------TITLE------------------------##
A simple and fast approach for solving problems on planar graphs
##------------------TEXT------------------------##
A simple and fast approach for solving problems on planar graphs

			
				Fedor V. Fomin
and Dimitrios M. Thilikos
				Proc. 21st Symp. Theoretical Aspects of Computer Science (STACS 2004), 2004
				Tech. report 258, Univ. of Bergen, Dept. of Informatics, Nov 2003
				http://www.lsi.upc.es/~sedthilk/papers/planar.pdf
				http://www.ii.uib.no/publikasjoner/texrap/pdf/2003-258.pdf

				Cites:
				Small maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Publication/Epp-JGAA-03.html
##-----------------TITLE------------------------##
Epp-JGAA-03
##------------------TEXT------------------------##
Epp-JGAA-03

			
				
					@article{Epp-JGAA-03,
						title = {Small maximal independent sets and faster exact graph coloring},
						author = {David Eppstein},
						journal = {J. Graph Algorithms & Applications},
						volume = {7},
						number = {2},
						pages = {131--140},
						year = {2003},
						eprint = {cs.DS/0011009},
						note = {Special issue for WADS'01}}
				

				
					[D. Eppstein publications]
					[Citation database]
					[Publications]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-k-colouring-and-finding-maximal-independent-sets.html
##-----------------TITLE------------------------##
Algorithms for $k$-colouring and finding maximal independent sets
##------------------TEXT------------------------##
Algorithms for $k$-colouring and finding maximal independent sets

			
				Jesper Makholm Byskov
				Proc. 14th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2003, pp. 456–457

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfactionSmall maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-7th-Worksh-Algorithms-and-Data-Structures-(WADS-2001).html
##-----------------TITLE------------------------##
Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)
##------------------TEXT------------------------##
Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)

			
				On the reflexivity of point sets, ArkFekHur-WADS-01Optimal Möbius transformations for information visualization and meshing, BerEpp-WADS-01-omtOptimization over zonotopes and training support vector machines, BerEpp-WADS-01-svmSmall maximal independent sets and faster exact graph coloring, Epp-WADS-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Colouring-random-graphs-in-expected-polynomial-time.html
##-----------------TITLE------------------------##
Colouring random graphs in expected polynomial time
##------------------TEXT------------------------##
Colouring random graphs in expected polynomial time

			
				Amin Coja-Oghlan
and Anusch Taraz
				Proc. 20th Symp. Theoretical Aspects of Computer Science (STACS 2003), Lecture Notes in Computer Science 2607, Helmut Alt
and Michel Habib, ed., Springer-Verlag, 2003, pp. 487–498
				http://www.informatik.hu-berlin.de/~taraz/paper/col.ps

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithmSmall maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Publication/Epp-WADS-01.html
##-----------------TITLE------------------------##
Epp-WADS-01
##------------------TEXT------------------------##
Epp-WADS-01

			
				
					@inproceedings{Epp-WADS-01,
						title = {Small maximal independent sets and faster exact graph coloring},
						author = {David Eppstein},
						booktitle = {Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001)},
						number = {2125},
						editor = {Frank K. H. A. Dehne and J{\"o}rg-Rudiger Sack and Roberto Tamassia},
						series = {Lecture Notes in Computer Science},
						publisher = {Springer-Verlag},
						pages = {462--470},
						month = {Aug},
						year = {2001},
						eprint = {cs.DS/0011009}}
				

				
					[D. Eppstein publications]
					[Citation database]
					[Publications]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Generating-small-combinatorial-test-suites-to-cover-input-output-relationships.html
##-----------------TITLE------------------------##
Generating small combinatorial test suites to cover input-output relationships
##------------------TEXT------------------------##
Generating small combinatorial test suites to cover input-output relationships

			
				Christine Cheng,
Adrian Dumitrescu,
and Patrick Schroeder
				Proc. 3rd Int. Conf. Quality Software (QSIC 2003), IEEE, 2003, pp. 76–82

				Cites:
				Small maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-number-of-maximal-bipartite-subgraphs-of-a-graph.html
##-----------------TITLE------------------------##
On the number of maximal bipartite subgraphs of a graph
##------------------TEXT------------------------##
On the number of maximal bipartite subgraphs of a graph

			
				Bolette Ammitzbøll Madsen,
Jesper Makholm Byskov,
and Bjarke Skjernaa
				Tech. report RS-02-17, Aarhus Univ., Datalogisk afdeling, Center for Basic Research in Computer Science (BRICS), Apr 2002
				http://www.brics.dk/RS/02/17/

				Cites:
				Small maximal independent sets and faster exact graph coloring

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Exact-algorithms-for-NP-hard-problems-A-survey.html
##-----------------TITLE------------------------##
Exact algorithms for NP-hard problems: A survey
##------------------TEXT------------------------##
Exact algorithms for NP-hard problems: A survey

			
				Gerhard J. Woeginger
				Proc. 5th Int. Worksh. Combinatorial Optimization – Eureka, You Shrink, Lecture Notes in Computer Science 2570, Michael Jünger,
Gerhard Reinelt,
and Giovanni Rinaldi, ed., Springer-Verlag, 2003, pp. 185–207

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithmSmall maximal independent sets and faster exact graph coloringImproved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Review/MR-2003j05117.html
##-----------------TITLE------------------------##
Mathematical Reviews 2003j:05117
##------------------TEXT------------------------##
Mathematical Reviews 2003j:05117

			
				Small maximal independent sets and faster exact graph coloring
				David Eppstein
				Proc. 7th Worksh. Algorithms and Data Structures (WADS 2001), Lecture Notes in Computer Science 2125, Frank K. H. A. Dehne,
Jörg-Rudiger Sack,
and Roberto Tamassia, ed., Springer-Verlag, Aug 2001, pp. 462–470
				Mathematical Reviews 2003j:05117, 2003

				
					[D. Eppstein publications]
					[Citation database]
					[Reviews]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Single-strip-triangulation-of-manifolds-with-arbitrary-topology.html
##-----------------TITLE------------------------##
Single-strip triangulation of manifolds with arbitrary topology
##------------------TEXT------------------------##
Single-strip triangulation of manifolds with arbitrary topology

			
				Gopi Meenakshisundaram
and David Eppstein
				Proc. 25th Conf. Eur. Assoc. for Computer Graphics (EuroGraphics '04), 2004, pp. 371–379, 
				Proc. 20th Symp. Computational Geometry, ACM, 2004, pp. 455–456, 
				ACM Computing Research Repository, cs.CG/0405036

				Cited by:
				Quadrilateral and tetrahedral mesh stripification using 2-factor partitioning of the dual graphHierarchyless simplification, stripification and compression of triangulated two-manifolds

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fast-hierarchical-clustering-and-other-applications-of-dynamic-closest-pairs.html
##-----------------TITLE------------------------##
Fast hierarchical clustering and other applications of dynamic closest pairs
##------------------TEXT------------------------##
Fast hierarchical clustering and other applications of dynamic closest pairs

			
				David Eppstein
				J. Experimental Algorithmics 5(1):1–23, Jun 2000
				Proc. 9th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1998, pp. 619–628
				ACM Computing Research Repository, cs.DS/9912014
				http://www.jea.acm.org/2000/EppsteinDynamic/
				http://www.ics.uci.edu/~eppstein/pubs/Epp-SODA-98.pdf

				Cited by:
				Approximate nearest neighbors: towards removing the curse of dimensionalityEfficient algorithms for geometric optimizationSubquadratic approximation algorithms for clustering problems in high dimensional spacesWhen crossings count — approximating the minimum spanning treePolynomial time approximation schemes for geometric $k$-clusteringStable distributions, pseudorandom generators, embeddings and data stream computationImproved methods for signature-tree constructionPractical approximations for zero- and bounded-skew treesTies in proximity and clustering compounds Finding approximate shape regularities in reverse engineered solid models bounded by simple surfaces$K$-ary clustering with optimal leaf ordering for gene expression dataClustering-based production-line binning of ICs Based on $I_{DDQ}$Beautification of Reverse Engineered Geometric ModelsFast optimal leaf ordering for hierarchical clusteringPreference mining: a novel approach on mining user preferences for individualized applicationsRecognizing geometric patterns for beautification of reconstructed solid models Identifying projected clusters from gene expression profilesC$^2$P: clustering based on closest pairsApproximation Algorithms for VLSI RoutingPoint set stratification and Delaunay depthA dynamic data structure for 3-d convex hulls and 2-d nearest neighbor queries

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://www.ics.uci.edu/~eppstein/pubs/p-singlestrip.html
##-----------------TITLE------------------------##
David Eppstein - Publications
##------------------TEXT------------------------##
David Eppstein - Publications



Single-strip triangulation of manifolds with arbitrary topology.
D. Eppstein and
M. Gopi.
13th Video Review of
Computational Geometry, 2004.
20th ACM Symp. Comp. Geom., Brooklyn, 2004, pp. 455–456 (abstract
for video).
25th Conf. Eur. Assoc. for Computer Graphics (EuroGraphics '04),
Grenoble, 2004 (2nd best paper award).
Eurographics Forum 23 (3): 371–379, 2004.
arXiv:cs.CG/0405036.

We describe a new algorithm, based on
graph matching,
for subdividing a
triangle mesh (without boundary)
so that it has a
Hamiltonian cycle of triangles, and prove that
this subdivision process increases the total number of triangles
in the mesh by at most a factor of 3/2.  We also prove lower bounds
on the increase needed for meshes with and without boundary.

(Graphics
lab pubs page --
Citations)




Publications --
David Eppstein --
Theory Group --
Inf. & Comp. Sci. --
UC Irvine

Semi-automatically filtered
from a common source file.
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-geometric-problems.html
##-----------------TITLE------------------------##
Approximation algorithms for geometric problems
##------------------TEXT------------------------##
Approximation algorithms for geometric problems

			
				Marshall Wayne Bern
and David Eppstein
				Approximation Algorithms for NP-hard Problems, Dorit Hochbaum, ed., PWS Publishing, 1996, pp. 296–345

				Cited by:
				Polynomial time approximation schemes for Euclidean TSP and other geometric problemsNew approximation algorithms for the Steiner tree problemsEfficient algorithms for geometric optimizationIncremental clustering and dynamic information retrievalAverage-case ray shooting and minimum weight triangulationsShortest paths and networksNearly linear time approximation schemes for Euclidean TSP and other geometric problemsProgress in Hierarchical Clustering & Minimum Weight TriangulationThe dynamic servers problemCompact Location ProblemsQuasi-greedy triangulations approximating the minimum weight triangulationPoint set labeling with sliding labelsSegmentation problemsApproximation schemes for Euclidean $k$-medians and related problemsSubexponential-time algorithms for minimum-weight triangulation and related problemsThe $k$-Steiner ratio in the rectilinear planeA randomized approximation scheme for metric MAX-CUTLow energy and mutually distant samplingClustering in large graphs and matricesApproximating minimum-weight triangulations in three dimensionsGeometric shortest paths and network optimizationClustering for edge-cost minimizationPolynomial time approximation schemes for geometric $k$-clusteringApproximation of geometric dispersion problemsProjective clustering in high dimensions using core-setsApproximate clustering via core-setsPolynomial-time approximation schemes for geometric min-sum median clusteringMap Labeling ProblemsSmooth kinetic maintenance of clustersEuclidean bounded-degree spanning tree ratiosPolynomial-time approximation schemes for metric min-sum median clusteringAn impossibility theorem for clusteringImproved approximation of maximum planar  subgraphClustering motionCovering with ellipsesGeometric Problems in Cartographic NetworksNP-completeness column 24Minimum-weight triangulation is NP-hard

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/SIAM-J-Discrete-Mathematics.html
##-----------------TITLE------------------------##
SIAM J. Discrete Mathematics
##------------------TEXT------------------------##
SIAM J. Discrete Mathematics

			
				Sums of squares of edge lengths and spacefilling curve heuristics for the traveling salesman problem, GaoSte-SJDM-94An almost linear time algorithm for generalized matrix searching, KlaKle-SJDM-90Spanning trees — short or small, RavSunMar-SJDM-96Practical approximations for zero- and bounded-skew trees, ZelMan-SJDM-02

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-13th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 13th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 13th Symp. Discrete Algorithms

			
				Closest-point problems simplified on the RAM, Cha-SODA-02-cpSemi-online maintenance of geometric optima and measures, Cha-SODA-02-soQuality meshing with weighted Delaunay refinement, CheDey-SODA-02Motorcycle graphs and straight skeletons, CheVig-SODA-02A sub-quadratic sequence alignment algorithm for unrestricted cost matrices, CroLanZiv-SODA-02An algorithm for counting maximum weighted independent sets and its applications, DahJoh-SODA-02Shape dimension and approximation from samples, DeyGieGos-SODA-02Light spanners and approximate TSP in graphs with forbidden minors, GriSis-SODA-02Symmetric drawings of triconnected planar graphs, HonMcKEad-SODA-02Labeling schemes for flow and connectivity, KatKatKor-SODA-02Computing shortest paths with comparisons and additions, PetRam-SODA-02Algorithms for quantified Boolean formulas, Wil-SODA-02

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-18th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 18th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 18th Symp. Discrete Algorithms

			
				Region-fault tolerant geometric spanners, AbaBerFar-SODA-07Compressing rectilinear pictures and minimizing access control lists, AppCalJoh-SODA-07Approximation algorithms for embedding general metrics into trees, BadIndSid-SODA-07Cheap labor can be expensive, CheKar-SODA-07Approximation algorithms via contraction decomposition, DemHajMoh-SODA-07Squarepants in a tree: sum of subtree clustering and hyperbolic pants decomposition, Epp-SODA-07Digraph measures: Kelly decompositions, games, and orderings, HunKre-SODA-07Geometric and topological guarantees for the WRAP reconstruction algorithm, RamSad-SODA-07On the $k$-simple shortest paths problem in weighted directed graphs, Rod-SODA-07On bounded leg shortest paths problems, RodSeg-SODA-07Faster dynamic matchings and vertex connectivity, San-SODA-07

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/SIAM-J-Applied-Mathematics.html
##-----------------TITLE------------------------##
SIAM J. Applied Mathematics
##------------------TEXT------------------------##
SIAM J. Applied Mathematics

			
				Multiple alignment, communication cost, and graph matching, Pev-SJAM-92Speeding up dynamic-programming algorithms for finding optimal lattice paths, Spo-SJAM-89

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Joint-Proc-Worksh-Algorithm-Engineering-and-Experiments-(ALENEX)-and-Worksh-Analytic-Algorithmics-and-Combinatorics-(ANALCO).html
##-----------------TITLE------------------------##
Joint Proc. Worksh. Algorithm Engineering and Experiments (ALENEX) and Worksh. Analytic Algorithmics and Combinatorics (ANALCO)
##------------------TEXT------------------------##
Joint Proc. Worksh. Algorithm Engineering and Experiments (ALENEX) and Worksh. Analytic Algorithmics and Combinatorics (ANALCO)

			
				Lazy algorithms for dynamic closest pair with arbitrary distance measures, CarEpp-ALENEX-04

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-5th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 5th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 5th Symp. Discrete Algorithms

			
				Linear and $O(n\log n)$ time minimum-cost matching algorithms for quasi-convex tours, BusYia-SODA-94New results on the old $k$-opt algorithm for the TSP, ChaKarTov-SODA-94Average case analysis of dynamic geometric optimization, Epp-SODA-94-dyngeomClustering for faster network simplex pivots, Epp-SODA-94-simplexMoments of inertia and graph separators, GreMilTen-SODA-94Using randomized sparsification to approximate minimum cuts, Kar-SODA-94Fast algorithms for dynamic 2-connectivity with backtracking, LaPWes-SODA-94Spanning trees — short or small, RavSunMar-SODA-94Dynamic algebraic algorithms, ReiTat-SODA-94

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-9th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 9th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 9th Symp. Discrete Algorithms

			
				The dynamic servers problem, ChaHalMot-SODA-98Fast hierarchical clustering and other applications of dynamic closest pairs, Epp-SODA-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/SIAM-J-Numerical-Analysis.html
##-----------------TITLE------------------------##
SIAM J. Numerical Analysis
##------------------TEXT------------------------##
SIAM J. Numerical Analysis

			
				Mesh smoothing using a posteriori error estimates, BanSmi-SJNA-97On the radius-edge condition in the control volume method, MilTalTen-SJNA-99Stable finite elements for problems with wild coefficients, Vav-SJNA-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-11th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 11th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 11th Symp. Discrete Algorithms

			
				Approximation algorithms for projective clustering, AgaPro-SODA-00TSP-based curve reconstruction in polynomial time, AltMeh-SODA-00Finding minimal triangulations of convex 3-polytopes is NP-hard, BelDeLRic-SODA-00Optimizing the sum of linear fractional functions and applications, CheDaeDai-SODA-00On incremental rendering of silhouette maps of a polyhedral scene, EfrGuiHal-SODA-00An optimal algorithm for hyperplane depth in the plane, LanSte-SODA-00A point-placement strategy for conforming Delaunay tetrahedralization, MurMouGab-SODA-00

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/SIAM-J-Scientific-Computing.html
##-----------------TITLE------------------------##
SIAM J. Scientific Computing
##------------------TEXT------------------------##
SIAM J. Scientific Computing

			
				A solution-based triangular and tetrahedral mesh quality indicator, Ber-SJSC-98Numerical conformal mapping using cross-ratios and Delaunay triangulation, DriVav-SJSC-98A parallel algorithm for mesh smoothing, FreJonPla-SJSC-99Geometric mesh partitioning: implementation and experiments, GilMilTen-SJSC-98A particle-partition of unity method II: Efficient cover construction and reliable integration, GriSch-SJSC-02Local bisection refinement for $n$-simplicial grids generated by reflection, Mau-SJSC-95Geometric separators for finite-element meshes, MilTenThu-SJSC-98How good is recursive bisection?, SimTen-SJSC-97Provably good partitioning and load balancing algorithms for parallel adaptive $N$-body simulation, Ten-SJSC-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-17th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 17th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 17th Symp. Discrete Algorithms

			
				The hunting of the bump: on maximizing statistical discrepancy, AgaPhiVen-SODA-06An $O(n\log n)$ algorithm for maximum $st$-flow in a directed planar graph, BorKle-SODA-06Many distances in planar graphs, Cab-SODA-06A dynamic data structure for 3-d convex hulls and 2-d nearest neighbor queries, Cha-SODA-06Tightening non-simple paths and cycles on surfaces, ColEri-SODA-06Measure and conquer: a simple $O(n^{0.288n})$ independent set algorithm, FomGraKra-SODA-06The rainbow skip graph: a fault-tolerant constant-degree distributed data structure, GooNelSun-SODA-06

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-8th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 8th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 8th Symp. Discrete Algorithms

			
				An efficient algorithm for terrain simplification, AgaDes-SODA-97Experimental analysis of dynamic minimum spanning tree algorithms, AmaCatIta-SODA-97Optimal point placement for mesh smoothing, AmeBerEpp-SODA-97Deterministic algorithms for 2-d convex programming and 3-d online linear programming, Cha-SODA-97Map labeling and its generalizations, DodMarMir-SODA-97Faster construction of planar two-centers, Epp-SODA-97Shortest path in complete bipartite digraph problem and its applications, HeChe-SODA-97Optimal good-aspect-ratio coarsening for unstructured meshes, MilTalTen-SODA-97Decremental dynamic connectivity, Tho-SODA-97

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-8th-Conf-Parallel-Processing-for-Scientific-Computing.html
##-----------------TITLE------------------------##
Proc. 8th Conf. Parallel Processing for Scientific Computing
##------------------TEXT------------------------##
Proc. 8th Conf. Parallel Processing for Scientific Computing

			
				A parallel algorithm for mesh smoothing, FreJonPla-PPSC-97A data-parallel implementation of the geometric partitioning algorithm, HuTenJoh-PPSC-97

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-12th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 12th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 12th Symp. Discrete Algorithms

			
				A cell-probe lower bound for dynamic nearest-neighbor searching, AlsHusRau-SODA-01Computing the depth of a flat, BerEpp-SODA-01Soft kinetic data structures, CzuSoh-SODA-01Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction, Epp-SODA-01Internet packet filter management and rectangle geometry, EppMut-SODA-01Fast approximation of centrality, EppWan-SODA-01Reconstructing a collection of curves with corners and endpoints, FunRam-SODA-01Reductions among high dimensional proximity problems, GoeIndVar-SODA-01Static and kinetic geometric spanners with applications, KarGui-SODA-01Practical approximations for zero- and bounded-skew trees, ZelMan-SODA-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-10th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 10th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 10th Symp. Discrete Algorithms

			
				Kinetic collision detection between simple polygons, BasEriGui-SODA-99Efficient algorithms for Petersen's matching theorem, BieBosDem-SODA-99Some graphic uses of an even number of odd nodes, CamEdw-SODA-99Approximate minimum weight Steiner triangulation in three dimensions, CheDey-SODA-99Folding and one straight cut suffice, DemDemLub-SODA-99A simple provable algorithm for curve reconstruction, DeyKum-SODA-99Clustering in large graphs and matrices, DriFriKan-SODA-99Incremental and decremental maintenance of planar width, Epp-SODA-99Shortest paths in an arrangement with $k$ line orientations, EppHar-SODA-99Fully dynamic algorithms for chordal graphs, Iba-SODA-99Parametric polymatroid optimization and its geometric applications, KatTamTok-SODA-99Combinatorics helps for hexahedral mesh generation in CAD, Mue-SODA-99

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-7th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 7th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 7th Symp. Discrete Algorithms

			
				An empirical study of dynamic graph algorithms, AlbCatIta-SODA-96Optimal placement of convex polygons to maximize point containment, DicSch-SODA-96Fully dynamic output bounded single source shortest path problem, FriMarNan-SODA-96Fixed-dimensional parallel linear programming via relative epsilon-approximation, Goo-SODA-96Constructing a tree from homeomorphic subtrees, with applications to computational evolutionary biology, HenKinWar-SODA-96On certificates and lookahead in dynamic graph problems, KhaMotWil-SODA-96Guillotine subdivisions approximate polygonal subdivisions: a simple new method for the geometric $k$-MST problem, Mit-SODA-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-5th-Worksh-Algorithm-Engineering-+-Experiments-(ALENEX).html
##-----------------TITLE------------------------##
Proc. 5th Worksh. Algorithm Engineering & Experiments (ALENEX)
##------------------TEXT------------------------##
Proc. 5th Worksh. Algorithm Engineering & Experiments (ALENEX)

			
				Finding the $k$ shortest simple paths: a new algorithm and its implementation, HerMaxSur-ALENEX-03Practical construction of metric $t$-spanners, NavPar-ALENEX-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-4th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 4th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 4th Symp. Discrete Algorithms

			
				Iterated nearest neighbors and finding minimal polytopes, EppEri-SODA-93A data structure for dynamically maintaining rooted trees, Fre-SODA-93A Delaunay refinement algorithm for 2-dimensional mesh generation, Rup-SODA-93

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-6th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 6th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 6th Symp. Discrete Algorithms

			
				Average case analysis of dynamic graph algorithms, AlbHen-SODA-95Dihedral bounds for mesh generation in high dimensions, BerCheEpp-SODA-95Algorithms for dynamic closest pair and $n$-body potential fields, CalKos-SODA-95Subgraph isomorphism in planar graphs and related problems, Epp-SODA-95Finding subsets maximizing minimum structures, HalIwaKat-SODA-95Chaining multiple-alignment fragments in sub-quadratic time, MyeMil-SODA-95

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-2nd-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 2nd Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 2nd Symp. Discrete Algorithms

			
				Parallel complexity of tridiagonal symmetric eigenvalue problem, BinPan-SODA-91Efficient sequential and parallel algorithms for computing recovery points in trees and paths, ChrEppIta-SODA-91Dynamic expression trees, CohTam-SODA-91Density graphs and separators, MilVav-SODA-91

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-3rd-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 3rd Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 3rd Symp. Discrete Algorithms

			
				New algorithms for minimum area $k$-gons, Epp-SODA-92-kgonApproximating the minimum weight Steiner triangulation, Epp-SODA-92-mwst

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-19th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 19th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 19th Symp. Discrete Algorithms

			
				Recognizing partial cubes in quadratic time, Epp-SODA-08

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-16th-Symp-Discrete-Algorithms.html
##-----------------TITLE------------------------##
Proc. 16th Symp. Discrete Algorithms
##------------------TEXT------------------------##
Proc. 16th Symp. Discrete Algorithms

			
				On levels in arrangements of surfaces in three dimensions, Cha-SODA-05aFinding the shortest bottleneck edge in a parametric minimum spanning tree, Cha-SODA-05bManifold reconstruction from point samples, CheDeyRam-SODA-05Bidimensionality: new connections between FPT algorithms and PTASs, DemHaj-SODA-05aGraphs excluding a fixed minor have grids as large as treewidth, with combinatorial and algorithmic applications through bidimensionality, DemHaj-SODA-05bAll maximal independent sets and dynamic dominance for sparse graphs, Epp-SODA-05Greedy optimal homotopy and homology generators, EriWhi-SODA-05Graph distances in the streaming model: the value of space, FeiKanMcG-SODA-05Multiple-source shortest paths in planar graphs, Kle-SODA-05Conformance testing in the presence of multiple faults, KumVis-SODA-05

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Martin-Kutz.html
##-----------------TITLE------------------------##
Martin Kutz
##------------------TEXT------------------------##
Martin Kutz

			
				Max-Planck-Inst. für Informatik
				mkutz@mpi-inf.mpg.de

				Author, editor, or reviewer of:
				Computing shortest non-trivial cycles on orientable surfaces of bounded genus in almost linear timeThe density of iterated crossing points and a gap result for triangulations of finite point sets

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-4th-Int-Worksh-Discrete-Algorithms-and-Methods-for-Mobile-Computing-and-Communications.html
##-----------------TITLE------------------------##
Proc. 4th Int. Worksh. Discrete Algorithms and Methods for Mobile Computing and Communications
##------------------TEXT------------------------##
Proc. 4th Int. Worksh. Discrete Algorithms and Methods for Mobile Computing and Communications

			
				Mobile facility location, BesBhaKir-MOBILE-00

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-21st-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 21st Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 21st Symp. Computational Geometry

			
				Multi-pass geometric algorithms, Cha-SCG-05Critical points of the distance to an epsilon-sampling of a surface and flow-complex-based surface reconstruction, DeyGieRam-SCG-05Energy-aware stage illumination, EisFunKar-SCG-05The skip quadtree: a simple dynamic data structure for multidimensional data, EppGooSun-SCG-05Minimum dilation stars, EppWor-SCG-05Finding the best shortcut in a geometric network, FarGiaGud-SCG-05Sampling in dynamic data streams and applications, FraIndSoh-SCG-05A time-optimal Delaunay refinement algorithm in two dimensions, HarUng-SCG-05

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-3rd-Symp-Solid-Modeling-+-Applications-(SMA-1995).html
##-----------------TITLE------------------------##
Proc. 3rd Symp. Solid Modeling & Applications (SMA 1995)
##------------------TEXT------------------------##
Proc. 3rd Symp. Solid Modeling & Applications (SMA 1995)

			
				The cost of balancing generalized quadtrees, Moo-SMA-95

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-23rd-Conf-Computer-Graphics-and-Interactive-Techniques.html
##-----------------TITLE------------------------##
Proc. 23rd Conf. Computer Graphics and Interactive Techniques
##------------------TEXT------------------------##
Proc. 23rd Conf. Computer Graphics and Interactive Techniques

			
				Consequences of stratified sampling in graphics, Mit-CGIT-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-15th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 15th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 15th Symp. Computational Geometry

			
				Polytopes in arrangements, AroDey-SCG-99Sliver exudation, CheDeyEde-SCG-99Folding flat silhouettes and wrapping polyhedral packages: new results in computational origami, DemDemMit-SCG-99Curve reconstruction: connecting dots with good reason, DeyMehRam-SCG-99Curve reconstruction, the traveling salesman problem, and Menger's theorem on length, Gie-SCG-99Crust and anti-crust: a one-step boundary and skeleton extraction algorithm, Gol-SCG-99Kinetic connectivity of rectangles, HerSur-SCG-99Empirical design of geometric algorithms, WeiBraLie-SCG-99

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-36th-Symp-Theory-of-Computing-(STOC-2004).html
##-----------------TITLE------------------------##
Proc. 36th Symp. Theory of Computing (STOC 2004)
##------------------TEXT------------------------##
Proc. 36th Symp. Theory of Computing (STOC 2004)

			
				Estimating the weight of metric minimum spanning trees in sublinear-time, CzuSoh-STOC-04Lower bounds for dynamic connectivity, PatDem-STOC-04

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-14th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 14th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 14th Symp. Computational Geometry

			
				Surface reconstruction by Voronoi filtering, AmeBer-SCG-98Results on $k$-sets and $j$-facets via continuous motion, AndAroHar-SCG-98Exact algorithms for circles on the sphere, AndSto-SCG-98Resource-constrained geometric network optimization, ArkMitNar-SCG-98Geometric applications of a randomized optimization technique, Cha-SCG-98aOn enumerating and selecting distances, Cha-SCG-98bRaising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions, EppEri-SCG-98A unified approach to labeling graphical features, KakTol-SCG-98Point set labeling with sliding labels, KreStrWol-SCG-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-32nd-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 32nd Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 32nd Symp. Theory of Computing

			
				Clustering for edge-cost minimization, Sch-STOC-00Near-optimal fully-dynamic graph connectivity, Tho-STOC-00

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-11th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 11th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 11th Symp. Computational Geometry

			
				Stabbing triangulations by lines in 3D, AgaAroSur-SCG-95Vertical decomposition of shallow levels in 3-dimensional arrangements and its applications, AgaEfrSha-SCG-95An optimal algorithm for closest pair maintenance, Bes-SCG-95Strategies for polyhedral surface decomposition: an experimental study, ChaDobSho-SCG-95Printed circuit board simplification: simplifying subdivisions in practice, KraKreOve-SCG-95Approximation algorithms for geometric tour and network design problems, MatMit-SCG-95How to cut pseudo-parabolas into segments, TamTok-SCG-95

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-7th-Int-Conf-Computational-Molecular-Biology-(RECOMB-2003).html
##-----------------TITLE------------------------##
Proc. 7th Int. Conf. Computational Molecular Biology (RECOMB 2003)
##------------------TEXT------------------------##
Proc. 7th Int. Conf. Computational Molecular Biology (RECOMB 2003)

			
				Efficient extraction of mapping rules of atoms from enzymatic reaction data, Aku-RECOMB-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-35th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 35th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 35th Symp. Theory of Computing

			
				Sublinear geometric algorithms, ChaLiuMag-STOC-03Alpha-shapes and flow shapes are homotopy equivalent, DeyGieJoh-STOC-03Well-separated pair decomposition for the unit-disk graph metric and its applications, GaoZha-STOC-03Short path queries in planar graphs in constant time, KowKur-STOC-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-13th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 13th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 13th Symp. Computational Geometry

			
				The discrete 2-center problem, AgaShaWel-SCG-97Average-case ray shooting and minimum weight triangulations, AroFor-SCG-97Guaranteed-quality Delaunay meshing in 3D, Che-SCG-97Accelerated occlusion culling using shadow frusta, HudManCoh-SCG-97Choosing corners of rectangles for mapped meshing, Mit-SCG-97Minimum strictly-convex quadrangulations of convex polygons, MueWei-SCG-97Good orders for incremental (re)construction, SnoKre-SCG-97

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-7th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 7th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 7th Symp. Computational Geometry

			
				Polynomial-size non-obtuse triangulation of polygons, BerEpp-SCG-91

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-24th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 24th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 24th Symp. Theory of Computing

			
				Fully dynamic planarity testing, GalItaSar-STOC-92A parallel randomized approximation scheme for shortest paths, KleSub-STOC-92

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-16th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 16th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 16th Symp. Computational Geometry

			
				A simple algorithm for homeomorphic surface reconstruction, AmeChoDey-SCG-00Multivariate regression depth, BerEpp-SCG-00Reconstructing curves with sharp corners, DeyWen-SCG-00Point set labeling with specified positions, DodMarMor-SCG-00Computing with integer points in Minkowski sums, Emi-SCG-00On the continuous Weber and $k$-median problems, FekMitWei-SCG-00LOOK — a lazy object-oriented kernel for geometric computation, FunMeh-SCG-00The 2-center problem with obstacles, HalShaGol-SCG-00When crossings count — approximating the minimum spanning tree, HarInd-SCG-00Delaunay triangulation and Voronoi diagrams for Riemannian manifolds, LeiLet-SCG-00Improving the surface cycle structure for hexahedral mesh generation, Mue-SCG-00Point sets with many $k$-sets, Tot-SCG-00Fast software for box intersection, ZomEde-SCG-00

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-3rd-Symp-Parallel-Algorithms-+-Architectures-(SPAA-1991).html
##-----------------TITLE------------------------##
Proc. 3rd Symp. Parallel Algorithms & Architectures (SPAA 1991)
##------------------TEXT------------------------##
Proc. 3rd Symp. Parallel Algorithms & Architectures (SPAA 1991)

			
				In-place techniques for parallel convex hull algorithms, GhoGoo-SPAA-91

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-21st-Conf-Computer-Graphics-and-Interactive-Techniques-(SIGGRAPH-1994).html
##-----------------TITLE------------------------##
Proc. 21st Conf. Computer Graphics and Interactive Techniques (SIGGRAPH 1994)
##------------------TEXT------------------------##
Proc. 21st Conf. Computer Graphics and Interactive Techniques (SIGGRAPH 1994)

			
				Free-form shape design using triangulated surfaces, WelWit-SIGGRAPH-94

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Computing-Surveys.html
##-----------------TITLE------------------------##
Computing Surveys
##------------------TEXT------------------------##
Computing Surveys

			
				Efficient algorithms for geometric optimization, AgaSha-CS-98Voronoi diagrams — a survey of a fundamental geometric data structure, Aur-CS-91Data structures and algorithms for disjoint set union problems, GalIta-CS-91Geometric range searching, Mat-CS-94Strategic directions in computational geometry: working group report, Tam-CS-96External memory algorithms and data structures: dealing with massive data, Vit-CS-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/J-Experimental-Algorithmics.html
##-----------------TITLE------------------------##
J. Experimental Algorithmics
##------------------TEXT------------------------##
J. Experimental Algorithmics

			
				An empirical study of dynamic graph algorithms, AlbCatIta-JEA-97Fast hierarchical clustering and other applications of dynamic closest pairs, Epp-JEA-00Experimental analysis of dynamic algorithms for the single-source shortest path problem, FriIofNan-JEA-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-6th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 6th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 6th Symp. Computational Geometry

			
				Stabbing and ray shooting in 3 dimensional space, Pel-SCG-90

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-27th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 27th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 27th Symp. Theory of Computing

			
				Geometric lower bounds for parametric matroid optimization, Epp-STOC-95Randomized fully dynamic graph algorithms with polylogarithmic time per operation, HenKin-STOC-95A Delaunay based numerical method for three dimensions: generation, formulation, and partition, MilTalTen-STOC-95A computational view of population genetics, RabRabSin-STOC-95

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-7th-Int-Conf-Knowledge-Discovery-+-Data-Mining.html
##-----------------TITLE------------------------##
Proc. 7th Int. Conf. Knowledge Discovery & Data Mining
##------------------TEXT------------------------##
Proc. 7th Int. Conf. Knowledge Discovery & Data Mining

			
				Clustering spatial data using random walks, HarKor-KDD-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-28th-Conf-Computer-Graphics-and-Interactive-Techniques-(SIGGRAPH-2001).html
##-----------------TITLE------------------------##
Proc. 28th Conf. Computer Graphics and Interactive Techniques (SIGGRAPH 2001)
##------------------TEXT------------------------##
Proc. 28th Conf. Computer Graphics and Interactive Techniques (SIGGRAPH 2001)

			
				The randomized z-buffer algorithm: interactive rendering of highly complex scenes, WanFisPet-SIGGRAPH-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-31st-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 31st Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 31st Symp. Theory of Computing

			
				Subquadratic approximation algorithms for clustering problems in high dimensional spaces, BorOstRab-STOC-99

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-8th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 8th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 8th Symp. Computational Geometry

			
				Minkowski-type theorems and least-squares clustering, AurHofAro-SCG-92Triangulating polygons without large angles, BerDobEpp-SCG-92A framework for dynamic graph drawing, CohdiBTam-SCG-92An upper bound for conforming Delaunay triangulations, EdeTan-SCG-92Linear optimization queries, MatSch-SCG-92Coping with inconsistencies: a new approach to produce quality triangulations of polygonal domains with holes for the finite element method, MelSou-SCG-92Quality mesh generation in three dimensions, MitVav-SCG-92

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-Int-Conf-Management-of-Data-(SIGMOD-98).html
##-----------------TITLE------------------------##
Proc. Int. Conf. Management of Data (SIGMOD '98)
##------------------TEXT------------------------##
Proc. Int. Conf. Management of Data (SIGMOD '98)

			
				Enhanced hypertext categorization using hyperlinks, ChaDomInd-SIGMOD-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-30th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 30th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 30th Symp. Theory of Computing

			
				Approximation schemes for Euclidean $k$-medians and related problems, AroRagRao-STOC-98Poly-logarithmic deterministic fully-dynamic graph algorithms for connectivity, minimum spanning tree, 2-edge, and biconnectivity, HolLicTho-STOC-98Approximate nearest neighbors: towards removing the curse of dimensionality, IndMot-STOC-98Segmentation problems, KlePapRag-STOC-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/SIGMOD-Record.html
##-----------------TITLE------------------------##
SIGMOD Record
##------------------TEXT------------------------##
SIGMOD Record

			
				Report on the 2nd Web Dynamics Workshop, at WWW2002, LevPou-SIGMOD-02

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-19th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 19th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 19th Symp. Computational Geometry

			
				Spatial embedding of pseudo-triangulations, AicAurBra-SCG-03Optimized color gamuts for tiled displays, BerEpp-SCG-03Euclidean bounded-degree spanning tree ratios, Cha-SCG-03Curve reconstruction from noisy samples, CheFunGol-SCG-03Fault-tolerant geometric spanners, CzuZha-SCG-03Shape dimension and intrinsic metric from samples of manifolds with high co-dimension, GieWag-SCG-03Shape fitting with outliers, HarWan-SCG-03Smooth kinetic maintenance of clusters, Her-SCG-03New constructions of weak epsilon-nets, MatWag-SCG-03Polygon decomposition based on the straight line skeleton, TanVel-SCG-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-Int-Conf-Compilers-Architectures-and-Synthesis-for-Embedded-Systems.html
##-----------------TITLE------------------------##
Proc. Int. Conf. Compilers, Architectures and Synthesis for Embedded Systems
##------------------TEXT------------------------##
Proc. Int. Conf. Compilers, Architectures and Synthesis for Embedded Systems

			
				Power efficient encoding techniques for off-chip data buses, SurAgrYan-CASES-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-34th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 34th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 34th Symp. Theory of Computing

			
				Approximate clustering via core-sets, BadHarInd-STOC-02Dynamic subgraph connectivity with geometric applications , Cha-STOC-02

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-3rd-Int-Conf-Computational-Molecular-Biology-(RECOMB-99).html
##-----------------TITLE------------------------##
Proc. 3rd Int. Conf. Computational Molecular Biology (RECOMB '99)
##------------------TEXT------------------------##
Proc. 3rd Int. Conf. Computational Molecular Biology (RECOMB '99)

			
				Internal loops in RNA secondary structure prediction, LynZukPed-RECOMB-99

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-1st-Int-Conf-Embedded-Networked-Sensor-Systems.html
##-----------------TITLE------------------------##
Proc. 1st Int. Conf. Embedded Networked Sensor Systems
##------------------TEXT------------------------##
Proc. 1st Int. Conf. Embedded Networked Sensor Systems

			
				Spatiotemporal multicast in sensor networks, HuaLuRom-ENSS-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Joint-Proc-7th-Worksh-Algorithm-Engineering-and-Experiments-(ALENEX-2005)-and-2nd-Worksh-Analytic-Algorithmics-and-Combinatorics-(ANALCO-2005).html
##-----------------TITLE------------------------##
Joint Proc. 7th Worksh. Algorithm Engineering and Experiments (ALENEX 2005) and 2nd Worksh. Analytic Algorithmics and Combinatorics (ANALCO 2005)
##------------------TEXT------------------------##
Joint Proc. 7th Worksh. Algorithm Engineering and Experiments (ALENEX 2005) and 2nd Worksh. Analytic Algorithmics and Combinatorics (ANALCO 2005)

			
				An experimental analysis of change propagation in dynamic trees, AcaBleVit-ALENEX-05

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/SIGACT-News.html
##-----------------TITLE------------------------##
SIGACT News
##------------------TEXT------------------------##
SIGACT News

			
				On the NP-completeness of cryptarithms, Epp-SN-87Computational geometry column 42, MitORo-SIGACT-01Biomolecular computing—a shape of computation to come, OgiRaySmi-SIGACT-97Computational geometry column 38, ORo-SIGACT-00Computational geometry column 44, ORo-SIGACT-03Topology control and routing in ad hoc networks: a survey, Raj-SN-02

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-28th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 28th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 28th Symp. Theory of Computing

			
				Fast algorithms for $k$-shredders and $k$-node connectivity augmentation, CheThu-STOC-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/ACM-Trans-Graphics.html
##-----------------TITLE------------------------##
ACM Trans. Graphics
##------------------TEXT------------------------##
ACM Trans. Graphics

			
				Object-based image editing, BarChe-ToG-02Computing the discrepancy with applications to supersampling patterns, DobEppMit-ToG-96Navigating through triangle meshes implemented as linear quadtrees, LeeSam-ToG-00

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-2nd-Symp-Mobile-Ad-Hoc-Networking-+-Computing-(MobiHoc01).html
##-----------------TITLE------------------------##
Proc. 2nd Symp. Mobile Ad Hoc Networking & Computing (MobiHoc'01)
##------------------TEXT------------------------##
Proc. 2nd Symp. Mobile Ad Hoc Networking & Computing (MobiHoc'01)

			
				Geometric spanner for routing in mobile networks, GaoGuiHer-MobiHoc-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-3rd-SIGMOD-Worksh-Research-Issues-in-Data-Mining-and-Knowledge-Discovery.html
##-----------------TITLE------------------------##
Proc. 3rd SIGMOD Worksh. Research Issues in Data Mining and Knowledge Discovery
##------------------TEXT------------------------##
Proc. 3rd SIGMOD Worksh. Research Issues in Data Mining and Knowledge Discovery

			
				Theoretical foundations of association rules, ZakOgi-DMKD-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-16th-Symp-Parallelism-in-Algorithms-and-Architectures-(SPAA-2004).html
##-----------------TITLE------------------------##
Proc. 16th Symp. Parallelism in Algorithms and Architectures (SPAA 2004)
##------------------TEXT------------------------##
Proc. 16th Symp. Parallelism in Algorithms and Architectures (SPAA 2004)

			
				The effect of faults on network expansion, BagBhaCha-SPAA-04

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-SIGGRAPH-94.html
##-----------------TITLE------------------------##
Proc. SIGGRAPH '94
##------------------TEXT------------------------##
Proc. SIGGRAPH '94

			
				Zippered polygon meshes from range images, TurLev-SG-94

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-SIGGRAPH-96.html
##-----------------TITLE------------------------##
Proc. SIGGRAPH '96
##------------------TEXT------------------------##
Proc. SIGGRAPH '96

			
				Simplification Envelopes, CohVarMan-SIGGRAPH-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-23rd-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 23rd Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 23rd Symp. Computational Geometry

			
				Happy endings for flip graphs, Epp-SCG-07Guard placement for efficient point-in-polygon proofs, EppGooSit-SCG-07

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-15th-Symp-Parallel-Algorithms-and-Architectures.html
##-----------------TITLE------------------------##
Proc. 15th Symp. Parallel Algorithms and Architectures
##------------------TEXT------------------------##
Proc. 15th Symp. Parallel Algorithms and Architectures

			
				On local algorithms for topology control and routing in ad hoc networks, JiaRamSch-SPAA-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-Int-Symp-Mobile-Ad-Hoc-Networking-and-Computing-(MobiHoc-2004).html
##-----------------TITLE------------------------##
Proc. Int. Symp. Mobile Ad Hoc Networking and Computing (MobiHoc 2004)
##------------------TEXT------------------------##
Proc. Int. Symp. Mobile Ad Hoc Networking and Computing (MobiHoc 2004)

			
				On greedy geographic routing algorithms in sensing-covered networks, XueLuPle-MobiHoc-04

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-9th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 9th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 9th Symp. Computational Geometry

			
				Compatible tetrahedralizations, Ber-SCG-93Worst-case bounds for subadditive geometric graphs, BerEpp-SCG-93Guaranteed-quality mesh generation for curved surfaces, Che-SCG-93Approximating center points with iterated Radon points, ClaEppMil-SCG-93Counting triangle crossings and halving planes, DeyEde-SCG-93Computing the discrepancy, DobEpp-SCG-93A deterministic linear time algorithm for geometric separators and its applications, EppMilTen-SCG-93Dynamic ray shooting and shortest paths via balanced geodesic triangulations, GooTam-SCG-93Tentative prune-and-search for computing Voronoi vertices, KirSno-SCG-93

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-SIGGRAPH-93.html
##-----------------TITLE------------------------##
Proc. SIGGRAPH '93
##------------------TEXT------------------------##
Proc. SIGGRAPH '93

			
				Combining hierarchical radiosity and discontinuity meshing, LisTamGre-SIGGRAPH-93

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-17th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 17th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 17th Symp. Computational Geometry

			
				A fully dynamic algorithm for planar width, Cha-SCG-01Efficient and small representation of line arrangements with applications, DobTal-SCG-01Nice point sets can have nasty Delaunay triangulations, Eri-SCG-01Notes on computing peaks in $k$-levels and parametric spanning trees, KatTok-SCG-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-25th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 25th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 25th Symp. Theory of Computing

			
				Separator based sparsification for dynamic planar graph algorithms, EppGalIta-STOC-93

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-20th-Symp-Principles-of-Programming-Languages.html
##-----------------TITLE------------------------##
Proc. 20th Symp. Principles of Programming Languages
##------------------TEXT------------------------##
Proc. 20th Symp. Principles of Programming Languages

			
				A categorized bibliography on incremental computation, RamRep-PoPL-93

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-4th-Int-Conf-Computational-Molecular-Biology-(RECOMB-00).html
##-----------------TITLE------------------------##
Proc. 4th Int. Conf. Computational Molecular Biology (RECOMB '00)
##------------------TEXT------------------------##
Proc. 4th Int. Conf. Computational Molecular Biology (RECOMB '00)

			
				Graph modeling of metabolism, AriAsaNis-RECOMB-00

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-1st-Symp-Solid-Modeling-Foundations-and-CADCAM-Applications.html
##-----------------TITLE------------------------##
Proc. 1st Symp. Solid Modeling Foundations and CAD/CAM Applications
##------------------TEXT------------------------##
Proc. 1st Symp. Solid Modeling Foundations and CAD/CAM Applications

			
				Bounded aspect ratio triangulation of smooth solids, MooWar-SMA-91

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-12th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 12th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 12th Symp. Computational Geometry

			
				Splitting a complex of convex polytopes in any dimension, BajPas-SCG-96On triangulating three-dimensional polygons, BarDicEpp-SCG-96Developing a practical projection-based parallel Delaunay algorithm, BleMilTal-SCG-96Approaching the largest $\beta$-skeleton within a minimum weight triangulation, CheXu-SCG-96Temporally coherent conservative visibility, CooTel-SCG-96A (usually?) connected subgraph of the minimum weight triangulation, DicMon-SCG-96Linear complexity hexahedral mesh generation, Epp-SCG-96On the number of arrangements of pseudolines, Fel-SCG-96Maintenance of the set of segments visible from a moving viewpoint in two dimensions, GhaSte-SCG-96Flipping edges in triangulations, HurNoyUrr-SCG-96An aspect ratio bound for triangulating a $d$-grid cut by a hyperplane, MitVav-SCG-96Fast randomized point location without preprocessing in two- and three-dimensional Delaunay triangulations, MucSaiZhu-SCG-96A near-linear algorithm for the planar 2-center problem, Sha-SCG-96Disk packings and planar separators, SpiTen-SCG-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-2nd-Symp-Parallel-Algorithms-+-Architectures.html
##-----------------TITLE------------------------##
Proc. 2nd Symp. Parallel Algorithms & Architectures
##------------------TEXT------------------------##
Proc. 2nd Symp. Parallel Algorithms & Architectures

			
				Parallel searching in generalized Monge arrays with applications, AggKraPar-SPAA-90Every robust CRCW PRAM can efficiently simulate a priority PRAM, HagNow-SPAA-90

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-4th-Worksh-Advances-in-Geographic-Information-Systems.html
##-----------------TITLE------------------------##
Proc. 4th Worksh. Advances in Geographic Information Systems
##------------------TEXT------------------------##
Proc. 4th Worksh. Advances in Geographic Information Systems

			
				Parallel neighborhood modelling, HutLanMah-AGIS-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-18th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 18th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 18th Symp. Computational Geometry

			
				Quickest paths, straight skeletons, and the city Voronoi diagram, AicAurPal-SCG-02Vertex-unfoldings of simplicial manifolds, DemEppEri-SCG-02Optimally cutting a surface into a disk, EriHar-SCG-02Projective clustering in high dimensions using core-sets, HarVar-SCG-02

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-1st-Worksh-Applied-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 1st Worksh. Applied Computational Geometry
##------------------TEXT------------------------##
Proc. 1st Worksh. Applied Computational Geometry

			
				Geometric problems in machine learning, DobGun-WACG-96Triangle: Engineering a 2D quality mesh generator and Delaunay triangulator, She-WACG-96

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-26th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 26th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 26th Symp. Theory of Computing

			
				Simulating quadratic dynamical systems is PSPACE-complete, AroRabVaz-STOC-94Computational geometry: a retrospective, Cha-STOC-94Random sampling in cut, flow, and network design problems, Kar-STOC-94Alpha-algorithms for incremental planarity testing, LaP-STOC-94Improved data structures for fully dynamic biconnectivity, Rau-STOC-94

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-SIGGRAPH-98.html
##-----------------TITLE------------------------##
Proc. SIGGRAPH '98
##------------------TEXT------------------------##
Proc. SIGGRAPH '98

			
				A new Voronoi-based surface reconstruction algorithm, AmeBerKam-SIGGRAPH-98

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-1st-Int-Conf-Computational-Molecular-Biology-(RECOMB-97).html
##-----------------TITLE------------------------##
Proc. 1st Int. Conf. Computational Molecular Biology (RECOMB '97)
##------------------TEXT------------------------##
Proc. 1st Int. Conf. Computational Molecular Biology (RECOMB '97)

			
				New flexible approaches for multiple sequence alignment, ShiIma-RECOMB-97Alignment requirements for NCBI's genomes division, ZhaChaFlo-RECOMB-97

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-6th-Symp-Solid-Modeling-+-Applications.html
##-----------------TITLE------------------------##
Proc. 6th Symp. Solid Modeling & Applications
##------------------TEXT------------------------##
Proc. 6th Symp. Solid Modeling & Applications

			
				Finding approximate shape regularities in reverse engineered solid models bounded by simple surfaces, LanMilMar-SMA-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-10th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 10th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 10th Symp. Computational Geometry

			
				Biased finger trees and three-dimensional layers of maxima, AtaGooRam-SCG-94Linear-size nonobtuse triangulation of polygons, BerMitRup-SCG-94Computing the rectangle discrepancy, DobGun-SCG-94Cutting dense point sets in half, EdeValWel-SCG-94Almost tight upper bounds for the single cell and zone problems in three dimensions, HalSha-SCG-94On geometric optimization with few violated constraints, Mat-SCG-94An optimal bound for high-quality conforming triangulations, Tan-SCG-94

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Commun-of-the-ACM.html
##-----------------TITLE------------------------##
Commun. of the ACM
##------------------TEXT------------------------##
Commun. of the ACM

			
				A bridging model for parallel computation, Val-CACM-90

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-2nd-Int-Conf-Computer-Graphics-Virtual-Reality-Visualisation-and-Interaction-in-Africa-(AFRIGRAPH-2003).html
##-----------------TITLE------------------------##
Proc. 2nd Int. Conf. Computer Graphics, Virtual Reality, Visualisation and Interaction in Africa (AFRIGRAPH 2003)
##------------------TEXT------------------------##
Proc. 2nd Int. Conf. Computer Graphics, Virtual Reality, Visualisation and Interaction in Africa (AFRIGRAPH 2003)

			
				Topology alteration for virtual sculpting using spatial deformation, SteGai-AFRIGRAPH-03

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-10th-Symp-Principles-of-Distributed-Computing-(PODC-1991).html
##-----------------TITLE------------------------##
Proc. 10th Symp. Principles of Distributed Computing (PODC 1991)
##------------------TEXT------------------------##
Proc. 10th Symp. Principles of Distributed Computing (PODC 1991)

			
				Efficient parallel algorithms on restartable fail-stop processors, KanShv-PODC-91

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-13th-Symp-Parallel-Algorithms-+-Architectures-(SPAA-2001).html
##-----------------TITLE------------------------##
Proc. 13th Symp. Parallel Algorithms & Architectures (SPAA 2001)
##------------------TEXT------------------------##
Proc. 13th Symp. Parallel Algorithms & Architectures (SPAA 2001)

			
				Towards practical deteministic write-all algorithms, ChlDobKow-SPAA-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-4th-Symp-Parallel-+-Distributed-Processing.html
##-----------------TITLE------------------------##
Proc. 4th Symp. Parallel & Distributed Processing
##------------------TEXT------------------------##
Proc. 4th Symp. Parallel & Distributed Processing

			
				A new framework for designing parallel algorithms on series parallel graphs, CasDek-PDP-92

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-33rd-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 33rd Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 33rd Symp. Theory of Computing

			
				Fully-dynamic min-cut, Tho-STOC-01Minimax parametric optimization problems and multi-dimensional parametric searching, Tok-STOC-01

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-23rd-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 23rd Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 23rd Symp. Theory of Computing

			
				Dynamic trees and dynamic point location, GooTam-STOC-91Constant-time parallel integer sorting, Hag-STOC-91A model for data in motion, Kah-STOC-91Hidden surface removal with respect to a moving view point, Mul-STOC-91

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-29th-Symp-Theory-of-Computing.html
##-----------------TITLE------------------------##
Proc. 29th Symp. Theory of Computing
##------------------TEXT------------------------##
Proc. 29th Symp. Theory of Computing

			
				Incremental clustering and dynamic information retrieval, ChaCheFed-STOC-97

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Location/Proc-20th-Symp-Computational-Geometry.html
##-----------------TITLE------------------------##
Proc. 20th Symp. Computational Geometry
##------------------TEXT------------------------##
Proc. 20th Symp. Computational Geometry

			
				Algorithms for center and Tverberg points, AgaShaWel-SCG-04A 2d kinetic triangulation with near-quadratic topological changes, AgaWanYu-SCG-04Deterministic sampling and range counting in geometric data streams, BagChaEpp-SCG-04Quality meshing for polyhedra with small angles, CheDeyRam-SCG-04The geometric thickness of low degree graphs, DunEppKob-SCG-04Deformable spanners and applications, GaoGuiNgu-SCG-04Single-strip triangulation of manifolds with arbitrary topology, GopEpp-SCG-04Range counting over multidimensional data streams, SurTotZho-SCG-04

				
					[D. Eppstein publications]
					[Citation database]
					[Locations]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Jeffrey-Gordon-Erickson.html
##-----------------TITLE------------------------##
Jeffrey Gordon Erickson
##------------------TEXT------------------------##
Jeffrey Gordon Erickson

			
				Univ. of Illinois, Urbana-Champaign, Dept. of Computer Science
				http://compgeom.cs.uiuc.edu/~jeffe/
				jeffe@cs.uiuc.edu

				Author, editor, or reviewer of:
				Building space-time meshes over arbitrary spatial domainsFlipping cubical meshesGreedy optimal homotopy and homology generatorsIterated nearest neighbors and finding minimal polytopesKinetic collision detection between simple polygonsLower Bounds for Fundamental Geometric ProblemsNew algorithms for minimum measure simplices and one-dimensional weighted Voronoi diagramsNew lower bounds for halfspace emptinessNice point sets can have nasty Delaunay triangulationsOptimally cutting a surface into a diskRaising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactionsTightening non-simple paths and cycles on surfacesVertex-unfoldings of simplicial manifoldsVertex-unfoldings of simplicial polyhedra

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Publication/EriWhi-SODA-05.html
##-----------------TITLE------------------------##
EriWhi-SODA-05
##------------------TEXT------------------------##
EriWhi-SODA-05

			
				
					@inproceedings{EriWhi-SODA-05,
						title = {Greedy optimal homotopy and homology generators},
						author = {Jeffrey Gordon Erickson and Kim Whittlesey},
						booktitle = {Proc. 16th Symp. Discrete Algorithms},
						publisher = {ACM and SIAM},
						pages = {1038--1046},
						month = {Jan},
						year = {2005}}
				

				
					[D. Eppstein publications]
					[Citation database]
					[Publications]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Author/Kim-Whittlesey.html
##-----------------TITLE------------------------##
Kim Whittlesey
##------------------TEXT------------------------##
Kim Whittlesey

			
				Univ. of Illinois, Urbana-Champaign, Dept. of Mathematics
				http://www.math.uiuc.edu/~kwhittle/
				kwhittle@math.uiuc.edu

				Author, editor, or reviewer of:
				Greedy optimal homotopy and homology generators

				
					[D. Eppstein publications]
					[Citation database]
					[Authors]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-decomposition-of-generalized-series-parallel-graphs.html
##-----------------TITLE------------------------##
Parallel decomposition of generalized series-parallel graphs
##------------------TEXT------------------------##
Parallel decomposition of generalized series-parallel graphs

			
				Chin-Wen Ho,
Sun-Yuan Hsieh,
and Gen-Huey Chen
				J. Information Science & Engineering 15(3):407–417, May 1999
				http://www.iis.sinica.edu.tw/JISE/1999/199905_06.pdf

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Power-efficient-encoding-techniques-for-off-chip-data-buses.html
##-----------------TITLE------------------------##
Power efficient encoding techniques for off-chip data buses
##------------------TEXT------------------------##
Power efficient encoding techniques for off-chip data buses

			
				Dinesh C. Suresh,
Banit Agrawal,
Jun Yang,
Walid Najjar,
and Laxmi Bhuyan
				Proc. Int. Conf. Compilers, Architectures and Synthesis for Embedded Systems, ACM, 2003, pp. 267–275
				http://portal.acm.org/citation.cfm?id=951745

				Cites:
				Reference caching using unit distance redundant codes for activity reduction on address buses

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Semi-online-maintenance-of-geometric-optima-and-measures.html
##-----------------TITLE------------------------##
Semi-online maintenance of geometric optima and measures
##------------------TEXT------------------------##
Semi-online maintenance of geometric optima and measures

			
				Timothy Moon-Yew Chan
				SIAM J. Computing 32(3):700–716, 2003
				Proc. 13th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2002, pp. 474–483

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functionsAverage case analysis of dynamic geometric optimizationIncremental and decremental maintenance of planar widthRaising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Application-challenges-to-computational-geometry.html
##-----------------TITLE------------------------##
Application challenges to computational geometry
##------------------TEXT------------------------##
Application challenges to computational geometry

			
				Bernard Chazelle
and others
				Advances in Discrete and Computational Geometry – Proc. 1996 AMS-IMS-SIAM Joint Summer Research Conf. Discrete and Computational Geometry: Ten Years Later, Contemporary Mathematics 223, Bernard Chazelle,
Jacob E. Goodman,
and Richard Pollack, ed., Amer. Math. Soc., 1999, pp. 407–423
				Tech. report TR-521-96, Princeton Univ., Dept. of Computer Science, Apr 1996
				http://ncstrl.cs.princeton.edu/expand.php3?id=TR-521-96

				Cited by:
				Strategic directions in computational geometry: working group reportComputer graphicsRobust and efficient cartesian mesh generation for component-based geometryA unified approach to labeling graphical featuresExact algorithms for circles on the sphereOn the multiple label placement problemTetrahedral meshes from planar cross sectionsPoint set labeling with specified positionsElastic labels around the perimeter of a mapMap Labeling ProblemsOn decreased importance of algorithmic strategies in current ACM curricula for graphics & visual computingA fast algorithm for point labeling problem

				This task force was organized by Bernard Chazelle and consisted of Nina Amenta, Tetsuo Asano, Gill Barequet, Marshall Bern, Jean-Daniel Boissonat, John Canny, Bernard Chazelle, Ken Clarkson, David Dobkin, Bruce Donald, Scot Drysdale, Herbert Edelsbrunner, David Eppstein, Robin Forrest, Steve Fortune, Ken Goldberg, Mike Goodrich, Leo Guibas, Pat Hanrahan, Chris Hoffman, Dan Huttenlocher, Hiroshi Imai, David Kirkpatrick, D.T. Lee, Kurt Mehlhorn, Victor Milenkovic, Joe Mitchell, Mark Overmars, Ricky Pollack, Raimund Seidel, Micha Sharir, Jack Snoeyink, Godfried Toussaint, Seth Teller, H. Voelcker, Emo Welzl, and Chee Yap.

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Orienting-micro-scale-parts-with-squeeze-and-roll-primitives.html
##-----------------TITLE------------------------##
Orienting micro-scale parts with squeeze and roll primitives
##------------------TEXT------------------------##
Orienting micro-scale parts with squeeze and roll primitives

			
				Mark Moll,
Kenneth Y. Goldberg,
Michael A. Erdmann,
and Ron Fearing
				Proc. Int. Conf. Robotics and Automation (ICRA 2002), IEEE, May 2002, pp. 1931–1936
				http://www-2.cs.cmu.edu/~mmoll/publications/micromanip.pdf

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Hexahedral-mesh-generation-by-successive-dual-cycle-elimination.html
##-----------------TITLE------------------------##
Hexahedral mesh generation by successive dual cycle elimination
##------------------TEXT------------------------##
Hexahedral mesh generation by successive dual cycle elimination

			
				Matthias Müller-Hannemann
				Engineering Computations 15(3):269–279, 1999
				Proc. 7th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1998, pp. 379–393

				Cites:
				Mesh generation and optimal triangulationLinear complexity hexahedral mesh generation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Straight-line-skeleton-in-linear-time-topologically-equivalent-to-the-medial-axis.html
##-----------------TITLE------------------------##
Straight line skeleton in linear time, topologically equivalent to the medial axis
##------------------TEXT------------------------##
Straight line skeleton in linear time, topologically equivalent to the medial axis

			
				Mirela Tănase
and Remco C. Veltkamp
				Proc. 20th Eur. Worksh. Computational Geometry, Mar 2004

				Cites:
				Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Area-optimization-of-simple-polygons.html
##-----------------TITLE------------------------##
Area optimization of simple polygons
##------------------TEXT------------------------##
Area optimization of simple polygons

			
				Sándor P. Fekete
				Tech. report ZPR97-256, Univ. Köln, Mathematisches Inst., 1997
				http://www.zpr.Uni-Koeln.DE/~paper/paper.php3?paper=256

				Cites:
				Finding minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-enumerating-and-selecting-distances.html
##-----------------TITLE------------------------##
On enumerating and selecting distances
##------------------TEXT------------------------##
On enumerating and selecting distances

			
				Timothy Moon-Yew Chan
				Int. J. Computational Geometry & Applications 11(3):291–304, Jun 2001
				Proc. 14th Symp. Computational Geometry, ACM, Jun 1998, pp. 279–286

				Cites:
				Algorithms for proximity problems in higher dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computational-geometry-and-statistical-depth-measures.html
##-----------------TITLE------------------------##
Computational geometry and statistical depth measures
##------------------TEXT------------------------##
Computational geometry and statistical depth measures

			
				Eynat Rafalin
and Diane L. Souvaine
				Theory and Applications of Recent Robust Methods, Statistics for Industry and Technology, Mia Hubert,
G. Pison,
Anja Struyf,
and Stefan van Aelst, ed., Birkhauser, 2004
				http://www.cs.tufts.edu/r/geometry/data_depth/geom_ICORS.pdf

				Cites:
				Approximating center points with iterated Radon points

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Crossings-in-Clustered-Level-Graphs.html
##-----------------TITLE------------------------##
Crossings in Clustered Level Graphs
##------------------TEXT------------------------##
Crossings in Clustered Level Graphs

			
				Michael Forster
				Ph.D. thesis, Univ. Passau, Fak. für Mathematik und Informatik, Nov 2004
				http://www.opus-bayern.de/uni-passau/volltexte/2005/48/pdf/Dissertation%20Michael%20Forster.pdf

				Cites:
				Confluent drawings: visualizing non-planar diagrams in a planar wayConfluent layered drawings

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Extending-range-queries-and-nearest-neighbors.html
##-----------------TITLE------------------------##
Extending range queries and nearest neighbors
##------------------TEXT------------------------##
Extending range queries and nearest neighbors

			
				Robin Y. Flatland
and Charles V. Stewart
				Proc. 7th Canad. Conf. Computational Geometry, Aug 1995, pp. 267–272
				Computational Geometry Theory & Applications 17(1–2):3–24, Oct 2000
				http://www.cs.rpi.edu/~flatland/pspapers/cccg95.ps.Z

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Stochastic-simulation-in-surface-reconstruction-and-application-to-3D-mapping.html
##-----------------TITLE------------------------##
Stochastic simulation in surface reconstruction and application to 3D mapping
##------------------TEXT------------------------##
Stochastic simulation in surface reconstruction and application to 3D mapping

			
				Jeff Leal,
Steve Scheding,
and Gamini Dissanayake
				Proc. Int. Conf. Robotics and Automation (ICRA 2002), IEEE, May 2002, pp. 1765–1770
				http://www.acfr.usyd.edu.au/publications/downloads/2003/Leal180/icra2002.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-the-bottleneck-stretch-factor-problem.html
##-----------------TITLE------------------------##
Approximation algorithms for the bottleneck stretch factor problem
##------------------TEXT------------------------##
Approximation algorithms for the bottleneck stretch factor problem

			
				Giri Narasimhan
and Michiel Smid
				Nordic J. Computing 9(1):13–31, 2002
				Tech. report 13, Otto-von-Güricke-Univ. Magdeburg, Fakultät für Informatik, 2000
				http://isgwww.cs.uni-magdeburg.de/~michiel/bottleneck.ps.gz

				Cites:
				Algorithms for proximity problems in higher dimensionsSpanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Practical-approximations-for-zero-and-bounded-skew-trees.html
##-----------------TITLE------------------------##
Practical approximations for zero- and bounded-skew trees
##------------------TEXT------------------------##
Practical approximations for zero- and bounded-skew trees

			
				Alexander Zelikovsky
and Ion I. Măndoiu
				SIAM J. Discrete Mathematics 15(1):97–111, 2002
				Proc. 12th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2001, pp. 407–416

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Improved-methods-for-signature-tree-construction.html
##-----------------TITLE------------------------##
Improved methods for signature-tree construction
##------------------TEXT------------------------##
Improved methods for signature-tree construction

			
				Eleni Tousidou,
Alexandros Nanopoulos,
and Yannis Manolopoulos
				Computer J. 43(4):301–314, 2000
				http://delab.csd.auth.gr/papers/TCJ00tnm.pdf

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Arrangements-of-polytopes-and-the-1-Steiner-problem.html
##-----------------TITLE------------------------##
Arrangements of polytopes and the 1-Steiner problem
##------------------TEXT------------------------##
Arrangements of polytopes and the 1-Steiner problem

			
				Boris Aronov,
Marshall Wayne Bern,
and David Eppstein

				Cited by:
				Complexity of projected images of convex subdivisionsThe union of convex polyhedra in three dimensionsThe common exterior of convex polygons in the planeThe robot localization problemArrangementsPolyhedral assembly partitioning using maximally covered cells in arrangements of convex polytopesSparse arrangements and the number of views of polyhedral scenesA simple and efficient procedure for polyhedral assembly partitioning under infinitesimal motionsTwo-handed assembly sequencingArrangements and their applications

				This manuscript has not been published; it proves bounds on the complexity of arrangements of m polytopes, with a total of n faces, at most c of which have a common intersection.  Some or all of the citations are for the close-to-trivial bound O(m^{ceil(d/2)} n^{floor(d/2)}).

We then apply these bounds in the analysis of algorithms for finding combinatorially distinct minimum spanning trees formed by adding one Steiner point to a point set.  See "On the number of minimal 1-Steiner trees" (same authors; DCG 1994) for closely related results on the number of possible such trees.

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-practical-hierarchical-model-of-parallel-computation-I-the-model.html
##-----------------TITLE------------------------##
A practical hierarchical model of parallel computation I: the model
##------------------TEXT------------------------##
A practical hierarchical model of parallel computation I: the model

			
				Todd Heywood
and Sanjay Ranka
				J. Parallel & Distributed Computing 16:212–232, 1992

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algoritmos-para-predicao-da-estrutura-secundaria-do-RNA.html
##-----------------TITLE------------------------##
Algoritmos para predição da estrutura secundária do RNA
##------------------TEXT------------------------##
Algoritmos para predição da estrutura secundária do RNA

			
				Luiz Carlos da Silva Rozante
and José Augusto Ramos Soares
				Proc. XXII Cong. Soc. Brasileira de Computação (SBC 2002), 2002

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Tree-approximations-for-the-weighted-Cost-Distance-problem.html
##-----------------TITLE------------------------##
Tree-approximations for the weighted Cost-Distance problem
##------------------TEXT------------------------##
Tree-approximations for the weighted Cost-Distance problem

			
				C. Schindelhauer
and B. Weber
				Proc. 12th Int. Symp. Algorithms & Computation (ISAAC 2001), Lecture Notes in Computer Science 2223, Peter Eades
and Tadao Takaoka, ed., Springer-Verlag, 2001, pp. 185–195

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Neue-Untersuchungen-zur-Integration-von-DGM-und-DSM-mittels-Triangulationen-zur-Berechnung-integrierter-2.5D-Landschaftsmodelle.html
##-----------------TITLE------------------------##
Neue Untersuchungen zur Integration von DGM und DSM mittels Triangulationen zur Berechnung integrierter 2.5D-Landschaftsmodelle
##------------------TEXT------------------------##
Neue Untersuchungen zur Integration von DGM und DSM mittels Triangulationen zur Berechnung integrierter 2.5D-Landschaftsmodelle

			
				Ulrich Lenk
and Christian Heipke
				Mitteilungen des Bundesamtes für Kartographie und Geodäsie 22:89–112, 2002
				http://www.ipi.uni-hannover.de/html/publikationen/2002/paper/aga01_mit_bildern.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multiple-sequence-alignment-with-arbitrary-gap-costs-Computing-an-optimal-solution-using-polyhedral-combinatorics.html
##-----------------TITLE------------------------##
Multiple sequence alignment with arbitrary gap costs: Computing an optimal solution using polyhedral combinatorics
##------------------TEXT------------------------##
Multiple sequence alignment with arbitrary gap costs: Computing an optimal solution using polyhedral combinatorics

			
				Ernst Althaus,
Alberto Caprara,
Hans-Peter Lenhof,
and Knut Reinert
				Bioinformatics 18:S4–S16, Oct 2002

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Adaptive-refinement-of-unstructured-finite-element-meshes.html
##-----------------TITLE------------------------##
Adaptive refinement of unstructured finite-element meshes
##------------------TEXT------------------------##
Adaptive refinement of unstructured finite-element meshes

			
				Mark T. Jones
and Paul E. Plassman
				Finite Elements in Analysis & Design 25:41–60, Mar 1997

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Practical-construction-of-metric-t-spanners.html
##-----------------TITLE------------------------##
Practical construction of metric $t$-spanners
##------------------TEXT------------------------##
Practical construction of metric $t$-spanners

			
				Gonzalo Navarro
and Rodrigo Paredes
				Proc. 5th Worksh. Algorithm Engineering & Experiments (ALENEX), SIAM, 2003
				http://www.siam.org/meetings/alenex03/Abstracts/gnavarro.pdf

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Quasi-greedy-triangulations-approximating-the-minimum-weight-triangulation.html
##-----------------TITLE------------------------##
Quasi-greedy triangulations approximating the minimum weight triangulation
##------------------TEXT------------------------##
Quasi-greedy triangulations approximating the minimum weight triangulation

			
				Christos Levcopoulos
and Drago Krznaric
				J. Algorithms 27(2):303–338, May 1998

				Cites:
				Approximation algorithms for geometric problemsApproximating the minimum weight Steiner triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Precise-relative-positioning-of-multiple-moving-platforms-using-GPS-carrier-phase-observables.html
##-----------------TITLE------------------------##
Precise relative positioning of multiple moving platforms using GPS carrier phase observables
##------------------TEXT------------------------##
Precise relative positioning of multiple moving platforms using GPS carrier phase observables

			
				Ning Luo
				Ph.D. thesis, Univ. of Calgary, Dept. of Geomatics Engineering, Jan 2001
				Tech. report 20147, Univ. of Calgary, Dept. of Geomatics Engineering, 2001
				http://www.geomatics.ucalgary.ca/Papers/Thesis/GL/00.20147.NingLuo.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Anisotropic-mesh-generation-with-particles.html
##-----------------TITLE------------------------##
Anisotropic mesh generation with particles
##------------------TEXT------------------------##
Anisotropic mesh generation with particles

			
				Frank Bossen
				Tech. report CMU-CS-96-134, Carnegie-Mellon Univ., School of Computer Science, 1996
				http://www.cs.cmu.edu/afs/cs/user/ph/www/bossen.letter.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Local-optimization-based-untangling-algorithms-for-quadrilateral-meshes.html
##-----------------TITLE------------------------##
Local optimization-based untangling algorithms for quadrilateral meshes
##------------------TEXT------------------------##
Local optimization-based untangling algorithms for quadrilateral meshes

			
				Lori A. Freitag
and Paul E. Plassman
				Proc. 10th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 2001, pp. 397–406

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Paths-problems-in-symmetric-logarithmic-space.html
##-----------------TITLE------------------------##
Paths problems in symmetric logarithmic space
##------------------TEXT------------------------##
Paths problems in symmetric logarithmic space

			
				Andreas Jakoby
and Maciej Li{\'s}kiewicz
				Proc. 29th Int. Coll. Automata, Languages, and Programming (ICALP 2002), Lecture Notes in Computer Science 2380, Peter Widmayer,
Francisco Triguero Ruiz,
Rafael Morales,
Matthew Hennessy,
Stephan Eidenbenz,
and Ricardo Conejo Muñoz, ed., Springer-Verlag, 2002, pp. 269–280

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multibeam-data-processing-a-detailed-algorithm-to-compute-(adaptive)-triangulations-and-potential-indicators-of-data-quality.html
##-----------------TITLE------------------------##
Multibeam data processing: a detailed algorithm to compute (adaptive) triangulations and potential indicators of data quality
##------------------TEXT------------------------##
Multibeam data processing: a detailed algorithm to compute (adaptive) triangulations and potential indicators of data quality

			
				Ulrich Lenk
				The Hydrographic J., 2003, pp. 3–10
				http://www.hydrographicsociety.org/PDF/Journal-107-Article1.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Minimum-weight-Euclidean-matching-and-weighted-relative-neighborhood-graphs.html
##-----------------TITLE------------------------##
Minimum weight Euclidean matching and weighted relative neighborhood graphs
##------------------TEXT------------------------##
Minimum weight Euclidean matching and weighted relative neighborhood graphs

			
				Andranik Mirzaian
				Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993), Lecture Notes in Computer Science 709, Frank K. H. A. Dehne,
Jörg-Rudiger Sack,
Nicola Santoro,
and Sue Whitesides, ed., Springer-Verlag, Aug 1993, pp. 506–517
				http://www.cs.yorku.ca/~andy/pubs/Matching.ps

				Cites:
				Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Bipartite-graphs-upward-drawings-and-planarity.html
##-----------------TITLE------------------------##
Bipartite graphs, upward drawings, and planarity
##------------------TEXT------------------------##
Bipartite graphs, upward drawings, and planarity

			
				Giuseppe Di Battista,
Wei-Ping Liu,
and Ivan Rival
				Information Processing Letters 36:317–322, 1990

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Force-directed-methods-for-smoothing-unstructured-triangular-and-tetrahedral-meshes.html
##-----------------TITLE------------------------##
Force-directed methods for smoothing unstructured triangular and tetrahedral meshes
##------------------TEXT------------------------##
Force-directed methods for smoothing unstructured triangular and tetrahedral meshes

			
				Hristo N. Djidjev
				Proc. 9th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 2000, pp. 395–406
				http://www.andrew.cmu.edu/user/sowen/abstracts/Dj763.html

				Cites:
				Optimal point placement for mesh smoothingMesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Maintaining-the-3-edge-connected-components-of-a-graph-online.html
##-----------------TITLE------------------------##
Maintaining the 3-edge connected components of a graph online
##------------------TEXT------------------------##
Maintaining the 3-edge connected components of a graph online

			
				Zvi Galil
and Giuseppe F. Italiano
				SIAM J. Computing 22:11–28, 1993
				Tech. report CUCS-017-91, Columbia Univ., Computer Science Dept., 1991
				ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-017-91.ps.Z

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Enclosing-k-points-in-the-smallest-axis-parallel-rectangle.html
##-----------------TITLE------------------------##
Enclosing $k$ points in the smallest axis parallel rectangle
##------------------TEXT------------------------##
Enclosing $k$ points in the smallest axis parallel rectangle

			
				Michael Segal
and Klara Kedem
				Proc. 8th Canad. Conf. Computational Geometry, International Informatics 5, Carleton Univ. Press, Aug 1996, pp. 20–25
				Information Processing Letters 65(2):95–99, Jan 1998
				http://www.cs.bgu.ac.il/~segal/segalklara.ps

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finite-domain-constraint-satisfaction-using-quantum-computation.html
##-----------------TITLE------------------------##
Finite domain constraint satisfaction using quantum computation
##------------------TEXT------------------------##
Finite domain constraint satisfaction using quantum computation

			
				Ola Angelsmark,
Vilhelm Dahllöf,
and Peter Jonsson
				Proc. 27th Int. Symp. Mathematical Foundations of Computer Science (MFCS 2002), Lecture Notes in Computer Science 2420, Krzysztof Diks
and Wojciech Rytter, ed., Springer-Verlag, 2002, pp. 93–103

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Sudoku-as-a-constraint-problem.html
##-----------------TITLE------------------------##
Sudoku as a constraint problem
##------------------TEXT------------------------##
Sudoku as a constraint problem

			
				Helmut Simonis
				Proc. 4th Int. Works. Modelling and Reformulating Constraint Satisfaction Problems, Brahim Hnich,
Patrick Prosser,
and Barbara Smith, ed., 2005, pp. 13–27
				http://4c.ucc.ie/~brahim/mod-proc.pdf

				Cites:
				Nonrepetitive paths and cycles in graphs with application to Sudoku

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Folding-and-cutting-paper.html
##-----------------TITLE------------------------##
Folding and cutting paper
##------------------TEXT------------------------##
Folding and cutting paper

			
				Erik D. Demaine,
Martin L. Demaine,
and Anna Lubiw
				Proc. 1st Japan Conf. Discrete & Computational Geometry (JCDCG 1998), Lecture Notes in Computer Science 1763, Jin Akiyama,
Mikio Kano,
and Masatsugu Urabe, ed., Springer-Verlag, 2000, pp. 104–117
				http://daisy.uwaterloo.ca/~eddemain/papers/JCDCG98

				Cites:
				A disk-packing algorithm for an origami magic trickRaising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Interactive-Rendering-of-Parametric-Spline-Surfaces.html
##-----------------TITLE------------------------##
Interactive Rendering of Parametric Spline Surfaces
##------------------TEXT------------------------##
Interactive Rendering of Parametric Spline Surfaces

			
				Subodh Kumar
				Ph.D. thesis, Univ. of North Carolina, Chapel Hill, Dept. of Computer Science, 1996
				Tech. report TR-96-039, Univ. of North Carolina, Chapel Hill, Dept. of Computer Science, 1996
				ftp://ftp.cs.unc.edu/pub/publications/techreports/96-039.ps.Z

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-Complexities-of-Puzzles-Cross-Sum-and-their-Another-Solution-Problems-(ASP).html
##-----------------TITLE------------------------##
The Complexities of Puzzles, Cross Sum and their Another Solution Problems (ASP)
##------------------TEXT------------------------##
The Complexities of Puzzles, Cross Sum and their Another Solution Problems (ASP)

			
				Takahiro Seta
				Senior thesis, Univ. of Tokyo, Dept. of Information Science, Feb 2001
				http://www-imai.is.s.u-tokyo.ac.jp/~seta/paper/senior_thesis/seniorthesis.ps

				Cites:
				Computational complexity of games and puzzlesOn the NP-completeness of cryptarithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-fast-algorithm-for-point-labeling-problem.html
##-----------------TITLE------------------------##
A fast algorithm for point labeling problem
##------------------TEXT------------------------##
A fast algorithm for point labeling problem

			
				Sasanka Roy,
Subhasis Bhattacharjee,
Sandip Das,
and Subhas Nandy
				Proc. 17th Canad. Conf. Computational Geometry (CCCG 2005), 2005
				http://cccg.cs.uwindsor.ca/papers/42.ps

				Cites:
				Application challenges to computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/It-is-tough-to-be-a-plumber.html
##-----------------TITLE------------------------##
It is tough to be a plumber
##------------------TEXT------------------------##
It is tough to be a plumber

			
				Daniel Král,
Vladan Majerech,
Jiří Sgall,
Tomáš Tichý,
and Gerhard J. Woeginger
				Tech. report 2002-061, Charles Univ., Inst. Teoretické Informatiky (ITI), 2002
				KAM-DIMATIA Series, Charles Univ., Dept. of Applied Mathematics, 2002
				http://kam.mff.cuni.cz/~kamserie/serie/clanky/2002/s563.ps
				http://iti.mff.cuni.cz/series/files/iti061ps.zip

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-O(nlog-n)-algorithm-for-finding-a-k-point-subset-with-minimal-Linfty-diameter.html
##-----------------TITLE------------------------##
An $O(n\log n)$ algorithm for finding a $k$-point subset with minimal $L_\infty$-diameter
##------------------TEXT------------------------##
An $O(n\log n)$ algorithm for finding a $k$-point subset with minimal $L_\infty$-diameter

			
				Michiel Smid
				Tech. report MPI-I-93-116, Max-Planck-Inst. für Informatik, 1993

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Complexity-of-Certificates-Heuristics-and-Counting-Types-with-Applicatins-to-Cryptography-and-Circuit-Theory.html
##-----------------TITLE------------------------##
Complexity of Certificates, Heuristics, and Counting Types, with Applicatins to Cryptography and Circuit Theory
##------------------TEXT------------------------##
Complexity of Certificates, Heuristics, and Counting Types, with Applicatins to Cryptography and Circuit Theory

			
				Jörg-Matthias Rothe
				Habilitation thesis, Friedrich-Schiller-Univ. Jena, Fakultät für Mathematik und Informatik, Feb 1999
				http://www.cs.uni-duesseldorf.de/~rothe/HABILITATION/main.ps

				Cites:
				Simultaneous strong separations of probabilistic and unambiguous complexity classes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Tiling-space-and-slabs-with-acute-tetrahedra.html
##-----------------TITLE------------------------##
Tiling space and slabs with acute tetrahedra
##------------------TEXT------------------------##
Tiling space and slabs with acute tetrahedra

			
				David Eppstein,
John M. Sullivan,
and Alper Üngör
				Computational Geometry Theory & Applications 27(3):237–255, 2004
				ACM Computing Research Repository, cs.CG/0302027
				Mathematical Reviews 2039173
				http://dx.doi.org/10.1016/j.comgeo.2003.11.003

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Spanners-for-geometric-intersection-graphs.html
##-----------------TITLE------------------------##
Spanners for geometric intersection graphs
##------------------TEXT------------------------##
Spanners for geometric intersection graphs

			
				Martin Fürer
and Shiva Prasad Kasiviswanathan
				ACM Computing Research Repository, cs.CG/0605029

				Cites:
				Testing bipartiteness of geometric intersection graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-efficient-data-structure-for-advance-bandwidth-reservations-on-the-internet.html
##-----------------TITLE------------------------##
An efficient data structure for advance bandwidth reservations on  the internet
##------------------TEXT------------------------##
An efficient data structure for advance bandwidth reservations on  the internet

			
				Andrej Brodnik
and Andreas Nilsson
				Proc. 3rd Conf. Computer Science & Electrical Engineering (CSEE 2002), May 2002
				http://www.sm.luth.se/~andreas/publications/symp-CSEE2002.pdf

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Choosing-colors-for-geometric-graphs-via-color-space-embeddings.html
##-----------------TITLE------------------------##
Choosing colors for geometric graphs via color space embeddings
##------------------TEXT------------------------##
Choosing colors for geometric graphs via color space embeddings

			
				Michael B. Dillencourt,
David Eppstein,
and Michael T. Goodrich
				Proc. 14th Int. Symp. Graph Drawing, Lecture Notes in Computer Science 4372, Michael Kaufmann
and Dorothea Wagner, ed., Springer-Verlag, 2006, pp. 294–305
				ACM Computing Research Repository, cs.CG/0609033

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximate-clustering-via-core-sets.html
##-----------------TITLE------------------------##
Approximate clustering via core-sets
##------------------TEXT------------------------##
Approximate clustering via core-sets

			
				Mihai Bădoiu,
Sariel Har-Peled,
and Piotr Indyk
				Proc. 34th Symp. Theory of Computing, ACM, May 2002, pp. 250–257

				Cites:
				Approximation algorithms for geometric problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parameterization-of-faceted-surfaces-for-meshing-using-angle-based-flattening.html
##-----------------TITLE------------------------##
Parameterization of faceted surfaces for meshing using angle-based flattening
##------------------TEXT------------------------##
Parameterization of faceted surfaces for meshing using angle-based flattening

			
				Alla Sheffer
and Eric de Sturler
				Engineering with Computers 17(3):326–337, 2001

				Cites:
				Quadrilateral meshing by circle packing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-embedding-general-metrics-into-trees.html
##-----------------TITLE------------------------##
Approximation algorithms for embedding general metrics into trees
##------------------TEXT------------------------##
Approximation algorithms for embedding general metrics into trees

			
				Mihai Bădoiu,
Piotr Indyk,
and Anastasios Sidiropoulos
				Proc. 18th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2007, pp. 512–521

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Topology-alteration-for-virtual-sculpting-using-spatial-deformation.html
##-----------------TITLE------------------------##
Topology alteration for virtual sculpting using spatial deformation
##------------------TEXT------------------------##
Topology alteration for virtual sculpting using spatial deformation

			
				Barry Steyn
and James Edward Gain
				Proc. 2nd Int. Conf. Computer Graphics, Virtual Reality, Visualisation and Interaction in Africa (AFRIGRAPH 2003), ACM, Feb 2003, pp. 63–68
				http://doi.acm.org/10.1145/602330.602343

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Numerische-simulationen-fuer-granulare-Medien.html
##-----------------TITLE------------------------##
Numerische simulationen für granulare Medien
##------------------TEXT------------------------##
Numerische simulationen für granulare Medien

			
				Alexander Schinner
				Masters thesis, Univ. Regensburg, Naturwissenschaftlichen Fakultät II, Physik, Sep 1995
				http://chaos.nat.uni-magdeburg.de/~schinner/dip/dip.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Shortest-paths-in-two-intersecting-pencils-of-lines.html
##-----------------TITLE------------------------##
Shortest paths in two intersecting pencils of lines
##------------------TEXT------------------------##
Shortest paths in two intersecting pencils of lines

			
				David Hart
				Proc. 15th Canad. Conf. Computational Geometry (CCCG 2003), Dalhousie Univ., Faculty of Computer Science, Aug 2003, pp. 166–169
				http://torch.cs.dal.ca/~cccg/papers/48.pdf

				Cites:
				An efficient algorithm for shortest paths in vertical and horizontal segmentsShortest paths in an arrangement with $k$ line orientations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Repairing-CAD-models.html
##-----------------TITLE------------------------##
Repairing CAD models
##------------------TEXT------------------------##
Repairing CAD models

			
				Gill Barequet
and Subodh Kumar
				Proc. Visualization '97, Roni Yagel, ed., IEEE, Oct 1997, pp. 363–370
				ftp://condor.cs.jhu.edu/pub/barequet/papers/unv-vis97.ps.gz

				Cites:
				On triangulating three-dimensional polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Interactive-co-design-of-high-throughput-multimedia.html
##-----------------TITLE------------------------##
Interactive co-design of high-throughput multimedia
##------------------TEXT------------------------##
Interactive co-design of high-throughput multimedia

			
				Thierry J.-F. Omnès,
Thierry Franzetti,
and Francky Catthoor
				Proc. 37th IEEE/ACM Design Automation Conf. (DAC 2000), Jun 2000, pp. 328–331
				http://doi.acm.org/10.1145/337292.337430

				Cites:
				Dynamic graph algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-complexity-of-computations-with-general-and-Toeplitz-like-matrices-Filled-with-integers-and-extensions.html
##-----------------TITLE------------------------##
Parallel complexity of computations with general and Toeplitz-like matrices Filled with integers and extensions
##------------------TEXT------------------------##
Parallel complexity of computations with general and Toeplitz-like matrices Filled with integers and extensions

			
				Victor Y. Pan
				SIAM J. Computing 30(4):1080–1125, Oct 2000
				Tech. report 1999-007, Mathematical Sciences Research Inst., 1999
				http://www.msri.org/publications/preprints/online/1999-007.html

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Causal-Architecture-Complexity-and-Self-Organization-for-Time-Series-and-Cellular-Automata.html
##-----------------TITLE------------------------##
Causal Architecture, Complexity and Self-Organization for Time Series and Cellular Automata
##------------------TEXT------------------------##
Causal Architecture, Complexity and Self-Organization for Time Series and Cellular Automata

			
				Cosma Rohilla Shalizi
				Ph.D. thesis, Univ. of Wisconsin, Madison, Physics Dept., 2001
				http://cscs.umich.edu/~crshalizi/thesis/single-spaced-thesis.ps

				Cites:
				Gliders in Life-like cellular automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Beta-skeletons-have-unbounded-dilation.html
##-----------------TITLE------------------------##
Beta-skeletons have unbounded dilation
##------------------TEXT------------------------##
Beta-skeletons have unbounded dilation

			
				David Eppstein
				Computational Geometry Theory & Applications 23(1):43–52, Jul 2002
				Tech. report 96-15, Univ. of California, Irvine, Dept. of Information and Computer Science, 1996
				ACM Computing Research Repository, cs.CG/9907031
				Mathematical Reviews 2004a:05045
				http://www.ics.uci.edu/~eppstein/pubs/Epp-TR-96-15.pdf
				http://dx.doi.org/10.1016/S0925-7721(01)00055-4

				Cited by:
				Approximating the stretch factor of Euclidean graphsOn the spanning ratio of Gabriel graphs and beta-skeletonsThe spanning ratio of $\beta$-skeletons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-minimum-expectation-selection-problem.html
##-----------------TITLE------------------------##
The minimum expectation selection problem
##------------------TEXT------------------------##
The minimum expectation selection problem

			
				David Eppstein
and George S. Lueker
				10th Int. Conf. Random Structures & Algorithms, Aug 2001
				Random Structures & Algorithms 21(3–4):278–292, 2002
				ACM Computing Research Repository, cs.DS/0110011
				Mathematical Reviews 2003m:68054
				http://dx.doi.org/10.1002/rsa.10061

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Better-algorithms-for-high-dimensional-proximity-problems-via-asymmetric-embeddings.html
##-----------------TITLE------------------------##
Better algorithms for high-dimensional proximity problems via asymmetric embeddings
##------------------TEXT------------------------##
Better algorithms for high-dimensional proximity problems via asymmetric embeddings

			
				Piotr Indyk
				Proc. 14th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2003, pp. 539–545

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Planar-orientations-with-low-out-degree-and-compaction-of-adjacency-matrices.html
##-----------------TITLE------------------------##
Planar orientations with low out-degree and compaction of adjacency matrices
##------------------TEXT------------------------##
Planar orientations with low out-degree and compaction of adjacency matrices

			
				Marek Chrobak
and David Eppstein
				Theoretical Computer Science 86(2):243–266, Sep 1991
				Mathematical Reviews 93a:68114
				http://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf

				Cited by:
				Efficient massively parallel Euler solver for two-dimensional unstructured gridsTwo-dimensional viscous flow computations on the Connection Machine: unstructured meshes, upwind schemes and massively parallel computationsFully dynamic output bounded single source shortest path problemSemidynamic algorithms for maintaining single-source shortest path treesFully dynamic shortest paths and negative cycles detection on digraphs with arbitrary arc weightsConnectivity of planar graphsFaster finding of simple cycles in planar graphs on a randomized EREW PRAMA simple linear time algorithm for embedding maximal planar graphsA note on improving the running time of a class of parallel algorithms using randomizationFully dynamic algorithms for maintaining shortest path treesWhat structural features make graph problems to have efficient parallel algorithms? Using outerplanar graphs, trapezoid graphs and in-tournament graphs as examplesLabeling schemes for flow and connectivityShort path queries in planar graphs in constant timeA new 3-color criterion for planar graphsFully dynamic shortest paths in digraphs with arbitrary arc weightsOptimal graph orientation with storage applicationsShort cycles in planar graphsSmall induced-universal graphs and compact implicit graph representationsBalanced vertex-orderings of graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computational-geometry-column-42.html
##-----------------TITLE------------------------##
Computational geometry column 42
##------------------TEXT------------------------##
Computational geometry column 42

			
				Joseph S. B. Mitchell
and Joseph O'Rourke
				Computational Geometry Theory & Applications 11(5):573–582, Oct 2001
				SIGACT News 32(3):63–72, Sep 2001
				ACM Computing Research Repository, cs.CG/0108021
				http://portal.acm.org/citation.cfm?id=500562

				Cites:
				Ununfoldable polyhedra with convex facesEmerging challenges in computational topologyApproximating the minimum weight Steiner triangulationLinear complexity hexahedral mesh generation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Range-searching-with-efficient-hierarchical-cuttings.html
##-----------------TITLE------------------------##
Range searching with efficient hierarchical cuttings
##------------------TEXT------------------------##
Range searching with efficient hierarchical cuttings

			
				Jiří Matoušek
				Discrete & Computational Geometry 10:157–182, 1993

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-parallel-algorithms-for-geometric-clustering-and-partitioning-problems.html
##-----------------TITLE------------------------##
Efficient parallel algorithms for geometric clustering and partitioning problems
##------------------TEXT------------------------##
Efficient parallel algorithms for geometric clustering and partitioning problems

			
				Amitava Datta
				Tech. report 64, Albert-Ludwigs-Univ. Freiburg, Inst. für Informatik, Dec 1994
				http://www.informatik.uni-freiburg.de/TechReports/1994/abstract64.html

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-Markovian-Approach-to-the-Mathematical-Control-of-New-Product-Development-Projects.html
##-----------------TITLE------------------------##
A Markovian Approach to the Mathematical Control of New Product Development Projects
##------------------TEXT------------------------##
A Markovian Approach to the Mathematical Control of New Product Development Projects

			
				Andreea Bogdana Dragut
				Ph.D. thesis, Technische Univ. Eindhoven, Dept. of Operations, Planning, Accounting, and Control, Nov 2003
				http://alexandria.tue.nl/extra2/200313426.pdf

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-tetrahedralization-of-the-3d-region-between-a-convex-polyhedron-and-a-convex-polygon.html
##-----------------TITLE------------------------##
Optimal tetrahedralization of the 3d-region “between” a convex polyhedron and a convex polygon
##------------------TEXT------------------------##
Optimal tetrahedralization of the 3d-region “between” a convex polyhedron and a convex polygon

			
				Leonidas Palios
				Proc. 6th Canad. Conf. Computational Geometry, 1994, pp. 350–356
				Computational Geometry Theory & Applications 6(5):263–276, Sep 1996

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Combinatorics-on-arrangements-and-parametric-matroids-A-bridge-between-computational-geometry-and-combinatorial-optimization.html
##-----------------TITLE------------------------##
Combinatorics on arrangements and parametric matroids: A bridge between computational geometry and combinatorial optimization
##------------------TEXT------------------------##
Combinatorics on arrangements and parametric matroids: A bridge between computational geometry and combinatorial optimization

			
				Takeshi Tokuyama
				IEICE Trans. Information & Systems E83D(3):362–371, Mar 2000

				Cites:
				Geometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Robust-distance-based-clustering-with-applications-to-spatial-data-mining.html
##-----------------TITLE------------------------##
Robust distance-based clustering with applications to spatial data mining
##------------------TEXT------------------------##
Robust distance-based clustering with applications to spatial data mining

			
				Vladimir Estivill-Castro
and Michael E. Houle
				Algorithmica 30(2):216–242, Jun 2001

				Cites:
				On nearest neighbor graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Point-sets-with-many-k-sets.html
##-----------------TITLE------------------------##
Point sets with many $k$-sets
##------------------TEXT------------------------##
Point sets with many $k$-sets

			
				Géza Tóth
				Discrete & Computational Geometry 26(2):187–194, Sep 2001
				Proc. 16th Symp. Computational Geometry, ACM, Jun 2000, pp. 37–42

				Cites:
				Sets of points with many halving linesImproved bounds for intersecting triangles and halving planes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-objective-method-probabilistic-combinatorial-optimization-and-local-weak-convergence.html
##-----------------TITLE------------------------##
The objective method: probabilistic combinatorial optimization and local weak convergence
##------------------TEXT------------------------##
The objective method: probabilistic combinatorial optimization and local weak convergence

			
				David Aldous
and J. Michael Steele
				Probability on Discrete Structures, Encyclopaedia of Mathematical Sciences 110, H. Kesten, ed., Springer-Verlag, 2003, pp. 1–72
				http://www-stat.wharton.upenn.edu/~steele/Publications/PDF/OMSurvey.ps

				Cites:
				On nearest neighbor graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Compressing-two-dimensional-routing-tables.html
##-----------------TITLE------------------------##
Compressing two-dimensional routing tables
##------------------TEXT------------------------##
Compressing two-dimensional routing tables

			
				Subhash Suri,
T. Sandholm,
and P. Warkhede
				Algorithmica 35(4):287–300, Apr 2003

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Combinatorics-helps-for-hexahedral-mesh-generation-in-CAD.html
##-----------------TITLE------------------------##
Combinatorics helps for hexahedral mesh generation in CAD
##------------------TEXT------------------------##
Combinatorics helps for hexahedral mesh generation in CAD

			
				Matthias Müller-Hannemann
				Proc. 10th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1999, pp. S949–S950

				Cites:
				Linear complexity hexahedral mesh generation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Heuristic-allocation-based-on-a-dynamic-programming-state-space-representation.html
##-----------------TITLE------------------------##
Heuristic allocation based on a dynamic programming state-space representation
##------------------TEXT------------------------##
Heuristic allocation based on a dynamic programming state-space representation

			
				A. B. Dragut
				J. Computational & Applied Math. 140(1–2):257–273, Mar 2002

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Trees-with-convex-faces-and-optimal-angles.html
##-----------------TITLE------------------------##
Trees with convex faces and optimal angles
##------------------TEXT------------------------##
Trees with convex faces and optimal angles

			
				Josiah Carlson
and David Eppstein
				Proc. 14th Int. Symp. Graph Drawing, Lecture Notes in Computer Science 4372, Michael Kaufmann
and Dorothea Wagner, ed., Springer-Verlag, 2006, pp. 77–88
				ACM Computing Research Repository, cs.CG/0607113

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Some-paradigms-for-the-automated-design-of-parts-feeders.html
##-----------------TITLE------------------------##
Some paradigms for the automated design of parts feeders
##------------------TEXT------------------------##
Some paradigms for the automated design of parts feeders

			
				B. K. Natarajan
				Int. J. Robotics Research 8:98–109, 1989

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Graphs-Networks-and-Algorithms.html
##-----------------TITLE------------------------##
Graphs, Networks, and Algorithms
##------------------TEXT------------------------##
Graphs, Networks, and Algorithms

			
				Dieter Jungnickel
				Algorithms and Computation in Mathematics, Springer-Verlag, 1998

				Cites:
				Offline algorithms for dynamic minimum spanning tree problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-anatomy-of-a-geometric-algorithm.html
##-----------------TITLE------------------------##
The anatomy of a geometric algorithm
##------------------TEXT------------------------##
The anatomy of a geometric algorithm

			
				Jiří Matoušek
				Proc. 7th Int. Symp. Graph Drawing (GD 1999), Lecture Notes in Computer Science 1731, Jan Kratochvíl, ed., Springer-Verlag, 1999, pp. 1–7

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-algorithm-for-shortest-paths-in-bipartite-digraphs-with-concave-weight-matrices-and-its-applications.html
##-----------------TITLE------------------------##
An algorithm for shortest paths in bipartite digraphs with concave weight matrices and its applications
##------------------TEXT------------------------##
An algorithm for shortest paths in bipartite digraphs with concave weight matrices and its applications

			
				Xin He
and Zhi-Zhong Chen
				SIAM J. Computing 29(1):65–80, Sep 1999

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-3-approximation-for-the-minimum-tree-spanning-k-vertices.html
##-----------------TITLE------------------------##
A 3-approximation for the minimum tree spanning $k$ vertices
##------------------TEXT------------------------##
A 3-approximation for the minimum tree spanning $k$ vertices

			
				Naveen Garg
				Proc. 37th Symp. Foundations of Computer Science, IEEE, Oct 1996, pp. 302–309

				Cites:
				Faster geometric $k$-point MST approximation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Examples-counterexamples-and-enumeration-results-for-foldings-and-unfoldings-between-polygons-and-polytopes.html
##-----------------TITLE------------------------##
Examples, counterexamples, and enumeration results for foldings and unfoldings between polygons and polytopes
##------------------TEXT------------------------##
Examples, counterexamples, and enumeration results for foldings and unfoldings between polygons and polytopes

			
				Erik D. Demaine,
Martin L. Demaine,
Anna Lubiw,
and Joseph O'Rourke
				ACM Computing Research Repository, cs.CG/0007019

				Cites:
				Ununfoldable polyhedra

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Firewall-design-consistency-completeness-and-compactness.html
##-----------------TITLE------------------------##
Firewall design: consistency, completeness and compactness
##------------------TEXT------------------------##
Firewall design: consistency, completeness and compactness

			
				Xiang-Yang Alex Liu
and Mohamed G. Gouda
				Proc. 24th Int. Conf. Distributed Computing Systems (ICDCS 2004), IEEE, Mar 2004
				http://www.cs.utexas.edu/users/alex/publications/fdd.pdf

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Labeling-schemes-for-flow-and-connectivity.html
##-----------------TITLE------------------------##
Labeling schemes for flow and connectivity
##------------------TEXT------------------------##
Labeling schemes for flow and connectivity

			
				Michal Katz,
Nir A. Katz,
Amos Korman,
and David Peleg
				Proc. 13th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2002, pp. 927–936

				Cites:
				Planar orientations with low out-degree and compaction of adjacency matrices

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Orienting-parts-by-inside-out-pulling.html
##-----------------TITLE------------------------##
Orienting parts by inside-out pulling
##------------------TEXT------------------------##
Orienting parts by inside-out pulling

			
				Robert-Paul Mario Berretty,
Kenneth Y. Goldberg,
Mark Overmars,
and A. Frank van der Stappen
				Proc. 2001 IEEE Int. Conf. Robotics & Automation (ICRA 2001), 2001, pp. 1053–1058
				http://www.cs.unc.edu/~berretty/pulling_icra.ps

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Collaborative-frame-selection-exact-and-distributed-algorithms-for-a-networked-robotic-camera-with-discrete-zoom-levels.html
##-----------------TITLE------------------------##
Collaborative frame selection: exact and distributed algorithms for a networked robotic camera with discrete zoom levels
##------------------TEXT------------------------##
Collaborative frame selection: exact and distributed algorithms for a networked robotic camera with discrete zoom levels

			
				Dezhen Song,
A. Frank van der Stappen,
and Kenneth Y. Goldberg
				Tech. report UU-CS-2003-017, Univ. Utrecht, Dept. of Computer Science, 2003
				http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2003/2003-017.pdf

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Output-sensitive-results-on-convex-hulls-extreme-points-and-related-problems.html
##-----------------TITLE------------------------##
Output-sensitive results on convex hulls, extreme points, and related problems
##------------------TEXT------------------------##
Output-sensitive results on convex hulls, extreme points, and related problems

			
				Timothy Moon-Yew Chan
				Discrete & Computational Geometry 16(4):369–388, Dec 1996
				http://link.springer.de/link/service/journals/00454/htabst/16_369-387.html

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-directable-nondeterministic-trapped-automata.html
##-----------------TITLE------------------------##
On directable nondeterministic trapped automata
##------------------TEXT------------------------##
On directable nondeterministic trapped automata

			
				B. Imreh,
Cs. Imreh,
and Masami Ito
				Acta Cybernetica 16(1):37–45, Jan 2003

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Process-Discovery-and-Validation-through-Event-Data-Analysis.html
##-----------------TITLE------------------------##
Process Discovery and Validation through Event-Data Analysis
##------------------TEXT------------------------##
Process Discovery and Validation through Event-Data Analysis

			
				Jonathan E. Cook
				Ph.D. thesis, Univ. of Colorado, Boulder, Dept. of Computer Science, Sep 1996
				Tech. report CU-CS-817-96, Univ. of Colorado, Boulder, Dept. of Computer Science, Sep 1996
				http://www.cs.nmsu.edu/~jcook/papers/thesistr.ps.gz

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Crossing-patterns-of-segments.html
##-----------------TITLE------------------------##
Crossing patterns of segments
##------------------TEXT------------------------##
Crossing patterns of segments

			
				János Pach
and J. Solymosi
				J. Combinatorial Theory, Series A 96(2):316–325, Nov 2001

				Cites:
				Multivariate regression depth

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Steiner-triangulation-for-isotropic-and-stretched-elements.html
##-----------------TITLE------------------------##
Steiner triangulation for isotropic and stretched elements
##------------------TEXT------------------------##
Steiner triangulation for isotropic and stretched elements

			
				Timothy J. Barth
				http://www.nas.nasa.gov/~barth/delaunay/delaunay.html

				Cites:
				Mesh generation and optimal triangulation

				Barth describes this as "AIAA paper 95-0213".  Is this some kind of tech. report or preprint archive numbering scheme?  I couldn't find anything about it at www.aiaa.org...

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Compressing-hexahedral-volume-meshes.html
##-----------------TITLE------------------------##
Compressing hexahedral volume meshes
##------------------TEXT------------------------##
Compressing hexahedral volume meshes

			
				Martin Isenburg
and Pierre Alliez
				Graphical Models 65(4):239–257, Jul 2003

				Cites:
				Linear complexity hexahedral mesh generation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-Et-construction-for-lattices-spheres-and-polytopes.html
##-----------------TITLE------------------------##
The $E_t$-construction for lattices, spheres and polytopes
##------------------TEXT------------------------##
The $E_t$-construction for lattices, spheres and polytopes

			
				Andreas Paffenholz
and Günter M. Ziegler
				arXiv.org e-Print archive, math.MG/0304492

				Cites:
				Fat 4-polytopes and fatter 3-spheres

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-straight-skeleton-approximating-the-medial-axis.html
##-----------------TITLE------------------------##
A straight skeleton approximating the medial axis
##------------------TEXT------------------------##
A straight skeleton approximating the medial axis

			
				Mirela Tănase
and Remco C. Veltkamp
				Proc. 12th Eur. Symp. Algorithms (ESA 2004), Lecture Notes in Computer Science 3221, Susanne Albers
and Tomasz Radzik, ed., Springer-Verlag, Sep 2004, pp. 809–821

				Cites:
				Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Concept-learning-with-simple-geometric-hypotheses.html
##-----------------TITLE------------------------##
Concept learning with simple geometric hypotheses
##------------------TEXT------------------------##
Concept learning with simple geometric hypotheses

			
				David P. Dobkin
and Dmitri Gunopulos
				Proc. 8th Conf. Computational Learning Theory, Jul 1995, pp. 329–344
				Tech. report TR-481-94, Princeton Univ., Dept. of Computer Science, Dec 1994
				http://ncstrl.cs.princeton.edu/expand.php3?id=TR-481-94
				http://www.cs.princeton.edu/~dpd/Papers/DobkinGunopolous.ps.Z

				Cites:
				Computing the discrepancy

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lipschitzian-crowded-ball-packings-and-Delaunay-spheres.html
##-----------------TITLE------------------------##
Lipschitzian crowded ball packings and Delaunay spheres
##------------------TEXT------------------------##
Lipschitzian crowded ball packings and Delaunay spheres

			
				Philippe Biscondi
and Jean-Michel Moreau
				Tech. report ENSM.SE 96.14, École Nat. Sup. des Mines de Saint-Etienne, Dec 1996
				http://www.emse.fr/ECOLE/FRENCH/SIMADE/LISSE/PUBLIS/PS/1993-1996/bm-tr-1996.14.ps.gz

				Cites:
				Dihedral bounds for mesh generation in high dimensionsMesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Printed-circuit-board-simplification-simplifying-subdivisions-in-practice.html
##-----------------TITLE------------------------##
Printed circuit board simplification: simplifying subdivisions in practice
##------------------TEXT------------------------##
Printed circuit board simplification: simplifying subdivisions in practice

			
				Berto van de Kraats,
Marc J. van Kreveld,
and Mark Overmars
				Proc. 11th Symp. Computational Geometry, ACM, Jun 1995, pp. C30–C31

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Straightening-polygonal-arcs-and-convexifying-polygonal-cycles.html
##-----------------TITLE------------------------##
Straightening polygonal arcs and convexifying polygonal cycles
##------------------TEXT------------------------##
Straightening polygonal arcs and convexifying polygonal cycles

			
				Robert Connelly,
Erik D. Demaine,
and Günter Rote
				Discrete & Computational Geometry 30(2):205–239, Sep 2003

				Cites:
				Faster circle packing with application to nonobtuse triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Global-optimization-of-mesh-quality.html
##-----------------TITLE------------------------##
Global optimization of mesh quality
##------------------TEXT------------------------##
Global optimization of mesh quality

			
				David Eppstein
				Tutorial at 10th Int. Meshing Roundtable, 2001
				http://www.ics.uci.edu/~eppstein/pubs/Epp-IMR-01.pdf

				Cited by:
				Conformal refinement of all-quadrilateral and all-hexahedral meshes according to an anisotropic metric

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/No-net-polyhedra.html
##-----------------TITLE------------------------##
No-net polyhedra
##------------------TEXT------------------------##
No-net polyhedra

			
				Branko Grünbaum
				Geombinatorics 11:111–114, 2002

				Cites:
				Ununfoldable polyhedraUnunfoldable polyhedra with convex faces

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Preconditioners-for-indefinite-linear-systems-arising-in-surface-parameterization.html
##-----------------TITLE------------------------##
Preconditioners for indefinite linear systems arising in surface parameterization
##------------------TEXT------------------------##
Preconditioners for indefinite linear systems arising in surface parameterization

			
				Jörg Liesen,
Eric de Sturler,
Alla Sheffer,
Yelda Aydin,
and Christopher M. Siefert
				Proc. 10th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 2001, pp. 71–81

				Cites:
				Quadrilateral meshing by circle packing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-levels-in-arrangements-of-surfaces-in-three-dimensions.html
##-----------------TITLE------------------------##
On levels in arrangements of surfaces in three dimensions
##------------------TEXT------------------------##
On levels in arrangements of surfaces in three dimensions

			
				Timothy Moon-Yew Chan
				Proc. 16th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2005, pp. 232–240

				Cites:
				Improved bounds for intersecting triangles and halving planes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometry-in-Action.html
##-----------------TITLE------------------------##
Geometry in Action
##------------------TEXT------------------------##
Geometry in Action

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/geom.html

				Cited by:
				Strategic directions in computational geometry: working group reportAlgebraic relational approach for geospatial feature correlationAlternatives to Traditional 3d Modelling Methods

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-the-smallest-k-enclosing-circle-and-related-problems.html
##-----------------TITLE------------------------##
Computing the smallest $k$-enclosing circle and related problems
##------------------TEXT------------------------##
Computing the smallest $k$-enclosing circle and related problems

			
				Alon Efrat,
Micha Sharir,
and Alon Ziv
				Computational Geometry Theory & Applications 4:119–136, 1994
				Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993), Lecture Notes in Computer Science 709, Frank K. H. A. Dehne,
Jörg-Rudiger Sack,
Nicola Santoro,
and Sue Whitesides, ed., Springer-Verlag, Aug 1993, pp. 325–336

				Cites:
				New algorithms for minimum area $k$-gonsNew algorithms for minimum measure simplices and one-dimensional weighted Voronoi diagramsDynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Range-searching-in-categorical-data-colored-range-searching-on-grid.html
##-----------------TITLE------------------------##
Range searching in categorical data: colored range searching on grid
##------------------TEXT------------------------##
Range searching in categorical data: colored range searching on grid

			
				Pankaj Kumar Agarwal,
Sathish Govindarajan,
and Shanmugauelayut Muthukrishnan
				Proc. 10th Eur. Symp. Algorithms (ESA 2002), Lecture Notes in Computer Science 2461, Rolf H. Möhring
and Rajeev Raman, ed., Springer-Verlag, Sep 2002, pp. 17–28

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Many-distances-in-planar-graphs.html
##-----------------TITLE------------------------##
Many distances in planar graphs
##------------------TEXT------------------------##
Many distances in planar graphs

			
				Sergio Cabello Justo
				Proc. 17th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2006, pp. 1213–1220

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Good-orders-for-incremental-(re)construction.html
##-----------------TITLE------------------------##
Good orders for incremental (re)construction
##------------------TEXT------------------------##
Good orders for incremental (re)construction

			
				Jack Snoeyink
and Marc J. van Kreveld
				Proc. 13th Symp. Computational Geometry, ACM, Jun 1997, pp. 400–402

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Design-and-implementation-of-a-practical-parallel-Delaunay-algorithm.html
##-----------------TITLE------------------------##
Design and implementation of a practical parallel Delaunay algorithm
##------------------TEXT------------------------##
Design and implementation of a practical parallel Delaunay algorithm

			
				Guy E. Blelloch,
Jonathan C. Hardwick,
Gary L. Miller,
and Dafna Talmor
				Algorithmica 24(3–4):243–269, 1999

				Cites:
				The expected extremes in a Delaunay triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-k-farthest-pairs-and-k-closestfarthest-bichromatic-pairs-for-points-in-the-plane.html
##-----------------TITLE------------------------##
Finding $k$ farthest pairs and $k$ closest/farthest bichromatic pairs for points in the plane
##------------------TEXT------------------------##
Finding $k$ farthest pairs and $k$ closest/farthest bichromatic pairs for points in the plane

			
				Naoki Katoh
and Kazuo Iwano
				Int. J. Computational Geometry & Applications 5:37–51, 1995

				Cites:
				Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lectures-on-Discrete-Geometry.html
##-----------------TITLE------------------------##
Lectures on Discrete Geometry
##------------------TEXT------------------------##
Lectures on Discrete Geometry

			
				Jiří Matoušek
				Graduate Texts in Mathematics, Springer-Verlag, 2002

				Cites:
				Horizon theorems for lines and polygonsApproximating center points with iterated Radon pointsFat 4-polytopes and fatter 3-spheresDynamic Euclidean minimum spanning trees and extrema of binary functionsGeometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Exploiting-domain-geometry-in-analogical-route-planning.html
##-----------------TITLE------------------------##
Exploiting domain geometry in analogical route planning
##------------------TEXT------------------------##
Exploiting domain geometry in analogical route planning

			
				Karen Zita Haigh,
Jonathan Richard Shewchuk,
and Manuela M. Veloso
				J. Experimental & Theoretical Artificial Intelligence 9(4):509–541, 1997
				http://www.cs.cmu.edu/~khaigh/papers/khaigh97d.abstract.html

				Cites:
				Mesh generation and optimal triangulationSpanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Compressing-rectilinear-pictures-and-minimizing-access-control-lists.html
##-----------------TITLE------------------------##
Compressing rectilinear pictures and minimizing access control lists
##------------------TEXT------------------------##
Compressing rectilinear pictures and minimizing access control lists

			
				David A. Applegate,
Gruia Calinescu,
David S. Johnson,
Howard Karloff,
Katrina Ligett,
and Jia Wang
				Proc. 18th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2007, pp. 1066–1075

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Shortest-paths-in-an-arrangement-with-k-line-orientations.html
##-----------------TITLE------------------------##
Shortest paths in an arrangement with $k$ line orientations
##------------------TEXT------------------------##
Shortest paths in an arrangement with $k$ line orientations

			
				David Eppstein
and David Hart
				Proc. 10th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1999, pp. 310–316

				Cited by:
				Geometric shortest paths and network optimizationApproximating the shortest path in line arrangementsComputing shortest paths with comparisons and additionsTopological peeling and applicationsTopological peeling and implementationFinding an optimal path without growing the treeShortest paths in two intersecting pencils of linesOn shortest paths in line arrangementsAlgorithms for Geometric Shortest Paths Along Routes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Worst-case-analysis-3-SAT-decision-and-lower-bounds-approaches-for-improved-SAT-algorithms.html
##-----------------TITLE------------------------##
Worst-case analysis, 3-SAT decision and lower bounds: approaches for improved SAT algorithms
##------------------TEXT------------------------##
Worst-case analysis, 3-SAT decision and lower bounds: approaches for improved SAT algorithms

			
				Oliver Kullmann
				Satisfiability Problem: Theory and Applications, DIMACS Ser. Discrete Math. and Theoretical Computer Science 35, Ding-Zhu Du,
Jun Gu,
and Panos M. Pardalos, ed., Amer. Math. Soc., 1997, pp. 261–313
				http://cs-svr1.swan.ac.uk/~csoliver/Artikel/procfin2e.ps

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Spanners-in-l1.html
##-----------------TITLE------------------------##
Spanners in $l_1$
##------------------TEXT------------------------##
Spanners in $l_1$

			
				D. José Cáceres González,
Clara Isabel Grima Ruíz,
Alberto Márquez Pérez,
and A. Moreno-González
				Proc. 12th Canad. Conf. Computational Geometry, Aug 2000
				http://www.cs.unb.ca/conf/cccg/eProceedings/23.ps.gz

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Force-directed-methods-for-mesh-improvement.html
##-----------------TITLE------------------------##
Force-directed methods for mesh improvement
##------------------TEXT------------------------##
Force-directed methods for mesh improvement

			
				Hristo N. Djidjev
				Proc. 2nd Worksh. Algorithm Engineering and Experiments (ALENEX 2000), Jan 2000, pp. 29–41

				Cites:
				Optimal point placement for mesh smoothingMesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimizing-the-sum-of-linear-fractional-functions-and-applications.html
##-----------------TITLE------------------------##
Optimizing the sum of linear fractional functions and applications
##------------------TEXT------------------------##
Optimizing the sum of linear fractional functions and applications

			
				Danny Z. Chen,
Ovidiu Daescu,
Yang Dai,
Naoki Katoh,
Xiaodong Wu,
and Jinhui Xu
				Proc. 11th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2000, pp. 707–716

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Polynomially-solvable-cases-of-the-traveling-salesman-problem-and-a-new-exponential-neighborhood.html
##-----------------TITLE------------------------##
Polynomially solvable cases of the traveling salesman problem and a new exponential neighborhood
##------------------TEXT------------------------##
Polynomially solvable cases of the traveling salesman problem and a new exponential neighborhood

			
				Rainer Ernst Burkard
and Vladimir G. Deĭneko
				Computing 54:191–211, 1995

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Dynamic-rectilinear-point-location-using-hashing.html
##-----------------TITLE------------------------##
Dynamic rectilinear point location using hashing
##------------------TEXT------------------------##
Dynamic rectilinear point location using hashing

			
				John Iacono
				Proc. 6th CGC Worksh. Computational Geometry, Polytechnic Univ., Computer Science Dept., Nov 2001
				http://geometry.poly.edu/cgwpapers/john_pl.ps

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/New-approximation-algorithms-for-map-labeling-with-sliding-labels.html
##-----------------TITLE------------------------##
New approximation algorithms for map labeling with sliding labels
##------------------TEXT------------------------##
New approximation algorithms for map labeling with sliding labels

			
				Binhai Zhu
and Z. P. Qin
				J. Combinatorial Optimization 6(1):99–110, Mar 2002

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-approximation-schemes-for-a-class-of-planar-and-near-planar-combinatorial-optimization-problems.html
##-----------------TITLE------------------------##
Parallel approximation schemes for a class of planar and near planar combinatorial optimization problems
##------------------TEXT------------------------##
Parallel approximation schemes for a class of planar and near planar combinatorial optimization problems

			
				Harry B. Hunt III,
Madhav V. Marathe,
Venkatesh Radhakrishnan,
S. S. Ravi,
Daniel J. Rosenkrantz,
and Richard E. Stearns
				Information & Computation 173(1):40–63, Feb 2002

				Cites:
				Subgraph isomorphism in planar graphs and related problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Working-Group-1-Education-Addendum-Publiceren-met-LaTeX.html
##-----------------TITLE------------------------##
Working Group 1: Education, Addendum ‘Publiceren met LaTeX’
##------------------TEXT------------------------##
Working Group 1: Education, Addendum ‘Publiceren met LaTeX’

			
				Kees van der Laan
				MAPS 8:25–30, 1992
				http://www.ntg.nl/maps/pdf/8_10.pdf

				Cites:
				Trees in \TeX

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-bridging-model-for-parallel-computation.html
##-----------------TITLE------------------------##
A bridging model for parallel computation
##------------------TEXT------------------------##
A bridging model for parallel computation

			
				Leslie G. Valiant
				Commun. of the ACM 33:103–111, 1990

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Output-Sensitive-Construction-of-Convex-Hulls.html
##-----------------TITLE------------------------##
Output-Sensitive Construction of Convex Hulls
##------------------TEXT------------------------##
Output-Sensitive Construction of Convex Hulls

			
				Timothy Moon-Yew Chan
				Ph.D. thesis, Univ. of British Columbia, Computer Science Dept., Nov 1995
				http://www.cs.miami.edu/~tchan/th_main.ps.gz

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Seventeen-proofs-of-Eulers-formula-V-E+F2.html
##-----------------TITLE------------------------##
Seventeen proofs of Euler's formula: $V-E+F=2$
##------------------TEXT------------------------##
Seventeen proofs of Euler's formula: $V-E+F=2$

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/junkyard/euler/

				Cited by:
				Optimally cutting a surface into a disk

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-minimum-labeling-spanning-trees.html
##-----------------TITLE------------------------##
The minimum labeling spanning trees
##------------------TEXT------------------------##
The minimum labeling spanning trees

			
				Ruay-Shiung Chang
and Shing-Jiuan Leu
				Information Processing Letters 63(5):277–282, Sep 1997

				Cites:
				Finding the $k$ smallest spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Strategies-for-nonobtuse-boundary-Delaunay-triangulations.html
##-----------------TITLE------------------------##
Strategies for nonobtuse boundary Delaunay triangulations
##------------------TEXT------------------------##
Strategies for nonobtuse boundary Delaunay triangulations

			
				Michael Murphy
and Carl W. Gable
				Proc. 7th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1998, pp. 309–320

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-simple-factor-3-approximation-for-labeling-points-with-circles.html
##-----------------TITLE------------------------##
A simple factor-3 approximation for labeling points with circles
##------------------TEXT------------------------##
A simple factor-3 approximation for labeling points with circles

			
				M. H. Jiang,
J. B. Qian,
Z. P. Qin,
Binhai Zhu,
and Robert J. Cimikowski
				Information Processing Letters 87(2):101–105, Jul 2003

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-unique-representation-of-polyhedral-types.html
##-----------------TITLE------------------------##
A unique representation of polyhedral types
##------------------TEXT------------------------##
A unique representation of polyhedral types

			
				Boris A. Springborn
				arXiv.org e-Print archive, math.MG/0401005

				Cites:
				Optimal Möbius transformations for information visualization and meshingHyperbolic geometry, Möbius transformations and geometric optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Statistical-Cue-Estimation-for-Model-Based-Shape-and-Motion-Tracking.html
##-----------------TITLE------------------------##
Statistical Cue Estimation for Model-Based Shape and Motion Tracking
##------------------TEXT------------------------##
Statistical Cue Estimation for Model-Based Shape and Motion Tracking

			
				Siome Klein Goldenstein
				Ph.D. thesis, Univ. of Pennsylvania, Dept. of Computer and Information Science, 2002
				http://www.ic.unicamp.br/~siome/papers/Dissertation.pdf

				Cites:
				Optimization over zonotopes and training support vector machinesThe centroid of points with approximate weightsZonohedra and zonotopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Representation-and-detection-of-deformable-shapes.html
##-----------------TITLE------------------------##
Representation and detection of deformable shapes
##------------------TEXT------------------------##
Representation and detection of deformable shapes

			
				Pedro F. Felzenszwalb
				IEEE Trans. Pattern Analysis & Machine Intelligence 27(2):208–220, Feb 2005

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fast-randomized-point-location-without-preprocessing-in-two-and-three-dimensional-Delaunay-triangulations.html
##-----------------TITLE------------------------##
Fast randomized point location without preprocessing in two- and three-dimensional Delaunay triangulations
##------------------TEXT------------------------##
Fast randomized point location without preprocessing in two- and three-dimensional Delaunay triangulations

			
				Ernst P. Mücke,
Isaac Saias,
and Binhai Zhu
				Computational Geometry Theory & Applications 12(1–2):63–83, Feb 1999
				Proc. 12th Symp. Computational Geometry, ACM, May 1996, pp. 274–283
				http://www.c3.lanl.gov/~isaac/publications/96-geometry.ps

				Cites:
				The expected extremes in a Delaunay triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-Graphs-of-Small-Treewidth.html
##-----------------TITLE------------------------##
Algorithms for Graphs of Small Treewidth
##------------------TEXT------------------------##
Algorithms for Graphs of Small Treewidth

			
				Babette Lucie Elisabeth van Antwerpen - de Fluiter
				Ph.D. thesis, Univ. Utrecht, Dept. of Computer Science, 1997
				http://pablo.ubu.ruu.nl/~proefsch/01847381/inhoud.htm

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Two-handed-assembly-sequencing.html
##-----------------TITLE------------------------##
Two-handed assembly sequencing
##------------------TEXT------------------------##
Two-handed assembly sequencing

			
				Randall H. Wilson,
Lydia Kavraki,
Jean-Claude Latombe,
and Tomás Lozano-Pérez
				Int. J. Robotics Research 14(4):335–350, 1995
				http://www.cs.rice.edu/CS/Robotics/papers/2hand.ps.gz

				Cites:
				Arrangements of polytopes and the 1-Steiner problem

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parameterization-of-CAD-surfaces-for-meshing-by-triangulation-flattening.html
##-----------------TITLE------------------------##
Parameterization of CAD surfaces for meshing by triangulation flattening
##------------------TEXT------------------------##
Parameterization of CAD surfaces for meshing by triangulation flattening

			
				Alla Sheffer
and Eric de Sturler
				Proc. 7th Int. Conf. Numerical Grid Generation in Computational Field Simulations, Int. Soc. Grid Generation, Sep 2000, pp. 699–708
				Tech. report UIUCDCS-R-2000-2174/UILU-ENG-2000-1731, Univ. of Illinois, Urbana-Champaign, Dept. of Computer Science, Jun 2000
				http://www-faculty.cs.uiuc.edu/~sturler/par-cad.ps

				Cites:
				Quadrilateral meshing by circle packing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Moments-of-inertia-and-graph-separators.html
##-----------------TITLE------------------------##
Moments of inertia and graph separators
##------------------TEXT------------------------##
Moments of inertia and graph separators

			
				Keith D. Gremban,
Gary L. Miller,
and Shang-Hua Teng
				J. Combinatorial Optimization 1(1):79–104, 1997
				Proc. 5th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1994, pp. 452–461

				Cites:
				Approximating center points with iterated Radon pointsA deterministic linear time algorithm for geometric separators and its applications

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Gliders-in-Life-like-cellular-automata.html
##-----------------TITLE------------------------##
Gliders in Life-like cellular automata
##------------------TEXT------------------------##
Gliders in Life-like cellular automata

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/ca/

				Cited by:
				Upper bound on the products of particle interactions in cellular automataCausal Architecture, Complexity and Self-Organization for Time Series and Cellular Automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Removing-outliers-to-minimize-area-and-perimeter.html
##-----------------TITLE------------------------##
Removing outliers to minimize area and perimeter
##------------------TEXT------------------------##
Removing outliers to minimize area and perimeter

			
				Rossen Atanassov,
Pat Morin,
and Stefanie Wuhrer
				Proc. 18th Canad. Conf. Computational Geometry (CCCG 2006), Queen's Univ., Dept. Computing & Information Science, 2006
				http://www.cs.queensu.ca/cccg/papers/cccg35.pdf

				Cites:
				New algorithms for minimum area $k$-gonsFinding minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/AUTOCLUST-Automatic-clustering-via-boundary-extraction-for-mining-massive-point-data-sets.html
##-----------------TITLE------------------------##
AUTOCLUST: Automatic clustering via boundary extraction for mining massive point-data sets
##------------------TEXT------------------------##
AUTOCLUST: Automatic clustering via boundary extraction for mining massive point-data sets

			
				Vladimir Estivill-Castro
and Ickjai Lee
				Tech. report 2000-03, Univ. of Newcastle, Dept. of Computer Science & Software Engineering, 2000
				ftp://ftp.cs.newcastle.edu.au/pub/techreports/tr2000-03.ps.Z

				Cites:
				Algorithms for proximity problems in higher dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Preference-mining-a-novel-approach-on-mining-user-preferences-for-individualized-applications.html
##-----------------TITLE------------------------##
Preference mining: a novel approach on mining user preferences for individualized applications
##------------------TEXT------------------------##
Preference mining: a novel approach on mining user preferences for individualized applications

			
				Stefan Holland,
Martin Ester,
and Werner Kießling
				Tech. report 2003-5, Univ. Augsburg, Inst. für Informatik, May 2003
				http://www.informatik.uni-augsburg.de/forschung/techBerichte/reports/2003-5.pdf

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Equipartitions-of-graphs.html
##-----------------TITLE------------------------##
Equipartitions of graphs
##------------------TEXT------------------------##
Equipartitions of graphs

			
				David Eppstein,
Joan Feigenbaum,
and Chung-Lun Li
				Discrete Mathematics 91(3):239–248, 1991
				Mathematical Reviews 92k:05125
				http://dx.doi.org/10.1016/0012-365X(90)90233-8

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-algorithm-to-compute-bounds-for-the-star-discrepancy.html
##-----------------TITLE------------------------##
An algorithm to compute bounds for the star discrepancy
##------------------TEXT------------------------##
An algorithm to compute bounds for the star discrepancy

			
				Eric Thiémard
				J. Complexity 17(4):850–880, Dec 2001

				Cites:
				Computing the discrepancy

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-planar-two-watchtower-problem.html
##-----------------TITLE------------------------##
On the planar two-watchtower problem
##------------------TEXT------------------------##
On the planar two-watchtower problem

			
				Kanliang Wang
and Binhai Zhu
				Proc. 10th Worksh. Computational Geometry, Oct 2000
				http://www.ams.sunysb.edu/~jsbm/cgworkshop-papers/034.ps.gz

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multilevel-sensitive-reconstruction-of-polyhedral-surfaces-from-parallel-slices.html
##-----------------TITLE------------------------##
Multilevel sensitive reconstruction of polyhedral surfaces from parallel slices
##------------------TEXT------------------------##
Multilevel sensitive reconstruction of polyhedral surfaces from parallel slices

			
				Gill Barequet,
Daniel Shapiro,
and Ayellet Tal
				The Visual Computer 16(2):116–133, 2000
				http://link.springer.de/link/service/journals/00371/bibs/0016002/00160116.htm

				Cites:
				On triangulating three-dimensional polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Location-of-incenters-and-Fermat-points-in-variable-triangles.html
##-----------------TITLE------------------------##
Location of incenters and Fermat points in variable triangles
##------------------TEXT------------------------##
Location of incenters and Fermat points in variable triangles

			
				Anthony Várilly
				arXiv.org e-Print archive, math.MG/0002004

				Cites:
				Tangent spheres and triangle centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Separating-thickness-from-geometric-thickness.html
##-----------------TITLE------------------------##
Separating thickness from geometric thickness
##------------------TEXT------------------------##
Separating thickness from geometric thickness

			
				David Eppstein
				Proc. 10th Int. Symp. Graph Drawing (GD 2002), Lecture Notes in Computer Science 2528, Michael T. Goodrich
and Stephen G. Kobourov, ed., Springer-Verlag, 2002, pp. 150–161
				Towards a Theory of Geometric Graphs, Contemporary Mathematics 342, János Pach, ed., Amer. Math. Soc., 2004, pp. 75–86
				arXiv.org e-Print archive, math.CO/0204252

				Cited by:
				Stacks, queues and tracks: layouts of graph subdivisionsReally straight graph drawingsGraph treewidth and geometric thickness parametersLayouts of graph subdivisionsBounded-degree graphs have arbitrarily large geometric thickness

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-unified-approach-to-approximation-problems-for-NP-and-PSPACE-hard-problems-for-geometric-graphs.html
##-----------------TITLE------------------------##
A unified approach to approximation problems for NP- and PSPACE-hard problems for geometric graphs
##------------------TEXT------------------------##
A unified approach to approximation problems for NP- and PSPACE-hard problems for geometric graphs

			
				Harry B. Hunt III,
Madhav V. Marathe,
Venkatesh Radhakrishnan,
S. S. Ravi,
Daniel J. Rosenkrantz,
and Richard E. Stearns
				J. Algorithms 26(2):238–274, Feb 1998
				Proc. 2nd Eur. Symp. Algorithms (ESA 1994), Lecture Notes in Computer Science 855, Jan van Leeuwen, ed., Springer-Verlag, Sep 1994, pp. 424–435
				Tech. report 94-3, State Univ. of New York at Albany, Dept. of Computer Science, 1994

				Cites:
				A deterministic linear time algorithm for geometric separators and its applicationsSubgraph isomorphism in planar graphs and related problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-triangulation-problems.html
##-----------------TITLE------------------------##
Optimal triangulation problems
##------------------TEXT------------------------##
Optimal triangulation problems

			
				Tiow-Seng Tan
				Proc. 3rd Int. Cong. Industrial & Applied Mathematics, 1995
				Zeitschrift für Angewandte Mathematik und Mechanik 7(supp. 3):195–198, 1996
				http://www.iscs.nus.sg/~tants/Paper/iciam95.ps.gz

				Cites:
				Edge insertion for optimal triangulationMesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Crossing-free-segments-and-triangles-in-point-configurations.html
##-----------------TITLE------------------------##
Crossing-free segments and triangles in point configurations
##------------------TEXT------------------------##
Crossing-free segments and triangles in point configurations

			
				Gyula Károlyi
and Emo Welzl
				Discrete Applied Mathematics 115(1–3):77–88, Nov 2001

				Cites:
				Improved bounds for intersecting triangles and halving planes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-probabilistic-algorithm-for-k-SAT-and-constraint-satisfaction-problems.html
##-----------------TITLE------------------------##
A probabilistic algorithm for $k$-SAT and constraint satisfaction problems
##------------------TEXT------------------------##
A probabilistic algorithm for $k$-SAT and constraint satisfaction problems

			
				Uwe Schöning
				Proc. 40th Symp. Foundations of Computer Science, IEEE, Oct 1999, pp. 410–414

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Scalable-algorithms-for-association-mining.html
##-----------------TITLE------------------------##
Scalable algorithms for association mining
##------------------TEXT------------------------##
Scalable algorithms for association mining

			
				Mohammed Javeed Zaki
				IEEE Trans. Knowledge and Data Engineering 12(3):372–390, 2000
				http://www.cs.rpi.edu/~zaki/PS/TKDE.ps.gz

				Cites:
				Arboricity and bipartite subgraph listing algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Comparison-of-image-transformation-methods-used-in-matching-2d-gel-electrophoresis-images.html
##-----------------TITLE------------------------##
Comparison of image-transformation methods used in matching 2d gel electrophoresis images
##------------------TEXT------------------------##
Comparison of image-transformation methods used in matching 2d gel electrophoresis images

			
				K. Kaczmarek,
B. Walczak,
S. de Jong,
and B. G. M. Vandeginste
				Acta Chromatographica 13:7–21, 2003
				http://www.us.edu.pl/uniwersytet/jednostki/wydzialy/chemia/acta/ac13/zrodla/01_AC13.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Recognizing-geometric-patterns-for-beautification-of-reconstructed-solid-models-.html
##-----------------TITLE------------------------##
Recognizing geometric patterns for beautification of reconstructed solid models
##------------------TEXT------------------------##
Recognizing geometric patterns for beautification of reconstructed solid models 

			
				Frank Curd Langbein,
Bruce I. Mills,
A. Dave Marshall,
and Ralph R. Martin
				Proc. Int. Conf. Shape Modelling and Applications, IEEE, 2001, pp. 10–19
				http://ralph.cs.cf.ac.uk/papers/Geometry/GeometricPatterns.pdf

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Track-layouts-of-graphs.html
##-----------------TITLE------------------------##
Track layouts of graphs
##------------------TEXT------------------------##
Track layouts of graphs

			
				Vida Dujmović,
Attila Pór,
and David R. Wood
				ACM Computing Research Repository, cs.DM/0407033

				Cites:
				Geometric thickness of complete graphsThe geometric thickness of low degree graphsSeparating geometric thickness from book thickness

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/General-object-reconstruction-based-on-simplex-meshes.html
##-----------------TITLE------------------------##
General object reconstruction based on simplex meshes
##------------------TEXT------------------------##
General object reconstruction based on simplex meshes

			
				Hervé Delingette
				Int. J. Computer Vision 32(2):111–146, Sep 1999
				Tech. report, Inst. Nat. de Recherche en Informatique et en Automatique (INRIA), Sophia Antipolis, Feb 1997, vol. 3111
				ftp://ftp.inria.fr/INRIA/tech-reports/RR/RR-3111.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-near-quadratic-algorithm-for-fence-design.html
##-----------------TITLE------------------------##
A near-quadratic algorithm for fence design
##------------------TEXT------------------------##
A near-quadratic algorithm for fence design

			
				Pankaj Kumar Agarwal,
Robert-Paul Mario Berretty,
and Anne Deirdre Collins
				Proc. 5th Int. Worksh. Algorithmic Foundations of Robotics (WAFR 2002), Springer Tracts in Advanced Robotics 7, Jean-Daniel Boissonat,
J. Burdick,
Kenneth Y. Goldberg,
and Seth Hutchinson, ed., Springer-Verlag, 2002
				http://math.stanford.edu/~collins/pubs/fence2wafr.pdf

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Splitting-a-complex-of-convex-polytopes-in-any-dimension.html
##-----------------TITLE------------------------##
Splitting a complex of convex polytopes in any dimension
##------------------TEXT------------------------##
Splitting a complex of convex polytopes in any dimension

			
				Chandrajit L. Bajaj
and Valerio Pascucci
				Proc. 12th Symp. Computational Geometry, ACM, May 1996, pp. 88–97
				http://www.cs.purdue.edu/homes/pascucci/ps-definitivi/SoCG96.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Rectilinear-Steiner-tree-minimization-on-a-workstation.html
##-----------------TITLE------------------------##
Rectilinear Steiner tree minimization on a workstation
##------------------TEXT------------------------##
Rectilinear Steiner tree minimization on a workstation

			
				Clark Thomborson,
Bowen Alpern,
and Larry Carter
				Computational Support for Discrete Mathematics, DIMACS Ser. Discrete Math. and Theoretical Computer Science, Nathaniel Dean
and Greg Shannon, ed., Amer. Math. Soc., 1994
				http://www.cs.ucsd.edu/users/carter/Papers/steiner.ps

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-Worst-case-Analysis-of-a-MST-based-Heuristic-to-Construct-Energy-efficient-Broadcast-Subtrees-in-Wireless-Networks.html
##-----------------TITLE------------------------##
A Worst-case Analysis of a MST-based Heuristic to Construct Energy-efficient Broadcast Subtrees in Wireless Networks
##------------------TEXT------------------------##
A Worst-case Analysis of a MST-based Heuristic to Construct Energy-efficient Broadcast Subtrees in Wireless Networks

			
				Andrea E. F. Clementi,
Pierluigi Crescenzi,
Paolo Penna,
Gianluca Rossi,
and Paola Vocca
				Tech. report 010, Univ. di Roma “Tor Vergata”, Dip. di Matematica, 2001
				http://www.mat.uniroma2.it/~penna/papers/stacs01-TR.ps.gz

				Cites:
				Offline algorithms for dynamic minimum spanning tree problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/How-hard-is-computing-the-edit-distance.html
##-----------------TITLE------------------------##
How hard is computing the edit distance?
##------------------TEXT------------------------##
How hard is computing the edit distance?

			
				Giovanni Pighizzini
				Information & Computation 165(1):1–13, Feb 2001

				Cites:
				Efficient algorithms with applications to molecular biology

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Logarithmic-lower-bounds-in-the-cell-probe-model.html
##-----------------TITLE------------------------##
Logarithmic lower bounds in the cell-probe model
##------------------TEXT------------------------##
Logarithmic lower bounds in the cell-probe model

			
				Pǎtraşcu, Mihai 
and Erik D. Demaine
				ACM Computing Research Repository, cs.DS/0502041

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Manipulating-algebraic-parts-in-the-plane.html
##-----------------TITLE------------------------##
Manipulating algebraic parts in the plane
##------------------TEXT------------------------##
Manipulating algebraic parts in the plane

			
				Anil S. Rao
and Kenneth Y. Goldberg
				IEEE Trans. Robotics and Automation 11(4):598–602, Aug 1995
				http://ford.ieor.berkeley.edu/~goldberg/pubs/algebraic.ps.gz

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-Geometry-Junkyard-Zonohedra.html
##-----------------TITLE------------------------##
The Geometry Junkyard: Zonohedra
##------------------TEXT------------------------##
The Geometry Junkyard: Zonohedra

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/junkyard/zono.html

				Cited by:
				Equiprojective polyhedra

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Cell-probe-complexity-a-survey.html
##-----------------TITLE------------------------##
Cell probe complexity — a survey
##------------------TEXT------------------------##
Cell probe complexity — a survey

			
				Peter Bro Miltersen
				Proc. Worksh. Advances in Data Structures, 1999
				http://www.daimi.au.dk/~bromille/Papers/survey3.ps

				Cites:
				Dynamic connectivity in digital imagesMaintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Open-problems-from-CCCG-2001.html
##-----------------TITLE------------------------##
Open problems from CCCG 2001
##------------------TEXT------------------------##
Open problems from CCCG 2001

			
				Erik D. Demaine
and Joseph O'Rourke
				Proc. 14th Canad. Conf. Computational Geometry (CCCG), Stephen Wismath, ed., Univ. of Lethbridge, Dept. of Mathematics and Computer Science, Aug 2002
				http://www.cs.uleth.ca/~wismath/cccg/papers/open.pdf

				Cites:
				Vertex-unfoldings of simplicial manifolds

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Polyform-patterns.html
##-----------------TITLE------------------------##
Polyform patterns
##------------------TEXT------------------------##
Polyform patterns

			
				Ed Pegg, Jr.
				Tribute to a Mathemagician, Barry Cipra,
Erik D. Demaine,
Martin L. Demaine,
and Tom Rodgers, ed., A K Peters, 2005, pp. 119–125

				Cites:
				The Geometry Junkyard: Polyominoes and Other Animals

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Biased-finger-trees-and-three-dimensional-layers-of-maxima.html
##-----------------TITLE------------------------##
Biased finger trees and three-dimensional layers of maxima
##------------------TEXT------------------------##
Biased finger trees and three-dimensional layers of maxima

			
				Mikhail J. Atallah,
Michael T. Goodrich,
and Kumar Ramaiyer
				Proc. 10th Symp. Computational Geometry, ACM, Jun 1994, pp. 150–159

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Davenport-Schinzel-sequences-and-their-geometric-applications.html
##-----------------TITLE------------------------##
Davenport-Schinzel sequences and their geometric applications{}
##------------------TEXT------------------------##
Davenport-Schinzel sequences and their geometric applications{}

			
				Pankaj Kumar Agarwal
and Micha Sharir
				Handbook of Computational Geometry, Jörg-Rudiger Sack
and Jorge Urrutia, ed., Elsevier, 2000, pp. 1–47

				Cites:
				Visibility with a moving point of viewHorizon theorems for lines and polygonsGeometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Concurrent-iterative-algorithm-for-Toeplitz-like-linear-systems.html
##-----------------TITLE------------------------##
Concurrent iterative algorithm for Toeplitz-like linear systems
##------------------TEXT------------------------##
Concurrent iterative algorithm for Toeplitz-like linear systems

			
				Victor Y. Pan
				IEEE Trans. Parallel & Distributed Systems 4:592–600, 1993

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Skip-webs-efficient-distributed-data-structures-for-multi-dimensional-data-sets.html
##-----------------TITLE------------------------##
Skip-webs: efficient distributed data structures for multi-dimensional data sets
##------------------TEXT------------------------##
Skip-webs: efficient distributed data structures for multi-dimensional data sets

			
				Lars Arge,
David Eppstein,
and Michael T. Goodrich
				Proc. 24th ACM SIGACT-SIGOPS Symp. Principles of Distributed Computing (PODC 2005), Jul 2005, pp. 69–76
				ACM Computing Research Repository, cs.DC/0507050
				http://doi.acm.org/10.1145/1073827

				Cited by:
				The rainbow skip graph: a fault-tolerant constant-degree distributed data structure

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-construction-of-quadtrees-and-quality-triangulations.html
##-----------------TITLE------------------------##
Parallel construction of quadtrees and quality triangulations
##------------------TEXT------------------------##
Parallel construction of quadtrees and quality triangulations

			
				Marshall Wayne Bern,
David Eppstein,
and Shang-Hua Teng
				Int. J. Computational Geometry & Applications 9(6):517–532, Dec 1999
				Tech. report 614, Massachusetts Inst. Tech., Lab. for Computer Science, 1994
				Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993), Lecture Notes in Computer Science 709, Frank K. H. A. Dehne,
Jörg-Rudiger Sack,
Nicola Santoro,
and Sue Whitesides, ed., Springer-Verlag, Aug 1993, pp. 188–199
				Mathematical Reviews 94j:68291

				Cited by:
				Optimal parallel all-nearest-neighbors using the well-separated pair decompositionAlgorithms for dynamic closest pair and $n$-body potential fieldsA Delaunay based numerical method for three dimensions: generation, formulation, and partitionAn optimal algorithm for closest pair maintenanceDealing with higher dimensions: the well-separated pair decomposition and its applicationsAn optimal algorithm for approximate nearest neighbor searching in fixed dimensionsNearly linear time approximation schemes for Euclidean TSP and other geometric problemsProvably good partitioning and load balancing algorithms for parallel adaptive $N$-body simulationPolynomial time approximation schemes for Euclidean TSP and other geometric problemsGeometric searching in walkthrough animations with weak spanners in real timeSIFFEA: scalable integrated framework for finite element methodUnstructured mesh generation: Theory, practice, and perspectivesData generation for geometric algorithms on non-uniform distributionsNew Results on Geometric Spanners and Their ApplicationsEfficient expected-case algorithms for planar point locationParallel neighborhood modellingInteger-coordinate crystalline meshesIntroduction to integer-coordinate crystalline meshesClosest-point problems simplified on the RAMA polynomial time approximation scheme for the problem of interconnecting highwaysParallel Delaunay refinement: algorithms and analysesA time efficient Delaunay refinement algorithmOn the efficiency of nearest neighbor searching with data Clustered in lower dimensionsAn efficient point location method for visualization in Large unstructured gridsDynamic compressed hyperoctrees with application to the $N$-body problemA time-optimal Delaunay refinement algorithm in two dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Monge-strikes-again-optimal-placement-of-web-proxies-in-the-Internet.html
##-----------------TITLE------------------------##
Monge strikes again: optimal placement of web proxies in the Internet
##------------------TEXT------------------------##
Monge strikes again: optimal placement of web proxies in the Internet

			
				Gerhard J. Woeginger
				Operations Research Letters 27(3):93–96, Oct 2000

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Orbit-determination-with-very-short-arcs-admissible-regions.html
##-----------------TITLE------------------------##
Orbit determination with very short arcs: admissible regions
##------------------TEXT------------------------##
Orbit determination with very short arcs: admissible regions

			
				Andrea Milani,
Giovanni F. Gronchi,
Mattia de' Michieli Vitturi,
and Zoran Knežević
				Proc. 35th Mtg. AAS Division on Dynamical Astronomy, 2004
				http://copernico.dm.unipi.it/~milani/preprints/orblink.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Dynamic-planar-convex-hull-operations-in-near-logarithmic-amortized-time.html
##-----------------TITLE------------------------##
Dynamic planar convex hull operations in near-logarithmic amortized time
##------------------TEXT------------------------##
Dynamic planar convex hull operations in near-logarithmic amortized time

			
				Timothy Moon-Yew Chan
				Proc. 40th Symp. Foundations of Computer Science, IEEE, Oct 1999, pp. 92–99
				J. ACM 48(1):1–12, Jan 2001

				Cites:
				Computing the discrepancy

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-algorithmic-techniques-for-combinatorial-computation.html
##-----------------TITLE------------------------##
Parallel algorithmic techniques for combinatorial computation
##------------------TEXT------------------------##
Parallel algorithmic techniques for combinatorial computation

			
				David Eppstein
and Zvi Galil
				Annual Reviews in Computer Science 3:233–283, 1988
				Proc. 16th Int. Coll. Automata, Languages, and Programming (ICALP 1989), Lecture Notes in Computer Science 372, Giorgio Ausiello,
Mariangiola Dezani-Ciancaglini,
and Simona Ronchi Della Rocca, ed., Springer-Verlag, Jul 1989, pp. 304–318, 
				Tech. report CUCS-326-88, Columbia Univ., Computer Science Dept., 1988
				Mathematical Reviews 91g:68042

				Cited by:
				Parallel algorithms for dynamic programming recurrences with more than $O(1)$ dependencyThe APRAM: incorporating asynchrony into the PRAM modelAn Introduction to Parallel AlgorithmsA practical hierarchical model of parallel computation I: the modelOptimal merging and sorting on the EREW PRAMParallel retrieval of scattered informationEvery robust CRCW PRAM can efficiently simulate a priority PRAMOptimal parallel algorithms on planar graphsPlanar depth-first search in $O(\log n)$ parallel timeFast parallel generation of random permutationsConstant-time parallel integer sortingImproved deterministic parallel integer sortingStructural parallel algorithmicsFinding all nearest neighbors for convex polygons in parallel — a new lower bound technique and a matching algorithmOn parallel hashing and integer sortingSome triply-logarithmic parallel algorithmsParallel algorithms for shared-memory machinesGeneral purpose parallel architecturesA bridging model for parallel computationParametrization of Newton iteration for computations with structured matrices and applicationsConcurrent iterative algorithm for Toeplitz-like linear systemsParallel complexity of tridiagonal symmetric eigenvalue problemImproved parallel computations with matrices and polynomialsFast and efficient parallel solution of sparse linear systemsA parallelization of Miller's $O(n^{\log n})$ isomorphism techniqueA parallel randomized approximation scheme for shortest pathsOptimal doubly logarithmic parallel algorithms based on finding all nearest smaller valuesSpace-efficient parallel mergingUniform circuits and exclusive read PRAMsParallel algorithms for VLSI routingEfficient parallel algorithms can be made robustOAL: an implementation of an actor language on a massively parallel message-passing architectureAchieving optimal CRCW PRAM fault-toleranceFast and efficient simulations among CRCW PRAMsPrefix graphs and their applicationsFast parallel algorithms for all-sources lexicographic search and path-algebra problemsBasic parallel algorithmic techniques for shared-memory machinesParallel dynamic programmingParallel string matching algorithmsEfficient String AlgorithmicsControlling memory access concurrency in efficient fault-tolerant parallel algorithmsEfficient parallelism vs reliable distribution: a trade-off for concurrent computationsFault-Tolerant and Efficient Parallel ComputationPointers versus arithmetic in PRAMsLimits on the power of parallel random-access machines with weak forms of write conflict resolutionThe Complexity of Computation on the Parallel Random Access MachineReliable computations on a faulty EREW PRAMA work-time optimal algorithm for computing all string coversParallel algorithms with processor failures and delaysParallel computation of polynomial GCD and some related parallel computations over abstract fieldsComputer AlgorithmsComputer Algorithms/C++A randomized parallel algorithm for single-source shortest pathsFast randomized parallel methods for planar convex hull constructionApproximate string searchingTriply-logarithmic parallel upper and lower bounds for minimum and range minima over small domainsFast rectangular matrix multiplication and applicationsParallel AlgorithmsParallel Computation: Models & MethodsOn the power of some PRAM modelsThere Are Parallel and Dynamic Shortest-Path Algorithms for Sparse GraphsParallel computing: performance metrics and modelsGeneral purpose parallel computingA case for the PRAM as a standard programmer's modelParallel complexity of computations with general and Toeplitz-like matrices Filled with integers and extensionsPolynomially improved efficiency for fast parallel single-source lexicographic depth-first search, breadth-first search, and topological-first searchEfficient parallel algorithms on restartable fail-stop processorsTowards practical deteministic write-all algorithmsIn-place techniques for parallel convex hull algorithmsEfficient parallel algorithms for manipulating sorted setsFailure-sensitive analysis of parallel algorithms with controlled memory access concurrencyAdditional patterns for parallel application programsParallel Algorithms For Graph Problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-the-smallest-T-shaped-polygon-containing-k-points.html
##-----------------TITLE------------------------##
Computing the smallest T-shaped polygon containing $k$ points
##------------------TEXT------------------------##
Computing the smallest T-shaped polygon containing $k$ points

			
				Michiel Smid
and V. Srilakshmi
				Int. J. Computer Mathematics 79(2):143–156, Feb 2002

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-optimal-randomized-algorithm-for-maximum-Tukey-depth.html
##-----------------TITLE------------------------##
An optimal randomized algorithm for maximum Tukey depth
##------------------TEXT------------------------##
An optimal randomized algorithm for maximum Tukey depth

			
				Timothy Moon-Yew Chan
				Proc. 15th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2004, pp. 423–429

				Cites:
				Setting parameters by exampleApproximating center points with iterated Radon pointsMultivariate regression depthOptimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Sur-les-automates-circulaires-et-la-conjecture-de-vCerny.html
##-----------------TITLE------------------------##
Sur les automates circulaires et la conjecture de {\v{C}}erný
##------------------TEXT------------------------##
Sur les automates circulaires et la conjecture de {\v{C}}erný

			
				Louis Dubuc
				RAIRO – Informatique Théoretique et Applications 32(1–3):21–34, 1998

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Exact-algorithms-for-computing-the-locatino-depth-and-the-k-th-depth-regions-based-on-parallel-arrangement-constructions.html
##-----------------TITLE------------------------##
Exact algorithms for computing the locatino depth and the $k$-th depth regions based on parallel arrangement constructions
##------------------TEXT------------------------##
Exact algorithms for computing the locatino depth and the $k$-th depth regions based on parallel arrangement constructions

			
				Komei Fukuda
and Vera Rosta
				Abs. DIMACS Worksh. Comp. Geom., 2002
				http://dimacs.rutgers.edu/Workshops/CompGeom/abstracts/028.pdf

				Cites:
				Approximating center points with iterated Radon points

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Visual-grid-quality-assessment-for-3D-unstructured-meshes.html
##-----------------TITLE------------------------##
Visual grid quality assessment for 3D unstructured meshes
##------------------TEXT------------------------##
Visual grid quality assessment for 3D unstructured meshes

			
				Robert Haimes
				AIAA Paper, Jul 1993
				http://raphael.mit.edu/visual3/cfd93.ps

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-with-integer-points-in-Minkowski-sums.html
##-----------------TITLE------------------------##
Computing with integer points in Minkowski sums
##------------------TEXT------------------------##
Computing with integer points in Minkowski sums

			
				Ioannis Z. Emiris
				Proc. 16th Symp. Computational Geometry, ACM, Jun 2000, pp. 29–36

				Cites:
				Zonohedra and zonotopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Incremental-and-decremental-maintenance-of-planar-width.html
##-----------------TITLE------------------------##
Incremental and decremental maintenance of planar width
##------------------TEXT------------------------##
Incremental and decremental maintenance of planar width

			
				David Eppstein
				J. Algorithms 37(2):570–577, Nov 2000
				Proc. 10th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1999, pp. S899–S900
				ACM Computing Research Repository, cs.CG/9809038
				Mathematical Reviews 2001g:68095
				http://dx.doi.org/10.1006/jagm.2000.1107

				Cited by:
				A fully dynamic algorithm for planar widthSemi-online maintenance of geometric optima and measuresA dynamic data structure for 3-d convex hulls and 2-d nearest neighbor queries

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Determining-the-number-of-solutions-to-binary-CSP-instances.html
##-----------------TITLE------------------------##
Determining the number of solutions to binary CSP instances
##------------------TEXT------------------------##
Determining the number of solutions to binary CSP instances

			
				Ola Angelsmark,
Peter Jonsson,
Svante Linusson,
and Johan Thapper
				Proc. 8th Int. Conf. Principles & Practice of Constraint Programming (CP 2002), Lecture Notes in Computer Science 2470, Pascal Van Hentenryck, ed., Springer-Verlag, Sep 2002, pp. 327–340
				http://www.ida.liu.se/~olaan/papers/counting_solutions.ps

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/New-algorithms-for-minimum-measure-simplices-and-one-dimensional-weighted-Voronoi-diagrams.html
##-----------------TITLE------------------------##
New algorithms for minimum measure simplices and one-dimensional weighted Voronoi diagrams
##------------------TEXT------------------------##
New algorithms for minimum measure simplices and one-dimensional weighted Voronoi diagrams

			
				David Eppstein
and Jeffrey Gordon Erickson
				Tech. report 92-55, Univ. of California, Irvine, Dept. of Information and Computer Science, 1992

				Cited by:
				Computing the smallest $k$-enclosing circle and related problemsA near-linear algorithm for the planar segment-center problem

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Real-time-hidden-line-elimination-for-a-rotating-polyhedral-scene-using-the-aspect-representation.html
##-----------------TITLE------------------------##
Real-time hidden-line elimination for a rotating polyhedral scene using the aspect representation
##------------------TEXT------------------------##
Real-time hidden-line elimination for a rotating polyhedral scene using the aspect representation

			
				Harry Plantinga,
Charles R. Dyer,
and W. Brent Seales
				Proc. Graphics Interface '90, Canad. Inf. Proc. Soc., May 1990, pp. 9–16
				http://www.ccel.wheaton.edu/~whp/papers/an-rot.ps.gz

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Complexity-and-Approximation-Combinatorial-Optimization-Problems-and-Their-Approximability.html
##-----------------TITLE------------------------##
Complexity and Approximation: Combinatorial Optimization Problems and Their Approximability
##------------------TEXT------------------------##
Complexity and Approximation: Combinatorial Optimization Problems and Their Approximability

			
				Giorgio Ausiello,
Pierluigi Crescenzi,
Giorgio Gambosi,
Viggo Kann,
Alberto Marchetti Spaccamela,
and Marco Protasi
				Springer-Verlag, 1999

				Cites:
				Approximating the minimum weight Steiner triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-O(log-k)-approximation-algorithm-for-the-k-minimum-spanning-tree-problem-in-the-plane.html
##-----------------TITLE------------------------##
An $O(\log k)$-approximation algorithm for the $k$ minimum spanning tree problem in the plane
##------------------TEXT------------------------##
An $O(\log k)$-approximation algorithm for the $k$ minimum spanning tree problem in the plane

			
				Naveen Garg
and Dorit Hochbaum
				Algorithmica 18(1):111–121, 1997
				http://link.springer.de/link/service/journals/00453/htabst/18_111-121.html

				Cites:
				Faster geometric $k$-point MST approximation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-2-center-problem-with-obstacles.html
##-----------------TITLE------------------------##
The 2-center problem with obstacles
##------------------TEXT------------------------##
The 2-center problem with obstacles

			
				Dan Halperin,
Micha Sharir,
and Kenneth Y. Goldberg
				J. Algorithms 42(1):109–134, Jan 2002
				Proc. 16th Symp. Computational Geometry, ACM, Jun 2000, pp. 80–90

				Cites:
				Dynamic three-dimensional linear programmingFaster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multigrid-Equation-Solvers-for-Large-Scale-Nonlinear-Finite-Element-Simulations.html
##-----------------TITLE------------------------##
Multigrid Equation Solvers for Large Scale Nonlinear Finite Element Simulations
##------------------TEXT------------------------##
Multigrid Equation Solvers for Large Scale Nonlinear Finite Element Simulations

			
				Mark Francis Adams
				Ph.D. thesis, Univ. of California, Berkeley, Dept. of Civil Engineering, 1998
				Tech. report CSD-99-1033, Univ. of California, Berkeley, Dept. of Electrical Engineering & Computer Science, Jan 1999
				http://www.cs.berkeley.edu/~madams/adams_dissertation.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Linear-optimization-queries.html
##-----------------TITLE------------------------##
Linear optimization queries
##------------------TEXT------------------------##
Linear optimization queries

			
				Jiří Matoušek
and Otfried Schwarzkopf Cheong
				J. Algorithms 14:432–438, 1993
				Proc. 8th Symp. Computational Geometry, ACM, Jun 1992, pp. 16–25

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-new-class-of-iterative-Steiner-tree-heuristics-with-good-performance.html
##-----------------TITLE------------------------##
A new class of iterative Steiner tree heuristics with good performance
##------------------TEXT------------------------##
A new class of iterative Steiner tree heuristics with good performance

			
				Andrew B. Kahng
and Gabriel Robins
				IEEE Trans. Computer-Aided Design of Integrated Circuits and Systems 11:893–902, 1992

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Ununfoldable-polyhedra-with-convex-faces.html
##-----------------TITLE------------------------##
Ununfoldable polyhedra with convex faces
##------------------TEXT------------------------##
Ununfoldable polyhedra with convex faces

			
				Marshall Wayne Bern,
Erik D. Demaine,
David Eppstein,
Eric Heng-Shiang Kuo,
Andrea Mantler,
and Jack Snoeyink
				Computational Geometry Theory & Applications 24(2):51–62, Feb 2003
				Mathematical Reviews 2003m:52017
				http://dx.doi.org/10.1016/S0925-7721(02)00091-3

				Cited by:
				Computational geometry column 42No-net polyhedraTighter bounds on the genus of nonorthogonal polyhedra built from rectanglesAn algorithmic study of manufacturing paperclips and other folded structuresComputational origami: reexamining an old problemA survey of folding and unfolding in computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Dynamic-trees-as-search-trees-via-Euler-tours-applied-to-the-network-simplex-algorithm.html
##-----------------TITLE------------------------##
Dynamic trees as search trees via Euler tours, applied to the network simplex algorithm
##------------------TEXT------------------------##
Dynamic trees as search trees via Euler tours, applied to the network simplex algorithm

			
				Robert E. Tarjan
				Mathematical Programming 78(2):169–177, Aug 1997

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Dynamic-compressed-hyperoctrees-with-application-to-the-N-body-problem.html
##-----------------TITLE------------------------##
Dynamic compressed hyperoctrees with application to the $N$-body problem
##------------------TEXT------------------------##
Dynamic compressed hyperoctrees with application to the $N$-body problem

			
				Srinivas Aluru
and Fatih E. Sevilgen
				Proc. 19th Int. Conf. Foundations of Software Technology and Theoretical Computer Science (FSTTCS 1999), Lecture Notes in Computer Science 1738, Springer-Verlag, 1999, pp. 21–33
				http://vulcan.ee.iastate.edu/~aluru/publications/p/FSTTCS-1999-DynCompressedHyperoctrees.pdf

				Cites:
				Parallel construction of quadtrees and quality triangulations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/DNA-models-and-algorithms-for-NP-complete-problems.html
##-----------------TITLE------------------------##
DNA models and algorithms for NP-complete problems
##------------------TEXT------------------------##
DNA models and algorithms for NP-complete problems

			
				Eric Bach,
Anne Condon,
Elton Glaser,
and Celena Tanguay
				Proc. 11th Conf. Computational Complexity, IEEE, May 1996, pp. 290–300
				J. Computer & Systems Sciences 57(2):172–186, Oct 1998

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Nothings-new-in-number-theory.html
##-----------------TITLE------------------------##
Nothing's new in number theory?
##------------------TEXT------------------------##
Nothing's new in number theory?

			
				Richard K. Guy
				American Mathematical Monthly 105(10):951–954, Dec 1998

				Cites:
				Ten algorithms for Egyptian fractions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-efficient-algorithm-for-shortest-paths-in-vertical-and-horizontal-segments.html
##-----------------TITLE------------------------##
An efficient algorithm for shortest paths in vertical and horizontal segments
##------------------TEXT------------------------##
An efficient algorithm for shortest paths in vertical and horizontal segments

			
				David Eppstein
and David Hart
				Proc. 5th Worksh. Algorithms and Data Structures (WADS 1997), Lecture Notes in Computer Science 1272, Frank K. H. A. Dehne,
Andrew Rau-Chaplin,
Jörg-Rudiger Sack,
and Roberto Tamassia, ed., Springer-Verlag, Aug 1997, pp. 234–247

				Cited by:
				Finding an optimal path without growing the treeApproximating the shortest path in line arrangementsComputing shortest paths with comparisons and additionsTopological peeling and applicationsTopological peeling and implementationShortest paths in two intersecting pencils of linesOn shortest paths in line arrangementsAlgorithms for Geometric Shortest Paths Along Routes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-levels-of-detail-in-terrains.html
##-----------------TITLE------------------------##
On levels of detail in terrains
##------------------TEXT------------------------##
On levels of detail in terrains

			
				Mark T. de Berg
and Katrin T. G. Dobrindt
				Tech. report UU-CS-1995-12, Univ. Utrecht, Dept. of Computer Science, 1995
				Graphical Models & Image Processing 60(1):1–12, Jan 1998

				Cites:
				Edge insertion for optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-combining-Laplacian-and-optimization-based-mesh-smoothing-techniques.html
##-----------------TITLE------------------------##
On combining Laplacian and optimization-based mesh smoothing techniques
##------------------TEXT------------------------##
On combining Laplacian and optimization-based mesh smoothing techniques

			
				Lori A. Freitag
				Proc. Symp. Trends in Unstructured Mesh Generation, Amer. Soc. Mechanical Engineers, Jun 1997, pp. 37–43
				ftp://info.mcs.anl.gov/pub/tech_reports/plassman/lori_combined.ps.Z

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Techniques-for-Efficient-Parallel-Simulation-and-their-Application-to-Large-scale-Telecommunication-Network-Models.html
##-----------------TITLE------------------------##
Techniques for Efficient Parallel Simulation and their Application to Large-scale Telecommunication Network Models
##------------------TEXT------------------------##
Techniques for Efficient Parallel Simulation and their Application to Large-scale Telecommunication Network Models

			
				Kalyan S. Perumalla
				Ph.D. thesis, Georgia Inst. of Technology, College of Computing, Dec 1999
				http://www.cc.gatech.edu/computing/pads/PAPERS/kalyan-phd-thesis.ps.Z

				Cites:
				A heuristic approach to program inversion

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Shortest-path-in-complete-bipartite-digraph-problem-and-its-applications.html
##-----------------TITLE------------------------##
Shortest path in complete bipartite digraph problem and its applications
##------------------TEXT------------------------##
Shortest path in complete bipartite digraph problem and its applications

			
				Xin He
and Zhi-Zhong Chen
				Proc. 8th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1997, pp. 230–238

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Playing-games-with-algorithms-algorithmic-combinatorial-game-theory.html
##-----------------TITLE------------------------##
Playing games with algorithms: algorithmic combinatorial game theory
##------------------TEXT------------------------##
Playing games with algorithms: algorithmic combinatorial game theory

			
				Erik D. Demaine
				ACM Computing Research Repository, cs.CC/0106019

				Cites:
				Phutball endgames are hardComputational complexity of games and puzzlesOn the NP-completeness of cryptarithmsOne-dimensional peg solitaire, and duotaire

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometric-thickness-of-complete-graphs.html
##-----------------TITLE------------------------##
Geometric thickness of complete graphs
##------------------TEXT------------------------##
Geometric thickness of complete graphs

			
				Michael B. Dillencourt,
David Eppstein,
and Daniel S. Hirschberg
				Proc. 6th Int. Symp. Graph Drawing (GD 1998), Lecture Notes in Computer Science 1547, Sue Whitesides, ed., Springer-Verlag, Aug 1998, pp. 102–110
				J. Graph Algorithms & Applications 4(3):5–17, 2000
				arXiv.org e-Print archive, math.CO/9910185
				Mathematical Reviews 2000g:68118
				Mathematical Reviews 2004f:05044

				Cited by:
				Planarizing graphs — a survey and annotated bibliographyGeometric thickness in a grid of linear areaOn simultaneous planar graph embeddingsStacks, queues and tracks: layouts of graph subdivisionsReally straight graph drawingsTrack layouts of graphsGraph treewidth and geometric thickness parametersAn interactive multi-user system for simultaneous graph drawingSimultaneous embedding of planar graphs with few bendsPartitions of complete geometric graphs into plane treesBounded-degree graphs have arbitrarily large geometric thickness

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-algorithm-for-the-maxmin-area-triangulation-of-a-convex-polygon.html
##-----------------TITLE------------------------##
An algorithm for the maxmin area triangulation of a convex polygon
##------------------TEXT------------------------##
An algorithm for the maxmin area triangulation of a convex polygon

			
				J. Mark Keil
and Tzvetalin S. Vassilev
				Proc. 15th Canad. Conf. Computational Geometry (CCCG 2003), Dalhousie Univ., Faculty of Computer Science, Aug 2003, pp. 145–149
				http://torch.cs.dal.ca/~cccg/papers/19.pdf

				Cites:
				Edge insertion for optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Data-structures-for-topological-and-geometric-operations-on-networks.html
##-----------------TITLE------------------------##
Data structures for topological and geometric operations on networks
##------------------TEXT------------------------##
Data structures for topological and geometric operations on networks

			
				Nicos Christofides,
H. O. Badra,
and Yazid M. Sharaiha
				Annals of Operations Research 71:259–289, 1997

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-deterministic-linear-time-algorithm-for-geometric-separators-and-its-applications.html
##-----------------TITLE------------------------##
A deterministic linear time algorithm for geometric separators and its applications
##------------------TEXT------------------------##
A deterministic linear time algorithm for geometric separators and its applications

			
				David Eppstein,
Gary L. Miller,
and Shang-Hua Teng
				Fundamenta Informaticae 22(4):309–331, Apr 1995
				Proc. 9th Symp. Computational Geometry, ACM, May 1993, pp. 99–108
				Mathematical Reviews 96m:68162
				http://www.acm.org/pubs/citations/proceedings/compgeom/160985/p99-eppstein/
				http://www.ics.uci.edu/~eppstein/pubs/EppMilTen-FI-95.ps.gz

				Cited by:
				Moments of inertia and graph separatorsA unified approach to approximation problems for NP- and PSPACE-hard problems for geometric graphsAn approximation scheme for planar graph TSPAutomatic mesh partitioningDisk packings and planar separatorsDerandomization in computational geometryApproximation algorithms for maximum two-dimensional pattern matchingPrepartitioning as a way to mesh subdomains in parallelSeparators for sphere-packings and nearest neighbor graphsAutomatic partitioning techniques for solving partial differential equations on irregular adaptive meshesGeometric separators for finite-element meshesA divide-and-conquer algorithm for min-cost perfect matching in the planeCombinatorial aspects of geometric graphsData generation for geometric algorithms on non-uniform distributionsWell-separated pair decomposition for the unit-disk graph metric and its applicationsGeometric separation and exact solutions for the parameterized independent set problem on disk graphsNew Results on Combinatorial AlgorithmsMulti-way Graph and Hypergraph Partitioning

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Halving-point-sets.html
##-----------------TITLE------------------------##
Halving point sets
##------------------TEXT------------------------##
Halving point sets

			
				Artur Andrzejak
and Emo Welzl
				Proc. Int. Congress of Mathematicians, Berlin, Documenta Mathematica, 1998, vol. III, pp. 471–478
				http://www.inf.ethz.ch/personal/andrzeja/my-papers/Halving-DOCUMENTAMATH.ps.gz

				Cites:
				Geometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Maintaining-biconnected-components-of-dynamic-planar-graphs.html
##-----------------TITLE------------------------##
Maintaining biconnected components of dynamic planar graphs
##------------------TEXT------------------------##
Maintaining biconnected components of dynamic planar graphs

			
				Zvi Galil
and Giuseppe F. Italiano
				Proc. 18th Int. Coll. Automata, Languages, and Programming (ICALP 1991), Lecture Notes in Computer Science 510, Javier Leach Albert,
Burkhard Monien,
and Mario Rodríguez-Artalejo, ed., Springer-Verlag, Jul 1991, pp. 339–350
				Tech. report CUCS-018-91, Columbia Univ., Computer Science Dept., 1991
				ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-018-91.ps.Z

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Maintaining-visibility-of-a-polygon-with-a-moving-point-of-view.html
##-----------------TITLE------------------------##
Maintaining visibility of a polygon with a moving point of view
##------------------TEXT------------------------##
Maintaining visibility of a polygon with a moving point of view

			
				Danny Z. Chen
and Ovidiu Daescu
				Proc. 8th Canad. Conf. Computational Geometry, International Informatics 5, Carleton Univ. Press, Aug 1996, pp. 240–245
				Information Processing Letters 65(5):269–275, Mar 1998

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Application-of-the-local-nonobtuse-tetrahedral-refinement-techniques-near-Fichera-like-corners.html
##-----------------TITLE------------------------##
Application of the local nonobtuse tetrahedral refinement techniques near Fichera-like corners
##------------------TEXT------------------------##
Application of the local nonobtuse tetrahedral refinement techniques near Fichera-like corners

			
				Larisa Beilina,
Sergey Korotov,
and Michal Křížek
				Tech. report 2003-02, Chalmers Univ. of Technology, Chalmers Finite Element Center, 2003
				http://www.phi.chalmers.se/pub/preprints/ps/phiprint-2003-02.ps

				Cites:
				Dihedral bounds for mesh generation in high dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Konzeption-und-Implementierung-von-geometrischen-3D-Datentype.html
##-----------------TITLE------------------------##
Konzeption und Implementierung von geometrischen 3D-Datentype
##------------------TEXT------------------------##
Konzeption und Implementierung von geometrischen 3D-Datentype

			
				Jörg Siebeck
				Diplomarbeit, Rheinische Friedrich-Wilhelms-Univ. Bonn, Inst. für Informatik, Jun 1999
				http://www.geo.informatik.uni-bonn.de/publications/1999/dipl-siebeck/siebeck_diplom.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-the-shortest-bottleneck-edge-in-a-parametric-minimum-spanning-tree.html
##-----------------TITLE------------------------##
Finding the shortest bottleneck edge in a parametric minimum spanning tree
##------------------TEXT------------------------##
Finding the shortest bottleneck edge in a parametric minimum spanning tree

			
				Timothy Moon-Yew Chan
				Proc. 16th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2005, pp. 917–918

				Cites:
				Parametric and kinetic minimum spanning treesOffline algorithms for dynamic minimum spanning tree problemsUsing sparsification for parametric minimum spanning tree problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parametrization-of-Newton-iteration-for-computations-with-structured-matrices-and-applications.html
##-----------------TITLE------------------------##
Parametrization of Newton iteration for computations with structured matrices and applications
##------------------TEXT------------------------##
Parametrization of Newton iteration for computations with structured matrices and applications

			
				Victor Y. Pan
				Computers & Mathematics with Applications 24:61–75, 1992

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Polyhedron-man.html
##-----------------TITLE------------------------##
Polyhedron man
##------------------TEXT------------------------##
Polyhedron man

			
				Ivars Peterson
				Science News 160(25), Dec 2001
				http://www.sciencenews.org/20011222/bob13.asp

				Cites:
				Vertex-unfoldings of simplicial manifolds

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Software-process-validation-quantitatively-measuring-the-correspondence-of-a-process-to-a-model-using-event-based-data.html
##-----------------TITLE------------------------##
Software process validation: quantitatively measuring the correspondence of a process to a model using event-based data
##------------------TEXT------------------------##
Software process validation: quantitatively measuring the correspondence of a process to a model using event-based data

			
				Jonathan E. Cook
and Alexander L. Wolf
				Tech. report CU-CS-820-96, Univ. of Colorado, Boulder, Dept. of Computer Science, 1996
				ACM Trans. Softw. Eng. Meth. 8(2):147–176, Apr 1999
				http://www.cs.nmsu.edu/~jcook/papers/vjournal.ps.gz

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Linear-time-reconstruction-of-Delaunay-triangulations-with-applications.html
##-----------------TITLE------------------------##
Linear-time reconstruction of Delaunay triangulations with applications
##------------------TEXT------------------------##
Linear-time reconstruction of Delaunay triangulations with applications

			
				Jack Snoeyink
and Marc J. van Kreveld
				Proc. 5th Eur. Symp. Algorithms (ESA 1997), Lecture Notes in Computer Science 1284, Rainer Ernst Burkard
and Gerhard J. Woeginger, ed., Springer-Verlag, Sep 1997, pp. 459–471
				http://citeseer.nj.nec.com/195365.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-shortest-paths-with-comparisons-and-additions.html
##-----------------TITLE------------------------##
Computing shortest paths with comparisons and additions
##------------------TEXT------------------------##
Computing shortest paths with comparisons and additions

			
				Seth Pettie
and Vijaya Ramachandran
				Proc. 13th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2002, pp. 267–276

				Cites:
				An efficient algorithm for shortest paths in vertical and horizontal segmentsShortest paths in an arrangement with $k$ line orientations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Delta-confluent-drawings.html
##-----------------TITLE------------------------##
Delta-confluent drawings
##------------------TEXT------------------------##
Delta-confluent drawings

			
				David Eppstein,
Michael T. Goodrich,
and Jeremy Yu Meng
				Proc. 13th Int. Symp. Graph Drawing (GD 2005), Lecture Notes in Computer Science 3843, Patrick Healy
and Nikola S. Nikolov, ed., Springer-Verlag, 2006, pp. 165–176

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-geometric-thickness-of-low-degree-graphs.html
##-----------------TITLE------------------------##
The geometric thickness of low degree graphs
##------------------TEXT------------------------##
The geometric thickness of low degree graphs

			
				Christian Alexander Duncan,
David Eppstein,
and Stephen G. Kobourov
				Proc. 20th Symp. Computational Geometry, ACM, 2004, pp. 340–346
				ACM Computing Research Repository, cs.CG/0312056

				Cited by:
				Really straight graph drawingsTrack layouts of graphsGraph treewidth and geometric thickness parametersSimultaneous embedding of planar graphs with few bendsBounded-degree graphs have arbitrarily large geometric thicknessTwo trees which are self-intersecting when drawn simultaneously

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Surface-and-3D-triangular-meshes-from-planar-cross-sections.html
##-----------------TITLE------------------------##
Surface and 3D triangular meshes from planar cross-sections
##------------------TEXT------------------------##
Surface and 3D triangular meshes from planar cross-sections

			
				Chandrajit L. Bajaj,
Edward J. Coyle,
and Kwun-Nan Lin
				Proc. 5th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1996, pp. 169–178

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-maximum-two-dimensional-pattern-matching.html
##-----------------TITLE------------------------##
Approximation algorithms for maximum two-dimensional pattern matching
##------------------TEXT------------------------##
Approximation algorithms for maximum two-dimensional pattern matching

			
				Srinivasa Rao Arikati,
Anders Dessmark,
Andrzej Lingas,
and Madhav V. Marathe
				Proc. 7th Symp. Combinatorial Pattern Matching (CPM 1996), Lecture Notes in Computer Science 1075, Daniel S. Hirschberg
and Eugene W. Myers, ed., Springer-Verlag, Jun 1996, pp. 348–360
				Theoretical Computer Science 255(1–2):51–62, Mar 2001
				Tech. report LA-UR-01-2527, Los Alamos Nat. Lab., 2001
				http://www.ccs.lanl.gov/ccs5/documents/ps/2001/LA-UR-01-2527.ps

				Cites:
				A deterministic linear time algorithm for geometric separators and its applications

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-fast-heuristic-for-approximating-the-minimum-weight-triangulation.html
##-----------------TITLE------------------------##
A fast heuristic for approximating the minimum weight triangulation
##------------------TEXT------------------------##
A fast heuristic for approximating the minimum weight triangulation

			
				Christos Levcopoulos
and Drago Krznaric
				Proc. 5th Scandinavian Worksh. Algorithm Theory (SWAT 1996), Lecture Notes in Computer Science 1097, Rolf G. Karlsson
and Andrzej Lingas, ed., Springer-Verlag, Jul 1996, pp. 298–308

				Cites:
				Approximating the minimum weight Steiner triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computer-Graphics-and-Geometric-Ornamental-Design.html
##-----------------TITLE------------------------##
Computer Graphics and Geometric Ornamental Design
##------------------TEXT------------------------##
Computer Graphics and Geometric Ornamental Design

			
				Craig S. Kaplan
				Ph.D. thesis, Univ. of Washington, Dept. of Computer Science & Engineering, 2002
				http://www.cgl.uwaterloo.ca/~csk/phd/kaplan_diss_outer_matter_print.pdf

				Cites:
				The Geometry Junkyard: Penrose tiling

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/General-purpose-parallel-architectures.html
##-----------------TITLE------------------------##
General purpose parallel architectures
##------------------TEXT------------------------##
General purpose parallel architectures

			
				Leslie G. Valiant
				Handbook of Theoretical Computer Science, 1990, pp. 943–972

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Pseudo-triangulations-from-surfaces-and-a-novel-type-of-edge-flip.html
##-----------------TITLE------------------------##
Pseudo-triangulations from surfaces and a novel type of edge flip
##------------------TEXT------------------------##
Pseudo-triangulations from surfaces and a novel type of edge flip

			
				Oswin Aichholzer,
Franz Aurenhammer,
Hannes Krasser,
and Peter Braß
				SIAM J. Computing 32(6), 2003
				http://dx.doi.org/10.1137/S0097539702411368

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Mathematica-in-Action.html
##-----------------TITLE------------------------##
Mathematica in Action
##------------------TEXT------------------------##
Mathematica in Action

			
				Stan Wagon
				Springer-Verlag, 1999

				Cites:
				Ten algorithms for Egyptian fractions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Visibility-with-a-moving-point-of-view.html
##-----------------TITLE------------------------##
Visibility with a moving point of view
##------------------TEXT------------------------##
Visibility with a moving point of view

			
				Marshall Wayne Bern,
David P. Dobkin,
David Eppstein,
and Robert L. Grossman
				Algorithmica 11(4):360–378, Apr 1994
				Proc. 1st Symp. Discrete Algorithms, ACM
and SIAM, Jan 1990, pp. 107–118
				Tech. report TR-235-89, Princeton Univ., Dept. of Computer Science, 1989
				Mathematical Reviews 94j:68307

				Cited by:
				Stabbing and ray shooting in 3 dimensional spaceCombinatorial and algorithmic analysis of stabbing and visibility problems in 3-dimensional spaceRay-shooting on triangles in 3-dimensional spaceComputational geometryA whirlwind tour of computational geometryHidden surface removal with respect to a moving view pointA model for data in motionMaintaining the visibility map of spheres while moving the viewpoint on a circle at infinityAn algorithm for finding the weakly visible faces from a polygon in 3dTrekking in the Alps without freezing or getting tiredComputational geometry and computer graphicsA survey of object-space hidden surface removalDavenport-Schinzel Sequences and their Geometric ApplicationsMaintenance of the set of segments visible from a moving viewpoint in two dimensionsTemporally coherent conservative visibilityRepetitive hidden surface removal for polyhedraViewing a set of spheres while moving on a linear flightpathMaintaining visibility of a polygon with a moving point of viewIncremental update of the visibility map as seen by a moving viewpoint in two dimensionsConservative visibility preprocessing for efficient walkthroughs of 3D scenesAccelerated occlusion culling using shadow frustaVisibilityToward accurate recovery of shape from shading under diffuse lightingTrends and developments in computational geometryThree dimensional weak visibility: complexity and applicationsGlobal Visibility ComputationsConvex translation estimationComputation and maintenance of visibility and shadows in the planeReal-time hidden-line elimination for a rotating polyhedral scene using the aspect representationHierarchical visibility in terrainsOn incremental rendering of silhouette maps of a polyhedral sceneDavenport-Schinzel sequences and their geometric applications{}Hierarchical back-face computationOn the planar two-watchtower problemLocal approach to dynamic visibility in the planeFast horizon computation at all points of a terrain with visibility and shading applicationsFast horizon computation for accurate terrain renderingInteractive sensor planningIntervisibility on terrainsEfficient Hidden-Surface Removal in Theory and in Practice On the planar two-watchtower problem{}Region inter-visibility in terrainsDynamic visibility in the planeA Geometric Framework for Computer Graphics Addressing Modeling, Visibility, and ShadowsOn the complexity of visibility problems with moving viewpoints

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Using-PRAM-algorithms-on-a-uniform-memory-access-shared-memory-architecture.html
##-----------------TITLE------------------------##
Using PRAM algorithms on a uniform-memory-access shared-memory architecture
##------------------TEXT------------------------##
Using PRAM algorithms on a uniform-memory-access shared-memory architecture

			
				David A. Bader,
Ajith K. Illendula,
Bernard M. E. Moret,
and Nina R. Weisse-Bernstein
				Proc. 5th Worksh. Algorithm Engineering (WAE 2001), Lecture Notes in Computer Science 2141, Gerth Stølting Brodal,
Daniele Frigioni,
and Alberto Marchetti Spaccamela, ed., Springer-Verlag, 2001, pp. 129–144
				http://www.cs.unm.edu/~moret/bimw_wae.pdf

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fully-dynamic-2-edge-connectivity-in-planar-graphs.html
##-----------------TITLE------------------------##
Fully dynamic 2-edge-connectivity in planar graphs
##------------------TEXT------------------------##
Fully dynamic 2-edge-connectivity in planar graphs

			
				John E. Hershberger,
Monika H. Rauch,
and Subhash Suri
				Proc. 3rd Scandinavian Worksh. Algorithm Theory (SWAT 1992), Lecture Notes in Computer Science 621, Otto Nurmi
and Esko Ukkonen, ed., Springer-Verlag, 1992, pp. 233–244

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Euclidean-bounded-degree-spanning-tree-ratios.html
##-----------------TITLE------------------------##
Euclidean bounded-degree spanning tree ratios
##------------------TEXT------------------------##
Euclidean bounded-degree spanning tree ratios

			
				Timothy Moon-Yew Chan
				Proc. 19th Symp. Computational Geometry, ACM, Jun 2003, pp. 11–19

				Cites:
				Approximation algorithms for geometric problemsSpanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-and-data-structures-for-handling-a-fully-flexible-refinement-approach-in-mesh-generation.html
##-----------------TITLE------------------------##
Algorithms and data structures for handling a fully flexible refinement approach in mesh generation
##------------------TEXT------------------------##
Algorithms and data structures for handling a fully flexible refinement approach in mesh generation

			
				Nancy Viola Hitschfeld Kahler
				Proc. 4th Int. Meshing Roundtable, Oct 1995, pp. 265–276
				http://www.andrew.cmu.edu/user/sowen/abstracts/Hi181.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-nearest-neighbor-graphs.html
##-----------------TITLE------------------------##
On nearest neighbor graphs
##------------------TEXT------------------------##
On nearest neighbor graphs

			
				David Eppstein,
Michael S. Paterson,
and Frances F. Yao
				Discrete & Computational Geometry 17(3):263–282, Apr 1997
				Mathematical Reviews 98d:05121
				http://www.ics.uci.edu/~eppstein/pubs/EppPatYao-DCG-97.pdf

				Cited by:
				Metrics for image retrieval by colour contentRobust distance-based clustering with applications to spatial data miningQualitative visualization of distance informationWeak laws of large numbers in geometric probabilityThe objective method: probabilistic combinatorial optimization and local weak convergenceLow-latency photon mapping via block hashingClosed-form maximum likelihood estimates of nearest neighbor spatial dependence

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Re-Geometry-problem-Optimal-direction-Known-results.html
##-----------------TITLE------------------------##
Re: Geometry problem: Optimal direction. Known results?
##------------------TEXT------------------------##
Re: Geometry problem: Optimal direction. Known results?

			
				David Eppstein
				Message to sci.math.research bulletin board, 21 May 2004
				http://mathforum.org/epigone/sci.math.research/slexyaxsle

				Cited by:
				Fast multipoint evaluation of bivariate polynomials

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Quasiconvex-analysis-of-multivariate-recurrence-equations-for-backtracking-algorithms.html
##-----------------TITLE------------------------##
Quasiconvex analysis of multivariate recurrence equations for backtracking algorithms
##------------------TEXT------------------------##
Quasiconvex analysis of multivariate recurrence equations for backtracking algorithms

			
				David Eppstein
				ACM Trans. Algorithms 2(4):492–509, Oct 2006

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Vertex-unfoldings-of-simplicial-manifolds.html
##-----------------TITLE------------------------##
Vertex-unfoldings of simplicial manifolds
##------------------TEXT------------------------##
Vertex-unfoldings of simplicial manifolds

			
				Erik D. Demaine,
David Eppstein,
Jeffrey Gordon Erickson,
George W. Hart,
and Joseph O'Rourke
				Proc. 18th Symp. Computational Geometry, ACM, Jun 2002, pp. 237–243
				Tech. report 072, Smith College, Dept. of Computer Science, 2001
				Discrete Geometry: In honor of W. Kuperberg's 60th birthday, Pure and Applied Mathematics 253, Andras Bezdek, ed., Marcel Dekker, 2003, pp. 215–228
				ACM Computing Research Repository, cs.CG/0110054
				Mathematical Reviews 2034718

				Cited by:
				Polyhedron manOpen problems from CCCG 2001Grid vertex-unfolding orthogonal polyhedraA survey of folding and unfolding in computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Two-center-problems-for-a-convex-polygon.html
##-----------------TITLE------------------------##
Two-center problems for a convex polygon
##------------------TEXT------------------------##
Two-center problems for a convex polygon

			
				Chan-Su Shin,
Jung-Hyun Kim,
Sung Kwon Kim,
and Kyung-Yong Chwa
				Proc. 6th Eur. Symp. Algorithms (ESA 1998), Lecture Notes in Computer Science 1461, Gianfranco Bilardi,
Giuseppe F. Italiano,
Andrea Pietracaprina,
and Geppino Pucci, ed., Springer-Verlag, Aug 1998, pp. 199–210

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-computational-study-of-the-effect-of-unstructured-mesh-quality-on-solution-efficiency.html
##-----------------TITLE------------------------##
A computational study of the effect of unstructured mesh quality on solution efficiency
##------------------TEXT------------------------##
A computational study of the effect of unstructured mesh quality on solution efficiency

			
				Michael Batdorf,
Lori A. Freitag,
and Carl F. Ollivier-Gooch
				Proc. 13th AIAA Computational Fluid Dynamics Conf., 1997
				ftp://info.mcs.anl.gov/pub/tech_reports/plassman/lori_quality.ps.Z

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-bounded-leg-shortest-paths-problems.html
##-----------------TITLE------------------------##
On bounded leg shortest paths problems
##------------------TEXT------------------------##
On bounded leg shortest paths problems

			
				Liam Roditty
and Michael Segal
				Proc. 18th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2007, pp. 775–784

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-decreased-importance-of-algorithmic-strategies-in-current-ACM-curricula-for-graphics-+-visual-computing.html
##-----------------TITLE------------------------##
On decreased importance of algorithmic strategies in current ACM curricula for graphics & visual computing
##------------------TEXT------------------------##
On decreased importance of algorithmic strategies in current ACM curricula for graphics & visual computing

			
				Andrej Ferko
				Proc. Eurographics/ACM SIGGRAPH Worksh. Computer Graphics Education (CGE 2002): Support for Computer Graphics Educators, 2002
				http://virtual.inesc.pt/cge02/pdfs/ferko.pdf

				Cites:
				Mesh generation and optimal triangulationApplication challenges to computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-Algorithms-for-VLSI-Routing.html
##-----------------TITLE------------------------##
Approximation Algorithms for VLSI Routing
##------------------TEXT------------------------##
Approximation Algorithms for VLSI Routing

			
				Ion I. Măndoiu
				Ph.D. thesis, Georgia Inst. of Technology, College of Computing, Aug 2000
				http://www.engr.uconn.edu/~ion/FILES/pub/th.ps

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximate-string-searching.html
##-----------------TITLE------------------------##
Approximate string searching
##------------------TEXT------------------------##
Approximate string searching

			
				Gadi M. Landau
and Uzi Vishkin
				Pattern Matching Algorithms, Alberto Apostolico
and Zvi Galil, ed., Oxford Univ. Press, 1997, pp. 185–199

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-optimal-algorithm-for-hyperplane-depth-in-the-plane.html
##-----------------TITLE------------------------##
An optimal algorithm for hyperplane depth in the plane
##------------------TEXT------------------------##
An optimal algorithm for hyperplane depth in the plane

			
				Stefan Langerman
and William Steiger
				Proc. 11th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2000, pp. 54–59
				Tech. report 99-57, Rutgers Univ., Ctr. for Discrete Math. & Theor. Comp. Sci., 1999
				Proc. 4th CGC Worksh. Computational Geometry, Oct 1999
				http://www.cs.jhu.edu/~cgc/abstracts99/stefan.ps

				Cites:
				Regression depth and center points

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computational-investigations-of-the-optimality-of-two-and-three-dimensional-triangulations-under-several-criteria.html
##-----------------TITLE------------------------##
Computational investigations of the optimality of two- and three-dimensional triangulations under several criteria
##------------------TEXT------------------------##
Computational investigations of the optimality of two- and three-dimensional triangulations under several criteria

			
				Akira Tajima
and Hiroshi Imai
				Proc. 10th Canad. Conf. Computational Geometry, McGill Univ., School of Computer Science, Aug 1998
				http://cgm.cs.mcgill.ca/cccg98/proceedings/cccg98-tajima-computational.ps

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/vCerny-conjecture-for-DFA-accepting-star-free-languages.html
##-----------------TITLE------------------------##
{\v{C}}erný conjecture for DFA accepting star-free languages
##------------------TEXT------------------------##
{\v{C}}erný conjecture for DFA accepting star-free languages

			
				A. N. Trahtman
				Proc. Worksh. Synchronizing Automata, Turku (WSA 2004), Jul 2004

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Train-tracks-and-confluent-drawings.html
##-----------------TITLE------------------------##
Train tracks and confluent drawings
##------------------TEXT------------------------##
Train tracks and confluent drawings

			
				Peter Hui,
Marcus Schaefer,
and Daniel Štefankovič
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 318–328

				Cites:
				Confluent drawings: visualizing non-planar diagrams in a planar way

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-geometric-framework-for-machine-learning.html
##-----------------TITLE------------------------##
A geometric framework for machine learning
##------------------TEXT------------------------##
A geometric framework for machine learning

			
				David Heath
				Ph.D. thesis, Johns Hopkins Univ., Dept. of Computer Science, 1992

				Cites:
				Polynomial-size non-obtuse triangulation of polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-a-covering-triangulation-whose-maximum-angle-is-provably-small.html
##-----------------TITLE------------------------##
Finding a covering triangulation whose maximum angle is provably small
##------------------TEXT------------------------##
Finding a covering triangulation whose maximum angle is provably small

			
				Scott A. Mitchell
				Int. J. Computational Geometry & Applications 7:5–20, 1997

				Cites:
				Edge insertion for optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lecture-notes-for-ICS280-Spring-1999-Computational-Statistics.html
##-----------------TITLE------------------------##
Lecture notes for ICS280, Spring 1999: Computational Statistics
##------------------TEXT------------------------##
Lecture notes for ICS280, Spring 1999: Computational Statistics

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/280/

				Cited by:
				Simple linear regression: a PAPIRIS example

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fully-Unstructured-Delaunay-Mesh-Generation-Using-a-Modified-Advancing-Front-Approach-for-Applications-in-Technology-CAD.html
##-----------------TITLE------------------------##
Fully Unstructured Delaunay Mesh Generation Using a Modified Advancing Front Approach for Applications in Technology CAD
##------------------TEXT------------------------##
Fully Unstructured Delaunay Mesh Generation Using a Modified Advancing Front Approach for Applications in Technology CAD

			
				Peter Fleischmann
and Siegfried Selberherr
				J. Technology Computer Aided Design, IEEE, Aug 1997
				http://www.ieee.org/journal/tcad/accepted/fleischmann-aug97/

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometric-thickness-in-a-grid-of-linear-area.html
##-----------------TITLE------------------------##
Geometric thickness in a grid of linear area
##------------------TEXT------------------------##
Geometric thickness in a grid of linear area

			
				David R. Wood
				Proc. Euroconf. Combinatorics, Graph Theory, and Applications, Jaroslav Nešetril, ed., Univ. Autónoma de Barcelona, Centre de Recerca Matemàtica, Sep 2001, pp. 310–315
				Electronic Notes in Discrete Mathematics 10, 2001
				http://www.cs.usyd.edu.au/~davidw/papers/Wood-COMB01.ps
				http://www.elsevier.com/gej-ng/31/29/24/49/27/97/endm10073.ps

				Cites:
				Geometric thickness of complete graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Combinatorial-and-algorithmic-analysis-of-stabbing-and-visibility-problems-in-3-dimensional-space.html
##-----------------TITLE------------------------##
Combinatorial and algorithmic analysis of stabbing and visibility problems in 3-dimensional space
##------------------TEXT------------------------##
Combinatorial and algorithmic analysis of stabbing and visibility problems in 3-dimensional space

			
				Marco Pellegrini
				Ph.D. thesis, New York Univ., Courant Inst., 1991

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/How-to-subdivide-pyramids-prisms-and-hexahedra-into-tetrahedra.html
##-----------------TITLE------------------------##
How to subdivide pyramids, prisms, and hexahedra into tetrahedra
##------------------TEXT------------------------##
How to subdivide pyramids, prisms, and hexahedra into tetrahedra

			
				Julien Dompierre,
Paul Labbé,
Marie-Gabrielle Vallet,
and Ricardo Camarero
				Proc. 8th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1999, pp. 195–204
				Tech. report R99-78, Centre de recherche en calcul appliqué (CERCA), Aug 1999
				http://www.cerca.umontreal.ca/adp3d/8IMRT/8IMRT.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lecture-notes-for-ICS180-Winter-1997-Strategy-and-board-game-programming.html
##-----------------TITLE------------------------##
Lecture notes for ICS180, Winter 1997: Strategy and board game programming
##------------------TEXT------------------------##
Lecture notes for ICS180, Winter 1997: Strategy and board game programming

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/180a/w99.html

				Cited by:
				A Chinese Checkers playing program

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-common-substring-alignment-problem.html
##-----------------TITLE------------------------##
On the common substring alignment problem
##------------------TEXT------------------------##
On the common substring alignment problem

			
				Gadi M. Landau
				J. Algorithms 41(2):338–359, Nov 2001

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Ties-in-proximity-and-clustering-compounds-.html
##-----------------TITLE------------------------##
Ties in proximity and clustering compounds
##------------------TEXT------------------------##
Ties in proximity and clustering compounds 

			
				John D. MacCuish,
Christos Nicolaou,
and Norah E. MacCuish
				J. Chemical Information & Computer Sciences 41(1):134–146, 2001

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-costbenefit-analysis-of-simplicial-mesh-improvement-techniques-as-measured-by-solution-efficiency.html
##-----------------TITLE------------------------##
A cost/benefit analysis of simplicial mesh improvement techniques as measured by solution efficiency
##------------------TEXT------------------------##
A cost/benefit analysis of simplicial mesh improvement techniques as measured by solution efficiency

			
				Lori A. Freitag
and Carl F. Ollivier-Gooch
				Int. J. Computational Geometry & Applications 10(4):361–382, Aug 2000
				Tech. report ANL/MCS-P722-0598, Argonne Nat. Lab., Mathematics & Computer Science Div., Jul 1998
				ftp://info.mcs.anl.gov/pub/tech_reports/reports/P722.ps.Z

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-graph-problems-in-a-semi-streaming-model.html
##-----------------TITLE------------------------##
On graph problems in a semi-streaming model
##------------------TEXT------------------------##
On graph problems in a semi-streaming model

			
				Joan Feigenbaum,
Sampath Kannan,
Andrew McGregor,
Siddharth Suri,
and Jian Zhang
				Tech. report YALEU/DCS/TR-1262, Yale Univ., Dept. of Computer Science, Dec 2003
				http://cs-www.cs.yale.edu/homes/jf/tr1262.ps

				Cites:
				Dynamic graph algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-long-time-behaviour-of-the-thermoconvective-flow-in-a-porous-medium.html
##-----------------TITLE------------------------##
The long-time behaviour of the thermoconvective flow in a porous medium
##------------------TEXT------------------------##
The long-time behaviour of the thermoconvective flow in a porous medium

			
				Mesoud A. Efendiev,
Jürgen Fuhrmann,
and Sergei V. Zelik
				Tech. report 547, Weierstraß-Inst. für Angewandte Analysis und Stochastik, 2000
				http://www.wias-berlin.de/publications/preprints/547/

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Balanced-vertex-orderings-of-graphs.html
##-----------------TITLE------------------------##
Balanced vertex-orderings of graphs
##------------------TEXT------------------------##
Balanced vertex-orderings of graphs

			
				Therese C. Biedl,
Timothy Moon-Yew Chan,
Yashar Ganjali,
MohammadTaghi Hajiaghayi,
and David R. Wood
				Tech. report TR-02-01, Carleton Univ., School of Computer Science, 2002
				http://www.scs.carleton.ca/~davidw/papers/BCGHW-TechRep.ps

				Cites:
				Planar orientations with low out-degree and compaction of adjacency matrices

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-faster-off-line-algorithm-for-the-TCP-acknowledgement-problem.html
##-----------------TITLE------------------------##
A faster off-line algorithm for the TCP acknowledgement problem
##------------------TEXT------------------------##
A faster off-line algorithm for the TCP acknowledgement problem

			
				John Noga,
Steve Seiden,
and Gerhard J. Woeginger
				Information Processing Letters 81(2):71–73, Jan 2002

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-improved-algorithm-for-RNA-secondary-structure-prediction.html
##-----------------TITLE------------------------##
An improved algorithm for RNA secondary structure prediction
##------------------TEXT------------------------##
An improved algorithm for RNA secondary structure prediction

			
				Rune B. Lyngsø,
Michael Zuker,
and Christian Nørgaard Storm Pedersen
				Tech. report BRICS-RS-99-15, Aarhus Univ., Datalogisk afdeling, May 1999
				http://www.daimi.au.dk/~cstorm/papers/brics_rna.ps

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Flipping-cubical-meshes$9apoj.html
##-----------------TITLE------------------------##
Flipping cubical meshes{}
##------------------TEXT------------------------##
Flipping cubical meshes{}

			
				Marshall Wayne Bern
and David Eppstein
				Proc. 10th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 2001, pp. 19–29

				Cited by:
				Conformal refinement of all-quadrilateral and all-hexahedral meshes according to an anisotropic metricTopology modification of hexahedral meshes using atomic dual-based operationsIncreasing the number and volume of hexahedral and prism elements in a hex-dominant mesh by topological transformations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Sets-of-points-with-many-halving-lines.html
##-----------------TITLE------------------------##
Sets of points with many halving lines
##------------------TEXT------------------------##
Sets of points with many halving lines

			
				David Eppstein
				Tech. report 92-86, Univ. of California, Irvine, Dept. of Information and Computer Science, 1992
				http://www.ics.uci.edu/~eppstein/pubs/Epp-TR-92-86.pdf

				Cited by:
				Point sets with many $k$-setsOn halving line arrangements

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Graphical-representations-and-infinite-virtual-worlds-in-a-logic-and-functional-programming-course.html
##-----------------TITLE------------------------##
Graphical representations and infinite virtual worlds in a logic and functional programming course
##------------------TEXT------------------------##
Graphical representations and infinite virtual worlds in a logic and functional programming course

			
				Jose Emilio Labra Gayo
				Proc. 12th Int. Worksh. Functional and Constraint Logic Programming (WFLP 2003), Germán Vidal, ed., Univ. Politècnica de Valencia, Dep. de Sistemas Informáticos y Computación, 2003, pp. 283–294
				http://www.di.uniovi.es/~labra/FTP/Papers/wflp03.pdf

				Cites:
				Algorithms for coloring quadtrees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Closed-form-maximum-likelihood-estimates-of-nearest-neighbor-spatial-dependence.html
##-----------------TITLE------------------------##
Closed-form maximum likelihood estimates of nearest neighbor spatial dependence
##------------------TEXT------------------------##
Closed-form maximum likelihood estimates of nearest neighbor spatial dependence

			
				R. Kelley Pace
and Dongya Zou
				Geographical Analysis 32(2), Apr 2000
				http://www.spatial-statistics.com/pace_manuscripts/closest_neighbors/pdf/closest_neighbor.pdf

				Cites:
				On nearest neighbor graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-work-time-optimal-algorithm-for-computing-all-string-covers.html
##-----------------TITLE------------------------##
A work-time optimal algorithm for computing all string covers
##------------------TEXT------------------------##
A work-time optimal algorithm for computing all string covers

			
				Costas S. Iliopoulos
and Kunsoo Park
				Theoretical Computer Science 164:299–310, 1996

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-almost-linear-time-algorithm-for-generalized-matrix-searching.html
##-----------------TITLE------------------------##
An almost linear time algorithm for generalized matrix searching
##------------------TEXT------------------------##
An almost linear time algorithm for generalized matrix searching

			
				Maria M. Klawe
and Daniel J. Kleitman
				SIAM J. Discrete Mathematics 3:81–97, 1990

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Numerically-robust-algorithm-for-constructing-constrained-Delaunay-triangulation.html
##-----------------TITLE------------------------##
Numerically robust algorithm for constructing constrained Delaunay triangulation
##------------------TEXT------------------------##
Numerically robust algorithm for constructing constrained Delaunay triangulation

			
				Hiroshi Inagaki
and Kokichi Sugihara
				Proc. 6th Canad. Conf. Computational Geometry, 1994, pp. 171–176

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Bayesian-image-analysis-with-Markov-chain-Monte-Carlo-and-coloured-continuum-triangulation-models.html
##-----------------TITLE------------------------##
Bayesian image analysis with Markov chain Monte Carlo and coloured continuum triangulation models
##------------------TEXT------------------------##
Bayesian image analysis with Markov chain Monte Carlo and coloured continuum triangulation models

			
				Geoffrey K. Nicholls
				J. Royal Statistical Soc., Series B – Statistical Methodology 60:643–659, 1998

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lower-Bounds-for-Fundamental-Geometric-Problems.html
##-----------------TITLE------------------------##
Lower Bounds for Fundamental Geometric Problems
##------------------TEXT------------------------##
Lower Bounds for Fundamental Geometric Problems

			
				Jeffrey Gordon Erickson
				Ph.D. thesis, Univ. of California, Berkeley, Dept. of Electrical Engineering & Computer Science, Jul 1996
				http://compgeom.cs.uiuc.edu/~jeffe/pubs/thesis.html

				Cites:
				Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-multiple-label-placement-problem.html
##-----------------TITLE------------------------##
On the multiple label placement problem
##------------------TEXT------------------------##
On the multiple label placement problem

			
				Konstantinos G. Kakoulis
and Ioannis G. Tollis
				Proc. 10th Canad. Conf. Computational Geometry, McGill Univ., School of Computer Science, Aug 1998
				http://cgm.cs.mcgill.ca/cccg98/proceedings/cccg98-kakoulis-multiple.ps

				Cites:
				Application challenges to computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/3-colorability-incalP-for-P6-free-graphs.html
##-----------------TITLE------------------------##
3-colorability $\in\cal{P}$ for $P_6$-free graphs
##------------------TEXT------------------------##
3-colorability $\in\cal{P}$ for $P_6$-free graphs

			
				Bert Randerath
and Ingo Schiermeyer
				Tech. report 39-2001, Rutgers Univ., Ctr. for Operations Research, Jun 2001
				http://rutcor.rutgers.edu/pub/rrr/reports2001/39.ps

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Minkowski-type-theorems-and-least-squares-clustering.html
##-----------------TITLE------------------------##
Minkowski-type theorems and least-squares clustering
##------------------TEXT------------------------##
Minkowski-type theorems and least-squares clustering

			
				Franz Aurenhammer,
Friedrich Hoffmann,
and Boris Aronov
				Algorithmica 20(1):61–76, Jan 1998
				Proc. 8th Symp. Computational Geometry, ACM, Jun 1992, pp. 350–357
				Tech. report B 92-09, Freie Univ. Berlin, Inst. für Informatik, Apr 1992
				http://www.inf.fu-berlin.de/inst/pubs/tr-b-92-09.abstract.html

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Edge-insertion-for-optimal-triangulation.html
##-----------------TITLE------------------------##
Edge insertion for optimal triangulation
##------------------TEXT------------------------##
Edge insertion for optimal triangulation

			
				Marshall Wayne Bern,
Herbert Edelsbrunner,
David Eppstein,
Scott A. Mitchell,
and Tiow-Seng Tan
				Discrete & Computational Geometry 10(1):47–65, 1993
				Proc. 1st Latin American Symp. Theoretical Informatics (LATIN 1992), Lecture Notes in Computer Science 583, Imre Simon, ed., Springer-Verlag, Apr 1992, pp. 46–60
				Tech. report UILU-ENG-92-1702, Univ. of Illinois, Urbana-Champaign, Dept. of Computer Science, 1992
				Mathematical Reviews 94i:68279
				http://www.iscs.nus.sg/~tants/Paper/eis.ps.gz

				Cited by:
				Quality mesh generation in three dimensionsMesh generation with provable quality boundsApproximating the maxmin-angle covering triangulationOptimal Two-Dimensional TriangulationsApproaching the largest $\beta$-skeleton within a minimum weight triangulationBest-case results for nearest-neighbor learningOptimal triangulation problemsTriangulationsThe farthest point strategy for progressive image samplingFinding a covering triangulation whose maximum angle is provably smallSurface reconstruction by Voronoi filteringMesh generationOn levels of detail in terrainsGeneralized LMT-skeleton heuristics for several new classes of optimal triangulationsUnstructured mesh generation: Theory, practice, and perspectivesImage-consistent surface triangulationLMT-skeleton heuristics for several new classes of optimal triangulationsOptimal triangulationsOne strike against the min-max degree triangulation problem On computing new classes of optimal triangulations with angular constraintsGeometry and Topology for Mesh GenerationOn beta-skeleton as a subgraph of the minimum weight triangulationMulticriteria-optimized triangulationsAn algorithm for the maxmin area triangulation of a convex polygonNCSA MinMaxer: User's and Programmer's GuideGRASS Reference ManualConstrained higher order Delaunay triangulationsNP-completeness column 24

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Accelerated-occlusion-culling-using-shadow-frusta.html
##-----------------TITLE------------------------##
Accelerated occlusion culling using shadow frusta
##------------------TEXT------------------------##
Accelerated occlusion culling using shadow frusta

			
				Tom Hudson,
Dinesh Manocha,
Jonathan Cohen,
Ming C. Lin,
Kenneth E. Hoff III,
and Hansong Zhang
				Proc. 13th Symp. Computational Geometry, ACM, Jun 1997, pp. 1–9

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Drawing-the-planar-dual.html
##-----------------TITLE------------------------##
Drawing the planar dual
##------------------TEXT------------------------##
Drawing the planar dual

			
				Marshall Wayne Bern
and John Russell Gilbert
				Information Processing Letters 43:7–13, 1992

				Cites:
				Polynomial-size non-obtuse triangulation of polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Conformance-testing-in-the-presence-of-multiple-faults.html
##-----------------TITLE------------------------##
Conformance testing in the presence of multiple faults
##------------------TEXT------------------------##
Conformance testing in the presence of multiple faults

			
				Viraj Kumar
and Mahesh Viswanathan
				Proc. 16th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2005, pp. 1136–1145

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-a-high-depth-point-in-the-plane.html
##-----------------TITLE------------------------##
Computing a high depth point in the plane
##------------------TEXT------------------------##
Computing a high depth point in the plane

			
				Stefan Langerman
and William Steiger
				Proc. Int. Conf. Robust Statistics, 2001
				http://cgm.cs.mcgill.ca/~sl/papers/icors01full.ps

				Cites:
				Approximating center points with iterated Radon pointsComputing the depth of a flat

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Triangulations-in-CGAL.html
##-----------------TITLE------------------------##
Triangulations in CGAL
##------------------TEXT------------------------##
Triangulations in CGAL

			
				Jean-Daniel Boissonat,
Olivier Devillers,
Sylvain Pion,
Monique Teillaud,
and Mariette Yvinec
				Computational Geometry Theory & Applications 22(1–3):5–19, May 2002

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Partitions-of-complete-geometric-graphs-into-plane-trees.html
##-----------------TITLE------------------------##
Partitions of complete geometric graphs into plane trees
##------------------TEXT------------------------##
Partitions of complete geometric graphs into plane trees

			
				Prosenjit K. Bose,
Ferran Hurtado Diaz,
Eduardo Rivera-Campo,
and David R. Wood
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 71–81

				Cites:
				Geometric thickness of complete graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Quantile-approximation-for-robust-statistical-estimation-and-kappa-enclosing-problems-.html
##-----------------TITLE------------------------##
Quantile approximation for robust statistical estimation and kappa-enclosing problems
##------------------TEXT------------------------##
Quantile approximation for robust statistical estimation and kappa-enclosing problems 

			
				David M. Mount,
Nathan S. Netanyahu,
Christine D. Piatko,
Ruth Silverman,
and Angela Y. Wu
				Int. J. Computational Geometry & Applications 10(6):593–608, Dec 2000

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-the-discrepancy.html
##-----------------TITLE------------------------##
Computing the discrepancy
##------------------TEXT------------------------##
Computing the discrepancy

			
				David P. Dobkin
and David Eppstein
				Proc. 9th Symp. Computational Geometry, ACM, May 1993, pp. 47–52

				Cited by:
				Geometric discrepancy revisitedComputing the rectangle discrepancyComputing the maximum bichromatic discrepancy with applications to computer graphics and machine learningThe maximum discrepancy of simple geometric rangesComputing half-plane and strip discrepancy of planar point setsConcept learning with simple geometric hypothesesConstructing efficient decision trees by using optimized numeric association rulesEfficient algorithms for computing the $L_2$ discrepancyComputational Geometry: Algorithms and ApplicationsTrends and developments in computational geometryDynamic planar convex hull operations in near-logarithmic amortized timeEfficient and small representation of line arrangements with applicationsAn algorithm to compute bounds for the star discrepancyOptimal volume subintervals with $k$ points and star discrepancy via integer programmingComputing bounds for the star discrepancySur le Calcul et la Majoration de la Discrépance à l'OrigineThe Computational Measure of UniformityAn alternative method to the scrambled Halton sequence for removing correlation between standard Halton sequences in high dimensionsThe hunting of the bump: on maximizing statistical discrepancy

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Three-dimensional-hybrid-mesh-generation-for-turbomachinery-airfoils.html
##-----------------TITLE------------------------##
Three-dimensional hybrid mesh generation for turbomachinery airfoils
##------------------TEXT------------------------##
Three-dimensional hybrid mesh generation for turbomachinery airfoils

			
				K. S. Kim
and Paul G. A. Cizmas
				J. Propulsion & Power 18(3):536–543, 2002

				Cites:
				Mesh generation and optimal triangulationOptimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Combinatorial-Geometry.html
##-----------------TITLE------------------------##
Combinatorial Geometry
##------------------TEXT------------------------##
Combinatorial Geometry

			
				János Pach
and Pankaj Kumar Agarwal
				John Wiley & Sons, 1995

				Cites:
				Horizon theorems for lines and polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-fully-dynamic-algorithm-for-planar-width.html
##-----------------TITLE------------------------##
A fully dynamic algorithm for planar width
##------------------TEXT------------------------##
A fully dynamic algorithm for planar width

			
				Timothy Moon-Yew Chan
				Discrete & Computational Geometry 30(1):17–24, Jul 2003
				Proc. 17th Symp. Computational Geometry, ACM, Jun 2001, pp. 172–176

				Cites:
				Dynamic three-dimensional linear programmingDynamic Euclidean minimum spanning trees and extrema of binary functionsAverage case analysis of dynamic geometric optimizationIncremental and decremental maintenance of planar width

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Synchronizing-generalized-monotonic-automata.html
##-----------------TITLE------------------------##
Synchronizing generalized monotonic automata
##------------------TEXT------------------------##
Synchronizing generalized monotonic automata

			
				Dimitry S. Ananichev
and Mikhail V. Volkov
				Proc. Worksh. Synchronizing Automata, Turku (WSA 2004), Jul 2004

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-fast-expected-time-algorithm-for-the-point-pattern-matching-problem.html
##-----------------TITLE------------------------##
A fast expected time algorithm for the point pattern matching problem
##------------------TEXT------------------------##
A fast expected time algorithm for the point pattern matching problem

			
				Paul B. van Wamelen,
Z. Li,
and S. S. Iyengar
				Tech. report 1999-28, Louisiana State Univ., Dept. of Mathematics, 1999
				http://www.math.lsu.edu/~preprint/1999/pvw19991.pdf

				Cites:
				Algorithms for proximity problems in higher dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Sequential-and-parallel-algorithms-for-finding-a-maximum-convex-polygon.html
##-----------------TITLE------------------------##
Sequential and parallel algorithms for finding a maximum convex polygon
##------------------TEXT------------------------##
Sequential and parallel algorithms for finding a maximum convex polygon

			
				Paul Fischer
				Computational Geometry Theory & Applications 7(3):187–200, Feb 1997

				Cites:
				Finding minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-efficient-point-location-method-for-visualization-in-Large-unstructured-grids.html
##-----------------TITLE------------------------##
An efficient point location method for visualization in Large unstructured grids
##------------------TEXT------------------------##
An efficient point location method for visualization in Large unstructured grids

			
				Max Langbein,
Gerik Scheuermann,
and Xavier Tricoche
				Proc. 8th Int. Worksh. Vision, Modeling, and Visualization, T. Ertl,
B. Girod,
G. Greiner,
H. Niemann,
Hans-Peter Seidel,
E. Steinbach,
and R. Westermann, ed., IOS Press, 2003
				http://www-scheuer.informatik.uni-kl.de/~tricoche/pdfs/vmv03.pdf

				Cites:
				Parallel construction of quadtrees and quality triangulations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-priori-bounds-on-the-Euclidean-traveling-salesman.html
##-----------------TITLE------------------------##
A priori bounds on the Euclidean traveling salesman
##------------------TEXT------------------------##
A priori bounds on the Euclidean traveling salesman

			
				Timothy Law Snyder
and J. Michael Steele
				SIAM J. Computing 24:665–671, 1995

				Cites:
				Worst-case bounds for subadditive geometric graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Local-approach-to-dynamic-visibility-in-the-plane.html
##-----------------TITLE------------------------##
Local approach to dynamic visibility in the plane
##------------------TEXT------------------------##
Local approach to dynamic visibility in the plane

			
				Karel Nechvíle
and Petr Tobola
				Proc. 7th Int. Conf. Computer Graphics, Visualization and Interactive Digital Media (WSCG '99), Feb 1999
				http://wscg.zcu.cz/wscg99/papers/G23-final.ps.gz

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-number-of-simple-cycles-in-planar-graphs.html
##-----------------TITLE------------------------##
On the number of simple cycles in planar graphs
##------------------TEXT------------------------##
On the number of simple cycles in planar graphs

			
				Helmut Alt,
Ulrich Fuchs,
and Klaus Kriegel
				Combinatorics, Probability & Computing 8(5):397–405, Sep 1999

				Cites:
				WG paper

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-the-k-smallest-spanning-trees.html
##-----------------TITLE------------------------##
Finding the $k$ smallest spanning trees
##------------------TEXT------------------------##
Finding the $k$ smallest spanning trees

			
				David Eppstein
				BIT 32(2):237–248, 1992
				Proc. 2nd Scandinavian Worksh. Algorithm Theory (SWAT 1990), Lecture Notes in Computer Science 447, John Russell Gilbert
and Rolf G. Karlsson, ed., Springer-Verlag, Jul 1990, pp. 38–47
				Mathematical Reviews 94e:05082
				http://www.ics.uci.edu/~eppstein/pubs/Epp-BIT-92.pdf

				Cited by:
				Ambivalent data structures for dynamic 2-edge-connectivity and $k$ smallest spanning treesA linear algorithm for analysis of minimum spanning and shortest-path trees of planar graphsVoronoi diagrams — a survey of a fundamental geometric data structureGeneration of color-constrained spanning trees with application in symbolic circuit analysisThe minimum labeling spanning treesFinding precursor compounds in secondary metabolismGraph modeling of metabolism

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Confluent-drawings-visualizing-non-planar-diagrams-in-a-planar-way.html
##-----------------TITLE------------------------##
Confluent drawings: visualizing non-planar diagrams in a planar way
##------------------TEXT------------------------##
Confluent drawings: visualizing non-planar diagrams in a planar way

			
				Matthew T. Dickerson,
David Eppstein,
Michael T. Goodrich,
and Jeremy Yu Meng
				Proc. 11th Int. Symp. Graph Drawing (GD 2003), Lecture Notes in Computer Science 2912, Springer-Verlag, Sep 2003, pp. 1–12
				J. Graph Algorithms & Applications 9(1):31–52, 2005
				ACM Computing Research Repository, cs.CG/0212046

				Cited by:
				Graph drawing contest reportTrain tracks and confluent drawingsCrossings in Clustered Level Graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-string-matching-algorithms.html
##-----------------TITLE------------------------##
Parallel string matching algorithms
##------------------TEXT------------------------##
Parallel string matching algorithms

			
				Dany Breslauer
and Zvi Galil
				Tech. report CUCS-002-92, Columbia Univ., Computer Science Dept., 1992
				ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-002-92.ps.Z

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Mesh-quality-a-function-of-geometry-error-estimates-or-both.html
##-----------------TITLE------------------------##
Mesh quality: a function of geometry, error estimates, or both?
##------------------TEXT------------------------##
Mesh quality: a function of geometry, error estimates, or both?

			
				Martin Berzins
				Engineering Computations 15(3):236–247, 1999
				Proc. 7th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1998, pp. 229–237

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-survey-of-folding-and-unfolding-in-computational-geometry.html
##-----------------TITLE------------------------##
A survey of folding and unfolding in computational geometry
##------------------TEXT------------------------##
A survey of folding and unfolding in computational geometry

			
				Erik D. Demaine
and Joseph O'Rourke
				Combinatorial and Computational Geometry, MSRI Publications 52, Jacob E. Goodman,
János Pach,
and Emo Welzl, ed., Cambridge Univ. Press, 2005, pp. 167–211

				Cites:
				Vertex-unfoldings of simplicial manifoldsUnunfoldable polyhedra with convex facesA disk-packing algorithm for an origami magic trick

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-limited-versus-polynomial-nondeterminism.html
##-----------------TITLE------------------------##
On limited versus polynomial nondeterminism
##------------------TEXT------------------------##
On limited versus polynomial nondeterminism

			
				Uriel Feige
and Joe Kilian
				Chicago J. Theoretical Computer Science 1:1–20, Mar 1997

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Spatiotemporal-multicast-in-sensor-networks.html
##-----------------TITLE------------------------##
Spatiotemporal multicast in sensor networks
##------------------TEXT------------------------##
Spatiotemporal multicast in sensor networks

			
				Qingfeng Huang,
Chenyang Lu,
and Gruia-Catalin Roman
				Proc. 1st Int. Conf. Embedded Networked Sensor Systems, ACM, 2003, pp. 205–215
				Tech. report WUCSE-2003-18, Washington Univ., St. Louis, Dept. of Computer Science and Engineering, 2003
				http://portal.acm.org/citation.cfm?id=958516
				http://www.cse.seas.wustl.edu/techreportfiles/getreport.asp?254

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-parallel-algorithms-for-manipulating-sorted-sets.html
##-----------------TITLE------------------------##
Efficient parallel algorithms for manipulating sorted sets
##------------------TEXT------------------------##
Efficient parallel algorithms for manipulating sorted sets

			
				Jyrki J. Katajainen
				Proc. 17th Computer Science Conf., Australian Computer Science Communications 16, 1994, pp. 281–288
				http://www.diku.dk/hjemmesider/ansatte/jyrki/Paper/ACSC94.ps

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/1-irregular-element-tessellation-in-mixed-element-meshes-for-the-control-volume-discretization-method.html
##-----------------TITLE------------------------##
1-irregular element tessellation in mixed element meshes for the control volume discretization method
##------------------TEXT------------------------##
1-irregular element tessellation in mixed element meshes for the control volume discretization method

			
				Nancy Viola Hitschfeld Kahler
and Rodrigo Farías
				Proc. 5th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1996, pp. 195–204

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/More-planar-two-center-algorithms.html
##-----------------TITLE------------------------##
More planar two-center algorithms
##------------------TEXT------------------------##
More planar two-center algorithms

			
				Timothy Moon-Yew Chan
				Computational Geometry Theory & Applications 13(3):189–198, Sep 1999

				Cites:
				Faster construction of planar two-centersDynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-efficient-parallel-strategy-for-computing-K-terminal-reliability-and-finding-most-vital-edges-in-2-trees-and-partial-2-trees.html
##-----------------TITLE------------------------##
An efficient parallel strategy for computing $K$-terminal reliability and finding most vital edges in 2-trees and partial 2-trees
##------------------TEXT------------------------##
An efficient parallel strategy for computing $K$-terminal reliability and finding most vital edges in 2-trees and partial 2-trees

			
				Chin-Wen Ho,
Sun-Yuan Hsieh,
and Gen-Huey Chen
				Proc. Int. Parallel and Distributed Processing Symp. (IPDPS 1997), 1997
				J. Parallel & Distributed Computing 51(2):89–113, Jun 1998
				http://ipdps.eece.unm.edu/1997/s17/353.pdf

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Topological-peeling-and-applications.html
##-----------------TITLE------------------------##
Topological peeling and applications
##------------------TEXT------------------------##
Topological peeling and applications

			
				Danny Z. Chen
and Jinhui Xu
				Int. J. Computational Geometry & Applications 13(2):135–172, Apr 2003

				Cites:
				Shortest paths in an arrangement with $k$ line orientationsAn efficient algorithm for shortest paths in vertical and horizontal segments

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-extremely-inexpensive-multisampling-scheme.html
##-----------------TITLE------------------------##
An extremely inexpensive multisampling scheme
##------------------TEXT------------------------##
An extremely inexpensive multisampling scheme

			
				Tomas Akenine-Möller
				Tech. report 03-14, Chalmers Univ. of Technology, Dept. of Computer Engineering, 2003
				http://www.ce.chalmers.se/staff/tomasm/pubs/fliptri_tr.pdf

				Cites:
				Computing the discrepancy with applications to supersampling patterns

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Aggregation-approach-for-the-minimum-binary-cost-tension-problem.html
##-----------------TITLE------------------------##
Aggregation approach for the minimum binary cost tension problem
##------------------TEXT------------------------##
Aggregation approach for the minimum binary cost tension problem

			
				Bruno Bachelet
				Tech. report LIMOS/RR04-08, CNRS, Lab. d'Informatique, Modélisation et d'Optimisation des Systèmes, 2004
				http://www.isima.fr/limos/publi/paper/2004/RR0408.pdf

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-search-and-hierarchical-motion-planning-by-dynamically-maintaining-single-source-shortest-path-trees.html
##-----------------TITLE------------------------##
Efficient search and hierarchical motion planning by dynamically maintaining single-source shortest path trees
##------------------TEXT------------------------##
Efficient search and hierarchical motion planning by dynamically maintaining single-source shortest path trees

			
				Michael Barbehenn
and Seth Hutchinson
				IEEE Trans. Robotics and Automation 11(2):198–214, Apr 1995
				http://www.ai.uiuc.edu/~barbehen/papers/trans.ps

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Reductions-among-high-dimensional-proximity-problems.html
##-----------------TITLE------------------------##
Reductions among high dimensional proximity problems
##------------------TEXT------------------------##
Reductions among high dimensional proximity problems

			
				Ashish Goel,
Piotr Indyk,
and Kasturi R. Varadarajan
				Proc. 12th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2001, pp. 769–778

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Compact-Location-Problems.html
##-----------------TITLE------------------------##
Compact Location Problems
##------------------TEXT------------------------##
Compact Location Problems

			
				Sven Oliver Krumke,
Madhav V. Marathe,
Hartmut Noltemeier,
Venkatesh Radhakrishnan,
S. S. Ravi,
and Daniel J. Rosenkrantz
				Theoretical Computer Science 181(2):379–404, Jul 1997

				Cites:
				Approximation algorithms for geometric problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-Geometric-Framework-for-Computer-Graphics-Addressing-Modeling-Visibility-and-Shadows.html
##-----------------TITLE------------------------##
A Geometric Framework for Computer Graphics Addressing Modeling, Visibility, and Shadows
##------------------TEXT------------------------##
A Geometric Framework for Computer Graphics Addressing Modeling, Visibility, and Shadows

			
				Sherif Ghali
				Ph.D. thesis, Univ. of Toronto, Dept. of Computer Science, 1999
				http://www.cs.ualberta.ca/~ghali/thesis/index.html

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Faster-construction-of-planar-two-centers.html
##-----------------TITLE------------------------##
Faster construction of planar two-centers
##------------------TEXT------------------------##
Faster construction of planar two-centers

			
				David Eppstein
				Proc. 8th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1997, pp. 131–138
				Tech. report 96-12, Univ. of California, Irvine, Dept. of Information and Computer Science, 1996
				http://www.ics.uci.edu/~eppstein/pubs/Epp-TR-96-12.pdf
				http://www.ics.uci.edu/~eppstein/pubs/Epp-SODA-97.pdf

				Cited by:
				A near-linear algorithm for the planar 2-center problemEfficient algorithms for geometric optimizationThe discrete 2-center problemGeometric applications of a randomized optimization techniqueComputational Geometry IITwo-center problems for a convex polygonObnoxious facility location: complete service with minimal harmConstrained square center problemsRectilinear static and dynamic discrete 2-center problemsMore planar two-center algorithmsComputing a double-ray center for a planar point setApproximation algorithms for projective clusteringOn the continuous Weber and $k$-median problemsThe 2-center problem with obstaclesDiscrete rectilinear 2-center problemsA geometric proof of the combinatorial bounds for the number of optimal solutions for the 2-center Euclidean problemEfficient algorithms for two-center problems for a convex polygonA near-quadratic algorithm for the alpha-connected two-center decision problemEfficiently approximating polygonal paths in three and higher dimensionsA fast algorithm for the alpha-connected two-center decision problemMobile facility locationShareCam part II: approximate and distributed algorithms for a collaboratively controlled robotic webcamExact and distributed algorithms for collaborative camera controlAlgorithms for disk covering problems with the most pointsCollaborative frame selection: exact and distributed algorithms for a networked robotic camera with discrete zoom levels

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Guest-editors-forward-to-special-issue-for-ACM-Symp-on-Computational-Geometry.html
##-----------------TITLE------------------------##
Guest editor's forward to special issue for ACM Symp. on Computational Geometry
##------------------TEXT------------------------##
Guest editor's forward to special issue for ACM Symp. on Computational Geometry

			
				David Eppstein
				Discrete & Computational Geometry 30(1):1–2, Jul 2003

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Adaptive-simplicial-grids-from-cross-sections-of-monotone-complexes.html
##-----------------TITLE------------------------##
Adaptive simplicial grids from cross-sections of monotone complexes
##------------------TEXT------------------------##
Adaptive simplicial grids from cross-sections of monotone complexes

			
				Herbert Edelsbrunner
and Roman Waupotitsch
				Int. J. Computational Geometry & Applications 10(3):267–284, Jun 2000

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multiple-alignment-communication-cost-and-graph-matching.html
##-----------------TITLE------------------------##
Multiple alignment, communication cost, and graph matching
##------------------TEXT------------------------##
Multiple alignment, communication cost, and graph matching

			
				Pavel A. Pevzner
				SIAM J. Applied Mathematics 52:1763–1779, 1992

				Cites:
				Efficient algorithms for sequence analysis

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Atomic-images-a-method-for-meshing-digital-images.html
##-----------------TITLE------------------------##
Atomic images – a method for meshing digital images
##------------------TEXT------------------------##
Atomic images – a method for meshing digital images

			
				Dave Hale
				Proc. 10th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 2001, pp. 185–196

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multiple-sequence-comparison-and-consistency-on-multipartite-graphs.html
##-----------------TITLE------------------------##
Multiple sequence comparison and consistency on multipartite graphs
##------------------TEXT------------------------##
Multiple sequence comparison and consistency on multipartite graphs

			
				Martin Vingron
and Pavel A. Pevzner
				Advances in Applied Mathematics 16(1):1–22, Mar 1995

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Generating-well-shaped-d-dimensional-Delaunay-meshes.html
##-----------------TITLE------------------------##
Generating well-shaped $d$-dimensional Delaunay meshes
##------------------TEXT------------------------##
Generating well-shaped $d$-dimensional Delaunay meshes

			
				Xiang-Yang Li
				Theoretical Computer Science 296(1):145–165, Mar 2003

				Cites:
				Dihedral bounds for mesh generation in high dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometric-problems-in-machine-learning.html
##-----------------TITLE------------------------##
Geometric problems in machine learning
##------------------TEXT------------------------##
Geometric problems in machine learning

			
				David P. Dobkin
and Dmitri Gunopulos
				Proc. 1st Worksh. Applied Computational Geometry, ACM, 1996, pp. 50–56

				Cites:
				Computing the discrepancy with applications to supersampling patterns

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Towards-fully-automatic-generation-of-city-models.html
##-----------------TITLE------------------------##
Towards fully automatic generation of city models
##------------------TEXT------------------------##
Towards fully automatic generation of city models

			
				Claus Brenner
				Proc. XIX ISPRS Cong., Int. Archives of Photogrammetry, Remote Sensing and Spatial Information Sciences XXXIII-B3, 2000, pp. 85–92
				http://www.ifp.uni-stuttgart.de/publications/2000/Brenner_amsterdam.pdf

				Cites:
				Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Which-problems-have-strongly-exponential-complexity.html
##-----------------TITLE------------------------##
Which problems have strongly exponential complexity?
##------------------TEXT------------------------##
Which problems have strongly exponential complexity?

			
				Russell Impagliazzo,
Ramamohan Paturi,
and Francis Zane
				Proc. 39th Symp. Foundations of Computer Science, IEEE, Nov 1998, pp. 653–662
				J. Computer & Systems Sciences 63(4):512–530, Dec 2001

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Vertical-decomposition-of-shallow-levels-in-3-dimensional-arrangements-and-its-applications.html
##-----------------TITLE------------------------##
Vertical decomposition of shallow levels in 3-dimensional arrangements and its applications
##------------------TEXT------------------------##
Vertical decomposition of shallow levels in 3-dimensional arrangements and its applications

			
				Pankaj Kumar Agarwal,
Alon Efrat,
and Micha Sharir
				Proc. 11th Symp. Computational Geometry, ACM, Jun 1995, pp. 39–50
				SIAM J. Computing 29(3):912–953, Dec 1999
				http://www.math.tau.ac.il/~alone/shallow.ps.gz

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Generating-perfect-reversals-of-simple-linear-codes.html
##-----------------TITLE------------------------##
Generating perfect reversals of simple linear-codes
##------------------TEXT------------------------##
Generating perfect reversals of simple linear-codes

			
				Kalyan Perumalla
				Tech. report GIT-CERCS-TR-03-04, Georgia Inst. of Technology, College of Computing, May 2003
				http://www.cercs.gatech.edu/tech-reports/tr2003/git-cercs-03-04.pdf

				Cites:
				A heuristic approach to program inversion

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Robust-Surface-Reconstruction-Strategy-for-Large-Clouds-of-Points-State-of-the-Art-and-Concept-of-Doctoral-Thesis.html
##-----------------TITLE------------------------##
Robust Surface Reconstruction Strategy for Large Clouds of Points: State of the Art and Concept of Doctoral Thesis
##------------------TEXT------------------------##
Robust Surface Reconstruction Strategy for Large Clouds of Points: State of the Art and Concept of Doctoral Thesis

			
				Alexandr Jeměljanov
				Tech. report DCSE/TR-2003-07, Univ. of West Bohemia, Dept. of Computer Science, May 2003
				http://www.kiv.zcu.cz/publications/2003/tr-2003-07.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-maximal-frequent-and-minimal-infrequent-sets-in-binary-matrices.html
##-----------------TITLE------------------------##
On maximal frequent and minimal infrequent sets in binary matrices
##------------------TEXT------------------------##
On maximal frequent and minimal infrequent sets in binary matrices

			
				Endre Boros,
Vladimir Gurvich,
Leonid Khachiyan,
and Kazuhisa Makino
				Annals of Mathematics & Artificial Intelligence 39(3):211–221, Nov 2003

				Cites:
				Arboricity and bipartite subgraph listing algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fast-and-scalable-conflict-detection-for-packet-classifiers.html
##-----------------TITLE------------------------##
Fast and scalable conflict detection for packet classifiers
##------------------TEXT------------------------##
Fast and scalable conflict detection for packet classifiers

			
				Florin Baboescu
and George Varghese
				J. Computer & Telecommunications Networking 42(6):717–735, Aug 2003
				http://dx.doi.org/10.1016/S1389-1286(03)00213-5

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Quasiconvex-programming.html
##-----------------TITLE------------------------##
Quasiconvex programming
##------------------TEXT------------------------##
Quasiconvex programming

			
				David Eppstein
				Combinatorial and Computational Geometry, MSRI Publications 52, Jacob E. Goodman,
János Pach,
and Emo Welzl, ed., Cambridge Univ. Press, 2005, pp. 287–331
				ACM Computing Research Repository, cs.CG/0412046

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-alternative-method-to-the-scrambled-Halton-sequence-for-removing-correlation-between-standard-Halton-sequences-in-high-dimensions.html
##-----------------TITLE------------------------##
An alternative method to the scrambled Halton sequence for removing correlation between standard Halton sequences in high dimensions
##------------------TEXT------------------------##
An alternative method to the scrambled Halton sequence for removing correlation between standard Halton sequences in high dimensions

			
				Stephane Hess
and John Polak
				Proc. 43rd Eur. Cong. Regional Science Assoc. (ERSA 2003), 2003
				http://www.jyu.fi/ersa2003/cdrom/abstracts/a406.html

				Cites:
				Computing the discrepancy

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Shape-fitting-with-outliers.html
##-----------------TITLE------------------------##
Shape fitting with outliers
##------------------TEXT------------------------##
Shape fitting with outliers

			
				Sariel Har-Peled
and Yusu Wang
				Proc. 19th Symp. Computational Geometry, ACM, Jun 2003, pp. 29–38

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-formal-analysis-of-a-dynamic-distributed-spanning-tree-algorithm.html
##-----------------TITLE------------------------##
A formal analysis of a dynamic distributed spanning tree algorithm
##------------------TEXT------------------------##
A formal analysis of a dynamic distributed spanning tree algorithm

			
				Arjan J. Mooij
and Wieger Wesselink
				Tech. report, Technische Univ. Eindhoven, Fac. Wiskunde en Informatica, Dec 2003
				http://www.win.tue.nl/oas/iqps/pub/MW2003.pdf

				Cites:
				Dynamic graph algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Deformable-free-space-tilings-for-kinetic-collision-detection.html
##-----------------TITLE------------------------##
Deformable free space tilings for kinetic collision detection
##------------------TEXT------------------------##
Deformable free space tilings for kinetic collision detection

			
				Pankaj Kumar Agarwal,
Julien Basch,
Leonidas J. Guibas,
John E. Hershberger,
and Li Zhang
				Int. J. Robotics Research 21(3):179–197, Mar 2002
				Proc. 4th Int. Worksh. Algorithmic Foundations of Robotics (WAFR 2000), 2000
				http://citeseer.nj.nec.com/agarwal00deformable.html

				Cites:
				Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Stable-distributions-pseudorandom-generators-embeddings-and-data-stream-computation.html
##-----------------TITLE------------------------##
Stable distributions, pseudorandom generators, embeddings and data stream computation
##------------------TEXT------------------------##
Stable distributions, pseudorandom generators, embeddings and data stream computation

			
				Piotr Indyk
				Proc. 41st Symp. Foundations of Computer Science, IEEE, Nov 2000, pp. 189–197

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functionsFast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-effect-of-faults-on-network-expansion.html
##-----------------TITLE------------------------##
The effect of faults on network expansion
##------------------TEXT------------------------##
The effect of faults on network expansion

			
				Amitabha Bagchi,
Ankur Bhargava,
Amitabh Chaudhary,
David Eppstein,
and Christian Scheideler
				Proc. 16th Symp. Parallelism in Algorithms and Architectures (SPAA 2004), ACM, 2004, pp. 286–293
				Theory of Computing Systems 39(6):903–928, Nov 2006
				ACM Computing Research Repository, cs.DC/0404029
				http://doi.acm.org/10.1145/1007912.1007960

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/FIST-Fast-industrial-strength-triangulation-of-polygons-.html
##-----------------TITLE------------------------##
FIST: Fast industrial-strength triangulation of polygons
##------------------TEXT------------------------##
FIST: Fast industrial-strength triangulation of polygons 

			
				Martin Held
				Algorithmica 30(4):563–596, Aug 2001

				Cites:
				On triangulating three-dimensional polygonsMesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Constant-time-parallel-integer-sorting.html
##-----------------TITLE------------------------##
Constant-time parallel integer sorting
##------------------TEXT------------------------##
Constant-time parallel integer sorting

			
				Torben Hagerup
				Proc. 23rd Symp. Theory of Computing, ACM, 1991, pp. 299–306

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Categorical-range-queries-in-large-databases.html
##-----------------TITLE------------------------##
Categorical range queries in large databases
##------------------TEXT------------------------##
Categorical range queries in large databases

			
				Alexandros Nanopoulos
and Panayiotis Bozanis
				Proc. 8th Int. Symp. Spatial and Temporal Databases (SSTD 2003), Lecture Notes in Computer Science 2750, Thanasis Hadzilacos,
Yannis Manolopoulos,
and John F. Roddick, ed., Springer-Verlag, 2003, pp. 122–139
				http://delab.csd.auth.gr/papers/SSTD03nb.pdf

				Cites:
				Internet packet filter management and rectangle geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Small-strictly-convex-quadrilateral-meshes-of-point-sets.html
##-----------------TITLE------------------------##
Small strictly convex quadrilateral meshes of point sets
##------------------TEXT------------------------##
Small strictly convex quadrilateral meshes of point sets

			
				David Bremner,
Ferran Hurtado Diaz,
Suneeta Ramaswami,
and Vera Sacristán Adinolfi
				Proc. 12th Int. Symp. Algorithms & Computation (ISAAC 2001), Lecture Notes in Computer Science 2223, Peter Eades
and Tadao Takaoka, ed., Springer-Verlag, 2001, pp. 623–635
				ACM Computing Research Repository, cs.CG/0202011
				http://hpc.rutgers.edu/~rsuneeta/research/quadran.ps.gz

				Cites:
				Linear complexity hexahedral mesh generationQuadrilateral meshing by circle packing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-algorithms-for-bichromatic-separability.html
##-----------------TITLE------------------------##
Efficient algorithms for bichromatic separability
##------------------TEXT------------------------##
Efficient algorithms for bichromatic separability

			
				Pankaj Kumar Agarwal,
Boris Aronov,
and Vladlen Koltun
				Proc. 15th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2004, pp. 675–683
				ACM Trans. Algorithms 2(2):209–227, Apr 2006

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Shelling-hexahedral-complexes-for-mesh-generation.html
##-----------------TITLE------------------------##
Shelling hexahedral complexes for mesh generation
##------------------TEXT------------------------##
Shelling hexahedral complexes for mesh generation

			
				Matthias Müller-Hannemann
				J. Graph Algorithms & Applications 5(5):59–91, 2001
				http://www.cs.brown.edu/publications/jgaa/accepted/01/deFraysseixOssonadeMendez01.5.5.pdf

				Cites:
				Linear complexity hexahedral mesh generationMesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Improved-bounds-for-intersecting-triangles-and-halving-planes.html
##-----------------TITLE------------------------##
Improved bounds for intersecting triangles and halving planes
##------------------TEXT------------------------##
Improved bounds for intersecting triangles and halving planes

			
				David Eppstein
				J. Combinatorial Theory, Series A 62:176–182, 1993
				Tech. report 91-60, Univ. of California, Irvine, Dept. of Information and Computer Science, 1991
				Mathematical Reviews 94f:52006
				http://www.ics.uci.edu/~eppstein/pubs/Epp-TR-91-60.pdf

				Cited by:
				Counting triangle crossings and halving planesCutting dense point sets in halfResults on $k$-sets and $j$-facets via continuous motionArrangements and their applicationsPoint sets with many $k$-setsClustering for edge-cost minimizationOn levels in arrangements of curvesCrossing-free segments and triangles in point configurationsOn levels in arrangements of surfaces in three dimensions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Orienting-polygonal-parts-without-sensors.html
##-----------------TITLE------------------------##
Orienting polygonal parts without sensors
##------------------TEXT------------------------##
Orienting polygonal parts without sensors

			
				Kenneth Y. Goldberg
				Algorithmica 10(3 (special issue on computational robotics)):201–225, Aug 1993
				file://usc.edu/pub/iris/algo.ps.Z

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Atomic-meshes-from-seismic-images-to-reservoir-simulation.html
##-----------------TITLE------------------------##
Atomic meshes: from seismic images to reservoir simulation
##------------------TEXT------------------------##
Atomic meshes: from seismic images to reservoir simulation

			
				Dave Hale
				Proc. 8th Eur. Conf. Mathematics of Oil Recovery (ECMOR 2002), Sep 2002
				http://sepwww.stanford.edu/oldsep/hale/Hale083002AtomicMeshes.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Low-latency-photon-mapping-via-block-hashing.html
##-----------------TITLE------------------------##
Low-latency photon mapping via block hashing
##------------------TEXT------------------------##
Low-latency photon mapping via block hashing

			
				Vincent C. H. Ma
and Michael D. McCool
				Proc. SIGGRAPH/Eurographics Graphics Hardware Worksh., Sep 2002, pp. 89–98
				Tech. report CS-2002-15, Univ. of Waterloo, School of Computer Science, Feb 2002
				http://www.cgl.uwaterloo.ca/Projects/rendering/Papers/CS-2002-15.pdf
				http://www.cgl.uwaterloo.ca/Projects/rendering/Papers/phothash.pdf

				Cites:
				On nearest neighbor graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Synchronizing-monotonic-automata.html
##-----------------TITLE------------------------##
Synchronizing monotonic automata
##------------------TEXT------------------------##
Synchronizing monotonic automata

			
				Dimitry S. Ananichev
and Mikhail V. Volkov
				Proc. 7th Int. Conf. Developments in Language Theory (DLT 2003), Lecture Notes in Computer Science 2710, Z. Ésik
and Z. Fülöp, ed., Springer-Verlag, Aug 2003, pp. 111–121

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Internal-loops-in-RNA-secondary-structure-prediction.html
##-----------------TITLE------------------------##
Internal loops in RNA secondary structure prediction
##------------------TEXT------------------------##
Internal loops in RNA secondary structure prediction

			
				Rune B. Lyngsø,
Michael Zuker,
and Christian Nørgaard Storm Pedersen
				Proc. 3rd Int. Conf. Computational Molecular Biology (RECOMB '99), ACM, Apr 1999
				http://www.daimi.au.dk/~cstorm/papers/recomb99_rna.ps

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-free-Lagrange-method-for-gas-dynamics.html
##-----------------TITLE------------------------##
A free Lagrange method for gas-dynamics
##------------------TEXT------------------------##
A free Lagrange method for gas-dynamics

			
				Robert Whitehurst
				Monthly Notices of the Royal Astronomical Soc. 277:655–680, 1995

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-CCCG-2001-logo.html
##-----------------TITLE------------------------##
The CCCG 2001 logo
##------------------TEXT------------------------##
The CCCG 2001 logo

			
				Erik D. Demaine,
Martin L. Demaine,
and Anna Lubiw
				Proc. 13th Canad. Conf. Computational Geometry, Aug 2001, pp. iv–v
				http://compgeo.math.uwaterloo.ca/~cccg01/proceedings/short/eddemaine-67778.ps

				Cites:
				A disk-packing algorithm for an origami magic trick

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Adaptive-finite-element-analysis-of-2-D-static-and-steady-state-electromagnetic-problems.html
##-----------------TITLE------------------------##
Adaptive finite element analysis of 2-D static and steady-state electromagnetic problems
##------------------TEXT------------------------##
Adaptive finite element analysis of 2-D static and steady-state electromagnetic problems

			
				Paolo Fernandes
and Paola Girdinio
				Int. J. Numerical Methods in Engineering 45(2):215–243, May 1999

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Trees-in-TeX.html
##-----------------TITLE------------------------##
Trees in \TeX
##------------------TEXT------------------------##
Trees in \TeX

			
				David Eppstein
				TUGboat 6(1):31, 1985
				http://www.ics.uci.edu/~eppstein/pubs/p-ttree.tex.Z

				Cited by:
				Working Group 1: Education, Addendum ‘Publiceren met LaTeX’

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Uninscribable-4-regular-polyhedron.html
##-----------------TITLE------------------------##
Uninscribable 4-regular polyhedron
##------------------TEXT------------------------##
Uninscribable 4-regular polyhedron

			
				David Eppstein
and Michael B. Dillencourt
				Electronic Geometry Models, 2003
				http://www.eg-models.de/2003.08.001/

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-translation-scale-diagram-for-point-containing-placements-of-a-convex-polygon.html
##-----------------TITLE------------------------##
The translation-scale diagram for point-containing placements of a convex polygon
##------------------TEXT------------------------##
The translation-scale diagram for point-containing placements of a convex polygon

			
				Gill Barequet
and Matthew T. Dickerson
				Proc. 12th Canad. Conf. Computational Geometry, Aug 2000
				http://www.cs.unb.ca/conf/cccg/eProceedings/20.ps.gz

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-Parallel-Algorithms-for-Closest-Point-Problems.html
##-----------------TITLE------------------------##
Efficient Parallel Algorithms for Closest Point Problems
##------------------TEXT------------------------##
Efficient Parallel Algorithms for Closest Point Problems

			
				Peter Su
				Ph.D. thesis, Duke Univ., Dept. of Computer Science, 1994
				Tech. report CS-1994-22, Duke Univ., Dept. of Computer Science, 1994
				ftp://ftp.cs.duke.edu/pub/dist/techreport/1994/1994-22.ps.Z

				Cites:
				The expected extremes in a Delaunay triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-retrieval-of-scattered-information.html
##-----------------TITLE------------------------##
Parallel retrieval of scattered information
##------------------TEXT------------------------##
Parallel retrieval of scattered information

			
				Torben Hagerup
and Manfred Nowak
				Proc. 16th Int. Coll. Automata, Languages, and Programming (ICALP 1989), Lecture Notes in Computer Science 372, Giorgio Ausiello,
Mariangiola Dezani-Ciancaglini,
and Simona Ronchi Della Rocca, ed., Springer-Verlag, Jul 1989, pp. 439–450

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Graph-Algorithms-for-Complex-Networks.html
##-----------------TITLE------------------------##
Graph Algorithms for Complex Networks
##------------------TEXT------------------------##
Graph Algorithms for Complex Networks

			
				Joseph Yannkae Wang
				Ph.D. thesis, Univ. of California, Irvine, Donald Bren School of Information and Computer Sciences, 2003
				http://www.ics.uci.edu/~eppstein/pubs/notmine/Wan-PhD-03.ps.gz

				Cites:
				Finding short paths in small-world networks: when being intelligent requires being right only half the timeFast approximation of centralityA steady state model for graph power laws

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-improved-ray-shooting-method-for-constructive-solid-geometry-models-via-tree-contraction.html
##-----------------TITLE------------------------##
An improved ray shooting method for constructive solid geometry models via tree contraction
##------------------TEXT------------------------##
An improved ray shooting method for constructive solid geometry models via tree contraction

			
				Michael T. Goodrich
				Int. J. Computational Geometry & Applications 8(1):1–23, Feb 1998

				Cites:
				Asymptotic speed-ups in constructive solid geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Quasistatic-scale-free-networks.html
##-----------------TITLE------------------------##
Quasistatic scale-free networks
##------------------TEXT------------------------##
Quasistatic scale-free networks

			
				G. Mukherjee
and Subhrangshu Sekhar Manna
				Physical Review E 67(012101), Jan 2003
				arXiv.org e-Print archive, cond-mat/0207476

				Cites:
				A steady state model for graph power laws

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithmics-for-Hard-Problems-Introduction-to-Combinatorial-Optimization-Randomization-Approximation-and-Heuristics.html
##-----------------TITLE------------------------##
Algorithmics for Hard Problems: Introduction to Combinatorial Optimization, Randomization, Approximation, and Heuristics
##------------------TEXT------------------------##
Algorithmics for Hard Problems: Introduction to Combinatorial Optimization, Randomization, Approximation, and Heuristics

			
				Juraj Hromkovič
				Springer-Verlag, 2001

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Characterization-and-recognition-of-point-halfspace-and-related-orders.html
##-----------------TITLE------------------------##
Characterization and recognition of point-halfspace and related orders
##------------------TEXT------------------------##
Characterization and recognition of point-halfspace and related orders

			
				Paul J. Tanenbaum,
Michael T. Goodrich,
and Edward R. Scheinerman
				Proc. 2nd Int. Symp. Graph Drawing (GD 1994), Lecture Notes in Computer Science 894, Roberto Tamassia
and Ioannis G. Tollis, ed., Springer-Verlag, 1994
				http://ftp.arl.mil/~pjt/publications/gd94.ps

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Arboricity-and-bipartite-subgraph-listing-algorithms.html
##-----------------TITLE------------------------##
Arboricity and bipartite subgraph listing algorithms
##------------------TEXT------------------------##
Arboricity and bipartite subgraph listing algorithms

			
				David Eppstein
				Information Processing Letters 51(4):207–211, Aug 1994
				Tech. report 94-11, Univ. of California, Irvine, Dept. of Information and Computer Science, 1994
				Mathematical Reviews 95j:05157
				http://www.ics.uci.edu/~eppstein/pubs/Epp-TR-94-11.pdf
				http://dx.doi.org/10.1016/0020-0190(94)90121-X

				Cited by:
				Theoretical foundations of association rulesScalable algorithms for association miningOn maximal frequent and minimal infrequent sets in binary matricesConsensus algorithms for the generation of all maximal bicliquesScalable Data Mining for Rules

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-parallel-algorithm-for-finding-the-constrained-Voronoi-diagram-of-line-segments-in-the-plane.html
##-----------------TITLE------------------------##
A parallel algorithm for finding the constrained Voronoi diagram of line segments in the plane
##------------------TEXT------------------------##
A parallel algorithm for finding the constrained Voronoi diagram of line segments in the plane

			
				Francis Y. L. Chin,
Der-Tsai Lee,
and Cao An Wang
				Proc. 6th Worksh. Algorithms and Data Structures (WADS 1999), Lecture Notes in Computer Science 1663, Frank K. H. A. Dehne,
Arvind Gupta,
Jörg-Rudiger Sack,
and Roberto Tamassia, ed., Springer-Verlag, 1999, pp. 231–240

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-multivariate-two-sample-test-using-the-Voronoi-diagram.html
##-----------------TITLE------------------------##
A multivariate two-sample test using the Voronoi diagram
##------------------TEXT------------------------##
A multivariate two-sample test using the Voronoi diagram

			
				Rex A. Dwyer
and Matthew B. Squire
				Tech. report TR-93-21, North Carolina State Univ., Dept. of Computer Science, Sep 1993
				ftp://ftp.csc.ncsu.edu/pub/tech/93/TR-93-21.ps.Z

				Cites:
				The expected extremes in a Delaunay triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-and-Comprehending-Topology-Persistence-and-Hierarchical-Morse-Complexes.html
##-----------------TITLE------------------------##
Computing and Comprehending Topology: Persistence and Hierarchical Morse Complexes
##------------------TEXT------------------------##
Computing and Comprehending Topology: Persistence and Hierarchical Morse Complexes

			
				Afra Joze Zomorodian
				Ph.D. thesis, Univ. of Illinois, Urbana-Champaign, Dept. of Computer Science, Oct 2001
				Tech. report UIUCDCS-R-2001-2240, Univ. of Illinois, Urbana-Champaign, Dept. of Computer Science, Oct 2001
				http://graphics.stanford.edu/~afra/thesis.html
				http://www.cs.uiuc.edu/Dienst/UI/2.0/Describe/ncstrl.uiuc_cs/UIUCDCS-R-2001-2240

				Cites:
				Emerging challenges in computational topology

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Space-efficient-algorithms-for-Klees-measure-problem.html
##-----------------TITLE------------------------##
Space-efficient algorithms for Klee's measure problem
##------------------TEXT------------------------##
Space-efficient algorithms for Klee's measure problem

			
				Eric Y. Chen
and Timothy Moon-Yew Chan
				Proc. 17th Canad. Conf. Computational Geometry (CCCG 2005), 2005
				http://cccg.cs.uwindsor.ca/papers/18.pdf

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-levels-in-arrangements-of-curves-II-a-simple-inequality-and-its-consequences.html
##-----------------TITLE------------------------##
On levels in arrangements of curves, II: a simple inequality and its consequences
##------------------TEXT------------------------##
On levels in arrangements of curves, II: a simple inequality and its consequences

			
				Timothy Moon-Yew Chan
				Proc. 44th Symp. Foundations of Computer Science (FOCS 2003), IEEE, 2003, pp. 544–550
				http://www.math.uwaterloo.ca/~tmchan/ii_focs.pdf

				Cites:
				Geometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Match-bounded-string-rewriting-systems.html
##-----------------TITLE------------------------##
Match-bounded string rewriting systems
##------------------TEXT------------------------##
Match-bounded string rewriting systems

			
				Alfons Geser,
Dieter Hofbauer,
and Johannes Waldmann
				Proc. 28th Int. Symp. Mathematical Foundations of Computer Science (MFCS 2003), Lecture Notes in Computer Science 2747, Branislav Rovan
and Peter Vojtás, ed., Springer-Verlag, 2003, pp. 449–459
				Tech. report 2003-09, Nat. Inst. Aerospace, 2003
				Tech. report NASA/CR-2003-212685, NASA, Langley Research Ctr., 2003
				http://research.nianet.org/pubs/2003/2003-09.pdf

				Cites:
				One-dimensional peg solitaire, and duotaire

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Free-form-shape-design-using-triangulated-surfaces.html
##-----------------TITLE------------------------##
Free-form shape design using triangulated surfaces
##------------------TEXT------------------------##
Free-form shape design using triangulated surfaces

			
				William Welch
and Andrew Witkin
				Proc. 21st Conf. Computer Graphics and Interactive Techniques (SIGGRAPH 1994), ACM, 1994, pp. 247–256
				http://portal.acm.org/citation.cfm?id=192216

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computer-AlgorithmsC++.html
##-----------------TITLE------------------------##
Computer Algorithms/C++
##------------------TEXT------------------------##
Computer Algorithms/C++

			
				Ellis Horowitz,
Sartaj Sahni,
and Sanguthevar Rajasekaran
				W. H. Freeman, 1996

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Preface-to-Festschrift-for-Zvi-Galil.html
##-----------------TITLE------------------------##
Preface to Festschrift for Zvi Galil
##------------------TEXT------------------------##
Preface to Festschrift for Zvi Galil

			
				Giuseppe F. Italiano
and David Eppstein
				J. Complexity 15(1):1–3, Mar 1999

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-ham-sandwich-cuts.html
##-----------------TITLE------------------------##
Algorithms for ham-sandwich cuts
##------------------TEXT------------------------##
Algorithms for ham-sandwich cuts

			
				Chi-Yuan Lo,
Jiří Matoušek,
and William Steiger
				Discrete & Computational Geometry 11(4):433–452, Jun 1994

				Cites:
				Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Enumerating-a-subset-of-the-integer-points-inside-a-Minkowski-sum.html
##-----------------TITLE------------------------##
Enumerating a subset of the integer points inside a Minkowski sum
##------------------TEXT------------------------##
Enumerating a subset of the integer points inside a Minkowski sum

			
				Ioannis Z. Emiris
				Computational Geometry Theory & Applications 22(1–3):143–166, May 2002

				Cites:
				Zonohedra and zonotopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Inverse-parametric-sequence-alignment.html
##-----------------TITLE------------------------##
Inverse parametric sequence alignment
##------------------TEXT------------------------##
Inverse parametric sequence alignment

			
				Fangting Sun,
David Fernández-Baca,
and Wei Yu
				J. Algorithms 53(1):36–54, Oct 2004

				Cites:
				Setting parameters by example

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Authenticated-data-structures-for-graph-and-geometric-searching.html
##-----------------TITLE------------------------##
Authenticated data structures for graph and geometric searching
##------------------TEXT------------------------##
Authenticated data structures for graph and geometric searching

			
				Michael T. Goodrich,
Roberto Tamassia,
N. Triandopoulos,
and Robert F. Cohen
				Topics in Cryptology: Cryptographers' Track at RSA Conf. 2003, Lecture Notes in Computer Science 2612, Marc Joye, ed., Springer-Verlag, 2003, pp. 295–313

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Hamiltonian-triangulations-for-fast-rendering.html
##-----------------TITLE------------------------##
Hamiltonian triangulations for fast rendering
##------------------TEXT------------------------##
Hamiltonian triangulations for fast rendering

			
				Esther M. Arkin,
Martin Held,
Joseph S. B. Mitchell,
and Steven S. Skiena
				Proc. 2nd Eur. Symp. Algorithms (ESA 1994), Lecture Notes in Computer Science 855, Jan van Leeuwen, ed., Springer-Verlag, Sep 1994, pp. 36–47
				ftp://ams.sunysb.edu/pub/geometry/esa94.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-skip-quadtree-a-simple-dynamic-data-structure-for-multidimensional-data.html
##-----------------TITLE------------------------##
The skip quadtree: a simple dynamic data structure for multidimensional data
##------------------TEXT------------------------##
The skip quadtree: a simple dynamic data structure for multidimensional data

			
				David Eppstein,
Michael T. Goodrich,
and Jonathan Zheng Sun
				Proc. 21st Symp. Computational Geometry, ACM, Jun 2005, pp. 296–305
				ACM Computing Research Repository, cs.CG/0507049

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computational-Geometry-II.html
##-----------------TITLE------------------------##
Computational Geometry II
##------------------TEXT------------------------##
Computational Geometry II

			
				Der-Tsai Lee
				Algorithms and Theory of Computation Handbook, Mikhail J. Atallah, ed., CRC Press, 1999

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/New-algorithms-for-minimum-area-k-gons.html
##-----------------TITLE------------------------##
New algorithms for minimum area $k$-gons
##------------------TEXT------------------------##
New algorithms for minimum area $k$-gons

			
				David Eppstein
				Proc. 3rd Symp. Discrete Algorithms, ACM
and SIAM, Jan 1992, pp. 83–86
				Tech. report 91-59, Univ. of California, Irvine, Dept. of Information and Computer Science, 1991

				Cited by:
				Computing the smallest $k$-enclosing circle and related problemsStacks, queues, and deques with order-statistic operationsFinding subsets maximizing minimum structuresSpanning trees — short or smallCounting convex polygons in planar point setsFinding minimum area simple pentagonsSmallest nonparametric tolerance regionsMinimum area polygons with two reflex angles enclosing $k$ pointsRemoving outliers to minimize area and perimeter

				Journal version is included in "Iterated nearest neighbors".

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-a-triangular-mesh-with-a-constant-number-of-different-edge-lengths.html
##-----------------TITLE------------------------##
Finding a triangular mesh with a constant number of different edge lengths
##------------------TEXT------------------------##
Finding a triangular mesh with a constant number of different edge lengths

			
				Shin-ichi Tanigawa
and Naoki Katoh
				Proc. 17th Canad. Conf. Computational Geometry (CCCG 2005), 2005
				http://cccg.cs.uwindsor.ca/papers/41.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Enumerating-triangulations-of-convex-polytopes.html
##-----------------TITLE------------------------##
Enumerating triangulations of convex polytopes
##------------------TEXT------------------------##
Enumerating triangulations of convex polytopes

			
				Sergei N. Bespamyatnikh
				Proc. Conf.  Discrete Models: Combinatorics, Computation, & Geometry (DM-CCG 2001), Discrete Mathematics & Theoretical Computer Science Proceedings AA, Robert Cori,
Jacques Mazoyer,
Michel Morvan,
and Rémy Mosseri, ed., 2001, pp. 111–122
				http://dmtcs.loria.fr/proceedings/html/dmAA0107.abs.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-shortest-paths-in-line-arrangements.html
##-----------------TITLE------------------------##
On shortest paths in line arrangements
##------------------TEXT------------------------##
On shortest paths in line arrangements

			
				T. Kavitha
and Kasturi R. Varadarajan
				Proc. 15th Canad. Conf. Computational Geometry (CCCG 2003), Dalhousie Univ., Faculty of Computer Science, Aug 2003, pp. 170–173
				http://torch.cs.dal.ca/~cccg/papers/17.pdf

				Cites:
				An efficient algorithm for shortest paths in vertical and horizontal segmentsShortest paths in an arrangement with $k$ line orientations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computational-geometry.html
##-----------------TITLE------------------------##
Computational geometry
##------------------TEXT------------------------##
Computational geometry

			
				Micha Sharir
				Encyclopedia of Computer Science, 1992
				Handbook of Theoretical Computer Science, 1990, pp. 343–390

				Cites:
				Visibility with a moving point of viewHorizon theorems for lines and polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Conceptual-level-design-for-assembly-analysis-using-state-transitional-approach.html
##-----------------TITLE------------------------##
Conceptual level design for assembly analysis using state transitional approach
##------------------TEXT------------------------##
Conceptual level design for assembly analysis using state transitional approach

			
				Wynne Hsu,
Andrew Lim,
and C. S. George Lee
				Proc. Int. Conf. Robotics and Automation (ICRA 1996), IEEE, Apr 1996, vol. 4, pp. 3355–3360
				http://www.iscs.nus.edu.sg/~whsu/publication/raconf96.ps

				Cites:
				Subgraph isomorphism in planar graphs and related problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Robust-incremental-polygon-triangulation-for-surface-rendering.html
##-----------------TITLE------------------------##
Robust incremental polygon triangulation for surface rendering
##------------------TEXT------------------------##
Robust incremental polygon triangulation for surface rendering

			
				Subodh Kumar
				Proc. 8th Int. Conf. in Central Europe on Computer Graphics, Visualization and Computer Vision (WSCG 2000), 2000
				http://wscg.zcu.cz/wscg2000/Papers_2000/Z43.pdf

				Cites:
				Triangulating polygons without large angles

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Generalized-LMT-skeleton-heuristics-for-several-new-classes-of-optimal-triangulations.html
##-----------------TITLE------------------------##
Generalized LMT-skeleton heuristics for several new classes of optimal triangulations
##------------------TEXT------------------------##
Generalized LMT-skeleton heuristics for several new classes of optimal triangulations

			
				Yang Dai
and Naoki Katoh
				Tech. report B-344, Tokyo Inst. of Technology, Dept. of Mathematical and Computing Sciences, Nov 1998
				ftp://ftp.is.titech.ac.jp/pub/tech-reports/B/B-344.ps.gz

				Cites:
				Mesh generation and optimal triangulationEdge insertion for optimal triangulationFinding minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Polynomial-time-approximation-schemes-for-metric-min-sum-median-clustering.html
##-----------------TITLE------------------------##
Polynomial-time approximation schemes for metric min-sum median clustering
##------------------TEXT------------------------##
Polynomial-time approximation schemes for metric min-sum median clustering

			
				Wenceslas Fernandez de la Vega,
Marek Karpinski,
Claire Kenyon,
and Yuval Rabani
				Tech. report TR02-025, Electronic Colloq. on Computational Complexity, 2002
				http://eccc.uni-trier.de/eccc-reports/2002/TR02-025/

				Cites:
				Approximation algorithms for geometric problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-good-aspect-ratio-coarsening-for-unstructured-meshes.html
##-----------------TITLE------------------------##
Optimal good-aspect-ratio coarsening for unstructured meshes
##------------------TEXT------------------------##
Optimal good-aspect-ratio coarsening for unstructured meshes

			
				Gary L. Miller,
Dafna Talmor,
and Shang-Hua Teng
				Proc. 8th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1997, pp. 538–547

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Arrangements.html
##-----------------TITLE------------------------##
Arrangements
##------------------TEXT------------------------##
Arrangements

			
				Dan Halperin
				Handbook of Discrete & Computational Geometry, Discrete Mathematics and its Applications, Jacob E. Goodman
and Joseph O'Rourke, ed., CRC Press, 1997, pp. 389–412

				Cites:
				Arrangements of polytopes and the 1-Steiner problem

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Structured-p-facility-location-problems-on-the-line-solvable-in-polynomial-time.html
##-----------------TITLE------------------------##
Structured $p$-facility location problems on the line solvable in polynomial time
##------------------TEXT------------------------##
Structured $p$-facility location problems on the line solvable in polynomial time

			
				Vernon Ning Hsu,
Timothy J. Lowe,
and Arie Tamir
				Operations Research Letters 21(4):159–164, 1997

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/General-purpose-parallel-computing.html
##-----------------TITLE------------------------##
General purpose parallel computing
##------------------TEXT------------------------##
General purpose parallel computing

			
				William F. McColl
				Proc. ALCOM Spring School on Parallel Computation, Cambridge Int. Ser. Parallel Computation, Alan M. Gibbons
and Paul G. Spirakis, ed., Cambridge Univ. Press, 1993, pp. 337–391
				http://users.comlab.ox.ac.uk/oucl/users/bill.mccoll/p2.ps.Z

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-the-girth-of-a-planar-graph.html
##-----------------TITLE------------------------##
Computing the girth of a planar graph
##------------------TEXT------------------------##
Computing the girth of a planar graph

			
				Hristo N. Djidjev
				Proc. 27th Int. Coll. Automata, Languages and Programming (ICALP 2000), Lecture Notes in Computer Science 1853, Ugo Montanari,
José D. P. Rolim,
and Emo Welzl, ed., Springer-Verlag, 2000, pp. 821–831

				Cites:
				Subgraph isomorphism in planar graphs and related problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Range-counting-over-multidimensional-data-streams.html
##-----------------TITLE------------------------##
Range counting over multidimensional data streams
##------------------TEXT------------------------##
Range counting over multidimensional data streams

			
				Subhash Suri,
Csaba D. Tóth,
and Yunhong Zhou
				Proc. 20th Symp. Computational Geometry, ACM, 2004, pp. 160–169

				Cites:
				Deterministic sampling and range counting in geometric data streams

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Enumerating-foldings-and-unfoldings-between-polygons-and-polytopes.html
##-----------------TITLE------------------------##
Enumerating foldings and unfoldings between polygons and polytopes
##------------------TEXT------------------------##
Enumerating foldings and unfoldings between polygons and polytopes

			
				Erik D. Demaine,
Martin L. Demaine,
Anna Lubiw,
and Joseph O'Rourke
				ACM Computing Research Repository, cs.CG/0107024

				Cites:
				Ununfoldable polyhedra

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fully-dynamic-output-bounded-single-source-shortest-path-problem.html
##-----------------TITLE------------------------##
Fully dynamic output bounded single source shortest path problem
##------------------TEXT------------------------##
Fully dynamic output bounded single source shortest path problem

			
				Daniele Frigioni,
Alberto Marchetti Spaccamela,
and Umberto Nanni
				Proc. 7th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1996, pp. 212–221.

				Cites:
				Planar orientations with low out-degree and compaction of adjacency matrices

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Traversals-of-object-structures-specification-and-efficient-implementation.html
##-----------------TITLE------------------------##
Traversals of object structures: specification and efficient implementation
##------------------TEXT------------------------##
Traversals of object structures: specification and efficient implementation

			
				Karl Lieberherr,
Boaz Patt-Shamir,
and Doug Orleans
				ACM Trans. Programming Languages and Systems (TOPLAS) 26(2):370–412, Mar 2004
				http://portal.acm.org/citation.cfm?id=973102

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Repetitive-hidden-surface-removal-for-polyhedra.html
##-----------------TITLE------------------------##
Repetitive hidden surface removal for polyhedra
##------------------TEXT------------------------##
Repetitive hidden surface removal for polyhedra

			
				Marco Pellegrini
				J. Algorithms 21(1):80–101, Jul 1996
				Proc. 3rd Worksh. Algorithms and Data Structures (WADS 1993), Lecture Notes in Computer Science 709, Frank K. H. A. Dehne,
Jörg-Rudiger Sack,
Nicola Santoro,
and Sue Whitesides, ed., Springer-Verlag, Aug 1993, pp. 541–552, 

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Enumerating-triangulation-paths.html
##-----------------TITLE------------------------##
Enumerating triangulation paths
##------------------TEXT------------------------##
Enumerating triangulation paths

			
				Adrian Dumitrescu,
Bernd Gärtner,
Samuele Pedroni,
and Emo Welzl
				Proc. 12th Canad. Conf. Computational Geometry, Aug 2000
				Computational Geometry Theory & Applications 20(1–2):3–12, Oct 2001
				http://www.cs.unb.ca/conf/cccg/eProceedings/10.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-universal-resolving-algorithm-Inverse-computation-in-a-functional-language.html
##-----------------TITLE------------------------##
The universal resolving algorithm: Inverse computation in a functional language
##------------------TEXT------------------------##
The universal resolving algorithm: Inverse computation in a functional language

			
				Sergei A. Abramov
and Robert Glück
				Proc. 5th Int. Conf. Mathematics of Program Construction (MPC 2000), Lecture Notes in Computer Science 1837, Roland Backhouse
and José Nuno Fonseca de Oliveira, ed., Springer-Verlag, 2000, pp. 187–212
				ftp://ftp.diku.dk/diku/semantics/papers/D-425.ps.gz

				Cites:
				A heuristic approach to program inversion

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Some-graphic-uses-of-an-even-number-of-odd-nodes.html
##-----------------TITLE------------------------##
Some graphic uses of an even number of odd nodes
##------------------TEXT------------------------##
Some graphic uses of an even number of odd nodes

			
				Kathie Cameron
and Jack Edmonds
				Proc. 10th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1999, pp. S872

				Cites:
				On the parity of graph spanning tree numbers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Generation-and-Comparison-of-Constraint-Based-Heuristics-Using-the-Structure-of-Constraints.html
##-----------------TITLE------------------------##
Generation and Comparison of Constraint-Based Heuristics Using the Structure of Constraints
##------------------TEXT------------------------##
Generation and Comparison of Constraint-Based Heuristics Using the Structure of Constraints

			
				Robert Rodošek
				Ph.D. thesis, Imperial College of Science, Technology, and Medicine, Faculty of Engineering, Jul 1997
				http://www.icparc.ic.ac.uk/papers/robert-thesis.ps

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-3D-refinementderefinement-algorithm-for-solving-evolution-problems.html
##-----------------TITLE------------------------##
A 3D refinement/derefinement algorithm for solving evolution problems
##------------------TEXT------------------------##
A 3D refinement/derefinement algorithm for solving evolution problems

			
				Ángel Plaza de la Hoz,
Miquel Angel Padron Mecina,
and Graham F. Carey
				Applied Numerical Mathematics 32(4):401–418, Apr 2000

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Spanning-trees-short-or-small.html
##-----------------TITLE------------------------##
Spanning trees — short or small
##------------------TEXT------------------------##
Spanning trees — short or small

			
				R. Ravi,
R. Sundaram,
Madhav V. Marathe,
Daniel J. Rosenkrantz,
and S. S. Ravi
				SIAM J. Discrete Mathematics 9(2):178–200, May 1996
				Proc. 5th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1994, pp. 546–555

				Cites:
				New algorithms for minimum area $k$-gonsIterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Translating-a-convex-polygon-to-contain-a-maximum-number-of-points.html
##-----------------TITLE------------------------##
Translating a convex polygon to contain a maximum number of points
##------------------TEXT------------------------##
Translating a convex polygon to contain a maximum number of points

			
				Gill Barequet,
Matthew T. Dickerson,
and Petru Pau
				Proc. 7th Canad. Conf. Computational Geometry, Aug 1995, pp. 61–66
				Computational Geometry Theory & Applications 8(4):167–179, Sep 1997
				Proc. 4th Worksh. Computational Geometry, Army Research Office
and State Univ. of New York at Stony Brook, Mathematical Sciences Inst., 1994, pp. 14

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-Complexity-of-Computation-on-the-Parallel-Random-Access-Machine.html
##-----------------TITLE------------------------##
The Complexity of Computation on the Parallel Random Access Machine
##------------------TEXT------------------------##
The Complexity of Computation on the Parallel Random Access Machine

			
				Faith E. Fich
				Synthesis of Parallel Algorithms, John H. Reif, ed., Morgan Kaufmann, 1993
				http://www-old.cs.toronto.edu/~fich/PRAMsurvey.ps

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fast-optimal-leaf-ordering-for-hierarchical-clustering.html
##-----------------TITLE------------------------##
Fast optimal leaf ordering for hierarchical clustering
##------------------TEXT------------------------##
Fast optimal leaf ordering for hierarchical clustering

			
				Ziv Bar-Joseph,
David K. Gifford,
and Tommi S. Jaakkola
				Bioinformatics 17(Suppl. 1):S22–S29, 2001
				http://www.psrg.lcs.mit.edu/pubs/BarGifJaa-ismb01.pdf

				Cites:
				Fast hierarchical clustering and other applications of dynamic closest pairs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Internet-packet-filter-management-and-rectangle-geometry.html
##-----------------TITLE------------------------##
Internet packet filter management and rectangle geometry
##------------------TEXT------------------------##
Internet packet filter management and rectangle geometry

			
				David Eppstein
and Shanmugauelayut Muthukrishnan
				Proc. 12th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2001, pp. 827–835
				ACM Computing Research Repository, cs.CG/0010018

				Cited by:
				An expert system for analyzing firewall rulesTime and space efficient multi-method dispatchingDynamic rectilinear point location using hashingRange searching in categorical data: colored range searching on gridFast and scalable conflict detection for packet classifiersNew algorithms for subset query, partial match, orthogonal range searching, and related problemsCompressing two-dimensional routing tablesSorting and searching using ternary CAMsFast internet packet filtering on any number of attributes via multi-dimensional point stabbingI/O-efficient structures for orthogonal range-max and stabbing-max queriesCategorical range queries in large databasesFirewall policy advisor for anomaly detection and rule editingModeling and management of firewall policiesDiscovery of policy anomalies in distributed firewallsManagement and translation of filtering security policiesFirewall design: consistency, completeness and compactnessCompressing rectilinear pictures and minimizing access control lists

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Layouts-of-graph-subdivisions.html
##-----------------TITLE------------------------##
Layouts of graph subdivisions
##------------------TEXT------------------------##
Layouts of graph subdivisions

			
				Vida Dujmović
and David R. Wood
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 133–143

				Cites:
				Separating thickness from geometric thickness

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-impossibility-theorem-for-clustering.html
##-----------------TITLE------------------------##
An impossibility theorem for clustering
##------------------TEXT------------------------##
An impossibility theorem for clustering

			
				Jon Kleinberg
				Proc. 15th Conf. Neiral Information Processing Systems, Advances in Neural Information Processing Systems 15, Suzanna Becker,
Sebastian Thrun,
and Klaus Obermayer, ed., 2002
				http://www.cs.cornell.edu/home/kleinber/nips15.ps

				Cites:
				Approximation algorithms for geometric problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-note-on-improving-the-running-time-of-a-class-of-parallel-algorithms-using-randomization.html
##-----------------TITLE------------------------##
A note on improving the running time of a class of parallel algorithms using randomization
##------------------TEXT------------------------##
A note on improving the running time of a class of parallel algorithms using randomization

			
				Carsten F. Dorgerloh
and Jürgen Wirtgen
				Tech. report 85159-CS, Rheinische Friedrich-Wilhelms-Univ. Bonn, Inst. für Informatik, Dec 1996
				http://cs.uni-bonn.de/info5/publications/abstract/85159-cs.abstract-en.html

				Cites:
				Planar orientations with low out-degree and compaction of adjacency matrices

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Sample-shuffling-for-quality-hierarchic-surface-meshing.html
##-----------------TITLE------------------------##
Sample shuffling for quality hierarchic surface meshing
##------------------TEXT------------------------##
Sample shuffling for quality hierarchic surface meshing

			
				Tamal K. Dey,
Joachim Giesen,
and James Hudson
				Proc. 10th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 2001, pp. 143–154

				Cites:
				Mesh generation and optimal triangulationOptimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computational-geometry-Some-easy-questions-and-their-recent-solutions.html
##-----------------TITLE------------------------##
Computational geometry - Some easy questions and their recent solutions
##------------------TEXT------------------------##
Computational geometry - Some easy questions and their recent solutions

			
				Franz Aurenhammer
				J. Universal Computer Science 7(5):338–354, 2001

				Cites:
				Mesh generation and optimal triangulationRaising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-framework-for-dynamic-graph-drawing.html
##-----------------TITLE------------------------##
A framework for dynamic graph drawing
##------------------TEXT------------------------##
A framework for dynamic graph drawing

			
				Robert F. Cohen,
Giuseppe Di Battista,
Roberto Tamassia,
Ioannis G. Tollis,
and Paola Bertolazzi
				Proc. 8th Symp. Computational Geometry, ACM, Jun 1992, pp. 261–270
				Tech. report CS-92-34, Brown Univ., Computer Science Dept., Aug 1992
				http://www.cs.brown.edu/publications/techreports/reports/CS-92-34.html

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Happy-endings-for-flip-graphs.html
##-----------------TITLE------------------------##
Happy endings for flip graphs
##------------------TEXT------------------------##
Happy endings for flip graphs

			
				David Eppstein
				Proc. 23rd Symp. Computational Geometry, ACM, 2007, pp. 92–101
				ACM Computing Research Repository, cs.CG/0610092

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-approximation-ratio-of-the-MST-based-heuristic-for-the-energy-efficient-Broadcast-problem-in-static-ad-hoc-radio-networks.html
##-----------------TITLE------------------------##
On the approximation ratio of the MST-based heuristic for the energy-efficient Broadcast problem in static ad-hoc radio networks
##------------------TEXT------------------------##
On the approximation ratio of the MST-based heuristic for the energy-efficient Broadcast problem in static ad-hoc radio networks

			
				Andrea E. F. Clementi,
Gurvan Huiban,
Gianluca Rossi,
Yann C. Verhoeven,
and Paolo Penna
				Proc. Int. Parallel and Distributed Processing Symp. (IPDPS'03)  , IEEE, 2003
				http://axp.mat.uniroma2.it/~rossig/papers/wman2003.pdf

				Cites:
				Offline algorithms for dynamic minimum spanning tree problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-randomized-approximation-scheme-for-metric-MAX-CUT.html
##-----------------TITLE------------------------##
A randomized approximation scheme for metric MAX-CUT
##------------------TEXT------------------------##
A randomized approximation scheme for metric MAX-CUT

			
				Wenceslas Fernandez de la Vega
and Claire Kenyon
				Proc. 39th Symp. Foundations of Computer Science, IEEE, Nov 1998, pp. 468–471
				http://www.lri.fr/~kenyon/Publis/lalo.ps.gz

				Cites:
				Approximation algorithms for geometric problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-maximum-cliques-in-3D-unit-disk-graphs.html
##-----------------TITLE------------------------##
Approximation algorithms for maximum cliques in 3D unit-disk graphs
##------------------TEXT------------------------##
Approximation algorithms for maximum cliques in 3D unit-disk graphs

			
				Peyman Afshani
and Timothy Moon-Yew Chan
				Proc. 17th Canad. Conf. Computational Geometry (CCCG 2005), 2005
				http://cccg.cs.uwindsor.ca/papers/69.pdf

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fundamentals-of-media-theory.html
##-----------------TITLE------------------------##
Fundamentals of media theory
##------------------TEXT------------------------##
Fundamentals of media theory

			
				Sergei Ovchinnikov
				arXiv.org e-Print archive, math.CO/0610053

				Cites:
				Algorithms for drawing mediaAlgorithms for mediaMedia Theory

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-interactive-multi-user-system-for-simultaneous-graph-drawing.html
##-----------------TITLE------------------------##
An interactive multi-user system for simultaneous graph drawing
##------------------TEXT------------------------##
An interactive multi-user system for simultaneous graph drawing

			
				Stephen G. Kobourov
and Chandan Pitta
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 493–501

				Cites:
				Geometric thickness of complete graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Kinetic-collision-detection-between-simple-polygons.html
##-----------------TITLE------------------------##
Kinetic collision detection between simple polygons
##------------------TEXT------------------------##
Kinetic collision detection between simple polygons

			
				Julien Basch,
Jeffrey Gordon Erickson,
Leonidas J. Guibas,
John E. Hershberger,
and Li Zhang
				Proc. 10th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1999, pp. 102–111
				http://compgeom.cs.uiuc.edu/~jeffe/pubs/cdsimple.html

				Cites:
				Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-solution-based-triangular-and-tetrahedral-mesh-quality-indicator.html
##-----------------TITLE------------------------##
A solution-based triangular and tetrahedral mesh quality indicator
##------------------TEXT------------------------##
A solution-based triangular and tetrahedral mesh quality indicator

			
				Martin Berzins
				SIAM J. Scientific Computing 19(6):2051–2060, 1998

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Managing-large-terrain-data-sets-with-a-multiresolution-structure.html
##-----------------TITLE------------------------##
Managing large terrain data sets with a multiresolution structure
##------------------TEXT------------------------##
Managing large terrain data sets with a multiresolution structure

			
				Paola Magillo
and Vittorio Bertocci
				Proc. 11th Int. Worksh. Database and Expert Systems Applications, A. M. Tjoa,
R. R. Wagner,
and Ala Al-Zobaidie, ed., IEEE, Sep 2000, pp. 894–898
				http://citeseer.nj.nec.com/magillo00managing.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computation-and-maintenance-of-visibility-and-shadows-in-the-plane.html
##-----------------TITLE------------------------##
Computation and maintenance of visibility and shadows in the plane
##------------------TEXT------------------------##
Computation and maintenance of visibility and shadows in the plane

			
				Sherif Ghali
				Proc. 6th Int. Conf. Computer Graphics & Visualization, Feb 1998, pp. 117–124
				http://www.dgp.toronto.edu/~ghali/papers/wscg98.ps.gz

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Analysis-of-the-quasi-Monte-Carlo-integration-of-the-rendering-equation.html
##-----------------TITLE------------------------##
Analysis of the quasi-Monte Carlo integration of the rendering equation
##------------------TEXT------------------------##
Analysis of the quasi-Monte Carlo integration of the rendering equation

			
				Laszlo Szirmay-Kalos
and Werner Purgathofer
				Tech. report TR-186-2-98-24, Technische Univ. Wien, Inst. of Computer Graphics, Aug 1998
				Proc. 7th Int. Conf. in Central Europe on Computer Graphics, Visualization and Interactive Digital Media (WSCG 1999), Univ. of West Bohemia Press, 1999
				http://www.cg.tuwien.ac.at/research/TR/98/TR-186-2-98-24Abstract.html
				http://wscg.zcu.cz/wscg99/papers/h51-final.ps.gz

				Cites:
				Computing the discrepancy with applications to supersampling patterns

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-sequential-and-parallel-algorithms-for-computing-recovery-points-in-trees-and-paths.html
##-----------------TITLE------------------------##
Efficient sequential and parallel algorithms for computing recovery points in trees and paths
##------------------TEXT------------------------##
Efficient sequential and parallel algorithms for computing recovery points in trees and paths

			
				Marek Chrobak,
David Eppstein,
Giuseppe F. Italiano,
and Moti Yung
				Proc. 2nd Symp. Discrete Algorithms, ACM
and SIAM, Jan 1991, pp. 158–167
				ALCOM Report, Univ. di Roma “La Sapienza”, Dip. di Informatica e Sistemistica, 1991

				Cited by:
				Optimal folding of bit-sliced stacks

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Counting-triangle-crossings-and-halving-planes.html
##-----------------TITLE------------------------##
Counting triangle crossings and halving planes
##------------------TEXT------------------------##
Counting triangle crossings and halving planes

			
				Tamal K. Dey
and Herbert Edelsbrunner
				Discrete & Computational Geometry 12:281–289, 1994
				Proc. 9th Symp. Computational Geometry, ACM, May 1993, pp. 270–273
				Tech. report UIUCDCS-R-92-1781, Univ. of Illinois, Urbana-Champaign, Dept. of Computer Science, Nov 1992
				http://www.cs.uiuc.edu/Dienst/UI/2.0/Describe/ncstrl.uiuc_cs/UIUCDCS-R-92-1781

				Cites:
				Improved bounds for intersecting triangles and halving planes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lower-bounds-for-dynamic-connectivity.html
##-----------------TITLE------------------------##
Lower bounds for dynamic connectivity
##------------------TEXT------------------------##
Lower bounds for dynamic connectivity

			
				Pǎtraşcu, Mihai 
and Erik D. Demaine
				Proc. 36th Symp. Theory of Computing (STOC 2004), ACM, 2004
				http://theory.lcs.mit.edu/~edemaine/papers/DynamicConnectivity_STOC2004/

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-density-of-iterated-crossing-points-and-a-gap-result-for-triangulations-of-finite-point-sets.html
##-----------------TITLE------------------------##
The density of iterated crossing points and a gap result for triangulations of finite point sets
##------------------TEXT------------------------##
The density of iterated crossing points and a gap result for triangulations of finite point sets

			
				Rolf Klein
and Martin Kutz
				ACM Computing Research Repository, cs.CG/0601033

				Cites:
				Dilation-free planar graphsMinimum dilation stars

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Complexity-and-Completeness-of-Finding-Another-Solution-and-its-Application-to-Puzzles.html
##-----------------TITLE------------------------##
Complexity and Completeness of Finding Another Solution and its Application to Puzzles
##------------------TEXT------------------------##
Complexity and Completeness of Finding Another Solution and its Application to Puzzles

			
				Takayuki Yato
				Masters thesis, Univ. of Tokyo, Dept. of Information Science, Jan 2003
				http://www-imai.is.s.u-tokyo.ac.jp/~yato/data2/MasterThesis.ps

				Cites:
				On the NP-completeness of cryptarithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-monotone-finite-element-scheme-for-convection-diffusion-equations.html
##-----------------TITLE------------------------##
A monotone finite element scheme for convection-diffusion equations
##------------------TEXT------------------------##
A monotone finite element scheme for convection-diffusion equations

			
				Jinchao Xu
and Ludmil Zikatanov
				Mathematics of Computation 68(228):1429–1446, Oct 1999
				http://www.ams.org/jourcgi/jour-pbprocess?fn=110&arg1=S0025-5718-99-01148-5&u=/mcom/1999-68-228/

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-separable-partitioning-in-the-plane.html
##-----------------TITLE------------------------##
Optimal separable partitioning in the plane
##------------------TEXT------------------------##
Optimal separable partitioning in the plane

			
				Michal Benelli
and Refael Hassin
				Discrete Applied Mathematics 59:215–224, 1995

				Cites:
				Dynamic three-dimensional linear programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-sensory-uncertainty-field-model-for-unknown-and-non-stationary-mobile-robot-environments.html
##-----------------TITLE------------------------##
A sensory uncertainty field model for unknown and non-stationary mobile robot environments
##------------------TEXT------------------------##
A sensory uncertainty field model for unknown and non-stationary mobile robot environments

			
				Nikos A. Vlassis
and Panayiotis D. Tsanakas
				Proc. Int. Conf. Robotics and Automation (ICRA 1998), IEEE, May 1998, vol. 1, pp. 363–368
				http://carol.wins.uva.nl/~vlassis/publications/papers/icra98.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Edge-constrained-marching-triangles.html
##-----------------TITLE------------------------##
Edge-constrained marching triangles
##------------------TEXT------------------------##
Edge-constrained marching triangles

			
				Neil H. McCormick
and Robert B. Fisher
				Tech. report EDI-INF-RR-0188, Univ. of Edinburgh, Division of Informatics, Jun 2002
				http://www.inf.ed.ac.uk/publications/online/0188.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Derandomization-in-computational-geometry.html
##-----------------TITLE------------------------##
Derandomization in computational geometry
##------------------TEXT------------------------##
Derandomization in computational geometry

			
				Jiří Matoušek
				J. Algorithms 20(3):545–581, May 1996
				Handbook of Computational Geometry, Jörg-Rudiger Sack
and Jorge Urrutia, ed., Elsevier, 2000, pp. 559–595

				Cites:
				A deterministic linear time algorithm for geometric separators and its applicationsApproximating center points with iterated Radon points

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Points-and-combinatorics.html
##-----------------TITLE------------------------##
Points and combinatorics
##------------------TEXT------------------------##
Points and combinatorics

			
				Oswin Aichholzer,
Franz Aurenhammer,
and Hannes Krasser
				Telematic 1:12–17, 2002
				http://www.igi.tugraz.at/telematik/tele1-02_aich-combi.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Converting-triangulations-to-quadrangulations.html
##-----------------TITLE------------------------##
Converting triangulations to quadrangulations
##------------------TEXT------------------------##
Converting triangulations to quadrangulations

			
				Suneeta Ramaswami,
Pedro A. Ramos,
and Godfried T. Toussaint
				Proc. 7th Canad. Conf. Computational Geometry, Aug 1995, pp. 297–302
				Computational Geometry Theory & Applications 9(4):257–276, Mar 1998

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-graph-orientation-with-storage-applications.html
##-----------------TITLE------------------------##
Optimal graph orientation with storage applications
##------------------TEXT------------------------##
Optimal graph orientation with storage applications

			
				Oswin Aichholzer,
Franz Aurenhammer,
and Günter Rote
				SFB Report Series, Technische Univ. Graz, Inst. für Grundlagen der Informationsverarbeitung, Dec 1995
				http://www.cis.tugraz.at/igi/oaich/publications/postscript/paper-13a.ps

				Cites:
				Planar orientations with low out-degree and compaction of adjacency matrices

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-O(nlog-n)-algorithm-for-maximum-st-flow-in-a-directed-planar-graph.html
##-----------------TITLE------------------------##
An $O(n\log n)$ algorithm for maximum $st$-flow in a directed planar graph
##------------------TEXT------------------------##
An $O(n\log n)$ algorithm for maximum $st$-flow in a directed planar graph

			
				Glencora Borradaile
and Philip N. Klein
				Proc. 17th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2006, pp. 524–533

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-case-study-in-algorithm-engineering-for-geometric-computing.html
##-----------------TITLE------------------------##
A case study in algorithm engineering for geometric computing
##------------------TEXT------------------------##
A case study in algorithm engineering for geometric computing

			
				Roberto Tamassia
and Luca Vismara
				Int. J. Computational Geometry & Applications 11(1):15–70, Feb 2001

				Cites:
				Maintenance of a minimum spanning forest in a dynamic planar graph

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Quasi-fully-dynamic-algorithms-for-two-connectivity-cycle-equivalence-and-related-problems.html
##-----------------TITLE------------------------##
Quasi-fully dynamic algorithms for two-connectivity, cycle equivalence and related problems
##------------------TEXT------------------------##
Quasi-fully dynamic algorithms for two-connectivity, cycle equivalence and related problems

			
				Madhukar R. Korupolu
and Vijaya Ramachandran
				Algorithmica 33(2):168–182, Jun 2002
				Proc. 5th Eur. Symp. Algorithms (ESA 1997), Lecture Notes in Computer Science 1284, Rainer Ernst Burkard
and Gerhard J. Woeginger, ed., Springer-Verlag, Sep 1997, pp. 326–340

				Cites:
				Improved sparsification

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-Geometry-Junkyard-Penrose-tiling.html
##-----------------TITLE------------------------##
The Geometry Junkyard: Penrose tiling
##------------------TEXT------------------------##
The Geometry Junkyard: Penrose tiling

			
				David Eppstein
				http://www.ics.uci.edu/~eppstein/junkyard/penrose.html

				Cited by:
				Computer Graphics and Geometric Ornamental Design

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-minimum-area-spanning-tree-problem.html
##-----------------TITLE------------------------##
The minimum-area spanning tree problem
##------------------TEXT------------------------##
The minimum-area spanning tree problem

			
				Paz Carmi,
Matthew J. Katz,
and Joseph S. B. Mitchell
				Proc. 9th Int. Worksh. Algorithms and Data Structures (WADS 2005), Lecture Notes in Computer Science 3608, Frank K. H. A. Dehne,
Alejandro López-Ortiz,
and Jörg-Rudiger Sack, ed., Springer-Verlag, Aug 2005, pp. 195–204

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Delaunay-triangulation-and-Voronoi-diagrams-for-Riemannian-manifolds.html
##-----------------TITLE------------------------##
Delaunay triangulation and Voronoi diagrams for Riemannian manifolds
##------------------TEXT------------------------##
Delaunay triangulation and Voronoi diagrams for Riemannian manifolds

			
				Greg Leibon
and David Letscher
				Proc. 16th Symp. Computational Geometry, ACM, Jun 2000, pp. 341–349

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Simplification-Envelopes.html
##-----------------TITLE------------------------##
Simplification Envelopes
##------------------TEXT------------------------##
Simplification Envelopes

			
				Jonathan Cohen,
Amitabh Varshney,
Dinesh Manocha,
Greg Turk,
Hans Weber,
Pankaj Kumar Agarwal,
Frederick P. Brooks, Jr.,
and William V. Wright
				Proc. SIGGRAPH '96, ACM, Aug 1996, pp. 119–128
				Tech. report 96-017, Univ. of North Carolina, Chapel Hill, Dept. of Computer Science, 1996
				ftp://ftp.cs.unc.edu/pub/technical-reports/96-017.ps.Z

				Cites:
				On triangulating three-dimensional polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometric-dilation-of-closed-planar-curves-a-new-lower-bound.html
##-----------------TITLE------------------------##
Geometric dilation of closed planar curves: a new lower bound
##------------------TEXT------------------------##
Geometric dilation of closed planar curves: a new lower bound

			
				Annette Ebbers-Baumann,
Ansgar Grüne,
and Rolf Klein
				Proc. 20th Eur. Worksh. Computational Geometry, Mar 2004
				http://www.us.es/ewcg04/Articulos/Ebbers-baumann.ps

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-geometric-tour-and-network-design-problems.html
##-----------------TITLE------------------------##
Approximation algorithms for geometric tour and network design problems
##------------------TEXT------------------------##
Approximation algorithms for geometric tour and network design problems

			
				Cristian Sorin Mata
and Joseph S. B. Mitchell
				Proc. 11th Symp. Computational Geometry, ACM, Jun 1995, pp. 360–369

				Cites:
				Approximating the minimum weight Steiner triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Mesh-smoothing-using-a-posteriori-error-estimates.html
##-----------------TITLE------------------------##
Mesh smoothing using a posteriori error estimates
##------------------TEXT------------------------##
Mesh smoothing using a posteriori error estimates

			
				Randolph E. Bank
and R. Kent Smith
				SIAM J. Numerical Analysis 34(3):979–997, Jun 1997
				ftp://sdna3.ucsd.edu/pub/reb/reports/a67.ps.Z

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-subsets-maximizing-minimum-structures.html
##-----------------TITLE------------------------##
Finding subsets maximizing minimum structures
##------------------TEXT------------------------##
Finding subsets maximizing minimum structures

			
				Magnús M. Halldórsson,
Kazuo Iwano,
Naoki Katoh,
and Takeshi Tokuyama
				Proc. 6th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1995, pp. 150–159
				Tech. report 94-AL-42-13, Inf. Proc. Soc. Japan, Special Interest Group on Algorithms, Nov 1994
				http://www.raunvis.hi.is/~mmh/Papers/jmst.html

				Cites:
				New algorithms for minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Robust-and-efficient-cartesian-mesh-generation-for-component-based-geometry.html
##-----------------TITLE------------------------##
Robust and efficient cartesian mesh generation for component-based geometry
##------------------TEXT------------------------##
Robust and efficient cartesian mesh generation for component-based geometry

			
				Michael J. Aftosmis,
Marsha J. Berger,
and John E. Melton
				AIAA Paper, American Inst. Aeronautics & Astronautics, 1997
				http://george.arc.nasa.gov/~aftosmis/AIAA-97-0196.pdf

				Cites:
				Application challenges to computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Synchronization-of-finite-automata-contributions-to-an-old-problem.html
##-----------------TITLE------------------------##
Synchronization of finite automata: contributions to an old problem
##------------------TEXT------------------------##
Synchronization of finite automata: contributions to an old problem

			
				Arto Salomaa
				The Essence of Computation, Complexity, Analysis, Transformation: Essays Dedicated to Neil D. Jones on occasion of his 60th birthday, Lecture Notes in Computer Science 2566, Torben Æ. Mogensen,
David A. Schmidt,
and Ivan Hal Sudborough, ed., Springer-Verlag, 2002, pp. 37–59

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-k-points-with-minimum-diameter-and-related-problems.html
##-----------------TITLE------------------------##
Finding $k$ points with minimum diameter and related problems
##------------------TEXT------------------------##
Finding $k$ points with minimum diameter and related problems

			
				Alok Aggarwal,
Hiroshi Imai,
Naoki Katoh,
and Subhash Suri
				J. Algorithms 12:38–56, 1991

				Cites:
				Finding minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-volume-of-the-Minkowski-sum-of-line-sets-and-the-entropy-power-inequality.html
##-----------------TITLE------------------------##
On the volume of the Minkowski sum of line sets, and the entropy-power inequality
##------------------TEXT------------------------##
On the volume of the Minkowski sum of line sets, and the entropy-power inequality

			
				Ram Zamir
and Meir Feder
				IEEE Trans. Information Theory 44(7):3039–3043, Nov 1998
				http://www.eng.tau.ac.il/~zamir/papers/bmi.ps.gz

				Cites:
				Zonohedra and zonotopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-dynamic-closest-pair-and-n-body-potential-fields.html
##-----------------TITLE------------------------##
Algorithms for dynamic closest pair and $n$-body potential fields
##------------------TEXT------------------------##
Algorithms for dynamic closest pair and $n$-body potential fields

			
				Paul B. Callahan
and S. Rao Kosaraju
				Proc. 6th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1995, pp. 263–272
				ftp://ftp.cs.jhu.edu/pub/callahan/cksoda95.ps.Z

				Cites:
				Parallel construction of quadtrees and quality triangulations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-natural-element-method-in-solid-mechanics.html
##-----------------TITLE------------------------##
The natural element method in solid mechanics
##------------------TEXT------------------------##
The natural element method in solid mechanics

			
				N. Sukumar,
Brian Moran,
and Ted B. Belytschko
				Int. J. Numerical Methods in Engineering 43(5):839, Nov 1998
				http://www.tam.nwu.edu/suku/nem/nem_I.ps.gz

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-minimum-area-k-gons.html
##-----------------TITLE------------------------##
Finding minimum area $k$-gons
##------------------TEXT------------------------##
Finding minimum area $k$-gons

			
				David Eppstein,
Mark Overmars,
Günter Rote,
and Gerhard J. Woeginger
				Discrete & Computational Geometry 7(1):45–58, 1992
				Mathematical Reviews 92k:52026
				http://www.ics.uci.edu/~eppstein/pubs/EppOveRot-DCG-92.pdf

				Cited by:
				Finding $k$ points with minimum diameter and related problemsCounting $k$-subsets and convex $k$-gons in the planeGeometric knapsack problemsStacks, queues, and deques with order-statistic operationsA (usually?) connected subgraph of the minimum weight triangulationCounting convex polygons in planar point setsSequential and parallel algorithms for finding a maximum convex polygonOn minimum-area hullsResource-constrained geometric network optimizationFinding minimum area simple pentagonsGeneralized LMT-skeleton heuristics for several new classes of optimal triangulationsArea optimization of simple polygonsOn simple polygonalizations with optimal areaLMT-skeleton heuristics for several new classes of optimal triangulationsOn computing new classes of optimal triangulations with angular constraintsSmallest color-spanning objectsSmallest nonparametric tolerance regionsRemoving outliers to minimize area and perimeter

				Early drafts of this (before the merger with Overmars et al) used the title "Finding the smallest quadrilateral".

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-Computation-Models-+-Methods.html
##-----------------TITLE------------------------##
Parallel Computation: Models & Methods
##------------------TEXT------------------------##
Parallel Computation: Models & Methods

			
				Selim G. Akl
				Prentice Hall, 1997

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-beta-skeleton-as-a-subgraph-of-the-minimum-weight-triangulation.html
##-----------------TITLE------------------------##
On beta-skeleton as a subgraph of the minimum weight triangulation
##------------------TEXT------------------------##
On beta-skeleton as a subgraph of the minimum weight triangulation

			
				Siu-Wing Cheng
and Yinfeng Xu
				Theoretical Computer Science 262(1–2):459–471, Jul 2001

				Cites:
				Edge insertion for optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Recent-results-in-computational-origami.html
##-----------------TITLE------------------------##
Recent results in computational origami
##------------------TEXT------------------------##
Recent results in computational origami

			
				Erik D. Demaine
and Martin L. Demaine
				Origami$^3$: Proc. 3rd Int. Mtg. Origami Science, Math, and Education (3OSME), Asilomar, Calif., 2001, Thomas Hull, ed., A K Peters, 2002, pp. 3–16

				Cites:
				A disk-packing algorithm for an origami magic trick

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Closing-ranks-in-vehicle-formations-based-on-rigidity.html
##-----------------TITLE------------------------##
Closing ranks in vehicle formations based on rigidity
##------------------TEXT------------------------##
Closing ranks in vehicle formations based on rigidity

			
				Tolga Eren,
Peter N. Belhumeur,
and A. Stephen Morse
				Proc. 41st Conf. Decision and Control (CDC 2002), IEEE, 2002, vol. 3, pp. 2959–2964
				http://entity.eng.yale.edu/controls/2002/ClosingRanks.pdf

				Cites:
				The expected extremes in a Delaunay triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Composition-sequences-for-functions-over-a-finite-domain.html
##-----------------TITLE------------------------##
Composition sequences for functions over a finite domain
##------------------TEXT------------------------##
Composition sequences for functions over a finite domain

			
				Arto Salomaa
				Theoretical Computer Science 292(1):263–281, Jan 2003

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-linear-time-algorithm-for-concave-one-dimensional-dynamic-programming.html
##-----------------TITLE------------------------##
A linear time algorithm for concave one-dimensional dynamic programming
##------------------TEXT------------------------##
A linear time algorithm for concave one-dimensional dynamic programming

			
				Zvi Galil
and Kunsoo Park
				Information Processing Letters 33:309–311, 1990

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Color-printer-characterization-using-a-computational-geometry-approach.html
##-----------------TITLE------------------------##
Color printer characterization using a computational geometry approach
##------------------TEXT------------------------##
Color printer characterization using a computational geometry approach

			
				Jon Yngve Hardeberg
and Francis Schmitt
				Proc. 5th Color Imaging Conf., Soc. for Imaging Science and Technology
and Soc. for Information Display, Nov 1997, pp. 96–99
				http://www-ima.enst.fr/~hardeber/work/CIC1997/cic1997.html

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-media.html
##-----------------TITLE------------------------##
Algorithms for media
##------------------TEXT------------------------##
Algorithms for media

			
				David Eppstein
and Jean-Claude Falmagne
				Discrete Applied Mathematics, 
				ACM Computing Research Repository, cs.DS/0206033

				Cited by:
				Media theory: representations and examplesFundamentals of media theory

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometric-Shape-Matching-and-Drug-Design.html
##-----------------TITLE------------------------##
Geometric Shape Matching and Drug Design
##------------------TEXT------------------------##
Geometric Shape Matching and Drug Design

			
				Suresh Venkatasubramanian
				Ph.D. thesis, Stanford Univ., Computer Science Dept., 1999
				http://www.research.att.com/~suresh/Papers/thesis.pdf

				Cites:
				Dynamic Euclidean minimum spanning trees and extrema of binary functions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-a-subgraph-of-the-minimum-weight-triangulation.html
##-----------------TITLE------------------------##
Computing a subgraph of the minimum weight triangulation
##------------------TEXT------------------------##
Computing a subgraph of the minimum weight triangulation

			
				J. Mark Keil
				Computational Geometry Theory & Applications 4:13–26, 1994

				Cites:
				Approximating the minimum weight Steiner triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Speeding-up-dynamic-programming-with-applications-to-molecular-biology.html
##-----------------TITLE------------------------##
Speeding up dynamic programming with applications to molecular biology
##------------------TEXT------------------------##
Speeding up dynamic programming with applications to molecular biology

			
				Zvi Galil
and Raffaele Giancarlo
				Theoretical Computer Science 64:107–118, 1989

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/K-alternative-algorithms-for-sum-type-problems.html
##-----------------TITLE------------------------##
$K$-alternative algorithms for sum type problems
##------------------TEXT------------------------##
$K$-alternative algorithms for sum type problems

			
				Ingo Althöfer
				Proc. 14th Worksh. Discrete Optimization, 2000
				http://www.mathe.tu-freiberg.de/~dempe/Holzhau/Abstracts/althoef.ps

				Cites:
				Bibliography on $k$ shortest paths and other “$k$ best solutions” problems

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-extending-a-partial-straight-line-drawing.html
##-----------------TITLE------------------------##
On extending a partial straight-line drawing
##------------------TEXT------------------------##
On extending a partial straight-line drawing

			
				Marizio Patrignani
				Proc. 13th Int. Symp. Graph Drawing (GD 2005), Lecture Notes in Computer Science 3843, Patrick Healy
and Nikola S. Nikolov, ed., Springer-Verlag, 2006, pp. 381–385

				Cites:
				Selected open problems in graph drawing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Scalable-Data-Mining-for-Rules.html
##-----------------TITLE------------------------##
Scalable Data Mining for Rules
##------------------TEXT------------------------##
Scalable Data Mining for Rules

			
				Mohammed Javeed Zaki
				Ph.D. thesis, Univ. of Rochester, Dept. of Computer Science, 1998
				http://www.cs.rpi.edu/~zaki/PS/THESIS.ps.gz

				Cites:
				Arboricity and bipartite subgraph listing algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Interactive-sensor-planning.html
##-----------------TITLE------------------------##
Interactive sensor planning
##------------------TEXT------------------------##
Interactive sensor planning

			
				Ioannis Stamos
and Peter K. Allen
				Proc. 17th Conf. Computer Vision & Pattern Recognition, IEEE, Jun 1998, pp. 489–494
				http://citeseer.nj.nec.com/stamos98interactive.html

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Hinged-Dissections-Swinging-+-Twisting.html
##-----------------TITLE------------------------##
Hinged Dissections: Swinging & Twisting
##------------------TEXT------------------------##
Hinged Dissections: Swinging & Twisting

			
				Greg N. Frederickson
				Cambridge Univ. Press, 2002

				Cites:
				Hinged dissections of polyominoes and polyformsHinged kite mirror dissection

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Constructing-efficient-decision-trees-by-using-optimized-numeric-association-rules.html
##-----------------TITLE------------------------##
Constructing efficient decision trees by using optimized numeric association rules
##------------------TEXT------------------------##
Constructing efficient decision trees by using optimized numeric association rules

			
				Takeshi Fukuda,
Yasuhiko Morimoto,
Shinichi Morishita,
and Takeshi Tokuyama
				Proc. 22nd Int. Conf. Very Large Data Bases, Morgan Kaufmann, Sep 1996, pp. 146–155
				http://www.informatik.uni-trier.de/~ley/db/conf/vldb/FukudaMMT96.html

				Cites:
				Computing the discrepancy

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-Chinese-Checkers-playing-program.html
##-----------------TITLE------------------------##
A Chinese Checkers playing program
##------------------TEXT------------------------##
A Chinese Checkers playing program

			
				Paula Ulfhake
				Masters thesis, Lund Univ., Dept. of Computer Science, 2000

				Cites:
				Lecture notes for ICS180, Winter 1997: Strategy and board game programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Users-Manual-for-OPt-MS-Local-Methods-for-Simplicial-Mesh-Smoothing-and-Untangling.html
##-----------------TITLE------------------------##
Users Manual for OPt-MS: Local Methods for Simplicial Mesh Smoothing and Untangling
##------------------TEXT------------------------##
Users Manual for OPt-MS: Local Methods for Simplicial Mesh Smoothing and Untangling

			
				Lori A. Freitag
				Argonne Nat. Lab., Mathematics & Computer Science Div., 1999
				Tech. report ANL/MCS-TM-239, Argonne Nat. Lab., Mathematics & Computer Science Div., 1999
				http://www-unix.mcs.anl.gov/~freitag/Opt-MS/manual.ps
				ftp://info.mcs.anl.gov/pub/tech_reports/reports/TM239.ps.Z

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Speeding-up-the-dynamic-algorithm-for-planar-RNA-folding.html
##-----------------TITLE------------------------##
Speeding up the dynamic algorithm for planar RNA folding
##------------------TEXT------------------------##
Speeding up the dynamic algorithm for planar RNA folding

			
				Ruth Nussinov,
Bruce Shapiro,
Shu-Yun Le,
and Jacob V. Maizel
				Mathematical Biosciences 100:33–47, 1990

				Cites:
				Speeding up dynamic programming

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Reliable-computations-on-a-faulty-EREW-PRAM.html
##-----------------TITLE------------------------##
Reliable computations on a faulty EREW PRAM
##------------------TEXT------------------------##
Reliable computations on a faulty EREW PRAM

			
				Krzysztof Diks
and Andrzej Pelc
				Theoretical Computer Science 164:107–122, 1996

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Global-Visibility-Computations.html
##-----------------TITLE------------------------##
Global Visibility Computations
##------------------TEXT------------------------##
Global Visibility Computations

			
				Jirí Bittner
				Masters thesis, Czech Technical Univ. of Prague, Dept. of Computer Science and Engineering, 1997
				http://sgi.felk.cvut.cz/~bittner/diplom/diplom.html

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Moebius-invariant-natural-neighbor-interpolation.html
##-----------------TITLE------------------------##
Möbius-invariant natural neighbor interpolation
##------------------TEXT------------------------##
Möbius-invariant natural neighbor interpolation

			
				Marshall Wayne Bern
and David Eppstein
				Proc. 14th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2003, pp. 128–129
				ACM Computing Research Repository, cs.CG/0207081

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Survey-of-polygonal-surface-simplification-algorithms.html
##-----------------TITLE------------------------##
Survey of polygonal surface simplification algorithms
##------------------TEXT------------------------##
Survey of polygonal surface simplification algorithms

			
				Paul S. Heckbert
and Michael Garland
				Tech. report, Carnegie-Mellon Univ., School of Computer Science, 1997
				ftp://ftp.cs.cmu.edu/afs/cs/project/anim/ph/paper/multi97/release/heckbert/simp.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Stochastic-Plans-for-Robotic-Manipulation.html
##-----------------TITLE------------------------##
Stochastic Plans for Robotic Manipulation
##------------------TEXT------------------------##
Stochastic Plans for Robotic Manipulation

			
				Kenneth Y. Goldberg
				Ph.D. thesis, Carnegie-Mellon Univ., School of Computer Science, 1990

				Cites:
				Reset sequences for monotonic automata

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Offset-polygon-annulus-placement-problems.html
##-----------------TITLE------------------------##
Offset-polygon annulus placement problems
##------------------TEXT------------------------##
Offset-polygon annulus placement problems

			
				Gill Barequet,
Amy J. Briggs,
Matthew T. Dickerson,
and Michael T. Goodrich
				Computational Geometry Theory & Applications 11:125–141, Dec 1998
				Proc. 5th Worksh. Algorithms and Data Structures (WADS 1997), Lecture Notes in Computer Science 1272, Frank K. H. A. Dehne,
Andrew Rau-Chaplin,
Jörg-Rudiger Sack,
and Roberto Tamassia, ed., Springer-Verlag, Aug 1997, pp. 378–391

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-quantified-Boolean-formulas.html
##-----------------TITLE------------------------##
Algorithms for quantified Boolean formulas
##------------------TEXT------------------------##
Algorithms for quantified Boolean formulas

			
				Ryan Williams
				Proc. 13th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2002, pp. 299–307
				http://portal.acm.org/citation.cfm?id=545421

				Cites:
				Improved algorithms for 3-coloring, 3-edge-coloring, and constraint satisfaction

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Geometric-algorithms-for-density-based-data-clustering.html
##-----------------TITLE------------------------##
Geometric algorithms for density-based data clustering
##------------------TEXT------------------------##
Geometric algorithms for density-based data clustering

			
				Danny Z. Chen,
Michiel Smid,
and Bin Xu
				Proc. 10th Eur. Symp. Algorithms (ESA 2002), Lecture Notes in Computer Science 2461, Rolf H. Möhring
and Rajeev Raman, ed., Springer-Verlag, Sep 2002, pp. 284–296

				Cites:
				Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Fast-and-efficient-parallel-solution-of-sparse-linear-systems.html
##-----------------TITLE------------------------##
Fast and efficient parallel solution of sparse linear systems
##------------------TEXT------------------------##
Fast and efficient parallel solution of sparse linear systems

			
				Victor Y. Pan
and John H. Reif
				SIAM J. Computing 22:1227–1250, 1993

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-for-minimum-triangulations-of-simplicial-convex-3-polytopes.html
##-----------------TITLE------------------------##
Approximation for minimum triangulations of simplicial convex 3-polytopes
##------------------TEXT------------------------##
Approximation for minimum triangulations of simplicial convex 3-polytopes

			
				Francis Y. L. Chin,
Stanley P. Y. Fung,
and Cao An Wang
				Discrete & Computational Geometry 26(4):499–511, Dec 2001

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-note-on-point-location-in-delaunay-triangulations-of-random-points.html
##-----------------TITLE------------------------##
A note on point location in delaunay triangulations of random points
##------------------TEXT------------------------##
A note on point location in delaunay triangulations of random points

			
				Luc Devroye,
Ernst P. Mücke,
and Binhai Zhu
				Algorithmica 22(4):477–482, Dec 1998

				Cites:
				The expected extremes in a Delaunay triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Finding-precursor-compounds-in-secondary-metabolism.html
##-----------------TITLE------------------------##
Finding precursor compounds in secondary metabolism
##------------------TEXT------------------------##
Finding precursor compounds in secondary metabolism

			
				Masanori Arita,
Kiyoshi Asai,
and Takaaki Nishioka
				Proc. 10th Genome Informatics Worksh., Kiyoshi Asai,
Satoru Miyano,
and T. Takagi, ed., Universal Academy Press, Dec 1999
				http://www.jsbi.org/journal/GIW99/GIW99F12.pdf

				Cites:
				Finding the $k$ smallest spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Lovaszs-lemma-for-the-three-dimensional-K-level-of-concave-surfaces-and-its-applications.html
##-----------------TITLE------------------------##
Lovász's lemma for the three-dimensional $K$-level of concave surfaces and its applications
##------------------TEXT------------------------##
Lovász's lemma for the three-dimensional $K$-level of concave surfaces and its applications

			
				Naoki Katoh
and Takeshi Tokuyama
				Proc. 40th Symp. Foundations of Computer Science, IEEE, Oct 1999, pp. 389–398

				Cites:
				Geometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/New-lower-bounds-for-halfspace-emptiness.html
##-----------------TITLE------------------------##
New lower bounds for halfspace emptiness
##------------------TEXT------------------------##
New lower bounds for halfspace emptiness

			
				Jeffrey Gordon Erickson
				Proc. 1st CGC Worksh. Computational Geometry, Oct 1996
				Proc. 37th Symp. Foundations of Computer Science, IEEE, Oct 1996, pp. 472–481
				http://www.cs.jhu.edu/labs/cgc/workshop/F250.ps
				http://www.cs.duke.edu/~jeffe/pubs/halfempty.ps.gz

				Cites:
				Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Minimum-convex-cost-tension-problems-on-series-parallel-graphs.html
##-----------------TITLE------------------------##
Minimum convex-cost tension problems on series-parallel graphs
##------------------TEXT------------------------##
Minimum convex-cost tension problems on series-parallel graphs

			
				Bruno Bachelet
and Philippe Mahey
				Tech. report LIMOS/RR03-06, CNRS, Lab. d'Informatique, Modélisation et d'Optimisation des Systèmes, 2003
				http://www.isima.fr/mahey/RR03-06.PDF

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimized-color-gamuts-for-tiled-displays.html
##-----------------TITLE------------------------##
Optimized color gamuts for tiled displays
##------------------TEXT------------------------##
Optimized color gamuts for tiled displays

			
				Marshall Wayne Bern
and David Eppstein
				Proc. 19th Symp. Computational Geometry, ACM, Jun 2003, pp. 274–281
				ACM Computing Research Repository, cs.CG/0212007

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Memory-reference-caching-for-activity-reduction-on-address-buses.html
##-----------------TITLE------------------------##
Memory reference caching for activity reduction on address buses
##------------------TEXT------------------------##
Memory reference caching for activity reduction on address buses

			
				Tony Digaleh Givargis
and David Eppstein
				J. Microprocessors and Microsystems 29(4):145–153, May 2005
				http://www.ics.uci.edu/~givargis/pubs/J12.pdf

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Open-problems-wiki.html
##-----------------TITLE------------------------##
Open problems wiki
##------------------TEXT------------------------##
Open problems wiki

			
				Marcus Raitner
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 508–509

				Cites:
				Selected open problems in graph drawing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Rectilinear-static-and-dynamic-discrete-2-center-problems.html
##-----------------TITLE------------------------##
Rectilinear static and dynamic discrete 2-center problems
##------------------TEXT------------------------##
Rectilinear static and dynamic discrete 2-center problems

			
				Sergei N. Bespamyatnikh
and Michael Segal
				Proc. 6th Worksh. Algorithms and Data Structures (WADS 1999), Lecture Notes in Computer Science 1663, Frank K. H. A. Dehne,
Arvind Gupta,
Jörg-Rudiger Sack,
and Roberto Tamassia, ed., Springer-Verlag, 1999, pp. 276–287

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Choosing-subsets-with-maximum-weighted-average.html
##-----------------TITLE------------------------##
Choosing subsets with maximum weighted average
##------------------TEXT------------------------##
Choosing subsets with maximum weighted average

			
				David Eppstein
and Daniel S. Hirschberg
				J. Algorithms 24(1):177–193, Jul 1997
				Proc. 5th Worksh. Computational Geometry, Army Research Office
and State Univ. of New York at Stony Brook, Mathematical Sciences Inst., Oct 1995, pp. 7–8
				Tech. report 95-12, Univ. of California, Irvine, Dept. of Information and Computer Science, 1995
				http://dx.doi.org/10.1006/jagm.1996.0849

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Prefix-graphs-and-their-applications.html
##-----------------TITLE------------------------##
Prefix graphs and their applications
##------------------TEXT------------------------##
Prefix graphs and their applications

			
				Shiva Chaudhuri
and Torben Hagerup
				Proc. 20th Int. Worksh. Graph-Theoretic Concepts in Computer Science (WG 1994), Lecture Notes in Computer Science 903, Ernst W. Mayr,
Gunther Schmidt,
and Gottfried Tinhofer, ed., Springer-Verlag, 1994, pp. 206–218
				http://www.mpi-sb.mpg.de/~shiva/publications/prefix.ps.gz

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Semidynamic-algorithms-for-maintaining-single-source-shortest-path-trees.html
##-----------------TITLE------------------------##
Semidynamic algorithms for maintaining single-source shortest path trees
##------------------TEXT------------------------##
Semidynamic algorithms for maintaining single-source shortest path trees

			
				Daniele Frigioni,
Alberto Marchetti Spaccamela,
and Umberto Nanni
				Algorithmica 22(3):250–274, Nov 1998

				Cites:
				Planar orientations with low out-degree and compaction of adjacency matrices

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Representation-and-Detection-of-Shapes-in-Images.html
##-----------------TITLE------------------------##
Representation and Detection of Shapes in Images
##------------------TEXT------------------------##
Representation and Detection of Shapes in Images

			
				Pedro F. Felzenszwalb
				Ph.D. thesis, Massachusetts Inst. Tech., Dept. of Electrical Engineering and Computer Science, Sep 2003
				http://www.cs.cornell.edu/~pff/papers/pff.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-Delaunay-triangulations.html
##-----------------TITLE------------------------##
Optimal Delaunay triangulations
##------------------TEXT------------------------##
Optimal Delaunay triangulations

			
				Long Chen
and Jinchao Xu
				J. Computational Mathematics 22(2):299–308, 2004
				http://www.cc.ac.cn/~jcm/2004-2/XJC.ps

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-algorithms-for-VLSI-routing.html
##-----------------TITLE------------------------##
Parallel algorithms for VLSI routing
##------------------TEXT------------------------##
Parallel algorithms for VLSI routing

			
				Joseph JáJá
				Integration 12:305–320, 1991

				Cites:
				Parallel algorithmic techniques for combinatorial computation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/NCSA-MinMaxer-Users-and-Programmers-Guide.html
##-----------------TITLE------------------------##
NCSA MinMaxer: User's and Programmer's Guide
##------------------TEXT------------------------##
NCSA MinMaxer: User's and Programmer's Guide

			
				Univ. of Illinois, Urbana-Champaign, Nat. Ctr. for Supercomputing Applications, Oct 1992				http://graphics.stanford.edu/courses/cs348a-04-winter/Papers/MinMaxerR1.1.pdf				Cites:
				Edge insertion for optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-algorithms-for-maximum-regression-depth.html
##-----------------TITLE------------------------##
Efficient algorithms for maximum regression depth
##------------------TEXT------------------------##
Efficient algorithms for maximum regression depth

			
				Marc J. van Kreveld,
Joseph S. B. Mitchell,
Peter J. Rousseeuw,
Micha Sharir,
Jack Snoeyink,
and Bettina Speckmann
				Tech. report UU-CS-2002-39, Univ. Utrecht, Dept. of Computer Science, 2002
				http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2002/2002-039.pdf

				Cites:
				Regression depth and center points

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Algorithms-for-drawing-media.html
##-----------------TITLE------------------------##
Algorithms for drawing media
##------------------TEXT------------------------##
Algorithms for drawing media

			
				David Eppstein
				Proc. 12th Int. Symp. Graph Drawing (GD 2004), Lecture Notes in Computer Science 3383, János Pach, ed., Springer-Verlag, 2004, pp. 173–183
				ACM Computing Research Repository, cs.DS/0406020

				Cited by:
				Fundamentals of media theory

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-envelopes-of-arrangements-of-lines.html
##-----------------TITLE------------------------##
On envelopes of arrangements of lines
##------------------TEXT------------------------##
On envelopes of arrangements of lines

			
				D. Eu,
Eric Guévremont,
and Godfried T. Toussaint
				J. Algorithms 21(1):111–148, Jul 1996

				Cites:
				Horizon theorems for lines and polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Triangulating-polygons-without-large-angles.html
##-----------------TITLE------------------------##
Triangulating polygons without large angles
##------------------TEXT------------------------##
Triangulating polygons without large angles

			
				Marshall Wayne Bern,
David P. Dobkin,
and David Eppstein
				Int. J. Computational Geometry & Applications 5(1–2):171–192, 1995
				Proc. 8th Symp. Computational Geometry, ACM, Jun 1992, pp. 222–231
				Mathematical Reviews 96e:68124
				http://www.ics.uci.edu/~eppstein/pubs/BerDobEpp-IJCGA-95.ps.gz

				Cited by:
				Computational geometry: a retrospectiveQuality mesh generation in three dimensionsMesh generation with provable quality boundsApproximating the maxmin-angle covering triangulationRefining a triangulation of a planar straight-line graph to eliminate large anglesA discussion on the triangulation refinement problemOptimal Two-Dimensional TriangulationsAn optimal bound for high-quality conforming triangulationsLinear-size nonobtuse triangulation of polygonsAn upper bound for conforming Delaunay triangulationsA parallel solution strategy for irregular dynamic problemsRobust distortion metric for quadratic triangular 2d finite elementsTools for triangulations and tetrahedralizations and constructing functions defined over themQuality mesh generation in higher dimensionsOn computing and drawing maxmin-height covering triangulationSurface triangulation: a surveyMid-node admissible spaces for quadratic triangular arbitrarily curved 2D finite elements Approximating uniform triangular meshes in polygonsHigher order Delaunay triangulationsApproximating uniform triangular meshes for spheresAlgorithms for Geometric Shortest Paths Along RoutesRobust incremental polygon triangulation for surface renderingGeometric Decompositions and Networks: Approximation Bounds and Algorithms

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-the-zone-theorem-for-hyperplane-arrangements.html
##-----------------TITLE------------------------##
On the zone theorem for hyperplane arrangements
##------------------TEXT------------------------##
On the zone theorem for hyperplane arrangements

			
				Herbert Edelsbrunner,
Raimund Seidel,
and Micha Sharir
				New Results and Trends in Computer Science: on occasion of H. Maurer's 50th birthday, Lecture Notes in Computer Science 555, Hermann A. Maurer, ed., Springer-Verlag, 1991, pp. 108–123
				SIAM J. Computing 22:418–429, 1993

				Cites:
				Horizon theorems for lines and polygons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Construction-of-a-human-torso-model-from-magnetic-resonance-images-for-problems-in-computational-electrocardiography.html
##-----------------TITLE------------------------##
Construction of a human torso model from magnetic resonance images for problems in computational electrocardiography
##------------------TEXT------------------------##
Construction of a human torso model from magnetic resonance images for problems in computational electrocardiography

			
				Robert S. MacLeod,
Christopher R. Johnson,
and Philip R. Ershler
				Tech. report UUCS-94-017, Univ. of Utah, Dept. of Computer Science, 1994
				http://www.cs.utah.edu/sci/publications/tr-mridoc.ps.Z

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Disk-packings-and-planar-separators.html
##-----------------TITLE------------------------##
Disk packings and planar separators
##------------------TEXT------------------------##
Disk packings and planar separators

			
				Daniel A. Spielman
and Shang-Hua Teng
				Proc. 12th Symp. Computational Geometry, ACM, May 1996, pp. 349–358

				Cites:
				Approximating center points with iterated Radon pointsA deterministic linear time algorithm for geometric separators and its applications

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Discrete-rectilinear-2-center-problems.html
##-----------------TITLE------------------------##
Discrete rectilinear 2-center problems
##------------------TEXT------------------------##
Discrete rectilinear 2-center problems

			
				Matthew J. Katz,
Klara Kedem,
and Michael Segal
				Computational Geometry Theory & Applications 15(4):203–214, Apr 2000

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Supporting-cuts-and-finite-element-deformation-in-interactive-surgery-simulation.html
##-----------------TITLE------------------------##
Supporting cuts and finite element deformation in interactive surgery simulation
##------------------TEXT------------------------##
Supporting cuts and finite element deformation in interactive surgery simulation

			
				Han-Wen Nienhuys
and A. Frank van der Stappen
				Tech. report UU-CS-2001-16, Univ. Utrecht, Dept. of Computer Science, Jun 2001
				http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2001/2001-16.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Acute-square-triangulation.html
##-----------------TITLE------------------------##
Acute square triangulation
##------------------TEXT------------------------##
Acute square triangulation

			
				David Eppstein
				web page, Jul 1997
				http://www.ics.uci.edu/~eppstein/junkyard/acute-square/

				Cited by:
				Building space-time meshes over arbitrary spatial domains

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-simple-polygonalizations-with-optimal-area.html
##-----------------TITLE------------------------##
On simple polygonalizations with optimal area
##------------------TEXT------------------------##
On simple polygonalizations with optimal area

			
				Sándor P. Fekete
				Discrete & Computational Geometry 23(1):73–110, Jan 2000

				Cites:
				Finding minimum area $k$-gons

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parallel-algorithms-for-series-parallel-graphs.html
##-----------------TITLE------------------------##
Parallel algorithms for series parallel graphs
##------------------TEXT------------------------##
Parallel algorithms for series parallel graphs

			
				Hans Leo Bodlaender
and Babette Lucie Elisabeth van Antwerpen - de Fluiter
				Proc. 4th Eur. Symp. Algorithms (ESA 1996), Lecture Notes in Computer Science 1136, Josep Díaz
and Maria J. Serna, ed., Springer-Verlag, Sep 1996, pp. 277–289
				Tech. report UU-CS-1996-13, Univ. Utrecht, Dept. of Computer Science, 20 Mar 1996
				Tech. report UU-CS-1997-21, Univ. Utrecht, Dept. of Computer Science, Jul 1997
				ftp://ftp.cs.ruu.nl/pub/RUU/CS/techreps/CS-1996/1996-13.ps.gz
				ftp://ftp.cs.ruu.nl/pub/RUU/CS/techreps/CS-1997/1997-21.ps.gz

				Cites:
				Parallel recognition of series parallel graphs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Volumetric-meshes-for-real-time-medical-simulations.html
##-----------------TITLE------------------------##
Volumetric meshes for real-time medical simulations
##------------------TEXT------------------------##
Volumetric meshes for real-time medical simulations

			
				Matthias Mueller
and Matthias Teschner
				Proc. 7th Worksh. Bildverarbeitung für die Medizin, T. Wittenberg,
P. Hastreiter,
U. Hoppe,
H. Handels,
A. Horsch,
and H.-P. Meinzer, ed., Springer-Verlag, Mar 2003, pp. 279–283

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-local-algorithms-for-topology-control-and-routing-in-ad-hoc-networks.html
##-----------------TITLE------------------------##
On local algorithms for topology control and routing in ad hoc networks
##------------------TEXT------------------------##
On local algorithms for topology control and routing in ad hoc networks

			
				Lujun Jia,
Rajmohan Rajaraman,
and Christian Scheideler
				Proc. 15th Symp. Parallel Algorithms and Architectures, ACM, 2003, pp. 220–229
				http://portal.acm.org/citation.cfm?id=777447

				Cites:
				Spanning trees and spanners

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-Geometry-Junkyard-Inscribed-square-problem.html
##-----------------TITLE------------------------##
The Geometry Junkyard: Inscribed square problem
##------------------TEXT------------------------##
The Geometry Junkyard: Inscribed square problem

			
				David Eppstein
and others
				http://www.ics.uci.edu/~eppstein/junkyard/jordan-square.html

				Cited by:
				Mathematical Puzzles: A Connoisseur's Collection

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Exact-and-distributed-algorithms-for-collaborative-camera-control.html
##-----------------TITLE------------------------##
Exact and distributed algorithms for collaborative camera control
##------------------TEXT------------------------##
Exact and distributed algorithms for collaborative camera control

			
				Dezhen Song,
A. Frank van der Stappen,
and Kenneth Y. Goldberg
				Proc. 5th Int. Worksh. Algorithmic Foundations of Robotics (WAFR 2002), Springer Tracts in Advanced Robotics 7, Jean-Daniel Boissonat,
J. Burdick,
Kenneth Y. Goldberg,
and Seth Hutchinson, ed., Springer-Verlag, 2002, pp. 167–183
				http://www.tele-actor.net/sharecam/pubs/dez-sharecam-algorithm-iros2003-v08.pdf

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Optimal-tetrahedralizations-of-some-convex-polyhedra.html
##-----------------TITLE------------------------##
Optimal tetrahedralizations of some convex polyhedra
##------------------TEXT------------------------##
Optimal tetrahedralizations of some convex polyhedra

			
				Cao An Wang
and Boting Yang
				Proc. 16th Eur. Worksh. Computational Geometry, 2000
				http://www.cs.bgu.ac.il/~cg2000/PS/17.ps

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Circuit-evaluation-thoughts-on-a-killer-application-in-DNA-computing.html
##-----------------TITLE------------------------##
Circuit evaluation: thoughts on a killer application in DNA computing
##------------------TEXT------------------------##
Circuit evaluation: thoughts on a killer application in DNA computing

			
				Mitsunori Ogihara
and Animesh Ray
				Computing with Bio-Molecules: Theory and Experiments, Springer-Verlag, 1998
				http://www.cs.rochester.edu/u/ogihara/research/DNA/new-review.pdf.gz

				Cites:
				3-coloring in time $O(1.3446^n)$: a no-MIS algorithm

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-a-double-ray-center-for-a-planar-point-set.html
##-----------------TITLE------------------------##
Computing a double-ray center for a planar point set
##------------------TEXT------------------------##
Computing a double-ray center for a planar point set

			
				Alex Glozman,
Klara Kedem,
and Gregory Shpitalnik
				Int. J. Computational Geometry & Applications 9(2):109–123, Apr 1999

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Elastic-labels-around-the-perimeter-of-a-map.html
##-----------------TITLE------------------------##
Elastic labels around the perimeter of a map
##------------------TEXT------------------------##
Elastic labels around the perimeter of a map

			
				Claudia C. Iturriaga-Velázquez
and Anna Lubiw
				J. Algorithms 47(1):14–39, Apr 2003

				Cites:
				Application challenges to computational geometry

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Increasing-the-number-and-volume-of-hexahedral-and-prism-elements-in-a-hex-dominant-mesh-by-topological-transformations.html
##-----------------TITLE------------------------##
Increasing the number and volume of hexahedral and prism elements in a hex-dominant mesh by topological transformations
##------------------TEXT------------------------##
Increasing the number and volume of hexahedral and prism elements in a hex-dominant mesh by topological transformations

			
				Soji Yamakawa
and Kenji Shimada
				Proc. 12th Int. Meshing Roundtable, Sandia Nat. Lab., 2003
				http://www.imr.sandia.gov/papers/imr12/yamakawa03.pdf

				Cites:
				Flipping cubical meshes{}

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Parametric-polymatroid-optimization-and-its-geometric-applications.html
##-----------------TITLE------------------------##
Parametric polymatroid optimization and its geometric applications
##------------------TEXT------------------------##
Parametric polymatroid optimization and its geometric applications

			
				Naoki Katoh,
Hisao Tamaki,
and Takeshi Tokuyama
				Int. J. Computational Geometry & Applications 12(5):429–443, Oct 2002
				Proc. 10th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1999, pp. 517–526

				Cites:
				Geometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/No-bend-orthogonal-drawings-of-series-parallel-graphs.html
##-----------------TITLE------------------------##
No-bend orthogonal drawings of series-parallel graphs
##------------------TEXT------------------------##
No-bend orthogonal drawings of series-parallel graphs

			
				Md. Saidur Rahman,
Noritsugu Egi,
and Takao Nishizeki
				Proc. 13th Int. Symp. Graph Drawing (GD 2005), Lecture Notes in Computer Science 3843, Patrick Healy
and Nikola S. Nikolov, ed., Springer-Verlag, 2006, pp. 409–420

				Cites:
				Selected open problems in graph drawing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Computing-extreme-origami-bases.html
##-----------------TITLE------------------------##
Computing extreme origami bases
##------------------TEXT------------------------##
Computing extreme origami bases

			
				Erik D. Demaine
and Martin L. Demaine
				Tech. report CS-97-22, Univ. of Waterloo, School of Computer Science, May 1997
				http://daisy.uwaterloo.ca/~eddemain/papers/ConvexExtremeTR/

				Cites:
				Raising roofs, crashing cycles, and playing pool: applications of a data structure for finding pairwise interactions

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/On-levels-in-arrangements-of-lines-segments-planes-and-triangles.html
##-----------------TITLE------------------------##
On levels in arrangements of lines, segments, planes, and triangles
##------------------TEXT------------------------##
On levels in arrangements of lines, segments, planes, and triangles

			
				Pankaj Kumar Agarwal,
Boris Aronov,
Timothy Moon-Yew Chan,
and Micha Sharir
				Discrete & Computational Geometry 19(3):315–331, Apr 1998

				Cites:
				Geometric lower bounds for parametric matroid optimization

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Improved-selection-in-totally-monotone-arrays.html
##-----------------TITLE------------------------##
Improved selection in totally monotone arrays
##------------------TEXT------------------------##
Improved selection in totally monotone arrays

			
				Yishay Mansour,
James K. Park,
Baruch Schieber,
and Sandeep Sen
				Proc. 11th Conf. Foundations of Software Technology & Theoretical Computer Science (FSTTCS 1991), Lecture Notes in Computer Science 560, Somenath Biswas
and Kesav V. Nori, ed., Springer-Verlag, 1991, pp. 347–359

				Cites:
				Sequence comparison with mixed convex and concave costs

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-mesh-warping-algorithm-based-on-weighted-Laplacian-smoothing.html
##-----------------TITLE------------------------##
A mesh warping algorithm based on weighted Laplacian smoothing
##------------------TEXT------------------------##
A mesh warping algorithm based on weighted Laplacian smoothing

			
				Suzanne M. Shontz
and Stephen A. Vavasis
				Proc. 12th Int. Meshing Roundtable, Sandia Nat. Lab., 2003
				http://www.imr.sandia.gov/papers/imr12/shontz03.pdf

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Dihedral-bounds-for-mesh-generation-in-high-dimensions.html
##-----------------TITLE------------------------##
Dihedral bounds for mesh generation in high dimensions
##------------------TEXT------------------------##
Dihedral bounds for mesh generation in high dimensions

			
				Marshall Wayne Bern,
L. Paul Chew,
David Eppstein,
and Jim Ruppert
				Abstracts of the AMS 15:366, 1994
				Proc. 6th Symp. Discrete Algorithms, ACM
and SIAM, Jan 1995, pp. 189–196
				Mathematical Reviews 95m:52031
				http://www.ics.uci.edu/~eppstein/pubs/BerCheEpp-SODA-95.pdf

				Cited by:
				Linear-size nonobtuse triangulation of polygonsAn aspect ratio bound for triangulating a $d$-grid cut by a hyperplaneTriangulationsMesh generationSliver exudationNew Results on Geometric Spanners and Their ApplicationsLipschitzian crowded ball packings and Delaunay spheresOptimality and integer programming formulations of triangulations in general dimensionTiling 3D Euclidean space with acute tetrahedraBuilding space-time meshes over arbitrary spatial domainsGenerating well-shaped $d$-dimensional Delaunay meshesApplication of the local nonobtuse tetrahedral refinement techniques near Fichera-like cornersGradient superconvergence on uniform simplicial partitions of polytopes 

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Region-inter-visibility-in-terrains.html
##-----------------TITLE------------------------##
Region inter-visibility in terrains
##------------------TEXT------------------------##
Region inter-visibility in terrains

			
				Marc J. van Kreveld,
Esther Moet,
and René van Oostrum
				Proc. 20th Eur. Worksh. Computational Geometry, Mar 2004
				http://www.us.es/ewcg04/Articulos/oostrum-t.ps

				Cites:
				Visibility with a moving point of view

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Multibeam-data-processing-data-reduction-adaptive-triangular-meshing-and-comments-resulting-from-Brouns-et-al-(THJ-No-101-2001).html
##-----------------TITLE------------------------##
Multibeam data processing: data reduction, adaptive triangular meshing and comments resulting from Brouns et al. (THJ No. 101, 2001)
##------------------TEXT------------------------##
Multibeam data processing: data reduction, adaptive triangular meshing and comments resulting from Brouns et al. (THJ No. 101, 2001)

			
				Ulrich Lenk
				The Hydrographic J., 2001
				http://www.hydrographicsociety.org/Articles/journal/2001/102-3.htm

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/The-expected-extremes-in-a-Delaunay-triangulation.html
##-----------------TITLE------------------------##
The expected extremes in a Delaunay triangulation
##------------------TEXT------------------------##
The expected extremes in a Delaunay triangulation

			
				Marshall Wayne Bern,
David Eppstein,
and Frances F. Yao
				Proc. 18th Int. Coll. Automata, Languages, and Programming (ICALP 1991), Lecture Notes in Computer Science 510, Javier Leach Albert,
Burkhard Monien,
and Mario Rodríguez-Artalejo, ed., Springer-Verlag, Jul 1991, pp. 674–685
				Int. J. Computational Geometry & Applications 1(1):79–92, Mar 1991
				Mathematical Reviews 92e:68189
				http://www.ics.uci.edu/~eppstein/pubs/BerEppYao-IJCGA-91.pdf

				Cited by:
				Enumerating $k$ longest distances for $n$ points in the planeA Delaunay based numerical method for three dimensions: generation, formulation, and partitionFast randomized point location without preprocessing in two- and three-dimensional Delaunay triangulationsDeveloping a practical projection-based parallel Delaunay algorithmLocal bisection refinement for $n$-simplicial grids generated by reflectionApplications of 3D Delaunay triangulation algorithms in geoscientific modellingThe efficient location of neighbors for locally refined $n$-simplicial gridsTools for triangulations and tetrahedralizations and constructing functions defined over themMesh generationA note on point location in delaunay triangulations of random pointsCombinatorial aspects of geometric graphsA multivariate two-sample test using the Voronoi diagramEfficient Parallel Algorithms for Closest Point ProblemsAnalysis of a class of $k$-dimensional merge procedures, with an application to 2D Delaunay triangulation in expected linear time after two-directional sortingDesign and implementation of a practical parallel Delaunay algorithmData generation for geometric algorithms on non-uniform distributionsSurface triangulation: a surveyA probabilistic result on multi-dimensional Delaunay triangulations, and its application to the $2D$ caseMultilevel accelerated optimization for problems in grid generationClosing ranks in vehicle formations based on rigidity

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Approximation-algorithms-for-projective-clustering.html
##-----------------TITLE------------------------##
Approximation algorithms for projective clustering
##------------------TEXT------------------------##
Approximation algorithms for projective clustering

			
				Pankaj Kumar Agarwal
and Cecilia M. Procopiuc
				Proc. 11th Symp. Discrete Algorithms, ACM
and SIAM, Jan 2000, pp. 538–547

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Triangles-and-squares.html
##-----------------TITLE------------------------##
Triangles and squares
##------------------TEXT------------------------##
Triangles and squares

			
				David Eppstein
				Proc. Euroconf. Combinatorics, Graph Theory, and Applications, Jaroslav Nešetril, ed., Univ. Autónoma de Barcelona, Centre de Recerca Matemàtica, Sep 2001, pp. 114

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Deterministic-sampling-and-range-counting-in-geometric-data-streams.html
##-----------------TITLE------------------------##
Deterministic sampling and range counting in geometric data streams
##------------------TEXT------------------------##
Deterministic sampling and range counting in geometric data streams

			
				Amitabha Bagchi,
Amitabh Chaudhary,
David Eppstein,
and Michael T. Goodrich
				Proc. 20th Symp. Computational Geometry, ACM, 2004, pp. 144–151
				ACM Trans. Algorithms 3(2):A16, 2007
				ACM Computing Research Repository, cs.CG/0307027

				Cited by:
				Range counting over multidimensional data streamsMulti-pass geometric algorithmsSampling in dynamic data streams and applicationsPractical and efficient geometric $\epsilon$-approximations

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Minimum-convex-partition-of-a-polygon-with-holes-by-cuts-in-given-directions.html
##-----------------TITLE------------------------##
Minimum convex partition of a polygon with holes by cuts in given directions
##------------------TEXT------------------------##
Minimum convex partition of a polygon with holes by cuts in given directions

			
				Andrzej Lingas
and Valeriu Soltan
				Proc. 7th Int. Symp. Algorithms & Computation (ISAAC 1996), Lecture Notes in Computer Science 1178, Tetsuo Asano,
Yoshihide Igarashi,
Hiroshi Nagamochi,
Satoru Miyano,
and Subhash Suri, ed., Springer-Verlag, 1996, pp. 315–325
				Theory of Computing Systems 31(5):507–538, 1998

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Topology-modification-of-hexahedral-meshes-using-atomic-dual-based-operations.html
##-----------------TITLE------------------------##
Topology modification of hexahedral meshes using atomic dual-based operations
##------------------TEXT------------------------##
Topology modification of hexahedral meshes using atomic dual-based operations

			
				Timothy J. Tautges
and Sarah E. Knoop
				Proc. 12th Int. Meshing Roundtable, Sandia Nat. Lab., 2003
				http://www.imr.sandia.gov/papers/imr12/tautges03.pdf

				Cites:
				Flipping cubical meshes{}Flipping cubical meshes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/An-approach-to-combined-Laplacian-and-optimization-based-smoothing-for-triangular-quadrilateral-and-quad-dominant-meshes.html
##-----------------TITLE------------------------##
An approach to combined Laplacian and optimization-based smoothing for triangular, quadrilateral, and quad-dominant meshes
##------------------TEXT------------------------##
An approach to combined Laplacian and optimization-based smoothing for triangular, quadrilateral, and quad-dominant meshes

			
				Scott A. Canann,
Joseph R. Tristano,
and Matthew L. Staten
				Proc. 7th Int. Meshing Roundtable, Sandia Nat. Lab., Oct 1998, pp. 479–494
				http://www.andrew.cmu.edu/user/sowen/abstracts/Ca513.html

				Cites:
				Optimal point placement for mesh smoothing

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/A-near-quadratic-algorithm-for-the-alpha-connected-two-center-decision-problem.html
##-----------------TITLE------------------------##
A near-quadratic algorithm for the alpha-connected two-center decision problem
##------------------TEXT------------------------##
A near-quadratic algorithm for the alpha-connected two-center decision problem

			
				Po-Hsueh Huang,
Yin Te Tsai,
and Chuan Ti Tang
				Proc. 14th Canad. Conf. Computational Geometry (CCCG), Stephen Wismath, ed., Univ. of Lethbridge, Dept. of Mathematics and Computer Science, Aug 2002, pp. 133–136
				http://www.cs.uleth.ca/~wismath/cccg/papers/36.ps

				Cites:
				Faster construction of planar two-centers

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Face-numbers-of-4-polytopes-and-3-spheres.html
##-----------------TITLE------------------------##
Face numbers of 4-polytopes and 3-spheres
##------------------TEXT------------------------##
Face numbers of 4-polytopes and 3-spheres

			
				Günter M. Ziegler
				arXiv.org e-Print archive, math.MG/0208073

				Cites:
				Fat 4-polytopes and fatter 3-spheres

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Extremal-Constructions-for-Polytopes-and-Spheres.html
##-----------------TITLE------------------------##
Extremal Constructions for Polytopes and Spheres
##------------------TEXT------------------------##
Extremal Constructions for Polytopes and Spheres

			
				Julian Pfeifle
				Ph.D. thesis, Technische Univ. Berlin, Fachbereich Mathematik, Apr 2003
				http://edocs.tu-berlin.de/diss/2003/pfeifle_julian.pdf

				Cites:
				Fat 4-polytopes and fatter 3-spheres

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Efficient-approximation-algorithms-for-two-label-point-labeling.html
##-----------------TITLE------------------------##
Efficient approximation algorithms for two-label point labeling
##------------------TEXT------------------------##
Efficient approximation algorithms for two-label point labeling

			
				Binhai Zhu
and Chung Keung Poon
				Int. J. Computational Geometry & Applications 11(4):455–464, Aug 2001

				Cites:
				Iterated nearest neighbors and finding minimal polytopes

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Polygon-decomposition-for-efficient-construction-of-Minkowski-sums.html
##-----------------TITLE------------------------##
Polygon decomposition for efficient construction of Minkowski sums
##------------------TEXT------------------------##
Polygon decomposition for efficient construction of Minkowski sums

			
				Pankaj Kumar Agarwal,
Eyal Flato,
and Dan Halperin
				Computational Geometry Theory & Applications 21(1–2):39–61, Jan 2002
				http://www.cs.tau.ac.il/~flato/DecompJur/decompjur.ps.gz

				Cites:
				Approximating the minimum weight Steiner triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Automatic-grid-finding-in-calibration-patterns-using-Delaunay-triangulation.html
##-----------------TITLE------------------------##
Automatic grid finding in calibration patterns using Delaunay triangulation
##------------------TEXT------------------------##
Automatic grid finding in calibration patterns using Delaunay triangulation

			
				Chang Shu,
Alan Brunton,
and Mark Fiala
				Tech. report NRC-46497/ERB-1104, Nat. Research Council, Inst. for Information Technology, Aug 2003
				http://www.cv.iit.nrc.ca/research/CAMcal/gridfind_report.pdf

				Cites:
				Mesh generation and optimal triangulation

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
##------------------URL-------------------------##
http://fano.ics.uci.edu/cites/Document/Zufall-und-Quasi-Monte-Carlo-Ansaetze-Einige-Anmerkungen-zu-Grundlagen-und-Anwendungen-in-Statistik-und-Oekonometrie.html
##-----------------TITLE------------------------##
Zufall und Quasi-Monte Carlo Ansätze: Einige Anmerkungen zu Grundlagen und Anwendungen in Statistik und Ökonometrie
##------------------TEXT------------------------##
Zufall und Quasi-Monte Carlo Ansätze: Einige Anmerkungen zu Grundlagen und Anwendungen in Statistik und Ökonometrie

			
				Peter Winker
and Kai Tai Fang
				Jahrbüchern für Nationalökonomie und Statistik 218(1–2):215–228, Jan 1999
				http://www.vwl.uni-mannheim.de/franz/Mitarbeiter/qumc06.ps

				Cites:
				Computing the discrepancy with applications to supersampling patterns

				
					[D. Eppstein publications]
					[Citation database]
					[Documents]
				
			

			
				Fano Experimental Web Server,
				D. Eppstein,
				School of Information & Computer Science,
				UC Irvine
