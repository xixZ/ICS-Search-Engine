##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Presentations/GameLab/GameLab.html
##-----------------TITLE------------------------##
UCI Game Lab
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Presentations/GameLab/GameLab_files/
##-----------------TITLE------------------------##
Index of /~wscacchi/Presentations/GameLab/GameLab_files
##------------------TEXT------------------------##
Index of /~wscacchi/Presentations/GameLab/GameLab_files
NameLast modifiedSizeDescriptionParent Directory   -  Thumbs.db10-Apr-2007 15:58  7.5K buttons.gif13-Feb-2003 13:40  1.8K editdata.mso13-Feb-2003 13:40  2.5K filelist.xml13-Feb-2003 13:40  5.0K frame.htm13-Feb-2003 13:40  1.1K fullscreen.htm13-Feb-2003 13:40  832  master03.htm13-Feb-2003 13:40  1.7K master03.xml13-Feb-2003 13:40  3.6K master03_stylesheet.css13-Feb-2003 13:40  4.3K oledata.mso13-Feb-2003 13:40  2.5K outline.htm13-Feb-2003 13:40   33K pres.xml13-Feb-2003 13:40  4.7K preview.wmf13-Feb-2003 13:40  5.8K script.js13-Feb-2003 13:40   26K slide0001.htm13-Feb-2003 13:40  5.3K slide0002.htm13-Feb-2003 13:40  4.5K slide0004.htm13-Feb-2003 13:40  7.8K slide0005.htm13-Feb-2003 13:40  6.7K slide0006.htm13-Feb-2003 13:40  8.5K slide0007.htm13-Feb-2003 13:40  5.6K slide0008.htm13-Feb-2003 13:40  5.9K slide0009.htm13-Feb-2003 13:40  6.0K slide0009_image020.gif13-Feb-2003 13:40  216  slide0010.htm13-Feb-2003 13:40  5.1K slide0011.htm13-Feb-2003 13:40  8.4K slide0012.htm13-Feb-2003 13:40  5.2K slide0013.htm13-Feb-2003 13:40  5.6K slide0014.htm13-Feb-2003 13:40  7.5K slide0015.htm13-Feb-2003 13:40  6.7K slide0016.htm13-Feb-2003 13:40  6.8K slide0017.htm13-Feb-2003 13:40  5.2K slide0018.htm13-Feb-2003 13:40  9.0K slide0020.htm13-Feb-2003 13:40  4.5K slide0020_image021.png13-Feb-2003 13:40  103K slide0020_image022.jpg13-Feb-2003 13:40   24K slide0021.htm13-Feb-2003 13:40  4.1K slide0021_image023.jpg13-Feb-2003 13:40   44K slide0021_image024.jpg13-Feb-2003 13:40   26K slide0022.htm13-Feb-2003 13:40  4.1K slide0022_image025.png13-Feb-2003 13:40   54K slide0022_image026.jpg13-Feb-2003 13:40   33K slide0023.htm13-Feb-2003 13:40  4.1K slide0023_image027.jpg13-Feb-2003 13:40   74K slide0024.htm13-Feb-2003 13:40  4.1K slide0024_image028.png13-Feb-2003 13:40   95K slide0024_image029.jpg13-Feb-2003 13:40   27K slide0025.htm13-Feb-2003 13:40  4.1K slide0025_image030.png13-Feb-2003 13:40  160K slide0025_image031.jpg13-Feb-2003 13:40   21K slide0026.htm13-Feb-2003 13:40  4.5K slide0026_image032.png13-Feb-2003 13:40   69K slide0026_image033.jpg13-Feb-2003 13:40  9.8K slide0026_image034.png13-Feb-2003 13:40  166K slide0026_image035.jpg13-Feb-2003 13:40   11K slide0027.htm13-Feb-2003 13:40  4.1K slide0027_image036.jpg13-Feb-2003 13:40  153K slide0027_image037.jpg13-Feb-2003 13:40   28K slide0028.htm13-Feb-2003 13:40  4.1K slide0028_image038.png13-Feb-2003 13:40  171K slide0028_image039.jpg13-Feb-2003 13:40   30K slide0029.htm13-Feb-2003 13:40  4.1K slide0029_image040.jpg13-Feb-2003 13:40  132K slide0029_image041.jpg13-Feb-2003 13:40   28K slide0030.htm13-Feb-2003 13:40  4.2K slide0030_image042.png13-Feb-2003 13:40  395K slide0030_image043.jpg13-Feb-2003 13:40   38K slide0031.htm13-Feb-2003 13:40  4.1K slide0031_image016.png13-Feb-2003 13:40   97K slide0031_image017.jpg13-Feb-2003 13:40   27K slide0031_image018.png13-Feb-2003 13:40   75K slide0031_image019.jpg13-Feb-2003 13:40   26K slide0032.htm13-Feb-2003 13:40  4.9K v3_blank_notes.htm13-Feb-2003 13:40  475  v3_document.htm13-Feb-2003 13:40  8.0K v3_endshow.htm13-Feb-2003 13:40  468  v3_master03_background.gif13-Feb-2003 13:40  6.5K v3_navigation_bar.htm13-Feb-2003 13:40  1.9K v3_next_active.gif13-Feb-2003 13:40  109  v3_next_disabled.gif13-Feb-2003 13:40   88  v3_outline_collapse.gif13-Feb-2003 13:40  129  v3_outline_collapsed.htm13-Feb-2003 13:40  4.3K v3_outline_expand.gif13-Feb-2003 13:40  133  v3_outline_expanded.htm13-Feb-2003 13:40   22K v3_outline_navigation_bar.htm13-Feb-2003 13:40  720  v3_prev_active.gif13-Feb-2003 13:40  111  v3_prev_disabled.gif13-Feb-2003 13:40   92  v3_slide0001.htm13-Feb-2003 13:40  2.4K v3_slide0001_image001.gif13-Feb-2003 13:40  2.1K v3_slide0002.htm13-Feb-2003 13:40  3.3K v3_slide0004.htm13-Feb-2003 13:40  1.9K v3_slide0004_image002.gif13-Feb-2003 13:40  7.1K v3_slide0005.htm13-Feb-2003 13:40  5.7K v3_slide0006.htm13-Feb-2003 13:40  6.4K v3_slide0007.htm13-Feb-2003 13:40  4.8K v3_slide0008.htm13-Feb-2003 13:40  4.8K v3_slide0009.htm13-Feb-2003 13:40  3.8K v3_slide0009_image003.gif13-Feb-2003 13:40  190  v3_slide0009_image004.gif13-Feb-2003 13:40  881  v3_slide0010.htm13-Feb-2003 13:40  4.8K v3_slide0011.htm13-Feb-2003 13:40  6.0K v3_slide0012.htm13-Feb-2003 13:40  4.4K v3_slide0013.htm13-Feb-2003 13:40  4.6K v3_slide0014.htm13-Feb-2003 13:40  5.1K v3_slide0015.htm13-Feb-2003 13:40  4.8K v3_slide0016.htm13-Feb-2003 13:40  6.0K v3_slide0017.htm13-Feb-2003 13:40  4.5K v3_slide0018.htm13-Feb-2003 13:40  6.0K v3_slide0020.htm13-Feb-2003 13:40  1.4K v3_slide0020_image005.gif13-Feb-2003 13:40   22K v3_slide0021.htm13-Feb-2003 13:40  1.5K v3_slide0021_image006.gif13-Feb-2003 13:40   38K v3_slide0022.htm13-Feb-2003 13:40  1.5K v3_slide0022_image007.gif13-Feb-2003 13:40   28K v3_slide0023.htm13-Feb-2003 13:40  1.5K v3_slide0023_image008.gif13-Feb-2003 13:40  137K v3_slide0024.htm13-Feb-2003 13:40  1.4K v3_slide0024_image009.gif13-Feb-2003 13:40   26K v3_slide0025.htm13-Feb-2003 13:40  1.4K v3_slide0025_image010.gif13-Feb-2003 13:40   23K v3_slide0026.htm13-Feb-2003 13:40  2.0K v3_slide0026_background.gif13-Feb-2003 13:40   42K v3_slide0026_image011.jpg13-Feb-2003 13:40  8.9K v3_slide0027.htm13-Feb-2003 13:40  1.4K v3_slide0027_image012.gif13-Feb-2003 13:40   43K v3_slide0028.htm13-Feb-2003 13:40  1.4K v3_slide0028_image013.gif13-Feb-2003 13:40   26K v3_slide0029.htm13-Feb-2003 13:40  1.5K v3_slide0029_image014.gif13-Feb-2003 13:40   40K v3_slide0030.htm13-Feb-2003 13:40  1.3K v3_slide0030_image015.gif13-Feb-2003 13:40   40K v3_slide0031.htm13-Feb-2003 13:40  1.5K v3_slide0031_background.gif13-Feb-2003 13:40   85K v3_slide0032.htm13-Feb-2003 13:40  4.0K v3_space.gif13-Feb-2003 13:40  807  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Presentations/MKIDS/ppframe.htm
##-----------------TITLE------------------------##
Process Discovery, Recovery, and Redesign
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Presentations/ProSim99/Process_Simulation_and_Modeling/
##-----------------TITLE------------------------##
Index of /~wscacchi/Presentations/ProSim99/Process_Simulation_and_Modeling
##------------------TEXT------------------------##
Index of /~wscacchi/Presentations/ProSim99/Process_Simulation_and_Modeling
NameLast modifiedSizeDescriptionParent Directory   -  FILE:12-Feb-2001 12:33  555K ProSim98.ppt12-Feb-2001 11:17   87K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/DAU/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/DAU
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/DAU
NameLast modifiedSizeDescriptionParent Directory   -  Final-Report-2002.pdf08-Jul-2002 09:33  1.0M OpenAcquisition.pdf11-Jun-2003 13:25  2.1M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/VISTA/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/VISTA
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/VISTA
NameLast modifiedSizeDescriptionParent Directory   -  ARQ-Scacchi-Boehm-1998.pdf09-Mar-2005 16:39  311K SC21-Software.gif06-Feb-2003 15:38   18K SC21-mod-sim.gif06-Feb-2003 15:38   19K VISTA.html06-Feb-2003 15:38   79K VISTA.pdf09-Mar-2005 16:39  311K controlpanel2.gif06-Feb-2003 15:38   18K sc21pic.jpg06-Feb-2003 15:38   38K vista1.gif06-Feb-2003 15:38  5.6K vista2.gif06-Feb-2003 15:38  4.9K vista3.gif06-Feb-2003 15:38  4.4K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/New/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/New
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/New
NameLast modifiedSizeDescriptionParent Directory   -  ARS12-Scacchi-Alspaugh.pdf10-May-2012 15:08  907K ARS2010-AAS-Final.pdf06-Apr-2010 17:48  671K ARS2013-Scacchi-Alspaugh.pdf15-Apr-2013 17:30  1.1M AlspauchAsuncionScacchi-IWSECO-July09.pdf06-Jul-2009 16:15  685K Alspaugh-Asuncion-Scacchi-AESSA-2012.pdf30-Jan-2012 11:57  2.2M Alspaugh-Asuncion-Scacchi-RE09.pdf28-May-2009 13:23  1.0M Alspaugh-Asuncion-Scacchi-SEKE2011.pdf16-May-2011 17:04  337K Alspaugh-Scacchi-Asuncion-JAIS.pdf29-Nov-2010 15:19  864K Alspaugh-Scacchi-Kawai-RELAW12.pdf16-Aug-2012 14:28  315K Alspaugh-Scacchi-RELAW12.pdf29-Aug-2012 12:15  102K CFP-FOSS-SPIP.pdf16-Jul-2004 12:02   24K Calit2-Interface-DinoQuest-Fall06.pdf03-Jan-2007 11:11  319K Chapter-Scacchi-FreeEC-Accepted.pdf14-Sep-2006 12:27  485K CoSE-Scacchi-Chapter.pdf21-Dec-2009 16:20  1.0M Convergence-Implications-2013.pdf06-Aug-2014 15:23  710K Convergence-Platforms-2013.pdf06-Aug-2014 15:24  432K Design-Requirements-Chapter-Scacchi-2008.pdf16-Mar-2009 11:32  3.7M Draft_Chapter_Scacchi.pdf12-Apr-2007 14:24  2.2M Elliott-Scacchi-BookChapter.pdf25-Aug-2003 12:04  264K Elliott-Scacchi-Free-Software-Movement.pdf24-Mar-2008 13:17  222K Elliott-Scacchi-GNUe-Case-Study.pdf02-Jun-2003 11:08  231K Elliott-Scacchi-GNUe-Study-Report.pdf29-Apr-2003 13:32  952K Elliott-Scacchi-GROUP03.pdf11-Sep-2003 10:10  385K FDG-CGSEFuture-May2015.pdf18-May-2015 13:47  158K FDG-GGJW-Final-Hold.pdf29-May-2015 12:33  231K FDG-GGJW-Final.pdf14-Jul-2015 12:31  1.0M FOSS-DevelopmentPractices.pdf30-Jul-2004 12:39  1.6M FOSS-ESEC2007.pdf30-Dec-2009 22:33  451K FOSS2010-Workshop-Overview.odt01-Dec-2009 18:46   59K FOSS2010-Workshop-Overview.pdf01-Dec-2009 18:46  172K FOSSRRI-Scacchi-Gasser.html28-Jan-2008 17:00  118K FOSSRRI-Scacchi-Gasser.pdf28-Jan-2008 18:19  179K FinalReport-OSSD-NSF-2005.pdf21-Dec-2005 19:51  9.1M FoSER-Scacchi-2010.pdf12-Nov-2010 16:09  465K Game-Research-Position.html25-Feb-2002 09:44  4.9K Gov-FOSS-Scacchi+Jensen.pdf24-Jan-2008 16:42  261K GovModSquad-Scacchi.pdf31-Dec-2009 14:25  473K Group07.pdf25-Jan-2008 09:08  380K Hold/11-Jul-2006 10:12    -  ICCRTS-Scacchi-Jensen-Final.pdf29-Jul-2008 14:37  288K ICCRTS2013-ScacchiAlspaugh.pdf26-Mar-2013 17:11  1.8M ICSE02-Workshop-Scacchi-01.pdf06-Jun-2002 14:11  185K ICSE2009-FLOSS-Workshop.pdf04-Mar-2009 14:59  228K ICSSEA03.pdf29-Oct-2003 16:26  244K Intro-ComputerGames+SoftEngr-Chapter-2015.pdf24-Nov-2015 13:54  507K Jensen-Scacchi-HICSS05.pdf07-Oct-2004 16:10  1.1M Jensen-Scacchi-ICSE-2007.pdf25-Jan-2008 09:06  1.8M Jensen-Scacchi-ISI-Draft.pdf28-Aug-2003 15:30  600K Jensen-Scacchi-MSR04.pdf21-Apr-2004 17:05  111K Jensen-Scacchi-Mar04.pdf30-Mar-2004 09:18  566K Jensen-Scacchi-OSS10.pdf23-Mar-2010 16:40  463K Jensen-Scacchi-OSS11.pdf08-Jun-2011 14:17  1.3M Jensen-Scacchi-OSS2007.pdf20-Mar-2007 18:03   39K Jensen-Scacchi-ProSim03-revised.pdf18-Aug-2003 11:57  605K Jensen-Scacchi-ProSim03.pdf29-Mar-2004 16:15  480K Jensen-Scacchi-ProSim04.pdf19-Apr-2004 15:07  345K Jensen-Scacchi-ProSim05.pdf10-May-2005 12:41   81K Jensen-Scacchi-SPIP-ProSim04.pdf18-Oct-2005 09:39  763K Jensen-Scacchi-SPW-2005.pdf27-Apr-2005 17:41  549K NPS-ARSymp-2009-AlsAsunScacchi.pdf04-Mar-2009 15:08  665K Noll-sea-1.pdf11-Sep-2003 11:50   56K OSS-Game-Worlds-Patterns.pdf10-Jul-2006 17:20  1.1M OSS-Leadership-Chapter-Scacchi-Full.pdf13-Mar-2012 15:38  403K OSS-Policy.pdf10-Oct-2002 17:13  145K OSS2008-Gasser-Scacchi.pdf04-Apr-2008 12:30  196K OSS2012-Scacchi-Alspaugh.pdf02-May-2012 16:35  968K OSSE3-Jensen-Scacchi.pdf16-Feb-2003 17:49  115K OSSE3-Scacchi.pdf21-Feb-2003 10:32  219K OSSE4-Jensen-Scacchi.pdf02-Mar-2004 16:33  197K OnlineVW-Chapter-May09.pdf04-May-2009 16:31  4.8M ProSim04-Scacchi.pdf07-Oct-2004 16:04  297K Proposal-abridged.pdf06-Mar-2003 12:15  260K RE13-Alspaugh-Scacchi-April13.pdf15-Apr-2013 16:51  469K RepurposingGameMechanics-Scacchi-2014.pdf22-Oct-2014 16:16   11M Reqs-Chapter-02d.pdf06-Jun-2008 12:44  1.9M Robbins-msotb-OSSE-Aug03.pdf10-Nov-2003 15:36  154K SEAMBNSI-AlspaughAsuncionScacchi.pdf09-Apr-2012 12:43  1.6M SPIP-FOSS-Intro-Dec2005.pdf30-May-2006 11:43  347K STIN-chapter.pdf04-Apr-2005 16:49  650K Scacchi-Alspaugh-Asuncion-JAIS.pdf29-Nov-2010 15:19  864K Scacchi-Alspaugh-ICSSP13.pdf15-Apr-2013 16:25  1.3M Scacchi-Alspaugh-OSS-Acquisition.pdf08-Apr-2008 17:12  371K Scacchi-Alspaugh-Software-Ecosystem-Niches-2010-Hold.pdf29-Nov-2010 16:57  2.1M Scacchi-Alspaugh-Software-Ecosystem-Niches-2010.pdf28-Nov-2012 15:29  1.5M Scacchi-BookChapter.pdf15-Jun-2004 17:12  699K Scacchi-EncycSE-Chapter-Jan2010.pdf13-Mar-2012 15:56  1.0M Scacchi-GAS-Paper-March11.pdf14-Mar-2011 13:55  135K Scacchi-Jensen-Noll-Elliott-MKIDS04.pdf29-Sep-2004 14:43  1.1M Scacchi-Jensen-Noll-Elliott-OSSC05.pdf24-Feb-2006 16:22  1.4M Scacchi-Nideffer-Adams-2008a.pdf07-Mar-2008 11:16  3.1M Scacchi-Nideffer-Adams-2008b.pdf24-Apr-2008 15:46  1.3M Scacchi-OSS2011.pdf08-Jun-2011 14:18  161K Scacchi-OnlineWorlds-Chapter-2009.pdf04-Jan-2011 11:40  888K Scacchi-Peopleware-Software-Process-chapter.pdf05-Apr-2004 23:23  602K Scacchi-Position-Paper-August2002.pdf10-Oct-2002 17:12  145K Scacchi-SI-Workshop.pdf10-Jul-2006 17:20  1.1M UCI-Calit2-Interface-Games-June2007-Article.pdf19-Jun-2007 16:13  950K Understanding-OS-Requirements.pdf19-Jul-2002 13:26  649K Understanding-OSS-Evolution.pdf24-Feb-2006 16:10  813K VirtualMeetings-Draft-Sept2014.pdf16-Sep-2014 18:07  125K WOSSE5-Scacchi.pdf05-Apr-2005 12:50   50K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/Internet-Procurement/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/Internet-Procurement
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/Internet-Procurement
NameLast modifiedSizeDescriptionParent Directory   -  Image4.gif31-Jan-2002 18:32   34K Image5.gif07-Apr-2000 18:30   16K Internet_Procurement.html12-Mar-2002 16:24   77K Pml02.jpg03-Mar-2000 14:40   75K internet-procurement.pdf27-Mar-2002 12:33  174K reengineer-grants-mgmt-97.pdf13-Feb-2002 13:07   45K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/KWMS-SAWMAN/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/KWMS-SAWMAN
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/KWMS-SAWMAN
NameLast modifiedSizeDescriptionParent Directory   -  KWMS-SAWMAN.pdf12-Jul-2000 15:33  400K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/ProSim-2K/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/ProSim-2K
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/ProSim-2K
NameLast modifiedSizeDescriptionParent Directory   -  ALL.JPG27-Nov-2000 06:57  170K Agent.JPG27-Nov-2000 06:57   44K CONSUMER.JPG27-Nov-2000 06:57   60K FULFILL.JPG27-Nov-2000 06:58   57K HLA-SAWMAN.GIF27-Nov-2000 06:58   11K JSS-2001-Choi-Scacchi-Complete.doc06-Sep-2001 09:13  492K JSS-2001-Choi-Scacchi-Figures.doc06-Aug-2001 18:31  426K JSS-2001-Choi-Scacchi-Text-Only.doc06-Aug-2001 18:07   96K JSS-ProSim2000-Revision.doc09-Jan-2001 01:23  549K ProSim-2K-JSS-2001.pdf26-Nov-2001 16:07  537K ProSim-2K-Paper.doc24-Jun-2000 18:17  332K ProSim-2K-Paper.pdf26-Nov-2001 16:07  537K ProSim-2K-slides.ppt27-Nov-2000 19:45  568K ProSim2K-JSS-Draft.doc14-Aug-2000 15:57  457K ProSim2K-JSS-Revision.doc09-Jan-2001 00:19  1.0M SAPA.ppt27-Nov-2000 06:56   24K SAPA/27-Sep-2001 16:58    -  VIEWER.JPG27-Nov-2000 06:56  174K product..JPG27-Nov-2000 06:58   65K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/NSF-Workshop-Jan02/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/NSF-Workshop-Jan02
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/NSF-Workshop-Jan02
NameLast modifiedSizeDescriptionParent Directory   -  Scacchi-Position-Paper-August2002.pdf10-Oct-2002 17:08  145K Scacchi-Position-Paper-Jan2002a-hold.pdf24-Jan-2002 12:33  144K Scacchi-Position-Paper-Jan2002a.html24-Jan-2002 12:24   19K Scacchi-Position-Paper-Jan2002a.pdf10-Oct-2002 17:08  145K Scacchi-Position-Paper-Revised-4Fen02.pdf04-Feb-2002 13:47   31K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/UIUC/
##-----------------TITLE------------------------##
UIUC GSLIS F/OSS Group Current Papers Online
##------------------TEXT------------------------##
UIUC GSLIS F/OSS Research Group's Current Papers Online

(See also the live
web page here.  Papers below are all on this CD; some reference
links to conferences and such may only work on an internet-connected
machine.)

Les Gasser "Software Quality
Assurance and Organizational Processes (Overview)"(Short project overview). 
Memo UIUC-2003-09-LG, March 2003.  (8Kb .html) Les Gasser "Organizational Dynamics of Software
Problems, Bugs, Failures, and Repairs"(Longer project overview),
November, 2002.   (13Kb .pdf) Robert J. Sandusky, Les Gasser, and Gabriel Ripoche
"How Negotiation Shapes Coordination in Distributed Software Problem Management" 
SQA Project Memo UIUC-2004-07, March 2004. 
Submitted to the CSCW 2004 Conference, Chicago, IL, November, 2004.
(304Kb .pdf)
Robert J. Sandusky, Les Gasser, and Gabriel Ripoche "Bug Report Networks:
Varieties, Strategies, and Impacts in an OSS Development Community
" 

To appear in Proceedings of
the ICSE Workshop on Mining Software
Repositories Edinburgh, Scotland, UK, 25 May, 2004 (168Kb
.pdf) Les Gasser, Gabriel Ripoche, and Robert J. Sandusky "Research
Infrastructure for Empirical Science of FOSS"

To appear in Proceedings of the ICSE Workshop on Mining Software
Repositories Edinburgh, Scotland, UK, 25 May, 2004 (56Kb
.pdf) Gabriel Ripoche and Les Gasser, "Extraction automatique de modèles de
processus pour l'étude de la résolution collective de problèmes dans
les communautés du logiciel libre." 
Génie Logiciel, N° 67, pages 14-19, Décembre 2003.
(in French). (928 Kb .pdf)

Les Gasser and Gabriel Ripoche,
"Distributed Collective Practices and
F/OSS Problem Management: Perspective and Methods,"
2003 Conference on Cooperation, Innovation & Technologie, (CITE2003)
University de Technologie de Troyes, France,
December, 2003.
(362 Kb .pdf)
Gabriel Ripoche and Les Gasser, "Scalable Automatic Extraction of Process Models
for Understanding F/OSS Bug Repair." 
16th International Conference on Software Engineering & its Applications
(ICSSEA-03),
Paris, France, December, 2003.
(908 Kb .pdf)

Les Gasser, Walt Scacchi, Gabriel Ripoche, and Bryan Penne, "Understanding Continuous Design in F/OSS Projects." 
16th International Conference on Software Engineering & its Applications
(ICSSEA-03),
Paris, France, December, 2003.
(44 Kb .pdf)

Les Gasser and Walt Scacchi, "Continuous Design of
Free/Open Source Software: Preliminary Workshop Report and Research
Agenda." Irvine, CA and Champaign, IL, October, 2003. (120
Kb .pdf)

Hamid Ekbia and Les Gasser, "Building the Public Value of
Free/Open Software: Discourses of Reliability".Memo UIUC-2004-02,
February 2004.Abstract of a paper to be presented at the 4S/EASST
Conference, Paris, France, August, 2004.
Les Gasser, Gabriel Ripoche, Bob Sandusky, Jean-Paul Sansonnet and
Bill Turner, "Distributed
Representations and Collective Agreement".Memo UIUC-2004-03,
February 2004.Abstract of a paper to be presented at the 4S/EASST
Conference, Paris, France, August, 2004.
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/RelatedResearch/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/RelatedResearch
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/RelatedResearch
NameLast modifiedSizeDescriptionParent Directory   -  conflict-soft-within-teams-Sawyer-ISJ-2001.pdf12-Mar-2002 17:07  301K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/Vintage/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/Vintage
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/Vintage
NameLast modifiedSizeDescriptionParent Directory   -  Business_Process_Modeling.pdf19-Aug-2002 10:52  282K DIF90.pdf13-Feb-2002 12:27  831K DistSysFactory.pdf25-Sep-2000 08:42  1.3M Kling&Scacchi1982-OCR.pdf28-Nov-2006 15:23  2.9M Maint-Evolving-Soft-Config-1987.pdf15-Dec-2006 15:56  3.6M MetaCASE.pdf04-Oct-2001 11:04  200K Noll-Scacchi-DHT-1996.pdf18-Mar-2002 12:44  171K Process-Meta-Model.pdf12-Feb-2001 10:28  1.1M Process_Asset_Library.pdf29-Nov-2001 11:27  243K Process_Measurement.pdf19-Dec-2006 11:57  500K Requirements_Documentation.pdf17-Feb-2005 01:38  304K Software_Productivity.html09-Mar-2005 17:03  113K USC-SystemFactory-1987.pdf24-May-2010 12:41  6.3M Understand-Soft-Maint-1987.pdf15-Dec-2006 15:55  4.4M VLSI-SE-JSS-1984.pdf24-May-2010 12:20  4.6M WebOfComputing-Kling&Scacchi1982.pdf14-Sep-2006 11:21  2.9M acm87-ishys-hypertext.pdf28-Feb-2001 15:41  1.5M icse94-smart.pdf22-Feb-2001 09:19  739K ieee89-icse-work-strux-01.pdf19-Dec-2001 11:04  961K ieee89-icse-work-strux.pdf28-Feb-2001 12:13  958K ieee89-ishys.pdf28-Feb-2001 12:10  2.9M ieee90-articulation.pdf22-Feb-2001 09:21  1.0M ieee90-articulator.pdf13-Feb-2002 12:38  1.0M ieee90-dht.pdf28-Feb-2001 12:07  647K ieee90-software-redesign.pdf13-Feb-2002 12:41  581K ieee92-kbse-splib.pdf28-Feb-2001 12:03  733K ieee92-process-integrated-CASE.pdf13-Feb-2002 12:58  1.0M ieee93-kbse-articulation.pdf28-Feb-2001 12:02  554K jasis90-DSHE.pdf13-Feb-2002 12:54   51K uci94-hypertext-repositories.pdf13-Feb-2002 13:01  145K usc94-emergence-EC.pdf13-Feb-2002 13:14   32K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/Process-Hypertext/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/Process-Hypertext
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/Process-Hypertext
NameLast modifiedSizeDescriptionParent Directory   -  Process-Hypertext.pdf12-Feb-2001 09:52  187K Process-Hypertext.ps18-Feb-2000 16:58  3.4M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/EC/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/EC
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/EC
NameLast modifiedSizeDescriptionParent Directory   -  CompBusProcess-Components-EC.pdf13-Feb-2002 11:19  311K OpenEC-July2002.pdf23-Jan-2003 10:40  3.0M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/SE-Encyc/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/SE-Encyc
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/SE-Encyc
NameLast modifiedSizeDescriptionParent Directory   -  Process-Models-SE-Encyc.pdf08-Oct-2001 17:25  323K Socio-Technical-Design.pdf13-Oct-2003 15:40  133K Software-Engineering-Hypertext.pdf31-May-2001 15:36   99K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/IEE-Proc-Software/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/IEE-Proc-Software
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/IEE-Proc-Software
NameLast modifiedSizeDescriptionParent Directory   -  Figure-Exhibit-1.jpg15-Jan-2002 12:50  100K Figure-Exhibit-1.tif15-Jan-2002 12:22  2.1M Figure-Exhibit-2.jpg15-Jan-2002 12:49  148K Figure-Exhibit-2.tif15-Jan-2002 12:19  2.2M Figure-Exhibit-3.jpg15-Jan-2002 12:49  121K Figure-Exhibit-3.tif15-Jan-2002 12:25  2.5M Figure-Exhibit-4.jpg15-Jan-2002 12:50  107K Figure-Exhibit-4.tif15-Jan-2002 12:34  2.2M Figure-Exhibit-5.jpg15-Jan-2002 12:50  147K Figure-Exhibit-5.tif15-Jan-2002 12:29  2.2M Figure-Exhibit-6.jpg15-Jan-2002 12:50  163K Figure-Exhibit-6.tif15-Jan-2002 12:33  2.0M IEE-Proc-Soft-Final-Scacchi-proof+corrections.pdf11-Mar-2002 13:50  3.1M IEE-Proc-Soft-Final-Scacchi-proof.pdf11-Mar-2002 10:52  3.1M IEE-Proc-Soft-Final-Scacchi-singlespace.doc08-Feb-2002 08:20  548K IEE-Proc-Soft-Final-Scacchi-singlespace.pdf04-Jun-2002 13:01  2.4M IEE-Proc-Soft-Final-Scacchi.doc05-Feb-2002 12:01  547K IEE-Proc-Soft-Final-Scacchi.pdf04-Jun-2002 13:01  2.4M ReadME.txt15-Jan-2002 19:56  2.8K Scacchi.pdf04-Jun-2002 13:01  2.4M copyright-originality-form-signed.pdf14-Jan-2002 16:04  723K test.pdf11-Mar-2002 12:29  3.1M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/WOSSE-2005/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/WOSSE-2005
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/WOSSE-2005
NameLast modifiedSizeDescriptionParent Directory   -  5-WOSSE.zip26-Apr-2005 10:38  2.5M 5-WOSSE Table of Contents.pdf26-Apr-2005 10:11   95K AdamsBoldyreffNutterRank.pdf25-Apr-2005 16:51  159K Asundi.pdf25-Apr-2005 16:51  175K BarreraRoblesCanasMartinMatellan.pdf25-Apr-2005 16:51  107K Chawner.pdf25-Apr-2005 16:51  151K GeorgasGorlickTaylor.pdf26-Apr-2005 09:51  165K GurbaniGarvertHerbsleb.pdf25-Apr-2005 16:51  178K KoponenHotti.pdf25-Apr-2005 16:54  166K MannaertVen.pdf25-Apr-2005 16:56  156K PerssonGustavssonLingsLundellMattssonArlig.pdf25-Apr-2005 16:58  202K RajaBarry.pdf25-Apr-2005 17:00  156K RossiBonaccorsi.pdf25-Apr-2005 17:02  213K Scacchi.pdf25-Apr-2005 17:17  167K ShaikhCornford.pdf25-Apr-2005 17:19  215K StewartDarcyDaniel.pdf25-Apr-2005 17:21  164K ZhouDavis.pdf25-Apr-2005 17:24  207K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/Process_Engineering/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/Process_Engineering
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/Process_Engineering
NameLast modifiedSizeDescriptionParent Directory   -  Process_Life_Cycle.pdf07-Mar-2001 14:48  739K process-extranet-concur-engr-IEEE-1998.pdf17-Jun-2002 11:32  303K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/Process-Simulator/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/Process-Simulator
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/Process-Simulator
NameLast modifiedSizeDescriptionParent Directory   -  SPIP-ProSim99.doc22-Jan-2000 17:40  346K Scacchi-SPIP-NoFigures.doc22-Jan-2000 18:03  105K Scacchi-figure-1.tif22-Jan-2000 17:53  197K Scacchi-figure-2.tif22-Jan-2000 17:54   81K Scacchi-figure-3.tif22-Jan-2000 17:54  8.4K Scacchi-figure-4.tif22-Jan-2000 18:00   40K Scacchi-figure-5.tif22-Jan-2000 17:54   31K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/CRITO/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/CRITO
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/CRITO
NameLast modifiedSizeDescriptionParent Directory   -  GNUe-Case-Study-Final.pdf31-Jul-2002 17:34  2.9M 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/WESAS-2000/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/WESAS-2000
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/WESAS-2000
NameLast modifiedSizeDescriptionParent Directory   -  WESAS-2000.pdf27-Nov-2000 06:53   33K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/ProSim-1998/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/ProSim-1998
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/ProSim-1998
NameLast modifiedSizeDescriptionParent Directory   -  Process-Experience.pdf20-Feb-2001 17:16  447K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~wscacchi/Papers/Open-Source-Research/
##-----------------TITLE------------------------##
Index of /~wscacchi/Papers/Open-Source-Research
##------------------TEXT------------------------##
Index of /~wscacchi/Papers/Open-Source-Research
NameLast modifiedSizeDescriptionParent Directory   -  FLOSS-Evaluating Software Engineering-Wasserman-Capra.pdf29-May-2007 18:03  143K FOSS-research-infrastructure-2005.pdf29-May-2007 16:46   94K OSSE3-Elliott.pdf07-May-2003 13:23  154K OSSE3-Erenkrantz.pdf07-May-2003 13:24   20K OSSE3-HS-Erenkrantz.pdf07-May-2003 13:26   50K OSSE3-Jensen-Scacchi.pdf16-Feb-2003 17:49  115K OSSE3-Scacchi.pdf21-Feb-2003 10:31  219K OSSE5-GeorgasGorlickTaylor.pdf25-Sep-2006 18:41  165K 
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101119.html
##-----------------TITLE------------------------##
Theory Seminar, 19 Nov 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar
CS Building, Room 243


19 Nov 2010:
Succinct Convex Greedy Drawing of 3-Connected Plane Graphs
Lowell Trott

The authors show that the classical Schnyder drawing in
R2 of 3-connected plane graphs is weakly greedy with
respect to a metric function H(*,*).  The drawing is planar,
convex, and succinct, using two integer coordinates between 0 and
f, where f is the number of internal faces of the graph.

(Based on a paper by He and Zhang to appear at SODA 2011.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101105.html
##-----------------TITLE------------------------##
Theory Seminar, 5 Nov 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar
CS Building, Room 243


5 Nov 2010:
On Space Efficient Two Dimensional Range Minimum Data Structures
Darren Strash

The two dimensional range minimum query problem is to preprocess a
static two-dimensional matrix A with N elements so that reporting
the minimum element in a rectangular range can be done efficiently. We
show that every algorithm enabled to access A during the query
and using O(N/c) bits additional space requires
Ω(c) query time, for any c where
1 ≤ c ≤ N. This lower bound
holds for any dimension. In two dimensions, we complement the lower
bound with an indexing data structure of size O(N/c) bits
additional space which can be preprocessed in O(N) time and
achieves O(c log2 c) query
time. Taking c to be O(1), this is the first O(1) query time
algorithm using optimal O(N) bits additional space.

(Based on a paper by Brodal, Davoodi, and Rao at ESA 2010.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101022.html
##-----------------TITLE------------------------##
Theory Seminar, 22 Oct 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar


22 Oct 2010:
Data Specific Analysis of String Sorting
Saumi Bandyopadhyay

We consider the complexity of sorting strings in the model that
counts comparisons between symbols and not just comparisons between
strings. We show that for any set of strings S the complexity of sorting
S can naturally be expressed in terms of the trie induced by S. This
holds not only for lower bounds but also for the running times of
various algorithms. Thus this “data specific” analysis allows
a direct comparison of different algorithms running on the same data. We
give such “data-specific” analyses for various versions of
quicksort and versions of mergesort. As a corollary we arrive at a very
simple analysis of quicksorting random strings, which so far required
rather sophisticated mathematical tools. As part of this we provide
insights in the analysis of tries of random strings which may be
interesting in their own right.

(Based on a paper by Raimund Seidel at SODA 2010.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101015.html
##-----------------TITLE------------------------##
Theory Seminar, 15 Oct 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar


15 Oct 2010:
A Dynamic Data Structure for Approximate Range Searching
Joe Simons

In this paper, we introduce a simple, randomized dynamic
data structure for storing multidimensional point sets, called
a quadtreap. This data structure is a randomized, balanced
variant of a quadtree data structure. In particular, it defines
a hierarchical decomposition of space into cells, which
are based on hyperrectangles of bounded aspect ratio, each
of constant combinatorial complexity. It can be viewed as a
multidimensional generalization of the treap data structure
of Seidel and Aragon. When inserted, points are assigned
random priorities, and the tree is restructured through rotations
as if the points had been inserted in priority order.
In any fixed dimension d, we show it is possible to store a
set of n points in a quadtreap of space O(n). The height
h of
the tree is O(log n) with high probability. It supports point
insertion in time O(h). It supports point deletion in worstcase
time O(h2) and expected-case time O(h), averaged over
the points of the tree. It can answer ε-approximate spherical
range counting queries over groups and approximate nearest
neighbor queries in time O(h + (1/ε)d − 1).

(Based on a paper by David Mount and Eunhui Park at SoCG 2010.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101208.html
##-----------------TITLE------------------------##
Theory Seminar, 8 Dec 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar
CS Building, Room 180


8 Dec 2010, 11AM:
Highway Dimension: From Practice to Theory and Back
Andrew V. Goldberg, Microsoft Research

Computing driving directions has motivated many shortest path
heuristics that answer queries on continental-scale networks, with tens
of millions of intersections, in real time. The underlying algorithms
are intuitive, but until recently there was no theoretical explanation
of their performance. We review some of these algorithms and give the
first theoretical analysis for them on a non-trivial class of
networks.

For our analysis, we introduce the notion of highway dimension.  The
analysis works for networks with low highway dimension and gives a
unified explanation of algorithms' good performance. Our analysis
explores an unexpected relationship to VC-dimension and learning theory
and applies the latter to graph algorithm design.

We also propose a new algorithm that achieves a better theoretical
time bound and is in the spirit of labeling algorithms for approximate
shortest paths from the distributed computing literature. Our
experiments show that an implementation of this algorithm is extremely
fast in practice, validating the theoretical prediction.

(Joint work with Ittai Abraham, Amos Fiat, and Renato Werneck.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101029.html
##-----------------TITLE------------------------##
Theory Seminar, 29 Oct 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar


29 Oct 2010:
Streaming k-means on Well-Clusterable Data
Michael Shindler

One of the central problems in data-analysis is k-means
clustering. We study the problem under the streaming variant,
in which we may read the input only once and must use only a small
amount of memory. Our result uses the assumption of data
separability, which closely reflects how k-means is used in
practice. We show a near-optimal streaming approximation algorithm for
k-means with sublinear memory and a single pass, under the data
separability assumption. Our algorithm offers significant improvements
in both space and running time over previous work while yielding
asymptotically best-possible performance.  We also show several related
results, including a method to convert any constant approximation to be
more accurate on well-clusterable data.

(Joint work with Vladimir Braverman, Adam Meyerson, Rafail Ostrovsky,
Alan Roytman, and Brian Tagiku, to appear at SODA 2011.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/101203.html
##-----------------TITLE------------------------##
Theory Seminar, 3 Dec 2010
##------------------TEXT------------------------##
CS 269S, Fall 2010: Theory Seminar
CS Building, Room 243


3 Dec 2010:
Triangulating the Square and Squaring the Triangle: Quadtrees and
Delaunay Triangulations are Equivalent
Maarten Löffler

We show that Delaunay triangulations and compressed quadtrees are
equivalent structures. More precisely, we give two algorithms: the first
computes a compressed quadtree for a planar point set, given the
Delaunay triangulation; the second finds the Delaunay triangulation,
given a compressed quadtree. Both algorithms run in deterministic linear
time on a pointer machine. Our work builds on and extends previous
results by Krznaric and Levcopolous and Buchin and Mulzer. Our main tool
for the second algorithm is the well-separated pair decomposition
(WSPD), a structure that has been used previously to find Euclidean
minimum spanning trees in higher dimensions. We show that knowing the
WSPD (and a quadtree) suffices to compute a planar EMST in linear
time. With the EMST at hand, we can find the Delaunay triangulation in
linear time.

(Joint work with Wolfgang Mulzer, to appear at SODA 2011.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/071116.html
##-----------------TITLE------------------------##
Theory Seminar, Nov 16, 2007
##------------------TEXT------------------------##
CompSci 269S, Fall 2007: Theory Seminar

November 16, 2007, 1:00pm, in Bren Hall 1423

Computing Similarity in Collaborate Filtering Systems

presented by Nate Gertsch

Abstract:
not yet available
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/071130.html
##-----------------TITLE------------------------##
Theory Seminar, Nov 30, 2007
##------------------TEXT------------------------##
CompSci 269S, Fall 2007: Theory Seminar

November 30, 2007, 1:00pm, in Bren Hall 1423

Balloon Popping With Applications to Ascending Auctions

(from FOCS 2007) authored by Nicole Immorlica,
 Anna R Karlin, Mohammad Mahdian, and Kunal Talwar

presented by Matt Nguyen

Abstract:
The authors study the power of ascending auctions in a scenario in
which a seller is selling a collection of identical items to anonymous
unit-demand bidders. They show that even with full knowledge of the
set of bidders' private valuations for the items, if the bidders are
ex-ante identical, no ascending auction can extract more than a
constant times the revenue of the best fixed price scheme.

This problem is equivalent to the problem of coming up with an optimal
strategy for blowing up indistinguishable balloons with known
capacities in order to maximize the amount of contained air. They show
that the algorithm which simply inflates all balloons to a fixed
volume is close to optimal in this setting.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/071019.html
##-----------------TITLE------------------------##
Theory Seminar, Oct 19, 2007
##------------------TEXT------------------------##
CompSci 269S, Fall 2007: Theory Seminar

October 19, 2007, 1:00pm, in Bren Hall 1423

Priority Algorithms

Kim S. Larsen

Abstract:
Most of us have an intuitive understanding of what a greedy-like algorithm
is. Even though the concept has been studied in restricted scenarios, such
as matroid theory, the concept, as it is used as an every-day algorithms
or programming paradigm, has not been formally studied. Priority
Algorithms is an attempt at modeling and capturing the power of these
greedy-like algorithmic approaches to problem solving. Most of the work in
the area has been targeted at establishing lower bounds on the ratios
obtainable when approximating NP-hard problems using greedy-like
approaches. We give a brief introduction to the topic. In the talk, we
define priority algorithms, list problem scenarios that have been
investigated so far, and discuss a few examples to give the flavor of the
kind of argumentation which is used.

This is joint work with Allan Borodin and Joan Boyar.
On the Convergence of Upper Bound Techniques
           for the Average Length of Longest Common Subsequences
George Lueker
Abstract:
This talk will describe some methods for finding upper bounds on the
expected length of two random strings of equal length, and investigate
whether these methods produce bounds that are asymptotic to the true value.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/071109.html
##-----------------TITLE------------------------##
Theory Seminar, Nov 9, 2007
##------------------TEXT------------------------##
CompSci 269S, Fall 2007: Theory Seminar

November 9, 2007, 1:00pm, in Bren Hall 1423

Distribution Sort in PEM Model

presented by Nodari Sitchinava

Abstract:
This talk will present preliminary results on selection and distribution
sort in the Parallel External Memory (PEM) Model.

This is joint work with Lars Arge and Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/071026.html
##-----------------TITLE------------------------##
Theory Seminar, Oct 26, 2007
##------------------TEXT------------------------##
CompSci 269S, Fall 2007: Theory Seminar

October 26, 2007, 1:00pm, in Bren Hall 1423

Relative Worst Order Analysis

Joan Boyar

Abstract:
This talk will provide an introduction to relative
worst order analysis, a method for comparing the
performance of on-line algorithms. On-line bin packing
and paging will be used as examples.

The papers providing the basis for this talk are joint
work with Lene M. Favrholdt and Kim S. Larsen.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/071102.html
##-----------------TITLE------------------------##
Theory Seminar, Nov 2, 2007
##------------------TEXT------------------------##
CompSci 269S, Fall 2007: Theory Seminar

November 2, 2007, 1:00pm, in Bren Hall 1423

A Faster Cache-Oblivious Shortest-Path Algorithm for
Undirected Graphs with Bounded Edge Lengths

presented by Kevin Wortman

Abstract:
We present a cache-oblivious algorithm for computing single-source
shortest paths in undirected graphs with non-negative edge lengths.
The algorithm incurs O(sqrt(nm log w)/B+(m/B) log n +MST (n, m))
memory transfers on a graph with n vertices, m edges, and real edge
lengths between 1 and W; B denotes the cache block size, and MST(n, m)
denotes the number of memory transfers required to compute a minimum
spanning tree of a graph with n vertices and m edges. Our algorithm is
the first cache-oblivious shortest-path algorithm incurring less than
one memory transfer per vertex if the graph is sparse (m = O(n)) and W
= 2^o(B).

This paper was authored by
Luca Allulli, Peter Lichodzijewski, and Norbert Zeh,
and appeared in SODA 2007.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080425.html
##-----------------TITLE------------------------##
Theory Seminar, Apr 25, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Apr 25, 2008, 1:00pm in Bren Hall 1423


Finding Optimal Refueling Policies in Transportation Networks


authored by Shieu-Hong Lin

presented by Nate Gertsch


Abstract:

We study the combinational properties of optimal refueling policies,
which specify the transportation paths and refueling operations
along the paths to minimize the total transportation costs between vertices.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080606.html
##-----------------TITLE------------------------##
Theory Seminar, June 6, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

June 6, 2008, 1:00pm in Bren Hall 1423


A Randomized Algorithm for Constructing the Trapezoidal Map Induced by a 
Connected Geometric Graph


Darren Strash


Abstract:

We discuss the general problem of constructing the trapezoidal map 
induced by a set of line segments in the plane, and present preliminary 
results for a randomized algorithm for the special case when the line 
segments form a connected geometric graph.

This is joint work with Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080418.html
##-----------------TITLE------------------------##
Theory Seminar, Apr 18, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Apr 18, 2008, 1:00pm in Bren Hall 1423


Graph Algorithms in PEM: Part II


presented by Nodari Sitchinava


Abstract:

This is the second part in the two part series on graph 
algorithms in the Parallel External Memory model.  I will present 
algorithms for finding connected and bi-connected components, minimum 
spanning trees and ear decomposition
in graphs; tree contraction, expression tree evaluation and lowest 
common ancestor queries on trees. All these solutions use Euler tour 
technique as the building block just like in the PRAM algorithms. 
Therefore, I'll review this technique and simple problems one can solve 
with it in parallel.

This is joint work with Lars Arge and Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080509.html
##-----------------TITLE------------------------##
Theory Seminar, May 9, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

May 9, 2008, 1:00pm in Bren Hall 1423


Offline Variants of the "Lion and Man" Problem


authored by Adrian Dumitrescu, Ichiro Suzuki, and Pawel Zylinski
Appeared at SOCG 2007
http://portal.acm.org/citation.cfm?id=1247069.1247085&coll=GUIDE&dl=GUIDE

presented by Kevin Wortman


Abstract:

Consider the following survival problem:Given a set of k trajectories
(paths) with maximum unit speed in a bounded region over a (long) time
interval [0,T], find another trajectory (if it exists) subject to the
same maximum unit speed limit, that avoids (that is, stays at a safe
distance of) each of the other trajectories over the entire time
interval. We call this variant the continuous model of the survival
problem. The discrete model of this problem is: Given the trajectories
(paths) of k point robots in a graph over a (long) time interval
0,1,2,...,T, find a trajectory (path) for another robot, that avoids
each of the other k at any time instance in thegiven time interval. We
introduce the notions of survival number of a region,and that of a
graph, respectively, as the maximum number of trajectories which can
be avoided in the region (resp. graph). We give the first estimates on
the survival number of the n x n grid Gn, and also devise an efficient
algorithm for the corresponding safe path planning problem in
arbitrary graphs. We then show that our estimates on the survival
number of Gn on the number of paths that can be avoided in Gn can be
extended for the survival number of a bounded (square) region. In the
final part of our paper, we consider other related offline questions,
such as the maximum number of men problem and the spy problem.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151002.html
##-----------------TITLE------------------------##
Theory Seminar, October 2, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


October 2, 2015:

Fast Force-Directed Graph Drawing Using the Well-Separated Pair Decomposition


Tim Johnson



Abstract: We first revisit the algorithm for computing the
well-separated pair decomposition in time O(n log n). Then we show how
this algorithm can be used to give a faster approximation to the
Fruchterman-Reingold algorithm for force-directed graph drawing.
Finally, we provide experimental evidence that this does not affect
the quality of the results.

Paper by F. Lipp, A. Wolff and J. Zink from Graph Drawing 2015.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151204.html
##-----------------TITLE------------------------##
Theory Seminar, December 4, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


December 4, 2015:

Homomorphism polynomials complete for VP


Umut Isik



Abstract:
I will discuss the complexity classes VP and VNP of families of polynomials.
While VNP contains complete problems (like the permanent) that are natural,
the class VP was now known to have any complete problems beyond those that
can be based on circuit-related problems based on the definition of VP. I
will discuss a natural VP-complete family based on 'graph homomorphism
polynomials'. 

This talk is based on a 
paper by 
Arnaud Durand, Meena Mahajan, Guillaume
Malod, Nicolas de Rugy-Altherre, and Nitin Saurabh.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151009.html
##-----------------TITLE------------------------##
Theory Seminar, October 9, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


October 9, 2015:

Contact Representations of Graphs in 2D and 3D


Jawaherul Alam



Abstract:
We study contact representations of graphs in the plane and in 3D space,
where vertices are represented by polygons or polyhedra and each edge is
realized by a common boundary between two polygons or polyhedra. In the
weighted version of the problem, we find contact representations with the
additional restriction that the areas for the polygons or the volumes for the
polyhedra realize some pre-specified value for the vertices. We address
different variants of the problem depending on the types of polygons or
polyhedra (convex or non-convex, axis-aligned or not), types of contacts
(proper contacts with common boundaries of non-zero lengths in 2D or non-zero
areas in 3D or improper contacts where common boundaries of zero lengths or
areas are allowed), and whether holes are allowed in the representation or
not.


In the plane we mainly focus on the weighted version of the problem. We find
optimal (in terms of polygonal complexity) contact representations for planar
graphs (both for axis-aligned and non-axis-aligned polygons) and some
subclasses of planar graphs. With non-axis-aligned polygons we show that
non-convex polygons with 4 sides are sometimes necessary and always
sufficient for proportional contact representation of a planar graph, when
point contacts are allowed; otherwise for proper contacts, 7-sided polygons
are sometimes necessary and always sufficient. We give a linear-time
algorithm in each case to compute the optimal representation. We also give
polynomial-time algorithms to construct optimal proportional contact
representations for (2, 0)-sparse graphs and for maximal outerplanar graphs.
In case only axis-aligned polygons are used, we show that 8 sides are
sometimes necessary and always sufficient for a planar graph. While we do not
have a polynomial-time algorithm to construct such a representation, we give
a linear-time algorithm to compute representation with 10-sided axis-aligned
polygons. We also give linear-time construction algorithms for optimal
proportional contact representations with 8-sided polygons for planar 3-trees
and Hamiltonian maximal planar graphs, and with rectangles for maximal
outerplanar graphs. For contact representation with 3D polyhedra, we consider
both the weighted and the unweighted variants of the problem for both planar
and non-planar graphs and have some preliminary results. We find several
subclasses of planar graphs that have contact representations using cubes or
proportional boxes. We also consider (improper) contact representations using
tetrahedra, and show that planar graphs, complete bipartite and tripartite
graphs, and complete graphs with at most 10 vertices have such
representations.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151023.html
##-----------------TITLE------------------------##
Theory Seminar, October 23, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


October 23, 2015:

Foundations for Graph Watermarking


Jenny Lam



Abstract:
We introduce security and algorithmic foundations for graph
watermarking. Our foundations are based on characterizing the
feasibility of graph watermarking in terms of keygen, marking, and
identification functions defined over graph families with known
distributions. We demonstrate the strength of this approach with
exemplary watermarking schemes for two random graph models, both of
which are used to model real-world networks. In addition, unlike
previous marking/de-anonymization schemes based on adding new
vertices, our framework supports effective graph watermarking schemes
that use only edge flipping.

Joint work with David Eppstein, Michael T. Goodrich, and Michael Mitzenmacher
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151016.html
##-----------------TITLE------------------------##
Theory Seminar, October 16, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


October 16, 2015:

Quantum NP and Beyond


Sandy Irani



Abstract:
The theory of NP-completeness has been the basis for our understanding
of important phenomena in the quantum world. The development of the
class QMA (the quantum analog of NP) has shed light on the limits of
quantum computers as well as the complexity of fundamental problems in
condensed matter physics. The connection between these areas arises
from the close relationship between the complexity of constraint
satisfaction problems and the properties of ground states of local
Hamiltonians describing quantum systems. This talk will be a brief
survey of how QMA has helped inform our understanding of quantum
computation and entanglement as well as some of the questions at the
forefront of quantum Hamiltonian complexity.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151113.html
##-----------------TITLE------------------------##
Theory Seminar, November 13, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


November 13, 2015:

Finding Pairwise Intersections Inside a Query Range


Nil Mamano



Abstract:
We study the following problem: preprocess a set of axis-aligned rectangles R
into a data structure that allows us to efficiently report all pairs of
rectangles from R that intersect inside an axis-aligned query range Q. We
present data structures of size O(n log n) and with query time O(k log n +
log n log* n), where k denotes the number of answers.

Paper by Mark de Berg, Joachim Gudmundsson, and Ali D. Mehrabi
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/151030.html
##-----------------TITLE------------------------##
Theory Seminar, October 30, 2015
##------------------TEXT------------------------##
Fall 2015: Theory Seminar
ICS, Room 209, 1:00pm


October 30, 2015:

Sorting and Selection with Equality Comparisons


Will Devanny



Abstract:
We consider the fundamental sorting and selection problems on a list of
elements that are not necessarily from a totally ordered set. Here relation
between elements are determined by ‘equality’ comparisons whose outcome is =
when the two elements being compared are equal and = otherwise. We determine
the complexity of sorting (finding the frequency of every element), finding
mode and other frequently occurring elements using only =,= comparisons. We
show that Ω(n2/m) comparisons are necessary and this many comparisons are
sufficient to find an element that appears at least m times. This is in sharp
contrast to the bound of Θ(n log(n/m)) bound in the model where comparisons
are  or ≤, >.

Paper by Varunkumar Jayapul, J. Ian Munro, Venkatesh Raman, Srinivasa Rao
Satti
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970404.html
##-----------------TITLE------------------------##
Theory Seminar, 4 Apr 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


4 Apr 1997:
Parametric Minimum Spanning Trees and Constructive Solid
Geometry
David Eppstein, ICS, UC Irvine

If one is given a graph in which each edge e is labeled with
a linear function 
fe(x) = 
aex + 
be, one can derive a sequence of spanning
trees by plugging in different values of x and computing the
minimum spanning tree of the resulting function values. I have two
papers on this subject: "Using Sparsification for
Parametric Minimum Spanning Tree Problems" (with D.
Fernández-Baca and G. Slutzki) shows how to compute this
sequence in time O(mn log n), and "Geometric Lower Bounds for
Parametric Matroid Optimization" derives a lower bound of
Omega(m alpha(n)) on the number of trees in this
sequence. However this lower bound is still quite far from the
known upper bound of O(m sqrt n). 

In this talk I describe ongoing work on my attempts to improve
this lower bound. Instead of considering the minimum spanning tree
itself, I consider the quantity

q(x) = minpath p
maxedge e of p 
fe(x)

where the minimum is over all paths in the graph that connect two
specified terminals s and t. Equivalently, this
quantity is the weight of the heaviest edge of the path from 
s to t in the MST. 

Geometrically, the shape formed by plotting q(x)
against x is a lower envelope (min) of an upper envelope
(max) of certain sets of lines (plots of each individual edge
weight). The upper envelope of lines is a concave chain, so 
q(x) is the lower envelope of certain concave chains. It
forms a monotone path in the line arrangement (monotone simply
means that it is the plot of a function, having only one
intersection with any vertical line). The convex vertices in this
path correspond to minimum spanning tree changes, although the
concave vertices may not.

My first attempt to prove a better lower bound on the number of
minimum spanning trees starts from a construction of Matousek, who
showed that monotone paths in arrangements may have complexity
Omega(m5/3) (no nontrivial upper bound is known).
Since Matousek's lower bound on monotone paths is larger than our
known upper bound on minimum spanning trees, there are some
monotone paths that do not correspond to minimum spanning tree
sequences. I tried a simplified example in which m lines are
partitioned into sqrt m "cables" of sqrt m
lines each, with an additional m lines connecting up the
intersections of pairs of cables in such a way that each
intersection contributes sqrt m vertices (both convex
and concave) to the monotone path. It is possible to represent this
monotone path as a lower envelope of a simple family of concave
chains, however when I tried to translate this family back into
graph-theoretic terms I ended up with "coat-hangers" (triangles
with a dangling edge) instead of paths.

Instead, I tried restricting the problem further, to paths in
series-parallel graphs. Series composition corresponds to forming
q(x) as the upper envelope of two paths coming from
the two subgraphs being composed, and parallel composition
corresponds to a lower envelope. Therefore, one can re-interpret
the problem as a form of "constructive solid geometry" for monotone
paths: one is given a set of monotone paths, initially just 
m lines, and can repeatedly perform operations that combine two
paths, replacing the two by a single upper or lower envelope. How
complex a path can result from this process? The bounds I currently
know are exactly those for the original parametric MST problem,
Omega(m alpha(n)) and
O(m sqrt n).

In summary, I still haven't made progress in narrowing the gap
between lower and upper bounds for parametric MSTs, but at least
I've found some interesting ways of translating the problem into
some geometric formulations that don't look like they should have
anything to do with MSTs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970523.html
##-----------------TITLE------------------------##
Theory Seminar, 23 May 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


23 May 1997:
Final Public Oral Dissertation Defense
Vitus Leung, ICS, UC Irvine

In this dissertation, we develop a model for scheduling jobs
that may be competing for mutually exclusive resources. The
conflicts between jobs are modeled by a conflict graph, so
that the set of all concurrently running jobs must form an
independent set in the graph. This model is natural and general
enough to have applications in a variety of settings; however, we
are motivated by the following two specific applications: traffic
intersection control and session scheduling in high speed local
area networks with spatial reuse. For all the graphs we address, we
focus on the problem of minimizing the maximum response time of any
job that enters the system. For the specific graph which arises in
the traffic intersection control problem, we show a simple
algorithm which achieves the optimal competitive ratio. Motivated
by the second application, we also give an algorithm for interval
graphs.

Since I have already presented some of the details in the upper
bounds, I will be presenting some of the details in the lower
bounds. The best competitive ratio achievable by any online
algorithm even on a path of n nodes is Omega(n). As a
result, we turn to scheduling with conflicts under probabilistic
assumptions about the input. Each node i has a value 
pi such that a job arrives at node i in any
given time unit with probability pi. Arrivals at
different nodes and during different time periods are independent.
Under reasonable assumptions on the input sequence, we are able to
obtain a bounded competitive ratio for an arbitrary conflict graph.
In addition, if the conflict graph is a perfect graph, we give an
algorithm whose competitive ratio converges to 1.

Finally, we discuss simulation results for the traffic signal
control problem. Using the methodology of Recker, Ramanathan, Yu,
and McNally and a modification of their software, we show that some
of our algorithms achieve significant improvements over
full-actuated control, the most advanced traffic signal control
method in the public domain.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970502.html
##-----------------TITLE------------------------##
Theory Seminar, 2 May 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


2 May 1997:
Non-Isomorphic Graph Generation
Brad Hutchings, ICS, UC Irvine

Time and space efficient non-isomorphic graph generation may have
applications in graph compression, generating graph catalogs, and
computationally looking at properties of sets of graphs. Brendan McKay's paper 
Isomorph-Free Exhaustive Generation presents an abstract
framework that can be applied to many interesting graph and
non-graph generation problems. I will discuss two graph generation
problems, Maximal Planar Graphs and Triangle Free Graphs. I will
then explain how McKay's general method applies to graph problems
and compare with selected graph generation schemes.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970509.html
##-----------------TITLE------------------------##
Theory Seminar, 9 May 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


9 May 1997:
Randomization in Online Computation
Final Public Oral Dissertation Defense
Steve Seiden, ICS,
UC Irvine

We study the use of randomization to improve the performance of
online algorithms. Two problems are examined.

First we study the metrical task system problem of Borodin,
Linial, and Saks. For this problem, these authors give a
deterministic (2n - 1)-competitive algorithm.
Using a technique we call thresholding, we design a randomized
algorithm which is
(e/(e - 1)n - 1/(e - 1) 
~ 1.5820n - 0.5820)-competitive. For
uniform task systems, Borodin, Linial, and Saks present an
algorithm which is 2Hn-competitive, and
show a lower bound of Hn. Again using
thresholding, we design a randomized algorithm which is
(Hn/ln 2 
~ 1.4427Hn + 1)-competitive.
Using a different technique we design an algorithm which is
(Hn + O(sqrt log 
n))-competitive.

The second problem studied is online multiprocessor scheduling.
The problem of scheduling independent jobs on m machines
originates with Graham. While the deterministic case of this
problem has been studied extensively, little work has been done on
the randomized case. For m = 2 a randomized
4/3-competitive algorithm was found by Bartal, Fiat, Karloff and
Vohra. A randomized algorithm for m > 3
is presented. It achieves competitive ratios of 1.55665, 1.65888,
1.73376, 1.78295 and 1.81681, for m = 3, 4, 5, 6,
7 respectively. These competitive ratios are less than the best
deterministic lower bound for m = 3, 4, 5 and less
than the best known deterministic competitive ratio for 
m = 3, 4, 5, 6, 7. Two models of multiprocessor
scheduling with rejection are studied. The first is the model of
Bartal, Leonardi, Marchetti-Spaccamela, Sgall and Stougie. Two
randomized algorithms for this model are presented. The first
algorithm performs well for small m, achieving competitive
ratios of 3/2,
(7 + sqrt 129)/10 < 1.83579,
(5 + 2 sqrt 22)/7 < 2.05441 for
m = 2,3,4, respectively. The second algorithm
outperforms the first for m > 5. It
beats the deterministic algorithm of Bartal et al. for all
m = 5, ... 1000. It is conjectured that
this is true for all m. The second model differs in that
preemption is allowed. For this model, randomized algorithms are
presented which outperform the best deterministic algorithm for
small m.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970411.html
##-----------------TITLE------------------------##
Theory Seminar, 11 Apr 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


11 Apr 1997:
Constructing Big Trees from Short Sequences
Tandy
Warnow, Dept. Comp. and Inf. Sci., Univ. of Pennsylvania

The construction of evolutionary trees is a fundamental problem
in biology. All current polynomial time methods (to our knowledge)
are unlikely to recover the topology of the true tree from
sequences of realistic lengths (bounded, perhaps, by 10,000
nucleotides) for large sets of widely divergent sequences, even if
such methods are known to be able to reconstruct the correct
topology given long enough sequences. Therefore, all current
polynomial time methods may be incapable of addressing difficult
and important data sets such as the Tree of Life. We address this
problem and present a new polynomial time algorithm for
reconstructing evolutionary trees called the Short Quartets Method.
Our method computes topologies of subtrees induced by "short"
quartets, which avoid the problematic influence of pairs of widely
divergent sequences. We reconstruct a tree on the entire set of
sequences from these inferred subtrees when they are compatible. We
describe a simple implementation and study its convergence rate for
the Cavender-Farris model of evolution. Our analytical results and
experimental study indicates that this method has significantly
greater statistical power on large divergent trees than other
distance methods methods, such as Neighbor Joining and the recent
work of Agarwala et al, Farach & Kannan, and Cohen &
Farach, on approximating the Linf-nearest tree.

Joint work with Péter
L. Erdös, Michael A.
Steel, 
László A. Székely and Ken Rice.
Paper available
from Székely's home page.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970530.html
##-----------------TITLE------------------------##
Theory Seminar, 30 May 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


30 May 1997:
Using Random Sampling to Find Maximum Flows
Dan Halem, ICS, UC Irvine

We present new algorithms, based on random sampling, that find
maximum flows in undirected uncapcitated graphs. Our algorithms
dominate augmenting paths over all parameter values (number of
vertices and edges and flow value). They also dominate blocking
flows over a large range of parameter values. Furthermore, they
achieve time bounds on graphs with parallel (equivalently,
capacitated) edges that previously could only be achieved on graphs
without them. 

From a STOC '97
paper by David
Karger.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970425.html
##-----------------TITLE------------------------##
Theory Seminar, 25 Apr 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


25 Apr 1997:
Data Structures for Non-Manifold Topological Representations
Mac Casale, ICS, UC Irvine

Various data structures have been proposed for quickly traversing
the adjacency relations of complex geometric objects. The first was
probably the winged-edge data structure proposed by Baumgart in
1972, which was able to effectively represent complex topological
polyhedra. This data structure has been implemented in many
applications, including CAD, Computer Vision, etc. In this talk we
present some extensions to the winged-edge representation that
allow more complex objects to be represented, e.g., polyhedra with
cracks, multiple regions, etc. Such objects are often referred to
as "non-manifold" for reasons presented in the talk. Various
extensions are considered and their grounding in applications are
highlighted.
##------------------URL-------------------------##
http://www.ics.uci.edu/~vitus/
##-----------------TITLE------------------------##
Vitus J. Leung
##------------------TEXT------------------------##
Vitus J. Leung


Position: Graduate
Area:
Theory - Algorithms and Data Structures
Advisor: Sandy Irani
E-mail: vitus@ics.uci.edu
Current Position:

Senior Member of Technical Staff

Sandia National Laboratories



Projects


The Undecidability of the Unrestricted Modified Edit Distance,
Theoretical Computer Science
180 (1-2) (1997).
With Sandy Irani:


Simulation Results for Traffic Signal Control
,
INFORMS
Spring 97

Probabilistic Analysis for Scheduling with Conflicts
,
ACM-SIAM
SODA 97

Scheduling with Conflicts
,
ACM-SIAM
SODA 96

ICS 1C: Networked Information Discovery and Retrieval:
 Summer 96
With Drew Bliss and Mike Dillencourt,
 GraphTool:
A Tool for Interactive Design and Manipulation of Graphs and Graph Algorithms

With
Mike Dillencourt,
R. Jayakrishnan, and
Peyman Oreizy,
A Simulation Framework for Distributed Traffic Control Algorithms in
Advanced Traffic Management Systems (ATMS),
ISATA 93


Other Interests


MATHCOUNTS
My ``name-sake''
Vitus Bering
US Soccer


Here are some pointers on

how to learn HTML.





Information and Computer Science
University of California, Irvine
CA 92697-3425

Last modified: 18 September 1998
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970606.html
##-----------------TITLE------------------------##
Theory Seminar, 6 June 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


6 June 1997:
LRU is Better than FIFO
John Noga, Computer
Science Dept., UC Riverside

In the paging problem we have to manage a two-level memory
system, in which the first level has short access time but can hold
only up to k pages, while the second level is very large but
slow. We use competitive analysis to study the relative performance
of two best known algorithms for paging, LRU and FIFO. Sleator and
Tarjan proved that the competitive ratio of LRU and FIFO is 
k. In practice, however, LRU is known to perform much better
than FIFO. It is believed that the superiority of LRU can be
attributed to locality of reference exhibited in request sequences.
In order to study this phenomenon, Borodin, Irani, Raghavan and
Schieber refined the competitive approach by introducing the
concept of access graphs. They conjectured that the competitive
ratio of LRU on each access graph is less than or equal to the
competitive ratio of FIFO. We will prove this conjecture.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970418.html
##-----------------TITLE------------------------##
Theory Seminar, 18 Apr 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


18 Apr 1997:
Learning Classifications via Generalized Linear Models
Jonathan Martin, ICS, UC Irvine

Though widely used in statistics and the social sciences,
regression models have been overlooked or rejected by the machine
learning field in favor of decision trees or neural networks. The
experimental results to be reported here show that generalized
linear models are an effective machine learning tool and that the
classifiers inferred via these models are frequently much more
accurate than those inferred by conventional decision tree methods.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081121.html
##-----------------TITLE------------------------##
Theory Seminar, November 21, 2008
##------------------TEXT------------------------##
November 21, Fall 2008: Theory Seminar

  
More Robust Hashing: Cuckoo Hashing with a Stash


by Adam Kirsch, Michael Mitzenmacher, and Udi Wieder


Appeared at European Symposium on Algorithms (ESA) 2008


Presented by Kevin Wortman




Cuckoo hashing holds great potential as a high-performance hashing
scheme for real applications. Up to this point, the greatest drawback
of cuckoo hashing appears to be that there is a polynomially small but
practically significant probability that a failure occurs during the
insertion of an item, requiring an expensive rehashing of all items in
the table. In this paper, we show that this failure probability can be
dramatically reduced by the addition of a very small constant-sized
stash. We demonstrate both analytically and through simulations that
stashes of size equivalent to only three or four items yield
tremendous improvements, enhancing cuckoo hashing's practical
viability in both hardware and software. Our analysis naturally
extends previous analyses of multiple cuckoo hashing variants, and the
approach may prove useful in further related schemes.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081107.html
##-----------------TITLE------------------------##
Theory Seminar, November 7, 2008
##------------------TEXT------------------------##
November 7, Fall 2008: Theory Seminar

  
Embedding Planar Graphs on the Grid 


By Walter Schnyder

Presented by Lowell Trott




We will discuss the method that Schnyder uses to embed graphs, as well as 
some interesting results gained from his method.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081017.html
##-----------------TITLE------------------------##
Theory Seminar, October 17, 2008
##------------------TEXT------------------------##
October 17, Fall 2008: Theory Seminar

1:00pm in 253 ICS
  Succinct Greedy Graph Drawing in the Hyperbolic Plane  

Prof. Michael Goodrich, UC Irvine 



Abstract: We describe an efficient method for drawing any n-vertex
simple graph G in the hyperbolic plane. Our algorithm produces greedy
drawings, which support greedy geometric routing, so that a message M
between any pair of vertices may be routed geometrically, simply by
having each vertex that receives M pass it along to any neighbor
that is closer in the hyperbolic metric to the message's eventual
destination. More importantly, for networking applications, our
algorithm produces succinct drawings, in that each of the vertex
positions in one of our embeddings can be represented using O(log n)
bits and the calculation of which neighbor to send a message to may
be performed efficiently using these representations. These properties
are useful, for example, for routing in sensor networks, where storage
and bandwidth are limited.


Joint work with David Eppstein.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081003.html
##-----------------TITLE------------------------##
Theory Seminar, October 3, 2008
##------------------TEXT------------------------##
October 3, Fall 2008: Theory Seminar

1:00pm in ICS 253
 Improved bounds for Wireless Localization
 
By Tobias Christ, Michael Hoffmann, Yoshio Okamoto and Takeaki Uno, appeared in SWAT 2008.

Presented by Nodari Sitchinava



I will talk about the recent paper showing better upper and lower bounds for wireless localization. In particular, for an n-sided polygon, n-2 guards is the tight bound if we require guards to be natural. For arbitrary guards, the new lower and upper bounds are, respectively, roughly 3n/5 and 4n/5. I'll present the proofs of these bounds.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081024.html
##-----------------TITLE------------------------##
Theory Seminar, October 24, 2008
##------------------TEXT------------------------##
October 24, Fall 2008: Theory Seminar

1:00pm in 253 ICS
  Two results on 3d lattice embedding of graphs


Prof. David Eppstein, UC Irvine 



I'll present the results from two of my papers at Graph Drawing 2008: 
"Isometric diamond subgraphs", about embedding graphs into the three-dimensional diamond 
lattice, and "The topology of three-dimensional bendless orthogonal graph drawing", 
about embedding graphs into space in such a way that three mutually orthogonal 
edges meet at each vertex.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081114.html
##-----------------TITLE------------------------##
Theory Seminar, November 14, 2008
##------------------TEXT------------------------##
November 14, Fall 2008: Theory Seminar

  
Some Results on Greedy Embeddings in Metric Spaces (FOCS 2008)


By Tom Leighton and Ankur Moitra


Presented by Darren Strash




I will discuss a recent proof that resolves a conjecture of Papadimitriou and 
Ratajczak---that every 3-connected planar graph admits a 
greedy embedding into the Euclidean plane.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081010.html
##-----------------TITLE------------------------##
Theory Seminar, October 10, 2008
##------------------TEXT------------------------##
October 10, Fall 2008: Theory Seminar

1:00pm in 253 ICS
 > Self-Improving Algorithms for Delaunay Triangulations  
 
Ken Clarkson, IBM Almaden Research Center 



This work investigates ways in which an algorithm can improve its
expected performance by fine-tuning itself automatically, with respect
to an arbitrary and unknown input distribution. We give such
self-improving algorithms for sorting and for computing Delaunay
triangulations. Each algorithm begins with a training phase during which
it adjusts itself to the input distribution, followed by a stationary
regime in which the algorithm settles to its optimized incarnation. We
show that in both cases, in the stationary regime, the algorithms run as
fast as possible.


Joint work with Nir Alon, Bernard Chazelle, Ding Liu, C. Seshadhri, and
Wolfgang Mulzer.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/081031.html
##-----------------TITLE------------------------##
Theory Seminar, October 31, 2008
##------------------TEXT------------------------##
October 31, Fall 2008: Theory Seminar

1:00pm in 253 ICS
  
Firefighting in Trees and Infinite Grids.


Nate Gertsch



I'll be explaining the firefighter problem and show that the
problem has some interesting results in infinite grids of various
dimensions and on trees.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130524.html
##-----------------TITLE------------------------##
Theory Seminar, May 24, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1420, 1pm


May 24, 2013:

Combinatorial Pair Testing: Distinguishing Workers from Slackers


Michael Goodrich




We formalize a problem we call
combinatorial pair testing (CPT), which has applications
to the identification of uncooperative or unproductive participants
in pair programming, massively distributed computing,
and crowdsourcing environments.
We give efficient adaptive and nonadaptive CPT algorithms and we show
that our methods use an optimal number of testing rounds to within
constant factors.
We also provide an empirical evaluation of some of our methods.



This is joint work with David Eppstein and Dan Hirschberg, to appear
at WADS 2013.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130531.html
##-----------------TITLE------------------------##
Theory Seminar, May 31, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1420, 1pm


May 31, 2013:

Playing Mastermind with Many Colors


Alexander Nicholas Brown



We analyze the general version of the classic guessing game
Mastermind with n positions and k colors. Since the case
k ≤ n1 − ε,
ε > 0 constant, is well
understood, we concentrate
on larger numbers of colors. For the most prominent case
k = n, our results imply that Codebreaker can find the
secret code with O(n log log n)
guesses. This bound is valid
also when only black answer-pegs are used. It improves the
O(n log n) bound first proven by Chvátal
(Combinatorica 3 (1983), 325–329). We also show that if both black and
white answer-pegs are used, then the
O(n log log n) bound
holds for up to n2 log log n
colors. These bounds are almost
tight as the known lower bound of Ω(n) shows. Unlike for
k ≤ n1 − ε,
simply guessing at random until the
secret code is determined is not sufficient. In fact, we show that any
non-adaptive strategy needs an expected number of
Ω(n log n) guesses.


(Based on a paper by Benjamin
Doerr, Carola Doerr, Reto Spöhel, and Henning Thomas from SODA 2013.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130510.html
##-----------------TITLE------------------------##
Theory Seminar, May 10, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1420, 1pm


May 10, 2013:

Geometric Algorithms for Social Network Analysis: A Dissertation


Lowell Trott




A brief look into the upcoming feature, "Lowell's Defense."  This will include mention of some earlier work and results but will focus on Category-Based Routing in Social Networks: the Membership Dimension, and if time permits Force-Directed Graph drawing.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130412.html
##-----------------TITLE------------------------##
Theory Seminar, April 12, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1423, 1pm


April 12, 2013:

Pretending to factor large numbers on a quantum computer


by John A. Smolin, Graeme Smith and Alex Vargo 


Presented by Jenny Lam



Shor’s algorithm for factoring in polynomial time on a quantum 
computer gives an enormous advantage over all known classical 
factoring algorithm. We demonstrate how to factor products of large 
prime numbers using a compiled version of Shor’s quantum factoring 
algorithm. Our technique can factor all products of p, q such that 
p, q are unequal primes greater than two, runs in constant time, and 
requires only two coherent qubits. This illustrates that the correct 
measure of difficulty when implementing Shor’s algorithm is not 
the size of number factored, but the length of the period found.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130426.html
##-----------------TITLE------------------------##
Theory Seminar, April 26, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1423, 1pm


April 26, 2013:

Popularity vs maximum cardinality in the stable marriage setting 


by Telikepalli Kavitha


Presented by Pawel Pszona



In the stable marriage setting, the notion of pupularity of a matching is introduced.
I will present a new algorithm for computing a maximum cardinality popular matching.
Generalized version of this algorithm utilizes an interesting tradeoff
between cardinality and popularity of a matching.


Appeared in SODA 2012
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130419.html
##-----------------TITLE------------------------##
Theory Seminar, April 19, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1423, 1pm


April 19, 2013:

Universal Permutations


by Bannister, Cheng, Devanny and Eppstein


Presented by Will Devanny 



I am planning to present on Universal Permutations.  We will cover the combinatorics of permutations and patterns and how sets of patterns can be packed into permutations.  In particular we will cover a $k$-universal permutation of length $k^2/2 + o(k^2)$ and new research by Bannister, Cheng, Devanny, and Eppstein on a $213$-avoiding universal permutation of length $k^2/4 + o(k^2)$.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130517.html
##-----------------TITLE------------------------##
Theory Seminar, May 17, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1420, 1pm


May 17, 2013:

Universal Point Sets


Jack Cheng



A set of points on the plane is an n-universal point set if every
planar graph on n vertices can be embedded in the set without creating
edge crossings.  I will discuss some previously known results about
universal point sets.  Then I will present a new construction based on
213-superpatterns that gives a factor of two improvement over
currently known upper bounds on the size of universal point sets. This
is joint work with Bannister, Devanny, and Eppstein.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130503.html
##-----------------TITLE------------------------##
Theory Seminar, April 26, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1420, 1pm


May 3, 2013:

Dynamic Planar Point Location with Sub-Logarithmic Local Updates


by Maarten Löer, Joe Simons, Darren Strash


Presented by Joe Simons 



We study planar point location in a collection of disjoint fat regions, and investigate the complexity of local updates: replacing any region by a different region that is "similar" to the original region. (i.e., the size differs by at most a constant factor, and distance between the two regions is a constant times that size). We show that it is possible to create a linear size data structure that allows for insertions, deletions, and queries in logarithmic time, and allows for local updates in sub-logarithmic time on a pointer machine.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130607.html
##-----------------TITLE------------------------##
Theory Seminar, June 7, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2013: Theory Seminar
Bren Hall, Room 1420, 1pm


June 7, 2013:

Fixed parameter tractability of crossing minimization of almost-trees


Michael Bannister




We investigate exact crossing minimization for graphs 
that differ from trees by a small number of additional edges, 
for several variants of the crossing minimization problem. 
In particular, we provide fixed parameter tractable algorithms for 
the 1-page book crossing number, the 2-page book crossing number, 
and the minimum number of crossed edges in 1-page and 2-page book drawings. 



This is joint work with David Eppstein and Joe Simons.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140228.html
##-----------------TITLE------------------------##
Theory Seminar
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


February 28, 2014:

Blame Trees


Pawel Pszona


Presenting a paper by
Erik D. Demaine, Pavel Panchekha, David Wilson, Edward Z.  Yang


A "blame query" in a version control system associates each line of a
text file
with the person that was the last to modify it. I will present "blame
trees", data structures
that allow for efficient merging of two versions of the same document
with conflicting edits.
The "blame tree" representation allows merging two documents in time
proportional to the sum of logarithms of the sizes of shared regions,
plus the cost of conflict resolution.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140110.html
##-----------------TITLE------------------------##
Theory Seminar, January 10, 2014
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


January 10, 2014:

Fast and Accurate k-means for Large Datasets


Michael Shindler


Clustering is a popular problem with many applications. We consider
the $k$-means problem in the situation where the data is too large to
be stored in main memory and must be accessed sequentially, such as
from a disk, and where we must use as little memory as possible. Our
algorithm is based on recent theoretical results, with significant
improvements to make it practical. Our approach greatly simplifies a
recently developed algorithm, both in design and in analysis, and
eliminates large constant factors in both the approximation guarantee
and the memory requirements. We then incorporate approximate nearest
neighbor search to compute $k$-means in $o(nk)$ (whereas computing
the cost, given a solution, takes $\Theta(nk)$ time). We show that
our algorithm compares favorably to existing algorithms - both
theoretically and experimentally.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140117.html
##-----------------TITLE------------------------##
Theory Seminar, January 17, 2014
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


January 17, 2014:

Streaming Balanced Graph Partitioning Algorithms for Random Graphs


Will Devanny


Presenting a paper by Isabelle Stanton

Abstract: 
There has been a recent explosion in the size of stored data,
partially due to advances in storage technology, and partially due to
the growing popularity of cloud-computing and the vast quantities of
data generated. This motivates the need for streaming algorithms that
can compute approximate solutions without full random access to all
of the data. We model the problem of loading a graph onto a
distributed cluster as computing an approximately balanced
k-partitioning of a graph in a streaming fashion with only one pass
over the data. We give lower bounds on this problem, showing that no
algorithm can obtain an o(n) approximation with a random or
adversarial stream ordering. We analyze two variants of a randomized
greedy algorithm, one that prefers the arg max and one that is
proportional, on random graphs with embedded balanced k-cuts and are
able to theoretically bound the performance of each algorithms - the
arg max algorithm is able to recover the embedded k-cut, while,
surprisingly, the proportional variant can not. This matches the
experimental results in [25].
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140131.html
##-----------------TITLE------------------------##
Theory Seminar, January 31, 2014
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


January 31, 2014:

The Most Wanted Folkman Number


Christopher Wood


In this talk we discuss a branch of Ramsey theory concerning edge
Folkman numbers, as well as several computational techniques that
have been used to solve problems therein. The edge Folkman number
Fe(s,t;q) is the order of the smallest Kq-free graph G such that G ->
(s,t)^e, where G->(s,t)^e is true iff for all red and blue edge
colorings of G there exists a monochromatic Ks or Kt. Our main focus
is on the edge Folkman number Fe(3,3;4). We present relevant
background for this particular problem, survey related work and
computational techniques for computing Folkman numbers, and finally,
discuss ongoing work attempting to prove that the Fe(3,3;4)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140124.html
##-----------------TITLE------------------------##
Theory Seminar
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


January 24, 2014:

Tight Analysis of Randomized Rumor Spreading in Complete Graphs


Zach Becker


Presenting a paper by Benjamin Doerr, Marvin Kunnemann

Abstract: 
We present a tight analysis of the basic randomized rumor spreading
process in complete graphs introduced by Frieze and Grimmett (1985),
where in each round of the process each node knowing the rumor gossips
the rumor to a node chosen uniformly at random. The process starts
with a single node knowing the rumor.
We show that the number $S_n$ of rounds required to spead a rumor in a
complete graph with $n$ nodes is very closely described by $log_2 n$
plus $(1/n)$ times the completion time of the coupon collector
process. This in particular gives very precise bounds for the expected
runtime of the process, namely $\lfoor \log_2 n \rfloor + \ln n -
1.116 \le E[S_n] \le \lceil \log_2 n \rceil + \ln n + 2.765 + o(1)$.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140307b.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 7, 2014
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


March 7, 2014:

Finding small patterns in permutations in linear time


Jack Cheng


Given two permutations σ and π, the Permutation Pattern problem asks
if σ is a subpattern of π. We show that the problem can be solved in
time 2^O(ℓ^2 log ℓ)⋅n, where ℓ=|σ| and n=|π|. In other words, the
problem is fixed-parameter tractable parameterized by the size of the
subpattern to be found.



We introduce a novel type of decompositions for permutations and a
corresponding width measure. We present a linear-time algorithm that
either finds σ as a subpattern of π, or finds a decomposition of π
whose width is bounded by a function of |σ|. Then we show how to solve
the Permutation Pattern problem in linear time if a bounded-width
decomposition is given in the input.



Based on a paper by Sylvain Guillemot and Daniel Marx in Soda 2014.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140221.html
##-----------------TITLE------------------------##
Theory Seminar, February 21, 2014
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


February 21, 2014:

What is Courcelle's Theorem?


Michael Bannister


Courcelle's theorem is a powerful algorithmic meta-theorem, producing
fixed-parameter tractable algorithms for recognizing graph families
definable in monadic second order logic. In this talk, I will cover
the background needed to understand and apply Courcelle's theorem,
including applications to typical hard graph properties, e.g., graph
coloring, hamiltonian cycle, and crossing minimization.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140307a.html
##-----------------TITLE------------------------##
Theory Seminar
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


March 7, 2014:

Set-Difference Range Queries


Joe Simons


We introduce the problem of performing set-difference range queries,
where answers to queries are set-theoretic symmetric differences
between sets of items in two geometric ranges. We describe a general
framework for answering such queries based on a novel use of data
streaming sketches we call signed symmetric-difference
sketches. We show that such sketches can be realized using invertible
Bloom filters (IBFs), which can be composed, differenced, and searched
so as to solve set-difference range queries in a wide variety of
scenarios.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140314.html
##-----------------TITLE------------------------##
Theory Seminar
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


March 14, 2014:

Stackless Multi-BVH Traversal for CPU, MIC and GPU Ray Tracing


Tamir Husain


Presenting a paper by
Attila T. Áfra and László Szirmay-Kalos


Stackless traversal algorithms for ray tracing acceleration structures
require significantly less storage per ray than ordinary stack-based
ones. This advantage is important for massively parallel rendering
methods, where there are many rays in flight. On SIMD architectures, a
commonly used acceleration structure is the MBVH, which has multiple
bounding boxes per node for improved parallelism. It scales to
branching factors higher than two, for which, however, only
stack-based traversal methods have been proposed so far. In this
paper, we introduce a novel stackless traversal algorithm for MBVHs
with up to four-way branching. Our approach replaces the stack with a
small bitmask, supports dynamic ordered traversal, and has a low
computation overhead.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140214.html
##-----------------TITLE------------------------##
Theory Seminar, February 14, 2014
##------------------TEXT------------------------##
CS 269S, Winter 2014: Theory Seminar
Bren Hall, Room 1423, 1pm


February 14, 2014:

First Come First Served for Online Slot Allocation and Huffman Coding


Jenny Lam


Presenting a paper by Monik Khare, Claire Mathieu, Neal E. Young

Can one choose a good Huffman code on the fly, without knowing the
underlying distribution?
Online Slot Allocation (OSA) models this and similar problems: There
are n slots, each with a known
cost. There are n items. Requests for items are drawn i.i.d. from a
fixed but hidden probability
distribution p. After each request, if the item, i, was not
previously requested, then the algorithm
(knowing c and the requests so far, but not p) must place the item in
some vacant slot j_i , at cost
p_i c(j_i). The goal is to minimize the total cost sum_i=(1 to n) p_i
c(j_i).


The optimal offline algorithm is trivial: put the most probable item
in the cheapest slot, the
second most probable item in the second cheapest slot, etc. The
optimal online algorithm is First
Come First Served (fcfs): put the first requested item in the
cheapest slot, the second (distinct)
requested item in the second cheapest slot, etc. The optimal
competitive ratios for any online
algorithm are 1 + H_{n − 1} ∼ ln n for general costs and 2 for
concave costs. For logarithmic costs, the
ratio is, asymptotically, 1: fcfs gives cost opt + O(log opt).

For Huffman coding, fcfs yields an online algorithm (one that
allocates codewords on demand,
without knowing the underlying probability distribution) that
guarantees asymptotically optimal
cost: at most opt + 2 log2 (1 + opt) + 2.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090529.html
##-----------------TITLE------------------------##
Theory Seminar, April 17 , 2009
##------------------TEXT------------------------##
May 29, Spring Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
   Measuring Independence of Datasets

 Vladimir Braverman, UCLA



A data stream model represents setting where approximating pairwise,
or $k$-wise, independence with sublinear memory is of considerable importance. 
In the streaming model the joint distribution is given by a stream of $k$-tuples, 
with the goal of testing correlations among the components measured over the entire stream.
Indyk and McGregor (SODA 08) recently gave exciting new results for measuring 
pairwise independence in the streaming model.
The Indyk and McGregor methods provide $\log{n}$-approximation under
statistical distance between the joint and product distributions in the streaming model. 
Indyk and McGregor leave, as their main open question, the problem of  improving their 
$\log n$-approximation for the statistical distance metric.



This talk covers our recent paper "Measuring Independence of Datasets" (submitted).
We solve the  main open problem  posed by of Indyk and McGregor
for the statistical distance for pairwise independence and extend this 
result to any constant $k$. In particular, we present an algorithm that computes
an $(\epsilon, \delta)$-approximation
of the statistical distance between the joint and product distributions 
defined by a stream of $k$-tuples.
Our algorithm requires $O(\left({1\over \epsilon}\log({nm\over \delta})\right)^{(30+k)^k})$ 
memory and a single pass over the data stream.


Joint work with Rafail Ostrovsky (UCLA).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090522.html
##-----------------TITLE------------------------##
Theory Seminar, May 22, 2009
##------------------TEXT------------------------##
May 22, Spring Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
    Sorting and Selection in Posets

 By Constantinos Daskalakis,  Richard M. Karp , Elchanan Mossel, Samantha  Riesenfeld, Elad Verbin
 Presented by Lowell Trott, UCI


The authors have presented several results in sorting and selection in  
partially ordered sets.  This includes an algorithm that sorts a 
width- w poset of size n with optimal query complexity O(n(w + logn)).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090508.html
##-----------------TITLE------------------------##
Theory Seminar, May 8, 2009
##------------------TEXT------------------------##
May 8, Spring Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
   External Memory Geometric Data Structures: Part II 

 Nodari Sitchinava, UCI


I will continue the overview of the geometric data structures for the 
external memory model. I will talk about the data structures for 
batched off-line queries. In particular, I will cover the buffer 
tree data structure and the challenges of parallelizing it.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090417.html
##-----------------TITLE------------------------##
Theory Seminar, April 17 , 2009
##------------------TEXT------------------------##
April 17, Spring Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
   An Overview of Zero Knowledge Identification Protocols

 Rishab Nithyanand, UC Irvine




In this presentation I will cover:
Interactive Proof Protocols (concept, model of computation, and an example),


Identification Protocols (Objectives, Security Requirements, Applications,
and its Comparison with Digital Signature Schemes),


Zero Knowledge Concepts (Soundness, Completeness, Indistinguishability,
Perfect ZK vs. Computational ZK, and ZK Identification vs. Other
Identification Protocols).


Finally, I will present the working of the Fiat-Shamir ZK Identification
protocol and Schnorrs ZK Identification protocol with examples.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090605.html
##-----------------TITLE------------------------##
Theory Seminar, June 5, 2009
##------------------TEXT------------------------##
June 5, Spring Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
   Linear Programming in Linear Time When the Dimension Is Fixed

 by Nimrod Megiddo,
J. ACM vol. 31, issue 1, pp. 114-127, 1984.
 Presented by Kevin Wortman 

Abstract. It is demonstrated that the linear programming problem in d
variables and n constraints can be solved in O(n) time when d is
fixed. This bound follows from a multidimensional search technique
which is applicable for quadratic programming as well. There is also
developed an algorithm that is polynomial in both n and d provided d
is bounded by a certain slowly growing function of n.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090515.html
##-----------------TITLE------------------------##
Theory Seminar, May 15, 2009
##------------------TEXT------------------------##
May 15, Spring Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
    Filtering Search: A New Approach to Query-Answering 

 By Bernard Chazelle 
 Presented by Darren Strash, UCI


I will present a classic technique for solving retrieval problems 
(problems where we want to report objects that satisfy a query), 
and apply this technique to well-known problems such as Orthogonal 
Range Searching and Segment Intersection.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110107.html
##-----------------TITLE------------------------##
Theory Seminar, 7 Jan 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


7 Jan 2011:
Domination When the Stars Are Out
Matthias Mnich, International Computer Science Institute, Berkeley

We algorithmize the recent structural characterization for claw-free
graphs by Chudnovsky and Seymour. Building on this result, we show that
Dominating Set on claw-free graphs is (i) fixed-parameter tractable and
(ii) even possesses a polynomial kernel. To complement these results, we
establish that Dominating Set is not fixed-parameter tractable on the
slightly larger class of graphs that exclude K1,4 as an
induced subgraph. Our results provide a dichotomy for Dominating Set in
K1,L-free graphs and show that the problem is fixed-parameter
tractable if and only if L ≤ 3. Finally, we show that our
algorithmization can also be used to show that the related Connected
Dominating Set problem is fixed-parameter tractable on claw-free
graphs.

(Joint work with Danny Hermelin, Erik Jan van Leeuwen and Gerhard
Woeginger.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110311.html
##-----------------TITLE------------------------##
Theory Seminar, 11 Mar 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


11 Mar 2011:
The Power of Simple Tabulation Hashing
Michael Bannister, UC Irvine

The simplest possible form of tabulation hashing provides
unexpectedly strong guarantees.  The presentation will focus on the
analysis of tabulation hashing for linear probing and cuckoo
hashing.

(Based on a paper by
Mihai Pătraşcu and Mikkel Thorup to be presented at STOC 2011.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110204.html
##-----------------TITLE------------------------##
Theory Seminar, 4 Feb 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


4 Feb 2011:
Top-K Color Queries for Document Retrieval
Saumi Bandyopadhyay, UC Irvine

In this paper we describe a new efficient (in fact optimal)data
structure for the top-K color problem. Each element of an array
A is assigned a color c with priority
p(c). For a query range [a, b] and a
value K, we have to report K colors with the highest
priorities among all colors that occur in A[a..b],
sorted in reverse order by their priorities. We show that such queries
can be answered in O(K) time using an
O(N log σ) bits data structure, where
N is the number of elements in the array and σ is the
number of colors. Thus our data structure is asymptotically optimal with
respect to the worst-case query time and space. As an immediate
application of our results, we obtain optimal time solutions for several
document retrieval problems. The method of the paper could be also of
independent interest.

(Based on a paper by Marek Karpinski and Yakov Nekrich from SODA 2011.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110121.html
##-----------------TITLE------------------------##
Theory Seminar, 21 Jan 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


21 Jan 2011:
Invertible Bloom Lookup Tables
Joe Simons, UC Irvine

We present a version of the Bloom filter data structure that supports
not only the insertion, deletion, and lookup of key-value pairs, but
also allows a complete listing of its contents with high probability, as
long the number of key-value pairs is below a designed threshold. Our
structure allows the number of key-value pairs to greatly exceed this
threshold during normal operation. Exceeding the threshold simply
temporarily prevents content listing and reduces the probability of a
successful lookup. If later entries are deleted to return the structure
below the threshold, everything again functions appropriately. We also
show that simple variations of our structure are robust to certain
standard errors, such as the deletion of a key without a corresponding
insertion or the insertion of two distinct values for a key. The
properties of our structure make it suitable for several applications,
including database and networking applications that we highlight.

(Based on a preprint by Goodrich and Mitzenmacher, arXiv:1101.2245.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110304.html
##-----------------TITLE------------------------##
Theory Seminar, 4 Mar 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


4 Mar 2011:
Pairing Heaps: Where are they now?
Darren Strash, UC Irvine

The pairing heap is a meldable heap data structure by Fredman,
Sedgewick, Sleater, and Tarjan, which is intended to be a practical
alternative to Fibonacci heaps. Experimental analysis shows that pairing
heaps meet their intended purpose: they are quite efficient in practice;
however, a precise amortized analysis of pairing heaps has proved
difficult. In this talk, I will discuss the pairing heap data structure
and the progress that has been made toward its analysis. I conclude by
discussing a variant of the pairing heap by Amr Elmasry ("Pairing Heaps with Costless
Meld", ESA 2010) that matches known lower bounds.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110225.html
##-----------------TITLE------------------------##
Theory Seminar, 25 Feb 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


25 Feb 2011:
Embedding Stacked Polytopes on a Polynomial-Size Grid
Lowell Trott, UC Irvine

We show how to realize a stacked 3D polytope (formed by repeatedly
stacking a tetrahedron onto a triangular face) by a strictly convex
embedding with its n vertices on an integer grid of size
O(n4) × O(n4) × O(n18).
We use a perturbation technique to construct an
integral 2D embedding that lifts to a small 3D polytope, all in linear
time. This result solves a question posed by Günter M. Ziegler, and is
the first nontrivial subexponential upper bound on the long-standing
open question of the grid size necessary to embed arbitrary convex
polyhedra, that is, about efficient versions of Steinitz's 1916
theorem. An immediate consequence of our result is that O(log n)-bit
coordinates suffice for a greedy routing strategy in planar 3-trees.

(Based on a paper by Erik D. Demaine and André Schulz from
SODA 2011.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110211.html
##-----------------TITLE------------------------##
Theory Seminar, 11 Feb 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


11 Feb 2011:
An O(log log n)-Competitive Binary Search Tree with Optimal Worst-Case Access Times
Audrey Hesse, UC Irvine

We present the zipper tree, an
O(log log n)-competitive online binary search tree that
performs each access in O(log n) worst-case time. This shows
that for binary search trees, optimal worst-case access time and
near-optimal amortized access time can be guaranteed simultaneously.

(Based on a paper by Bose, Douïeb, Dujmovic,
and Fagerberg in SWAT 2010.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110128.html
##-----------------TITLE------------------------##
Theory Seminar, 28 Jan 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


28 Jan 2011:
Improved Approximation Algorithms for Prize-Collecting Steiner Tree
and TSP
Nicolaos Matsakis, UC Irvine

We present a paper by A.Archer, M.Bateni, M.Hajiaghayi, H.Karloff,
which provides algorithms having a (2 − ε)
approximation guarantee for the Prize-Collecting versions of the
Traveling Salesman, Steiner Tree and Stroll problems. The algorithms are
based on the Goemans-Williamson 2-approximation algorithm along with the
best approximation algorithms we currently have for each one of the
ordinary versions of these problems.  The important part investigated,
is the application of the latter algorithms onto specific subsets of
vertices the former algorithm spans.  This survey solves an open problem
standing for more than 15 years in the area of Prize-Collecting
problems, by providing a guarantee which is strictly less than 2.

(Based on a paper by Aaron Archer, MohammadHossein Bateni, Mohammad
Taghi Hajiaghayi, and Howard Karloff from FOCS 2009.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110216.html
##-----------------TITLE------------------------##
Theory Seminar, 16 Feb 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 3011, 3:00pm


16 Feb 2011:
Optimal Authentication of Operations on Dynamic Sets
Roberto Tamassia, Brown University

We study the problem of authenticating outsourced set operations
performed by an untrusted server over a dynamic collection of sets that
are owned by a trusted source. We present efficient methods for
authenticating fundamental set operations, such as union and
intersection so that the client can verify the correctness of the
received answer. Based on a novel extension of the security properties
of bilinear-map accumulators, our authentication scheme is the
first to achieve optimality in several critical performance
measures:
The verification overhead at the client is optimal,
that is, the client can verify an answer in time proportional to the
size of the query parameters and answer.The update overhead
at the source is constant.The bandwidth consumption is optimal, namely constant between
the source and the server and operation-sensitive between the client and
the server (i.e., proportional only to the size of the query parameters
and the answer).The storage usage is optimal, namely constant at the
client and linear at the source and the server.
Updates and queries are also efficient at the server. In contrast,
existing schemes entail high bandwidth and verification costs or high
storage usage since they recompute the query over authentic data or
precompute answers to all possible queries.

We also show applications of our techniques to the authentication of
keyword searches on outsourced document collections (e.g.,
inverted-index queries) and of queries in outsourced databases
(e.g., equi-join queries). Since set intersection is heavily used in
these applications, we obtain new authentication schemes that compare
favorably to existing approaches.

(Joint work with
Charalampos Papamanthou and Nikos Triandopoulos.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060602.html
##-----------------TITLE------------------------##
Theory Seminar, Jun 2, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

Jun 2, 2006, in CS 243

Zero Knowledge with Efficient Provers

Authored by: Minh-Huyen Nguyen and Salil Vadhan

Presented by Nodari Sitchinava


Abstract:

The main result of the paper is the proof that every problem in NP that
has a zero-knowledge proof also has a zero-knowledge proof where the
prover can be implemented in probabilistic polynomial time given an NP
witness. Moreover, if the original proof system is statistical zero
knowledge, so is the resulting efficient-prover proof system. An
equivalence of zero knowledge and efficient-prover zero knowledge was
previously known only under the assumption that one-way functions exist
and no such equivalence was known for statistical zero knowlege.

(from STOC 2006)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060526.html
##-----------------TITLE------------------------##
Theory Seminar, May 26, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

May 26, 2006, in CS 243

The Maximum-Mean Subtree and other Bicriterion Subtree Problems

Presented by Josiah Carlson


Abstract:

We cover a general method for solving Bicriterion Subtree problems;
the Parametric Linear Maximum Subtree.  We then discuss our improvement
to a special case of this algorithm, and the implications of our
solutions to these problems.

(to be presented at SWAT 2006)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060428.html
##-----------------TITLE------------------------##
Theory Seminar, Apr 28, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

Apr 28, 2006, in CS 243

Theoretical Models and Solutions for Problems in Computer Science

Presented by John Augustine


Abstract:

Several fundamental problems in computer science have elegant solutions.
In many cases, the problems are modeled theoretically and the solutions
are analyzed rigorously. We present our results in a manner that
highlights this research process involved in solving computer science
problems.

The problem of powering down is encountered when any energy intensive
system goes through an idle period of time. Many systems are designed
with  different  levels of  sleep states that consume energy at
different rates and have different power-up costs. We initiate this
study by presenting several models that are increasingly more accurate
in capturing the essence of the problem. Along with these models, we
introduce the notion of competitive ratio, which is the theoretical
framework for analyzing online algorithms and present an algorithm that
is provably within a small error factor of the best possible competitive
ratio.

We will conclude with a summary of other previous work and a plan for
future research in collaboration with undergraduate students.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060505.html
##-----------------TITLE------------------------##
Theory Seminar, May 5, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

May 5, 2006, in CS 243

Improved Adaptive Group Testing Algorithms

Presented by Dan Hirschberg


Abstract:

We study group-testing algorithms that have applications for identifying
the dead sensors in a mobile ad hoc wireless network and
for resolving broadcast conflicts on a multiple access channel (MAC).

In group-testing problems,
we are asked to identify all the defective items in a set of
items when we can test arbitrary subsets of items for "contamination."
In the standard group-testing problem, the result of a test is binary
-- the tested subset either contains defective items or it does not.
In the versions we study here, the result of each test is non-binary.
For example, it may indicate whether the number of defective items
contained in the tested subset is zero, one, or at least two
(i.e., the results are 0, 1, or 2+).

We give adaptive group testing algorithms
that are provably more efficient than previous group
testing algorithms (even for generalized response models).
We also show how our algorithms can be applied to solve dead sensor
diagnosis and conflict resolution on a MAC.
Dead sensor diagnosis poses an interesting challenge
compared to MAC resolution, because dead sensors are not
locally detectable, nor are they themselves active participants.
We also give lower bounds for generalized group testing.

(Joint work with Michael T. Goodrich.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060512.html
##-----------------TITLE------------------------##
Theory Seminar, May 12, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

May 12, 2006, in CS 243

The Snowblower Problem

Technical report by Esther M. Arkin, Michael A. Bender, Joseph S. B.
Mitchell, and Valentin Polischuk

Presented by Keven A. Wortman


Abstract:

We introduce the snowblower problem (SBP), a new optimization
problem that is closely related to milling problems and to some
material-handling problems.  The objective in the SBP is to compute a
short tour for the snowblower to follow to remove all the snow from a
domain (driveway, sidewalk, etc.).  When a snowblower passes over each
region along the tour, it displaces snow into a nearby region.  The
constraint is that if the snow is piled too high, then the snowblower
cannot clear the pile.

We give an algorithmic study of the SBP.  We show that in general, the
problem is NP-complete, and we present polynomial-time approximation
algorithms for removing snow under various assumptions about the operation
of the snowblower.  Most commercially-available snowblowers allow the user
to control the direction in which the snow is thrown.  We differentiate
between the cases in which the snow can be thrown in any direction, in any
direction except backwards, and only to the right.  For all cases, we give
constant-factor approximation algorithms; the constants increase as the
throw direction becomes more restricted.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060609.html
##-----------------TITLE------------------------##
Theory Seminar, Jun 9, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

Jun 9, 2006, in CS 243

The Santa Claus Problem

Authored by: Nikhil Bansal and Maxim Sviridenko

Presented by Matt Nguyen


Abstract:

The Santa Claus Problem is defined as follows:  Santa Claus has n presents 
that he wants to distribute among m kids.  Each kid has an arbitrary value 
for each present.  Let pij be the value kid i has for present j.  Santa's 
goal is to distribute presents in such a way that the least lucky kid is 
as happy as possible.  That is, max mini Sum(of among items given to kid i)  pij.

The authors give an O(log log m / log log log m) approximation for the 
restricted assignment case of the problem where pij is in {pj, 0} (That 
is, each present j has either value pj or 0 for each kid}.

(from STOC 2006)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060519.html
##-----------------TITLE------------------------##
Theory Seminar, May 19, 2006
##------------------TEXT------------------------##
ICS 269, Spring 2006: Theory Seminar

May 19, 2006, in CS 243

Conflict-Free Coloring of Shallow Discs

Authored by: N. Alon and S. Smorodinsky
(to appear in Symp. on Computational Geometry, SoCG'06)

Presented by Jeremy Yu Meng


Abstract:

We prove that any collection of n discs in which each one intersects at 
most k others, can be colored with at most O(log3k) colors so that for 
each point p in the union of all discs there is at least one disc in the 
collection containing p whose color differs from that of all other members
of the collection that contain p. This is motivated by a problem on 
frequency assignments in cellular networks, and improves the best 
previously known upper bound of O(log n) when k is much smaller than n.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040319b.html
##-----------------TITLE------------------------##
Theory Seminar, 19 Mar 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


19 Mar 2004:
Switch Scheduling

Gwendoline Chien


A router is a box that switches internet packets from input links to ouput
links. The switch system must determine which inputs will transmit to
which outputs in a given time slot.  Mathematically, the
switching component of a router reduces to solving a bipartite
matching problem.  The router must match as many input links as
possible.  However, there is tradeoff between fairness and
throughput.  In this talk, I will give a brief overview of
switch scheduling problem and some algorithms that are being used.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040206.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Jan 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


06 Feb 2004:
Reducing the Space Requirements of an Ordered Set

Josiah Carlson


In recent years there have been various papers that provide
algorithms to store sets in a compressed fashion.  This presentation
will cover a paper by Blandford and Blelloch that provides a method
for
representing an ordered set within a constant factor of the
theoretical
lower bound.  While not improving significantly on previous space
bounds,
it does provide a larger set of useful functionality over previous
compressed set storage methods.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040319a.html
##-----------------TITLE------------------------##
Theory Seminar, 19 Mar 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


19 Mar 2004:
Rank-Maximal Matchings

Matthew Ba Nguyen


The authors present two algorithms for the Rank-Maximal Matching
Problem.  The first one is a combinatorial algorithm with running
time O(min(n+ C, C sqrt(n))m) where C 
From: Rank-Maximal Matchings by R.W. Irving, T.Kavitha, K. Mehlorn,
D. Michail, and K. Paluch.  Proceedings of the 15th Annual ACM-SIAM 
Symposium on Discrete Algorithms, 2004.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040305.html
##-----------------TITLE------------------------##
Theory Seminar, 5 Mar 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


5 Mar 2004:
What of the input can we explore besides n?

Jonathan Z. Sun


In "Interploation search for non-independent data"
by Demaine, Jones and Patrascu [SODA 2004, pp.522-523],
the complexity of a simple searching algorithm
is analyzed not by the input size n
but by a gap ratio Delta =
(max distance of two adjacent values)/(min distance of
two adjacent values).  Previous work on interpolation search
always assumed some distribution on the input data
and (still) used the input size n for complexity analysis.

Time allowing, there will be a discussion of
"A note on the nearest neighbor in growth-restricted metrics"
by Hildrum, Kubiatowicz, and Rao [SODA 2004, pp.553-554].
In this paper, although the complexity is represented by the
input size n, it is based on a constraint of the input.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040123.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Jan 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


23 Jan 2004:
Anonymous Credentials with Biometrically-Enforced Non-Transferability

Sara Miner More, UCSD


Often, to gain access to a resource, an individual must present some
sort
of credential.  If the credential includes identifying information
about
the individual, the organization controlling the resource can collect
information about his actions.  In the digital world in particular,
this
collection requires very little effort.  The compiled information can
then
be shared with or even sold to another organization, without the
individual's knowledge or consent.


To protect an individual's privacy in the digital world,
cryptographers
have suggested anonymous credentials, which allow an individual to
prove
that he possesses a particular right without revealing his identity.
However, anonymous credentials based on cryptography alone are
inherently
transferable -- an individual can simply give a copy of his
cryptographic
key to a friend.  In applications where non-transferability is
important,
biometric data, such as a fingerprint or retina scan, can be used to
link
a credential with a particular individual, but often at the cost of
anonymity.  For example, if the individual's fingerprint is included
as
part of his credential, the organization controlling a resource may
identify him when he requests access.


Perhaps surprisingly, it is possible to design non-transferable
credentials which retain anonymity.  In this talk, we describe a
model and
protocol for secure digital credentials which have both of these
properties.  Our model uses tamper-resistant hardware to combine
cryptographic techniques with biometric-based credentials.
Specifically,
a user can prove that he is in fact an individual to whom a
credential was
issued, without revealing any additional information.  Furthermore,
two
instances of credential displays by the same individual are
unlinkable.
Additionally, we will describe a mechanism which allows such
credentials
to be revoked by the issuing party, and discuss potential extensions
to
the system.


This talk describes joint work with Russell Impagliazzo (UCSD) which
appeared in the 2003 ACM Workshop on Privacy in the Electronic
Society.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040213.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Jan 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


13 Feb 2004:
Routing in highly dynamic network communities

Amitabha Bagchi


The advent of large freely-evolving networks has led to a new notion
of computing in communities. These communities share resources to
achieve shared or individual goals. Unlike the rigidly organized
parallel systems of the past, these networks have relatively looser
interconnection regimes and allow, in fact expect, nodes and edges to
come and go as they please. We study the ability of networks to deal
with this highly dynamic situation by looking at the basic problem of
routing. We use the edge expansion of the network (roughly the number
of edges per node going out of a given set of nodes) as our measure
of
the ability to route packets efficiently. We study the effect if
nodes
leaving the system on the expansion of the network.  We also propose
a
system of routing flows through disjoint paths to provide robustness
against edges going down and analyze it in terms of the expansion.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040220.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Jan 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


20 Feb 2004:
An Optimal Randomized Algorithm for Maximum Tukey Depth

Kevin Wortman 


We present the first algorithm to compute the maximum Tukey 
depth  for a non-degenerate point set in the plane.  The algorithm is 
randomized and requires O(n log n) 
expected time for n data points.
In a higher fixed dimension d, greater than or equal to 3, 
the expected time bound is O(nd-1), 
which is probably optimal as well.  The result is obtained using an 
interesting variant of the author's randomized optimization
technique, capable of solving "implicit" linear-programming-type problems.


From: Paper by the same name, by Timothy Chan, Proc. 15th ACM-SIAM Symp. 
Discrete Algorithms (SODA), Jan 2004, pp. 423-429.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040130.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Jan 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


30 Jan 2004:
Split flows and elusive outliers: solving two problems in modern computing

Amic Chaudhary, UCI


The world of computing is witnessing simultaneous explosions in data
and connectivity.  We need computer systems that meet the challenges
of this evolving world while exploiting the benefits inherent in it.
In this talk we shall look at two case studies of constructing
algorithms for such systems.


A simple technique harnesses the large connectivity of modern
networks
to provide not only fault tolerance, but also information security
--- insisting that all flow (or, communication) is split through edge
disjoint paths.  The question is: How does the amount of possible
flow
change under the splitting constraint?  Or, more particularly, can we
solve, in this scenario, the admission control type, or route (path)
coloring type, or any other type of problems that have been studied
for regular flows?  In the first case study, we shall present results
and algorithms that answer some of these questions.


In the second case study, we shall present an implementation for very
fast detection of outliers from large data sets in high dimensional
space.  Detecting outliers is important in catching network
intrusions and other fraud, in detecting bio-terrorist attacks, and,
in our particular application, finding unique objects in astronomical
databases. We shall show that a simple twist to the ubiquitous k-d
tree leads to a method that makes no assumption about an underlying
probability model, but when compared to state-of-the-art
implementations of data mining algorithms that do make such
assumptions, performs just as well.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040227.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Jan 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


27 Feb 2004:
A Scheduling Model for 
Reduced CPU Energy

John Augustine


The energy usage of computer systems is becoming an important 
consideration, especially for battery operated systems. Various
methods 
for reducing energy consumption have been investigated, both at the 
circuit level and at the operating systems level. In this paper, we 
propose a simple model of job scheduling aimed at capturing some key 
aspects of energy minimization. In this model, each job is to be 
executed between its arrival time and deadline by a single processor 
with variable speed, under the assumption that energy usage per unit 
time, P, is a convex function of the processor speed s. 
We give an 
off-line algorithm that computes, for any set of jobs, a minimum-energy 
schedule. We then consider some on-line algorithms and their
competitive 
performance for the power function 
P(s) = s p, where p is
greater than or equal to 2. It is 
shown that one natural heuristic, called the Average Rate Heuristic, 
uses at most a constant times the minimum energy required. The
analysis 
involves bounding the largest eigenvalue in matrices of a special
type.



From: 
Frances Yao, Alan J. Demers, Scott Shenker: A Scheduling Model for 
Reduced CPU Energy. FOCS 1995 : 374-382.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040312.html
##-----------------TITLE------------------------##
Theory Seminar, 12 Mar 2004
##------------------TEXT------------------------##
ICS 269, Winter 2004: Theory Seminar


12 Mar 2004:
Meldable RAM priority queues and
minimum spanning trees

Jeremy Yu Meng


The authors describe two general techniques for transforming
non-meldable priority queues into meldable ones.  Using the resultant
priority queues of the first type, they obtain improved algorithms
for finding minimum directed spanning trees in graphs with integer
weights.

From Meldable RAM priority queues and
minimum spanning trees, from SODA '04, by Ran Mendelson, Mikkel
Thorup, and Uri Zwick (pages 40--48 in the proceedings).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141010.html
##-----------------TITLE------------------------##
Theory Seminar, October 10, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


October 10, 2014:

Curves in Graph Drawing


David Eppstein



We review graph drawing methods that use curves to represent edges,
including arc diagrams, layered graph drawing, hyperbolic drawing,
planar graph layouts, force-directed methods, edge bundling, confluent
drawing, and Lombardi drawing.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141114.html
##-----------------TITLE------------------------##
Theory Seminar, November 14, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


November 14, 2014:

Bumpy Pyramid Folding


Zachary Becker



We investigate folding problems for a class of petal polygons
$P$, which have an $n$-polygonal base $B$ surrounded
by a sequence of triangles. We give linear time algorithms
using constant precision to determine if $P$ can
fold to a pyramid with flat base $B$, and to determine a
triangulation of $B$ (crease pattern) that allows folding
into a convex (triangulated) polyhedron. By Alexandrov's
theorem, the crease pattern is unique if it exists,
but the general algorithm known for this theorem is
pseudo-polynomial, with very large running time; ours
is the first efficient algorithm for Alexandrov's theorem
for a special class of polyhedra. We also give a polynomial
time algorithm that finds the crease pattern to produce
the maximum volume triangulated polyhedron.

(Based
on a
paper from CCCG 2014
by Zachary R. Abel, Erik D. Demaine, Martin L. Demaine,
Hiro Ito, Jack Snoeyink, and Ryuhei Uehara.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141121.html
##-----------------TITLE------------------------##
Theory Seminar, November 21, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


November 21, 2014:

Cache-Adaptive Algorithms


Jenny Lam



We introduce the cache-adaptive model, which generalizes the
external-memory model to apply to environments in which the amount of
memory available to an algorithm can fluctuate. The cache-adaptive model
applies to operating systems, databases, and other systems where the
allocation of memory to processes changes over time. We prove that if an
optimal cache-oblivious algorithm has a particular recursive structure,
then it is also an optimal cache-adaptive algorithm. Cache-oblivious
algorithms having this form include Floyd–Warshall all pairs
shortest paths, naive recursive matrix multiplication, matrix transpose,
and Gaussian elimination. While the cache-oblivious sorting algorithm
Lazy Funnel Sort does not have this recursive structure, we prove that
it is nonetheless optimally cache-adaptive. We also establish that if a
cache-oblivious algorithm is optimal on “square”
(well-behaved) memory profiles then, given resource augmentation it is
optimal on all memory profiles.


We give paging algorithms for the case where the cache size changes
dynamically. We prove that LRU with 4-memory and 4-speed augmentation is
competitive with optimal. Moreover, Belady's algorithm remains optimal
even when the cache size changes. Cache-obliviousness is distinct from
cache-adaptivity. We exhibit a cache-oblivious algorithm that is not
cache- adaptive and a cache-adaptive algorithm for a problem having no
optimal cache-oblivious solution.

(Based
on a
paper from SODA 2014 by Michael A. Bender, Roozbeh Ebrahimi, Jeremy
T. Fineman, Golnaz Ghasemiesfeh, Rob Johnson, and Samuel McCauley.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141107.html
##-----------------TITLE------------------------##
Theory Seminar, November 7, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


November 7, 2014:

Multi-Pivot Quicksort: Theory and Experiments


Timothy Johnson



The idea of multi-pivot quicksort has recently received the attention of
researchers after Vladimir Yaroslavskiy proposed a dual pivot quicksort
algorithm that, contrary to prior intuition, outperforms standard
quicksort by a significant margin under the Java JVM. More recently,
this algorithm has been analysed in terms of comparisons and swaps by
Wild and Nebel. Our contributions to the topic are as follows. First, we
perform the previous experiments using a native C implementation thus
removing potential extraneous effects of the JVM. Second, we provide
analyses on cache behavior of these algorithms. We then provide strong
evidence that cache behavior is causing most of the performance
differences in these algorithms. Additionally, we build upon prior work
in multi-pivot quicksort and propose a 3-pivot variant that performs
very well in theory and practice. We show that it makes fewer
comparisons and has better cache behavior than the dual pivot quicksort
in the expected case. We validate this with experimental results,
showing a 7–8% performance improvement in our tests.

(Based
on a
paper from ALENEX 2014
by Shrinu Kushagra, Alejandro López-Ortiz, J. Ian Munro, and
Aurick Qiao.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141205.html
##-----------------TITLE------------------------##
Theory Seminar, December 5, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


December 5, 2014:

ERGMs are Hard


Michael Bannister



We investigate the computational complexity of the exponential random
graph model (ERGM) commonly used in social network analysis. This model
represents a probability distribution on graphs by setting the
log-likelihood of generating a graph to be a weighted sum of feature
counts. These log-likelihoods must be exponentiated and then normalized
to produce probabilities, and the normalizing constant is called the
partition function. We show that the problem of computing the
partition function is $\mathsf{\#P}$-hard, and inapproximable in
polynomial time to within an exponential ratio, assuming $\mathsf{P}
\neq \mathsf{NP}$. Furthermore, there is no randomized polynomial time
algorithm for generating random graphs whose distribution is within
total variation distance $1-o(1)$ of a given ERGM. Our proofs use
standard feature types based on the sociological theories of assortative
mixing and triadic closure.

(Joint work with Will
Devanny and David Eppstein.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141031.html
##-----------------TITLE------------------------##
Theory Seminar, October 31, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


October 31, 2014:

Fast Sorting and Pattern-Avoiding Permutations


Will Devanny



We say a permutation $\pi$ “avoids” a pattern $\sigma$ if no
length $|\sigma|$ subsequence
of $\pi$ is ordered in precisely the same way as $\sigma$. For example, $\pi$ avoids
$(1, 2, 3)$ if it contains no increasing subsequence of length three. It
was recently shown by Marcus and Tardos that the number of permutations
of length $n$ avoiding any fixed pattern is at most exponential in $n$. This
suggests the possibility that if $\pi$ is known a priori to avoid a fixed
pattern, it may be possible to sort $\pi$ in as little as linear time. Fully
resolving this possibility seems very challenging, but in this paper, we
demonstrate a large
class of patterns $\sigma$ for which $\sigma$-avoiding permutations can
be sorted in
$O(n\log\log\log n)$ time.

(Based
on a
paper by David Arthur from ANALCO 2007.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/141024.html
##-----------------TITLE------------------------##
Theory Seminar, October 24, 2013
##------------------TEXT------------------------##
Fall 2014: Theory Seminar
Donald Bren Hall, Room 1425, 1:00pm


October 24, 2014:

Two-Phase Bicriterion Search for Finding Fast and Efficient Electric
Vehicle Routes


Michael T. Goodrich



The problem of finding an electric vehicle route that optimizes both
driving time and energy consumption can be modeled as a bicriterion
path problem. Unfortunately, the problem of finding optimal bicriterion
paths is NP-complete. This paper studies such problems restricted to
two-phase paths, which correspond to a common way people drive electric
vehicles, where a driver uses one driving style (say, minimizing
driving time) at the beginning of a route and another driving style
(say, minimizing energy consumption) at the end. We provide efficient
polynomial-time algorithms for finding optimal two-phase paths in
bicriterion networks, and we empirically verify the effectiveness of
these algorithms for finding good electric vehicle driving routes in
the road networks of various U.S. states. In addition, we show how to
incorporate charging stations into these algorithms, in spite of the
computational challenges introduced by the negative energy consumption
of such network vertices.

(Joint work with Paweł Pszona, to appear at ACM SIGSPATIAL 2014.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980529.html
##-----------------TITLE------------------------##
Theory Seminar, 29 May 1998
##------------------TEXT------------------------##
ICS 269, Spring 1998: Theory Seminar


29 May 1998:
Mutual Search
Joseph Wang, ICS, UC
Irvine

We define a new type of search problem called "mutual search",
where k players arbitrarily spread over n nodes are
required to locate each other by send "Anybody at node I?" query
messages (for example processes in a computer network). If the
messages are not delivered in the order they were sent (for example
when the communica- tion delay time is arbitrary) then two players
require at least n - 1 messages. In an
asynchronous network, where the messages are delivered in the order
they were sent, 0.88n messages suffice. In a synchronous
0.586n messages suffice and 0.536n messages are
required in the worst case. We exhibit a simple randomized
algorithm with expected worst-case cost of 0.5n messages,
and a deterministic algorithm for k > 2
players with a cost well below n for all 
k = o(sqrt n). The graph-theoretic
framework we formulated for expressing and analyzing algorithms for
this problem may be of independent interest.

(From a SODA '98 paper by Buhrman et al.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980501.html
##-----------------TITLE------------------------##
Theory Seminar, 1 May 1998
##------------------TEXT------------------------##
ICS 269, Spring 1998: Theory Seminar


1 May 1998:
Parallel and On-Line Graph Coloring
Brad Hutchings, ICS, UC Irvine

Brad described results from a paper by Magnus M. Halldorsson in
Journal of Algorithms 23, 265-280 (1987). The approximate
coloring algorithms in the paper work by forming a maximal partial
coloring with a limited number of colors. The remaining uncolored
vertices are partitioned according to their adjacencies with
members of one color class, forming a collection of subgraphs with
smaller chromatic number. These subgraphs are then colored
independently and recursively. Halldorsson shows that this approach
leads to approximation ratios of
O(n / log n), not only sequentially
but also in the parallel and on-line settings.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980515.html
##-----------------TITLE------------------------##
Theory Seminar, 15 May 1998
##------------------TEXT------------------------##
ICS 269, Spring 1998: Theory Seminar


15 May 1998:
Machine Learning of Classifications via Generalized Linear
Models
Kent Martin, ICS, UC Irvine

We describe a general-purpose classification learning algorithm
based on Generalized Linear Models, and evaluate that algorithm
(GLOREAL, the Generalized Logistic Regression Algorithmic Learner)
as a competitor to ordinary decision tree learners such as C4.5.
GLOREAL is based on a generalization of logistic regression and it
also uses some non-conventional methods for model selection that
are adapted from other work at the interface of machine learning
and statistics. Empirical results show that GLOREAL is 4-5% more
accurate than C4.5 on the average. GLOREAL's success is due in part
to learning and aggregating multiple classifiers for a problem,
which is more effective in GLOREAL than it is in bagging decision
trees. Another important factor in GLOREAL's success is that it has
a richer and more effective representation language than ordinary
decision tree learners, particularly with regard to numeric
attributes.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980522.html
##-----------------TITLE------------------------##
Theory Seminar, 22 May 1998
##------------------TEXT------------------------##
ICS 269, Spring 1998: Theory Seminar


22 May 1998:
New Fast Network Flow Algorithms
Yi Cao, ICS, UC
Irvine

Yi described a FOCS '97 paper by Andrew Goldberg and Satish Rao,
"Beyond the Flow Decomposition Barrier". This paper introduces a
new approach to the maximum flow problem based on the blocking flow
method, with arc lengths assigned according to the residual flow
value and residual capacities. Their approach leads to an
O(min(n2/3, m1/2) 
m log(n2/m) log U) time
bound for a network with n vertices, m arcs and
integral arc capacities in the range [1,...,U].
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980430.html
##-----------------TITLE------------------------##
On the Power of Barely Random Online Algorithms
##------------------TEXT------------------------##
On the Power of Barely Random Online Algorithms
Steve Seiden, Technische Universität Graz, Institut für
Mathematik B

(Joint work with John Noga.)

A barely random online algorithm is one which is distribution
over some constant number of deterministic algorithms. An oblivious
barely random online algorithm is a barely random online algorithm
which chooses its distribution prior to serving the first request.
Although a number of barely random algorithms have been presented
in the literature, there has been, up to this point, no formal
study of the properties of this class. Most researchers would
probably agree that such algorithms are desirable, in that they
conserve a precious resource---random bits. Such algorithms are
also desirable in that they are generally easier to analyze than
algorithms which use an unbounded number of random choices.
However, it is important to consider the possible tradeoffs. The
formal study of barely random online algorithms is initiated here.
It is shown that barely random online algorithms are, under certain
restrictions, no more powerful than oblivious barely random online
algorithms. A general technique for proving lower bounds for barely
random online algorithms is presented. This technique is an
application of the well known von Neumann/Yao principle. For
several simple online problems, lower and upper bounds for barely
random online algorithms are given. The power of barely random
algorithms for the ski rental problem is completely characterized.
Other problems investigated include paging, total completion time
scheduling, m-machine scheduling, interval scheduling and the cow
path problem.

Thursday, April 30, 1998, 1:00PM, in ICS 432
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980605.html
##-----------------TITLE------------------------##
Theory Seminar, 5 June 1998
##------------------TEXT------------------------##
ICS 269, Spring 1998: Theory Seminar


5 June 1998:
Video On Demand
Thuan Do, ICS, UC Irvine

A video-on-demand (VOD) server is a place where hundreds or
thousands of movie files are stored, and movie watchers (clients)
can connect their own machines to the server to browse, request and
view the movies immediately . There are many challenges to a VOD
server, and load balancing is the most important one. A server must
have movie files organized in such a way that all clients can view
the movies they want, regardless of the number of clients who are
online. There may be peak time periods when many clients want to
view the same movie, and the server must send different phases of
the same movie file to them, since the clients do not all request
the movie at the same time. The server must also minimize the
waiting time for each client. The cost must be kept low, but the
number of files and bandwidth must be large enough to service all
clients promptly. The goal of load balancing is to maximize the
ratio of the number of concurrent streams over the cost of the
server.

Another challenge is the online functionalities at the client's
end. A client must be able to perform the VCR-like functions, such
as fast-forward, rewind, pause, etc... on the movies they are
viewing, the same way as when they rent and watch a video tape with
their VCR. Therefore, it's not enough if a steady stream of movie
file comes to their house without the client being able to
interfere with it.

In this talk, I will survey a number of articles which appeared
recently about this type of multimedia. These are the contributions
by the people who have studied the details of a VOD server, the
problems that are involved, and the solutions for those
problems.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150501.html
##-----------------TITLE------------------------##
Theory Seminar, March 6, 2015
##------------------TEXT------------------------##
Spring 2015: Theory Seminar
ICS, Room 243, 1:00pm


May 1, 2015:

Fixed-Parameter Tractable Algorithms for Crossing Minimization in Book Embeddings


Will Devanny



Having a good model for a social network is vital in their analysis.  We study a family of social network models known as dK distributions from a computational perspective.  Previous work has found the 1K and 2K distributions to be tractable, but for 3K distributions the literature has resorted to using heuristics.  We show computational problems related to the 3K distributions are NP-hard by a reduction from coloring.  We also show similar alternative models suffer from the same problem.


Joint work with David Eppstein, Athina Markopoulou, and Balint Tillman.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150605.html
##-----------------TITLE------------------------##
Theory Seminar, March 6, 2015
##------------------TEXT------------------------##
Spring 2015: Theory Seminar
ICS, Room 243, 1:00pm


June 5, 2015:

Confluent Orthogonal Drawings of Syntax Diagrams


Michael J. Bannister



We provide a framework for generating syntax diagrams (also
called railroad diagrams) for context-free grammars. Syntax diagrams
are a graphical representation of a context-free grammar, similar to how
a drawing of an NFA is a graphical representation of a regular gram-
mar. The typical style used when drawing syntax diagrams is based on
confluent orthogonal drawing. We provide several heuristic to optimize
the drawings of the syntax diagrams produced within our framework.


Joint work with David Brown and  David Eppstein
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150508.html
##-----------------TITLE------------------------##
Theory Seminar, March 6, 2015
##------------------TEXT------------------------##
Spring 2015: Theory Seminar
ICS, Room 243, 1:00pm


May 8, 2015:

Competition-Induced Preferential Attachment


By N. Berger, C. Borgs, J. T. Chayes, R. M. D.Souza, and R. D. Kleinberg


Presented by: Jenny Lam 



Abstract:
Models based on preferential attachment have had much success
in reproducing the power law degree distributions which seem ubiquitous
in both natural and engineered systems. Here, rather than assuming
preferential attachment, we give an explanation of how it can arise from
a more basic underlying mechanism of competition between opposing
forces.


We introduce a family of one-dimensional geometric growth models,
constructed iteratively by locally optimizing the tradeoffs between two
competing metrics. This family admits an equivalent description as a
graph process with no reference to the underlying geometry. Moreover,
the resulting graph process is shown to be preferential attachment with
an upper cutoff. We rigorously determine the degree distribution for the
family of random graph models, showing that it obeys a power law up to a
finite threshold and decays exponentially above this threshold.
We also introduce and rigorously analyze a generalized version of our
graph process, with two natural parameters, one corresponding to the
cutoff and the other a .fertility. parameter. Limiting cases of this
process include the standard preferential attachment model (introduced
by Price and by Barabasi-Albert) and the uniform attachment model. In
the general case, we prove that the process has a power law degree
distribution up to a cutoff, and establish monotonicity of the power as
a function of the two parameters.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150529.html
##-----------------TITLE------------------------##
Theory Seminar, March 6, 2015
##------------------TEXT------------------------##
Spring 2015: Theory Seminar
ICS, Room 243, 1:00pm


May 29, 2015:

Orthogonal Drawings of Series-Parallel Graphs


Timothy Johnson



We introduce an algorithm for constructing an orthogonal drawing of a series-parallel graph. Our drawing has an area of O(n log n), and an aspect ratio of O(log n).


Joint work with Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051007.html
##-----------------TITLE------------------------##
Theory Seminar, October 7, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

The Weighted Maximum-Mean Subtree and Other 
Bicriterion Subtree Problems

Josiah Carlson

October 7, 2005, in CS 259

Abstract:

We consider problems in which we are given a rooted tree as input, and must 
find a subtree with the same root, optimizing some objective function of 
the nodes in the subtree. When this function is the sum of constant node 
weights, the problem is trivially solved in linear time. When the objective 
is the sum of weights that are linear functions of a parameter, we show how 
to list all optima for all possible parameter values in O(n log n) time; 
this parametric optimization problem can be used to solve many bicriterion 
optimizations problems, in which each node has two values xi and yi 
associated with it, and the objective function is a bivariate function 
f(SUM(xi),SUM(yi)) of the sums of these two values. A special case, when f 
is the ratio of the two sums, is the Weighted Maximum-Mean Subtree Problem, 
or equivalently the Fractional Prize-Collecting Steiner Tree Problem on 
Trees; for this special case, we provide a linear time algorithm for this 
problem when all weights are positive, improving a previous O(n log n) 
solution, and prove that the problem is NP-complete when negative weights 
are allowed.

(Joint work with D. Eppstein.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051028.html
##-----------------TITLE------------------------##
Theory Seminar, October 28, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

Undirected ST-Connectivity in Log-Space

Nodari Sitchinava

October 28, 2005, in CS 259

Abstract:

This talk will be a presentation of a paper
by Omer Reingold that won the Best Paper Award at STOC 2005.

The author of the paper presents a deterministic log-space algorithm
that solves st-connectivity in undirected graphs. As undirected
st-connectivity is complete for the class of problems solvable by
symmetric, non-deterministic, log-space computations (the class SL),
this algorithm implies that SL = L (where L is the class of problems
solvable by deterministic log-space computations).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051104.html
##-----------------TITLE------------------------##
Theory Seminar, November 4, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

Distributed Online Call Control on General Networks

John Augustine

November 4, 2005, in CS 259

Abstract:

This talk will be a presentation of a paper
by Harald Räcke, and Adi Rosén from SODA 2005.

We study the problem of online call admission and routing ("call
control") on general networks. We give new algorithms that with high
probability achieve a poly-logarithmic fraction (in the size of the
network) of the optimal solution. The decisions of our algorithms do not
depend on the current load of all network links, as in previous
algorithms for general network topologies [AAP93]. Instead, their
admission decisions depend only on link loads along a single path
between the communicating parties, and they can thus be performed in a
distributed hop-by-hop manner through the network. Furthemore, our
algorithms can handle concurrent requests in the network.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051118.html
##-----------------TITLE------------------------##
Theory Seminar, November 18, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

Deformable Spanners

Jonathan Sun

November 18, 2005, in CS 259

Abstract:

This talk will be a presentation of work from papers
by Jie Gao, Leonidas Guibas, and An Nguyen in SoCG 2004 and DCOSS 2005.

For a set S of points in Rd, an s-spanner is a graph on S
such that any pair of points is connected via some path in the spanner
whose total length is at most s times the Euclidean distance between the
points. The authors propose a new sparse (1+ε)-spanner with
O(n/εd) edges, where ε is a specified
parameter. This spanner can be efficiently maintained under dynamic
insertion or deletion of points, as well as under continuous motion of
the points in both the kinetic data structures setting and in the more
realistic blackbox displacement model they introduce.  Deformable
spanners succinctly encode all proximity information in a deforming
point cloud, giving us efficient kinetic algorithms for problems such as
the closest pair, the near neighbors of all points, approximate nearest
neighbor search (aka approximate Voronoi diagram), well-separated pair
decomposition, and approximate k-centers.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051202.html
##-----------------TITLE------------------------##
Theory Seminar, December 2, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

Measure and Conquer: Domination -- A Case Study

Jeremy Yu Meng

December 2, 2005, in CS 259

Abstract:

This talk will be a presentation of a paper
by Fedor V. Fomin, Fabrizio Grandoni, and Dieter Kratsch from ICALP 2005.

Davis-Putnam-style exponential-time backtracking algorithms are the most
common algorithms used for finding exact solutions of NP-hard
problems. The analysis of such recursive algorithms is based on the
bounded search tree technique: a measure of the size of the subproblems
is defined; this measure is used to lower bound the progress made by the
algorithm at each branching step.  For the last 30 years the research on
exact algorithms has been mainly focused on the design of more and more
sophisticated algorithms. However, measures used in the analysis of
backtracking algorithms are usually very simple. In this paper we stress
that a more careful choice of the measure can lead to significantly
better worst case time analysis.  As an example, we consider the minimum
dominating set problem. The currently fastest algorithm for this problem
has running time O(20.850n) on n-nodes graphs. By measuring the
progress of the (same) algorithm in a different way, we refine the time
bound to O(20.598n). A good choice of the measure can provide such a
(surprisingly big) improvement; this suggests that the running time of
many other exponential-time recursive algorithms is largely
overestimated because of a "bad" choice of the measure.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051014.html
##-----------------TITLE------------------------##
Theory Seminar, October 14, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

The Rainbow Skip Graph:  A Fault-Tolerant Constant-Degree
Distributed Data Structure

Michael Nelson

October 14, 2005, in CS 259

Abstract:

We present a distributed data structure, which we call the
rainbow skip graph. To our knowledge, this is the first peer-
to-peer data structure that simultaneously achieves high
fault-tolerance, constant-sized nodes, and fast update and
query times for ordered data. It is a non-trivial adaptation
of the SkipNet/skip-graph structures of Harvey et al. and
Aspnes and Shah, so as to provide fault-tolerance as these
structures do, but to do so using constant-sized nodes, as
in the family tree structure of Zatloukal and Harvey. It
supports successor queries on a set of n items using O(log n)
messages with high probability, an improvement over the
expected O(log n) messages of the family tree.

(Joint work by Michael T. Goodrich, Michael J. Nelson, and Jonathan
Z. Sun.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/051021.html
##-----------------TITLE------------------------##
Theory Seminar, October 21, 2005
##------------------TEXT------------------------##
ICS 269, Fall 2005: Theory Seminar

Minimum Dilation Stars in Metric Spaces

Kevin Wortman

October 21, 2005, in CS 259

Abstract:

We consider the following problem: given a collection of n sites
separated by distances obeying the triangle inequality, create a star
(tree of depth 1) whose root is a new center site and whose leaves
are the input sites, such that the dilation of the star is minimal.
The problem amounts to computing a weight for each of the n edges
from the root to the leaves, such that all the weights in the star obey
the triangle inequality.  This talk will describe an
O(n3)-time algorithm
for computing the optimal dilation value, which is a significant
component of an algorithm that computes the edge weights.

(Joint work in progress with David Eppstein.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080229.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 29, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Feb 29, 2008, 1:00pm in Bren Hall 1423


The Graph Genus Problem is NP-Complete


by Carsten Thomassen, in Journal of Algorithms 10:4 (1989)

presented by Darren Strash


Abstract:

It is NP-complete to tell, given a graph /G/ and a natural number /k/, 
whether /G/ has genus /k/ or less.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080215.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 15, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Feb 15, 2008, in Bren Hall 1423


Nondecreasing Paths in a Weighted Graph or: How to Optimally
Read a Train Schedule


by Virginia Vassilevska, appeared at SODA 2008

presented by Kevin Wortman


Abstract:

A travel booking office has timetables giving arrival and departure
times for all scheduled
trains, including their origins and destinations. A customer presents
a starting city and demands
a route with perhaps several train connections taking him to his
destination as early as possible.
The booking office must find the best route for its customers. This
problem was first considered
in the theory of algorithms by George Minty, who reduced it to a
problem on directed
weighted graphs: find a path from a given source to a given target
such that the consecutive
weights on the path are nondecreasing and the last weight on the path
is minimized. Minty gave
the first algorithm for the single source version of the problem, in
which one finds minimum last
weight nondecreasing paths from the source to every other vertex. In
this paper we give the first
linear time algorithm for this problem. We also define an all pairs
version for the problem and
give a strongly polynomial truly subcubic algorithm for it.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080222.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 22, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Feb 22, 2008, 1:00pm in Bren Hall 1423


On the Complexity of Delaunay Triangulations on Manifolds


Nina Amenta (UC Davis)


Abstract:

Even more than most spatial data structures,
the Delaunay triangulation suffers from the "curse of dimensionality".
A classic theorem of McMullen says that the worst-case complexity
of the Delaunay triangulation of a set of n points in dimension
d is θ(n⌈d/2⌉).
The point sets constructed to realize this exponential bound are
distributed on one-dimensional curves.
What about distributions of points on manifolds of dimension
1 < p ≤ d? 

We consider sets of points distributed nearly uniformly on a polyhedral
surfaces of dimension p,
and find that their Delaunay triangulations
have complexity O(n(d-k+1)/p),
with k being the ceiling of (d+1)/(p+1),
and we show that this bound is tight.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080307.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 7, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Mar 7, 2008, 1:00pm in Bren Hall 1423


Fast Algorithms for Minimum Weight Constant Length Cycles in Edge-Weighted Graphs


presented by Mike Nelson


Abstract:

I will present some results from "Finding the Smallest 
H-Subgraph in Real Weighted Graphs and Related Problems", by Virginia 
Vassilevska, Ryan Williams, and Raphael Yuster.
This work appeared in the International Colloquium on Autotmata,
Languages and Programming 2006.
I will present their deterministic algorithm for 
finding the minimum weight cycle of length k.
For a fixed (constant) k, the algorithm has running time
that is sub-quadratic in m, the number of edges.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/080314.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 14, 2008
##------------------TEXT------------------------##
CompSci 269S, Winter 2008: Theory Seminar

Mar 14, 2008, 1:00pm in Bren Hall 1423


Parallel External Memory Graph Algorithms


Nodari Sitchinava


Abstract:

I will be presenting new results in Parallel External Memory model. In 
particular I will talk about solutions to List ranking, Euler tour 
technique and its application to problems on trees, finding connected 
components and the minimum spanning tree of an undirected graph.

This is joint work with Lars Arge and Mike Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131025.html
##-----------------TITLE------------------------##
Theory Seminar, October 4, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


October 25, 2013:

Hereditary properties of permutations are strongly testable

By Tereza Klimosova and Daniel Kral
 Presented by Michael Bannister

We show that for every hereditary permutation property P and
every e0 > 0, there exists an integer M such that if a permutation
pi is e0-far from P in the Kendall's tau distance, then a random 
sub-permutation of pi of order M has the property P with probability at
most e0. This settles an open problem whether hereditary permutation 
properties are strongly testable, i.e., testable with respect 
to the Kendall's tau distance. In addition, our method also yields a proof
of a conjecture of Hoppen, Kohayakawa, Moreira and Sampaio on the
relation of the rectangular distance and the Kendall's tau distance of
a permutation from a hereditary property.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131011.html
##-----------------TITLE------------------------##
Theory Seminar, October 4, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


October 11, 2013:

Achieving good angular resolution in 3D arc drawings 

 Pawel Pszona

We study a 3D analogue to the well-known 2D arc diagrams.
We provide several algorithms that achieve good angular resolution,
utilizing various graph coloring algorithms, including an algorithm
for a new coloring problem, which we call "localized edge coloring". 
(Joint work with Michael Goodrich.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131115.html
##-----------------TITLE------------------------##
Theory Seminar, November 15, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


November 15, 2013:

Physarum Can Compute Shortest Paths

 by Vincenzo Bonifaci, Kurt Mehlhorn, Girish Varma
 Presented by Wileen Chiu

Physarum Polycephalum is a slime mold that is apparently able to solve shortest path problems. A mathematical model has been proposed by biologists to describe the feedback mechanism used by the slime mold to adapt its tubular channels while foraging two food sources s0 and s1. We prove that, under this model, the mass of the mold will eventually converge to the shortest s0 - s1 path of the network that the mold lies on, independently of the structure of the network or of the initial mass distribution. This matches the experimental observations by the biologists and can be seen as an example of a "natural algorithm", that is, an algorithm developed by evolution over millions of years.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131101.html
##-----------------TITLE------------------------##
Theory Seminar, November 1, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


November 1, 2013:

Drawing Graphs Using Modular Decomposition

 by Charis Papadopoulos and Constantinos Voglis
 Appeared in Graph Drawing 2005
 Presented by Joe Simons

In this paper we present an algorithm for drawing an undirected graph G which takes advantage of the structure of the modular decomposition tree of G. Speci.cally, our algorithm works by traversing the modular decomposition tree of the input graph G on n vertices and m edges, in a bottom-up fashion until it reaches the root of the tree,while at the same time intermediate drawings are computed. In order to achieve aesthetically pleasing results, we use grid and circular placement techniques, and utilize an appropriate modi.cation of a well-known spring embedder algorithm. It turns out, that for some classes of graphs,our algorithm runs in O(n +m) time, while in general, the running time is bounded in terms of the processing time of the spring embedder algorithm. The result is a drawing that reveals the structure of the graph G and preserves certain aesthetic criteria.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131108.html
##-----------------TITLE------------------------##
Theory Seminar, November 8, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


November 8, 2013:

Dynamic graph connectivity in polylogarithmic worst case time

 by Bruce M. Kapron, Valerie King, and Ben Mountjoy
 Appeared in SODA 2013
 Presented by Jack Cheng

The dynamic graph connectivity problem is the following: given a graph on a fixed set of n nodes which is undergoing a sequence of edge insertions and deletions, answer queries of the form q(a, b): .Is there a path between nodes a and b?. While data structures for this problem with polylogarithmic amortized time per operation have been known since the mid-1990.s, these data structures have .(n) worst case time. In fact, no previously known solution has worst case time per operation which is o(sqrt(n)). 


We present a solution with worst case times O(log^4 n) per edge insertion, O(log^5 n) per edge deletion, and O(log n / log log n) per query. The answer to each query is correct if the answer is .yes. and is correct with high probability if the answer is .no.. The data structure is based on a simple novel idea which can be used to quickly identify an edge in a cutset.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131018.html
##-----------------TITLE------------------------##
Theory Seminar, October 4, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


October 18, 2013:

Small superpatterns for dominance drawing

 Will Devanny

We exploit the connection between dominance drawings of directed 
acyclic graphs and permutations, in both directions, to provide 
improved bounds on the size of universal point sets for certain types of dominance drawing and on superpatterns for certain natural classes of permutations. In particular we show that there exist universal point sets for dominance drawings of the Hasse diagrams of width-two partial orders of size O(n^3/2 ), universal point sets for dominance drawings of st-outerplanar graphs of size O(n log n), and universal point sets for dominance drawings of directed trees of size O(n^2 ). We show that 321-avoiding permutations have superpatterns of size O(n^3/2 ), riffle permutations (321-, 2143-, and 2413-avoiding permutations) have superpatterns of size O(n), and the concatenations of sequences of riffles and their inverses have superpatterns of size O(n log n). Our analysis includes 
a calculation of the leading constants in these bounds.


Joint work with Michael J Bannister and David Eppstein.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131004.html
##-----------------TITLE------------------------##
Theory Seminar, October 4, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


October 4, 2013:

Drawing Arrangement Graphs In Small Grids, Or How To Play Planarity

David Eppstein

We describe a linear-time algorithm that finds a planar drawing of every graph of a simple line or pseudoline arrangement within a grid of area O(n^{7/6}). No known input causes our algorithm to use area Omega(n^{1+eps}) for any eps  > 0; finding such an input would represent significant progress on the famous k-set problem from discrete geometry. Drawing line arrangement graphs is the main task in the Planarity puzzle.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131206.html
##-----------------TITLE------------------------##
Theory Seminar, December 6, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


December 6, 2013:

Randomized Primal-Dual Analysis of RANKING for Online Bipartite Matching 

 Nikhil R. Devanur, Kamal Jain, Robert D. Kleinberg 
 Presented by Jenny Lam

We give a simple proof that the ranking algorithm of Karp, Vazirani and Vazirani is 1-1/e competitive for the online bipartite matching problem. The proof is via a randomized primal-dual argument. Primal-dual algorithms have been successfully used for many online algorithm problems, but the dual constraints are always satisfied deterministically. This is the first instance of a non-trivial randomized primal-dual algorithm in which the dual constraints only hold in expectation. The approach also generalizes easily to the vertex-weighted version considered by Agarwal et al. Further we show that the proof is very similar to the deterministic primal-dual argument for the online budgeted allocation problem with small bids (also called the AdWords problem) of Mehta et al.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/131122.html
##-----------------TITLE------------------------##
Theory Seminar, November 22, 2013
##------------------TEXT------------------------##
CS 269S, Fall 2013: Theory Seminar
Bren Hall, Room 1422, 1pm


November 22, 2013:

Union of Random Minkowski Sums and Network Vulnerability Analysis

 by Pankaj K. Agarwal, Haim Kaplan, and Micha Sharir
 Presented by Zachary Becker

Let C = \{C_1, ..., C_n\} be a set of n pairwise-disjoint convex s-gons, for some constant s, and let \pi be a probability density function (pdf) over the non-negative reals. For each i, let K_i be the Minkowski sum of C_i with a disk of radius r_i, where each r_i is a random non-negative number drawn independently from the distribution determined by \pi. We show that the expected complexity of the union of K_1, ..., K_n is O(n\log n), for any pdf \pi; the constant of proportionality depends on s, but not on the pdf.



Next, we consider the following problem that arises in analyzing the vulnerability of a network under a physical attack. Let G = (V, E) be a planar geometric graph where E is the set of n line segments with pairwise-disjoint relative interiors. Let \phi : \mathbb{R}_{\ge 0} \to [0, 1] be an edge failure probability function, where a physical attack at a location x \in \mathbb{R}^2 causes an edge e of E at distance r from x to fail with probability \phi(r); we assume that \phi is of the form 1 - \Pi(x), where \Pi(x) is a cumulative distribution function on the non-negative reals. The goal is to compute the most vulnerable location of G, i.e., the location of the attack that maximizes the expected number of failing edges of G. Using our bound on the complexity of the union of random Minkowski sums, we present a near-linear Monte-Carlo algorithm for computing a location that is an approximately most vulnerable location of attack for G.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000505.html
##-----------------TITLE------------------------##
Theory Seminar, 5 May 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


5 May 2000:
Fast Evaluation Of Tensor Product Hypersurfaces
Mac Casale, ICS, UC Irvine

The speaker, being under time pressure from upcoming exams,
retreats to the security of his roots in solid modeling - this
time, however, from the point of view of looking for lower bounds
and efficient, practical implementations of tensor products of
polynomials. The context is CAD/CAE, which has various
representations for solid objects. At issue is the efficient
evaluation of geometric objects known as tensor product surfaces
and hypersurfaces. A hypersurface is shown to be a tensor product
of polynomials, which can be written in various forms, depending on
choice of basis vectors in the linear space of polynomial
coefficients. This leads to the question of efficiency of
evaluating the tensor product form. We mention the industrial
context, followed by a review of lower bounds on polynomial
evaluation and show how these stack-up with traditional tensor
product evaluation methods. This is followed by some extensions.
The talk ends with a working session structured around four
different potential approaches.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000519.html
##-----------------TITLE------------------------##
Theory Seminar, 12 May 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


5 May 2000:
On the Number of Arrangements of Pseudolines
Javid Hüseynov, ICS, UC Irvine

An arrangement of pseudolines is a family of pseudolines with
the property that each pair of pseudolines has a unique point of
intersection where two pseudolines cross. An arrangement is simple
if no 3 pseudolines have a common point of intersection.

S.Felsner in his paper "On the number of arrangements of
pseudolines" presented an enumeration of simple arrangements of 10
pseudolines. This enumeration became an addition to the previous
enumerations of simple arrangements on up to 9 pseudolines (due to
Knuth).

I will also briefly talk about my work on enumeration of
arrangements of up to 12 pseudolines.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000512.html
##-----------------TITLE------------------------##
Theory Seminar, 12 May 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


5 May 2000:
Shape Transformation Using Variational Implicit Functions
Sergey Kirshner, ICS, UC Irvine

The paper by Greg Turk and James F.O'Brien introduces a method of
creating a smooth interpolating function to build a morph between two 2D
or 3D shapes.

As a side note, this paper is a base for the project I am working on
with Prof. Renato Pajarola.  If time permits, I will describe the
direction of the project.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100507b.html
##-----------------TITLE------------------------##
Theory Seminar, May 7, 2010
##------------------TEXT------------------------##
May 7, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
A Generic Top-Down Dynamic-Programming Approach to Prefix-Free Coding


 
Saumi Bandyopadhyay



A SODA paper by Mordecai GOLIN, Xiaoming XU, and  Jiajin YU


Abstract: 
Given a probability distribution over a set of n words to be
transmitted, the Huffman Coding problem is to find a minimal-cost
prefix 
free code for transmitting those words. The basic Huffman coding
problem 
can be solved in O(n log n) time but variations are more difficult.
One 
of the standard techniques for solving these variations utilizes a 
top-down dynamic programming approach.
In this paper we show that this approach is amenable to dynamic
programming speedup techniques, permitting a speedup of an order of 
magnitude for many algorithms in the literature for such variations
as 
mixed radix, reserved length and one-ended coding. These speedups are
immediate implications of a general structural property that permits
batching together the calculation of many DP entries.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100430.html
##-----------------TITLE------------------------##
Theory Seminar, April 16, 2010
##------------------TEXT------------------------##
April 23, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243
 
Geometric Algorithms for Private-Cache Chip Multiprocessors

 Nodari Sitchinava, Aarhus Univ.


Abstract: 
We study techniques for obtaining efficient algorithms for geometric
problems on private-cache chip multiprocessors in the Parallel
External
Memory (PEM) model. We solve the problems of orthogonal line segment
intersection reporting, batched orthogonal range reporting and
rectangle
intersection reporting. To obtain nearly optimal algorithms for these
problems, we introduce a parallel distribution sweeping technique
inspired by its sequential counterpart.
We also show how to obtain optimal algorithms for interval stabbing
counting, 1-D range counting, weighted 2-D dominance counting, and
for computing 3-D maxima, 2-D lower envelopes, and 2-D convex hulls
via adaptations of either the PEM merge sort algorithm or
corresponding PRAM algorithms.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100604.html
##-----------------TITLE------------------------##
Theory Seminar, June 4, 2010
##------------------TEXT------------------------##
June 4, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
Optimally Reconstructing Weighted Graphs Using Queries


 
Maury Gridley



Presenting a SODA 2010 paper by Hanna Mazzawi.


Abstract: In this paper, we consider the problem of reconstructing
a hidden graph with m edges using additive queries.
Given a graph G = (V,E) and a set of vertices S subset V,
an additive query, Q(S), asks for the number of edges in
the subgraph induced by S. In this paper we give the first polynomial
time algorithm
with query complexity that matches the information theoretic lower
bound.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100402.html
##-----------------TITLE------------------------##
Theory Seminar, April 2, 2010
##------------------TEXT------------------------##
April 2, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243
   
Creating "Good" Point Clouds

 Dick Palais, UCI


Abstract: 
In this talk I will discuss algorithms for creating Point Clouds with
desirable properties for use in Mathematical Visualization. And I
mean "discuss" literally--I will explain some ideas that I hope you
will find interesting (and maybe even a little elegant), but I am
also
hoping for feedback from the audience to help me with some unsolved
problems.


Please arrive a few minutes early, as their are a limited number of
3D glasses that will be passed out so as to appreciate this talk.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100521.html
##-----------------TITLE------------------------##
Theory Seminar, May 21, 2010
##------------------TEXT------------------------##
May 21, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
Straggler Identification in Round-Trip Data Streams via Invertible
Bloom Filters


 
Arjun Biswas



Presenting a result
from a WADS 2007 paper by Eppstein and Goodrich 


Abstract: 
We introduce the straggler identification problem, in which an
algorithm must determine the identities of the remaining members of a
set after it has had a large number of insertion and deletion
operations performed on it, and now has relatively few remaining
members. The goal is to do this in o(n) space, where n is the total
number of identities. The straggler identification problem has
applications, for example, in determining the set of unacknowledged
packets in a high-bandwidth multicast data stream. We show that there
is a simple randomized solution using O(d log n log(1/epsilon)) bits
that can maintain a multiset and solve the straggler identification
problem, tolerating false deletions, where epsilon>0 is a
user-defined parameter bounding the probability of an incorrect
response. This randomized solution is based on a new type of Bloom
filter, which we call the invertible Bloom filter.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100423.html
##-----------------TITLE------------------------##
Theory Seminar, April 16, 2010
##------------------TEXT------------------------##
April 23, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243
 
Algorithms and Complexity for Periodic Real-Time Scheduling

 Kiran Shivaram, UC Irvine


Presenting a SODA 2010 paper by Vincenzo Bonifaci, Ho-Leung Chan,
Alberto Marchetti-Spaccamela, and Nicole Megow


Abstract: 
We investigate the preemptive scheduling of periodic tasks with hard
deadlines. We show that, even in the uniprocessor case, no polynomial
time algorithm can test the feasibility of a task system within a
constant speedup bound, unless P =NP. This result contrasts with
recent results for  sporadic task systems. For two special cases,
synchronous task systems and systems with a constant number of
different task types, we provide the first polynomial time
constant-speedup feasibility tests for multiprocessor platforms.
Furthermore, we show that the problem of testing feasibility is
coNP-hard for synchronous multiprocessor task systems. The complexity
of some of these problems has been open for a long time.
We also propose a profit maximization variant of the feasibility
problem, where every task has a non-negative profit, and the goal is
to find a subset of tasks that can be scheduled feasibly with maximum
profit. We give the first constant-speed, constant-approximation
algorithm for the case of synchronous task systems, together with
related hardness results.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100507a.html
##-----------------TITLE------------------------##
Theory Seminar, May 7, 2010
##------------------TEXT------------------------##
May 7, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
Selective Replicated Declustering for Arbitrary Queries


 
Kerim Yasin Oktay



Abstract: 
Data declustering is used to minimize query response times
in data intensive applications. In this technique, query retrieval
process 
is parallelized by distributing the data among several disks and it
is useful in applications such as geographic information systems that
access 
huge amounts of data. Declustering with replication is an extension
of 
declustering with possible data replicas in the system. Many
replicated 
declustering schemes have been proposed. Most of these schemes generate 
two or more copies of all data items. However, some applications
have 
very large data sizes and even having two copies of all data items
may 
not be feasible. In such systems selective replication is a
necessity. 
Furthermore, existing replication schemes are not designed to utilize
query 
distribution information if such information is available. In this
study 
we propose a replicated declustering scheme that decides both on the
data items to be replicated and the assignment of all data items to
disks 
when there is limited replication capacity. We make use of available
query 
information in order to decide replication and partitioning of the
data 
and try to optimize aggregate parallel response time. We propose and
implement a Fiduccia-Mattheyses-like iterative improvement algorithm
to obtain a two-way replicated declustering and use this algorithm in
a 
recursive framework to generate a multi-way replicated declustering.
Experiments conducted with arbitrary queries on real datasets show
that, 
especially for low replication constraints, the proposed scheme
yields 
better performance results compared to existing replicated
declustering 
schemes.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100416.html
##-----------------TITLE------------------------##
Theory Seminar, April 16, 2010
##------------------TEXT------------------------##
April 16, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243
   
Optimal Homologous Cycles, Total Unimodularity, and Linear
Programming

 Bala Krishnamoorthy, Washington State University


Presenting his paper from 

http://arxiv.org/abs/1001.0338


Abstract: 
Given a simplicial complex with weights on its simplices, and a
nontrivial cycle on it, we are interested in finding the cycle with
minimal weight which is homologous to the given one. Assuming that
the homology is defined with integer coefficients, we show the
following : For a finite simplicial complex $K$ of dimension greater
than $p$, the boundary matrix $[\partial_{p+1}]$ is totally
unimodular if and only if $H_p(L, L_0)$ is torsion-free, for all pure
subcomplexes $L_0, L$ in $K$ of dimensions $p$ and $p+1$
respectively, where $L_0$ is a subset of $L$. Because of the total
unimodularity of the boundary matrix, we can solve the optimization
problem, which is inherently an integer programming problem, as a
linear program and obtain integer solution. Thus the problem of
finding optimal cycles in a given homology class can be solved in
polynomial time. This result is surprising in the backdrop of a
recent result which says that the problem is NP-hard under
$\mathbb{Z}_2$ coefficients which, being a field, is in general
easier to deal with. One consequence of our result, among others, is
that one can compute in polynomial time an optimal 2-cycle in a given
homology class for any finite simplicial complex embedded in
$\mathbb{R}^3$. Our optimization approach can also be used for
various related problems, such as finding an optimal chain homologous
to a given one when these are not cycles.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100528.html
##-----------------TITLE------------------------##
Theory Seminar, May 28, 2010
##------------------TEXT------------------------##
May 28, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
On the odd-minor variant of Hadwiger's conjecture


 
Nicolaos Matsakis



Presenting a paper by
 Jim Geelen, Bert Gerards, Bruce Reed, Paul Seymour, Adrian Vetta,
 from the Journal of Combinatorial Theory, Series B(99) 1: 20-29,
 2009.


Abstract: 
This paper deals with the odd-minor variant of the one of the most
well known open problems in Graph Theory, the conjecture of Hugo
Hadwiger, which states that the chromatic number of every graph is
less or equal than the number of vertices of its largest clique
minor. More specifically, a K_{l}-expansion consists of l
vertex-disjoint trees, every two of which are joined by an edge. We
call such an expansion odd if its vertices can be two-coloured, so
that the edges of the trees are bichromatic, but the edges between
trees are monochromatic. In this paper, the authors show that, for
every l, if a graph contains no odd K_{l}-expansion then its
chromatic number is O(l\sqrt{logl}). In doing so, they obtain a
characterization of graphs which contain no odd K_{l}-expansion.
They, also, prove that, given a graph and a subset S of its vertex
set, either there are k vertex-disjoint odd paths with endpoints in
S, or there is a set X of at most 2k-2 vertices such that every odd
path with both ends in S contains a vertex in X. Some algorithmic
implications of this result are also discussed.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100514a.html
##-----------------TITLE------------------------##
Theory Seminar, May 14, 2010
##------------------TEXT------------------------##
May 14, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
A Simpler Implementation and Analysis of Chazelle's Soft Heaps


 
Darren Strash



Presenting a SODA 2009 paper by Haim Kaplan and Uri Zwick


Abstract: 
The Soft Heap is an approximate, meldable priority queue created by
Bernard Chazelle. The idea is genius: allow a fraction of the items
inserted into the priority queue to have their keys artificially
increased (corrupted), and in exchange, we get fast operations. We
describe a new, simpler implementation of the Soft Heap, and discuss
the clever ways that Soft Heaps have been used in the literature.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100514b.html
##-----------------TITLE------------------------##
Theory Seminar, May 14, 2010
##------------------TEXT------------------------##
May 14, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243

 
Optimal dynamic vertical ray shooting in rectilinear planar
subdivisions


 
Joe Simons



Presenting an ACM TALG 2009 paper by Giora and Kaplan 


Abstract: 
We consider the dynamic vertical ray shooting problem against
horizontal disjoint segments, that is, the task of maintaining a
dynamic set S  of n nonintersecting horizontal line segments in the
plane under a query that reports the first segment in S intersecting
a vertical ray from a query point. We develop a linear-size structure
that supports queries, insertions, and deletion in O(log n)
worst-case time. Our structure works in the comparison model on a
random access machine.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100409.html
##-----------------TITLE------------------------##
Theory Seminar, April 9, 2010
##------------------TEXT------------------------##
April 9, Spring Quarter 2010: Theory Seminar 
1:00pm in ICS 243
 
   A Model of Computation for MapReduce

 Lowell Trott, University of California, Irvine


Presenting a SODA paper by
	      Howard Karloff, Siddharth Suri, and Sergei
	      Vassilvitskii


Abstract: 
We compare MapReduce to the PRAM model of
computation. We prove a simulation lemma showing
that a large class of PRAM algorithms can be eciently
simulated via MapReduce. The strength of MapReduce,
however, lies in the fact that it uses both sequential and
parallel computation. We demonstrate how algorithms
can take advantage of this fact to compute an MST of a
dense graph in only two rounds, as opposed to Omega(log(n))
rounds needed in the standard PRAM model. We show
how to evaluate a wide class of functions using the
MapReduce framework. We conclude by applying this
result to show how to compute some basic algorithmic
problems such as undirected s-t connectivity in the
MapReduce framework.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021206.html
##-----------------TITLE------------------------##
Theory Seminar, 6 December 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


6 December 2002:
Title: Randomized algorithms for the loop cutset problem

Ann Becker, Reuven Bar-Yehuda, and Dan Geiger

Journal of Artificial Intelligence Research, 12:219-234, 2000. 


Speaker: Matthew Ba Nguyen


Abstract:
A loop cutset is a set of vertices V such that removing that set V and all
adjacent edges to V from a graph G, the resulting graph is a forest of
trees.  The authors give a randomized algorithm for finding a minimum loop
cutset after O(ckn6k) steps with probability
1 - (1 - 6-k)c6k,
where c > 1 is a constant specified by the user,
k is the minimum size of a
minimum loop cutset, and n is the number of vertices.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021115.html
##-----------------TITLE------------------------##
Theory Seminar, 15 November 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


15 November 2002:
Title: A Survey of Variable-Length Integer Coding Techniques

Speaker: Kevin Wortman


Abstract:
The need often arises to encode a sequence of arbitrary integers.  It
is possible to map such a sequence to a stream of bytes and present
the result to a general purpose compression algorithm, such as gzip,
but the results are disappointing.

However, if we introduce the assumption that an integer's frequency is
approximately inversely proportional to its magnitude, it becomes
possible to encode integers efficiently.  This talk will introduce one
motivation for integer coding: the lossless compression of digitized
audio.  Then it will proceed to paraphrase a 1996 paper by Peter
Fenwick that summarizes several methods of integer coding, and
presents an experimental comparison of their effectiveness.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021018.html
##-----------------TITLE------------------------##
Theory Seminar, 18 October 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


18 October 2002:
Title: Algorithms for Fault-Tolerant Routing in Circuit Switched Networks

Speaker: Amitabha Bagchi


Abstract:
We consider the k edge-disjoint paths problem
(k-EDP), a generalization of the well known edge-disjoint paths
problem. Given a graph G=(V,E) and a set of terminal pairs (or
requests) T, the problem is to find a maximum subset of the pairs in
T for which it is possible to select paths such that each pair is
connected by k edge-disjoint paths and the paths for different pairs
are mutually disjoint.  To the best of our knowledge, no nontrivial
result is known for this problem for k>1. To measure the performance
of our algorithms we use the recently introduced flow number F of a
graph. This parameter is known to fulfill F=O(Delta alpha-1 log
n), where Delta is the maximum degree and alpha is the edge
expansion of G. We show that a simple, greedy online algorithm
achieves a competitive ratio of O(k3 F), which naturally
extends the best known bound of O(F) for k=1 to higher k.  To
achieve this competitive ratio, we introduce a new method of
converting a system of k disjoint paths into a system of k
length-bounded disjoint paths.

In addition, we study the k disjoint flows problem (k-DFP),
which is a generalization of the previously studied unsplittable flow
problem (UFP). The difference between the k-DFP and the k-EDP is
that now we consider a graph with edge capacities and our requests are
allowed to have arbitrary demands di. The aim is to find a subset
of requests of maximum total demand for which it is possible to select
flow paths such that all the capacity constraints are maintained and
each selected request with demand di is connected by k disjoint
paths, each of flow value di/k.

This talk is based on work done jointly with Amitabh Chaudhary,
Christian Scheideler and Petr Kolman.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021122.html
##-----------------TITLE------------------------##
Theory Seminar, 22 November 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


22 November 2002:
Title: Orderly Spanning Trees with Applications to Graph Encoding and Graph Drawing


Speaker: Gwendoline Chien


Abstract:
This paper introduces the orderly pair of connected planar graphs. We
give a linear-time algorithm to obtain an orderly pair (H,T) of G, where H
is a planar embedding of G, and T is an orderly spanning Tree of H.  As
applications, we show that the technique of orderly spanning trees yields
(i) the best known encoding of G with query support, and (ii) the first
area-optimal 2-visibility drawing of G.

This paper, by Yi-Ting Chiang, Ching-Chi Lin, and Hsueh-I Lu,
was presented at the 2001 Symposium on Discrete Algorithms.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021011.html
##-----------------TITLE------------------------##
Theory Seminar, 11 October 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


11 October 2002:
Title: Parallel Processing, A Way to Reduce Wall Clock Time

Speaker: Josiah Carlson


Abstract:
There are many areas of computer science in which the time to complete a
computation can be overwhelming.  Through the use of various parallel
processing techniques, some of which are available at UCI, you may be
able to reduce your processing time to a tolerable length.  This talk
isn't meant to dive into anything theoretically intense, but is mostly
to give an introduction and a bit of background to those who have had
little exposure to parallel processing and what it entails.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021101.html
##-----------------TITLE------------------------##
Theory Seminar, 1 November 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


1 November 2002:
Title: Very Fast Outlier Detection in Large Multidimensional Data Sets

Speaker: Amitabh Chaudhary


Abstract:
Outliers are objects that do not comply with the general behavior or
model of the data.  Applications in astronomy need fast tools for
outlier detection in data sets that have unknown distributions, are
large in size, and are in high dimensional space.  Existing algorithms
for outlier detection are too slow for such applications.  We present
an algorithm based on an innovative use of k-d trees that doesn't
assume any probability model and is linear in the number of objects
and in the number of dimensions.  We also provide experimental results
that show that this is indeed a practical solution to the above
problem.

This talk is based on work done jointly with
Alex Szalay and Andrew Moore.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/021108.html
##-----------------TITLE------------------------##
Theory Seminar, 8 November 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


8 November 2002:
Title: Parameterized Balanced Aspect Ratio Trees

Speaker: Amitabh Chaudhary


Abstract:
General purpose spatial data structures like the k-d trees and quad
trees are widely used to answer a variety of queries like range
searches, proximity queries, and nearest-neighbor queries.  They,
however, do not have good bounds on worst case performance for either
the exact or the approximate versions of these queries.  Good bounds
for the approximate versions exist if a tree has bounds on both the
depth and the aspect ratio of the regions --- the aspect ratio is
small if the region is "well rounded".  We present Parameterized
Balanced Aspect Ratio (PBAR) trees and show that they have the desired
bounds.  A PBAR tree can be constructed using any three given
partitioning vectors and form regions that are convex; they are
superior to other recently developed data structures that too have
bounds on the depth and aspect ratio.

This talk is based on work done jointly with
Breno De Medeiros and Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/971017.html
##-----------------TITLE------------------------##
Theory Seminar, 17 October 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


17 October 1997:
Two Dimensional Set Membership Classification Revisited: Winding
Number Versus Ray Firing
Mac Casale, ICS, UC Irvine

Testing a point for containment within a set bounded by a Jordan
curve is fundamental to many geometry based applications. The
common approach is to fire a ray from the point and count the
number of intersections with the boundary curve. The point is
contained if the number of intersections is odd. We present certain
difficulties that occur with this approach, which are due to
tolerancing issues, and present an alternative, based on the
winding number, which is a tool from the theory of functions of
complex variables. It is shown that for points far from the
boundary, the winding number calculation is highly reliable, but
that difficulties arise, using standard integration methods, near
the boundary due to the singular nature of the integrand. Methods
for dealing with the difficulties, borrowing ideas from generalized
function theory, appear to lead to a robust implementation. It is
suggested that integral equation methods may become an important
tool in the toolchest of computational geometers in the years to
come.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/971114.html
##-----------------TITLE------------------------##
Theory Seminar, 14 November 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


14 November 1997:
Better Bounds for Online Scheduling
Joseph Wang, ICS, UC Irvine

 A sequence of jobs must be scheduled on m identical parallel
machines. As each job arrives, its processing time is known. The
goal is to minimize the makespan. Bartal, Fiat, Karloff and Vohra
gave a deterministic online algorithm that is 1.986-competitive.
Karger, Phillips and Torng generalized the algorithm and proved an
upper bound of 1.945. The best lower bound currently known on the
competitive ratio that can be achieved by deterministic online
algorithms is equal to 1.837. In this paper we present an improved
deterministic online scheduling algorithm that is
1.923-competitive, for all m >= 2. The algorithm is based on a
new scheduling strategy, i.e., it is not a generalization of the
approach by Bartal et al. Also, the algorithm has a simple
structure. Furthermore, we develop a better lower bound. We prove
that, for general m, no deterministic online scheduling algorithm
can be bettern than 1.852-competitive.

(From a STOC '97 paper by Susanne Albers)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/971003.html
##-----------------TITLE------------------------##
Theory Seminar, 3 October 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


3 October 1997:
Quadrilateral Meshing by Circle Packing
David Eppstein, ICS, UC Irvine

We use circle-packing methods to generate quadrilateral meshes
for polygonal domains, with guaranteed bounds both on the quality
and the number of elements. We show that these methods can generate
meshes of several types:

the elements form the cells of a Voronoi diagram,all elements have two opposite 90-degree anglesall elements are kites, orall angles are at most 120 degrees.

In each case the total number of elements is O(n), where 
n is the number of input vertices. 

(Joint work with Marshall Bern, published at the 6th International
Meshing Roundtable)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/971205.html
##-----------------TITLE------------------------##
Theory Seminar, 5 December 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


5 December 1997:
The Computational Complexity of Knot and Link Problems
Dan Halem, ICS, UC Irvine

We consider the problem of deciding whether a polygonal knot in
3-dimensional Euclidean space is unknotted (that is, whether it is
capable of being continously deformed without self-intersection so
that is lies in a plane). We show that this problem, UNKNOTTING
PROBLEM is in NP. We also consider the problem, SPLITTING PROBLEM,
of determining whether two or more such polygons can be split(that
is, whether they are capable of being continuously deformed without
self-intersection so that they occupy both sides of a plane without
intersecting it), and show that it also is in NP. Finally we show
that the problem of determining the genus of a polygonal knot (a
generalization of the problem of determining whether it is
unknotted) is in PSPACE.

(From a FOCS '97 paper by Joel Hass, Jeffrey C. Lagarias, and
Nicholas Pippenger.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/971121.html
##-----------------TITLE------------------------##
Theory Seminar, 21 November 1997
##------------------TEXT------------------------##
ICS 269, Spring 1997: Theory Seminar


21 November 1997:
Approximate Minimum Weight Triangulation of Convex Polygons
Brad Hutchings, ICS, UC Irvine

 Today in Theory Group, I'll be presenting a paper by
Levcopoulos and Krznaric that describes their heuristic for finding
a 1+e approximation of the minimum weight triangulation of convex
polygons in O(n) time. This result is theoretically quite practical
because it beats the best known exact algorithm's time of
O(n3) while not yielding a terribly bad triangulation.
Their result can be applied to speed up many heuristics for
triangulation of general point sets.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/001201.html
##-----------------TITLE------------------------##
Theory Seminar, Dec 1, 2000
##------------------TEXT------------------------##
ICS 269, Fall 2000: Theory Seminar


Dec 1 2000:
"Fast Approximation of Centrality"
(Joint work with David Eppstein) 

Speaker: Joseph Wang, ICS, UC Irvine

Social studies researchers use graphs to model group activities 
in social networks.  An important property in this context is the 
centrality of a vertex: the inverse of the average distance to each 
other vertex. We describe a randomized approximation algorithm for 
centrality in weighted graphs. For graphs exhibiting the small world 
phenomenon, our method estimates the centrality of all vertices
with high probability within a (1+epsilon) factor in near-linear time.      


Note: this talk is to be
given as part of the Southern California Theory Day, so the
time will probably be different from the usual 1pm.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/001208.html
##-----------------TITLE------------------------##
Theory Seminar, Dec 8, 2000
##------------------TEXT------------------------##
ICS 269, Fall 2000: Theory Seminar


Dec 8 2000:
A presentation based on
"Triangles in Euclidean Arrangements,"
by S. Felsner and K. Kriegel,
Discrete Computational Geometry 22 (1999), pp. 429-438.

Speaker: Javid Hüseynov, ICS, UC Irvine

The number of triangles in arrangements of lines and pseudolines
has been the object of some research. While most of the results concern
arrangements in the projective plane, this paper presents the results on
the number of triangles in Euclidean arrangements of pseudolines. It
presents another proof by the authors that a simple arrangement of n
pseudolines contains at least n-2 triangles. The best possible bound of
2n/3 triangles in non-simple arrangements of n pseudolines is also
presented in this paper.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/001020.html
##-----------------TITLE------------------------##
Theory Seminar, Oct 20, 2000
##------------------TEXT------------------------##
ICS 269, Fall 2000: Theory Seminar


Oct 20 2000:
A presentation based on
"Distributed anonymous mobile robots:
formation of geometric patterns," by 
Suzuki, I. and Yamashita, M.
SIAM Journal on Computing (1999) 28,4, pp. 1347-63

Speaker: David Goggin, ICS, UC Irvine

Consider a system of multiple mobile robots in which each robot,
at infinitely many unpredictable time instants, observes the positions of
all the robots and moves to a new position determined by the given
algorithm. The robots are anonymous in the sense that they all execute the
same algorithm and they cannot be distinguished by their appearances.
Initially they do not have a common x-y coordinate system. Such a system
can be viewed as a distributed system of anonymous mobile processes in
which the processes (i.e., robots) can "communicate" with each other only
by means of their moves. In this paper we investigate a number of
formation problems of geometric patterns in the plane by the robots.
Specifically, we present algorithms for converging the robots to a single
point and moving the robots to a single point in finite steps. We also
characterize the class of geometric patterns that the robots can form in
terms of their initial configuration. Some impossibility results are also
presented.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/001027.html
##-----------------TITLE------------------------##
Theory Seminar, Oct 27, 2000
##------------------TEXT------------------------##
ICS 269, Fall 2000: Theory Seminar


Oct 27 2000:
Approximating the Shortest Path in a Line Arrangement

Speaker: David Hart, ICS, UC Irvine


No one knows how to compute the shortest path between two points in
a line arrangement in less than \theta(n^2).  We first show that one
can simplify this to finding a shortest path in a grid of quadrilaterals
(which has the complication of having paths traveling on a boundary
around the grid).  


The only previously published approximation algorithm gives a factor
of 2 approximation to the shortest path in O(n log n).  We use the
simpler grid structure to give a much better approximation algorithm.


This is a preliminary version of what will be a job talk.  The
associated paper is to be submitted for publication.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031107.html
##-----------------TITLE------------------------##
Theory Seminar, 07 Nov 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


07 Nov 2003:
Envy-Free Auctions for Digital Goods

authored by J. Hartline and A. Goldberg

In: Proc. 4th ACM Conf. on Electronic Commerce, 2003.


presented by Matt Nguyen


The authors study auctions in unlimited supply.  They show that no
constant-competitive truthful auction is envy-free.  They also show that
by relaxing the problem to instead being truthful with small probability
of being envy-free, or vice versa, auctions can be competitive.  

Definitions:

Truthful:  any bidder's best strategy is to bid the maximum value they are
willing to pay

Envy-Free:  after the auction is run, no bidder would be happier with the
outcome of another bidder
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031010.html
##-----------------TITLE------------------------##
Theory Seminar, 10 Oct 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


10 Oct 2003:
Is a Dynamic Radon Transform Possible?

Josiah Carlson



Giving a little background on what the Radon transform does in the real
world, I will give an example of a related problem in computer
raytracing, and segway into a small personal research project in
computing rays optimally.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031017.html
##-----------------TITLE------------------------##
Theory Seminar, 17 Oct 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


17 Oct 2003:
Modeling Hash Functions as Random Oracles in Cryptography:  
New Surprising Results

Stanislaw Jarecki


Modeling hash functions as random oracles is a heuristic which gives some
evidence that a cryptographic scheme is secure.  We'll show examples of
such arguments, but also show some counterintuitive results arrived at in
this model.  Namely, we'll show that a straighforward implementation of an
RSA-based signature scheme is only loosely related (in its security) to
the RSA problem, while a new scheme which essentially adds only one more
bit to the signature does suddenly become as difficult as the underlying
RSA problem.  How can one bit change so much?
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031121.html
##-----------------TITLE------------------------##
Theory Seminar, 21 Nov 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


21 Nov 2003:
Spanning Trees Crossing Few Barriers

authored by Tetsuo Asano, Mark de Berg, Otfried Cheong, Leonidas J. Guibas,
Jack Snoeyink, Hisao Tamaki

In: 15th Annual Symposium on Computational Geometry (SCG '99).

presented by Jeremy Yu Meng


They consider the problem of finding low-cost spanning trees for sets
of n points in the plane,
where the cost of a spanning tree is defined as the
total number of intersections of tree edges with a given set of
m barriers.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031114.html
##-----------------TITLE------------------------##
Theory Seminar, 14 Nov 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


14 Nov 2003:
Power-Aware Routing Algorithms for Sensor Networks - A Brief Survey

John Augustine


Sensor networks pose challenging design limitations that often require
re-working of well researched problems. This talk will deal with one
such issue, namely the limited amount of power in a battery powered node
in the network. Traditional routing algorithms may drain a crucial node
in the network that might have several debilitating effects on the
network at large. Several system level researchers have started studying
this problem producing interesting results, both empirically and
theoretically. This talk will be a survey of these results.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031024.html
##-----------------TITLE------------------------##
Theory Seminar, 24 Oct 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


24 Oct 2003:
A new approach to dynamic all pairs shortest paths

authored by Camil Demetrescu and Giuseppe F. Italiano (STOC 2003, pp.159-166)

presented by Jonathan Sun


We study novel combinatorial properties of graphs that allow us to
devise a completely new approach to dynamic all pairs shortest paths
problems. Our approach yields a fully dynamic algorithm for general
directed graphs with non-negative real-valued edge weights that
supports any sequence of operations in
O(n2poly(log n)) amortized
time per update and unit worst-case time per distance query, where n
is the number of vertices. We can also report shortest paths in
optimal worst-case time. These bounds improve substantially over
previous results and solve a long-standing open problem. Our algorithm
is deterministic and uses simple data structures.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031205.html
##-----------------TITLE------------------------##
Theory Seminar, 5 Dec 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


5 Dec 2003:
Hybrid Prefix Codes for Practical Use

authored by M. Liddell and A. Moffat

In: Data Compression Conference (DCC) 2003.

presented by Gwendoline Chien


Flat code has a simple structure which makes fast decoding, but
the compression efficiency is poor.  A minimum-redundancy code, on the
other hand, is slower to decode then a flat code, but the compressed file
size is minimized.  This paper discusses the algorithm for constructing
the hybrid code which exhibits the simple structure of a flat
code and retains much of the compression effectiveness of a
minimum-redundancy code.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/031031.html
##-----------------TITLE------------------------##
Theory Seminar, 31 Oct 2003
##------------------TEXT------------------------##
ICS 269, Fall 2003: Theory Seminar


31 Oct 2003:
The Inverse Shortest Paths Problem with Upper Bounds on Shortest Paths Costs

authored by D. Burton, W.R. Pulleyblank, and Ph.L. Toint

In: P. Pardalos, D. W. Hearn, and W. H. Hager, eds.
Network Optimization, Springer Lecture Notes in Economics and
Mathematical Systems, 450 (1997), 156-171.


presented by Kevin Wortman


We examine the computational complexity of the inverse shortest paths
problem with upper bounds on shortest path costs, and prove that 
obtaining a globally optimum solution to this problem is NP-complete.
An algorithm for finding a locally optimum solution is proposed,
discussed and tested.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140516a.html
##-----------------TITLE------------------------##
Theory Seminar, May 16, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


May 16, 2013:

Zig-zag Sort: A simple deterministic data-oblivious sorting algorithm
running in $O(n\log n)$ time


Michael T. Goodrich



We describe and analyze Zig-zag Sort--a deterministic data-oblivious
sorting algorithm running in $O(n\log n)$ time that is arguably simpler
than previously known algorithms with similar properties, which are
based on the AKS sorting network. Because it is data-oblivious and
deterministic, Zig-zag Sort can be implemented as a simple $O(n\log
n)$-size sorting network, thereby providing a solution to an open
problem posed by Incerpi and Sedgewick in 1985. In addition, Zig-zag
Sort is a variant of Shellsort, and is, in fact, the first deterministic
Shellsort variant running in $O(n\log n)$ time. The existence of such an
algorithm was posed as an open problem by Plaxton et al. in 1992 and
also by Sedgewick in 1996. More relevant for today, however, is the fact
that the existence of a simple data-oblivious deterministic sorting
algorithm running in $O(n\log n)$ time simplifies the inner-loop
computation in several proposed oblivious-RAM simulation methods (which
utilize AKS sorting networks), and this, in turn, implies simplified
mechanisms for privacy-preserving data outsourcing in several cloud
computing applications. We provide both constructive and
non-constructive implementations of Zig-zag Sort, based on the existence
of a circuit known as an epsilon-halver, such that the constant factors
in our constructive implementations are orders of magnitude smaller than
those for constructive variants of the AKS sorting network, which are
also based on the use of epsilon-halvers.

(Practice talk for a paper to be presented at STOC 2014.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140502.html
##-----------------TITLE------------------------##
Theory Seminar, May 2, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


May 2, 2013:

Storage and search in dynamic peer-to-peer networks


John Augustine



Peer-to-Peer (P2P) networks  are  highly dynamic decentralized networks
that experience heavy node churn, i.e., nodes  join and leave the
network continuously over time.  We model such P2P systems as
synchronous dynamic networks. In each round, an adversary can add and
remove a large number of nodes, and also rewire the network subject to
some connectivity constraints. We are interested in solving the problem
of storing and searching data items despite such high churn rate and
network dynamism.  In the course of solving this problem, we develop a
random walks based sampling technique to sample nodes uniformly at
random from the network. While it is well known that random walks are
useful for sampling, their application in our context is nontrivial
because the churn and network dynamism can potentially bias them or
even destroy them. Furthermore, we believe that this sampling technique
may prove to be useful in a variety of other applications.

(From joint work with Anisur
Molla, Ehab Morsy, Gopal Pandurangan, Peter Robinson, and Eli Upfal,
presented at SPAA 2013.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140411.html
##-----------------TITLE------------------------##
Theory Seminar, April 11, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


April 11, 2013:

Asynchronous adaptive task allocation


Sotirios Kentros



We present a randomized algorithm for asynchronous task allocation, also
known as the write-all or do-all problem. Our algorithm has work
complexity
of O(n + k2log3k)
with high probability, where n is the number of tasks
and k is the number of processes that participate in the
computation. This is the first adaptive solution for the write-all
problem that has work n plus some additive term which depends
only on the number of participating processes k and not the
size of the problem n.


(Joint work with Chadi Kari, Aggelos Kiayias, and Alexander Russell.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140516b.html
##-----------------TITLE------------------------##
Theory Seminar, May 16, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


May 16, 2013:

Shortest cycle through specified elements


Paweł Pszona



I will present a randomized algorithm that finds a shortest simple cycle
through a given set of $k$ marked elements (vertices and/or edges) in an
$n$-vertex
undirected graph, or determines that such cycle does not exist.
The algorithm works in time $2^{k}n^{O(1)}$, with one-sided errors with
exponentially small probability in $n$.


(From a
SODA 2012 paper by Andreas Björklund, Thore Husfeldt and
Nina Taslaman.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140530.html
##-----------------TITLE------------------------##
Theory Seminar, May 30, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


May 30, 2013:

A constant factor approximation algorithm for reordering buffer management


Christopher Wood



In the reordering buffer management problem (RBM) a sequence of n
colored items enters a buffer with limited capacity $k$. When the buffer
is full, one item is removed to the output sequence, making room for the
next input item. This step is repeated until the input sequence is
exhausted and the buffer is empty. The objective is to find a sequence of
removals that minimizes the total number of color changes in the output
sequence. The problem formalizes numerous applications in computer and
production systems, and is known to be NP-hard.


We give the first constant factor approximation guarantee for RBM. Our
algorithm is based on an intricate “rounding” of the
solution to an LP
relaxation for RBM, so it also establishes a constant upper bound on the
integrality gap of this relaxation. Our results improve upon the best
previous bound of $O(\sqrt{\log k})$ of Adamaszek et al. (STOC 2011) that
used different methods and gave an online algorithm. Our constant factor
approximation beats the super-constant lower bounds on the competitive
ratio given by Adamaszek et al. This is the first demonstration of an
offline algorithm for RBM that is provably better than any online
algorithm.


(From a paper by Noa
Avigdor-Elgrabli and Yuval Rabani at SODA 2013.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140523a.html
##-----------------TITLE------------------------##
Theory Seminar, May 23, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


May 23, 2013:

The complexity of order type isomorphism


Michael Bannister



The order type of a point set in $R^d$ maps each
$(d{+}1)$-tuple of points to its orientation (e.g., clockwise or
counterclockwise in $R^2$). Two point sets $X$ and $Y$ have the same
order type if there exists a mapping $f$ from $X$ to $Y$ for which every
$(d{+}1)$-tuple $(a_1,a_2,\ldots,a_{d+1})$ of $X$ and the corresponding
tuple $(f(a_1),f(a_2),\ldots,f(a_{d+1}))$ in $Y$ have the same
orientation. In this paper we investigate the complexity of determining
whether two point sets have the same order type. We provide an $O(n^d)$
algorithm for this task, thereby improving upon the
$O(n^{\lfloor{3d/2}\rfloor})$ algorithm of Goodman and Pollack (1983).
The algorithm uses only order type queries and also works for abstract
order types (or acyclic oriented matroids). Our algorithm is optimal,
both in the abstract setting and for realizable points sets if the
algorithm only uses order type queries.


(From a paper at SODA 2014
by Greg Aloupis, John Iacono, Stefan Langerman, and Özgör
Özkan.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140509.html
##-----------------TITLE------------------------##
Theory Seminar, May 9, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


May 9, 2013:

Sort me if you can: how to sort dynamic data


Will Devanny



We formulate and study a new computational model for dynamic data. In
this model the data changes gradually and the goal of an algorithm is to
compute the solution to some problem on the data at each time step,
under the constraint that it only has a limited access to the data each
time. As the data is constantly changing and the algorithm might be
unaware of these changes, it cannot be expected to always output the
exact right solution; we are interested in algorithms that guarantee to
output an approximate solution. In particular, we focus on the
fundamental problems of sorting and selection, where the true ordering
of the elements changes slowly. We provide algorithms with performance
close to the optimal in expectation and with high probability.


(Based on a paper in ICALP
2009 by Aris Anagnostopoulos, Ravi Kumar, Mohammad Mahdian, and Eli
Upfal.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140702.html
##-----------------TITLE------------------------##
Theory Seminar, July 2, 2013
##------------------TEXT------------------------##
Summer 2014: Theory Seminar
Donald Bren Hall, Room 4011, 1pm


July 2, 2014:

Shuffling Data into Cloud Oblivion


Roberto Tamassia, Brown University



Abstract:
A shuffle is an algorithm for rearranging an array to achieve a random
permutation of its elements. Early shuffle methods were motivated by the
problem of shuffling a deck of cards. An oblivious shuffle is a distributed
shuffle executed by a client who permutes an array of encrypted data items
stored at a server in such a way that the server cannot determine the output
permutation with probability better than a random guess. Several private cloud
storage solutions that obfuscate the access pattern to the data use an
oblivious shuffle as a fundamental building block. We present the Melbourne
Shuffle, a simple and efficient oblivious shuffle that allows a client with
O(√n) memory to obliviously shuffle  an array of size n stored at a server by
exchanging O(√n) messages of size O(√n). The Melbourne Shuffle is the first
provably secure oblivious shuffle that is not based on sorting.


This talk is based on the paper “The Melbourne Shuffle: Improving Oblivious
Storage in the Cloud” by Olga Ohrimenko, Michael Goodrich, Roberto Tamassia
and Eli Upfal, International Colloquium on Automata, Languages and Programming
(ICALP), 2014 (to appear). 


Biography: Roberto Tamassia is the Plastech Professor of Computer Science and
the Chair of the Department of Computer Science at Brown University. He is
also the Director of Brown's Center for Geometric Computing. His research
interests include data security and privacy, applied cryptography, analysis,
design, and implementation of algorithms, graph drawing and computational
geometry. He is an AAAS Fellow, ACM Fellow, and IEEE Fellow, and the recipient
of a Technical Achievement Award from the IEEE Computer Society for pioneering
the field of graph drawing. Thomson Reuters Highly Cited Research lists him
among the most cited computer science authors. He co-founded the Journal of
Graph Algorithms and Applications and the Symposium on Graph Drawing. He
received a Ph.D. Electrical and Computer Engineering from the University of
Illinois at Urbana-Champaign.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140606.html
##-----------------TITLE------------------------##
Theory Seminar, June 6, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


June 6, 2013:

Shortest two disjoint paths in polynomial time


Jack Cheng



Given an undirected graph and two pairs of vertices $(s_i,t_i)$ for
$i\in\{1,2\}$ we show that there is a polynomial time Monte Carlo
algorithm that finds disjoint paths of smallest total length joining $s_i$
and $t_i$ for $i\in\{1,2\}$ respectively, or concludes that there most
likely are no such paths at all. Our algorithm applies to both the vertex- and
edge-disjoint versions of the problem.

Our algorithm is algebraic and uses permanents over the quotient ring
$\mathbb{Z}_4[X]/(X^m)$ in combination with Mulmuley, Vazirani and Vazirani's
isolation lemma to detect a solution. We develop a fast algorithm for
permanents over said ring by modifying Valiant's 1979 algorithm for the
permanent over $\mathbb{Z}_{2^l}$. 


(From a paper by Andreas Björklund and Thore Husfeldt at
ICALP 2014.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140425.html
##-----------------TITLE------------------------##
Theory Seminar, April 25, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


April 25, 2013:

New dynamics in geometric data structures


Joe Simons



We study geometric data structures for spatio-temporal data: geometric
objects which change over time.  In particular, we design data
structures for fundamental geometric problems in the following four data
models: 

In the retroactive model, we maintain a timeline for the historical
sequence of updates to the data structure, and every update has an
associated time stamp.  Unlike the standard dynamic model, in which we
only allow query and update operations against the current state of the
data structure, in the retroactive model, we also allow operations to be
performed ``in the past''.  We describe fully retroactive dynamic data
structures for approximate range reporting and approximate nearest
neighbor reporting. 

In the windowed model, we take an event-based approach, where each
geometric object corresponds to an event that occurs at an instance in
time, and queries are performed with respect to an interval in the
timeline.  We consider time-windowed queries for skylines in
$\mathbf{R}^d$, convex hulls in $\mathbf{R}^2$ and proximity based
queries in $\mathbf{R}^d$.

In the set-difference model, we maintain a dynamic set (or multiple
sets) of items such that two subsets can be efficiently compared.  We
introduce the problem of performing set-difference range queries, where
answers to queries are set-theoretic symmetric differences between sets
of items in two geometric ranges.  We describe a general framework for
answering such queries based on a novel use of data-streaming sketches
we call signed symmetric-difference sketches.  

In the local-update model, we maintain a set of geometric objects such
that the speed of updates is parameterized by how dramatically the
update changes the object. When the updated object is similar to the old
object in size and location, we desire to surpass known lower bounds for
more general updates.  We study planar point location in a collection of
disjoint fat regions, and investigate the complexity of local updates.
We design a linear size data structure that allows for insertions,
deletions, and queries in logarithmic time, and allows for local updates
in sub-logarithmic time on a pointer machine.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/140418.html
##-----------------TITLE------------------------##
Theory Seminar, April 18, 2013
##------------------TEXT------------------------##
CS 269S, Spring 2014: Theory Seminar
ICS Building, Room 243, 1pm


April 18, 2013:

An $O(\log k)$-competitive algorithm for generalized caching


Jenny Lam



In the generalized caching problem, we have a set of pages and a cache
of size $k$. Each page $p$ has a size $w_p\ge 1$ and fetching cost $c_p$
for loading the page into the cache. At any point in time, the sum of
the sizes of the pages stored in the cache cannot exceed $k$. The input
consists of a sequence of page requests. If a page is not present in the
cache at the time it is requested, it has to be loaded into the cache
incurring a cost of $c_p$. We give a randomized $O(\log k)$-competitive
online algorithm for the generalized caching problem, improving the
previous bound of $O(\log^2 k)$ by Bansal, Buchbinder, and Naor
(STOC'08). This improved bound is asymptotically tight and of the same
order as the known bounds for the classic problem with uniform weights
and sizes. We follow the LP based techniques proposed by Bansal et
al. and our main contribution are improved and slightly simplified
methods for rounding fractional solutions online.


(From a
paper at SODA 2012
by Anna Adamaszek, Artur Czumaj, Matthias Englert, and Harald Racke.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/991029.html
##-----------------TITLE------------------------##
Theory Seminar, 29 October 1999
##------------------TEXT------------------------##
ICS 269, Fall 1999: Theory Seminar


29 October 1999:
The longest common subsequence of two strings A and B is the
longest string which is a subsequence of both A and B. We discuss
the expected length of the longest common subsequence when A and B
are random binary strings of length n. It has long been known that
for large n this is asymptotic to g n, where g is some constant. We
discuss techniques for obtaining upper and lower bounds on the
value of g.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/991210.html
##-----------------TITLE------------------------##
Theory Seminar, 10 December 1999
##------------------TEXT------------------------##
ICS 269, Fall 1999: Theory Seminar

10 December 1999:
"Surface Reconstruction Algorithms for Mesh Generation"
Speaker: Mac Casale, ICS, UC Irvine
Abstract:
This talk explores the use of surface reconstruction algorithms as an aid to
the mesh generation of less than ideal CAD models, ones that we call
semi-valid. We begin with a brief description of the problem context, and
define what we mean by semi-valid. The majority of the talk will focus on a
paper by Bernardini, et. al, for the automatic reconstruction of CAD models
from unordered point sets using alpha-shapes. We will define the alpha-shape
and present some of its properties, such as how it is a generalization of the
convex hull of a set of points.  We will also present conditions on the
sampling rate that, if achieved, guarantee that the reconstructed solid is
homeomorphic to the original and is within a specified accuracy. This is
followed by the reconstruction algorithm, which proceeds as follows: 1)
Produce an initial triangulation of the points using alpha-shapes, 2)
Simplify the mesh, making it suitable for p-element analysis, 3) Fit smooth
surfaces to the mesh. We conclude by showing how additional information is
available in the context of semi-valid CAD models and present several
possible avenues for additional research.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/991015.html
##-----------------TITLE------------------------##
Theory Seminar, 12 March 1999
##------------------TEXT------------------------##
ICS 269, Fall 1999: Theory Seminar


15 October 1999:
"Setting Parameters by Example"
Speaker: David
Eppstein, ICS, UC Irvine

Abstract: We introduce a class of "inverse parametric optimization"
problems, in which one is given both a parametric optimization
problem and a desired optimal solution; the task is to determine
parameter values that lead to the given solution. We describe
algorithms for solving such problems for minimum spanning trees,
shortest paths, and other "optimal subgraph" problems, and discuss
applications in multicast routing, vehicle path planning, resource
allocation, and board game programming.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121102b.html
##-----------------TITLE------------------------##
Theory Seminar, November 2, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


November 2, 2012:

Algorithms for Graphs via Orthogonal Range Searching


Sergio Cabello 


I will explain how orthogonal range searching has been useful to
improve the running time of algorithms solving the following
problems:

a) Computing the sum of the distances between all pairs of vertices
in a graph of bounded treewidth.

b) Computing the dilation of a geometric graph of bounded treewidth.

c) Computing an optimal pricing in the Stackelberg shortest path tree
game.


(Parts a) and b) are joint work with Christian Knauer.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121130.html
##-----------------TITLE------------------------##
Theory Seminar, November 30, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


November 30, 2012:

Computing the Geometric Median 


Michael J. Bannister


We discus the problem of computing the the geometric median (also
called the Fermat-Weber point) of a set S of points in R^n, where the
geometric median of S is defined to be the point in R^n minimizing the sum
of distances to points in S.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121109b.html
##-----------------TITLE------------------------##
Theory Seminar, November 9, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


November 9, 2012:

A Model of Computation for MapReduce


Dmitri Arkhipov


(a SODA 2010 paper by Howard Karloff, Siddharth Suri, Sergei Vassilvitski)

This paper introduces a computational model for MapReduce called the
MapReduce
computation model MRC. The paper presents a  technique for
parallelizing a strictly defined class of functions within the MRC
model by decomposing such functions into map and reduce operations
implementable within MPC. This technique is used to prove that any
concurrent read exclusive write parallel random access machine (CREW
PRAM) can be efficiently run on a system implementing MapReduce if
the
memory/processor constraints of their model are satisfied. Lastly,
the
researchers show that in some cases more efficient MRC algorithms may
be designed than existing algorithms in PRAMs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121019.html
##-----------------TITLE------------------------##
Theory Seminar, October 19, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


October 19, 2012:

Planar Lombardi Drawings for Subcubic Graphs


David Eppstein


We prove that every planar graph with maximum degree
three has a planar drawing in which the edges are drawn as circular
arcs that meet at equal angles around every vertex. Our construction
is based on the Koebe–Andreev–Thurston circle packing theorem, and
uses a novel type of Voronoi diagram for circle packings that is
invariant
under Mobius transformations, defined using three-dimensional
hyperbolic
geometry. We also use circle packing to construct planar Lombardi
drawings of a special class of 4-regular planar graphs, the medial
graphs
of polyhedral graphs, and we show that not every 4-regular planar
graph
has a planar Lombardi drawing. We have implemented our algorithm for
3-connected planar cubic graphs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121012.html
##-----------------TITLE------------------------##
Theory Seminar, October 5, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


October 12, 2012:

Space-efficient Static Trees and Graphs


Gio Borje


New data structures are developed that represent
static unlabeled trees and planar graphs. These structures are
more space-efficient than conventional pointer-based representations,
but (to within a constant factor) they are just as timeefficient
for traversal operations. For trees, the data structures
described here are asymptotically optimal: there is no other structure
that encodes n-node trees with fewer bits per node, as n
grows without bound. For planar graphs (and for all graphs of
bounded pagenumber), the data structure described uses linear
space: it is within a constant factor of the most succinct representation.


(Based on a paper by 
Guy Jacobson)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121116.html
##-----------------TITLE------------------------##
Theory Seminar, November 16, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


November 16, 2012:

The Space Complexity of 2-Dimensional Approximate Range Counting


William Eric Devanny


(a SODA 2013 paper by by Zhewei Wei and Ke Yi)

We study the problem of 2-dimensional orthogonal range counting with
additive error. Given a set $P$ of $n$ points drawn from an $n\times n$ grid
and an error parameter $\eps$, the goal is to build a data structure, such
that for any orthogonal range $R$, the data structure can return the number
of points in $P\cap R$ with additive error $\eps n$. A well-known solution
for this problem is the {\em $\eps$-approximation}. Informally speaking, an
$\eps$-approximation of $P$ is a subset $A\subseteq P$ that allows us to
estimate the number of points in $P\cap R$ by counting the number of points
in $A\cap R$. It is known that an $\eps$-approximation of size
$O(\frac{1}{\eps} \log^{2.5} \frac{1}{\eps})$ exists for any $P$ with
respect to orthogonal ranges, and the best lower bound is
$\Omega(\frac{1}{\eps} \log \frac{1}{\eps})$.
The $\eps$-approximation is a rather restricted data structure, as we are
not allowed to store any information other than the coordinates of a subset
of points in $P$. In this paper, we explore what can be achieved without any
restriction on the data structure. We first describe a data structure that
uses $O(\frac{1}{\eps} \log \frac{1} {\eps} \log\log \frac{1}{\eps} \log n)$
bits that answers queries with error $\eps n$. We then prove a lower bound
that any data structure that answers queries with error $O(\log n)$ must use
$\Omega(n\log n)$ bits. This lower bound has two consequences: 1) answering
queries with error $O(\log n)$ is as hard as answering the queries exactly;
and 2) our upper bound cannot be improved in general by more than an $O(\log
\log \frac{1}{\eps})$ factor.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121109a.html
##-----------------TITLE------------------------##
Theory Seminar, November 9, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


November 9, 2012:

Topological quantum computation


Jenny Lam


We introduce the idea of fault-tolerant computation via topological
quantum computation and show that it is equivalent to the circuit
model of quantum computation. (Based on John Preskill's notes.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121026.html
##-----------------TITLE------------------------##
Theory Seminar, October 26, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


October 26, 2012:

Data-Oblivious Graph Algorithms


Joe Simons


We give a new efficient data-oblivious PRAM simulation and several new
data-oblivious
graph algorithms with application to privacy-preserving graph-drawing in
a cloud
computing context.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121005.html
##-----------------TITLE------------------------##
Theory Seminar, October 5, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


October 5, 2012:

Force-Directed Graph Drawing Using Social Gravity and Scaling

Lowell Trott

Force-directed layout algorithms produce graph drawings by resolving
a system of emulated physical forces. We present techniques for using
social gravity as an additional force in force-directed layouts,
together with a scaling technique, to produce drawings of trees and
forests, as well as more complex social networks. Social gravity
assigns mass to vertices in proportion to their net- work centrality,
which allows vertices that are more graph-theoretically central to be
visualized in physically central locations. Scaling varies the
gravitational force throughout the simulation, and reduces crossings
relative to unscaled gravity. In addition to providing this
algorithmic framework, we apply our algorithms to social networks
produced by Mark Lombardi, and we show how social gravity can be
incorporated into force-directed Lombardi-style drawings. 


(Joint work with Michael J. Bannister, David Eppstein, 
and Michael T.  Goodrich)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121102a.html
##-----------------TITLE------------------------##
Theory Seminar, November 2, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


November 2, 2012:

Smooth Orthogonal Layouts


David Dinh


We study the problem of creating smooth orthogonal layouts for planar
graphs. While in traditional orthogonal layouts every edge is made of a
sequence of axis-aligned line segments, in smooth orthogonal layouts
every edge is made of axis-aligned segments and circular arcs with
common tangents. Our goal is to create such layouts with low edge
complexity, measured by the number of line and circular arc segments.
We show that every biconnected 4-planar graph has a smooth orthogonal
layout with edge complexity 3. If the input graph has a complexity-2
traditional orthogonal layout, we can transform it into a smooth
complexity-2 layout. Using the Kandinsky model for removing the
degree restriction, we show that any planar graph has a smooth
complexity-2 layout.


(Graph Drawing '12 paper by M. A. Bekos, M. Kaufmann, S. G. Kobourov,
A. Symvonis)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/121207.html
##-----------------TITLE------------------------##
Theory Seminar, December 7, 2012
##------------------TEXT------------------------##
CS 269S, Fall 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


December 7, 2012:

Morphing Planar Graph Drawings with Bent Edges 


Pawel Pszona


I will present an algorithm for computing a discrete
(consisting of a polynomial number of linear morphs)
planar morph between two planar straight-line drawings of a graph.
It achieves polynomial size at the expense of allowing edge bends. 

(A paper by A. Lubiw and M. Petrick)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/990521.html
##-----------------TITLE------------------------##
Label Placement by Maximum Independent Set in
Rectangles
##------------------TEXT------------------------##
Label Placement by Maximum
Independent Set in Rectangles

Pankaj K. Agarwal, Marc Van
Kreveld, Subhash Suri

Abstract

Motivated by the problem of labeling maps, we investiage the
problem of computing a large non-intersecting subset in a set of n
rectangles in the plane. Our results are as follows. In O(n log n)
time, we can find an O(log n)-factor approximation of the maximum
subset in a set of n arbitrary axis-parallel rectangles in the
plane. If all rectangles have unit height, we can find a
2-approximation in O(n log n) time. Extending this result, we
obtain a (1 + 1/k)-approximation in time O(n log n + n^(2k-1))
time, for any integer k >= 1.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070525.html
##-----------------TITLE------------------------##
Theory Seminar, May 25, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

May 25, 2007, in Bren Hall 1423

Optimal Probabilistic Fingerprint Codes

Authored by Gabor Tardos; appeared in STOC 2003

Presented by Michael Nelson

Abstract:

We construct binary codes for fingerprinting. Our codes for n users
that are ε-secure against c pirates have length
O(c2 log(n/ε)).This improves
the codes proposed by Boneh and Shaw whose length is approximately
the square of this length. Our codes use the full power of
randomization. This improvement carries over to works using the Boneh-
Shaw code as a primitive, e.g. to the dynamic traitor tracing scheme of
Tassa.

By proving matching lower bounds we establish that the length of our
codes is best within a constant factor for reasonable error
probabilities. This lower bound generalizes the bound found
independently by Peikert, Shelat, and Smith that applies to a limited
class of codes. Our results also imply that randomized fingerprint codes
over a binary alphabet are as powerful as over an arbitrary alphabet and
the equal strength of two distinct models for fingerprinting.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070511.html
##-----------------TITLE------------------------##
Theory Seminar, May 11, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

May 11, 2007, in Bren Hall 1423

Cheap Labor Can Be Expensive

Ning Chen and Anna Karlin; appeared in SODA 2007

Presented by Matt Nguyen

Abstract:

We study markets in which consumers are trying to hire a team of
agents to perform a complex task. Each agent in the market prices their
labor, and based on these prices, consumers hire the cheapest available
team capable of doing the job they need done. We define the cheap labor
cost in such a market as the ratio of the best Nash equilibrium of the
original market and the best possible Nash equilibrium of any of its
submarkets, where "best" is defined with respect to consumers, i.e., we
are looking at Nash equilibria in which the consumer pays the
least. This definition is motivated by a "Braess-style"
paradox: in certain kinds of marketplaces, competition, in the form
of the availability of "cheap labor", can actually cause the prices paid
by consumers to go up.

We present tight bounds on the cheap labor cost for a variety of markets
including s-t path markets, matroid markets and perfect bipartite
matching markets. The differences in cheap labor cost across markets
demonstrate the complex relationship between the combinatorial structure
of the marketplace and the advantages or more precisely, disadvantages
to consumers due to competition.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070518.html
##-----------------TITLE------------------------##
Theory Seminar, May 18, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

May 18, 2007, in Bren Hall 1423

Guaranteed-Accurate Floating-Point Summation

Yong-Kang Zhu

Abstract:

Summation of many floating-point numbers introduces many rounding
errors.  When the data are ill-conditioned, the computed sum can be far
from the exact sum, being overwhelmed with roundoff error.  Dekker and
Knuth independently invented an algorithm called AddTwo
that adds two floating-point numbers together while simultaneously
computing the exact roundoff error. Based on AddTwo, we
present an algorithm, SimpleSum, which repeatedly calls
AddTwo. Given an array x of summands we prove that,
after finite iterations of the outer loop, SimpleSum
reaches a steady state in which x is sorted by increasing
magnitude, non-overlapping mantissas, and fixed exponents, such that
from xn to x1 each element contains
a smaller-and smaller component of the roundoff error.  That is, the
converged state of the array contains a full, exact and optimally
compact representation of the sum of the original array. The algorithm
works for any floating-point base.

Then, we will briefly outline a more sophisticated algorithm based
on the same principle, that runs in practice in only two "for"
loops, on average, and a "hybrid" that uses some other ideas to
run even faster.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070608.html
##-----------------TITLE------------------------##
Theory Seminar, June 8, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

June 8, 2007, in Bren Hall 1423

Optimal-time Dynamic Mesh Refinement

Benoit Hudson

Abstract:

In February, Gary Miller presented our results on static mesh
refinement: the problem was to, given an input geometry, produce an
output tetrahedral mesh where every tetrahedron has good aspect ratio.
This requires adding some additional points to the input; he showed how
to minimize (to within a constant factor) the number of points in the
output, and how to run in optimal sequential time.

When the mesh domain changes after the first timestep, we now need to
solve the dynamic mesh refinement problem: how to maintain a small but
good quality mesh as we change the input.  I will show that after
addding or removing points from the input, the mesh refinement algorithm
of Bern, Eppstein, and Gilbert can recompute the output quality mesh in
O(log L/s) time.  This uses the automatic
dynamization techniques of Acar, which ensures that the dynamic
algorithm is no harder to implement than the static algorithm.

In two dimensions, we can extend this to do even better: by
dynamizing a post-processing algorithm of Har-Peled and Ungor, we can
maintain a mesh as small as is known how to produce in practice, at no
additional asymptotic cost.

I expect this joint work with Umut Acar (TTI-C) to be of particular
interest to geometers, dynamic algorithmaticians, and scientific
computers.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070601.html
##-----------------TITLE------------------------##
Theory Seminar, June 1, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

June 1, 2007, in Bren Hall 1423

Parallel Cache-oblivious Algorithms

Nodari Sitchinava

Abstract:

I will survey the current state of research on making parallel
algorithms cache-oblivious. If time permits I will introduce some new
ideas in this direction.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070504.html
##-----------------TITLE------------------------##
Theory Seminar, May 4, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

May 4, 2007, in Bren Hall 1423

Region-Fault Tolerant Geometric Spanners

M.A. Abam, M. de Berg, M. Farshi and J. Gudmundsson;  appeared
in SODA 2007

Presented by Kevin Wortman

Abstract:

We introduce the concept of region-fault tolerant spanners for planar
point sets, and prove the existence of region-fault tolerant spanners of
small size.  For a geometric graph G on a point set P and
region F, we define G - F to be what
remains of G after the vertices and edges of G
intersecting F have been removed.  A C-fault tolerant
t-spanner is a geometric graph G on P such that for
any convex region F, the graph G - F is a
t-spanner for
Gc(P) - F, where
Gc(P) is the complete geometric graph on
P. We prove that any set P of n points admits a
C-fault tolerant (1+ε)-spanner of size
O(n log n) for any constant
ε > 0; if adding Steiner points is allowed then the
size of the spanner reduces to O(n), and for several special
cases we show how to obtain region-fault tolerant spanners of
O(n) size without using Steiner points.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070427.html
##-----------------TITLE------------------------##
Theory Seminar, Apr 27, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

Apr 27, 2007, 1:00pm, in Bren Hall 1423


Solving Problems Embedded in Trees


Josiah Carlson

Abstract:

We will describe and discuss solutions to optimization
problems that are embedded in trees.  We will primarily focus on drawing
trees in the plane with convexity and optimality constraints.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070406.html
##-----------------TITLE------------------------##
Theory Seminar, Apr 6, 2007
##------------------TEXT------------------------##
CompSci 269S, Spring 2007: Theory Seminar

Apr 6, 2007, 1:00pm, in Bren Hall 1423


Attribute-Based Encryption: A Cryptosystem for Expressive Access Control
on Encrypted Data


Brent Waters, SRI


Abstract:

Several distributed file and information systems require complex
access-control mechanisms, where access decisions depend upon attributes
of the protected data and access policies assigned to users.
Traditionally, such access-control mechanisms have been enforced by a
server that acts as a trusted reference monitor; the monitor will only
allow a user to view data if his access policy allows it. While the use
of trusted servers allows for a relatively straightforward solution,
there is a large downside to this approach — both the servers and
their storage must be trusted and remain uncompromised. A natural
solution to this problem is to encrypt stored data. However, traditional
public-key encryption methods require that data be encrypted to one
particular user's public key and are unsuitable for expressing more
complex access control policies.

In this talk, I will present recent work on a new cryptographic
primitive, called Attribute-Based Encryption (ABE), that was created to
address this issue. Attribute-Based Encryption allows for expressive
access policies over encrypted data. In an ABE system encrypted data is
annotated with descriptive attributes and users' private keys are
ascribed access formulas over these attributes. For example, if Carol is
assigned to read and process systems-seminar messages during the year
2007, she would be ascribed the private key with the access
formula"Subj:Systems-Seminar" AND "Year:2007". I will focus
this talk on the challenges of creating ABE systems that are both secure
and efficient.  In particular, an ABE system must be secure against an
attacker that collects several private keys from different colluding
users. We also want to avoid designs that are prohibitively expensive;
for example, a solution should not include a separate public key/private
for every possible access control policy that might ever be used. In
addition, I will talk about recent efforts in implementing
Attribute-Based Encryption and making it available as a tool to be used
by researchers in systems security.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060217.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 17, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Feb 17, 2006, in CS 253

Supervised Peer-to-Peer Systems

Authored by:Kishore Kothapalli and Christian Scheideler

In Proc. of 2005 International Symposium on
Parallel Architectures, Algorithms, and Networks (I-SPAN)

Presented by Jonathan Sun


Abstract:

A supervised peer-to-peer system is a system in which
the overlay network is formed by a supervisor, but all other
activities can be performed on a peer-to-peer basis without
involving the supervisor. It can be seen as being between
server-based systems and pure peer-to-peer systems. The supervisor
only has to store a constant amount of information about the
system at any time and only needs to send a small constant number
of messages to integrate or remove a peer in a constant amount of
time. Therefore it shares the benefits of server-based and pure
peer-to-peer systems without inheriting their disadvantages.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060224.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 24, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Feb 24, 2006, in CS 253

Cake Cutting Really is Not a Piece of Cake

Authored by:Jeff Edmonds and Kirk Pruhs

In SODA 2006

Presented by Kevin Wortman


Abstract:

We consider the well-known cake cutting problem in which a protocol wants
to divide a cake among n≥2 players in such a way that each player
believes that they got a fair share.  The standard Robertson-Webb model
allows the protocol to make two types of queries, Evaluation and Cut, to
the players.  A deterministic divide-and-conquer protocol with complexity
O(n log n) is known.  We provide the first Ω(n log n) lower bound on
the complexity of any deterministic protocol in the standard model.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060317.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 17, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Mar 17, 2006, in CS 253

Tight Approximation Algorithms for 
Maximum General Assignment Problems

Authored by:  Lisa Fleischer, Michel X. Goemans, 
Vahab S. Mirrokni, and Maxim Sviridenko

Presented by Matt Nguyen


Abstract:

The authors show that for any separable assignment problem (SAP), if there 
exists an B-approximation algorithm for solving the single bin case, then 
there is an LP-based algorithm that yields an (1-1/e - 
ε)-approximation and a local search algorithm with a 
(1/2-ε)-approximation.

A SAP is defined as follows:  Given a set of bins and items to pack into 
bins, a value f_ij for assigning item j to bin i, and a separate packing 
constraint on each bin (defined by a set of subsets of items that fit into 
bin i), find the packing that maximizes the aggregate value.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060310.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 10, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Mar 10, 2006, in CS 253

Strip Packing with Precedence Constraints and Release Times

Authored by: John Augustine, Sudarshan Banerjee, Sandy Irani

Presented by John Augustine


Abstract:

This paper examines two variants of strip packing: when the rectangles 
to be placed have precedence constraints and when the rectangles have
release times. Strip packing can be used to model
scheduling problems in which  tasks require a contiguous
subset of identical resources that are arranged in a linear topology.
The particular variants  studied here are motivated by 
scheduling tasks for dynamically reconfigurable 
Field-Programmable Gate Arrays (FPGAs). For the case in which
tasks have precedence constraints, we give an O(log n)
approximation, where n is the number of tasks.
We also give a 3-approximation for the special case in which
all the rectangles to be placed have uniform height.
For release times, we provide an asymptotic polynomial time 
(1+ε)-approximation scheme. We make the standard assumption 
that the rectangles have height at most 1. In addition, we also 
require widths to be in (εn, 1]. Our algorithm runs in time 
polynomial in n, 1/ε, and 1/εn.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060203.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 3, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Feb 3, 2006, in CS 253

Guard Placement For Wireless Localization

Presented by Nodari Sitchinava


Abstract:

Motivated by secure wireless networking, we consider the problem of
placing fixed localizers that enable mobile communication devices to
prove they belong to a secure region that is defined by a simple
polygon. Each localizer views an infinite wedge of the plane, and a
device can prove membership in the secure region if it is inside the
wedges for a set of localizers whose common intersection contains no
points outside the polygon. This model leads to a broad class of new art
gallery type problems, for which we provide upper and lower bounds.

(Joint work by David Eppstein, Michael T. Goodrich, and Nodari Sitchinava.)

This paper has been submitted to the Symposium on Computational Geometry
(SoCG '06).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060120.html
##-----------------TITLE------------------------##
Theory Seminar, Jan 20, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Jan 20, 2006, in CS 253

The Rainbow Skip Graph: A Fault-Tolerant Constant-Degree
    Distributed Data Structure

Presented by Michael Nelson


Abstract:

We present a distributed data structure, which we call the rainbow skip
graph. To our knowledge, this is the first peer-to-peer data structure
that simultaneously achieves high fault-tolerance, constant-sized nodes,
and fast update and query times for ordered data. It is a non-trivial
adaptation of the SkipNet/skip-graph structures of Harvey et al. and
Aspnes and Shah, so as to provide fault-tolerance as these structures do,
but to do so using constant-sized nodes, as in the family tree structure
of Zatloukal and Harvey. It supports successor queries on a set of n items
using O(log n) messages with high probability, an improvement over the
expected O(log n) messages of the family tree.

(Joint work by Michael T. Goodrich, Michael J. Nelson, and Jonathan Z. Sun.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/060210.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 10, 2006
##------------------TEXT------------------------##
ICS 269, Winter 2006: Theory Seminar

Feb 10, 2006, in CS 253

Simultaneous Source Location on Trees

Presented by Josiah Carlson


Abstract:

We describe the Simultaneous Source Location problem on Trees.
We provide an algorithm which solves the problem in
O(n2) time and space,
which improves upon a previous O(n3) time
and O(n2) space algorithm.
We also provide an algorithm that solves a variant of this problem in
O(n) time and O(depth(G)*degree(G)) space.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960216.html
##-----------------TITLE------------------------##
Theory Seminar, 16 Feb 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


16 February 1996:
Randomized Paging Algorithms
Marek Chrobak, Dept. of
Computer Science, UC Riverside

The paging problem is defined as follows: We are given a
two-level memory system, in which one level is a fast memory,
called cache, capable of holding k items, and the
second level is an unbounded but slow memory. At each given time
step, a request to an item is issued. Given a request to an item
p, a miss occurs if p is not present in the
fast memory. In response to a miss, we need to choose an item 
q in the cache and replace it by p. The choice of 
q needs to be made on-line, without the knowledge of
future requests. Our goal is to design a replacement strategy with
a small number of misses.

We use the competitive analysis to study online randomized
algorithms for paging. Our goal is to show how the concept of work
functions, used previously mostly for the analysis of deterministic
algorithms, can also be applied, in a systematic fashion, to the
randomized case. We present two results: We first show that the
competitiveness of the marking algorithm is exactly 2H(k)-1.
Previously, it was known to be between H(k) and
2H(k). Our second result is a new, H(k)-competitive
algorithm for paging. Our algorithm, as well as its analysis, is
simpler than the known algorithm by McGeoch and Sleator. Another
advantage of our method is that it can be implemented with
complexity bounds independent of the number of past requests:
O(k^2 log k) memory and time O(k^2) per
request.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960301.html
##-----------------TITLE------------------------##
Theory Seminar, 1 Mar 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


1 March 1996:
Generating Triangulations without Repetitions
Jason Cahill, ICS, UC Irvine

(Based on a paper by D. Avis and K. Fukuda, to appear in 
Discrete Applied Math as "Reverse Search for Enumeration") 

The reverse search technique has been recently introduced by the
authors for efficient enumeration of vertices of polyhedra and
arrangements. In this paper, the authors develop the idea in a
broader framework and show its applications to various problems in
operations research, combinatorics, and geometry.

In my talk, I will be discussing the motivations and details of
reverse search, followed by a discussion of how it can be applied
to the problem of generating all possible triangulations to a set
of n points in the plane.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960112.html
##-----------------TITLE------------------------##
Theory Seminar, 12 Jan 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


12 January 1996:
Modular Decomposition
George Lueker, ICS, UC Irvine

A module of a graph is a subset M of vertices such that any
vertex outside of M is either connected to all of M or none of M.
Repeatedly finding and contracting nontrivial modules produces a
modular decomposition of the graph, which can be arranged to
form a tree in which each node has a graph with vertices
corresponding to its children, and the graph at each node is either
complete, degenerate (without edges), or prime (without
nontrivial modules). The original graph can then be obtained by
expanding the tree bottom-up, blowing up the vertices at each node
into graphs coming from the corresponding subtrees. 

Motivated by a recent paper [R. M. McConnel and J. P. Spinrad,
"Linear time modular decomposition and efficient transitive
orientation of comparibility graphs", 5th SODA (1994) 536-545],
George discussed applications of modular decomposition to maximum
weight independent sets, transitive orientation, and cograph
recognition, and described a method for constructing large prime
graphs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960119.html
##-----------------TITLE------------------------##
Theory Seminar, 19 Jan 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


19 January 1996:
Scheduling with Conflicts,
and Applications to Traffic Signal Control
Vitus Leung, ICS, UC Irvine

In this paper, we consider the scheduling of jobs that may be
competing for mutually exclusive resources. We model the conflicts
between jobs with a conflict graph, so that all concurrently
running jobs must form an independent set in the graph. We believe
that this model is natural and general enough to have applications
in a variety of settings; however, we are motivated by the
following two specific applications: traffic intersection control
and session scheduling in high speed local area networks with
spatial reuse. In both of these applications, guaranteeing the best
turnaround time to any job entering the system is important. Our
results focus on two special classes of graphs motivated by our
applications: bipartite graphs and interval graphs. Although the
algorithms for bipartite and intervals graphs are quite different,
the bounds they achieve are the same: we prove that for any
sequence of jobs in which the maximum completion time of a job in
the optimal schedule is bounded by A, the algorithm can
complete every job in time O(n^3 A^2). n is
the number of nodes in the conflict graph. We also show that the
best competitive ratio achievable by any online algorithm for the
maximum completion time on interval or bipartite graphs is
Omega(n). 

(Practice talk for Vitus' SODA '96 presentation; joint work with
Sandy Irani. 
Full paper available.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960315.html
##-----------------TITLE------------------------##
Theory Seminar, 15 Mar 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


15 March 1996:
Multiprocessor Scheduling with Rejection
Joseph Wang, ICS, UC Irvine

(Based on a paper by Y. Bartal, S. Leonardi, A.
Marchetti-Spaccamela, J. Sgall, and L. Stougie, 7th SODA,
1995, pp. 95-103.) 

We consider a version of multiprocessor scheduling with the
special feature that jobs may be rejected for a certain penalty. An
instanace of the problem is given by m identical parallel machines
and a set of n jobs, each job characterized by a processing
time and a penalty. In the on-line version the jobs arrive one by
one and we have to schedule or reject a job before we have any
information about future jobs. The objective is to minimize the
makespan of the schedule for accepted jobs plus the sum of the
penalties of rejected jobs.

The main result is a 1+phi = 2.618 competitive algorithm for the
on-line version of the problem, where phi is the golden ratio. A
matching lower bound show that this is the best possible algorithm
working for all m. For fixed m we give improved
bounds, in particular for m = 2 we give an optimal phi =
1.618 competitive algorithm.

For the off-line problem we present a fully polynomial
approximation scheme for fixed n and an approximation
algorithm which runs in time O(n log n) for arbitrary
m and guarantees 2 - 1/m approximation ratio.

This talk will focus on the first two results of this paper.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960308.html
##-----------------TITLE------------------------##
Theory Seminar, 8 Mar 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


8 March 1996:
Fairly Recent Results about Triangulations
Brad Hutchings, ICS, UC Irvine

Brad will discuss two fairly recent results about triangulations.
The first result is the Subgraph Theorem from "A Quadratic Time
Algorithm for the MinMax Triangulation" by Edelsbrunner and Tan
[SIAM J. Comput., vol. 22, 1993, pp. 527-551]. The second
result is an improved beta for the beta-skeleton subgraph of the
minimum weight triangulation. This result appeared in the paper "A
better subgraph of the minimum weight triangulation" by Yang
[IPL, vol. 56, 1995, pp. 255-258]. 

During his talk, Brad will be using his new graph algorithm
visualization application to compute and display results from these
papers on random graphs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960223.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Feb 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


23 February 1996:
Thrackles
Mike Dillencourt, ICS, UC Irvine

A thrackle is a graph that can be drawn in the plane so that 

its edges are represented by simple curves; andany two distinct edges either meet at a single common endpoint
or cross at exactly one point, interior to both curves.

Thirty years ago, Conway conjectured that an n-vertex
thrackle has at most n edges. Lovász, Pach and
Szegedy recently made major progress towards resolving this
conjecture, by proving that an n-vertex thrackle has at most
2n edges. In this talk, I will present their proof.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960126.html
##-----------------TITLE------------------------##
Theory Seminar, 26 Jan 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


26 January 1996:
A Randomized Algorithm for Three Machine Scheduling
Steve Seiden, ICS, UC Irvine

The problem of scheduling independent jobs on m parallel
machines in an online fashion was introduced by Graham in 1966.
While the deterministic case of this problem has been studied
extensively, little work has been done on the randomized case. For
m = 2 an algorithm achieving a competitive ratio of 4/3 has
been found by Bartal, Fiat, Karloff and Vohra. These same authors
show a matching lower bound. Chen, van Vliet and Woeginger, and
independently Sgall, have shown a lower bound which converges to
e/(e-1) as m goes to infinity. Prior to this
work, no randomized algorithm for m > 2 was known. An
algorithm for m = 3 is presented, and it is shown that this
algorithm is 3/2-competitive.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960209.html
##-----------------TITLE------------------------##
Theory Seminar, 9 Feb 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


9 February 1996:
Data Compression Techniques for Stock Market Prediction
Dan Halem, ICS, UC Irvine

(Based on a paper by S. Azhar, G. Badros, A. Glodjo, M. Kao and J.
Reif from DCC
'94.) 

This paper presents advanced data compression techniques for
predicting stock markets behavior under widely accepted market
models in finance. Our techniques are applicable to technical
analysis, portfolio theory, and nonlinear market models. We find
that lossy and lossless compression techniques are well suited for
predicting stock prices as well as market modes such as strong
trends and major adjustments. We also present novel applications of
multispectral compression techniques to portfolio theory,
correlation of similar stocks, effects of interest rates,
transaction costs and taxes.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/960105.html
##-----------------TITLE------------------------##
Theory Seminar, 5 Jan 1996
##------------------TEXT------------------------##
ICS 269, Winter 1996: Theory Seminar


5 January 1996:
The Parity of the Number of Spanning Trees in a Graph
David Eppstein, ICS, UC Irvine

Every bipartite Eulerian graph has an even number of spanning
trees. More generally, a graph has evenly many spanning trees if
and only if it has an Eulerian edge cut, and if B is any edge cut
in a graph G, the gcd of vertex degrees in B divides the number of
spanning trees of G. The proofs of these facts are based on a new
algebraic characterization of the number of spanning trees of G,
due to 
Bacher, de la Harpe, and Nagnibeda.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070302.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 2, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Mar 2, 2007, 1:00pm, in CS 243


Algorithms for Privacy-Preserving Data Publication


Michael Nelson, UCI


Abstract:

Many organizations publish sensitive data for the purpose of finding
trends in areas such as public health or product consumption.  In the
interest of privacy, attributes that clearly identify individuals,
such as name and Social Security number, are removed.  Nevertheless,
it has been shown that such de-identified tables can often be used to
uniquely identify individuals using a combination of attributes such
as gender, zipcode, and date of birth.

Proposed methods for preventing this type of privacy breech give rise
to many interesting theoretical problems.  This talk will survey some
of these  privacy-preserving techniques, with an emphasis on the
algorithms and analysis that they require.  This will include some
known results as well as several open problems.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070223.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 23, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Feb 23, 2007, 1:00pm, in CS 243


On-Line Arithmetic and Real-Time Rounding


Nicholas Pippenger, Harvey Mudd College


Abstract:

Arithmetic operations such as addition and multiplication are usually
performed in "batch" mode, with the inputs being available in their
entirety before computation begins, and with no attempt being made to
produce any output until computation ends. This mode of operation
contrasts with "on-line" computation, in which inputs arrive
incrementally as computation proceeds, and outputs are produced
incrementally as well.  We will examine the problem of performing
arithmetic operations on-line. To do this we must first consider
various input-output conventions and discuss alternative
computational models.  The seemingly mundane problem of "rounding"
brings key issues into focus,
giving rise to new open questions as well as new results.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070126.html
##-----------------TITLE------------------------##
Theory Seminar, Jan 26, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Jan 26, 2007, in CS 243

Approximation Algorithms for Embedding General Metrics Into
Trees

Mihai Badoiu, Piotr Indyk, and Anastasios Sidiropoulos;  appeared
in SODA 2007

Presented by Kevin Wortman


Abstract:

We consider the problem of embedding general metrics into trees. We
give the first non-trivial approximation algorithm for
minimizing the
multiplicative distortion. Our algorithm produces an embedding with
distortion (c log n)^\sqrt(O( log delta)), where c is the
optimal
distortion, and delta is the spread of the metric (i.e. the
ratio of the
diameter over the minimum distance). We give an improved
O(1)-approximation algorithm for the case where the input is the
shortest path metric over an unweighted graph. Moreover, we show that
by composing our approximation algorithm for embedding general
metrics
into trees, with the approximation algorithm of [BCIS05] for
embedding
trees into the line, we obtain an improved approximation algorithm
for
embedding general metrics into the line.


We also provide almost tight bounds for the relation between
embedding
into trees and embedding into spanning subtrees. We show that for any
unweighted graph G, the ratio of the distortion required to embed G
into a spanning subtree, over the distortion of an optimal tree
embedding of G, is at most O(log n). We complement this bound by
exhibiting a family of graphs for which the ratio is 
Omega(log n/ log log n).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070309.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 9, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Mar 9, 2007, 1:00pm, in CS 243


Entropy Coding


Josiah Carlson, UCI


Abstract:

In this survey talk we will offer an introduction with brief
explanations of historic entropy coders; from the symbol-based
Shannon, Huffman, and Arithmetic approaches, to the "modern" LZ77, 78, and LZW
pattern matching algorithms.  With luck, we will have time to discuss
data transformation approaches with FFT/DCT and BWT. In this survey
talk we will offer an introduction with brief
explanations of historic entropy coders; from the symbol-based
Shannon,
Huffman, and Arithmetic approaches, to the "modern" LZ77, 78, and LZW
pattern matching algorithms.  With luck, we will have time to discuss
data transformation approaches with FFT/DCT and BWT.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070216.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 16, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Feb 16, 2007, 1:00pm, in CS 243


Deriving greedy algorithms and Lagrangian-relaxation algorithms


Neal Young, UC-Riverside


Abstract:

We will discuss how one can use randomized rounding to systematically
derive primal-dual algorithms  --- particularly greedy algorithms and
Lagrangian-relaxation algorithms --- for approximately solving
packing and covering problems such as set cover, vertex cover, and
multi-commodity flow.  The talk should be of interest to those
interested in probabilistic methods and to those interested in
approximation algorithms for combinatorial optimization problems.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070209.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 9, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Feb 9, 2007, in CS 243


Broadcast Encryption and Traitor Tracing for Content
Protection


Hongxia Jin, IBM Research


Abstract:

Broadcast encryption and traitor tracing are two active problems in
cryptography community.  In this talk I will give an overview on how
broadcast encryption and traitor tracing can be used for content
protection.  The focus of the talk will be on tracing traitors for
anonymous attack, a way to trace the source of unauthorized copies
when the system is broadcasted. Our solution has been adopted by
AACS, (the content protection standards for next generation high
definition DVDs),  the first large-scale deployment of traitor
tracing approach, Along the way we have had to solve both practical
and theoretical problems that had not been apparent in the literature
to date.  In this talk I will discuss some of those problems.  The
talk will also include the recent incidence of AACS "break".
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070316.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 16, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Mar 16, 2007, 1:00pm, in CS 243


Parallel External Memory Model


Nodari Sitchinava, UCI


Abstract:

I will talk about a new model of parallel computation which is
designed with multicore architectures in mind. The model takes into
explicit consideration the cache-oriented nature of inputs and
outputs in modern CPUs. I will present a parallel sorting algorithm
which is provably optimal in both running time and cache-miss rate.

This is joint work with Michael Goodrich and Michael Nelson.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/070220.html
##-----------------TITLE------------------------##
Theory Seminar, Feb 20, 2007
##------------------TEXT------------------------##
CompSci 269S, Winter 2007: Theory Seminar

Feb 20, 2007, 2:00pm, in ICS2 144


Meshing in Fixed Dimension in near Optimal Work and Time


Gary Miller, CMU


Abstract:

A new meshing algorithm will be presented for meshing with boundaries
in any fixed dimension, Sparse Voronoi Refinement (SVR). The meshing
problem in 3D, for example, takes as input a a domain and a
collection
of features(points, edges, and faces) and decomposes the domain into
tetrahedra.


There are four important properties that a meshing algorithm should
have:
1) The tetrahedra should have good aspect ratio, no small angles.
2) The mesh should conform to the features.
3) The size should be competitive to an optimal-size mesh.
4) The algorithm should be work and time competitive with a optimal
algorithm.


SVR is the first algorithm known to have have all four properties
even
in 3D for a reasonable assumption about the input.


Over the last 17 years computer scientists have been in the forefront
in designing algorithms with guarantees for all four conditions,
beginning with the pioneering work of Bern, Eppstein, and Gilbert on
quadtree meshing in 1990.  Their algorithm has all 4 guarantees for
2D
points where the work is O(n log L/s + m).  Here L/s is the ratio of
the size of the domain over the smallest input feature. In 1993
Ruppert proposed a method called Delaunay Refinement which included
guarantees for the first three conditions in 2D.


The 3D octtree algorithms starts by insuring 1) always and finishes
by
insuring 2), while Delaunay Refinement algorithms first insure 2)
then
refine until 1) is satisfied.  SVR can be viewed as
a compromise  by alternately insuring 1) and then 2).  SVR has
sequential-time/work bounds of O(n log L/s + m) for inputs in any
fixed dimension with piecewise-linear constraining (PLC) features.
The parallel time is O(log L/s log m)$ on an EREW PRAM, with the same
work.
SVR is straightforward enough that it is likely to be extremely fast
in practice.

This represent joint work with Benoit Hudson and Todd Phillips
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000303.html
##-----------------TITLE------------------------##
Theory Seminar, 3 March 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


3 March 2000:
Weaving Patterns of Lines and Line Segments in Space
Javid Hüseynov, ICS, UC Irvine

A weaving W is a simple arrangement of lines (or line segments)
in the plane together with a binary relation specifying which line
is "above" the other. Two weavings are equivalent if the underlying
arrangements of lines are combinatorially equivalent and the
"above-below" relations are the same. An equivalence class of
weavings is called a weaving pattern.

In a perfect weaving pattern, along each line l of W, the lines
intersecting it are alternately "above" and "below". This paper
discusses the realization of weavings and weaving patterns in
3-space. The authors prove that:

A perfect weaving pattern of n lines is realizable iff
n<=3A perfect m by n (bipartite) weaving pattern of line segments
is realizable iff min(m,n) <= 3If n -> infinity, then almost all weaving patterns are
nonrealizable.

(Based on a paper by János Pach, Richard Pollack, and Emo
Welzl, in Algorithmica 9:561-571, 1993.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000225.html
##-----------------TITLE------------------------##
Theory Seminar, 25 February 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


25 February 2000:
On-Line Load Balancing in a Hierarchical Server Topology
Sergey Kirshner, ICS, UC Irvine

In the paper, the authors consider several models of linear
hierarchy of servers, propose a framework and on-line algorithms to
solve the problem the, and derive bounds on their competitive
ratios.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000317.html
##-----------------TITLE------------------------##
Theory Seminar, 17 March 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


17 March 2000:
Packing Stretchable Bins
George Lueker, ICS, UC Irvine

We consider a variation of the bin packing problem in which a
fixed number of bins can be filled to a level exceeding 1. The goal
is to minimize the total cost of the bins used, where the cost of a
bin filled to level L is defined to be max(1,L). We discuss
approximation algorithms for this problem.

(Joint work with Ed Coffman.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000218.html
##-----------------TITLE------------------------##
Theory Seminar, 18 February 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


18 February 2000:
Data ordering for visualization
Dave Goggin, ICS, UC Irvine

This week's talk is about a problem of visualizing
document-keyword incidences by permuting rows and columns of 0-1
matrices. The permutation minimizing the length of the boundary
between 0's and 1's can be represented as a pair of optimum
traveling salesman paths in two Hamming spaces; one can then apply
various heuristics for approximate TSP solutions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000310.html
##-----------------TITLE------------------------##
Theory Seminar, 10 March 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


10 March 2000:
A polynomial time algorithm for counting protein aggregation
packings
Mac Casale, ICS, UC Irvine

We present an algorithm for the enumeration of packings of
peptide chains. This algorithm is one part of the larger problem of
simulating protein aggregation such as occurs in Alzheimer's,
Huntington's and other neurodegenerative diseases. We briefly
present the problem context, including the medical need and an
overview of the protein folding and aggregation problems, and then
concentrate on the enumeration algorithm. This algorithm is shown
to be O(|L|^4 |a||b|^2), where L is the dimension of the lattice,
|a| is the length of the peptide that is held fixed during the
enumeration and |b| is the length of the peptide whose position and
orientation are varied. After presenting the basic algorithm, we
give several improvements suggested by the author for reducing time
and/or space, making use of, among other things, multi-dimensional
hash tables. The talk concludes with speculation on further
improvements of the enumeration algorithm as integrated into the
protein aggregation problem.

(Based on S. Istrail, R. Schwartz, and J. King, "Lattice
simulations of aggregation funnels for protein folding", J.
Comp. Bio. 6(2):143-162, 1999.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000204.html
##-----------------TITLE------------------------##
Theory Seminar, 4 February 2000
##------------------TEXT------------------------##
ICS 269, Winter 2000: Theory
Seminar


4 February 2000:
Multivariate Regression Depth
David Eppstein, ICS, UC Irvine

The regression depth of a hyperplane with respect to a set of n
points in Rd is the minimum number of points the
hyperplane must pass through in a rotation to vertical. We
generalize hyperplane regression depth to k-flats for any k between
0 and d-1. The k=0 case gives the classical notion of center
points. We prove that for any k and d, deep k-flats exist, that is,
for any set of n points there always exists a k-flat with depth at
least a constant fraction of n. As a consequence, we derive a
linear-time (1+epsilon)-approximation algorithm for the deepest
flat.

(To appear at SCG'00; full paper available in ACM Computing Research
Repository, cs.CG/9912013.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/000324.html
##-----------------TITLE------------------------##
Theory Seminar, 24 March 2000
##------------------TEXT------------------------##
ICS Department Seminar


24 March 2000, 11:00AM, CS 432:
(In-)Approximability of Visibility Problems in Polygons and
Terrains
Stephan Eidenbenz, ETH Zurich

Visibility problems appear in a variety of applicative
backgrounds. While the traditional "art gallery" problem, which
consists of guarding a given floorplan of an art gallery by a
minimum number of guards seems to be mainly of theoretical
interest, a variation of this problem, where a 2.5 dimensional
terrain rather than a two dimensional polygonal floorplan needs to
be guarded, is of practical significance in the planning of
wireless communication networks, where minimizing the numbers of
antennas reduces overall costs.

In a visibility problem, we are given an input polygon, which
may or may not contain holes, or a 2.5 dimensional triangulated
terrain. Since a lot of visibility problems are NP-hard, we study
the approximation characteristics of these problems. In the talk,
an overview of recent inapproximability as well as approximability
results will be presented for a variety of NP-hard visibility
problems:

guarding a polygon with or without holes or a terrain with a
minimum number of guards,hiding a maximum number of points from each other in a polygon
or a terrain, andcovering a polygon with a minimum number of convex polygons
that lie inside the given polygon.

We will discuss an inapproximability result for at least one of
these problems in more detail, which should give a general idea of
how to prove inapproximability of visibility problems. Finally, an
approximation algorithm for a visibility problem will be
presented.

(Host: Renato
Pajarola, 
pajarola@acm.org.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091120.html
##-----------------TITLE------------------------##
Theory Seminar, November 20, 2009
##------------------TEXT------------------------##
November 20, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   
Preprocessing
Imprecise Points for Efficient Triangulation

 Maarten Loffler, UC Irvine 




Traditional algorithms in computational geometry often take a set of
points in the plane as input. An underlying assumption of these algorithms
is that the input points are given precisely. In practice, data is often
collected by imperfect methods and hence imprecise, and the validity of
the output of these algorithms can be questioned. Still, we often have
some information about the imprecision of the points available, such as an
error region around each point.

We investigate what the value of this information is. In this talk, we
show how to preprocess a set of disjoint regions in the plane of total
complexity n in O(n log n) time so that if later one point per set is
specified with precise coordinates, a triangulation of the points can be
computed in linear time. We also show how to compute the Delaunay
triangulation in linear time, but with more restrictions on the shapes of
the regions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091113.html
##-----------------TITLE------------------------##
Theory Seminar, November 13, 2009
##------------------TEXT------------------------##
November 13, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   
The Quantum and Classical Complexity of Translationally Invariant Tiling and Hamiltonian Problems

 Sandy Irani, UC Irvine 
 Joint work with Daniel Gottesman 




We study the complexity of a class of problems involving satisfying
constraints which remain the same under translations in one or more
spatial directions.  In this paper, we show hardness of a classical tiling
problem on an (NxN) 2-dimensional grid and a quantum problem involving
finding the ground state energy of a 1-dimensional quantum system of
N particles.  In both cases, the only input is N, provided in
binary.  We show that the classical problem is NEXP-complete and
the quantum problem is QMAEXP-complete.  Thus, an algorithm
for these problems which runs in time polynomial in N (exponential
in the input size) would imply that
EXP = NEXP or BQEXP = QMAEXP, respectively. Although tiling in general
is already known to be NEXP-complete, to our knowledge, all
previous reductions require that either the set of tiles and their constraints
or some varying boundary conditions be given as part of the input.
In the problem considered here, these are fixed, constant-sized parameters
of the problem. Instead, the problem instance is encoded solely in the
size of the system.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091002.html
##-----------------TITLE------------------------##
Theory Seminar, October 2, 2009
##------------------TEXT------------------------##
October 2, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   Planar Drawings of Higher-Genus Graphs 

 Michael Goodrich, UC Irvine




In this talk, we give polynomial-time algorithms that can take a graph G with a given combinatorial
embedding on a surface S of genus g and produce a planar drawing of G, with a bounding
face de ned by a polygonal schema P for S. Our drawings are planar, but they allow for multiple copies of
vertices and edges on P's boundary, which is a common way of visualizing higher-genus graphs in the plane.
As a side note, we show that it is NP-complete to determine whether a given graph embedded in a genus-g
surface has a set of 2g fundamental cycles with vertex-disjoint interiors, which would be desirable from a
graph-drawing perspective.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091023.html
##-----------------TITLE------------------------##
Theory Seminar, October 23, 2009
##------------------TEXT------------------------##
October 23, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   Cryptographic and Physical Zero-Knowledge Proof Systems for
Solutions of Sudoku Puzzles.

 By Ronen Gradwohl, Moni Naor, Benny Pinkas, Guy Rothblum.
 Appeared in TOCS 2009
 Presented by Rishab Nityanand, UC Irvine




Talk Overview:
I decided to select a topic for my presentation which continues from my
two presentations last year (Sudoku as a SAT problem, Overview of ZK
Proofs). I will put both of them together and talk about this paper which
presents cryptographic and physical ZK protocols to prove that Alice has a
solution to a Sudoku puzzle. I will explain 2 of the cryptographic
protocols and 2 of the physical protocols from the paper.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091106.html
##-----------------TITLE------------------------##
Theory Seminar, November 6, 2009
##------------------TEXT------------------------##
November 6, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   
ABySS: A parallel assembler for short read sequence data

  by Jared T. Simpson, Kim Wong, Shaun D. Jackman, Jacqueline E. Schein, Steven J.M. Jones, and Inanc Birol
 Presented by Kiran Shivaram, UCIrvine




Widespread adoption of massively parallel deoxyribonucleic acid (DNA) sequencing instruments has prompted the recent

development of de novo short read assembly algorithms. A common shortcoming of the available tools is their inability to

efficiently assemble vast amounts of data generated from large-scale sequencing projects, such as the sequencing of individual

human genomes to catalog natural genetic variation. To address this limitation, we developed ABySS (Assembly By

Short Sequences), a parallelized sequence assembler. As a demonstration of the capability of our software, we assembled

3.5 billion paired-end reads from the genome of an African male publicly released by Illumina, Inc. Approximately

2.76 million contigs $100 base pairs (bp) in length were created with an N50 size of 1499 bp, representing 68% of the

reference human genome. Analysis of these contigs identified polymorphic and novel sequences not present in the human

reference assembly, which were validated by alignment to alternate human assemblies and to other primate genomes.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091204.html
##-----------------TITLE------------------------##
Theory Seminar, December 4, 2009
##------------------TEXT------------------------##
December 4, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   
Randomized Shellsort: A Simple Oblivious Sorting Algorithm

 Michael Goodrich, UC Irvine 




In this paper, we describe randomized Shellsort--a simple, randomized, data-oblivious version of the Shellsort algorithm that always runs in O(n log n) time and, as we show, succeeds in sorting any given input permutation with very high probability. Thus, randomized Shellsort is simultaneously simple, time-optimal, and data-oblivious. Taken together, these properties imply applications in the design of new efficient privacy-preserving computations based on the secure multi-party computation (SMC) paradigm. In addition, by a trivial conversion of this Monte Carlo algorithm to its Las Vegas equivalent, one gets the first version of Shellsort with a running time that is provably O(n log n) with very high probability.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/091030.html
##-----------------TITLE------------------------##
Theory Seminar, October 30, 2009
##------------------TEXT------------------------##
October 30, Fall Quarter 2009: Thoery Seminar 
1:00pm in 1423 Bren Hall
   
Online Sorted Range Reporting 

  by Gerth Stølting Brodal, Rolf Fagerberg, Mark Greve, and Alejandro López-Ortiz 
 To appear at ISAAC '09 (International Symposium on Algorithms and Computation)
 Presented by Darren StrashUC Irvine




Consider the following one-dimensional range reporting problem: given an array A
of n elements, report the k smallest elements in the subarray A[i..j] in sorted order.
We present a data structure in the RAM model that supports such queries in O(k)
time, using O(n) words of memory, and O(n log n) preprocessing time. We also
discuss how to extend this result to the online version of the problem.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111021.html
##-----------------TITLE------------------------##
Theory Seminar, 21 October 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


21 October 2011:
Speaker: Michael Bannister

Title: 
Hardness of Approximate Compaction for Nonplanar Orthogonal Graph
Drawings 



Abstract: 
We show that several problems of compacting orthogonal graph
drawings to use the minimum number of rows or the minimum possible
area
cannot be approximated to within better than a polynomial factor in
polynomial time unless P = NP. However, there is a
fixed-parameter-tractable algorithm for testing whether a drawing can
be
compacted to a given number of rows.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111104.html
##-----------------TITLE------------------------##
Theory Seminar, 4 November 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


4 November 2011:
Speaker: Joseph Simons

Title: 
Dynamic Point Location with Sub-Logarithmic Local Updates



Presenting ongoing work with Maarten and Darren.


Abstract: 
We consider the problem of dynamic point location among imprecision
regions. That is, we are given a set of n points whose location we
only know approximately, and
we maintain a set of n regions whose size depends on the precision of
the corresponding point.
We support point location queries among these regions and insertions
and deletions of regions in O(log n) time. We also support local
updates to re-size or move a region in sub-logarithmic time.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111118.html
##-----------------TITLE------------------------##
Theory Seminar, 18 November 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


18 November 2011:
Speaker: Lowell Trott

Title: 
On Embedding a Graph in the Grid with the Maximum Number of Bends and
Other Bad Features



Abstract: 
Graph Drawing is (usually) concerned with the production of readable
representations of graphs. In this paper, instead of investigating
how to produce "good" drawings, we tackle the opposite
problem of producing "bad" drawings. In particular, we study
how to construct orthogonal drawings with many bends along the edges
and with large area. Our results show surprising contact points, in
Graph Drawing, between the computational cost of niceness and the one
of ugliness.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111007.html
##-----------------TITLE------------------------##
Theory Seminar, 7 October 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


7 October 2011:
Speaker: Jenny Lam

Title: 
Entanglement bound on the ground space of frustration-free qubit
systems


Authors: Sandra Irani and Jenny Lam



Abstract: Entanglement is a crucial resource used in quantum
information and computation. We will present a brief introduction to
quantum computation, an overview of some of the research done in the
last decade to understand entanglement. Finally, we present a bound
on the entanglement of the ground space manifold of a class of
quantum many-body systems called frustration-free systems.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111202.html
##-----------------TITLE------------------------##
Theory Seminar, 18 November 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


2 December 2011:
Speaker: Ali Mehrabi

Title: 
On Unique Independence Weighted Graphs



Abstract: 
We first give our
motivation for studying this problem by a short description on
Combinatorial Auctions, and then focus on those vertex-weighted
graphs
whose maximum independent set is unique. We provide some theorems on
this
topic and then conclude the talk with the complexity of the problem.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111028.html
##-----------------TITLE------------------------##
Theory Seminar, 28 October 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


28 October 2011:
Speaker: Jack Cheng

Title: 
A Randomized O(m log n) Algorithm for Computing Reeb Graphs of
Arbitrary Simplicial Complexes



Presenting a paper by William Harvey, Yusu Wang, and Rephael Wenger


Abstract: In this paper, we present the first sub-quadratic algorithm
to compute the Reeb graph for a function
on an arbitrary simplicial complex K. Our algorithm is randomized
with
an expected running time
O(m log n), where m is the size of the 2-skeleton of K (i.e, total
number of vertices, edges and triangles),
and n is the number of vertices. This presents a significant
improvement over the previous  \Theta(mn) time
complexity for arbitrary complex, matches (although in expectation
only) the best known result for the
special case of 2-manifolds, and is faster than current algorithms
for
any other special cases (e.g, 3-manifolds). Our algorithm is also very simple to implement.
Preliminary experimental results show that
it performs well in practice.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/111014.html
##-----------------TITLE------------------------##
Theory Seminar, 14 October 2011
##------------------TEXT------------------------##
CS 269S, Fall 2011: Theory Seminar
DBH 1433


14 October 2011:
Speaker: Maarten Loffler

Title: 
Planar and Poly-Arc Lombardi Drawings



Abstract: 
In Lombardi drawings of graphs, edges are represented as circular
arcs and
the edges incident on vertices have perfect angular resolution.
However,
not every graph has a Lombardi drawing and not every planar graph has
a
planar Lombardi drawing. We introduce k-Lombardi drawings, in which
each
edge may be drawn with k circular arcs; we show that every graph has
a
smooth 2-Lombardi drawing and every planar graph has a smooth planar
3-Lombardi drawing. We also investigate related topics connecting
planarity and Lombardi drawings.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020524.html
##-----------------TITLE------------------------##
Theory Seminar,  24 May 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


24 May 2002:
Title: Visibility Queries and Maintenance in Simple Polygons,
by B. Aronov, L.J. Guibas, M. Teichmann, and L. Zhang,
Discrete & Computational Geometry Vol. 27, 2002, pp.461-483.
(Preliminary version in Lecture Notes in CS, 1533, pp. 357-367, 1998.)

Speaker: Javid Huseynov


Abstract:
The authors explore novel aspects of visibility for stationary and moving
points inside a simple polygon P. They provide a mechanism for expressing
the visibility polygon from a point as the disjoint union of
logarithmically many canonical pieces using a quadratic-space data
structure. This results in a query time proportional to the size of
visibility polygon but without cubic space overhead of earlier methods.

By exploring the connection between visibility polygons and shortest-path
trees, the authors obtained a kinetic algorithm that can track the visibility
polygon as the viewpoint moves along polygonal paths inside a simple
polygon. The combination of the static and kinetic algorithms leads to a
new static algorithm in which the authors trade off space for increased
overhead in the query time.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020607.html
##-----------------TITLE------------------------##
Theory Seminar, 7 June 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


7 June 2002:
Title: Online Strategies for Power Savings

Speaker: Sandra Irani


Abstract:
This talk is a survey of recent work in power saving strategies.
We address two different mechanisms for saving power. The first
is the ability to transition a device or system into a sleep state
if it is idle. The trade-off is that a fixed amount of energy is
needed to transition the device back into an active state in which
it can begin to process jobs. We extend previous work on this problem
and develop online algorithms for devices with multiple levels of
sleep states. Each sleep state has a different power consumption level
and different cost in transitioning back to the active state.

The second way in which power savings can be achieved is by varying
the speed at which jobs are run. We utilize a power consumption curve 
which indicates the power consumption level given a particular speed. 
The problem is to schedule arriving jobs in a way that minimizes total
energy use so that each job is completed by its deadline. Our work 
addresses systems whose speed can be varied and which have a sleep state. 
We devise both offline and online algorithms for this problem.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020503.html
##-----------------TITLE------------------------##
Theory Seminar, 3 May 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


3 May 2002:
Oracles for Distances Avoiding a Link-failure,
by Camil Demetrescu and Mikkel Thorup, SODA 2002.

Speaker: Jonathan Sun


Abstract: Two queries are considered in a directed graph G:
distance(x,y,u,v) that returns the shortest distance from x to y in G
that does not contain edge (u,v); path(x,y,u,v) that returns the
shortest path, if any, from x to y in G that does not contain edge
(u,v). The authors show two oracles, one with query time O(logn) and
space O(n^2 logn) and the other with query time O(1) and space O(n^2.5).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020426.html
##-----------------TITLE------------------------##
Theory Seminar, 26 Apr 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


26 Apr 2002:
A Steady State Model for Graph Power Law, by David Eppstein and Joseph Wang

Speaker: Joseph Wang


Power law distribution seems to be an important 
characteristic of web graphs. Several existing web graph models 
generate power law graphs by adding new vertices and non-uniform 
edge connectivities to existing graphs. Researchers have 
conjectured that preferential connectivity and incremental growth 
are both required for the power law distribution. In this paper, 
we propose a different web graph model with power law distribution 
that does not require incremental growth. We also provide a 
comparison of our model with several others in their ability to 
predict web graph clustering behavior.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020531.html
##-----------------TITLE------------------------##
Theory Seminar, 31 May 2002
##------------------TEXT------------------------##
ICS 269, Spring 2002: Theory Seminar


31 May 2002:
Title: Online Facility Location,
by Adam Meyerson. 
IEEE Symposium on Foundations of Computer Science (FOCS) 2001.

Speaker: Matthew Ba Nguyen


Abstract:
The author considers the online version of the facility location problem
where demand points arrive one at a time and facilities must be opened to
mantain them.  The author presents an O(log n)-competitive algorithm and
shows that no algorithm can be O(1)-competitive.  Also, an
O(1)-competitive algorithm is presented when the power of the adversary is
reduced such that each demand point arrives in a random order.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040604.html
##-----------------TITLE------------------------##
Theory Seminar, 4 June 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar
4 June 2004:
Optimal Net Subgraph Problems with Applications 
Danny Z. Chen 
Department of Computer Science and Engineering 
University of Notre Dame 
Notre Dame, IN 46556, USA   



In this talk, we introduce an interesting geometric graph called
multi-column graph in the d-dimensional space (d ≥ 3),
and formulate two related combinatorial optimization
problems called optimal net subgraph problems on such graphs.
Our formulations model a number of applied problems such as
medical image segmentation, surface reconstruction with a given 
topology, and metric labeling.  We prove that the optimal net
subgraph problems on general d-D multi-column graphs
(d ≥ 3) are NP-hard.  For several important special cases of
these problems in d-D (d ≥ 3)
that arise in real applications, we present deterministic
polynomial time algorithms for computing optimal solutions.  
Our algorithmic techniques enable us to achieve optimal solutions
for several applied problems in polynomial time, such as some surface
reconstruction problems in 3-D and 4-D and medical
image segmentation problems in 3-D and 4-D.
It is interesting to note that a previous belief was that 
some of these applied problems were NP-hard, and
the previously best known exact algorithms for these problems, even on 
relatively simple cases, take at least exponential time.
Our approaches can be extended to higher
dimensions and to other more challenging versions.
Experimental results on segmenting real medical images have shown the 
effectiveness and efficiency of our algorithms.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040611.html
##-----------------TITLE------------------------##
Theory Seminar, 11 June 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar
11 June 2004:

Today we will have two speakers.

Jeremy Yu Meng
Computing the Visibility Graph of Points Within a Polygon


This is a presentation of the paper
"Computing the Visibility Graph of Points Within a Polygon,"
by Boaz Ben-Moshe, Olaf Hall-Holt, and Matthew J. Katz, and Joseph Mitchell,
SCG 2004.


Abstract: The authors study the problem of computing the visibility
graph defined by a set P of n points inside a polygon
Q: two points p,q in P are joined by an edge if
the segment pq is contained in Q.



Kevin Wortman
On finding a guard that sees most and a shop that sells most


This is a presentation of the paper
"On Finding a Guard That Sees Most and a Shop That Sells Most,"
by Otfried Cheong, Alon Efrat, and Sariel Har-Peled,
Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete
Algorithms.

Abstract: We present a near-quadratic time algorithm that computes
a point inside a simple polygon P having approximately the
largest visibility polygon inside P, and near-linear time
algorithm for finding the point that will have approximately the
largest Voronoi region when added to an n-point set. We apply
the same technique to find the translation that approximately
maximizes the area of intersection of two polygonal regions in
near-quadratic time.

Due to time constraints I will be focusing on a few select results of
the paper.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040528.html
##-----------------TITLE------------------------##
Theory Seminar, 28 May 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar
28 May 2004:
Retroactive Data Structures

Michael Nelson



This is a presentation of the paper "Retroactive Data Structures" by
Erik D. Demaine, John Iacono, and Stefan Langerman, SODA 2004.   


The authors introduce a new data structuring paradigm called
retroactive data structures.  In these data structures,
the historical sequence of operations performed on the data structure
is not fixed.  They allow the insertion and deletion of
operations at arbitrary past times, subject only to
consistency.  The authors initiate the study of retroactive data
structures by formally defining the model and its variants.  They
show that retroactivity differs from persistence in that efficient
retroactivity is not always achievable, and therefore go on to present
several specific retroactive data structures as well as techniques for
transforming certain classes of data structures into their retroactive
equivalents.  I will present the retroactive model and touch on a
selection of their results.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040423.html
##-----------------TITLE------------------------##
Theory Seminar, 23 April 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar

23 April 2004:
Optimal Power-Down Strategies

John Augustine



We consider the problem of selecting threshold times to transition a 
device to low-power sleep states during an idle period. The two-state 
case in which there is a single active and a single sleep state is a 
continuous version of the ski-rental problem. We consider a generalized 
version in which there is more than one sleep state, each with its own 
power consumption rate and transition costs. We give an algorithm that, 
given a system, produces a deterministic strategy whose competitive 
ratio is arbitrarily close to optimal. We also give an algorithm to 
produce the optimal online strategy given a system and a probability 
distribution that generates the length of the idle period. We also give 
a simple algorithm that achieves a competitive ratio of 5.828 for any 
system.


From: Optimal Power-Down Strategies by John Augustine, Sandy Irani, and 
Chaitanya Swamy. Submitted for publication.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040430.html
##-----------------TITLE------------------------##
Theory Seminar, 30 April 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar
30 April 2004:
Data Structure Forensics

Jonathan (Zheng) Sun



This is a presentation of the paper "Data Structure Forensics" by
Mikhail J. Atallah, Michael T. Goodrich, and Roberto Tamassia,
in submission.

The authors introduce data structure forensics -- techniques for
distributing data structures, so that alterations from an original
version can be detected and specifically identified. They provide a
new reduced randomness construction for nonadaptive combinatorial
group testing, such that for a reasonable
d=o(n1/3log2/3n),
only o(n) bits of storage is needed to detect up to d
alterations.
Then they show that the o(n) bits can be encoded into the
architecture for a class of data structures including binary search
trees, skip lists, arrays, linked lists and hash tables. This solution
uses no storage (except a master key) at the auditor, and adds (not
asymptotically but exactly) no storage to the data structure. The
adversary doesn't even know if the data structure is under auditing.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040514.html
##-----------------TITLE------------------------##
Theory Seminar, 14 May 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar
14 May 2004:
Competitive Generalized Auctions

Matt Nguyen



This is a presentation of the paper "Competitive Generalized Auctions"
by Jason Hartline, Amos Fiat, Andrew Goldberg, and Anna Karlin,
STOC 2002.

The authors describe mechanisms for auctions that are truthful while
guaranteeing no net loss in profit (to the auctioneer).  One such concept
is of being able to cancel an auction.  These cancelable auctions have the
property that if the revenue collected does not meet a certain
predetermined criteria, then the auction can be cancelled and still remain
truthful.  My talk will focus on these cancelable auctions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/040416.html
##-----------------TITLE------------------------##
Theory Seminar, 16 Apr 2004
##------------------TEXT------------------------##
ICS 269, Spring 2004: Theory Seminar

16 Apr 2004:
Cache-Concious Sorting of Large Sets of Strings with Dynamic Tries

Josiah Carlson


The authors present an algorithm for sorting strings that betters
previously known string sorting algorithms by a factor of at least 2,
for large input sets.  During the presentation, I'll be outlining a few
often-used algorithms for string sorting, provide the algorithm designed
by Sinha and Zobel, and give the findings of their experimental results.

From: Cache-Conscious Sorting of Large Sets of Strings with Dynamic
Tries by Ranjan Sinha and Justin Zobel.  Proceedings from the 5th
Workshop on Algorithm Engineering and Experiments, 2003.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030411.html
##-----------------TITLE------------------------##
Theory Seminar, 11 April 2003
##------------------TEXT------------------------##
ICS 269, Spring 2003: Theory Seminar


11 April 2003:
Media-on-Demand
Gwendoline Chien


This talk will start by providing an introduction on 
Media-on-Demand and then will
briefly describe some broadcasting protocols that have been proposed.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030418.html
##-----------------TITLE------------------------##
Theory Seminar, 18 April 2003
##------------------TEXT------------------------##
ICS 269, Spring 2003: Theory Seminar


18 April 2003:
Resilience and Load Balancing in Peer to Peer Networks
Amitabha Bagchi


We discuss notions of resilience and load balancing in overlay networks,
specifically peer to peer networks. Some questions that come up are: How
are these notions connected to degree? How does high overlay degree
benefit us if the underlying degree is low?



We look at some of these issues by drawing on their treatment in some
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030502.html
##-----------------TITLE------------------------##
Theory Seminar, 2 May 2003
##------------------TEXT------------------------##
ICS 269, Spring 2003: Theory Seminar


2 May 2003:
Exact algorithms for Exact Satisfiability

Jesper Makholm Byskov



The Exact Satisfiability problem (XSAT) is the variant of the
Satisfiability problem (SAT) in which we are given a formula in
conjunctive normal form and are asked to find a truth assignment to
the variables s.t. EXACTLY one literal in each clause is true. The
Exact 3-Satisfiability problem (X3SAT) is the restriction of XSAT to
formulas with at most three literals per clause.


We are interested in algorithms for these two problems with good
worst-case complexity, i.e. better than the trivial O(2^n) which comes
from trying all possible truth assignments. For XSAT we improve the
running time from O(2^(0.2441*n)) to O(2^(0.2325*n)) and for X3SAT we
improve the running time from O(2^(0.1626*n)) to O(2^(1379*n)).


Our algorithms work by analysing the formula and branching depending
on a number of different cases. As the number of cases is rather
large, I will give an overview of the ideas and only cover some of the
cases in detail.


This is joint work with Bolette Ammitzbøll Madsen and Bjarke
Skjernaa. It has not been published yet, but if you are interested,
lease send me an email at jespermn@ics.uci.edu.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/981009.html
##-----------------TITLE------------------------##
Theory Seminar, 9 Oct 1998
##------------------TEXT------------------------##
ICS 269, Fall 1998: Theory Seminar


October 9, 1998:
Geometric Thickness of Complete
Graphs
Michael Dillencourt, ICS, UC Irvine

We define the geometric thickness  of a
graph to be the smallest number of layers such that we can draw the
graph in the plane with straight-line edges and assign each edge to
a layer so that no two edges on the same layer
cross.  The geometric thickness lies between two
previously studied quantities, the (graph-theoretical) thickness
and the book thickness.  We investigate the
geometric thickness of the family of complete graphs,
Kn.  We show that the geometric
thickness of Kn lies between
ceil( (n/5.646) + 0.342 ) and
ceil( n/4 ), and we give exact values of the geometric
thickness of Kn for n<12 and 
n in {15,16}.

This is joint work with David Eppstein
and Daniel Hirschberg.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/981204.html
##-----------------TITLE------------------------##
Theory Seminar, 04 Dec 1998
##------------------TEXT------------------------##
ICS 269, Fall 1998: Theory Seminar

December 4, 1998:
On Uniquely 3-colorable Graphs II [*]
presented by David Goggin, ICS, UC Irvine

In [**], for each non-negative integer k,
we constructed a connected graph with
(24)2k vertices which is uniquely 3-colorable,
regular with degree k+5, and triangle-free.
Here, for each positive integer n
and each integer r>5,
we construct a connected graph
with (26)n*2(r-5) vertices
which is uniquely 3-colorable, regular with degree r,
and triangle-free.

References:

[*] Chong-Yun Chao, Zhibo Chen.
On Uniquely 3-colorable Graphs II,
Discrete Mathematics, July '98, 259-265.

[**] C.-Y. Chao, Z. Chen. On Uniquely 3-colorable Graphs, Discrete Math.
112 (1993) 21-27.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/981120.html
##-----------------TITLE------------------------##
Theory Seminar, 20 Nov 1998
##------------------TEXT------------------------##
ICS 269, Fall 1998: Theory Seminar


November 20, 1998:
Progress in Applying Computational Methods to Huntington's Disease
Research
Malcolm S. Casale, ICS, UC Irvine

In recent weeks, researchers from several distinct departments
in the University of California, Irvine, have been applying various
computational methods to determine an optimal research protocol for
Huntington's disease. The departments include computer science,
chemistry and the college of medicine plus others that have played
advisory and consulting roles. An overview of this work will be
given, and the talk will then concentrate on two aspects of the
research: (1) development of a computational model of huntingtin
(the HD protein) aggregation, and (2) an "on-line" algorithm for
finding commercially available compounds as experimental controls
and potential therapeutic agents. Time permitting, a novel and
speculative approach to the geometric sampling problem (which may,
or may not, be relevant to the title topic) will be presented.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/981106.html
##-----------------TITLE------------------------##
Theory Seminar, 6 Nov 1998
##------------------TEXT------------------------##
ICS 269, Fall 1998: Theory Seminar


November 6, 1998:
Generation of Well-Formed Parenthesis Strings in Constant
Worst-Case Time
Junyu Peng, ICS, UC Irvine

Proskurowski and Ruskey (J. Algorithms 11(1990))
published a recursive algorithm for generating well-formed
parenthesis strings of length 2n and challenged the reader
to find a loop-free version of their algorithm. We present two
nonrecursive versions of their algorithm, one of which generates
each string in O(n) worst-case time and requires space for
only O(1) extra integer variables, and the other generates each
string in O(1) worst-case time and uses O(n) extra
space.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/981030.html
##-----------------TITLE------------------------##
Theory Seminar, 30 Oct 1998
##------------------TEXT------------------------##
ICS 269, Fall 1998: Theory Seminar


October 30, 1998:
Regression Depth and
Center Points
David Eppstein, ICS, UC Irvine

We show that, for any set of n points in d
dimensions, there exists a hyperplane with regression depth at
least ceiling(n/(d+1)), as had been conjectured by
Rousseeuw and Hubert. Dually, for any arrangement of n
hyperplanes in d dimensions there exists a point that cannot
escape to infinity without crossing at least
ceiling(n/(d+1)) hyperplanes. We also apply our
approach to related questions on the existence of partitions of the
data into subsets such that a common plane has nonzero regression
depth in each subset, and to the computational complexity of
regression depth problems.

This is joint work with Nina Amenta, Marshall Bern and Shang-Hua
Teng.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/981023.html
##-----------------TITLE------------------------##
Theory Seminar, 23 Oct 1998
##------------------TEXT------------------------##
ICS 269, Fall 1998: Theory Seminar


October 23, 1998:
Reconstructing Binary Sequences by the Minimum Number of their
Subsequences
Dan Hirschberg, ICS, UC Irvine

The problem of reconstructing an arbitrary binary sequence of
length n by the minimum number of its subsequences of length
n - t is considered. For any t the
corresponding minimum number of subsequences which are sufficient
to reconstruct uniquely an unknown sequence is found. An algorithm
for reconstructing sequences by this minimum number of their
subsequences based on majority and threshold functions is
presented. As a preliminary result, for any t the maximum
number of sequences of length n - t of a binary
sequence of length n is found. In discussing general
applicability and extensibility of algorithms for this problem,
bounds are given on the average number of sequences of length 
n - t of a binary sequence of length n.

The presentation consists of work due to Vladimir I.
Levenshtein* plus extensions due to Dan Hirschberg.

* V. I. Levenshtein, "Reconstructing binary sequences
by a minimum number of their subsequences or supersequences of a
given length," Proc. 5th Int. Wkshop on Alg. and Combinatorial
Coding Theory, Sozopol, Bulgaria, Jun 1-7, 1996, pp.
176-183.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150220.html
##-----------------TITLE------------------------##
Theory Seminar, February 20, 2015
##------------------TEXT------------------------##
Winter 2015: Theory Seminar
ICS, Room 243, 1:00pm


February 20, 2015:

The Simplex Algorithm is NP-Mighty


Will Devanny



We propose to classify the power of algorithms by the complexity of the
problems that they can be used to solve. Instead of restricting to the
problem a particular algorithm was designed to solve explicitly, however, we
include problems that, with polynomial overhead, can be solved ‘implicitly’
during the algorithm’s execution. For example, we allow to solve a decision
problem by suitably transforming the input, executing the algorithm, and
observing whether a specific bit in its internal configuration ever switches
during the execution.
  We show that the Simplex Method, the Network Simplex Method (both with
  Dantzig’s original pivot rule), and the Successive Shortest Path Algorithm
  are NP-mighty, that is, each of these algorithms can be used to solve any
  problem in NP. This result casts a more favorable light on these
  algorithms’ exponential worst-case running times. Furthermore, as a
  consequence of our approach, we obtain several novel hardness results. For
  example, for a given input to the Simplex Algorithm, deciding whether a
  given variable ever enters the basis during the algorithm’s execution and
  determining the number of iterations needed are both NP-hard problems.
  Finally, we close a long-standing open problem in the area of network flows
  over time by showing that earliest arrival flows are NP-hard to obtain.


  This paper was presented at SODA 2015.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150306.html
##-----------------TITLE------------------------##
Theory Seminar, March 6, 2015
##------------------TEXT------------------------##
Winter 2015: Theory Seminar
ICS, Room 243, 1:00pm


March 6, 2015:

Fixed-Parameter Tractable Algorithms for Crossing Minimization in Book Embeddings


Michael Bannister



Abstract: We investigate exact crossing minimization problems for 1-page and 2-page book drawings of graphs. In both 1-page and 2-page book drawings, the vertices of the graph are drawn in the xy-plane along the x-axis and the edges are drawn as continuous curves that do not cross the x-axis. In 1-page book drawings, the edges must be drawn in the upper half-plane (y > 0), whereas in 2-page drawings the edges may also be drawn in the lower half-plane (y < 0). To improve the readability of such drawings, we would like to minimize the number of crossing between edges. These optimization problems are known to be NP-hard and therefore are unlikely to have polynomial-time algorithms. However, we show that for graphs that are "tree-like", polynomial-time algorithms do exist for 1-page and 2-page crossing minimization. In particular, we show that these crossing minimization problems are fixed-parameter tractable with respect to treewidth and the k-almost-tree parameter.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150227.html
##-----------------TITLE------------------------##
Theory Seminar, February 27, 2015
##------------------TEXT------------------------##
Winter 2015: Theory Seminar
ICS, Room 243, 1:00pm


February 27, 2015:

The Speed of Evolution


Jenny Lam



In this paper we study the mixing times of a Wright- Fisher model
for an
asexual population. Typically, such models consist of a population
of
several genotypes where each genotype reproduces at a different
rate,
genotypes can mutate to each other, and the population is subject
to the
evolutionary pressure of selection. While such models have been
used
extensively to study different types of populations, recently,
such
stochastic finite population models have been used to model viral
populations with the goal of understanding the effect of mutagenic
drugs. Here, the time it takes for the population to reach a
steady
state is important both for carrying out simulations and to
determine
treatment strength and duration. Despite their importance, and
having
been widely studied, there has been a lack of such bounds for many
relevant ranges of model parameters even for the case of two
genotypes
(single locus); primarily due to their difficulty, see [Eth11].
The main result of this paper is an analytical bound on the mixing
time
of a Wright-Fisher model for two genotypes when there is no
restriction
on the mutation rate or the fitness. Our bound explains (in this
setting) the observed phenomena that the mixing time is fast
(logarithmic in the state space) for any fitness parameter when
the
mutation rate is high enough. Theoretically, we overcome the
difficulty
in proving mixing time bounds by showing that different forces are
responsible for the rapid mixing depending on how close it is to
its
steady state. If the chain is sufficiently close to its stationary
distribution, an intricate coupling argument establishes rapid
mixing.
To show that the chain reaches this state quickly, we connect it
to the
convergence time of a deterministic model for evolution proposed
by
Eigen. We are hopeful that our insights and techniques will be
helpful
in establishing rigorous bounds for more general versions of this
model.



  This paper is by Nisheeth K. Vishnoi from SODA 2015
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/150213.html
##-----------------TITLE------------------------##
Theory Seminar, February 13, 2015
##------------------TEXT------------------------##
Winter 2015: Theory Seminar
ICS, Room 243, 1:00pm


February 13, 2015:

Geometric $k$-Shortest Paths


Tim Johnson



We consider the problem of computing $k$ shortest paths in a
two-dimensional environment with polygonal obstacles, where the $j$th
path, for $j$ in $[1,k]$, is the shortest path in the free space that is
also homotopically distinct from each of the first $j-1$ paths. In fact,
we consider a more general problem: given a source point $s$, construct a
partition of the free space, called the $k$th shortest path map ($k$-SPM),
in which the homotopy of the $k$ shortest paths in a region has the same
structure.


This is a paper from SODA 2015 by Sylvester Eriksson-Bique, John Hershberger, Valentin
Polishchuk,
Bettina Speckmann, Subhash Suri, Topi Talvitie, Kevin Verbeekk, and Hakan Yildiz
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120525.html
##-----------------TITLE------------------------##
Theory Seminar, May 25, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420, 1pm


May 25, 2012:

Tight bounds for dynamic convex hull queries (again)

Joe Simons

The dynamic convex hull problem was recently solved in
O(lg n) time per
operation, and this result is best possible in models of computation
with bounded branching (e.g., algebraic computation trees). From a data
structures point of view, however, such models are considered
unrealistic because they hide intrinsic notions of information in the
input. In the standard word-RAM and cell-probe models of computation, we
prove that the optimal query time for dynamic convex hulls is, in fact,
Θ(lg n / lg lg n), for
polylogarithmic update time (and word
size). Our lower bound is based on a reduction from the marked-ancestor
problem, and is one of the first data structural lower bounds for a
nonorthogonal geometric problem. Our upper bounds follow a recent trend
of attacking nonorthogonal geometric problems from an
information-theoretic perspective that has proved central to advanced
data structures. Interestingly, our upper bounds are the first to
successfully apply this perspective to dynamic geometric data
structures, and require substantially different ideas from previous work.


(Based
on a
paper by Demaine and Pǎtraşcu in SoCG 2007.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120518.html
##-----------------TITLE------------------------##
Theory Seminar, May 18, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420


May 18, 2012:

Authenticated Data Structures for Graph and Geometric Searching

Lowell Trott

Authenticated data structures provide cryptographic proofs that their
answers are as accurate as the author intended, even if the data
structure is maintained by a remote host. We present techniques for
authenticating data structures that represent graphs and collections of
geometric objects. In our model, a data structure maintained by a
trusted source is mirrored at distributed directories that answer
queries and provide proof of correctness. Our work has applications to
the authentication of network management systems and geographic
information systems.


(Based
on a
paper by
Michael T. Goodrich, Roberto Tamassia, Nikos Triandopoulos, and Robert
Cohen in RSA 2003.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120420.html
##-----------------TITLE------------------------##
Theory Seminar, April 20, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420


April 20, 2012:

How to Meet Asynchronously (Almost) Everywhere 

Paweł
Pszona


Two independent agents (robots) start in arbitrary nodes of an unknown
connected graph (finite or infinite). Agents select their own routes
(graph edges they want to take), but their movement along an edge is
governed by an adversary.  The authors give a deterministic algorithm
that guarantees the agents will eventually meet at some point of the
graph (not necessarily a vertex).  The result is extended to a geometric
scenario (on a plane).


(Based on a paper in
SODA 2010 by Jurek Czyzowicz, Arnaud Labourel, and Andrzej Pelc.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120608.html
##-----------------TITLE------------------------##
Theory Seminar, June 8, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420, 1pm


June 8, 2012:

Windows into Relational Events: Data Structures for Contiguous
Subsequences of Edges

Michael Bannister

We consider the problem of analyzing social network data sets in which
the edges of the network have timestamps, and we wish to analyze the
subgraphs formed from contiguous subintervals of these timestamps. We
provide data structures for these problems that use near- linear
preprocessing time, linear space, and sublogarithmic query time to
handle queries that ask for the number of connected components, number
of components that contain cycles, number of vertices whose degree
equals or is at most some predetermined value, number of vertices that
can be reached from a starting set of vertices by time-increasing paths,
and related queries.


(Joint work with Christopher DuBois, David Eppstein, and Padhraic Smyth)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120601.html
##-----------------TITLE------------------------##
Theory Seminar, June 1, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420, 1pm


June 1, 2012:

Signatures of Correct Computation

Charalampos
Papamanthou, UC Berkeley

We introduce Signatures of Correct Computation (SCC), a new
model for verifying computation in cloud settings. In an SCC model, a
trusted source outsources a function f to an untrusted
server, along with a public key for that function. The server
can then produce a succinct signature σ vouching for the
correctness of the computation of f, i.e., that some result v is
indeed the correct outcome of the function f evaluated on some point
a. Moreover, the signature verification must take
asymptotically less time than evaluating the function f. We
construct efficient SCC schemes supporting expressive manipulations
over multivariate polynomials, including polynomial evaluation and
differentiation, and we prove that our constructions are
adaptively-secure in the random oracle model.


We also show that signatures of correct computation imply
Publicly Verifiable Computation (PVC), a model recently
introduced by the research community. Roughly speaking, in the SCC
model, any client can verify the signature σ and be
convinced of some computation result, whereas in the PVC model only
the client that issued a query (or anyone who trusts this client) can
verify that the server returned a valid signature (proof). Our
techniques can be readily adapted to construct publicly verifiable
computation schemes with adaptive security and without the
random oracle model.


(Joint work with Elaine Shi of UC Berkeley and University of Maryland
and Roberto Tamassia of Brown University)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120511.html
##-----------------TITLE------------------------##
Theory Seminar, May 11, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420


May 11, 2012:

A constructive proof of the general Lovász Local Lemma

Jack Cheng

The Lovász Local Lemma is a powerful result that asserts the
existence of a certain object which avoids a set of "bad" events.
Earlier proofs for the lemma were nonconstructive, so while the
existence is guaranteed, it is oftentimes unclear how the actual
instance could be constructed.  While numerous progress were made on
the problem  since Jozsef Beck's breakthrough result in 1991 (which
solved it for a relaxation of the lemma), a constructive proof for the
general Lovász Local Lemma was only discovered recently (2009) by
Moser and Tardos.  We present Moser's very simple algorithm and the
beautiful proof of its correctness.


(Based on a paper by
Robin A. Moser in STOC 2009.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120427.html
##-----------------TITLE------------------------##
Theory Seminar, April 27, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420


April 27, 2012:

Incremental Cycle Detection, Topological Ordering, and Strong Component
Maintenance

Ross Wagner


This paper deals with maintaining the topological order for a directed
n-vertex acyclic graph as arcs are added to the graph as well as
detecting a cycle when one is created by adding a new arc.  There are
two algorithms described in the paper, the first dealing with m
arc additions in O(m3/2) time.  This algorithm
improves the previous best bound by a logarithmic factor for sparse
networks and is within a constant factor among other algorithms
satisfying a natural locality property.  The second algorithm has an
upper bound of O(n5/2) time and a lower bound of
Ω(n22√2 log n)
obtained by relating its performance to a generalization of
the k-levels problem of combinatorial geometry.


(Based on a paper in
ACM Transactions on Algorithms 2012 by Bernhard Haeupler, Telikepalli
Kavitha, Rogers Mathew, Siddhartha Sen, and Robert Endre Tarjan.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120504.html
##-----------------TITLE------------------------##
Theory Seminar, May 4, 2012
##------------------TEXT------------------------##
CS 269S, Spring 2012: Theory Seminar
Bren Hall, Room 1420


May 4, 2012:

Commutative version of the local Hamiltonian problem and common
eigenspace problem

Jenny Lam


We study the complexity of a problem "Common Eigenspace": verifying
consistency of eigenvalue equations for composite quantum systems. The
input of the problem is a family of pairwise commuting Hermitian operators
H1, ..., Hr on a
Hilbert space (Cd)⊗n and a
string of real numbers λ1, ...,
λr. The problem is to determine whether
the common eigenspace specified by equalities Ha
|ψ> = λa |ψ> for a = 1,
..., r has a positive dimension. We consider two cases:
all operators Ha
are k-local;all operators Ha are
factorized.It can be easily shown that both problems belong to the class QMA,
a quantum analogue of NP, and that some NP-complete problems can be
reduced to either (i) or (ii). A non-trivial question is whether the
problems (i) or (ii) belong to NP? We show that the answer is positive
for some special values of k and d. Also we prove that the
problem (ii) can be reduced to its special case, such that all operators
Ha are factorized projectors and
all λa = 0.


(Based on a paper
by Sergey Bravyi and Mikhail Vyalyi in Quantum Inf. and Comp. 2005.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090227.html
##-----------------TITLE------------------------##
Theory Seminar, February 27 , 2009
##------------------TEXT------------------------##
February 27 , Winter 2009: Theory Seminar

1:00pm in 253 ICS
 A Separator Theorem For Planar Graphs


By Richard Lipton and Robert Tarjan 

 Presented by Lowell Trott, UC Irvine 



Let G be any n-vertex planar graph. It will be shown that the vertices  
of G can be partitioned into three sets A,B,C such that no edge joins
a vertex in A with a vertex in B, neither A nor B  contains more than  
2n/3 vertices, and C contains no more that 2v(2n) vertices.  An  algorithm will be
presented which finds such a partition in O(n) time.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090130.html
##-----------------TITLE------------------------##
Theory Seminar, January 30, 2009
##------------------TEXT------------------------##
January 30, Winter 2009: Theory Seminar

1:00pm in 253 ICS
  Computational Complexity of Quantum Systems

Sandy Irani, UC Irvine 



One of the goals of quantum information theory is to understand quantum 
systems from the standpoint of computational complexity. How difficult 
is it to compute fundamental properties of a quantum system or simulate 
a particular system over time? A central idea in understanding these questions 
is quantum entanglement. On one hand, entanglement is a valuable resource that 
enables quantum computation and communication. On the other hand, the fact that 
some quantum systems have bounded entanglement accounts for the success of certain 
computational methods in finding ground states and simulating dynamics. I will 
give an overview of recent work in understanding the complexity of ground states 
of quantum systems both from the perspective of computational complexity and 
from the perspective of quantifying entanglement.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090306.html
##-----------------TITLE------------------------##
Theory Seminar, March 6, 2009
##------------------TEXT------------------------##
March 6, Winter 2009: Theory Seminar

1:00pm in 253 ICS
  Fast Approximation of the Neighborhood Function for Massive Graphs

 Presented by Nate Gertsch, UC Irvine 



The neighbourhood, N(h), is the number of the pairs of nodes
that are within distance h. The neighbourhood function provides useful
information for graphs such as the structure of XML documents, OODBs,
Web graphs, telephone (caller-callee) records, citations graphs, to
name a few. It is very expensive to compute the neighbourhood function
exactly on large graphs. Instead, we propose an algorithm using
approximation counting. Our approximation runs with any amount of
available memory, providing excellent scalability to arbitrarily large
graphs. By applying our approximation algorithm on large real and
synthetic graphs, we find that our approximation algorithm is
significantly faster and more accurate than the best prior
approximation scheme. Our approximation runs over 400 times faster
than the exact computation (with less than a 10% error).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090213.html
##-----------------TITLE------------------------##
Theory Seminar, Fenruary 13, 2009
##------------------TEXT------------------------##
February 13, Winter 2009: Theory Seminar

1:00pm in 253 ICS
 Sudoku as a SAT Problem 

 by Ines Lynce, Joel Ouaknine, 


From the proceedings of the 9th
International Symposium on Artificial Intelligence and Mathematics [2006]

 Presented by Rishab Nithyanand, UC Irvine 



The Sudoku is a famous puzzle whose popularity has grown over the last few
years. I will present the methods proposed in the mentioned paper for
encoding a Sudoku in CNF and then solving the formula using polynomial
time SAT inference rules.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090220.html
##-----------------TITLE------------------------##
Theory Seminar, February 20, 2009
##------------------TEXT------------------------##
February 20, Winter 2009: Theory Seminar

1:00pm in 253 ICS
 Asymptotically Optimal Frugal Colouring

 by Michael Molloy and Bruce Reed 


Appeared in SODA 2009

 Presented by Kevin Wortman, UC Irvine 



We prove that every graph with maximum degree Delta can be properly (Delta +
1)-coloured so that no colour appears more than O(log Delta/ log log Delta)
times in the neighbourhood of any vertex. This is best possible up to
the constant factor in the O(-) term. We also provide an efficient
algorithm to produce such a colouring.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090313.html
##-----------------TITLE------------------------##
Theory Seminar, March 13, 2009
##------------------TEXT------------------------##
March 13, Winter Quarter 2009: Thoery Seminar 
1:00pm in 253 ICS
  External Memory Geometric Data Structures and Their Parallelization 

 Nodari Sitchinava, UC Irvine



I will present an overview of geometric data structures for external memory model and some 
directions in which they can be parallelized.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/090206.html
##-----------------TITLE------------------------##
Theory Seminar, Fenruary 6, 2009
##------------------TEXT------------------------##
February 6, Winter 2009: Theory Seminar

1:00pm in 253 ICS
  A New Approach to Incremental Topological Ordering
 by Michael A. Bender, Jeremy T. Fineman, and Seth Gilbert, appeared in SODA '09.
 Presented by Darren Strash, UC Irvine 



Consider the following problem: We begin with a graph consisting of n 
nodes and zero edges. An adversary adds m edges to the graph, one 
edge at a time. Throughout this process, we would like to maintain 
a topological ordering of the graph. I will discuss a recent paper 
which presents a new algorithm that has a total running time of 
O(n2 log n) for maintaining the topological ordering throughout 
all the edge insertions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980306.html
##-----------------TITLE------------------------##
Theory Seminar, 6 March 1998
##------------------TEXT------------------------##
ICS 269, Winter 1998: Theory
Seminar


6 March 1998:
Algorithms for coloring quadtrees
Brad Hutchings, ICS, UC Irvine

We describe simple linear time algorithms for coloring the
squares of balanced and unbalanced quadtrees so that no two
adjacent squares are given the same color. If squares sharing sides
are defined as adjacent, we color balanced quadtrees with three
colors, and unbalanced quadtrees with four colors; these results
are both tight, as some quadtrees require this many colors. If
squares sharing corners are defined as adjacent, we color balanced
or unbalanced quadtrees with six colors; for some quadtrees, at
least five colors are required.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980206.html
##-----------------TITLE------------------------##
Theory Seminar, 6 February 1998
##------------------TEXT------------------------##
ICS 269, Winter 1998: Theory
Seminar


6 February 1998:
Shortest paths in an arrangement with k line orientations
David Hart, ICS, UC Irvine

Suppose one has a line arrangement in which many lines are
parallel, so that the number of different line orientations is k,
and one wants to find a shortest path from one point on a line in
the arrangement to another such point. Using known techniques one
can find the shortest path in time and space O(n2). We
present an algorithm that can find the shortest path in
O(n+k2) time and space.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/980213.html
##-----------------TITLE------------------------##
Theory Seminar, 13 February 1998
##------------------TEXT------------------------##
ICS 269, Spring 1998: Theory Seminar


13 February 1997:
Possible polyglutamine structural motifs for Huntington's
disease
Mac Casale, ICS, UC Irvine

We describe a prototype system (Poly-X) for assisting an expert
user in modeling protein repeats. Poly-X reduces the large number
of degrees of freedom required to specify a protein motif in
complete atomic detail. The result is a small number of parameters
that are easily understood by, and directly under the control of, a
domain expert. The system was applied to the poly-glutamine
(poly-Q) repeat in the first exon of huntingtin, a gene region
implicated in Huntington's disease. We present four poly-Q
structural motifs: two poly-Q beta-sheet motifs (parallel and
anti-parallel) that constitute plausible alternatives to a
previously published poly-Q beta-sheet motif, and two novel poly-Q
helices (alpha-helix and pi-helix). The motifs suggest that there
may be several plausible aggregation structures for intranuclear
inclusion bodies, and may help in the effort to understand the
structural basis for Huntington's disease.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120113.html
##-----------------TITLE------------------------##
Theory Seminar, 13 Jan 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


13 Jan 2012:

On the history of Borsuk and Nelson-Erdos-Hadwiger classical
problems and recent results for lower bounds of Borsuk and chromatic
numbers in Euclidean spaces

Migiyan Kityaev


Abstract: We describe the evolution of Borsuk and Nelson-Erdos-Hadwiger
problems and discuss the combinatorial method that gives new lower bounds
for Borsuk's and chromatic numbers of Euclidean spaces.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120224.html
##-----------------TITLE------------------------##
Theory Seminar, 24 February 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


24 Feb 2012:

Approximate Tree Decompositions of Planar Graphs in Linear Time

Presenter: Jack Cheng
 Frank Kammer and Torsten Tholey in SODA 2012 


Abstract: An algorithm will be presented, that given a planar graph G
with treewidth k on n vertices, computes a tree decomposition of width
O(k) in time O(nk^3log k).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120203.html
##-----------------TITLE------------------------##
Theory Seminar, 3 February 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


3 Feb 2012:

Global Minimum Cuts in Surface Embedded Graphs

Presenter: Lowell Trott
 Jeff Erickson,  Kyle Fo,  Amir Nayyeri 


The authors give a deterministic algorithm to find the minimum cut in a surface-embedded graph in near-linear time. Given an undirected graph embedded on an orientable surface of genus g, our algorithm computes the minimum cut in g^{O(g)}*nloglogn time, matching the running time of the fastest algorithm known for planar graphs, due to .a .cki and Sankowski, for any constant g.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120309.html
##-----------------TITLE------------------------##
Theory Seminar, 9 March 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


9 March 2012:

The Secretary Problem on Graphs

 by Nitish Korula and Martin Pal presented in ICALP 2008
 Presented by Ali Mehrabi


We begin the talk by defining the classical
secretary problem and giving simple instance of the problem. Then we
define a specific variant of the problem and present a constant ratio
online randomized algorithm for it.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120210.html
##-----------------TITLE------------------------##
Theory Seminar, 10 February 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


10 Feb 2012:

An improved 1D area law for frustration-free systems

Presenter: Jenny Lam
 Itai Arad, Zeph Landau, Umesh Vazirani


We present a new proof for the 1D area law for frustration-free systems with a constant gap, which exponentially improves the entropy bound in Hastings' 1D area law, and which is tight to within a polynomial factor. For particles of dimension $d$, spectral gap $\epsilon>0$ and interaction strength of at most $J$, our entropy bound is $S_{1D}\le \orderof{1}X^3\log^8 X$ where $X\EqDef(J\log d)/\epsilon$. Our proof is completely combinatorial, combining the detectability lemma with basic tools from approximation theory. Incorporating locality into the proof when applied to the 2D case gives an entanglement bound that is at the cusp of being non-trivial in the sense that any further improvement would yield a sub-volume law.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120316.html
##-----------------TITLE------------------------##
Theory Seminar, 1 March 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


16 March 2012:

Cole's Parametric Search Technique Made Practical 

 Pawel Pszona


Cole's improvement to the sorting-based parametric search
technique provides an automatic way of saving a logarithmic factor in
the running time of an optimization problem over that achievable using the
standard parametric search method.
Unfortunately, this improvement comes at the expense of making an already
complicated algorithm even more complex; hence, his technique
has been mostly of theoretical interest.
In this paper, we show that the same asymptotic complexity can be achieved
in a way that is both simple and practical (i.e., suitable for actual implementation). 


Joint work with Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120127.html
##-----------------TITLE------------------------##
Theory Seminar, 27 Jan 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


13 Jan 2012:

Certifying Algorithms

Presenter: Joe Simons
Authors: R.M. McConnell, K. Mehlhorn, S. Naher, and P. Schweitzer 


Abstract:
A certifying algorithm is an algorithm that produces, with each output, a certificate or witness
(easy-to-verify proof) that the particular output has not been compromised by a bug. A user of a
certifying algorithm inputs x, receives the output y and the certificate w, and then checks, either
manually or by use of a program, that w proves that y is a correct output for input x. In this way,
he/she can be sure of the correctness of the output without having to trust the algorithm.
We put forward the thesis that certifying algorithms are much superior to non-certifying algorithms,
and that for complex algorithmic tasks, only certifying algorithms are satisfactory.
Acceptance of this thesis would lead to a change of how algorithms are taught and how algorithms
are researched. The widespread use of certifying algorithms would greatly enhance the
reliability of algorithmic software.
We survey the state of the art in certifying algorithms and add to it. In particular, we start a
theory of certifying algorithms and prove that the concept is universal.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/120302.html
##-----------------TITLE------------------------##
Theory Seminar, 2 March 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423


2 March 2012:

Randomized Speedup of the Bellman.Ford Algorithm 

 Micahel Bannister


Abstract: We describe a variant of the Bellman.Ford algorithm for single-source shortest paths in graphs with negative edges but no negative cycles that randomly permutes the vertices and uses this randomized order to process the vertices within each pass of the algorithm. The modification reduces the worst-case expected number of relaxation steps of the algorithm, compared to the previously-best variant by Yen (1970), by a factor of 2/3 with high probability. We also use our high probability bound to add negative cycle detection to the randomized algorithm. Presented at ANALCO 2012.

In addition to the results of the paper, we will discuss using martingale methods of proving high probability bounds.

This is joint work with David Eppstein.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/011102.html
##-----------------TITLE------------------------##
Theory Seminar,2 November 2001
##------------------TEXT------------------------##
ICS 269, Fall 2001: Theory Seminar


2 November 2001:
Partitioning Series Parallel Graphs into v-Excluding Edge Coverings

Zheng Sun
     

Minimum edge covering is a well studied problem in graph theory. A relevant
problem is to partition a graph into as many disjoint edge
coverings as possible. Generally it is hard to get a lower bound of
the second problem on any class of graphs. But if we loosen the constraint of
'edge covering' by allowing one vertex not covered, there come some
interesting results.

We call a set of edges covering all vertices except $v$ a $v$-excluding edge
covering and denote it by $C(v)$. Then we show that a serial parallel graph
can be partitioned into $\kappa^{\prime}$ disjoint $C(v)$'s, where
$\kappa^{\prime}$ is the edge connectivity and $v$ is arbitrary. Furthermore,
though we can't make a formal conjection, we hope that planar graphs also
have such partitions with cardinality $\kappa^{\prime}$. And this proposition
on planar graph is stronger than the 4-Color Theorem.

Our talk will focus on an algorithmic proof on serial parallel graphs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/011019.html
##-----------------TITLE------------------------##
Theory Seminar,19 October 2001
##------------------TEXT------------------------##
ICS 269, Fall 2001: Theory Seminar


19 October 2001:
TIME SEPARATION OF EVENTS


Ravindra Jejurikar
     

        The problem of time separation of events is an important
problem in interface timing verification. Propagation delays 
are specified as a time bound (upper & lower bound) due to 
manufacturing and environmental changes. 
        Three types of constraints are required in modelling 
the properties of a circuit viz. max (AND gate), min (OR gate) 
and linear (imposed constraints).  Computing the maximum separations 
under these constraints is discussed in the talk. 


         We restrict ourselves to ACYCLIC constraint graphs.
It is known that the problem can be solved in polynomail time
in  the presence of only a single type of constraint. The problem
is NP-Complete when both max and min type constraints are present.
The complexity of the problem with max and linear constraint 
is yet unknown (min + linear is dual of max - linear).  It is conjectured 
that it can be solved in polynomial time. We have studied the best known 
algorithm( by Yen) which is conjectured to run in polynomial time.
We are working on some approaches to have a tight bound on the 
algorithm and to verify the posed conjecture for max-linear constraint 
problem.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961004.html
##-----------------TITLE------------------------##
Theory Seminar, 3 Oct 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


4 Oct 1996:
Geometric Graph Coloring
David Eppstein, ICS, UC Irvine

I will talk about some problems in geometric
graph coloring. The most famous of these is the open
"Hadwiger-Nelson Problem" asking for the maximum chromatic number
of a graph that can be embedded in the plane so that all edges are
exactly one unit long. I'll also discuss some of my recent work on
coloring line
arrangements and quadtrees, and describe another open question
about Penrose
tilings.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961115.html
##-----------------TITLE------------------------##
Theory Seminar, 15 Nov 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


15 Nov 1996:
BSP Trees: From Introduction to New Results
Jason Cahill, ICS, UC Irvine

I have always been fascinated by visibility problems arising in
both computational geometry and computer graphics. In computer game
development, an area I watch fervently, we have seen an enormous
growth in the number and type of 3D entertainment products. The
quality of these titles are often judged not just by their
entertainment value, but also on the sheer performance of their
graphics engine. While inexpensive 3D hardware is capable of
rasterizing (or drawing) more polygons than ever before, a basic
problem still remains: How do we represent complex 3D worlds for
efficient rendering. The BSP tree proves to be a very practical
data-structure for performing visibility amongst static data sets,
when given an arbitrary viewing position. As a result, it has been
used by all of the best 3D entertainment products to date.

The focus of my talk will begin with a introduction to
general-case BSP trees, and we will see how these magnificent
structures can be used to store models which can then be
depth-sorted and rasterized in linear time. From here, I will turn
my discussion to a new result from the FOCS '96 Proceedings, which
examines the construction of BSP trees when we are confined to 2D
rectangles in axis-aligned 3D space.

(Based on Material By: Foley, et al. [Computer Graphics:
Principles and Practice 2nd Ed.], Abrash [a talk at CGDC '96: the
Computer Game Developer's Conference], and Agarwal, Grove, Murali,
and Vitter [FOCS '96: "BSP Trees for Fat Rectangles"])
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961101.html
##-----------------TITLE------------------------##
Theory Seminar, 1 Nov 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


1 Nov 1996:
Near-Optimal Parallel Prefetching and Caching
Dan Halem, ICS, UC Irvine

Recently there has been a great deal of interest in the
operating systems research community in prefetching and caching
data from parallel disks, as a technique for enabling serial
appliications to improve I/O performance. We consider algorithms
for integrated prefetching and caching in a model with a fixed-size
cache and any number of backing storage devices(which we will call
disks). The integration of caching and prefetching with a single
disk was previously considered by Cao et al. We show that the
natural extension of their aggressive algorithm to the parallel
disk case is suboptimal by a factor of (nearly) the number of disks
in the worst case. Our main result is a new algorithm, reverse
agressive, with near optimal performance for integrated prefetching
and caching in the presence of multiple disks.

(From a FOCS
'96 paper by Tracy Kimbrel and Anna R. Karlin)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961011.html
##-----------------TITLE------------------------##
Theory Seminar, 11 Oct 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


11 Oct 1996:
Evaluating Geometric Sensitivities at Singular and Non-singular
Points of Variational CAD Models for Design Optimization
Mac Casale, ICS, UC Irvine

Much has been published on the topic of design optimization of
mechanical components. Most of the research has concentrated on the
finite element or boundary element part of the problem. Little
effort has been applied to integrating design optimization with
CAD.

With the introduction of parametric and variational CAD, it is
more desirable than ever to merge these technologies, i.e., to
perform the analysis directly on the CAD geometry and to use the
CAD parameters/dimensions as design variables. In this talk, one
part of the problem is examined, the calculation of geometric
sensitivities on variational CAD geometry. It is shown that for a
well-conditioned set of constraint equations, the geometric
sensitivities are easily obtained by a straight-forward application
of the implicit function theorem.

When the constraint equations become singular, the situation is
more complex. The nature of singularities is explored, and a
method, based on rational transformations that are common in
algebraic curve tracing, is suggested to resolve singular points.
It is shown that the geometric sensitivity is a natural by-product
of the transformation. The talk concludes with an overview of a
symbolic algebra package, coded in Mathematica, that was found to
be useful in the investigation.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961025.html
##-----------------TITLE------------------------##
Theory Seminar, 25 Oct 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


25 Oct 1996:
Polynomial Time Approximation Schemes for Euclidean TSP and Other
Geometric Problems
Joseph Wang, ICS, UC Irvine

Arora presents a polynomial time approximation scheme for
Euclidean TSP in R2 that finds a
(1+epsilon)-approximation tour in time 
nO(1/epsilon). The scheme can be extended to higher
dimensions and other Euclidean problems in which the objective
function is a sum of edge lengths.

(From a FOCS
'96 paper by
Sanjeev
Arora)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961206.html
##-----------------TITLE------------------------##
Theory Seminar, 6 Dec 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


6 Dec 1996:
Reconstructing a Three-Dimensional Model with Arbitrary Errors
Thuan Do, ICS, UC
Irvine

A number of current technologies allow for the determination of
inter-atomic distance information in structures such as proteins
and RNA. Thus, the reconstruction of a three-dimensional set of
points using information about its inter-point distances has become
a task of basic importance in determining molecular structure. But
the measurements are error-prone and some of the entries of the
mesured distance matrix are arbitrarity "corrupted." 

In this paper, the authors present an algorithm which runs in
O(n log n) time, where n is the
number of points, and that algorithm can reconstruct the model of
points P from its distance matrix, which has many errors and
which is also not complete. The algorithm will produce a constant
number of point sets consistent to a given distance matrix 
M, and one of them will be the correct point set P.

(Based on a STOC '96 paper by Bonnie Berger, Jon
Kleinberg, and Tom
Leighton.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/961122.html
##-----------------TITLE------------------------##
Theory Seminar, 22 Nov 1996
##------------------TEXT------------------------##
ICS 269, Fall 1996: Theory Seminar


22 Nov 1996:
The Shape of a Set of Points
Nina Amenta, Xerox
PARC

Reconstruction of the boundary of an object from an unordered set
of points is a fundamental problem in both computer vision and
computer graphics, so it would be nice to have a mathematical
definition of the ``shape'' of a set of points which reflects the
idea that the points lie on a (d - 1)-dimensional
surface. We propose a simple definition for points in the plane,
called the crust. 

We can prove that if a smooth curve is sampled densely enough,
then the crust of the samples approximates the curve, with no
extraneous features. The minimum required sampling density varies
along the curve according to the Local Feature Size (which
is also simply defined), so that areas of less detail can be
sampled less densely.

The crust is easy to compute using Voronoi diagrams in
O(n log n) time (even in practice). We will
demonstrate the computation of crusts on arbitrary point sets.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/010316.html
##-----------------TITLE------------------------##
Theory Seminar, Mar 16, 2001
##------------------TEXT------------------------##
ICS 269, Winter 2001: Theory Seminar


Mar 16 2001:
A presentation of 
"Fast distributed graph coloring in O(Delta) colors," by 
Gianluca De Marco and Andrzej Pelc, from SODA 2001.


Speaker: David Goggin, ICS, UC Irvine

We consider the problem of deterministic distributed coloring of an
n-vertex graph with maximum degree 'delta', assuming that ev ery vertex
knows a priori only its own label and parameters n and 'delta.' The aim is
to get a fast algorithm using few colors.  Linial showed a vertex-coloring
algorithm working in time O(log* n) and using O(Delta^2) colors.  We
improve both the time and the number of colors simultaneously by showing
an algorithm working in time O(log* (n/Delta)) and using O(Delta) colors.
This is the first known O(Delta) vertex coloring distributed algorithm
which can work faster than in polylogarithmic time.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/061201.html
##-----------------TITLE------------------------##
Theory Seminar, Dec 1, 2006
##------------------TEXT------------------------##
CompSci 269S, Fall 2006: Theory Seminar

Dec 1, 2006, in CS 253

Cache-Oblivious Dynamic Programming

Rezaul Alam Chowdhury and Vijaya Ramachandran

Presented by Kevin Wortman


Abstract:

We present efficient cache-oblivious algorithms for several
fundamental dynamic programs. These include new algorithms with
improved cache performance for longest common subsequence (LCS), edit
distance, gap (i.e., edit distance with gaps), and least weight
subsequence. We present a new cache-oblivious framework called the
Gaussian Elimination Paradigm (GEP) for Gaussian elimination without
pivoting that also gives cache-oblivious algorithms for Floyd-Warshall
all-pairs shortest paths in graphs and 'simple DP', among other
problems.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/061103.html
##-----------------TITLE------------------------##
Theory Seminar, Nov 3, 2006
##------------------TEXT------------------------##
CompSci 269S, Fall 2006: Theory Seminar

Nov 3, 2006, in CS 253

On maximizing welfare when utility functions are subadditive

Authored by Uriel Feige, appeared in STOC 2006

Presented by Matthew Ba Nguyen


Abstract:

The author considers the problem of maximizing welfare when allocating
m items to n players.  In this problem, a feasible
allocation allocates every item to at most one player.
For every player Pi, her utility wi
depends only on the set of items she receives.  The goal is to find a
feasible allocation that maximizes social welfare, that is,
maximizing ∑wi(S).

The author presents a rounding technique that converts a fractional LP
solution to a feasible allocation resulting in a 1/2 approximation.
More importantly the author shows this is true even when utility
functions are subadditive.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/061117.html
##-----------------TITLE------------------------##
Theory Seminar, Nov 17, 2006
##------------------TEXT------------------------##
CompSci 269S, Fall 2006: Theory Seminar

Nov 17, 2006, in CS 253

High-Assurance Searching in Distributed Data Structures

Presented by Michael Nelson


Abstract:

We study the problem of supporting queries in overlay networks
on a dynamic collection of networked hosts in which some fraction of the
hosts may be malicious. We present novel hashing schemes that can be
employed to limit the ability of adversarial nodes to carry out attacks.
When used in conjunction with previous work, our scheme yields a
distributed hash table that behaves near-optimally in the absence of
malicious nodes and efficiently in the presence of malicious nodes.
This talk is based on the joint work of Michael T. Goodrich, Michael J. 
Nelson, Jonathan Z. Sun, Roberto Tamassia, and Nikos Triandopoulos.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/061013.html
##-----------------TITLE------------------------##
Theory Seminar, Oct 13, 2006
##------------------TEXT------------------------##
CompSci 269S, Fall 2006: Theory Seminar

Oct 13, 2006, in CS 253

Simultaneous Source Location problem on Trees

Presented by Josiah Carlson


Abstract:

This short talk will cover some preliminaries to the Simultaneous Source
Location problem on Trees, as well as a few variant solutions that
brings us to the currently known best solution to the problem.  The new
algorithm significantly improves both space and time bounds in the
general case to be within a log factor of the balanced case.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/061020.html
##-----------------TITLE------------------------##
Theory Seminar, Oct 20, 2006
##------------------TEXT------------------------##
CompSci 269S, Fall 2006: Theory Seminar

Oct 20, 2006, in CS 253

Guards Placement for Wireless Localization

Presented by Nodari Sitchinava


Abstract:

This is continuation of the topic presented last winter.
New results that were achieved over the summer will be presented.
In particular, the tight bound for orthogonal polygons
and an improved proof for the upper bound for arbitrary polygons.

This is joint work with Michael Goodrich and David Eppstein.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130208.html
##-----------------TITLE------------------------##
Theory Seminar, February 8, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


February 8, 2013:

Morphing planar graph drawings with a polynomial number of steps


Paweł Pszona



In a follow-up to my talk from last quarter,
I will present an algorithm for computing a discrete
planar morph between two straight-line drawings of a graph.
This time, the algorithm maintains straight-line edges at all times.


(Based on a paper from SODA'13 by Alamdari, Angelini, Chan, Di
  Battista, Frati, Lubiw, Patrignani, Rosellini, Singla, and Wilkinson.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130308.html
##-----------------TITLE------------------------##
Theory Seminar, March 8, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


March 8, 2013:

Kinetic Data Structures for All Nearest Neighbors and Closest Pair in
the Plane


Joe Simons



This paper presents a kinetic data structure (KDS) for solutions to
the all nearest neighbors problem and the closest pair problem in the
plane. For a set P of n moving points where the trajectory
of each
point is an algebraic function of constant maximum degree s, our
kinetic algorithm uses O(n) space
and O(n log n) preprocessing
time and processes
O(n2 β2s + 2(n)2 log n)
events in amortized O(log n) time per event, where
βs(n) is an
extremely slow growing function. In terms of the KDS performance
criteria, our KDS is efficient, responsive (in an amortized sense),
compact, and local (on average).

Our deterministic kinetic algorithm improves by
an O(log2 n)
factor the previous randomized kinetic algorithm by Agarwal, Kaplan,
and Sharir. The improvement is obtained by using a new sparse graph
representation, the Pie Delaunay graph, to reduce the problem to
one-dimensional range searching, as opposed to the two-dimensional
range searching in the previous work. Their KDS is efficient,
responsive (in an amortized sense), and compact, but it is not local.


(Based
on a paper by Z. Rahmati, V. King, and S. Whitesides,
to appear at the 29th ACM Symposium on Computational Geometry, SoCG 2013.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130222.html
##-----------------TITLE------------------------##
Theory Seminar, February 22, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


February 22, 2013:

Parameterized Complexity of 1-Planarity


Michael Bannister



We consider the problem of finding a 1-planar drawing for a general
graph, where a 1-planar drawing is a drawing in which each edge
participates in at most one crossing. Since this problem is known to be
NP-hard we investigate the parameterized complexity of the problem with
respect to the vertex cover number, tree-depth, and cyclomatic
number. For these parameters we construct fixed-parameter tractable
algorithms. However, the problem remains NP-complete for graphs of
bounded bandwidth, pathwidth, or treewidth.


(Based on joint work with Sergio Cabello and David Eppstein.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130301.html
##-----------------TITLE------------------------##
Theory Seminar, March 1, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


March 1, 2013:

Max flows in O(nm) time, or better


Will Devanny



We present improved polynomial time algorithms for the max flow problem
defined on a network with n nodes and m arcs. We show how
to solve the max flow problem in O(nm) time, improving upon the
best previous algorithm due to King, Rao, and Tarjan, who
solved the max flow problem in
O(nm logm/(n log n) n)
time. In the case that m = O(n), we
improve the running time to O(n2/log n).
We further improve the running time in the case that
U* = Umax/Umin
is not too large, where Umax denotes the largest
finite capacity and Umin denotes the smallest non-zero
capacity. If
log(U*) = O(n1/3 log−3 n),
we show how to solve the max flow problem in
O(nm/log n) steps.
In the case that
log(U*) = O(logk n)
for some fixed positive integer k, we show how to solve the
max flow problem in Õ(n8/3) time. This latter
algorithm relies on a subroutine for fast matrix multiplication.


(Based
on a
preprint by James B. Orlin.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130215.html
##-----------------TITLE------------------------##
Theory Seminar, February 15, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


February 15, 2013:

Criticality without frustration for quantum spin-1 chains


Jenny Lam



Frustration-free (FF) spin chains have a property that their ground
state minimizes all individual terms in the chain Hamiltonian. We ask
how entangled the ground state of a FF quantum spin-s chain with
nearest-neighbor interactions can be for small values
of s. While FF spin-1/2 chains are known to have unentangled
ground states, the case s = 1 remains less explored. We
propose the first example of a FF translation-invariant spin-1 chain
that has a unique highly entangled ground state and exhibits some
signatures of a critical behavior. The ground state can be viewed as the
uniform superposition of balanced strings of left and right parentheses
separated by empty spaces.  Entanglement entropy of one half of the
chain scales as (1/2) log n + O(1),
where n is the number of 2 spins. We prove that the energy gap
above the ground state is polynomial in 1/n. The proof relies on
a new result concerning statistics of Dyck paths which might be of
independent interest.


(Based on a paper
in Phys. Rev. Lett. 2012 by Sergey Bravyi, Libor Caha, Ramis
Movassagh, Daniel Nagaj, and Peter Shor.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130118.html
##-----------------TITLE------------------------##
Theory Seminar, January 18, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


January 18, 2013:

A New Property and a Faster Algorithm for Baseball Elimination


Edwin Solares

In the baseball elimination problem, there is a league consisting of n
teams. At some point during the season, team i
has wi wins and gij games
left to play against team j. A team is eliminated if it
cannot possibly finish the season in first place or tied for first
place. The goal is to determine exactly which teams are eliminated. The
problem is not as easy as many sports writers would have you believe, in
part because the answer depends not only on the number of games won and
left to play but also on the schedule of remaining games. In the 1960's,
Schwartz showed how to determine whether one particular team is
eliminated using a maximum flow computation.  This paper indicates that
the problem is not as difficult as many mathematicians would have you
believe. For each team i, let gi denote
the number of games remaining. We prove that there exists a
value W such that team i is eliminated if and only if
wi + gi < W.
Using this surprising fact, we can determine all eliminated teams in
time proportional to a single maximum flow computation in a graph
with n nodes; this improves upon the previous best known
complexity bound by a factor of n.


(Based
on a
paper by Kevin D. Wayne in SODA 1999 and SIAM
J. Discrete Math. 2001)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130315.html
##-----------------TITLE------------------------##
Theory Seminar, March 15, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


March 15, 2013:

Windows into Geometric Events: Data Structures for Time-Windowed
Querying of Temporal Point Sets


Lowell Trott



We study geometric data structures for sets of point-based temporal
events, such as geo-tagged scientific observations, sporting actions, or
disaster responses, so as to answer real-time time-windowed queries,
each of which is specified by a range of event times,
[t1,t2], and a
geometric question to be answered for the contiguous subsequence of
point events with time stamps in this range. In particular, we consider
time-windowed queries for skylines in ℝd and
convex hulls in ℝ2. For
skyline problems, we provide a data structure using near-linear space
and preprocessing that can report the skyline in time proportional to
its size. For convex hull problems, we provide a data structures using
near-linear space and preprocessing that can in polylogarithmic time
answer various convex hull queries, including gift wrapping, hull
reporting, tangent finding, linear programming, line decision, line
stabbing, membership, and containment.


(Joint work with Michael J. Bannister, William E. Devanny, Michael
T. Goodrich, and Joseph A. Simons)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130125.html
##-----------------TITLE------------------------##
Theory Seminar, January 25, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


January 25, 2013:

Anonymous Card Shuffling and its Applications to Parallel Mixnets


Mike Goodrich


We study the question of how to shuffle n cards when faced
  with an opponent who knows the initial position of all the
  cards and can track every card when permuted, except
  when one takes K < n cards at a time and
  shuffles them in a private buffer “behind your back,”
  which we call buffer shuffling. The problem arises naturally in
  the context of parallel mixnet servers as well as other security
  applications. Our analysis is based on related analyses of
  load-balancing processes. We include extensions to variations that
  involve corrupted servers and adversarially injected messages, which
  correspond to an opponent who can peek at some shuffles in the buffer
  and who can mark some number of the cards. In addition, our analysis
  makes novel use of a sum-of-squares metric for anonymity, which leads
  to improved performance bounds for parallel mixnets and can also be
  used to bound well-known existing anonymity measures.

(Joint work with Michael Mitzenmacher from ICALP 2012)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/130201.html
##-----------------TITLE------------------------##
Theory Seminar, February 1, 2012
##------------------TEXT------------------------##
CS 269S, Winter 2012: Theory Seminar
Bren Hall, Room 1423, 1pm


February 1, 2013:

Coordination of Groups of Mobile Autonomous Agents Using Nearest Neighbor Rules


Gio Borje



In a recent Physical Review Letters article, Vicsek et al. propose a
simple but compelling discrete-time model of n autonomous agents
(i.e., points or particles) all moving in the plane with the same
speed but with different headings. Each agent's heading is updated
using a local rule based on the average of its own heading plus the
headings of its "neighbors". In their paper, Vicsek et al. provide
simulation results which demonstrate that the nearest neighbor rule
they are studying can cause all agents to eventually move in the same
direction despite the absence of centralized coordination and despite
the fact that each agent's set of nearest neighbors change with time
as the system evolves. This paper provides a theoretical explanation
for this observed behavior. In addition, convergence results are
derived for several other similarly inspired models. The Vicsek model
proves to be a graphic example of a switched linear system which is
stable, but for which there does not exist a common quadratic Lyapunov
function.

(Based
on a
paper by Jadbabaie, Lin, and Morse in the IEEE Conference on
Decision and Control, 2002, and IEEE Transactions on
Automatic Control, 2003. If time permits, Gio may also
discuss some related results from Natural Algorithms by Bernard
Chazelle.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100115.html
##-----------------TITLE------------------------##
Theory Seminar, January 15, 2010
##------------------TEXT------------------------##
January 15, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
   
An Overview of Techniques for Provable Data Possession

 Rishab Nithyanand, UC Irvine 


Presenting a paper by Ateniese et al., from CCS 2007


Abstract: 
Provable data possession (PDP) allows a client to efficiently
verify that an untrusted server possesses some data that was
outsourced to
it by a client.

In this talk, I will present the work of Ateniese et al. (CCS 2007),
which
was the first paper in the area to formalize the PDP framework and
model.
If time permits, I will move on to talking about the more recent
paper by
Erway et al. (CCS 2009) which introduces the concept of verification
of
dynamic updates in outsourced data (Dynamic PDP).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100226.html
##-----------------TITLE------------------------##
Theory Seminar, February 26, 2010
##------------------TEXT------------------------##
February 26, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
   
Solving the Replacement Paths Problem for Planar Directed Graphs in
O(n log n) Time

 Lowell Trott, UC Irvine 


Presenting a paper by Christian Wulff-Nilsen


Abstract: 
In a graph G with non-negative edge lengths, let P be a
shortest path from a vertex s to a vertex t. We consider
the problem of computing, for each edge e on P , the length
of a shortest path in G from s to t that avoids e. This is
known as the replacement paths problem. We give a linear-
space algorithm with O(n log n) running time for n-vertex
planar directed graphs. The previous best time bound was
O(n log2 n).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100219.html
##-----------------TITLE------------------------##
Theory Seminar, February 19, 2010
##------------------TEXT------------------------##
February 19, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
   
Applications of Forbidden 0-1 Matrices to Search Tree and Path
Compression-Based Data Structures

 Pawel Pszona, UC Irvine 


Presenting a paper by Seth Pettie, from SODA 2010


Abstract: In this paper we improve, reprove, and simplify a variety
of theorems
concerning the performance of data structures based on path
compression and
search trees. We apply a technique very familiar to computational
geometers
but still foreign to many researchers in (non-geometric) algorithms
and data
structures, namely, to bound the complexity of an object via its
forbidden substructures.


To analyze an algorithm or data structure in the forbidden
substructure
framework one proceeds in three discrete steps. First, one
transcribes the
behavior of the algorithm as some combinatorial object $M$; for
example, $M$
may be a graph, sequence, permutation, matrix, set system, or tree.
(The size
of $M$ should ideally be linear in the running time.) Second, one
shows that $M$
excludes some forbidden substructure $P$, and third, one bounds the
size of
any object avoiding this substructure. The power of this framework
derives
from the fact that $M$ lies in a more pristine environment and that
upper bounds
on the size of a $P$-free object $M$ may be taken "off the shelf".
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100212.html
##-----------------TITLE------------------------##
Theory Seminar, February 12, 2010
##------------------TEXT------------------------##
February 12, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
 
Deletion Without Rebalancing in Balanced Binary Trees

 Kiran Shivaram, UC Irvine 


Presenting results in a paper by Siddhartha Sen and Robert E.
Tarjan from SODA10.


Abstract: 
We address the vexing issue of deletions in balanced trees.
Rebalancing after a deletion is generally more complicated than
rebalancing after an insertion. Textbooks neglect deletion
rebalancing, and many database systems do not do it. We describe a
relaxation of AVL trees in which rebalancing is done after insertions
but not after deletions, yet access time remains logarithmic in the
number of insertions. For many applications of balanced trees, our
structure offers performance competitive with that of classical
balanced trees. With the addition of periodic rebuilding, the
performance of our structure is theoretically superior to that of
many if not all classic balanced tree structures. Our structure needs
O(log log m) bits of balance information per node, where m
is the number of insertions, or O(log log n) with periodic
rebuilding, where n is the number of nodes. An insertion takes up to
two rotations and O(1) amortized time. Using an analysis that relies
on an exponential potential function, we show that rebalancing steps
occur with a frequency that is exponentially small in the height of
the affected node.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100129.html
##-----------------TITLE------------------------##
Theory Seminar, January 29, 2010
##------------------TEXT------------------------##
January 29, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
 
Retroactive Data Structures

 Joe Simons, UC Irvine 


Presenting a paper by Erik D. Demaine, John Iacono, Stefan Langerman


Abstract: 
We introduce a new data structuring paradigm in which operations can
be performed on a data structure not only in the present, but also in
the past. In this new paradigm, called retroactive data structures,
the historical sequence of operations performed on the data structure
is not fixed. The data structure allows arbitrary insertion and
deletion of operations at arbitrary times, subject only to
consistency
requirements. We initiate the study of retroactive data structures by
formally defining the model and its variants. We prove that, unlike
persistence, efficient retroactivity is not always achievable. Thus,
we present efficient retroactive data structures for queues, doubly
ended queues, priority queues, union-find, and decomposable search
structures.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100122.html
##-----------------TITLE------------------------##
Theory Seminar, January 22, 2010
##------------------TEXT------------------------##
January 22, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
   
Paired Approximation Problems and Incompatible Inapproximabilities

 David Eppstein, UC Irvine 


Presenting his paper from SODA 2010


Abstract: This paper considers pairs of optimization problems that are
defined from a single input and for which it is desired to find
a good approximation to either one of the problems. In many
instances, it is possible to efficiently find an approximation
of this type that is better than known inapproximability
lower bounds for either of the two individual optimization
problems forming the pair. In particular, we find either a
(1 + epsilon)-approximation to (1; 2)-TSP or a
1/epsilon-approximation
to maximum independent set, from a given graph, in linear
time. We show a similar paired approximation result for
finding either a coloring or a long path. However, no such
tradeoff exists in some other cases: for set cover and hitting
set problems defined from a single set family, and for clique
and independent set problems on the same graph, it is not
possible to find an approximation when both problems are
combined that is better than the best approximation for
either problem on its own.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100107.html
##-----------------TITLE------------------------##
Theory Seminar, January 7, 2010
##------------------TEXT------------------------##
January 7, Winter Quarter 2010: Theory Seminar 
1:00pm in 4011 Bren Hall
   
Minimum Cuts and Homology Flows

 Erin Wolf Chambers, Saint Louis Univ.


Abstract: 
We describe the first algorithms to compute maximum flows and minimum
cuts in surface-embedded graphs in near-linear time. Given an
undirected graph embedded on an orientable surface of genus g, with
two specified vertices s and t, our algorithm computes a minimum
(s,t)-cut in g^{O(g)} n log n time; if there is time, we will also
describe a different algorithm which computes a maximum $(s,t)$-flow
in in $O(g7 n \log^2n \log^2C)$ time for integer capacities that sum
to $C$, or in $(g \log n)^O(g) n$ time for real capacities. Except
for
the special case of planar graphs, the best previous time bounds for
finding min cuts or max flows in embedded graphs follow from
algorithms for general sparse graphs.


This is joint work with Jeff Erickson and Amir Nayyeri, which
appeared
in SOCG and STOC last year.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100312.html
##-----------------TITLE------------------------##
Theory Seminar, March 12, 2010
##------------------TEXT------------------------##
March 12, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
   
Data Structures for Range Minimum Queries in Multidimensional Arrays

 Puneet Mehta, UC Irvine 


Presenting a paper by Yuan and Atallah


Abstract: 
Given a d-dimensional array A with N entries, the
Range Minimum Query (RMQ) asks for the minimum
element within a contiguous subarray of A. The 1D
RMQ problem has been studied intensively because of
its relevance to the Nearest Common Ancestor problem
and its important use in stringology. If constant-time
query answering is required, linear time and space
preprocessing algorithms were known for the 1D case,
but not for the higher dimensional cases. In this paper,
we give the first linear-time preprocessing algorithm
for arrays with fixed dimension, such that any range
minimum query can be answered in constant time.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100205.html
##-----------------TITLE------------------------##
Theory Seminar, February 5, 2010
##------------------TEXT------------------------##
February 5, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
 
Deletion Without Rebalancing in Balanced Trees

 Darren Strash, UC Irvine 


Presenting results in two papers by Siddhartha Sen and Robert E.
Tarjan from ISAAC09 and SODA10.


Abstract: 
We discuss the often-neglected topic of rebalancing after deletion in
balanced trees. Textbooks frequently omit it, many database systems
don't implement it, so we desire data structures that don't require
it. We therefore discuss variants of multiway search trees and
balanced binary trees that do not perform deletion rebalancing, yet
their search time remains logarithmic in the number of insertions. We
also discuss a strong claim made by the authors that "[w]ith the
addition of periodic rebuilding, the performance of these structures
is theoretically superior to that of many if not all classic balanced
tree structures."  We lay out the facts and let you decide if this is
a veritable "timber!" for our beloved search trees.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100211.html
##-----------------TITLE------------------------##
Theory Seminar, February 11, 2010
##------------------TEXT------------------------##
February 11, Winter Quarter 2010: Theory Seminar 
1:00pm in 4011 Bren Hall
   
Resource Oblivious Multicore Sorting

 Richard Cole, NYU 


Presenting his paper with Vijaya Ramachandran


Abstract: 
Multicore chips, already the predominant desktop technology, are
projected to have increasing numbers of cores, perhaps as many as
50--100 five years hence.

Effectively exploiting this parallelism appears to call for parallel
algorithms with data locality. Over the last decade, data locality in
a sequential setting has been addressed in part via cache oblivious
algorithms.  (A cache oblivious algorithm does not know or use memory
parameters such as block or page size, the time needed for a cache
miss, etc. It's virtue is simplicity. The algorithmic challenge is to
match the performance of parameter aware algorithms, at least up to
modest constant factors. This has been achieved for many problems.)

The current work explores to what extent obliviousness may be
possible in the multicore setting. We seek algorithms that are
oblivious to both memory parameters and to the number of cores.  We
show this is possible by developing oblivious algorithms for this
setting, including a new sorting algorithm which achieves
(asymptotically) optimal operation and cache-miss count, and a
critical path length of O(log n log log n) for sorting n items.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/100305.html
##-----------------TITLE------------------------##
Theory Seminar, March 5, 2010
##------------------TEXT------------------------##
March 5, Winter Quarter 2010: Theory Seminar 
1:00pm in 1423 Bren Hall
   
Efficient Search on Encrypted Data

 Ali Bagherzandi, UC Irvine 


Abstract: 
Search on encrypted data has been focus of research both in database and
cryptography communities. Traditionally the results in cryptography
community provide strong security guarantees: typically hiding everything
but user's access pattern to the server. However, the server needs to scan
the whole database for each query, which yields unacceptably-slow
performance for practical databases.  In contrast, research from database
community, provides encryption schemes with efficient and optimized
indexing and flexible query support for various data types. But,
unfortunately, the security of these schemes is far less clear.


In this talk we will give an overview of a new line of research in
cryptography community that tries to narrow this gap. The results in this
category mostly investigate the best security guaranties for an encryption
scheme which also enables sub-linear (typically logarithmic) search.
We will in particular discuss deterministic and order preserving
encryption schemes which enable privacy-preserving search for exact-match and
range queries respectively with almost the same efficiency of search over
un-encrypted data.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020308.html
##-----------------TITLE------------------------##
Theory Seminar,8 March 2002
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


8 March 2002:
A presentation of results from
        "Moving an Angle Around a Region"
        by Frank Hoffman, Christian Icking, Rolf Klein, and Klaus Kriegel,
        in Proc SWAT '98, Springer Lecture Notes in Computer
        Science, Stockholm, 1998, and
        online publication by the Journal of Discrete & Computational
        Geometry

Javid Hüseynov


Let D be a connected region inside a simple polygon P. Authors
          define the angle hull, AH(D), of D to be the set of all points 
          in P that can see two points of D at a right angle. They further
          prove that the perimeter AH(D) is at most twice the perimeter
          of the relative convex hull of D. In special case, when P is 
          the full plane, this bound is given as {/pi}/2. Both bounds are
          tight.

The practical application of this topic is found in designing on-line
competitive navigation strategies for autonomous robots in unknown
environments.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/020315.html
##-----------------TITLE------------------------##
Theory Seminar,15 March 2002
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar

15 March 2002:
A presentation of results from
        "Center and diameter problems
	in plane triangulations and quadrangulations,"
	by Victor Chepoi, Feodor Dragan, and Yann Vaxes

Michael Dillencourt


A recent SODA paper by Chepoi, Dragan and Vaxes [CDV]
presented linear-time algorithms for computing the diameter and
center in several classes of face-regular planar graphs.  Among
these classes of graphs are trigraphs (triangulations in which inner 
vertices have degree >= 6), triangular systems (triangulations in
which inner vertices have degree = 6), and hexagonal systems (subgraphs
of a regular hexagonal grid, bounded by a simple circuit).  In
this talk, I will discuss some of their results, focusing on the 
problem of computing the diameter.


Full citation of [CDV]: Victor Chepoi, Feodor Dragan, and Yann Vax\`es,
Center and Diameter problems in plane triangulations and quadrangulations,
Proceedings of the 13th Annual ACM-SIAM Symposium on Discrete Algorithms 
(SODA 2002), San Francisco, CA, January 2002, 346-355.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030221.html
##-----------------TITLE------------------------##
Theory Seminar, 21 Feb 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


21 Feb 2003:
C-Planarity of Clustered Graphs
Jonathan Sun

I'll introduce the concepts, the open problem, and the
progress that have been made. I'll touch some technical details in [1]
and [4].

References:

Feng, Eades and Cohen, Clustered Graphs and C-planarity, Euro. Sym.
on Alg. 1995.Dahlhaus, Linear time algorithms to recognize clustered planar
graphs and its parallelization, LATIN'98.Duncan, Goodrich, and Kobourov, Planarity-Preserving Clustering and
Embedding for Large Planar Graphs, Graph Drawing 1999.Battista, Walter Didimo and Marcandalli, Planarization of Clustered
Graphs, Graph Drawing 2001.Gutwenger et al., Advances in C-Planarity Testing of Clustered Graphs, Graph Drawing
2002.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030214.html
##-----------------TITLE------------------------##
Theory Seminar, 14 Feb 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


14 Feb 2003:
Maximal Independent Sets and Their Use in Colouring Algorithms
Jesper Makholm Byskov

I will talk about maximal independent sets in graphs and why they are
useful for colouring graphs. I will for all k show tight bounds on the
number of maximal independent sets of size at most k, and give
algorithms for finding all maximal independent sets of size at most k.
Then I will show how to use these algorithms to design better
algorithms for colouring graphs.

I will also discuss a generalisation of maximal independent sets,
namely maximal k-colourable subgraphs and give some upper and lower
bounds on the number of these.

Part of the talk is based on my SODA paper: "Algorithms for k-Colouring
and Finding Maximal Independent Sets".
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030131.html
##-----------------TITLE------------------------##
Theory Seminar, 31 Jan 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


31 Jan 2003:
Lower Bounds for External Memory Dictionaries
Kevin Wortman

We study trade-offs between the update time and the query time for
comparison based external memory dictionaries.  The main contributions
are two lower bound trade-offs between the I/O complexity of member
queries and insertions.  For both lower bounds we describe data
structures which give matching upper bounds for a wide range of
parameters, thereby showing the lower bounds to be tight within these
ranges.

(From a SODA 2003 paper by Gerth Brodal and Rolf Fagerberg.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030228b.html
##-----------------TITLE------------------------##
Theory Seminar, 28 Feb 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


28 Feb 2003:
Is Edge-Expansion Robust to Random Faults?
Amitabh Bagchi

Consider the situation where nodes of a graph G become faulty
independently with probability p giving the graph
Gp. The "critical
probability" p* for a graph is defined as that value
of p for which
there is no linear sized component remaining in the graph
Gp* with high
probability. We call a graph parameter ρ(G) "robust" if
ρ(Gp*-o(p*)) = θ(ρ(G)) i.e. if the value of ρ is preserved upto a
constant factor till the point where the graph itself falls apart.

We consider the robustness of a graph parameter important to the study
of the routing properties of a network: the edge expansion. We prove a
general theorem from which the robustness of edge expansion on a mesh
can be deduced.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030228a.html
##-----------------TITLE------------------------##
Theory Seminar, 28 Feb 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


28 Feb 2003:
Online Machine Scheduling -- A Brief Survey
John Augustine

I will start by providing an introduction to online algorithms and
competitive analysis. I will then provide a brief survey of the online
machine scheduling problem by highlighting results from several papers
on it. I will also, time permitting, provide proof ideas and intuition
for a few results.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030207.html
##-----------------TITLE------------------------##
Theory Seminar, 7 Feb 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


7 Feb 2003:
Computing Homotopic Shortest Paths in the Plane
Yu Meng

We address the problem of computing homotopic shortest paths in the
presence of obstacles in the plane. We present two output-sensitive
algorithms, for simple paths and non-simple paths.

(From a SODA 2003 paper by Sergei Bespamyatnikh.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/030124.html
##-----------------TITLE------------------------##
Theory Seminar, 24 Jan 2003
##------------------TEXT------------------------##
ICS 269, Winter 2002: Theory Seminar


24 Jan 2003:
Dynamic TCP Acknowledgement: Penalizing Long Delays
Josiah Carlson

We study the problem of acknowledging a sequence of data packets that
are sent across a TCP connection.  We investigate a new objective
function that minimizes the sum of the number of acknowledgements sent
and the maximum delay incurred for any of the packets.
We develop a deterministic online algorithm that achieves a competitive
ratio of π2/6 and prove that no deterministic algorithm
can have a smaller competitiveness.  We also study a generalized
objective function where delays are taken to the pth power.
Finally, we show lower bounds for randomized algorithms on these problems.

(From a SODA 2003 paper by Susanne Albers and Helge Bals.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/010601.html
##-----------------TITLE------------------------##
Theory Seminar,1 June 2001
##------------------TEXT------------------------##
ICS 269, Spring 2001: Theory Seminar


1 June 2001:
"Hamiltonicity and colorings of arrangement graphs"
       by Stefan Felsner, Ferran Hurtado, Marc Noy, Ileana Streinu

Javid Huseynov


ABSTRACT: Authors study connectivity, Hamiltonian path and Hamiltonian
cycle decomposition, 4-edge and 3-vertex coloring for graphs arising from
pseudoline (affine and projective) and pseudocircle (spherical) arrangements. 
Graph theoretical properties of arrangements are studied. Most interesting
result is that spherical arrangements admit decompositions into two
Hamiltonian cycles and 4-edge colorings. A number of conjectures and open
questions accompany the results.
(Appeared in SODA 2000.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/010511.html
##-----------------TITLE------------------------##
Theory Seminar, 11 May 2001
##------------------TEXT------------------------##
ICS 269, Spring 2001: Theory Seminar


11 May 2001:
First-Fit Interval Scheduling with Three Links and Deterministic
Service

George Lueker


Abstract: Following Coffman, Feldman, Kahale and Poonen, and Coffman,
Robert, and Stolyar, we consider the stability of first-fit queuing
systems for scheduling requests on an interval network.  Both Hajek's
theorem and fluid limits have been used as tools in the investigation
of stability.  We show how a variation of Hajek's theorem yields
a fairly simple analysis for the case of 3 links and deterministic
service.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/010608.html
##-----------------TITLE------------------------##
Theory Seminar,8 June 2001
##------------------TEXT------------------------##
ICS 269, Spring 2001: Theory Seminar


8 June 2001:
Approximating the Shortest Path in a Line Arrangement

David Hart


Given a line arrangement and points s and t on lines of the arrangement,
the best known algorithm for finding a shortest path from s to t 
traveling on lines of the arrangement takes O(n^2) time.  We present
an algorithm that finds a 1+epsilon approximation of the path in 
O(nlogn + (n/epsilon^2) log(1/epsilon)) time.


We will also mention new progress in finding an exact shortest path.


This is a practice talk for... TBA.  It is substantially changed (and
hopefully "new and improved") from a previous talk on this topic.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/010504.html
##-----------------TITLE------------------------##
Theory Seminar, 4 May 2001
##------------------TEXT------------------------##
ICS 269, Spring 2001: Theory Seminar


4 May 2001:
Authoritative Sources in a Hyperlinked Environment, by Jon Kleinberg

Sandy Irani


A copy of the paper, including an abstract, can be found at

http://www.cs.cornell.edu/home/kleinber/#papers
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/010420.html
##-----------------TITLE------------------------##
Theory Seminar, 20 April 2001
##------------------TEXT------------------------##
ICS 269, Spring 2001: Theory Seminar


20 April 2001:
Triangles and Squares

David Eppstein


Slides for this talk can be found at

http://www.ics.uci.edu/~eppstein/junkyard/escher4d.pdf


Which unit-side-length convex polygons can be formed by packing together 
unit squares and unit equilateral triangles?  For instance you can pack 
six triangles around a common vertex to form a regular hexagon.  It turns 
out that there is a pretty set of 11 solutions.  We describe connections 
from this puzzle to the combinatorics of 3- and 4-dimensional polyhedra, 
using illustrations from the works of M. C. Escher.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050211.html
##-----------------TITLE------------------------##
Theory Seminar, 11 Feb 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
11 Feb 2005:
Collusion in Auctions for Digital Goods

Presented by Matthew Nguyen


Abstract: 
Auctions for digital goods are auctions where the auctioneer has an
unlimited supply of a single commodity.  In this auction framework, we
consider a bidder model where each participant has a probability p of
joining a collective colluding group.  We show that any auction that is
B-competitive without colluders, is B/(1-p)2-competitive in the presence
of colluders no matter the colluding strategy.

This is joint work with Sandy Irani, Gwendoline Shu-Hsien Chien, and
Matthew Nguyen.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050218.html
##-----------------TITLE------------------------##
Theory Seminar, 18 Feb 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
18 Feb 2005:
Minimum Dilation Stars, part two: the constrained case.

Speaker: Kevin Wortman


We consider the problem of selecting a point c to serve as the root of a
star with minimal dilation for a given set of n leaves. In a prior talk
we presented an O(n log n) expected-time algorithm for the case when d
is a fixed constant and c is not required to be one of the input points.
In this talk we consider the case when d=2 and c is constrained to be
one of the input points.  We present an O(n 2α(n) log2 n)
expected-time solution to this problem, which uses the algorithm for the
unconstrained case as a component.


This is a joint work of David Eppstein and Kevin Wortman.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050121.html
##-----------------TITLE------------------------##
Theory Seminar, 21 Jan 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

21 Jan 2005:
Strictly Convex Drawings of Planar Graphs

Presented by Jeremy Yu Meng


Every three-connected planar graph with n vertices has a drawing on an
O(n7/3) by O(n7/3)
grid in which all faces are strictly convex polygons.

From: Strictly Convex Drawings of Planar Graphs by Günter Rote.
(coming) SODA 2005.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050225.html
##-----------------TITLE------------------------##
Theory Seminar, 25 Feb 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
25 Feb 2005:
Visualizing Evolving Graphs by Simultaneous Embeddings

Speaker: Stephen Kobourov,
Department of Computer Science,
University of Arizona


Abstract:
Traditional problems in graph visualization involve the layout of a
single graph, while problems in simultaneous graph visualization
involve the layout of multiple related graphs. A series of related
graphs may arise from one relation between a set of objects as it
evolves through time or from several relationships defined on the same
set of objects. In simultaneous graph embedding, nodes are placed in
the exact same locations in all the graphs and a series of graphs are
simultaneously embedable if it is possible to find locations that
yield straight-line crossing-free drawings for each of the individual
graphs. We present polynomial time algorithms for simultaneous
embedding of various classes of planar graphs and prove that some
classes of graphs cannot be simultaneously embedded. Further, we
present a near-linear time algorithm for visualizing graphs that
evolve through time and demonstrate its application to problems in
software engineering and databases.

VITA:
Stephen Kobourov is an Assistant Professor at the University of
Arizona.  His research interests include information visualization,
graph drawing, and geometric algorithms, emphasizing problems relating
to graph visualization. He received a BS in Computer Science and
Mathematics from Dartmouth College, and MS and PhD in Computer Science
from Johns Hopkins University.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050311.html
##-----------------TITLE------------------------##
Theory Seminar, 11 Mar 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
11 Mar 2005:
Skip Graphs and Family Trees: Two Ordered Dictionaries for Distributed
Systems
Presented by Michael Nelson



Abstract: The talk will focus on two solutions to the problem of storing
a dynamic ordered dictionary over a distributed set of nodes.  Both of
these data structures can support efficient search operations as well as
range queries.  The talk will include definitions of the two data
structures, an outline of their fundamental routines, and a discussion of
their theoretical performance.  


The content of the talk is taken from the following two papers:
"Skip Graphs" by James Aspnes and Gauri Shah, appeared in SODA 2003
"Family Trees" by Kevin C. Zatloukal and Nicholas J. A. Harvey, appeared
in SODA 2004
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050204.html
##-----------------TITLE------------------------##
Theory Seminar, 4 Feb 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
4 Feb 2005:
Finding an Optimal Path without Growing the Tree
by Danny Z. Chen, Ovidiu Daescu, Xiaobo (Sharon) Hu, and Jinhui Xu

Presented by Michael Shindler


Abstract: 
   It is well known that any algorithm to compute the shortest path  
   between any two vertices in a graph must take the same asymptotic time
   as an algorithm that computers a single-source all-destinations tree.
   But space complexity is another matter.
   The authors develop an algorithm paradigm for reporting an optimal
   path between two vertices without growing an entire single-source
   all-destinations tree. This brings forth a new technique, prune and
   search, and a new data structure, the clipped tree.
   These are used to improve the space bounds on previously best known
   algorithms.
   
   This paper appeared in Journal of Algorithms
   49:1 (October 2003), pp. 13-41.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050114.html
##-----------------TITLE------------------------##
Theory Seminar, 14 Jan 2005
##------------------TEXT------------------------##
ICS 269, Winter 2005: Theory Seminar
14 Jan 2005:
Skip Quadtree and Its Applications
Speaker: Jonathan Sun


We present a new multi-dimensional data structure, which we call
the skip quadtree (for point data in 2-D) or the skip octree
(for point data in R^d, with d>2). Our data structure combines
the best features of two well-known data structures, in that it
has the well-defined ``box''-shaped regions of region quadtrees
and the logarithmic-height search and update hierarchical
structure of skip lists. We provide efficient algorithms for
inserting and deleting points in a skip quadtree, as well as
fast methods for performing point location queries, approximate
range queries, and approximate nearest neighbor queries.

This is a joint work of David Eppstein, Michael Goodrich and
Jonathan Sun.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050107.html
##-----------------TITLE------------------------##
Theory Seminar, 7 Jan 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
7 Jan 2005:
The Maximized Average Tree Pruning Problem

Presented by Josiah Carlson


Abstract: In this talk we will define the maximized average tree
pruning problem, we will describe the pitfalls in solving the problem,
and we will finally describe our algorithm which has worst-case
O(n log2n) running time.

This is a joint work of Josiah Carlson and David Eppstein.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050128.html
##-----------------TITLE------------------------##
Theory Seminar, 28 Jan 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
28 Jan 2005:
"The Priority R-Tree: A Practically Efficient
and Worst-Case-Optimal R-Tree" by Lars Arge, et al.

Presented by Ivan A. Seredkin


Abstract: This paper presents the Priority R-tree, or PR-tree, which is the
first R-tree variant that always answers a window query using
O((N/B)1-1/d+T/B) I/Os, where N is the number of d-dimensional
(hyper-) rectangles stored in the R-tree, B is the disk block size, and T
is the output size. This is provably asymptotically optimal and
significantly better than other R-tree variants, where a query may visit
all N/B leaves in the tree even when T=0.

(This paper is from the 2004 ACM SIGMOD International Conference on
Management of Data.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050304.html
##-----------------TITLE------------------------##
Theory Seminar, 4 Mar 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar
4 Mar 2005:
"Some 3CNF Properties are Hard to Test" by Eli Ben-Sasson, Prahladh
Harsha and Sofya Raskhodnikova.

Presented by Nodari Sitchinava.


Abstract:
Property testing deals with a relaxation of decision problems where
one must determine whether an input belongs to a particular set,
called property, or is far from it. For example, for a boolean formula
φ on n variables, the associated property Pφ is a
collection of n-bit strings that satisfy φ. The authors prove that
there are 3CNF properties (properties for boolean formulae in 3CNF
form) that require a linear number of queries, even for adaptive
tests. In contrast, it is known that 2CNF properties can be tested
with O(sqrt(n)) queries. I will briefly indroduce property testing
and present the proof of hardness of 3CNF properties testing.

This paper appeared in STOC'03.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050527.html
##-----------------TITLE------------------------##
Theory Seminar, 27 May 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

27 May 2005:

Nodari Sitchinava



This talk will be a presentation of 
a paper titled "Dynamic Optimality - Almost [Competitive 
Online Binary Search Tree" by E. Demaine, D. Harmon, J. Iacono and M. 
Patrascu. It appeared in FOCS 2004.


Abstract:
The paper presents an O(log log n)-competitive online binary search 
tree,  improving upon the best previous (trivial) competitive ratio of 
O(lg n). This is the first major progress on Sleator and Tarjan's 
dynamic optimality conjecture of 1985 that O(1)-competitive binary 
search trees exist.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050513.html
##-----------------TITLE------------------------##
Theory Seminar, 13 May 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

13 May 2005:

Ivan Mizera


Department of Mathematical and Statistical Sciences
University of Alberta (Edmonton, Canada)


The talk will start by explaining certain episodes on a way from the
halfspace depth in multivariate location ("the Tukey depth") through depth
in general data-analytic situations (models?) toward the psychedelic
experience of a new notion of depth in the location-scale model,
Location-Scale Depth, and its most tractable version, the Student
depth. The latter has a couple of entertaining theoretical and
computational properties, stemming from the fact that it is nothing
but the bivariate halfspace depth interpreted in the Poincar\'e plane
model of the Lobachevski geometry - in particular, invariance with
respect to the M\"obius group and favorable time complexities of
algorithms. The practical implications involve a new fancy
location-scale typical value, the Student median, as well as somewhat
extravagant graphical tool for exploring distributional properties of
univariate samples, a sort of cousin to the quantile-quantile plot.


However, perhaps more than those particular accomplishments it may be
worthy to note potential new views on data and questions that the
process raises: the role of invariance (if any) in data analyses;
whether there can be such a thing as median in sophisticated
situations; whether classical rank-based nonparametrics can be
elevated beyond their traditional (essentially) univariate setting;
and last but not least, whether all these hallucinations can be
effectively computed.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050429.html
##-----------------TITLE------------------------##
Theory Seminar, 22 Apr 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

22 Apr 2005:
Popular Matchings

Presented by Matt Nguyen


This talk is a presentation of 
"Popular Matchings" by David J. Abraham,
Rob W. Irving, Kurt Mehlhorn and Kavitha Telikepalli from SODA 2005.



The authors consider the problem of matching a set of applicants to a set
of posts.  Each applicant contains a preference list ranking each post by
preference.  A matching M is then said to be popular if there is no
matching M' such that the number of applicants preferring M' to M exceeds
the number of applicants preferring M to M'.  The authors give an
O(sqrt(n) m ) time algorithm finding the largest popular matching if it
exists.  Note that this is a special case of the stable marriage problem -
All popular matchings are stable.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050603.html
##-----------------TITLE------------------------##
Theory Seminar, 3 June  2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

3 June 2005:

Location: PSCB 230


Speaker: Jonathan Sun



This talk will be a presentation of 
a paper titled 
"How to spread adversarial nodes? rotate!"
   by Christian Scheideler. It appeared in STOC 2005.


Abstract: This paper studies the following game played by a System and
   an Adversary. System maintains a Ring of n white pebbles which is
fully accessible to Adversary. Adversary has limited amount (less than
   n) of black pebbles. At each step, Adversary inserts or withdraws a
   black pebble into/from the Ring, but System then somehow rearranges
   the ring to distribute black pebbles as uniformly as possible.
   Adversary's goal is to introduce a segment in Ring of length O(log n)
   with more than half of the pebbles being black, in polynomial time.
   System's goal is to, with high probability, prevent this from
   happening with little work of rearrangement. The paper studies a
   simple strategy of System and provides interesting results. It has
   application in making robust peer-to-peer networks.


   After Adversary inserts a black pebble to a position, System randomly
   select another k positions (k-1 pebbles plus one new position) and
   rotate the k pebbles within the k+1 positions. When k=2, Adversary
   wins with only O(log n) black pebbles. When k=3, System wins even if
   Adversary has n/3 black pebbles.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050422.html
##-----------------TITLE------------------------##
Theory Seminar, 22 Apr 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

22 Apr 2005:
The Maximum-Mean Subtree

Josiah Carlson


In this talk, we define the Maximum-Mean Subtree problem on trees, an
equivalent reformulation of the Fractional Prize-Collecting Steiner Tree
Problem on Trees. We describe an algorithm that solves the Maximum-Mean
Subtree problem, and prove that our algorithm runs in O(n) time in the
worst case, improving a previous O(n log n) algorithm.


This talk is a presentation of a paper by David Eppstein and Josiah
Carlson, which was submitted to WADS 2005.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050408.html
##-----------------TITLE------------------------##
Theory Seminar, 8 Apr 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

8 Apr 2005:
Skip Graphs and Family Trees: Two Ordered Dictionaries for Distributed
Systems (Series Part 2)

Michael Nelson


Abstract: The talk will focus on two solutions to the problem of storing
a dynamic ordered dictionary over a distributed set of machines.  
Both of
these data structures can support efficient search operations as well as
range queries.  This second part of the talk focuses on family trees
and their theoretical performance.  


The content of the talk is taken from the following two papers:
"Skip Graphs" by James Aspnes and Gauri Shah, appeared in SODA 2003
"Family Trees" by Kevin C. Zatloukal and Nicholas J. A. Harvey, appeared
in SODA 2004
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050610.html
##-----------------TITLE------------------------##
Theory Seminar, 10 June  2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

10 June 2005:

Location: CS 432


Speaker: Jeremy Meng



This talk will be a presentation of 
a paper titled 
"No sorting? Better Searching!", by Gianni Franceschini and Roberto Grossi, FOCS 2004.


Sorting is commonly meant as the task of arranging keys in increasing or
decreasing order (or small variations of this order). Given n keys
underlying a total order, the best organization in an array is maintaining
them in sorted order. Searching requires \Theta(log n) comparisons
in the worst case, which is optimal. We demonstrate that this basic fact
in data structures does not hold for the general case of multidimensional
keys, whose comparison cost is proportional to their length. In two papers
by Andersson et al. (1994) and Andersson et al. (1995) and the full
version in 2001, Andersson et al. study the complexity of searching a
sorted array of n keys, each of length k, arranged in lexicographic (or
alphabetic) order for an arbitrary, possibly unbounded, ordered alphabet.
They give sophisticated arguments for proving a tight bound in the worst
case for this basic data organization, up to a constant factor, obtaining
\Theta(((k log log n)/(log log (4 + ((k log log n)/log n)))) + k log
n) character comparisons (or probes). Note that the bound is \Theta(log n)
when k = 1, which is the case that is well known in algorithmics.
We describe a permutation of the n keys that is different from the sorted
order, and sorting is just the starting point for describing our
preprocessing. When keys are stored according to this "unsorted" order in
the array, the complexity of searching drops to \Theta(k + log n)
character comparisons (or probes) in the worst case, which is optimal
among all possible permutations of the n keys in the array, up to a
constant factor. Again, the bound is \Theta(log n) when k = 1.
Jointly with the aforementioned result of Anders son et al., our finding
provably shows that keeping k-dimensional keys sorted in an array is not
the best data organization for searching. This fact was not observable
before by just considering k = O(1) as sorting is an optimal organization
in this case. More implications of our result are commented in the
introduction.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/050520.html
##-----------------TITLE------------------------##
Theory Seminar, 20 May 2005
##------------------TEXT------------------------##
ICS 269, Spring 2005: Theory Seminar

20 May 2005:

John Augustine



Abstract: We present an asymptotic fully polynomial 
approximation scheme 
for strip-packing, or packing rectangles into a 
rectangle of fixed width 
and minimum height, a classical NP-hard cutting-stock problem. The 
algorithm, based on a new linear-programming relaxation, 
finds a packing 
of n rectangles whose total height is within a factor of (1+e) of 
optimal (up to an additive term), and has running time polynomial both 
in n and in 1/e.


Paper: Claire Kenyon and Eric Remila, "A Near-Optimal Solution to a 
Two-Dimensional Cutting Stock Problem," Mathematics of Operations 
Research, Volume 25 ,  Issue 4  (November 2000).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970124.html
##-----------------TITLE------------------------##
Theory Seminar, 24 Jan 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


24 Jan 1997:
Online Multiprocessor Scheduling
Steve Seiden, ICS,
UC Irvine

The problem of scheduling independent jobs on m machines in
an online fashion was first studied by Graham in 1966. While the
deterministic case of this problem has been studied extensively,
little work has been done on the randomized case. For 
m = 2 a randomized 4/3-competitive algorithm was
found by Bartal, Fiat, Karloff and Vohra. I have recently developed
two algorithms for m > 3. The first is
1.55871-competitive for m = 3. The second achieves
competitive ratios of 1.67517, 1.74114, 1.78810 and 1.82082, for
m = 4,5,6,7 respectively. These competitive ratios
are less than the best deterministic lower bound for 
m = 3,4,5 and less than the best known deterministic
competitive ratio for m = 3,4,5,6,7. In this talk,
I explain the first algorithm, and outline a proof of its
competitiveness. 

I shall also talk about two models of multiprocessor scheduling
with rejection. The first is the model of Bartal, Leonardi,
Marchetti-Spaccamela, Sgall and Stougie. I have developed two
randomized algorithms for this model. The first algorithm performs
well for small m, achieving competitive ratios of 3/2,
1.83579, 2.05441 for m = 2,3,4, respectively. The
second algorithm outperforms the first for m 
> 5. It beats the deterministic algorithm of Bartal 
et al. for all m = 5, ... 1000. I am
currently developing a proof that this is true for all m.
The second model differs in that preemption is allowed. For this
model, I have developed a deterministic algorithm which is
2.38743-competitive for all m. I have also developed
randomized algorithms which outperform the best deterministic
algorithms for small m. In this talk, I shall explain my
non-preemptive algorithm for small m, and outline its
analysis.

(Practice job interview talk.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970228.html
##-----------------TITLE------------------------##
Theory Seminar, 28 Feb 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


28 Feb 1997:
An Efficient Algorithm for Shortest Paths in Vertical and
Horizontal Segments
David Hart, ICS, UC Irvine

Suppose one has a line segment arrangement consisting entirely
of vertical and horizontal segments, and one wants to find the
shortest path from one point to another along these segments. Using
known algorithms one can solve this in O(n2) time
and in O(n2) space. We show that it is possible
to find a shortest path in time
O(n1.5 log n) and space
O(n1.5). Furthermore, if only one path endpoint
is known in advance, it is possible to preprocess the arrangement
in the same time and space and then find shortest paths for query
points in time O(log n).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970131.html
##-----------------TITLE------------------------##
Theory Seminar, 31 Jan 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


31 Jan 1997:
Scheduling with Conflicts and Applications to Traffic Signal
Control
Vitus J. Leung, ICS,
UC Irvine

We consider the scheduling of jobs that may be competing for
mutually exclusive resources. We model the conflicts between jobs
with a conflict graph, so that the set of all concurrently
running jobs must form an independent set in the graph. This model
is natural and general enough to have applications in a variety of
settings; however, we are motivated by the following two specific
applications: traffic intersection control and session scheduling
in high speed local area networks with spatial reuse. Our results
focus on two special classes of graphs motivated by our
applications: bipartite graphs and interval graphs. In all of the
upper bounds, we devise algorithms which maintain a set of
invariants which bound the accumulation of jobs on cliques (in the
case of bipartite graphs, edges) in the graph. The lower bounds
show that the invariants maintained by the algorithms are tight to
within a constant factor. 

The best competitive ratio achievable by any online algorithm
for the maximum completion time on interval or bipartite graphs is
Omega(n), where n is the number of nodes in the
conflict graph. As a result, we study scheduling with conflicts
under probabilistic assumptions about the input. Each node i
has a value pi such that a job arrives at node
i in any given time unit with probability 
pi. Arrivals at different nodes and during different
time periods are independent. We focus on distributions where the
expected time to complete the jobs that arrive in a single time
unit is less than 1. Under these assumptions, we are able to obtain
a bounded competitive ratio for an arbitrary conflict graph. In
addition, if the conflict graph is a perfect graph, we give an
algorithm whose competitive ratio converges to 1.

For the specific application of traffic signal control, we
simulate our simple K2,2 algorithm on a traffic network
with Poisson arrivals at the edges of the network and Robertson's
platoon dispersion model within the network. In some cases, our
simple algorithm achieves significant improvements over actuated
control.

(Practice job interview talk.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970117.html
##-----------------TITLE------------------------##
Theory Seminar, 3 Jan 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


17 Jan 1997:
Flipping Edges in Triangulations
Jason Cahill, ICS, UC Irvine

This talk is based on a paper by F. Hurtado, M. Noy, and J.
Urrutia, from Computational Geometry '96. This paper covers three
problems, so I plan on covering two of them in detail, and showing
some examples of the other. 

In this paper we study the problem of flipping edges in
triangulations of polygons and point sets. We prove that if a
polygon Qn has k reflex vertices, then any triangulation T of Qn
can be transformed to another triangulation T' of Qn by flipping at
most O(n + k2) edges. We produce examples of
polygons with triangulations T and T' such that to transform T to
T' requires O(n2) flips. These results are then extended
to triangulations of point sets. We also show that any
triangulation of an n point set contains at least
(n - 4) / 2 edges that can be flipped.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970314.html
##-----------------TITLE------------------------##
Theory Seminar, 14 Mar 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


14 Mar 1997:
More Multiprocessor Scheduling with Rejection
Steve Seiden, ICS, UC Irvine

Multiprocessor scheduling with rejection was introduced by
Bartal, Leonardi, Marchetti-Spaccamela, Sgall and Stougie in
SODA`96. These authors show a deterministic 2.61803-competitive
algorithm for this problem, and show that no algorithm achieves a
lower competitive ratio. We introduce a new variant of scheduling
with rejection where the accepted jobs may be be scheduled
preemptively as in Chen, van Vliet and Woeginger ESA`94. We show
that with preemption it is possible to do better. We present a
deterministic algorithm for preemptive multiprocessor scheduling
with rejection and show that it is 2.38743-competitive.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970307.html
##-----------------TITLE------------------------##
Theory Seminar, 7 Mar 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


7 Mar 1997:
Fault Tolerant Data Structures
Joseph Wang, ICS, UC Irvine

This talk is based on the FOCS 96 paper from Y. Aumann and M.
Bender. The authors showed fault tolerant versions of three common
data structures. In this talk, we will cover fault tolerant
versions of stack and the linked list in detail.

Paper Abstract:

We consider the tolerance of data structures to memory faults.
We observe that many pointer-based data structures (e.g. linked
lists, trees, etc.) are highly nonresilient to faults. A single
fault in a linked list or tree may result in the lost of the entire
set of data. In this paper we present a formal framework for
studying the fault tolerance properties of pointer-based data
structures, and we provide fault tolerant versions of the stack,
the linked list, and the dictionary tree.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970214.html
##-----------------TITLE------------------------##
Theory Seminar, 14 Feb 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


14 Feb 1997:
Surface/Surface Intersection '97
Mac Casale, ICS, UC Irvine

In high-school algebra, it is common to learn how to intersect
two geometric objects (starting with straight lines) that are
described by algebraic equations (e.g., y = 
mx + b). In freshman calculus, the concept is
extended to vector functions of a parameter. In both courses, some
kind of substitution method is usually used. If a student goes
further, he/she finds that substition methods had been extended
long ago, under the name of elimination theory, to a high level of
sophistication. (See the famous Theory of Equations, by J.
V. Uspensky, McGraw Hill 1948). It may therefore come as a surprise
that surface/surface intersection is still undergoing considerable
research in the domain of Computer Aided Geometric Design.

In this paper, we will present the progress in algorithms that
have been applied to intersecting two surfaces embedded in 
R3, with varying degree of success. It will be shown
that this algorithm, which is central to the robustness of modern
CAD systems, is inherently hard, not from the point of view time or
space complexity but due to

The chaotic nature of the requisite non-linear numerical
methods, andThe rich topology of intersection curves among intersecting
surfaces that occur in real world problems.

Practical, state-of-the-art methods for overcoming these
difficulties will be presented.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/970103.html
##-----------------TITLE------------------------##
Theory Seminar, 3 Jan 1997
##------------------TEXT------------------------##
ICS 269, Winter 1997: Theory Seminar


3 Jan 1997:
Probabilistic Analysis of Scheduling with Conflicts
Vitus J. Leung, ICS,
UC Irvine

We consider the scheduling of jobs that may be competing for
mutually exclusive resources. We model the conflicts between jobs
with a "conflict graph", so that all concurrently running jobs must
form an independent set in the graph. This model is natural and
general enough to have applications in a variety of settings;
however, we are motivated by the following two specific
applications: traffic intersection control and session scheduling
in high speed local area networks with spatial reuse. Our goal is
to bound the maximum completion time of any job in the system. It
has been previously shown that the best competitive ratio
achievable by any online algorithm for the maximum completion time
on interval or bipartite graphs is Omega(n), where n
is the number of nodes in the conflict graph. As a result, we study
scheduling with conflicts under probabilistic assumptions about the
input. Each node i has a value pi such
that a job arrives at node i in any given time unit with
probability pi. Arrivals at different nodes and
during different time periods are independent. We focus on
distributions where the expected time to complete the jobs that
arrive in a single time unit is less than 1. Under these
assumptions, we are able to obtain a bounded competitive ratio for
an arbitrary conflict graph. In addition, if the conflict graph is
a perfect graph, we give an algorithm whose competitive ratio
converges to 1. 

(Practice talk for a SODA '97 paper
with Sandy Irani.
Conference proceedings version
available from Vitus' website.)
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041029.html
##-----------------TITLE------------------------##
Theory Seminar, 29 Oct 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
29 Oct 2004:
Minimum Dilation Stars
David Eppstein and Kevin Wortman

The dilation of a Euclidean graph is defined as the ratio of distance
in the graph divided by distance in Rd.  We consider
the problem of positioning the root of a star such that the dilation
of the resulting graph is minimal.  We present a deterministic
O(n log n)-time solution
to the decision problem, as well as a randomized
O(n log n)
expected-time solution to the optimization problem.

The talk will cover selected results from a paper currently under 
preparation.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041008.html
##-----------------TITLE------------------------##
Theory Seminar, 8 Oct 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
8 Oct 2004:
Dynamic Speed Scaling to Manage Energy
John Augustine 

Energy consumed by a processor per unit time, P(s), varies with the 
speed s at which it is run in a convex manner. This has been exploited 
to reduce the energy consumption by slowing down the processor. The 
algorithms that are explained in this talk are based on the following 
model that captures this key aspect of energy minimization. Each job is 
to be executed between its arrival time and deadline by a single 
processor with variable speed. The processor running at speed s consumes 
energy per unit time P(s) = s p, p ≥ 2. We are asked to schedule the 
jobs so that the total energy is minimized. The offline version can be 
solved optimally in polynomial time [1]. I will provide the algorithm 
and proof. [1] also provides an online algorithm with a competitive 
ratio between p p and 2p-1 p p. In a recent improvement, Bansal et 
al. in [2] have provided an online algorithm that has a competitive 
ratio of p p. I will explain this algorithm and provide proof if time 
permits.

References:

1. Frances Yao, Alan Demers, and Scott Shenker, "A Scheduling Model for 
Reduced CPU Energy," FOCS 1995

2. Nikhil Bansal, Tracy Kimbrel, and Kirk Pruhs, "Dynamic Speed Scaling 
to Manage Energy and Temperature," FOCS 2004
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041105.html
##-----------------TITLE------------------------##
Theory Seminar, 5 Nov 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
5 Nov 2004:
Online Scheduling of Equal-Length Jobs:
Randomization and Restarts Help

Speaker:
   Marek Chrobak

   (Department of Computer Science, University of California, Riverside, CA 92521)

We consider the following scheduling problem. The input is a set of jobs
with equal processing times, where each job is specified by its release
time and deadline. The goal is to determine a single-processor,
non-preemptive schedule that maximizes the number of completed
jobs. In the online version, each job arrives at its release time.
We give two online algorithms with competitive ratios below 2 and
show several lower bounds on the competitive ratios.

First, we give a barely random 5/3-competitive algorithm
that uses only one random bit. We also show a lower bound of 3/2 for
barely random algorithms that choose one of two deterministic algorithms.

Second, we give a deterministic 3/2-competitive algorithm in the model
that allows restarts, and we show that in this model the ratio
3/2 is optimal. For randomized algorithms with restarts we show a lower
bound of 6/5.

This is joint work with W.Jawor, J.Sgall, and T.Tichy.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041119.html
##-----------------TITLE------------------------##
Theory Seminar, 19 Nov 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
19 Nov 2004:
Caching with Expiration Times
Authors:
Parikshit Gopalan , Howard Karloff , Aranyak Mehta , Milena Mihail ,
Nisheeth Vishnoi
Speaker:
Michael Shindler

From:

Proceedings 13th ACM-SIAM Symp. on Discrete Algorithms (SODA),
January 6-8, 2002, San Francisco, pp.540-547.

The authors investigate the effects of caching when
dealing with both access frequency and expiration times, using the
common least-recently used algorithm as a starting point. They present
and analyze three different classes of algorithms for dealing with the
problem. There exist deterministic marking algorithms that are
competitive relative to the size of the cache. They also discuss
randomized marking algorithms and the optimal offline algorithm.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041022.html
##-----------------TITLE------------------------##
Theory Seminar, 22 Oct 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
22 Oct 2004:
Drawing Planar Graphs on a Curve
E. Di Giacomo, W. Didimo, G. Liotta, and S.K. Wismath
Speaker: Jeremy Yu Meng


This paper introduces and studies the concept of a curve
embedding of a planar graph. Let C be the family of 2D curves described
by concave functions and let G be a planar graph. A curve embedding
of G is a linear ordering of the vertices of G such that there exists a
crossing-free 2D drawing of G where the vertices are constrained to be
on any given curve of C and the edges are drawn as polylines with at
most one bend. We prove that every planar graph has a curve embedding
which can be computed in linear time. Further we present applications
of the concept of curve embedding to upward drawings and point-set
constrained drawings.

From WG 2003
29th Workshop on Graph Theoretic Concepts in Computer Science,
LNCS 2880
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041112.html
##-----------------TITLE------------------------##
Theory Seminar, 12 Nov 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
12 Nov 2004:
Deterministic Truthful Approximation Mechanisms for Scheduling Related
Machines
Authors:
Vincenzo Auletta, Roberto De Prisco, Paolo Penna, and Pino Persiano
Speaker:
Matthew Ba Nguyen

From:
Proceedings 21st International Symposium on Theoretical Aspects of
Computer Science, 2004.

The authors consider the problem of scheduling jobs on parallel related
machines owned by selfish agents.  They present a family of algorithms
that yield a (4+e)-approximation that incentivizes each selfish agent to
report the actual speed of his or her machine -- i.e., each agent will
maximize his or her own profit by reporting their actual speed.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041015.html
##-----------------TITLE------------------------##
Theory Seminar, 15 Oct 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
15 Oct 2004:
Very Efficient Non-Adaptive Group Testing
David Eppstein, Michael T. Goodrich, and Daniel S. Hirschberg


In combinatorial group testing, a set of items is given,
most of which are good (or pure) and some of which might be
defective (or contaminated).
Tests for contamination can be applied to arbitrary subsets
of these items.

We present descriptions of very efficient non-adaptive
combinatorial group testing algorithms that determine
which d items out of a given set of n items are defective
for particular small values of d.
These algorithms require fewer computational resources
and/or fewer combinatorial tests than previously known algorithms
for all practical values of n.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/041203.html
##-----------------TITLE------------------------##
Theory Seminar, 03 Dec 2004
##------------------TEXT------------------------##
ICS 269, Fall 2004: Theory Seminar
03 Dec 2004:

VCG Overpayment in Random Graphs
Authors: D. Karger, E. Nikolova
Speaker: Gwendoline Chien

From:
DIMACS Workshop on Computational Issues in Auction Design

The authors addressed the problem of selecting the cheapest possible route
between a source and a destination in a graph in which edges are owned by
self agents.  The VCG mechanism is the unique efficient mechanism, however
the payments made by VCG can be unacceptably high in some graphs.  In
this paper, they study the VCG overpayment in different types of graphs
with unit and uniformly random edge costs.  The results suggests that for
common real-world networks, the VCG payments will not e too much higher
than the true costs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110603.html
##-----------------TITLE------------------------##
Theory Seminar, 3 June 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
ICS 243


6 June 2011:
Speaker: Nickolaos Matsakis

Title: Improved Approximation Algorithms for
Maximum Cut and Satisfiability Problems Using Semidefinite Programming (JACM 1995)


Authors: M. Goemans and D. Williamson


Abstract:


This publication, currently, provides the best approximation ratio for the Maximum Cut problem, using a
novel application of Semidefinite Programming on Approximation Algorithms.
We, furthermore, discuss some newer applications and results of this
technique. We focus only on the Maximum Cut problem.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110527.html
##-----------------TITLE------------------------##
Theory Seminar, 13 May 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
ICS 243


17 May 2011:
Speaker: Darren Strash

New Theoretical and Practical Results for Listing All Maximal Cliques in Sparse Graphs 



Listing all maximal cliques in a given graph is an important combinatorial problem that has applications in bioinformatics, social network analysis, and document clustering (to name a few). Though there are many algorithms that can list all maximal cliques, there is no algorithm which is sufficient for large, sparse graphs in practice. Specifically, those algorithms that are designed for sparse graphs are slow, and those algorithms that are fast in practice require an adjacency matrix, which limits their use to small graphs. In this talk, I will describe a new algorithm for listing all maximal cliques that has a near-optimal running time, and works well in practice for large, sparse graphs.



This is joint work with David Eppstein and Maarten Loffler. 



These results appeared in ISAAC 2010 ( http://dx.doi.org/10.1007/978-3-642-17517-6_36 ) and SEA 2011 ( http://dx.doi.org/10.1007/978-3-642-20662-7_31 ).
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110429.html
##-----------------TITLE------------------------##
Theory Seminar, 29 April 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
ICS 243


29 April 2011:
Speaker: Lowell Trott

An Experimental Comparison of Force-Directed and Randomized Graph Drawing Algorithms


Authors: Franz J. Brandenburg, Michael Himsolt and Christoph Rohrer



The authors report on experiments with fivegraph drawing algorithms 
for general undirected graphs. These are the algorithms FR introduced 
by Fruchterman and Reingold , KK by Kamada and Kawai , DH by Davidson 
and Harel , Tu by Tunkelang  and GEM by Frick, Ludwig and Mehldau. 
They tested these algorithms on a wide collection of examples and 
with different settings of parameters.  
Examples are from original papers and by their own.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110415.html
##-----------------TITLE------------------------##
Theory Seminar, 15 April 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
Bren Hall, Room 1427


15 April 2011:
Saumi Bandyopadhyay
"Three Problems About Dynamic Convex Hulls" by Timothy Chan 


We present three results related to dynamic convex hulls: 

A fully dynamic data structure for maintaining a set of n points in the plane so that we
can and the edges of the convex hull intersecting a query line, with expected query and
amortized update time O(log1+" n) for an arbitrarily small constant " > 0. This improves
the previous bound of O(log3=2 n). 

A fully dynamic data structure for maintaining a set of n points in the plane to support
halfplane range reporting queries in O(logn+k) time with O(polylogn) expected amortized
update time. A similar result holds for 3-dimensional orthogonal range reporting. For
3-dimensional halfspace range reporting, the query time increases to O(log2 n= log logn+k). 

A semi-online dynamic data structure for maintaining a set of n line segments in the plane,
so that we can decide whether a query line segment lies completely above the lower envelope,
with query time O(logn) and amortized update time O(n"). As a corollary, we can solve
the following problem in O(n1+") time: given a triangulated terrain in 3-d of size n, identify
all faces that are partially visible from a fixed viewpoint.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110422.html
##-----------------TITLE------------------------##
Theory Seminar, 22 April 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
ICS 243


22 April 2011:
Speaker: Jenny Lam

Title: Computing Planar Voronoi Diagrams in Double Precision: A Further Example of Degree-driven Algorithm Design 

Authors: David L. Millman, Jack Snoeyink 



Abstract: Geometric algorithms use numerical computations to perform 
geometric tests, so correct algorithms may produce erroneous results 
if insufficient arithmetic precision is available. Liotta, Preparata, 
and Tamassia, in 1999, suggested that algorithm design, which traditionally 
considers running time and memory space, could also consider precision 
as a resource. They demonstrated that the Voronoi diagram of n sites on 
a U x U grid could be rounded to answer nearest neighbor queries on 
the same grid using only double precision. They still had to compute 
the Voronoi diagram before rounding, which requires the quadruple-precision 
InCircle test. We develop a 
"degree-2 Voronoi diagram" that can be computed using only double 
precision by a randomized incremental construction in O(n log n log U) 
expected time and O(n) expected space. Our diagram also answers nearest 
neighbor queries, even though 
it doesn't even use sufficient precision to determine a 
Delaunay triangulation.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110506.html
##-----------------TITLE------------------------##
Theory Seminar, 6 May 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
ICS 243


6 May 2011:
Speaker: Joe Simons

Fully Retroactive Approximate Range 
and Nearest Neighbor Searching



We describe fully retroactive dynamic data structures
for approximate range reporting 
and approximate nearest neighbor reporting. We show
how to maintain, for any positive constant d, a set of n
points in R^d indexed by time such that we can perform
insertions or deletions at any point in the timeline in 
O(log n) amortized time. We support, for any small constant epsilon>0,
(1+ epsilon)-approximate range reporting queries at any point in the
timeline in O(log n + k) time, where k is the output size.
We also show how to answer (1+epsilon)-approximate nearest neighbor
queries for any point in the past or present in O(log n) time.
Joint work with Michael Goodrich.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/110513.html
##-----------------TITLE------------------------##
Theory Seminar, 13 May 2011
##------------------TEXT------------------------##
CS 269S, Winter 2011: Theory Seminar
ICS 243


13 May 2011:
Speaker: Michael Bannister

Complexity of Finding Non-Planar Rectilinear Drawings of Graphs


by Manuch, Patterson, Poon and Thachuk



We study the complexity of the problem of finding non-planar rectilinear
drawings of graphs. This problem is known to be NP-complete. We consider
natural restrictions of this problem where constraints are placed on the
possible orientations of edges. In particular, we show that if each edge
has prescribed direction "left", "right", "down" or "up", the problem of
finding a rectilinear drawing is polynomial, while finding such a drawing
with the minimum area is NP-complete. When assigned directions are
"horizontal" or "vertical" or a cyclic order of the edges at each vertex
is specified, the problem is NP-complete. We show that these two
NP-complete cases are fixed parameter tractable in the number of vertices
of degree 3 or 4.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/990219.html
##-----------------TITLE------------------------##
Theory Seminar, 12 Feb 1999
##------------------TEXT------------------------##
ICS 269, Winter 1999: Theory Seminar


12 February 1999:
A Survey of Rollback-Recovery Protocols in Message-Passing Systems
by: E.N. Elnozahy, D.B. Johnson, Y.M. Wang
Thuan Do, ICS, UC Irvine

Abstract: The problem of rollback-recovery in message-passing
systems has undergone extensive study. In this survey, we review
rollback-recovery techniques that do not require special language
constructs, and classify them into two primary categories.
Checkpoint-based rollback-recovery relies solely on checkpointed
states for system state restoration. Depending on when checkpoints
are taken, existing approaches can be divided into uncoordinated
checkpointing, coordinated checkpointed and communication-induced
checkpointing. Log-based rollback-recovery uses checkpointing and
message logging. There are three different log-based approaches,
namely, pessimistic logging, optimistic logging and causal logging.
We identify a set of desirable properties of rollback-recovery
protocols, and compare different approaches with respect to these
properties. Log-based rollback-recovery protocols generally rely on
the assumption of piecewise determinism and pay additional overhead
to allow faster output commits and more localized recovery. We
present research issues under each approach, and review existing
solutions to address them. We also present implementation issues of
checkpointing and message logging.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/990226.html
##-----------------TITLE------------------------##
Theory Seminar, 12 Feb 1999
##------------------TEXT------------------------##
ICS 269, Winter 1999: Theory Seminar


26 February 1999:
Packing Rectangles in Two or More Dimensions. 
George Lueker, ICS, UC Irvine

This talk will cover two manuscripts, one by Joel Spencer, and one
by Coffman, Lueker, Spencer, Weber, and Winkler.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/990312.html
##-----------------TITLE------------------------##
Theory Seminar, 12 March 1999
##------------------TEXT------------------------##
ICS 269, Winter 1999: Theory Seminar


12 March 1999:
When does a dynamic programming formulation guarantee the existence
of an FPTAS? (SODA99) by G. Woeginger
Speaker: Joseph Wang, ICS, UC Irvine

We derive results of the following flavor: If a combinatorial
optimization problem can be formulated via a dynamic program of
certain structure and if the involved cost and transition functions
satisfy certain arithmetical conditions, then the optimization
problem automatically possesses a fully polynomial time
approximation scheme (FPTAS). Our characterizations provide a
natural and uniform approach to fully polynomial time approximation
schemes. We illustrate their strength and generality by deducing
from them the existence of FPTASs for a multitude of scheduling
problems. Many known approximability results follow as corollaries
from our main result.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/990212.html
##-----------------TITLE------------------------##
Theory Seminar, 12 Feb 1999
##------------------TEXT------------------------##
ICS 269, Winter 1999: Theory Seminar


12 February 1999:
Compact Routing with Minimum Stretch
Yi Cao, ICS, UC Irvine

Abstract: The paper presents the first universal compact routing
algorithm with maximum stretch bounded by 3 that uses sublinear
space at every vertex. The algorithm uses local routing tables of
size O(n2/3log4/3n) and achieves paths that are most 3 times the
length of the shortest path distances for all nodes in an arbitrary
weighted undirected network. This answers an open question of
Gavoille and Gengler who showed that any universal compact routing
algorithm with maximum stretch strictly less than 3 must use W(n)
local space at some vertex.
##------------------URL-------------------------##
http://www.ics.uci.edu/~theory/269/990304.html
##-----------------TITLE------------------------##
Theory Seminar, 12 March 1999
##------------------TEXT------------------------##
ICS 269, Winter 1999: Theory Seminar


4 March 1999:
"Approximating Maximum Leaf Spanning Trees in Almost Linear Time"
Journal of Algorithms, Oct. '98 by Hsueh-I Lu & R. Ravi
Speaker: Dave Goggin, ICS, UC Irvine

Abstract: Given an undirected graph, finding a spanning tree of the
graph with the maximum number of leaves in MAX SNP-complete. In
this paper we give a new greedy 3-approximation algorithm for
maximum leaf spanning trees. The running time O((m+n)alpha(m,n))
required by our algorithm, where m is the number of edges and n is
the number of nodes, is almost linear in the size of the graph. We
also demonstrate thatour analysis of the performance of the greedy
algorithm is tight via an example.
##------------------URL-------------------------##
http://www.ics.uci.edu/~dan/class/267/fax.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
FAX Group 3 codes

special codesFILLER to makelinelen = 8k0EOL000000000001

termination codesrun-lengthwhite codeblack code

Makeup codesrun-lengthwhite codeblack code

Additional makeup codesrun-lengthwhite/black code17280100110111792000000010001856000000011001920000000011011984000000010010204800000001001121120000000101002170000000010101224000000001011023040000000101112368000000011100243200000001110124960000000111102560000000011111
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/docs/wiki/
##-----------------TITLE------------------------##
Index of /releases/1.0/docs/wiki
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  CompileDoc.html16-Apr-2013 18:54  666  FilterTreeDoc.html16-Apr-2013 18:54  6.0K MatTreeDoc.html16-Apr-2013 18:54  2.8K PartEnumDoc.html16-Apr-2013 18:54  4.8K SepiaDoc.html16-Apr-2013 18:54  1.9K StringMapDoc.html16-Apr-2013 18:54  3.0K UtilDoc.html16-Apr-2013 18:54  702  filtertree.jpg16-Apr-2013 18:54   33K trac.css16-Apr-2013 18:54   12K wiki-index.html16-Apr-2013 18:54  633  





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/src/partenum/
##-----------------TITLE------------------------##
Index of /releases/1.0/src/partenum
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  dataset.txt16-Apr-2013 18:54  828  example.cc16-Apr-2013 18:54  1.1K makefile16-Apr-2013 18:54  1.3K partenum.cc16-Apr-2013 18:54   11K partenum.h16-Apr-2013 18:54  2.4K perftest.cc16-Apr-2013 18:54  534  unittest.cc16-Apr-2013 18:54  1.1K 





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/src/filtertree/
##-----------------TITLE------------------------##
Index of /releases/1.0/src/filtertree
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  buckethead.cc16-Apr-2013 18:54  2.7K buckethead.h16-Apr-2013 18:54  1.2K example.cc16-Apr-2013 18:54  849  filtertree.cc16-Apr-2013 18:54   16K filtertree.h16-Apr-2013 18:54  3.7K gram.cc16-Apr-2013 18:54   12K gram.h16-Apr-2013 18:54  5.7K makefile16-Apr-2013 18:54  1.0K perftest.cc16-Apr-2013 18:54  1.2K unittest.cc16-Apr-2013 18:54  1.2K 





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/src/util/
##-----------------TITLE------------------------##
Index of /releases/1.0/src/util
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  appsearch.cc16-Apr-2013 18:54  5.4K appsearch.h16-Apr-2013 18:54  1.5K dataset.txt16-Apr-2013 18:54   18  ed.cc16-Apr-2013 18:54  2.9K ed.h16-Apr-2013 18:54  548  gram.cc16-Apr-2013 18:54   17K gram.h16-Apr-2013 18:54  4.4K input.cc16-Apr-2013 18:54  1.9K input.h16-Apr-2013 18:54  716  jd.cc16-Apr-2013 18:54  1.0K jd.h16-Apr-2013 18:54  448  makefile16-Apr-2013 18:54  1.1K misc.cc16-Apr-2013 18:54  1.9K misc.h16-Apr-2013 18:54  1.0K output.cc16-Apr-2013 18:54  324  output.h16-Apr-2013 18:54  2.1K scan.cc16-Apr-2013 18:54  572  scan.h16-Apr-2013 18:54  750  speedtest.cc16-Apr-2013 18:54  3.4K unittest.cc16-Apr-2013 18:54   13K 





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/src/stringmap/
##-----------------TITLE------------------------##
Index of /releases/1.0/src/stringmap
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  editdistance.cpp16-Apr-2013 18:54  3.5K editdistance.h16-Apr-2013 18:54  898  element.cpp16-Apr-2013 18:54   11K element.h16-Apr-2013 18:54  3.0K index.cpp16-Apr-2013 18:54   36K index.h16-Apr-2013 18:54  8.3K makefile16-Apr-2013 18:54  1.1K mapper.cpp16-Apr-2013 18:54   10K mapper.h16-Apr-2013 18:54  2.0K node.cpp16-Apr-2013 18:54  5.0K rect.cpp16-Apr-2013 18:54   17K rtreeparams.h16-Apr-2013 18:54  530  source-big.zip16-Apr-2013 18:54  606K source.zip16-Apr-2013 18:54   27K source1.zip16-Apr-2013 18:54   14K source2.zip16-Apr-2013 18:54   14K split_l.cpp16-Apr-2013 18:54   10K split_l.h16-Apr-2013 18:54  1.1K split_q.cpp16-Apr-2013 18:54  8.1K split_q.h16-Apr-2013 18:54  927  stringmap.cpp16-Apr-2013 18:54   10K stringmap.h16-Apr-2013 18:54  3.4K stringmap_unittest.cpp16-Apr-2013 18:54  6.8K 





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/src/mattree/
##-----------------TITLE------------------------##
Index of /releases/1.0/src/mattree
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  NFA.cpp16-Apr-2013 18:54   11K NFA.h16-Apr-2013 18:54  1.9K NFAMatch.cpp16-Apr-2013 18:54   10K NFAMatch.h16-Apr-2013 18:54  1.3K NFANode.cpp16-Apr-2013 18:54  3.0K NFANode.h16-Apr-2013 18:54  1.5K NFATransition.cpp16-Apr-2013 18:54  2.3K NFATransition.h16-Apr-2013 18:54  891  RETree.cpp16-Apr-2013 18:54   15K RETree.dsp16-Apr-2013 18:54  5.5K RETree.dsw16-Apr-2013 18:54  535  Rect.cpp16-Apr-2013 18:54  6.9K StdAfx.cpp16-Apr-2013 18:54  636  StdAfx.h16-Apr-2013 18:54  1.0K Trie.cpp16-Apr-2013 18:54   25K Trie.h16-Apr-2013 18:54  3.0K data.zip16-Apr-2013 18:54  835K distance.cpp16-Apr-2013 18:54  3.1K distance.h16-Apr-2013 18:54  810  index.cpp16-Apr-2013 18:54  8.7K index.h16-Apr-2013 18:54  3.4K node.cpp16-Apr-2013 18:54  4.9K parameters.h16-Apr-2013 18:54  1.4K query.zip16-Apr-2013 18:54  461K 





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/1.0/src/sepia/
##-----------------TITLE------------------------##
Index of /releases/1.0/src/sepia
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Chen Li (Faculty)
Yiming Lu (Ph.D. Student)
Rares Vernica (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.





NameLast modifiedSizeDescriptionParent Directory   -  cluster/16-Apr-2013 18:54    -  dataset.txt16-Apr-2013 18:54  805  duplicate.cc16-Apr-2013 18:54  3.1K duplicate.h16-Apr-2013 18:54  509  example.cc16-Apr-2013 18:54  1.0K freqest/16-Apr-2013 18:54    -  makefile16-Apr-2013 18:54  3.8K makefile.defs16-Apr-2013 18:54  427  perftest.cc16-Apr-2013 18:54  1.1K ppdtable/16-Apr-2013 18:54    -  sample.cc16-Apr-2013 18:54  2.7K sample.h16-Apr-2013 18:54  1.7K sepia.cc16-Apr-2013 18:54  9.3K sepia.h16-Apr-2013 18:54  1.9K simfunc/16-Apr-2013 18:54    -  unittest.cc16-Apr-2013 18:54  853  





 License Agreement: Permission to use, copy,
modify, and distribute the implementations of MAT-Tree, SEPIA,
StringMap, and FilterTree is permitted under the terms of the GNU
Public License (GPL). The implementation of the PartEnum algorithm
invented by Microsoft researchers is limited to non commercial use,
which would be covered under the royalty free covenant that Microsoft
made public.



For any questions regarding this release, please send email to
flamingo AT ics.uci.edu
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/docs/index.html
##-----------------TITLE------------------------##
Wiki Index
##------------------TEXT------------------------##
Index of Wiki Pages

 AppString Documentation 

GettingStartedDoc

CompileDoc


 Modules 

CommonDoc

FilterTreeDoc

ListMergerDoc

MatTreeDoc

PartEnumDoc

SepiaDoc

StringMapDoc

UtilDoc
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/docs/UtilDoc.html
##-----------------TITLE------------------------##
UtilDoc - Chen Li -- Group - Trac
##------------------TEXT------------------------##
Back to Index




AppString
> AppStringDoc
Util
Overview
The module contains a few commonly used functions.
Usage
For compiling instructions, please see CompileDoc.
The module uses C++ STL TR1 library provided by GNU GCC.





Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/docs/CompileDoc.html
##-----------------TITLE------------------------##
CompileDoc - Chen Li -- Group - Trac
##------------------TEXT------------------------##
Back to Index




AppString
> AppStringDoc
Compile
The code was compiled using GNU GCC 4.2.3 and makefiles are
provided for each module.
A global makefile for the entire package is provided in the root
of the source directory, src. Please edit
makefile.ini in the root of the source directory and set
CODEBASEROOT to the absolute path of the source code
directory.
e.g., if you put the code in /home/joe/flamingo-2.0/src do:

CODEBASEROOT = /home/joe/flamingo-2.0/src

To compile all packages please run make in the root of
the source directory. To compile each module, please run
make inside the corresponding module directory.
Please note that for the mattree module, there is no
makefile provided, only a Visual C++ project file is provided. This
module has not been compiled using GCC.





Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/util/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/util
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  appsearch.cc16-Apr-2013 18:53  5.3K appsearch.h16-Apr-2013 18:53  1.5K array.cc16-Apr-2013 18:53  6.0K array.h16-Apr-2013 18:53  9.4K dataset.txt16-Apr-2013 18:53   18  debug.h16-Apr-2013 18:53  1.8K gram.cc16-Apr-2013 18:53   24K gram.h16-Apr-2013 18:53  7.2K input.cc16-Apr-2013 18:53  1.8K input.h16-Apr-2013 18:53  1.2K looptimer.cc16-Apr-2013 18:53  2.5K looptimer.h16-Apr-2013 18:53  927  makefile16-Apr-2013 18:53  1.6K misc.cc16-Apr-2013 18:53  5.5K misc.h16-Apr-2013 18:53  3.2K output.cc16-Apr-2013 18:53  787  output.h16-Apr-2013 18:53  3.5K scan.cc16-Apr-2013 18:53  547  scan.h16-Apr-2013 18:53  850  simfuncs.cc16-Apr-2013 18:53   11K simfuncs.h16-Apr-2013 18:53  2.2K speedtest.cc16-Apr-2013 18:53  3.2K stringshuffler.cc16-Apr-2013 18:53  1.2K stringshuffler.h16-Apr-2013 18:53  876  unittest.cc16-Apr-2013 18:53   24K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/listmerger/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/listmerger
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  counttable.cc16-Apr-2013 18:53  920  counttable.h16-Apr-2013 18:53  664  divideskipmerger.cc16-Apr-2013 18:53  454  divideskipmerger.h16-Apr-2013 18:53   22K example.cc16-Apr-2013 18:53  3.0K heap.cc16-Apr-2013 18:53  4.3K heap.h16-Apr-2013 18:53  1.3K heapmerger-pq.cc16-Apr-2013 18:53  2.2K heapmerger.cc16-Apr-2013 18:53  292  heapmerger.h16-Apr-2013 18:53  2.3K listmerger.h16-Apr-2013 18:53  1.0K makefile16-Apr-2013 18:53  2.2K mergeoptmerger.cc16-Apr-2013 18:53  657  mergeoptmerger.h16-Apr-2013 18:53  3.5K mergeskipmerger.cc16-Apr-2013 18:53  305  mergeskipmerger.h16-Apr-2013 18:53  3.7K mergeskipplusmerger.cc16-Apr-2013 18:53  313  mergeskipplusmerger.h16-Apr-2013 18:53  4.9K mergeskiptest.cc16-Apr-2013 18:53  301  mergeskiptest.h16-Apr-2013 18:53  4.3K scancountmerger.cc16-Apr-2013 18:53  304  scancountmerger.h16-Apr-2013 18:53  3.5K showutil.cc16-Apr-2013 18:53  2.6K showutil.h16-Apr-2013 18:53  813  unittest.cc16-Apr-2013 18:53  3.1K utilities.cc16-Apr-2013 18:53   20K utilities.h16-Apr-2013 18:53  5.3K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/common/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/common
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  gramgen.cc16-Apr-2013 18:53  5.5K gramgen.h16-Apr-2013 18:53  4.3K makefile16-Apr-2013 18:53  1.0K query.cc16-Apr-2013 18:53  299  query.h16-Apr-2013 18:53  1.6K simmetric.cc16-Apr-2013 18:53   16K simmetric.h16-Apr-2013 18:53  9.2K typedef.cc16-Apr-2013 18:53  301  typedef.h16-Apr-2013 18:53  380  unittest.cc16-Apr-2013 18:53  5.7K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/filtertree/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/filtertree
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  data/16-Apr-2013 18:53    -  example.cc16-Apr-2013 18:53  7.6K filtertreenode.cc16-Apr-2013 18:53  319  filtertreenode.h16-Apr-2013 18:53  3.5K filtertypes.cc16-Apr-2013 18:53  2.0K filtertypes.h16-Apr-2013 18:53  2.1K ftindexerabs.cc16-Apr-2013 18:53  315  ftindexerabs.h16-Apr-2013 18:53  6.4K ftindexermemabs.cc16-Apr-2013 18:53  321  ftindexermemabs.h16-Apr-2013 18:53  9.9K ftindexersimple.cc16-Apr-2013 18:53  321  ftindexersimple.h16-Apr-2013 18:53  5.0K ftsearcherabs.cc16-Apr-2013 18:53  317  ftsearcherabs.h16-Apr-2013 18:53  7.6K ftsearchermem.cc16-Apr-2013 18:53  317  ftsearchermem.h16-Apr-2013 18:53  3.0K gramlist.h16-Apr-2013 18:53  596  gramlistsimple.cc16-Apr-2013 18:53  319  gramlistsimple.h16-Apr-2013 18:53  650  makefile16-Apr-2013 18:53  3.4K perftest.cc16-Apr-2013 18:53  2.5K statsgen.cc16-Apr-2013 18:53  1.1K statsgen.h16-Apr-2013 18:53   16K statsutil.cc16-Apr-2013 18:53  2.8K statsutil.h16-Apr-2013 18:53  2.2K stringcontainer.cc16-Apr-2013 18:53  322  stringcontainer.h16-Apr-2013 18:53  3.2K unittest.cc16-Apr-2013 18:53  7.5K wrappers/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/partenum/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/partenum
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  dataset.txt16-Apr-2013 18:53  828  example.cc16-Apr-2013 18:53  1.1K makefile16-Apr-2013 18:53  1.0K partenum.cc16-Apr-2013 18:53   12K partenum.h16-Apr-2013 18:53  2.4K unittest.cc16-Apr-2013 18:53  1.1K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/stringmap/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/stringmap
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  editdistance.cpp16-Apr-2013 18:53  3.5K editdistance.h16-Apr-2013 18:53  898  element.cpp16-Apr-2013 18:53   11K element.h16-Apr-2013 18:53  3.0K index.cpp16-Apr-2013 18:53   36K index.h16-Apr-2013 18:53  8.3K makefile16-Apr-2013 18:53  1.2K mapper.cpp16-Apr-2013 18:53   10K mapper.h16-Apr-2013 18:53  2.0K node.cpp16-Apr-2013 18:53  5.0K rect.cpp16-Apr-2013 18:53   17K rtreeparams.h16-Apr-2013 18:53  526  source-big.zip16-Apr-2013 18:53  606K source.zip16-Apr-2013 18:53   27K source1.zip16-Apr-2013 18:53   14K source2.zip16-Apr-2013 18:53   14K split_l.cpp16-Apr-2013 18:53   10K split_l.h16-Apr-2013 18:53  1.1K split_q.cpp16-Apr-2013 18:53  8.1K split_q.h16-Apr-2013 18:53  928  stringmap.cpp16-Apr-2013 18:53   10K stringmap.h16-Apr-2013 18:53  3.4K stringmap_unittest.cpp16-Apr-2013 18:53  6.9K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/mattree/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/mattree
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  NFA.cpp16-Apr-2013 18:53   11K NFA.h16-Apr-2013 18:53  1.9K NFAMatch.cpp16-Apr-2013 18:53   10K NFAMatch.h16-Apr-2013 18:53  1.3K NFANode.cpp16-Apr-2013 18:53  3.0K NFANode.h16-Apr-2013 18:53  1.5K NFATransition.cpp16-Apr-2013 18:53  2.3K NFATransition.h16-Apr-2013 18:53  883  RETree.cpp16-Apr-2013 18:53   15K RETree.dsp16-Apr-2013 18:53  5.5K RETree.dsw16-Apr-2013 18:53  535  Rect.cpp16-Apr-2013 18:53  6.9K StdAfx.cpp16-Apr-2013 18:53  622  StdAfx.h16-Apr-2013 18:53  1.0K Trie.cpp16-Apr-2013 18:53   25K Trie.h16-Apr-2013 18:53  3.0K data.zip16-Apr-2013 18:53  835K distance.cpp16-Apr-2013 18:53  3.1K distance.h16-Apr-2013 18:53  810  index.cpp16-Apr-2013 18:53  8.7K index.h16-Apr-2013 18:53  3.4K node.cpp16-Apr-2013 18:53  4.9K parameters.h16-Apr-2013 18:53  1.4K query.zip16-Apr-2013 18:53  461K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0/src/sepia/
##-----------------TITLE------------------------##
Index of /releases/2.0/src/sepia
##------------------TEXT------------------------##
FLAMINGO Package(Approximate String Matching)
Department of Computer Science, UC Irvine




Contributors
Alexander Behm (Ph.D. Student)
Shengyue Ji (Ph.D. Student)
Liang Jin, graduated from UC Irvine in 2005.
Chen Li (Faculty)
Jiaheng Lu, postdoc, 2006-2008
Yiming Lu, graduated from UC Irvine in 2008.
Rares Vernica (Ph.D. Student)





NameLast modifiedSizeDescriptionParent Directory   -  cluster/16-Apr-2013 18:53    -  dataset.txt16-Apr-2013 18:53  805  duplicate.cc16-Apr-2013 18:53  3.0K duplicate.h16-Apr-2013 18:53  483  example.cc16-Apr-2013 18:53  1.0K freqest/16-Apr-2013 18:53    -  makefile16-Apr-2013 18:53  3.8K makefile.defs16-Apr-2013 18:53  411  perftest.cc16-Apr-2013 18:53  1.0K ppdtable/16-Apr-2013 18:53    -  sample.cc16-Apr-2013 18:53  2.7K sample.h16-Apr-2013 18:53  1.6K sepia.cc16-Apr-2013 18:53  9.2K sepia.h16-Apr-2013 18:53  1.9K simfunc/16-Apr-2013 18:53    -  unittest.cc16-Apr-2013 18:53  827  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/docs/UtilDoc.html
##-----------------TITLE------------------------##
UtilDoc - Chen Li -- Group - Trac
##------------------TEXT------------------------##
Back to Index




AppString
> AppStringDoc
Util
Overview
The module contains a few commonly used functions.
Usage
For compiling instructions, please see CompileDoc.
The module uses C++ STL TR1 library provided by GNU GCC.





Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/docs/CompileDoc.html
##-----------------TITLE------------------------##
CompileDoc - Chen Li -- Group - Trac
##------------------TEXT------------------------##
Back to Index




AppString
> AppStringDoc
Compile
The code was compiled using GNU GCC 4.3.2 and makefiles are
provided for each module.
A global makefile for the entire package is provided in the root
of the source directory, src. Please edit
makefile.ini in the root of the source directory and set
CODEBASEROOT to the absolute path of the source code
directory.
e.g., if you put the code in /home/joe/flamingo-2.0.1/src
do:

CODEBASEROOT = /home/joe/flamingo-2.0.1/src

To compile all packages please run make in the root of
the source directory. To compile each module, please run
make inside the corresponding module directory.
Please note that for the mattree module, there is no
makefile provided, only a Visual C++ project file is provided. This
module has not been compiled using GCC.





Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/docs/index.html
##-----------------TITLE------------------------##
Wiki Index
##------------------TEXT------------------------##
Index of Wiki Pages

 AppString Documentation 

GettingStartedDoc

CompileDoc


 Modules 

CommonDoc

FilterTreeDoc

ListMergerDoc

MatTreeDoc

PartEnumDoc

SepiaDoc

StringMapDoc

UtilDoc
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/stringmap/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/stringmap
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/stringmap
NameLast modifiedSizeDescriptionParent Directory   -  editdistance.cpp16-Apr-2013 18:54  3.5K editdistance.h16-Apr-2013 18:54  898  element.cpp16-Apr-2013 18:54   11K element.h16-Apr-2013 18:54  3.0K index.cpp16-Apr-2013 18:54   36K index.h16-Apr-2013 18:54  8.3K makefile16-Apr-2013 18:54  1.2K mapper.cpp16-Apr-2013 18:54   10K mapper.h16-Apr-2013 18:54  2.0K node.cpp16-Apr-2013 18:54  5.0K rect.cpp16-Apr-2013 18:54   17K rtreeparams.h16-Apr-2013 18:54  526  source-big.zip16-Apr-2013 18:54  606K source.zip16-Apr-2013 18:54   27K source1.zip16-Apr-2013 18:54   14K source2.zip16-Apr-2013 18:54   14K split_l.cpp16-Apr-2013 18:54   10K split_l.h16-Apr-2013 18:54  1.1K split_q.cpp16-Apr-2013 18:54  8.1K split_q.h16-Apr-2013 18:54  928  stringmap.cpp16-Apr-2013 18:54   10K stringmap.h16-Apr-2013 18:54  3.4K stringmap_unittest.cpp16-Apr-2013 18:54  7.0K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/mattree/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/mattree
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/mattree
NameLast modifiedSizeDescriptionParent Directory   -  NFA.cpp16-Apr-2013 18:54   11K NFA.h16-Apr-2013 18:54  1.9K NFAMatch.cpp16-Apr-2013 18:54   10K NFAMatch.h16-Apr-2013 18:54  1.3K NFANode.cpp16-Apr-2013 18:54  3.0K NFANode.h16-Apr-2013 18:54  1.5K NFATransition.cpp16-Apr-2013 18:54  2.3K NFATransition.h16-Apr-2013 18:54  883  RETree.cpp16-Apr-2013 18:54   15K RETree.dsp16-Apr-2013 18:54  5.5K RETree.dsw16-Apr-2013 18:54  535  Rect.cpp16-Apr-2013 18:54  6.9K StdAfx.cpp16-Apr-2013 18:54  622  StdAfx.h16-Apr-2013 18:54  1.0K Trie.cpp16-Apr-2013 18:54   25K Trie.h16-Apr-2013 18:54  3.0K data.zip16-Apr-2013 18:54  835K distance.cpp16-Apr-2013 18:54  3.1K distance.h16-Apr-2013 18:54  810  index.cpp16-Apr-2013 18:54  8.7K index.h16-Apr-2013 18:54  3.4K node.cpp16-Apr-2013 18:54  4.9K parameters.h16-Apr-2013 18:54  1.4K query.zip16-Apr-2013 18:54  461K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/common/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/common
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/common
NameLast modifiedSizeDescriptionParent Directory   -  gramgen.cc16-Apr-2013 18:54  5.5K gramgen.h16-Apr-2013 18:54  4.3K makefile16-Apr-2013 18:54  1.0K query.cc16-Apr-2013 18:54  299  query.h16-Apr-2013 18:54  1.7K simmetric.cc16-Apr-2013 18:54   17K simmetric.h16-Apr-2013 18:54  9.2K typedef.cc16-Apr-2013 18:54  301  typedef.h16-Apr-2013 18:54  380  unittest.cc16-Apr-2013 18:54  5.7K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/sepia/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/sepia
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/sepia
NameLast modifiedSizeDescriptionParent Directory   -  cluster/16-Apr-2013 18:54    -  dataset.txt16-Apr-2013 18:54  805  duplicate.cc16-Apr-2013 18:54  3.0K duplicate.h16-Apr-2013 18:54  483  example.cc16-Apr-2013 18:54  1.0K freqest/16-Apr-2013 18:54    -  makefile16-Apr-2013 18:54  3.8K makefile.defs16-Apr-2013 18:54  510  perftest.cc16-Apr-2013 18:54  1.0K ppdtable/16-Apr-2013 18:54    -  sample.cc16-Apr-2013 18:54  2.7K sample.h16-Apr-2013 18:54  1.7K sepia.cc16-Apr-2013 18:54  9.2K sepia.h16-Apr-2013 18:54  1.9K simfunc/16-Apr-2013 18:54    -  unittest.cc16-Apr-2013 18:54  827  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/partenum/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/partenum
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/partenum
NameLast modifiedSizeDescriptionParent Directory   -  dataset.txt16-Apr-2013 18:54  828  example.cc16-Apr-2013 18:54  1.1K makefile16-Apr-2013 18:54  1.0K partenum.cc16-Apr-2013 18:54   12K partenum.h16-Apr-2013 18:54  2.4K unittest.cc16-Apr-2013 18:54  1.1K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/filtertree/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/filtertree
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/filtertree
NameLast modifiedSizeDescriptionParent Directory   -  data/16-Apr-2013 18:54    -  example.cc16-Apr-2013 18:54  7.6K filtertreenode.cc16-Apr-2013 18:54  319  filtertreenode.h16-Apr-2013 18:54  3.5K filtertypes.cc16-Apr-2013 18:54  2.0K filtertypes.h16-Apr-2013 18:54  2.1K ftindexerabs.cc16-Apr-2013 18:54  315  ftindexerabs.h16-Apr-2013 18:54  6.5K ftindexermemabs.cc16-Apr-2013 18:54  321  ftindexermemabs.h16-Apr-2013 18:54  9.9K ftindexersimple.cc16-Apr-2013 18:54  321  ftindexersimple.h16-Apr-2013 18:54  5.0K ftsearcherabs.cc16-Apr-2013 18:54  317  ftsearcherabs.h16-Apr-2013 18:54  7.6K ftsearchermem.cc16-Apr-2013 18:54  317  ftsearchermem.h16-Apr-2013 18:54  3.0K gramlist.h16-Apr-2013 18:54  596  gramlistsimple.cc16-Apr-2013 18:54  319  gramlistsimple.h16-Apr-2013 18:54  650  makefile16-Apr-2013 18:54  3.4K perftest.cc16-Apr-2013 18:54  2.5K statsgen.cc16-Apr-2013 18:54  1.1K statsgen.h16-Apr-2013 18:54   16K statsutil.cc16-Apr-2013 18:54  2.8K statsutil.h16-Apr-2013 18:54  2.2K stringcontainer.cc16-Apr-2013 18:54  322  stringcontainer.h16-Apr-2013 18:54  3.2K unittest.cc16-Apr-2013 18:54  7.5K wrappers/16-Apr-2013 18:54    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/2.0.1/src/listmerger/
##-----------------TITLE------------------------##
Index of /releases/2.0.1/src/listmerger
##------------------TEXT------------------------##
Index of /releases/2.0.1/src/listmerger
NameLast modifiedSizeDescriptionParent Directory   -  counttable.cc16-Apr-2013 18:54  920  counttable.h16-Apr-2013 18:54  664  divideskipmerger.cc16-Apr-2013 18:54  454  divideskipmerger.h16-Apr-2013 18:54   22K example.cc16-Apr-2013 18:54  3.0K heap.cc16-Apr-2013 18:54  4.3K heap.h16-Apr-2013 18:54  1.3K heapmerger-pq.cc16-Apr-2013 18:54  2.2K heapmerger.cc16-Apr-2013 18:54  292  heapmerger.h16-Apr-2013 18:54  2.3K listmerger.h16-Apr-2013 18:54  1.0K makefile16-Apr-2013 18:54  2.2K mergeoptmerger.cc16-Apr-2013 18:54  657  mergeoptmerger.h16-Apr-2013 18:54  3.5K mergeskipmerger.cc16-Apr-2013 18:54  305  mergeskipmerger.h16-Apr-2013 18:54  3.7K mergeskipplusmerger.cc16-Apr-2013 18:54  313  mergeskipplusmerger.h16-Apr-2013 18:54  4.9K mergeskiptest.cc16-Apr-2013 18:54  301  mergeskiptest.h16-Apr-2013 18:54  4.3K scancountmerger.cc16-Apr-2013 18:54  304  scancountmerger.h16-Apr-2013 18:54  3.5K showutil.cc16-Apr-2013 18:54  2.6K showutil.h16-Apr-2013 18:54  813  unittest.cc16-Apr-2013 18:54  3.1K utilities.cc16-Apr-2013 18:54   20K utilities.h16-Apr-2013 18:54  5.3K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/docs/index.html
##-----------------TITLE------------------------##
Wiki Index
##------------------TEXT------------------------##
Index of Wiki Pages

 AppString Documentation 

GettingStartedDoc

CompileDoc


 Modules 

CommonDoc

FilterTreeDoc

ListMergerDoc

MatTreeDoc

PartEnumDoc

SepiaDoc

StringMapDoc

UtilDoc

TopkDoc
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/sepia/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/sepia
##------------------TEXT------------------------##
Index of /releases/3.0/src/sepia
NameLast modifiedSizeDescriptionParent Directory   -  cluster/16-Apr-2013 18:53    -  dataset.txt16-Apr-2013 18:53  805  duplicate.cc16-Apr-2013 18:53  3.0K duplicate.h16-Apr-2013 18:53  483  example.cc16-Apr-2013 18:53  1.0K freqest/16-Apr-2013 18:53    -  makefile16-Apr-2013 18:53  4.3K makefile.defs16-Apr-2013 18:53  510  perftest.cc16-Apr-2013 18:53  1.0K ppdtable/16-Apr-2013 18:53    -  sample.cc16-Apr-2013 18:53  2.7K sample.h16-Apr-2013 18:53  1.7K sepia.cc16-Apr-2013 18:53  9.2K sepia.h16-Apr-2013 18:53  2.0K simfunc/16-Apr-2013 18:53    -  unittest.cc16-Apr-2013 18:53  827  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/partenum/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/partenum
##------------------TEXT------------------------##
Index of /releases/3.0/src/partenum
NameLast modifiedSizeDescriptionParent Directory   -  dataset.txt16-Apr-2013 18:53  828  example.cc16-Apr-2013 18:53  1.1K makefile16-Apr-2013 18:53  1.0K partenum.cc16-Apr-2013 18:53   12K partenum.h16-Apr-2013 18:53  2.4K unittest.cc16-Apr-2013 18:53  1.1K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/common/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/common
##------------------TEXT------------------------##
Index of /releases/3.0/src/common
NameLast modifiedSizeDescriptionParent Directory   -  compressionargs.cc16-Apr-2013 18:53  326  compressionargs.h16-Apr-2013 18:53  569  filtertypes.cc16-Apr-2013 18:53   19K filtertypes.h16-Apr-2013 18:53  6.2K gramgen.cc16-Apr-2013 18:53  5.9K gramgen.h16-Apr-2013 18:53  5.2K makefile16-Apr-2013 18:53  1.2K query.cc16-Apr-2013 18:53  298  query.h16-Apr-2013 18:53  1.7K simmetric.cc16-Apr-2013 18:53   25K simmetric.h16-Apr-2013 18:53   12K tr1_local.h16-Apr-2013 18:53  882  typedef.cc16-Apr-2013 18:53  302  typedef.h16-Apr-2013 18:53  381  unittest.cc16-Apr-2013 18:53  5.7K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/stringmap/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/stringmap
##------------------TEXT------------------------##
Index of /releases/3.0/src/stringmap
NameLast modifiedSizeDescriptionParent Directory   -  editdistance.cpp16-Apr-2013 18:53  3.5K editdistance.h16-Apr-2013 18:53  898  element.cpp16-Apr-2013 18:53   11K element.h16-Apr-2013 18:53  3.0K index.cpp16-Apr-2013 18:53   36K index.h16-Apr-2013 18:53  8.3K makefile16-Apr-2013 18:53  1.2K mapper.cpp16-Apr-2013 18:53   10K mapper.h16-Apr-2013 18:53  2.0K node.cpp16-Apr-2013 18:53  5.1K rect.cpp16-Apr-2013 18:53   17K rtreeparams.h16-Apr-2013 18:53  526  source-big.zip16-Apr-2013 18:53  606K source.zip16-Apr-2013 18:53   27K source1.zip16-Apr-2013 18:53   14K source2.zip16-Apr-2013 18:53   14K split_l.cpp16-Apr-2013 18:53   10K split_l.h16-Apr-2013 18:53  1.1K split_q.cpp16-Apr-2013 18:53  8.1K split_q.h16-Apr-2013 18:53  928  stringmap.cpp16-Apr-2013 18:53   10K stringmap.h16-Apr-2013 18:53  3.4K stringmap_unittest.cpp16-Apr-2013 18:53  7.0K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/listmerger/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/listmerger
##------------------TEXT------------------------##
Index of /releases/3.0/src/listmerger
NameLast modifiedSizeDescriptionParent Directory   -  counttable.cc16-Apr-2013 18:53  921  counttable.h16-Apr-2013 18:53  665  divideskipmerger.cc16-Apr-2013 18:53  460  divideskipmerger.h16-Apr-2013 18:53   22K example.cc16-Apr-2013 18:53  3.0K heap.cc16-Apr-2013 18:53  4.3K heap.h16-Apr-2013 18:53  3.2K heapmerger-pq.cc16-Apr-2013 18:53  2.4K heapmerger.cc16-Apr-2013 18:53  298  heapmerger.h16-Apr-2013 18:53  2.3K listmerger.h16-Apr-2013 18:53  1.1K makefile16-Apr-2013 18:53  2.7K mergeoptmerger.cc16-Apr-2013 18:53  663  mergeoptmerger.h16-Apr-2013 18:53  3.5K mergeskipmerger.cc16-Apr-2013 18:53  311  mergeskipmerger.h16-Apr-2013 18:53  3.7K mergeskipplusmerger.cc16-Apr-2013 18:53  319  mergeskipplusmerger.h16-Apr-2013 18:53  5.0K mergeskiptest.cc16-Apr-2013 18:53  307  mergeskiptest.h16-Apr-2013 18:53  4.3K ondiskmergerabs.h16-Apr-2013 18:53  2.0K ondiskmergeradapt.cc16-Apr-2013 18:53   14K ondiskmergeradapt.h16-Apr-2013 18:53   38K ondiskmergerfixedlists.cc16-Apr-2013 18:53  332  ondiskmergerfixedlists.h16-Apr-2013 18:53  6.2K ondiskmergersimple.cc16-Apr-2013 18:53  328  ondiskmergersimple.h16-Apr-2013 18:53  6.3K scancountmerger.cc16-Apr-2013 18:53  310  scancountmerger.h16-Apr-2013 18:53  3.5K showutil.cc16-Apr-2013 18:53  2.6K showutil.h16-Apr-2013 18:53  814  unittest.cc16-Apr-2013 18:53  3.1K utilities.cc16-Apr-2013 18:53   20K utilities.h16-Apr-2013 18:53  5.3K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/filtertree/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/filtertree
##------------------TEXT------------------------##
Index of /releases/3.0/src/filtertree
NameLast modifiedSizeDescriptionParent Directory   -  data/16-Apr-2013 18:53    -  example.cc16-Apr-2013 18:53   20K filtertreenode.cc16-Apr-2013 18:53  755  filtertreenode.h16-Apr-2013 18:53  6.0K ftindexerabs.cc16-Apr-2013 18:53  316  ftindexerabs.h16-Apr-2013 18:53   10K ftindexercombinelists.cc16-Apr-2013 18:53  393  ftindexercombinelists.h16-Apr-2013 18:53   42K ftindexerdiscardlists.cc16-Apr-2013 18:53  343  ftindexerdiscardlists.h16-Apr-2013 18:53   50K ftindexermem.cc16-Apr-2013 18:53  316  ftindexermem.h16-Apr-2013 18:53   10K ftindexermemabs.cc16-Apr-2013 18:53  322  ftindexermemabs.h16-Apr-2013 18:53  9.9K ftindexerondisk.cc16-Apr-2013 18:53  393  ftindexerondisk.h16-Apr-2013 18:53   39K ftsearcherabs.cc16-Apr-2013 18:53  318  ftsearcherabs.h16-Apr-2013 18:53  7.3K ftsearchermem.cc16-Apr-2013 18:53  318  ftsearchermem.h16-Apr-2013 18:53  3.1K ftsearcherondisk.cc16-Apr-2013 18:53  869  ftsearcherondisk.h16-Apr-2013 18:53   12K gramlist.h16-Apr-2013 18:53  2.4K gramlistondisk.cc16-Apr-2013 18:53  320  gramlistondisk.h16-Apr-2013 18:53  2.1K gramlistsimple.cc16-Apr-2013 18:53  320  gramlistsimple.h16-Apr-2013 18:53  1.6K gramlistunion.cc16-Apr-2013 18:53  320  gramlistunion.h16-Apr-2013 18:53  3.4K makefile16-Apr-2013 18:53  5.2K perftest.cc16-Apr-2013 18:53   16K statsgen.cc16-Apr-2013 18:53  1.9K statsgen.h16-Apr-2013 18:53   29K statsutil.cc16-Apr-2013 18:53   10K statsutil.h16-Apr-2013 18:53  4.7K stringcontainer.cc16-Apr-2013 18:53  8.4K stringcontainer.h16-Apr-2013 18:53   13K stringrm.cc16-Apr-2013 18:53   12K stringrm.h16-Apr-2013 18:53  3.8K unittest.cc16-Apr-2013 18:53   51K wrappers/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/mattree/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/mattree
##------------------TEXT------------------------##
Index of /releases/3.0/src/mattree
NameLast modifiedSizeDescriptionParent Directory   -  NFA.cpp16-Apr-2013 18:53   11K NFA.h16-Apr-2013 18:53  1.9K NFAMatch.cpp16-Apr-2013 18:53   10K NFAMatch.h16-Apr-2013 18:53  1.3K NFANode.cpp16-Apr-2013 18:53  3.0K NFANode.h16-Apr-2013 18:53  1.5K NFATransition.cpp16-Apr-2013 18:53  2.3K NFATransition.h16-Apr-2013 18:53  883  RETree.cpp16-Apr-2013 18:53   15K RETree.dsp16-Apr-2013 18:53  5.5K RETree.dsw16-Apr-2013 18:53  535  Rect.cpp16-Apr-2013 18:53  6.9K StdAfx.cpp16-Apr-2013 18:53  627  StdAfx.h16-Apr-2013 18:53  1.0K Trie.cpp16-Apr-2013 18:53   25K Trie.h16-Apr-2013 18:53  3.0K data.zip16-Apr-2013 18:53  835K distance.cpp16-Apr-2013 18:53  3.1K distance.h16-Apr-2013 18:53  810  index.cpp16-Apr-2013 18:53  8.7K index.h16-Apr-2013 18:53  3.4K node.cpp16-Apr-2013 18:53  4.9K parameters.h16-Apr-2013 18:53  1.4K query.zip16-Apr-2013 18:53  461K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/src/topk/
##-----------------TITLE------------------------##
Index of /releases/3.0/src/topk
##------------------TEXT------------------------##
Index of /releases/3.0/src/topk
NameLast modifiedSizeDescriptionParent Directory   -  display.cc16-Apr-2013 18:53  3.7K display.h16-Apr-2013 18:53  837  example.cc16-Apr-2013 18:53  1.3K exp.sh16-Apr-2013 18:53  373  foreign_listmerger.h16-Apr-2013 18:53  943  foreign_util.h16-Apr-2013 18:53  600  makefile16-Apr-2013 18:53  3.4K misc.cc16-Apr-2013 18:53  294  misc.h16-Apr-2013 18:53  955  perftest.cc16-Apr-2013 18:53   15K perftest_exps.cc16-Apr-2013 18:53   16K perftest_exps.h16-Apr-2013 18:53  1.5K perftest_util.cc16-Apr-2013 18:53  9.7K perftest_util.h16-Apr-2013 18:53  2.6K topk.cc16-Apr-2013 18:53  934  topk.h16-Apr-2013 18:53  2.2K topkbase.h16-Apr-2013 18:53  1.7K topkheap.cc16-Apr-2013 18:53  338  topkheap.h16-Apr-2013 18:53   32K topkheap.v1.cc16-Apr-2013 18:53  1.1K topkheap.v1.h16-Apr-2013 18:53  9.8K topkindex.cc16-Apr-2013 18:53  3.8K topkindex.h16-Apr-2013 18:53  6.1K topkindex.v1.cc16-Apr-2013 18:53  1.9K topkindex.v1.h16-Apr-2013 18:53  2.4K topkiterative.cc16-Apr-2013 18:53  312  topkiterative.h16-Apr-2013 18:53  3.7K topkroundrobin.cc16-Apr-2013 18:53  1.8K topkroundrobin.h16-Apr-2013 18:53  9.2K topkscan.cc16-Apr-2013 18:53  302  topkscan.h16-Apr-2013 18:53  1.3K topksearch.cc16-Apr-2013 18:53  4.2K topksearch.h16-Apr-2013 18:53  8.3K topktwophase.cc16-Apr-2013 18:53  310  topktwophase.h16-Apr-2013 18:53  2.9K unittest.cc16-Apr-2013 18:53  5.3K util.py16-Apr-2013 18:53  2.2K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/docs/UtilDoc.html
##-----------------TITLE------------------------##
UtilDoc â€“ Group
##------------------TEXT------------------------##
Back to Index
AppString
> AppStringDoc
Util
Overview
The module contains a few commonly used functions.
Usage
For compiling instructions, please see CompileDoc.
The module uses C++ STL TR1 library provided by GNU GCC.
Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/3.0/docs/CompileDoc.html
##-----------------TITLE------------------------##
CompileDoc â€“ Group
##------------------TEXT------------------------##
Back to Index
AppString
> AppStringDoc
Compile
The code was compiled using GNU GCC 4.3.2 and makefiles are
provided for each module.
A global makefile for the entire package is provided in the root
of the source directory, src. Please edit
makefile.ini in the root of the source directory and set
CODEBASEROOT to the absolute path of the source code
directory.
e.g., if you put the code in /home/joe/flamingo-3.0/src do:

CODEBASEROOT = /home/joe/flamingo-3.0/src

To compile all packages please run make in the root of
the source directory. To compile each module, please run
make inside the corresponding module directory.
Please note that for the mattree module, there is no
makefile provided, only a Visual C++ project file is provided. This
module has not been compiled using GCC.
Back to Index
##------------------URL-------------------------##
http://www.ics.uci.edu/~raccoon/release/v2.0/doc/index.html
##-----------------TITLE------------------------##
Generated Documentation (Untitled)
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://flamingo.ics.uci.edu/toolkit/docs/index.html
##-----------------TITLE------------------------##
Flamingo -- Toolkit Documentation
##------------------TEXT------------------------##
Flamingo -- Toolkit Documentation

UdfDoc
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/docs/index.html
##-----------------TITLE------------------------##
Wiki Index
##------------------TEXT------------------------##
Index of Wiki Pages

 AppString Documentation 

GettingStartedDoc

CompileDoc


 Modules 

CommonDoc

FilterTreeDoc

ListMergerDoc

MatTreeDoc

PartEnumDoc

SepiaDoc

StringMapDoc

UtilDoc

TopkDoc

LbakTreeDoc
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/docs/CompileDoc.html
##-----------------TITLE------------------------##
CompileDoc –
      Group
##------------------TEXT------------------------##
Back to Index
        
          
AppString > AppStringDoc

Compile

We use cmake to generate makefiles. If you don't have it you can install it with:

sudo apt-get install cmake

To compile the code for a module, generate the makefile with cmake and run make, as follows:

cmake .
make

For example, let's say you extracted flamingo into the folder:

/home/joe/flamingo-4.0/src

Then if you want to build the filtertree module in /home/joe/flamingo-4.0/src/filtertree do the following:

cd /home/joe/flamingo-4.0/src/filtertree
cmake .
make

Please note that for the mattree module, there is no makefile provided, only a Visual C++ project file is provided. This module has not been compiled using GCC.


        
        
      Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/docs/UtilDoc.html
##-----------------TITLE------------------------##
UtilDoc –
      Group
##------------------TEXT------------------------##
Back to Index
        
          
AppString > AppStringDoc

Util
Overview

The module contains a few commonly used functions.

Usage

For compiling instructions, please see CompileDoc.


The module uses C++ STL TR1 library provided by GNU GCC.


        
        
      Back to Index
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/mattree/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/mattree
##------------------TEXT------------------------##
Index of /releases/4.1/src/mattree
NameLast modifiedSizeDescriptionParent Directory   -  NFA.cpp16-Apr-2013 18:53   11K NFA.h16-Apr-2013 18:53  1.9K NFAMatch.cpp16-Apr-2013 18:53   10K NFAMatch.h16-Apr-2013 18:53  1.3K NFANode.cpp16-Apr-2013 18:53  3.0K NFANode.h16-Apr-2013 18:53  1.5K NFATransition.cpp16-Apr-2013 18:53  2.3K NFATransition.h16-Apr-2013 18:53  883  RETree.cpp16-Apr-2013 18:53   15K RETree.dsp16-Apr-2013 18:53  5.5K RETree.dsw16-Apr-2013 18:53  535  Rect.cpp16-Apr-2013 18:53  6.9K StdAfx.cpp16-Apr-2013 18:53  627  StdAfx.h16-Apr-2013 18:53  1.0K Trie.cpp16-Apr-2013 18:53   25K Trie.h16-Apr-2013 18:53  3.0K data.zip16-Apr-2013 18:53  835K distance.cpp16-Apr-2013 18:53  3.1K distance.h16-Apr-2013 18:53  810  index.cpp16-Apr-2013 18:53  8.7K index.h16-Apr-2013 18:53  3.4K node.cpp16-Apr-2013 18:53  4.9K parameters.h16-Apr-2013 18:53  1.4K query.zip16-Apr-2013 18:53  461K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/filtertree/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/filtertree
##------------------TEXT------------------------##
Index of /releases/4.1/src/filtertree
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:54  2.6K build/16-Apr-2013 18:54    -  data/16-Apr-2013 18:54    -  src/16-Apr-2013 18:54    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/lbaktree/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/lbaktree
##------------------TEXT------------------------##
Index of /releases/4.1/src/lbaktree
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:54  1.3K build/16-Apr-2013 18:54    -  data/16-Apr-2013 18:54    -  src/16-Apr-2013 18:54    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/util/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/util
##------------------TEXT------------------------##
Index of /releases/4.1/src/util
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:53  1.1K build/16-Apr-2013 18:53    -  src/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/listmerger/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/listmerger
##------------------TEXT------------------------##
Index of /releases/4.1/src/listmerger
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:53  1.3K build/16-Apr-2013 18:53    -  src/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/topk/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/topk
##------------------TEXT------------------------##
Index of /releases/4.1/src/topk
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:53  2.9K build/16-Apr-2013 18:53    -  src/16-Apr-2013 18:53    -  util.py16-Apr-2013 18:53  2.2K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/common/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/common
##------------------TEXT------------------------##
Index of /releases/4.1/src/common
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:54  921  build/16-Apr-2013 18:54    -  src/16-Apr-2013 18:54    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/stringmap/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/stringmap
##------------------TEXT------------------------##
Index of /releases/4.1/src/stringmap
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:53  945  build/16-Apr-2013 18:53    -  source-big.zip16-Apr-2013 18:53  606K source.zip16-Apr-2013 18:53   27K source1.zip16-Apr-2013 18:53   14K source2.zip16-Apr-2013 18:53   14K src/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/partenum/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/partenum
##------------------TEXT------------------------##
Index of /releases/4.1/src/partenum
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:53  1.1K build/16-Apr-2013 18:53    -  src/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.1/src/sepia/
##-----------------TITLE------------------------##
Index of /releases/4.1/src/sepia
##------------------TEXT------------------------##
Index of /releases/4.1/src/sepia
NameLast modifiedSizeDescriptionParent Directory   -  CMakeLists.txt16-Apr-2013 18:53  1.9K build/16-Apr-2013 18:53    -  src/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/readme.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
1. Unzip the zip files.

2. For Windows, run "TestAllImpl.bat";

   For Linux, run "TestAllImpl.sh";

   Results will be available in the "log" folder.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/rw.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
A synthetic time series generated by "random walk", each data point indicates 

a position in the random trace.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/movement.htm
##-----------------TITLE------------------------##
movement
##------------------TEXT------------------------##
The file "movement" contains 12 days' trajectories of one 

person on his way between home and office in a car, where the data are collected 

from a GPS sensor carried by the person. It contains 4 outlier regions as 

follows, each of which is a seldom event in some day's trajectory of the 12 

days'.



outlier 1: 5-10, localization error.



outlier 2: 6180-6330, the car detour due to some road maintenance.



outlier 3: 11320-11500, the person goes out of the car to a nearby school, then 

goes back to the car.



outlier 4: 16300-16500, the person goes out of car to a nearby park and goes 

back to the car.



outlier 5: 30052-30010, localization error.



outlier 6: 31320-31563, the person goes out of the car to a book store, and then 

goes back to the car.



Note: 1. the two localization error looks similar, maybe due to the same problem 

of sensors.

      2. the book store in outlier 6 is near the school 

in outlier 3.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/lo.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
The normalized longitude of 3-day full trajectories collected by outdoor GPS 

sensors2 in the Chinese University of Hong Kong, the length of each trajectory 

is 218,448.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/la.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
The normalized latitude of 3-day full trajectories collected by outdoor GPS 

sensors2 in the Chinese University of Hong Kong, the length of each trajectory 

is 218,448.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/spaceshuttle.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
It is a space shuttle marotta valve series, which contains two outliers:

1. 600-900: Poppet pulled significantly out of the solenoid before
energizing

2. 5600-5900: Poppet pulled significantly out of the solenoid before
energizing

Note:
This dataset slightly different from the original dataset in UCR Time Series
Archive, we manually duplicate an anomaly on the date series. in order to show
our definition is robust for multiple similar anomaly cases. The anomaly
definition also can find the same anomaly on the original real dataset as discord
definition.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/GE.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
The stock price series from year 1928 to year 2007 of GE company, obtained from

finance@Yahoo! In the dataset, each data 

point is the open price of each working day in the historical record.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yingyib/repository/data/al.htm
##-----------------TITLE------------------------##
New Page 1
##------------------TEXT------------------------##
The normalized altitude of 3-day full trajectories collected by outdoor GPS 

sensors in the Chinese University of Hong Kong, the length of each trajectory is 

218,448.
##------------------URL-------------------------##
http://www.ics.uci.edu/~cs237/nav.html
##-----------------TITLE------------------------##
ICS 243-F @ UCI
##------------------TEXT------------------------##
Course 
Info. 

Course 
Outline 
Course 
Materials 
Projects 
Previous Year Projects
##------------------URL-------------------------##
http://www.ics.uci.edu/~cs237/main.html
##-----------------TITLE------------------------##
CS237 @ UCI
##------------------TEXT------------------------##
CompSci
  237 - Spring 2015: Distributed
  Systems Middleware 
  Prof. Nalini
  Venkatasubramanian
  
  
  

 


  
  Announcements:
  Please check this page frequently for important announcements
  regarding course work -
  IMPORTANT! 
  Office
  Hours --Prof. Venkatasubramanian will be available
  in her office (Bren Hall 2086) on Thursdays 11-12pm to discuss class projects
  etc. 
  
  Makeup
       class on Friday, Jun 5th at 5:15 pm in DBH 4011.Final
       Project Slides due on Wednesday, Jun 10th by 9 a.m.  Project presentations will be
       held in class at scheduled time of final exam. Project
       Slides is
       due on 5/11. (Guidelines for project slides)
       1st
       summary set (Middleware and Distributed Systems Fundamentals, Virtual
       Time and Global States in Distributed Systems) is due end of Week 3
       (Guidelines for paper summaries) Project Pre-Proposals
       are due end of Week 32nd
       summary set (Distributed OS) is due end of Week 5 3rd
       summary set (DCE,CORBA,Java,Messaging) is due end of Week 7
       Midterm is at the beginning of
       Week 8 4th
       summary set (Cloud Computing, Web Services) is due end of Week 9
       For each paper summary
       set, you will summarize two papers in Reading Materials section. Each
       paper should be summarized in one or two pages. You can either use one
       summary (>=2 pages) to summarize two papers or submit two separate
       summaries (each one >=1page) Please submit your
       paper summaries and project proposals via the course dropbox in https://eee.uci.edu/ (instead
       of sending emails) 
  12.   
  
  Instructor
  Information
  
  Nalini Venkatasubramanian
  (nalini@ics.uci.edu)
  Office: Bren Hall 2086 
  Office Hour: Thursdays, 11-12pm
   
  Reader:  Kerim Oktay. email:
  koktay@uci.edu 
  Office : Bren Hall 2061
  
  Course
  Description:
  
  CompSci 237 -
  Distributed Systems discusses concepts, techniques and issues
  in developing distributed systems middleware that provides high performance
  in large scale distributed and networked environments. The course will cover
  existing middleware standards and solutions such as DCE, CORBA, DCOM,.NET,EJB,J2EE, XML, Web Services, cloud computing
  platforms and discuss their purposes, relative advantages and shortcomings.
  Issues in designing 
  middleware environments for special purpose needs
  (fault-tolerance, QoS, security etc.) will also be
  discussed.
   
  
  Motivation
  and Goals:
  
  Advances in networking, communication, storage and
  computing technologies coupled with emerging novel application areas is
  enabling the widespread use of large scale distributed computing systems. These
  systems exhibit constant evolution as new applications place specialized requirements from the computing and
  communication infrastructure. Many applications provide QoS
  (Quality of Service) parameters that define the extent to which performance
  specifications such as responsiveness, reliability, resource utilization,
  security and cost-effectiveness may be violated. These requirements are often
  implemented via resource management mechanisms in the middleware. Distributed
  middleware enables the modular connection of software components to manage
  the resources of an open distributed system; it can be used to constrain the
  global behavior of the distributed system to ensure safety while providing
  cost-effective utilization of resources. This course will cover issues in
  developing distributed systems middleware that provides distributed
  application requirements while ensuring effective system utilization. 
  
   
  Prerequisites:
  
  Undergraduate level course in operating systems and
  networks. A prior course of distributed systems is desirable. Working
  knowledge of Java is required. 
  
   
   
  Class
  Schedule:
  Lecture:  Mondays/Wednesdays 1:00 –
  2:20pm  in PCB 1200
   
  Grading
  Policy:
  Homeworks
       (30%): 3 homeworks (weekly paper summaries),
       randomly selected each worth 10% each.Midterm
       (35%)Class
       Project (35%): Includes project proposal,final project demonstration and report.
  
   
  
  Guidelines for paper summaries:
  
  Each paper summary
       should be 1-1.5 pages of text (suggested size 10-11 pt., single spaced,
       1-inch margins) Summaries should
       provide the following information about the paper in your own words: The main
        contributions of paper (the key problem(s), proposed techniques and
        approaches). Critique of approach,
        its advantages and its limitations. Implications to
        technology practice i.e. implementation feasibility in a distributed
        computing environment. 
  
   
  
  Guidelines for project report:
  
  Should be structured
       in this format5-7 pages of text
       (suggested size 10-11 pt., single spaced, 1-inch margins) Should contain at
        least 10 references Desirable: scope out
        the problem area and classify approaches 
  
  Should be submitted
       via the course dropbox
       in https://eee.uci.edu/ (instead
       of sending emails) 
   
  
  Guidelines for project slides:
  
  Each project slides
       should not be more than 4-5 slides and it should have at least 1 slide
       for each of the following: Motivation &
        Goals Related Work System/Prototype/Simulation
        Design Specifics Testing &
        Evaluation Plan
   The name of the ppt file should be your project group id. Should be submitted
       via the course dropbox
       in https://eee.uci.edu/ (instead
       of sending emails) 
  

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~hjafarpo/publications.htm
##-----------------TITLE------------------------##
Publications
##------------------TEXT------------------------##
Publications

Book Chapters
Hore,Bijit; Jafarpour,Hojjat; Jain,Ramesh; Ji,Shengyue; Massaguer,Daniel; 
  Mehrotra,Sharad; Venkatasubramanian,Nalini; Westermann,Utz. "SATware: 
  Middleware for Sentient Spaces", in "Multimodal Surveillance: Sensors, 
  Algorithms and Systems", 2007.
  Also presented in the IEEE Workshop on Multimodal Sentient Computing: Sensors, 
  Algorithms and Systems (WMSC 2007) held in conjunction with CVPR 2007 
  conference and won the Best Student Paper Award.

Journals
Hojjat Jafarpour, Nasser Yazdani and Navid Bazzaz-zadeh.
    "A Scalable Group Communication Mechanism for Mobile Agents",
    Journal of
    Network and Computer Applications, Elsevier Science,
  
  Volume 30, Issue 1, January 2007, Pages 186-208.

Conferences

    
Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra and Nalini Venkatasubramanian."CCD: 
Efficient Customized Content Dissemination in Distributed Publish/Subscribe", 
ACM/IFIP/USENIX Middleware 2009, Urbana-Champaign, IL,USA, November 2009.
    
Hojjat Jafarpour, Sharad Mehrotra, Nalini Venkatasubramanian and Mirko Montanari, 
"MICS: An Efficient Content Space Representation Model 
for Publish/Subscribe Systems", ACM International Conference on 
Distributed Event-Based Systems (DEBS) 
    2009, Nashville, TN, USA, July 2009.
    
Hojjat Jafarpour, Sharad 
    Mehrotra and Nalini Venkatasubramanian."Dynamic 
Load Balancing for Cluster-based Publish/Subscribe System", 
IEEE International Symposium on Applications and the Internet (SAINT) 2009, Seattle, WA, USA, July 2009.
    
Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra and Nalini Venkatasubramanian. "Subscription 
Subsumption Evaluation for Content-based Publish/Subscribe Systems", 
 
ACM/IFIP/USENIX Middleware 2008, Leuven, Belgium, December 2008.
    
Hojjat Jafarpour, Sharad Mehrotra and Nalini Venkatasubramanian. "A 
Fast and Robust Content-based Publish/Subscribe Architecture", 
IEEE International Symposium on Network Computing and Applications (NCA) 2008, Boston, MA, USA, July 2008.
    
Hore,Bijit; Jafarpour,Hojjat; Jain,Ramesh; Ji,Shengyue; Massaguer,Daniel; 
Mehrotra,Sharad; Venkatasubramanian,Nalini; Westermann,Utz. "Design 
and Implementation of a Middleware for Sentient Spaces", IEEE 
Intelligence and Security Informatics (ISI) 
2007, New Brunswick, NJ, USA, May 2007.
    
Shruti Gorappa, Juan Colmenares, Hojjat Jafarpour and Raymond Klefstad.
    "Tool-based Configuration of Real-Time CORBA Middleware for Embedded
    Systems", 8th IEEE International Symposium on Object-oriented Real-time distributed Computing (ISORC 2005), Seattle,
    WA, USA. May, 2005. 
    Hojjat Jafarpour, Nasser Yazdani, and Navid Bazazzadeh. "Improving
    Sama Group Communication Mechanism for Mobile Agents via a Hop-Ring Protocol", 
    International Conference on Internet Computing (ICOMP 2005), Las Vegas, USA,
    June, 2005. 
    
        Hojjat Jafarpour and Nasser Yazdani, "Provision of Recovery from Host        Failure for Sama Group Communication Middleware for Mobile
    Agents". In        Proc. of 2nd ACIS International Conference on Software Engineering        Research, Management and  Applications (SERA2004). Los Angeles, USA, May
    2004, pp: 242-247. 
    Hojjat Jafarpour and Nasser Yazdani, "Sama: A Scalable Group Communication        Mechanism for Mobile
    Agents". In Proc. of 4th ACIS Int. Conference on        Software Engineering, Artificial Intelligence, Networking and        Parallel/Distributed Computing (SNPD2003),
    Lubeck, Germany, October, 2003,        pp: 504-511.
    
        Saeed Parsa and Hojjat Jafarpour, "Designing and Implementing Applications        for the
    Internet", In Proceedings of the International Electronic and        Internet Cities Conference, Kish Island, Iran, May, 2001.(In Persian)  
  
    Hojjat Jafarpour, "  Dependency Graph for Java Programs and Its
    Applications", In 4th Student Conference of Computer Engineering, Iran        Univ. of Science & Tech. Tehran, Iran, July 2001.
        

  

Workshops
        Hojjat Jafarpour and Nasser Yazdani, "A Fast Group Communication Mechanism        for Large-Scale Distributed
    Objects", In Workshop on Reliable and Secure        Middleware. Part of Distributed Objects and Applications (DOA 2003),
    Catania, Italy.  November 2003.        Published in Springer’s  LNCS
    2889. pp 1036 - 1044.

Posters


Presentations
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Customized Dissemination in the LargE
   The Information Dissemination Group, led by Prof. Sharad Mehrotra  and Prof. Nalini Venkatasubramanian , is part of ITR-ResCUE  project in Cal(IT) 2  at the University of California, Irvine . 
  This project will focus on information that is disseminated to the public at large specifically to encourage self-protective actions, such as evacuation from endangered areas, sheltering-in-place, and other actions designed to reduce exposure to natural and human-induced threats. Specifically, we will develop an understanding of the key factors in effective dissemination to the public in various disasters and design technology innovations for conveying accurate and timely information to those who are actually at risk (or likely to be), while providing reassuring information to those who are not at risk and therefore do not need to take self-protective action.
  There are three key factors that pose significant challenges (social and technological) to effective information dissemination in crises situations - variation in warning times, determining specificity of warning information to effectively communicate to different populations, and customization of the delivery process to reach the targeted populations in time over possibly failing infrastructures.   Our approach to address these challenges is a focused multidisciplinary effort that
   understands and utilizes the context in which the dissemination of information occurs to determine sources, recipients, channels of targeted messages  develop technological solutions that can deliver appropriate and accessible information to the public rapidly. 
  The ultimate objective is a set of next generation warning systems that can bring about an appropriate response, rather than an under- or over-response.
##------------------URL-------------------------##
http://www.ics.uci.edu/~hjafarpo/Contact.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Hojjat  Jafarpour 
      Department of Computer Science 
      Bren Hall, Room 2099
      University of California, Irvine 
      Irvine, CA 92697-3435
TEL: (949) 824-1594Electronic Mail:
        
WEB: 
http://www.ics.uci.edu/~hjafarpo/
 
 







Free counter
##------------------URL-------------------------##
http://www.ics.uci.edu/~hjafarpo/CV.html
##-----------------TITLE------------------------##

##------------------TEXT------------------------##
Hojjat  Jafarpour 

      Department of Computer Science 
      Bren Hall, Room 2099
      University of California, Irvine 
      Irvine, CA 92697-3435
      TEL: (949) 824-3011
 
Electronic Mail:   
WEB: 
http://www.ics.uci.edu/~hjafarpo/



||
Research Interests ||
Education ||
Work Experience ||
Publications ||
Honors and Awards ||
Teaching Experience || Expertise ||
System Development Experience ||




Research Interests

Distributed Systems, Data 
Management, Computer Networks

Current Research: 
Continuous analytics,
Customized content dissemination, Event-based middleware, Scalable and robust 
Publish/Subscribe, Large scale stream processing


Current Projects:
Information Dissemination in
    Responding to Crisis and Unexpected Events SATware: a 
  middleware for sentient spaces 




Education


    
    PhD Candidate, 
    Computer Science Department, Donald Bren School of Information and Computer 
    Sciences, University of 
    California, Irvine
    
    Advisor:
    Prof. Sharad Mehrotra
     
    M.Sc. in Software Engineering, ECE
    Department, Faculty of Engineering,
    Jul 2004, University of Tehran

  Thesis: Design
  and Implementation of a Group Communication Mechanism for Distributed Objects
  and Mobile Agents
  Advisor: Prof.
  Nasser Yazdani



  B.Sc., Software
  Engineering, CE Dept., Feb. 2002, Iran
  University of Science & Technology




Work Experience

June 09-September 09      
Summer intern, Truviso Inc.

June 08-August 08       
Summer research intern in R&D department. Yellowpages.com LLC.

June '05 -
present            Graduate
Student Researcher,
Information 
Dissemination team,  RESCUE Project,
Cal(IT)2, University of California, Irvine, CA

Sep '04 -
June'05            Graduate
Student Researcher, DOC Lab, University of California, Irvine, CA
Nov. '03 – March '04     
Software Engineer, 
Mellat Bank Research Center, 
Tehran, IRAN
 March
'02 – Sep.'02      Software
Designer and Developer,  West
Azerbaijan Telecom Company,
Urmia, West Azerbaijan Province, IRAN


 July
'01 – Feb '02           
Software Developer (Java and
Oracle), IPI
Ltd., Tehran, IRAN


 June
'00 – Feb '01           
Software Developer (Java and
Oracle), Asre
Danesh Afzar (ADA) Ltd., Tehran, IRAN
 




Publications

Book Chapters
Hore,Bijit; Jafarpour,Hojjat; Jain,Ramesh; Ji,Shengyue; Massaguer,Daniel; 
  Mehrotra,Sharad; Venkatasubramanian,Nalini; Westermann,Utz. "SATware: 
  Middleware for Sentient Spaces", in "Multimodal Surveillance: Sensors, 
  Algorithms and Systems", 2007.
  Also presented in the IEEE Workshop on Multimodal Sentient Computing: Sensors, 
  Algorithms and Systems (WMSC 2007) held in conjunction with CVPR 2007 
  conference and won the Best Student Paper Award.

Journals
Hojjat Jafarpour, Nasser Yazdani and Navid Bazzaz-zadeh.
    "A Scalable Group Communication Mechanism for Mobile Agents",
    Journal of
    Network and Computer Applications, Elsevier Science,
  
  Volume 30, Issue 1, January 2007, Pages 186-208.

Conferences

    
Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra and Nalini Venkatasubramanian."CCD: 
Efficient Customized Content Dissemination in Distributed Publish/Subscribe", 
 
ACM/IFIP/USENIX Middleware 2009, Urbana-Champaign, IL,USA, November 2009.
    
Hojjat Jafarpour, Sharad Mehrotra, Nalini Venkatasubramanian and Mirko Montanari, 
"MICS: An Efficient Content Space Representation Model 
for Publish/Subscribe Systems", ACM International Conference on 
Distributed Event-Based Systems (DEBS) 
    2009, Nashville, TN, USA, July 2009.
    
Hojjat Jafarpour, Sharad 
    Mehrotra and Nalini Venkatasubramanian."Dynamic 
Load Balancing for Cluster-based Publish/Subscribe System", 
IEEE International Symposium on Applications and the Internet (SAINT) 2009, Seattle, WA, USA, July 2009.
    
Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra and Nalini Venkatasubramanian. "Subscription 
Subsumption Evaluation for Content-based Publish/Subscribe Systems", 
 
ACM/IFIP/USENIX Middleware 2008, Leuven, Belgium, December 2008.
    
Hojjat Jafarpour, Sharad Mehrotra and Nalini Venkatasubramanian. "A 
Fast and Robust Content-based Publish/Subscribe Architecture", 
IEEE International Symposium on Network Computing and Applications (NCA) 2008, Boston, MA, USA, July 2008.
    
Hore,Bijit; Jafarpour,Hojjat; Jain,Ramesh; Ji,Shengyue; Massaguer,Daniel; 
Mehrotra,Sharad; Venkatasubramanian,Nalini; Westermann,Utz. "Design 
and Implementation of a Middleware for Sentient Spaces", IEEE 
Intelligence and Security Informatics (ISI) 
2007, New Brunswick, NJ, USA, May 2007.
    Shruti Gorappa, Juan Colmenares, Hojjat Jafarpour and Raymond Klefstad.
    "Tool-based Configuration of Real-Time CORBA Middleware for Embedded
    Systems", 8th IEEE International Symposium on Object-oriented Real-time distributed
    Computing (ISORC 2005), Seattle,
    WA, USA. May, 2005.
    Hojjat Jafarpour, Nasser Yazdani, and Navid Bazazzadeh. "Improving
    Sama Group Communication Mechanism for Mobile Agents via a Hop-Ring Protocol", 
    International Conference on Internet Computing (ICOMP 2005), Las Vegas, USA,
    June, 2005. 
            Hojjat Jafarpour and Nasser Yazdani, "Provision of Recovery from Host        Failure for Sama Group Communication Middleware for Mobile
    Agents". In        Proc. of 2nd ACIS International Conference on Software Engineering        Research, Management and  Applications (SERA2004). Los Angeles, USA, May
    2004, pp: 242-247.
            Hojjat Jafarpour and Nasser Yazdani, "Sama: A Scalable Group Communication        Mechanism for Mobile
    Agents". In Proc. of 4th ACIS Int. Conference on        Software Engineering, Artificial Intelligence, Networking and        Parallel/Distributed Computing (SNPD2003),
    Lubeck, Germany, October, 2003,        pp: 504-511.
            Saeed Parsa and Hojjat Jafarpour, "Designing and Implementing Applications        for the
    Internet", In Proceedings of the International Electronic and        Internet Cities Conference, Kish Island, Iran, May, 2001.(In Persian)
    Hojjat Jafarpour, "  Dependency Graph for Java Programs and Its
    Applications", In 4th Student Conference of Computer Engineering, Iran        Univ. of Science & Tech. Tehran, Iran, July 2001.

Workshops
        Hojjat Jafarpour and Nasser Yazdani, "A Fast Group Communication Mechanism        for Large-Scale Distributed
    Objects", In Workshop on Reliable and Secure        Middleware. Part of Distributed Objects and Applications (DOA 2003),
    Catania, Italy.  November 2003.        Published in Springer’s  LNCS
    2889. pp 1036 - 1044.

Posters


Presentations




Honors and Awards
1.     
2008 Paul Butterworth Student Award. The award supports and 
fosters entrepreneurial and creative student projects that may lead to the 
development of new products, with an emphasis on products that possess potential 
for commercialization.
2.     
The 
Best Student Paper Award. IEEE WMSC 2007
3.     
Rank 17th in IRAN
National University Entrance Examination for 
Graduate Studies (Konkoor) in Computer Science in 2002


4.     
Rank 35th in IRAN
National University Entrance Examination for 
Graduate Studies (Konkoor) in Software Engineering 
in 2002




5.     
Award of Outstanding Student of
Computer Eng. Department at Iran Univ. of Science & Tech. in 2001. The award
also contained a GOLD coin.




6.     
Honorary Distinguished Student
as Chief Member of Scientific Association of the Dept. of Computer Engineering
at Iran Univ. of Science & Tech. The award also contained a GOLD coin.




7.     
Award from Iran Univ. of
Science & Tech. for publishing paper in International Conference. (A GOLD
coin).




8.     
The Best Student Award in
National Computer Olympiad in West Azerbaijan province in 1995. Ranking: 1st.


9.     
Award of Outstanding Student in
National Computer Olympiad in 1995. 







Teaching Experience
Summer 
session. '06 ,Spring 07, Winter 08     Teaching
Assistant (Compilers & 
Interpreters, ICS 142 ),
University of California, Irvine
Summer
session. '05      Teaching
Assistant (Principals of
Operating systems, ICS 143 ),
University of California, Irvine
Sep. '03 –
Jul '04          
Instructor (Computer Networks,
Database), Elmi-Karbordi University,
Tehran, IRAN
March '02 – Sep. '02     
Java and Oracle Instructor,
West Azerbaijan Telecom Company, Urmia,
West Azerbaijan Province, IRAN


 March
'02 – Sep. '02      Java
and Oracle Instructor, Azar
Ragham Ltd, Urmia, West Azerbaijan Province, IRAN










Expertise

Distributed Systems, Real Time Systems, Embedded Systems, Group
  Communication MechanismsCORBA, RT-CORBA, J2EEJava, Real time Java (RTSJ), C and C++, Delphi, TCL, XML, XQueryLinux,
  MS Windows (2000,NT,XP,Vista,9x), MS DOS




System Development Experience

    Customized Content Dissemination: Design and 
    implementation of high performance content customization, matching and 
    routing algorithms for large scale publish/subscribe systems. (Current work)
    SATware: Distributed sensing middleware for 
    pervasive spaces. Working on stream processing optimization techniques in 
    large scale heterogeneous sensors including video cameras, RFIDs, Motes and 
    on privacy preserving techniques in pervasive spaces. (Current work)
    SPEE: Web-based plotting of structural statistics 
    for civil engineering applications.
    Member of RT-ZEN team. RT-ZEN is RTSJ-based Real-time 
    CORBA middleware.
    M.Sc. Project:  
    Design and Implementation of a Group Communication Mechanism
    for Distributed Objects and Mobile Agents.
    (The mechanism has been implemented by Java Programming Language).
    
    
    Bachelor Project: Automatically Detection of
    Object Dependencies in Java Programs and Distributing Them on Several Hosts
    in the Network to Balance the Load and Improve Execution Speed. (The
    software has been implemented by Java Programming Language)
     Participating
    in Design and Implementation of a Business Intelligence System in Mellat
    Bank Research Center.
    
    
    Iran Telecommunication
    Company, West Azerbaijan, (A
    Web-based Reporting System which works among different departments of the
    company in different cities in the province).
    
    
    
    
    Participating in
    Exhibition Project at IPI Ltd. (The
    project was to be sold in the USA and provided a variety of tools for users
    to create a web-based exhibition).
    
    
    
    
    Participating in IKCo
    Research Center Project at ADA Ltd. (Development
    of a Database Application for Iran Khodro Automobile Manufacturing Company
    in Tehran)
    
    
 
##------------------URL-------------------------##
http://www.ics.uci.edu/~mrrahimi/index.html
##-----------------TITLE------------------------##
Reza Rahimi Homepage
##------------------TEXT------------------------##
Welcome To My Homepage.


I am a Ph.D candidate in the School of Information and Computer Science, University of California Irvine, working with Prof. Nalini Venkatasubramanian in Information Systems Group (ISG) group on the Qos-Aware Middleware for Service Allocation in Mobile Cloud Computing project. I am interested in any challenging work in Mobile Cloud Computing, Social Networks and Big Data. 
I got outstanding researcher award from Sharif University Electronic Research Institute for my B.Sc project on fingerprint high level classification, best student poster and NSF student scholar award from IEEE/ACM CCGrid 2011 for my Ph.D work on mobile cloud computing, 4-year UCI fellowship for my Ph.D studies (2009-2013), Student Travel Awards of USENIX/ACM OSDI'08, iCORE'08, USENIX LISA'10, USENIX/ACM FAST'10, USENIX/ACM NSDI'11, IEEE WoWMoM'12 and my Erdös Number is 4.
During the summer of 2011, I was with Nokia Research Center in Palo Alto where I worked on the mobile social networks and the next generation of location based services. I worked at AT&T Labs Research, Shannon Lab on cloud-based multi-site video conferencing based on SIP protocol during the summer of 2012. 

For more information email me at: mrrahimi@uci.edu















Last Updated: Nov. 2013








Nov 2013: Our paper entitled as "Mobile Cloud Computing: A Survey, State of Art and Future Directions", is published in ACM/Springer Mobile Application and Networks (MONET) Journal.

Sept 2013: Done with the Ph.D topic defense, Next Step is Ph.D Final Defense!

July 2013: Enjoy Summer in Irvine and be ready for Ph.D topic defense, one step before graduation! :-).

May 2013: Serving as the Technical Program Committee member (TPC) of (IEEE ISBEIA 2013).

April 2013: Our paper entitled as "MuSIC:On Mobility-Aware Optimal Service Allocation in Mobile Cloud Computing" has been accepted by IEEE International Conference on Cloud Computing, IEEE CLOUD 2013.

Feb 2013: Serving as the Technical Program Committee member (TPC) of IEEE SHUSER 2013, in Malysia.





Latest News:












Reza Rahimi

Ph.D Candidate
School of Information and Computer Science,
University of California Irvine, USA.







Home      Education      Publications 




















Linked In

Slide Share

Google Scholar

Computer Science

Stack Overflow
##------------------URL-------------------------##
http://www.ics.uci.edu/~mrrahimi/Education.html
##-----------------TITLE------------------------##
Reza Rahimi Homepage
##------------------TEXT------------------------##
Education:

University of California, Irvine, USA.
Ph. D Student in Computer Science (September 2009--Present).
Thesis Title: Qos-Aware Middleware for Optimal Service Allocation in Mobile Cloud Computing.

Abstract: The past two decades of explosive growth of wireless networking, mobile computing and web technologies has profoundly influenced society at large. Almost anyone with access to a mobile device has access to services on the Internet and has reaped the benefits of instant accessibility to Internet-enabled technologies such as social networks, media streaming applications, location-based services, instant messaging, email etc. In this thesis we aim to synergistically exploit mobile and cloud computing to enable services that can enrich the experience and capabilities of mobile users in a pervasive environment. While mobile computing empowers users with anywhere, anytime access to the Internet, cloud computing harnesses the vast storage, computing, and software infrastructure resources of large organizations (e.g Amazon, Google) into a single virtualized infrastructure within reach of the general population. In this work we studied the optimal and fair service allocation for a variety of mobile applications (single or group and collaborative mobile applications) in mobile cloud computing. In this thesis we concentrate on three main parts: (i). System modeling and problem formulation, (ii) Service and resource provisioning algorithms, (iii) System performance testing and prototyping. In the first part we proposed a novel framework to model mobile applications as a location-time workflows (LTW) of tasks; here users mobility patterns are translated and mapped to mobile service usage patterns. We showed that an optimal mapping of LTWs to tiered cloud resources considering multiple QoS goals such application delay, device power consumption and user cost/price is an NP-hard problem for both single and group-based applications. We proposed efficient and scalable classes of heuristics for solving mentioned problem in the second part. Finally in system performance testing and prototyping we developed a middleware solution which orchestrating all required components for such mobile cloud computing system. We studies each of these contributions by an extensive experimental evaluation and prototyping.

University of Regina, SK, Canada.
Master of Applied Science in Software Engineering (September 2009).
Thesis: Optimizing Multicast Throughput in IP Networks (Best Thesis Award Nominee).

Abstract: Given a fixed network of routers, a set of multicast sources and their corresponding receivers, we investigate the problem of constructing multicast sessions that maximize the multicast throughput of all sessions for different applications. It is known that for problems with only one source node, heuristic algorithms based on packing maximum-rate Steiner trees may achieve throughputs close to network capacity for some networks of interest. We found that direct extension of such successful algorithms for single-source scenarios to multi-source application is inefficient. We have proposed and investigated three classes of tree packing algorithms, the non-cooperative class, the medium cooperative class and the highly cooperative class, that are distinguished by the degree of cooperation between participating routers. We show how better performance can be achieved when the source nodes act more cooperatively (and less selfishly), as they claim bandwidth resources in the network. Through extensive simulations, we have shown that the performance of our best algorithm is very close to the network coding capacity with an average throughput that is about 92% of the theoretical upper bound. We used the rate-distortion framework to quantify the performance of our approach for multimedia multicast. Through simulations, we showed that our best algorithms can achieve average distortions that are just 0.44db higher than what theoretically achievable through network coding. Finally, we show how our proposed algorithms can be implemented on top of standard IP-multicast protocols, with only software updates to existing router technologies.

Sharif University of Technology, Tehran, Iran.
Master of Science in Computer Science (January 2007).
Thesis: Routing and Clustering Algorithms in Wireless Sensor Networks.

Abstract: Due to the wide usage of wireless technology and advances in microelectronics, wireless technology is used in many applications, such as smart homes, monitoring remote area, battle fields etc. There is not standard solution for this new architecture, so there is a new paradigm that attracts many researchers. In this thesis we are concerning both on modeling and simulation of the routing and clustering algorithms in network layer. There has not been any good and solid framework for simulation this kind of network in literature. In this work we used object oriented and UML technology, and listener based pattern for modeling of wireless sensor networks. We developed flexible frame work which is called Xmulator for wireless systems. With this framework we developed, tested and compared some of the routing algorithms for wireless sensor networks.

Sharif University of Technology, Tehran, Iran.
Bachelor of Engineering in Electrical Engineering (September 2001).
Thesis: Fingerprint High Level Classification (Distinguished Thesis).

Abstract: In this thesis a novel algorithm for finger print high level classification is presented. This based on a novel algorithm for detection of singular points, the core and delta points, in fingerprint images. The number and location of singular points,  are used to classify fingerprint images in to five general groups; and therefore to narrow down the search space in large fingerprint databases. Using the proposed directional masks in the first step, detects the neighborhood of the singular points. In the second stage by implementing the proposed algorithm, an adaptive singular point detection method, is designed to extract the exact location of core and delta points. Usage of the proposed directional masks speeds up the process and the proposed adaptive singular point detection method increases the accuracy of the algorithm.





















Reza Rahimi

Ph.D Candidate
School of Information and Computer Science,
University of California Irvine, USA.







Home      Education      Publications
##------------------URL-------------------------##
http://www.ics.uci.edu/~mrrahimi/Publication.html
##-----------------TITLE------------------------##
Reza Rahimi Homepage
##------------------TEXT------------------------##
Publications:

Books and Book Chapters:

1. Shivajit Mohapatra, M. Reza. Rahimi, Nalini Venkatasubranian "Power-Aware Middleware for Mobile Applications", Chapter 10 of the Handbook of Energy-Aware and Green Computing, ISBN: 978-1-4398-5040-4, Chapman & Hall/CRC, 2011.

2. M. Reza. Rahimi, "On Optimal Multimedia and Data Multicast in IP Networks", Lambert Academic Publishing Verlag, Germany, ISBN: 978-3-8383-9835-8, 2010.

Journal Papers:

1. M. Reza. Rahimi, Nalini Venkatasubramanian, Sharad Mehrotra and Athanasios Vasilakos, "On Optimal and Fair Service Allocation in Mobile Cloud Computing", submitted to IEEE Trans. on Mobile Computing, 2013 (arxiv version).

2. M. Reza Rahimi, Jian Ren, Chi Harold Liu, Athanasios V. Vasilakos, and Nalini Venkatasubramanian, "Mobile Cloud Computing: A Survey, State of Art and Future Directions", in ACM/Springer Mobile Application and Networks (MONET), Speciall Issue on Mobile Cloud Computing, Nov. 2013.

3. M. Reza. Rahimi, A. Bais, N. Sarshar "On Fair and Optimal Multi Source IP Multicast", In Elsevier Science International Journal of Computer and Telecommunications Networking, Volume 56 Issue 4, March, 2012. 

4. M. Reza. Rahimi, E. Pakbaznia, S. Kasaei " An Adaptive Approach to Singular Point Detection in Fingerprint Images", In Elsevier Science, International Journal of Electronics and Communications AEU, Vol. 58, No. 5 , September 2004.

Conference Papers and Magazines:

1. M. Reza. Rahimi, Nalini Venkatasubramanian, Athanasios Vasilakos, "MuSIC: On Mobility-Aware Optimal Service Allocation in Mobile Cloud Computing", In the IEEE 6th International Conference on Cloud Computing, (Cloud 2013, Acceptance Rate: 19%), Silicon Valley, CA, USA, July 2013. ( MapCloud_Arch_Video, MapCloud_Demo_Video).

2. M. Reza. Rahimi, Nalini Venkatasubramanian, Sharad Mehrotra and Athanasios Vasilakos, "MAPCloud: Mobile Applications on an Elastic and Scalable 2-Tier Cloud Architecture", In the 5th IEEE/ACM International Conference on Utility and Cloud Computing (UCC 2012, Acceptance Rate: 27%), USA, Nov 2012.

3. M. Reza. Rahimi, Nalini Venkatasubramanian "Exploiting an Elastic 2-Tiered Cloud Architecture for Rich Mobile Applications", poster in the IEEE/ACM 13th International Symposium on a World of Wireless, Mobile and Multimedia Networks (WoWMoM 2012, Poster Acceptance Rate: 32%), USA, June 2012.

4. M. Reza. Rahimi, Nalini Venkatasubramanian "Cloud Based Framework for Rich Content Mobile Applications", poster in the IEEE/ACM 11th International Symposium on Cluster, Cloud and Grid Computing (CCGRID2011), Newport Beach, USA, May 2011 ( Best Student Poster Award ).

5. Chris Davison, Daniel Massaguer, Lilia Paradi, M. Reza Rahimi, Bo Xing, Qi Han, Sharad Mehrotra, Nalini Venkatasubramanian "Practical Experiences in Enabling and Ensuring Quality Sensing In Emergency Response Applications", in the IEEE Pervasive Networks for Emergency Management Workshop (PerNem 2010, Acceptance Rate: 56%), Anaheim, Germany, April 2010 (Video Demo).

6. M. Reza. Rahimi, N. Sarshar "On Maximizing IP multicast Throughput In Multi-Source Applications", in the IEEE 18th International Conference on Computer Communications and Networks (ICCCN 2009, Acceptance Rate: 25%), San Francisco, USA, August 2009.

7. M. Reza. Rahimi, N. Sarshar "Load Balanced Multicast with Multi-Tree Groups", in the IEEE 14th Asia-Pacific Conference on Communications (APCC2008), Tokyo, Japan,  October 2008.

8. M. Reza. Rahimi, J. Hengmeechai, N. Sarshar "Pervasive Image Computation: A Mobile Phone Application for getting Information of the Images", in the iCORE2008, Edmonton, Canada, , May 2008. (Video Demo).

9. A. Nayebi, M. Reza. Rahimi, H. Sarbazi Azad "Analysis of Time Based Random Waypoint Mobility Model for Wireless Mobile Networks", in th IEEE 4th International Conference on Information Technology: New Generation (ITNG2007, Acceptance Rate: 36%), pp.42-47, Las Vegas, Nevada, USA, April 2007.

10. A. Nayebi, M. Reza. Rahimi, H. Sarbazi Azad "Time Based Random Waypoint Mobility Model for Wireless Mobile Networks", Australian Telecommunication Networks and Application Conference, (ATNAC2006), pp.124-129, Australia, Melbourne, December 2006.

11. A. A. Milani, M. Reza. Rahimi "A Methodology for Implementation of MMS Client on Embedded Platforms", 10th International CSI Computer Conference (CSICC 2005), pp. 315-322, February 2005 (Video Demo).

12. M. Reza. Rahimi, S. Kasaei, E. Pakbaznia "A Multistage Approach to Fingerprint Classification ", In The Iranian Conference on Electrical Engineering (ICEE 2001), pp. 14.1-14.8, Tehran, Iran, May 2001.















Reza Rahimi

Ph.D Candidate
School of Information and Computer Science,
University of California Irvine, USA.







Home      Education      Publications
##------------------URL-------------------------##
http://www.ics.uci.edu/~pouria/socialGen/SocialGen.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~pouria/bigfun/bigFUN.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
BigFUN Micro-Benchmark

BigFUN schema for AsterixDB

 

Data Types

 


  create dataverse SocialNetworkData if not exists;
  use dataverse SocialNetworkData;
   
  create type TwitterUserType as
  {
  screen_name: string,
  lang: string,
  friends_count: int32,
  statuses_count: int32,
  name: string,
  followers_count: int32
  }
   
  create type TweetMessageType
  as {
  tweetid: int64,     
  user: TwitterUserType,
  sender_location: point,
  send_time: datetime,
  referred_topics: {{ string }},
  message_text: string
  }
   
  create type EmploymentType as
  {
  organization_name: string,
  start_date: date,
  end_date: date?
  }
   
  create type FacebookUserType
  as {
  id: int64,
  alias: string, 
  name: string,
  user_since: datetime,
  friend_ids: {{ int64 }},
  employment: [EmploymentType]
  }
   
  create type FacebookMessageType
  as {
  message_id: int64,
  author_id: int64,
  in_response_to: int64?,
  sender_location: point,
  send_time: datetime,
  message: string
  }
  

 

Datasets

 


  use dataverse SocialNetworkData;
   
  create dataset TweetMessages(TweetMessageType)
  primary key tweetid;
   
  create dataset FacebookUsers(FacebookUserType)
  primary key id;    
   
  create dataset FacebookMessages(FacebookMessageType)
  primary key message_id;
  

 

Secondary Indices

 


  use dataverse SocialNetworkData;
   
  create index fbuUsrSinceIx on FacebookUsers(user_since);
   
  create index fbmAutIdIx on FacebookMessages(author_id);
   
  create index twmSndTmIx on TweetMessages(send_time);
  create index twmSndLocIx on TweetMessages(sender_location)
  type rtree;
  create index tNGramIdx on TweetMessages(message_text)
  type ngram(2);
  

 

Queries table

 


  Query ID
  
  Description
  
  101
  
  Unique
  record retrieval
  
  102
  
  Record
  id range scan
  
  103
  
  Temporal
  range scan
  
  104
  
  Existential
  quantification
  
  105
  
  Universal
  quantification
  
  106
  
  Global
  aggregation 
  
  107
  
  Grouping
  & aggregation 
  
  108
  
  Top-K
  
  
  109
  
  Spatial
  selection 
  
  1010
  
  Text
  containment search 
  
  2010
  
  Text
  similarity search 
  
  1011
  
  Select
  equi-join 
  
  2011
  
  Select
  equi-join 
  (indexed)
  
  1012
  
  Select
  left-outer equi-join 
  
  1013
  
  Select
  join with grouping & aggregation 
  
  3013
  
  Select
  join with grouping & aggregation 
  (indexed)
  
  1020
  
  Select
  join with Top-K 
  
  3020
  
  Select
  join with Top-K  (indexed)
  
  1014
  
  Spatial
  join
  

 

BigFUN Client

Download AsterixDB’s client here.

You can run the client as:

 


  $ java -jar bigFUNDriver.jar
  <PATH TO bigFUN.config FILE>
  

 

Configuration files

Download sample configuration files here.

Each file contains a set of <PARAM NAME>,<PARAM VALUE> pairs (one per line) that define
required parameters for the client. If a line starts with # then it is ignored
(it will be treated as a comment).

 

·     
bigFUN.config: It
contains the parameters that the client needs to connect to a running AsterixDB instance and execute a defined workload for
several iterations. You need to make sure that the address for the cluster
controller is set properly and the dataverse name
should define an existing dataverse in the AsterixDB instance that is already loaded by the generated
social data. All the paths for the files
have to be set carefully. They should point to the expected files for query
generation and the workload (see below) and the paths for stats and res_dump
files should be writable by the user who runs the client. 

·     
qGen.config: It contains
the global parameters for the query generator module in the client. You need to
make sure that the number of FacebookUsers is set
correctly (w.r.t to the social data that you have
already loaded into your AsterixDB instance). The
path to the qparams file should point to a
valid/readable qparams file that is edited w.r.t to the loaded social data.

·     
qparams.txt: It defines query specific parameters that the
query generator uses to generate random instances of each query (according to
the QID and the Query Version) during the benchmarking process. 

·     
aqlTemplates: This
directory contains template files for queries. Each template file contains AQL
statements for one of the queries, while the arguments’ values in the file are
marked in such a way that the query generator can replace them with actual
values while it is generating instances of queries. You do NOT need to edit these files, just make sure they
are copied into a path that is accessible/readable by the client.

·     
qix.txt: It maps each QID to the template file for that
query. Generator loads these template file upon
start-up and uses them to generate queries (using the params
file described above) during the benchmarking process.

·     
qseq.txt: It defines the target workload that the user wants
to run in each iteration of the benchmark. One workload is a sequence of
queries that will be run consecutively. 

 

Deciding about the data size

SocialGen
is the tool that should be used to generate data for BigFUN.
You should note that SocialGen generates data based
on the input ‘cardinality’ for the users of its imaginary social networks and
the “average” number of messages or tweets, each user sends. The combination of
these cardinalities decides about the total size of the database. Hence, there
are different possible cardinality settings that one can use to generate some
specific size of data. In order to increase or decrease the total data size,
one can keep the number of users fixed and changes the average number of
messages and tweets (which grows or shrinks FacebookMessages
and TweetMessages datasets), or he can keep the
average messages number fixed and changes the users cardinality (which grows or
shrinks the FacebookUsers dataset). He can even
modify both parameters. As the queries in BigFUN use
different types of filters with predicates on IDs, temporal and spatial
attributes the changes in the cardinality of datasets have direct impact on
their results sizes. This is a fact that needs to be carefully considered for
the scale-up tests. A practical approach to run scale-up tests is to first
decide about the average number of messages and tweets for each user, and then
change the number of users in the social networks to grow or shrink the
database. This way, you can keep use the same qparam
file in BigFUN across different scales (bigger scale
will impose larger results size on the queries).

 

Here is an example of the
relationship between the SocialGen cardinality and
the actual size of the data (the average messages and tweets is set to be 5):

 


   
  
  Cardinality
  
  Generator Output
  (.adm files)
  
  AsterixDB internal dataset size
  
  FacebookUsers
  
  1,000,000
  
  383 MB
  
  236 MB
  
  FacebookMessages
  
  ~5,000,000
  
  1.2 GB
  
  792 MB
  
  TweetMessages
  
  ~5,000,000
  
  1.9 GB
  
  1.4 GB
  

   

Here is the expected selectivity
for temporal filters (can be used to edit qparams
file):

 

FacebookUsers


  Duration
  
  Expected Results
  Size
  
  1 hour
  
  ~10
  
  1 Day
  
  ~300
  
  1 Month
  
  ~9000
  

 

TweetMessages


  Duration
  
  Expected Results
  Size
  
  1 hour
  
  ~60
  
  1 day
  
  ~1400
  

 

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~yez/links.html
##-----------------TITLE------------------------##
Ye Zhao's Laputa
##------------------TEXT------------------------##
Ye Zhao
    
     
     
     Ph.D. CandidateDonald Bren School of Information and Computer 
	 ScienceUniversity of California, Irvineyez AT uci DOT edu
      

        
     
  
  
  
      homeMy brief self-introductionpublicationsMy research contributionsexperiences and honorsMy experiences beyond researchlinksInteresting stuffCVDownloadable pdf
   
   
  
  
  
  
  
  
   
	   Useful Links
      
        
        
	LeetCode (algorithm and coding problems)	
	
	Diaspora (distributed social network)	
	
	Stanford MobiSocial Computing Laboratory
		
	
	OfflineFacebook (OFB)
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/project/signal/index.html
##-----------------TITLE------------------------##
Project GeoSocial Alerting
##------------------TEXT------------------------##
GeoSocial Alerting 
			(SIGNAL - SocIetal & Geographical Notification and ALerting)
		
	
	
		HomeIssuesPublicationsCodesPeopleContact
	
	
		
			
		

		Welcome to geo-social alerting webpage.

		

		 Overview
         This project focuses on exploratory research towards the next generation of adaptive socio-technical crisis alerting and warning systems. Alerting systems inform social entities affected by crisis - schools, businesses, hospitals, and the public at large - about impending dangers, the status of infrastructures, life lines and available help and actions designed to reduce exposure to natural and human-induced threats - e.g. evacuate, shelter-in-place etc. The eventual goal is to develop alerting systems that deliver an accurate message to the right targets in the right format and the right time, however this requires a synergistic exploration of the challenges at multiple levels - physical/geographical, network and user levels. This effort is an initial exploratory effort that aims to meaningfully combine the three levels into effective alerting schemes.

		

		
			Issues
		


		
		  Geography-based information dissemination system 
		

		The project aims to develop generalized models of geography-based information dissemination systems that incorporates both geographical aspects of alerts and societal/user information. This requires a synergistic exploration of the challenges at multiple levels : physical/geographical, communication network and user/societal levels and aims to meaningfully combine the three levels into effective alerting schemes. Research will be conducted on developing mechanisms to create and maintain geo-aware network overlays and enhance them to capture societal characteristics via a geo-social mapping process that exploits key societal characteristics (e.g. reachability, technology connectivity). Novel geo-alerting protocols will be developed that will enable fast and reliable dissemination of information in geo-social overlays despite correlated geographic failure. This project is an exploratory effort towards the next generation of socio-technical crisis alerting systems that aim to disseminate meaningful alert messages to targeted audiences in the right format and at the right time in the event of disasters. The effort will thus serve as a stimulus that will enable us to undertake future larger challenges in this important interdisciplinary area.
		As a preliminary work, we have explored the impact of geographical failures to the information dissemination over multi-layered (physical/logical) overlay networks. Based on the initial observation of the relabtionship between regional failures and mapping between multiple layers, we have developed a proximity aware reliable overlay construction method in order to sustain high global reachability of information dissemination system even under severe disaster, which may cause simultaneous regional failures of large-scale infrastructures. The proposed overlay construction method can also be used for designing combined networks. 

		Related Publications: 
		Assessing the impact of geographically correlated failures on overlay-based data dissemination
			Kyungbaek Kim and Nalini Venkatasubramanian,
			IEEE Global Communications Conference 2010 (Globecom'10).
		Q+R tree: An efficient overlay structure for pub/sub based mobile alerting
			Myung Guk Lee,
			Master Thesis, UCI, 2012.
		Location-Prediction Methodology for Mobile Alert Notification Systems
			Yunho Huh
			Master Thesis, UCI, 2012.

		
		  Societal & geographical notification
		

		The eventual gole of information dissemination in emergency situation is to reach as many relevant recipients as possible in a timely manner. In order to reach more recipients in extreme situations with geocorrelated failures, we exploit the possibility of delayed diffusion of message through social networks. In a social network, social entities communicate with each other using multiple channels (telephone, social media, face-to-face conversations) which have distinct properties (propagation delay, transmission delay, queuing delay). Additionally, people-centric of behavior-centric correlations between social entities which may control the direction of social diffusion. This project focus to incorporate these characteristics of social networks to capture social diffusion by using various diffusion models (e.g. a delay weighted independent cascade social diffusion model). Also this project develop techniques that leverage the most influential social entities to disseminate a geocorrelated message to a given set of relevant recipients. We expect that such a social diffusion process that is biased towards the more influential entities enhances the performance of information dissemination techniques in terms of latency as well as reliability. 

		Related Publications: 
		
			
			O2SM: Enabling Efficient Offline Access to Online Social 
			Media and Social NetworksYe Zhao, Ngoc Do, Shu-Ting 
			Wang, Cheng-Hsin Hsu and Nalini Venkatasubramanian
			ACM/IFIP/USENIX International Middleware Conferenece 2013 
			(Middleware'13).
			
			GSFord: A Geo-Social Notification System
			Kyungbaek Kim, Ye Zhao and Nalini Venkatasubramanian, 
			IEEE International Symposium on Reliable Distributed Systems 2012 
			(SRDS'12).
			
		  Efficient publish/subscribe 
		notification systems

		 Emerging societal scale notiﬁcation applications call for a system 
		that is able to efficiently support simple, yet changing subscriptions 
		for a very large number of users. We conjecture that a topic-based 
		pub/sub system can form the basis of an efficient architecture to deal 
		with thesimple, yet changing notiﬁcation needs of a large number of 
		users; for example by routing events through group multicast to peers 
		that match subscription topics. Subscription insertion/removal and event 
		routing on a broker can be easily done in O(1) time. We develop topic 
		based pub/sub system that provides efficient scalable event notiﬁcations 
		for dynamic subscriptions.

		Related Publications: 
		
		Dynatops: A Dynamic Topic-based Publish/Subscribe Architecture
		    Ye Zhao,Kyungbaek Kim and Nalini Venkatasubramanian 
			ACM International Conference on Distributed Event-Based Systems 2013 
		(DEBS'13).
          Efficient information dissemination over hybrid networks  

		 Wireless networks (e.g., cellular, Wi-Fi) extend wireline networks in warning and notifying large number of people (both the public and first responders) in crisis situations. People with handheld devices (e.g., cell phones, PDAs) not only receive emergency alerts, but also share warnings and other related information between each other via ad hoc networks. In this work, we study fast, reliable, and efficient dissemination of application-generated data in heterogeneous wireless networks. We consider coverage (the percentage of intended recipients that receive the information), redundancy (the time it takes for people to receive the information) and energy consumption (on handheld devices) as the primary metrics. We develop efficient dissemination strategies that are not only fast and reliable, but also resilient to network congestion and recipients' mobility. We propose protocols that manage the dissemination of data with large size. We also investigate exploiting multiple radio interfaces, hybrid networks as well as mobility for faster dissemination 

		Related Publications: 
		
		
		Efficient Rich Content Dissemination in Hybrid Networks
		    Ngoc Do, ChengHsu Hsin and Nalini Venkatasubramanian, 
			IEEE International Symposium on Reliable Distributed 
		Systems 2012 (SRDS'12).
        

		

		
			 Publications 
		

		
			
			O2SM: Enabling Efficient Offline Access to Online Social 
			Media and Social NetworksYe Zhao, Ngoc Do, Shu-Ting 
			Wang, Cheng-Hsin Hsu and Nalini Venkatasubramanian
			ACM/IFIP/USENIX International Middleware Conferenece 2013 
			(Middleware'13)
			
			
			Dynatops: A Dynamic Topic-based Publish/Subscribe Architecture
		    Ye Zhao,Kyungbaek Kim and Nalini Venkatasubramanian 
			ACM International Conference on Distributed Event-Based Systems 2013 
			(DEBS'13).
			
			Assessing the impact of geographically correlated failures on overlay-based data dissemination
			Kyungbaek Kim and Nalini Venkatasubramanian,
			In proceedings of IEEE Global Communications Conference 2010 (Globecom 2010). December 6-10, 2010 Miami, Florida, USA.
			
			Q+R tree: An efficient overlay structure for pub/sub based mobile alerting
			Myung Guk Lee,
			Master Thesis, UCI, 2012.
			
			Location-Prediction Methodology for Mobile Alert Notification Systems
			Yunho Huh
			Master Thesis, UCI, 2012.
			
		    	
				
				Efficient Rich Content Dissemination in Hybrid Networks
		    	Ngoc Do, ChengHsu Hsin and Nalini Venkatasubramanian, 
				IEEE International Symposium on Reliable Distributed 
				Systems 2012 (SRDS'12)
            		
			GSFord: A Geo-Social Notification System
			Kyungbaek Kim, Ye Zhao and Nalini Venkatasubramanian, 
			under submission.
			

		

		
			 Codes 
		

		
			  Primitive Implementation of GSFord Notification System 

			
			Currently a primitive implementation of GeoSocial Notification system is avaiable.
			Terminal based clients and Android based clients can subscribe for events realted to interesting geographical points.
			Events are triggered through a web-based trigger notification system which can review the previously triggered events.
			For further information, contact to us.
			

			
			



			

		

		
			 People 
		

		
			 Faculty PI : Nalini Venkatasubramanian  Current graduate students : 
			Ye Zao, 
			Ngoc Do  Alumni : Kyungbaek Kim (Post-Doc), Myungguk Lee (Master), Yunho Huh (Master) 
		

		

		
			 Contact 
		
		
			
			Ph.D. Kyungbaek Kim (kyungbak@uci.edu)
			DSM, Dept. Computer Science, 
			University of California, Irvine
			
		
		
		
	
	
		Last Modified by Kyungbaek Kim, May 02 2012.
##------------------URL-------------------------##
http://www.ics.uci.edu/~yez/experiences.html
##-----------------TITLE------------------------##
Ye Zhao's Laputa
##------------------TEXT------------------------##
Ye Zhao
    
     
     
     Ph.D. CandidateDonald Bren School of Information and Computer 
	 ScienceUniversity of California, Irvineyez AT uci DOT edu
      

        
     
  
  
  
    homeMy brief self-introductionpublicationsMy research contributionsexperiences and honorsMy experiences beyond researchlinksInteresting stuffCVDownloadable pdf
   
   
  
  
  
  
  
  
   
	   Work Experiences
      
        
        
	
    Software Engineer Intern @ Google Inc. (06/2013 - 
	09/2013)
  
    Software Engineer Intern @ Google Inc. (06/2011 - 09/2011)
  
	Teaching Assistant, Graduate Student Researcher @ ICS, UC Irvine (09/2008 - present)
	
	System Test Engineer @ Nortel Networks (12/2007 - 
	09/2008)
	
	System Test Engineer @ Huawei Technologies Co. Ltd (01/2006 - 12/2007)

        
     
  
  
	   Honors and Awards
      
        
    
	Student Grant to ACM/IFIP/USENIX Middleware 2013 Conference 
	
	NSF Travel Grant to ACM DEBS 2013 Conference 
	
	NSF Travel Grant to IEEE SRDS 2012 Conference 
	
	
	Graduate Fellowship – University of California, Irvine (2008 – 
	2011)
	
	
	Outstanding STE Award – Huawei Technologies Co. Ltd
	
	
	Scholarship for outstanding undergraduate students – Beijing University of Posts and Telecommunications (2000-2004)
##------------------URL-------------------------##
http://www.ics.uci.edu/~yez/publications.html
##-----------------TITLE------------------------##
Ye Zhao's Laputa
##------------------TEXT------------------------##
Ye Zhao
    
     
     
     Ph.D. CandidateDonald Bren School of Information and Computer 
	 ScienceUniversity of California, Irvineyez AT uci DOT edu
      

        
     
  
  
  
      homeMy brief self-introductionpublicationsMy research contributionsexperiences and honorsMy experiences beyond researchlinksInteresting stuffCVDownloadable pdf
   
   
  
  
  
  
  
  
   
	   Journal Papers
      
        
        	In submission:
    
    Kyungbaek Kim, Ye Zhao, and Nalini Venkatasubramanian, 
	Reliable Geo-Social Notification System
	
	Ngoc Do, Ye Zhao, Jikai Yin, Cheng-Hsin Hsu and Nalini 
	Venkatasubramanian, 
	CrowdMAC: Enable Crowdsourced Mobile Internet Data Transfer
	
	Ye Zhao, Kyungbaek 
	Kim and Nalini Venkatasubramanian, An Adaptive Topic-based Publish/Subscribe 
	Architecture for Dynamic Subscriptions
	
        
     
  
  
	   Conference & Workshop Papers
      
        
	
    Ngoc Do, Ye Zhao, Shu-Ting Wang, Cheng-Hsin Hsu and Nalini 
	Venkatasubramanian, Optimizing Offline Access to Online Social Networks, 
	IEEE Conference on Computer Communications (INFOCOM'14), 2014.
    
    Ye Zhao, Ngoc Do, Shu-Ting Wang, Cheng-Hsin Hsu and Nalini 
	Venkatasubramanian, O2SM: Enabling Efficient Offline Access to Online Social Media and Social Networks, 
	ACM/IFIP/USENIX International Middleware Conference (MIDDLEWARE'13), 2013.
    
    Ye Zhao, Ngoc Do, Shu-Ting Wang, Cheng-Hsin Hsu and Nalini 
	Venkatasubramanian, Enabling Offline Access to Facebook On Mobile Devices, demo paper at ACM/IFIP/USENIX International Middleware Conference (MIDDLEWARE'13), 2013.
    
    Ngoc Do, Ye Zhao, Cheng-Hsin Hsu and Nalini 
	Venkatasubramanian, A marketplace for Mobile Applications 
	Supporting Rich Multimedia Feeds, IEEE Communication 
	Society (COMSOC) Multimedia Communications Technical Committee (MMTC) 
	E-Letter, 2013.
  
    Ye Zhao, Kyungbaek 
	Kim and Nalini Venkatasubramanian, DYNATOPS: A Dynamic Topic-based Publish/Subscribe 
	Architecture, ACM International Conference on Distributed Event-Based Systems (DEBS'13), 2013.
  
    Ye Zhao and Nalini 
	Venkatasubramanian, "Towards Efficient GeoSocial Content Dissemination", 
	Doctoral Workshop on AMC ACM International Conference on Distributed 
	Event-Based Systems (DEBS'13), 2013.
  
    Zhijing Qin, Ye Zhao and Nalini Venkatasubramanian,Modeling Path Duration Time in Hybrid Convergecast Network, IEEE Wireless Communications and Networking Conference (WCNC'13), 2013.

    Kyungbaek Kim, Ye Zhao, and Nalini Venkatasubramanian, GSFord: Towards a reliable Geo-Social Notification System, IEEE International Symposium on Reliable Distributed Systems (SRDS'12), 2012.

    Ye Zhao and Kin Leung, Adaptive Channel Allocation for IEEE 802.11 Wireless LAN, IEEE European Wireless Conference (EW'06), 2006.

        
     
  
  
	   Technical Report
      
        
        
	Ye Zhao, Kyungbaek Kim and Nalini Venkatasubramanian, DYNATOPS: A Dynamic Topic-based Publish/Subscribe Architecture
	
    Kyungbaek Kim, Ye Zhao and Nalini Venkatasubramanian, GSFord: A Reliable GeoSocial Notification System
##------------------URL-------------------------##
http://www.ics.uci.edu/~yez/index.html
##-----------------TITLE------------------------##
Ye Zhao's Laputa
##------------------TEXT------------------------##
Ye Zhao
    
     
     
     Ph.D. CandidateDonald Bren School of Information and Computer 
	 ScienceUniversity of California, Irvineyez AT uci DOT edu
      

        
     
  
  
  
   homeMy brief self-introductionpublicationsMy research contributionsexperiences and honorsMy experiences beyond researchlinksInteresting stuffCVDownloadable pdf
   
   
  
  
  
  
  
  
   
	   My Profile
      
        I'm a Ph.D. candidate in Network Systems at the 
Donald Bren School of Information and 
Computer Science, University of California Irvine, working with Prof. 
Nalini
Venkatasubramanian in 
Distributed System Middleware(DSM) group.  I received my 
Bachelor's degree from the School of 
Telecommunication Engineering at 
Beijing Univerisity of Posts and Telecommunications, China, and my 
Master's degree from the department of 
Electrical and Electronics Engineering at 
Imperial College London, United Kingdom.
        
     
  
   
	   Research Interests
      
        I'm now working on the
Societal 
& Geographical Notification and Alerting (SIGNAL) project, and 
interested in researches in the following areas:
	Content dissemination with distributed and P2P systems, publish/subscribe 
	notification systems
    Online social networks and crowdsourcing
  
    Cloud services and applications
  
	Wireless and mobile systems, delay tolerant 
	networks (DTNs)
	 
        
     
  
   
	   Current Research Project
      
        
      Next Generation Community Notification and Alerting the information needs of people are usually goegraphical correlated as well as socially correlated: (a) people are
often interested in events and information within their immediate
vicinity, and (b) people are often interested in events and information
of others who are socially related to them. In this project we explore
techniques to enable efficient and scalable community notifications by exploring knowledge of users'  geo-social contexts they exposed through online social networks and personal devices and knowledge of physical network environments and communication channels. We study and develop approaches in two conceptual layers: (a) content-layer foucsing on providing personalized information and contents
to users and (b) delivery-layer focusing on improving content delivery performance by considering different channels and devices (e.g., mobile networks and DTNs) the users connect to the
system with.
##------------------URL-------------------------##
http://www.ics.uci.edu/~bhore/research.html
##-----------------TITLE------------------------##
publication
##------------------TEXT------------------------##
For an overview of my doctoral thesis and summary of research
papers please send me an email.

Research Projects:


Database-As-a-Service


Privacy in Pervasive
Spaces


Privacy Implications of
Technology (RESCUE Project)

Publications

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~bhore/publication.html
##-----------------TITLE------------------------##
publication
##------------------TEXT------------------------##
Journal Publications

 

3. ReCrew: A Reliable
Flash-Dissemination System (Accepted for publication in IEEE Transactions on
Computers, 2012)

Kyungbaek Kim, Mayur
Deshpande, Bijit Hore, Sharad Mehrotra,
Nalini Venkatasubramanian. NEW!

 

2. Secure Multidimensional Range Queries over Outsourced
Data (accepted for publication in VLDBJ, 2011)

Bijit Hore,
Mustafa Canim, Sharad Mehrotra, Murat Kantarcioglu. 

 

1. CCD: A Distributed Publish/Subscribe Framework for Rich
Content Formats (accepted for publication in IEEE TPDS, 2011)

Hojjat Jafarpour,
Bijit Hore, Sharad Mehrotra, Nalini Venkatasubramanian.

 

Conference
Publications

 

16. CloudProtect: Managing Data
Privacy in Cloud Applications (accepted for publication in IEEE CLOUD, 2012)

Mamadou H. Diallo,
Bijit Hore, Ee-Chien Chang, Sharad Mehrotra, Nalini Venkatasubramanian. NEW!

 

15. Risk-Aware Workload Distribution in Hybrid Clouds
(accepted for publication in IEEE CLOUD, 2012)

Kerim Yasin
Oktay, Vaibhav Khadilkar, Bijit Hore, Murat Kantarcioglu, Sharad Mehrotra, Bhavani Thurasingham. NEW!

 

14. Building Disclosure Risk Aware Query Optimizers for
Relational Databases (VLDB 2010, Singapore) [PDF]

Mustafa Canim, Murat Kantarcioglu, Bijit Hore, Sharad Mehrotra.

 

13. Middleware for Pervasive Spaces: Balancing Privacy and
Utility (MIDDLEWARE 2009, Urbana Champaign, USA) [PDF] 

Daniel Massaguer, Bijit Hore, Mamadou
H. Diallo, Sharad Mehrotra, Nalini Venkatasubramanian.

 

12. CCD: Efficient Customized Content Dissemination in
Distributed Publish/Subscribe (MIDDLEWARE 2009, Urbana Champaign, USA) [PDF]

Hojjat Jafarpour,
Bijit Hore, Sharad Mehrotra, Nalini Venkatasubramanian.

 

11. Privacy-Preserving Event Detection for Pervasive Spaces
(PERCOM 2009, Galveston, USA) [PDF] [long version]

Bijit Hore,
Jehan Wickramasuriya, Sharad Mehrotra, Nalini Venkatasubramanian, Daniel
Massaguer.

 

10. Subscription Subsumption
Evaluation for Content-based Publish/Subscribe Systems (MIDDLEWARE 2008,
Leuven, Belgium) [PDF][ppt]

Hojjat Jafarpour,
Bijit Hore, Sharad Mehrotra, Nalini Venkatasubramanian. 

 

9. Discovering GIS Sources on the Web using Summaries, (JCDL
2008, Pittsburg, USA) [PDF]

Ramaswamy Hariharan,
Bijit Hore, Sharad Mehrotra.

 

8. Exploiting Semantics for Sensor Re-Calibration in Event
Detection Systems, (MMCN 2008, San Jose, USA) [PDF]

Ronen Vaisenberg, Shengyue Ji, Bijit
Hore, Sharad Mehrotra, Nalini Venkatasubramanian.

 

7. Flexible Anonymization for Privacy Preserving Data
Publishing: A Systematic Search based Approach, (Siam Data Mining Conference
2007, Minneapolis, USA) [PDF]
[long version]

Bijit Hore,
Ravi Jammalamadaka, Sharad Mehrotra.

6. Processing Spatial-Keyword (SK) Queries in Geographical Information
Retrieval (GIR) Systems, (SSDBM 2007, Banff, Canada) [PDF]
Ramaswamy Hariharan, Bijit Hore, Chen Li, Sharad Mehrotra.

5. Design and Implementation of a Middleware for Sentient Spaces, (ISI 2007,
New Brunswick, USA) [PDF]
Bijit Hore, Hojjat Jafarpor, Ramesh Jain,
Daniel Massaguer, Sharad Mehrotra, Nalini Venkatasubramanian, Utz Westermann.

4. CREW: A Gossip-based
Flash-Dissemination System, (ICDCS 2006, Lisboa,
Portugal) [PDF]
Mayur Deshpande, Bo Xing, Iosif Lazaridis, Bijit Hore, Nalini
Venkatasubramanian, Sharad Mehrotra.

3. Indexing Text Data under Space
Constraints, (CIKM 2004, Washington D. C., USA) [PDF] [PPT] 
Bijit Hore, Hakan Hacigumus, Bala Iyer, Sharad
Mehrotra.

2. A Privacy-Preserving Index for
Range Queries, (VLDB 2004, Toronto, Canada) [PDF] [PPT] [long version]
Bijit Hore, Sharad Mehrotra, Gene Tsudik.

1. A Graph Partitioning System for
Natural Unbalanced Partitions, (WSEAS International Conference on Information
and Automation 2002, Tenerife, Spain) [PDF]
Sachin Patkar, Viraj Kumar, Bijit Hore, Hardeep Kaur.


Workshop
Publications

 

1. IndexingEncrypted Documents for Supporting Efficient Keyword Search
(Secure Data Management Workshop, VLDB 2012)

Bijit Hore,
Mamadou H. Diallo,
Ee-Chien Chang, Sharad Mehrotra. NEW!



Book Chapters & Invited
articles

5. Search over Encrypted Data
(In Encyclopedia of Cryptography and Security, Springer 2011)
Ali Bagherzandi, Bijit Hore, Sharad Mehrotra.

4. Privacy of Outsourced Data
(In Encyclopedia of Cryptography and Security, Springer 2011)
Hakan Hacigumus, Bijit Hore, Sharad
Mehrotra.

3. Managing and Querying Encrypted Data
(In Database Security: Applications and Trends, Ed. Michael Gertz
and Sushil Jajodia,
Springer 2007)
Bijit Hore, Sharad Mehrotra, Hakan Hacigumus.

2. SATware: Middleware for
Sentient Spaces 
(In Multimodal Surveillance: Sensors, Algorithms and Systems, Ed. Zhigang Zhu and Thomas S. Huang, 2007)
Bijit Hore, Hojjat Jafarpour, Ramesh Jain, Shengyue Ji, Daniel Massaguer, Sharad Mehrotra, Nalini Venkatasubramanian, Utz Westermann

1. Search over Encrypted Data 
(In Security in Decentralized Data Management, Ed. Ting Yu and Sushil Jajodia, Springer 2007)
Hakan Hacigumus, Bijit Hore, Bala
Iyer, Sharad Mehrotra.

Others

2. Hollyshare:
A P2P file-sharing system (ICS-Project-Report 2001, UCI) [PDF] [Download]
Ilya Issenin, Bijit Hore, Sean McCarthy,
Shannon Tauro, Songmei Han.
  

1. Computing Minimum Steiner Forests in Circle Graphs (Unpublished
Manuscript, 2000) 
Sriram V. Pemmaraju and Bijit Hore.
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/IDClass.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  SocioTechnical Approaches to Information Dissemination
  Outline
   Given the current trend to obtain information anytime and anywhere, Information Dissemination is a critical technology/service
for future generations under a variety of scenarios.  In this course, we will develop
an understanding of the key factors in effective dissemination to the public at large and design technology innovations to enable
faster, robust and more effective content dissemination.
For example, in the context of crisis alert systems, conveying accurate and
timely information to those who are actually at risk (or likely to be), while providing reassuring information to those who
are not at risk will provide a better response to the crisis at hand.

The course will explore key factors that pose significant challenges (social and technological) to effective information dissemination.
These factors include variation in notification times for different applications (e.g. warning times in the emergency response case),
determining the specificity of  information to effectively communicate to different populations, and customization of the delivery process to reach the targeted populations in time over unreliable infrastructures and networks.
The course will also explore how effective dissemination requires a multidisciplinary approach that
 understands and utilizes the context in which the dissemination of information occurs to determine sources, recipients, channels of targeted messages  develop technological solutions that can deliver appropriate and accessible information to the public rapidly. 
From a social science perspective, we will look into models and theories for information diffusion in social networks and the role of traditional and
alternative independent communication technologies (blogs, social networks ala FaceBook, MySpace) in effectively reaching the target audience.
From a information technology and systems perspective, we will look at techniques to build highly customized, robust and timely dissemination services from unstable and unreliable resources over both wired and wireless networks using a variety of technologies such as peer-based architectures, wireless mesh networks and
publish/subscribe architectures.

Presentations

April 1, 2008 -- Information Diffusion Simulation in the RBUSD Region (Ryan M. Acton)
April 8, 2008 -- 2007 Southern California Wildfires Research (Jeannette Sutton)
April 15, 2008 -- Why ethnography & information systems (Catherine Forsman)
April 15, 2008 -- Information Transmission System for Earthquake Early Warning (from The Taiwan-Japan Workshop on the Earthquake Early Warning System)
April 22, 2008 -- Application Layer Multicast for Earthquake Early Warning Systems (Valentina Bonsi)
April 29, 2008 -- Flashback (Abhishek Amit)




	Readings
	Information technology and systems
	Wired data dissemination
	
			Flashback: A Peer-to-PeerWeb Server for Flash Crowds
			Mayur Deshpande, Abhishek Amit, Mason Chang, Nalini Venkatasubramanian, and Sharad Mehrotra 
			ICDCS'07 (27th International Conference on Distributed Computing Systems), 2007
    
	
		CREW: A Gossip-based Flash-Dissemination System 
		Mayur Deshpande ; Bo Xing ; Iosif Lazaridis ; Bijit Hore ; Nalini Venkatasubramanian ; Sharad Mehrotra ; 
		ICDCS’06 (International Conference on Distributed Computing Systems), 2006
    
    
			SplitStream: High-Bandwidth Multicast in Cooperative Environments
			Miguel Castro1 Peter Druschel Anne-Marie Kermarrec Animesh Nandi Antony Rowstron Atul Singh 
			SOSP’03, October 19-22, 2003
    
    
			Bullet: High Bandwidth Data Dissemination Using an Overlay Mesh
			Dejan Kosti´c, Adolfo Rodriguez, Jeannie Albrecht, and Amin Vahdat 
			SOSP’03, October 19-22, 2003
    
    
    	Scalable Application Layer Multicast
				Suman Banerjee, Bobby Bhattacharjee, Christopher Kommareddy 
		SIGCOMM’02, August 19-23, 2002
    
    
			SCRIBE: A large-scale and decentralized application-level multicast infrastructure
			Miguel Castro, Peter Druschel, Anne-Marie Kermarrec and Antony Rowstron 
			IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS, VOL. 20, NO. 8, OCTOBER
    

    Wireless data dissemination

	
			The broadcast storm problem in a mobile ad hoc network
			Sze-Yao Ni, Yu-Chee Tseng, Yuh-Shyan Chen, and Jang-Ping Sheu
			Mobicom ‘99
	
	
		A generic distributed broadcast scheme in ad hoc wireless networks
		Jie Wu and Fei Dai 
		IEEE TRANSACTIONS ON COMPUTERS, VOL. 53, NO. 10, OCTOBER 2004
	
	
			Double-covered broadcast (DCB): a simple reliable broadcast algorithm in MANETs
			Wei Lou and Jie Wu 
			INFOCOM 2004. Twenty-third AnnualJoint Conference of the IEEE Computer and Communications Societies
	
	
			Anonymous Gossip: Improving Multicast Reliability in Mobile Ad-Hoc Networks
			Ranveer Chandra, Venugopalan Ramasubramanian, Kenneth P. Birman 
			21st International Conference on Distributed Computing Systems, 2001.
	
	
		An Efficient Reliable Broadcast Protocol for Mobile Ad-hoc Networks
				E. Vollset and P. Ezhilchelvan 
		University of Newcastle upon Tyne Technical Report Series, CS-TR-822 December 2003
	
	
			The dynamic behavior of a data dissemination protocol for network programming at scale
			Jonathan W. Hui and David Culler 
			SenSys’04, November 3-5, 2004
    
    
				Matching data dissemination algorithms to application requirements
				John Heidemann, Fabio Silva and Deborah Estrin
				SenSys’03 November 5-7, 2003
    

	Pub/Sub

		
		HyperCBR: Large-Scale Content-Based Routing in a Multidimensional Space
		Stefano Castelli, Paolo Costa, Gian Pietro Picco
		INFOCOM 2008.
		

		
		Meghdoot: Content-Based Publish/Subscribe over P2P Networks.
		Abhishek Gupta, Ozgur D. Sahin, Divyakant Agrawal, Amr El Abbadi
		Middleware 2004, 254-273
		

		
		A Routing Scheme for Content-Based Networking.
		Antonio Carzaniga, Matthew J. Rutherford, Alexander L. Wolf
		Infocom 2004
		

		
		Efficient event routing in content-based publish/subscribe service network.
		Fengyun Cao, Jaswinder Pal Singh
		Infocom 2004
		

		
		Content-Based Publish-Subscribe over Structured Overlay Networks.
		Roberto Baldoni, Carlo Marchetti, Antonino Virgillito, Roman Vitenberg
		ICDCS 2005,  437-446
		
		
		Towards an Internet-Scale XML Dissemination Service.
		Yanlei Diao, Shariq Rizvi, Michael J. Franklin
		VLDB 2004, 612-623
		

		
		Dynamic Load Balancing in Distributed Content-based Publish/Subscribe.
		Alex Cheung and Hans-Arno Jacobsen
		Middleware 2006.
		

		
		Effects of Routing Computations in Content-Based Routing Networks with Mobile Data Sources.
		Vinod Muthusamy, Milenko Petrovic, Hans-Arno Jacobsen
		MobiCom 2005.
		
	Social science

	Information diffusion, social networks and disasters

		Complex Contagions and the Weakness of Long Ties
			Centola, Damon and Macy, Michael. 2007
			American Journal of Sociology, 113(3): 702--734.
		
		How to Search a Social Network.
			Adamic, Lada; Adar, Eytan. 2005
			Social Networks, 27: 187--203.
		
		The Effects of a Threatening Rumor on a Disaster-Stricken Community
			Danzig, Elliott R.; Thayer, Paul W.; Galanter, Lila R. 1958
			Publication 517, National Academy of Sciences---National Research Council. Washington, DC.  Chapters 1--2, pp1--21.
		
		Formulas for Spreading Opinions.
			Dodd, Stuart Carter. 1958.   
			The Public Opinion Quarterly, 22 (4): 537--554.
			Related link
		
		The Flow of Crisis Information as a Probe of Work Relations.
			Erickson, Bonnie H.; Nosanchuk, T.A.; Mostacci, Liviana; Dalrymple, Christina Ford. 1978.
			Canadian Journal of Sociology, 3(1): 71--87.
		
		Community Size, Network Structure, and the Flow of Information.
					Richardson, R. J.; Erickson, Bonnie H.; Nosanchuk, T.A. 1979.
					Canadian Journal of Sociology, 4(4): 379--392.
		

	Warning Systems

	
		Hazard Warning Systems: Review of 20 Years of Progress -- May 2000
	
	
		 Facing the Unexpected - Chapter 3 -- 2001
	
		Disaster Warnings as Risk Comunication -- 2004
		Handbook of Disaster Research - Chapter 11 -- 2006
  		Evacuation Decision Making and Behavioral Responses: Individual and Household -- August 2007
    

	Projects
	Information technology and systems
	
	Implementation of an highly reliable Application Layer Multicast

	
	
	Large scale testing of information dissemination protocols

	

	Social science
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/links.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Related Links
  Recent News
  "Emergency Alerts Via Cell Phones Move Ahead" - April 10, 2008
  "Twitter, Facebook called on for higher purpose" - January 16, 2008
  "Executive Order: Public Alert and Warning System" - White House, June 26, 2006
  Alert and Warning Systems
  Actual warning and alert systems
  The Emergency Alert System (EAS)Alerting America A Directory of Public Warning Products, Services & Technologies (PPW Report 2004-3)
  Warning Systems Surveys
  Hazard Warning Systems: Review of 20 Years of Progress -- May 2000Facing the Unexpected - Chapter 3 -- 2001Disaster Warnings as Risk Comunication -- 2004Handbook of Disaster Research - Chapter 11 -- 2006Evacuation Decision Making and Behavioral Responses: Individual and Household -- August 2007
  Early warning systems
   Global reviews
  		Global Survey of Early Warning Systems -- March 2006Earthquake Alarm, Rapid Response and Early Warning System: Low Cost Systems for Seismic Risk Reduction -- August 2001Hazard Warning Systems: Review of 20 Yers of Progress -- May 2000
  	Earthquake early warning
  		Japan Earthquake Early Warning System (Operating since October 2007)ElarmSSAFER projectSingle-Station Earthquake Characterization for Early Warning -- December 2005Some Countries Are Betting that a few Seconds Can save Lives -- December 2004The Potential for Earthquake Early Warning in Southern California -- May 2003TriNet Studies & Planning Activities in Real-Time Earthquake Early Warning
				Task 1Task 2Task 3Task 4

			Japan Lays Groundwork for National Erthquake Waring System -- April 2006UrEDAS, Urgent Earthquake Detection and Alarm System, Now and Future -- August 2004Progress on earthquake rapid reporting and early warning systems in Taiwan -- April 2004Istanbul Earthquake Rapid Response and the Early Warning System -- January 2003Potential of Earthquake Early Warning Systems -- January 2001
  	Volcano Early Warning
  		An Assessment of Volcanic Threat and Monitoring Capabilities in the United States: Framework for a National Volcano Early Warning System -- April 2005
  	Tsunami Early Warning
  		Local Tsunami Warning in the Pacific Coastal United States -- February 2005NOAA Weather Radio (NWR) - A Coastal Solution to Tsunami Alert Notification -- February 2005
  	
  Design criteria
  Alerts and Notification Use Case -- July 2007A Internet Public Alerting System: A Canadian Experience -- May 2006Comparing Cell Broadcast and Text Messaging for Citizen Warning -- May 2006Design Criteria for Public emergency Warning Systems -- May 2006Protecting America's Communities - An Introductionto Public Alert & Warning -- June 2004Warnings during Disaster: Normalizing Communicated Risk -- February 1992
  Conferences
  EWCIII - Third International Conference on Early WarningMid-Atlanctic All Hazards Forum 2005International ISCRAM Conference
  Standards
  Common alerting Protocol v1.1Emergency Data Exchange Language (EDXL)
  Academic Partners
  RESCUE: Responding to Crises and Unexpected Events 
        Calit2 - California Institute for Telecommunications and Information Technology  University of California, Irvine University of Colorado 
at Boulder University of California, San Diego   Responsphere 
Research Project  
   
  Industry Partners
  Partnership for Public Warning  The School Boardcasting CompanyImageCat, Inc
      	
    		
			
			
			
      	
      QualNet Network Simulator
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/workshops.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links

  Recent Workshops
    Earthquake Information Dissemination Workshop. May 26, 2006 
    Workshop on Emergency Information Dissemination in Schools. September, 2008
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/publications.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Publications
    
	
    Massive Live Video Distribution using Hybrid Cellular and Ad Hoc Networks
    Ngoc Minh Do, Cheng-Hsin Hsu, Jatinder Pal Singh, and Nalini Venkatasubramanian,
    In Proceedings of the 12th IEEE International Symposium on a World of Wireless, Mobile and Multimedia Networks (Wowmom 2011). June 20-23, 2011, Lucca, Italy

	CCD: A Distributed Publish/Subscribe Framework for Rich Content Formats,
	Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra, Nalini Venkatasubramanian,
	IEEE Transactions on Parallel and Distributed Systems, 2011.


	FaReCast: Fast, Reliable Application Layer Multicast for Flash Dissemination, 
	Kyungbaek Kim, Sharad Mehrotra and Nalini Venkatasubramanian,
	In proceedings of ACM/IFIP/USENIX 11th International Middleware Conference (Middleware 2010). November 29 - December 3, 2010, Bangalore, India

	Assessing the impact of geographically correlated failures on overlay-based data dissemination
	Kyungbaek Kim and Nalini Venkatasubramanian,
	In proceedings of IEEE Global Communications Conference 2010 (Globecom 2010). December 6-10, 2010 Miami, Florida, USA.

	Disruption-Tolerant Spatial Dissemination
	Bo Xing, Sharad Mehrotra and Nalini Venkatasubramanian
	The Seventh IEEE Communications Society Conference on Sensor, Mesh and Ad Hoc Communications and Networks (SECON 2010). June 21 - 25, 2010. Boston, USA. 

	Gateway Designation for Timely Communications in Instant Mesh Networks
	Bo Xing, Mayur Deshpande, Sharad Mehrotra and Nalini Venkatasubramanian
	The Sixth IEEE PerCom Workshop on Pervasive Wireless Networks (In Conjunction with PerCom 2010). April 2, 2010. Mannheim, Germany. 

	Practical Experiences in Enabling and Ensuring Quality Sensing In Emergency Response Applications
	Chris Davison, Daniel Massaguer, Lilia Paradis, M. Reza Rahimi, Bo Xing, Qi Han, Sharad Mehrotra and Nalini Venkatasubramanian
	The First Annual Workshop on Pervasive Networks for Emergency Management (In Conjunction with PerCom 2010). April 2, 2010. Mannheim, Germany. 

	CCD: Efficient Customized Content Dissemination in Distributed Publish/Subscribe 
    Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra and Nalini 
    Venkatasubramanian., ACM/IFIP/USENIX Middleware 2009, Urbana-Champaign, IL,USA, November 2009.


	MICS: An Efficient Content Space Representation Model for Publish/Subscribe Systems 
    Hojjat Jafarpour, Sharad Mehrotra, Nalini Venkatasubramanian and Mirko Montanari,  
    ACM International Conference on Distributed Event-Based Systems
    (DEBS) 2009, Nashville, TN, USA, July 2009.


	"Dynamic Load Balancing for Cluster-based Publish/Subscribe System 
    Hojjat Jafarpour, Sharad Mehrotra and Nalini Venkatasubramanian, 
    IEEE International Symposium on Applications and the Internet
    (SAINT) 2009, Seattle, WA, USA, July 2009.


RADcast: Enabling Reliability Guarantees for Content Dissemination in Ad Hoc Networks 
Bo Xing, Sharad Mehrotra and Nalini Venkatasubramanian 
The 28th Conference on Computer Communications (IEEE INFOCOM 2009). April 19 - 25, 2009. Rio de Janeiro, Brazil.

An Experimental Study on Wi-Fi Ad-Hoc Mode for Mobile Device-to-Device Video Delivery 
Bo Xing; Karim Seada; Nalini Venkatasubramanian 
IEEE INFOCOM 2009 Workshop on Mobile Video Delivery (MoViD 2009). April 24, 2009. Rio de Janeiro, Brazil.

Proximiter: Enabling Mobile Proximity-Based Content Sharing on Portable Devices (Demo Paper) 
Bo Xing, Karim Seada and Nalini Venkatasubramanian 
The 7th IEEE International Conference on Pervasive Computing and Communications (PerCom 2009). March 9 - 13, 2009. Galveston, Texas USA.

PassItOn: An Opportunistic Messaging Prototype on Mobile Devices (Demo Paper) 
Bo Xing, Karim Seada, Peter Boda and Nalini Venkatasubramanian 
The 6th Annual IEEE Consumer Communications & Networking Conference (CCNC 2009). January 10 - 12, 2009. Las Vegas, Nevada USA.


    Subscription Subsumption Evaluation for Content-based Publish/Subscribe Systems  
Hojjat Jafarpour, Bijit Hore, Sharad Mehrotra and Nalini Venkatasubramanian
ACM/IFIP/USENIX Middleware 2008, Leuven, Belgium, December 2008.


    A Fast and Robust Content-based Publish/Subscribe Architecture  
Hojjat Jafarpour, Sharad Mehrotra and Nalini Venkatasubramanian
IEEE NCA 2008, Boston, MA, USA, July 2008.


    Flashback: A Peer-to-Peer Webserver for Handling Flash Crowds  
Mayur Deshpande, Abhishek Amit, Mason Chang, Nalini Venkatasubramanian and
Sharad Mehrotra
IEEE International Conference on Distributed Computing Systems (ICDCS). 2007.

	Towards Reliable Application Data Broadcast in Wireless Ad Hoc Networks
	Bo Xing, Mayur Deshpande, Nalini Venkatasubramanian and Sharad Mehrotra
	IEEE Wireless Communications and Networking Conference 2007 (WCNC 2007). March 11 - 15, 2007. Hong Kong, China.

	Architecture for an Automatic Customized Warning System.
	Mirko Montanari, Sharad Mehrotra, Nalini Venkatasubramanian, 
	IEEE International Conference on Intelligence and Security Informatics, (ISI 2007), New Brunswick, New Jersey, USA, May 23-24, 2007.


    Heuristics for Flash-Dissemination in Heterogenous Networks 
Mayur Deshpande; Nalini Venkatasubramanian; Sharad Mehrotra
International Conference on High Performance Computing (HiPC). 2006. 


      CREW: A Gossip-based Flash-Dissemination System 
    Mayur Deshpande ; Bo Xing ; Iosif Lazaridis ; Bijit Hore ; Nalini Venkatasubramanian ; Sharad Mehrotra ; 
    ICDCS (International Conference on Distributed Computing Systems), 2006., 2006-07 


       HiPub: High Speed Content-based Publish/Subscribe
        Hojjat Jafarpour; Sharad Mehrotra; Nalini Venkatasubramanian; Raymond Klefstad; 
        Technical Report, 2006-06-15 

Interactive Refinement of Filtering Queries on Streaming Intelligence Data
Yiming Ma, Dawit Seid, Sharad Mehrotra 
IEEE International Conference on Intelligence and Security Informatics (ISI) 2006, May 23-24, San Diego, USA. 


        Fast Emergency Information Dissemination over Cellular/Wi-Fi Combined Networks
        Jinsu Wang; Bo Xing; 
        Technical Report, 2006-05


        Revisiting Network Wide Broadcast in Ad Hoc Networks for Application Data
        Bo Xing; Mayur Deshpande; Nalini Venkatasubramanian; Sharad Mehrotra; 
        Technical Report, 2006-04


        Achieving Communication Efficiency through Push-Pull Partitioning of Semantic Spaces to Disseminate Dynamic Information
        Amitabha Bagchi; Amitabh Chaudhary; Michael Goodrich; Chen Li; Michal Shmueli-Scheuer; 
        Technical Report, 2006-03


        Dynamic Panoramic Surround Map: Motivation and Omni Video Based Approach
        T. Gandhi; M. Trivedi; 
        IEEE International Workshop on Machine Vision for Intelligent Vehicles in Conjunction with IEEE International Conference on Computer Vision and Pattern Recognition, 2005-01


        Bandwidth Aggregation for Real –Time Applications in Heterogenerous Wireless Networks
        K. Chebrolu; R. Rao; 
        IEEE Transactions on Wireless Communications, 2005



        Energy Efficient Transmission Scheduling for Delay Constrained Wireless Networks
        P. Nuggehalli; V. Srinivasan; R. Rao; 
        IEEE Transactions on Wireless Communications, 2005


        Radio Communication Networks in the World Trade Center Disaster
        Carter Butts; M. Petrescu-Prahova; 
        Technical Report, 2005


        Customized Dissemination in the context of emergencies
        A. Ghigi; 
        Thesis, 2005


        Scalable, Flash Dissemination of Information in a Heterogeneous Network
        Mayur Deshpande; Nalini Venkatasubramanian; Sharad Mehrotra; 
        Technical Report, 2005


        Dissemination of Evacuation Information in Crisis
        A. Ghigi; 
        Technical Report, 2005


        I.T. Support for Information Dissemination During Crises
        Mayur Deshpande; Nalini Venkatasubramanian; Sharad Mehrotra; 
        Technical Report, 2005


        Scheduling on a Channel with Time-Varying Capacity
        A. Dhamdhere; R. Rao; 
        Workshop on Cross-Layer Issues in the Design of Tactical Mobile Ad Hoc Wireless Networks: Integration of Communication and Networking Functions to Support Optimal Information Management, Washington, D, 2004-06


        Information Transmission Through Human Informants: Simulation
        Gabriel Lawson; Carter Butts; 
        North American Association for Computational Social and Organizational Science Meeting, June 2004, Pittsburgh , PA, 2004-06


        An Integrated, Robust Approach to Lane Marking Detection and Lane Tracking
        Joel McCall; Mohan Trivedi; 
        IEEE Intelligent Vehicles Symposium, University of Parma, Italy, 2004-06


	Data Gerrymandering: Efficient Push-Pull Partitioning to Support Range Queries on Dynamic Data
        Amitabha Bagchi; Amitabha Chaudhary; M.T. Goodrich; Chen Li; Michal Shmueli-Scheuer; 
        Technical Report, 2004


        SPINE: Scalable Approximate Global State Maintenance in Peer-to-Peer Networks
        Mayur Deshpande; Haimin Lee; Chen Li; S. Mehrotra; Nalini Venkatasubramanian; 
        Technical Report, 2004


        Improving Energy Saving in Wireless Systems by Using Dynamic Power Management
        Carla-Fabiana Chiasserini; Ramesh Rao; 
        IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 2, NO. 5, 2003-09
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/artifacts.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links

  Results of the project and artifacts 
    Expected research outcomes of this work include: 
    
        a methodology for determining customization needs and for risk communications in adverse situations that incorporates societal implications of the communication 
      systems and strategies for customization notification that supports accurate and rapid targeting of the most vulnerable populations  techniques for flash dissemination in crisis contexts that enables delivery of urgent communications to large number of users in a very short period of time over unreliable networks 
        techniques to support efficient use of scarce wireless resources to reach mobile recipients reachable over wireless devices.    
      
    Our efforts are expected to culminate in two artifacts: 
    
        a scalable rapid real-time alert system (School Crisis Alert System) 
      a customized risk communications system capable of reaching diverse populations based on context and recipient characteristics. (Hurricane Portal) 
    School Crisis Alert System
    The School Crisis Alert System is one of the artifacts that is being developed in the
    Rescue Dissemination Project. The goal of this artifact is to create an automated system to disseminate
    information to schools and other organization in case of crisis and disasters. The dissemination will be
    done by exploiting the organization's emergency plans by sending, for each event, the right information to
    the person that, according to the emergency plan, should received it. The existing emergency's plans are
    so improved by having updated, relevant and customized information easily available to the people who
    need them.
     School Crisis Alert Website 
    
    Hurricane Portal
    The RESCUE Hurricane Portal provides a means by which emergency response
      organizations and the general public can capture, process, and track the
      evolution of crises in real-time during hurricanes. The portal provides
      three major benefits. The portal provides simulation results for wind
      damage to buildings as well as emergency shelter needs prior to or
      immediately following landfall of the hurricane, which can be used for
      planning purposes and resource allocation. The portal also serves as a
      clearinghouse for eyewitness damage reports via a damage survey, which
      can be used to validate the simulated results. Finally, the portal
      provides a suite of sophisticated search, retrieval, and analysis tools
    for utilizing web content to provide situational awareness. 
    Research areas related to the hurricane portal include:
    Entity & Event Extraction from text and other multimodal data to
        build situational awarenessMechanisms to model reliability and trust in information  Doman specific ontologies to classify and reason about disastersModels and simulations for loss estimation and disaster impact
        analysisGeo-spatial analysis models for disaster planning and monitoring
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/delivery.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Scalable and Robust Delivery Infrastructures
   Flash Dissemination in Heterogeneous Networks Information Dissemination in Heterogeneous Wireless Environments
    Flash Dissemination in Heterogeneous Networks 
  The goal of Flash Dissemination is rapid distribution (over the Internet) of varying amounts of data to a large number of recipients in as short a time period as possible. Given the unpredictability in its need, the unstable nature of networks/systems and the varying characteristics of delivered content, flash-dissemination has different concerns and constraints as compared to traditional broadcast or content delivery systems. First, the underlying protocols must be able to disseminate as fast (or faster) as current highly optimized content delivery systems under normal circumstances. In addition, such protocols must be highly fault-resilient under unstable conditions and adapt rapidly in a constantly changing environment. In this study, we have developed a minimum-state gossip-based protocol called CREW. We implement the protocol in a framework that we call RapID that provides key building blocks for P2P content delivery systems. Extensive experimental results over an emulated Internet testbed show that CREW is faster than current state-of-art dissemination systems (such as BitTorrent, Splitstream and Bullet), while maintaining the stateless fault-tolerance properties of traditional gossip protocols. Further, we have also investigated centralized, global-knowledge protocols for dissemination. These protocols are much faster than localized randomized protocols and may be useful in situations where network and systems are stable and dissemination may be repeated multiple times to the same set of recipients, thus amortizing the knowledge collection and dissemination plan generation costs.
  In addition, we have developed a fast and highly reliable flash dissemination protocol called FaReCast. With the notion of path diversity supported by a mesh-like overlay structre having multiple-parents and multiple-children, FaReCast selectively trigger multidirectional backup multicasting to send a message to the nodes which may not get the message. FaReCast achives 100% reliability under very high (over 40%) overlay failure with low latency and reasonable overhead which are comparable to other protocols (SplitStream, MultipleTree-based, Epidemic, and PRM). FaReCast is implemented in JAVA and the distributed configuration manager, which manages the structure of the used overlay with large number of unreliable users, is also implemented by using the FreePastry substrate.

  Publications: 
  FaReCast: Fast, Reliable Application Layer Multicast for Flash Dissemination, 
  	Kyungbaek Kim, Sharad Mehrotra and Nalini Venkatasubramanian,
	In proceedings of ACM/IFIP/USENIX 11th International Middleware Conference (Middleware 2010). November 29 - December 3, 2010, Bangalore, India
  Heuristics for Flash-Dissemination in Heterogenous Networks 
    Mayur Deshpande; Nalini Venkatasubramanian; Sharad Mehrotra
    International Conference on High Performance Computing (HiPC). 2006.  
  CREW: A Gossip-based Flash-Dissemination System 
  Mayur Deshpande ; Bo Xing ; Iosif Lazaridis ; Bijit Hore ; Nalini Venkatasubramanian ; Sharad Mehrotra ; 
  ICSDCS (International Conference on Distributed Computing Systems), 2006., 2006-07 
  Scalable, Flash Dissemination of Information in a Heterogeneous Network
    Mayur Deshpande; Nalini Venkatasubramanian; Sharad Mehrotra; 
Technical Report, 2005
  SPINE: Scalable Approximate Global State Maintenance in Peer-to-Peer Networks
    Mayur Deshpande; Haimin Lee; Chen Li; S. Mehrotra; Nalini Venkatasubramanian; 
Technical Report, 2004

   Information Dissemination in Heterogeneous Wireless Environments
   Wireless networks (e.g., cellular, Wi-Fi) extend wireline networks in warning and notifying large number of people (both the public and first responders) in crisis situations. People with handheld devices (e.g., cell phones, PDAs) not only receive emergency alerts, but also share warnings and other related information between each other via ad hoc networks. In this work, we study fast, reliable, and efficient dissemination of application-generated data in heterogeneous wireless networks. We consider coverage (the percentage of intended recipients that receive the information), redundancy (the time it takes for people to receive the information) and energy consumption (on handheld devices) as the primary metrics. We develop efficient dissemination strategies that are not only fast and reliable, but also resilient to network congestion and recipients' mobility. We propose protocols that manage the dissemination of data with large size. We also investigate exploiting multiple radio interfaces, hybrid networks as well as mobility for faster dissemination 
  Publications:
  Fast Emergency Information Dissemination over Cellular/Wi-Fi Combined Networks
    Jinsu Wang; Bo Xing; 
Technical Report, 2006-05
  Bandwidth Aggregation for Real –Time Applications in Heterogenerous Wireless Networks
    K. Chebrolu; R. Rao; 
IEEE Transactions on Wireless Communications, 2005
  Energy Efficient Transmission Scheduling for Delay Constrained Wireless Networks
    P. Nuggehalli; V. Srinivasan; R. Rao; 
IEEE Transactions on Wireless Communications, 2005
        Scheduling on a Channel with Time-Varying Capacity
      A. Dhamdhere; R. Rao; 
      Workshop on Cross-Layer Issues in the Design of Tactical Mobile Ad Hoc Wireless Networks: Integration of Communication and Networking Functions to Support Optimal Information Management, Washington, D, 2004-06
  Improving Energy Saving in Wireless Systems by Using Dynamic Power Management
    Carla-Fabiana Chiasserini; Ramesh Rao; 
IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 2, NO. 5, 2003-09
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/index.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Customized Dissemination in the LargE
   The Information Dissemination Group, led by Prof. Sharad Mehrotra  and Prof. Nalini Venkatasubramanian , is part of ITR-ResCUE  project in Cal(IT) 2  at the University of California, Irvine . 
  This project will focus on information that is disseminated to the public at large specifically to encourage self-protective actions, such as evacuation from endangered areas, sheltering-in-place, and other actions designed to reduce exposure to natural and human-induced threats. Specifically, we will develop an understanding of the key factors in effective dissemination to the public in various disasters and design technology innovations for conveying accurate and timely information to those who are actually at risk (or likely to be), while providing reassuring information to those who are not at risk and therefore do not need to take self-protective action.
  There are three key factors that pose significant challenges (social and technological) to effective information dissemination in crises situations - variation in warning times, determining specificity of warning information to effectively communicate to different populations, and customization of the delivery process to reach the targeted populations in time over possibly failing infrastructures.   Our approach to address these challenges is a focused multidisciplinary effort that
   understands and utilizes the context in which the dissemination of information occurs to determine sources, recipients, channels of targeted messages  develop technological solutions that can deliver appropriate and accessible information to the public rapidly. 
  The ultimate objective is a set of next generation warning systems that can bring about an appropriate response, rather than an under- or over-response.
##------------------URL-------------------------##
http://www.ics.uci.edu/~mayur/
##-----------------TITLE------------------------##
Mayur Deshpande :: Home, Research
##------------------TEXT------------------------##
Mayur Deshpande





 Home 


 Research 


 Software 


 Publications 


 Industry 


 Resume 


 Flashback! 




Flash Information Dissemination


 I defended my dissertation on May 31st! 






Hi. I'm a PhD student in the CS department at UCI and this web-page is primarily
dedicated to the research that I do.

My thesis is on Peer-to-Peer (P2P) Flash dissemination where I explore how to
build systems and protocols for fast distribution of small amounts of data (less
than 25MB) in a highly scalable fashion among heterogenous hosts.
 Flashback  is an example of type
of work/research that I do.


My research work came out of an internship that I had with the
 LA Emergency Preparedness Department (EPD).
Though my work is motivated and set in context of crisis situations, the applications
are more general, especially given the growing trend of sharing rich media and the
large number of companies (and Web 2.0 startups) that are all trying to tap into this.
Now imagine if they had technology that would allow them to scale seamlessly without
actually worrying about bandwidth and server scalability.
That, in a nutshell, is the holy grail of my research.


 Sounds Interesting? 
Then, you can visit my  detailed research page  to find out
more. And if you want even more, visit my  publications 
page to get the real technical (and research) articles.




:: Background

I'm part of the ResCUE,
a $12.5 million NSF project that is investigating how Information-Technology (IT) can
be used to transform current day crisis-management.

Before starting with ResCUE, I worked on design and development of middleware for distributed
systems and how to improve their scalability. Little bit on the theoretical side, I've also
analyzed how large networks (like P2P systems) evolve under dynamic conditions.


While not involved in research, I like biking, rock-climbing and surfing. And, of course,
sampling other cultures via their cuisines in 'The OC'. If you are in OC and
love 'hole in walls', check this  blog  and a list
of 
74 places to visit. 




  Ph.D. Candidate 

Advisor: Nalini, V.
 Group: DSM 
 ICS, UCI

 Contact Information 
 mail: at uci, deshpanm

444, Computer Science Bldg,

Irvine, CA 92697-3425









HTML • CSS • 508
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/customization.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Supporting Customization Needs
   Customized Dissemination via Peer-Based Publish/Subscribe Frameworks Push-Pull Based Customized Dissemination of Dynamic Information
   Customized Dissemination via Peer-Based Publish/Subscribe Frameworks
   Our efforts in understanding the dissemination scenarios have revealed the need for customized dissemination. Our work investigates the use of a distributed publish/subscribe based infrastructure as a suitable platform using which customization needs can be captured and explored. 
  The underlying pub/sub model consists of a set of pub/sub servers (brokers) connected to each other through an overlay network. Publishers and subscribers connect to one of the brokers to send or receive publications and subscriptions. The main goal of most existing pub/sub approaches is to increase scalability of the pub/sub system through reducing each broker's load; for example, techniques have been developed to reduce the total cost of matching and routing events. A common approach is to construct a spanning tree on the pub/sub overlay network to forward subscriptions and publications. This allows avoiding diffusion of content in parts of the pub/sub network where there are no subscribers and prevent multiple deliveries of events.
  However, in the case of emergency warnings, notification dissemination time, the time between publishing a notification and delivering it to all of the interested subscribers, also plays a critical role. We use content-based pub/sub as a communication infrastructure for a customized alert dissemination system. While existing content-based pub/sub systems can scale reasonably well and disseminate notifications with reduced communication cost, timely notification has not been addressed. The primary goal of our work is in timely (and customized) dissemination of notifications to interested receivers.
  Publications:
  HiPub: High Speed Content-based Publish/Subscribe
    Hojjat Jafarpour; Sharad Mehrotra; Nalini Venkatasubramanian; Raymond Klefstad; 
Technical Report, 2006-06-15
  Customized Dissemination in the context of emergencies
    A. Ghigi; 
Thesis, 2005

   Pull Based Customized Dissemination of Dynamic Information
  	In this work, we explore customized delivery of information in a client/server context. Applications that need to disseminate dynamic information from a server to various clients can suffer from heavy communication costs. Customized information needs of clients can influence whether information must be pushed to the client or pulled from the server. Data caching at a client can help mitigate these costs, particularly when individual push-pull decisions are made for the different semantic regions in the data space. The server is responsible for notifying the client about updates in the push regions. The client needs to contact the server for queries that ask for data in the pull regions. We call the idea of partitioning the data space into push-pull regions to minimize communication cost data gerrymandering. In this study, we present solutions to technical challenges in adopting this simple but powerful idea. We give a provably optimal-cost dynamic programming algorithm for gerrymandering on a single query attribute. We propose a family of efficient heuristics for gerrymandering on multiple query attributes. We handle the dynamic case in which the workloads of queries and updates evolve over time. We validate our methods through extensive experiments on real and synthetic data sets. 
  Publications:	
  Achieving Communication Efficiency through Push-Pull Partitioning of Semantic Spaces to Disseminate Dynamic Information
    Amitabha Bagchi; Amitabh Chaudhary; Michael Goodrich; Chen Li; Michal Shmueli-Scheuer; 
Technical Report, 2006-03
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~kyungbak/
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/scenarios.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


    Understanding Dissemination Scenarios
    One of the scentific grand challenges addressed by the group is the understanding of the dissemination scenarios. We are indentifying and studying the role of factors involved in decision making to enable decisions regarding when, what and whom to warn to avert the usual problems of normalcy bias and over-response.
    This problem is addressed by studying the four following technological and sociological areas:
    Earthquake Information Dissemination ScenarioEmergent multi-organizational networks (EMONs) in CrisisDiffusion of Crisis Information though Interpersonal NetworksCitizen Communication in Disasters
    Earthquake Information Dissemination Scenario
    This scenario deals with with the emergency situations created by an earthquake. The group is investigating on real-time seismic alerts, short term alert technologies that can be used to predict the fact that an earthquake is going to happen up to 40 seconds before the actual shake reaches densitly popolated areas. These techniques are currently being studied in the State of California to implement a system able to notify the population about the impending  danger.
    On May 26, 2006 , RESCUE, assisted by the Natural Hazards Center , hosted an Earthquake Early Warning (EEW) Workshop at the UCI Campus. Key findings include the following: 
    Many accomplishments were made through the TriNet project specifically in seismological studies, including the ShakeMap technology. However, the pilot project, which was promised, was never undertaken, partly due to the lack of an IT infrastructure for enabling this. The workshop revealed that RESCUE dissemination technologies can play a significant role in enabling such a pilot project.There is a need for a federal agency to step forward and take the lead on earthquake early warning. The lead agency will be protected from liability issues under federal mandate should legislation on EEW be created. 
     These findings apply to dissemination of information to the public in multiple ways. First, there is a clear indication that earthquake early warning is possible with the technologies that can now be made available. Second, we are more aware of the organizational issues surrounding information dissemination. For instance, it will be imperative that in the event of a quick onset hazard with little warning, information must reach individual users rather than get tied up in bureaucracy and organizational hierarchy. Additionally, we recognize that there will be various phases of hazard impact and therefore customized messages will need to be developed that address protective measures that can be taken at different points of time prior to and post impact. This affirms the role of IT techniques for customization in this scenario. In addition to the various key findings, this workshop afforded an opportunity for graduate and undergraduate student researchers to learn about the various aspects of earthquake early warning systems. They were introduced to the complexity of the problem which extends beyond technological capabilities to the social aspects of policy development and liability issues. 
    Workshop:
    Earthquake Information Dissemination Workshop. May 26, 2006. UCI Campus.
    Top
    Emergent multi-organizational networks (EMONs) in Crisis
    In the wake of disasters, previous researchers have identified emergent systems among groups and organizations. Due to phenomena such as mass convergence to the impact site, the need for improvisation in a changing environment, and the presence of conditions that exceed the capabilities of the pre-existing response system. When existing organizational networks are unable to cope with an event, emergent multi-organizational networks (EMONs) develop to meet the needs of the affected community. Relatively little is known, however, regarding the structure of such networks, or the determinants of interaction with them. Using data collected from the Sept 11 th WTC attacks, this effort analyzes the multi-organizational networks that formed after the WTC attacks and develops a methodology for extracting EMONS that can be applied in practice. Such analyses apply to dissemination of information to the public since they help explain which organizations have the greatest ability to distribute information to the community at large due to their role and place in the network structure. For instance, specific non-profit or non governmental organizations can serve to link local organizations with diverse constituencies and vulnerable populations that otherwise would not be reached through more traditional channels.
    Top
     Diffusion of Crisis Information through Interpersonal Networks
    The goal of this effort is to understand the information diffusion process on hypothetical population of persons within a region. In this preliminary work, the network is loosely typical of what one might expect from telephone contacts; vertices are scaled by the expected completeness of the information they would be expected to receive from a serially transmission process (e.g., word of mouth) in which each concept has a chance of being lost during each iteration. Factors studied include the number of steps from the point of origin and the time to first contact the node. 
    Publications:
    Information Transmission Through Human Informants: Simulation
      Gabriel Lawson; Carter Butts; 
North American Association for Computational Social and Organizational Science Meeting, June 2004, Pittsburgh , PA, 2004-06
    Top
     Citizen Communications in Disasters
    Recent crisis events around the world have drawn new attention to the role information communication technology (ICT) can play in improving warning and response activities. ICTs are enabling emergency responders as well as members of the public to develop new ways in which to respond to a crisis. Members of the public (through ICT) are not only playing a more active role in seeking information but also in providing information to each other and to formal crisis response and management teams. Drawing on disaster social science research, we consider the role of public participation in disaster and how ICT is extending this participation, particularly in the form of citizen-to-citizen communications. We reviewed information dissemination and consumption activities in cases of recent disasters, showing how low- and high-tech citizen communications vary in part depending on the physical, temporal, and spatial characteristics of disaster. 
    Top
##------------------URL-------------------------##
http://www.ics.uci.edu/~projects/dissemination/research.htm
##-----------------TITLE------------------------##
Rescue Dissemination Project
##------------------TEXT------------------------##
HomePeopleResearch
            IntroductionDissemination ScenariosCustomization NeedsDelivery Infrastructure
        Results and Artifacts PublicationsWorkshopsClassesRelated Links


  Research Focus 
  To lend focus to the project, we address our research in the context of the following two case studies that represent two extremes along the time spectrum: 
  
      Real-time seismic alerts: Very short term alert technologies such as those currently being studied in the State of California.  Timelines here range from minutes/seconds before impact to 1 hour after impact; our focus consumer will be school and parent populations in the State of California. 
    
      Longer-term warnings for hurricanes:  Techniques to reach highly diverse populations effectively when ample warning time is available.  The scope of this effort ranges from 3 days before the disaster to 3 days after. 
    
  For these scenarios, the scientific grand challenges that will be addressed in our efforts include: 
  
      Understand dissemination scenarios: by identifying and studying the role of factors involved  in decision making to enable decisions regarding when, what and whom to warn to avert the usual problems of normalcy bias and over-response. 
    
      Supporting customization needs: through flexible, timely, and scalable technologies including peer-based publish/subscribe architectures. 
    
      Scalable, robust delivery infrastructure: to build highly scalable, reliable and timely dissemination services from unstable and unreliable resources using a peer-based architecture for both wired and wireless dissemination. 

    
   
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/compose/compose_design.html
##-----------------TITLE------------------------##
Introduction
##------------------TEXT------------------------##
 Introduction | TLAM | 
    Resource 
    Management | Reflective Communication | 
    Architecture
     
    
    
    
    Introduction
     
    CompOSE|Q is a customizable and 
    safe distributed systems middleware infrastructure, built to provide cost 
    effective QoS-based distributed resource management. It allows concurrent 
    execution of multiple resource management policies in a distributed system 
    in a safe and correct manner. 
    This allows safe integration of 
    resource management mechanisms for services such mobility, load balancing, 
    fault tolerance and end-to-end QoS management. It is based on a two level 
    meta-architectural model that facilitates specifying and reasoning about the 
    composability of multiple resource management services in Open distributed 
    systems. The CompOSE|Q reflective framework uses Actors, a distributed 
    computing paradigm that uses a model of concurrent active objects 
    and has a built-in notion of encapsulation and 
    interaction among the concurrent components of an Open Distributed System.
    In the actor paradigm, the universe 
    contains computational agents called actors, distributed over a 
    network. Traditional passive objects encapsulate state and a set of 
    procedures that manipulate the state; actors extend this by encapsulating a 
    thread of control as well. Each actor potentially executes in parallel with 
    other actors and may communicate with other actors via asynchronous message 
    passing. Using Actors, we define a meta-architecture framework that permits 
    customization of resource management mechanisms such as placement, 
    scheduling and synchronization.
    The CompOSE|Q architecture 
    contains:
    The basic composable core 
      services - Remote Creation, Distributed Snapshot and Directory Services 
      with interaction constraints that ensure their concurrent execution with 
      each other and other meta level services.
    
    Services built using core 
      services - Actor migration, replication of services and data, actor 
      scheduling, distributed garbage collection, name services etc. Each of 
      these services has its own interface definitions and interaction 
      constraints.
    
    QoS enforcement mechanisms.
    | back to top 
    | 
    
    
    
    The Two Level Meta Architectural Model (TLAM)
     
    Ensuring 
    correctness in a purely reflective model involves reasoning about system 
    level interactions by characterizing the semantics of shared distributed 
    resources and understanding what correctness of the overall system means.  
    The TLAM (Two Level Actor Machine) model was presented as a first 
    step towards providing a formal semantics for specifying and reasoning about 
    properties of and interactions between components of ODSs. In the TLAM, 
    a system is composed of two kinds of actors, base actors and
    meta actors, distributed over a network of processing nodes. 
    Base level actors carry out application level computation, while meta-actors 
    are part of the runtime system, which manages system resources and controls 
    the runtime behavior of the base level.  Meta-actors communicate with each 
    other via message passing as do base level actors, but they may also examine 
    and modify the state of the base actors located on the same node.  
    The TLAM 
    uses reification (base object state as data at the meta object level) and 
    reflection (modification of base object state by meta objects) with support 
    for implicit invocation of meta objects in response to changes of base level 
    state. It provides for full actor-style interaction of meta level objects.
    In the TLAM model, meta-level 
    controllers define protocols and mechanisms that customize various aspects 
    of distributed systems management. In practice, multiple system and 
    application activities occur concurrently in a distributed system, e.g. 
    scheduling, protocol processing, stream synchronization etc., and can 
    therefore interfere with each other. 
    
     
        
    To ensure non-interference and manage the 
        complexity of reasoning about components of ODSs in general, our 
        strategy is to identify key system services where non-trivial 
        interactions between the application and system occur, i.e. base-meta 
        interactions.  We refer to these key services as core services.  
        Core services are used in specifying and implementing more complex 
        activities within the framework as purely meta-level interactions.  
        The development of suitable non-interference requirements allows us to 
        reason about the composition of multiple system services; these services 
        have constraints that must be obeyed to maintain composability (i.e. 
        safe concurrent execution). We use commonly observed patterns in 
        distributed systems to identify three meta level core activities (See 
        Figure): Remote Creation (for migration, replication & load balancing), 
        Distributed Snapshot (for check-pointing, distributed garbage 
        collection, etc.) and Directory Services ( for access control, resource 
        discovery and group communication).
    
    | back to top | 
    
    
    
    The Resource Management Services
     
    Implementation of 
    sophisticated policies and mechanisms for QoS management is made possible by 
    providing support for common services in CompOSE|Q. For instance, object 
    scheduling mechanisms use the basic remote creation core service to assign 
    newly created objects/actors on nodes with adequate resources.  Using 
    generalized state capture facilities, we are developing a checkpointing 
    service for capturing causal orders of executions in the system that can be 
    used for monitoring and debugging distributed computations. 
    A state broadcast mechanism is used to implement a 
    clock synchronization service, which informs nodes about a global time value 
    that can be used for time related services. 
     
    
      
      Remote creation : Remote creation is the process 
      by which actor creation occurs on a specified node other than the node 
      from which creation is being initiated.  Remote creation is a basic 
      facility that can be used in other resource management activities like 
      load-balancing, replication and migration.  By encapsulating the 
      interactions between the application and system level actors within the 
      remote creation service, we can state requirements that ensure safe and 
      correct composition of other resource management activities with remote 
      creation. In a real TLAM based implementation, the control activities of 
      remote creation are managed by remote creation meta-actors (RCM) residing 
      on every node in the system. A remote creation request has four parameters 
      - a description of the fragment desc to be migrated, the remote 
      node (N), any initial state the desc has to be set to and 
      the initiating-actor 'b'. 
      The initiator actor 'b' 
      is maintained by the RCM to ensure composability with other meta-level 
      services[V98]. If the requester needs to know that the request has been 
      completed, or the names of some of the newly created actors, then this can 
      be achieved by specifying appropriate messages as part of the requested 
      fragment, and observing their delivery.
    
    
      
      
      Distributed Snapshot Services: 
      Global properties like the number of application-actors, the current 
      reachability graph of distributed actors, number of messages being 
      processed and task queue sizes help in making runtime decisions like load 
      balancing, migration and garbage collection, leading to efficient runtime 
      management of a distributed system.  To fully represent the global state 
      of the distributed system, we need a mechanism for recording the state of 
      all nodes including the portion of node state being communicated in the 
      network channels.  As state information is accessible explicitly only in 
      nodes, a snapshot mechanism must ensure that node state information in 
      channels are 
      recorded at some node in the system 
      (possibly the target node itself). The snapshot mechanisms we have devised 
      are such that application-level computation and system level services 
      proceed concurrently with the snapshot, thereby preserving application and 
      service semantics. In order to initiate snapshot recording on every node 
      and force messages in channels to reach a node, we have defined two wave 
      protocols for message propagation that (a) visit all nodes exactly once, 
      capturing node-resident information and (b) traverse all links in the 
      system exactly once forcing messages on channels to reach nodes (where 
      their state can be recorded). 
    
    
      
      Migration:  
      By using remote creation as the 
      basis for migration, we have ensured composability of migration with other 
      meta-level services such as reachability snapshots and distributed 
      check-pointing. Migration is the process by which actors move from one 
      node to another.  The migration service allows for relocation of actors 
      for easier access, availability and load balancing.  A migration request 
      is given by a pair (α,n), 
      where α is the actor to be migrated, and n is the destination node.  This 
      is interpreted as a request to move the computation carried out by α to 
      the node n. In order to state explicitly invariants maintained by the 
      system during the migration process, we classify the migration process 
      into 3 phases with respect to the actor being migrated and the node to 
      which it is being migrated. The first phase is the initiation phase and 
      specifies the state of the system when the migration request received can 
      be processed. It determines the computation to be migrated by suspending 
      the computation of the actor and noting its current description. In the 
      second configuration the actual actor migration is performed using the RC 
      service. The last configuration finalizes the migration process and 
      establishes transparent access to the migrated actor.
    
    
      QoS 
      Brokerage Service: 
      This work illustrates the use of TLAM services in the design of mechanisms 
      and policies needed to enforce QoS constraints in the actor-based runtime 
      environment. We extend the basic meta-architectural framework to provide 
      QoS based services to applications.  The base level component of the meta 
      architecture implements the functionality of the distributed session and 
      deals with (a) data, which includes objects of varying media, types, e.g., 
      video and audio files and (b) requests to access this data via sessions. 
      The meta-level component deals with the coordination of multiple requests 
      and sharing of existing resources among multiple requests.  To provide 
      coordination at the highest level and perform admission control for new 
      incoming sessions, a meta-level entity called the QoS broker is 
      being developed. The organization of the meta-level services in CompOSE|Q 
      is illustrated in the Figure.
    
    
    The two main functions of 
    the QoS broker are (a) data management and (b) request management. The 
    data management component decides the placement of data in the 
    distributed system, i.e. it decides when and where to create additional 
    replicas of data. It also determines when additional replicas of data actors 
    are no longer needed and can be garbage collected/dereplicated.  We 
    implement adaptive admission control mechanisms in the 
    request-scheduling module that assigns requests to servers and ensures 
    cost-effective utilization of resources. The message-scheduling 
    module ensures QoS constraint satisfaction of requests that have already 
    been initiated. The data and request management functions in turn require 
    auxiliary services such as clock synchronization, replication, dereplication 
    and migration.  So far, we have focused on the following services: 
    
    Replication: to 
    replicate data and request actors using adaptive and predictive techniques 
    for selecting where, when and how fast replication should proceed.
    Dereplication: to dereplicate/garbage-collect 
    data or request actors and optimize utilization of distributed storage based 
    on current system load and expected future demands for the object.
    Migration: 
    to migrate data or requests for load balancing, availability and locality.  
    The interaction of migration with timing based QoS constraints is an 
    interesting issue since it can introduce playback jitter in MM applications 
    caused by explicit teardown and re-establishment of network connections.
    
    The auxiliary services described above are 
    developed using one or more of the core services - remote creation, 
    distributed snapshot and the directory service. 
    In order to ensure non-interference 
    among the auxiliary services that are used to provide QoS, the specific 
    mechanisms implemented for placement and scheduling must be designed not to 
    conflict with each other. Currently, placement and dereplication operate on 
    the basis of a (conservative) snapshot of the current resource allocation 
    and use.  The placement and dereplication services do not consider the exact 
    times at which requests arrive; in contrast, an adaptive request scheduling 
    process makes decisions based on the exact arrival times of requests. 
    However, without appropriate constraints on the usage of these services, 
    inconsistencies can arise due to their interaction.  The broker coordinates 
    the service interaction by constraining the behavior of the auxiliary 
    placement and scheduling services.  For instance, the dereplication service 
    does not dereplicate a replica that the request scheduling process is making 
    an assignment to. Furthermore a replica assigned to an active request should 
    not be physically dereplicated.  The broker also ensures that the 
    dereplication and placement metalevel services do not cancel one another 
    out.  While the interaction between dereplication and placement is not a 
    functional correctness issue, it has to do with cost-effective performance 
    of the overall system. 
    | back to top | 
    
    
    
    
    The Reflective Communication Service Architecture
     
    In order 
    to provide correct composition of communication services to QoS-based 
    applications in a transparent and scalable fashion, while ensuring 
    correctness of basic middleware services in a meta level architecture for 
    distributed resource management (e.g. garbage collection, remote 
    creation), the TLAM model is extended with a composable reflective 
    communication framework (CRCF), which customizes the base level 
    communication services among a group of objects as follows . Each base level 
    actor has a meta level actor, called messenger, which serves as the 
    customized and transparent mail queue for that base level actor.  There is 
    one communication manager in every node of the distributed system, 
    which implements and controls the correct composition of communication 
    services specified by the messenger. The messenger has four message queues: 
    the up and down queues are used to communicate with its base level actor, 
    serving as the actor’s send buffer and customized mail queue respectively, 
    while the in and out queues are used for interaction with the communication 
    manager, requesting communication services that satisfy QoS constraints. The 
    up and down queues hold raw messages from and to base level actors, while 
    the out and in queues hold processed messages, which are messages with the 
    required protocols enforced. Furthermore, the communication manager has a 
    set of communication protocol actors, each of them implementing a particular 
    communication service provided by the framework (e.g. reliable 
    protocol, in-order protocol). 
    Communication services can be added 
    (plugged in) or removed (plugged out) dynamically without side 
    effects. The above scheme allows us to abstract a core set of communication 
    services and share it between the different messengers on a node, 
    simplifying the synchronization and composition process, while encouraging 
    separation of concerns in the process of message transmission and reception. 
    In order to maintain accurate semantics and provide an efficient 
    implementation of the architecture, the communication manager implements a 
    set of meta level representatives, called pool-actors. At any 
    instance, the pool-actor handles the communication services requested by a 
    messenger for an individual message.  In other words, every message 
    requiring communication services is assigned a pool actor.  The pool actor 
    assures the correct order of composition of required services and provides a 
    coordination mechanism between the messenger that requires the services and 
    the protocols that provide it. This concept of reusable pool-actors is an 
    efficient way to handle the service request of each messenger without having 
    to pay the bottleneck associated with the centralization of the services in 
    the node communication manager.  In summary, the notion of pool actors 
    provides separation of concerns and manageable concurrency in the 
    communication process.
    | back to top | 
    
    
    
    CompOSE|Q Runtime Architecture
     
    
    The current middleware environment 
    has been implemented using Java, due to its many favorable features such as 
    its portability across a wide variety of platforms, wide user base and 
    support for flexibility through introspection. In our approach, we suitably 
    'constrain' the Java programming language to achieve Actor semantics. In 
    order to assist the three core services in achieving their task easily and 
    efficiently, the run-time system consists of:
    
      
      A 
      NodeManager that manages and coordinates various components on a node.
      
      A 
      NodeInfoManager that manages information needed by the local actors and 
      interfaces with the directory service.
      
      A 
      communication sub-system that handles messaging between actors.
    
     
     
    
      
      The NodeManager: 
      Each node running CompOSE|Q has one NodeManager to manage actors on that 
      node, as well as to start-up and shutdown various other modules of the 
      run-time system.  When a new actor is created it registers itself with the NodeManager and is identified by an Actor ID (aid).  The NodeManager 
      enters the new actor into a local-table which helps keep track of the 
      actor for activities such as node checkpointing and node shutdown and 
      notifies the MessageQmanager entity, which allocates a message queue that 
      serves as the “in” Queue for the actor. The MessageQManager is responsible 
      for managing mail queues for all actors on a node. To start CompOSE|Q on a 
      node, the NodeManager has to be started first.  It in turn, initiates the 
      various other modules and communication components.
    
    
      
      The NodeInfoManager: 
      The NodeInfoManager is 
      a repository of information as well as an interface to the main directory 
      service in the distributed architecture. Currently, the NodeInfoManager 
      implements basic functionality to: 1) Register an actor with the directory 
      service so that it is accessible to all other nodes 2) Search for a 
      particular actor to find out which node that actor is currently on and 3) 
      Search for an actor object given the class name (a rudimentary naming 
      service). The NodeInfoManager has a 
      local-table, which contains references to all local actors (updated and 
      maintained by the NodeManager) and a remote-actor cache that contains 
      information about recently accessed remote actors.
    
    
      The 
      Communication Subsystem: 
      The communication transport layer 
      and the CRCF module(above the transport layer), together compose the node 
      communication subsystem. The message transport layer provides a framework 
      for sending the outgoing messages to the appropriate node (routing) and 
      resolving incoming messages to their appropriate actor queues 
      (message-resolution). The CRCF module is responsible for the 
      implementation of communication services (and their composition). 
      Separation of these layers allows for independent customization of 
      protocol implementations and the messaging runtime. This facilitates 
      correct composition of protocols without interfering with the runtime 
      communication semantics. The 
      communication transport layer consists of the following components: a 
      Router, a Postman and a RemoteMessageReceiver.  The 
      transport layer maintains two message queues on a node for incoming and 
      outgoing messages (on that node) called SendPot and ReceivePot 
      respectively. The Router consults the NodeInfoManager to 
      obtain the current location (node) of the target actor. If the location of 
      the target actor is local (i.e. on the same node), the Router puts 
      the message directly into the node's ReceivePot. Otherwise, it 
      sends the message to the remote node. The RemoteMessageReceiver (RMR) 
      on the target node extracts the incoming message and puts it into the 
      node's ReceivePot.  The Postman then picks up the message and adds 
      it to the target actor's “in” Queue. 
      The communication manager is 
      instantiated in each node during system startup. 
      When an actor is created and protocol composition services are not desired 
      or required 
      ts messenger is not created and 
      the actor sends and receives raw messages using the transport layer. 
      When flexible communication is required or desired, an independent 
      messenger is created for every base level actor and the entire CRCF 
      functionality is invoked. The overhead of the CRCF module is minimized in 
      case of communications with no protocols attached. In this scenario, we 
      tunnel raw messages through the actor's messenger directly to the 
      transport layer.
    
    | back to top |  
##------------------URL-------------------------##
http://xtune.ics.uci.edu/xtune-pub.htm
##-----------------TITLE------------------------##
My Home Page
##------------------TEXT------------------------##
xTune: A Formal Methodology for Cross-layer Tuning 

of Mobile Real-time Embedded Systems

 

[Home]
[People] [News] [Publications] [Sponsors] [Links]








[WEBS’08] M. Kim, D. Massaguer, N. Dutt, S. Mehrotra, S. Ren, M-O. Stehr, C. Talcott, N. Venkatasubramanian, “A Semantic Framework for
Reconfiguration of Instrumented Cyber Physical Spaces”, Second Workshop on
Event-based Semantics (WEBS’08) in conjunction with IEEE Real-Time and Embedded
Technology and Applications Symposium (RTAS’08) in part of CPSWEEK, Apr.
2008, St. Louis, MO, USA. [pdf] [bibtex] 

 

[DATE’08] M. Kim, M-O. Stehr, C. Talcott, N. Dutt, N. Venkatasubramanian, “Constraint Refinement for Online
Verifiable Cross-Layer System Adaptation", IEEE/ACM Design Automation and
Test in Europe (DATE ‘08), Mar. 2008, Munich, Germany. [pdf] [bibtex]

 

[SIGBED’08, RTSS-forum’07] M. Kim, N. Dutt, N. Venkatasubramanian, Carolyn Talcott,
“xTune: Online Verifiable Cross-Layer Adaptation for
Distributed Real-Time Embedded Systems", IEEE International Real-Time
Systems Symposium (RTSS’07) Ph.D. Forum, Dec. 2007, Tucson, AZ, USA. [pdf] [bibtex]
also published as SIGBED Review, Volume 5, Number 1, January 2008 
Special Issue on the RTSS Forum on Deeply Embedded Real-Time Computing
Best Overall Idea Award & Best System
Architecture Award

 

[FORMATS’07] M. Kim, M-O. Stehr, C. Talcott, N. Dutt, N. Venkatasubramanian, “Combining Formal Verification with
Observed System Execution Behavior to Tune System Parameters",
International Conference on Formal Modelling and
Analysis of Timed Systems (FORMATS’07) in part of ESWEEK, Oct. 2007,
Salzburg, Austria., LNCS 4763 (pp. 257 - 273) [pdf] [bibtex]

 

[FMOOD’07] M. Kim, M-O. Stehr, C. Talcott, N. Dutt, N. Venkatasubramanian, “A Probabilistic Formal Approach to
Cross-layer Optimization in Distributed Embedded Systems", IFIP Conference
on Formal Methods for Open Object-Based Distributed Systems (FMOODS’07),
Jun. 2007, Paphos, Cyprus., LNCS 4468 (pp. 285 -
300) [pdf] [bibtex] 

 

[RTAS-WiP’06] 
M.
Kim, N. Dutt, N. Venkatasubramanian,
“Policy Construction and Validation for Energy Minimization in Cross Layered
Systems: A Formal Method Approach”, IEEE Real-Time and Embedded Technology and
Applications Symposium (RTAS’06) Work-in-Progress Session Apr. 2006, San
Jose, CA, USA. (For citation, please refer [FORMATS’07])

 







Last modified: Jan/15/2009
##------------------URL-------------------------##
http://xtune.ics.uci.edu/news.htm
##-----------------TITLE------------------------##
My Home Page
##------------------TEXT------------------------##
xTune: A Formal Methodology for Cross-layer Tuning 

of Mobile Real-time Embedded Systems

 

[Home]
[People] [News] [Publications] [Sponsors] [Links]







 

 

CECS eNews 

http://www.cecs.uci.edu/ene_2008.htm

 

ICS Noteworthy Achievements

http://www.ics.uci.edu/community/news/notes/notes_2007.php

 

 







Last modified: Jan/15/2009
##------------------URL-------------------------##
http://xtune.ics.uci.edu/people.htm
##-----------------TITLE------------------------##
My Home Page
##------------------TEXT------------------------##
xTune: A Formal Methodology for Cross-layer Tuning 

of Mobile Real-time Embedded Systems

 

[Home]
[People] [News] [Publications] [Sponsors] [Links]








   
  Minyoung
  Kim
  
 


 




  
  Graduate Student
  UC Irvine
  
  
 




 




  
  Dr. Mark-Oliver Stehr
  
  
 




 




  
  Computer
  Scientist
  SRI International
  
  
 




 




  
  Dr.
  Carolyn Talcott
  
  
 




 




  
  Program Manager
  SRI International
  
  
 




 




  
  Prof. Nikil Dutt
  
  
 




 




  
  Chancellor’s
  Professor
  UC Irvine
  
  
 




 




  
  Prof. Nalini Venkatasubramanian
  
  
 




 




  
  Associate
  Professor
  UC Irvine
  
  
 










Last modified: Jan/15/2009
##------------------URL-------------------------##
http://xtune.ics.uci.edu/sponsor.htm
##-----------------TITLE------------------------##
My Home Page
##------------------TEXT------------------------##
xTune: A Formal Methodology for Cross-layer Tuning 

of Mobile Real-time Embedded Systems

 

[Home]
[People] [News] [Publications] [Sponsors] [Links]







 

National
Science Foundation - CNS-0615436 and CNS-0615438

 

 







Last modified: Jan/15/2009
##------------------URL-------------------------##
http://xtune.ics.uci.edu/link.htm
##-----------------TITLE------------------------##
My Home Page
##------------------TEXT------------------------##
xTune: A Formal Methodology for Cross-layer Tuning 

of Mobile Real-time Embedded Systems

 

[Home]
[People] [News] [Publications] [Sponsors] [Links]






 
 



  
  Maude: a
  high-performance reflective language and system
  
  
 




 


  
  Forge: a framework for
  optimization of distributed embedded systems software
   
  SATWARE: a middleware
  for sentient spaces 
  
  
 








Last modified: Jan/15/2009
##------------------URL-------------------------##
http://esl.ics.uci.edu/publications.html
##-----------------TITLE------------------------##
ESL
##------------------TEXT------------------------##
Experiential Systems Lab









HomePeopleResearchPublicationsDemo










PublicationsTechnical Reports

Selected Publications:


"Towards Environment to Environment (E2E) communication Systems",
Vivek Singh, Hamed Pirsiavash, Ish Rishabh and Ramesh Jain. In Semantic
Ambient Media Workshop held in conjunction with ACM Multimedia conference.
Vancouver,  2008.

"Multimodal Observation Systems", Mukesh Saini, Vivek Singh, Ramesh
Jain and Mohan Kankanhalli. In ACM Multimedia Conference. Vancouver, 2008.

"Environment to environment (E2E) communication systems for
collaborative work)", Ish Rishabh, Vivek Singh, Hamed Pirsiavash and
Ramesh Jain. In (electronic proceedings), ACM Conference on Computer
Supported Cooperative Work, 2008.

"Shared Visualization Spaces for Environment to Environment
Communication", Hamed Pirsiavash, Vivek Singh, Aditi Majumder and Ramesh
Jain. In The Future of Interactive Media: Workshop on Media Arts, Science,
and Technology (MAST), Santa Barbara, 2009.

"User Availability Detection in E2E Systems", Vivek Singh, Ish Rishabh
and Ramesh Jain. In The Future of Interactive Media: Workshop on Media
Arts, Science, and Technology (MAST), Santa Barbara, 2009.

"Semantics In Digital Photos: A Contenxtual Analysis." Pinaki Sinha, Ramesh Jain. In International Conference
on Semantic Computing (ICSC), San Jose 2008.

"Classification and annotation of digital photos using optical context data." Pinaki Sinha, Ramesh Jain. In International Conference
in Image and Video Retrieval (CIVR), Niagara Falls 2008.

		


Technical Reports:


"Composing Events." Setareh Rafatirad, Amarnath Gupta, Ramesh Jain. Technical Report ESL.UCI.EDU-TR 2010/5/25.





Current  Projects


E2E

Environment To Environment Connectivity



EMME

Experiential Media Management Environment 






















Copyright ESL Lab, ICS, UCI, 2009.
##------------------URL-------------------------##
http://esl.ics.uci.edu/index.html
##-----------------TITLE------------------------##
ESL
##------------------TEXT------------------------##
Experiential Systems Lab








HomePeopleResearchPublicationsDemo









About ESL


		  
		The Experiential Systems Lab (ESL) at UC Irvine is part of the Department of Computer Science  within the Donald Bren School of Information and Computer Sciences.
		
		 
		After primarily dealing first with data and computing and then with information and communications, computing is now entering its third major phase of evolution dealing with insights and experiences. In this phase computing is coming closer to basic needs of humans. Experiential computing is computing dealing with experiences. Traditionally, computing works with data and uses operations and abstractions closer to data. Experiential computing must use abstractions and operations to go from data all the way to experiences that are closer to normal humans. Researchers in ESL are developing approaches towards bridging the semantic gap between computers and humans to realize experiential computing.
		










Current  Projects


E2E

Environment To Environment Connectivity



EMME

Experiential Media Management Environment



















Copyright ESL Lab, ICS, UCI, 2009.
##------------------URL-------------------------##
http://esl.ics.uci.edu/demo.html
##-----------------TITLE------------------------##
ESL
##------------------TEXT------------------------##
Experiential Systems Lab








HomePeopleResearchPublicationsDemo









E2E Demos

	  Video 1 
	This video shows how the doctor's environment looks liks as he is connecting to the Remote Health Center.
 Especially watch out to see how the 2 video feeds change automatically change when the nurse and patient move from
 consulation room to the examination room and vice-versa. Also notice that display in monitor changes to show the
 patient's upper or lower body, depending on nurse's actions. Lastly notice the fusion of physical marker
 annotation on projected X-ray image.
 
 
   Video 2 
 This video shows what is happening in the Remote Health center as they interact with the doctor and move between  two environments.


 EMME Demo 

  This is the link to our personal media management system.  You need access rights to enter the system.
Please drop a line to PSINHA    AT ICS DOT UCI      DOT EDU to get access.


 ESL Photo DataSet 
  Tagged Image Dataset to run image Retrieval Experimets.
Please cite the proper papers if you are using the data in your experiments.








Current  Projects


E2E

Environment To Environment Connectivity



EMME

Experiential Media Management Environment


























Copyright ESL Lab, ICS, UCI, 2009.
##------------------URL-------------------------##
http://esl.ics.uci.edu/people.html
##-----------------TITLE------------------------##
ESL
##------------------TEXT------------------------##
Experiential Systems Lab








HomePeopleResearchPublicationsDemo









		Faculty

		   
		 Prof. Ramesh Jain 
		Prof. Jain's interests combine multimedia information systems, visual computing, and intelligent systems, and include multimedia search and experiential computing for live as well as archived data.
		
		
		Students
		Ph.D. Students

		   
		 Mingyan Gao 
		

		   
		 YeSun Joung 
		

		   
		 Hamed Pirsiavash 
		

		   
		 Setareh Rafatirad 
		

		   
		 Ish Rishabh
		

		   
		 Arjun Satish
		

		   
		 Vivek  Singh
		

		   
		 Pinaki Sinha 
		

		Alumni
		Ph.D. Alumni
			Bo Gong Ph.D. 2008Oracle Corporation
		

		Postdoctoral Alumni 
			Dr. Bohyung HanDr. Ansgar ScherpDr Utz WestermannDr. Wei Qi Yan






Current  Projects


E2E

Environment To Environment Connectivity



EMME

Experiential Media Management Environment 


























Copyright ESL Lab, ICS, UCI, 2009.
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/dyn/release/faq.html
##-----------------TITLE------------------------##
FORGE/Dynamo: FAQ
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Download Demo
                    
            
            
                FAQ
                Under Construction
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/dyn/release/index.html
##-----------------TITLE------------------------##
FORGE/Dynamo: Software Release Page
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Download Demo
                    
            
            
                Overview
                
                    It has been pointed out by several researchers that coordinated energy optimization across
                    various levels of system functionality and implementation (architecture, OS, network,
                    middleware & application) can lead to better performance and greater energy savings
                    than the case when these are individually optimized for power. The challenge is how these
                    optimizations can be coordinated across layers. What is the right architectural
                    framework that allows such optimizations/adaptations to occur simultaneously and even
                    dynamically? To answer these questions, we have proposed a proxy-based middleware solution
                    to accommodate optimizations across diverse clients with limited computation and battery power.
                    We try to improve the energy optimizations possible at each system level by exploiting
                    information available at other levels. The goal of our work is to exploit a distributed
                    power-aware middleware framework to coordinate low-level architectural
                    optimizations (CPU, memory, and register), OS power-saving mechanisms (Dynamic Voltage
                    Scaling) and adaptive middleware techniques (admission control, transcoding, network
                    traffic regulation, mobility etc.) for improving performance and energy gains for portable
                    devices. We also identify interaction parameters between the different computational levels
                    that can facilitate effective optimizations. Recent approaches towards power management suggest
                    such  open and flexible architecture for mobile devices that allows higher layers to make
                    informed adaptations at lower layers and vice-versa.
                
                    
                 
                    In practice, deployment of such a unified power management framework for mobile devices would
                    require a set of APIs (programming interfaces) to be implemented at the various computational
                    layers; this API should facilitate effective communication between the various levels. Such
                    a capability can be effectively exploited to drive various cross layer adaptations. We have
                    implemented such a framework as a part of the FORGE
                    project. The framework is designed to study and evaluate power vs. performance trade-offs for
                    various cross-layer adaptations and identify various "parameters" that can be dynamically tuned
                    to provide an optimized configuration for different applications.
                 

                 Dynamo Middleware Framework
                 
                    The Dynamo distributed middleware framework is used in the above cross-layer adaptation framework
                    to coordinate low-level architectural optimizations, OS power saving mechanisms (Dynamic Voltage
                    Scaling) and Application requirements for improved performance and higher energy gains on
                    low-power mobile devices. Additionally, Dynamo employs adaptive middleware techniques (e.g.
                    admission control,proxy-based transcoding, intelligent network traffic regulation etc.) to
                    aid the power management at the portable device. The middleware effectively exploits local
                    information (e.g. residual  battery)
                    to perform adaptations at the proxy and utilizes global system state information (e.g. congestion
                    levels, mobility patterns etc.) available at the proxy to drive local adaptations.

                    Dynamo v.0.1 is implemented for the Linux operating system.
                    It has the following features:
                    Libraries for dynamically querying system state for mobile devices.Library for querying/setting back-light levels for low-power devices.Communication Library for communicating with network machines.Well defined interface definitions for cross-layer interactions with
                            applications, the power-aware OS and the proxy servers.
                

                Power-Aware Operating System
                 
                    The power aware operating system implements the Dynamic Frequency Scaling libraries over
                    the Linux kernel. The Linux kernel distribution is modified to keep track of application
                    execution times, deadlines and periods. This is achieved by adding new system calls into the
                    Linux kernel. The applications linked to the power aware kernel using the API are executed
                    as POSIX threads. The power aware API library also defines interfaces for the Dynamo middleware
                    to communicate with it.
                 
                 
                      The block diagram below shows the various aspects of the cross layer framework.
##------------------URL-------------------------##
http://dynamo.ics.uci.edu/
##-----------------TITLE------------------------##
FORGE/Dynamo: Software Release Page
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Download Demo
                    
            
            
                Overview
                
                    It has been pointed out by several researchers that coordinated energy optimization across
                    various levels of system functionality and implementation (architecture, OS, network,
                    middleware & application) can lead to better performance and greater energy savings
                    than the case when these are individually optimized for power. The challenge is how these
                    optimizations can be coordinated across layers. What is the right architectural
                    framework that allows such optimizations/adaptations to occur simultaneously and even
                    dynamically? To answer these questions, we have proposed a proxy-based middleware solution
                    to accommodate optimizations across diverse clients with limited computation and battery power.
                    We try to improve the energy optimizations possible at each system level by exploiting
                    information available at other levels. The goal of our work is to exploit a distributed
                    power-aware middleware framework to coordinate low-level architectural
                    optimizations (CPU, memory, and register), OS power-saving mechanisms (Dynamic Voltage
                    Scaling) and adaptive middleware techniques (admission control, transcoding, network
                    traffic regulation, mobility etc.) for improving performance and energy gains for portable
                    devices. We also identify interaction parameters between the different computational levels
                    that can facilitate effective optimizations. Recent approaches towards power management suggest
                    such  open and flexible architecture for mobile devices that allows higher layers to make
                    informed adaptations at lower layers and vice-versa.
                
                    
                 
                    In practice, deployment of such a unified power management framework for mobile devices would
                    require a set of APIs (programming interfaces) to be implemented at the various computational
                    layers; this API should facilitate effective communication between the various levels. Such
                    a capability can be effectively exploited to drive various cross layer adaptations. We have
                    implemented such a framework as a part of the FORGE
                    project. The framework is designed to study and evaluate power vs. performance trade-offs for
                    various cross-layer adaptations and identify various "parameters" that can be dynamically tuned
                    to provide an optimized configuration for different applications.
                 

                 Dynamo Middleware Framework
                 
                    The Dynamo distributed middleware framework is used in the above cross-layer adaptation framework
                    to coordinate low-level architectural optimizations, OS power saving mechanisms (Dynamic Voltage
                    Scaling) and Application requirements for improved performance and higher energy gains on
                    low-power mobile devices. Additionally, Dynamo employs adaptive middleware techniques (e.g.
                    admission control,proxy-based transcoding, intelligent network traffic regulation etc.) to
                    aid the power management at the portable device. The middleware effectively exploits local
                    information (e.g. residual  battery)
                    to perform adaptations at the proxy and utilizes global system state information (e.g. congestion
                    levels, mobility patterns etc.) available at the proxy to drive local adaptations.

                    Dynamo v.0.1 is implemented for the Linux operating system.
                    It has the following features:
                    Libraries for dynamically querying system state for mobile devices.Library for querying/setting back-light levels for low-power devices.Communication Library for communicating with network machines.Well defined interface definitions for cross-layer interactions with
                            applications, the power-aware OS and the proxy servers.
                

                Power-Aware Operating System
                 
                    The power aware operating system implements the Dynamic Frequency Scaling libraries over
                    the Linux kernel. The Linux kernel distribution is modified to keep track of application
                    execution times, deadlines and periods. This is achieved by adding new system calls into the
                    Linux kernel. The applications linked to the power aware kernel using the API are executed
                    as POSIX threads. The power aware API library also defines interfaces for the Dynamo middleware
                    to communicate with it.
                 
                 
                      The block diagram below shows the various aspects of the cross layer framework.
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/dyn/release/people.html
##-----------------TITLE------------------------##
FORGE/Dynamo: People
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Download Demo
                    
            
            
                Students
                
                Shivajit Mohapatra, University of California, Irvine
                Cristiano Pereira, University of California, San Deigo
                Michael Philpott, University of California, Irvine
                Radu Cornea, University of California, Irvine
                
                
                Faculty
                
                Nikil Dutt, University of California, Irvine
                Rajesh Gupta, University of California, San Diego
                Alex Nicolau, University of California, Irvine
                Nalini Venkatasubramanian, University of California, Irvine
                
                
                Acknowledgements
                
                Hyunok Oh, University of California, Irvine
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/dyn/release/demo.html
##-----------------TITLE------------------------##
FORGE/Dynamo: Demo Page
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Demo Download
                    
            
            
                Overview
                
                    In this demonstration, we use our framework to optimize a video streaming application running on 
                    a Compaq iPAQ. The system architecture assumed is similar to the one shown in the picture below. To
                    simplify matters, we assume that the proxy is also the server streaming the video. The 
                    Dynamo middleware framework executes on both the proxy and the mobile device(iPAQ). The iPAQ runs
                    power-aware operating system and which is capable of performing voltage/frequency scaling 
                    operations. The proxy (Linux desktop) has a streaming server that also doubles as a transcoder 
                    that can dynamically change the quality of the video stream. The transcoder also interfaces with 
                    the Dynamo middleware, through which the video quality can be changed on the fly.
                
                
                
                    As soon as the client requests the server for the video stream, the Dynamo middleware gathers 
                    system state information (residual battery, system load etc.) from the iPAQ and communicates it 
                    to the middleware on the proxy. Using this information, the proxy middleware dynamically determines 
                    at what quality video should be streamed to the device. This is calculated based on the 
                    instantaneous residual energy of the device, the profiled energy usage for the video for the iPAQ,
                    the current load etc. The middleware on the proxy simultaneously sends stream related control 
                    information (e.g. new video quality, WCET, period etc. which have been profiled for the video) 
                    back to the iPAQ. The Dynamo middleware on the iPAQ now relays this information to the Power 
                    Aware OS, which dynamically adjusts the voltage/frequency parameters to work with the new 
                    video quality. For the demo, we use our own H.263 video player and transcoder (developed in house).
                

                Whats Needed
                Arm tool chain arm-linux/2.95.3Dynamo Middleware PackageARM X11 libraries
                Configuration
                
                Step 0: Download the Demo
                Download the demo program. Then extract the files 
                type "tar -zxvf demo.tgz". You will obtain a file structure similar to:
                File Structure:
                Dynamo
                        middleware
                                lib
                            paapi
                                user-level [user level dvs]kernel-level [kernel level dvs]linux-ipaq-v0.6.1 [kernel with dvs]
                            
                    
                
                Step 1: Configuring the Make Process
                Open Dynamo\config.mk
                find and modify
                LOCAL_PATH = /root/releases/dynamo_mw_1.0
                to the path of the dynamo directory
                find and modify
                ARM_X11     = /usr/local/arm/X11R6
                to the path of your local arm X11 libraries
                find and modify if necessary
                LINUXKERNELSRC    = /usr/src/linux/kernel
                to the /path/to/your/proxy/linuxdistro/src/ that is used by the proxy [this will probably not
                                have to be change]
                                
                                
                
                Step 2: Updating Header Files
                There are 3 files that need to be modified to use the FORGE/Dynamo Middleware Framework.
                These are device.c [middleware on your client device] proxy.c [middleware on the 
                proxy device] dyncommunication.c [shared information between proxy and device].
                
                dyncommunication.h
                [all define's and structures can be modified in this header file]
                    
                #define MOBILEIP
                defines the mobile device's IP address, configure this to the current 
                mobile ip address
                
                #define PROXYIP
                defines the proxy's IP addressconfigure this to the current 
                mobile ip address
                                
                                
                Step 3: Compiling the Kernel [or download the zImage]
                                Compile Boot Image:
                                in dynamo
                                run: make kernel
                                
    
                Step 4: Updating the Kernel

                cd paapi/linux-ipaq-v0.6.1/arch/arm/boot/
                                Copy the zImage to the mobile device's boot sector and link the new zImage to the current zImage with
                                ln -s /boot/zImage-paapi /boot/zImage
                                
                
                Step 5: Making The Middleware Demo
                    in dynamo
                    run: make
                                

                Step 6: Uploading Files
                                        [located in dynamo/middleware]
                    upload the device file to your iPAQ
                    upload the proxy file & FOREMAN.H263 to the proxy machine
                Step 7: Running the Demo
                    run ./proxy [on the proxy] 
                    run ./device [on the device]
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/dyn/release/docs.html
##-----------------TITLE------------------------##
FORGE/Dynamo: Documents
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Download Demo
                    
            
            
                Documentation
                
                Dynamo/Forge Power Aware OS API
                Documentation on how the power-aware kernel API is implemented and how to utilize the user 
                level methods. For a more detailed description refer to 
                Cristiano Pereira's 
                documentation page.
                
                Dynamo/Forge Distributed Middleware API
                 Documentation for the Dynamo/Forge Framework System Query API's.
##------------------URL-------------------------##
http://www.ics.uci.edu/~dsm/dyn/release/related.html
##-----------------TITLE------------------------##
FORGE/Dynamo: Related Links
##------------------TEXT------------------------##
Navigation
                        HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage
                    Downloads
                        Dynamo Framework v0.1Power-Aware KernelSystem Query LibrariesChange log
                    Distribution
                        Download Demo
                    
            
            
                Related Links
                
                    FORGE Project (UCI)GRACE (Illinois)µAmps(MIT)Milly-Watt (Duke) Coda, Odyssey (CMU)Monet (UIUC)Flinn (Michigan)ESR (Notre Dame)Puppeteer (RICE)RACE Lab (UCSB)Q-Fabric (Ga. Tech)Q-RAM (CMU)PowerTap (CMU)Purdue (Yau, LiZhiyuan)IMPACCT (UCI)BufScale (Colorado)SCALE (MIT)APOLLO (USC)Q-Fabric (GaTech)PARTS (Pittsburg)Jacob Lorch
##------------------URL-------------------------##
http://www.ics.uci.edu/~rjammala/Publications.html
##-----------------TITLE------------------------##
DataVault Project Page
##------------------TEXT------------------------##
Home Page of Ravi Chandra Jammalamadaka 
  












 
 


Publications: 

1. Ravi Chandra Jammalamadaka; Sharad Mehrotra; Nalini Venkasubramanian. PVault: A Client Server System Providing Mobile
Access to Personal Data. Proceedings of the 2005 ACM workshop
on Storage security and survivability (StorageSS),
2005. (pdf) 

2. RaviChandra Jammalamadaka;
Sharad Mehrotra. Querying Encrypted XML documents.Proceedings
of the IEEE International Database Engineering & Applications Symposium,
IDEAS, 2006. (pdf) 

3. Ravi Chandra Jammalamadaka;
Timothy van der Horst; Sharad
Mehrotra; Kent Seamons; NaliniVenkatasuramanian. Delegate: A Proxy Based
Architecture for Secure Website Access from an Untrusted Machine. 22nd Annual Computer Security Applications Conference (ACSAC), Maimi, FL, December, 2006. (pdf) 

4. Bijit Hore; Ravi Chandra Jammalamadaka; Sharad Mehrotra. Flexible
Anonymization for Privacy Preserving Data Publishing: A Systematic Search based
Approach. To appear in the proceedings of SIAM International
Conference on Data Mining 2007. (pdf) 

 

5. Ravi
Chandra Jammalamadaka, Roberto Gamboni,
Sharad Mehrotra,
 Kent Seamons,
Nalini Venkatasubramanian. gVault. A Gmail Based Cryptographic
Network File System. To appear in the proceedings of  21st Annual IFIP WG 11.3 Working Conference on Data and
Applications.   (pdf) 

 


6. Ravi Chandra Jammalamadaka. Middleware Support for Protecting Personal Data from Web Based Data Services. Middleware Doctoral Symposium, 2007. 
  (pdf) 
 

7. Ravi Chandra Jammalamadaka, Roberto Gamboni, Sharad Mehrotra, Kent Seamons, Nalini Venkatasubramanian.
iDataGuard: Middleward Providing a Secure Network Drive Interface to
Untrusted Internet Data Storage. Demo Paper. To appear in the Proceeding of International Conference on Extending Database Technology, 2008. 
(pdf)   



8. Ravi Chandra Jammalamadaka,
Sharad Mehrotra, Kent Seamons, Nalini Venkatasubramanian. DataVault:  Providing Data Sharing as a Service
 .( Demo Paper. In submission)  

9. Ravi Chandra Jammalamadaka, Roberto Gamboni, Sharad
Mehrotra, Kent Seamons, Nalini Venkatasubramanian. DataGuard: A
Middleware Layer Providing Seamless Mobile Access to Personal Data
via Untrusted Servers. Techincal Report.  (pdf, full version) . A shorter version
is under submission.  

10. Ravi Chandra Jammalamadaka, Roberto Gamboni, Sharad
Mehrotra, Kent Seamons, Nalini Venkatasubramanian. Providing Data Sharing as a Service.  (pdf, full version) . 
A shorter version is under submission.









Navigation
HomePublicationsProjectsContact Resume 

Announcements








Web design by Cirkuit Networks, Inc. Modified by Ravi Chandra Jammalamadaka, ICS, UCI. 
 Web page created by Ravi Chandra Jammalamadaka, ICS, UCI.
##------------------URL-------------------------##
http://www.ics.uci.edu/~rjammala/index.html
##-----------------TITLE------------------------##
Home page of Ravi Chandra Jammalamadaka
##------------------TEXT------------------------##
Ravi Chandra's Home Page 
  












 


Welcome to my web abode. I primarily maintain this website to describe my research, its vision, current results/accomplishments and future directions.
 Please feel to contact me and discuss my research if it interests you. I can be reached at rjammala at ics.uci.edu .  


I  graduated from UCI with a PhD in Sep 2008. I am currently working at eBay, Inc. My resume can be accessed 
 here    


Brief Bio:   

I am a fourth year PHD student at the Donald Bren School for information and computer sciences in University of California, Irvine. 
I am broadly interested in solving research problems in data management, network security and data security. 
My thesis focused on exploration of data management techniques that allow secure data services from untrusted third party servers and clients. 





 






Navigation
HomePublicationsProjectsContact Resume 

Announcements








Web design by Cirkuit Networks, Inc. Modified by Ravi Chandra Jammalamadaka, ICS, UCI. 
 Web page created by Ravi Chandra Jammalamadaka, ICS, UCI.
##------------------URL-------------------------##
http://www.ics.uci.edu/~rjammala/contact.html
##-----------------TITLE------------------------##
Home page of Ravi Chandra Jammalamadaka
##------------------TEXT------------------------##
Ravi Chandra's Home Page 
  










 
  Email:   rjammala at ics.uci.edu  

  Office address:  Suite 4300, CalIT2 buiding, University of California Irvine, CA 92617. 




 


Navigation
HomePublicationsProjectsContact Resume 

Announcements








Web design by Cirkuit Networks, Inc. Modified by Ravi Chandra Jammalamadaka, ICS, UCI. 
 Web page created by Ravi Chandra Jammalamadaka, ICS, UCI.
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/filtertree/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/filtertree/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/filtertree/src
NameLast modifiedSizeDescriptionParent Directory   -  example.cc16-Apr-2013 18:53   26K filtertreenode.cc16-Apr-2013 18:53  320  filtertreenode.h16-Apr-2013 18:53  5.8K ftindexerabs.cc16-Apr-2013 18:53  316  ftindexerabs.h16-Apr-2013 18:53   15K ftindexercombinelists.cc16-Apr-2013 18:53  393  ftindexercombinelists.h16-Apr-2013 18:53   41K ftindexerdiscardlists.cc16-Apr-2013 18:53  343  ftindexerdiscardlists.h16-Apr-2013 18:53   50K ftindexermem.cc16-Apr-2013 18:53  316  ftindexermem.h16-Apr-2013 18:53  3.5K ftindexermemabs.cc16-Apr-2013 18:53  322  ftindexermemabs.h16-Apr-2013 18:53   12K ftindexerondisk.cc16-Apr-2013 18:53  322  ftindexerondisk.h16-Apr-2013 18:53   40K ftsearcherabs.cc16-Apr-2013 18:53  318  ftsearcherabs.h16-Apr-2013 18:53   14K ftsearchermem.cc16-Apr-2013 18:53  318  ftsearchermem.h16-Apr-2013 18:53  4.8K ftsearcherondisk.cc16-Apr-2013 18:53  324  ftsearcherondisk.h16-Apr-2013 18:53   17K gramlist.h16-Apr-2013 18:53  890  gramlistondisk.cc16-Apr-2013 18:53  320  gramlistondisk.h16-Apr-2013 18:53  2.2K gramlistsimple.cc16-Apr-2013 18:53  320  gramlistsimple.h16-Apr-2013 18:53  698  gramlistunion.cc16-Apr-2013 18:53  320  gramlistunion.h16-Apr-2013 18:53  3.4K perftest.cc16-Apr-2013 18:53   19K statsgen.cc16-Apr-2013 18:53  2.3K statsgen.h16-Apr-2013 18:53   30K statsutil.cc16-Apr-2013 18:53   11K statsutil.h16-Apr-2013 18:53  4.9K stringcontainer.cc16-Apr-2013 18:53  6.0K stringcontainer.h16-Apr-2013 18:53   19K stringrm.cc16-Apr-2013 18:53   12K stringrm.h16-Apr-2013 18:53  3.8K unittest.cc16-Apr-2013 18:53   51K wrappers/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/filtertree/data/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/filtertree/data
##------------------TEXT------------------------##
Index of /releases/4.0/src/filtertree/data
NameLast modifiedSizeDescriptionParent Directory   -  female_names.txt16-Apr-2013 18:53   29K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/filtertree/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/filtertree/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/filtertree/build
NameLast modifiedSizeDescriptionParent Directory   -  cleanup.sh16-Apr-2013 18:53   18  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/topk/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/topk/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/topk/build
NameLast modifiedSizeDescriptionParent Directory   -  exp.sh16-Apr-2013 18:53  373  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/topk/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/topk/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/topk/src
NameLast modifiedSizeDescriptionParent Directory   -  display.cc16-Apr-2013 18:53  3.7K display.h16-Apr-2013 18:53  845  example.cc16-Apr-2013 18:53  1.3K foreign_listmerger.h16-Apr-2013 18:53  950  foreign_util.h16-Apr-2013 18:53  608  misc.cc16-Apr-2013 18:53  294  misc.h16-Apr-2013 18:53  959  oldlistmerger/16-Apr-2013 18:53    -  perftest.cc16-Apr-2013 18:53   15K perftest_exps.cc16-Apr-2013 18:53   16K perftest_exps.h16-Apr-2013 18:53  1.5K perftest_util.cc16-Apr-2013 18:53  9.7K perftest_util.h16-Apr-2013 18:53  2.6K topk.cc16-Apr-2013 18:53  934  topk.h16-Apr-2013 18:53  2.2K topkbase.h16-Apr-2013 18:53  1.7K topkheap.cc16-Apr-2013 18:53  338  topkheap.h16-Apr-2013 18:53   32K topkheap.v1.cc16-Apr-2013 18:53  1.1K topkheap.v1.h16-Apr-2013 18:53  9.8K topkindex.cc16-Apr-2013 18:53  3.8K topkindex.h16-Apr-2013 18:53  6.1K topkindex.v1.cc16-Apr-2013 18:53  2.0K topkindex.v1.h16-Apr-2013 18:53  2.4K topkiterative.cc16-Apr-2013 18:53  312  topkiterative.h16-Apr-2013 18:53  3.7K topkroundrobin.cc16-Apr-2013 18:53  1.8K topkroundrobin.h16-Apr-2013 18:53  9.2K topkscan.cc16-Apr-2013 18:53  302  topkscan.h16-Apr-2013 18:53  1.3K topksearch.cc16-Apr-2013 18:53  4.2K topksearch.h16-Apr-2013 18:53  8.3K topktwophase.cc16-Apr-2013 18:53  310  topktwophase.h16-Apr-2013 18:53  2.9K unittest.cc16-Apr-2013 18:53  5.3K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/partenum/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/partenum/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/partenum/src
NameLast modifiedSizeDescriptionParent Directory   -  example.cc16-Apr-2013 18:53  1.1K partenum.cc16-Apr-2013 18:53   12K partenum.h16-Apr-2013 18:53  2.4K unittest.cc16-Apr-2013 18:53  1.1K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/partenum/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/partenum/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/partenum/build
NameLast modifiedSizeDescriptionParent Directory   -  dataset.txt16-Apr-2013 18:53  828  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/sepia/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/sepia/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/sepia/src
NameLast modifiedSizeDescriptionParent Directory   -  cluster/16-Apr-2013 18:53    -  duplicate.cc16-Apr-2013 18:53  3.0K duplicate.h16-Apr-2013 18:53  483  example.cc16-Apr-2013 18:53  1.0K freqest/16-Apr-2013 18:53    -  perftest.cc16-Apr-2013 18:53  1.0K ppdtable/16-Apr-2013 18:53    -  sample.cc16-Apr-2013 18:53  2.7K sample.h16-Apr-2013 18:53  1.6K sepia.cc16-Apr-2013 18:53  9.2K sepia.h16-Apr-2013 18:53  2.0K simfunc/16-Apr-2013 18:53    -  unittest.cc16-Apr-2013 18:53  827  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/sepia/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/sepia/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/sepia/build
NameLast modifiedSizeDescriptionParent Directory   -  dataset.txt16-Apr-2013 18:53  805  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/common/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/common/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/common/build
NameLast modifiedSizeDescriptionParent Directory   -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/common/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/common/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/common/src
NameLast modifiedSizeDescriptionParent Directory   -  compressionargs.cc16-Apr-2013 18:53  326  compressionargs.h16-Apr-2013 18:53  569  filtertypes.cc16-Apr-2013 18:53   21K filtertypes.h16-Apr-2013 18:53  8.1K gramgen.cc16-Apr-2013 18:53   12K gramgen.h16-Apr-2013 18:53  7.0K query.cc16-Apr-2013 18:53  298  query.h16-Apr-2013 18:53  1.9K simmetric.cc16-Apr-2013 18:53   41K simmetric.h16-Apr-2013 18:53   21K tr1_local.h16-Apr-2013 18:53  882  typedef.cc16-Apr-2013 18:53  302  typedef.h16-Apr-2013 18:53  381  unittest.cc16-Apr-2013 18:53  5.7K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/stringmap/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/stringmap/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/stringmap/src
NameLast modifiedSizeDescriptionParent Directory   -  editdistance.cpp16-Apr-2013 18:53  3.5K editdistance.h16-Apr-2013 18:53  898  element.cpp16-Apr-2013 18:53   11K element.h16-Apr-2013 18:53  3.0K index.cpp16-Apr-2013 18:53   36K index.h16-Apr-2013 18:53  8.3K mapper.cpp16-Apr-2013 18:53   10K mapper.h16-Apr-2013 18:53  2.0K node.cpp16-Apr-2013 18:53  5.1K rect.cpp16-Apr-2013 18:53   17K rtreeparams.h16-Apr-2013 18:53  526  split_l.cpp16-Apr-2013 18:53   10K split_l.h16-Apr-2013 18:53  1.1K split_q.cpp16-Apr-2013 18:53  8.1K split_q.h16-Apr-2013 18:53  928  stringmap.cpp16-Apr-2013 18:53   10K stringmap.h16-Apr-2013 18:53  3.4K stringmap_unittest.cpp16-Apr-2013 18:53  7.0K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/stringmap/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/stringmap/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/stringmap/build
NameLast modifiedSizeDescriptionParent Directory   -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/listmerger/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/listmerger/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/listmerger/build
NameLast modifiedSizeDescriptionParent Directory   -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/listmerger/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/listmerger/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/listmerger/src
NameLast modifiedSizeDescriptionParent Directory   -  divideskipmerger.cc16-Apr-2013 18:53  460  divideskipmerger.h16-Apr-2013 18:53   17K example.cc16-Apr-2013 18:53  1.5K heapmerger.cc16-Apr-2013 18:53  298  heapmerger.h16-Apr-2013 18:53  2.2K listmerger.h16-Apr-2013 18:53  3.8K mergeoptmerger.cc16-Apr-2013 18:53  663  mergeoptmerger.h16-Apr-2013 18:53  7.5K mergeoptvariants/16-Apr-2013 18:53    -  mergeskipmerger.cc16-Apr-2013 18:53  311  mergeskipmerger.h16-Apr-2013 18:53  2.9K ondiskmergerabs.h16-Apr-2013 18:53  2.5K ondiskmergeradapt.cc16-Apr-2013 18:53  326  ondiskmergeradapt.h16-Apr-2013 18:53   32K ondiskmergersimple.cc16-Apr-2013 18:53  328  ondiskmergersimple.h16-Apr-2013 18:53  7.3K scancountmerger.cc16-Apr-2013 18:53  310  scancountmerger.h16-Apr-2013 18:53  1.9K unittest.cc16-Apr-2013 18:53  4.2K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/lbaktree/build/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/lbaktree/build
##------------------TEXT------------------------##
Index of /releases/4.0/src/lbaktree/build
NameLast modifiedSizeDescriptionParent Directory   -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/lbaktree/src/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/lbaktree/src
##------------------TEXT------------------------##
Index of /releases/4.0/src/lbaktree/src
NameLast modifiedSizeDescriptionParent Directory   -  example.cc16-Apr-2013 18:53  4.2K kwdsstorage.cc16-Apr-2013 18:53  3.6K kwdsstorage.h16-Apr-2013 18:53  1.1K lbaktree.cc16-Apr-2013 18:53   29K lbaktree.h16-Apr-2013 18:53  3.3K rstartree/16-Apr-2013 18:53    -  
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://flamingo.ics.uci.edu/releases/4.0/src/lbaktree/data/
##-----------------TITLE------------------------##
Index of /releases/4.0/src/lbaktree/data
##------------------TEXT------------------------##
Index of /releases/4.0/src/lbaktree/data
NameLast modifiedSizeDescriptionParent Directory   -  data.txt16-Apr-2013 18:53  378K queries.txt16-Apr-2013 18:53  1.6K 
Apache/2.2.15 (CentOS) Server at flamingo.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/assignments/program2/program.html
##-----------------TITLE------------------------##
Program 2
##------------------TEXT------------------------##
Program 2

Classes, Overloaded Operators, and Iterators


ICS-33: Intermediate Programming









Introduction
This programming assignment is designed first to ensure that you know how to
  write classes that overload many of the standard Python operators by defining
  various double-underscore methods.
It also ensures that you know how to write classes that implement iterators,
  by defining an __iter__ method that returns an object that we/Python
  can call __next__ on.
These Iterators are covered near the end of the due date for this project;
  skip writing these functions (one in each class) until the material is
  covered in class, or read ahead.

You should download the program2 project folder and
  unzip it to produce an Eclipse project with two modules.
You will write classes in these modules, which can be tested in the script and
  using the standard driver using the batch self-check files that I supplied.
Eventually you will submit each of these modules you write separately to
  Checkmate.

I recommend that you work on this assignment in pairs, and I recommend that you
  work with someone in your lab section (so that you have 4 hours each week of
  scheduled time together).
These are just recommendations.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.


Only one student should submit all parts of the the assignment, but both
  students' UCInetID and name should appear in a comment at the top of
  each submitted .py file.
A special grading program reads this information.
The format is a comment starting with Submitter and Partner (when
  working with a partner), followed by a colon, followed by the student's UCInetID (in all lower-case), followed by the student's name in
  parentheses (last name, comma, first name -capitalized appropriately).
If you omit this information, or do not follow this exact form, it will require
  extra work for us to grade your program, so we will deduct points.
Note: if you are submitting by yourself, and do NOT have a partner, you
  should OMIT the partner line and the "...certify" sentence.

For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each .py file would appear as:
# Submitter: romeo1(Montague, Romeo)
# Partner  : jcapulet(Capulet, Juliet)
# We certify that we worked cooperatively on this programming
#   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
Please turn in each program as you finish it, so that I can more
  accurately assess the progress of the class as a whole during this assignment.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).
The code you write should be as compact and elegant as possible, using 
  appropriate Python idioms.






Problem #1: Bag Class
Problem Summary:
Write a class that represents and defines methods, operators, and an iterator
  for the Bag class.
Bags are similar to sets, and have similar operations (of which we will
  implement just the most important) but unlike sets they can store multiple
  copies of items.
We will store the information in bags as dictionaries (I suggest using a 
   defaultdict) whose keys are associated with int values that
   specify the number of times the key occurs in the Bag.
You must store Bags using this one data structure, as specified
Details
Define a class named Bag in a module named bag.py

Define an __init__ method that has one parameter, an iterable of
       values that initalize the bag.
    Writing Bag() constructs an empty bag.
    Writing Bag(['d','a','b','d','c','b','d']) construct a bag with
      one 'a', two 'b's, one 'c', and three 'd's.
    Objects in the Bag class should store only the dictionary specified
      above: it should not store/manipulate any other self
      variables.

Define a __repr__ method that returns a string, which when passed to
       eval returns a newly constructed bag with the same value
       (==) to the object __repr__ was called on.
    For example, for the Bag in the discussion of __init__ the
        __repr__ method would print its result as
       Bag(['a', 'c', 'b', 'b', 'd', 'd', 'd']).
    Bags like sets are not sorted, so these 7 values can appear in any order.
    We might require that information in the list is sorted, but not all values
      we might put in a bag may be ordered (and therefore not sortable): e.g.,
      a bag storing both string and int values, Bag(['a',1]) which is
      allowed.
    
    Note: This method is used to test several other methods/operators
       in the batch self-check file; so it is critical to write it correctly.

Define a __str__ method that returns a string that more compactly
      shows a bag.
    For example, for the Bag in the discussion of __init__ the
        __str__ method would print its result as
       Bag(a[1], c[1], b[2], d[3]).
    Bags like sets are not sorted, so these 7 values can appear in any order.

Define a __len__ method that returns the total number of values in
      the Bag.
    For example, for the Bag in the discussion of __init__ the
        __len__ method would return 7.

Define a unique method that returns the number of different
      (unique) values in the Bag.
    For example, for the Bag in the discussion of __init__ the
        unique method would return 4, because there are four
        different values in the Bag; contrast this method with
        __len__.
      
Define a __contains__ method that returns whether or not its
      argument is in the Bag (one or more times).

Define a count method that returns the number of times its argument
      is in the Bag: 0 if the argument is not in the Bag.

Define an add method that adds its argument to the Bag: if
      that value is already in the Bag, its count is incremented by
      1; if it is not already in the Bag, it is added to the
      Bag with a count of 1.

Define an __add__ method that unions its two Bag operands:
      it returns a new Bag with all the values in Bag operands.
    For example: str(Bag(['a','b']) + Bag(['b','c'])) should be
      'Bag(a[1],b[2],c[1])'
    Neither Bag operand should change.

Define a remove method that removes its argument from the
      Bag: if that value is already in the Bag, its count is
      decremented by 1 (and if the count reduces to 0, the value
      is removed from the dictionary; if it is not in the Bag, raise a
      ValueError exception, with an appropriate message that includes
      the value that could not be removed.

Define __eq__/__ne__ methods that return whether one
      Bag is equal/not equal to another: contains the same values the
      same number of times.
    A Bag is not equal to anything whose type is not a Bag
    This this method should not change either Bag.

Define an __iter__ method that that returns an object on which
      next can be called to produce every value in the Bag: all
      len of them.
    For example, for the Bag in the discussion of __init__, 
      the following code
  for i in x:
      print(i,end='')
would print
  acbbddd
    Bags like sets are not sorted, so these 7 values can appear in any order.

Ensure that the iterator produces those values in the Bag at the time
      the iterator starts executing; so mutating the Bag during
      iteration will not affect what values it produces.

    Hint: Write this method as a call to a local generator, passing a
      copy of the dictionary (covered in Friday's lecture in Week 4).

I have shown only examples of Bags storing strings, because they are
  convenient to write.
But bags can store any type of data.
The __repr__, __str__, and __iter__/__next__ methods must
  be written independently: neither should call the other to get things done.

Testing
The bag.py module includes a script that calls driver.driver().
The project folder contains a bsc2.txt file (examine it) to use for
   batch-self-checking your class.
These are rigorous but not exhaustive tests.
Incrementally write and test your class; check each method as you write it.

Note that when exceptions are raised, they are printed by the driver but the 
  Command: prompt sometimes appears misplaced.

You can write other code at the bottom of your bag.py module to test the
  Bag class, or type code into the driver as illustrated below.
Notice the default for each command is the command previously entered.
  Driver started
  Command[!]: from bag import Bag
  Command[from bag import Bag]: b = Bag(['d','a','b','d','c','b','d'])
  Command[b = Bag(['d','a','b','d','c','b','d'])]: print(b)
  Bag(a[1], b[2], c[1], d[3])
  Command[len(b)]: print(len(b))
  7
  Command[print(len(b))]: print(b.count('d'))
  3
  Command[print(b.count('d'))]: quit
  Driver stopped







Problem #2:Sparse Matrix Class
Problem Summary:
A Matrix is a 2-dimensional type storing values indexed by a row and a
  column.
For example, the following is a 3x3 Matrix (its 3 rows and columns are numbered
  starting at 0; so 0-2).
Here, the value indexed by Row 1 and Column 2 is 3.


IndexesColumn 0Column 1Column 2Row 0100Row 1053Row 2001


We could choose to store this Matrix by using a tuple of rows; where each
  row is a tuple of values in its columns.

( (1, 0, 0), (0, 5, 3), (0, 0, 1) ) 

But in this problem, we will use a more interesting data structure.

A Sparse Matrix stores the row and column size of a Matrix, and a
  dictonary whose keys are 2-tuples (row and column index) and their associated
  non-zero values: any index in the Matrix that is not a key in its
  dictionary stores 0 implicitly; no key in its dictionary should store
  a zero value.

A Sparse Matrix would store the 9 values in the Matrix above in a dictionary of
  4 index keys (and their associated non-0 values).
The remaining 5 0s are stored implicitly: any index key in the Sparse
  Matrix but not in the dictionary (e.g., the (0,1) tuple) implicitly
  stores 0.

{(0,0): 1, (1,1): 5, (1,2): 3, (2,2): 1} 


Write a class named Sparse_Matrix that represents and defines operators
  for Sparse Matrix objects, which are represented by a dictionary whose keys
  are 2-tuples representing a row and column of the Sparse Matrix and whose
  associated values are the non-zero matrix values stored at that row and colum.
Operators will typically be defined to work on Sparse_Matrix objects, or
  between a Sparse_Matrix and a numeric (int or float)
  value.

The Sparse_Matrix class will be be immutable except for the
  __call__ method, which can change the number of rows and columns in a 
  matrix (and of course the __setitem__ and __delitem__ methods).
All other methods will not mutate their Sparse_Matrix objects; methods
  that must return a Sparse_Matrix (like the arithmetic operators) will
  return a newly_constructed Sparse Matrix storing the appropriate
  values.
Details
Define a class named Sparse_Matrix in a module named
  sparsematrix.py.

Define an __init__ method that has two required parameters (the
  number of rows and columns specifying the size of the Sparse Matrix),
  followed by any number (zero or more) of 3-tuple arguments: each will
  contain a (1) row and a (2) column index, and a (3) value that is to be
  stored at that index.

For example, writing Sparse_Matrix(2, 2, (0,0,5), (1,1,5))
  represents a Sparse Matrix whose value at indexes (0,0) and
  (1,1) is 5, and whose values at all other indexes are 0.
The __str__ method (read its definition below) displays such a Sparse
  Matrix as
2x2:[5  0
     0  5]
showing it size and all its values: both non-0 and 0.
The dictionary representing this Sparse_Matrix stores only the two
  non-0 values: {(0,0): 5, (1,1): 5}

IMPORTANT:
Store a Sparse Matrix using the attributes named rows, cols,
  and matrix (which is a dictionary (dict) whose keys are
  2-tuples (row,column), each of which is associated with a non-zero
  value).
Store only these attributes: no others.
You must set these attributes as self.rows, self.cols and
  self.matrix, because I have defined the __str__ method and
 various batch self-tests to refer to these attributes, by these names.

This dictionary should never store an associated value of 0:
  if the third value of a 3-tuple supplied to __init__ is 0
  ignore  it: do not store it in self.matrix.
So Sparse_Matrix(2, 2, (0,0,5), (1,1,5), (0,1,0)) still stores 
only the two non-0 values in its dictionary:
  {(0,0): 5, (1,1): 5}.

The __init__ method should raise an AssertionError with
   an appropiate message if the arguments violate any of the following
   conditions:
The row and column arguments must be integers that are strictly
        greater than 0.
  
  The row and column in each triple must be non-negative integers that
        are strictly less than the number of rows and columns in the Sparse
        Matrix: e.g., if the Sparse Matrix specifies 3 rows, then all the
        row indexes must be 0, 1, or 2.
  
  The row and column in each triple must be unique (not repeated).
      Raise an exception on just the first duplicate index (if there are any):
        you don't have to find all the duplicates, just raise an exception on
        the first.
  
  The value in each triple must be numeric (an int or float).


For example, in my code writing Sparse_Matrix(3,2, (0,0,1), (0,0,2))
  raises
  AssertionError with the message
  Sparse_Matrix.__init__: repeated index (0, 0).

Define a size method that returns a 2-tuple containing the row and
      column size of a Sparse Matrix.
    For m = Sparse_Matrix(3,2) (a Sparse Matrix filled with 0s, so
      its dictionary is empty) m.size() returns (3,2).
    You will find this method useful when you write later methods, to check
      for compatible sizes for Sparse Matrices.

Define a __len__ method that returns the number of values (counting
      all non-zero and 0 values) in the Sparse Matrix: it returns
      the product of the number of rows and columns.

Define a __bool__ method that returns False if the
      Sparse_Matrix object stores all zero values; it returns
      True if it returns any non-zero values.
    Recall that the dictionary stores only non-0 values.

Define a __repr__ method that returns a string, which when
      passed to eval returns a newly constructed Sparse_Matrix
      object that represents the same Sparse_Matrix object on which
      __repr__ was called.
    
    For example, if we define
      m = Sparse_Matrix(3,3, (0,0,1), (1,1,1), (2,2,1)), calling
      repr(m) returns something like
      'Sparse_Matrix(3, 3, (0, 0, 1), (1, 1, 1), (2, 2, 1))', although
      the order of the 3-tuples doesn't matter.
    
    Hint:I used Python's join function to construct a string of
        all the 3-tuple values that appear near the end of what repr
        returns.

The following three methods are all similar in structure.
You will find it useful to call these methods implicitly (using []
  indexing) in other methods/operators you are asked to define below; but doing
  so is not necessary.
Hint 1: d.get(key,default) returns d[key] if key
   is in the dictionary d and returns default if key is
   not in the dictionary d.
Hint 2: writing m[0,0] calls
   Sparse_Matrix.__getitem__(m,(0,0)): i.e., the arguments 0,0
   in m[...] are passed as the 2-tuple (0,0) to
   __getitem__.

Define a __getitem__ method whose argument is row,column 2-tuple; it
      returns the value of the Sparse Matrix at that row and column.
    If the type of the argument is not a 2-tuple, whose first and second
      indexes are integers specifying a legal row then column in the Sparse
      Matrix, then raise a TypeError exception with an appropriate
      message.

Define a __setitem__ method whose arguments are a row,column 2-tuple
      and a value; it updates the value for that row,column.
    If the type of the first argument is not a 2-tuple whose first and second
      indexes are integers specifying a legal row then column in the Sparse
      Matrix, then raise a TypeError exception with an appropriate
      message.
    Also, if the value argument is not numeric (not an int or
       float), then raise a TypeError exception with an
       appropriate message.
    Otherwise update the Sparse Matrix to store the value at the row,column key.
    Hint: if the value argument is equal to 0, update the
      dictionary only if it currently stores a non-zero value at that
      row,column key by removing the the row,column key from the dictionary.
    This method can mutate the state of a Sparse Matrix.


Define a __delitem__ method whose argument is row,column 2-tuple; it
      deletes that row,column key from the Sparse Matrix; it is equivalent to
      storing a zero at that row,column key.
    If the type of the argument is not a 2-tuple, whose first and second
      indexes are integers specifying a legal row then column in the Sparse
      Matrix, then raise a TypeError exception with an appropriate
      message.
    This method can mutate the state of a Sparse Matrix.


The following two methods are similar in structure.
You will find it useful to call these methods in other methods/operators you
  are asked to define below (specifically, in the details and
  __mul__ methods); but doing so is not necessary.
In the examples directly below we define m so that str(m) is
  3x3:[0  2  3
       4  0  6
       7  8  0]
Define the following two methods:

The row method that takes one int argument: it returns
  a tuple containing all the values in that row (from left to right).
Using m defined above, m.row(0) returns (0, 2, 3); 
  m.row(1) returns (4, 0, 6); and
  m.row(2) returns (7, 8, 0). 
If the row argument is not an integer whose values specify a legal
  row in the Sparse Matrix, raise an AssertionError with an
  appropriate message.

The col method that takes one int argument: it returns
  a tuple containing all the values in that column (from top to bottom).
Using m defined above, m.col(0) returns (0, 4, 7); 
  m.col(1) returns (2, 0, 8); and
  m.col(2) returns (3, 6, 0). 
If the col argument is not an integer whose values specifies a legal
  column in the Sparse Matrix, raise an AssertionError with an
 appropriate message.


Define the details method that returns a string of three pieces of
  information about a Sparse_Matrix object, separated by  -> :
  the size, the dictionary, and a tuple of all the rows (see the row
  method above): row 0, row 1, etc.
If we define
  m = Sparse_Matrix(3,3, (0,0,1), (1,1,5), (2,2,1)),
  then the of calling m.details() is
'3x3 -> {(0, 0): 1, (1, 1): 5, (2, 2): 1} -> ((1, 0, 0), (0, 5, 0), (0, 0, 1))'
Of course, the keys in the dictionary (2nd part) can appear in any order, but
  the tuples (3rd part) must occur in the exact order shown.

I have defined a __str__ method that returns a string that nicely
      displays a Sparse Matrix in a 2-dimensional form.
    I wrote this method to work even if __getitem__ is not
      implemented correctly; it calls self.matrix.get((r,c),0), but if
      __getitem were correctly implemented it would call only 
      self[r,c].

Define a __call__ method that takes two int arguments,
      specifying the new number of rows and columns in a Sparse Matrix; these
      must each be integers that are strictly greater than 0; if not,
      raise an AssertionError, similarly to what you did in the
      __init__ method.
    It modifies the Sparse Matrix by resetting its row and column size and
      deleting all values from the dictionary whose indexes lie
      outside the new size of the re-sized Sparse Matrix.
    
    For example if we define
      m = Sparse_Matrix(2, 2, (0,0,1),(0,1,1),(1,0,1),(1,1,1))
      (a 2x2 Sparse Matrix filled with 1s) and we call m(1,1) then
      m becomes a 1x1 Sparse Matrix whose dict matrix stores just
      {(0,0): 1} because all the other indexes (that used to be in the
      dict matrix) are now outside the size of Sparse Matrix.
    
    This method mutates the state of a Sparse Matrix.
    Hint: You cannot delete any keys in a dictionary while iterating
        over it: iterate over a copy.

Define an __iter__ method that produces 3-tuples containing 
      the row, column, and value for each index in the Sparse Matrix that
      stores a non-0 value.
    These values must be sorted by the value (from smallest to biggest).
    For example, if we define
        m = Sparse_Matrix(2, 2, (0,0,1),(0,1,3), (1,0,4), (1,1,2)))
    which prints as
2x2:[1  3
     4  2]
    then iterating through it produces the tuples (0,0,1), 
      (1,1,2), (0,1,3), (1,0,4) in this order.
    
    Hint: Write this method as a generator (covered in Friday's lecture
      in Week 4).

Define all the underscore methods needed to ensure the prefix +/- and
      abs work correctly: + returns a new Sparse Matrix with the
      same values; - returns a new Sparse Matrix with negated values
      (not that -0 == 0); abs returns a new Sparse Matrix
      with all non-negative values.
    Hint: I wrote each in 1 line, using a comprehension, and using
      * to turn a list into arguments for a function call.
 
Define all the underscore methods needed to ensure that the add, subtract,
      and multiply operators produce the correct answers when their operands
      are any combination of a Sparse_Matrix object with a
      Sparse_Matrix, int, or float object.
    
    If Python tries to apply an arithmetic operator to a Sparse_Matrix
      object and any other type of value, raise the standard TypeError
      exception with the standard messsage about unsupported operand types: see
      what 1+'a' produces in the Python interpreter.

Recall that none of these operators mutate their operands: each produces a new
  Sparse Matrix and returns it as a result.
Note that both + and * (but not -) are commutative when
  applied to a Sparse Matrix and a numeric value.
Commutivity with numeric values can make programming these methods simpler;
  so can using the infix - operator.

Hint: Create a Sparse Matrix that is the appropriate size, with no
  initial non-0 values; then fill in all its indexes with the correct
  values: using __getitem__ and __setitem__ is simplest, for
  computing the resulting Sparse Matrix, ensuring that the dictionary contains
  no 0 values.
To add two Sparse_Matrix objects, their sizes must be the
      same; the the new resulting Sparse Matrix will be the same size as
      both its operand Sparse Matrices, and its values are the pair-wise
      addition of the two Sparse Matrix values.
If we define m1 (on the left) and m2 (on the right) as follows
2x3:[1  2  3          2x3:[-1   2   -3
     4  5  6]               4  -5    1]
Then the result of adding these two Sparse Matrix objects (either m1+m2
  or m2+m1) is the new Sparse Matrix object
2x3:[0  4  0
     8  0  7]
For example, the value (0) in the resulting Sparse Matrix at row 0 and
 column 0 is the sum of the value (1) in m1 at row 0 and column 0
 plus the value (-1) in m2 at row 0 and column 0.
This pattern repeats for all the other rows and columns in the resulting Sparse
  Matrix.

To add a numeric value to a Sparse Matrix, the new resulting Sparse Matrix
  will be the same size as the one operand that is a Sparse Matrix, and have
  that numeric value added to each of the values in the argument Sparse Matrix.
If we define the Sparse Matrix m as follows

2x3:[-1   0   1
     -2   0   2]
Then the result of adding 1 to this Sparse Matrix (1+m or
  m+1: adding 1 on the left or on the right) is the new Sparse
  Matrix
2x3:[ 0   1   2
     -1   1   3]
If the argument is not a Sparse Matrix or numeric value, raise a
  TypeError with the appropriate information; if the argument is a
  Sparse Matrix of a different size (see the size method), raise an
  AssertionError with the appropriate information.

To subtract two Sparse_Matrix objects, use the identity that
      m1-m2 = m1 + -m2: the difference between m1 and
      m2 is the sum of m1 and the negation (see part 13) of
      m2.

To multiply two Sparse Matrix objects, their sizes must be
      compatible: the number of columns in the left Sparse
      Matrix must be the same as the number of rows in the right Sparse
      Matrix; the new resulting Sparse Matrix will have the number of
      rows of the left Sparse Matrix and the number of
      columns of the right Sparse Matrix.
The value in the resulting Sparse Matrix at row r and column c is
  computed by adding together the pairwise products of all the values in row
  r in the left Sparse Matrix and in column c in the right Sparse
  Matrix.

If we define m1 (left) and m2 (right) as follows
2x3:[1  2  1          3x2:[0  1
     2  1  2]              2  0
                           1  1]
Then the result of multiplying these two Sparse Matrix objects is the new Sparse
  Matrix object
2x2:[5  2
     4  4]
The value at index (0,0) is the sum of the pairwise multiplication of
  row 0 in m1 (1, 2, 1) and column 0 in m2 (0, 2, 1):
  1*0 + 2*2 + 1*1 = 5.
The value at index (0,1) is the sum of the pairwise multiplication of
  row 0 in m1 (1, 2, 1) and column 1 in m2 (1, 0, 1):
  1*1 + 2*0 + 1*1 = 2.
The value at index (1,0) is the sum of the pairwise multiplication of
  row 1 in m1 (2, 1, 2) and column 0 in m2 (0, 2, 1):
  2*0 + 1*2 + 2*1 = 4.
The value at index (1,1) is the sum of the pairwise multiplication of
  row 1 in m1 (1, 2, 1) and column 1 in m2 (1, 0, 1):
  1*1 + 2*0 + 1*1 = 4.


Hint: Use the row and col method specified in part 8.

To multiply a numeric value by a Sparse Matrix, the new resulting Sparse Matrix
  will have that numeric value multiplied by each of the non-0 values in
  the Sparse Matrix.
If we define the Sparse Matrix m as follows

2x3:[-1   0   1
     -2   0   2]
Then the result of multiplying 2 by this Sparse Matrix
  (either 2*m or m*2; multiplying on the left or right)
  is the new Sparse Matrix
2x3:[-2   0   2
     -4   0   4]
Note that if the numeric value is 0 the Sparse Matrix will store all
  0s.

If the argument is not a Sparse Matrix or numeric value, raise a
  TypeError with the appropriate information; if the argument is a
  Sparse Matrix that is not of a compatible size (see the size method),
  raise an AssertionError with the appropriate information.


Define all the underscore method needed to ensure that the power
      operator (**) produces the correct answers when its left operand is a
      square Sparse_Matrix object (same number of rows as columns) and
      its right operand is restricted to be a non-negative int object.
    Compute the answer by using repeated multiplication.
    If the power is not an int raise a TypeError; if the power is
      less than 1 or the Sparse Matrix is not square, raise an
      AssertionError.
 
Python automatically provides meanings for +=, -=, 
      *=, and **=.

Define the relational operator == and !=.
These operators must work correctly when one operand is a Sparse Matrix and the
  the other operand is a Sparse Matrix or a numeric value
  (int or float).
For any other operands, return False for == and True for
   !=.

Two Sparse_Matrix objects are considered equal if they have the
  same sizes (see the size method) and pair-wise the same values:
  i.e., the value in row r,column c in one Sparse Matrix is equal to the value
  in row r,column c in the other Sparse Matrix, for all rows and columns.
A Sparse Matrix is considered equal to a numeric value if the Sparse Matrix is
  any size, but all its values are all equal to the numeric value; otherwise
  they are unequal.

Hint for the numeric value comparison with ==:
If the value to check is 0, there must be no values stored in the
  dictionary representing the non-0 values in the Sparse Matrix.

If the value to check is non-0, that value must be stored in every
  index in the Sparse Matrix with this value: that is, every index must appear
  in the matrix dict, because there must be no 0 values in the
  Sparse Matrix.



Define a __setattr__ method that ensures objects in the
      Sparse_Matrix class cannot store new attributes: they store
      only rows, cols, and matrix.
    The methods you will write should never bind any instance names
       (except in  __init__, which initializes rows, cols, 
       and matrix) but exclusively returns newly constructed
       Sparse_Matrix objects with the  correct values.
    If an attempt is made to add new attributes to an object (by defining a new
      attribute or rebinding an existing attribute), raise an
      AssertionError with an appropriate message.
    
    Do not attempt to solve this part of the problem until all other parts
      are working correctly.

Important: To solve this problem correctly, you must also find a way to
  allow the __call__ method (which mutates rows and cols)
  to work correctly; this is hard to do.
  If you cannot, it best just to not write the __setattr__ method.



Testing
The Sparse_Matrix.py module includes a script that does some simple
  matrix calculations and then calls driver.driver().
The project folder contains a bsc1.txt file (examine it) to use for
   batch-self-checking your class.
These are rigorous but not exhaustive tests.
Incrementally write and test your class: for example, getting one arithmetic
  operator working correctly will create a pattern for the others.

Note that when exceptions are raised, they are printed by the driver but the 
  Command: prompt sometimes appears misplaced.

You can also test code you type into the driver as illustrated below; but if you
  want to perform the same test over and over again when debugging, it it
  better to put this code in the script before the driver is called.
Notice the default for each command (printed in the square brackets) is the
  command previously entered.
  Driver started
  Command[!]: from sparse_matrix import Sparse_Matrix as SM
  Command[from sparse_matrix import Sparse_Matrix as SM]: m = SM(2,2,(0,0,0),(0,1,1),(1,0,2),(1,1,3))
  Command[m = SM(2,2,(0,0,0),(0,1,1),(1,0,2),(1,1,3))]: print(m)
  2x2:[0  1
       2  3]
  Command[print(m)]: print(m.details())
  2x2 -> {(0, 1): 1, (1, 0): 2, (1, 1): 3} -> ((0, 1), (2, 3))
  Command[print(m.details())]: print(m+m)
  2x2:[0  2
       4  6]
  Command[print(m+m)]: print(m+1)
  2x2:[1  2
       3  4]
  Command[print(m+1)]: print(m*m)
  2x2:[ 2   3
        6  11]
  Command[print(m*m)]: quit
  Driver stopped
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/assignments/program4/program.html
##-----------------TITLE------------------------##
Program 4
##------------------TEXT------------------------##
Program 4

Checking Annotations


ICS-33: Intermediate Programming









Introduction
This programming assignment is designed to show how we can get Python to check
  function annotations whenever annotated functions are called.
For each of Python's built-in data types, we will develop an interpretation
  (and write code to check that interpretation) of how the data type specifies
  type information that is checkable when a function is called.


For example, we specified the main dict for the NDFA in Programming
  Assignment #1 by the notation
  {str : {str : {str}}}
Recall the outer-dict associates a str state key with a value
  that is an inner-dict; and the inner-dict associates a 
 str transition with a value that is a set of str states.

Note that this is an actual data structure in Python, where str is
  a reference to the string class object.
It is an outer-dict whose single key is str and whose associated
  value is an inner-dict whose single key is a str and whose
  value is a set that contains just element, str.


We will write the Check_Annotation class and use it as a decorator for
  functions whose annotations we want to check each time the function is called.
Internally it will overload the __call__ method to call the function only
  after checking its annotation by using mutual recursion (not direct
  recursion), in a natural way, to process the nesting of data types inside
  data types illustrated in the notation above.
We will write code that ensures that this checking works for the standard
  classes defined in Python.
The code will also know how to process a special annotation-checking protocol
  (via the __check_annotation__ method) that we can implement in any
  new classes that we write, so that that class can become part of the
  annotation language (I have done this for two classes; you can do it for the
  Bag class for extra credit).


I suggest that you look at the code in the modules that appear in the project
  folder that you will download.
Then (see the detailed instructions in this document) we can add/test/debug
  capabilities for each of the built-in data types we can use in the annotation
  language, iteratively enhancing our code until we can use all the built-in
  data types in annotations.
Once we do this for list (about a dozen lines; the biggest of my
  checking functions), all the others are variants and therefore much easier to
  write (but still with some interesting details).


Download the 
  program4 project folder and use it to create an
  Eclipse project.
We can test our class (put it in the checkannotation.py module, which
  already includes some useful code) at the end of the class itself, or in a
  special driver that is included, which uses a batch file to test progressively
  more and more complex data types in the annotation language.


I recommend that you work on this assignment in pairs, and I recommend that you
  work with someone in your lab section (so that you have 4 hours each week of
  scheduled time together).
These are just recommendations.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.



Only one student should submit all parts of the the assignment, but both
  students' UICnetID and name should appear in a comment at the top of
  each submitted .py file.
A special grading program reads this information.
The format is a comment starting with Submitter and Partner (when
  working with a partner), followed by a colon, followed by the student's
  UCInetID (in all lower-case), followed by the student's name in
  parentheses (last name, comma, first name -capitalized appropriately).
If you omit this information, or do not follow this exact form, it will require
  extra work for us to grade your program, so we will deduct points.
Note: if you are submitting by yourself, and do NOT have a partner, you
  should OMIT the partner line and the "...certify" sentence.

For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each .py file would appear as:
# Submitter: romeo1(Montague, Romeo)
# Partner  : jcapulet(Capulet, Juliet)
# We certify that we worked cooperatively on this programming
#   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
Please turn in each program as you finish it, so that I can more
  accurately assess the progress of the class as a whole during this assignment.


The different parts of this assignment will be worth different amounts of
  points.
You can implement each part independently, so concentrate on the higher-point
  targets first.
In total, the assignment is worth 50 points.
Here is the breakdown and some commentary.

Most important stuff, useful for writing later code: 38/50 pts (76%)
 3 annot is None (simple code)
12 annot is type (important; simple code)
12 annot is list (important; interesting code, for modeling later
       annotations)
11 annot is dict (important; much like list, part simpler/part more complex)

Useful stuff (all similar to list; set/frozenset are simpler): 6/50 pts (12%)
 2 annot is tuple
 2 annot is set
 2 annot is frozenset

Different: requires dealing with exceptions in a special way: 6/50 (12%)
 3 annot is lambda
 3 annot is a class whose __check_annotation__ method is called
     (test by using Check_All_OK/Check_Any_OK)


Extra credit:
 1 annot is str (code is not terribly complex but is intricate/a bit strange)
   rewriting bag to implement the check annotation protocol (see 
    Check_All_OK/Check_Any_OK)

So, you can still get an C (76%) by doing the first 4, a B+ (88%) by doing
the next 3. To get 100% requires doing all 9. Notice that the batch self check
file tests all these, in the general order stated above (except it checks tuples
before dicts).


Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).
The code you write should be as compact and elegant as possible, using 
  appropriate Python idioms.







Problem #1: Check_Annotation
Problem Summary:
Write a class named Check_Annotation that decorates a function, such
  that when the decorated function is called, the decorator class check's the
  decorated function's annotation, using the annotation language described
  below in detail.
We can use this decorator by writing either
  def f(params-annotation) -> result-annotation:
      ...
  f = Check_Annotation(f)
or
  @Check_Annotation
  def f(params-annotation) -> result-annotation:
      ...
which is a special Python syntactic form that expands to the former assignment.
Thus, when the decorated f is called, Python calls
  Check_Annotations.__call__ in the decorator, which first checks the
  annotations (and raises an exception if it is not met) and second
  computes/returns the decorated function f: the original one written.

This class defines four major attributes:
the checking_on instance name to turn off/on annotation checking in
      all decorated functions; it starts on.


the __init__ method to remember the function being decorated and
      initialize a per-function name that helps controls annotation checking;
      it also starts on: for a function call to check its annotation, both
      checking_on and its per-function name must be True: if
      either is False the annotation is not checked.


the __call__ method that intercepts each call to the decorated
      function and decides whether to check the annotation, and if so
      implements annotation checking, both for parameters and returned results,
      if they are specified; if annotation checking succeeds, this method
      computes/returns the result of calling the decorated function.


the check method (specified in more detail below) that does the
       annotation checking: it either succeeds silently or raises an
       AssertionError exception with useful information specified
       in the details below.
    Note that the unconditional assertion,
        assert False, message
      is a simple way to raise AssertionError with a message.
    I wrote many nested helper functions in check, one for each
      data type annotation that can be checked: e.g., check_dict.



Details

Let's explore the meaning of the __call__ and check methods in 
  more detail.

The __call__ method intercepts calls to the decorated function;
  it specifies *args and **kargs to handle all calls,
  regardless of their parameter structure.
My method was about 40 lines (but about 17 lines were comments/blank, and
  7 comprise the param_arg_binding local function supplied in the
  download; this function computes an ordereddict of the parameter
  names (each associated to its argument) in the order that the parameters
  are defined in the function.
The __call__ method
determines whether to check the annotations (see above); if not just
       call the decorated function and return its result.

determines the parameters of the function and the matching arguments
      they are bound to.
    The param_arg_bindings function (written locally in this method)
       returns an ordered dictionary of parameter/value bindings; ordered means
       that when iterated, keys always appear in the same order: the order the
       parameters appear in in the function's definition.
    It uses the various attributes in the inspect module to do the job.
    You might be interested in reading the documentation for the inspect
      module: it is quite interesting and many of its (powerful) features are
      new to Python.

determines the annotations of the parameters by using the
      __annotations__ attribute of any function object.
    This name is bound to a dictionary containing as keys every annotated
      parameter name; the associated value for each parameter name is its
      annotation.
    If we defined the function f using
       def f(x:int,y,z:int):->str... its __annotations__
      dictionary is

{'x': <class 'int'>, 'z': <class 'int'>, 'return': <class 'str'>>}
Notice that parameter y has no annotation so it does not appear as a key
  in this dictionary, and the key return is associated with the
  annotation for the returned value (after the ->).


If any checked annotations (parameters or returned result) raise the
      AssertionError handle it by printing the relevant source lines
      for the function (see the getsourcelines function in the 
      inspect module's documentation) and reraise the exception,
      skipping the rest of the code in this method.
  Checks every parameter that has an annotation
  
  Call the decorated function to compute its returned result (and save it).
  
  If 'return' is in the dictionary of annotions:
     (a) add the result as the value associated with the key _return in
          the dictionary of parameter and argument bindings; (b) check the
          annotation for return
  
  Return the result.    
  




The check method has the following header
  def check(self,param,annot,value,check_history=''):
where
self  is an instance of the Check_Annotation class
param is a string that specifies the name of the parameter being
        checked (or '_return' for checking the returned value)
annot is a data structure that specifies the annotation
value is the value of param that the annotation should be
        checked against (to ensure it is legal)
check_history is a string that embodies the history of checking the
       annotation for the parameter to here (it is extended by concatenation in
       each recursive call to provide context for any annotation violations to
       be checked later); it is printed after the details of any annotation
       violation, to suppy context for the failure.



Each call to check decodes the annot to check, and checks it
  against the value: check's body is one big
    if/elif/.../else determining which local function to call to check
    the specific annotation (and letting that local function do the real work).
Most annotations are checked by calling a function defined locally in
  check that can use the parameters of check freely, because
  these functions are defined in check's local scope (in fact these local
  functions are often parameterless: many get all the information they need
  from check's parameters).
The more complicated local functions also call check; so check
  calls a local function which can call check: this is indirect
  recursion.
My method was about 100 lines: about 13 lines were comments/blank, and 60 more
  appeared in 5 locally declared functions -including one to solve the extra
  credit part of this assignment- so I had about a dozen lines per local
  function.


The annotation checking language comprises the following components
  (for Python's built-in types).
I strongly suggest writing/testing each component before moving on to
  the next: all are similar and understanding/testing/debugging list
  (the first really interesting one) will supply tremendous insight for writing
  all.
Write the required exception messages exactly to match the ones shown.

annot is None: do nothing (succeed silently).
    note that def f(x): has no annotation to check for its parameter
    x, but def f(x:None): has an annotation to check for x,
    but it never fails.
    None has more interesting uses inside more complicated data types,
      illustrated below (see the last example for list).


annot is any type (e.g., type(annot) is type):
    fail if value is not an instance of the specified type, with an
       exception messages matching the following examples.
    The isinstance function (covered in the inheritance lectures)
       generalizes checking the type of an object.
    Instead of writing type(x) is someclass we write
       isinstance(x,someclass): it checks whether x's object is
       constructed from someclass or any base class of
       someclass, which is the correct test to perform here.


For def f(x:int):... called as f('abc') or f(x='abc')
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 'abc'
  was type str ...should be type int
For def f(x:list):... called as f({1,2})
 the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = {1, 2}
  was type set ...should be type list

All exception messages described in the sections below follow this same general
  format, although the more complicated ones supply extra context via the
  check_history parameter.

annot is a list (not the list class object, but an
        instance of list: a real list of one or more values; see the
       examples below) where each element in list is an annotation.
    Fail if
    value is not a list
    annot has just one element-annotation, and any of the elements in
           the value list fails the element-annotation check
    annot has more than one element-annotation, and
        the annot and value lists have a different number
               of elements, or
          any element in the value list fails its corresponding
               element-annotation check
        
    


Here are some examples of failures:
For def f(x:[int]):... called as f({1,2})
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = {1, 2}
  was type set ...should be type list


For def f(x:[int]):... called as f([1,'a'])
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 'a'
  was type str ...should be type int
list[1] check: &ltclass 'int'>
Note that when each element in the list is tested, it appends the index it is
  checking and the annotation it is checking to the check_history
  (which prints after the actual annotation that fails: here the line starting
  list[1] check: ...): it means the element at index 0 did not
  fail this annotation but the element at index 1 did.


For def f(x:[int,str]):... called as f([1])
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong number of elements): value = [1]
  annotation had 2 elements[&ltclass 'int'>, &ltclass 'str'>]


For def f(x:[int,str]):... called as f([1,2])
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 2
  was type int ...should be type str
list[1] check: &ltclass 'str'>



Note that the annotation def f(x:list):... and the annotation 
  def f(x:[None]):... have the same meaning (but the former is faster to
  check): the first checks only that x is an instance of list;
  the second checks that x is an instance of list and then checks
  each of its values agains the annotation None, which according to that
  rule's annotation does not checking and never fails -so really the checks are
  the same.

Likewise note that for def f(x:[int,None]):... called as
  f([1,'a']) no exception is raised, because the annotation for the list
  element at index 1 is None, which according to that rule's
  annotation does no checking of the list's value at index 1 and never
  fails.


Note also that for def f(x:[[str]]):... called as
  f([['a','b'],['c','d']]) no exception is raised, because the annotation
  says x is a list containing lists that contain only strings.
The code to check list annotations will indirectly call itself (recursively) in
  the process of checking this annotation.
Think about this now, when there are few data types being processed; it will be
  natural to perform other recursive annotation checks in the check
  method.
In fact, spend a good amount of time simplifying the local function that
  performs this check, because most of the other annotations listed below look
  very similar.


Finally, note if we called f([['a',1],['c','d']]) the exception message
  would be
AssertionError: 'x' failed annotation check(wrong type): value = 1
  was type int ...should be type str
list[0] check: [<class 'str'>]
list[1] check: <class 'str'>
which indicates that the annotation of list[0] was being checked when the
  annotation for list[1] was being checked (each of its values should be
  a list of str), when Python found a non-string that violated
  the annotation.


annot is a tuple (not the tuple class object, but an
        instance of tuple: a real tuple of values), where each element
        in annot is an annotation.


Structurally, checking tuples is equivalent to checking lists (all 3 rules
   apply).
In fact, I parameterized the local function that I originally wrote for checking
  lists to work for checking tuples as well).
Of course, the error messages should use the word list and tuple
  where appropriate.
Caution: remember for tuples of one value we must write
     f(x:(int,)):...; notice the comma after int.


annot is a dict (not the dict class object, but an
        instance of dict: a real dictonary; see the examples below),
        with exactly one key: both the key and its associated value are each
        an annotation.
    Note, this annotation should work for subclases of dict, e.g.,
       defaultdict.
    Check it not by type(annot) is dict but using the isinstance
       function (covered in the inheritance lectures):
       isinstance(annot,dict)
    Fail if
    value is not a dict or a subclass of dict
    annot has more than one key/value association: this is actually
           a bad/illegal annotation, not a failed annotation
    annot has one key/value association, and
            any key in the value dictionary fails the
                     key-annotation check or
              any value in the value dictionary fails the
                     value-annotation check
           
    


Here are some examples of failures:
For def f(x:{str : int}):... called as f(['a',0])
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = ['a', 0]
  was type list ...should be type dict


For def f(x:{str : int, int : int}):... called as f({'a':0})
  the exception message would be:
AssertionError: 'x' annotation inconsistency: dict should have 1 item but had 2
  annotation = {<class 'str'>: <class 'int'>, <class 'int'>: <class 'int'>}


For def f(x:{str : int}):... called as f({1:0})
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 1
  was type int ...should be type str
dict key check: <class 'str'>


For def f(x:{str : int}):... called as f({'a':'b'})
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 'b'
  was type str ...should be type int
dict value check: <class 'int'>
  
Of course, if a dictionary had many keys, it would check the required
  annotations for each of its keys and their associated values.


annot is a set (not the set class object, but an
        instance of set: a real set of values; see the examples below)
        where its has exactly one value that is an annotation.
    Fail if
    value is not a set
    annot has more than one value: this is actually
           a bad/illegal annotation, not a failed annotation
    annot has one value, and any value in the value set
           fails the value-annotation check
    


Here are some examples of failures:
  
For def f(x:{str}):... called as f(['a','b'])
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = ['a', 'b']
  was type list ...should be type set


For def f(x:{str,int}):... called as f({'a',1})
  the exception message would be:
AssertionError: 'x' annotation inconsistency: set should have 1 value but had 2
  annotation = {<class 'str'>, <class 'int'>}


For def f(x:{str}):... called as f({'a',1})
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 1
  was type int ...should be type str
set value check: &ltclass 'str'>
  

annot is a frozenset (not the frozenset class object,
        but an instance of frozenset: a real frozenset of values) where
        its one value is an annotation.


Structurally, checking frozensets are equivalent to checking sets (all 3 rules
   apply).
In fact, I parameterized the local function that I originally wrote for checking
  sets to work for checking frozensets as well, similarly to the general
  function I wrote for checking lists/tuple.
Of course, the error messages should use the word set and
  frozenset where appropriate.


annot is a lambda (or any function object) that is a
      predicate with one parameter and returning a value that can be
      interpreted as a bool.
    Fail if
    annot has zero/more than one parameters: this is actually
           a bad/illegal annotation, not a failed annotation
    Calling the lambda/function on value returns False
    Calling the lambda/function on value raises an exception
    


Note that we can recognize a function/lambda object by calling the
   inspect module's isfunction predicate; we can determine the
   number of parameters in a function/lambda object by accessing its
   __code__.co_varnames attribute.
You might be interested in reading the documentation for the inspect
  module: it is quite interesting and many of its (powerful) features are new
  to Python.


Here are some examples of failures:  in the first two, the argument fails the
  lambda directly; in the others the argument is a list on which the
  lambda is checked for every value and fails for one.

For def f(x:lambda x,y : x>0):... called as f(1)
  the exception message would be:
AssertionError: 'x' annotation inconsistency: predicate should have 1 parameter but had 2
  predicate = <function <lambda> at 0x02BDDC90>


For def f(x:lambda x : x>0):... called as f(0)
  the exception message would be:
AssertionError: 'x' failed annotation check: value = 0
  predicate = <function <lambda> at 0x02BDDC90>


For def f(x:[lambda x : x>0]):... called as f([1,0])
  the exception message would be:
AssertionError: 'x' failed annotation check: value = 0
  predicate = <function <lambda> at 0x02BDDC90>
list[1] check: <function <lambda> at 0x02BDDC90>
Note that in this example we are checking the lambda annotation for
  every value in a list, just as the annotation [int] would
  check that every value in a list was an instance of the int
  class.


For def f(x:[lambda x : x>0]):... called as f([1,'a'])
  the exception message would be:
AssertionError: 'x' annotation predicate(<function <lambda> at 0x02C9DC90>) raised exception
  exception = TypeError: unorderable types: str() > int()
list[1] check: <function <lambda> at 0x02BDDC90>

Note that for def f(x:[lambda x : isinstance(x,int) and x>0]):... called as
   f([1,'a']) the exception message would be the more reasonable:
AssertionError: 'x' failed annotation check: value = 'a'
  predicate = <function <lambda> at 0x02BDDC90>
list[1] check: <function <lambda> at 0x02BDDC90>



annot is not any of the above (or , specified in the extra
    credit part below).
    Assume it is an object constructed from a class that supports annotation
      checking, by that class defining the the __check_annotation__
      method.
    Fail if
    There is no __check_annotation__ method in the class: e.g., 
          calling the __check_annotation__ method raises the
          AttributeError exception (the object was not constructed from a
          class that supports the annotation checking protocol): this is
          actually a bad/illegal annotation, not a failed annotation
    calling its __check_annotation__ method fails
    calling its __check_annotation__ method raises any other
         exception
    


Note that I have written the Check_All_OK and Check_Any_OK
  classes that support the annotation checking protocol; check them out.

Here are some examples of failures.
The first assumes the Bag class does not support the annotation
  checking protocol; the second assumes it does; the third assumes it supports
  the protocol but raises some other exception (not AssertionError).
For def f(x:Bag([str])):... called as f(Bag('a'))
  the exception message would be:
AssertionError: 'x' annotation undecipherable: Bag(<class 'str'>[1])


For def f(x:Bag([str])):... called as f(Bag(['a',1]))
  the exception message would be:
AssertionError: 'x' failed annotation check(wrong type): value = 1
  was type int ...should be type str
Bag value check: <class 'str'>


For def f(x:Bag([lambda x : x > 0)):... called as
  f(Bag(['a',1]))
  the exception message would be:
AssertionError: 'x' annotation predicate(<function <lambda&rt; at 0x02C5C390>) raised exception
  exception = TypeError: unorderable types: str() > int()
Bag value check: <function <lambda> at 0x02C5C390>


The checkannotation.py module defines the Check_All_OK and
  Check_Any_OK classes, which implement the check annotation protocol.
Note that with the Check_Any_OK class, we can specify that every value in
  a list must contain a string or integer.
So for def f(x:[Check_Any_OK(str,int)]):... called as
  f(['a',1]) there is no exception raised.
Likewise with the Check_All_OK class, we can specify that every value in
  a list must be an integer and must be bigger than 0.
So for def f(x:[Check_All_OK(int,lambda x : x > 0)]:... called as
  f([1,2]) there is no exception raised.



Extra credit:
Implement the following annotations as well.
annot is a str object, which when evaluated using a 
      dictionary in which all the parameters are defined (and the returned 
      result is the value of the key '_return') returns a value that can
      be interpreted as a bool.
    This specifiction is similar to lambdas/functions, but more general, because
      the expressions can name multiple names, not just the parameter.
       Fail if
    Evaluating the string returns False
    Evaluating the string raises an exception
    


Here are some examples of failures.
For def f(x,y:'y>x'):... called as f(0,0)
  the exception message would be:
AssertionError: 'y' failed annotation check(str predicate: 'y>x')
  args for evaluation: x->0, y->0
Notice that with this form of annotation, we can check properties that depend on
  values of multiple parameters (not just type information).
The values of all the parameters are included in the error message.
Likewise we can check properties that depend on the returned values.
For def f(x,y)->'_return < x or _return < y': return x + y called as
  f(3, 5) the exception message would be:
AssertionError: 'return' failed annotation check(str predicate: '_return < x or _return < y')
  args for evaluation: x->3, y->5, _return->8
Notice the value of _return is listed with all the parameter values.
Of course, such strings are easier to read than what Python prints for 
  lambdas/functions.


For def f(x:'x>0'):... called as f('a')
  the exception message would be:

AssertionError: 'x' annotation check(str predicate: 'x>0') raised exception
  exception = TypeError: unorderable types: str() > int()


Implement __check_annotation__ for the Bag class.
    If you do this extra credit part, but the definition of the Bag 
      class at the top of the file that you submit: checkannotation.py.
.


A Largish Example: Full Output
When I put the following code in the script (before the driver) in the
  checkannotation.py module).
  @Check_Annotation
  def f(x:[[int]]): pass
    
  f([[1,2],[3,4],[5,'a']])
the result printed was the following , although I edited out some of the code
  that Python displays from my program: lines that start with ...
--------------------------------------------------------------------------------
    @Check_Annotation
    def f(x:[[int]]): pass
--------------------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 209, in <module>
    f([[1,2],[3,4],[5,'a']])
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 183, in __call__
    ...my call to self.check
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 138, in check
    ...my call to check a list
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 70, in check_sequence
    ...my call to check a value in the list
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 138, in check
    ...my call to check a list
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 70, in check_sequence
    ...my call to check a value in the list
  File "C:\Users\Pattis\workspace\33program4\checkannotationsolution.py", line 137, in check
    ...my call to check a type (which failed the assertion causing the following exception)
AssertionError: 'x' failed annotation check(wrong type): value = 'a'
  was type str ...should be type int
list[2] check: [<class 'int'>]
list[1] check: <class 'int'>
Feel free to put the small tests show in this document (or in the bsc.txt
  file) in the same position (before the driver) to test the annotations as you
  write them.

Testing
The sections above present various tests for elements of the annotation
  language: they are easy to specify because the parameter annotations
  involve only the header: the body can be pass; when checking return
  annotations, we can put one return statement in the body of the code, to
  return a value that does/doesn't satisfy the annotation.

I provided an if __name__ == '__main__': section in the
  checkannotation.py module.
Again, it is easy to test a simple function there by annotating it and then
  calling it (described in the previous section).
  
I provided code to call driver.driver() which can be used to run
  individual and batch_self_check, using the file bsc.txt.

Here is an example of running individual tests.
After importing and abbreviating the name of the Check_Annotation
  class it defines a simply annotated function, decorates it, and then calls
  the function with good and bad arguments (which in the latter case rasise
  an exception because of an annotation failure).
Command[!]: from checkannotation import Check_Annotation as ca
Command[from checkannotation import Check_Annotation as ca]: def f(x:int): pass
Command[def f(x:int): pass]: f = ca(f)
Command[f = ca(f)]: f(1)
Command[f(1)]: f('a')
Traceback (most recent call last):
  File "C:\Users\Pattis\workspace\courselib\driver.py", line 225, in driver
    exec(old,local,globl)
  File "<string>", line 1, in <module>
  File "C:\Users\Pattis\workspace\33program4\checkannotation.py", line 183, in __call__
    self.check(p,annot[p],self._args[p])
  File "C:\Users\Pattis\workspace\33program4\checkannotation.py", line 137, in check
    '\n  was type '+type_as_str(value)+' ...should be type '+str(annot)[8:-2]+'\n'+check_history
AssertionError: 'x' failed annotation check(wrong type): value = 'a'
  was type str ...should be type int
Command[f('a')]:

When runing batch_self_check, you might want to start by removing
  all but the earliest test (or comment them out with #) as you start
  testing your code).

IMPORTANT for running batch-self-check:
To use the batch_self_check you must remove the part of your
   __call__ method that prints out the source lines when an assertion
   exception is raised: otherwise Python will raise a strange exception
   (OSError), which disrupts batch_self_check.
Comment out the following lines so that your code looks like
except AssertionError:
#     print(80*'-')
#     for l in inspect.getsourcelines(self._f)[0]: # ignore starting line #
#     print(l.rstrip())
#     print(80*'-')
    raise
IMPORTANT:
Comment-out these lines in the code you submit to Checkmate.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/program.html
##-----------------TITLE------------------------##
Program 1
##------------------TEXT------------------------##
Program 1

Iteration and Major Data Types:
List, Tuple, Set, and Dict (and Open for files)


ICS-33: Intermediate Programming









Introduction
This programming assignment is designed to ensure that you know how to use
  combinations of Python's most important data types to model and
  compactly write code that solves a wide variety of different programming 
  problems.
The kind of abstract thinking that goes into modeling solutions to these
  programming problems with these data types (and iteration over them) is
  critical to your development as computer scientists.

There are five parts to this assignment.

In each you will be asked to write a module that contains a few functions
  and a script at the bottom, which ties these functions together to solve
  the problem.

You should download the 
  program1 project folder and use it to create an
  Eclipse project.
The project folder contains files for all the modules in which to write your
  functions and scripts; it also contains all the data files that you need to
  test/debug your modules; finally, it contains all the batch self-check files
  I will use when grading your programs.
In your modules, you may import additional standard/courselib modules and you
  may write additional helper functions.

I recommend that you work on this assignment in pairs, and I recommend that you
  work with someone in your lab section (so that you have 4 hours each week of
  scheduled time together).
These are just recommendations.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.

Only one student should submit all parts of the the assignment, but both
  students' UCInetID and name should appear in a comment at the top of
  each submitted .py file.
A special grading program reads this information.
The format is a comment starting with Submitter and Partner (when
  working with a partner), followed by a colon, followed by the student's UCInetID (in all lower-case), followed by the student's name in
  parentheses (last name, comma, first name -capitalized appropriately).
If you omit this information, or do not follow this exact form, it will require
  extra work for us to grade your program, so we will deduct points.

For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each .py file would appear as:
# Submitter: romeo1(Montague, Romeo)
# Partner  : jcapulet(Capulet, Juliet)
# We certify that we worked cooperatively on this programming
#   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
Please turn in each program as you finish it, so that I can more
  accurately assess the progress of the class as a whole during this assignment.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).
The code you write should be as elegant and compact as possible, using 
  appropriate Python idioms.
You should familiarize yourselves with the safe_open function in the
  goody module and all the functions in the prompt module, both
  of which you should have installed in your courselib folder as part
  of the Eclipse/Python installation.
Recall how to use the sep and end parameters in the print
  function.

Reread the section on Time Management from Programming Assignment 0
  before starting this assignment.

IMPORTANT:
Before starting this assignment, download the
  xref project folder which contains a small Python
  script xref.py that produces a cross-reference of all the words
  (converted to lower case) in a file (where words appear with spaces between
  them: see xrefin.txt for an example): the words are listed in
  alphabetic order followed by a set (i.e., no duplicates) of the line numbers
  it appears on (listed in increasing numeric order).
Before solving the problems in this programming assignment, ensure you
  understand all the details of how this program works: look at features and
  functions like safe_open, defaultdict (and how it is used),
  enumerate, rstrip and lower, split and
  join, sorted, for loops with two (unpacked) indexes, the
  two comprehensions (in the call to max and join), and
  format.
These are the building blocks for many parts of this assignment; explore
  and experiment with this code to understand how all the parts work together
  to achieve the desired result.
Run this code on more complicated data files.

IMPORTANT:
This assignment has 5 parts: pairs should work on each part together, not split
  them up and do them separately.
Parts 1-3 are going to be worth 12 points each; parts 4-5 are to be worth 7
  points each.
This skewing of points towards the simpler parts means students finishing the
  first 3 parts correctly will yield a 72% average; those finishing the first 4 
  parts correctly will have an 86% average; but to get an A on this  assignment
  requires solving all parts correctly.
Remember that I'm going to be running MOSS on all the parts of this assignment,
  checking for duplicate solutions.

IMPORTANT:
I will grade all these programs automatically, using the batch self-check files
  provided in the download.
Use the driver program (explored in Programming Assignment #0) to run
  the batch-self check files in this assignment; debug any errors that they
  produce.
But...test your code first to match the Sample Interactions shown for
  each problem; when those results are correct, use the batch self-check files.
Finally, if a submitted Python module contains even one syntax error or bad
  import, it will fail all its batch self-checks; ensure that you
  submit modules with no syntax or bad import errors (Python sometimes
  adds strange imports at the top of your file; ensure that all your imports
  are reasonable).







Problem #1: Reachability
Problem Summary:
Write the required functions and script that prompts the user for the name of a
    file representing a graph;
  reads the file (storing the graph in a dictionary);
  prints the graph/dictionary in a special form;
  repeatedly prompts the user for a starting node name (rejecting those that
    are not keys in the graph);
  computes and prints all the node names that are reachable from it by
    following zero or more edges in the graph (e.g., a node is reachable from
    itself).

Input and Output:
Read a file of pairs of node names (representing edges) in a directed
  graph, building a dictionary whose key is a str source node name and
  whose associated value is a set of str destination node names
  that are each reachable directly from the source node name key.
We annotate this dictionary as {str:{str}}.

In the file, two nodes names appear on each line: first the source node name,
  then the destination node name, with these node names (which may be entire
  words, not just single characters) separated by one semicolon character.
For example, the input file graph1.txt contains the following
  lines (which could appear in this order, or any other order):
  c;f
  b;d
  a;c
  c;e
  d;g
  a;b
  e;d
  f;g
  f;d
which represent the graph



Print the graph, one source node name per line followed by the set of all the
  destination node names that the source can immediately reach.
The graph above would print as
  Graph: source -> {destination} edges
    a -> ['b', 'c']
    b -> ['d']
    c -> ['e', 'f']
    d -> ['g']
    e -> ['d']
    f -> ['d', 'g']

Note that the source node names are sorted alphabetically; the
  set of desintation node names associated with each source appear in a
  list whose values are also sorted alphabetically: it makes no
  sense to talk about sorted sets.
Note that because node g is not a source node (it is only a
  destination node), it does not appear first on any line (and appears only
  in the sets for source nodes d and f).

There are multiple data files for this program: graph1.txt (shown
  above), graph2.txt and graph3.txt; test/debug your program on
  the first file; when you are done, test it on the remaining files.
Draw the graph represented by each file to ensure that your code correctly
  prints it and computes the node names reachable from any source node (which
  you can do by eyeballing the graphs: they are small).

Repeatedly prompt the user for a starting node name in the graph (until the user
  enters quit) and compute and print all the node names that are
  reachable from it by following edges in the graph.
Reject any node name that is not a key in the graph.
An example interaction (processing the graph above) might be
  Enter the name of a starting node: e
  From e the reachable node names are {'g', 'e', 'd'}

  Enter the name of a starting node: x
    Entry Error: 'x';  Illegal: not a source node
    Please enter a legal String

  Enter the name of a starting node: a
  From a the reachable nodes are {'g', 'f', 'e', 'd', 'c', 'b', 'a'}

  Enter the name of a starting node: quit
Functions and Script:
Write the following functions and script.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written Pythonic code.
read_graph has an open (file) parameter; it returns the dictionary
     representing the graph
     (body is 5 lines).

graph_as_str has a dictionary parameter (representing the graph); it
    returns a multi-line string (each line is ended by '\n'), which when
    printed shows the contents of the graph in the appropriate textual form
    (body is 4 lines; can you do it in 1?).

reachable has a dictionary parameter (representing the graph) and
    a str start node in the graph (technically a key in the dictionary);
    it returns a set of all the nodes reachable from it by following
    edges in the graph. Hint: I used the get dictionary function, which 
    allows a second argument that specifies what to do if the first argument
    (key) is not in the dictionary, because this function should not mutate
    the dictionary
    (body is 9 lines).

Write a script at the bottom of this module
   (in if __name__ == '__main__':) that prompts the user for the
   file storing the graph and start node (rejecting any string that is not a
   source node in the graph or the word quit), calls these functions
   to solve the problem, and print the appropriate information: the graph
   and the set containing all the node labels
   (body is 9 lines).

Here is the basic algorithm for computing reachability; it is simple to explain
  and not (very) complicated to implement.
But, you have to understand these instructions and carefully translate them into
  Python.
You should hand-simulate this algorithm using the graph above, and verify that
  it produces the results you expect, before coding the algorithm in Python.
You might be tempted to use recursion, but please don't: unless recursion is
  done very carefully, reachable will run forever on graphs that contain
  cycles: one of the input files is a graph that contains cycles.
To compute all the reachable nodes in a graph, create a set
   (initially empty) of reached nodes and a list (initially containing
   the  parameter start node) of nodes that we are going to explore (to find
   nodes they can reach).

While the exploring list still has nodes, remove the first one
    (recall the pop method for lists) and put it into the
    reached set; for all its associated destination nodes that are not
    already in the reached set, put them in the exploring list.

When the exploring list becomes empty (can you argue that this always
    will happen -there is no infinite looping), return the reached set.


When debugging this algorithm, print the reachable set and
  exploring list after every interesting change, or use the debugger to
  observe these changes.
Sample Interaction:
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should "match" this one (sets will match if they have the same
  contents, independent of their order).
You should also check that it works for other starting nodes, and
  a variety of starting nodes in the other graphs.

   Enter the name of a file with a graph: graph1.txt

  Graph: source -> {destination} edges
    a -> ['b', 'c']
    b -> ['d']
    c -> ['e', 'f']
    d -> ['g']
    e -> ['d']
    f -> ['d', 'g']


  Enter the name of a starting node: e
  From e the reachable nodes are {'g', 'e', 'd'}

  Enter the name of a starting node: x
    Entry Error: 'x';  Illegal: not a source node
    Please enter a legal String

  Enter the name of a starting node: a
  From a the reachable nodes are {'g', 'f', 'e', 'd', 'c', 'b', 'a'}

  Enter the name of a starting node: quit







Problem #2: Instant Runoff Voting
Problem Summary:
Write the required functions and script that prompts the user for the name of a
  a file representing the preferences of a sequence of voters;
  reads the file (storing its information in a dictionary);
  prints the voter preferences/dictionary in a special form;
  repeatedly displays the vote count for ballots (sorted both by candidate name
  and by vote count), eliminating from the election the candidate(s) receiving
  the fewest votes, until one candidate (the winner) or no candidates
  remain.

This form of election is known as instant runoff voting.
Every voter submits preferences that rank all the candidates in the election,
  from highest preference candidate (most favorite) to lowest preference
  candidate (least favorite): we will use a list for this purpose,
  where "earlier in the list" means "higher preference".
All the candidates appear on the first ballot, so each voter votes for his
  highest preference candidate.
Then the candidate(s) with the fewest number of votes are removed from the
  election: if more than one candidate receives the least number of votes, all
  with that number are removed from the election.

During the second ballot, votes are allowed only for the
  remaining candidates: there is at least 1 fewer candidate.
If a  voter's highest preference candidate has been removed from the election,
  then his/her second ranked candidate should receive the vote; likewise, if
  his/her second ranked candidate has been removed from the election, then
  his/her third ranked candidate should receive the vote .... this process
  continues until a voter voters for his/her highest preference candidate who
  is still in the election.

The number of votes cast in each ballot should always be the same as the number
  of voters: each voter votes for his/her most preferred candidate who is still
  in election.
This ballot process continues until either 1 candidate remains, or 0 candidates
  remain (meaning that all the remaining candidates tallied the same number
  of votes, and all were removed).
Do not attempt to write Python code to solve this problem until you understand
  this voting algorithm and can apply it to the data specified below.

Input and Output:
Read a file of voters and their ranking of the candidates (highest to lowest
  preference), separated by semicolons, building a dictionary whose key is each
  voter and whose associated value is a list of candidates ranked by
  that voter (they appear in the file in order, from highest to lowest
  preference).
We annotate this dictionary as {str:[str]}.

In the file, the voter's name appears first, followed by the names of all the
  candidates in the election in highest to lowest preference (names may be
  entire words, not just single characters) separated by one semicolon
  character.
For example, the input file votepref1.txt contains the following
  lines (which could appear in this order, or any other):
  A;X;Y;Z
  B;Y;Z;X
  C;Y;Z;X
  D;Z;X;Y
  E;Z;X;Y
The first line means, voter A ranks candidate X first,
  candidate Y second, and candidate Z third.
The second line means, voter B ranks candidate Y first,
  candidate Z second, and candidate X third.
Each line will have a unique voter and a permutation of all the 
  candidates in the election.

Print each voter on a separate line, followed by his/her preferences.
That is, each line contains the voter and his/her complete ranking of the
  candidates.
For example, the file above would print as:
  Voter Preferences
     A -> ['X', 'Y', 'Z']
     B -> ['Y', 'Z', 'X']
     C -> ['Y', 'Z', 'X']
     D -> ['Z', 'X', 'Y']
     E -> ['Z', 'X', 'Y']

Note that the voter names are sorted in alphabetical order;
  the list of preferences appears in the same order they appeared in the
  file.
There are multiple data files for this program: votepref1.txt, 
  votepref2.txt, votepref3.txt and votepref4.txt;
  test/debug your program on the first file; when you are done, test it on the
  remaining files.

Algorithm:
Start with a set of all the candidates.
Evaluate the ballot to determine how many votes each candidate received.
Print this vote count two ways: sorted by name in alphabetical order and
   sorted by votes in numerical order (in decreasing order).
Remove the candidate(s) receiving the fewest votes, and repeat this process
  until only one or no candidates remain.
Finally, print the outcome of the election: a single candidate winner or a tie.
An example interaction (processing the preferences above) might be
  Vote count on ballot #1 with candidates (alphabetical order): remaining candidates = {'X', 'Y', 'Z'}
    X -> 1
    Y -> 2
    Z -> 2

  Vote count on ballot #1 with candidates (numerical order): remaining candidates = {'Y', 'X', 'Z'}
    Y -> 2
    Z -> 2
    X -> 1

  Vote count on ballot #2 with candidates (alphabetical order): remaining candidates = {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Vote count on ballot #2 with candidates (numerical order): remaining candidates = {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Winner is  {'Y'}
The first ballot consisted of all three candidates, X, Y, 
  and Z.
For this ballot, the votes were counted and printed; candidate X
  received the fewest number of votes so he/she is eliminated from the next
  ballot.
The second ballot consisted of two candidates, Y and Z.
For this ballot: A votes for Y, who is his/her second highest
  preference because X, his first highest preference, was removed from
  the election; B through E vote for their highest preference
  candidate, who all remain in the election.
These votes are counted and printed; candidate Z received the fewest
  number of votes so is eliminated from the next ballot.
There is only one candidate remaining so Y is declared the winner.
An alternative outcome might be
No winner: election is a tie among the candidates remaining on the last
     ballot
Functions and Script:
Write the following functions and script.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written Pythonic code.
read_voter_preferences has an open (file) parameter; it returns the
       dictionary representing each voter and his/her preferences
      (body is 5 lines).

dict_as_str has a dictionary, key function
      (default None) and bool (default False) as
       parameters; it returns a multi-line string (each line is ended by
       '\n'), which when, which when printed shows the contents of the
       dictionary in the appropriate textual form.
    The key function determines the ordering and the bool determines
      whether to reverse it: like the key and reverse parameters
      used for sort/sorted in Python.
    This function is used to print both the voter preference dictionary and
      the vote count dictionary for each ballot.
    
    Important: The key function (and its use when iterating over the
      dictionary in dict_as_str) must assume that its argument is a
      key in the dictionary, not an item;
      otherwise the batch self-check test will fail even if your code works.
     (body is 4 lines; can you do it in 1?).

evaluate_ballot has a dictionary of voter preferences
         (see read_voter_preferences) and a set of the remaining
         candidates as parameters; it returns a dictionary whose keys are these
         candidates and whose values are the number of votes they received on
         this ballot, based on the description of the
         instant runnoff voting algorithm.
       Remember to count only one vote per voter, for his/her highest ranked
         candidate who is still in the election; hint: I used a break
         statement in one loop
       (body is 7 lines).

remaining_candidates has a dictionary as a parameter whose keys are
          candidates and whose values are the number of votes they received
          (see evaluate_ballot); it returns a set containing all those
          candidates remaining in the election (the one(s) receiving the
          fewest number of votes are absent).
       Note that if all the candidates receive the same number of votes, then
         this function returns an empty set.
       (body is 2 lines).

run_election  has an open (file) parameter; it returns a set
        that is empty (signifying no winner for this election) or contains one
        value (the winner of the election).
      In the process of computing its result to return, it calls the functions
        above and prints all the required information: see the
        Sample Interaction below
      (body is 13 lines).

Write a script at the bottom of this module
    (in if __name__ == '__main__':) that prompts the user for the
    file storing the voter preferences and calls run_election to
    do this task.

Sample Interaction:
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should match this one.
  Enter the name of a file with voter preferences: votepref1.txt

  Voter Preferences
    A -> ['X', 'Y', 'Z']
    B -> ['Y', 'Z', 'X']
    C -> ['Y', 'Z', 'X']
    D -> ['Z', 'X', 'Y']
    E -> ['Z', 'X', 'Y']
  
  Vote count on ballot #1 with candidates (alphabetical order): remaining candidates = {'Z', 'Y', 'X'}
    X -> 1
    Y -> 2
    Z -> 2

  Vote count on ballot #1 with candidates (numerical order): remaining candidates = {'Y', 'X', 'Z'}
    Y -> 2
    Z -> 2
    X -> 1

  Vote count on ballot #2 with candidates (alphabetical order): remaining candidates = {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Vote count on ballot #2 with candidates (numerical order): remaining candidates = {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Winner is  {'Y'}

You can also try processing the votepref2.txt file (which leads to
  a No winner result),  votepref3.txt, and votepref4.txt.








Problem #3: Finite Automata
Problem Summary:
Write the required functions and script that prompts the user for the name of a
   file representing a finite automaton: indicating its states and
       input->state transitions;
   reads the information in the file (storing the finite automaton in a
     dictionary);
   prints the finite-automaton/dictionary in a special form;
   prompts the user for the name of a file storing the start-state
      and inputs to process (each line in the file contains this combination);
   repeatedly processes these lines, computing the results of the finite
      automaton on each input, and then prints the results.
Note that a finite automaton is really a program; in this problem we are
  reading a program from a file and then executing it (running the finite
  automaton) on various inputs.
So, we are really writing a compiler/interpreter for a small programming
  language.

A finite  automaton (FA) is an machine that is sometimes called a
  Deterministic Finite Automaton (DFA; see the next problem for an NDFA: a
  non-deterministic finite automaton).
An FA is described by its states and its transitions:
  each transition for a state specifies an input and what
  state in the FA that input leads to.
We can illustrate an FA as a graph with state labels in circles and edge labels
  for transitions (see below).


Input and Output:
Read a file that describes a FA: each line contains a state and an
  arbitrary number of input->state transitions.
Build a dictionary such that each key is a str state and whose associated
  value is another dictionary specifying all the transitions from that state:
  this second dictionary has keys that are str inputs and associated
  values are str states.
The first token on each line is the str state and the remaining tokens
  (always coming in pairs) are str inputs and their resulting states.
All tokens (which can comprise any number of characters) are separated by one
  semicolon character.
We annotate this dictionary as {str:{str:str}}.


For example, the input file faparity.txt contains the following lines
  (which could appear in this order, or any other and still specify the same
  FA):
  even;0;even;1;odd
  odd;0;odd;1;even
Here is a picture of the parity FA.
It graphically illustrates the two states (even and odd)
  and their transitions, using inputs (0 and 1)
  that always lead back to one of these two states.





Here, the state even (meaning it has seen an even number of 1
  inputs so far) is a key in the main dictionary.
It's value is a dictionary with two key/value pairs 0->even
  and 1->odd.
It means that in the even state, if the input is a 0 the
  FA stays in the even state; if the input is a 1 the
  FA goes to the odd state.
And similarly (the next line) means that for the odd state, if the input
  is a 0 the FA stays in the odd state; if the input is a
  1 the FA goes back to the even state.
So, seeing an input of 0 keeps the FA in the same state;
  seeing an input of 1 flips the FA into the other state.


Print the finite automaton, one state (and its transitions) per line;
  the states are printed alphabetically and the transition dictionary
  for each state is printed as a list of input/state items (tuples)
  such that these are printed alphabetically by the inputs.

For example, the file above would print as:
  Finite Automaton Description
    even transitions: [('0', 'even'), ('1', 'odd')]
    odd transitions: [('0', 'odd'), ('1', 'even')]

Note that there are multiple data files for this program: faparity.txt
  and fadivisibleby3.txt; test/debug your program on 
  the first file; when you are done, test it on the last file.
Draw the FA represented by each for to ensure that your code correctly
  prints and computes with it.
Important: This task is not to write a Python code that simulates
  the Parity FA; it is to write code that simulates any FA, whose
  description it reads from a file.

Next, repeatedly read and process lines from a second input file, computing the
  results of the finite automaton running on the specified start-state and its
  inputs; then print out the results in a special form.
Each line in the file contains a start-state followed by a sequence of inputs
  (all separated by semicolons).
The start-state will be a state in the FA (it is a key in the outer dictionary)
  the inputs may specify legal or illegal transitions (may or may not be keys
  in some inner dictonary).

For example, the input file fainputparity.txt contains the following
  three lines:
  even;1;0;1;1;0;1
  even;1;0;1;1;0;x
  odd;1;0;1;1;0;1
The first line means, the start-state is even and the
  inputs are 1, 0, 1, 1, 0, and 1.

The result of processing each line is to print the start-state, and then each
  input and the new state it transitions to, and finally print the stop-state.
For the parity FA and the first line in this file, it should print
Start state = even
  Input = 1; new state = odd
  Input = 0; new state = odd
  Input = 1; new state = even
  Input = 1; new state = odd
  Input = 0; new state = odd
  Input = 1; new state = even
Stop state = even

Note that the second line contains an input x which is not a legal input
  allowed in any state; any such input should stop the simulation for that line
  only, continuing to start a new simulation for all following lines (as
  illustrated in the Sample Interaction).
Functions and Script:
Write the following functions and script.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written Pythonic code.
read_fa has an open (file) parameter; it returns the dictionary
     representing the finite automaton; hint: I used splicing and the
     zip function to build the inner dictionaries.
     (body is 6 lines).

fa_as_str has a dictionary parameter (representing the FA); it
    returns a multi-line string (each line is ended by '\n'), which when
    printed shows the contents of the FA in the appropriate textual form
    (body is 4 lines; can you do it in 1?).

process has a dictionary parameter (representing the FA),
    a str parameter (representing the start-state), and a list
    parameter (representing a list of str inputs); it returns a
    list that contains the start-state followed by tuples that
    show the input and resulting state after each transition.
    For the example shown above, process returns the following
    list.
['even', ('1', 'odd'), ('0', 'odd'), ('1', 'even'), ('1', 'odd'), ('0', 'odd'), ('1', 'even')]
    Finally, if an input is illegal (is not the key in some transition for the
    current state), say
    'x', for the parity FA, then process should terminate with
    the last tuple in the list indicating a problem:
     ('x', None)
   (body  is 9 lines).

interpret has a list parameter (the list result
    produced by  process); it returns a multi-line string (each line is
    ended by '\n'), which when printed illustrates the results of
    processing an FA on an input in the appropriate textual form.
    See how it prints the example list argument shown above in the
      output further above.
    Also see the Sample Interaction below to see how it prints
    input errors: see the middle example
   (body is 9 lines).

Write a script at the bottom of this module
    (in if __name__ == '__main__':) that prompts the user for the
    file describing the FA, prints it, prompts the user for the file containing
    lines of start-states and input, simulates the FA on each line, printing
    the results in the appropriate textual form
    (body is 7 lines).



Sample Interaction:
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should match this one.
  Enter the name of a file with a finite automaton: faparity.txt

  Finite Automaton
    even transitions: [('0', 'even'), ('1', 'odd')]
    odd transitions: [('0', 'odd'), ('1', 'even')]

  Enter the name of a file with the start-state and input: fainputparity.txt
  
  Starting new simulation
  Start state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = 1; new state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = 1; new state = even
  Stop state = even
  
  Starting new simulation
  Start state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = 1; new state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = x; illegal input: simulation terminated
  Stop state = None

  Starting new simulation
  Start state = odd
    Input = 1; new state = even
    Input = 0; new state = even
    Input = 1; new state = odd
    Input = 1; new state = even
    Input = 0; new state = even
    Input = 1; new state = odd
  Stop state = odd

You can also try the fadivisibleby3.txt finite automaton file, which
  determines whether an integer (sequence of digits) is divisible by 3:
   it is divisible if the  finite automaton stops in state rem0.
Its input file fainputdivisibleby3.txt tries the number
  12,435,711, which is divisible by 3 and number 823,
  which is not divisible by 3: dividing 823 by 3 leaves a
  remainder of 1.







Problem #4: Non-Deterministic FA
Problem Summary:
Write the required functions and script that solve, for a Non-Deterministic
   Finite Automaton, the same problem that was solved for a Deterministic Finite
   Automaton in Problem #3 (above).
Read about the differences between these two automata (below).
Hint: Adapt your code for the FA problem to solve the more general NDFA problem.

A non-deterministic finite automaton (NDFA) is machine described by its
  states and its transitions:
  each transition for a state specifies an input and a
  set of states (more than one is allowed) that input can lead
  to: sets with more than one states is what makes it
  non-deterministic.
We can illustrate a NDFA as a graph with state labels in circles and edge
  labels for transitions (see below).
The critical difference between an FA and an NDFA is that an NDFA can have
  multiple edges with the same label going to different states (we'll see how
  to represent and simulate such transitions below).


Input and Output:
Read a file that describes a NDFA: each line contains a state and an
  arbitrary number of input->state transitions.
Build a dictionary such that each key is a str state and whose associated
   value is another dictionary specifying all the transitions from that state:
   this second dictionary has keys that are str inputs and associated
   values that are sets of str states: all the states a particular
   input can lead to.
The first token on each line is the str state and the remaining tokens
  (always coming in pairs) are str inputs and states.
All tokens (which can comprise any number of characters) are separated by one
  semicolon character.
We annotate this dictionary as {str:{str:{str}}}.


For example, the input file ndfaendin01.txt contains the following lines
  (which could appear in this order, or any other and still specify the same
  NDFA):
  start;0;start;1;start;0;near
  near;1;end
  end
Here is a picture of the endin01 NDFA.
It graphically illustrates the three states (start, near,
  and end) and their transitions, using inputs (0
  and 1).





Here, the state start is a key in the main dictionary.
It's value is a dictionary with two key/value pairs: 0 mapping to the
  set containing start and near, and 1 mapping to
  the set containing just start.
It means that in the start state, if the input is a 0 the
  NDFA can stay in the start state or it can go to the near
  state; if the input is a 1 the NDFA must stay in the start
  state.
And similarly the next line means that in the near state, if the
  input is a 1 the NDFA must go into the end state.
The last line means that the end state has no transitions out of it.


Print the NDFA, one state (and its transitions) per line;
  the states are printed alphabetically and the transition dictionary
  for each state is printed as a list of input/set of state items
  (tuples) such that these are printed alphabetically by the inputs.
Note that the state end is a key in the main dictionary, whose
  associated transitions are an empty dictionary.


For example, the file above would produce:
  Non-Deterministic Finite Automaton
    end transitions: []
    near transitions: [('1', ['end'])]
    start transitions: [('0', ['near', 'start']), ('1', ['start'])]

Note that there are multiple data files for this program: ndfaendin01.txt
  and ndfatrain.txt and ndfare.txt;; test/debug your program on 
  the first file; when you are done, test it on the last file.
Draw the FA represented by each for to ensure that your code correctly
  prints and computes with it.

Next, repeatedly read and process lines from a second input file, computing the
  results of the non-determinisitc finite automaton on the specified
  start-state and its inputs ; then print out the results in a special form.
Each line in the file contains a start-state followed by a sequence of inputs
  (all separated by semicolons).
The start-state will be a state in the FA (it is a key in the outer dictionary)
  the inputs may specify legal or illegal transitions (may or may not be keys
  in some inner dictionary).

For example, the input file ndfainputendin01.txt contains the following
  two lines:
  start;1;0;1;1;0;1
  start;1;0;1;1;0;0
For example, the first line means, the start-state is start and the
  inputs 1, 0, 1, 1, 0, and 1.

The result of processing each line is to print the start-state, and then each
  input and the new states (plural) it could transition to (the could
  is what makes it non-deterministic), and finally print the stop-states.
For the ndfaendin01 NDFA and the first line in this file, it should print
  Start state = start
    Input = 1; new possible states = ['start']
    Input = 0; new possible states = ['near', 'start']
    Input = 1; new possible states = ['end', 'start']
    Input = 1; new possible states = ['start']
    Input = 0; new possible states = ['near', 'start']
    Input = 1; new possible states = ['end', 'start']
    Stop state(s) = ['end', 'start']

Note that the set of states it might be in are printed as a alphabetized
  list.
Also note especially that in the start state, if the input is a 0,
  then the NDFA can either remain in the start state or go into the
  near state.
For this program, we keep track of all states that the NDFA can be in,
  using a set of new possible states.
For the next input, 1, we can be either in the start state
  (from the start state; an input of 1 allows us to stay in the
  start state) or the end state (from the near state; an
  input of 1 allows us to transition to the end state).
Thus, we keep track of the set of states the NDFA can be in, and the
  new set of states the NDFA can be in after processing the next input.
In this example, because 'end' is included in the stop-states, this
  input does end in 01.

For any state that does not have a transition specifying the current input,
  ignore that input for that state.
For example, if near is one of the possible states and 0 is the
  input, ignore the 0 for the near state.

Functions and Script:
Write the following functions and script.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written Pythonic code.
read_ndfa has an open (file) parameter; it returns the dictionary
     representing the non-deterministic finite automaton; hint: I used
     splicing and the zip function to build the inner dinctionaries, and
     I called the setdefault function for the inner dict:
     alternatively I could have built it as defaultdicts from the
     standard  collections module
     (body is 9 lines).

ndfa_as_str has a dictionary parameter (representing the FA); it
    returns a multi-line string (each line is ended by '\n'), which when
    printed shows the contents of the NDFA in the appropriate textual form
    (body is 4 lines; can you do it in 1?).

process has a dictionary parameter (representing the NDFA),
    a str parameter (representing the start-state), and a list
    parameter (representing a list of str inputs); it returns a
    list that contains the start-state followed by tuples that
    show the input and resulting set of  states after each transition.
    For the example shown above, process returns the following
    list.

  ['start', ('1', {'start'}), ('0', {'near', 'start'}), ('1', {'end', 'start'}), ('1', {'start'}),
    ('0', {'near', 'start'}), ('0', {'near', 'start'})]
    Finally, remember that if an input is illegal for the current state (is not
      the key  in some transition for the current state), just ignore it.
    But if the input leads to no possible states (the empty set of states)
      terminate processing there
    (body is 12 lines).

interpret has a list parameter (the list result 
    produced by process);  it returns a multi-line string (each line is
    ended by '\n'), which when printed illustrates the results of
    processing an NDFA on an input in the appropriate textual form.
    Note that in this output the sets computed in process appear
      as lists sorted alphabetically by state.
    See how it prints the example list argument shown above in the
       Sample Interaction below
    (body is 5 lines).
    
Write a script at the bottom of this module
    (in if __name__ == '__main__':) that prompts the user for the
    file describing the DNFA, prints it, prompts the user for the file
    containing lines of start-states and input, and simulates the NDFA on each 
    line, printing  the results in the appropriate textual form
    (body is 7 lines).



Sample Interaction:
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should "match" this one.
  Enter the name of a file with a non-deterministic finite automaton: ndfaendin01.txt

  Non-Deterministic Finite Automaton
    end transitions: []
    near transitions: [('1', ['end'])]
    start transitions: [('0', ['near', 'start']), ('1', ['start'])]

  Enter the name of a file with the start-state and input: ndfainputendin01.txt

  Starting new simulation
  Start state = start
    Input = 1; new possible states = ['start']
    Input = 0; new possible states = ['near', 'start']
    Input = 1; new possible states = ['end', 'start']
    Input = 1; new possible states = ['start']
    Input = 0; new possible states = ['near', 'start']
    Input = 1; new possible states = ['end', 'start']
  Stop state(s) = ['end', 'start']
  
  Starting new simulation
  Start state = start
    Input = 1; new possible states = ['start']
    Input = 0; new possible states = ['near', 'start']
    Input = 1; new possible states = ['end', 'start']
    Input = 1; new possible states = ['start']
    Input = 0; new possible states = ['near', 'start']
    Input = 0; new possible states = ['near', 'start']
  Stop state(s) = ['near', 'start']

In Week #2 of this course we will cover EBNF and regular expressions, which
  relate to the files below.
You can run these files on your code to ensure they produce the correct results.

The ndfatrain.txt file is a non-deterministic finite automaton
  that determines whether or not a train (a sequence of characters representing
  different kinds of cars) is a legal train according to Chapter Exercise #7
  in the ENBF lecture.
Its input file is ndfainputtrain.txt, which starts with a legal train
  (one that ends with the state done as one possible state) followed by
  an illegal train (one that does not end with the state done as one
  possible state).

The ndfare.txt file is a non-deterministic finite automaton translation
  of the regular expression ((a*|b)cd)+. 
Its input file is ndfainputre.txt, which starts with a match (one that
  ends with the state last as one possible state) followed by a non-match
   (one that does not end with the state last as one possible state).

  






Problem #5: Google Queries
Problem Summary:
Write the required functions and script that prompts the user to enter the
  name of a file of text that contains a sequence of Google queries;
  reads the file (storing it in two special prefix and query
    dictionaries);
  repeatedly: prints the dictionaries in a special form; prompts the user to
    enter a query prefix, displays the top three queries with that prefix;
  prompts the user to enter a full query, and then updates the dictionaries
    as if this full query had appeared at the end of the file initially read.

Background:
When we type a word (or a few words) into Google's query box, it shows some of
  the most frequently entered queries starting with those word(s).
For example, when I recently typed the word uci into Google, it showed
  the following as the 3 most frequent queries starting with uci:
uci law
uci medical center
uci women's soccer

I could have clicked on one of these queries to select it, or continued typing
  more words to specify my own (different) query.

Here we say uci is a prefix, which is the beginning of some
  full query, like uci medical center.

Google represents a full query as a tuple of str (words).
For example, ('uci', 'medical', 'center') is a full query.
Google also represents a prefix as a tuple of str (words).
For example, ('uci',) is a one-word prefix and
  ('uci', 'medical') is a two-word prefix of this
  full query.

From any full query we can compute a set of all its
  prefixes.
For example, the full query ('uci', 'medical', 'center') would
  compute the prefix set
  {('uci',), ('uci', 'medical'), ('uci', 'medical', 'center')}.
The prefix set includes a tuple of the first word, 
  a tuple of the first two words, ...
  and finally a tuple of all the words in the full query.

Google stores information (in dictionaries) that allows it to predict the most
  likely full query from any prefix the user enters in the
  Google search box (as discussed in the example above).
The prediction is based on (1) knowing all the full queries for a
  prefix and (2) knowing how many times each full query was
  used.
Using this information, Google can show the user the most frequently
  entered full queries for the prefix he/she typed.

Google stores two dictionaries to accomplish this task.
Recall that dictionary keys and set values must be immutable types:
  tuples are immutable (as are strings and integers) but not
  lists.
Google stores a prefix dictionary whose key is a
  prefix (a tuple) and whose associated value is a
  set of all the full queries that have been entered for that
  prefix.

Google stores a query dictionary whose key is a
  full query (again a tuple) and whose associated value
  is an int: the number of times (the frequency) that that 
  full query was used.

IMPORTANT:
Use a defaultdict to store both of these dictionaries.

In this program you will build these dictionaries and then use them it to
  predict a full query from a prefix entered by the user, and
  update the dictionaries for any new query.

Input and Output:
After prompting the user for the file of full queries, read the file, building
  the prefix and query dictionaries (we are dropping the word
  full now).

For a simple example, the file googleq0.txt contains the following
  lines (in it, for simplicity and conciseness, we abbreviated
  b = basketball, c = center, l = law, m = medical, s = soccer,  u = uci, and
  w = women's).
  u m c
  u l
  u w s
  u l
  u w s
  u w b
  u w b
  u w b

The program will first read this file and build the appropriate prefix
  and query dictionaries; then it will print each dictionary.
The prefix dictionary should be sorted by keys, from the shortest to
  longest prefix, with equal-length prefixes sorted in standard lexical order;
  of course the associated sets may print their values in any order.
The query dictionary should be sorted by associated values (integers),
  from largest to smallest integer, with equal integers sorted by their keys in
  standard lexical order.

For example, the file above would produce the following output:
  Prefix dictionary:
    ('u',) -> {('u', 'm', 'c'), ('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's')}
    ('u', 'l') -> {('u', 'l')}
    ('u', 'm') -> {('u', 'm', 'c')}
    ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
    ('u', 'm', 'c') -> {('u', 'm', 'c')}
    ('u', 'w', 'b') -> {('u', 'w', 'b')}
    ('u', 'w', 's') -> {('u', 'w', 's')}

  Query dictionary:
    ('u', 'w', 'b') -> 3
    ('u', 'l') -> 2
    ('u', 'w', 's') -> 2
    ('u', 'm', 'c') -> 1

In the prefix dictionary ('u',) appears before ('u', 'l')
  because it has fewer words; and ('u', 'l') appears before
  ('u', 'w') because in standard lexical order, when 2-tuples have equal
  first values, they are ordered by their second values, and 'l' comes
  before 'w'.

In the query dictionary ('u', 'w', 'b') appears before
  ('u', 'l') because the first tuple's associated value (3) is
  bigger than the second tuple's (2); and ('u', 'l') appears
  before ('u', 'w', 's') because when tuples are associated with equal
  values (2), they are ordered lexically, and ('u', 'l', ...)
  comes before  ('u', 'w', ...) (see the reasoning above).

Now, repeatedly prompt the user for any query prefix and print the top three
  full queries for the entered prefix: print them in order from most to least
  frequent full query (with ties printed using the standard lexical ordering;
  the same ordering used when printing the Query dictionary above).
Using the dictionaries above the iteraction would be.

  Enter a prefix (or quit): u
    Top 3 (at the most) full queries = [('u', 'w', 'b'), ('u', 'l'), ('u', 'w', 's')]
Finally, prompt the user to enter the full query, and update the dictionaries
  and reprint them.
  Enter a full query (or quit): u w s

  Prefix dictionary:
    ('u',) -> {('u', 'm', 'c'), ('u', 'w', 'b'), ('u', 'l'), ('u', 'w', 's')}
    ('u', 'l') -> {('u', 'l')}
    ('u', 'm') -> {('u', 'm', 'c')}
    ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
    ('u', 'm', 'c') -> {('u', 'm', 'c')}
    ('u', 'w', 'b') -> {('u', 'w', 'b')}
    ('u', 'w', 's') -> {('u', 'w', 's')}

  Query dictionary:
    ('u', 'w', 'b') -> 3
    ('u', 'w', 's') -> 3
    ('u', 'l') -> 2
    ('u', 'm', 'c') -> 1
Here, the prefix dictionary stays the same (the full query already was entered
  once; we could have entered a new full query, which would augment the prefix
  dictionary), and the full query ('u', 'w', 's') has its query-count
  increased from 2 to 3.


Functions and Script:
Write the following functions and script.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written Pythonic code.
all_prefixes has a tuple of str
         (words) parameter; it returns a set of tuple of
          str: all the prefixes of the full query argument.
       For example, all_prefixes(('a', 'b', 'c')) returns
         {('a',), ('a', 'b'), ('a', 'b', 'c')}.
       Hints: comprehension and slicing
       (body is 1 line).

add_query has a prefix dictionary, query dictionary, and full query
         (tuple of str) as parameters; it returns None but
         updates these two dictionaries based on the full query.
       It adds the new query's prefixes to the prefix dictionary (each
          associated with the full query) and increments the integer value
          associated with
          that full query in the query dictionary (or, if the full query is
           new, associates that query with 1)
       (body is 3 lines).

read_queries has an open (file) parameter; it returns a 2-tuple
     containing the prefix and query dictionaries (in that order) built by
     reading and processing each full query in this file.
    (body is 5 lines).

dict_as_str has a dictionary, key function
      (default None) and bool (default False) as
       parameters; it returns a multi-line string (each line is ended by
       '\n'), which when printed shows the contents of the dictionary in
       the appropriate textual form.
    The key function determines the ordering and the bool determines
      whether to reverse it: like the key and reverse parameters
      used for the sort/sorted functions in Python.
    This function is used to print both the prefix and query dictionaries.
    
    Important: The key function (and its use when iterating over the
      dictionary in dict_as_str) must assume that its argument is a
      key in the dictionary, not an item;
      otherwise the batch self-check test will fail even if your code works.
     (body is 4 lines; can you do it in 1?).

top_n has a prefix (tuple of str), int, prefix
        dictionary, and query dictionary as parameters; it returns a list
        of full queries (tuple of str) whose length is the
        integer parameter, containing the most frequent full queries with that
         prefix; if the number of full queries with that prefix is less than
         that integer parameter, return all the full queries.
    If no full queries have this prefix, return the empty list.
    Notes: The dictionaries should not be changed.
           If multiple full queries occur the same number of times, prefer
      the full queries that come earlier in the standard lexical ordering: e.g.,
      the same order they are printed in the query dictionary.
      (body is 3 lines; can you do it in 1?).
     
Write a script at the bottom of this module
    (in if __name__ == '__main__':) that prompts the user for the file
    storing the queries and builds the prefix and query dictionaries from this
    file; then repeated: print these dictionaries; prompt the user for a prefix;
    display the top three full queries with that prefix; prompt the user for
    a full query; and finally update the prefix and query dictionaries with that
    full query
   (13 lines).

Sample Interaction:
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should match the form of this one (the order of values in the sets
  may vary).
Enter the name of a file with the full queries: googleq0.txt

Prefix dictionary:
  ('u',) -> {('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'), ('u', 'm', 'c')}
  ('u', 'l') -> {('u', 'l')}
  ('u', 'm') -> {('u', 'm', 'c')}
  ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
  ('u', 'm', 'c') -> {('u', 'm', 'c')}
  ('u', 'w', 'b') -> {('u', 'w', 'b')}
  ('u', 'w', 's') -> {('u', 'w', 's')}

Query dictionary:
  ('u', 'w', 'b') -> 3
  ('u', 'l') -> 2
  ('u', 'w', 's') -> 2
  ('u', 'm', 'c') -> 1

Enter a prefix (or quit): u
  Top 3 (at the most) full queries = [('u', 'w', 'b'), ('u', 'l'), ('u', 'w', 's')]

Enter a full query (or quit): u w s

Prefix dictionary:
  ('u',) -> {('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'), ('u', 'm', 'c')}
  ('u', 'l') -> {('u', 'l')}
  ('u', 'm') -> {('u', 'm', 'c')}
  ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
  ('u', 'm', 'c') -> {('u', 'm', 'c')}
  ('u', 'w', 'b') -> {('u', 'w', 'b')}
  ('u', 'w', 's') -> {('u', 'w', 's')}

Query dictionary:
  ('u', 'w', 'b') -> 3
  ('u', 'w', 's') -> 3
  ('u', 'l') -> 2
  ('u', 'm', 'c') -> 1

Enter a prefix (or quit): u w
  Top 3 (at the most) full queries = [('u', 'w', 'b'), ('u', 'w', 's')]

Enter a full query (or quit): a b c

Prefix dictionary:
  ('a',) -> {('a', 'b', 'c')}
  ('u',) -> {('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'), ('u', 'm', 'c')}
  ('a', 'b') -> {('a', 'b', 'c')}
  ('u', 'l') -> {('u', 'l')}
  ('u', 'm') -> {('u', 'm', 'c')}
  ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
  ('a', 'b', 'c') -> {('a', 'b', 'c')}
  ('u', 'm', 'c') -> {('u', 'm', 'c')}
  ('u', 'w', 'b') -> {('u', 'w', 'b')}
  ('u', 'w', 's') -> {('u', 'w', 's')}

Query dictionary:
  ('u', 'w', 'b') -> 3
  ('u', 'w', 's') -> 3
  ('u', 'l') -> 2
  ('a', 'b', 'c') -> 1
  ('u', 'm', 'c') -> 1

Enter a prefix (or quit): quit

You can also try processing the googleq1.txt and googleq2.txt
  files
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/assignments/program0/program.html
##-----------------TITLE------------------------##
Program 0
##------------------TEXT------------------------##
Program 0
Computing Infrastructure

ICS-33: Intermediate Programming








Introduction
This first "programming" assignment is not a "programming" assignment at all;
  it is designed to ensure that you know the fundamentals of using the
  computing infrastructure for this course, both on your own machine (if you
  have one) and the computers in our labs.
Primarily it concerns starting to learn to use the Eclipse Integrated
  Development Environment (IDE) for Python.

To do this assignment, you must have already downloaded and installed Java,
  Python, and the Eclipse IDE on your own computer (or be using one of the UCI
  Lab machines, where it has already been downloaded/installed).
Follow the 
  Download/Installation Instructions for your machine, if you need to.
Ensure that you have correctly
 setup
    the courselib folder
  and populated it with the required Python modules: otherwise some of your
  import statements (in parts B, C, and D) will produce errors.

Read and follow the following instructions carefully.
It would be an excellent idea to print a copy of this web page, read through
  it, and highlight any details that you think are important (and might
  forget as you are working on the assignment) or that you are confused about.
Some students lose points for failing to follow directions properly; this is
  a problem that gets worse during the quarter, so starting out by doing the
  "right thing" in this assignment is an excellent idea.
If you have any questions about these instructions, for example, if you
  think they are in error, or just confusing, please post on the appropriate
  MessageBoard Forum; and make sure you examine the posts from other students.

IMPORTANT: Ensure that your Checkmate dropoff is for the current/correct
     Quarter.

Finally, carefully read the last two sections, on Extra Credit and
  Time Management.
These important sections are relevant to all programming assignments, but
  appear only in this one.







Part A:Create a New Projectand Script
Read the
 
 Python Programming in the Eclipse IDE
  web page (which is also accessible on the
 Handouts
 web page).
It includes all the information that you initially need to know about using
  Python in the Eclipse IDE.
This includes
Starting/Stopping Eclipse
  Running the Python Interpreter
  Creating Projects in the Eclipse Workbench: new ones and existing ones
  Editing scripts
  Correcting syntax errors
  Running scripts
  Correcting execution errors

Work through this document to understand Eclipse and gain some experience using
  it before starting this assignment.
Ask your TAs/Lab Tutors questions; please cross the "question answering
  threshold" quickly; get into the habit of being able to ask them questions,
  especially in lab.

In Part A you will run the Python interpreter to compute an answer, create a
  new project in the Eclipse workbench, create a new (trivial) script (using
  the answer computed by the interpreter) without syntax errors, run it to
  ensure that it executes correctly, and finally submit the script on the
  Checkmate Homework Dropoff sytem.
  
Here is a checklist of things to do.
If you are confused or run into problems with any one, ask for help as soon as
  possible.
Start Eclipse.
Start the Python interpreter in the Console.
Type the following expression into the interpreter; avoid the temptation to
       cut and paste this expression.
      '{0:,}'.format(2**100)
Create a new Python project in the workspace/workbench named
       project0a.
Create a new module in this project named demo: the module and file
      will actually be named demo.py; Eclipse automatically adds the
      .py.
Delete the comment Eclipse puts at the top of your module and replace it
      by your UCInetID and name in exactly the exact form below, including the
      punctuation, spaces, parentheses, and text: e.g.,
    # Submitter: antpeter(Anteater, Peter)
After leaving a blank line, type the following Python script into the
      module: practice with the editor; avoid the temptation to cut and paste
      this code.
    Actually, for the big number in single-quotes, copy/paste the value that
      you computed in the interpreter after the comma but before the closing
      parenthesis.

      print('My first program: a hybrid')
print('Answer (from Inteprxter) =', '1,267,650,600,228,229,401,496,703,205,376')

Fix any syntax errors that Eclipse shows (you might have introduced one by
       not entering the script corectly).
Run this script to ensure that it produces the correct output in the
      Console.
Finish the project by closing it in the Eclipse workbench, but do not
       delete it.
Find the Checkmate Homework Dropoff link in the index of the course
      web and use it to drop off the demo.py file in the project0a
        folder in the workspace for Eclipse.
    If you need to, review the
       
       Checkmate Tutorial (which is also accessible on the
       Handouts
       web page).
Reopen the project and ensure that you can still (re)run it.
Finish the project by deleting it and delete all its resources; it is now
      no longer in the workbench or workspace.
Redo all these instructions, until you can do them quickly and easily; it
      would even be useful to practice removing this submission and
      resubmitting it, so you practice doing that in Checkmate.
Terminate Eclipse.

This part of the programming assignment is very cookbook, but by the end you
  should have mastered the steps needed in creating and manipulating project
  folders and script files
  with Eclipse and Checkmate -something you will do over and over again during
  the quarter.







Part B:Debug an Old Project'sScript
In Part B you will download and unzip a project and put it into the Eclipse
  workspace, create a project for it in the Eclipse workbench, correct the
  syntax errors in the script, run it, correct the execution errors in the
  script, and finally submit the script on the Checkmate Homework Dropoff sytem.
  
Before beginning this part of the programming assignment, read the short
  handout on
  
  Bugs.
Here is a checklist of things to do.
If you are confused or run into problems with any one, ask for help as soon as
  possible.
Start Eclipse (terminate it first, if it is currently running); notice the
      Workspace folder name in the Workspace Launcher pop-up window
      before you click its OK button.
Download the project0b project folder, unzip it
      to a folder on your desktop (it should contain one file named
      collatz.py), and move this folder into the workspace.
Create a new Python project in the workbench named project0b (using
      the project0b folder just downloaded and moved into the workspace).
Disclose this project in the PyDev Package Explorer and double click the
      collatz.py module so that it is visible in an Editor.
Notice the two syntax errors marked in red on line 68 and 76.
    If the line numbers do not appear in the Editor, turn them on.
    If there are syntax errors on lines 55 or 56, you have not
          set up the course library correctly.
        Read the
Course Library installation instructions before proceding.
    
    Fix the errors as specified below.
    You do not yet need to understand these errors or how to fix them, but
      we will cover the necessary material soon.
Fix the syntax eror on line 68 by placing a comma right after the token
      cycle_count and before the token ': test number is now'.
    If the red syntax error on this line doesn't quickly disappear, issue
      the right-click | Save command.
Notice that a new syntax error appears on line 71; it sometimes happens
      that one syntax error (line 71) is masked by another (line 68); when
      we fix one line, a new one shows an error.
Hover over the red syntax error icon on line 71.
    It says Expected:: which really is Expected: followed by
      the semicolon it expects.
    Although it underlines in the if token in red, the mistake is later
      in this line.
Fix the syntax eror on line 71 by placing an equal sign right after the
      equal sign on this line (no separating space): here we must have
      the == token.
    If the red syntax error on this line doesn't quickly disappear, issue
      the right-click | Save command.
Hover over the red syntax error icon on line 76.
    It says Undefined variable: test_number because we misspelled this
      name.
    It underlines this token in red.
Fix the syntax eror on line 76 by adding a b in the name: it is now
      spelled correctly as  test_number
    If the red syntax error on this line doesn't quickly disappear, issue
      the right-click | Save command.
Now the script has no syntax errors, so we can run it.
    Enter 3 to the first prompt and just press enter for the second
      (it will use the default value of True).
Python will report show the script starting to run in the Console and then
       report an execution error.
Enter a positive number: 3
Display intermediate results[True]:
Cycle 1 : test number is now 3
Traceback (most recent call last):
  File "C:\Users\Pattis\workspace\project0b\collatz.py", line 75, in 
    cycle_count += '2'
TypeError: unsupported operand type(s) for +=: 'int' and 'str'
    It identifies an error on line 75, then shows the line, then reports the
      error, which relates to the fact that the += operator cannot be
      applied to an integer and a string.
Fix this error by changing the string literal '2' into
      the integer literal 2; now the += operator is adding two
      integers.
Run the script, and again
    enter 3 to the first prompt and just press enter for the second.
This time the script runs to completion, but it has an intent error.
    Notice that the cycle counts increment by two, not one; so our answer
      says it requires 15 cycles, but it only requires 8.
Fix this error in line 75 by changing the integer literal 2 into
      the integer literal 1.
Run the script, and again
    enter 3 to the first prompt and just press enter for the second.
    This time the script runs to completion with the correct answer.
Finish the project by closing it in the Eclipse workbench, but do not
       delete it.
Find the Checkmate Homework Dropoff link in the index of the course
      web and use it to drop off the collatz.py file in the
      project0b folder in the workspace for Eclipse.
Terminate Eclipse

Again, this part of the programming assignment is very cookbook, but by the
  end you should have mastered the steps needed in creating and manipulating
  project folders and script files with Eclipse and Checkmate -something you
  will do over and over again during the quarter.


Bottom Line
You will be writing many programming assignments during the quarter, requiring
  you to create new projects or modify existing ones.
You should be able to manipulate both kinds of projects easily in Eclipse,
  and submit them for grading in Checkmate.

Finally, whenever you want to check on a feature in Python or a library module,
  you should have a very low threshold for quickly starting Eclipse and using
  its Python Interpeter, or writing a small script, to experiment.
It is imperative that you get comfortable with this process immediately.







Part C:Using the Debug Perspective
In Part C you will read the document that is a tutorial the
  
 Eclipse Debug Perspective and use the debugger to answer a series of
  seven questions about a program that plays the dice game craps.
So, you are not using the debugger to fix a wrong program, but instead are
  using it to monitor a correct program and get information about when
  certain events happen in the program.

Read pages 1-11 and then practice using the debugger by solving all the
  problems at the bottom of page 11.
The solutions are given on page 12...but answer each question before you check
  its solution, otherwise you will not have exercised your debugging muscles in
  preparation for solving the problems in the craps program
Solve the problem stated on page 13. Solve each more than once: if you
      aren't getting the same answers every time, you did not correctly follow
      the directions on how to setup the craps.py script; re-read them.
Download, unzip, and write your answers in the following
  Quiz text file; then submit it via checkmate.







Part D:Test a Module/Class
In Part D you will learn various ways to test Python code with the
  driver.py module (which is in the courslib), concentrating on
  how to write a testing file for use with this module's
  batch_self_check function.
You will write such a file to test various factorial functions, and finally
  submit this file on the Checkmate Homework Dropoff sytem.
  
Here is a checklist of things to do.
If you are confused or run into problems with any one, ask for help as soon as
  possible.
Start Eclipse (terminate it first, if it is currently running); notice the
      Workspace folder name in the Workspace Launcher pop-up window
      before you click its OK button.
Download the project0d project folder, unzip it
      to a folder on your desktop (it should contain one file named
      facts.py), and move this folder into the workspace.
Create a new Python project in the workbench named project0d (using
      the project0d folder just downloaded and moved into the workspace).
Disclose this project in the PyDev Package Explorer and double click the
      facts.py module so that it is visible in an Editor.
Run this script and enter the information below to verify its behavior on
      these inputs.
    Basically when driver.driver() is executed, we are simulating a
      simplified "interpreter" that prompts for and executes the commands that
      we type (shown below in italics).
    In this interaction we first import the fact2 function and then call
      it with different arguments, printing each result (although some calls
      raise exceptions).

We can enter a command at the prompt Command[default]: or just press
  return in which case default is the command; the default is always
  the command typed previously.
We will discuss the ! and ? commands a bit later.
Driver started
Command[!]: from facts import fact2

Command[from facts import fact2]: print(fact2(0))
1

Command[print(fact2(0))]: print(fact2(5))
120

Command[print(fact2(5))]:
120

Command[print(fact2(5))]: print(fact2(-1))
Traceback (most recent call last):
  File "C:\Users\Pattis\workspace\courselib\driver.py", line 225, in driver
    exec(old,local,globl)
  File "", line 1, in 
  File "C:\Users\Pattis\workspace\33program0\facts.py", line 11, in fact2
    raise ValueError('factorial('+str(n)+') not defined for negative values')
ValueError: factorial(-1) not defined for negative values

Command[print(fact2(-1))]: print(fact2('a'))
Traceback (most recent call last):
  File "C:\Users\Pattis\workspace\courselib\driver.py", line 225, in driver
    exec(old,local,globl)
  File "", line 1, in 
  File "C:\Users\Pattis\workspace\33program0\facts.py", line 9, in fact2
    raise TypeError('factorial('+str(n)+') must be called with an int argument')
TypeError: factorial(a) must be called with an int argument

Command[print(fact2('a'))]: quit
Driver stopped

The most interesting aspect of the driver module is its
  batch_self_check function, which automatically reads, decodes, and
  executes testing commands from a file (specified by the first two arguments),
  summarizing the results (how each result is printed is based on the final
  arguments to the function).
Each parameter has a default argument, and all of them are set at the top of the
  driver.py module.
You can explore different argument values, but the default values are the most
  useful.


We can call this function explicitly in the "interpreter", supplying it with
  the necessary arguments, but mostly we call it via the !  command
  (calling it with all default arguments) or the ? command (calling it
  with arguments entered by prompts to the user).
The following paragraphs briefly describe how to write commands in a testing
  file; then you will be asked to write a testing file for the functions in
  the facts.py module.

A testing file is a sequence of lines, each of which contains one testing
  command.
The character(s) starting each testing command determines what is tested.
Lines starting with # are special; they are comment lines; all other
  lines should start with a c, e, ^, or relational
  operator (==, !=, <, <=, >,
  >=, in, or not in).
Each c command is followed by one operand; each e, ^, or
  relational operator is followed by two operands (which are each prefaced by
  a special separator string: the default separator value is -->).

Command: c-->operand
    Execute operand as a Python statement; it is an Error if the
      statement raises any exception.
    An example might be c-->from math import factorial or
      c-->x = [1,2,3,4,5].

Evaluate: e-->operand1-->operand2
    Evaluates operand1 as a Python expression, converts it to a string,
      and determines whether or not it is the same string as operand2;
      it is an Error if the strings are not equal or evaluating operand1
      raises an exception (operand2 must be present, but it is just a
      string and therefor not evaluated).
    An example might be e-->factorial(5)-->120, which would not be an
      Error; but e-->factorial(2,5)-->120 and
      e-->factorial(5)-->110 would both be Errors: the first raises a
      TypeError exception and in the second '120' != '110'.

Exception: ^-->operand1-->operand2
    Executes operand1 as a Python statement and determines whether or not
      an exception is raised matching operand2 (either a single
      exception name, a list of exception names separated by commas, or
      * which means any exception name); there is an Error if no
      exception is raised or an exception not named by operand2 is
      raised.
    An example might be ^-->factorial(-1)-->ValueError, which would
      not be an Error; but ^-->factorial(2)-->* and
      ^-->factorial(-1)-->TypeError,ZeroDivisionError would both be
      Errors: the first raises no exception and the second raises a
      ValueError exception, which is neither TypeError nor
      ZeroDivisionError.

Relational Operator: relop-->operand1-->operand2
    Evaluates operand1 and operand2 as Python expressions,
      and determines whether the relop holds between them; it is
      an Error if relop does not hold or evaluating either operand
      raises an exception.
    An example might be ==-->2*3-->3*2, which would not be an
      Error; but in-->'a'-->['b','c','d'] would be an Error: the
      character 'a' is not in the list ['b','c','d'].
    
    Can you explain why e-->2*3-->3*2 would be an Error?
    Can you explain why in-->a-->['a','b','c'] would be an Error?

Comment: #any text
    Prints the line number and #any text on the console.
    Nothing is tested.
    So lines that begin with # are treated like comments.

Given these formats write a test file and run the batch_self_check
   function (with the standard default arguments) on it.

Write a test file named bsc.txt (the default file name) that does
      the following (each requirement translates into one line in the file, so
      the file should contain 22 lines total).
    I suggest that you incrementally write and test this file: it requires
      running the facts.py module only once: each time you update
      the bsc.txt file with another test, just reissue the !
      command (the original default) in the Console, without
      stopping/rerunning the driver function.
Imports the factorial function from the math module.
Imports the fact1 and fact2 functions from the facts
       module.
Comments that fact1 is now being tested.
Checks whether the call fact1('a') raises the TypeError
      exception (it doesn't).
Checks whether the call fact1(-1) raises the ValueError
      exception (it doesn't).
Checks whether the call fact1(0) returns the value 1
       (it doesn't).
Checks whether the call fact1(5) returns the value 120
       (it doesn't).
Checks whether the call fact1(10) returns the same value as
       factorial(10) (it doesn't).
Checks whether the call fact1(10) returns the same value as
       10*9*8*7*6*5*4*3*2*1 (it doesn't).
Checks whether the call fact1(100) returns the same value as
       100*fact1(99) (it does, because both are 0).
Comments that fact2 is now being tested.
Checks whether the call fact2('a') raises the TypeError
      exception (it does).
Checks whether the call fact2(-1) raises the ValueError
      exception (it does).
Checks whether the call fact2(0) returns the value 1
       (it does).
Checks whether the call fact2(5) returns the value 120
       (it does).
Checks whether the call fact2(10) returns the same value as
       factorial(10) (it does).
Checks whether the call fact2(10) returns the same value as
       10*9*8*7*6*5*4*3*2*1 (it does).
Checks whether the call fact2(100) returns the same value as
       100*fact2(99) (it does).
Comments that sets are now being tested.
Binds name x to a set containing an 'a', 'b',
      'c', and 'd'.
Removes the value 'b' from set x.
Checks whether set x is the same as a set containing an 'a',
       'c', and 'd'.


Run the facts.py script, using the ! command to perform all
      the batch self tests specified in the file you constructed above, and
      verify it is producing the correct results when testing these functions.
    
    When I ran my bsc.txt file with these 22 lines, the results look as
      follows:

Starting batch_self_check
    3 # Testing fact1
    4 *Error: fact1('a') failed to raise exception from list: TypeError
    5 *Error: fact1(-1) failed to raise exception from list: ValueError
    6 *Error: fact1(0) -> 0 but should -> 1
    7 *Error: fact1(5) -> 0 but should -> 120
    8 *Error: Failed fact1(10) == factorial(10)
          evaluated: 0 == 3628800
    9 *Error: Failed fact1(10) == 10*9*8*7*6*5*4*3*2*1
          evaluated: 0 == 3628800
   11 # Testing fact2
   19 # Testing sets
Done batch_self_check: 13 correct; 6 incorrect
Failed checks: [4, 5, 6, 7, 8, 9]
Find the Checkmate Homework Dropoff link in the index of the course
      web and use it to drop off the bsc.txt file in the project0d
        folder in the workspace for Eclipse.
    If you need to, review the
       
       Checkmate Tutorial (which is also accessible on the
       Handouts
       web page).

Generally feel free to examine how the entire driver.py module (and
   especially the batch_self_test function) works, by reading its code.







Extra Credit
Programming assignments must be turned in on time: you can get partial credit
  for a partially completed assignment, but it must be turned in on time; I
  will accept no late homework unless you have an official excuse pre-arranged
  with me (and even then I will always want you to turn in whatever work you
  have completed by the due date/time).
In fact, there is another incentive to finish not only on time, but to
  finish early.

In all programming assignments, if you turn in everything at least 24 hours
  before it is officialy due, you will receive 1 point of extra credit.
If you turn it in 48 hours (or earlier), you will receive 2 points of extra
  credit.
(There is no more extra credit for early turn-ins; I recommend NOT turning it
  in more than 48 hours early.)
This is equivalent to almost half a grade improvement (e.g., C+ to B, or B to
  B+, or B+ to A-) on a 50 point assignment.
I expect most of the students to complete their assignments and submit them
  early, so they will receive some amount of extra credit; it adds up.

There are two main advantages to planning on finishing early.
First, if you run into a major problem, you will have extra time to solve it
  before the actual due date: and even experienced programmers frequently run
  into such problems.
Yes, this means you!
Second, and more importantly, if you are racing to finish before a deadline,
  stress levels can go through the roof, and you become less interested in
  learning the material (and the whole purpose of these programming assignments
  is to learn the material) and more interested in just getting finished.
If you do not learn the material, then you will be at a major disadvantage for
  subsequent programming assignments and tests, because of the cumulative
  nature of the material in this course.
Therefore, work on an aggressive schedule and plan to finish every
  assignment by Sunday or Monday evening (or even earlier).

Programming assignments sometimes also include an extra credit section worth
  1 point.
These are designed for students who finish early and want to continue exploring
  programming within the context of the assignment.
The points are to acknowledge, in a very small way, their extra effort.

This assignment has no special extra-credit section.
You can get extra credit on it only for an early dropoff.







Time Management
One of the hardest parts of being in college is learning how to manage your
  time.
Time management is especially important in programming courses (and in the real
  world, when you are working on complicated projects with hard deadlines).
The difference between good and bad time management can have a profound impact
  on how much you learn in this course, how well you perform in it, and how
  much effort you actually need to expend to do well.

Most programming assignments can be broken into a series of smaller tasks, each
  that can serve as a milestone; when solved in sequence, these tasks will
  complete the entire assignment.

Generally, it is best to spread out the work on a two-week assignment.
Most assignmnts become available on Tuesday morning; I recommend reading the
  assignment before/during lab, so that if you are unsure about any parts of
  it, you can ask relevant questions about them on the Forum; this reading
  might include examining and understanding code provided in the writeup.
You should start working on it during lab, and should plan to complete at
  least half the programming assignment by the next Tuesday lab.
You should try to finish it by late the following the week: if not by Friday,
  you can work over the weekend to finish it.
In a worst-case scenario you can use the lab on Tuesday to finish, asking
  final questions of the staff during that lab.

Some students look at an assignment and think that it is best done in one
  sitting.
If you can do so, great; but, if you plan to work this way, do the one sitting
  early, not the weekend before it is due.
In this way, if you are wrong about the amount of time that it will take, you
  will still have adequate time to complete the assignment.

Likewise, I have seen students who always spend Tuesday finishing the previous
  assignment, and not get around to looking at and starting the next one.
This starts them on a bad path for finishing the next assignment.

By meeting these time goals, you will both maximize what you learn and minimize
  your anxiety and the time that it takes for you to do the learning.

Remember that assignments must be turned in on time: you can get partial credit
  for a partially completed assignment, but it must be turned in on time; I
  will accept no late homework unless you have an official excuse pre-arranged
  with me (and even then I will always want you to turn in whatever work you
  have completed by the due date/time).

Finally, if you find yourself falling behind, seek help immediately (from me,
  the TA, the Lab Tutor, or even other students in the course -when
  appropriate).
When the real programs start, we will discuss in more detail what kind of help
  you can get legitimately, and what kind of help constitutes cheating.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/assignments/program3/program.html
##-----------------TITLE------------------------##
Program 3
##------------------TEXT------------------------##
Program 3

Programs that Write Programs: pnamedtuple


ICS-33: Intermediate Programming









Introduction
This programming assignment is designed to show how Python functions can define
  other Python code (in this case, a class) in an unexpected way: the function
  can build a huge string that represents the definition of a Python class and
  then call exec on it, which causes Python to define that class just as
  if it were written in a file and imported (in which case Python reads the
  file as a big string and does the same thing).
Your code will heavily rely on string formatting operations: I suggest using
  the str.format method to do the replacements: now is a good time to
  learn about this function if you don't know already know it; but you are free
  to use whatever string processing tool(s) you want.


I suggest that you first read the description below and define/test/debug as
  much of the Point class as you can, writing it directly in Eclipse
 (especially the__getitem__, __eq__, and _replace__
  methods).
You might want to write a small batch file to help you test this class.

Once you have written/debugged the code for the Point class, define the
  general pnamedtuple function, which when given the appropriate
  arguments (for the Point class: pnamedtuple('Point', 'x y'))
  constructs a huge string containing the same code as the Point class
  you wrote.
Much of the code from your Point class will be turned into strings and
  made generic: generalized for calls to pnamedtuple with different
  arguments.
Use the .format method to replace the generic parts with the actual
  strings needed for the class being defined.

Download the program3 project folder and use it to
  create an Eclipse project.
Read and run the miniexample.py module, which performs a similar but
  simpler task: it illustrates how to write the keep function as a small
  string.
All the elements needed to write the pnamedtuple function appear in here
  in a simplfied form (see especially the call to the join function).
Put your pnamedtuple in the pcollections.py module, which can be
  tested in the standard driver or by writing code in the script at the bottom
  of the pcollections.py module.

I recommend that you work on this assignment in pairs, and I recommend that you
  work with someone in your lab section (so that you have 4 hours each week of
  scheduled time together).
These are just recommendations.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.


Only one student should submit all parts of the the assignment, but both
  students' UICnetID and name should appear in a comment at the top of
  each submitted .py file.
A special grading program reads this information.
The format is a comment starting with Submitter and Partner (when
  working with a partner), followed by a colon, followed by the student's
  UCInetID (in all lower-case), followed by the student's name in
  parentheses (last name, comma, first name -capitalized appropriately).
If you omit this information, or do not follow this exact form, it will require
  extra work for us to grade your program, so we will deduct points.
Note: if you are submitting by yourself, and do NOT have a partner, you
  should OMIT the partner line and the "...certify" sentence.

For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each .py file would appear as:
# Submitter: romeo1(Montague, Romeo)
# Partner  : jcapulet(Capulet, Juliet)
# We certify that we worked cooperatively on this programming
#   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
Please turn in each program as you finish it, so that I can more
  accurately assess the progress of the class as a whole during this assignment.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).
The code you write should be as compact and elegant as possible, using 
  appropriate Python idioms.







Problem #1: pnamedtuple
Problem Summary:
Write a function named pnamedtuple that is passed information about a
  named tuple: it returns a reference to a class object from which we can
  construct instances of the specified named tuple.
We might use this class as follows:
from pcollections import pnamedtuple
Point = pnamedtuple('Point', 'x y')
p = Point(0,0)
...perform operations on p using methods defined in the Point class
Please note that although many of the examples in this description use the
  Point class, your pnamedtuple function must work for all legal
  calls.
For example the batch-self-check file uses descriptions (some legal, some
  not) of the Triple class.

I created six templates (one big, two medium, three small), which are each
  strings that have parts to fill in using the format method; all but
  the small strings are triple-quoted, multi-line strings, that look like large
  chunks of Python code (see miniexample.py in the download to help
  understand this paragraph, because it has similar templates).

Note calling the following format method on the string
'{name} from {country} tells you {rest}'.format(name='Rich',country='USA',rest='blah..blah..blah')
returns the string result
'Rich from USA tells you blah..blah..blah'
In many cases, the arguments I passed to the format calls were computed
  by list comprehensions turned into strings by calling the .join method
  (the opposite of the .split method).
See the miniexample for an example of everything working together to
  define a function by filling in a template with .format.
Finally, my solution is about 100 lines (including blank lines and comments,
  and a solution to the extra credit part), and that is divided between Python
  code (70% of the lines) and string templates that specify Python code (30% of
  the lines).
Details
Define a function named pnamedtuple in a module named
    pcollections.py (that is the only name defined in the module, but
       this function can define local functions: I wrote three short ones).
    Its header is def pnamedtuple(type_name, field_names, mutable=False):
      an example call to this function is
       Point = pnamedtuple('Point', ['x','y'], mutable=False), which
       is equivalent to writing Point = pnamedtuple('Point', 'x y') or
       Point = pnamedtuple('Point', 'x,y').
    Using Point, we can then write code like origin = Point(0,0).
    
    A legal name for  the type and fields must start with a letter which
      can be followed by 0 or more letters, digits, or underscore characters
     (hint: I used a simple regular expression to verify legal names); also it
      must not be a Python keyword.
    Hint: the name kwlist is importable from the keyword module:
       it is bound to a list of all Python keywords.
    
    The parameters must have the following structure.
    type_name must be a legal name (see above).
       
       field_names must be a list of legal names (see above), or a
               string in which spaces separate legal names (or commas and
               optional spaces separate legal names).
           So, we can specify field_names like ['x','y'] or
	      'x y', or  'x,  y'.
           If a name is duplicated, just ignore all but its first appearance
             (hint: I used the unique generator to filter out
             duplicates).
    
    
    If any of the names are not legal, raise a SyntaxError with
      an appropriate message.

The resulting class that is written should have the following functionality.
Note that the main job of pnamedtuple is to compute a large string
  that describes the class; we could define the class by writing the string to
  a file and then importing the file; instead, the pnamedtuple function
  returns the class object.
Define the class name to be type_name.

Define an __init__ method that has all the field names as parameters
      (in the order they appear in the second argument to pnamedtuple)
      and initializes every instance name (using these same names) with the
      value bound to its parameter.
    In addition, define the instance names _fields and _mutable,
       which are bound to a list of all the field names and the
       bool parameter respectively.
    For Point described above, the __init__ method would be
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self._fields = ['x','y']
        self._mutable = False

The problem here, and throughout the other parts of this is assignment is
  writing a functon like gen_init such that gen_init(['x','y'])
  produces the a string representing the __init__ function above
  (including \n at the end of each line).

Define the __repr__ method that returns a string, which when passed
       to eval returns a newly constructed object that has all the same
       instance names and values(==) as the object __repr__
        was called on.
    For Point, if we defined origin = Point(0,0) then calling
       repr(origin) would return  'Point(x=0,y=0)'.
    Here is one way to write __repr__ for Point using the
       format method,
    def __repr__(self):
        return 'Point(x={x},y={y})'.format(x=self.x,y=self.y)
       although there are other ways for it to produce the same resulting
       string.

Define simple accessor methods for each of the field names.
    Each method name should start as get_ followed by the name of
       a field.
    For Point, there would be two accessor methods.
    def get_x(self):
        return self.x
  
    def get_y(self):
        return self.y
    Note that with these methods, if we had a list of Point named
      lp, we could call lp.sort(key= Point.get_x) to sort the
      list by their x coordinates.
    Python's builtin namedtuple does not have this ability but the code
      it produces for retrieving these values runs a bit faster.

Define the __getitem__ method to overload the [] (indexing
       operator) for this class: an index of 0 returns the value of the
       first field name in the field_names list; an index of 1
       returns the value of the second field name in the field_names
       list, etc.
    Also, the index can be a string with the named field.
    So, for p = Point(1,2) writing p.get_x(), or p[0]), 
      or p['x'] returns a result of 1.
    Raise an IndexError with an appropriate message if the index is out
       of bounds int or a string that does not name a field.
    
    Note that this method can be used by Python to iterate through any class
       produced by pnamedtuple one index after another.
    It is also useful for writing the __eq__ method: see below.
    
    Hint: for an int index parameter, combine the self._fields,
      instance name, the get_ methods, and the eval function
      to write a short solution to this problem; in the case of
      origin = Point(0,0), calling origin[1] should construct 
      the  string 'self.get_y()' and return eval('self.get_y()').

Overload the == operator so that it returns True when the two
      named tuples come from the same class and have all their name fields
      bound to equal values.
    Hint: use __getitem__ for each name to check for equality.

Define a _replace method, which takes **kargs as a parameter
      (keyword args).
    This allows the name kargs to be used in the method as a
       dict of  parameter names and their matching argument values.
    The semantics of the _replace method depends on the value stored in
      the instance name self._mutable:
    If True, the instance namess of the object it is called on
           are changed and the method returns None.
        So, if origin = Point(0,0) and we call
        origin._replace(y=5), then print(origin) would
           display as Point(x=0,y=5) because origin is mutated.
    
    If False, it returns a new object of the same class, whose
           instance name's values are the same, except for those specified
           in kargs.
        So, if origin = Point(0,0) and we call
        new_origin = origin._replace(y=5), then
        print(origin,new_origin) would display as
        Point(x=0,y=0) Point(x=0,y=5) because origin is not
           mutated.
    
    
    If any of the **kargs names are not field_names raise a
      TypeError Exception.
    
    Define this method to look like
    def _replace(self,**kargs):
        ...check for all legal field names
        if self._mutable:
            ...
        else:
            ...
    In both ... we iterate (through kargs.items() or
      self._fields) and refer to self.__dict__ to retrieve the
      current values bound to the instance names: this is a bit tricky.

    Use our textbook or web resources to learn more about **kargs; feel
      free to post specific question on the forum not relating to their actual
      use in _replace and also, not, "Could someone please explain
      **kargs to me").
    
   The kargexample.py module has a little **kargs demo in it.

Extra credit:
    Define the __setattr__ method so after __init__ finishes, if
          the mutable parameter is False, the named tuple will not
          allow any instance names to be changed: it will raise an
          AttributeError with an appropriate message.


Of course, our pnamedtuple function should work for Point as
  illustrated above, but should also work for any other legal call.
The actual namedtuple class in Python is implemented differently, but 
  this programming assignment requires you to use the implemenation above.


Testing
The pcollections.py module includes a script that calls
  driver.driver().
The project folder contains a bsc.txt file (examine it) to use for
   batch-self-checking your function.
These are rigorous but not exhaustive tests.

Note that when exceptions are raised, they are printed by the driver but the 
  Command: prompt sometimes appears misplaced.

You can write othercode at the bottom of your pcollections.py module to
  test the pnamedtuple function, or type code into the driver as
  illustrated below.
Notice the default for each command is the command previously entered.
  Driver started
  Command[!]: from pcollections import pnamedtuple as pnt
  Command[from pcollections import pnamedtuple as pnt]: Point = pnt('Point', 'x y')
  Command[Point = pnt('Point', 'x y')]: origin = Point(0,0)
  Command[origin = Point(0,0)]: p1 = Point(5,2)
  Command[p1 = Point(5,2)]: print(p1)
  Point(x=5,y=2)
  Command[print(p1)]: print(p1.get_x())
  5
  Command[print(p1.get_x())]: print(p1[0])
  5
  Command[print(p1[0])]: print(p1['x'])
  5
  Command[print(p1['x'])]: print(p1['z'])
  Traceback (most recent call last):
    File "C:\Users\Pattis\workspace\courselib\driver.py", line 224, in driver
      exec(old,local,globl)
    File "", line 1, in 
    File "", line 17, in __getitem__
  IndexError: Point.__getitem__: index(z) is illegal
  Command[print(p1['z'])]: p2 = p1._replace(x=2,y=5)
  Command[p2 = p1._replace(x=2,y=5)]: print(p1,p2)
  Point(x=5,y=2) Point(x=2,y=5)
  Command[print(p1,p2)]: quit
  Driver stopped


Files for batch_test (see bt.txt for an example) just contain
  commands that will be executed; many are calls to the print function,
  which show the result of the print.

Remember that your pnamedtuple function can print on the console, for
  debugging purposes, the string it is about to exec so you can look for
  errors there (just eyeball whether the code correct).
The show_listing function (defined in the pnamedtuple function)
  display a string on the console, numbering its lines (useful when exec 
 finds an error: it reports a line number that show_listing shows).

Finalkly, I have also included two programs that David Kay published in ICS-31
  that use Python's namedtuple (with those names changed to
  pnamedtuple).
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/pairprogramming.html
##-----------------TITLE------------------------##
Pair Programming
##------------------TEXT------------------------##
Pair Programming





Extreme Programming (XP) is a new, Agile programming methodology (for
  constructing and maintaining programs) that is becoming quite popular for
  medium-size programming projects.
XP might be called a sociological-oriented approach to developing software.
It breaks with other, more engineering-oriented approaches to developing
  software, by concentrating on the interactions among clients and programmers
  and the interactions between programmers and other programmers.
In this course we will focus on two major aspects of XP.

The first aspect of XP is testing.
In XP, tests are detailed before any code is written, so the programmers will
  know when coding is finished: when the code passes all the tests.
This dovetails nicely with programming via iterated enhancement, because we
  specify the test that every new phase in the program should pass.
Later, we will use driver programs to test classes.
In real XP, testing is automated as much as possible; for most of this course,
  we will perform our tests manually, but we will discuss JUnit, an
  easy to use system for automated testing.

The second aspect of XP is pair programming.
In XP, two programmers must always work together when writing code.
One programmer is the "driver": that person is at the keyboard, and is in
  charge of all changes made to the program.
Sitting next to the driver is the "navigator", who observes all the code that
  is entered, spotting problems, thinking of simplifications, helping with
  programming style, debuging errors, inventing/verifying tests, and generally
  helping with the problem solving needed to write programs.


"Pair programming is a dialog between two people trying to 
  simultaneously program (and analyze and design and test) and understand
  together how to program better.
It is a conversation at many levels, assisted by and focused on a computer...
The conversational nature of pair programming also enhances the
  software development process."
- K. Beck, "Extreme Programming Explained"


Although it may seem that the "stronger" programmer will do all the work,
  studies show that both programmers can participate and benefit: the weaker
  one sees how the stronger one thinks and works; and the stronger one, by
  explaining things to the weaker one, has a sounding board for his/her
  decisions and ends up with a better understanding of the program.
Also, bugs that are confusing to one programmer are often transparent to
  another.
Finally, sometimes one programmer will see a simplification that the other
  doesn't see.
Ultimately, the code they produced together is better, because it has been
  reviewed by two sets of eyes.

The concept of "pair[not peer!]  pressure" has also shown itself to be useful.
The term means that each member of the pair is pressured to perform well; at
  the mundane level, this term can mean that when a time is made to work
  together, both students show up, on time, and work (if you are working by
  yourself, it is much easier to come up with an excuse to delay starting
  work).

In the context of learning programming, pair programming allows two students
  to collaborate closely (more closely than if they each were working
  independently).
For a long programming session, the students should switch off who is the
  driver and who is the navigator every hour or so.
Because most programming assignments involve multiple programs, another way to
  approach pair programming is to let each student be a driver for one whole
  program before changing.

Caution:
There are many ways to subvert the learning experience that pair
  programming can provide.
I'll do the even numbered programming assignments; you do the odd
       numbered ones.
  In a multi-program assignment, you write half the programs by yourself,
      I'll write half by myself, and we'll hand in both as joint work.
  I'm the "stronger" programmer so I'll always drive and let you only
       navigate.

Sometimes the subversion is unintentional: the stronger student just takes
  control and doesn't let the weaker student do anything.
But since much of the course grade is based on how students perform on 
  in-class programming exams, which they must complete by themselves, students
  taking shortcuts on programs during the semester will be ill prepared for
  these exams.
If your partner is not participating, or is not letting you participate,
  please contact me so that we can resolve the problem before irreparable harm
  is done to both partners.

The following
  
  Pair Programming Video Site
  introduces pair programming to students and discusses a similar list of
  "do's and don'ts."
On the first entry on this page, click either mov or wmv to see
   a 9 minute movie (it might take a few minutes to load); also print a copy
   of the accompanying worksheet.
Here is an alternative shorter video, a bit rougher but more realistic
  
  Pair Programming: Goals and a Demo. 

During the quarter, on some assignments pair programming will be prohibited,
  on some -especially the early ones- it will required, on most it will be
  allowed/optional.
Each assignment will indicate what rules are in effect in relation to pair
  programming.

Final words: this is a great learning technique but it requires some maturity
  to use it correctly: put in the effort and the rewards will be great.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/checkmate/index.html
##-----------------TITLE------------------------##
Submitting Homework using Checkmate
##------------------TEXT------------------------##
Submitting Homework Using Checkmate







Submiting Completed Programming Assignments
You will submit programming assignments and other work electronically, via a
  special system called Checkmate.
This same system also allows you to check the status of your programming
   assignment submissions.
But, it does not allow you download work that you submitted, so make sure to
  archive a copy of all the work that you submit.

To use Checkmate, you must first activate your UCInetID.
If you have not already done so,
  activate it now.

Once you have an activated UCInetID, you need to 
  Login to Checkmate 
  and enroll yourself in my appropriate course (you do this only once,
  at the start of the quarter).
The rest of this handout shows you how.

This handout was last updated in Spring 2013, showing a student setting
    up checkmate for ICS-31.
    Generally, Checkmate is a stable system that doesn't change much.
    When you follow these instructions, make sure that you specify the correct
    quarter and course.


  You will first see the UCInetID verification page



 

Enter your UCInetID and Password on this page.
You will next see the following page, which includes your
  Name (UCInetID): here it shows my name as Peter Anteater
  and my UCInetID as (=31Test); I had to create this bogus
  information because I am not a student at UCI.



 

Ensure that Choose Quarter is the correct quarter (change it with the
  pulldown menu and click the Go button if necessary).
Now you should click on the Course Listing link to enroll yourself
  in ICS-31 (or whatever course you are in).
You will next see a page similar to the following one (except that it
  will likely have more courses and instructors using checkmate this quarter).



 

Find the correct Course and Instructor(s) entry.
Note that (a) sometimes your instructor will teach more than one course during
  a quarter and(b) sometimes more than one instructor will teach a course with
  the same number; so examine this information careful.
Once you have located your course, click the Go button to the left of 
  it.
One of my courses is listed for the Spring 2013 as 36540: I&C SCI 31)
  followed by my name.
You will next see a confirmation page similar to the following one.



 

Assuming that you are enrolling in a course for the first time, Checkmate will
  show you as "not yet listed" for this course.
Click the List me for this course button.
You will then be directed to the Assignments page similar to the
  following one.



 

This page shows only Assignment #0 visible; generally each assignment
  becomes visible starting on the day that I officially assign it.
It shows Nothing submitted in a gray background, meaning that you have
  not yet submitted any parts of this assignment (there are two).
Note that we will start working on this assignment during our second lab.

Let's now examine how to see the details of this assignment and submit one
  part of it (the other part is submitted similarly).
Click the Details/Submit button under Assignment #0 and you
  will see a page similar to the following one.



 

So, this assignment (#0) has two parts
    (1 and 2): each allows 
    Exactly 1 file (see Quantity) to be submitted;
    for part 1it must be a file named demo.py; and
    for part 2it must be a file named collatzy.py
    (see Allowable file names(s):).

Each part is first described by some text.
Each part also has a Choose File button that you can use to find the
  file that you want to submit, and a Submit File(s) button
  to do that submission.
If you click Choose File and then double-click the wrong named
  file (as illustrated below)



 

and then click the Submit File(s) button, you will see a page with
  the following error message.



 

at which time you can click the Return to Assignment Details button
  to try again.
If you click Choose File and then double-click the correct 
  named file, you will see a page with the following confirmation message
  (as illustrated below).



 

At this point, if you click the Return to Assignment Details button,
  you will see a page with the following status.



 

For this Assignment, Requirements are not yet met in a red
  background,appears because only one of the two required parts of this
  programming assignment have been submitted.
For Part #1, the Choose File and Submit File(s) buttons
  have been replaced with information about the file already submitted and
  a Remove File button, in case you want to remove the current submission
  and resubmit a version of this file: if you remove the current file, the
  Choose File and Submit File(s) buttons will reappear.
You may remove/submit files as many times as you want.
Although Checkmate saves all your submissions (and  we can see all of them),
  we grade only the final submission that you make.

After submitting both files, Checkmate will display the page for this
  assignment as follows.



 

The text Requirements are met in a green background, appears because all
  parts for this assignment have now been successfully submitted.
Of course, this says nothing about the quality or correctness of the
  submission; it pertains only to the requirement that all needed files, with
   the correct names, were submitted.
Again, by using the Remove File buttons you can remove files that you
  submitted early, so that your resubmit any/all parts.
These files are never really removed from the dropoff system, but instead are
  put in a special "old submission" area that Checkmate maintains.
Finally, if you return to the Course Page, which shows summary
  information about each assignment, you will see a page similar to the
  following one.



 

This completes our tour of the Checkmate system.
You can practice with this system by yourself; we will start using it for real
  during our first lab meeting.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/glossary.html
##-----------------TITLE------------------------##
Glossary
##------------------TEXT------------------------##
Glossary of Programming (and Java) Terms






Cascaded Method Calls
In a cascaded method call, we use the result returned by one method (a
  reference to an object) to immediatley call another method.
If we declare String s = "foo"; and then the cascaded method call
  s.toUpperCase().replace('F','G') it returns a result of "GOO":
   toUpperCase is called on the object s refers to, and returns 
  a reference to a new object whose state is "FOO"; the cascaded method
  call immediately calls replace on this reference, and return a
  reference to a newer object whose state is "GOO".
Cascaded method calls is similar to composition of functions in mathematics.




Checked Exception
A checked exception is a sublcass of Throwable but not of RunTimeException.
Such exceptions generally indicate an extra-logical failure (one not related
  to programming errors; e.g. EndOfFileException).).
They are required either to be caught, or appear in a method that specifies
  in its prototyp that it throws that kind of exception.
Contrast to Unchecked Exception.




Access Modifier
A Java keyword that describes whether/how some class member can be
  referred to (accessed).
Common access modifiers are public, private, protected,
  static, and final.




Accessor
A Java method that examines the state of an object but does not change it
  is called an accessor
Accessors typically return a result (otherwise, calling one would produce
  not visible effect).
Accessors are often call "getters", and their names often start with
   get.
See mutator.




Constructor
A class member whose purpose is to help initialize all the fields of a class.
Constructors can be overloaded.




Driver
A program with a simple menu for testing the constructors and methods of
  a class.
The user selects which method to call via the menu, and the result of
  the operation is printed (often along with the current state of the
  object via the toString method).




EBNF
Extended Backus-Naur Form: A notation for formally describing the syntax of
  a programming language (i.e., specifying which programs are grammatically
  correct).




Evaluate
What Java does with an expression.




Exception
If a built-in Java operator or programmer supplied Java method cannot
   correctly compute its result (e.g., the user has specified the bad
   arguments) it throws an exception to indicate a problem.
Exceptions are classified as either checked or not-checked.
When such operators/methods occur in try/catch blocks, the programmer can
  indicate how to proceed if an exception is thrown.




Excecute
What Java does with a statement.




Identifier
A kind of token, used for names: variable names, method names, class names,
  etc.
Identifiers always start with letters; a dollar sign is allowed, but this
  character should be reserved for special identifiers created by the
  Java compiler.



 
Immutable
A class is immutable if is defines no mutator methods.
This means that once the state of an object is initialized by
  a constructor, it will never change.
String and the wrapper classes are all immutable.




Java
A programming language designed by James Gosling at Sun Microsystems.
Java is meant to be easier (and safer) to use than C++ (the language that 
  it most closely resembles) at the cost of being less efficient.
The implications of this tradeoff are very interesting.




Keyword
A kind of token, used for names/identifiers reserved by Java with immutable
  meanings.




Literal
A kind of token, used for the value of a type.
Java allows us to specify literals for the primitive types int, double,
  boolean, and char; and for the reference/class type String.




Members
Java classes define and document three kinds of  members:
  constructors, methods, and fields.
Almost everything that we can say about a class is said about
  one of these members.




Mutator
A Java method that changes the state of an object is called a mutator.
Mutators typically do not return a result (are declared to return void),
  although some mutators both change state and return a result
  (e.g., nextToken in StringTokenizer).
Mutators just change state, without looking at current values, are often call
  "setters", and their names often start with set.
See accessor.




new
new is a unary prefix operator, which takes as an operand the
  name of any class.
Following the class name is a pair of open/close parentheses;
  inside these parentheses, separated by commas, is any information
  that the class requires to specify the initial state of the
  object being constructed.
The new operator constructs a new object from this class, initializes
  it, and then returns as a result (all operators return results) a reference
  to this object.




Operator
A kind of token, mostly used for arithmetic, relational, logical, or textual
  operations (operating on primtive types or references -but not on the
  state of the objects that they refer to).




Overloaded
An operator or method is overloaded if it has more than one prototype.
Java determines which actual operator/method to use based on its
  signature.




Primitive Type
A type built in to the Java language (as a keyword).
The main primtive types are int, double, boolean,
  and char; less often used primitive types are short,
  long, and float.




Prototype
A specification of the types and exceptions involved in an operator or method.
It shows the types of the operands/parameter, the type of the result, and any
  exceptions that can be thrown during the computation.




Reference Type
A reference type includes the names of interfaces and classes (either declared
  in the standard Java library or by a programmer).




Separator
A kind of token, used for punctuation (period, comma, semi-colon) or grouping
  (parentheses, brackets, braces -which all come in paris: one for openining
  the group and one for closing it).




Signature
A specification of the types involved in an operator or method.
It shows the types of the operands/parameters only.
It is a subset of the prototype information (it omits the type of the result
  and any exceptions that can be thrown during the computation).




Syntax Constraint
An extra rule imposed by the compiler on some statement.
The rule either cannot be encoded in the EBNF, or it is just
  very cumbersome to do so.
Example: in an if statement, the expression in the
  parentheses (which is specified in the EBNF) must be of type
  boolean.




Token
The smallest lexical unit in a program.
The Java compiler scans the characters in a program, grouping them into tokens.
The 6 basic kinds of tokens are identifiers, keywords, separators, operators,
  literals (either type int, double, boolean, char, or String), and comments.




Types
Java types include primitive types and reference types.
Types are a bit more general than classes; while every class is a types,
   types also include interfaces.




Variable
Variables are declared to have names and types (either primitive or reference).
A variable of a primitive type a value of that type.
A variable of a reference type stores either null (meaning it
  refers to no object), or a reference to an object constructed from
  some compatible class: the object stores more information.




Unchecked Exception
An unchecked exception is a sublcass of RunTimeException.
Such exceptions generally indicate a programming error (e.g.
  IllegalArgumentException).
Contrast to Checked Exception.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/ascii.html
##-----------------TITLE------------------------##
ASCII Table
##------------------TEXT------------------------##
ASCII Table




Introducton
  I adapted this information from a
   web site
    and I have made it available locally.
  
  ASCII stands for American Standard Code for Information Interchange.
  Below is the ASCII character table, including descriptions of the first 32
    characters.
  ASCII was originally designed for use with teletypes, and so the descriptions
    are somewhat obscure and their use is frequently not as intended.
  
  Java actually uses Unicode, which includes ASCII and other characters from
    languages around the world.


ASCII Table

Dec  = Decimal Value
Char = Character

'5' has the int value 53
if we write '5'-'0' it evaluates to 53-48, or the int 5
if we write char c = 'B'+32; then c stores 'b'


Dec  Char                           Dec  Char     Dec  Char     Dec  Char
---------                           ---------     ---------     ----------
  0  NUL (null)                      32  SPACE     64  @         96  `
  1  SOH (start of heading)          33  !         65  A         97  a
  2  STX (start of text)             34  "         66  B         98  b
  3  ETX (end of text)               35  #         67  C         99  c
  4  EOT (end of transmission)       36  $         68  D        100  d
  5  ENQ (enquiry)                   37  %         69  E        101  e
  6  ACK (acknowledge)               38  &         70  F        102  f
  7  BEL (bell)                      39  '         71  G        103  g
  8  BS  (backspace)                 40  (         72  H        104  h
  9  TAB (horizontal tab)            41  )         73  I        105  i
 10  LF  (NL line feed, new line)    42  *         74  J        106  j
 11  VT  (vertical tab)              43  +         75  K        107  k
 12  FF  (NP form feed, new page)    44  ,         76  L        108  l
 13  CR  (carriage return)           45  -         77  M        109  m
 14  SO  (shift out)                 46  .         78  N        110  n
 15  SI  (shift in)                  47  /         79  O        111  o
 16  DLE (data link escape)          48  0         80  P        112  p
 17  DC1 (device control 1)          49  1         81  Q        113  q
 18  DC2 (device control 2)          50  2         82  R        114  r
 19  DC3 (device control 3)          51  3         83  S        115  s
 20  DC4 (device control 4)          52  4         84  T        116  t
 21  NAK (negative acknowledge)      53  5         85  U        117  u
 22  SYN (synchronous idle)          54  6         86  V        118  v
 23  ETB (end of trans. block)       55  7         87  W        119  w
 24  CAN (cancel)                    56  8         88  X        120  x
 25  EM  (end of medium)             57  9         89  Y        121  y
 26  SUB (substitute)                58  :         90  Z        122  z
 27  ESC (escape)                    59  ;         91  [        123  {
 28  FS  (file separator)            60  <         92  \        124  |
 29  GS  (group separator)           61  =         93  ]        125  }
 30  RS  (record separator)          62  >         94  ^        126  ~
 31  US  (unit separator)            63  ?         95  _        127  DEL
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/pythoneclipsejava/java.html
##-----------------TITLE------------------------##
Java Download and Installation Instructions
##------------------TEXT------------------------##
Java Download and Installation Instructions





You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing Java.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.
This document shows downloading and installing Java 8 on Windows 7 in
  Summer 2015.



Java

The following instructions were composed for installing Sun Java 1.8.0_60
  (aka Java SE Development Kit (JDK) 8, Update 60).
The version you download may be newer.

The Java download requires about 1 MB of disk space; keep it on your machine,
  in case you need to reinstall Java.
When installed, Java requires about an additional 290 MB of disk space.


Downloading

Click
    
      Java Downloads.
    
    The following page will appear in your browser.
    
    


Click the Free Java Download red button.
    
    The following page will appear in your browser.
    
    
    
    The page should indicate your Operating System: here in red, beneath
      the banner, it says Download Java for Windows.


Click the Agree and Start Free Download red button.
    If you are asked Do you want to run or save chromeinstall-8u60.exe
      (570 KB) from sdlc-esd.oracle.com click Save
    
    This file should start downloading into your standard download folder.
    This file is under 1 Mb so it should download quickly.
    
    The file should appear as 
    
    
    
    Terminate the window browsing the Java download page.


Move this file to a more permanent location, so that you can install Java
      (and reinstall it later, if necessary).



    Start the Installing instructions directly below.




Installing
Double click the chromeinstall-8u60.exe
      file that you just downloaded and moved.
    
    In a few seconds a pop-up window titled User Account Control will
      appear, posing the question Do you want the following program to
      install software on this computer?
    
    


Click the Yes button.
    
    A Java Setup - Welcome pop-up window will appear.
    
    


Click the Next > button.
    
    
      If an Java Setup - Uninstall out-of-date versions pop-up window
        appears, click the Remind me Later button.
    
    
    A Java Setup - Progress pop-up window will appear, with the 
      following message at the top of the window:
        Status: Installing Java
    
    
    
    A green progress bar will appear, showing the progress as it installs
     Java, and will finally disappear (on my machine this took about
     30 seconds).
    Eventually, a Java Setup - Complete pop-up window will appear.
    
    
    


Click Close.
    
    A browser will appear, with a red Verify Java version button.
    
    


Because of recent incompatabilities between Java and browsers, this test
      will typically not run correctly, so just terminate this browser.
    
    If you know how to bring up system prompt/cmd window, you can test the Java
      installation by typing java -version in it.
    It should show.
    
    
    
    After seeing this message (or an error message), type exit in the
      cmd.exe window and press the Enter key.


The installed files are typically stored (in Windows) in the folder
  C:\Program Files (x86)\Java.
Inside this folder should be the folder: jre1.8.0_60, which itself should
  contain a bin and lib folder, and some miscellaneous .txt
  and a Welcome.html file.

You may now follow the instructions to download and install Python or C++
  and/or the Eclipse IDE (for Python, Java, or C++).
Note: you need to download/install Java even if you are using Eclipse only
  for Python)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/bugs.html
##-----------------TITLE------------------------##
Bugs
##------------------TEXT------------------------##
Bugs in Programming






Introduction
Webster's Collegiate Dictionary includes the following definition of
  bug: "an unexpected defect, fault, flaw, or imperfection."
In programming jargon, "errors" known as "bugs".
There are many apocryphal stories about the origin of this term and how it
  got applied to programming.
In the most popular story, Grace Murray Hopper discovered that the Harvard
  Mark II computer was producing incorrect answers.
When she examined the machine more closely, trying to locate the problem, she
  found a squashed moth, which was caught between the contacts of an 
  electromechanical relay, preventing the  relay from fully closing and
  conducting electricity; ergo, the first computer bug.
In fact, she extracted the moth with a pair of tweezers and taped it into the
  operator's logbook with the comment "First actual bug found" -implying that
  the term was already in use at that time.
Other stories about the first use of "bug" abound, so perhaps we shall never
  know the true entomology of this word.

The term bug became popular in programming to save the egos of programmers who
  could not admit that their programs were full of errors.
Instead, they preferred to say that their programs had bugs in them.
Actually, the metaphor is apt: programming bugs are hard to find; and although
  a located bug is frequently easy to fix, it is difficult to ensure that all
  the bugs have been removed from a program.

Debugging is the name that programmers give to the activity of locating
  and removing errors from programs (once the errors are known to exist, from
  testing the program).
A programmer who is testing a program is often looking for new bugs to correct.




Categorizing Bugs
This section categorizes bugs into four broad categories, each illustrated via
  an analogy that should help clarify its nature.
Knowing the names of our enemies is the first step toward defeating them, so in
  the paragraphs below we define and explain the terms token error,
  syntax error, execution error, and intent error.

You might ask, "Why spend so much time talking about bugs when they should
  never occur?"
The answer to this question is that programming requires an inhuman amount of
  precision, and although bugs should not occur in principle, they occur
 frequently in practice.
Instead of expecting to write a completely correct program, we should expect
  to write a partially correct program.
Then, we must become adept at quickly finding and fixing bugs by closely
  examining our programs (either by hand or with a special tool that helps
  us monitor an executing program).
Whenever we change a program, we should be able to prove that at least one bug
  has been removed, and that our program has become more correct.
It is common for novice programmers to change programs randomly, and as a
  result make them less correct.
Avoid this temptation: debug your programs by carefully analyzing them, making
  only proven corrections that you understand. 




Token Errors
A token error occurs whenever our program contains a word or symbol that is not
  in Python's vocabulary or has been previously bound to a value..
As an analogy, suppose that one day we are standing on a street in San
  Francisco, and are asked by a lost motorist, "How can I get to Portland,
  Oregon?"
If we say, "Just keep gngoi for ihegt hundred semil," we would have committed
  multiple token errors.
The motorist is unable to follow our instructions, because he is unable to
  decipher some of the words from which the instructions are composed.
Similarly, the Python interpreter must recognize each token (identifier, 
  operator, delimiter, literal, and comment) in our programs.




Syntax Errors
Even though the Python interpreter may recognize every token in a program, the
  program still may contain a syntax error.
This type of error occurs whenever we use incorrect grammar or punctuation
  (according to the syntax rules of the Python programming language).
Going back to our lost motorist, we might reply, "For keep hundred miles going
  eight just."
Here, each word/token is individually recognizable as correct English, but we
  have combined them in a senseless and convoluted manner: the parts of speech
  are not in their correct positions for English grammar.

If a program contains any token or syntactic errors, the Python interpreter
  will discover and report them (typically in an Eclipse editor view).
In both cases, the Python Interpreter has no idea of what we meant to say, so
  it will not try to correct the error; it will simply report it.

All these errors are called static errors, because the Python
  Interpreter detects them while we are typing the program, before we run it.
Errors that occur when the program is running (or executing) are called
  dynamic (or run-time) errors.
It is much easier to fix static errors.






Execution Errors
Execution errors occur when the Python intepreter is executing code and
  discovers that it  can't legally carry out one of our instructions (for
  example, dividing by 0).
If it recognizes such a case, it raises an exception and terminates execution
  of the program (again, supplying some information about the error).
Returning to our motorist trying to get from San Francisco to Portland, we
  might tell him to, "keep going for eight hundred miles."
But, if he happens to be facing west at the time, and interprets our
  instructions literally, he could travel only a few miles before reaching the
  Pacific Ocean.
At this point he would stop (we hope) and realize that he could not complete
  our instructions as given.
This illustrates an execution error.




Intent Errors
The final error category is the most insidious, because the Python Interpreter
  cannot detect and report this kind of error when it occurs.
An intent error occurs whenever Python successfully runs our program, but the
  program doesn't produce the correct result.
Coming back to our motorist who is trying to reach Portland from San Francisco;
  we could again tell him, "Just keep going for eight hundred miles."
But if this time he happened to be facing south, he could successfully finish
  our instructions, but he would end up in Tijuana, Mexico not Portland, Oregon.

Remember that Python understands neither our programs nor what we indended them
  to do.
It knows only how to run our programs.
There is no way for Python to know what we intend the program to do, or detect
  that our program did not accomplish what we intended it to do.

Frequently, intent errors occur early in our programs and then later lead to
  execution errors.
In such cases, the error may become manifest at a location that is different
  than the location that is the source of the error.  
Thus, we must carefully examine our programs, either from the beginning, or
  backward from the execution error, or end of the program, to locate the
  incorrect instructions.





Footnotes
Grace Murray Hoppen
Grace Murray Hopper (1907-1992) was a mathematician who joined the Navy as a
  WAVE during World War II.
During her wartime service, she was a programmer who worked on the Harvard
  series of computers: the first general-purpose American stored-program
  computer.
After the war she joined the Remington Rand Corporation, but also continued to
  be active in the Navy.
During the 50s and 60s she worked on the development of compilers in general,
  and in particular on the programming language COBOL, which is used still
  extensively for business programming.

She retired from the Navy in 1986, having reached the rank of a Rear Admiral.
Throughout her lifetime she was an active lecturer and educator; in her honor,
  the Association of Computing Machinery (ACM) has named a prize for innovative
  software developed by young computer scientists in her honor.
They also hold the "Grace Hopper Celebration of Women in Computing" conference
  in her honor every year.
The Navy also named a guided missile destroyer in her honor.



On the origin of Bugs: the OED
The Oxford English Dictionary cites a 1889 newspaper quotation that said,
  "Mr. Edison, I was informed, had been up the two previous nights discovering
  'a bug' in his phonograph."
It is not know where this term first occurred in print.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/pythoneclipsejava/python.html
##-----------------TITLE------------------------##
Python Download and Installation Instructions
##------------------TEXT------------------------##
Python Download and Installation Instructions





You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing Python.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.

This document shows downloading and installing Python 3.4.3 on Windows 7 in
  Summer 2015.
You should download and install the latest version of Python.




Python: Version 3.4.3


The Python download requires about 24 Mb of disk space; keep it on your machine,
  in case you need to re-install Python.
When installed, Python requires about an additional 50 Mb of disk space.

Downloading

Click
    
      Python Download.
    
    The following page will appear in your browser.
    
    
    

Click the Download Python 3.4.3 button.
    
    The file named python-3.4.3.msi should start downloading into your
      standard download folder.
    This file is about 24 Mb so it might take a while to download fully if you
      are on a slow internet connection (it took me about 10 seconds over a
      cable modem).
    
    The file should appear as
    
    


Move this file to a more permanent location, so that you can install Python
      (and reinstall it later, if necessary).

Start the Installing instructions directly below.





Installing
Double-click the icon labeling the file python-3.4.3.msi.
    
    An Open File - Security Warning pop-up window will appear.
    
    


Click Run.
    
    A Python 3.4.3 Setup pop-up window will appear.
    
    
    
    Ensure that the Install for all users radio button is pressed.


Click Next > button.
    

    A new Python 3.4.3 Setup pop-up window will appear
    (Select Destination Directory).
    
    
    
    
    Note that if you have installed an earlier version of Python 3.4, the
          following pop-up window will appear.
    
    
    
    Click the Yes button to use the newest installation.
     
    
    The default directory will appear in the bottom as C:\Python34\ and
      unless you have a good reason to use another directory, use this one.



Click the Next > button.
    

    A new Python 3.4.3 Setup pop-up window will appear
    (Customize Python 3.4.3).
    
    
    
    Use the default customization, which selects the Python Interpreter
      and all its libraries (about 42 Mb).
     


Click the Next > button.
    

    In a few seconds a pop-up window titled User Account Control will
      appear, posing the question Do you want the following program to
      install software on this computer?
    
    


Click the Yes button.
    
    A new Python 3.4.3 Setup pop-up window will appear
    (Install Python 3.4.3).
    
    
    
    During installation, it will show the various operations it is
      performing and a progress bar for each one.
    
    
    It might temporarily pop-up a small window in which to execute commands.
    
    
    
    
    Eventually a new Python 3.4.3 Setup pop-up window will appear
    (Complete the Python 3.4.3 Installer).
    
    


Click the Finish button.


Python should now be installed.
To try to verify installation, navigate to the directory
   C:\Python34 (or to whatever directory on which you installed Python)
   double-click the icon/file python.exe.
The following pop-up window will appear.
    
    
    
A pop-up window with the title C:\Python34\python.exe appears, and inside
  the window on the first line is the text Python 3.4.3 ...
  (notice that it should say 32 bit).
Inside the window, at the bottom left, is the prompt >>>: type
  exit() to this prompt and press enter to terminate Python.

You should keep the file python-3.4.3.msi somewhere on your computer in
   case you need to reinstall Python (not likely necessary).

You may now follow the instructions to download and install Java (if you have
  not already done so), and then the instruction to download and install the
  Eclipse IDE (for Python, Java, or both ).
Note: you you need to download/install Java even if you are using Eclipse only
  for Python)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/introtopythonineclipse/index.html
##-----------------TITLE------------------------##
Python Programming in the Eclipse IDE
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/pythoneclipsejava/eclipsepython.html
##-----------------TITLE------------------------##
Eclipse Download and Installation Instructions
##------------------TEXT------------------------##
Eclipse Download and Installation(for Python) Instructions
    




Install Python and Java before installing Eclipse.

You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing Eclipse.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.
This document shows downloading and installing Eclipse on Windows 7
  in Summer 2015.




Eclipse: Version 4.4 (Luna)


The Eclipse download requires about 200 MB of disk space; keep it on your
  machine, in case you need to re-install Eclipse.
When installed, Eclipse requires an additional 200 MB of disk space.


Downloading
Click
    
      Eclipse
    The following page will appear in your browser.
    In this handout we will download Eclipse Standard 4.4 for
      Windows 32 Bit; if your computer uses Windows, continue below; otherwise
        look for the pull-down list showing Windows and instead choose
        either Mac OS X (Cocoa) or Linux and then continue below.
    
    
    
    It is critical that Java, Python, and Eclipse are either all 32 Bit or are
       all 64 Bit (and only if your Machine/OS supports 64 Bit): I think it
       easiest to use 32 Bit for everything.


Click the Windows 32 Bit Operating System for your machine,
       under the heading Eclipse Standard 4.4 (right under Package
       Solutions).
    
    You will see the following page (don't worry about the name of the
      institution to the right of the big downward pointing arrow).
    
    
     

Click the orange DOWNLOAD button.
    The site named here, in orange to the right of the button:
      United States - Columbia University (http) is the
      random one chosen by the download page this time; yours may differ.
    
    This file should start downloading in your standard download folder, while
      showing a splash screen about donating to Eclipse.
    This file is about 200 Mb so it might take a while to download fully if you
      are on a slow internet connection (it took me about 5 minutes over a
      cable modem).
    Don't worry about the exact time as long as the download continues to make
      steady progress.
    In Chrome progress is shown on the bottom-left of the window, via the icon
    
    
    
    The file should appear as
    
    
    
    Terminate the window browsing the Eclipse download.


Move this file to a more permanent location, so that you can install Eclipse
      (and reinstall it later, if necessary).

Start the Installing instructions directly below.





Installing (for Python)

Python and Java should be installed before installing Eclipse

Unzip eclipse-standard-luna-R-win32.zip, the file that you just
     downloaded and moved.
    
    On my machine (running Windows 7), I can
    Right-click the file.
    Hover over the IZArc command from the menu of options.
    Click Extract Here
    
    
    
    
    If you do not have IZArc or an equivalent unzipping program, here is the
      web site to download a free copy of
      IZarc.
    
    Unzipping this file creates a folder named eclipse; unzipping
      200 MB can take a few minutes.
    You can leave this folder here or move it elsewhere on your hard disk.
    I recommend putting the downloaded file and resulting folder in the
       C:\Program Files\ directory.


Create a shortcut on your desktop to the eclipse.exe file in
      this eclipse folder: 
    
    On most Windows machines, you can
    Right-press the file eclipse.exe
    Drag it to the desktop.
    Release the right button.
    Click Create shortcut here
    
    
    Now you are ready to perform a one-time only setup of Eclipse on
      your machine.


Double-click the shortcut to Eclipse that you just created above.
    
    If the following Security Warning window appears
    
    
    
    Uncheck the Always ask before opening this file checkbox
      Click Run
    
    
    The following splash screen will appear
    
    
    
    and then a Workspace Launcher pop-up window will appear.
    
    
    
    In the Workspace text box, your name should appear between
      C:\Users\ and \workspace, instead of Pattis.
    
    Leave unchecked the 
      Use this as the default and do not ask again box.
    Although you will use this same workspace for the entire quarter (checking
      projects in and out of it), it is best to see this
      Workspace Launcher pop-up window each time you start Eclipse, to
      remind you where your workspace is located.
    
    In fact, it is a good idea to create on your desktop a shortcut to your
      workspace folder; but you must click OK (see below) before
      Eclipse creates this folder and you can create a shortcut to it.

Click OK.
    
    Progress bars will appear as Eclipse loads.
    
    Eventually the Eclipse workbench will appear with a Welcome tab
      covering it.
    
    


Terminate (click X on) the Welcome tab.
    
    You will not see the Welcome tab when you start Eclipse again, after
      this first time.


Click Help (on the far right of the line below this window's blue
      title Java - Eclipse) and then click
      Install New Software... in its pull-down menu, as shown below.
    
    
    
    The Install pop-up window will appear.
    
    


Enter the text (or cut/paste from this document)
      http://pydev.org/updates into the Work with text box and
      press Enter.
    
    In a few seconds the information under Name should change from
    There is no site selected to Pending to
    
    
    
    Select only the top PyDev checkbox; do NOT select the 
      PyDev Mylyn Integration (optional) box.
    Check before proceeding that the Install pop-up window appears as
    
    


Click Next >
    
    A new Install pop-up window will appear.
    
    


Click Next >
    
    A new Install pop-up window will appear.
    
    Select the I accept the terms of the license agreement radio button,
      so the window appears as
    
    


Click Finish
    
    An Installing Software pop-up window will appear.
    During installation, it will show the various operations it is
      performing and a progress bar for each one.
    Because the installer is fetching various files online, this process might
      take a few minutes.
    
    
    
    The installation will pause, and  a Selection Needed pop-up window
      appears.

Check the box labeled Brainwy Software; Pydev; Brainwy.
    
    Check before proceeding that the Install pop-up window appears as
    
    


Click OK
    
    The installation will finish (showing the final progress bars).
    
    A Software Updates pop-up window will appear.
    
    


Click Yes
    
    Eclipse will terminate and restart.
    As you did in step 3, click OK to the 
      Workspace Launcher pop-up window.


Click Window (to the left of Help on the far right of the 
      line below this window's blue title Java - Eclipse) and then
      click Preferences  in its pull-down menu, as shown below.
    
    


Drill down to select the interpreter:
    Disclose PyDev by clicking the + in front of
             PyDev or double-clicking  PyDev (after the +); the
              + changes to a -.
      Disclose Interpreters by clicking the + in front of
             Interpreters or double-clicking Interpreters
             (after the +); the + changes to a -.
      Select Python - Interpreter.
    
    The Preferences pop-up window should appear as follows
    
    


Click New... at the top-right of the top window
    
    A Select Interpreter pop-up window appears.
    Type Python34 in the Interpreter Name text box.
    Type (or cut/paste) C:\Python34\python.exe in the
      Interpreter Executable text box (or browse to this file).
    The Select Interpreter pop-up window should appear as
    
    
    


 Click OK.
    
    A Selection needed pop-up window will appear.
    
    
    
    Ensure that a check appears in all four checkboxes.


Click OK.
    
    The Preferences pop-up window will be changed to
    
    
    

Click OK.
    
    A Progress Information pop-up window will appear.
    
    
    
    During installation, it will show the various operations it is
      performing and a progress bar for each one.
    Eventually the installation will terminate.
    
    If the following pop-up window appears
    
    
    
    Ensure the "Private networks, such as my home or work network"
      checkbox is checked, and click Allow Access.


Click Window (to the left of Help on the far right of the 
      line below this window's blue title Java - Eclipse SDK), hover
      over Open Perspective in the pull-down menu and then click
      Other... in the next pull-down menu.
    
    
    
    The Open Perspective pop-up window will appear.
    
    


Double-click PyDev (third from the bottom)
    
    The blue label on the Eclipse window will change to
       PyDev - Eclipse, the Package Explorer in the upper-left
       tab will change to PyDev Package Explorer, and a PyDev icon
       will appear to the right of the Java icon.
    
    
   

Right-click the Java icon to the left of the PyDev icon
      and select close
    
    
    
    The Eclipse workbench will now have only the PyDev icon here and 
      will look like
    
    


Locate the workspace folder created in step 3
      (see C:\Users\yourname\workspace)
      and download the
        courselib.zip
      file into this workspace and unzip it there, producing the
      courselib folder; it should should contain a bunch of Python
      module files (ending in .py).
    From time to time you will be asked to put other course-specific Python
      module files into this courselib folder; these modules will be
      usable in all Python projects in Eclipse.


Inform Eclipse to use the courselib folder in all Python projects.
Select Window | Preferences.
  Disclose PyDev by clicking the + in front of
             PyDev or double-clicking  PyDev (after the +); the
              + changes to a -.
  Disclose Interpreters by clicking the + in front of
             Interpreters or double-clicking Interpreters
             (after the +); the + changes to a -.
  Select Python - Interpreter.

    
    
    
    Click the Libraries tab (leftmost, above the bottom pane)
    Click the New Folder button (topmost, right of the bottom pane)
    Browse to the courselib folder (added above) in the
          Browse for Folder pop-up window
         (C:\Users\yourname\workspace\courselib).
    Click the courselib folder selected, and then click OK
    Click Apply (you will see some progress bars)
    The  pop-up window should now appear as
    
    
    
    Notice a fifth entry (ending in courselib appears at the bottom of
      the bottom pane named System PYTHONPATH
    Cick OK



Terminate (click X on) the Eclipse window.

Eclipse is now installed for Python.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/handouts/syllabus/syllabus.html
##-----------------TITLE------------------------##
Syllabus
##------------------TEXT------------------------##
Syllabus

ICS-33: Introduction to Programming









Introduction
This page contains material that will be important and useful throughout 
  the entire quarter.
I consider it a contract with my students.
Please read it once now, and keep it handy for future reference.
You can search this page in your browser for specific information by 
  typing Ctrl F (on most browsers) and then entering the text that you
  want to locate.
Many questions that you might have about this course during the quarter are
  already answered inside this document (so become familiar with its contents
  and how to search it).
It also contains lots of good advice on getting the most out of this course.








Catalog Description

"Intermediate-level language features and programming concepts for larger, more
 complex, higher-quality software.
Functional programming, name spaces, modules, class protocols, inheritance,
  iterators, generators, operator overloading, reflection. Analysis of time
  and space efficiency."










Course Philosophy
My goal in ICS-33 is for students to solidify their basic understanding of
  Python and to extend their knowledge of Python and their ability to use the
  language to solve problems.
We will explore new Python language features and re-examine old ones, in light
  of what we learn.
The material we cover needs to be understood thoroughly, so that we can apply
  it in complex and novel situations, not just memorized; by mastering the tool
  that is Python, we can build all sorts of useful software with it.

We will also cover some Computer Science topics that are closely related to
  programming.
In addition, students will be introduced to some new tools:
  modules (regular expressions, unnit tests) and software 
 (Eclipse Integrated Developement Environment and its Debugger Perspective).

The intellectual content of this course can be roughly categorized into three 
  main areas (although some topics bridge multiple areas):
  Classes, Functions, and Computer Science.
  Classes: operator overloading, (iterator) protocols, inheritance, and
          self-referential classes.
    Functions: lambdas, generators, recursion, and functional programming.
     Computer Science: EBNF/regular expressions, decorators, analysis of
           algorithms, unit-testing, and (Java and) static typing.
     

Here is a quick overview of the three programming class in UCI's three quarter
  Introduction to Programming sequence.
All are taught in Python, and the combined time-on-task studying and
  programming with this language should make students proficient at using it.
ICS-31: Introduction to Programming.
    This course introduces the basics of the Python programming language and
      how to develop programs in an Integrated Development Environment (Eclipse
      or IDLE) using Python.
ICS-32: Programming With Software Libraries.
    This course increases students' abilities to write more complicated
      programs; it focuses on students learning how to read, understand, and
      employ modules (and classes) from Python's library.
ICS-33: Intermediate Programming.
    This course examines Python more carefully, giving students a more unified
      look at the language and discussing some of its powerful features that
      make sophisticated programming easier.
    It also covers some programming-related Computer Science topics.

A quick way to analogize these courses is: 31: learning to drive; 32: road
  trips; 33: car mechanics.

Although we will mostly study programming-in-the-small, we will
  concentrate on the technical and lingual issues of building large,
  reliable programmed systems that are constructed from standard components.
Expect to cover most relevant Python language features thoroughly, but also
  to spend much time discussing less concrete -but ultimately more general and
  important- aspects of computer programming.
Programming style is a particularly important topic: to understand
  programming, we really need to develop appropriate aesthetics that allow
  us to separate "elegant" programs from "hacks".
As in any writing activity, we must also learn to be self-critical of our own
  creations, so that we can continually improve them; this skill is difficult
  to acquire, and its importance extends well beyond the domain of
  programming.

Finally, to become an expert in any discipline, we must master its
   terminology.
Fluency with technical terms allows us to communicate -and even to think-
   more accurately and concisely.
Therefore, the materials in this course will define, illustrate, and
   repeatedly use many important technical terms concerning programming.
Take the time required to master them. An old Chinese proverb says,
     "The first step towards wisdom is calling things by their right names." 








. 
Textbooks
The primary sources for ICS-33 will come from materials that I have
  written (and am continually updating).
These materials include readings, problem sets, quizzes, and programming
  assignments (and a bunch of infrastructure material, like this syllabus).
Typically, these materials will be shorter than chapters in a textbook, but
  they are more densely packed with information; thus, you will still spend
  about the same amount of time studying my note as you would reading a
  textbook.

Recently ICS-31 and ICS-32 classes taught by other instructors have used the
  following book: Perkovic, Introduction to Computing Using Python: An
  Application Development Focus, Wiley, 2011.
Copies should be available at the bookstore or online at

Amazon,

Here are two Python books that are great resources for programmers.
I have required the following textbook for ICS-33, which is a huge,
  extensive, but cheap introduction to Python for those who already understand
  programming (a category you should be in).
It is a great reference book with many small examples; I frequently find myself
  looking up the details of topics in my copy.

Lutz, Learning Python (Fifth Edition), O'Reilly, 2013.
Copies should be available at the bookstore or online at

Amazon,
There is a companion book to this one that discusses and explores many of
   Python's standard library modules.
 We will not use this book in this class, but it is another excellent book to
   have on your shelf.

Lutz, Programming Python (Fourth Edition), O'Reilly, 2011.
Copies should be available at the bookstore or online at

Amazon,

These books are 



Computing Platforms and Programming Environments
The standard computing platforms for this course are
  PCs running the Windows (7, 8, or a similar) Operating System (OS).
    Macintosh PCs running the OS X operating system
    Either PC running Linux.
  


We expect that ICS-33 students will use their own computers to complete their
  programming assignments (sometimes working in groups of two: pair
  programming).
All the software used in ICS-33 is available, for free, on the web: see below
  for details.

The programming environment that we will use is Eclipse: it is an Integrated
  Development Environment (IDE),  including a project manager, editor,
  interpreter, and debugger.
We will write all our programs in the Python programming language.
To run Eclipse with Python, you must first install Java (to run Eclipse), and
  then Python, and then Eclipse itself.
This software, and others useful for the course, are available through the
  Course Software
  link (see the heading Main Software, near the top).
You should try to follow these instructions, and download and install this
  software yourself; if you are having difficulty, please bring your computer
  to lab and ask our staff to help you with the installation.

Typically it takes only a few days before everyone has correctly downloaded and
  installed the necessary software, and has started to learn how to use it
  properly.
Using this software is integral to every programming assignment during the
  quarter, so it is best to be aggressive and download, install, and start
  mastering this software quickly.








ICS Computer Labs
We expect students to do much (but not all) of their programming assignments
  during their labs, which are scheduled for 4 hours per week.
These labs are staffed by TAs and Lab Tutors.
I encourage all students to ask them questions on a regular basis and generally
  engage them in a dialog about programming: learning to talk about programming
  is an explicit goal of this course.

While most students will do their coursework in labs on their own machines,
  the ICS Labs also provide machines
  with the correct software loaded.
You should follow these
  
  Activation Instructions for your ICS Lab Account early in the quarter.
Some students will use their own machines to run Eclipse and the lab machines
  to read online Python documentation.

Whether or not you plan on doing your homework in a lab, you must activate your
  ICS account and know how to use it for in-lab programming exams.
During in-lab programming exams, you must write your programs on the PCs in our
  labs, so you should learn to use these machines, even if you use your own
  machine for all other coursework.
Once you start Eclipse, what computer you are on makes little difference:
   PCs, Macs, and Linux systems operate similarly.

Although the machines in the ICS labs also provide some external storage space
  (the H drive on a Unix system), it is an excellent idea to backup your
  work either electronically or using USB memory, whether you are using your
  own computer or the computers in our lab.

Finally, the ICS 364 lab is a general purpose lab in which no courses
  are scheduled.
It is open to students on weekdays and weekends:
   MTuWThF 8:00am - 10:00pm,
   F 8:00am - 8:00pm,
   and SaSu 12:00noon - 6:00pm.
Here is the most up to date
  
  Lab Schedule for all these labs.







InstructorOffice Hours
I welcome students (individually, programming partners, or small groups), to
  come by and talk with me during my Office Hours.
If we need to talk, but you cannot come during my office hours, please email
  me so that we can arrange an alternative time to meet; or better yet, maybe
  we even can resolve the entire issue over email (or using the MessageBoard
  Forums, discussed below, where other students can benefit from questions and
  answers).

I will be glad to talk with you about any of the ICS-31/-32/-33 courses, 
   Computer Science, UCI, or whatever else you want to discuss.
Although UCI is a large school, ICS is a smaller school within it, and ICS
  promotes opportunities for close faculty-student interaction, especially
  with instructors who are lecturers.
Unfortunately, in my opinion, not enough students take advantage of this
  opportunity at UCI.

I especially encourage students who are having problems in the course to visit
  me immediately; I know that this is asking a lot, but the payoff for
  recognizing the situation and acting on it immediately is tremendous.
The primary reason that students fail to thrive in programming courses is that
  they fall behind in their work -often because of what is initially a small
  misunderstanding; but, because of the cumulative nature of this course,
  even a small misunderstanding can quickly grow into a big one.
Often, I can quickly diagnose and rectify such a problem one-on-one.
Getting help fast can critically affect your overall performance in
  this course: many times I've seen students start performing one grade
  level higher after coming in to get help during my office hours.

Unfortunately, I teach hundreds of students during a typical quarter, so my
  time is a bit limited.
But, generally I have time during office hours to talk with all the students
  who visit.
So, please come if you need help so we can try to work out your issues/problems.
Of course, you can also talk to your TA and Lab Tutors during your labs, where
  resources and time are not so tight.







InstructorOnline Hours
I hold online hours every weekday evening before class/lab meets: Monday,
  Tuesday, Wednesday and Thursday  evenings from 9:00pm-10:00pm.
I will be logged  onto AIM (AOL Instant Messenger) as richardepattis
  during these times.

If you are not already a member of AIM (or a similar service that can message
  AIM users)  Sign Up for
  this service (it is free).
Using this system, you will be able to Instant Message me.

You can IM me with questions; you can also cut/paste code snippets into your
  message.
Please be aware that I may be having multiple conversations, and therefore
  react more slowly than you might expect.







Instructor/Course EMail
If you have a small question (one requiring little back-and-forth discussion),
  and cannot directly contact me or any of staff, please ask it by sending me
  email (pattis@ics.uci.edu).
It has been my experience that the act of writing a detailed description of a
  problem (detailed enough so that someone not physically present can
  understand it) often leads a student to his/her own solution of the problem.
Frequently, before I even get a chance to read my email, I receive a second
  message saying,  "Please ignore my earlier message, I solved the problem
   myself."
I believe that the seeds of the solution are sown in the act of carefully
  composing the first email message.
Here is quote on my website about this phenomenon


Another effective [debugging] technique is to explain your code to someone
  else.
This will often cause you to explain the bug to yourself.
Sometimes it takes no more than a few sentences, followed by an embarrassed
  "Never mind, I see what's wrong. Sorry to bother you."
This works remarkably well; you can even use non-programmers as listeners.
One university computer center kept a teddy bear near the help desk.
Students with mysterious bugs were required to explain them to the bear before
  they could speak to a human counselor. 
- B. Kernighan & D. Pike
  (in "The Practice of Programming" pp. 123)

Talking about programming is important.
One of the reasons that we program in pairs is to always have someone who you
  can to talk to about your code; unlike the teddy bear, someone who has an
  interest in getting your code to work, and who might supply relevant feedback.

I try to answer email every few hours during the day.
I normally will not answer email sent after about 10:00pm until early the next
  morning (but I'll typically answer it by the next morning).
If you have problems late at night that you cannot resolve, please send me
  email (or post on the relevant MessageBoard Forum) summarizing your problems,
  and then go to work on something else (or if it is really late, go to sleep).
By planning to finish assignments early, you can protect yourself against a big
  problem that arises at night and cannot be fixed until the next day: you
  really don't want to have to fix such a problem the night that an assignment
  is due.

For most problems -ones that are of general interest to the class- I would
  prefer that you ask the question using a MessageBoard Forum (see below).
In this way, everyone in the class can see the question and its answer
  (which I might provide, or a a TA/Lab Tutor, or another student).
One of the few advantages of a big class is having lots of student activity on
  such forums, leading to peer-instruction.

Finally, the Electronic Educational Environment (EEE) at UCI creates and
  maintains course-wide mailing lists.
I have created a "merged" mailing list for all my ICS-33 students (which also
  includes those students signed up for CSE 43, both in the Sammueli School of
  Engineering and the Donald Bren School of Information and Computer Science).
All members of our course (staff and students) can use this mailing list, whose
  email address is ics33-W16@classes.uci.edu
All messages sent via this discussion list are archived: click
    
    here or see the Email Archive link on the course website.
Mostly student-initiated questions/discussions should use the forums mentioned
  below, but sometimes students can use this email list to inform the
  instructor, staff, and other students about some timely issue: e.g., the
  Checkmate Homework Dropoff system not responding to program submissions.







MessageBoard Forums

If you have a question of general interest (of interest to many students in the
  course, not just you), then you should post the question on one of the
    
 Forums on the EEE MessageBoard.
These forums allow students to ask questions (or start discussions) easily, as
  well as supply answers (or participate in the discsussion further).
For example, if a lecture note, programming assignment, etc. contains unclear
  (or even contradictory) information, post a note about it to the appropriate
  forum, asking for a clarification.
I, or someone from my staff will read and reply to whatever questions are
  asked.
In fact, if you read a question on a forum, and know the answer -or generally
  have something to contribute to the topic- I encourage you to to post a reply
  to help resolve the problem even sooner.
Thus, you can use the forums to discuss any course materials out-of-class.

Again, forums are appropriate for questions relevant to most students in the
  course; directly email me (see above) for questions of a more
  individualistic nature.
Obviously students should not use these forums to solicit nor post answers to
  take-home quizzes, programming assignments, or anything else that would be
  interpreted as academic misconduct (which is discussed in greater detail
  below).
But general informational questions and answers are fine.
I often find that students send me individual email when they should be
  posting on a forum; think before you decide which to do.

It is an excellent idea to check these forums frequently, to keep up to date
  on any coursewide discussions.
You can configure the forums to send you an email digest daily, which contains
  links to new/updated postings.
I received such a digest, and typically review and answer all outstanding
  questions early each morning.








Staff: TAs,  Lab Tutors
I will have various UCI graduate and undergraduate staff members to assist me 
 in running this course.
TAs will supervise the labs and be assisted by Lab Tutors.
In labs, the Staff's primary responsibilities are to help you write and debug
  your programs, backfilling Python material that you might need to know or
  understand better.
You can certainly discus programming and Python in general with these staff
  members.
TAs will also be responsible for grading programming assignments; if you have
  a question about how your programs are graded, please see the TA first,
  and then come to see me if any issues remain.
TAs will also grade the weekly quizzes and in-lab, midterm, and final exams.

While in lab, the TAs and Tutors will help you diagnose any
  computer/programming problems that you have and guide you toward a solution.
They will help you learn how to program by answering your questions; but, do
  not expect them to write your programs for you.
You should approach them with a well thought-out question, and expect to answer
  questions from them about your state of understanding the issues surrounding
  the question.
Sometimes when you come to the staff with a specific question, they will show
  you how to solve a more general problem.
Be patient; the staff are just trying to teach you how to recognize and solve
  these problems by yourself.









Classroom Information
Before/After Class

I expect students to read the assigned lecture materials, either before class
  (as a way to preview the lecture) or after class (where the lecture previews
  the reading), to get the most out of both: cover the material twice.
Try to work out solutions to the assigned problems, to prove that you have
  understood the material; you can often test/verify/explore your solutions on
  the computer.
Here understanding means "be able to use the information operationally
  to write programs".
If you have difficulty with a problem, it indicates that you should probably
  go back over the related reading -or certainly ask a question about it on the
  Forum.
One of the few advantages of a big class like this is the potental for
   peer-teaching.

Because these problems are not graded, feel free to discuss them, but don't
  give away the answers for those still working on them: working on exercises
  like these builds your programming muscles.
Students will be required to solve similar problems on (almost) weekly
  take-home quizzes, on which collaboration is NOT allowed.
Don't cheat yourself in this aspect of the course.



During Class
I expect students to attend class daily.
During the 35+ years that I have been teaching, I have observed a strong
  correlation between attending class and understanding the material (which 
  ultimately improves student grades).
Having all the course materials online is a great resource, but just as
  important is coming to class -and paying attention, once you are there-
  and participating by volunteering information when you know it and asking
  questions when you are confused.

I will lecture during class, but I prefer discussing the material and answering
  questions; asking you questions about the material, and amplifying on those
  topics that need further discussion.
I expect most "lectures" to be interactive, with students participating.

I encourage you to participate by raising your hand; sometimes I may finish
  the point I'm making before calling on you, but please keep your hand up if
  you want to speak.
If you have a question about the material, it typically means that I have
  explained something incorrectly, poorly, or incompletely, and that other
  students have (or will soon have, maybe right after they leave the classroom)
  the same question.
So, it would be best for all of us to correct the problem immediately in class
  by someone bringing it to my attention.
If you cannot ask in class, post a question later on a MessageBoard Forum.
In summary, this class runs on the Dershowitz principle:
  "Question authority; but raise your hand first".




Class Decorum
I expect students to attend class daily, arriving on time.
The announcements made at the start of class are often very important.
On Wednesdays I will collect quizzes at the start of class.
I expect students to neither carry on private conversations, nor distract
  other students by using their computers to answer email, surf the web, day
  trade stocks, or perform any other activities unrelated to this course.

Ringing cell phones disrupt my lectures.
Unless you are responsible for someone's life, your cell phone should be
  turned off.
Otherwise, you should set it to operate in some silent mode (as mine will be
  set); if it rings silently, please leave the class, with a minimum of
  disruption to the rest of the students, to answer it.
If your cell phone rings audibly in class, you will be asked to leave class
  for that day.
Finally, if you know that you must leave early, please sit near a door,
  so that you can exit quietly and without disturbing the class.

Overall, please strive to be a considerate class member, both to me and to
  your fellow students.







Testing Instruments and Grades
Quizzes
I will assign eight take-home Quizzes to ensure that everyone is keeping pace
 learning the course material and is able to express themselves on technical
  matters both in English and Python.
Each will have problems similar to those assigned daily in class (and similar
  to those on upcomming written exams; working these quizzes is a major way to
  "study" for these exams).
These quizzes will be a take-home instrument: most will be distributed at the
  end of class on Friday and collected at the start of class on the following
  Wednesday.
During the weekend, you will have as much time as you need to work on the
  quizzes.

The quizzes are open-book: you will be able to use any class materials, or any
  other materials from the web, to answer its questions.
But, you may not communicate with anyone about these quizzes nor their
  solutions; nor should you search for/look at solutions to these specific
  problems on the web (nor post problems or solutions on websites).
The quizzes are also open-computer: by that I mean that you may use a computer
  to check your work.




Programming Assignments
I will assign five full programming assignments (and one shorter one) to ensure
  that everyone is getting the necessary hands-on programming experience.
While working on these programs, you will acquire a solid and fine-tuned
  understanding of the course material as well as gain important
  process of programming skills.
Programs will typically be started in Lab on Tuesday, and be due (submitted
  electronically) two weeks later, on Tuesday evening at 11:30pm.

Students will often be required to work in groups of two on programming
  assignments.
Such an approach is called
  
  Pair Programming.
One student from each pair submit all parts of the programming assignment
  with both their names on it (in the code files) in the format specified
  (see the assignment writeups).
Apart from your pair, you can get general help from anyone (Instructor,
  TA, Lab Tutors, friends, etc.) on programs.
But, the best kind of help to get is oral: where you describe the problem,
  possibly showing your code briefly, and then get an oral answer that you
  understand and translate into code.
In such instances, you are learning. 

You may neither copy nor transcribe (written or orally) any parts of another
    student's program, nor have another student sit down and systematically
    correct your program. 

When you submit your programs for grading, you are expected to understand all
  parts of them and have improved your process of programming skills
  while writing and debugging them.
Students who complete their programs in this way will be well prepared for
  the In-Lab Programming Exams; students who get too much help (on purpose,
  or accidentally) from their programming partners or others will have a more
   difficult time on these exams, which can severely impact their grade.    

You will submit your solutions to programming assignments through Checkmate, 
  special softare that records the time they are submitted.
You can resbumit your programs as many times as you want.
We will grade only the final submission.
You can read about
  
  Submitting Homework using Checkmate and practice using it in Program #0.

To promote good time management skills, if you submit a program at least 24
  hours  before it is due, you will receive 1 point of extra credit.
If you submit a program 48 hours early, you will receive 2 points.
You can gain no more than 2 points of extra credit by early submission.
For a 60 point assignment, this extra credit is equivalent to almost half a
  letter grade improvement.

I know from long teaching experience that students who work ahead of the
  deadlines learn more, in a less stressed envrionment: students working right
  up to a deadline are more concerned with getting the right answer and less
  concerned with learning anything.
On the other side of this coin, I will not accept any late programs.
So, you must turn in your work on time: if you turn in a partially working
  program on time, it will receive partial credit; if you do not turn in
  anything on time, then I must assume you did no work on the program, and you
  will receive no credit.
Therefore, always turn in whatever work you have finished by the official due
  time.




Written Exams
I will assign one Midterm Written Exam and one Final Written Exam to
  ensure that everyone is successfully integrating all the material being
  taught.
Its problems will be similar to those assigned on homework, and especially on
  weekly quizzes.
These written exams are closed-book: you will not be able use any notes nor
  class materials while taking these exams.

The best way to study for these exams is to do all the homework and quizzes 
  (and programs -sometimes material from programming assignments appear on
  these exams) and review these quizzes (and programs).
Cramming will be of little help: we will cover too much material during
  the quarter.
Students are expected to be able to do these problems both quickly and
  accurately.

The Final Written Exam is comprehensive: it will cover material from the entire
  quarter (but will concentrate on the material presented after the Midterm
  Written Exam, which builds on the prior material).



In-LabProgramming Exams
I will assign two In-Lab Programming Exams (taken during labs) to ensure that
  everyone can write (and debug) their own programs.
The first exam will focus on using iteration and Python's major data types; the
  second on classes, overloaded operators, writing iterators, and linked lists.
Of course, you will have to know lots of general material about programming
  in Python to solve all these problems effectively (as well as how to use the
  Eclipse IDE).

The programming exams themselves will be closed-book; but, you will be able
  to access a copy of the standard Python library documentation.
I will grade these programs 90% on correctness: inapropriate use of Python
  -e.g., overly complicated or inefficient programs- will be penalized at most
 10%.



Solutions andReturned (Graded) Work
I will create a 
  
  EEE Drop Box for my solutions to all quizzes,
  programming assignments and written/programming exams soon after they are due
  (which is another reason why I accept no late work).
I expect that students will carefully examine my solutions for immediate
  feedback.
Note that the best time for you to study my solution is the day that I
  distribute it, having just spent a good amount of time working on your own
  solution.
The sooner you examine my solutions, the more receptive you will be to learning
  something.
Finally, my solutions sometimes contain mistakes: if you are the first person
  to post a correction on a MessageBoard forum, I will award you extra credit 
 points: the same number that I would take off for the mistake.

I will return graded quizzes with two class meetings after they are turned in;
  since they are typically turned in on Monday, I will typically return them on
  Friday.
I will return graded programs on the Monday following their submission; do not
  submit a new programming assignments until you have received feedback on your
  previous submission.
Finally, I will return written/programming exams within a week of when they
  are given.

If you believe that I have graded any of your work incorrectly, I encourage you
  to see me immediately about the discrepancy (in the case of programming
  assignments, see your TA first).
Such a discussion can have only positive outcomes: either I will agree with you
 that you deserve more credit (and, I do want you to receive all the credit
 that you are due), or you will come to understand the question, program, or
  solution better.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see me.




Final Grades
Your final grade is computed from your 
  quizzes, programming assignments, written/programming exams as follows.

Instrument#Points EachPoints Total% of Grade
Quizzes82520020%
Programming Assignments1 + 51@30+5@5028028%
In-Lab Programming Exams210020020%
Midterm Written Exam112012012%
Final Exam120020020%

Of these instruments, the highest percentage of points is allocated to all the
  programming assignments: 28%; these are worth a bit less than the midterm
  and final exams combined: 32%.
Note that about half the grade is based on written work (52%) and half is based
  on programs (48%); looked at another way, about half of the grade is based on
  work done supervised in class (52%) and half is based on work done in an
  unsupervised (take-home) environment (48%).

Based on your percentage, your final grade is computed as follows.

PercentageGradeGradiations90%-100%AA- (<93)80%-  89%BB-(<83)  or   B+(≥87)70%-  79%CC-(<73)  or   C+(≥77)60%-  69%DD-(<63)  or   D+(≥67)  0%-  59%F

Technically, I round your score to an integer and then apply these rules.
So, if your percentage is 86.7%, it is rounded to 87% and therefore results
  in a grade of B+.

This is straight calculation, not based on a curve.
I tend to grade programming assignments liberally, but quizzes and
  written exams conservatively.
As a rule of thumb, I expect about 25% of the student to earn As, about 25% to
  earn Bs, about 25% to earn Cs, and about 25% to earn Ds or Fs.
This course is NOT graded on a curve, so these are only expectations from
  past course performance, not mandated numbers; your numbers can 
  be higher or lower.
FYI: last quarter the actual breakdown was better: 30% As, 27% Bs, 18% Cs,
  25% Ds or Fs; overall there were more As and more Bs, so that there were
  still the expected number of 50% As and Bs (actually 57%), but fewer Cs as
  a result, and the expected numbers of Ds or Fs.

Only after finishing 4 quizzes, 2 programming assignments, one in-class
  programming exam, and the midterm will you have a reasonable indication of
  your final course grade (which, of course, will still heavily depend on the
  grades you earn afterward).








Academic Integrity
No one comes into a class expecting to cheat, but I would suggest that you
  become familiar Bren School of Information and Computer Sciences
  
  Academic Honesty policy, which is just one of many of the many
  
  Undergraduate Policies with which you should become familiar.

The following information is my own restatement of this policy, as it
  applies in my courses.
You will also be asked to read and sign a handout to acknowledge that you
  understand the
  
  Academic Integrity Contract that applies for this course.




Policy
The decision as to whether a student has cheated depends on the intent of an
  assignment, the ground rules specified by the instructor, and the behavior of
  the student. 
The following two guidelines help an instructor decide whether plagiarism has
   occurred in programming assignment, which is the fuzziest area:
 Plagiarism will be suspected if an assignment that calls for independent
         development and implementation of a program results in two or more 
         solutions so similar that one solution can be converted to the
         other(s) by a series of simple transformations.
   Plagiarism will be suspected if a student who completed an assignment 
         cannot explain both the intricacies of the solution and 
         the techniques used to generate that solution.

It is unreasonable to expect a complete definition of cheating that would cover
  all cases, because each situation is important enough to merit careful,
  individual scrutiny; however, it is helpful to have guidelines and
   precedents.

Here are some examples that are clearly cheating and clearly not cheating.

Examples of CHEATING:
Turning in someone else's work, in whole or in part, as your own (with or
        without his/her knowledge), without it including a statement of
        collaboration in the solution.
  Allowing another student to turn in your work, in whole or in part, as
        his/her own, without it including a statement of collaboration in the
        solution.
  Turning in duplicate solution.
      Even if all the comments are changed, all the variables names are
        changed, all the whitespace is changed, and the code appears in a
        different order: it is still the same program.
  Several students/pairs writing one assignment and turning in multiple
        copies, all represented (implicitly or explicitly) as an individual
        student's/pair's work, without it including a statement of
        collaboration in the solution.
  After receiving graded written work, returning written work, for
        regrading, which has been altered.
  Finding a solution to the same problem on the web and submitting it
        without explicit attribution in the solution; note that you may
        not post problems on the web, seeking a solution.
  Stealing an examination or solution from the instructor.

Generally, you should NOT EXAMINE, by reading hardcopy or by copying a file,
  the program of any other student (nor should you let anyone examine or make
  a copy of your files).
Doing so can easily lead to an intended or unintended academic violation.

If you ever feel that after talking to someone about a program, which is legal,
  your solution will be very similar to theirs, cite the consultation in the
  header comment in your program.
Doing so protects you from University disciplinary action (although the
  instructor is free to grade the material as he/she sees fit).

Examples of NOT CHEATING:
Turning in work done alone or with the help of the course's staff.
  Submitting one assignment for a group of students if group work is 
        explicitly permitted (or required, as in pair-programming).
  Getting or giving help about using the computers.
  Discussing assignments to better understand them.
  High level discussions of course material to better understand them.
  Getting or giving help about correcting simple programming errors.

Again, the key here is not studying, verbatim, someone else's code, and then
  reproducing it as your own work.
It is too easy to copy such code without really understanding it.
Technically, for programming assignments, even understanding the resulting code
  is not enough (if someone else wrote it): you should also play an active role
  in synthesizing and debugging it.
The course is as much about skills as about knowledge.


Automatic Detection of Cheating
Recently, various cheating-detection software systems have become widely
  available.
Some use search engines to compare selected portions of submitted papers to
  content on the web.
In the context of programming, they compare each student's program to those
  submitted by his/her classmates (for this quarter, and any previous
  quarters if the assignment has been repeated).
This software does not compare programs exactly: it ignores format changes,
  variable name changes, and a variety of well-know transformations that
  change the look of code but not its underlying logic.

Many courses in ICS use this software to spot potential cheating cases.
Once it identifies suspicious behavior, instructors carefully examine the
  flagged code to make a final determination as to whether students will be
  prosecuted for cheating.
Often instructors can find additional evidence of cheating, once this
  software points them to the simlar code.



Consequences
ICS will not condone cheating by students in its classes.
When cheating is suspected, instructors will take reasonable action to
  establish whether or not it has actually occurred.
If, in the instructor's opinion it has, the instructor will apply appropriate
  disciplinary policy.
In my courses, for a typical case of cheating, the student will be awarded
  negative credit for the assignment (under the precept that not doing an
  assignment, and receiving no points, is better than cheating on it).
For particular egregious forms of cheating (e.g., cheating on exams, stealing
  another student's work so he/she cannot submit it for credit), harsher
  consequences may apply (from loss of a full letter grade, through immediate
  failure of the course, up through suspension or expulsion from UCI).

Instructors must contact the student shortly after investigating evidence of
  academic dishonesty and evaluating the relevant work.
Notice of any action taken by an instructor must also be forwarded to the
  Associate Dean of Student Affairs (ADSA) in ICS and the ADSA of the student's
  home school (if different).
These offices act as a repository for such information, in case the student
  commits multiple infractions.
While the first infraction often results in just a grading penalty, a second
  infraction typically results in suspension for one or more quarters.


Student Rights
Please refer to 
  
  The UCI Academic Senate Policies on Academic Honesty for all the details.


Final Words:A Personal Statement
Cheating undermines the fabric of education.
The atmosphere at UCI (contrary to whatever opinions, prejudices, or
  superstitions you hold) is one of fostering cooperation between faculty and
  students in the pursuit of learning, knowledge, and wisdom.
This course, for example, is graded on an absolute scale, not a curve;
  so, helping other students when appropriate doesn't affect your grade.
And, if a student cheats for a higher grade, other students do not receive
  lower grades as a result.

Although it is embarrassing to fail an assignment, getting caught cheating is
  much worse (and some students get caught cheating for very few points).
I know, though, that students rarely think about getting caught.
But think about it: I often see students break down and cry when they get
  caught cheating and only then start to realize the consequences of their
  actions.
Their stress level goes through the roof and it immediately affects both the
  academic and social aspects of their lives.
The process is distressing for me too, although I must confess that I have been
  hardened by the number of times that I have had to go through it (typically
  multiple times each quarter).
Pursuing these cases at the University level takes a lot of my time, and
  reduces the time that I can spend on more important matters relating to my
  course and my students.
It is definitely a lose-lose situation.

The #1 excuse that I hear for cheating is, "I was pressed for time, so I
  cheated."
By carefully managing your time, you can avoid this problem.
If you start working early enough, and run into problems (and you should expect
  to run into problems), you will have time for the course staff to help you
  learn to solve them.
Also, I understand that some students take this course only because it is a
  requirement for their major, and that they have little intrinsic interest in
  the subject area; this is not a valid excuse for cheating either.

I have seen too many instances recently where student A asks a friend, student
  B, for help; specifically, A asks to see B's quiz or code (on paper or in a
  computer file).
Often, A copies B's code (with or without B's knowledge).
I understand that B feels pressure to give A help.
But, B is doing A no favor if A's cheating is discovered; B has made a bad 
 situation (A would receive no credit) worse (A receives negative credit and is
  reported to the Dean of Student Affairs).
And, according to UCI's rules, B is violating the Academic Integrity policy
  by these actions too.
I have seen friendships shattered because A copies B's code without telling B
  what was done, and then both get prosecuted under UCI's rules.

A similar situation arises with cheating on quiz questions.
I have seen too many students cheat on one question on a quiz and receive a
  negative score for the whole quiz (and letter to the Dean of Student
  Student Affairs), when leaving the question blank would result in a small
  point deduction and no university action.

In my final statement here, I ask you to pause and reflect on the consequences
  of choosing to cheat at UCI: this includes the impacts that it will have on
  you, your parents, your siblings, your friends, and your fellow classmates
  at UCI.
Cheating is invariably the wrong decision.








Exceptions to Policies
I have strict policies regarding attending classes, taking quizzes, submitting
  programs, and taking in-class exams; but, there are exceptions.
Exceptions to these policies include valid medical excuses (if documented by
  your Doctor or Health Care Provider), or any other officially excusable
  absence: emergencies, family problems, religious observances, job interviews
   or sports-related trips, etc. (if documented by the Office of the Dean in 
   your College, a Coach, etc).

If you need such an exception, bring a copy of the required documentation to me
  as soon as possible: do it beforehand, if you know about the problem in
  advance; if you do not have advance warning do it on the next day that you
  are able to attend class (or during my office hours) .
I will need to keep the copy for my records of all excused absences.
Again, if you have advance notice of a problem, please notify me by email
  beforehand to discuss any ramifications.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/handouts/syllabus/frameindex.html
##-----------------TITLE------------------------##
Syllabus
##------------------TEXT------------------------##
ICS-33Syllabus Index


Introduction
Catalog Description
Course Philosophy
Textbooks
Computing Requirements
ICS Computer Labs
Instructor Office Hours
Instructor Online Hours
Email: Instructor/Coursewide
MessageBoard Forums
Staff: TAs, Lab Tutors
Classroom Information
    • Before/After Class
    • During Class
    • Class Decorum
Grades
    • Quizzes
    • Programming Assignments
    • In-Class Exams
    • In-Lab Programs
    • Solutions/Graded Work
    • Final Grades
Academic Integrity
Exceptions to Policies




Course Home Page

Richard E. Pattis
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-33/lectures/overview/index.html
##-----------------TITLE------------------------##
Overview
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/queue.html
##-----------------TITLE------------------------##
Python: module queue
##------------------TEXT------------------------##
 
 queueindexc:\users\pattis\workspace\courselib\queue.py
    

 
Classes       builtins.object

Queue


 
 
class Queue(builtins.object)   Implements a Queue data type: values are removed
  according to the first-in-first-out (FIFO) rule.  Methods defined here:
__add__(self, x)Overload syntax: q = q + x is the same as q.add(x)

__bool__(self)Determine the truth of a queue: non-empty queues are True

__init__(self, inital_contents=[])Queue is constructed to store initial_contents (it can be any iterable).

__iter__(self)Implement the constructor for the iterator protocol

__str__(self)Return a string representation of a queue

add(self, v)Add value v to the queue

clear(self)Clear the queue

is_empty(self)Return whether the queue is empty

peek(self)Return (but do not remove) the value at the front of the queue

remove(self)Remove and return the value at the front of the queue

size(self)Return the number of values in the queue


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/priorityqueue.html
##-----------------TITLE------------------------##
Python: module priorityqueue
##------------------TEXT------------------------##
 
 priorityqueueindexc:\users\pattis\workspace\courselib\priorityqueue.py
    

 
Classes       builtins.object

PriorityQueue


 
 
class PriorityQueue(builtins.object)   Implements a Priority Queue data type: values are removed
  according to the highest priority value first rule.  Methods defined here:
__add__(self, x)Overload syntax: pq = pq + x is the same as pq.add(x)

__bool__(self)Determine the truth of a priority queue: non-empty priority queues are True

__init__(self, inital_contents=[], key=<function <lambda>>, reverse=False)Priority queue is constructed to store initial_contents (it can be any iterable),
  with key/reverse used for computing relative priorities (as in sorting).

__iter__(self)Implement the constructor for the iterator protocol

__next__(self)Implement next for the iterator protocol

__str__(self)Return a string representation of a priority queue

add(self, v)Add value v to the priority queue

clear(self)Clear the priority queue

is_empty(self)Return whether the priority queue is empty

merge(self, other)Merge other (a PriorityQueue) with this one (clearing otherPriorityQueue)

peek(self)Return (but do not remove) the highest priority value in the priority queue

remove(self)Remove and return the highest priority value (by key/reverse) in the priority queue

size(self)Return the number of values in the priority queue


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/dice.html
##-----------------TITLE------------------------##
Python: module dice
##------------------TEXT------------------------##
 
 diceindexc:\users\pattis\workspace\courselib\dice.py
    

 
Modules       random

 
Classes       builtins.object

Dice


 
 
class Dice(builtins.object)   Models an ensemble of dice: >= 1 dice, with each die having >= 1 sides.
Dice in the ensemble can have different numbers of sides.
All the dice can be rolled, their pips (and pip sum) can be queried.  Methods defined here:
__init__(self, max_pips)Instantiate like Dice([6,6]) for 2 six-sided dice
Dice instance is unrolled (many operations require dice to be rolled first).
 
Args:
    max_pips: a list of positive (>=1) integers
    
Returns:
    A Dice instance with len(max_pips) dice, the ith of which
      has maxPip[i] sides, which has been rolled 0 times.

__str__(self)Return dice as a str
Returns a string representation for a Dice, such that
d2 = eval(str(d)) copies the state of d

all_pip_maximums(self)Returns a list of the maximum pips for each die.

all_pips(self)Returns a list of all pips showing.
Note: d.all_pips()[i] == d.pips_on(i)

number_of_dice(self)Returns the number of dice in the ensemble (>= 1).

pip_sum(self)Returns the sum of the pips showing on all the dice.

pips_on(self, i)Returns the number of pips showing in die i (first die is i = 0).

pips_same(self)Returns whether or not all die show the same number of pips.
For 2 dice, asking pips_same is the same as asking doubles.

roll(self)Returns the dice ensemble after rolling every die in it.
Allows cascaded calls: d.roll().pip_sum()

rolls(self)Returns the number of times the dice have been rolled (>=0).

standard_rolls_for_debugging(self)Returns None
Seeds the random number generator so that the same sequence of
  rolls will occur, which allows for debugging of the same
  'random' throws


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/predicate.html
##-----------------TITLE------------------------##
Python: module predicate
##------------------TEXT------------------------##
 
 predicateindexc:\users\pattis\workspace\courselib\predicate.py
    

 
Functions       is_bigger_than(i)
 is_even(x)
 is_less_than(i)
 is_non_negative(x)
 is_odd(x)
 is_percentage(x)
 is_positive(x)
 is_prime(x)
 length_equal(i)
 reverse(p)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/modular.html
##-----------------TITLE------------------------##
Python: module modular
##------------------TEXT------------------------##
 
 modularindexc:\users\pattis\workspace\courselib\modular.py
    

 
Classes       builtins.object

Modular


 
 
class Modular(builtins.object)   Models a modular number (value and modulus)
Standard arithmetic operators are overloaded: + - * /  Methods defined here:
__add__(self, other)Overload addition operator: +

__bool__(self)Determine the truth of a Modular value: non-0 values are True

__eq__(self, other)Overload equal operator: ==

__ge__(self, other)Overload greater than or equal to operator: >

__gt__(self, other)Overload greater than operator: >

__init__(self, value, modulus)Instantiate like Modular(3,4)

__le__(self, other)Overload less than or equal to operator: <=

__lt__(self, other)Overload less than operator: <

__mul__(self, other)Overload multiplication operator: *

__ne__(self, other)Overload not equal operator: !=

__pow__(self, other)Overload power operator: *

__radd__(self, other)Overload addition operator (for right operands): +

__rmul__(self, other)Overload multiplication operator (for right operands): *

__rpow__(self, other)Overload power operator: *

__rsub__(self, other)Overload subtraction operator (for right operands): -

__str__(self)Return a string representation for a Modular, such that
m2 = eval(str(m1)) copies the state of m1 at the time of the call

__sub__(self, other)Overload subtraction operator: -

clear(self)Decrement value (modularly) by 1

dec(self)Decrement value (modularly) by 1

inc(self)Increment value (modularly) by 1

modulus(self)returns modulus of modular number

value(self)returns current value of modular number


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)

Data and other attributes defined here:
__hash__ = None
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/stack.html
##-----------------TITLE------------------------##
Python: module stack
##------------------TEXT------------------------##
 
 stackindexc:\users\pattis\workspace\courselib\stack.py
    

 
Classes       builtins.object

Stack


 
 
class Stack(builtins.object)   Implements a Stack data type: values are removed
  according to the Last-in-first-out (LIFO) rule.  Methods defined here:
__add__(self, x)Overload syntax: s = s + x is the same as s.add(x)

__bool__(self)Determine the truth of a stack: non-empty stacks are True

__init__(self, inital_contents=[])Stack is constructed to store initial_contents (it can be any iterable).

__iter__(self)Implement the constructor for the iterator protocol

__str__(self)Return a string representation of a priority queue

add(self, v)Add value v to the stack

clear(self)Clear the stack

is_empty(self)Return whether the stack is empty

peek(self)Return (but do not remove) the value at the top of the stack

remove(self)Remove and return the value at the top of the stack

size(self)Return the number of values in the stack


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/graph.html
##-----------------TITLE------------------------##
Python: module graph
##------------------TEXT------------------------##
 
 graphindexc:\users\pattis\workspace\courselib\graph.py
    #strict on __init__ must have/not have node/edge else exception

 
Classes       builtins.object

Graph


 
 
class Graph(builtins.object)   Implements a Graph data type: it can manipulate nodes and
  edges and provides many iterators  Methods defined here:
__bool__(self)Determine the truth of a graph: non-empty graphs are True

__init__(self, strict=False, initial_graph=None)Graph is constructed to store all the nodes and values in initial_graph
  (if it is present) otherwise no nodes and edges; a strict graph does not
  allow re-adding edges or values (they must be removed before re-adding);
  it will raise more exceptions

__str__(self)

add_edge(self, e, value)Add an edge to the graph
In a strict graph, the node must be in the graph and edge must not be in the graph

add_node(self, n)Add a node to the graph
In a strict graph, it must not already be present

clear(self)Clear the graph of any nodes and values

degree(self, n)Return the degree (number of edges with this node as their origin or destination) of a node
In a strict graph, the node must be in the graph

edge_count(self)Return the number of edges in the graph

edge_value(self, e)Return the value of an edge in the graph
In a strict graph,  both nodes and the edge must be in the graph

edges(self)Return an iterator for a copy of all edges in the graph (in no special order)

has_edge(self, e)Return whether the graph stores an edge

has_node(self, n)Return whether the graph stores a node

in_degree(self, n)Return the in-degree (number of edges with this node as their destination) of a node
In a strict graph, the node must be in the graph

in_edges(self, n)Return an iterator for a copy of all in edges with this node as its destination
In a strict graph, the node must be in the graph

in_nodes(self, n)Return an iterator for a copy of all in nodes that have an edge with this node as its destination
In a strict graph, the node must be in the graph

is_empty(self)Return whether the graph is empty (of nodes)

node_count(self)Return the number of nodes in the graph

nodes(self)Return an iterator for a copy of all nodes in the graph (in no special order)

out_degree(self, n)Return the out-degree (number of edges with this node as their origin) of a node
In a strict graph, the node must be in the graph

out_edges(self, n)Return an iterator for a copy of all in edges with this node as its origin
In a strict graph, the node must be in the graph

out_nodes(self, n)Return an iterator for a copy of all in nodes that have an edge with this node as its origin
In a strict graph, the node must be in the graph

read(self, file, conv=<function <lambda>>, sep=' ')Read a graph from a text file; assume sep is separating the nodes and edge values
conv converts the string value of an edge into the appropriate type of value
Graphs written by write should be readable by read

remove_edge(self, e)Remove an edge from the graph
In a strict graph, both nodes and the edge must be in the graph

remove_node(self, n)Remove a node from the graph
In a strict graph, the node must be in the graph

write(self, file, conv=<class 'str'>, sep=' ')Write a graph into a text file; use sep to separate the nodes and edge values
conv converts the value of an edge into the appropriate string (with str the default)
Graphs written by write should be readable by read


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)

Data and other attributes defined here:
NodeInfo = <class 'graph.NodeInfo'>NodeInfo stores the set of incoming and outgoing edges for every node


 
Functions       connected_components(g)
 make_symmetric(g)
 minimum_spanning_tree(g)
 random_graph(nodes, percent)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/stopwatch.html
##-----------------TITLE------------------------##
Python: module stopwatch
##------------------TEXT------------------------##
 
 stopwatchindexc:\users\pattis\workspace\courselib\stopwatch.py
    

 
Modules       time

 
Classes       builtins.object

Stopwatch


 
 
class Stopwatch(builtins.object)   Models a stopwatch, tracking wallclock time.
Stopwatches can be started (run forwards and backwards), stopped, and read.  Methods defined here:
__init__(self, running_now=False, running_forward=True, elapsed_prior=0, last_start_time=0)Instantiate like Stopwatch()
Stopwatch instance is stopped with 0 elapsed wallclock time.

__str__(self)Returns a string representation for a Stopwatch, such that
s2 = eval(str(s1)) copies the state of s1 at the time of the call

read(self)Returns the elapsed wallclock time in seconds as a float.
Works when the Stopwatch is running and when it is stopped.

reset(self)Stopwatch is now stopped with 0 elapsed wallclock time.

start(self)Stopwatch is now running forwards, accumulating wallclock time.

start_backwards(self)Stopwatch is now running backwards, [un]accumulating wallclock time.

status(self)Returns the status of the Stopwatch: a tuple
(running?, forward?, elapsed) :  (bool, bool, float)

stop(self)Stopwatch is now stopped: not accumulating wallclock time.


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/prompt.html
##-----------------TITLE------------------------##
Python: module prompt
##------------------TEXT------------------------##
 
 promptindexc:\users\pattis\workspace\courselib\prompt.py
    Module with prompting functions
Use as 
  import prompt
  ... prompt.for_int(...)

 
Functions       for_bool(prompt_text, default=None, error_message='Please enter a bool value: True or False')Prompt for a bool; use the specified prompt_text (with default in brackets
  appended if it is non-None) followed by ': '; verify that the entered value (using
  default if the user just presses enter) is True or False (and if not display the
  error_message)
See the call to for_value below, and the documentation and code for for_value above.
 for_char(prompt_text, default=None, legal=None, error_message='Please enter one char in the range (if specified)')
 for_float(prompt_text, default=None, is_legal=<function <lambda>>, error_message='not a legal value')Prompt for a float; use the specified prompt_text (with default in brackets
  appended if it is non-None) followed by ': '; verify that the entered value
  (using default if the user just presses enter) is a float and is_legal
  returns True when called on it (and if not display the error_message)
See the call to for_value below, and the documentation and code for for_value above.
 for_int(prompt_text, default=None, is_legal=<function <lambda>>, error_message='not a legal value')Prompt for an int; use the specified prompt_text (with default in brackets
  appended if it is non-None) followed by ': '; verify that the entered value
  (using default if the user just presses enter) is an int and is_legal
  returns True when called on it (and if not display the error_message)
See the call to for_value below, and the documentation and code for for_value above.
 for_int_between(prompt_text, low, high, default=None, error_message='')
 for_num(prompt_text, default=None, is_legal=<function <lambda>>, error_message='not a legal value')Prompt for an int or float; use the specified prompt_text (with default in brackets
  appended if it is non-None) followed by ': '; verify that the entered value
  (using default if the user just presses enter) is an int or float and is_legal
  returns True when called on it (and if not display the error_message)
See the call to for_value below, and the documentation and code for for_value above.
 for_string(prompt_text, default=None, is_legal=<function <lambda>>, error_message='')Prompt for a string; use the specified prompt_text (with default in brackets
  appended if it is non-None) followed by ': '; verify that the entered value
  (using default if the user just presses enter) returns True when is_legal is
  called on it (and if not display the error_message)
See the call to for_value below, and the documentation and code for for_value above.
 for_string_via_index(prompt_text, default=None, legal=None, error_message='Please enter a legal integer index')Prompt for an int index but return its associated string; use the specified prompt_text
  (with each string in the list legal prefaced by its index in brackets, and with default
  in brackets appended if it is non-None) followed by ': '; verify that the entered value
  is the index of some string (or just return the default if the user just presses enter)
  (and if not display theerror_message)
See the call to for_value below, and the documentation and code for for_value above.
 for_value(prompt_text, convert=<function <lambda>>, is_legal=<function <lambda>>, default=None, error_message='reenter')Prompt for value using the specified prompt_text (with default in brackets
  appended if it is non-None) followed by ': '; convert the entered value
  (or use the default if the user just presses enter), ensure is_legal
  returns True when called on it, and return that value.
Display error_messages for all possible failures
See the comments in the code for more details
See the calls to for_value below, for examples of how it is called.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/goody.html
##-----------------TITLE------------------------##
Python: module goody
##------------------TEXT------------------------##
 
 goodyindexc:\users\pattis\workspace\courselib\goody.py
    # These names are meant to be imported like:
#   from goody import irange
# or
#   import goody
#     which would be used as goody.irange

 
Functions       frange(*args)Returns a float range: e.g., for i in range(0.1, 1.0, 0.1): print(i)
  prints the numbers .1, .2, .3, ... .9, 1.: 0.1 through 1.0 inclusive
Use it like range/irange (with 1, 2, or 3 arguments).
 irange(*args)Returns an inclusive range: e.g., for i in range(1,10): print(i)
  prints the numbers 1 through 10 inclusive
Use it like range (with 1, 2, or 3 arguments), but with irange the stop
  value is in the range
 leading(text, c=' ', extra=0)Returns a string of all c, whose length is the # of c's at the front of text
  e.g., length('xxxyy','x') returns 'xxx'
 read_file_values(file, sep=None, conversions=None)Iterator for reading values sequentially from a file, regardless of
  where they appear on lines.
If conversion is None, the string token is returned; if it is a list
  of conversion functions, then they they are applied (circularly) to
  each read string.
Example read_file_values(file,conversions=[str,int,int] will read/return
  a string, an int, an int, a string, an int, an int, a string, ....
 safe_open(prompt_text, mode, error_message, default='')Prompts the user for a file (openable in mode) with and error message
  to display if opening the file in that mode fails)
If mode=='w', and the file exists, the user will be prompted whether to overwrite it
If default is supplied, it will appear in the prompt and be the file
  opened if the user just presses enter
 type_as_str(x)Returns the type of x as a nice string
For example: type(a) returns "<class 'xxxxxxxx'>; this function extracts the
  'xxxxxxx' part: the first ' is at index 8; the last ' is at index -2
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/equivalence.html
##-----------------TITLE------------------------##
Python: module equivalence
##------------------TEXT------------------------##
 
 equivalenceindexc:\users\pattis\workspace\courselib\equivalence.py
    

 
Classes       builtins.object

EquivalenceClass


 
 
class EquivalenceClass(builtins.object)   Implements an Equivalnce class data type: values are added as
  singletons, equivalance classes are merged,  we can ask
  whether two values are in the same equivalance class, and
  we can get a set of equivalence classes (each a set).  Methods defined here:
__add__(self, x)Overload syntax: e = e + x is the same as e.add_singleton(x)

__bool__(self)Determine the truth of an equivalence class: non-unitary equivalence classes are True

__init__(self, inital_contents)Equivalence class is constructed to store initial_contents
 (it can be any iterable), each a a singleton

__iter__(self)Implement the constructor for the iterator protocol

__str__(self)

add_singleton(self, v)Add value v as its own singleton

all_classes(self)

clear(self)Clear the equivalence class

in_same_class(self, a, b)return whether a and b are in the same equivalence class, possibly
  shortening some paths to the root

is_singleton(self)Return whether there is just one class in the equivalence class

merge_classes_containing(self, a, b)Merge the equivalence classes storing a and b, , possibly
  shortening some paths to the root

size(self)Return the number of different (unequivalent) classes


Data descriptors defined here:
__dict__dictionary for instance variables (if defined)
__weakref__list of weak references to the object (if defined)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/modules/courselibdoc/driver.html
##-----------------TITLE------------------------##
Python: module driver
##------------------TEXT------------------------##
 
 driverindexc:\users\pattis\workspace\courselib\driver.py
    

 
Modules       math
prompt
traceback

 
Functions       batch_self_check(file_name=None, seperator=None, show_comment=None, show_all=None, show_traceback=None, show_exception=None, show_exception_message=None, TA_info=None)
 batch_test(file_name, confirm=False)
 driver()
 num_just(x)

 
Data       default_file_name = 'bsc.txt'
default_separator = '-->'
default_show_all = False
default_show_comment = True
default_show_exception = False
default_show_exception_message = False
default_show_traceback = False
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/pythoneclipsejava/troubleshooting.html
##-----------------TITLE------------------------##
Troubleshooting Java/Eclipse/Python Installation
##------------------TEXT------------------------##
Troubleshooting Java/Eclipse/Python Installation




This is the first quarter large numbers of students are installing Java,
  Python, and Eclipse.
As I hear about problems and find workarounds, I will add them here, in the
  appropriate sections.
Note that these workarounds are not guaranteed, but they have worked in some
  circumstances.



Running Eclipse
Problem: Eclipse cannot run and prints the error message:
"Version 1.6.0_65 of the JVM is not suitable for this product. Version: 1.7 or greater is required."

Workaround: Go the the following 
Java Website and download an install the Mac OS X x64
sofware: the download is named jdk-6u67-macosx-x64.dmg which shows as
about 186 MB.
After doing this, if you still get the same error message when starting Eclipse,
  delete Eclipse, redownload it, and reinstall it.

Problem: Eclipse cannot locate the JRE.
The following error message will appear when Eclipse starts.



Workaround: You need to manually set the PATH system variable
      to include the location of your JRE.
    Normally Eclipse does this automatically.
    Before following the instructions below, find the directory that contains
      Java.

Click the Start button
Click Control Panel entry (on the upper right)
Click the System text/icon (near the end: they are alphabetical)
Click the Advance System Settings shield (upper left)
On the System Properties pop-up window select the Advanced tab
      (it is probably already selected) and click the
      Environmental Variables... button.
In the Environmental Variables pop-up window select PATH
      under Variable in the top pane (it is probably already selected)
      and click the Edit for that pane.
In the Edit User Variable pop-up window, the Variable name:
      text box should show PATH and the Variable value: text
      box should show the current value of PATH, which may be too big
      to fit on the screen.
Put the cursor at the end of the  Variable value: text box and
      type a semicolon and the path to the bin folder in the jre7
      folder in the Java folder you found.
Click the various OK buttons in the 3 pop-up windows.

In the picture below, my PATH variables started with
  C:\Program files so I added at the end
  ;C:\Program Files (x86)\Java\jre7\bin which is where I installed Java.



Try running Eclipse again and see if you get the same error message; if you do,
   try rebooting and running Eclipse again.

Problem: Eclipse cannot locate the JNI shared library.
The following error message will appear when Eclipse starts.



Workaround: I've been told this is often caused by installing
   incompatible version of Java and Eclipse: specifically a 32-bit version
   of one and a 64-bit version of the other.
Go back and follow the instructions for downloading and installing Java and
  Eclispe (heck, do it for Python too), ensuring you are using the 32-bit
  versions of both.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/macpythoneclipsejava/java.html
##-----------------TITLE------------------------##
Java Download and Installation Instructions
##------------------TEXT------------------------##
Java Download and Installation Instructions





You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing Java.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.
This document shows downloading and installing Java 8 on Windows 7 in
  Summer 2015.



Java

The following instructions were composed for installing Sun Java 1.8.0_60
  (aka Java SE Development Kit (JDK) 8, Update 60).
The version you download may be newer.
Note: Java is already installed as part of Mac OS X, so no further installation
  is necessary if you have recently purchased one of these machines.
You can determine whether you have the right version by typing

  java -version

to the unix command prompt on Mac OS X;
the response should be something like java version "1.8.0_60"; it does
  not have to be this exact update, but it needs to be at least "1.7..."


The Java download requires about 250 MB of disk space; keep it on your machine,
  in case you need to reinstall Java.
When installed, Java requires about an additional 550 MB of disk space.


Downloading

Click
    
      Java Downloads.
    
    The following page will appear in your browser.
    
    


Click the Accept License Agreement radio button.
    Click jdk-8u60-macosx-x64.dmg in the "Download" column.
    
    This file should start downloading into your standard download folder.
    It is about 250Mb, so it might take a few minutes to download.
    
    The file should appear as 
    
    
    
    Terminate the window browsing the Java download page.


Move this file to a more permanent location, so that you can install Java
      (and reinstall it later, if necessary).



    Start the Installing instructions directly below.




Installing
Double click the jdk-8u60-macosx-x64.dmg
      file that you just downloaded and moved.
    
    In a few seconds a pop-up window titled JDK 8 Update 60 will
      appear.
    
    


Double click the box icon.
    
    An Install JDK 8 Update 60 pop-up window will appear, with
      Introduction highlighted.
    
    


Click the Continue button.
    
    An Install JDK 8 Update 60 pop-up window will appear, with
      Installation Type highlighted (my installation skipped
      highlighting Destination Select).
    
    
    


Click the Install button.
    
    A pop-up window will appear, asking you to enter you password.
    
    
    


Enter you password and click the Install Software button.
    
    A pop-up window will appear, with Installation highlighted.
    It will show a gray progress bar as the various parts of the installation
      are finished.
    
    
    
    When finished, a pop-up window will appear, with Summary
      highlighted (and The installation was completed successfully).
    
    
    


Click Close.
    
    You may close the original Double click icon to install window.


If you can start a terminal window, you can test the Java
      installation by typing java -version in it.
    It should show.
    
    
    
    After seeing this message (or an error message), terminate the
      terminal window.
    If you see a disk drive icon on the desktop with the name of the
      file you downloaded, you can put it in the trash.

The installed files are typically stored (in OS X) in the folder
  /Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home.
This folder should contain a bin and lib folder, and some
  miscellaneous files.

You may now follow the instructions to download and install Python or C++
   and/or the Eclipse IDE (for Python, Java, or C++).
Note: you need to download/install Java even if you are using Eclipse only
  for Python)
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/pythoneclipsejava/courselib.html
##-----------------TITLE------------------------##
Course Library Installation in Eclipse/Python Instructions
##------------------TEXT------------------------##
Course Library Installation for Eclipse/PythonInstructions
    




These instructions review how to install the course library folder
  (courselib) in Eclipse/Python
  (these instructions also appear at the bottom of
  
    Eclipse Download and Installation Instructions).
Then they explain how to populate this the courselib folder with all the
  modules in the standard course library (and individual modules).



Review: Courselib Folder Installation
Locate the workspace folder 
      (typically C:\Users\yourname\workspace)
      and put a new, empty folder named  courselib into this workspace
      folder.
    This folder will contain course-specific Python module files that are
      useable in all Python projects in Eclipse.


Inform Eclipse to use the courselib folder in all Python projects.
Select Window | Preferences.
  Disclose PyDev (if not already disclosed):
        click the + in front of PyDev or double-click 
        PyDev (after the +)
    Click Interpreter - Python.
    
    
    
    Click the Libraries tab (leftmost, above the bottom pane)
    Click the New Folder button (topmost, right of the bottom pane)
    Browse to the courselib folder (added above) in the
          Browse for Folder pop-up window
         (C:\Users\yourname\workspace\courselib).
    Click the courselib folder selected, and then click OK
    Click Apply (you will see some progress bars)
    The  pop-up window should now appear as
    
    
    
    Notice a fifth entry (ending in courselib) appears at the bottom of
      the bottom pane named System PYTHONPATH
    Cick OK





Populate Course Library with Python Modules
Locate the workspace folder for Eclipse
     (typically C:\Users\yourname\workspace); double-click it to
     open it and then double-click the courselib folder inside it
     (whose installation was described above) to open it.


Download the
      courselib.zip
    file and move it into the courselib folder opened above.


Unzip it.
    The courselib folder will look something like the following:
     the .zip file followed by .py files
     (although it may contain more .py files, and the sizes and
     dates on these files may be different).
    
    
    
    Later this folder will contain another folder named __pycache__


If we are currently running Eclipse, we must terminate it and restart it:
      otherwise Eclipse will not notice the change that we have made to the
      courselib folder).


 Finally, we can individually add any other useful .py module files
       to the courselib folder (mostly we will be told when to do so),
       thus making their modules available to all our Python projects.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/macpythoneclipsejava/eclipsepython.html
##-----------------TITLE------------------------##
Eclipse Download and Installation Instructions
##------------------TEXT------------------------##
Eclipse Download and Installation(for Python) Instructions
    




Install Python before installing Eclipse.

You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing Eclipse.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.
This document shows downloading and installing Eclipse on MacOS X in Fall 2014.




Eclipse: Version 4.4 (Luna)


The Eclipse download requires about 200 MB of disk space; keep it on your
  machine, in case you need to re-install Eclipse.
When installed, Eclipse requires an additional 200 MB of disk space.


Downloading
Click
    
      Eclipse
    The following page will appear in your browser.
    In this handout we will download Eclipse Standard 4.4 for Mac OS.
    
    
    
    It is critical that Java, Python, and Eclipse are either all 32 Bit or are
       all 64 Bit (and only if your Machine/OS supports 64 Bit): I think it
       easiest on Macs to use 64 Bit for everything.


Click the 64-bit after Mac Cocoa for your machine,
       to the right of Eclipse Standard 4.4 (right under Eclipse
       Luna R Packages).
    
    You will see the following page (don't worry about the name of the
      institution to the right of the big downward pointing arrow).
    
    
     

Click the big downward pointing arrow underneath the
      Download eclipse-standard-luna-R-macosx-cocoa-x86_64.tar.gz from:
    The site named here, in purple to the right of the arrow:
      [United States] ibiblio (http) is the
      random one chosen by the download page this time; yours may differ.
    
    If you see the following pop-up window
    
    
    
    ensure the Save File radio button is depressed and click OK.
    
    This file should start downloading in your standard download folder.
    This file is about 200 Mb so it might take a while to download fully if you
      are on a slow internet connection (it took me a few minutes over a
      cable modem).
    Don't worry about the exact time as long as the download continues to make
      steady progress.
    
    After the download has finished, terminate the window browsing the Eclipse
      download.


Move this file to a more permanent location, so that you can install Eclipse
      (and reinstall it later, if necessary).

Start the Installing instructions directly below.





Installing (for Python)

Python and Java should be installed before installing Eclipse

Unzip eclipse-standard-luna-R-macosx-cocoa-x86_64.tar.gz by
      double-clicking it.
    
    Unzipping this file creates a folder named eclipse; unzipping
      200 MB can take a few minutes.
    You can leave this folder here or move it elsewhere on your hard disk.


Create an alias on the desktop to to the eclipse file in
      this eclipse folder: 
    
    On the Mac, you can
    Control-click the file eclipse.exe
    Select the Make Alias option.
    Move it to the desktop.
    
    
    Now you are ready to perform a one-time only setup of Eclipse on
      your machine.


Double-click the alias to Eclipse that you just created above.
    
    If the following pop-up window appears
    
    
    
    click Open.
    
    The following splash screen will appear
    
    
    
    and then a Workspace Launcher pop-up window will appear.
    
    
    
    In the Workspace text box, your name should appear between
      /Users and /Documents, instead of ellenolshansky
      (I did this on my wife's Mac).
    
    Leave unchecked the 
      Use this as the default and do not ask again box.
    Although you will use this same workspace for the entire quarter (checking
      projects in and out of it), it is best to see this
      Workspace Launcher pop-up window each time you start Eclipse, to
      remind you where your workspace is located.
    
    In fact, it is a good idea to create on your desktop an alias to your
      workspace folder; but you must click OK (see below) before
      Eclipse creates this folder and you can alias it.

Click OK.
    
    Progress bars will appear as Eclipse loads.
    
    Eventually the Eclipse workbench will appear with a Welcome tab
      covering it.
    
    


Terminate (click X on) the Welcome tab.
    
    You will not see the Welcome tab when you start Eclipse again, after
      this first time.


Click Help (on the far right of the top toolbar) and then click
      Install New Software... in its pull-down menu, as shown below.
    
    
    
    The Install pop-up window will appear.
    
    


Enter the text (or cut/paste from this document)
      http://pydev.org/updates into the Work with text box and
      press Enter.
    
    In a few seconds the information under Name should change from
    There is no site selected to Pending to
    
    
    
    Select only the top PyDev checkbox; do NOT select the 
      PyDev Mylyn Integration (optional) box.
    Check before proceeding that the Install pop-up window appears as
    
    


Click Next >
    
    A new Install pop-up window will appear.
    
    


Click Next >
    
    A new Install pop-up window will appear.
    
    Selecet the I accept the terms of the license agreement radio button,
      so the window appears as
    
    


Click Finish
    
    An Installing Software pop-up window will appear.
    During installation, it will show the various operations it is
      performing and a progress bar for each one.
    Because the installer is fetching various files online, this process might
      take a few minutes.
    
    
    
    The installation will pause, and  a Selection Needed pop-up window
      appears.

Check the box labeled Brainwy Software; Pydev; Brainwy.
    
    Check before proceeding that the Install pop-up window appears as
    
    


Click OK
    
    The installation will finish (showing the final progress bars).
    
    A Software Updates pop-up window will appear.
    
    


Click Yes
    
    Eclipse will terminate and restart.
    As you did in step 3, click OK to the 
      Workspace Launcher pop-up window.


Click Eclipse (to the right of Apple logo on the far left of
     the top tool bar), and then click Preferences in its pull-down
     menu, as shown below.
    
    


Drill down to select the interpreter:
    Disclose PyDev by clicking the triangle in front of
             PyDev or double-clicking PyDev (after the triangle).
      Disclose Interpreters by clicking the triangle in front
             of Interpreters or double-clicking Interpreters
             (after the triangle).
      Select Python - Interpreter.
    
    The Preferences pop-up window should appear as follows
    
    


Click New... at the top-right of the top window
    
    A Select Interpreter pop-up window appears.
    Type python34 in the Interpreter Name text box.
    Type (or cut/paste) //usr/local/bin/python3 in the
      Interpreter Executable text box (or browse to this file).
    The Select Interpreter pop-up window should appear as
    
    
    


 Click OK.
    
    A Selection needed pop-up window will appear.
    
    
    
    Ensure that a check appears in all four checkboxes.


Click OK.
    
    The Preferences pop-up window will be changed to
    
    
    

Click OK.
    
    A Progress Information pop-up window will appear.
    
    
    
    During installation, it will show the various operations it is
      performing and a progress bar for each one.
    Eventually the installation will terminate.


Click Window (to the left of Help on the far right of the 
      top tool bar), hover over Open Perspective in the pull-down
       menu and then click Other... in the next pull-down menu.
    
    
    
    The Open Perspective pop-up window will appear.
    
    


Double-click PyDev (third from the bottom)
    
    The label on Eclipse will change from Java - Eclipse to
       PyDev - Eclipse, and the Package Explorer in the upper-left
       tab will change to PyDev Package Explorer, and a PyDev icon
       will appear to the right of the Java icon.
    
    
   

Right-click the Java icon to the left of the PyDev icon
      and select close
    
    
    
    The Eclipse workbench will now have only the PyDev icon here and 
      will look like
    
    


Download the courselib.zip
      file.
    
    In the pop-window that appears
    
    
    
    ensure the Save File radio button is depressed and click OK.

    
Locate the workspace folder created in step 3
      (see /Users/yourname/Documents/workspace)
      and copy the courselib.zip file into this workspace and unzip it
      there, producing the courselib folder; it should should contain a
      bunch of Python  module files (ending in .py).
    From time to time you will be asked to put other course-specific Python
      module files into this courselib folder; these modules will be
      usable in all Python projects in Eclipse.


Inform Eclipse to use the courselib folder in all Python projects.
Select Eclipse | Preferences.
  Disclose PyDev by clicking the triangle in front of
         PyDev or double-clicking PyDev (after the triangle).
  Disclose Interpreters by clicking the triangle in front
         of Interpreters or double-clicking Interpreters
         (after the triangle).
  Select Python - Interpreter.

    
    
    
    Click the Libraries tab (leftmost, above the bottom pane)
    Click the New Folder button (topmost, right of the bottom pane)
    Browse to the courselib folder (added above) in the
          Browse for Folder pop-up window
         (/Users/yourname/documents/workspace/courselib).
    Click the courselib folder selected, and then click OK
    Click Apply (you will see some progress bars)
    The  pop-up window should now appear as
    
    
    
    Notice a fifth entry (ending in courselib appears at the bottom of
      the bottom pane named System PYTHONPATH
    Cick OK



Terminate (click X on) the Eclipse window.

Eclipse is now installed for Python.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/macpythoneclipsejava/python.html
##-----------------TITLE------------------------##
Python Download and Installation Instructions
##------------------TEXT------------------------##
Python Download and Installation Instructions





You may want to print these instructions before proceeding, so that you can
 refer to them while downloading and installing Python.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
 describes.

This document shows downloading and installing Python 3.4.1 on Mac OS X 10.6
  and  later.
You should download and install the latest Python.


Python: Version 3.4.1


The Python download requires about 18 MB of disk space; keep it on your machine,
 in case you need to re-install Python.
When installed, Python requires about an additional 90 MB of disk space.

Downloading

Click
    
     Python Download.
   
   The following page will appear in your browser.
   
   
   

Click the Download Python 3.4.1 button.
   
   An Opening python-3.4.1-macosx10.6.dmg pop-up window will appear.
   
   
   
   Click Save File.
   
   The file named python-3.4.1-macosx10.6.dmg should start downloading
     in your standard download folder
     (mine was stored in Machintosh HD/Users/pattis/Downloads).
   This file is about 24 MB so it might take a while to download fully if you
     are on a slow internet connection (it took me about 10 seconds over a
     cable modem).
   
   The file should appear as
   
   

Move this file to a more permanent location, so that you can install Python
     (and reinstall it later, if necessary).

Start the Installing instructions directly below.




Installing
Double-click the icon labeling the file python-3.4.1-macosx10.6.dmg.
   
   A file folder named Python 3.4.1 containing the Python.mpkg
      file will appear. 
   
   


Control-click on the Python.mpkg file and select open.
   
   If the following pop-up window appears
   
   
   
   enter you password and click Install Python
   
   An Install Python pop-up window will appear.
   
   


Click Continue button.
   
   A new Install Python pop-up window will appear.
   
   
   


Click the Continue button.
   

   A new Install Python pop-up window will appear.
   
   
   


Click the Continue button.
   
   A new pop-up window asking you to agree to the license terms will appear.
   
   
   


Click Agree.
   
   A new Install Python pop-up window will appear.
   
   
   
   The Python Interpreter and all its libraries occupy about 89 Mb.
   
   By default Python will be installed in your Hard Disk Drive 
   Machintosh HD/Applications/Python3.4.
   Unless you have a good reason to use another directory, use this one.



Click Install.
   
   The previous pop-window will reappear, displaying the message
          Install Python 3.4.1
          Please wait while the Installer installs
          Python 3.4.1. This may take
          several minutes.
   
   During installation, it will show the various operations it is
     performing and a progress bar for each one.
   
   Eventually a new Install Python pop-up window will appear.
   
   

Click the Close button.


Python should now be installed.
To try to verify installation, navigate to the directory
  Machintosh HD/Applications/Python3.4
  (or to whatever directory on which you installed Python)
  double-click the icon/file IDLE.
The following pop-up window will appear.
   
   
   
A pop-up window with the title *Python 3.4.1 Shell* appears, and inside
 the window on the first line is the text Python 3.4.1 ....

Click the red (terminate) icon to terminate this pop-up window.

You should keep the file python-3.4.1-macosx10.6.dmg somewhere on your
  computer in case you need to reinstall Python (not likely necessary).

You may now follow the instructions to download and install Java (it is already
  installed on most Macs; to update Java on your Mac, go to
  
  Java SE Development Kit 7 Downloads, Accept the license agreement,
  and then download dk-7u72-macosx-x64.dmg and install it)
  and then download/install the Eclipse IDE (for Python).
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/assignments/program3/program.html
##-----------------TITLE------------------------##
Program 3
##------------------TEXT------------------------##
Program 3
Implementing Priority Queues and Maps
    (and their iterators) with Binary Trees


ICS-46: Data Strcuture Implementation and Analysis









Introduction
This programming assignment is designed to ensure that you know how to
  implement two templated classes (Priority Queue and Map)
  with binary trees (max-heap and Binary Search Tree respectively).
Your implementations will also include fully-functional iterators for
  these classes.
For the priority queue you will be writing code that processes the underlying
   array storing the values as a max-heap.
For the map you will be writing iterative and recursive code that processes the
  BST.

You can test these implementations by using the standard drivers (provided
  with the download) and GoogleTests that we will use when grading your
  code for correctness; recall that you can augment the GoogleTest with whatever
  code you want, to aid your debugging: a GoogleTest is just a C++ program.
You can also test the code you wrote for Programming Assignment #1 (which used
  array implementations of these classes) by substituting these binary tree
  implementations -typically by changing a few typedef statements.
In fact, you will be required to translate my solution to the
  wordgenerator program to use HeapPriorityQueue and BSTMap
  and indicate the performance improvement (over the original priority queue and
  map classes) on a large text file (wghuck.txt).

Write and use the standard insertion (<<) operator and
  str() method in each class for debugging.
Note that there are few tested requirements for what these operators/methods
  return, but this code will make debugging easier, and we may examine it by
  hand. 

For str in HeapPriorityQueue return in a std::string the
  entire contents array for all indexes (ascending) along with the other
  instance variables: from this information you can easily reconstruct the
  max-heap-as-binary_tree.
After enqueueing b, a, c, the HeapPriorityQueue's
  str() prints as
heap_priority_queue[0:a,1:b,2:c,3:](length=4,used=3,mod_count=4).

For str in BSTMap return a std::string that shows the BST
  rotated left by 90 degrees  along with the other instance variables, so you
  can easily examine the structure of the BST.
After assocating  b with 2, a with 1, and
 c with 3, the BSTMap's str() prints as

bst_map[
..c->3
b->2
..a->1
](used=3,mod_count=3)


You should download the 
  program3 project folder and use it to create an
  Eclipse project.
You will write the required methods in the heap_priority_queue.hpp and
  bst_map.hpp files in this project, and submit each separately in
  Checkmate.
The project folder also contains two pairs of .hpp and .cpp
  files: a driver/GoogleTest pair for each class that you will write, and the
  driver.cpp file which has a main function that can be made to
  run any of the two drivers.

Alternatively, you can also use a existing/working project folder that already
  is connected to both the courselib and googletest libraries:
  to do so, first remove (but save) all the files in its src folder and then
  copy all the .hpp and .cpp files from the downloaded project's
  src folder into the existing/working project's src folder;
  finally, right-click the project and select Refresh (F5).

Important: Only one of the .cpp files with a main method
  can be active/compiling at any time.
In the download, only the driver.cpp file is active; the GoogleTests are
  inactive.
To make a progam inactive, select it (in the editor tab), use the Ctrl-a
  command to select all its lines, and then type Ctrl-/ (or click
  Source at the top left of the menu and choose Toggle Comment):
  ever line will now appear in a comment (so the main function is
  commented-out); by using these same instructions, you can toggle back those
  lines to not have comments.

I recommend that you work on this assignment in pairs.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.

Only ONE STUDENT should submit the assignment (all parts of it).
If students work in pairs, BOTH NAMES and their UCInetID names must
  appear in a comment at the top of each submitted program.
For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each submitted file would appear as:
  // Submitter: romeo1(Montague, Romeo)
  // Partner  : jcapulet(Capulet, Juliet)
  // We certify that we worked cooperatively on this programming
  //   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
If the names do not appear at the top of all your submissions in exactly this
  form, points will be deducted.
If you are submitting by yourself, you may omit all lines but the first
  (Submitter).
Please do turn in each program as you finish it, so that I can
  accurately assess the progress of the class as a whole during this assignment;
  do not turn in all the programs at the same time.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).


This assignment has 3 parts: pairs should work on each part together, not split
  them up and do them separately.
Part 1 is worth 30 points; part 2 is worth 25 points; part 3 is worth 5 pts.
Remember I'm going to be running MOSS on the parts of this assignment.

Important: The courselib contains array implementations for all these
  data types (and you have written linked-list versions of them); although this
  assignment requires you to use binary trees, there are still
  many strong similarities at a high level in all these implementations.
So, I encourage you to examine these implementations closely, and understand
  them; possibly, experiment with them (using their drivers or GoogleTests),
  while you are writing your binary tree implementations: this advice is
  especially true as you begin to study, understand, and implement iterators.
Please feel free about asking questions about these methods: both their syntax
  and semantics.







Priority Queues (30 pts)
Priority Queues can be implemented by a variety of data structures (where the
  highest priority value is always removed first).
How does a specific priority queue determine which value has the highest
  priority?
We supply the priority queue with a gt (greater-than) function that
  computes whether or not its first argument has a greater priority than its
  second argument.
This gt can be passed to any constructor or instantiated in the
  template.
So, we cannot ask, "What is the priority of a value." But, we can ask
  "Does the priority of a first value have a higher priority than a second
  value", by calling the gt function. 
For example, we cannot determine the priority of a std::string value, but
  we can determine whether one std::string value has a higher
  priority than another std::string value.

We can implement priority queues efficiently using a max-heap (stored in an
  array), whose enqueue and dequeue operations are each O(Log N).
Enqueuing/Dequeuing N values is O(N Log N).

The file heap_priority_queue.hpp declares the appropriate constructors,
  methods, operators, and instance variables.
Note the simple helper methods left_child, right_child, 
  parent, is_root, and in_heap, which abstract the
  mapping functions and two useful bool functions.
Use these methods to simplify writing the helper methods percolate_up and
  percolate_down (int i), which do most of the work in the enqueue
  and dequeue methods (respectively) and may be called in other places
  as well (e.g., the iterator's erase method).
Think carefully about how to write these percolate methods simply (or you
  will never get them properly debugged): my method bodies used for loops
  and were 2 lines and 9 lines long each (each using std::swap
  included from <utility>).

I suggest copying/pasting the methods from the array_priority_queue.hpp
  file, and then translating these methods from using an array to using a
  max-heap, since both fundamentally process arrays (e.g., see/call the
  ensure_length helper method).
Pay close attention to ensure all instance variables receive values in
  the constructors and are used/set correctly in queries and commands.

Special Requirements:
copy, initializer_list and iterable constructors, and
  operator=:
    These operations can all execute in O(N); they should not work by
      enqueueing each value into an empty max-heap, which would be O(N Log N).
    If there are two gt functions and they are the same, then directly
      copy the array.
    If there is only one gt function or the two are different, then first
      copy the array, and then make it into a max-heap by using the linear
      "heapify" algorithm discussed in the notes.

Note that the two priority queues in the copy constructor and
      operator= each store their own gt function, which may be
       the same or different.
    The one priority queue in the initializer_list and iterable
      constructors stores only its gt function; in these cases copy
      the information (by iterating through the parameter) into an array first
      and then always heapify it.

For operator=, copy the gt function on the right-hand side
  priority queue into the gt function for the (target) left-hand side
  priority queue (because after assignment, these priority queues must be ==;
  the gts may already be the same).


Iterators:
There is no simple/efficient way to write an iterator for this max-heap
  implementation of priority queues, because the iterator is supposed to
  produce its values from highest to lowest priority, but the array is a
  max-heap (so we cannot just traverse its values); being able to erase
  values with an iterator makes this task even harder.
Here is how to implement the iterator for this class.
Notice the ics::HeapPriorityQueue it; instance variable in the
      Iterator class in the HeapPriorityQueue class.

Call the first constructor for Iterator (the one that specifies a
      last bool parameter) when called from begin.
    It doesn't matter what value is passed: the point is to call the first
      Iterator constructor, not the second.
    The initializer for this Iterator constructor should copy the
      ref_pq HeapPriorityQueue into the instance variable it,
      and use this copy for iteration purposes.
    Examining the the current iterator value calls peek() on it;
      advancing the iterator calls dequeue it
    Overall, the "cursor" is the highest priority value in the it
      priority queue (the one that can be peeked and dequeued).

Call the second constructor for Iterator (the one that does
      not specify a last bool parameter) when called from
      end.
    The initializer for this Iterator constructor should leave it
       empty).

Two iterators that point to the same ref_pq are equal (index the
       same value) if their sizes are equal.

To erase the iterator's "cursor" use the following algorithm:
    Dequeue a value.
       Scan the max-heap in the real (ref_pq) priority queue to find
             the index of the value to erase.
       Use that index like the root in the dequeue algorithm with one
             difference: the value put there from the end of the max-heap might
             have to be percolated up instead of down.
           Look at the iterator_erase_heap_special_case GoogleTest to
             see an example of a max-heap (construct its array), where removing
             a value ("f") causes the value to percolate up.
    

This approach makes the iterators easy to write but expensive in time and space
  to use (especially erase): e.g., storing the second heap requires O(N) extra
  space; creating the iterator requires O(N); ++ is O(Log N) not O(1):
  erase can be O(N) since it performs a linear scan of the array representing
  a heap.

Feel free to question/discuss iterators for HeapPriorityQueue on the
  message boards, so long as no code is posted or described in too much detail.







Maps (25 pts)
Maps can be implemented by a variety of data structures: they all associate
  unique keys with values, by storing an ics::pair holding both the
  key and its value.
The data structure should allow us quickly to find the value associated with
  a key, and possibly change/update such a value.
We must supply BSTMap with a lt (less-than) function that
  computes whether its first argument key belongs in the left subtree
  (if not, and the two values are !=, it belongs in the right subtree).
This lt can be passed to any constructor or instantiated in the
  template.

We can implement maps efficiently by using a binary search tree (BST) whose
  order property is determined by comparing only the key (first) part
  of the pair.
Most operations updating BSTs are O(height of BST) which for non-pathological
  BSTs is O(Log N).

The file bst_map.hpp declares the appropriate constructors, methods,
  operators, and instance variables.
Note the declaration of many helper methods that operate on BSTs: most
  (in fact, all but find_key) are more simply implemented recursively.
These recursive methods typically are passed the root of a BST (using some
  parameter mode), and then call themselves recursively on a left and/or right
  subtree (passing their left/right child as the root of a smaller tree).

Many of the standard map methods call one or more of these helper
  methods to retrieve information from a BST or change it (e.g., add/remove
  key->value assocations).
These include the functions find_key, has_value, copy,
   copy_to_queue (a helper for creating iterators), equals
  (a helper for operator == ), and string_rotated (a helper
  for str(); and the mutators insert (a helpder for put),
  find_addempty (a helper for []), remove_closest
  (a helper for remove),  remove (a helper for erase),
  and delete_BST.

I suggest examining code in the array_map.hpp file to help you understand
  some of the bookkeeping requirements of these methods.
Many of the recursive helper functions you need to write have similar functions
  in the notes on processing binary trees (including BSTs) recursively.
Pay close attention to ensure all instance variables receive values in
  the constructors and are used/set correctly in queries and commands.

Special Requirements:
copy and operator=:
    These operations can sometimes execute in O(N); they should not
      always work by putting each key/value pair into an empty BST, which would
      likely be O(N Log N), but in a pathological case would be O(N^2).

If the lt functions for the two maps are the same, then directly
      copy the entire BST in O(N): it is already "a BST with the correct order
      property".
    But, if the lt functions for the two maps are different, then put
      all the key/value pairs from one into the other (normally O(N Log N), but
      pathologically O(N^2)).

operator=: don't worry about reusing TNs in the lhs
  BST; just deallocate all them and copy the tree of the right-hand side.



Iterators:
Note that map iterators produce Entry which is defined by 
  typedef ics::pair<KEY,T> Entry;
There are moderately simple/efficient ways to write iterators for a BST
  implementation of maps, but only if we don't allow iterators to erase
  any key/value.
Because we are allowing erasure, we will adopt a simple but
  time/space-inefficient iterator for this class: it has some similarities
  implementing iterators for the heap priority queue.
Notice the ics::ArrayQueue it; instance variable in the
      Iterator class in the BSTMap class.

In the constructor for Iterator, the second argument should be
      true when called from begin but false when called
      from end.

When this parameter is true the Iterator constructor should
      copy all key->value pairs in the BST storing the map into the it
      queue; it then uses this queue for iteration purposes (when false
      it should leave it empty): examining the current iterator value
      calls peek() on it; advancing the iterator calls
       dequeue on it.
    Overall, the "cursor" is the front key->value pair in the it
      queue (the one that can be peeked and dequeued).

Two iterators that point to the same ref_map are equal (index the
       same value) if their queue sizes are equal.
To erase a the iterator's "cursor" erase its key->value pair
      from the BST storing the map.

This approach makes the iterators easy to write but expensive in time to
  create (copying all the key->value pairs from the BST to the queue is O(N))
  and space (storing each key->pair value in the BST and in the queue requires
  O(N) extra space).

Feel free to question/discuss iterators for BSTMap on the
  message boards, so long as no code is posted or described in too much detail.







wordgenerator (5 pts)
The download contains the file wordgenerator.cpp: my solution to the 
  last part of Programming Assignment #1 (which also times itself running for
  building the corpus and creating a priority queue of its values in order).
It also contains wghuck.txt: the text, appropriately formated, of 
  Mark Twain's book, "The Adventures of Huckleberry Finn".
For this part of the assignment, you must alter the #includes and
  any typedefs and code in this program, so that it uses the improved
  data type implementations (HeapPriorityQueue and BSTMap)
  instead of the "high-complexity" (inefficient) simple array versions of these
  data types.

In the comment at the bottom of this program, fill in the running times
  produced by the program
 (see the output line starting
  read_corpus time = and print_corpus (sort not print) time =)
  using both the array version and this improved version.
Use an order statistic of 2.








Testing
There are various ways to test each of the classes you are writing in this
  programming assignment.
First, though, you should write all the methods, paying careful attention to
  the array implementations and previously written linked list implementations.
For some, you might just boiler-plate simple code that is not correct, but
  allows the methods to compile, allowing other methods in the classes to be
  tested.

The easiest way to start testing//debugging is by using the driver program.
It allows you to perform any method call supported by the templated classes,
  and see the state of the class (or view the debugger).
Of course, 
you must get the insertion (<<) operator and str() method to
  work before using it to debug the other methods.

After you test and debug your code with the driver, try running the appropriate
  GoogleTest code.
Again, this form of testing is useful only as you approach a finished solution.
We will use the GoogleTest, and visual inspection, to grade this
  assignment.
Important Note: While you are debugging your classes, you can edit the
  GoogleTest (for example, putting std::cout statements at strategic
  points), but don't accidentally remove any of the assertions, otherwise you
  won't be fully checking your code the way we will.
All debugging std::cout should end in std::endl to flush the
  output stream: ensure the output it displayed before executing the next
  statement (which may throw an exception, and thus the output buffer may not
  be flushed).

When you run the GoogleTest, initially choose small values for the first and
  third prompts (just press return to the second prompt) or comment-out these
  prompts and assign small values to these variables instead.
Besides an indication of which tests pass and fail, the console window
  will show a speed for the speed test (which will vary depending on how
  fast a machine you run your code on): don't worry about it.
When your code is passing all the tests, put in values like 10,000 for these
  prompts.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/assignments/program1/program.html
##-----------------TITLE------------------------##
Program 1
##------------------TEXT------------------------##
Program 1

Programming using the ICS-46 Template Library (ITL):
Stack, Queue, Priority Queue, Set, and Map


ICS-46: Data Structure Implementation and Analysis









Introduction
This programming assignment is designed to ensure that you know how to use
  combinations of ITL's templated classes to model and compactly write code
  that solves a variety of different programming problems.
The kind of abstract thinking that goes into modeling solutions to these
  programming problems with these data types (and iteration over them) is
  important to your development as programmers.
This assignment will also start you on understanding the compiler error-messages
  produced when using templated classes incorrectly.

There are five parts to this assignment.
In each you will be asked to write a program (.cpp file) that defines a
  few functions and has a main function, which ties these functions
  together to solve the problem.

You should download the 
  program1 project folder and use it to create an
  Eclipse project (needing only courselib not googletest).
You will create each program in this project, and submit each program
  separately in Checkmate.
The project folder contains boiler-plated files (including some typedefs
  that I found useful in my code: you may change their names) and contains all
  the data files that you need to test/debug you programs.
Important: In the standard download, only one of the .cpp files can
   be active/tested at any time (each contains a main method).
In the download, all are active; so I suggest that you inactivate the
  runoffvoting.cpp, fa.cpp, ndfa.cpp, and
  wordgenerator.cpp files and then work on  reachable.cpp first.
Then, as you finish each program, submit it, deactivate it, and activate the
  next program you will work on.

To make a progam inactive, select it (in the editor tab), use the Ctrl+a
  command to select all its lines, and then Ctrl+/ (or click
  Source at the top left of the menu and choose Toggle Comment):
  every line will now appear in a comment; by reusing these same instructions,
  you can toggle back those lines to remove the comments.

Alternatively, you can also use a existing/working project folder: remove (but
  save) all the files in its src folder and then put all the .cpp
  files from the downloaded project's src folder into the
  existing/working project's src folder.
Also put all the data files into the existing project folder, not in the
 src folder, but at the same level as trhe src folder.

IMPORTANT: Turn in .cpp files that are runnable: their code should not be
     commented-out.

I recommend that you work on this assignment in pairs.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.

Only ONE STUDENT should submit the assignment (all parts of it).
If students work in pairs, BOTH NAMES and their UCInetID names must
  appear in a comment at the top of each submitted program.
For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each submitted file would appear as:
  // Submitter: romeo1(Montague, Romeo)
  // Partner  : jcapulet(Capulet, Juliet)
  // We certify that we worked cooperatively on this programming
  //   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
If the names do not appear at the top of all your submissions in exactly this
  form, points will be deducted.
If you are submitting by yourself, you may omit all lines but the first
  (Submitter).
Please do turn in each program as you finish it, so that I can
  accurately assess the progress of the class as a whole during this assignment;
  do not turn in all the programs at the same time.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).
You should familiarize yourselves with the ics46goody.hpp file in the
  courselib/src folder.
It contains functions useful in all these programs: split and join
  (like their counterparts in Python, they use std::string and 
  vector<std::string>), prompt_string, and safe_open.

This assignment has five parts: pairs should work on each part together, not
  split them up and do them separately.
Parts 1-3 are 14 points each (42 points total); Part 4 is worth 10 points;
   Part 5 is worth 8 points.
This skewing of points towards the simpler parts means students finishing the
  first three parts correctly will have a 70% average; those finishing the
  first four parts correctly will have about an 87% average; but to get an A on
  this assignment requires solving all parts correctly.
Remember that I'm going to be running MOSS on the parts of this assignment to
  check for program similarity (both for submission this quarter, and for
  previous quarters).

Important:
The cross_reference
  program shows an exmple of the form of code that you need to write for these
  programs: study and understand its code before attempting to start
  solving these problems.
Questions about cross_reference? Post them on a Message Board in the
  Forum (and feel free to read and answer the questions of other students).

Use the array implementations supplied in the ITL for all the data types.
The programs in the folder you will download have #include statements at
  the top for all the files that you need to use.

Along with the details of the functions, I've included the number of lines
  that I wrote in my solution.
I am supplying these number of lines not as a requirement, but as a
  ballpark estimate of the amount of code you should write.







#1: Reachability(14 pts)
Problem Summary:
Write a program that prompts the user to enter the name of
       a file representing a graph.
Read the information in the file, storing the graph in a map.
Print the graph.
Repeatedly prompt the user for a starting node in the graph, and compute and
      print all the nodes that are reachable from it by following zero or more
      edges in the graph (e.g., a node is reachable from itself): convert the
      algorithm for reachability, described in detail below, into C++/ITL code.

Input and Output
Read a file of pairs of node names (representing edges) in a directed
  graph, building a Map whose key is a std::string source node
  and whose value is a Set of std::string destination nodes that
  are each reachable from the source node key.
Although most of the supplied input files use 1-letter names, your code should
  work for any strings: use the split function in ics46goody.hpp.

Two nodes appear on each line: first the source node, then the destination
  node, with these node names separated by one semicolon character.
For example, the input file graph1.txt contains the following
  lines (which could appear in this order, or any other):
  c;f
  b;d
  a;c
  c;e
  d;g
  a;b
  e;d
  f;g
  f;d
which represent the graph



Print the graph, one source node per line (the source nodes are printed
  alphabetically) followed by the set of all the destination nodes that the
  source can immediately reach.
The graph above would print as
  Graph: source -> {destination} edges
    a -> set[c,b]
    b -> set[d]
    c -> set[f,e]
    d -> set[g]
    e -> set[d]
    f -> set[g,d]

Note that the source nodes are sorted alphabetically, but the Set
   of desintation nodes does not have to be sorted:
  in fact it makes no sense to talk about sorted Sets; we could talk
  about a sorted Priority Queue whose contents came from a Set.
Note that because node g is not a source node (it is only a
  destination node), it does not appear first on any line (and appears only
  in the Sets for source nodes d and f).

There there are multiple data files for this program: graph1.txt,
  graph2.txt, graph3.txt, and graph4.txt; test/debug your
  program on  the first file; when you are done, test it on the rest.
Draw the graph represented by each file to ensure that your code correctly
  prints it and computes the nodes reachable from any source node (which you
  can do by eyeballing the graphs: they are small).

Repeatedly prompt the user for a starting node in the graph (until quit
  is entered) and compute and print all the nodes that are reachable from it by
  following edges in the graph.
Reject any node not present as a key in the graph.
An example interaction (processing the graph above) might be
  Enter the name of a starting node (enter quit to quit): e
  Reachable from node name e = set[e,d,g]

  Enter the name of a starting node (enter quit to quit): x
    x is not a source node name in the graph

  Enter the name of a starting node (enter quit to quit): a
  Reachable from node name a = set[a,c,b,f,e,d,g]

  Enter the name of a starting node (enter quit to quit): quit
Functions and Program
Write the following functions and main program.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written C++ code.
read_graph has a (open) file parameter; it returns the Map
     representing the graph
    (mine is 12 lines of well-formatted code).

print_graph has a Map parameter (representing the graph); it
    returns nothing, but it prints the graph in the appropriate form
     (mine is 6 lines of well-formatted code).

reachable has a Map parameter (representing the graph) and
    a std::string start node in the graph (technically a key in the
    Map); it returns a Set of all the nodes reachable from the
    start node by  following edges in the graph
   (mine is 15 lines of well-formatted code).

Write a main function at the bottom of this file that calls these
     functions to solve the problem
     (mine is 22 lines of well-formatted code).
    To simplify the interaction, you may prompt for the file name and specify
      a default value (graph1.txt): see my prompt_string function
     in ics46goody.hpp in the courselib/src folder.

Here is the basic algorithm for computing reachability; it is simple to explain
  and not (very) complicated to implement.
But, you have to understand these instructions and carefully translate them into
  C++/ITL code.
You should hand-simulate this algorithm using the graph above, and verify that
  it produces the results you expect before coding it.
You might be tempted to use recursion, but please don't: unless recursion is
  done very carefully, it will run forever on graphs with cycles: one of the
  input files is a graph with cycles.
To compute all the reachable nodes in a graph, create a Set
   (initially empty) of reached nodes and a Queue (initially containing
   the  parameter start node) of nodes that we are going to explore (to find
   nodes they can reach).

While the exploring queue still has nodes, remove the first one
    and put it into the reached set; if it is a key in the graph (not all
    nodes are) then for all its destination nodes that are not already in the
   reached set, put them in the exploring queue.

When the exploring queue becomes empty (can you argue that this
      always will happen -there is no infinite looping?), return the
      reached set.


Print the set containing all these node labels.
When debugging this algorithm, print the the entire Set and Queue
  contents (using <<, the standard insertion operator for these
  data types) after every interesting change, or use the debugger to observe
  these changes.

Sample Interaction
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should "match" this one (sets will match if they have the same
  contents, independent of their order).
You should also check that it works for other starting nodes, and
  a variety of starting nodes in the other graphs.

  Enter the name of a file with a graph[graph1.txt]: 

  Graph: source -> {destination} edges
    a -> set[c,b]
    b -> set[d]
    c -> set[f,e]
    d -> set[g]
    e -> set[d]
    f -> set[g,d]

  Enter the name of a starting node (enter quit to quit): e
  Reachable from node name e = set[e,d,g]

  Enter the name of a starting node (enter quit to quit): x
    x is not a source node name in the graph

  Enter the name of a starting node (enter quit to quit): a
  Reachable from node name a = set[a,c,b,f,e,d,g]

  Enter the name of starting node (enter quit to quit): quit







#2: Instant Runoff Voting(14 pts)
Problem Summary:
 Write a program that prompts the user to enter the name of
       a file representing the candidate preferences of a sequence of voters.
Read the information in the file, storing it in a Map.
Print the voter preferences.
Repeatedly display the vote count for ballots (sorted both by candidate
      and numerically), eliminating from the election the candidate(s)
      receiving the fewest votes, until one candidate (the winner) or no
      candidates (a tie) remain.

This form of election is known as instant runoff voting.
Every voter submits a ballot that ranks all the candidates in an election, from
  most favorite candidate to least favorite (we will use a Queue
  for this purpose: earlier candidates in the Queue are more
  favored than later candidates).

During the first ballot, votes are counted for each of the candidates according
  to the rankings of the voters.
Then the candidate(s) with the fewest number of votes are removed from the
  election: if more than one candidate receives the least number of votes, all
  candidates receiving these least number of votes are removed from the
  election.

During the second ballot, votes are tallied for the remaining candidates
  (there are at least 1 fewer candidates); if a voter's first ranked candidate
  is not still in the  election, then his/her second ranked candidate should
  receive the vote; but if his/her second ranked candidate has been removed
  from the election, then his/her third ranked candidate should receive the
  vote ...).

This ballot process continues until either 1 candidate remains, or 0 candidates
  remain (meaning that all the remaining candidates from the previous ballot
  tallied the same number of votes).
Note that the preferences Map never changes, but how it is intepreted
  (which candidate gets the vote) does change, since the intepretation is based
  on which candidates remain in the election.
Input and Output
Read a file of voters and their ranking of the candidates, separated
  by semicolons, building a Map whose key is each voter and whose
  value is a Queue of candidates ranked by that voter (they appear in the
  file in order, from most favorite to least favorite).


For example, the input file votepref1.txt contains the following
  lines (which could appear in this order, or any other):
  A;X;Y;Z
  B;Y;Z;X
  C;Y;Z;X
  D;Z;Y;X
  E;Z;Y;X
The first line means, voter A ranks candidate X first,
  candidate Y second, and candidate Z third.
The second line means, voter B ranks candidate Y first,
  candidate Z second, and candidate X third.
Each line will have a unique voter and a permutation of all the 
  candidates running.

Print all the associations in this Map, one per line (the voters are
  printed alphabetically) using the following form.
Each line contains the voter and his/her complete ranking of the candidates.
For example, the file above would produce:
  Voter Preferences
    A -> queue[X,Y,Z]:rear
    B -> queue[Y,Z,X]:rear
    C -> queue[Y,Z,X]:rear
    D -> queue[Z,Y,X]:rear
    E -> queue[Z,Y,X]:rear

Note that the voter names are sorted alphabetically, but the Queue
  of preferences appears in the same order they appeared in the file.
There are multiple data files for this program: votepref1.txt, 
  votepref2.txt, votepref3.txt, and votepref4.txt;
  test/debug your program on the first file; when you are done, test it on the
  rest.

Start with all the candidates.
Evaluate the ballot to determine how many votes each candidate received.
Print this vote count two ways: sorted alphabetically and sorted numerically
  (in decreasing order: if more than one candidate receives the same number of
   votes, they should appear sorted alphabetically).
Remove the candidate(s) receiving the fewest votes, and repeat this process
  until only one or no candidates remain.
Finally, print the outcome of the election: a single candidate winner or a tie.
An example interaction (processing the preferences above) might be
  Vote count on ballot #1 with candidates in alphabetical order: still in election = set[X,Y,Z]
    X -> 1
    Y -> 2
    Z -> 2
  
  Vote count on ballot #1 with candidates in numerical order: still in election = set[X,Y,Z]
    Y -> 2
    Z -> 2
    X -> 1

  Vote count on ballot #2 with candidates in alphabetical order: still in election = set[Y,Z]
    Y -> 3
    Z -> 2

  Vote count on ballot #2 with candidates in numerical order: still in election = set[Y,Z]
    Y -> 3
    Z -> 2

Winner is Y
The first ballot consisted of all three candidates, X, Y, 
  and Z.
For this ballot, the votes were counted and printed; candidate X
  received the fewest number of votes so is eliminated from the next ballot.
The second ballot consisted of two candidates, Y and Z.
For this ballot, the votes were counted and printed; candidate Z
  received the fewest number of votes so is eliminated from the next ballot.
There is only one candidate remaining so Y is declared the winner.
An alternative outcome might be
No winner: election is a tie among all candidates remaining on the last ballot
Functions and Program
Write the following functions and main program.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written C++ code.
read_voter_preferences has an (open) file parameter; it returns the
       Map representing each voter and his/her preferences
      (mine is 14 lines of well-formatted code).

print_voter_preferences has a Map of voter preferences as a
         parameter and returns nothing;
         it prints the title followed by the Map whose keys are in
         alphabetical order
       (mine is 7 lines of well-formatted code).

print_tally has a std::string title, a Map of
         candidates and their number of votes, and a
         function pointer as parameters and returns nothing; it
         prints the title followed by the Map in the appropriate order
         order (specified  by the function pointer)
       (mine is 7 lines of well-formatted code).

evaluate_ballot has a Map of voter preferences and a
         Set of the remaining candidates as parameters; it returns
         a tally: a Map whose keys are these candidates and whose values
         are the number of votes they received on this ballot, based on the
         description of instant runnoff voting
       Remember to count only one vote per voter, for his/her highest ranked
         candidate who is still in the election
      (mine is 12 lines of well-formatted code).

remaining_candidates has a Map as a parameter whose keys are
          candidates and whose values are the number of votes they received and
          returns a set containing all those candidates remaining in the
          election (the one(s) receiving the fewest number of votes are absent).
       Note that if all the candidates receive the same number of votes, then
         this function returns an empty Set
       (mine is 11 lines of well-formatted code).

Write a main function at the bottom of this file that calls these
      functions to solve the problem
    (mine is 34 lines of well-formatted code).
   To simplify the interaction, you may prompt for the file name and specify
      a default value (votepref1.txt): see my prompt_string
      function in ics46goody.hpp in the courselib/src folder.

Sample Interaction
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should match this one.
  Enter the name of a file with voter preferences[votepref1.txt]:

  Voter Preferences
    A -> queue[X,Y,Z]:rear
    B -> queue[Y,Z,X]:rear
    C -> queue[Y,Z,X]:rear
    D -> queue[Z,Y,X]:rear
    E -> queue[Z,Y,X]:rear

  Vote count on ballot #1 with candidates in alphabetical order: still in election = set[X,Y,Z]
    X -> 1
    Y -> 2
    Z -> 2
  
  Vote count on ballot #1 with candidates in numerical order: still in election = set[X,Y,Z]
    Y -> 2
    Z -> 2
    X -> 1

  Vote count on ballot #2 with candidates in alphabetical order: still in election = set[Y,Z]
    Y -> 3
    Z -> 2

  Vote count on ballot #2 with candidates in numerical order: still in election = set[Y,Z]
    Y -> 3
    Z -> 2

  Winner is Y

You can also try processing the votepref2.txt file (which leads to
  a No winner result) and votepref3.text.








#3: Finite Automata(14 pts)
Problem Summary:
Write a program that prompts the user to enter the name of
       a file representing a finite automaton: indicating its states and
       transitions (each transition out of a state specifies the
       input and the new state).
Read the information in the file, storing it in a Map.
Print the finite automaton.
Prompt the user to enter the name of a file storing the start-state
      and inputs to process (each line in the file contains this combination).
Repeatedly process these lines computing the results of the finite
      automaton on each input, and then display a trace of the results.

A finite  automaton (FA) is an machine that is sometimes called
  Deterministic Finite Automaton (DFA).
An FA is described by its states and its transitions:
  each transition for a state specifies an input and what
  new state in the FA that input leads to.
We can illustrate a FA as a graph with labelled edges (see below).


Input and Output
Read a file that describes a FA: each line contains a state and an
  arbitrary number of input->new state transitions.
Build a Map such that each key is a std::string state and whose
   associated value is another Map specifying of the transitions from
   that state: this second Map has keys that are std::string
   inputs and associated values that are std::string states.
The first token on each line is the std::string state and the remaining
  tokens (always coming in pairs) are std::string inputs and states.
All tokens are separated by one semicolon character.


For example, the input file faparity.txt contains the following lines
  (which could appear in this order, or any other):
  even;0;even;1;odd
  odd;0;odd;1;even
Here is a picture of the parity FA.
It graphically illustrates the two states (even and odd)
  and their transitions, using inputs (0 and 1)
  that always lead back to one of these two states.





Here, the state even (meaning it has seen an even number of 1
  inputs so far) is a key in the main Map.
It's value is a Map with two key/value pairs 0/even
  and 1/odd.
It means that in the even state, if the input is a 0 the
  FA stays in the even state; if the input is a 1 the
  FA goes to the odd state.
And similarly (the next line) means that for the odd state, if the input
  is a 0 the FA stays in the odd state; if the input is a
  1 the FA goes back to the even state.
So, seeing an input of 0 keeps the FA in the same state;
  seeing an input of 1 flips the FA into the other state.


Print the finite automaton, one state (and its transitions) per line;
  the states are printed alphabetically.

For example, the file above would produce:
  Finite Automaton Description
    even transitions: map[0->even,1->odd]
    odd transitions: map[0->odd,1->even]

Note that there are multiple data files for this program: faparity.txt
  and fadivisibleby3.txt; test/debug your program on 
  the first file; when you are done, test it on the last file.
Draw the FA represented by each for to ensure that your code correctly
  prints and computes with it.

Repeatedly process lines from a second input file, computing the results of the
  finite automaton for a start-state and its inputs; then print out all the
  results in a special form.
Each line in the file contains a start-state followed by a sequence of inputs.
The start-state will be a state in the FA (is a key in the outer Map)
  the inputs may specify legal or illegal transitions (may or may not be keys
  in some inner Map).

For example, the input file fainputparity.txt contains the following
  three lines:
  even;1;0;1;1;0;1
  odd;1;0;1;1;0;1
  even;1;0;1;1;0;x
The first line means, the start-state is even and the
  inputs are 1, 0, 1, 1, 0, and 1.

The result of processing each line is to print the start-state, and then each
  input and the new state it transitions to, and finally print the stop-state.
For the parity FA and the first line in this file, it should print
Start state = even
  input = 1; new state = odd
  input = 0; new state = odd
  input = 1; new state = even
  input = 1; new state = odd
  input = 0; new state = odd
  input = 1; new state = even
Stop state = even


Functions and Program
Write the following functions and main program.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written C++ code.
read_fa has an (open) file parameter; it returns the Map
     representing the finite automaton
     (mine is 17 lines  of well-formatted code).

print_fa has a Map parameter (representing the fa); it
    returns nothing,  but it prints the fa in the appropriate form
     (mine is 6 lines  of well-formatted code).

process has a Map parameter (representing the fa),
    a std::string parameter (representing the start-state), and a
    Queue parameter (representing a Queue of std::string
    inputs); it returns a Queue that contains pairs of
    std::string that show the input and resulting state after each
    transition (the first value on the Queue has an input that is an
    empty string and the start state).
    For the example shown above, process returns the following
    Queue.
queue[pair[,even],pair[1,odd],pair[0,odd],pair[1,even],pair[1,odd],pair[0,odd],pair[1,even]]:rear
    Finally, if an input is illegal (is not the key in some transition for the
    current state), say
    "x", then process should terminate with the last
    pair in the Queue indicating a problem: (x, None)
   (mine is 13 lines  of well-formatted code).

interpret has a Queue parameter (the result produced by the
    process function described above); it returns nothing, but it prints
    the results of processing a fa on an input.
    See how it prints the Queue shown above in the output further above.
    Also see the Sample Interaction below to see how it prints
    input errors (in the last example)
   (mine is 13 lines  of well-formatted code).

Write a main function at the bottom of this file that calls these
      functions to solve the problem.
      Note that the program loops over the lines in the second file
       (mine is 23 lines  of well-formatted code).
    To simplify the interaction, you may prompt for the file name and specify
      a default value (faparity.txt and fainputparity.txt): see
      my prompt_string function in ics46goody.hpp in the
      courselib/src folder.



Sample Interaction
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should match this one.
  Enter the name of a file with a Finite Automaton[faparity.txt]:

  Finite Automaton Description
    even transitions: map[0->even,1->odd]
    odd transitions: map[0->odd,1->even]

  Enter the name of a file with the start-state and input[fainputparity.txt]:
  
  Starting new simulation with description: even;1;0;1;1;0;1
  Start state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = 1; new state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = 1; new state = even
  Stop state = even
  
  Starting new simulation with description: odd;1;0;1;1;0;1
  Start state = odd
    Input = 1; new state = even
    Input = 0; new state = even
    Input = 1; new state = odd
    Input = 1; new state = even
    Input = 0; new state = even
    Input = 1; new state = odd
  Stop state = odd
  
  Starting new simulation with description: even;1;0;1;1;0;x
  Start state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = 1; new state = even
    Input = 1; new state = odd
    Input = 0; new state = odd
    Input = x; illegal input: terminated
  Stop state = None

You can also try the fadivisibleby3.txt finite automaton file, which
  determines whether an integer (sequence of digits) is divisible by 3: it is
  if the finite automaton stops in state rem0 (which stand for has
  remainder 0).
Its input file is fainputdivisibleby3.txt, which represents the 
  number 12,435,711, which is divisible by 3, followed by the
  number 823, which is not divisible by 3 (it has a remainder of
  1 when divided by 3).







#4: Non-Deterministic FA(10 pts)
Problem Summary:
 Write a program that solves for a Non-Deterministic Finite
       Automaton the same problem that was solved for a Deterministic Finite
       Automaton in Problem #3 (above).

A non-deterministic finite automaton (NDFA) is machine described by its
  states and its transitions:
  each transition for a state specifies an input and what
  state (or states: that what makes it non-deterministic) that
  input leads to.
We can illustrate an NDFA as a graph with labelled edges (see below).
The critical difference is that an NDFA can have multiple edges with the same
  label going to different states (we'll see how to handle such transitions
  below).


Input and Output
Read a file that describes an NDFA: each line contains a state and an
  arbitrary number of input->state transitions.
Build a Map such that each key is a std::string state and whose
   value is another Map specifying of the transitions from that state:
   this second Map has keys that are std::string inputs and 
   values are Sets of std::string states: all the states a
   particular input can lead to.
The first token on each line is the std::string state and the remaining
  tokens (always coming in pairs) are std::string inputs and states:
here the same input can appear multiple times with different states following.
All tokens are separated by one semicolon character.


For example, the input file ndfaendin01.txt contains the following lines
  (which could appear in this order, or any other):
  start;0;start;1;start;0;near
  near;1;end
  end
Here is a picture of the endin01 NDFA.
It graphically illustrates the three states (start, near,
  and end) and their transitions, using inputs (0
  and 1).





Here, the state start is a key in the main Map.
It's value is a Map with two key/value pairs 0 mapping to the
  Set containing start and near and 1 mapping to
  the Set containing just start.
It means that in the start state, if the input is a 0 the
  NDFA can stay in the start state or it can go to the near
  state; if the input is a 1 the NDFA must stay in the start
  state.
And similarly the next line means that in the near state, if the
  input is a 1 the NDFA must go into the end state.
The last line means that the end state has no transitions out of it.


Print the NDFA, one state (and its transitions) per line;
  the states are printed alphabetically and the transition Map
  for each state is printed in the form of a standard Map: a series in
  the form input -> set of states.
Note that the state end is a key in the main Map, whose
  associated transitions are an empty Map.


For example, the file above would produce:
  Non-Deterministic Finite Automaton Description
  end transitions: map[]
  near transitions: map[1->set[end]]
  start transitions: map[0->set[start,near],1->set[start]]

Note that there are multiple data files for this program:
  ndfaendin01.txt, ndfatrain.txt.txt, and ndfare.txt;
  test/debug your program on the first file; when you are done, test it on the
  rest.
Draw the NDFA represented by each for to ensure that your code correctly
  prints and computes with it.

Repeatedly process lines from a second matching input file
 (ndfainputendin01.txt for the example above), computing the results of
  the non-determinisitc finite automaton for a start-state and its inputs; then
  print out all the results in a special form.
Each line in the file contains a start-state followed by a sequence of inputs.
The start-state will be a state in the DNFA (is a key in the outer MapMap).

For example, the input file ndfainputendin01.txt contains the following
  two lines:
  start;1;0;1;1;0;1
  start;1;0;1;1;0;0
For example, the first line means, the start-state is start and the
  inputs 1, 0, 1, 1, 0, and 1.


The result of processing each line is to print the start-state, and then each
  input and the new states (plural) it could transition to (the could
  is what makes it non-deterministic), and finally print the stop-states.
For the ndfaendin01 NDFA and the first line in this file, it should print
  Start state = set[start]
  Input = 1; new states = set[start]
  Input = 0; new states = set[start,near]
  Input = 1; new states = set[start,end]
  Input = 1; new states = set[start]
  Input = 0; new states = set[start,near]
  Input = 1; new states = set[start,end]
Stop state(s) = set[start,end]


Note especially that in the start state, if the input is a 0,
  then the NDFA can either remain in the start state or go into the
  near state.
For this program, we keep track of all states that the NDFA can be in,
  using a set of new possible states.
For the next input, 1, we can be either in the start state
  (from the start state, an input of 1 allows us to stay in the
  start state) or the end state (from the near state, an
  input of 1 allows us to transition to the end state).
Thus, we keep track of the set of states the NDFA can be in, and the
  new set of states the NDFA can be in after processing the next input
  for each of these states.
In this example, because end is included in the stop-states, this
  input does end in 01.

Functions and Program
Write the following functions and main program.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written C++ code.
read_ndfa has an open (file) parameter; it returns the Map
     representing the non-deterministic finite automaton; hint: I used
     a while loop to read lines and a nested for loop to construct
     the Map storing each input and the Set of states it can lead
     to (mine is 17 lines of well-formatted code).

print_ndfa has a Map parameter (representing the NDFA); it
    returns nothing,  but it prints the NDFA in the appropriate form
     (mine is 6 lines of well-formatted code).

process has a Map parameter (representing the NDFA),
    a std::string parameter (representing the start-state), and a
    Queue parameter (representing the sequence of std::string
    inputs); it returns a Queue that contains pairs of 
    inputs and the resulting states after each transition.
    For the example shown above, process returns the following
    Queue.
  queue[pair[,set[start]],pair[1,set[start]],pair[0,set[start,near]],pair[1,set[start,end]],
        pair[1,set[start]],pair[0,set[start,near]],pair[1,set[start,end]]]:rear
    Finally, if an input is illegal (is not the key in some transition for the
    current state), just ignore it
   (mine is 13 lines of well-formatted code).

interpret has a Queue parameter (the result produced by
    process; it returns nothing, but it prints the results of processing
    an NDFA on an input.
    See how it prints the Queue shown above in the output further above
   (mine is 10 lines of well-formatted code).
    
Write a main function at the bottom of this file that calls these
      functions to solve the problem.
    Note that this function loops over the lines in the second file
   (mine is 23 lines of well-formatted code).



Sample Interaction
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should "match" this one (recall the order of values in sets is
  not important).
  Enter the name of a file with a Non-Deterministic Finite Automaton[ndfaendin01.txt]: 
  Non-Deterministic Finite Automaton Description
    end transitions: map[]
    near transitions: map[1->set[end]]
    start transitions: map[0->set[start,near],1->set[start]]

  Enter the name of a file with the start-states and input[ndfainputendin01.txt]: 

  Starting new simulation with description: start;1;0;1;1;0;1
  Start state = set[start]
    Input = 1; new states = set[start]
    Input = 0; new states = set[start,near]
    Input = 1; new states = set[start,end]
    Input = 1; new states = set[start]
    Input = 0; new states = set[start,near]
    Input = 1; new states = set[start,end]
  Stop state(s) = set[start,end]

  Starting new simulation with description: start;1;0;1;1;0;0
  Start state = set[start]
    Input = 1; new states = set[start]
    Input = 0; new states = set[start,near]
    Input = 1; new states = set[start,end]
    Input = 1; new states = set[start]
    Input = 0; new states = set[start,near]
    Input = 0; new states = set[start,near]
  Stop state(s) = set[start,near]

The ndfatrain.txt file is a non-deterministic finite automaton
  that determines whether an train (sequence of characters representing
  different kinds of cars) is a legal train according to Chapter Exercise #7
  in the ENBF lecture from ICS-33..
Its input file is ndfainputtrain.txt, whose first input represents a
  legal train: ends when done is one possible stopping state; and second
  input represents an illegal train.

The ndfare.txt file is a non-deterministic finite automaton translation
  of the regular expression ((a*|b)cd)+. 
Its input file is ndfainputre.txt, whose first input represents a
  matching string: ends when last as one possible stopping state; and
  input second does not
  match.

  







#5: Word Generator(8 pts)
Problem Summary:
 Write a program that prompts the user to enter the order statistic
  (a positive number) and the name of a file of text.
Read the file of text, storing a special corpus in a Map.
Print the corpus Map.
Prompt the user to enter the order statistic number of words,
      and the number of random words to generate, then print the original words
      followed by the words randomly generated from the corpus.

Your program will "learn" the word pattern of an author (based on some
  "order statistic" and reading a large sample of the author's writing) and
  then generate random text following the author's word patterns.

Input and Output
After prompting for the order statistic, read a file of words, building a
  Map.
Here the Map's keys are Queuess of n words (n
  is the order statistic) and each key's value is a Set of all the
  words in the text that ever follow these n words:
  e.g., if n were 2, the Map would contain a keys that are
  Queues of 2 words (for every pair of words appearing next to each
  other in the text) and whose values are a Set of all the words
  following the key (no matter where the pair occurs in the text; the Set
  stores no duplicate words).

The easiest way to process the words one at a time is to use an outer loop
  reading lines of text and an inner loop scanning all the words when the line
  is split using a space character.
To process a new word, if the Queue doesn't have n words, just
  enqueue the word; if the Queue has n words, use it as a key and
  put the new word in its associated Set, then dequeue the first word
  and enqueue the new word (so the Queue will still contain n
  words).

For a simple example, the file wginput1.txt contains the following
  lines (it could have all this information on one line or more lines):
  a b c b a d c b a d
  c a a b a a d
  

Print all the associations in the Map, one per line in standard lexical
  order.

After printing all associations, print the size of the smallest and largest
  Set that is a value in the Map.
Each line contains an n word Queue, followed by the Set
   of unique words that follow them in the text.
In standard lexical order, the keys appear in order relative to the first word 
  in the Queue (alphabetically); for all first words that are the same,
  they appear in order relative to the second word in the Queue
  (alphabetically); for all first and second words that are the same, they 
 appear in order relative to the third word in the Queue; etc.
  (see the example below, for an order statistic of 2).

For example, the file above would produce:
  Corpus of 8 entries
    queue[a,a]:rear -> set[b,d]
    queue[a,b]:rear -> set[c,a]
    queue[a,d]:rear -> set[c]
    queue[b,a]:rear -> set[d,a]
    queue[b,c]:rear -> set[b]
    queue[c,a]:rear -> set[a]
    queue[c,b]:rear -> set[a]
    queue[d,c]:rear -> set[b,a]
  Corpus of 8 entries
  min/max = 1/2

For example, queue[a,d]:end appears three times in the text above, twice
  followed by c and once followed by nothing (at the end of the file);
  queue[a,b]:end appears twice in the file above, first followed by
  c and second followed by a.


Prompt the user for the words to start with (there are order statistic number
  of them; they must be in some Queue that is a key in the
  corpus) and the number of random words after that to generate.
Produce the list of all words and print it. 

A random 10 word list, after the words a and d might
  print as
    Random text = queue[a,d,c,a,a,b,a,d,c,b,a,d]:rear
In the result we start with a d (specified by the user), we
  know only c can come next; then using d c we know that
  either b or a must come next; it randomly chooses a...


Functions and Program
Write the following functions and main program.
I am providing line counts not as requirements, but to indicate the lengths of
  well-written C++ code.
read_corpus has an order statistic parameter and and open (file)
     parameter; it returns the Map representing the corpus of
     words in a file
    (mine is 17 lines of well-formatted code).

print_corpus has a Map parameter (representing the corpus);
     it returns nothing, but it prints the corpus in the appropriate form
     followed the min and max value Set sizes
     (mine is 13 lines of well-formatted code + the queue_gt function).

produce_text has a Map parameter (representing the corpus),
    a Queue parameter (representing the starting words), and an
    int parameter (representing the number of random words to generate);
    it returns a Queue that contains the the starting words followed by
    the generated words
     (mine is 15 lines of well-formatted code).

    
    Hint: use two Queues of words, both starting out with the
       starting words.
    The first will always contain the current n words to be used as a
      key in the Map); the second will contain all the generated words.
    Generate a random next word from the Map using the
      random_in_set function that I wrote in this file; then 
      drop the first word from the Queue and add the generated word, so
      it remains a Queue of size n; repeat until you have
      generated the required number of words.
    
    Warning: you might have to stop prematurely if you generate the last
      n words in the text, and if these words occur nowhere else.
    That is because in this case, there is no random word to generate following
      them; in this case add a "None" to the end of the Queue
      of words and immediately return that Queue
    (mine is 14 lines of well-formatted code).

Write a main function at the bottom of this file that calls these
      functions to solve the problem
   (mine is 21 lines of well-formatted code).

Sample Interaction
The program, as specified, will have the following interaction:
  user-typed information appears in italics.
Your output should match this one.
  Enter the order statistic[2]: 
  Enter the name of a file to process[wginput1.txt]: 

  Corpus of 8 entries
    queue[a,a]:rear -> set[b,d]
    queue[a,b]:rear -> set[c,a]
    queue[a,d]:rear -> set[c]
    queue[b,a]:rear -> set[d,a]
    queue[b,c]:rear -> set[b]
    queue[c,a]:rear -> set[a]
    queue[c,b]:rear -> set[a]
    queue[d,c]:rear -> set[b,a]
  Corpus of 8 entries
  min/max = 1/2

  Enter 2 words to start with
  Enter word 1: a
  Enter word 2: d
  Enter # of words to generate: 10
  Random text = queue[a,d,c,a,a,b,a,d,c,b,a,d]:rear

The wginput2.txt file cannot be used to generate a large number of
  random words for the reason explained in the Warning above.

With the appropriate modification, we can use this same program to
  read/generate music or DNA sequences or any other data made of repeated
  symbols.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/assignments/program2/program.html
##-----------------TITLE------------------------##
Program 2
##------------------TEXT------------------------##
Program 2
Implementing Queue/Priority Queue/Set
    (and their iterators) with Linked Lists 


ICS-46: Data Strcuture Implementation and Analysis









Introduction
This programming assignment is designed to ensure that you know how to
  implement three templated classes (Queue, Priority Queue,
  and Set) with linked lists.
Your implementations will also include fully-functional iterators for
  these classes.
You will be writing lots of small code fragments that traverse and mutate
  linked lists.

You must write all your implementations using linked lists: a linear-linked
  list for LinkedQueue, a header linked list for
  LinkedPriorityQueue, and a trailer linked list for LinkedSet.
You can test these implementations by using the standard drivers and
  GoogleTests (provided with the download) that we will use when grading your
  code for correctness; recall that you can augment the GoogleTest with whatever
  code you want, to aid your debugging: a GoogleTest is just a C++ program.
You can also test the code you wrote for Programming Assignment #1 (using
  array implementations of these classes) by substituting these linked list
  implementations -typically by changing a few #include and
  typedef statements.

Write and use the insertion (<<) operator and str()
  method in each class for debugging.
In a header list, show HEADER instead of the value in the front/header
  node, as that node is not really in the collection represented by the
  list; likewise, in a trailer list, we show TRAILER for the value in
  the rear/trailer node, for the same reason.
Note that there are few tested requirements for what these operators/methods
  return, but this code will make debugging easier, and we may examine it by
  hand.
After enqueueing/inserting a, b, and c,
  my LinkedQueue's str() prints as
  linked_queue[a->b->c](used=3,front=0x642498,rear=0x6424b8,mod_count=3);
  my LinkedPriorityQueue's str() prints as
  linked_priority_queue[HEADER->a->b->c](used=3,front=0x3f2498,mod_count=4);
  and my LinkedSet's str() prints as
  linked_set[c->b->a->TRAILER](used=3,front=0x7424c8,trailer=0x742498,mod_count=3).

You should download the 
  program2 project folder and use it to create an
  Eclipse project.
  You will write the required methods in the linked_queue.hpp, 
  linked_priority_queue.hpp, and linked_set.hpp, files in this
  project, and submit each separately in Checkmate.
The project folder also contains three pairs of .hpp and .cpp
  files: a driver/GoogleTest pair for each class that you will write, and the
  driver.cpp file which has a main function that can be made to
  run any of the three drivers.

Alternatively, you can also reuse a existing/working project folder that already
  is connected to both the courselib and googletest libraries: to
  do so, first remove (but save) all the files in its src folder and then
  copy all the .hpp and .cpp files from the downloaded project's
  src folder into the existing/working project's src folder;
  finally, right-click the project and select Refresh (F5).

Important: Only one of the .cpp files with a main method
  can be active/compiling at any time.
In the download, only the driver.cpp file is active; the GoogleTests are
  inactive.
To make a progam inactive, select it (in the editor tab), use the Ctrl-a
  command to select all its lines, and then type Ctrl-/ (or click
  Source at the top left of the menu and choose Toggle Comment):
  ever line will now appear in a comment (so the main function is
  commented-out); by using these same instructions, you can toggle back those
  lines to not have comments.

I recommend that you work on this assignment in pairs.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.

Only ONE STUDENT should submit the assignment (all parts of it).
If students work in pairs, BOTH NAMES and their UCInetID names must
  appear in a comment at the top of each submitted program.
For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each submitted file would appear as:
  // Submitter: romeo1(Montague, Romeo)
  // Partner  : jcapulet(Capulet, Juliet)
  // We certify that we worked cooperatively on this programming
  //   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
If the names do not appear at the top of all your submissions in exactly this
  form, points will be deducted.
If you are submitting by yourself, you may omit all lines but the first
  (Submitter).
Please do turn in each program as you finish it, so that I can
  accurately assess the progress of the class as a whole during this assignment;
  do not turn in all the programs at the same time.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).


This assignment has 3 parts: pairs should work on each part together, not split
  them up and do them separately.
Part 1 is worth 42 points; part 2 is worth 9 points; part 3 is worth 9 pts.
This skewing of points towards the simpler parts means students finishing the
  first part correctly will have a 70% average (a C-); those finishing
  the first 2 parts correctly will have an 85% average (a B); but to get A on
  this  assignment requires solving all parts correctly.
Remember I'm going to be running MOSS on the parts of this assignment,
  to check for program similarity.

Important: The courselib contains array implementations for all these
  data types; although this assignment requires you to use linked lists, there
  are still many strong similarities at a high level in all these
  implementations.
So, I encourage you to examine these implementations closely, and understand
  them; possibly, experiment with them (using their drivers or GoogleTests),
  while you are writing your linked list implementations: this advice is
  especially true as you begin to study, understand, and implement iterators.
Please feel free about asking questions about these methods -both their syntax
  and semantics- on the appropriate Messageboard.







Queues (42 pts)
Queues are implemented by simple FIFO data structures (adhering to the
  Fast-In/First-Out order property).
We can implement queues efficiently with linked lists, by using two instance
  variables that refer to nodes in a linked list: front points to the
  first node in the linked list; rear points to the last node in the
  linked list (which might point to the same node as front).
Nodes are removed from the front and added to the rear, so these are the
  two "hot spots" for a queue.
The enqueue and dequeue operations should each be O(1).

Although we can easily compute the number of values in linked list by
  traversing it, instead we will declare and update an extra instance variable 
  named used to cache the size (incrementing and decrementing it, as
  values are successfully added/removed from the queue), so we will not have
  to traverse the list to compute its size.

The file linked_queue.hpp declares the appropriate constructors, methods,
  operators, and instance variables in a form similar to the array
 implementations in the courselib.
Notice how the LN class is first declared private (before
  Iterator) and then defined private, inside the templated
  LinkedQueue class.
I suggest copying/pasting all the code from the array_queue.hpp
  file, and then translating all this code from using arrays to using linked
  lists.
Pay close attention to ensure all instance variables receive values in
  the constructors and are used/set correctly in queries and commands.

Use delete to recycle LN nodes; your code should create no
  garbage.

Read the material in the Iterators section of this assignment, which
  discusses the iterators needed for all the classes that you will write.
These iterators perform the the same operations in every class, but they are
  implemented differently based on the kind of linked list implementation.

Special Requirements:
operator=: Initially, to simplify its implementation, you can
  clear the left-hand side (target) queue and then enqueue all the
  values from the right-hand side queue into it.
But to get full credit for this method (and save time/space in your code), you
  must reuse whatever LN nodes are already in the target, to minimize the
  number of calls to new: if more nodes are needed in the target,
  allocate them; if fewer are needed in the target, delete the extra nodes.
My solution used a pointer to a pointer; its body has 14 lines of code.
So for example; if we declared a and b to be
  LinkedQueue and a contained 2 nodes and b contained
  5 nodes, then a = b; would reuse the 2 nodes in a (copying the
  first 2 values stored in b there) and extend that list by 3 nodes
  (copying the remaining 3 values stored in b there).
Likewise, b = a; would reuse the first 2 nodes in b (copying the
  only 2 values stored in a there) and delete the remaining 3 nodes
  in b's original list.


Finally, read the testing section below as well.








Priority Queues (9 pts)
Priority Queues can be implemented by a variety of data structures (where the
  highest priority value is always removed first).
How does a specific priority queue determine which value has the highest
  priority?
We supply the priority queue with a gt (greater-than) function that
  computes whether or note its first argument has a greater priority than its
  second argument.
This gt can be passed to the constructor or instantiated in the
  template.
So, we cannot ask, "What is the priority of a value." But, we can ask "Does the
  priority of a first value have a higher priority than a second value", by
  calling the gt function.
For example, we cannot determine the priority of a std::string value, but
  we can determine whether one std::string value has a higher
  priority than another std::string value.

We can implement priority queues simply (although not very efficiently; you will
  implement priority queues with max-heaps, a more efficient data structure, in
  Programming Assignment #3) with one instance variable, which points to a
  linked list whose first value is the one with the highest priority value, and
  whose remaining values occur in order of decreasing priority; when adding a
  value to a priority queue, we insert it at the correct spot in the list,
  keeping the list ordered from highest to lowest priority; when removing the
  highest priority value from a  priority queue, we always remove it from the
  front.

Instead of a standard linked list, you must implement the priority queue
  using a "Header node" at the front of the linked list.
Doing so should simplify writing some of the more complicated methods: enqueuing
  an element onto the priority queue and erasing a value via an Iterator.
Hint: my enqueue method used four lines to put the element into
  an LN and insert it into the correct position in the header linked
  list (followed by 3 more lines of bookkeeping code).

Although we can easily compute the number of values in linked list by
  traversing it, instead we will declare and update an extra instance variable 
  named used to cache the size (incrementing and decrementing it, as
  values are successfully added/removed from the queue), so we will not have
  to traverse the list to compute its size.

The file linked_priority_queue.hpp declares the appropriate constructors,
  methods, operators, and instance variables in a form similar to the array
  implementations in the courselib.
Notice how the LN class is first declared private (before
  Iterator) and then defined private, inside the templated
  LinkedPriorityQueue class.
I suggest copying/pasting the methods from the array_priority_queue.hpp
  file, and then translating these methods from using arrays to using linked
  lists; as an alternative, you might want to copy the linked_queue.hpp
  file you wrote in part 1: it has the same methods and it already does some
  linked list processing: but the forms of some declarations are different.
Pay close attention to ensure all instance variables receive values in
  the constructors are are used/set correctly in queries and commands.

Use delete to recycle LN nodes; your code should create no
  garbage.
Note, that the constructors for this class might throw exceptions; if one does,
  it should recycle the allocated header node first.

Read the material in the Iterators section of this assignment, which
  discusses the iterators needed for all the classes that you will write.
These iterators perform the the same operations in every class, but they are
  implemented differently based on the kind of linked list implementation.

Special Requirements:
copy constructor and operator=:
The enqueue operation for this implementation of a priority queue is
  O(N), so enqueuing N values is O(N^2).
When writing the copy constructor and operator=, use the fact
  that "the linked lists being copied are already in order" to make these
  operations O(N): don't just enqueue the N values into the priority queue.

For the copy constructor: if the gt function for the object
  being constructed is the same as the function for the priority queue to copy,
  we can copy the values in the linked list, retaining the same order, in time
  O(N); but if the gt function is different, then just enqueue the
  value onto the new priority queue.

For operator=, copy the gt function on the right-hand side
  priority queue into the gt function for the (target) left-hand side
  priority queue (because after assignment, these priority queues must be ==;
  the gts may already be the same).
  Handle storage allocation as described for regular queues above, reusing
  allocated LN nodes in the target whenever possible.


Finally, read the testing section below as well.







Sets (9 pts)
Sets can be implemented by a variety of data structures.
We can implement sets simply (although not very efficiently; you will implement
  sets with hash table, a more efficient data structure, in Programming
  Assignment #4) with one instance variable, which points to a linked list of
  values in the set.
Remember that a set's order is not important: e.g., when we insert an
  element into a set, we are free to put it anywhere in the
  linked list; put it somewhere easy by writing short/efficient code.

Instead of a standard linked-list, you must implement the set using a
  "Trailer node" at the rear of the linked list.
It is useful to declare a trailer instance variable that always points
  to this node (be careful: erasing the value in the node before the
  trailer node requires updating trailer; also, every linked list has
  its own/different trailer node).
Having a trailer node should simplify erasing a value from the set (in the
  class method, but even more so in the iterator methods, using the standard
  code/trick covered in the discussion of trailer lists).
Hint: my erase_at helper method embodies this code, and is called both
  by the erase methods in both the LinkedSet and Iterator
  clases.

Although we can easily compute the number of values in linked list by
  traversing it, instead we will declare and update an extra instance variable 
  named used to cache the size (incrementing and decrementing it, as
  values are successfully added/removed from the set), so we will not have
  to traverse the list to compute this value.

The file linked_set.hpp declares the appropriate constructors, methods,
  operators, and instance variables in a form similar to the array
  implementations in the courselib.
Notice how the LN class is first declared private (before
  Iterator) and then defined private, inside the templated
  LinkedSet class.
I suggest copying/pasting the methods from the array_set.hpp file,
  and then translating these methods from using arrays to using linked lists.
Pay close attention to ensure all instance variables receive values in
  the constructors are are used/set correctly in queries and commands.

Use delete to recycle LN nodes; your code should create no
  garbage.

Read the material in the Iterators section of this assignment, which
  discusses the iterators needed for all the classes that you will write.
These iterators perform the the same operations in every class, but they are
  implemented differently based on the kind of linked list implementation.

Special Requirements:
copy constructor and operator=: The insert operation
  is O(N), because it must check whether or not the element is already in the
  set, so inserting N values into a set is O(N^2).
When writing the copy constructor and operator=, use the fact
  that "the linked lists being copied/compared are already sets, with no
  duplicates" to make these operations O(N); recall, the "order in which these
  values appear in the list" is  irrelevant.

For the copy constructor: we can copy the values in the linked list,
  resulting in a new list in the same order, in time O(N); we know the
  set/linked list being copied has no duplicates, so not duplicate checking
  should be tested.

For operator=: handle storage allocation as described for regular
  queues above, reusing allocated LN nodes in the target whenever
  possible.


Finally, read the testing section below as well.








Iterators
Fundamentally, iterators operate similarly for each data type: they allow
  programmers to traverse the data type, examining (and even dequeueing/erasing)
  the values inside the data type, one after the other.
Each uses a cursor to remember its place inside the data type, as it traverses
  it: the array implementations used ints for cursors; the linked-list
  implementations use pointers for cursors.

Once iterators are created (indexing the first value, or if there is none,
  indexing "one beyond the last value") we can use them to examine or erase
  the current value, increment them (to access the next value), and check
  whether a cursor has reached "one beyond the last value".
We often do this with either explictly in for loops or implicitly in
  for-each loops (we do the latter more frequently).

Note that if we erase a value, the cursor will temporarily refer to
  its next value (with can_erase set to false): we must call
  one form of the ++ operator to increment the cursor before we can
  examine or erase another value, but doing so does right after calling
  erase will not change the cursor, because erase has already
  advanced the cursor refer to its next value.

Observe their similarity in all implementations among all the Iterator
  classes and their methods.
I recommend writing and testing the code for both ++ operators before
  writing code for an iterator's erase method.
This will allow you to test loops using iterators, so long as the body of the
  loop does not call erase on the iterator.
After your code for these operators is working correctly, write code for
  calling erase on an iterator, and update the code in the ++
  operators where necessary, to work correctly with erase.

Note that iterators for the LinkedQueue and LinkedPriorityQueue
  classes produce values in the order that they would be dequeued: FIFO for a 
 queue and priority ordering for a priority queue.
Given how these linked lists represent these classes (queue: front to rear;
  priority queue: highest to lowest priority), the order of iterating through
  these classses is the same as the order of traversing their linked list
  implementation from front to rear.

There are four GoogleTest functions that focus on iterators:
iterator_plusplus focuses on the two forms of ++ operators
  and does not call the iterator's erase;
iterator_simple does not call the iterator's erase;
iterator_erase does call the iterator's erase; and
iterator__exception_concurrent_modification_error ensures that mutating
  the data structure forces any active iterator to stop working (unless the
  mutation was done by that iterator's erase).

For the linked_set class
  
  the use of a trailer list will often make Iterator code easier to write: it
  requires only a current instance variable, not one for prev.
In general, you should hand-simulate/debug your iterator code for the following
  cases:
 erasing the first value (maybe several in a row at the front)
   erasing non-consecutive values inside (with multiple ++
         operators between calls)
   erasing consecutive values  (with single ++
         operators between calls)
   erasing the last value (maybe several in a row at the end)


You can study how these semantics are coded in the array implementations of
  these data types, which are similiar but simpler than how they are coded with
  linked lists (because we can more easily manipulate int array cursors:
   i-1 and i+1).
For linked list implementations, implementing erase on iterators is
  typically more complicated, but more EFFICIENT: values removed in the middle
  of contiguous arrays require shifting, causing the complexity class of
  erase to be O(N) in arrays while being only O(1) in linked lists.







Testing
There are various ways to test each of the classes you are writing in this
  programming assignment.
First, though, you should write all the methods, paying careful attention to
  the array implementations and previously written linked list implementations.
For some, you might just boiler-plate simple code that is not correct, but
  allows the methods to compile, allowing other methods in the classes to be
  tested.

The easiest way to start testing//debugging is by using the driver program.
It allows you to perform any method call supported by the templated classes,
  and see the state of the class (or view the debugger).
Of course, 
you must get the insertion (<<) operator and str() method to
  work before using it to debug the other methods.

After you test and debug your code with the driver, try running the appropriate
  GoogleTest code.
Again, this form of testing is useful only as you approach a finished solution.
We will use the GoogleTest, and visual inspection, to grade this assignment.
Important Note: While you are debugging your classes, you can edit the
  GoogleTest (for example, putting std::cout statements at strategic
  points), but don't accidentally remove any of the assertions, otherwise you
  won't be fully checking your code the way we will.
All debugging std::cout should end in std::endl to flush the
  output stream: that ensures the output it displayed before executing the next
  statement (which may throw an exception, and thus the output buffer may not
  be flushed).
Remember to remove all these std::cout statements before submitting your
  code for grading.

When you run the GoogleTest, initially choose small values for the first and
  third prompts (just press return to the second prompt) or comment-out these
  prompts and assign small values to these variables instead.
Besides an indication of which tests pass and fail, the console window
  will show a speed for the speed test (which will vary depending on how
  fast a machine you run your code on): don't worry about it.
When your code is passing all the tests, put in values like 10,000 for
  these prompts.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/assignments/program4/program.html
##-----------------TITLE------------------------##
Program 4
##------------------TEXT------------------------##
Program 4
Implementing Maps and Sets
    (and their iterators) with Hash Tables


ICS-46: Data Strcuture Implementation and Analysis









Introduction
This programming assignment is designed to ensure that you know how to
  implement two templated classes (Map and Set) with Hash
  Tables.
Your implementations will also include fully-functional iterators for
  these classes.
For the map you will be writing code that processes the underlying array
  storing a pointer to a trailer linked-list of key->value pairs.
For the set you will be writing simlar code that processes the underlying array
  storing a pointer to a trailer linked-list of elements.

You can test these implementations by using the standard drivers (provided
  with the download) and GoogleTests that we will use when grading your
  code for correctness; recall that you can augment the GoogleTest with whatever
  code you want, to aid your debugging: a GoogleTest is just a C++ program.
You can also test the code you wrote for Programming Assignment #1 (which used
  array implementations of these classes) by substituting these hash table
  implementations -typically by changing a few typedef statements
  and adding the hash function needed for their constructors.
In fact, you will be required to translate my solution to the
  wordgenerator program to use HashMap and HashSet
  and indicate the performance improvement (over versions using slower classes)
  on a large text file (wghuck.txt).

Write and use the standard insertion (<<) operator and
  str() method in the map and set classes for debugging.
For each return a std::string that explicitly shows the trailer
  linked-list in each bin, along with the other instance variables, so you can
  easily examine the structure of the hash table.
To simplify the result, represent the trailer node just by TRAILER.
Note that there is no tested requirement for what these methods return, but
  the versions above will make debugging easier.
Here is an example of what my str() method returns for a HashMap
  with 3 bins and 3 key->value pairs:
  bin[0]: b->2 -> a->1 -> TRAILER
  bin[1]: TRAILER
  bin[2]: c->3 -> TRAILER#

You should download the 
  program4 project folder and use it to create an
  Eclipse project.
You will write the required methods in the hash_map.hpp and
  hash_set.hpp files in this project, and submit each separately in
  Checkmate.
The project folder also contains two pairs of .hpp and .cpp
  files: a driver/GoogleTest pair for each class that you will write, and the
  driver.cpp file which has a main function that can be made to
  run any of the two drivers.

Alternatively, you can also use a existing/working project folder that already
  is connected to both the courselib and googletest libraries:
  to do so, first remove (but save) all the files in its src folder and then
  copy all the .hpp and .cpp files from the downloaded project's
  src folder into the existing/working project's src folder;
  finally, right-click the project and select Refresh (F5).

Important: Only one of the .cpp files with a main method
  can be active/compiling at any time.
In the download, only the driver.cpp file is active; the GoogleTests are
  inactive.
To make a progam inactive, select it (in the editor tab), use the Ctrl-a
  command to select all its lines, and then type Ctrl-/ (or click
  Source at the top left of the menu and choose Toggle Comment):
  ever line will now appear in a comment (so the main function is
  commented-out); by using these same instructions, you can toggle back those
  lines to not have comments.

I recommend that you work on this assignment in pairs, with someone in your lab
  section.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to submit
  program early.

Only ONE STUDENT should submit the assignment (all parts of it).
If students work in pairs, BOTH NAMES and their UCInetID names must
  appear in a comment at the top of each submitted program.
For example if Romeo Montague (whose UCInetID is romeo1) submitted a program
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)
  the comment at the top of each submitted file would appear as:
  // Submitter: romeo1(Montague, Romeo)
  // Partner  : jcapulet(Capulet, Juliet)
  // We certify that we worked cooperatively on this programming
  //   assignment, according to the rules for pair programming
If you do not know what the terms cooperatively and/or
  rules for pair programming mean, please read about
  Pair Programming 
  before starting this assignment.
If the names do not appear at the top of all your submissions in exactly this
  form, points will be deducted.
If you are submitting by yourself, you may omit all lines but the first
  (Submitter).
Please do turn in each program as you finish it, so that I can
  accurately assess the progress of the class as a whole during this assignment;
  do not turn in all the programs at the same time.

Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn in
  the files).


This assignment has 3 parts: pairs should work on each part together, not split
  them up and do them separately.
This is especially important in this assignment, because once you have a working
  HashMap, you can reuse many parts of its code in HashSet: so
  working on each part together will encourage maximum progress.
Part 1 is worth 40 points; part 2 is worth 15 points; part 3 is worth 5 points.
Remember I'm going to be running MOSS on the parts of this assignment.

IMPORTANT: The courselib contains an array implementation for the map and set
  data types (and you have written a BST version of map; and a trailer
  linked-list version of set); although this assignment requires you to use
  hash tables (with trailer linked-lists), there are still
  many strong similarities at a high level in all these implementations.
So, I encourage you to examine these implementations closely, and understand
  them; possibly, experiment with them (using their drivers or GoogleTests),
  while you are writing your hash table implementation: this advice is
  especially true as you begin to study, understand, and implement iterators.
Please feel free about asking questions about these methods: both their syntax
  and semantics.

Probaby the right way to design this assignment is to write a general
  HashTable class, and then use it to implement both HashMap and
  HashSet.
But, bacause of the complexity of using templated-classes in C++, the shortness
  of time, and the fact that hash tables are used slightly differently to
  implement maps and sets, I have "simplified" the assignment by requiring you
  to implement hash tables in a map (and then reimplement them in a set; you
  can reuse lots of code by cutting/pasting/updating).







Maps (40 pts)
Maps can be implemented by a variety of data structures: they all associate
  unique keys with values, by storing an ics::pair holding both the
  key and its value.
The data structure should allow us quickly to find the value associated with
  a key, and possibly change/update such a value.
We must supply HashMap with a hash (hashing) function.
This hash can be passed to any constructor or instantiated in the
  template.

Note that because we are using trailer linked-lists for chaining, no bin will
  be empty: each will at least store a trailer node.
This property is important when we create hash tables, traverse them, and when
  we double their number of bins: see ensure_load_factor below.
Also important is that it doesn't make a different in which order the LNs appear
  in each bin (although each must have a Trailer node): using this property can
  simplfy the required code.

We can implement maps efficiently by using a hash tables using a simple hashing
  function on only the key (first) part of the pair.
Most operations updating hash table are O(1).
When writing the copy constructors and operator=, use the fact that
  "the hash table being copied already has all its pairs in the right bins"
  to simplify these operations (and avoiding rehashing the keys).
Don't just put each key->value pair in the map.

For the copy constructor: if the hash function for the object being
  constructed is the same as the function for the map to copy, we can copy the
  values in each bin of the hash table without rehashing anything; but if the
  hash function is different, then the best we can do in the copy
  constructor is to put all the key/value pairs into the new map.
Finally, for the operator=, also remember to copy the hash
  function from the rhs map.

The file hash_map.hpp declares the appropriate constructors, methods,
  operators, and instance variables.
Note the many helper methods that operate on hash tables: most are easily
  implemented iteratively, although recursive implementations may be simpler
  for some.
Many of the standard map methods call one or more of these helper
  methods to retrieve information from a hash table and/or change it
  (e.g., add/remove key->value  assocations).
These include:
int hash_compress (const KEY& key) const;
      This method uses the hash function supplied by the constructor and the
        number of bins in the current hash table, to compute the bin index of
        any given key.
      Remember to compute the absolute value of the hash function (which can
        return a negative result) and use the remainder operator (%) to
        ensure a bin index in the range [0,bins).
  
  LN* find_key (int bin, const KEY& key) const;
      This method attempts to find the LN storing key in the
         bin index of a hash table: if successful it returns a pointer
         to that LN (possibly to examine or update its associated value);
         if unsuccessful it returns nullptr.
      The caller of this function will determine what to do with the pointer
         returned.
  
  bool find_value (const T& value) const;
      This method traverses all the LNs in all the bins in a hash table
        attempting to to find any LN storing value: if successful
        it returns true; if unsuccessful it returns false.
  
  LN* copy_list(LN* l) const;
      This method copies a linked list (which is a bin; actually, the values in
        the list can  occur in any order), including the trailer node.
      It is called by copy_hash_table.
  
  LN** copy_hash_table(LN** ht, int bins) const;
      This method copies an entire hash table, by allocating space for the
        bins and then copying the list nodes in each bin.
      It does not need to rehash/call hash_compress.
  
  void ensure_load_factor(int new_used);
      This method ensures that a hash table with new_used values
        does not exceed the load factor (based on this value and the number of
        bins currently in the hash table).
      If this ratio (compute it with doubles) would exceed the load
        factor threshold, it creates a new hash table with twice the number of
        bins and puts all the values in the original hash table into the new
        one (which requires rehashing each, since compression using a new
        number of bins can produce a different bin index from
        hash_compress).
      
      To be efficient, you must reuse all the LN objects for the values
        in the original hash table, rather than deallocating and creating a new
        LN for each value.
      In such a case you can still create new trailers for all the bins in the
        new hash table, and ultimately deallocate all trailers in the original
        hash table.
      
      We typically call this method before adding a key->value to the map
        (and do not call it when changing the value associate with a key);
        remember that calling this method can change how hash_compress
        computes values in the future, because the number of bins might change.
  
  void  delete_hash_table(LN**& ht, int bins);
      This method deletes every LN used in the hash table (including
        trailer nodes), and then deletes the hash table array itself.


I have defined for all these methods in hash_map.hpp.
I suggest examining code in the array_map.hpp or bst_map files to
  help you understand some of the bookkeeping requirements of these methods.
Pay close attention to ensure all instance variables receive values in
  the constructors and are used/set correctly in queries and commands.

Iterators:
We return to simpl-ish/efficient iterators for hash tables (made even more
  simple by using trailer lists).
Note that map iterators produce Entrys, which are defined by 
  typedef ics::pair<KEY,T> Entry;
Here are some useful to know/use properties of cursors in hash tables.

We represent a cursor by ics::pair of cursors: where
  first is the bin index of the cursor and second points to an
  LN in the trailer linked-list in that bin index.
We represent the "end" cursor for a hash table with first as
  -1 and second as nullptr: special values for each part
  of the cursor.


The "begin" cursor in an empty hash table is the same as the
  "end" cursor.
The "begin" cursor in a non-empty hash table stores in
  first the index of the first bin whose linked-list stores more than
  just a trailer node, and stores in second a pointer to the first
  LN in that linked-list.


We advance a non-"end" cursor by moving its second to the next
  LN in the linked-list, but if that is the trailer node, by moving to
  higher bin indexes until we either (a) find a bin whose linked-list stores
  more than just a trailer node or (b) run out of bins to check.
For (a) we used that bin index and a pointer to the first LN in that
  bin's linked-list; for (b) we use an "end" cursor: -1 and
  nullptr.
I declared an advance_cursors helper method in Iterator to help
  peform this operation (which can even be used to compute the "begin"
  cursor for a hash table).


Finally, the iterator's erase method leverages the simple code to remove
  an LN from trailer linked-list.
It also must update various bookkeeping instance variables and of course
  actually delete/recycle the LN that is removed.

This approach makes the iterators fairly easy to write and efficient to use:
  construction/methods/operations are all O(1) and require L(1) extra space.

Feel free to question/discuss iterators for HashMap on the
  message boards, so long as no code is posted or described in too much detail.










Sets (15 pts)
Not much to say here.
Take all that you learned about the hash table implementation of map and apply
  it to the implementation of set.
I reused (copy/pasted/updated) all the helper methods discussed above.
For the actual set constructors and methods, I wrote similar code.
The main difference between maps and sets is that "values" in maps are
  key->value pairs and "values" in sets are just single values.






wordgenerator (5 pts)
The download contains the file wordgenerator.cpp: my solution to the 
  last part of Programming Assignment #1 (which also times itself running for
  building the corpus and creating a priority queue of its values in order).
It also contains wghuck.txt: the text, appropriately formated, of 
  Mark Twain's book, "The Adventures of Huckleberry Finn".
For this part of the assignment, you must alter the #includes and
  any typedefs and code in this program, so that it uses the improved
  data type implementations: HashMap and HashSet) instead of the
  "high-complexity" (effciency) simple array versions of these data types.

In the comment at the bottom of this program, fill in the running times
  produced by the program
 (see the output line starting
  read_corpus time = and print_corpus (sort not print) time =)
  using one version with HashMap and the standard ArraySet, and
  then with the HashMap and HashSet (if you finish it).
Furthermore, vriefly explain after writing these times what is interesting
  about them (and why it occurs).
Use an order statistic of 2.







Testing
There are various ways to test each of the classes you are writing in this
  programming assignment.
First, though, you should write all the methods, paying careful attention to
  the array implementations and previously written linked list implementations.
For some, you might just boiler-plate simple code that is not correct, but
  allows the methods to compile, allowing other methods in the classes to be
  tested.

The easiest way to start testing//debugging is by using the driver program.
It allows you to perform any method call supported by the templated classes,
  and see the state of the class (or view the debugger).
Of course, 
you must get the insertion (<<) operator and str() method to
  work before using it to debug the other methods.

After you debug your code with the driver, try running the appropriate
  GoogleTest code.
Again, this form of testing is useful only as you approach a finished solution.
We will use the GoogleTest, and visual inspection, to grade this
  assignment.
Important Note: You can put std::cout statements in the GoogleTest
  code (but don't accidentally remove any of the assertions, otherwise
  you won't be fully checking your code the way we will) while you are
  debugging your classes.
All debugging std::cout should end in std::endl to flush the
  output stream: ensure the output it displayed before executing the next
  statement

When you run the GoogleTest, choose small values for the first and
  third prompts (just press return to the second prompt) or comment-out these
  prompts and assign small values to these variables instead.
Besides an indication of which tests pass and fail, the console window
  will show a speed for the speed test (which will vary depending on how
  fast a machine you run your code on): don't worry about it.
When your code is passing all the tests, put in values like 10,000 for these
  prompts.

Finally, Eclipse shows errors in files that use of std::hash, but we can
  still compile, link and run these files.
So the drivers for map and set each show one error and the GoogleTest for map 
  and set show two errors and syntax errors for each TEST; again, we can still
  run all these programs.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/lectures/overview/index.html
##-----------------TITLE------------------------##
Overview
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/assignments/program0/program.html
##-----------------TITLE------------------------##
Program 0
##------------------TEXT------------------------##
Program 0
Learning to Use Eclipse/C++, Course Libraries,
    GoogleTest, and Checkmate

ICS-46: Data Structure Implementation and Analysis









Introduction
This "programming assignment" is designed to ensure that you know how to
  use -at least in a cookbook way-
  Eclipse (for editing, running, and debugging C++ programs, after
    installing the course library),
 GoogleTest (and driver programs, for testing and locating errors in
    code), and Checkmate for submitting programs for grading.

You will start this programming assignment similarly to others this quarter.
First, in Eclipse you will Copy/Paste the empty project folder,
      and rename it to program0 in the Project Explorer window.

Second you will download and unzip the Eclipse Start Project Folder
      specified below (it will unzip into the folder program0).

Third you will copy all the files from the unzipped program0 folder
      int the program0 folder in the Project Explorer window.

Fourth, you will individually uncomment (only one is uncommented at a
     time) compile-build and run the driver.cpp program and the
     test_queue.cpp program that are now in the src folder:
     my code has a deliberate error that you will find and fix.

Fifth, when you have corrected the program, you will submit its
      .hpp file using the Checkmate submission system.

For all later assignments, I will not be providing as much code as I do in
  this assignment, because the focus of this assignment is using tools,
  not writing code; the focus of the later assignments is writing code
 using the tools that you will learn in this assignment.
But that assumes that you learn how to use these tools now.
There is actually just one error in this code, and this write-up will
  detail where it is and how to fix it.
So the purpose of this assignment is not to fix the error, but instead to become
  familiar with the tools you will use throughout the quarter to find and fix
  your own errors.

You may want to print this document and carefully read it, marking any parts
  that contain important information (for review, before you submit the file);
  you might want to save the copy you marked-up.
Please report any major problems on the Programming Assignments message
  board (and any minor problems, like typos, to me).
I expect you to read this entire document and perform all the operations it
  describes...maybe even more than once to better learn the tools covered.







Download and Unzip
Download (onto your desktop) and unzip the following 
  Eclipse Start Project Folder.
Generally if you right-click the .zip file, one of
  the options available will unzip the file: Izarc
  and WinZip are two common programs, both further
  specify an Extract [to] Here option.
If you have any problems ask one of the staff for help.

The resulting unzipped folder contains a src folder (as
  all Eclipse/C++ projects do) in which are nested the .hpp and
  .cpp files for the programming project.
This project contans five files.
The src folder contains four files.
The linear_array_queue.hpp file implements a queue data type
       (but with one bug).
  The driver.cpp and driver_queue.hpp files, which we use
        to test drive the LinearArrayQueue
  The test_queue.cpp file which contains a GoogleTest for any
        implementation of a queue.

In driver_queue.hpp and test_queue.hpp the two lines
          #include "linear_array_queue.hpp"
  typedef ics::LinearArrayQueue<std::string> QueueType;
choose the linear array queue implementation to test.
The standard ArrayQueue in the courselib uses a circular array
  implementation.

There is also a file named loadq.txt, outside the src folder,
  which is used with the lf command in the driver.








Start Eclipse, Create a C++
                    Project, and Configure
                    Eclipse to use the courselib
Next you need to start Eclipse and create a project using the project folder
  you just downloaded.
Make a copy of the project folder already in Eclipse's Project
  Explorer, and rename it appropriately for this assignment (say,
  program0).
This project folder should now refer to the courselib and 
  googletestlib project folders.

Copy the four files in the src folder of the downloaded/unzipped
   project into the src folder in the  program0 project; copy the 
   loadq.txt file into the top level of the program0 project.


The LinearArrayQueue file in this project defines an almost correct
  class that implements the behavior of a queue data type: it is a simpler to
  understand but less efficient version of the ArrayQueue class supplied
  in the courselib.
You will be implementing lots of (abstract) data types, like this one, during
  the quarter.
A queue is a simple FIFO data type, adhering to the First-in First-out ordering
  property.
Queues enqueue values to their rear and dequeue values from their front, so
  these are the two "hot spots" that must be efficiently accessed in any data
  structure that implements a queue.

We can implement the queues data type efficiently by using either an array or
  linked list data structure.
The queue type implementation in this programming assignment,
  LinearArrayQueue, declares the required instance variables and needed
  methods using an array data structure: the front of the queue is always
  stored at index 0; the rear is stored at a higher index in the array.
Using a linear array is conceptually simple to understand and program,
  but it has a slower-than-necessary dequeue operation (when compared
  with using a circular array data structure used in the ArrayQueue
  class, which we will discuss later in lecture): it always requires
  looping through an array, copying each element to its previous index.
When all the necessary libraries are installed, this class compiles and can
  be tested in the driver and via GoogleTest; but the code is not correct, so
  it results in a few execution/run-time errors.






Interlude: Cloning a File
When editing a large file (like the implementations of data types) it is useful
  to view/edit two different parts of the file at the same time.
We can accomplish this in Eclipse as follows.
Edit a file.
Click the Windows menu (to the left of Help), hover over
     Editor and Clone (as illustrated below).



Left-Press on the second Editor tab for the file, then drag it down until
      you see the following screen partition (with one file above/below the
      other), and release the left button.
    You can also arrange these windows in a left-right configuration.



You will now see two independent views of the same file, each of which you
      can examine or edit: editing one changes both.
    You can click the X to remove either tab (or do it twice to remove both).














Run the Driver
Each data type that we will discuss this quarter has a "driver" program that
  allows us to "drive it": to call (test) each of its methods and observe the
  results.
The driver for queues is in the class named DriverQueue stored in the
  driver_queue.hpp file in the src folder in courselib.

To run this driver program on the LinearArrayQueue I have already done
  the following in the driver_queue.hpp file; but you will have to do something
  similar in later projects, so carefully observe what I did here. 
I copied the driver_queue.hpp file from the src folder in
        courselib for this project.
  
  In the driver_queue.hpp file, I changed the #include in
      line 9 from
        #include "array_queue_.hpp"
      to
        #include "linear_array_queue_.hpp"
  In the driver_queue.hpp file, I changed the typedef in line
      14 from
        typedef ics::ArrayQueue<std::string> QueueType;
      to
        typedef ics::LinearArrayQueue<std::string> QueueType;
  In the driver.cpp file, ensure that the #include on line 1 
        refers to "driver_queue.hpp" and ensure the definition on
        line 4 refers to ics::DriverQueue d;

When a file name appears in your project's src folder and also in
the courselib's src folder (as driver_queue.hpp does), the
  one appearing in the project will be the one used.

Because I already made all these changes in the downloaded project folder,
  just build and run this program: the main in driver.cpp
  constructs a driver_queue object that tests the
   LinearArrayQueue implementation of a queue data type.

The program should now start running in the Console tab at the bottom
  of Eclipse.
The console window will display the queue being manipulated (now empty)
 and the following menu of options that you can use to call/test each queue
 method.





Note that this driver tests a queue that stores std::string values.
You must enter a string to test any Mutator (Command) or Accessor (Query)
  method.
Of special note is the it command, which constructs and tests an explicit
  iterator for this queue: it has its own submenu of options applicable
  to iterators (which are the same for every data type).

Note that the queue being manipulated prints before the menu using its
  .str() query, that starts with the data type (here queue)
  followed by the enqueued values in brackets (separated by commas).
Afterwards are all the data members in the implementing class and their values.
In an LinearArrayQueue...
...the length is the physical length of its array.
  ...the used is the number of array indexes containing values
        (always length).
  ...the mod_count counts the number of modifications made to the
        queue since its construction.

The < command shows the data type view: just queue[]:rear,
  which shows the data type view of the the queue; whereas the .str()
  call (shown above the menu) produces more detailed information about the
  implementation, which is often useful for debugging the implementation.

Issue the m, s, and p commands to query the state of
  the empty queue.
The driver should show the following.





The peek method returns a reference to the queue's first value (which
  the driver prints); but it cannot work correctly on an empty queue.
Notice what is printed instead: the thrown exception
  (EmptyError) and the Class::method that raised the error.
Thus, the driver just ignores this command and we can continue driving the
  other methods in the LinearArrayQueue class.

Next issue the e command and enqueue test1 when prompted.
This method returns the number of values enqueued to the queue
  (for queues, which can contain duplicate values, it always returns
  1; for sets, which cannot contain duplicate values, this method
  may return 0 if the value is already in the set).
The queue now prints (using .str(), before the next menu) as
queue q = queue[0:test1](length=1,used=1,mod_count=1)
which shows...
...the queue now contains at index 0 the value test1.
  ...the length of the array holding the queue values has increased to
        1.
  ...the queue is using 1 value in the array.
  ...the queue has been mutated 1 time since being constructed:
        the previous accessors/queries are not counted because they do not
        change the queue.


Next issue the e command again and enqueue test2 when prompted.
The queue now prints (before the next menu) as
queue q = LinearArrayQueue[0:test1,1:test2](length=2,used=2,mod_count=2)
Order is important in queues: the earlier a value is enqueued, the earlier it
  appears in the array.
Notice that both length and used increase to 2.

Next issue the e command again and enqueue test3 when prompted.
The queue now prints (before the next menu) as
queue q = LinearArrayQueue[0:test1,1:test2,2:test3,3:](length=4,used=3,mod_count=3)
Notice that length increases to 4 while used and
  mod_count both increase to 3: generally if there is not enough
  room in an array, its length is doubled, not just
  incremented by 1: we will discuss why later in the quarter, when we
  analyze the running time of performing N enqueues.
The driver should show the following.






Next issue the d command which should dequeue the value at the front of
  the queue.
It correctly prints dequeue = test1, but when it prints the queue
  before the next menu, it appears as
queue q = LinearArrayQueue[0:test2,1:test3,2:test3,3:](length=4,used=3,mod_count=4)
This result is incorrect because (a) used is still 3.
It is OK that test3 now appears in two different queue/array locations
  (it was shifted one to the left, but still appears at the end).
If used were 2, index 2 would not be considered to be in
  the queue.
In fact, if you issue the << command it will show as
queue[test2,test3,test3]:rear, indicating (incorrectly) that test3
  appears in the queue twice.

If you issue the d command again, it correctly prints
  dequeue = test2 but used remains 3 and now test3
  appears in all three positions in the array.
In fact, if you issue the << command it will show as
queue[test3,test3,test3]:rear, indicating (incorrectly) that test3
  appears in the queue three times.

If you issue the d command again, it correctly prints
  dequeue = test3 but used remains 3.

Notice that mod_count (correctly) increases to 6, because each
  dequeue modifies the queue.

Next issue the s command, and the driver prints 3: although we
  have dequeued all three values, because of the error the queue thinks its
  size is still 3.

Next issue the x command (whose clear method is void and
  returns -and the driver prints- no result).
It will correctly clear the queue, which prints before the final menu as
queue q = LinearArrayQueue[0:test3,1:test3,2:test3,3:](length=4,used=0,mod_count=7)
Notice that mod_count (correctly) increases to 7, because
  clear modifies the queue.
Also notice that used is now 0.
In fact, if you issue the << command it will show as
queue[]:rear, indicating (correctly) that there are no values in the
  queue.






So, using this driver, we can call/test all the methods in the
  LinearArrayQueue class, looking for incorrect behavior.

If we see errors in the output, to help us debug any errors that we find we 
  can...
...add code in the driver (to print intermediate results) and rerun it.
  ...add code in the LinearArrayQueue (to print intermediate results)
          and rerun the driver.
  ...use the debugger to set breakpoints in our methods and execute/step
       through the code while observing how it changes its state 

A later section of this document illustrates using the driver with the debugger.
For now, continue to explore and experiment with the other commands in this
 driver, and DO NOT fix the error in delete yet.
The lf command allows quickly enqueuing a series of values read from
  a file (the default it loadq.txt, which is included with this project).
Try the it commands to better understand what we can do with iterators
  (especially how to erase selected values inside the queue).

If you ever find your program in an infinite loop, you can terminate the
  program manually by clicking the red-square Terminate button
   the top-left icon on the console window.
Then you can click the gray X or Xx icon 
  to clear the the console (to the right of the red square).
I suggest always terminating a program before running it again.

To rerun the driver after editing any of these files, click the right-pointing
  triangle icon .
When Eclipse builds a project it compiles all its files.
When Eclipse runs a project it links these compiled files and the
  code in configured libraries and runs the single main function it
  finds (if it finds none or more than one, it will report an error).
So we can build but not run the courselib project because it is a
  library and has no main method to run.







Run the GoogleTest Unit Test
Each data type that we will discuss this quarter also has a GoogleTest for
  testing any/all of its implementations.
While a driver for a class is code that allows us to manually test its methods
  and observe their results, a GoogleTest is code that automatically tests the
  class and report its results.
It produces output to show clearly which tests passed and which tests failed;
  and for the failed tests, it produces more detailed information about how the
  test failed.
When the code is modified (hopefully corrected), it is very easy to rerun all
  the tests automatically and observe the changes (hopefully more/all tests are
  now passing).

To run the GoogleTest program, uncomment the main function at the bottom
   of the test_queue.cpp file (actually uncomment the entire file).
Likewise we must comment-out the main function in the
   driver.cpp file (actually comment-out the entire file).
Only one main function can exist in a C++ project, because there
  can be only one starting point for the program being run.

Before running this project, examine the code in the test_queue.cpp file.
It consists of 12 separate tests, each which should be readable and
  understandable if you understand what queues are about.
The actual GoogleTest for implementations of Queue data types is longer; but we
  use a smaller/simpler file for this project.

Now run the GoogleTest.
The result is illustrated below.
Check the bottom of GoogleTest's output first
It summarizes the number of passed tests and names the failed tests: you can
  examine these failed tests in more detail, if they are present.





Failure Modes

There are two major failure modes detectable in each GoogleTest.
An assertion failure in a test means that the code being tested did not
        meet its requirements.
      GoogleTest will print useful information about the failure (just what it
        prints is based on what kind of assertion failed).
      In the figure above, both the dequeue1 and dequeue2 tests
        failed (on lines 221 and 232 respectively); the assertions concerned
        truth values for calling the q.empty() and q.size()
        methods, whose different Actual and Expected values are
        shown.
  
  An exception failure in a test means that the code being tested threw an
       exception.
      GoogleTest will print information about the exception (although often
        it just states an unexpected exception was thrown..
      In the figure above, no unexpected exceptions were thrown.
  

In addition, there are two failure modes NOT detectable/reportable in a
  GoogleTest.
An infinite loop: In such a case GoogleTest will stop printing
         information in the console after starting to run a test.
     If the enqueue test caused an infinite loop, the console might look
       as follows.



If you ever find your program in an infinite loop, you can terminate the
  program manually by clicking the Red Square on the top of the console
  window (the leftmost icon).
Then you can click the X or Xx icons (to the right of the Red Square) to clear
  the the console.
In such a case, you would have to manually stop the program as described above
  (clicking the Red Square in the Console window).
In the console with the original test, the Red Square is grayed-out, because
  the GoogleTest has already terminated.
Certain kinds of executions errors (e.g., accessing illegal memory).
In these cases, the program will stop executing the GoogleTest.
On Windows, a box like the following will pop-up; we must click
  "Close the program".





In either of these cases, you have a choice of either
commenting-out the test code running when the error occurred
        (so GoogleTest won't run this test, but will run subsequent tests)
  keeping this test and immediately debugging the code that is causing it
        to fail.

If you choose the former, remember to uncomment the test code eventually to
  ensure that your code is passing all the GoogleTests, including this one.

Debugging Strategies

Here is a short but important list of four stategies that we can employ
  when our code fails, to try to understand the cause of the problem (and then
  hopefully correct it).
First, examine the line of code in the test at which the failure was detected
  (which is printed in the console) and the information it displays related to
  the failure.
Seaching the code for a mistake using the failure information as a guide.
  Add arbitrary C++ code in the GoogleTest to print useful information.
  Use the debugger to set a breakpoint before the failed assertion, 
        and then examine any relevant state.
   Use the driver to duplicate/explore the problem manually.


GoogleTests

Generally, each public method has its own GoogleTest, reflecting the
  semantics (meaning) of what that method does in the class (sometimes needing
  to call other methods too).
It is good to be able to read and understand the GoogleTest code (and you will
  get more experience doing so during the quarter) because it can be useful to
  add debugging code to it: typically printing the state of variables just
  before a test/assertion failed.
Mostly GoogleTest code intersperses calls to the methods of the class being
  tested with assertions about what the results of those method-calls should
  be: a test method fails when any assertions in it fail.

The tests are peformed in the order in which they appear.
I try to arrange my tests from the simple to the more complex.
Sometimes bugs causing failures in the earlier tests also cause failures in
  the later ones.
So an important debugging strategy is to concentrate on -and correct- the
  earlier bugs: at best the later bugs might automatically disappear; at worst
  it will be easier to understand/correct the later/more complicated bugs after
  you have understood/corrected the earlier/simpler ones.

Also note that each test is abandoned when the first assertion fails; it 
  doesn't test subsequent assertions in that test method
  (but GoogleTest will still attempt to do all other test functions
  after any detectable failure).
This strategy leads to two interesting consequences
The output is not cluttered with multiple failure messages for
        multiple assertions in each test: instead each test either passes or
        fails; and if it fails, it presents details about only the first
        failure.
  
  Expect that a test might still fail after you make corrections to your
        code; but the correction should cause a failure later in the test:
        e.g., an earlier assertion in the test that failed should now pass,
        even if later assertions (which were not reached because of the earlier
        failure) now are tested and fail.

Plan on reducing the failures one at a time, until none are present.

Debugging Startegy Examples

Here we will examine the four strategies for debugging stated above.
The first failure was on line 221 in the dequeue1 test.
The entire test appears as follows, with its line numbers.
  213 TEST_F(QueueTest, dequeue1) {
  214   QueueType q;
  215   load(q,"abcde");
  216   ASSERT_EQ("a",q.dequeue());
  217   ASSERT_EQ("b",q.dequeue());
  218   ASSERT_EQ("c",q.dequeue());
  219   ASSERT_EQ("d",q.dequeue());
  220   ASSERT_EQ("e",q.dequeue());
  221   ASSERT_TRUE(q.empty());
  222   ASSERT_EQ(0, q.size());
  223   ASSERT_THROW(q.peek(),ics::EmptyError);
  224 }
The error states that the queue was expected to be empty but it was not.
Our first stategy would be just to look at the code in the
      LinearArrayQueue class.
    We will see that the the empty method returns false when
      used is not 0.
    We will also see that used is initialized to 0, and if we
      enqueue five values (what load(q,"abcde"); does)
      and then dequeue five values it should return to  0.
    Since the enqueue test worked, we can focuse on the dequeue
       method to learn why used was not decremented to 0.


Our second stategy would be to add some code in the dequeue1 test to
      help us understand why the empty method returns false.
    We could, for example, print the size and even the queue itself (using the
      more verbose .str() function), using the  following code.
    std::cout << "in deqeue1: size = " << q.size() << ", queue = " << q.str() << std::endl;
    I highly recommend putting textual material in these debugging displays, to
      identify them: as we put more and more debugging displays into a program
      (which we typically do when debugging) they can become confusing.
    If we put this code right before the line 221 it would display
    in deqeue1: size = 5, queue = queue[e,e,e,e,e]:rear(length=8,used=5,mod_count=10)
    The queue is supposed to be empty, but its used is 5.
    It might be useful to put this statement after the call to
    load and after each call to dequeue() to observe how
    used changes (in fact, it doesn't).
    Doing so would produce the following ouput.

in deqeue1: size = 5, queue = queue[a,b,c,d,e]:rear(length=8,used=5,mod_count=5)
in deqeue1: size = 5, queue = queue[b,c,d,e,e]:rear(length=8,used=5,mod_count=6)
in deqeue1: size = 5, queue = queue[c,d,e,e,e]:rear(length=8,used=5,mod_count=7)
in deqeue1: size = 5, queue = queue[d,e,e,e,e]:rear(length=8,used=5,mod_count=8)
in deqeue1: size = 5, queue = queue[e,e,e,e,e]:rear(length=8,used=5,mod_count=9)
in deqeue1: size = 5, queue = queue[e,e,e,e,e]:rear(length=8,used=5,mod_count=10)

Our third strategy is to use the debugger to set a breakpoint before the
      failed assertion, and then examine relevant state.
    The debugger in Eclipse/C++ operates similarly to the Eclipse/Python.
    We can set unconditional and conditional breakpoints, single step (into,
      over, and out of) code, observe the values of global and local variables.
    Experiment with the debugger until you know how to use it to perform common
      debugging tasks (like those indicated below).
    
    Try these steps.
    Set an unconditional breakpoint on line 221; recall that when a line
             has a breakpoint, execution stops before the line is
             executed.
       Launch the debugger by clicking the bug icon 
             .
           When the Confirm Perspective Switch popup window appears,
             click Yes: it will switch from the C++ perpsective
             to the debug perspective.
       Click the resume icon  to start
             execution of the GoogleTest program.
       The debugger stops the program before executing line 221 and shows
             the following
           
           .
           
           Note that used is 5, which is why the empty
             method returns false.
       We could investigate the dequeue method by setting a
             breakpoint earlier, on line 216; and then when that line is
             reached, we could click the step over icon
             ,
             and observe (by lack of yellow highlighting) that the executing the
             dequeue method did not change the used instance
             variable (not that mod_count is changed: incremented by 1).
           
           .
           
       We could investigate the dequeue method in more detail, by
              clicking the step into icon
               and single stepping
              through this method, watching the results of executing each of
              its statements.
       For now, just terminate the debugger and return to the C/C++
             perspective
    


Our fourth strategy would be to use the driver to duplicate/explore the
      problem manually.
    Actually in our discussion of the driver we saw that when we enqueued
      three values and dequeued all three, the result was a queue whose
      used was still 3, with the last enqueued values stored in
      all indexes.


In fact, both test failures relate to a single bug: the used variable
  was not decremented in the dequeue method: I commented-out the code
  at line 221 of the linear_array_queue.hpp file.
Remember that sometimes fixing one bug will cause many failed tests to pass.

Restore this line of code (uncomment it) to fix the error.
Now rerun this GoogleTest and verify that there are no more failures.
The bottom of the Console window should show

.

Both errors and failures indicate that the code is incorrect and should be
  fixed.
Of course, we must be careful because it is possible that an assertion is
  incorrect: e.g., an assertion asserts the size of the queue is some number
  but based on the enqueue/dequeue methods called in the
  GoogleTest it should be some other number.
While you should mostly believe the GoogleTests I distribute, there is always
  the possibility that I have made a mistake.
If you look closely at a GoogleTest and don't understand why some failing
  assertion should be true, please contact me or one of the staff to resolve
  the problem.










Submit the Program for Grading via Checkmate
After you have fixed the code and verified that it works correctly via the
  Driver and the GoogleTest, you should submit the code for grading via
  Checkmate.
If you are unfamiliar with this system, read the
  
    Submitting Homework Using Checkmate document.
It explains how to submit programs, even if you are not officially registered
  in the class yet.

You are responsible for submtting the correct version of your code.








Final Words
You are also responsible for backing up your work frequently.

Whenever you have updated your code (and when you have finished an assignment)
  you should backup/save the entire project folder on a USB drive (or in some
  data cloud).
Even if you are using your own computer, you should still backup your work.
Probably it is best to zip the entire project folder (which makes it smaller
  and also speeds up copying -which depends as much on how many files you
  copy as on the size of the files).
If you are on a lab machine, you can also backup/save this zipped project
  folder on your Unix file space.

If you need to restore a project folder, follow these steps.
Unzip the project folder.
  Delete its .cproject and .project file.
  Delete its .settings and Debug folders.
  Recreate the project and configure all its libraries.


Practice doing everything in this lab over and again, until you are familiar
  with all these skills and can do them without reading the directions.
You will save yourself much time later in the quarter (when time is really
  important) if you spend some time now (when things aren't so rushed)
  mastering this material.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/handouts/syllabus/syllabus.html
##-----------------TITLE------------------------##
Syllabus
##------------------TEXT------------------------##
Syllabus

ICS-46: Data Implementation and Analysis









Introduction
This page contains material that will be important and useful throughout 
  the entire quarter.
I consider it a contract with my students.
Please read it once now, and keep it handy for future reference.
You can search this page in your browser for specific information by 
  typing Ctrl F or selecting
       Edit | Find on this page (Windows IE) or
       Edit | Find in This Page... (Firefox), then entering
  the text that you want to locate.
Many questions that you might have about this course during the quarter are
  already answered inside this document (so become familiar with its contents).
It also contains lots of good advice on getting the most out of this course.








Catalog Description
"Focuses on implementation and mathematical analysis of fundamental data
     structures and algorithms.
   Covers storage allocation and memory management techniques.
   Prerequisite: CSE 45C or I&C SCI 45C or I&C SCI 65.
   CSE 45C with a grade of C or better.
   I&C SCI 45C with a grade of C or better.
   I&C SCI 65 with a grade of C or better.
   Same as CSE-46."











Course Philosophy
  My goal in ICS-46 is for students to acquire fluency in thinking about,
  discussing, and writing programs in C++ using appropriate abstractions.
Specifically, there are four major pillars:
Demonstrate skill solving problems/programming with Data Types: C++
     template classes, specifically the ICS46 Template Library, which includes
     the abstractions Stack, Queue, Priority Queue,
     Set, Map (and eventually EquivalenceClass and
     Graph), including their iterators.

Demonstrate skill at using low-level C++ Data Structures (primarily
      arrays, self-referential linked structures, and combinations of these)
      to implement these Data Types correctly and efficiently.

Understand O (big oh), Ω (big Omega), and Θ (big Theta)
      notation, and demonstrate the ability to use these notations to analyze
      implementations of template classes (both analytically and
      empirically), and understand the usefulness and limits of these
      notations.

Understand C++ and general programming ideas that aid in 1-2:
    abstract classes, virtual functions, inheritance, recursion, hashing,
    caching, the decorator pattern, etc. 

We will spend the first few weeks of the quarter exploring the properties of
  template classes: using them to write programs, studying simple array
  implementations,  and eventually implementing some using linked lists.
Afterward we will learn about more advanced data structures and how to use them
  to implement the more complicated data types efficiently.

This course emphasizes Object Oriented Programming (OOP).
The foundational unit of OOP is the class: a syntactic structure that
  describes and encapsulates both the behavior (methods implemented by control
  structures) and state (fields implementing data structures) of objects.
Classes provide an excellent motivation and context for exploring most
  interesting aspects of programming.
We can view software as a collection of interacting objects (which are
   constructed from classes; often with many objects constructed from
   the same class).
In C++, classes defintions are split into .hpp and .cpp files;
but templated classes (the ones we will mostly use/write) have just .hpp
  files, which are split into declaration and definition parts.

The main programming methodology that we will learn and employ is TDD
   (test-driven development).
We will use Drivers and GoogleTest to test our code; with
  GoogleTest unit tests, we can automatically test code (and retest it
  when we make changes, until it is passes all the tests: meaning it may be
  correct or the tests might be insufficient to expose errors).

Programming style is a particularly important topic: to understand
  programming, we really need to develop appropriate aesthetics that allow
  us to separate "elegant" programs from "hacks".
As in any writing activity, we must also learn to be self-critical of our own
  creations, so that we can continually improve them; this skill is difficult
  to acquire, and its importance extends well beyond the domain of
  programming.

Finally, to become an expert in any discipline, we must master its
   terminology.
Fluency with technical terms allows us to communicate -and even to think-
   more accurately and concisely.
Therefore, the materials in this course will define, illustrate, and
   repeatedly use many important technical terms concerning programming.
Take the time required to master them. An old Chinese proverb says,
     "The first step towards wisdom is calling things by their right names." 








Textbook(recommended)
The primary materials for this course will come from lectures and from my
  notes on the lectures.
I encourage students to use Google to help you learn and understand any
  C++ features that you need to learn.

I will assume that you have a book equivalent to the text for ICS-45C,
  which covers the fundamentals of C++ (and quite a few advanced topics as
  well).

  
  Savitch,
      Absolute C++ (5th Edition),
      Pearson
       (about $130: new at Amazon/used at the Anthill).
  

Here are two good data structures books in C++. 

  
  Goodrich and Tamassia,
      Data Structures & Algorithms in C++, Second Edition (2011),
      Wiley,
       (about $105: new at Amazon).
  
  Weiss,
      Data Structures & Algorithm Analysis in C++, Fourth Edition (2013),
      Prentice Hall
       (about $120: new at Amazon).
  

See 
  DirectTextbook, which crawls the web for cheaper prices.
Don't forget to account for shipping costs and delivery time.
Amazon often list used copies of both books cheaper.








Computing Platforms and Programming Environments
The standard computing platforms for this course are
  Intel-based PCs running the Windows Operating System (OS).
    Macintosh PCs running the Mac OS operating system
    Either PC running Linux.
  

Programming courses at most schools are moving towards a model in which most
  students use their own computers (or those of their roommates or friends) to
  complete their programming assignments.
All the software used in ICS-46 is available, for free, on the web.
We are assuming that students have already installed a web browser, and have a
  high-speed connection to the World-Wide Web: e.g., via the campus network,
  or by cable, or a DSL line, or just WiFi.
  
The programming environment that we will use is Eclipse: it is an Integrated
  Development Environment (IDE), including a project manager, editor, compiler,
  debugger, class browser, help facility, etc.
We will also use the GNU C++ compiler and runtime system with this IDE
  (MinGW: Minimum Gnu for Windows).
This software, and others useful for the course, are available through the
  Course Software
  link (see Main Software under the ICS-46 heading).
  
Talk to your instructor or TA immediately if you are experiencing any problems
  with your computing platform.
Typically it takes only a few days before everyone has correctly downloaded and
  installed the necessary software, and learned how to use it properly.
Using this software is integral to every programming assignment during the
  quarter, so it is best to be aggressive and master this software quickly.








Computers:ICS Labs
In addition to using their own machines, students can do their coursework on
  the machines in the ICS Labs,
  which are described on this link and in more detail below.
The main upside of using the ICS labs is that it will be easy to get ICS-46
  staff to help you there; the main downside is that you will not be using
  your own computer -unless you have a portable and bring it to the labs to
  get the best of both worlds.
Read the following to learn about 
  
 ICS Lab Account Activation.

ICS courses often schedule lab hours (to complement lecture hours), during
  which students can learn how to use software tools and work on their
  programming assignments, all under the supervision of ICS-46 staff members.
This quarter, all Labs meet in rooms ICS 189 and ICS 183.
Each of these rooms contains about 45 Dell Optiplex computers running Windows
  7 and all the necessary course software.
These labs are typically open for class use on weekdays, during "normal"
  hours: 8:00am to 8:00pm; and, they are closed on weekends.

The lab in ICS 364 is a general purpose lab in which no courses are
  scheduled.
It is typically open to students on weekdays and weekends during "extended"
   hours:
   MTuWThT 8:00am - 10:pm,
   F 8:00am - 8:00pm,
   and SaSu 12:00pm (noon) - 6:00pm.
You can examine the
  
  Lab Schedules for all these labs.


If you find it inconvenient to use these labs, and would rather work from
  your dorm room or off campus, ICS-46 staff will also provide more limited
  online help through Instant Messaging.
The forums on MessageBoard and also an excellent way to get help.


Finally, although the machines in the ICS labs also provide some external
  storage space (on a Unix system), it is an excellent idea to obtain a USB
  memory stick to backup all the work you do, both on your own computer and
  in our labs.











InstructorOffice Hours
I welcome students (individually, programming partners, or small groups), to
  come by and talk with me during my Office Hours.
If we need to talk, but you cannot come during my office hours, please email
  me so that we can arrange an alternative time to meet; or better yet, maybe
  we even can resolve the entire issue over email (or using the MessageBoard
  Forums, discussed below, where other students can benefit from questions and
  answers).

I will be glad to talk with you about any of the ICS-31/-32/-33/-45C/-46
   courses,  Computer Science, UCI, or whatever else you want to discuss.
Although UCI is a large school, ICS is a smaller school within it, and ICS
  promotes opportunities for close faculty-student interaction, especially
  with instructors who are lecturers.
Unfortunately, in my opinion, not enough students take advantage of this
  opportunity at UCI.

I especially encourage students who are having problems in the course to visit
  me immediately; I know that this is asking a lot, but the payoff for
  recognizing the situation and acting on it immediately is tremendous.
The primary reason that students fail to thrive in programming courses is that
  they fall behind in their work -often because of what is initially a small
  misunderstanding; but, because of the cumulative nature of this course,
  even a small misunderstanding can quickly grow into a big one.
Often, I can quickly diagnose and rectify such a problem one-on-one.
Getting help fast can critically affect your overall performance in
  this course: many times I've seen students start performing one grade
  level higher after coming in to get help during my office hours.

Unfortunately, I teach hundreds of students during a typical quarter, so my
  time is a bit limited.
But, generally I have time during office hours to talk with all the students
  who visit.
So, please come if you need help so we can try to work out your issues/problems.
Of course, you can also talk to your TA and Lab Tutors during your labs, where
  resources and time are not so tight.







InstructorOnline Hours
I hold online hours every day before class/lab meets: Sunday, Monday, Tuesday,
  Wednesday and Thursday  evenings (most programming assignments are due on
  Tuesday evening) from 9:00pm-10:00pm.
I will be logged  onto AIM (AOL Instant Messenger) as richardepattis
  during these times.

If you are not already a member of AIM (or a similar service that can message
  AIM users)  Sign Up for
  this service (it is free).
Using this system, you will be able to Instant Message me.

You can IM me with questions; you can also cut/paste code snippets into your
  message.
Please be aware that I may be having multiple conversations, and therefore
  react more slowly than you might expect.







Instructor/Course EMail
If you have a small question (one requiring little back-and-forth discussion),
  and cannot directly contact me or any of staff, please ask it by sending me
  email (pattis@ics.uci.edu).
It has been my experience that the act of writing a detailed description of a
  problem (detailed enough so that someone not physically present can
  understand it) often leads a student to his/her own solution of the problem.
Frequently, before I even get a chance to read my email, I receive a second
  message saying,  "Please ignore my earlier message, I solved the problem
   myself."
I believe that the seeds of the solution are sown in the act of carefully
  composing the first email message.
Here is quote on my website about this phenomenon


Another effective [debugging] technique is to explain your code to someone
  else.
This will often cause you to explain the bug to yourself.
Sometimes it takes no more than a few sentences, followed by an embarrassed
  "Never mind, I see what's wrong. Sorry to bother you."
This works remarkably well; you can even use non-programmers as listeners.
One university computer center kept a teddy bear near the help desk.
Students with mysterious bugs were required to explain them to the bear before
  they could speak to a human counselor. 
- B. Kernighan & D. Pike
  (in "The Practice of Programming" pp. 123)

Talking about programming is important.
One of the reasons that we program in pairs is to always have someone who you
  can to talk to about your code; unlike the teddy bear, someone who has an
  interest in getting your code to work, and who might supply relevant feedback.

I try to answer email every few hours during the day.
I normally will not answer email sent after about 10:00pm until early the next
  morning (but I'll typically answer it by the next morning).
If you have problems late at night that you cannot resolve, please send me
  email (or post on the relevant MessageBoard Forum) summarizing your problems,
  and then go to work on something else (or if it is really late, go to sleep).
By planning to finish assignments early, you can protect yourself against a big
  problem that arises at night and cannot be fixed until the next day: you
  really don't want to have to fix such a problem the night that an assignment
  is due.

For most problems -ones that are of general interest to the class- I would
  prefer that you ask the question using a MessageBoard Forum (see below).
In this way, everyone in the class can see the question and its answer
  (which I might provide, or a a TA/Lab Tutor, or another student).
One of the few advantages of a big class is having lots of student activity on
  such forums, leading to peer-instruction.

Finally, the Electronic Educational Environment (EEE) at UCI creates and
  maintains course-wide mailing lists.
I have created a "merged" mailing list for all my ICS-46 students (which also
  includes those students signed up for CSE 46, both in the Sammueli School of
  Engineering and the Donald Bren School of Information and Computer Science).
All members of our course (staff and students) can use this mailing list, whose
  email address is ics46-W16@classes.uci.edu
All messages sent via this discussion list are archived: click
    
    here or see the Email Archive link on the course website.
Mostly student-initiated questions/discussions should use the forums mentioned
  below, but sometimes students can use this email list to inform the
  instructor, staff, and other students about some timely issue: e.g., the
  Checkmate Homework Dropoff system not responding to program submissions.







MessageBoard Forums

If you have a question of general interest (of interest to many students in the
  course, not just you), then you should post the question on one of the
  
 Forums on the EEE MessageBoard.
These forums allow students to ask questions (or start discussions) easily, as
  well as supply answers (or participate in the discsussion further).
For example, if a lecture note, programming assignment, etc. contains unclear
  (or even contradictory) information, post a note about it to the appropriate
  forum, asking for a clarification.
I, or someone from my staff will read and reply to whatever questions are
  asked.
In fact, if you read a question on a forum, and know the answer -or generally
  have something to contribute to the topic- I encourage you to to post a reply
  to help resolve the problem even sooner.
Thus, you can use the forums to discuss any course materials out-of-class.

Again, forums are appropriate for questions relevant to most students in the
  course; directly email me (see above) for questions of a more
  individualistic nature.
Obviously students should not use these forums to solicit nor post answers to
  take-home quizzes, programming assignments, or anything else that would be
  interpreted as academic misconduct (which is discussed in greater detail
  below).
But general informational questions and answers are fine.
I often find that students send me individual email when they should be
  posting on a forum; think before you decide which to do.

It is an excellent idea to check these forums frequently, to keep up to date
  on any coursewide discussions.
You can configure the forums to send you an email digest daily, which contains
  links to new/updated postings.
I received such a digest, and typically review and answer all outstanding
  questions early each morning.








Staff: TAs,  Lab Tutors
I will have various UCI graduate and undergraduate staff members to assist me 
 in running this course.
TAs will supervise the labs and be assisted by Lab Tutors.
In labs, the Staff's primary responsibilities are to help you write and debug
  your programs, backfilling C++ material that you might need to know or
  understand better.
You can certainly discus programming and C++ in general with these staff
  members.
TAs will also be responsible for grading programming assignments; if you have
  a question about how your programs are graded, please see the TA first,
  and then come to see me if any issues remain.
TAs will also grade the weekly quizzes and in-lab, midterm, and final exams.

While in lab, the TAs and Tutors will help you diagnose any
  computer/programming problems that you have and guide you toward a solution.
They will help you learn how to program by answering your questions; but, do
  not expect them to write your programs for you.
You should approach them with a well thought-out question, and expect to answer
  questions from them about your state of understanding the issues surrounding
  the question.
Sometimes when you come to the staff with a specific question, they will show
  you how to solve a more general problem.
Be patient; the staff are just trying to teach you how to recognize and solve
  these problems by yourself.








Classroom Information
Before/After Class

I expect students to read the assigned lecture materials, either before class
  (as a way to preview the lecture) or after class (where the lecture previews
  the reading), to get the most out of both: cover the material twice.
Carefully read the lectures and examine the code they contain.
Test and explore this code in Eclipse to verify that you understand the
  material both theoretically and practically.
Here understand means "be able to use the information operationally to
  write code that solve problems".
If you have difficultly with a concept, it indicates that you should probably
  go back over the related reading -or certainly ask a question about it on the
  Forum.
One of the few advantages of a big class like this is the potental for
  peer-teaching.



During Class
I expect students to attend class daily.
During the 35+ years that I have been teaching, I have observed a strong
  correlation between attending class and understanding the material (which 
  ultimately improves student grades).
Having all the course materials online is a great resource, but just as
  important is coming to class -and paying attention, once you are there-
  and participating by volunteering information when you know it and asking
  questions when you are confused.

I will lecture during class, but I prefer discussing the material and answering
  questions; asking you questions about the material, and amplifying on those
  topics that need further discussion.
I expect most "lectures" to be interactive, with students participating.

I encourage you to participate by raising your hand; sometimes I may finish
  the point I'm making before calling on you, but please keep your hand up if
  you want to speak.
If you have a question about the material, it typically means that I have
  explained something incorrectly, poorly, or incompletely, and that other
  students have (or will soon have, maybe right after they leave the classroom)
  the same question.
So, it would be best for all of us to correct the problem immediately in class
  by someone bringing it to my attention.
If you cannot ask in class, post a question later on a MessageBoard Forum.
In summary, this class runs on the Dershowitz principle:
  "Question authority; but raise your hand first".




Class Decorum
I expect students to attend class daily, arriving on time.
The announcements made at the start of class are often very important.
On Wednesdays I will collect quizzes at the start of class.
I expect students to neither carry on private conversations, nor distract
  other students by using their computers to answer email, surf the web, day
  trade stocks, or perform any other activities unrelated to this course.

Ringing cell phones disrupt my lectures.
Unless you are responsible for someone's life, your cell phone should be
  turned off.
Otherwise, you should set it to operate in some silent mode (as mine will be
  set); if it rings silently, please leave the class, with a minimum of
  disruption to the rest of the students, to answer it.
If your cell phone rings audibly in class, you will be asked to leave class
  for that day.
Finally, if you know that you must leave early, please sit near a door,
  so that you can exit quietly and without disturbing the class.

Overall, please strive to be a considerate class member, both to me and to
  your fellow students.









Grades
Quizzes
I will assign eight take-home Quizzes to ensure that everyone is keeping pace
 learning the course material and is able to express themselves on technical
  matters both in English and C++.

These quizzes will be a take-home instrument: most will be distributed at the
  end of class on Friday and collected at the start of lecture on the
  following Wednesday.
During the weekend, you will have as much time as you need to work on the
  quizzes.
If you need clarification on any problems, please email the class discussion
  list or post on a forum (but don't post code).

The quizzes are open-book: you will be able to use any class materials, or any
  other materials from the web, to answer its questions.
The quizzes are also open-computer: by that I mean that you may use a computer
  to check your work.
But, you must work on the quizzes by yourself, not soliciting or sharing
  answers with other students.





Programming Assignments
I will assign five programming assignments to ensure that everyone is
  getting the necessary hands-on programming experience.
While working on these programs, you will acquire a solid and fine-tuned
  understanding of the course material as well as gain important
  process of programming skills.
Programs will typically be discussed and started in some Lab, and then be
  due (submitted electronically) about two weeks later, at 11:30pm.
For a typical programming assignment, you will have 3 lab meetings and 2
  weekends to work on it: expect to spend time out of class finishing these
  assignments.

I encourage students to work in groups of two on programming assignments.
Such an approach is called
  
  Pair Programming.
One student from each pair will submit all parts of the program, with
  both their names and your lab numbers on it (in the code/files).
Apart from your pair, you can get general help from anyone (Instructor,
  TA, Lab Tutors, friends, etc.) on programs.
The best kind of help to get is oral: where you describe the problem, possibly
  showing your code, and then get an oral answer that you understand and can
  translate into code.
In such instances, you are learning. 

You may neither copy nor transcribe (written or orally) any parts of another
    student's program. 

When you submit your programs for grading, you are expected to understand all
  parts of them and have improved your process of programming skills
  while writing and debugging them.

You will submit your solutions to programming assignments through a special
  web page that records the time they are submitted.
To promote good time management skills, if you submit a program at least 24
  hours  before it is due, you will receive 1 point of extra credit.
If you submit a program 48 hours early, you will receive 2 points.
You can gain no more than 2 points of extra credit by early submission.
For an 60 point assignment, this extra credit is equivalent to one third a
  letter grade improvement.

Two weeks is sufficient time to complete these programming assignments.
I know from long teaching experience that students who work ahead of the
  deadlines learn more, in a less stressed envrionment; students working right
  up to a deadline are more concerned with getting the right answer and less
  concerned with learning anything.
So, on the other side of this coin, I will not accept any late programs without
  some kind of prior request (and prior typically doesn't mean the night
  before).
So, you must turn in your work on time: if you turn in a partially working
  program on time, it will receive partial credit; if you do not turn in
  anything on time, then I must assume you did no work on the program, and you
  will receive no credit.
Therefore, always turn in whatever work you have finished by the official due
  time.




Written Exams
I will assign one Midterm Written Exam and one Final Written Exam to
  ensure that everyone is successfully integrating  all the material being
  taught.
Its problems will be similar to those assigned on the weekly quizzes, including
  code, mathematics, English answers, and drawing pictures.
These written exams are closed-book: you will not be able use any notes nor
  class materials while taking these exams.
The mathematics will be simple, and you will not be allowed to use calculators
  (so you will have to know how to compute the logarithms -in base 2- of 
  simple numbers: mostly powers of 1,000.

The best way to study for these exams is to do all the quizzes and 
  programming assignments (sometimes material related to the programming
  assignments appear on these exams) and review these quizzes (and programs).
I expect students to be able to do these problems both quickly and accurately.

The final exam is comprehensive: it will cover material from the entire
  quarter (but concentrate a bit more on material presented after the
  midterm exam).




Solutions andReturned (Graded) Work
I will create a 

  EEE Drop Box for my solutions to all quizzes,
  programming assignments and written/programming exams soon after they are due
  (which is another reason why I accept no late work).
I expect that all students will carefully examine my solutions for immediate
  feedback.
Note that the best time for you to study my solution is the day that I
  distribute it, having just spent a good amount of time working on your own
  solution.
The sooner you examine my solutions, the more receptive you wil be to learning
  something.
Finally, my solutions sometimes contain mistakes: if you are the first person
  to email me a correction, I will award you extra credit points (the same
  number that I would take off for the mistake).

I will strive to return graded quizzes at the next class meeting (after they
   are turned in): since they are typically turned in on Wednesday, I will
   typically return them on the following Monday.
I will strive to return graded programs on Mondays; do not submit new
  programming assignments until you have received feedback on your previous
  assignment.
Finally, I will strive to return written exams within a week of when they are
  given.

Important:
If you believe that I have graded any of your work incorrectly, I encourage you
  to see me immediately about the discrepancy (in the case of programming
  assignments, see the TA first).
Such a discussion can have only positive outcomes: either I will agree with you
  that you deserve more credit (and, I do want you to receive all the credit
  that you are due), or you will better understand why your answer is wrong and
  what the right answer is.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see me.




Final Grades
Your final grade is computed from your 
  quizzes, programming assignments, and written exams as follows.

Instrument#Points EachPoints Total% of Grade
Quizzes82520020%
Programming Assignments1 + 51@0+5@6030030%
Midterm Written Exam120020020%
Final Exam130030030%

Note that 70% of the grade is based on written work and 30% is based on
  programs; looked at another way, about half of the grade is based on
  work done supervised in class (50%) and half is based on work done in an
  unsupervised (take-home) environment (50%).

Based on your percentage, your final grade is computed as follows.

PercentageGradeGradiations90%-100%AA- (<93)80%-  89%BB-(<83)  or   B+(≥87)70%-  79%CC-(<73)  or   C+(≥77)60%-  69%DD-(<63)  or   D+(≥67)  0%-  59%F

Technically, I round your score to an integer and then apply these rules.
So, if your percentage is 86.7%, it is rounded to 87% and therefore results
  in a grade of B+.

This is straight calculation, not based on a curve.
I tend to grade programming assignments liberally, but quizzes and
  written exams conservatively.
As a rule of thumb, I expect about 25% of the student to earn As, about 25% to
  earn Bs, about 25% to earn Cs, and about 25% to earn Ds or Fs.
This course is NOT graded on a curve, so these are only expectations from
  past course performance, not mandated numbers; your numbers can 
  be higher or lower.
FYI: when I last taught ICS-46 in the Winter, the actual breakdown was much
  better:
   38% As, 40% Bs, 15% Cs, and only 7% Ds or Fs.

Only after finishing 4 quizzes, 2 programming assignments, and the midterm exam
  will you have a reasonable indication of your final course grade (which, of
  course, will still heavily depend on the grades you earn afterward).








Academic Integrity
No one comes into a class expecting to cheat, but I would suggest that you
  become familiar Bren School of Information and Computer Sciences
  
  Academic Honesty policy, which is just one of many of the many
  
  Undergraduate Policies with which you should become familiar.

The following information is my own restatement of this policy, as it
  applies in my courses.
You will also be asked to read and sign a handout to acknowledge that you
  understand the
  
  Academic Integrity Contract that applies for this course.




Policy
The decision as to whether a student has cheated depends on the intent of an
  assignment, the ground rules specified by the instructor, and the behavior of
  the student. 
The following two guidelines help an instructor decide whether plagiarism has
   occurred in programming assignment, which is the fuzziest area:
 Plagiarism will be suspected if an assignment that calls for independent
         development and implementation of a program results in two or more 
         solutions so similar that one solution can be converted to the
         other(s) by a series of simple transformations.
   Plagiarism will be suspected if a student who completed an assignment 
         cannot explain both the intricacies of the solution and 
         the techniques used to generate that solution.

It is unreasonable to expect a complete definition of cheating that would cover
  all cases, because each situation is important enough to merit careful,
  individual scrutiny; however, it is helpful to have guidelines and
   precedents.

Here are some examples that are clearly cheating and clearly not cheating.

Examples of CHEATING:
Turning in someone else's work, in whole or in part, as your own (with or
        without his/her knowledge), without it including a statement of
        collaboration in the solution.
  Allowing another student to turn in your work, in whole or in part, as
        his/her own, without it including a statement of collaboration in the
        solution.
  Turning in duplicate solution.
      Even if all the comments are changed, all the variables names are
        changed, all the whitespace is changed, and the code appears in a
        different order: it is still the same program.
  Several students/pairs writing one assignment and turning in multiple
        copies, all represented (implicitly or explicitly) as an individual
        student's/pair's work, without it including a statement of
        collaboration in the solution.
  After receiving graded written work, returning written work, for
        regrading, which has been altered.
  Finding a solution to the same problem on the web and submitting it
        without explicit attribution in the solution; note that you may
        not post problems on the web, seeking a solution.
  Stealing an examination or solution from the instructor.

Generally, you should NOT EXAMINE, by reading hardcopy or by copying a file,
  the program of any other student (nor should you let anyone examine or make
  a copy of your files).
Doing so can easily lead to an intended or unintended academic violation.

If you ever feel that after talking to someone about a program, which is legal,
  your solution will be very similar to theirs, cite the consultation in the
  header comment in your program.
Doing so protects you from University disciplinary action (although the
  instructor is free to grade the material as he/she sees fit).

Examples of NOT CHEATING:
Turning in work done alone or with the help of the course's staff.
  Submitting one assignment for a group of students if group work is 
        explicitly permitted (or required, as in pair-programming).
  Getting or giving help about using the computers.
  Discussing assignments to better understand them.
  High level discussions of course material to better understand them.
  Getting or giving help about correcting simple programming errors.

Again, the key here is not studying, verbatim, someone else's code, and then
  reproducing it as your own work.
It is too easy to copy such code without really understanding it.
Technically, for programming assignments, even understanding the resulting code
  is not enough (if someone else wrote it): you should also play an active role
  in synthesizing and debugging it.
The course is as much about skills as about knowledge.


Automatic Detection of Cheating
Recently, various cheating-detection software systems have become widely
  available.
Some use search engines to compare selected portions of submitted papers to
  content on the web.
In the context of programming, they compare each student's program to those
  submitted by his/her classmates (for this quarter, and any previous
  quarters if the assignment has been repeated).
This software does not compare programs exactly: it ignores format changes,
  variable name changes, and a variety of well-know transformations that
  change the look of code but not its underlying logic.

Many courses in ICS use this software to spot potential cheating cases.
Once it identifies suspicious behavior, instructors carefully examine the
  flagged code to make a final determination as to whether students will be
  prosecuted for cheating.
Often instructors can find additional evidence of cheating, once this
  software points them to the simlar code.



Consequences
ICS will not condone cheating by students in its classes.
When cheating is suspected, instructors will take reasonable action to
  establish whether or not it has actually occurred.
If, in the instructor's opinion it has, the instructor will apply appropriate
  disciplinary policy.
In my courses, for a typical case of cheating, the student will be awarded
  negative credit for the assignment (under the precept that not doing an
  assignment, and receiving no points, is better than cheating on it).
For particular egregious forms of cheating (e.g., cheating on exams, stealing
  another student's work so he/she cannot submit it for credit), harsher
  consequences may apply (from loss of a full letter grade, through immediate
  failure of the course, up through suspension or expulsion from UCI).

Instructors must contact the student shortly after investigating evidence of
  academic dishonesty and evaluating the relevant work.
Notice of any action taken by an instructor must also be forwarded to the
  Associate Dean of Student Affairs (ADSA) in ICS and the ADSA of the student's
  home school (if different).
These offices act as a repository for such information, in case the student
  commits multiple infractions.
While the first infraction often results in just a grading penalty, a second
  infraction typically results in suspension for one or more quarters.


Student Rights
Please refer to 
  
  The UCI Academic Senate Policies on Academic Honesty for all the details.


Final Words:A Personal Statement
Cheating undermines the fabric of education.
The atmosphere at UCI (contrary to whatever opinions, prejudices, or
  superstitions you hold) is one of fostering cooperation between faculty and
  students in the pursuit of learning, knowledge, and wisdom.
This course, for example, is graded on an absolute scale, not a curve;
  so, helping other students when appropriate doesn't affect your grade.
And, if a student cheats for a higher grade, other students do not receive
  lower grades as a result.

Although it is embarrassing to fail an assignment, getting caught cheating is
  much worse (and some students get caught cheating for very few points).
I know, though, that students rarely think about getting caught.
But think about it: I often see students break down and cry when they get
  caught cheating and only then start to realize the consequences of their
  actions.
Their stress level goes through the roof and it immediately affects both the
  academic and social aspects of their lives.
The process is distressing for me too, although I must confess that I have been
  hardened by the number of times that I have had to go through it (typically
  multiple times each quarter).
Pursuing these cases at the University level takes a lot of my time, and
  reduces the time that I can spend on more important matters relating to my
  course and my students.
It is definitely a lose-lose situation.

The #1 excuse that I hear for cheating is, "I was pressed for time, so I
  cheated."
By carefully managing your time, you can avoid this problem.
If you start working early enough, and run into problems (and you should expect
  to run into problems), you will have time for the course staff to help you
  learn to solve them.
Also, I understand that some students take this course only because it is a
  requirement for their major, and that they have little intrinsic interest in
  the subject area; this is not a valid excuse for cheating either.

I have seen too many instances recently where student A asks a friend, student
  B, for help; specifically, A asks to see B's quiz or code (on paper or in a
  computer file).
Often, A copies B's code (with or without B's knowledge).
I understand that B feels pressure to give A help.
But, B is doing A no favor if A's cheating is discovered; B has made a bad 
 situation (A would receive no credit) worse (A receives negative credit and is
  reported to the Dean of Student Affairs).
And, according to UCI's rules, B is violating the Academic Integrity policy
  by these actions too.
I have seen friendships shattered because A copies B's code without telling B
  what was done, and then both get prosecuted under UCI's rules.

A similar situation arises with cheating on quiz questions.
I have seen too many students cheat on one question on a quiz and receive a
  negative score for the whole quiz (and letter to the Dean of Student
  Student Affairs), when leaving the question blank would result in a small
  point deduction and no university action.

In my final statement here, I ask you to pause and reflect on the consequences
  of choosing to cheat at UCI: this includes the impacts that it will have on
  you, your parents, your siblings, your friends, and your fellow classmates
  at UCI.
Cheating is invariably the wrong decision.








Exceptions to Policies
I have strict policies regarding attending classes, taking quizzes, submitting
  programs, and taking in-class exams; but, there are exceptions.
Exceptions to these policies include valid medical excuses (if documented by
  your Doctor or Health Care Provider), or any other officially excusable
  absence: emergencies, family problems, religious observances, job interviews
   or sports-related trips, etc. (if documented by the Office of the Dean in 
   your College, a Coach, etc).

If you need such an exception, bring a copy of the required documentation to me
  as soon as possible: do it beforehand, if you know about the problem in
  advance; if you do not have advance warning do it on the next day that you
  are able to attend class (or during my office hours) .
I will need to keep the copy for my records of all excused absences.
Again, if you have advance notice of a problem, please notify me by email
  beforehand to discuss any ramifications.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/ICS-46/handouts/syllabus/frameindex.html
##-----------------TITLE------------------------##
Syllabus
##------------------TEXT------------------------##
SyllabusIndex


Introduction
Catalog Description
Course Philosophy
Textbook
Computing Requirements
ICS Computer Labs
Instructor Office Hours
Instructor Online Hours
Email: Instructor/Coursewide
MessageBoard Forums
Staff: TA, Reader, Tutor

Classroom Information
    • Before Class
    • During Class
    • Class Decorum

Grades
    • Quizzes
    • Programming Assignments
    • In-Class Exams
    • Solutions/Graded Work
    • Final Grades
Academic Integrity
Exceptions to Policies




Course Home Page

Richard E. Pattis
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/macquickinstall.html
##-----------------TITLE------------------------##
Eclipse/C++ Downloading/Installing, and Testing Instructions
##------------------TEXT------------------------##
Eclipse/C++ Downloading/Installing, and Testing Instructions





You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.
This document shows information as of Summer 2015.



Downloading/Installing

The following instructions were composed for downloading the most up-to-date
  version of  Java, Eclipse, and C++.


Xcode Command Line Tools and Homebrew

If you have not already installed the command line tools for
       Xcode, install them first as described below.
    
    For most (up to date) version of Mac OS X, open a terminal window and type
      or copy/paste the following command xcode-select --install.
    If that succeeds, go to the next step; if it fails, follow the
       
            Mac Xcode Command Line Tools installation instructions.

If you have not already installed Homebrew and Homebrew Cask,
      install them first as described below.

To install Homebrew open a terminal window and type or copy/paste
      the following command
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" into the window.
    
    The following will appear in your terminal window; the sections showing
      The following directories... may not print.
      
    
    
    

Press return.
    Enter your (system administrator) password when prompted
    The following will appear in your terminal window.
    
    
    

Type or copy/paste the following command
       brew install caskroom/cask/brew-cask into the terminal window and
       press return.
    The following will appear in your terminal window.
    
    
    
    If this fails, showing
    
    
    
    ensure that you followed Step 1 above, and have successfully installed
       the command line tools for Xcode.



Java, Eclipse, C++


To install Java and Eclipse type or copy/paste the following command
       brew cask install java eclipse-cpp into the terminal
       window and press return.
    The following will appear in your terminal window.
    
    
    
 
Enter your password and press return.
    As Java downloads, it progress will be tracked in the terminal window; it
     is large and might take a few minutes.
    Eventually the following will appear in the terminal window.
    
    
    
    It will then continue with the eclipse-cpp download.
    Again, its progress will be tracked in the terminal window; it is even
      larger than Java,and might take tens of minutes.
    Eventually the following will appear in the terminal window.
    


Notice that Eclipse has been installed in the
      /opt/homebrew-cask/Caskroom/eclipse-cpp/4.5 directory.
    Move Eclipse.app into the Applications folder and put it on the
      Doc for simple access.


To install GCC C++, type or copy/paste the following command
      brew install gcc into the terminal window and press return.
    The following will appear in your terminal window.
    
    
    
    It will perform a series of download, some short, some longer
      (taking minutes).




Eclipse Verification
In this section we will Eclipse/C++ is working correctly.



Double-click the Eclipse icon on the Dock that you just
      created above.

    The following splash screen will appear
    
    
    
    and then a Workspace Launcher pop-up window will appear.
    
    
    
    In the Workspace text box, your login name should appear between
      /users and /Documents\workspace, instead of my name,
      richardepattis.
    
    Leave unchecked the 
      Use this as the default and do not ask again box.
    Although you will use this same workspace for the entire quarter (checking
      projects in and out of it), it is best to see this
      Workspace Launcher pop-up window each time you start Eclipse, to
      remind you where your workspace is located.

Click OK.
    
    Progress bars will appear at the bottom of the spash screen as Eclipse
      loads.
    
    Eventually the Eclipse workbench will appear with a Welcome tab
      covering it.
    
    


Terminate (click X on) the Welcome tab.
    
    You will not see the Welcome tab when you start Eclipse after this
      first time.
    You should now see the following Eclipse workbench.
    
    
    
    Notice the C/C++ words/icon appear on the top left (in the Window
      title-bar) and below the upper right-hand corner (beneath the tool-bar).


To simplify the edit/build-recompile/run loop that we will discuss below,
      perform the following operation: after completing it, clicking
      Build or Run will automatically save the contents of any
      edited file before the program is rebuilt and run.
    Select Eclipse | Preferences.
      In the Preferences popup window disclose General and
           select Workspace.
      Click "Save automatically before build" checkbox, as follows..
      
      
      
      Click Apply.
      
      In the Preferences popup window disclose Run/Debug and
           select Launching.
      In the "Save required dirty editors before launching" section click
           the Always radio button as follows.
      
      
      
      Click Apply.
      Click OK.
    
    Once you have set up these preference in a workspace on your home machine,
      you will never have to peform this step again.


Eclipse is now installed for C++.
Start the Testing instructions directly below.




Testing Eclipse, C++, and Libraries
Download the ics46-templates.zip file
       and unzip it.


Select File | Imports as shown below.
      
      
      

Disclose General and select Existing Projects into Workspace
as shown below.
      
      
      

Click Next>
Browse to the ics46-templates folder you downloaded and unzipped in
above.
Click the "Copy projects into workspace" checkbox, as shown below.
      
      
      

Click Finish.
The Project Explorer window should be updated to appear as follows.
      
      
      
      You can explore the courselib and googletestlib projects
        by disclosing/eliding their folders and subfolders.
      The software in these projects have already been built, so you do
        not need to build them here.
 


Right-click the project icon in the Project Explorer tab
  and select Copy as shown below (or click  project icon and use
  the Command+c shortcut for Copy) as shown below.
    
    
    


Right-click the project icon in the Project Explorer tab
  and select Paste as shown below (or use the Command+v shortcut for
  Paste) as shown below.
    
    
    

Rename it to be test_set as shown below
    
    
    
    and click OK.


Disclose the test_set icon in the Project Explorer tab: it
shows an src folder which should appear empty, as shown below
    
    
    

Download and unzip test_set.zip.
Copy/Paste all the files in its src folder into the src folder
  shown in the newly created and disclosed test_set project folder.
Copy any data files (there is one: loadset.txt) into the newly created
  test_set project folder.
Disclose the src folder, which should appear as shown below
    
    
    

Double-click the driver.cpp file in the src folder.
In the Editor tab for the driver.cpp file select all the lines (Command+a)
  and then uncomment them (Command+/).

    The Editor tab for the driver.cpp file should show the following.
    
    
    
    Notice the * prefixing the driver.cpp file name: this
      indicates the file has been modified but not saved.
    You can right-click in the file and select Save, but Eclipse will do
      that automatically when you build a project (if you correctly followed the
      instructions for installing it).


Either click the test_set icon in the Project Explorer tab
and then click the Hammer icon ; or
right-click the test_set icon in the Project Explorer tab
and select Build Project.
    The Console window should show the following.
    
    
    

Either right-click the test_set icon in the Project Explorer
or right-click in the driver.cpp Editor tab.
Then select Run As and 1 Local C/C++ Application.

The Console window should show the following.
    
    
    
    You can use this driver interactively to test various operations on the
      Set data type that is implemented by an array
     (from courselib).
    When you are done testing, the q command quits/terminates this code.

    
Comment out all the code in the Editor tab for the driver.cpp
  file (Command+a followed by Command+/).
Double-click the test_set.cpp file in the Project Explorer
   tab.
Uncomment all the code in the Editor tab for the googletest.cpp
  file (Command+a followed by Command+/).
Compile-Build and Run this code: because we are rerunning a project that has
  already been compiled-built and run, we can recompile-rebuild and rerun by
  just clicking the Run icon ().
Knowing this shortcut is useful.

Ignore the two warning message: this code uses a for-loop counter
  that is not used inside the loop.
When prompted, type 1000 and enter, enter, and 1000 and enter
  (as shown in green below).

The Console window should show the following.
    
    
    
    (note: this is actually a picture from my PC)
    

Eclipse and C++ are now working correctly with the courselib and
  googletestlib



For subsequent quizzes/programs, you can 
Copy/Paste the project folder in your workspace, renaming it
      appropriately for the current quiz/program,
Download and unzip the folder for the quiz/program,
Copy all the files in its src folder (all the .hpp and
      .cpp files) into the empty src folder of  the new project
      folder;
      copy all .txt files into the top-level of the new project folder,
Compile-Build the project; often doing so requires uncommenting exactly one
      of the  .cpp files in the src folder.
Run the compiled-built code.

All these steps were shown above.
You should never have to reimport the courselib or
   googletestlib, although I might instruct you to
  change some the the files in the courselib/src folder
  and rebuild the library:
  Read Updating the Course
    Library Instructions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/mingweclipse/mingw.html
##-----------------TITLE------------------------##
MinGW C++ Download and Installation Instructions
##------------------TEXT------------------------##
MinGW C++ Download and Installation




Install MinGW

MinGW means Minimalist GNU for Windows: GNU is a source
  of open source programming tools (GNU stands for GNU is Not Unix).

In this handout you will download the files needed by GNU C++; in the next
  you will download a version of Eclipse that is already set up to use
  MinGW.

You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing MinGW.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.




MinGW

Downloading
Click
       
     MinGW.
    The following page will appear in your browser (from the SourceForge
       web site).
       
       
       

Click the Download mingw-get-setup.exe(86.5 kB)
      link.
    
    This file should start downloading in your standard download folder.
    This file is only 85KB so it should download very quickly.
    
    The file should appear as
    
    
    
    Terminate the window browsing the SourceForge web site.


Move this file to a more permanent location, so that you can install MinGW
      (and reinstall it later, if necessary).

Start the Installation instructions directly below.





Installing
Double-click the  icon.
    
    The following pop-up window will appear.
    
    


Click Run.
    
    The following pop-up window will appear.
    
    


Click Install.
    
    The following pop-up window will appear.
    
    
    
    You can install this software anywhere, but I recommend installing it
       in the default directory: C:\MinGW.


Click Continue.
    
    The following pop-up window will appear, showing the downloading progress.
    After about a minute, it should appear as follows.
    
    


Click Continue.
    
    The following pop-up window will appear.
    Ensure on the left that Basic Setup is highlighted.
    Click the three boxes indicated below: mingw32-base,
       mingw32-gcc=g++, msys-base.
    After clicking each, select Mark for selection.
    This window should appear as follows.
    
    


Terminate (click X on) the MinGW Installation Manager
    (I know this is weird).
    
    The following pop-up window should appear
    
    


Click Review Change
    
    The following pop-up window should appear
    
    
    

Click Apply.
    
    The following pop-up window will appear, showing the downloading progress.
    
    
    
    After a while (a few minutes to an hour, depending on your download speed),
       it should start extracting the donwloaded files.
    A few minutes after that, the following pop-up window should appear.
    
    
    

Click Close.


Edit Path so that the MinGW and MSYSM software
      is findable by Eclipse.
    Click Start
    Click Control Panel
    Click System
    Click Advance system settings; you will see
    
    
    
    Click Enviroment Variables...; you will see
    
    
    
    In the System variables (lower) part, scroll to line starting
           with Path and click that line.
        IMPORTANT: Even though you see a highlighted PATH in the User
             variables (top part) look for Path (not CLASSPATH) in the lower
             part to change it.
    Click Edit...
    Copy C:\MinGW\bin;C:\MinGW\msys\1.0\bin;
          (include everything from C to ;) and then paste
          it at the very start of the Variable Value text entry.
        
        When done it should look like
    
    
    
    Click OK (3 times)
    

MinGW is now installed.
You are now ready to install Eclipse....But it is probaby a good idea to
  reboot your machine first, to ensure the new path is correct.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/mingweclipse/eclipse.html
##-----------------TITLE------------------------##
Eclipse Downloading, Installing, and Testing
##------------------TEXT------------------------##
!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">



Eclipse Downloading, Installing, and Testing




Install a new version of Eclipse to use with MinGW C++

MinGW means Minimalist GNU for Windows: GNU is a source
  of open source programming tools (GNU stands for GNU is Not Unix).

Before starting this handout, you should have first downloaded the files
  needed by MinGW C++.
Now you will download a version of Eclipse that is already set up to use
  MinGW.

You may want to print these instructions before proceeding, so that you can
  refer to them while downloading and installing MinGW and Eclipse.
Or, just keep this document in your browser.
You should read each step completely before performing the action that it
  describes.




Eclipse: Version 4.4 (Luna)


The Eclipse download requires about 200 MB of disk space; keep it on your
  machine, in case you need to re-install Eclipse.
When installed, Eclipse requires an additional 200 MB of disk space.


Downloading Eclipse
Click
    
      Eclipse
    The top of the following page will appear in your browser.
    
    
    
    In this handout we will download Eclipse Standard 4.4 for
      Windows 32 Bit (the current version is 4.5 Mars); if your computer uses
        Windows, continue below; otherwise
        look for the pull-down list showing Windows and instead choose
        either Mac OS X (Cocoa) or Linux and then continue below.
    
    It is critical that Java, MinGW, and Eclipse are either all 32 Bit or are
       all 64 Bit (and only if your Machine/OS supports 64 Bit): I think it
       easiest to use 32 Bit for everything.


Click the Windows 32 Bit Operating System for your machine,
      under the heading Eclipse IDE for C/C++ Developers (the fourth
      selection from the top).
    
    
    
    You will see the following page (don't worry about the name of the
      institution to the right of the big downward pointing arrow).
    
    
     

Click the big downward pointing arrow underneath the
      Download eclipse-cpp-luna-R-win32.zip from:
    The site named here, in purple to the right of the arrow:
      [United States] Columbian University (http) is the
      random one chosen by the download page this time; yours may differ.
    
    This file should start downloading in your standard download folder.
    This file is about 200 Mb so it might take a while to download fully if you
      are on a slow internet connection (it took me about 5 minutes over a
      cable modem).
    Don't worry about the exact time as long as the download continues to make
      steady progress.
    In Chrome progress is shown on the bottom-left of the window, via the icon
    
    
    
    The file should appear as
    
    
    
    Terminate the window browsing the Eclipse download.


Move this file to a more permanent location, so that you can install Eclipse
      (and reinstall it later, if necessary).

Start the Installing instructions directly below.





Installing Eclipse
Unzip eclipse-cpp-luna-R-win32.zip from:, the file that you just
     downloaded and moved.
    
    On my machine (running Windows 7), I can
    Right-click the file.
    Hover over the IZArc command from the menu of options.
    Click Extract Here
    
    
    
    
    If you do not have IZArc or an equivalent unzipping program, here is the
      web site to download a free copy of
      IZarc.
    
    Unzipping this file creates a folder named eclipseC:\Program Files\ directory.


Create a shortcut on your desktop to the eclipse.exe file in
      this eclipse folder: 
    
    On most Windows machines, you can
    Right-press the file eclipse.exe
    Drag it to the desktop.
    Release the right button.
    Click Create shortcut here
    
    
    Now you are ready to perform a one-time only setup of Eclipse on
      your machine.


Double-click the shortcut to Eclipse that you just created above.
    
    The following splash screen will appear
    
    
    
    and then a Workspace Launcher pop-up window will appear.
    
    
    
    In the Workspace text box, your login name should appear between
      C:\Users\ and \workspace, instead of Administrator.
    
    Leave unchecked the 
      Use this as the default and do not ask again box.
    Although you will use this same workspace for the entire quarter (checking
      projects in and out of it), it is best to see this
      Workspace Launcher pop-up window each time you start Eclipse, to
      remind you where your workspace is located.

Click OK.
    
    Progress bars will appear at the bottom of the spash screen as Eclipse
      loads.
    
    Eventually the Eclipse workbench will appear with a Welcome tab
      covering it.
    
    


Terminate (click X on) the Welcome tab.
    
    You will not see the Welcome tab when you start Eclipse after this
      first time.
    You should now see the following Eclipse workbench.
    
    
    
    Notice the C/C++ words/icon appear on the top left (in the Window
      title-bar) and below the upper right-hand corner (beneath the tool-bar).


To simplify the edit/build-recompile/run loop that we will discuss below,
      perform the following operation: after completing it, clicking
      Build or Run will automatically save the contents of any
      edited file before the program is rebuilt and run.
    Select Window | Preferences.
      In the Preferences popup window disclose General and
           select Workspace.
      Click "Save automatically before build" checkbox, as follows..
      
      
      
      Click Apply.
      
      In the Preferences popup window disclose Run/Debug and
           select Launching.
      In the "Save required dirty editors before launching" section click
           the Always radio button as follows.
      
      
      
      Click Apply.
      Click OK.
    
    Once you have set up these preference in a workspace on your home machine,
      you will never have to peform this step again.

Eclipse is now installed for C++.
Start the Testing instructions directly below.



Testing Eclipse, C++, and Libraries
Download the ics46-templates.zip file
       and unzip it.


Select File | Imports as shown below.
      
      
      

Disclose General and select Existing Projects into Workspace
as shown below.
      
      
      

Click Next>
Browse to the ics46-templates folder you downloaded and unzipped in
above.
Click the "Copy projects into workspace" checkbox, as shown below.
      
      
      

Click Finish.
The Project Explorer window should be updated to appear as shown below.
      
      
      
      You can explore the courselib and googletestlib projects
        by disclosing/eliding their folders and subfolders.
      The software in these projects have already been built, so you do
        not need to build them here.
      
      The project folder should remain unchanged.
      Below (and in the future) you will copy/paste this project folder
        to create a new project folder in which to put your source files for the
        new project.
 


Right-click the project icon in the Project Explorer tab
  and select Copy as shown below (or click  project icon and use
  the Ctrl+c shortcut for Copy) as shown below.
    
    
    


Right-click the project icon in the Project Explorer tab
  and select Paste as shown below (or use the Ctrl+v shortcut for
  Paste) as shown below.
    
    
    

Rename it to be test_set as shown below
    
    
    
    and click OK.


Disclose the test_set icon in the Project Explorer tab: it
shows an src folder which should appear empty, as shown below
    
    
    

Download and unzip test_set.zip.
Copy/Paste all the files in its src folder into the src folder
  shown in the newly created and disclosed test_set project folder.
Copy any data files (there is one: loadset.txt) into the newly created
  test_set project folder.
Disclose the src folder, which should appear as shown below
    
    
    

Double-click the driver.cpp file in the src folder.
In the Editor tab for the driver.cpp file select all the lines (Ctrl+a)
  and then uncomment them (Ctrl+/).

    The Editor tab for the driver.cpp file should show the following.
    
    
    
    Notice the * prefixing the driver.cpp file name: this
      indicates the file has been modified but not saved.
    You can right-click in the file and select Save, but Eclipse will do
      that automatically when you build a project (if you correctly followed the
      instructions for installing it).


Either click the test_set icon in the Project Explorer tab
and then click the Hammer icon ; or
right-click the test_set icon in the Project Explorer tab
and select Build Project.
    The Console window should show the following.
    
    
    

Either right-click the test_set icon in the Project Explorer
or right-click in the driver.cpp Editor tab.
Then select Run As and 1 Local C/C++ Application.

The Console window should show the following.
    
    
    
    You can use this driver interactively to test various operations on the
      Set data type that is implemented by an array
     (from courselib).
    When you are done testing, the q command quits/terminates this code.

    
Comment out all the code in the Editor tab for the driver.cpp
  file (Ctrl+a followed by Ctrl+/).
Double-click the test_set.cpp file in the Project Explorer
   tab.
Uncomment all the code in the Editor tab for the googletest.cpp
  file (Ctrl+a followed by Ctrl+/).
Compile-Build and Run this code: because we are rerunning a project that has
  already been compiled-built and run, we can recompile-rebuild and rerun by
  just clicking the Run icon ().
Knowing this shortcut is useful.

Ignore the two warning message: this code uses a for-loop counter
  that is not used inside the loop.
When prompted, type 1000 and enter, enter, and 1000 and enter
  (as shown in green below).

The Console window should show the following.
    
    
    

Eclipse and C++ are now working correctly with the courselib and
  googletestlib



For subsequent quizzes/programs, you can 
Copy/Paste the project folder in your workspace, renaming it
      appropriately for the current quiz/program,
Download and unzip the folder for the quiz/program,
Copy all the files in its src folder (all the .hpp and
      .cpp files) into the empty src folder of  the new project
      folder;
      copy all .txt files into the top-level of the new project folder,
Compile-Build the project; often doing so requires uncommenting exactly one
      of the  .cpp files in the src folder.
Run the compiled-built code.

All these steps were shown above.
You should never have to reimport the courselib or
   googletestlib, although I might instruct you to
  change some the the files in the courselib/src folder
  and rebuild the library:
  Read Updating the Course
    Library Instructions.
##------------------URL-------------------------##
http://www.ics.uci.edu/~pattis/common/handouts/macmingweclipse/allexperimental/mac-gdb-install.html
##-----------------TITLE------------------------##
ICS 46: GDB Installation on Mac OS X
##------------------TEXT------------------------##
GDB Installation on Mac OS X

If you work on a Mac OS X 10.9 Mavericks or later, you will run into
the problem of Eclipse refusing to interactively debug problems that
otherwise build and run fine:
An attempt to start a debugging session by selecting
RunDebug
from the menu will result in Eclipse complaining that an
Error with command: gdb --version
has occurred.

The problem is caused by Apple switching away from GDB, the GNU
debugger, to LLDB, the LLVM debugger, in their Xcode toolchain (along
with the transition from GCC to Clang). Unfortunately, Eclipse is not
capable of communicating with any debugger other than GDB (yet).
Here is a step-by-step guide for installing and configuring GDB.


Installing GDB

As with GCC, the easiest way to install GDB is through Homebrew.
In a Terminal window, run the command
brew install gdb,
and wait for it to complete.
(As usual, it may ask for your password.)

Now, we need to code-sign the GDB executable, so it will be allowed to
control other processes, as necessary for a debugger.
For that, we will first create a new certificate in Keychain.


Creating a Certificate

Open the Keychain Access application (can be found in
Applications/Utilities directory or through Spotlight).
Select Certificate Assistant
Create a Certificate in the application menu
(Keychain Access).
An assistant window will appear for guiding you through the process.


First, you will be asked for the name and type of the certificate.
You may choose the name arbitrarily, but to simplify its future use in
command line, prefer names without spaces or other fancy characters,
e.g., gdbcert.

Make sure that Identity Type
is set to Self Signed Root,
change Certificate Type
to Code Signing,
check the Let me override defaults
checkbox, and click Continue.
Click Continue again in the popup
prompt warning about the certificate being self-signed.

On the next page, leave Security Number
to be 1, and set Validity Period
to a large enough number of days to cover the duration of the class
or more, say, 365.
(Certificates cannot last forever; the maximum validity period
is 20 years.)

Then click Continue once again, and keep
doing so to skip the next six screens until you see the one entitled
Specify a Location For The Certificate.
For the only property, Keychain, choose
System from the drop-down list.
Lastly, click Create, type in your
password, if prompted, and click Done.

Back in the main window, choose the System
keychain in the sidebar on the left, and select the newly created
certificate from the list.
Open the context menu and select
Get Info.
In the information window that will appear, expand the
Trust section and set the
Code Signing property to
Always Trust.
Close this window (you may be asked for your password),
and quit Keychain Access.


Signing GDB

Our new certificate is now ready to be used.
In order to make it immediately available for signing, we need to
restart the Taskgate access-control service.
You can use Activity Monitor to do this (also found in
Applications/Utilities).
Open it and filter the list of processes by typing
taskgated in the search field in the toolbar.
(If you cannot find it, make sure the menu item ViewAll Processes is checked.)

There should be exactly one process left in the list.
Highlight it, then select
ViewQuit Process
from the menu, and click Quit
in the popup prompt.
The Taskgate process will be terminated and, consequently, should
disappear from the list.
In a few seconds, it will be restarted by the system and should
reappear in the list. Please wait for this to happen (it may take up to
a minute or two, at worst).

Finally, in a Terminal window, run
codesign -s gdbcert /usr/local/bin/gdb
(if you named your certificate differently, replace
gdbcert with its name here).
Once again, you will be prompted for you username and password.
If the command does not produce any output, then GDB is
successfully signed.


Configuring Eclipse

The only thing left to do is to point Eclipse to the GDB executable.
Open EclipsePreferences from the
main menu (not to be confused with
Project Preferences).
In the tree of options listed in the sidebar, navigate to
C/C++DebugGDB, and set
the GDB debugger field to
/usr/local/bin/gdb.

If there is no GDB section
in the C/C++Debug subtree,
close the preferences window, and try to first start a debugging
session for any project that you can already run without problems.
You can do it by either clicking the Debug
button on the toolbar, or selecting RunDebug
from the main menu.
This attempt will, of course, fail with an error message about
the gdb command, but it will force
the said C/C++DebugGDB
settings to appear in the preferences.

This will change the GDB executable for new projects; for all existing
ones (that you are going to use debugging for), you will need to
manually update their debug configurations.
To do that, select
RunDebug Configurations
from the menu.
In the window that appears, one after another, select every project
under the C++ Application section in
the sidebar.
For each of them, open the Debugger tab,
set the GDB debugger field to the same path
/usr/local/bin/gdb, and click the
Apply button.
After repeating this change for all listed projects, click Close.

❦

If the above steps do not solve the issue on your machine, or you
encounter a problem while following them, please do not hesitate to
come to one of the upcoming common labs for help.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/graphics/ipod_icons_thumb.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
ЪьЪЮJFIF``ЪшC		

	


	
ЪшC		Ъю°р"Ъд	
Ъд╣}!1AQa"q2│▒║#B╠аRяП$3br┌	
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz┐└┘├┤┬┴┼▓⌠■∙√≈≤≥ ╒ё╓╔╕╖╗╘╙╡Ё╢╣╤╥╦╧╨бцдефгхийрстужвьызАБЦДЕФГХИЙЯРСТУЖВЬЫЗЪд	
Ъд╣w!1AQaq"2│B▒║╠а	#3RПbrя
$4А%Я&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz┌┐└┘├┤┬┴┼▓⌠■∙√≈≤≥ ╒ё╓╔╕╖╗╘╙╡Ё╢╣╤╥╦╧╨бцдефгхийрстужвьызБЦДЕФГХИЙРСТУЖВЬЫЗЪз?ЩШ'╔yдъ█Ьgj╟^╩jч ∙A╥р-y╓БrxEВ?─╗~6|R▐А▐бъ╣Yд╥·$т═рmо >2р╥Ш(9В8КРгф╬8сz▐МGЪБИ·MС9a╜\ИЩ╕ЦЬЩ~.Ьsд7:©┤╒wтnзЖ%	p
э≥'╠Кч╥~уt>шvGЩ}?Ьж╘эVgКЭ░щЫ≥Чэ╦Д*ЬЪпИvщМ Кwсs▄}╝ХшсЪ█cУГ≤зuк■n┐Ч&▐ЭВс≥o7(]jЦ▐З┴╧ЪыКРМw@гМпЪ╥╖ЪAuuвМ≈DЪвсЪ█0╠ЗХc©эгШnЕ⌡=╙ЦЪg╓мЯ┤[╧bO
Щ╗Ц_·©#>уu▄}╤КИЖ≈Ъ_╣]g?k╨о╞з÷Эh╝т:.╣u▌└█QЖЪХuшЦ╜\ЯвЧ&╝?ЖzЭ▓7W\÷╤]ШyЯ╓Ш]жIШmнКЕЪф░Y÷╜ь╩РП5⌡╡1▓╣?ЗBъlш╜]┌zдмЬЪгКР_МW_СШsЪ│/Ч4⌡²ыШeиЪ╥≈Ъw≥Зм╬ЪkwK▌sЩ╙ЪЭ]1▌═Y[ШrА]┤*5GЩ>zЭ²778Ъ▐к░?КЕЪф⌡Ж╚°cМ≈?ЬЪЦHvgК.КЯРЪm]>oЬ 8?ЗG©PфОМ╩Ён@Чу~ъП:Э÷ШUиl⌡ш°ЪвцЪ█'зnGKк÷ЭЯ═,~╝хu|╨Ей©Р~ЯЗ┬6╒╓╥ЖУА_Б#T⌠┐Ъ}вЕ?зnOЭ╬\ЪЮCЪ█/зnvЪгМоЧ?ЬпgЙ╢W У╜И╦╠Яё
йП▐╜ #Ъ╝╩GЬКЯкаz┘╩ИУ┴╒┴╦╢у%Ш\э╘YЦХkЯЩo.Ц`и{wz╜с┐ЭК╚р>"ЬЦD╩Y,╪M{,JAШ=Д·|MЛCCI╓блЧ┤ЧЧчZ^ё╗зh_t≤╪3s#с^сРж[Ё▄л┤-ВJЩ╤╩╥╫с`╪╢·;⌡YЦC4N$R2HЮ┌9©√?|Kс▄2+АPpxК·╣Уб▀в│яцзыT{sЩh$Щ╧П╥МЦАУЬcАеж╛▒У▒╔ш▀ЖС3yKФШК4WБлРfЗl9yю·9╒╡ЖeС3Мм7"+╛╦+╡S╦}©÷щsЧG]c©Зt©З╞ХK
RSя|┴sтА╚ЫЧжЪДtуСЪ?╡ЪХf²^┐▐S.┼(╝s@╘═√X.c )"0daЙ*2q▌тН N╔╚║еw
ЪvTЧКж≤ в▌ЬkXЧкжvJьЁ÷(ЧОёW╝;│
╧H▌Ч∙уtc%fLHiAхБёКв *┴$╓х'┐LиУ═qр─$╓хн3LиУ╓о>Т&EфjТ²NzсZB@с7{пOпа╔╫F╖╫С@QQГч█чТЦц.=kХ╞┘└▐┐Ё░Ф! В
Ые▐#·УТgб╕QП┼MьгЖ▄÷^┌─:ieЪI⌠╞ч=╫Х╗$ыЖ┴9o╪h╜Ш≈M#ЛС|─ЧЙ`уЬ╜хЕ╚ЪвЛ©З╞ъМ4kprHh╔$▐ёWЮ╣Ъ#├╞Ъ_▓ЪХf╧╙t4┤S7р`ЗW═|2ЬЯ7Бе÷┘4К╓╡·hзF²сzф▀█д▄▄Ц5И>'Щ⌡(┘|еD┴√≥$█┬▓5┘≤Ё2╗┘$М жq└Ф⌡┼╨[└╙BQ⌠Ёgнь>■`ЗW═xоАн╣Юm7цсК7o.╛⌠┼зЮKД╔Ры]┤╗▌УИ~оВЭ4!/ЁHл_=╛&ШЖ7 `Э╬a]≥ЦuR╔RRЕQw!ж╔С7║Сю=+т╪'╚⌡щ/Л°э[╞хдРиЪж╞/▒s╪d┌U┬%NG┤╫"╩ёnG(}TБ║7lУG╬НSэQ▒К^
Ж┴ЪГ╪÷Вы═O98Сэюм_23Д=Г#ж▄▐ZПo>|Ъ╞⌠ЧШ5Й╨цk╫gАF┐Ц	$:$░·k▀YЯн╧╘i╜ъ%⌠Ka╨H,╕b@┼YЫdб⌠╠─8Зуб╙╩qjш≥)сm%-ЖЫ┬хФ╓хУ╞bжbi╨о┼tШiВ≈з6≈sx╤╡C43^4╓E#Cнг2e$?+moJЫсБВцm[АфIЫМ'ЩЖkИыЪЖdЯЪМgБ;ОК o┤Т█X-╕╫уНVk╚├ш╗	,д·─sEшы\N)+╤sд▄У╔rs]╖бОы7БдЪ█ч=Ьyi}mёЬёбwfвQ╣·F}р+:╤р8з6▓{┼И╪Ш|DЬyЦ╫;аЗ╥┬МНHp9©░gПС]┴uя╛уВ(`щA З+АёЬG(-а©⌠ПЮsMИДwШD°÷╪²NIOз$Д÷≤я[│Вч цk─ш	┼Pч²┼Эж©Дrу╠сМ╡ЪХf©}ТМ╡Zэw7≈.Ю·©5╞ЫuoЗЭ≈ЪC5кS║╓z ^Я┬ЭБХУОj▓hЗ╡Dя╜дJ╓┘nёФs[ Wе?h√ ╪:W┴nl≈R╩k╩√▄.О9Ьy╠≤ы┤╕285ГГОW═Э,ЬgБo▀ъТ/xJЕж59╤╛⌠6ь═@2Р╧Л╙═⌠JjаZ
╜o╖}╬Ч┌°)йНimв╤Ъq≥Б╞x÷ф╡X╥┴5Ж1'ыю┌8┌|┤K6X⌠т⌠P╞▄uаПэЬ[о▐Ш7Мh≈иhQ╥i┬KВ╪ётг²╧ГЗгmЪ╜явL└j?ыu
©╫[oН▐?Л√≤}E\_Ь%G┤н∙-АЬЦv-╒■FР▐╙г°ГЯЬв╣Щ⌡°_з{)]ИЗw1Чл^3ЬE╒G╙Й	4ж╩Ё4	╘VVelddd9ф+(Ф89тTтв3ы]\©aW▒м+╔ы╕|м▐╕){QЗвХ≈ЛвЪЯЯ╞г÷┐÷5оiЪЭ+~мЩ⌠Гы╫щуЙ╚2└R║p rqюеzп╖:▓Е└[~JГ
J╢Хг ё╡?;kьЧ|}Ь╠П2ВY⌡А≈▀%ПХуcT╬▀ЛЯо┘s╠Жх╛╝N`▄ ЩD?ПH┬6ЯШ@[ГпЬaЪЬУ Ъ┌C!Рp6═ЖЪ┼bOЧ=]пцc╘к 4Д÷║Гк─°ye4воЭ▐кЪ~п╬ЬГд·&По┼e┐^вГСУ[ИЦYe╦⌠s1rдd]Ё▌╧╜ОЧт?|a╗&║Бz
CY▀N÷O╣уZмEщ╔╪ЙVXБ░r⌡│ ▒о5Ж╞еоЬ%w▐NсДюЭyкs╜⌡▓Ъгл°ЧtT▓Т┤ЦЬ▐j+r╫tБVзN┼vJtгчИ_│ZвЭ▌╞Щ~KЪ║ ЩУсpжw!юк■─~█┼Э
ж©Дqу©КЖ_Щв-N├░Йf÷╪kМOь+Y╥п©n⌠ys(│┤╞HS%IшссК_÷╪kЙ▐ьЙ%⌠ЖлЁy"yМёрГiр7*ш~PN╖zЖР
Q╜²АiкgRЗRAС
╖·уЩ⌡N╬rR╒ЫзR▄[┼╫╣В÷3Е┼╣╓з╩з=вЮ94pСд{Le{АсjR┌m╔mёni?Ёfрч]РёЯVЪд9≈HПЕП⌠Cс_ф╞ee°к╛╬:╩Ч╫|∙ЪЯ:ВЛаП╩В╚%эТБL÷²sР&K▐М=kJЯ>≥st╥*Щ└ё!'o$Н}kР.юЩg	RQ∙⌡°#~вvЩ~СЗ1`·'л╥M/Э	╔Ь\ЩSПФ╞q╞AwmА=N[{Hаqpк$┘OBЛщIаИYUя|Oе╓EaБ4┴Д╤┌ьБ+М─⌠_А~	Юв#Ш!чзkЭC╛м╛╞H╘╔╔4;~г┌еdV'.▌\E|В║Й╨╢ПPox[бWИБ-
с_I.uV┬г≤ё%НHз═2Но5Кск\╠x╙)ыпW╬╚ewvВ©NКUэДЧх⌡дTёwzjОИ~╫▐o©.╘Шx≈D▓e
&╚fи;┼М⌠> ∙╛╜T┘┬Ffm┤╞ДвГ╤÷Ъ!ш/ЗН÷З╞▀╟к▄╖E"{░CПрQОgВ╓K_u}'HЩ²Ч[]цI│р#═#|▓╧/╥╧Ц╜}÷уx[жP;+Ю
ЭбЯTZн≈╒Э⌡N√kquПчуЦx°╝М╥Ив²U▀е>:┴й▀Ы°╔фЙЭЦ$╚┤║≈бймщ╥щ╥sЦСзУ·kY7╢ _#У╬(E,OВbx┬Е$;у│ЛAБ╬Щ╣/4мWЖЯd╤Я╞ьУ*(ш≥═МТн:W▌кБ▐л⌡>щ*З≤ф1ЫV▐"уo?Ю≤УmJi╝x┐M│^W,Cyь▄·°0╜sj╦zт"Мy)Fо╥╪©K├IV╢╠╙=wШ©лЭtо┘K©╡В┬╔÷Ж*Ь%║YА&≈ц╤vЯF═Ю╩t╓Ж╞Ф▀╥А_п┤Лyc╚зЭ-Ь:м#Z╢Vyl77▌·∙ЗоАИв╚┴■Мxс╨©sкБлOуИaБщ╧Ф▒ЗSiПог┘÷зtШМ*ФеKжй╟Й╓х#пСRмП╥БрM5ж∙7=вac╧⌠Q≥XЗБFИЯ$╟У2л-H5о%y%я╦╕gц╠╚f&2ЬS╢|рm⌠cЪ k,оЪпkИ?┘Ю÷└cjгN|яfqёыЦ╖▓÷й╬∙ЬXXЭ≈Чb!_≥#ОпкЪ2dДН?н┼·R>с'д²╥)'эЗnО*`ц╩∙wgы╚П?[Ъ▒кVТШl©З╞чшлR÷╩≈#ЧЗ╞а-oЧG-_╥Зl©З╝z²
!тм?xвэПOшkЪшпИ╥▓╒KwАшхМQ▐Зижз=Ж╚ювцГОьПВ┬u©
xвLЯ├У;█]с╝БйЖжB▓C"°├Зt=
t`╠/▄╖┬_bIЩнГ▐°Ю% eUПq≈+╘⌠ЛчгУc║чИЁе╕╖ъ\!▌]F1┴R3аHOПНЩqю╜╜.шWс>Ь╖цз|╨jvОrа╚╓/R▒⌠·═Ф©ЭШzЧу^+K╜7M▀аз╔ф÷bn.О5%bf@@эдH╚▓H9Л+bкЖшЩ╠/Э;s╗[x3цRY╚@ю╦k┐)e┬фKзшМFYdД;E&╗ С_ZЙ©╡ёё∙РЭu╔\[▒РМT░Ш"©÷▐┐_©iъ|╪у╬x╨Йобzuк┴#е'ьГбmUGк#и╪к░юt5ЛoМaШ{j^:╣Пувд}oD╩╦╧бMf5╣╥YUiv▄Ё*┌xкч©?ё─ЖtёЛ≈dУЧ╪▐├аЦ╠╜Q^MщКo√²╩÷╟╬'Щ≈Н╪;ПCе>7т|S╔c╒ИSъ=┤┤ТWk╚║РЦСHцuа╞█>+|RП'▀ЪЮ┌0mцЬ:;%╒х/^ГШbsn]ГС$Dguэ├э)WйkШTЪа@г:▐├Л>#k:╫щ═■,└s[эy{╥╓l÷qю╘RJЫGЦд©▌-4k╞▀7Зд {Ы█╕цwfmm≤├д▄┬T╤Н╖╜╔┐▌┼nМ;Й²ТИm©_р0x|6╧QVmw©ГэПнъ┘X©Ё?бMд÷ПLО│·!П╕╤╛рЬ2смVr·╚╤@╝9R2Ш_инkЛ÷ыСЖМЬЩШ7Ь_	Ь/WсУ÷ZXt]~лщAjЛrм╛≥'$зO8о5У^:╤Ё²:°≈^╘Ы4yФSC7б*U!мgu╚M>И╝©│Щ/C╓xЧбй+m{S╥┼щvG
O╣Tюb╒K©цt╒Цдz╚░pя=гФЫЮ÷Ь(ВМ╞ЦщШoбЧП╔cЩ═Ж#X
╡╟╡╥[▀╖╧яg┘Э╕
VE
8,Ахм}°s╙~Эa╞h©Ч@Эz╥ГQMпеMI=╔;З}╞пЩv╦ПЧ÷⌠╗э]┴-ж8$≥╕7
┘IГЙ MазV║A/┤ТВ├ББ&dСь╗# Ма#╫|kднs:xзP╖{]У╡Иe{▒ВQ"├S∙8`r1х▐5ZМйZ╣Ф÷Ды╛ИKhнvW▀Z╝ ╔╜╛|O[З'┴У©еz EГыХбgZ╤О*U√>═ТuSЬV╞ц╞k_~9ЬSАЪ┤V3╜kз■V6╕c┬я°Ю╩йё,}│╞чOа&?gШ/ыаЦ┬>-вЭB}╝КK√чрь╬9ёFМ╢Ю⌠ А╘┴╖J|▐пч4':|ЩцШ/█ъТО
]hжzэpYэO4╡∙╠┤л>k╢▌╩ЖН
]щ╤Г╠е^≈ЦЪеIФy'Я·GЁ яыЛБ;ё≈├ЕЙ!OP8Ш╝?Ю■╡аr┼шЖgПф▐ЦЪЬ╒Се÷Уъ╠]G╘B╚y╔нAdиРи─@``▌s_°0A-еД6ПFf·W	j2Y┴юЯ╙▄■╒╓╤ v:xЦдЧя╞4ЩRk+K╚ш[ипF╜╨kg/r?└ЁqпГ О5зБ~╘ё⌡╜bтZ-Т7p$zl)Жf┘яЦ▌╧─╘Uе{мvMЖРТ?ТъзБ~∙ёзX[Й√rз[эк:╓З\2o24▌йД╝YwM!
x╦╝Oг╪mЯшK▐фау▌·ЛНя*1эsСvп+ВжОЧ	'Ш7зд$⌠е^;(╡ш\1÷╧╞▒kЬ&╤│ПЁЖxуЧ&ЭЯ~╘╝YХp}ё[п╣ьЦiЭ─FИ║√0mнY
Г Я┼зЯУ╘^7q} ▒]к║YE╩Kм5З░tRв©ьЭ#▀цъ╪=Я+фZv║╞h┐y⌠Из5ба=²╧l,╡;╚`?8ююЦ' С!Mз'╣)фЁ▐П?ф?|:ПЕЧ⌠А=]4Шы≈╫╛robол8ЭЩkwд÷╢дъЭ>⌠бз╬╖hЗ,√▀jПц╖е(=@нr3 Щ)я©aыгЦЛK/е_ыоеЧ)Я·©>cЬ_Vу- ╦YTfKG"/▓oНР©@Ь-(нЖ°≥?─╞∙,оЭJМyЪ√kЭ╚Йо┐╦?ЕиР≈╥╟╙Bga'7[█ЫЩ╒O°}Цз┼вщ$Ш;NЪU.\dг)N:5~К_Р8ЙъУШ/Ч├kВ▌юю░╙n╖Щ√╞а╫cЧFЩWЧ©%ЪпмaSdi=│н{ЩPЪ┌OКZ╕┤Ш_ЭI╧р═7иЮс┼-Lю/зc$Ю}~W╫_╚©ПI-@iъ╤gдyX∙
ЮЩ╧Ч·b╞2║S└tiтtЕ'╓╥^Ру\Оцу█
▌╓╒╓▓√▐gНЁВ
ЭБиt╧/зy╤$э^fЕ0lmИ▌╪cР╞дm~ЗздzодКh4Ъчi}V╧╢Kh╕²PЁFG≤Nб@#Р╞KЯgгъi╤6┐ПКNПШчhwWхnН е╤-╘MфХO°
╡a
▒▐|в©Йsi:В└╝╛u▀[mgO²O²oy
м─z╚d~=kеЮ&#$о╠uЁ
©Z╔лА(I'м{5RНЭЁVсG╔жлс┬c┼бАh:	aГV
╓eJnЭ╝К√\╜z╦╬╘it|!╝Э?вЛn╢╞├Z┘╞┼|],√▀╖ьYш$НАтy╓╗▀Ф,д█└ч╬eЪ┌Ёx▀дwЪ~Х ╫▒┌нфkе▌Cfяnu┼фO▄П+УкцG┐4~у~Ь;╙iз5Щ╪З▌ё|$ыZ∙FPъbN$Б╤╪9g7┤m╣■©▒4█⌡≤≈@Y≥▐aИ_≥╥/юъ┬·>Ь▐╒xКАум√╓кЛвЖSэlr▄шё░6p─q░r+жЦ▄}
qK▌⌡▌▒YЛ╧ z7emWwжоt©=Юl
\г┤'W■╠~О]Зk╚╤╫=;Ч║|ЬЯА▄ЧтcЁ┌ГFжtи>м╖щ─e╤э╧└pC/FЗв≤~р ─с©d╞▀Зb\╓╩╪#└F,cS`1=N9╞▓©c├÷>k:Ф╥ЯЧУ[ОЁшh·(`▌?щАоч|Г$ЗWя╢┤У╜kЖZЬ╥╜энM╙xRЯА█!ь-╩uНO╧╜╪:м^'█kЮ0Ёrа(╧^вJZY_мчщр~lкд╔ЕYf╣tё┬°ёu}mw}∙╞зЖчгРя▌+Ж'бЧЩ═У╞ь╥ц╬с╬krЬSWП╪2з^.∙▒лоk╡9|я≈ьA/NЬм~ЬC═Х÷╠оЛa╙YЬА▐┼╬/ЭkуёI5⌠@▓жз{░╖bН⌠-Б$Тк╠Г©?Чл©.&Щ╛УЪз7Ж╞сУ√Я╦уСJПу╖├╔u[▐А╧■ф6Ак`ЖкЩjЯнШ╓Ы≥Ц$▄УуЦ>!т~кlн?xЛ	Hв√o╞╣~╞┌АЛ*┤╫eя5╚Сv©Д▐фЯЙ▄gЦ└3ЫГR╚╞╜О╚©║жз÷Ь√шgЧy╞Р╞╛~
Э⌡▒╘кгЮ+Д╚fыжЭк5ЧUУ÷аq╩Юtг©Ж╓≤г~~gТ╤╛vrбФЙCФ▒√'╖╫4©ЯС&3█гЫяV#КЩ?f╦l┌╕9:ЖА╚П┤YЪ▒©UЪ╞иТ3_╩Ж≤╕SйМ≈#м_└оЭ▌╞Щ~KЪ║ й╖CHгОЩЪ┌ex╖Kп?mi≈С╛WZг├$┌и▐ъ:J▓╖h$jЭЮ?xущ7Sтtm~оUр/╖с5;ID╤вV╡≤Е┘ахea┌Ук(С%ДсШ ║╖F╩╕╬УcЗ┤Я╤≥╛xёе█▐╖Ь5╛>оwyoxb╧}╓0EQх[8╞@р╝╜ТOEёы,Р[═!%√G∙шЁw╞k7-╨{шИзY_Йг╟ТХ+ХeZ▄∙÷3VШйё┘÷
ХЧП©┼_бчу╔┼ВR©с┤⌡-У≥PИ';@|┌XД`t5Е╬=ЬcПСАу·█А{╜bЙЬ▓з-F}FКМ=л▄╗╛\│╣0pэ+ПёЖhЩ╖?k█&{/└Ъ	Ч/о╓iZк5²·Ё
^[ыг≈e▀|R:tDЖЛ~2Щ╒?Ю║╨÷Ж%╝ёЦ╗uКhocт-╝4кM8цПJ|╫Н#кР┐цd⌠е}жo┌юЯ╛d9зVO[ечЗvmНЗИ}▒Ы√≤d8╖[.╞ЛФзЫ╓сЁVjзmoлЩ╜Я©├╪qПз
RПО─eЬ╣═╢╒ъ^╡╟⌠итmёю5╪gЕ■▄d╘ ЗА╬5xчЧЦЧ	╠Яве Ъ┌У_├~╣П╜Е█°~)█ т╣)╔┬д┤ичRoe╦Оsь©⌠GЖ╬Ъ┌⌠╜ЙшAЦ/f& 
#Mvл┼╜▄yyЫw╗~0╓─q_ЭwЩ╕hо▄╥╞А▐█u=b
.Д╚h╩c╤╣▌d$nh║UFaн┌GjХй0ыwSpаRP├ЖЁ╩}°·╜zщ╜ltc09├o┬ЖьэG╢≈кM╞d╢Х╩yТ>jМ_ьоЛ╞╘И·&Ъ┌d|
тТ{╢╫╠Ъ└2йщ²vиb)Зt`G╣╖╜}/ПЖ▓Щ═>jv^ЬYЯNКб:F╚|╠}┼У▓m:)e`╬a▌Uu▐▓2й3К XJ╠╔RР=,Ц/·c┘Жpi4О╘Щ\x▌у▄n╤╗■bМ▌╜|ЩuЮК≈╧i71w'q=КРE©h▐Ь(dЧ*с╢#Яи╣┤	v╞╕YF vБ┴щ═I╓(и!≈ Ф╞?hЪЬ(╔╗╧yuшё1┤.╨>÷С·lи8┼ЦpQ▓╞рp\A-ЧЦП┤ы√6©:╜╫_Ы╛ Г└┘·≥{╗ъх!╠╢╥▓{≥ъ│h╔≥┴=вРИ╝O
в█u▀⌡fъo-Т╞z╘rAЭ╚Й█╢╞МSБ╣┤Эu╘зц╟Щ*║╢Yу─ H`Uч╓v$┼Ы+╫x°E÷kф²;;BШЫшЭ▐р╦/┘kПэ+N╣E'Rш^и+УvчГ═[ЦЛъУм∙}qПP1Ь6@тЕЦ8Ч_ юqeoоП/Р╞╞>dЭ■┐сT≈Ы
Ь╢~╒Ж;Г`%aН{QNusСЭG╣d]iГr^avI╦Ъ╬╚П┤YЪ▒©UЪ╞иТ3_╩ъg╦∙;fЗ╫з©	У÷ЫУ_ЗЭ≈ЪC5²^├░Йg╪i1J~Я╞╔©e?ыЖOз7Жё╥Пmн╝З┤,МZЪ[т"▄,╩ "▌╙╥e[╚
юЭц╠М⌠_©v_ПN÷ьФ-28╕П╝©{$1▐2Б_л╜!И▓пSЪц╪cLx+[Чф╩┼З8Ды╓W╨╜С>F\E■IКwР_Ф9 г┼|CБ?N╣жУ{█Nча]mwо■╥6=I2╜m]ж9a@*ТЦтв²├бbqMШчг╞┴еАПи{W╧Ь0ъ>(8a'█5	│╩[ЁФ2©ОT┌▒ЙгBG"Ё╣┴ч=уТ-OLуoЬ┬{╥┼╝У╙┤Э┤Ж,╟┘XЬCдЁ;ЦЯUфЦЬ]Q╚^NяoО9╔W▓ZyкW┼и.─`-С≈qu≈Оc Ф╬≈├iб╝}├└сiк╕╞╞CФ╦▒_#╝╧■tщМ╨?l═Я╛ГH╪╦e░[ЛыФЛ;d|╩╨gш╜hЬs_╧Я▀М╢⌡{╢╣WW√{≥Oиo.И$oeЪ*С;┴Ч3╠╤ч╣╢якq|┤Й(Ш╠~РwФу%╕█7╛·▌)Y&шсК╡	ЕУ3з2ёQ╤ш╢_OvW╬ВV╡ZъvЖвДOы≈[OЧщ©
У┤▒b[}HЕщ╟buКЬвН0Ь╨аrg²&[÷^xHМv+ьЖ.ЧпЧ0|S╦Я▀u╣]Ib┬╨u╨шд╠║ `ЮВчщN√╤╤Ч'╟√i╔m╘╜лdЁю▓kяЧ'⌡К▐╚Ш┴╝╔7IШи╔.{З П+vш╗@ч▓)ЩkАЬй°)Ф1╖eх©#Л8~.√Мъч©Ю©хЧГ5/┼рНaЧтЯ5√√.cС╜ РQ·3рDщ█й╪8╞(ЬаЯ┤ц╘ПS╦Пo┼mu²b7YQЭ╚Л╞│Ъб─°│÷Ь⌡Kо╤╬1▄Бч/ВGР╞Ё~Чов▐Ы▀KоЮ╣ап{┼Л|Гцn4Rи}╒N?┬В╒╤т┐Й█=⌡Лс╤pvк░_╫_┘звЭ▌╥Щ~KЪ║ Щн╠з╠э1R╓╓≤ДГ
_├ZвЭ▌╥Щ~KЪ║ Г╘п╦≥╖ОШСЧ	чзUвМ╞Ь~ШP╢╟╬у)╔┌Й)Ю▒А·6▒╠VF ┌:{вNW/фCKБ┐╧ФФ≥},в/╘┐╙з▄у╢ШвБ▐ЙBo[ккB|и▄FH╒э└╘Д┌#▌╣||3╨m7МQy╒Ш?°АfO1=
nн}╠_├_Ч%Чс'Ьmkq═Эzж╜DW▀d√R^хфщ8д▓╬	Tию8aэ╖opkЖ┘гNQR▄gВ'ЕЭхЧs╖Ан>5%уi╣я)I5уoюЩи╣ПZч\з[$┌э7кФоT$Д°Я_∙ПR├с4o|;Пr^зщk√░э]чеmr▓≤B╙│Ж1зNр@В╡╓ъlUyАWЬо═К ╞├|ЦKмu4hЦ7┴о▓╠≈г├c░═┌z;W⌠цЩ═УС╔ЯЗИжN≈
mw6╟sy Е├9Рк║Я─G8╙цбЪ╢юr▓x ФMк8⌠XAЖwяЩL╝н═Дt╞╟║еyU
╣*сцT╫F╞╤╜+.╨|▐÷·S┴²■╚Gщ_┤эYЬУai╒|*Ё╢≥ж;Ш╚уhaолUAэьТД
Ы÷а⌠ХжъЭ+sБ8√E╛[>╘╘*ЖБU2┌PSuvЭЦ_ЬЗф/_и╘_ЙZ|Wж╥2н]╓┘фAД▓╦;├?ы5Гz>≥q╜ЬЁLя╛лkww╢&Wз│Дp╚⌠ьd▄ Эг┬ЁE⌡ЦщeD╒▓O{jНЩn}╕W├З╕C⌡≥чВИ~гЖ7╙~й╬+ХчЯD╨ZЬЦFDQhWсЙk█,╬ТQц!В`x╜_Чфъ|/Б╣+ю╠iВKеГзнПK╣├wфU╟Gg Чo|╛Чс_
╪?Б	|Щ║╣÷ЬoG╦∙.М╬яqcgрoС#┴eRJ2─╜тЮж╜÷МЪ╩ЯЖ╞А▐Ь_>%╣ж╢шXГ╨╥╦жЦR╕OУqgnЁ╕^гxж ═"▐t>N7и'Вi╪e├zВ╞jx≥J
FН!Кз²╤~оw╗о0Ь=4O┴?5▐Ьr& f╤©ЯЩ▄yDaД
Bе≈fЧNAЦ╜|╣ЦО└·"ЬqЮъj·"·яnu√≥E▄y▓Z≤╤ed#ЕщС▌8╞╙╙А╙}шg╖Kьф~КZ°|l|≤╧ЦЫWзъЁП-Ш?н:÷МyGЧ:+БHэcЛ?∙}╩ШДы)%WЩЙЭ3жN|]╙÷[иТ3_╧└÷╤^©F╞ц}gЧFЩWЧ©%ЪпмsтХi╕qШф▓■ЩЦIXV>$Я≈╔7[╬╟╡3╛ЧE╫с╒y▀яП^°ШUЪЬMЭc┘Ъ┼ёTm
╒БЗN!'q▐╞що8╝Z┼╔)-≥.1{ё║╨Яo┼/╢IТшъj7z|еL╤С^;ёМ$╝AДРC╠╚╘k ж╠
╢z╤╜w╘╔╦"э]\4·P8х]дЮ·∙√╛йА■∙`rЙ)(╘m╫йI-▌фЦБ▌О5╨╫Я~╞{2╒&К█BI7*╘US⌠хзл0{КEодщxЦ^Я#Ь÷P▀[ж▒⌠T╨┌Е╒k╓l█╥\1с┼Ц╗╙Г≈ry#ьж╦в╣╩╢╩[╜^РАn╕I╝D≈,чt┬Gl·YA хмnч|EЯН║a╗ZъxоZ╪╤╬┘!╫┼mJVYЦA┘W╟@`вE%)-≤ЫbЗз.╩╜xoд0Йчуn╢mN DwVs╢R(#S°еiшЬЦфV╩~оБ╜Z╤р[.шЫ"▒л▐_╨]▀ЩБOZЕ╗║JKf1{ё╔ЁЯ≈▀4Ш²Nk/jV╡Й2	oз+гSrЙш┐??3Г' Х%Ь╧Я6m"бфOК&;с{но8ЩЦ8;≥├┼С╙)╘мlеигkЪ#БB©П К[лЕ╢╔аi├%$g²щСXЗг┼&ф;к╖∙mс▐∙╢p:z
б╒┤9╫ь(еl█eoщ╖пWэъЁ≈?Ё█яxЙСgпЭ╚_╖э_б╬ОЩ ╒2~нв©Я8⌡$ТШ╚ZEщ┼JхУ╥┴╪Гц°n?цEjиo/·Ьn8ЩЕрf{%┴W├]Цl■Д{n╞ц²cЧFщSЧ©%Ъпм~Бь°шн"$╡ЖМСq·уЬw╛Ъхщ╙Я▐ТиxО Ф╘пр=LЦВ█%)Шф▓╟4
(╒─
(╒─
(╒─
(╒─
(╒─
(╒─
(╒─
(╒─
(╒─
(╒─4P²╚м~│ЧкяОЩ⌡Н▌дЙ^╫╬U╞о■p3_╒_╡ ?fкЮ8\■dВЫ╣┤дg-▐j▓ъВОШ∙?1МEn╪+Г?лёФ█kHл▄IД÷J*ЦЫV÷┌h╝ц÷A╤ls1х#°▒в├╞дMcЧFщSЧ©%Ъпм~зь╟k9ш';$ю?П*ЭJуЪДlу?КНOЩв5M,ohЪ:_ЬBУ\°4|Z~ф╖`Жт╩·цПCА_б┬?	Ч.К?~5Z|,вГУП&╗F|Ь@н3 ▐cW╠^ч≈s┬╒╩╞Ь@╣NВ~
O_┤з╩╛╠▒Й╖Л*ЖoK╧аQ]ЪЭ+мcС#Ъ╬M4Э=угч√5╓=┘^аМИw8*+пцщL▐ЬЗ┐С4ЕЬu╙а╩│yОOЙУ╩К{·{EzR|2уъНэдG╟&╓_┘╨кyЯ┐ЧА4Ч╜[╟}b▐sлkТОЖ>VoыWPшгЭOdо©Нж©2Нak{ИМьЕ╒▒░°wЗsШ╘?╡²ЫЧcРПz╚Zйч5√╠>°aШфЩпКEZhTхгк'╣жcc°╠+ЖyBР1 Ъп╚Я7WЪ▒ЁTЪ╞╧?Т3_╤69e░╠6и│МСs_┴ЗгЭ█з╞Щ~KЪ║ Г╚пзп_
4K{Ъ├╜8ЭЩ┼ЪgшkъбиnНО╝╣yD`
▄Y┴ $░yТhФ▒Q╖9FR╥См_^э÷#Т|Fyау*J╜(T┘6ТN┘m≈Ж╙ЩЖЙxg▐Тx#F╤ЧчП/│.М╞╕▓ч1e╔BI(~B▄c*2R+С╥Бg└W╟0HБ╦зЪЖsПGюЪ┬>▀а╡_к╜╖лв_n╧3cunz ╩ptЁ)c_5HР%╛o&Жщ^+ЧЯ3эс└Я*╔┤║QboНо▓▀WwMFrИ╖_{╠Ы╧╞iз~┘ЮШМU╒Y╪┬╡▒▒ц╥aЧЗГ{ЖЬyЯ⌡ЦОдgПГцм.хшш(⌠Rтn╜"K2#ЭRййOпrго▀pгaП+W╦⌠!w"▌	Ы▀`~©Г╜~ЬЧи_АЬ=ШЭ7По┤N÷ч╚╕г╚xпKk▀иn0lУ
╙vМ^ТсЖ▒┼рИЁР{з▀⌠ОoтЫoNЪ┌y6²e║ZxЁЦ²╚kz╩╢VgIП└Z≈$nnHВБ╬jЩё?cъ▌?|БМSр~!x.хy╕i%м─гч ╓┘e│8о8╞ьK?▀·_▄vЧЯE└~Я>┐rР╜╬╘└╢╦│я╪╩╚[├░FC+d^╚w╘Хз╤┴4V F╖╖^>5@/" )╜йМ░	щ∙Б╥└М>I⌠Ы|╜mс0╗╔q°VЙЧ[╣Щ[╞э(>©┐дВVz┘╓)}n╬`·Г)ЧРТхУc╝:в╓iЧ╟╪вl╛ъ╜ейBe+бН`╧ЩоJМ~*Э2я╬аRЧ&Э?п┬Mф ·▐Д┬М╕EP}v╟╘d╤Ш$+zS┴'Cф┤ЫвF▐5dщЩД╬Ш≥²J╤╔М \ЩП▐└~
Ьа6з5≈┌4[Ж┴з/u;Нg╦|rлн>┐│]√⌠╒xoдрм┘Чhзв■цлk_юх╬е╤Ю~uЯЭ'M╗Ь⌠N╟ЧяHрФЕ"%╓ф70Ч╣З╓╫ж▐А{MIV╡рМ#1eCrМ▌╓·rk⌡е.!╔ю8╨J╓[©d╛╬ШЁ~	иkq≤╙С╡▀╥лЯ;≈П>┴Б7р╪CП╥Aя╞в⌠ъ┤`█┬УNG╦╞ЬОПВА_┼>j·!р|7╖Ьwд╨|~|wd+N═─ях▀┘93 В©▌РIwШ8Ь┌ШT$оёAЖ╩╘Г│┐T7]╓²+ЮЫэfRИqTK▓kГitЮ-e*┤┘'║Ъ?ГИ_fЙЗUъ▄?mо	x"Ъ╠И▒ЬE⌡S6≈ПG{d╡@а.└03D╛Щ╫sC∙jШ~╗ж\мhz█┘╢w├(,Э3ПЗЖGх▄EПН.Tn8ЫЫ rjт╤иkГц~╣Y═д[Атtg─Ц/пЦ╜bЭIЩ╝ЭПБOЭ+▐|+oxжыё╧©╨╦╥▓чм╝XГЁ(юЗС▐Р=┴ШШе╤▓Э>Щ╢█Ш5[ЭcрЭgkЯ7RЯ╬⌡
Н╬╡Hg≥∙*Am╦б╞Aз╫Ч
ew╜гЪЭЬ)╓Хж1Й╜╘xШE├M2y6а|аwG©Л3┘╬╕Щ╙~h©╣Лв╕Ь╪}mА8 вmuaгs©и$└╪sв5с|vЬ3Юъ▌Ъ╡tЪ5о&█4g╦р5╩;└uЕ╧

д|Уzg░H╜HN╢')oNpmъFЫ▓o╚I4ТХ╢)F┤%·∙#$╪▓┘МсtТН|?еO█÷?Юё_Э!ШMЬА╞┼╢ъNЖ^
Я└╢ы#╩ПепQЧ▌l√NUK.э┐▒сОЬ(&÷ЖО┴_2	)╕эТЪ╝┴]÷─?eo7МIЮъ▄_╢вМmЯ⌠PПЁ╖└,ё╠┐NЁ╡r0nГц~Р\wЮx╞"ЬcБ╖ф⌡Эy╫╒ХV╜jЗ╜╧щдЛЫu┴╨8M═$pk╖ЧПзш∙-Н╞жчO╥╚I-1i{(╝╪мМm:_оопЭ≈Щ╒t÷╠Чй лЕJ╡эа┌}w▐СЧp?|©e/┴:?еОьГА▐∙▀А╜_а╬1П╪z▌⌠╝ьмЫg├[┘▌kwЧ(ДF!∙│ЦW╔xhЬ?EПф╜is╙[⌡▀╧jFжр ^Нw7.?┤9PyфkУ©xo├╪EюсY°dЙр~ДА+I&ужрMuуt?	А~7л╡,DПВЕ▀╫т╢у/UgсТ>rЬщЯ┌КЦ.▌ЧП/├/Тo	M:6╖╙j)╤{╣S╦D╠▐╦╧°°°W⌡Y|;:└Д&#┬ёийвщ+жТ=n8╢ш=OMm*4▄и,РAВ╗аrC3И·ч°W▐Ь▐WПТ2гА╫.ЧвVвНП
╔°╚1├,ЭрHTА:dД·≥╝·кrА ≥~YOыфi╧╧K RmZРv]4I%c\о┼s!Б*1ФЖ┴8╔e╒Wв╚яo{ьЫрO⌠═║?!фG'▐СЧzзЩ╙ЕЬ│aБ
rОа╬ж&╧Ь]╕Xа╗ьhhРZYB]╘СзЙЩ ╬8К:F⌠╓Ьkг:РгБ+-AТ╩-S^Lэi6Ыбdo⌡h`x'┐г/МgЦ	xРжЦц╨╞┬Л╞У²&ЯE▐┬ЛЦiL┬GмI ┐х─E}5ШUЧй:Вф
i~1П├nс┐▓1▄√$Дв/ШЧхZ÷ц/ъЬГЦf⌠А╫WW╟Х╨[x©O≥w▌Е|р═Г\G ┌
q{п╣8╢ЦчШynwZnЁрIМЧG≈Э8÷ф╨wа÷┤px┐цВw░xv;⌡k/чx}д┴o$rБY╓;Б╟├Ж╞╒╢Мu╬·e╥*`Й╠Ч_Ю>╦Я┼╖Я&│╘Иъ╣ъ
ЬwцdtсуыёпД╘)96З÷нo▌кЬмБХЯ█╨упгЩ╤jЩ&Щ▄7Л÷╗▄ЦЧ'р÷Э├∙ЫгЯv~п~:Aфъч▐Э▌УЗ?Ш▓d╫H█~^ЩsJЬеЭF}▐Э╩Gу╕$,I▒ЁТ╒∙ёV9Йh╝⌠нlY■Jх"BNч╞е█kЧG-[÷Ы}≈ЪC5Ш?a╥к≈ЕЦ┐Ъ▐WЦЁ▐ЬLultШd©З╝z╫
Ю~┬~мЪЭ1А/ыGJПФ╔╕Й]шЙ2∙О┴Яъю╨нм╪5╙Й©lu┘lм╢ryлг
╩sи'ЫkАi·П░сНЛН&■Lо╨"1┐У╞Cп╬8И╬Я·⌠╞iж▒ЙuДwvнаY┐)#>╒╩hb=∙+5нГ▐[
ЙVrqяЁТ╖Wр|?║xчгцZ÷а[КW{╠*²м┘ё■╒Д`▒┐еsx⌡А²╣дЯэ|'Я,o-.l╔!╔┴щ█╧ФИЗв▐i_ПQ[МSв╝4┤:▒Щ╛БK║
ёрН,Рd$√bOэ
2нлл╗√bУИ_⌡кЯ≈ц]Т╫CСOЯ╝ОАОМKaПЦБКЗN│&╓'╠ фЗцP█^чНзeш$N│▌Ю┐Ic`≈фR⌡Ш'ъ~!┤ю^╫X╪AПQ╟s≈+ёц*ЕН,┘■ю─IГ╥╙z├╜П╩GПу·╞╚Эт4М2Ищ!╦╧я"E,└1йЮ▒В─нxнMx>⌠Ъ&вТO╤⌠╔ЬCM╡с▓%┼рЛKEWfT╬a┼А╡^╪ждЬ(
вдo└в·	ж╕сЪh├З^⌡·⌡А█Nбяи╫╪H╙}─?ГР╜4Щё╪Hф┴╛Ъ\ЦЪБ╚С|tП Тр5 }дЦR▌ЧЪ═>╓O╠OЯ╗ЗщГЧ╬АЩNёШЙ~∙eА_┼зuг▀4╞│з┤▀cI+█B;[}шсi`гx$█ЙyУЗв'9Ь[k╜M╕оПVkхДh≥#яВ┌UЖ0$Еэ3ъ╔|≥П╚ЖУт>xsWр|'ё╥d≥╢&шЕ_∙│*|л╘;┴$p;WоЪkХ~&xЩ|IБ}.З]Im"╣Aе█#┴v╗U,q·╖м'▐ё5ngСвТ)`╚-Б~├цIx/~F│╚÷ШВЧ?OкИZzW┴ЭЯ▐W╧╢╠ЬMwЦ╫2тэлnb╤f┬n.ЛДЮРx╞й╔ЬЩАpД╘Ь█z/цш2ъАo▀╝u╞xrKк╚▀co"_ф╡&эД9AН+5█ё~КН/Йu_ы>ЪрТоК╠э>▒Ш7К7и╘∙⌠H@═1!NXЮ┐╟Р3сК wgАМ·╛l%Щ²u)n┼'⌠╒╛╚!⌠╠■ьp∙|ш7ЭШф⌠┬╪мыo%VуQa$6уpЮМ `c╤kcц?ПT█oNЯ■^$П└ ж├┬╙Зu╘KbJ√*UРvРэЦ▓Ф╚КЬ~ОЗЫтЯ©?С=чшБ▐цъ\G=╖б;Ъ
Mt└е/Ж|vм2Г
╢░	К┼ш╤Щ╕|)║╚А╜Q┼хх3┐УЪ?·~	Ь╔ШsмЯfM-sмф)╫╬^ТWQ²▐1с┬"@$K╦g▐Б╞еЩkЧG[Ч©eЪпм~мы╩ЯР÷чЩ
©u©ЫУЗЩ≈ЪC5оW║╛:≥tQEs Х╒─
(╒─
(╒─'ж│вП╓╚QМ┼1#(y|─ТФ─#хSvэе▌(╩gj├Ж5nвOу5iДZ▄┬u╥│╓*L┘=ж┐╞XX⌡╚щP╡╥S┐4жoЧЯ═┌
╠}
'z╤╛'O-оО1Р?Т5WКж─÷ZJ(═┼(═'ж≈'i(═▄▒пяEм~╛~еxЪ├Gт╬lЦ_≈ЕЮк4╞йzЩWЩ┼ЪДрu÷Р0каЪ╝iZCБ"_	Уc(С▌Ъэ╒∙у╪ГЫЪ┬я]├'∙X
лЕ≈p>`'ЧЗИ_▄zъ3угЩ>кЪ║ Щ╙т-▌┴ЯWд:йпкc╚эзЛ~╠Л∙√©Э[bЖЭGa01╪Z╓ХwШц\уЛi
ымQRI▌FV Бё╛
B┼(═┼(═┼(═▒V&l^0
╪zUqц]>тУ-1oТХЙ1д┴Ы▒┤PGК@е}Бm{а_╡'цЬDУ[▐и╚эjW:╓З|├)nч9└qОqкQ─╫IОVЧЭCЯ©┬Ъh©
xoд>(тuщU∙ЛУ
?Q╧7\BЯ╤Еd|▐pz┌2+7O⌡ач#ЬАъЬКRуЭ╘ЬnФЕ╛О!язРхn;#(e(ЙюЮР>у╜АH~Ьгv^1р╪e╜ЬгUрВкa╓еА╖╣*⌡Дg!P⌠│⌠▄
ЫЦP█-╣Шь!c┼Ау=bCpsrг-┌q]	ПН╩sqqdжp╩4╡к0ь╙	$·y╝rbА┼°╝p╖т
┼┼(═┼(═┼(═┼(═©V©b╛ыRЪбC.3оЭЁJЭ╕9УМ_╜╠щёы~фВ
÷lжneB{│╣3Ы┐ZсЬ┬√гсО"	X9иИETg╦21K9IА│Ю▐Z+ё≥7М┘Юk÷┤_╥o┬/"┘ёяЭP╠╖к▄)v8²?З5~8Чяч≈KЬ═|gem#[mс╪Apл╖ы╠▒ЬвУёШPЭ┤ЦгЛЖзU└░ьЬоI■чxzРnмш├┘о]▓║з{WСГЦ_
Mc╗x┐ю~©пuo┤^*ЁG╢Я5с@х▌зQ4┤ь*У╞▀▌│╝н█{УШ+Ъ┘'Ж╥Ъ@{ъЭП╓║xЪгж Жt©[иkё╚|Сл}uУб╬уДЧ╣╜Щ┐╝пВЪ_Э(Чав?Х{Ъ─╞ЧфdяZгAв]Т}m_Э(Чювq÷ЛkЛв╚Ъ┘dяZ╖Aв]Тш╚Ъ┘/Ж╧▐Ы_Ю+Ъ┘╨2h╜ЬGУяЪ0[ОЭП╓Чавsё_Ю+Ъ┘c2h╜ь╪/БIэ,:║#▐Ччx{Ю╖д_^F╠ХRi√л@k⌡СЕ"▐\OЮ(Ёb╨G÷ЬCт╪KЦ;AяМ ОR╬²a┌5I=O╟Й}╚Жцюч┐аъ
╪/Ю╜(≥,╜cЁ▐bСq;╦▐vv5Соа©└збШ	5▒uн⌡nu▐	}ж yQЙг⌠_╞?╠Ъю²GXЯM┤е÷Иъgп-TиАШ[┘!О&|{я█ф©hз'▄!┐к╡Я&·│nb╒хк*╡ъ│Т▒ИИ^}Б_Щ┌i,╢┬жФЯxy⌡■▄ЗОjВ╥SПКБЛ
ШBЬ/S≥╪3╓ы|Iпв&+╫&И`╦?г└`Ъ╨H╞▒╣ъ├t+╥┤WЬqБkGзTИ▐'>≥L┼Ч┤uIУ=RЮм╗ъOrsюfб╞пt▄cH▌о∙·бNkngтц▒н╒ЬSг║_>Я^?БM8ЪыjEП÷▐Ъo┬FFsЩ▐?Ъ_яPt╩ЭД╔йЪоФ?Юf▌o Е?·АO│Рx3д>ЪЯ'÷Ъ┴╖7┘╪zy>
ЯzЬ⌠оЪдвТ?╧?ГОЪ"R▄ЪкГЧDё≥Ж)ЭП	ЬУFG┐|CХOЖf┬ЧzЪАЯжyП┬IщгЭIГЪБjUП╥▌╥Ъх²╞ЪЮ╒Ч&©║
И▐ЬШОЪ=)wгЪ?÷Ы▌`ДGСРЧйЖ∙ы^цР╞AЧнэ4gНСОЛ╞aЫQЩ∙Л?*ТЛАЩцGЖpЧА═>ЧйЖ∙ы^цР╞AЧнэ4gНСОЛ╬:й▐Л©aЫW═ЪgЩцSC╔фX≈\/╕:п².▐#Щх▀Щ4ГпФA≈╥(=Jв╘┬√1└яE(PДдP⌠█+▌┐РёШ+ь~UИ≈t.е▒@nЮt5OШй╬├╥v/╔р─0╬й╬├▐╡╞║╜щ▀ИFеТ═/╡╞║ёЛэwюИ[╩р┌▀┐еf■}≤zщь╬■l_JбШ*З>й╬├╥v/╔р─0╬й╬├▐╡╞║╜щ▀ИFеТ═/╡╞║ёЛ╚ХkwbЗQ╠}(Л╚ХhШ*Зщь╬■l_JбШ(ЧИ╜{1dF8щю╘╤/╔]╤QД7Шт[и8╒╞3EЪы
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/INF131/12W/iclicker.htm
##-----------------TITLE------------------------##
Information on i>clicker
##------------------TEXT------------------------##
Information on the i>clicker



To gauge in-class participation, I will partly rely on the i>clicker response system from the third week of class onwards. If you want to receive bonus points for your in-class participation, I recommended that you buy a new or used i>clicker or i>clicker2 remote, or rent or borrow one, and then register
it using the same name and student ID as that on the UCI Registrar’s
student roster. It’s OK to share an iClicker with a friend who is not
enrolled in this class.

Hardware Tips:
Pull the plastic tab from the back of your remote before use to
activate the batteries! All remotes have a 200 hour battery life, so
this should last a full quarter or more.Red flashing "low battery" light means 10 hours still remaining.
To change batteries (3 AAA), place a pen cap in the battery notch.

More questions?
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/courses/INF131/12W/Term%20Project%20INF%20131.htm
##-----------------TITLE------------------------##
Term Project INF 131
##------------------TEXT------------------------##
                     

          IN4MATX
131 Term Project                            
 
The main aims of this
term project are to determine (a) whether users have troubles finding the web page for making appointments with a librarian,
and (b) whether they are satisfied with the confirmation message that
they receive once they submitted an appointment request. Other comments
from them on the usability of this page, or the Libraries website in
general, are also welcome.

The project
should be carried out by pairs of two INF 131 students (the
"experimenters"). You can sign up for a project team here (join an existing student if you don't have a partner yet, or open up a new team). The
outcome of the
project should be a written report that addresses the above aims. The term papers
are due by March 18 in this dropbox.
The estimated work time is 2 hours for the experiment (10
minutes each subject, and one hour for setup), 2-3 hours for analyzing the videos, and about a day
for
writing
the report. 


This project
will be conducted in collaboration with the UCI Libraries who
    will be very eager to read about your
findings.

1. Choice of Loation, Time, Computer, Capture Software 
and Web Browser

Several days
before the experiment, determine where you will run the experiment and
what computer you will use. 

Location:
The
location
should
have
a
desk
and three
chairs as well as Internet connectivity that is good enough for web
browsing. It should be indoors or at least in the shade so that
subjects can easily view the screen. Subjects should also not
become distracted by others, nor
distract
others by their talking. The best strategy is to install yourselves at
some public space and to lure nearby students to your experiment,
rather than asking people to come to a specific location at a specific
time. 
    Computer: The computer should have a screen of at least 13",
 be
powerful enough
to
run
screen & audio recording software while the test user browses the web, and
record
audio
through
an
internal or external microphone. 
    Screen and Audio Recording ("Screencasting") Software: Any such software is fine as long as
you are able to eventually create an integrated video/audio file that can be
played
in
Windows Media Player or Quicktime. HCI professionals typically use Camtasia Studio (for
Mac and PC) or Morae
Recorder (for PC only), which both have a 30-day free trial period. In addition, many freeware and shareware choices exist, both for Windows (the Libraries like CamStudio) and MacOS .
2. Preparation for the experiment


Install your
    recording software, restart the computer, launch your web
      browser and the
    screen/audio recorder, and record some of your own web browsing with
    oral commentary. Make sure that this software does not noticeably slow
    down your web browsing. If it does, reduce the color depth of the
    recording, down to grayscale if needed. If this is not enough, reduce the
      frame rate of the recording, down to four frames per second if needed.
      If this
      does
      not
      help either, use a faster computer.PC users will most likely need an external microphone.
Download, print
    and read the entire Instructions
    for the Experimenter beforehand. Do not
    share them with the test users.
3. Setup on the Day of
      the Experiment:

Perform the study on six test users who must NOT be ICS or Engineering majors, following the Instructions
    for the Experimenter.
    
 
4. Report and CD/DVD:
Draft the report very soon after performing
the experiment, so that you will better recall details that may be
important.To
prepare the report, you should replay and analyze the videos. Take
notes while watching them. 
Compare your notes with the notes that you
took during the experiment.Draft a report that discusseswhether users have troubles finding the web page for making appointments with a librarianwhether they are satisfied with the confirmation message that they receive once they submitted an appointment request, 
      anything else that users reported or that you observed, andrecommendations for design improvements that you may have.
      
If your subjects encounter problems with other
parts of the website (e.g., with its interface design and/or
information organization), then also describe those together with possible suggestions for
design improvements.Write
a
report of around 8 pages about your user study (use the
default format of MS Word, which means single-spaced, 1" margin at the
top and bottom, 1.25" margin left and right, and 10pt extra space after
new paragraphs). About 1-2 pages total should be non-textual, including
e.g. figures and tables with some of your results, [annotated] screen
shots
that illustrate what you explain in
your text, or mockups that show your redesign.The report
will be graded based on
    the
clarity of your description of what the user did and said, and what problems
          s/he
encountered (feel free to quote users verbatim if it is important)
the
thoughtfulness of your analysis of why these problems occurredthe
thoughtfulness of your recommendations for improvement (less important)
  Submit a single copy of your report and make sure it includes the names of both students but not their IDs. Since your
report will be forwarded to  the UCI Libraries you may also omit your
      names, but then send both names to the TA. Note though that the UCI Libraries sometimes hire INF
      131 students.
Upload your
report to the class dropbox,
by March 18 at 11:55pm at the latest.Burn a CD/DVD
or create a USB stick with your audio/video recording in a format that is compatible with
Windows Media Player or Quicktime. Write both names on
      it, and turn it in
at the beginning of the final exam on March 22 at 8am.


5. Some advice on the report:
Include some statistics on the demographics of the subjects.Do not use subjects' real names, but rather codes like "Subject 1" or similar.Organize your
report preferably by issue and not by subject. You can then "summarize"
certain findings by saying things like "4 out of 6 subjects were not
able to find..."
    When describing user
      actions and associated problems/difficulties, state them clearly. For example: "The
      user clicked on the  <insert name
      of link/button/whatever> to go to the <descriptive name>" is
      better than "She went to the link on the left to go to the next page." You
  can't receive credit for what we have to guess you mean.Your
  criticism and recommendations in your report should be based on HCI and web
      design guidelines presented in class (but you are welcome to also present
      a
  few personal opinions that are not grounded in HCI theory).No, you don't
need an "IRB approval" for this user study (don't bother if you don't know
what this is).
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/index.html
##-----------------TITLE------------------------##
Homepage Alfred Kobsa
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/privacy/intlprivlawsurvey.html
##-----------------TITLE------------------------##
Privacy law
##------------------TEXT------------------------##
 Registration       
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websiteDuty
to respect user requests for Duty       
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction       
of Personal DataOther Impacts on       
PersonalizationResource 
URLArgentina yes 

  ?  ?       
yes
Inspection 
CorrectionexceptionArgentina        
?　 yes
exceptions (1, 2)
yes
yes 
exception　?Argentina
yes 
yes　http://www.ulpiano.com/Dataprotection_argentina.htmAustralia　?
 yes
 yes
yes 
yes
Inspection
InspectionAustralia　?        
? yes
yes
yes　?Australia
yes
process for
other purposeshttp://www.austlii.edu.au/au/legis/cth/consol_act/pa1988108/Austria yes content
　?          
?
yes
Inspection 
Rectification,
Erasure Austria
yes
yes 
yes
yes
yesAustria
    yes
 Employing processors  
Disclose 
identityDamagesJoint
information systemshttp://www.bka.gv.at/datenschutz/dsg2000e.htm Registration       
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websitesDuty
to respect user requests for Duty       
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction       
of Personal DataOther Impacts on       
PersonalizationResource 
URLCanada         
?    ? 　?
yes
InspectionCanada　?
yes exceptions　?        
?  ?Canada
yes 

Limiting Collection 
Limiting
Use, Disclosure, and RetentionOpennessChallenging
Compliancehttp://www.parl.gc.ca/36/1/parlbus/chambus/house/bills/government/C-54/C-54_2/C-54TOCE.htmlDenmark yes exemption
　?          
?
yes exception
Inspection Correction,
Erasure, Blocking Denmark
yes yes
yes exception
 yes (7-12)
yes yesDenmark
yes  Credit information 
agencieshttp://www.datatilsynet.dk/include/show.article.asp?art_id=443&sub_url=/lovgivning/indhold.asp&nodate=1Finland yes
yes  ? 
yes 
exception
certain 
situation
Inspection 
(exception)
CorrectionFinland
yes
yes
yesprohibition
yes 
exception
yesFinland
yes　http://www.tietosuoja.fi/uploads/hopxtvf.HTMGermany 
(1994)
yes         
?　   ? yes
yes Inspection Correction,
Erasure, BlockingGermany
(1994) yes  yes
 　?         
?
yes ?　?Germany
(1994)　 　http://www.bfd.bund.de/information/BDSG_neu.pdf* Registration       
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websitesDuty
to respect user requests for Duty       
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction       
of Personal DataOther Impacts on       
PersonalizationResource 
URLGreece yes  no no
yes
Inspection  Correction,
Deletion, etc. BlockingGreece
yes
yes exceptions
 yes
yes
yesGreece
no　http://www.privacyexchange.org/legal/nat/omni/greece.html  Hongkong
yes
yes　?
yes
Inspection (exception)Correction
(exception)
 Hongkong  ?　?        
? yes         
?　  Hongkong
    yes
  　http://www.privacy.com.hk/contents.htmlHungary yes changesexception　?
  ? yes
Inspection (exception)Correction,
Erasure (Notification)Hungary　?
yes exceptions
 yes
yes　?Hungary  ?
 Compensationhttp://www.obh.hu/adatved/indexek/AVTV-EN.htmIceland yes contents
　?  yes
yes yes
Inspection Inspection
(Restriction)CorrectionDeletion,
Blocking Iceland        
?　 yes exceptions
 yes
yes exception
yesIceland
    yes
  Reliability   
and quality of personal data    
http://www.dataprivacy.ie/6ai.htm Registration       
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websiteDuty
to respect user requests for Duty       
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction       
of Personal DataOther Impacts on       
PersonalizationResource 
URLIreland yes  no  ?        
? Inspection (Restriction)Rectification,
Erasure, etc. Ireland
yes　?
  ? yes
noIreland
no　http://www.personuvernd.is/tolvunefnd.nsf/pages/1E685B166D04084D00256922004744AE 

Israel
yesexceptions
    
      no
    
no
    
yes
    
InspectionAmendment
    Israel
      no
    
      no
    
      no
    
      no
    
      no
    Israel
      no　
    　http://www.law.co.il/computer-law/privacy_law_english.htmItaly
yes 
exception  ?  
yes
yes
Inspection, 
Blocking, Erasure,
Correction, etc. (limitation)Italy
      yes
    yes
exceptionsyesyes　?Italy　http://www.privacyexchange.org/legal/nat/omni/italy.htmlLatvia yes 
exception
 no no yes
yes
Inspection
Rectificationexception
Latvia
yes
yes 
exception
 yes
yes 
exemption
noLatvia
no　http://www.privacyexchange.org/legal/nat/omni/latvialaw.htmlLithuania 
yes   ?        
? yes for
data recipient Inspection
Correction, 
ErasureexceptionLithuania
yes
yes　?
yes 　?Lithuania
yes　　 Registration       
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websitesDuty
to respect user requests for Duty       
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction       
of Personal DataOther Impacts on       
PersonalizationResource 
URLNetherlands
yes particularsexemptionunder
request  ?　  no yes
 Inspection
Correction, Supplement, Deletion,
Blocking (Informing Third
Party)Netherlands
yes yes
yes exceptions
 yes
exception
yes exception
yesNetherlands
yes (exception) 

Exemptions and 
Restrictionshttp://home.planet.nl/~privacy1/wbp_en_rev.htm　New Zealand　?
  ?   ?
yes exception
Inspection (exception)Correction
New 
Zealand　?        
?   ?  ?        
?New Zealand
yes 
Limits (10, 
11)Unique
identifiershttp://www.knowledge-basket.co.nz/privacy/legislation/1993028/toc.html 

Amendment: http://www.knowledge-basket.co.nz/privacy/legislation/legislation.html　Norway yes 　? 
no yes(19-21)exceptions
Inspection Regarding
Automated DecisionBlockingBlocking 
    & ErasureRectificationNorway　?
yes exceptions
 yes
yes yesNorway
yes  Data
Securityhttp://www.datatilsynet.no/lov/loven/poleng.html Registration      
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websites
(for web users)Duty to 
respect user
requests for Duty      
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction      
of Personal DataOther Impacts on      
PersonalizationResource 
URLPoland yes informationexceptions
 no no yes
other 
situations
Inspection 
Correction, Erasure,
Blocking, etc. (1, 2)(Notification)(exceptions)Poland
yes
yes exception
yes
yes
noPoland
no Protectionhttp://www.privacyexchange.org/legal/nat/omni/poland.html　Portugal yes content
　?         
?
yes
InspectionInspectionPortugal
yes
yes exceptions
 yes
yes
yes yesPortugal　
　http://www.cnpd.pt/Leis/lei_6798en.htmRussia       
?　  yes
　?        
?
Inspection, Correction,
etc.Russia　
yes 
　　　Russia　
　http://www.datenschutz-berlin.de/gesetze/internat/fen.htmSlovak Republic
yes Filing
for RegistrationDeregistration
　?         
?
yes
Inspection, Correction, 
etc.(Notification)Slovak
Republic yes
yes 
yes
yes　Slovak      
Republic　  Keeping      
Personal Data Up-to-date Instructionhttp://www.statistics.sk/webdata/english/acts/act5298/act5298.htm Registration      
dutiesRecord-keeping 
dutiesReporting
dutiesDisclosure duties 
at websites
Duty to respect user 
requests for Duty      
to respect user veto ("opt out")Duty
to ask for user permission ("opt in")Exceptions
for very sensitive dataRestrictions
on data transfer abroadRestrictions
on foreign sites collecting data inland Archiving/Destruction      
of Personal DataOther Impacts on      
PersonalizationResource 
URLSlovenia yes  yes  no yes
Inspection Correction,
ErasureBlockingSlovenia　
yes
yes
yes
noSlovenia
yes 
　http://www.privacyexchange.org/legal/nat/omni/slovenia.htmlSweden yes  no yes
yes exemption
 Blocking, Erasure, 
Correction, etc.Sweden
yes
yes exceptions
prohibition exemption
yes exemption
yesSweden
yes
damage 
compensationhttp://www.datainspektionen.se/PDF-filer/ovrigt/pul-eng.pdf　Switzerland
yes 

no no       
?　 Inspection
(exceptions)Rectification,
Destruction, etc.Switzerland　
yes exceptions
yes (for Federal 
bodies)
yes
no　Switzerland　
　　Taiwan
yes Information
involved yes
exception　?       
?  ?Taiwan
yes
yes　
yes　Taiwan　　http://www.privacyexchange.org/legal/nat/omni/taiwan.htmlUnited Kingdom
yes　?
yes
yes　?United
Kingdom yes
(exception)yes
yes　?
yes exception
yesUnited
Kingdom　　http://www.legislation.hmso.gov.uk/acts/acts1998/19980029.htmThailand, Japan: public sector only.
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/UI4ALL-2002/ui4all_files/outline_navigation_bar.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/UI4ALL-2002/ui4all_files/navigation_bar.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/UI4ALL-2002/ui4all_files/frame.htm
##-----------------TITLE------------------------##
PowerPoint Presentation  -  Universal Design and Privacy
##------------------TEXT------------------------##
ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/UM2001/um2001_files/navigation_bar.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/UM2001/um2001_files/outline_navigation_bar.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/UM2001/um2001_files/frame.htm
##-----------------TITLE------------------------##
PowerPoint Presentation  -  Tayloring Privacy to Users' Needs
##------------------TEXT------------------------##
ÿ
##------------------URL-------------------------##
http://www.ics.uci.edu/~kobsa/talks/WebNet99/ppframe.htm
##-----------------TITLE------------------------##
Adapting Web Informationto Disabled and Elderly Users
##------------------TEXT------------------------##

##------------------URL-------------------------##
http://www.ics.uci.edu/~xpage/publications.html
##-----------------TITLE------------------------##
Xinru academic webpage:Publications page
##------------------TEXT------------------------##
xinru page
						
					
				
				
				> Home> About Me> Research>> Publications> Curriculum Vitae> Contact
				
				
				
				
				
				
				
				
			
			

			
				Publications
				
Peer-Reviewed Publications
				
(Best paper nominee) Page, X., Knijnenburg, B.P., and Kobsa,
 A. (2013): FYI: Communication Style Preferences Underlie Differences in Location-Sharing Adoption and Usage. Proceedings of the 2013 ACM International Joint Conference on Pervasive and Ubiquitous Computing (UbiComp 2013), Zurich, Switzerland. (accepted in first round review at 18% acceptance rate, final conference acceptance rate was 23%) [DOI] [Latest author copy]
Page, X., Knijnenburg, B.P., and Kobsa, A. (2013): What a Tangled Web We Weave: Lying Backfires in Location-Sharing Social Media. Proceedings of the 2013 ACM Conference on Computer Supported Cooperative Work (CSCW2013), San Antonio, TX. (31% acceptance, higher rate reflects revise and resubmit review process) [DOI] [author copy]
Page, X., Kobsa, A., and Knijnenburg, B.P. (2012): Don't Disturb My Circles! Boundary Preservation Is at the Center of Location-Sharing Concerns. Proceedings of the Sixth International AAAI Conference on Weblogs and Social Media (ICWSM 2012), Dublin, Ireland. Full Paper, Full oral presentation. (9% acceptance for full paper & full oral presentations) [AAAI URL] [author copy] (see the archived talk)
Patil, S., Page, X., and Kobsa, A. (2011): With a Little Help From My Friends: Can Social Navigation Inform Interpersonal Privacy Preferences? Proceedings of the 2011 ACM Conference on Computer Supported Cooperative Work (CSCW), Hangzhou, China. (Equal Contribution by the first 2 authors, 22% acceptance) [DOI 10.1145/1958824.1958885] [author copy]
Page, X. and Kobsa, A. (2010): Navigating the Social Terrain with Google Latitude. Proceedings of iConference 2010, Urbana-Champaign, IL. p.174-178. [URL] [author copy]
Page, X. and Kobsa, A. (2009): The Circles of Latitude: Adoption and Usage of Location Tracking in Online Social Networking, cse, vol.4, pp.1027-1030, 2009 International Conference on Computational Science and Engineering. [DOI 10.1109/CSE.2009.195] [author copy]


Other Publications
Vitak, J., Wisniewski, P., Page, X., Lampinen, A., Litt, E., de Wolf, R., Kelley, P.G., and Sleeper, M. (forthcoming) "The Future of Networked Privacy: Challenges and Opportunities." Extended Abstracts of 2015 ACM Conference on Computer Supported Cooperative Work (CSCW 2015), Vancouver, BC, Canada
Page, X. Tang, K., Stutzman, F., and Lampinen, A. (2013): Measuring Networked Social Privacy: Qualitative and Quantitative Approaches. Extended abstracts of 2013 ACM Conference on Computer Supported Cooperative Work (CSCW 2013), San Antonio, TX. [DOI] [author copy]  (workshop website including accepted papers)
Page, X. and Kobsa, A. (2011): Personality-based Privacy Management for Location-sharing in Diverse Subpopulations. Extended Abstracts iConference 2011, Seattle, WA. [DOI 10.1145/1940761.1940890] [author copy] (This is a description of planned research, see our 2013 Ubicomp paper for results)


Refereed Workshop Papers
Page, X. (2013): Contextual Integrity and Preserving Relationship Boundaries in Location-Sharing Social Media. 2013 CSCW Workshop on Measuring Networked Social Privacy: Qualitative and Quantitative Approaches, San Antonio, TX, USA.
Page, X. and Kobsa, A. (2012): Social Norms and Impression Management in Location-Sharing and Other Social Media. 2012 CSCW Workshop on Reconciling Privacy with Social Media, Bellevue, WA, USA
Page, X. and Kobsa, A. (2011): Considering Social Pressures: Privacy Management in Location-Sharing-Enabled Social Media. 2011 CSCW Workshop on Collaborative Privacy Practices in Social Media, Hangzhou, China
Page, X. (2010): Social Pressures and Privacy in Location-sharing for Social Connectedness. CHI 2010 Workshop on Designing and Evaluating Affective Aspects of Sociable Media to Support Social Connectedness, Atlanta, GA.
##------------------URL-------------------------##
http://www.ics.uci.edu/~xpage/research.html
##-----------------TITLE------------------------##
Xinru academic webpage:Research page
##------------------TEXT------------------------##
xinru page
						
					
				
				
				> Home> About Me>> Research> Publications> Curriculum Vitae> Contact
				
				
				
				
				
				
				
				
			
			

			
				Research
				
Adoption of Location-Sharing Social Media
				
I recently received the iSchools Doctoral Dissertation award as well as a Yahoo! Best Dissertation Fellowship Award for this work. My thesis focuses on multiple aspects of location-sharing social media:
Privacy Concerns, Privacy Management Technology Adoption, Use and Non UseTrait-based influences (e.g. personality, coping style, communication style)Values in DesignUser Interface/Interaction Design
				
This research has resulted in several publications and has been funded by the National Science Foundation, Disney Research, Samsung and Yahoo! Labs. The Institute for Software Research website gives an overview of several findings from this research. 
			
				Social Navigation
				
I have investigated the influence of social navigation on how people set their privacy preferences, particularly instant messaging. See our CSCW '11 paper for more information. This work was funded by National Science Foundation grants.
				Green Transportation
				
	
In conjunction with Disney Research, I researched carpooling incentives and the possibility of using location-sharing services for dynamic carpool matching.
				

				Information Disclosure
We are studying information disclosure behaviors in interpersonal relationships and comparing them with disclosure behaviors towards organizations.


				Haptic Navigation Interfaces for Global Positioning Systems (GPS)
	
I investigated and prototyped new haptic interactions with GPS for Toyota (back in 2003). This included safer and simpler navigation interactions. We built novel haptic inputs and outputs. This work was funded by Toyota and Stanford University and recognized by the James F. Lincoln Arc Welding Foundation in its Student Engineering Design Competition.


			Information Risk (Industry Products)
I have worked on enterprise solutions to information risk problems, using user-centric methods to define and design software that assists organizations and teams. NextPage Document Retention assists organizations who have mobile, distributed work teams with documents, emails and other important records and communications scattered across end user devices. This tool allows them to manage document retention and disposition, making sure they retain the right versions and properly dispose of others in accordance with document retention policy and legislative mandates. With document retention disasters such as Arthur Andersen and Enron, firms are now held accountable to ensure they are complying with document retention policies.
				


I have also worked on tools for coordinating document workflow for mobile, distributed work teams, working off of mobile devices. NextPage Collaboration addresses common workflow problems that are much more challenging when documents are sitting outside a central document repository. Problems such as: Who has the latest version? Which versions did she work off of? Which version am I looking at? NextPage Collaboration tracks a complete geneology of the various versions sitting on everyone's devices. Teams can have clarity without having to check the document in to a central repository, nor hold off on edits until they can coordinate with others.
##------------------URL-------------------------##
http://www.ics.uci.edu/~xpage/aboutme.html
##-----------------TITLE------------------------##
Xinru academic webpage:About Me page
##------------------TEXT------------------------##
xinru page
						
					
				
				
				> Home>> About Me> Research> Publications> Curriculum Vitae> Contact
				
				
				
				
				
				
				
				
			
			

			
				About Me
				
				Academia
				
I just earned my Ph.D. from the Informatics Department of the Donald Bren School of Information and Computer Sciences at the University of California, Irvine. I was advised by Alfred Kobsa and mentored by my thesis committee members Bonnie Nardi and Don Patterson. Prior to this, I received a B.S. and M.S. in Computer Science from Stanford University, with concentration in Human Computer Interaction.

Research Areas: Privacy, Technology adoption, Use and Non Use, Location-Sharing Services, Social Media, Awareness and Collaboration Technologies, Human-Computer Interaction, Social Informatics, Computer-Supported Cooperative Work, Values in Design, Computer-Mediated Communication.
Research Funding: My research has been funded by the National Science Foundation, Disney Research, Samsung, and Yahoo! Labs.
				
				Industry
				
Before coming to UCI, I worked in industry as a product manager and prior to that, as lead interaction designer. I worked on enterprise solutions to information risk problems for distributed, mobile work teams. I have experience working with customers, engaging in field work with end-users, driving the design process and managing the product requirements using an interdisciplinary approach. 				  
Bio

Xinru holds a Ph.D in Information and Computer Science with concentration in Informatics from University of California, Irvine. Her B.S. and M.S. are in Computer Science, specialization in Human-Computer Interaction, from Stanford University. She has spent 5 years working in an information risk software start-up company leading their interaction design department and then managing the product lifecycle as product manager. Utah's Women Tech Councili chose Xinru as a top 3 finalist for their Tech award in the Rising Star category which recognizes women "driving innovation, leading technology companies, and [who] are key contributors to the community." At UC Irvine, she was awarded a 4-year Dean's fellowship and her research has been funded by Disney Research, Samsung and the Yahoo! Best Dissertation Fellowship Award. Her thesis is entitled "Factors that Influence Adoption and Use of Location-Sharing Social Media". It explores psychological and social factors that influence attitudes towards and use of location-sharing technology. Xinru has published her work in leading conferences in her field such as Ubicomp, CSCW and ICWSM. She enjoys volunteering in various community programs to encourage youth in technology.
##------------------URL-------------------------##
http://www.ics.uci.edu/~xpage/index.html
##-----------------TITLE------------------------##
Xinru academic webpage
##------------------TEXT------------------------##
xinru page
						
					
				
				
				>> Home> About Me> Research> Publications> Curriculum Vitae> Contact
				
				
				
				
				
				
				
				
			
			

			
				Headlines

2015 iSchools Doctoral Dissertation Award

I am honored to receive this year's iSchools Doctoral Dissertation award! According to the announcement, my "dissertation has been judged the best completed during the preceding academic year at any member institution of the iSchools organization." iSchools is an international consortium of information schools (there are currently 59 schools). Here's a link to the actual dissertation if you'd like to peruse :)
I couldn't have done it without the support and help of many people! I especially want to thank my advisor (Alfred Kobsa), committee members (Bonnie Nardi, Don Patterson), collaborator and stats mentor Bart Knijnenburg and all of my wonderful colleagues and past instructors in my home department, Informatics, as well as those in Computer Science, Sociology and Social Ecology!




Joining Bentley University

I am happy to announce that I will be joining the faculty at Bentley University as Assistant Professor in Computer Information Systems. I look forward to working in the Boston area and with a network of bright and supportive colleagues!

UCI Nominee for 2015 iConference Doctoral Dissertation Award

University of California, Irvine has chosen my dissertation as its nominee for the 2015 iConference Doctoral Dissertation Award. The iConference is organized by the iSchools organization which is a quickly growing collection of Information Schools that share a "fundamental interest in the relationships between information, people, and technology". The winner will be announced in March 2015.


Dissertation Defended!
I've successfully defended and submitted my dissertation. I am graduating with a winter 2014 degree, a doctorate in Information and Computer Science. Thanks for all of the support from my colleagues and mentors!  
			Yahoo! Best Dissertation Award
				
				I just received the Yahoo! Best Dissertation Fellowship Award for my research "in identifying and measuring psychological and social factors that impact people's behaviors and attitudes towards location-sharing technology". Thanks to the people at Yahoo! who are doing exciting work in the location-based services and personalization areas.

				Best Paper Nominee
					
					On the same day, I found out that my paper about communication style personality traits and location-sharing adoption and usage styles was nominated for best paper at UbiComp 2013. Thanks and congratulations also to my coauthors Bart Knijnenburg and Alfred Kobsa!
##------------------URL-------------------------##
http://www.ics.uci.edu/~xpage/contact.html
##-----------------TITLE------------------------##
Xinru academic webpage:contact page
##------------------TEXT------------------------##
xinru page
						
					
				
				
				> Home> About Me> Research> Publications> Curriculum Vitae>> Contact
				
				
				
				
				
				
				
				
			
			

			
				Contact

xpage [at] ics [dot] uci [dot] edu

Feel free to contact me for my latest CV and research projects.
##------------------URL-------------------------##
http://www.ics.uci.edu/~xpage/cv.html
##-----------------TITLE------------------------##
Xinru academic webpage:CV page
##------------------TEXT------------------------##
xinru page
						
					
				
				
				> Home> About Me> Research> Publications>> Curriculum Vitae> Contact
				
				
				
				
				
				
				
				
			
			

			
				Curriculum Vitae
This is an abbreviated CV. Please email me to obtain my full CV.	
Education
				

2014Ph.D. in Information and Computer Science, Concentration in InformaticsUniversity of California, Irvine, CA 2003M.S. in Computer Science, Specialization Human Computer InteractionStanford University, Stanford, CA 2003B.S. in Computer ScienceStanford University, Stanford, CA


Academic Research Experience 

2008-currentResearcher, Institute for Software Research (ISR)Bren School of Information and Computer Sciences, advised by Prof. Alfred Kobsa 2010-2011Research Associate, Disney Research, Glendale, CADisney Research, Walt Disney Imagineering. 2002-2003Haptic GPS Researcher, Stanford UniversitySponsored by Toyota, advised by Prof. Mark Cutkosky, completed in collaboration with students advised by Prof. Shuichi Fukuda of Tokyo Metropolitan Institute of Technology

Industry Experience 

2008Product Manager, NextPage Inc.Draper, UT 2003-2007Lead Interaction Designer, NextPage Inc.Draper, UT 2003Usability & Design Consultant, TelevigationSunnyvale, CA 2002Program Manager Internship, Internet Explorer, MicrosoftMountain View, CA 2000-2001Software Development Internship, Gigabit Switch Group, Cisco SystemsSan Jose, CA 


Teaching

2001-2003Teaching Assistant, Computer Science Department, Stanford UniversityPalo Alto, CAClasses: Programming Methodology (Head TA - write exams & oversee TA's; Section Leader), Programming Methodology & Abstractions (taught televised & in-person sections), Introduction to HCI (taught sections), HCI Design Studio (Develop/Teach prototyping labs, advise students)


Honors, Awards, Fellowships

2015Winner iSchools Doctoral Dissertation Award2014UCI nominee for 2015 iSchools Doctoral Dissertation Award2013Yahoo! Best Dissertation Fellowship Award2012Values in Design Scholar2008-2012Donald Bren School of Information and Computer Sciences Dean's Fellowship2009-2012Department of Education Fellowship, Computer Science Departmentd2008Women Tech Council Awards Finalist2003James F. Lincoln Arc Welding Foundation Student Engineering Design Competition, Graduate Division Merit Award.2002Computer Graphics World Magazine, Rendered Image published2001Stanford University Senior Project Computer Science Fair, Best of Show Category: Third place2001Stanford University Image Synthesis Techniques Rendering Competition: Honorable Mention1997-2001Great American Trading Company College Scholarship1997-2001Lockheed Martin National Merit Scholarship


Academic Service

Program CommitteeInternational Conference on Weblogs and Social Media (ICWSM) 2013, 2014, 2015;Workshop on Usable Security (USEC) 2015Conference Workshop OrganizerComputer Supported Cooperative Work (CSCW) 2013, 2-day workshop (primary organizer, co-organized with A. Lampinen, F. Stutzman, K.P. Tang);CSCW 2015, 2-day workshop (co-organizer with J. Vitak, P. Wisniewski, A. Lampinen, E. Litt, R. de Wolf, P.G. Kelley, M. Sleeper)ReviewerCHI, CSCW, ECIS, SOUPS, iConference, Human Computer Interaction (HCI) Journal, IEEE Security & PrivacyStudent VolunteerUCI Informatics Grad Student Association, CSCW SV, CHI SV


Relevant Skills & Coursework

Scientific Methods: Surveys, Experiments, Interviews, (Non) Participant observation, Ethnographic Methods, Secondary Data Analysis.
Design Methods and Processes: SCRUM, Rapid Contextual Inquiry, Usage-Centered Design, Agile Task-Driven Design, Use Cases, Paper Prototyping, etc.
Statistical Analysis: Uni/Bi/Multi-variate General Linear Modeling, Structural Equation Modeling.
Statistical Analysis Tools: R, Mplus, Amos, STATA, SPSS

Programming Languages and Environments: C/C++, Java, Basic, HTML, Perl, Unix, Windows, Mac, Visual Basic/C++, IntelliJ, CVS, SVN, etc.

Course Topics: Social Analysis of Computing, HCI, Graphics, Networks, OS, Compilers, Architecture, Comp. Theory, etc.
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/publications/r150.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
R150
|
      
      
    
    
      An anytime scheme for bounding posterior beliefs
      
      
       Bozhena Bidyuk, Rina Dechter,
      Emma Rollon
      

      Abstract
    	  

This paper presents an any-time scheme for computing lower and upper
bounds
on the posterior marginals in Bayesian networks with discrete
variables.
Its power is in that it can use  any available scheme that bounds the
probability of evidence, enhance  its performance in an anytime
manner, and
transform it effectively into bounds for posterior marginals. The
scheme is
novel in that using the cutset condition principle (Pearl, 1988),
it converts a bound on joint probabilities into a bound on the
posterior
marginals that is tighter than earlier schemes,  while at the same
time
facilitates anytime improved performance. At the heart of the scheme
is a
new data structure which facilitate the efficient computation of such
a
bound without enumerating all the cutset tuples. Using a variant of
bound
propagation algorithm (Leisink and Kappen, 2003) as the plugged-in
scheme,
we demonstrate empirically the value of our scheme, for bounding
posterior
marginals  and probability of evidence.

			
      
      
      
      [pdf]
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/winter-03/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Winter 2003
    main | 
    announcements | 
    homework | 
    project



Lecture Notes
Lecture notes 1 - [ PowerPoint ]
  Lecture notes 2 - [ PowerPoint ]
  Lecture notes 3 - [ PowerPoint ]
  Lecture notes 4 - [ PowerPoint ]
  Lecture notes 5 - [ PowerPoint ]
  Lecture notes 6 - [ PowerPoint ]
  Lecture notes 7 - [ PowerPoint ]
  Lecture notes 8 - [ PowerPoint ]
  Lecture notes 9 - [ PowerPoint ]







     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/winter-03/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    


    
    
    
    ICS-270A, Intorduction to Artificial Intelligence, Winter 2003
          main | 
          announcements | 
          homework |
          lecture notes | 
        

    

    Project in AI Planning
          The following are relevant links to recent papers in planning.

           The AI planning conference in 2002 (AIPS-2002): click here
             List of AIPS-2002 accepted papers:  click here
          

          

          Additional selected recent papers:

          
          Consult: 
          http://www.cs.ucla.edu/~bonet/
           http://www.tecn.upf.es/~hgeffner/html/index.html
           http://www.cs.toronto.edu/~fbacchus/on-line.html
          
          
           Planning as Branch and Bound and its Relation to Constraint-based Approaches
            H. Geffner

             H. Palacios and H. Geffner, "Planning as Branch and Bound: A Constraint Programming Implementation", XVIII Latin-American Conference on Informatics (CLEI-2002), Montevideo, Uruguay, Nov. 2002.

             J. Rintanen, J. Hoffmann, "An Overview of Recent Algorithms
              for AI Planning", Künstliche Intelligenz, Volume 2/01, 2001.

             J. Hoffmann, B. Nebel, "The FF Planning System: Fast Plan Generation
              Through Heuristic Search", Journal of Artificial Intelligence Research,
               Volume 14, 2001, Pages 253 - 302.    

             (*) J. Hoffmann, H. Geffner, "Branching Matters: Alternative Branching in
              Graphplan", to appear in: Proceedings of the 13th International Conference
              on Automated Planning and Scheduling, Trento, Italy, July 2003.

             P. Bertoli and A. Cimatti and M. Roveri, "Heuristic Search + Symbolic Model Checking = Efficient Conformant Planning", Proceedings of the 17th International Joint Conference on Artificial 
            Intelligence (IJCAI-2001), pages 467-472.

             B. Bonet and H. Geffner, "RTDP: Improving the Convergence of Real-time Dynamic 
            Programming", Proceedings of ICAPS-03

          
             (*) Bacchusd, Ron Petrick, and Sensing, "A Knowledge Based Approach to Planning with incomplete Information",  AIPS-2002--best paper.

             Local Search Topology in Planning Benchmarks: A theoretical analysis
              by Jorge Hoffmann.

             (*) Riley and Veloso, "Planning for distributed execution through use of probablity opponent models",  AIPS-2002.
          
        

    

    List of accepted papers

    107Structure and
            Complexity in Planning with Unary OperatorsDomshlak Carmel,Department
            of Computer Science
            Ronen Brafman; Ben-Gurion University of the Negev112On Control Knowledge
            Acquisition by Exploiting Human-Computer InteractionAler, Ricardo,
            Universidad Carlos III de Madrid
            Daniel Borrajo, Universidad Carlos III de Madrid,114Symbolic Pattern
            Databases in Heuristic Search PlanningEdelkamp, Stefan,Computer
            Science Institut;115The FAR-OFF system:
            A Heuristic Search Case-Based PlanningTonidandel, Flavio,University
            of Sao Paulo
            Marcio Rillo ; University of Sao Paulo118Plan Representation
            for Robotic AgentsBeetz, Michael,
            K,Department of Computer Science IX124Local Search Topology
            in Planning Benchmarks: A Theoretical AnalysisHoffmann, Joerg,University
            Freiburg;130Extending the
            Exploitation of Symmetries in PlanningFox, Maria,University
            of Durham, UK
            Derek Long ; University of Durham131Filtering Algorithms
            for Batch Processing with Sequence Dependent Setup TimesVilim, Petr,Charles
            University;
            Bartak, Roman ; Charles University;134Execution Monitoring
            with Quantitative Temporal Dynamic Bayesian NetworksColbry, Dirk,
            J,University of Michigan
            Bart Peintner; University of Michigan
            Martha E. Pollack,University of Michigan135Applying Domain
            Analysis Techniques for Domain-Dependent Control in TALplannerKvarnström,
            Jonas,Linköping University, Sweden137Universal Quantification
            in a Constraint-Based PlannerGolden, Keith,NASA
            Ames Research Center
            Jeremy Frank; NASA Ames Research Center138A Plan-Based Personalized
            Cognitive OrthoticMcCarthy, Colleen
            E,University of Pittsburgh
            Martha Pollack; University of Michigan139Decidability and
            Undecidability Results for Planning with Numerical State VariablesHelmert, Malte,Albert-Ludwigs-Universitaet
            Freiburg;143An Interactive
            Method for Inducing Operator DescriptionsMcCluskey, T,
            L,School of Computing and Mathematics;
            Richardson,N,E ; The University of Huddersfield
            Simpson,R,M ; The University of Huddersfield146Active Coordination
            of Distributed Human PlannersMyers, Karen,
            L.,Artificial Intelligence Center
            Peter A. Jarvis, SRI International
            Thomas J. Lee, SRI International,149CaMeL: Learning
            Methods for HTN PlanningOkhtay Ilghami,University
            of Maryland
            Dana Nau ; University of Maryland
            Hector Munoz-Avila ; Lehigh University
            David Aha ; Naval Research Laboratory152On the Role of
            Ground Actions in Refinement PlanningYounes, Hakan,
            L,Carnegie Mellon University
            Reid Simmons; Carnegie Mellon University153Estimated-Regression
            Planning for Interactions with Web ServicesMcDermott, Drew
            V.,Yale University;155Faster Probabilistic
            Planning Through More Efficient Stochastic Satisfiability Problem
            EncodingsMajercik, Stephen
            M.,Bowdoin College
            Andrew P. Rusczek ; Bowdoin College157Speculative Execution
            for Information Gathering PlansBarish, Greg,University
            of Southern California / Information Sciences Institute
            Craig A. Knoblock; University of Southern California / Information
            Sciences Institute164Fragment-based
            Conformant PlanningKurien, James
            A,Xerox Palo Alto Research Center
            P. Pandurang Nayak; Stratify, Inc.
            David E. Smith; NASA Ames Research Center166Improving Heuristics
            for Planning as Search in Belief SpaceBertoli, Piergiorgio,IRST
            - Istituto per la Ricerca Scientifica e Tecnologica
            Alessandro Cimatti; IRST169LPG: A Planner
            Based on Local Search for Planning Graphs with Action CostsGerevini, Alfonso,Università
            di Brescia, Dipartimento di Elettronica per l'Automazione
            Ivan Serina; DEA, Università di Brescia170On the Identification
            and Use of Hierarchical Resources in Planning and SchedulingBernd Schattenberg,Dept.
            of Artificial Intelligence
            Susanne Biundo; Dept. of Artificial Intelligence, University
            of Ulm172Constraint model-based
            planning and scheduling with multiple resources and complex collaboration
            schemaJean-Clair Poncet,Axlog
            Ingénierie
            Guettier Christophe ; Xerox Palo Alto Research Center Bertand
            Allo ; Axlog Ingénierie
            Vincent Legendre ; Axlog Ingénierie
            Nelly Strady-Lécubin ; Axlog Ingénierire175Partially Observable
            Planning as Backward Search with BDDsRintanen, Jussi,
            T,Albert-Ludwigs-Universität Freiburg181Analyzing Plans
            with Conditional EffectsWinner, Elly,Computer
            Science Department
            Manuela Veloso; Computer Science Department, Carnegie Mellon
            University183Planning for Distributed
            Execution Through Use ofRiley, Patrick
            F.,Computer Science Department
            Manuela Veloso ; Carnegie Mellon University186The Logic of ReachabilitySmith, David E.,NASA
            Ames Research Center;
            Ari Jonsson ; RIACS187Heuristic Search-Based
            ReplanningKoenig, Sven,College
            of Computing, Georgia Institute of Technology
            David Furcy; Georgia Institute of Technology
            Colin Bauer; Georgia Institute of Technology188A Knowledge-Based
            Approach to Planning with Incomplete Information and SensingBacchus, Fahiem,University
            of Toronto
            Ronald Petrick ; University of Toronto190Planning Graph-based
            Heuristics for Cost-sensitive Temporal PlanningDo, Minh B.,Arizona
            State University, The United States
            Subbarao Kambhampati; Arizona State University
    
    
    
         
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/winter-03/home-work.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-270A, Intorduction to Artificial Intelligence, Winter 2003
    main | 
    announcements | 
    lecture notes | 
    project



Home Works
Home Work 1 - [ PDF ]
  Home Work 2 - [ PDF ]
  Home Work 3 - [ PDF ]
  Home Work 4 - [ PDF ]
  Home Work 5 - [ PDF ]
  Home Work 6 - [ PDF ]
  Home Work 7 - [ PDF ]





     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/winter-03/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Winter 2003
    main | 
    lecture notes | 
    homework | 
    project



Announcements






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-280/spring-2003/ideas.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-280, Current Topics in Automated Reasoning, Spring 2003





Ideas for Research Projects



w-cutset: Investigate approximate algorithms and properties for finding a w-cutset.
	Convert any integer programming problem to a relational constraint optimization	that can interface through REES with all our algorithms.
	Develop an object oriented language for expressing constraint problems such as the Object oriented language of Pfeffer and Koller for probabilistc problems.
	LEARNING:  Read Rish Survey about learning, Read abut EM, Read Russel, Koller et. Al on learning.
	Investigating the learning EM algorithm with a stronger inference component than greedy inside EM. One can start with learning HMM. Can we improve learning HMM in some way by more advance inference?
		Develop a one iteration learning algorithms that replace EM:Complete each tuple using inference, then count the tuples giving each completed tuple its weight based on the computed probability. Is this a single iteration of EM?
		Algorithms for MAP applied to HMM's. Approximate MAP and incorporate in EM. Currently the expected counts are computed separately for every family. Alternative: compute expected completions per tuple, and only then take expected counts.
		Is there any relationship between EM and iterative belief propagation for MAP?
	
	Develop algorithms for MAP.
	Adapt search algorithms to MAP.
		Aanalyze MAP for trees.
		Develop iterative belief propagation for MAPs
	
	General search with caching simulating variable-elimination. Apply the idea of backtracking with no-good learning to any Look at Bacchus paper for the case of belief. Extend to optimization, either for MAX-CSP or for MPE first.
	Apply approximate inference with local search + iterative propagation as done by Pinkas and Dechter. Apply to optimization in general, to MPE and MAP.
	Develop Branch and bound for finding M-best solutions. Can we develop upper-bounds using mini-bucket for the ith solution and use it?
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-179/spring-2010/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-179, Algorithms for Probabilistic and Deterministic Graphical Models, Spring 2010
  overview | 
  announcements | 
  lecture notes | 
  projects









School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-179/spring-2010/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-179, Algorithms for Probabilistic and Deterministic Graphical Models, Spring 2010
  overview | 
  home work
  





Lecture Notes





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-179/spring-2010/grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 
    
    
    ICS-179, Algorithms for Probabilistic and Deterministic Graphical Models, Spring 2010
            overview |
            home work |
            lecture notes
          
    
    
          Grades
          
          Sorted by the last three digits of the student I.D. numbers.  The grades are on a scale from 1 - 10 
    
    
    
            Student ID
            last 3 digits
          
            Grade

          
    
    
    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-179/spring-2010/Projects_list.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-179, Algorithms for Probabilistic and Deterministic Graphical Models, Spring 2010
  overview | 
  announcements | 
  lecture notes  
  












School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/spring-99/hmwk_proj.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

		



Homeworks

  
Homework 1  

  
Homework 2    
Homework 3    
Homework 4    
Homework 5  
Projects
  
Project 1  





     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/spring-99/outline_syl.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

		




Course Outline

Professor: Rina
Dechter Electronic Mail: dechter@ics.uci.edu Place: ICS 174 Time: TuTh 11:00 to 12:20 Office: ICS 424E Office Hours: Monday, Thursday, 1:00 to 2:00 pm. Textbooks: Artificial Intelligence: A Modern Approach, by Russell and
Norvig: http://www.cs.berkeley.edu/~russell/aima.html

Classnotes

Teaching Assistants Antenor Carvalho antenor@ics.uci.edu
 

Discussion Sections 36371 DIS 1:  Tue, 2-2:50 in ICS 243 36372 DIS 2: Wed 10-10:50 in ICF 101 


Course Goals: 


Learn the basic AI techniques, the problems for which they
are applicable and their limitations. Topics covered include 
search and heuristic search algorithms, 
Knowledge-representation (logic-based and probabilistic-based)
 inference and  learning algorithms.



Academic Honesty:
Academic honesty is taken seriously. It is the responsibility of
each student to be familiar with UCI's current academic honesty
policies. Please take the time to read the current UCI Senate
Academic Honesty Policies. 

Assignments:



There will be 4-6 quizzes, approximately every 1-2 weeks
on the material covered in class up to that time.

The quizzes will account for 15-20% of your overall grade.
The lowest scored quiz will be dropped.

There will be one midterm exam, closed books which will account for
25% of the grade.

There will be 1 project and/or homeworks which will
account for 15-20% of the grade.

There will be a final exam, closed books during the final week
which will account for 40% of the grade.

  Bulletin Board:  
Read ics.171 for announcements, answers to homework etc. 
Also, please post
questions about homework or anything else there. 
If you don't understand something, others probably don't either 
and will have the same question.



Procedures:
Some handouts will be distributed during the quarter by the
Distribution Center, others will be available to buy in the Engineering
Copy Center.

Syllabus:

Lecture 1. Introduction and overview: Goals, history,
intelligent agents. Ch. 1, 2. 
Lecture 2. Problem solving: State-spaces, search graphs,
problem spaces, problem types. Ch. 3 .
Lecture 3-4. Uninformed search: greedy search, breadth-first,
depth-first, iterative deepening, bidirectional search. Ch. 3.Lecture 5.    Informed Heuristic search: Best-First, A*,
Properties of A*.  Ch. 4.Lecture 6. Informed Heuristic search: Branch and bound, IDA*,
Generating heuristics automatically. Ch. 4.Lecture 7. Game playing: Minimax search, Alpha-Beta pruning.
Ch. 5.Lecture 8. Constraint networks: The Constraint Satisfaction
problem formulation, constraint-graphs, Consistency algorithms.
Class-notes.  Lecture 9.   Search in CSPs: forward-checking,
solving trees, iterative improvement (hill climbing, stochastic
local search.) Ch. 4.4.Lecture 10. Representation and Reasoning: Propositional
logic, inference, resolution, satisfiability. Ch. 6.Lecture 11. Predicate logic: Syntax, Quantifiers, variables.
Ch. 7.Lecture 12. Inference in logic: Forward and backward
inference, unification. Ch. 9. Lecture 13. Midterm: 
Lecture 14. Inference in logic (continued) Lecture 15. Applications to planning, Ch.11: 
 Lecture 16.  Agent reasoning under uncertainty, Ch. 15 Lecture 17. Learning from observations: Learning decision
trees. Ch. 18.Lecture 18. Perceptron model and neural networks, Ch. 19, 
Lectures 19-20.   Additional topics (reasoning with uncertainty,
natural language, vision) 
as time permits  




Resources on the Internet 
A list of Web
resources about AI . 







     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2001/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2001
  main | 
  announcements | 
  chapters & readings | 
  home work | 
  project



ChaptersReadings

Constraint Proccessing:

Chapter 1 and 2 PS | PDF

Chapter 3 PS | PDF

Chapter 4 PS | PDF

Chapter 5 PS | PDF

Chapter 6 PS | PDF

Chapter 8 PS | PDF

Chapter 9 PS | PDF

Chapter 10 PS | PDF

Chapter 13: "Boosting Search With Variable EliminationPS | PDF


IntroductionA. Mackworth Constraint Satisfaction S. Shapiro, Encyclopedia of
Artificial Intelligence, Wiley & Sons inc. December 1991R. Dechter Constraint Networks S. Shapiro, Encyclopedia of Artificial
Intelligence Wiley and Sons, December, 1991"Some Applications of the Constraint Satisfaction Problem", Nadel,
Bernard A., Computer Science Dept., Wayne State University, Detroit, MI,
June, 1990.
  Local consistency algorithmsD.E. Waltz, "Understanding Line Drawing of Scenes with Shadows", in
P.H. Winston, ed., The Psychology of Computer Vision, McGraw-Hill Book, Co.,
Inc., New York 1975.U. Montanari, "Networks of constraints: Fundamental properties and
applications to picture processing", Information Science, Vol. 7 1974, pp.
95-132 A. K. Mackworth, "Consistency in networks of relations", Artificial
Intelligence, Vol 8, 1977 pp 65-73.A.K. Mackworth, E.C. Freuder, "The complexity of some polynomial network
consistency algorithms for constraint satisfaction problems", Artificial Intelligence,
Vol. 25, No. 1, 1984Mohr, R. and Henderson T.C. "Arc and path consistency revisited"
Artificial Intelligence 28(2) (1986) 225-233Dechter R. "From local to global consistency" Artificial intelligence,1992.van Beek, P. Dechter R., "On the minimality and Decomposability of
row-convex constraint networks". Journal of the ACM, Vol 42, No. 3, May 1995,
pp. 543{561.R. Dechter and P. van Beek "Local and global relational consistency"
Journal of Theoretical Computer Science, Vol 173(1), PP. 283-308, 1997.van Beek P., Dechter R., "Constraint tightness and looseness versus
local and global consistency" Journal of ACM, VOL 44, NO. 4, JolY 1997, PP.
549-566.
  Backtracking schemesDavis, M. and Putnam, H. "A computing procedure for quantification
theory J. Assoc. Comput. Mach", 7, 1960, 201-2015.M. Davis, G. Logemann and D. Loveland, "A machine program for theorem
proving" Communication of the ACM, 5, 1962, pp. 394-397.D. McAllester, "Boolean Constraint Propagation and Dependency directed
Backtracking", MIT reportJ. Gaschnig "Experimental case studies of backtrack vs. Waltz type
new algorithms for satisfying assignment problems", In the scnd Biennial Conference
of the Canadian Society of Computational Studies of Intelligence. Toronto,
1977.J. Gaschnig "A general backtrack algorithm that eliminates most redundant
tests", IJCAI-1977, Menlo Park, CA. pp. 457-R. M. Haralick and G. L. Elliott, "Increasing tree-search efficiency
for constraint satisfaction problems Artificial Intelligence, Vol. 14 1980,
pp 263-313R. Dechter, "Enhancement schemes for constraint processing: backjumping,
learning, and cutset decomposition Artificial Intelligence, Vol. 41, No. 3,
January 1990 pp. 273-312P. W. Purdom, "Search rearrangement backtracking and polynomial average
time Artificial Intelligence", Vol. 21, 1983 pp.117-133P. W. Purdom and Brown C., "An average time analysis of backtracking", 
SIAM journal of computing 10(3): 583-593.R. Dechter and D. Frost "Backtracking algorithms for constraint satisfaction
problems - a survey"Kondrak and van Beek "A Theoretical evaluation of selected backtracking
algorithms" IN AIJ 1997.
  Network-based AlgorithmsE.C. Freuder, "A suficient condition for backtrack-free search", Journal
 of the ACM, Vol. 29, No. 1 January 1982 pp. 24-32.
 R. Dechter and J. Pearl, "Network-based heuristics for constraint-satisfaction
 problems", Artificial Intelligence, Vol. 34 No. 1 December, 1987 pp. 1-38
 R. Dechter and J. Pearl, "Tree-clustering Schemes for Constraint Net
works", Artificial Intelligence, 38 (1989), pp. 353-366.
 R. Dechter, A. Dechter, J. Pearl. "Optimization in constraint-networks", 
In Influence Diagrams, Belief Nets and Decision Analysis, Edited by R.M. Oliver
and J.Q. Smith, 1990, John Wiley.
 R. Dechter "Bucket elimination: a unifying framework for processing
hard and soft constraints" CONSTRAINT: An International Journal, 2,51-55
(1997).
  Tractable classesvan Beek, P. Dechter R., "On the minimality and Decomposability of
row-convex constraint networks". Journal of the ACM, Vol 42, No. 3, May 1995,
pp. 543{561.
 R. Dechter and P. van Beek "Local and global relational consistency"
Journal of Theoretical Computer Science, Vol 173(1), PP. 283-308, 1997.
 van Beek P., Dechter R., "Constraint tightness and looseness versus
local and global consistency" Journal of ACM, VOL 44, NO. 4, JolY 1997, PP.
549-566.
  Temporal Constraint NetworksJ.F Allen. "Maintaining knowledge about temporal intervals", Communications
of the ACM, Vol. 26 No. 11 November, 1983 pp. 832-843
 M. Vilain and H. Kautz. "Constraint propagation algorithms for temporal
reasoning", Proceedings AAAI-86 Phila, PA 1986 pp 377-382
 R. Dechter, I. Meiri and J. Pearl. "Temporal Constraint Networks", Artifi
cial Intelligence, 49 (1991) pp. 61-95.
 P. van-Beek and R. Cohen. "Approximation algorithms for temporal reasoning", 
Proceedings IJCAI-89 Detroit, Michigan 1989
 I. Meiri. "Combining Qualitative and Quantitative Constraints in Temporal
Reasoning", Artificial Intelligence, 1996.
 M. C. Golumbic and R. Shamir. "Algorithms and complexity for reasoning
about time", In AAAI-92, San Jose, CA. pp. 741-747
 M. C. Golumbic. "Survey on Temporal reaasoning".
  Local Search and AnnealingSelman, B. Levesque, H. J., and Mitchell, D.G. (1992) "A new method
for solving hard satisfiability problems", Proceedings AAAI-92, San Jose, CA,
1992.
 S. Minton, Johnston. M. D., Philips, A. B., and Laird, P. (1990) "Solving
large-scale constraint satisfaction using a heuristic repair method", Proceedings
AAAI-90, 1990, 17-24.
 Hinton, Sejnowsky, Ackley, Boltzmann. "Machines: Constraint Satisfaction
Networks that Learn", CMU Report, 1984.
 Kirpatrick, Gelatt and Vecchi. "Optimization by Simolated Annealing",
Science 1983.
  Languages for applicationsD. McAllester. "Truth Maintenance", Proceedings AAAI-90 Boston, MA Joly,
1990 1109-1115
 R. Dechter and A. Dechter. "Belief maintenance in dynamic constraint
 networks", Proceedings AAAI-88, St. Paol, Minnesota: August, 1988
 J. de Kleer. "A comparison of ATMS and CSP techniques", In Ijcai-89,
Detroit Michigen, pp. 290-296.
  Constraint Logic ProgrammingJaffar, J. and Lassez, J.L. "Constraint Logic Programming", Proceeding
of the 14th ACM Conference on Principles of Programming Languages, 111-119.
 Borning A., Maher, M. et al. "Constraint Hierarchies and Logic Programming",
Proceeding of the 6th Logic Programming Conference, pp. 149-164, 1988.
 Van Hentenryck etal., "The Constraint Logic Programming Language CHIP",
Proceedings of Intern. Conference on Fith Generation Computer Systems, Japan 1988.
    
  OthersAn Algorithm for Optimal Winner Determination in Combinatorial Auctions
  Algorithm for Optimizing Leveled Commitment Contracts
  New Algoritms for Golomb Ruler Derviation and Proof of the 19 Mark Ruler
  Mining the Genome
  Bandwidth Allocation Planning in Communication Networks
   





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2001/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2001
  main | 
  announcements | 
  chapters & readings | 
  homework




Project: Please pick one of these papers for your presentation. 




Ines Lynce, Luis Baptista, and Joao Marques-Silva, "Towards Provably Complete Stochastic Search Algorithms for Satisfiabilty".
[ ps | pdf ]


Joao P. Marques-Silva, "GRASP: A Search Algorithm for Propositional Satisfiability", IEEE Transactions On Computers, Vol. 48, NO. 5, MAY 1999
[ ps | pdf ]

Using Uncertainty within Computation, AAAI 2001 Fall Symposium.
Proceedings.

Using Uncertainty within Computation, AAAI 2001 Fall Symposium.
Provisional Schedule.

Chen, X. and van Beek, P., "Conflict-Directed Backjumping Revisited", (JAIR) Volume 14, pages 53-81.
[ ps | pdf ]

Roberto J. Bayardo Jr., Robert C. Schrag, "Using CSP Look-Back Techniques to Solve Real-World SAT Instances", Appears in Proc. of the 14th Nat’l Conf. on Artificial Intelligence, 203-208, 1997.
[ pdf ]

Roberto J. Bayardo Jr., Robert Schrag, "Using CSP Look-Back Techniques to Solve Exceptionally Hard SAT Instances", Appears in Proc. of the Second Int’l Conf. on Principles and Practice of Constraint Programming, 46-60, 1996.
[ pdf ]

Roberto J. Bayardo Jr., and Daniel P. Miranker, "A Complexity Analysis of Space-Bounded Learning Algorithms for the Constraint Satisfaction Problem", Appeared in Proc. of the 13th Nat’l Conf. on Artificial Intelligence, 298-304, 1996.
[ pdf ]

Roberto J. Bayardo Jr. and Daniel P. Miranker, "On the Space-Time Trade-off in Solving Constraint Satisfaction Problems", Appeared in Proc. of the 14th Int’l Joint Conf. on Artificial Intelligence, 558-562, 1995.
[ pdf ]

  I. Miguel, Q. Shen, "Solution Techniques for Constraint Satisfaction Problems:
 Advanced Approaches", Artificial Intelligence Review vol. 15(4)
 pp. 269-293, June 2001. Kluwer Academic Publishers. [ 
  pdf
   ]

 C. Bessière and J.C. Régin, "Arc consistency for general constraint networks: 
preliminary results", Proceedings IJCAI'97, Nagoya, Japan, pages 398-404.
  [ 
 pdf
  ]

 C. Bessière and J.C. Régin, "MAC and combined heuristics: two reasons to 
forsake FC (and CBJ?) on hard problems", Proceedings CP'96, Cambridge 
MA, pages 61-75. [ 
 pdf
  ]

 C. Bessière and P. Meseguer and E.C. Freuder and J. Larrosa, "On forward 
checking for non-binary constraint satisfaction", Proceedings IJCAI'99 
Workshop on Non-binary constraints, Stockholm, Sweden. 
[ 
pdf
 ]
 
Cristian Coarfa, Demetrios D. Demopoulus, Alfonso San Miguel, Aguirre, Devika Subramanian, Moshe Y. Vardi, "Random 3-SAT: The Plot Thickens", 2001 Kluwer Academic Publishers.. 
[ pdf | ps ]



The following paper  can be found in the course handout filing cabinet, located
on the 4th floor of  the CS building, just outside of the copy center. Please make copies and leave the originals in the filing cabinet.


S. Arnborg and D. Corneil and A. Proskurowski, "Complexity of finding embeddings
in a k-tree", Algebraic Discrete Meth., 8:277--284, 1987.

Stefan Arnborg, "Efficient Algorithms for Combinatorial Problems with Bounded
Decomposability - A Survey", BIT 25(1): 2-23 (1985).

S. Arnborg, A. Proskurowski, "Linear time algorithms for NP-hard problems
restricted to partial k-trees",  Disc. Appl. Math. 23, 11--24 (1989) .

Bernd S.W. Schroeder, "Determining if (FC-) (conflict-directed) backjumping
visits a given node is NP-hard", Artificial Intelligence Vol. 132 pp.105-117,
Elsevier Science, 2001.






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2001/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2001
  main | 
  announcements | 
  chapters & readings | 
  project




Home Work


  Assignment 1 | PS | HTML |
  
  Assignment 2 | PS
  
  Assignment 3 | PS
  
  Assignment 4 | PS
  
  Assignment 5 | PS
  
  Assignment 6 | PS
  
  Assignment 7 | PS







School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2001/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2001
  main | 
  homework | 
  chapters & readings | 
  project




Announcements






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2003/slides.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2003
  main |
  homework | 
  readings | 
  project




Slides



  Chapter 1
  Chapter 2
  Chapter 3
  Chapter 4
  Chapter 5
  Chapter 6
  Chapter 7
  Chapter 8
  Chapter 9
  Chapter 10
   







School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2003/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2003
  main |
  homework | 
  slides | 
  project




        Additional sources: Marriott and P. Stucky, Programming with Constraints, MIT Press 
         
        Krzysztof Apt, Principles of Constraint Programming, Cambridge University Press 

        W.J. van Hoeve, The alldifferent Constraint: A Survey






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2003/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275A, Constraint Networks, Fall 2003
  main |
  slides |
  readings | 
  project




Home Work


  Homework 1
  Homework 2
  Homework 3
  Homework 4
  Homework 5
  Homework 6
  Homework 7
  

Home Work Solutions


  Homework 1 Solutions
  Homework 2 Solutions
  Homework 3 Solutions
  Homework 4 Solutions
  Homework 5 Solutions
  Homework 6 Solutions
  






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2003/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

 
 
ICS-275A, Constraint Networks, Fall 2003
   main |
   homework |
   readings |  
   slides
  
  

 
      
      
Project:

 Either present paper(s) or choose a programming project. 

 Also, feel free to propose your own idea for a project. 



  
 Papers: 


[1]
Cover chapter 11 on tractable language in
Constraint Processing.  


[2]
Cover chapter 13 in Constraint Processing.  


[3] PDF
E. Gelle and B. Faltings. "Solving Mixed and Conditional Constraint
Satisfaction Problems". Constraints, Vol 8 Num 2, April 2003. 


[4] PS
Bacchus et. al. "DPLL with caching: a new algorithm for #SAT and Bayesian
inference".  


[5] PS
Larrosa et. al. "Solving still-life problems".  


[6] PS
van Beek et. al. "A fast and simple algorithm for bounds consistency
of  the alldifferent constraint". IJCAI2003, pp 245-250 . 


[7] 
Chmeiss and Jegou and Keddar. "On a generalization of triangulated graphs
for domain  decompositions of CSPs". IJCAI 2003, pp. 203-208. 


[8] PDF
Jegou and Terrioux. "Hybrid backtracking bounded by tree-decomposition
of constraint networks". AI Journal vol 146, no 1, 2003. 


[9] 
Terrioux and Jegou. "Bounded backtracking for the valued constraint
satisfaction problem". CP2003. 


[10] PS |
PDF Rish, I., and
Dechter, R., "Resolution versus Search: Two Strategies for SAT" In
"Journal of Automated Reasoning", special issue on SAT, Volume 24, Issue 1/2,
pp. 225-275, Januray, 2000. 


[11] PS 
Y. Zhang and R. Ypa, "Consistency and set intersection"
In "IJCAI-2003", pp. 263-267. 






     
 
        
        
   Programming Project:  
         Experiment with REES:  
        
 1. Implement your own solver, plug it into REES and compare. 
        
  
        
 2. Implement a new structure-based  random network and compare existing
algorithms in REES.
        
  
        
 3. For the task of counting solutions, perform an experimental  analysis
using REES. 
        
  
        
 4. Develop a benchmark in a dmain of your choice using REES and run your
algorithms. 
        
   
         Specific ideas:  
        
 1. Implement backtracking with forward checking using generalized arc-consistency.
        
  
        
 2. Implement variants of SLS + cycle-cutset. 
        
  
        
 3. Compare PC look-ahead with recent heuristics developed by Kalev.
        
  
        
 4. Implement path-consisteny for look-ahead but record results  on domains
only. 
        








  
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Course Reference
          
          
          Course Letter Grades >>>
          
          Instructor
          Dr. Rina Dechter, 424E Computer Science
          dechter@ics.uci.edu
          
          Teaching Assistants
          
          Ravi Chandra Jammalamadaka ( rjammala@ics.uci.edu )
          Gwendoline Chien ( gwendolc@ics.uci.edu )
          Michele Rousseau ( michele@ics.uci.edu )
          

          Readers
          
          Ming Bi ( mbi@ics.uci.edu )
          Jimmy Chong ( brujim@hotmail.com )
          
          
          
          Course Home Page
           http://www.ics.uci.edu/~dechter/ics-6a/winter-2002/index.html

          Office Hours
          
           Proffesor  Office  Hours

            Dr. Rina Dechter:CS 424EMon. and Thurs. 03:00pm - 04:00pm, and by appointment.TAsGwendoline Chien:CS 352-ETue. and Thur. 9:00am - 10:00amRavi Chandra Jammalamadaka:ICS2 - 170Fri. 2:00pm - 4:00pmMichele Rousseau:ICS 2 - 249Monday 10am - 10:50amReadersMing Bitrailer 2(master lab) room 105Tue. and Thur. 11:00am - 12:00pm

          Lecture
          Time:Monday & Wednesday, 11:00am - 12:20pmLocation:SSL  140
          

         Discussion Sections
         36011 - Section 1Gwendoline ChienMondays 9:00 - 9:50amICF 10136012 - Section 2Ravi Chandra JammalamadakaWednesday, 10:00 - 10:50amICF 10136011 - Section 3Gwendoline ChienWednesday, 9:00 - 9:50amICF 10136013 - Section 4Michele RousseauFridays, 10:00 - 10:50amSocial Science Trailer
        

        Text
        
        There is one required text for the course: Discrete Mathematics and its applications, Fourth Edition, by Kenneth H. Rosen (McGraw-Hill 1995).

        Course Grades
        
        There will be 6-7 homeworks and 6-7 quizzes. Most homeworks will be given on Monday and scheduled the following week. Quizzes will be given on Wednesdays at the beginning of class. There will be one midterm and a final. The grading criteria for the course is:
        
        Homework assignments 10%
          Quizzes 40%
          Midterm 20%
          Final 30%
        
                
        We will drop the two lowest quiz scores and the two lowest homework scores in determining your final grade.
        

        Obtaining Assistance
        
        The best way to get your questions answered is by coming to lecture, section or office hours and asking them there. In addition, you can send email to ics6a-questions-dechter@ics.uci.edu which will automatically forward the mail to the TAs and myself. It is generally preferable to use this email address instead of our personal addresses because you are likely to get an answer to your question faster if it is sent to the three of us. If you ask a question by email which requires a lengthy response, we are likely to ask you to come in to discuss the answer in person.

        Announcements
        
        Class announcements will be made in lecture and in section. Important announcements will also be posted on the class web page. The web page will contain the most up-to-date course information. Any corrections or additional explanations  for the homework assignments will also be posted there, so please check the web page occasionally to stay up to date.

        Handouts
        
        The homework solutions  and other handouts will be made available at the lecture or on the course webpage. 

        Homework And Quizes
        
        On each Monday, a new homework assignment and the solution for the previous homework will be available after lecture. The new homework which is distributed in a given week will cover material covered in lecture that week and will be due the following Monday. This means that when you receive a new homework assignment, we will not have covered all of the material in lecture necessary to do the assignment, but will have covered everything by the end of 
Wednesday's lecture. A quiz covering the same material will be given in class the following Wednesday (two days, after handing out the solutions).

        You should hand your homework in to class by 11:00 AM on Monday.  Absolutely no homework assignments will be accepted after 11:00AM .

        You can pick up your graded homeworks and quizes from the distribution center which is located in the ICS Trailers. The office hours for the distribution center are:
        
        Monday and Wednesday 1:00 - 4:00, Tuesday and Thursday, 10:00 - 10:50, 12:00 - 4:00
        
        Each homework assignment and quiz will be available a week after it was handed in.
        
        

        Questions On Grading
        
        If you have a question on how any of your quizzes or homeworks were graded, talk to the TAs, grader, or me during office hours or after section.

        Collaboration
        
        You are allowed, and even encouraged, to discuss the solutions to the homework with your fellow classmates.  However, you are required to sit down and write up your own solutions independently. In addition, you need to write down the names of any classmates with whom you have collaborated on a given assignment, clearly indicating that they are your collaborators.  Copying the homework assignment of another student is considered cheating.  Keep in mind that the homework contributes little to your final grade in comparison to the quizzes. Thus, it is very much in your own best interest to have a thorough understanding of the homework assignments before the quiz.

        Academic Honesty
        
        All work done on quizzes, midterms and finals should be your own work. Cheating on any kind of in class examination will be taken very seriously. Any such incident will result in a letter describing the incident which is placed in your file on campus. Depending on the severity of the incident, the resulting grade can range from an F on the particular examination to an automatic F in the course. Very severe incidents of academic dishonesty can result in suspension or expulsion from the university.
      
    
  
  
  

  
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/schedule.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Schedule
          The following list of topics and corresponding readings is subject to change. All readings refer to the textbook: K. H. Rosen, Discrete Mathematics and its Applications, Fourth Edition, McGraw-Hill, 1995.
          
          Homework assignments will be available starting each Monday in most weeks 1 - 9.  There will be a quiz in lecture on Wednesday in weeks 2, 3,  5, 7, 8, 9, 10. 
          
          Week 1. Introduction to the course: Logic (1.1 -1.3) Sets (1.4) Week 2.  Set operations (1.5) Counting basics (4.1,4.2)  Week 3. Counting, permutation and combinations ( 4.3, 4.6)  Week 4. Counting (4.6) Probability (4.4,  handouts) (no quiz) Week 5. Probability cont. (4.4,4.5, handouts)  Week 6. Probability (4.5, handouts), Methods of proof (3.1);  Midterm,  ; Wednesday February 13th, in class Week 7. Mathematical induction (3.2) Week 8. Sequence and summation (1.7); (Review of logarithms (A.1), self-reading); Recursive definitions (3.3)Week 9. Setting up recurrence relations ( 5.1) Week 10. Solving recurrence relations (5.1,5.2 through page 323) Week 11. Final Exam 
        
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/handout.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Handouts
          
          Notes On Discrete Probability - 
          ps - 
          pdf
          
        
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/course-letter-grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Course Letter Grades
    
[an error occurred while processing this directive]
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Grades
    
    Course Letter Grades
    
    










last
  five ID#HW1(100)HW2(100)HW3(100)Hw4(100)HW5(100)HW6(100)HW7(100)Quiz1(100)Quiz2(100)Quiz3(100)Quiz4(100)Quiz5(100)Quiz6(80)Midterm(100)Final(135)00960 8270 88  908147736330775801234779070  9087929570808875839202297677660733089918455441564 651802905729866 75  10292100659635911290490884100749563979410210050959680941280607667705990409083978190991025092760653288100921009999959911088103110 1001420665779946285818787936578456880691100773248926485 9294100733525954078560863452967488639696110 405080808469090767692709392976882888590705087511162868809798869690921008510510060951211203150826488 95 7780551006635661021255268845288  60859337   763613191308032  84 3659354451 65 14808818664 71918810589608890606483148926984828261  1007575100  746916588628870 62 74 78851059870938619749516478    100354075  62 1979812867275 906771525025631565492189554828088   861007065775076742245534968490 899510093657578 87792521068230 60  95110549473357857272947492961008310095102110100951097010012227671487652 30  89110441086 54502850948969695949794981049085816493119339177810010094100969999851058577709112334401888890959710095867370851047591111363717296809579987410066 507240666739199 100     755554  50535341307     80 102 44 58 778041577849492959498891057980956065927241971789688881009986988510579957076704216273 88 9581 915245080706864426148698988382969060103100799250928342695849696956798 9011080100106709213245733 9450 41  100110  686062 467029494868892   5578100828080117479559790829487   5763 68659497483586480809497  73592790 45937349207529250  8482956644455730812849211 6676 50767066935690535584744928998100100100  949210580  30864252376       107       54723839472909698927895804592608343580266792    93 7595  50769259884 9074 62  871107980744078976218150888078699593589755656345574364099509092 81988690684568955077 65272       95  754530705565992679488  8579102104809585 81102668517796889291959399808910087558511769149329072     3215     69335789082908197949470908510170971136935491968897100999210511075781107080986967972787092759891969437409145653371467689468905798 105110848599 78827508158906485889484100100637072 70 769127290769190989010289537990647910677352 90 97828794 100387993707711979162798492  999564 457093608097793857580849283858310610052105565569647955364908485  88108110 105 358782798448590929288899011095858077708310481844839490959191 7348502055255525834186998869896989511010475991027099106835238296889290959699110798096359612085012628672929086949290398567706510085401   92   98100  73 769185581348056803087 9811054606435727086090449079855491777435706578508810687077 8874806895  94404583607588882158484809510092 98807511088708910388577649484958198 105955590844081888926030927697758880108909090948090111919077482  97  87753845553068409267277908492778593978665751095096145926948082708887896690548585773572679430858866495709186100606790110609612294421749092 100909610543447071506966964727990100956096929311074806565817396886608625 558491957050345155826696947879686971009892969865558770818598396 98989574 881021109598100 100142988068494928577 928094555074558659991991009610095 98 941107295 55691039981877      105  8053509681                Max1001001001001001009911011010511011080100145Mean67.7789.2677.2890.8077.7292.6687.7192.8085.0165.0074.1480.7254.6980.0084.58Median72.0090.0080.0092.0081.5095.0091.0096.5090.0065.0080.0080.5055.0080.0083.00Min6642573307660363215045155318








    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/exams.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Exams
        Sample Final Exam [ pdf | ps ]

        Sample Final Exam Solutions [ pdf | ps ]

          Sample Midterm Exam[ pdf | ps ]
          
          Sample Midterm Solutions [ pdf | ps ]
          
          
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-2002/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2002, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Homework
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Readings
	
	



Dechter,
       R., "Bucket
       Elimination: A unifying framework for Reasoning." David
Larkin, Approximate Decomposition: A Method for Bounding Probabilistic and Deterministic Queries
 Judea
Pearl, Probabilistic Reasoning in Intelligent Systems.
Heckerman & Breese, Causal
Independence for Probability Assessment and Inference Using Bayesian
Networks. Boutilier,
Friedman, Goldszmidt & Koller, Context-Specific
Independence in Bayesian Networks. Dechter,
          Bucket
Elimination: A Unifying Framework for Probabilistic Inference. 1998.Dechter,
          "AAAI98
tutorial on reasoning." Heckerman, A Tutorial on Learning with Bayesian
Networks. Kjaerulff,
          dHugin: A Computational System for
Dynamic Time-Sliced Bayesian Networks. Pearl, Causation,
Action and Counterfactuals. Dechter,  Mini-buckets: a general
scheme for approximating inference. Extended report.
        Darwiche,
          Recursive
Conditioning: Any-space conditioning algorithm with treewidth-bounded complexity. Darwiche,  Any-space
probabilistic inference. Darwiche,  On the role of
partial differentiation in probabilistic inference. Horvitz, Breese, Heckerman,
Hovel & Rommelse. The Lumiere Project: Bayesian User Modeling for
Inferring the Goals and Needs of Software Users. Binder, Murphy, Russell. Space-efficient
inference in dynamic probabilistic networks. Russell, Binder, Koller, Kanazawa.
          Local
learning in probabilistic networks with hidden variables. Dugad
& Desai. A Tutorial on
Hidden Markov Models. Friedman, Geiger, Goldszmidt. Bayesian
Network Classifiers. Dechter,
R., El Fattah, Y.,
Topological Parameters For Time-Space Tradeoff Gagliardi,
F., Generalizing
Variable Elimination In Bayesian Networks Rish,
I; Dechter, R, AAAI
2000 Tutorial 
      


     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/handouts.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]


COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Handouts
		
	




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Homeworks


	
	Homework 1 (Due Monday: 10/08)- pdf
	Homework 1 (Solution)- pdf
	Homework 2 (Due Wednesday: 10/17)- pdf
	Homework 2 (Solution)- pdf
	Homework 3 (Due Monday: 10/29)- pdf
	Homework 4 (Due Wednesday: 11/07)- pdf
	Homework 5 (Due Wednesday: 11/14)- doc


	



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/projects.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Projects
	
	



A list of possible class projectsDavid Larkin. Approximate Decomposition: A Method for Bounding Probabilistic and Deterministic QueriesArthur Choi and Adnan Darwiche. An Edge Deletion Semantics for Belief Propagation and its Practical Impact on Approximation QualityArthur Choi, Mark Chavira and Adnan Darwiche. Node Splitting: A Scheme for Generating Upper Bounds in Bayesian NetworksBayesian LOGic
   BLOG syntaxBLOG: Probabilistic Models with Unknown Objects (IJCAI-05)BLOG: Probabilistic Models with Unknown Objects (chapter)Uncertainty in an Unknown World (presentation)
   Markov Logic
   Unifying Logical and Statistical AI (presentation)Markov Logic
   UAI online proceedings


     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/books.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Books
	
	



Judea Pearl. Probabilistic Reasoning in
   Intelligent Systems. Morgan Kaufmann, 1990. K. B. Korb
   and A. E. Nicholson, Bayesian Artificial Intelligence, 
             Chapman and Hall/CRC, 2004Finn V. Jensen. An introduction
   to Bayesian networks. UCL Press, 1996. Russell
   and Norvig, Artificial intelligence, a
   modern approach (chapters, 13,14,15)J. Pearl, Causality, Models,
   Reasoning and Inference, Cambridge University Press, 2000Castillo, E.; Gutierrez, J.M.; Hadi, A.S., Expert Systems and Probabilistic
   Network Models, Springer-Verlag 1997 Robert G. Cowell,
   A. Philip Dawid, Steffen L. Lauritzen, David J. Spiegelhalter
   Probabilistic Networks and Expert Systems Springer-Verlag,
1999 


     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/links.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Related Links
	
	



A Brief
   Introduction to Graphical Models and Bayesian Networks The
   Association for Uncertainty in Artificial Intelligence 
             Sponsors the conference on
   Uncertainty in Artificial Intelligence (UAI), which is the main yearly
   forum for reporting research results relating to Bayesian networks.
           FreeBayesian Network Packages 
             A
   Brief Introduction to Graphical Models and Bayesian Networks Artificial
   Intelligence: Probability studies may give computers a chance to learn,
   by Kevin J. Delaney in Cambridge,
             England.
   The Wall Street Journal Europe. AI on the web UAI
   repository More
   Inference Algorithms  The bayesian networks repository  
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]


COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





		
		 Projects - pdf
        
    
      Course Reference 
       
      
      Days: Monday/Wednesday Time: 2:00 p.m. - 3:20 p.m. Room: DBH 1423 Instructor: Rina Dechter Office Hours: Wednesday 3:30-4:30 p.m. Location: Bren Hall 4232 
      

      
      Course Description
      One of the main challenges in building intelligent systems is
the ability to reason under uncertainty, and one of the most successful
approaches for dealing with this challenge is based on the framework of
Bayesian networks, also called graphical models. Intelligent systems
based on Bayesian networks are being used in a variety of real-world
applications including diagnosis, sensor fusion, on-line help systems,
credit assessment, bioinformatics and data mining. 
      The objective of this class is to provide an in-depth
exposition of knowledge representation and reasoning under uncertainty
using the framework of Bayesian networks.  Both theoretical
underpinnings and practical considerations will be covered, with a
special emphasis on dependency and independency models, on augmenting
probablistic networks with constraints and on exact and approximate
probabilistic reasoning algorithms. Additional topics include: causal
networks, first-order probablistic languages and dynamic Bayesian
networks. 
      
      
      
      Prerequisites
      
      Familiarity with basic concepts of probability theory. Knowledge of basic computer science, algorithms and programming principles. Previous exposure to AI is desirable but not essential. 
      
      
      Tentative Syllabus
      
       Week           Date  Topic Readings
            Homeworks
             Week 1  10/01 
             Welcome; Introduction to Bayesian networks. 
            (a) Pearl chapter 1-2,  (b) Russell-Norvig chapter 13 Homework 1
            
            SolutionsClass Slides 1
                 10/03 
            Probabilistic networks representation: Independence properties. 
            
            
             Week 2  10/08 
            Markov networks: Undirected graphical models of independence. Knowledge engineering. 
             (a) Pearl chapter 3(b) Optional: Koller Chapter 3 (up to 3.4.2)
            Homework 2
            
            Solutions
             
                10/10 
            Bayesian networks: Directed graphical models of independence. 
            (a) Koller chapter 5
            
             Week 3  10/15 
            Reasoning with Probabilistic networks:  Exact reasoning by inference: Variable elimination. 
            
            
                10/17
            Tree-decompositions: bucket trees, join-trees and polytrees. Cluster tree elimination and propagation algorithms.
            (a) Bucket Elimination: A Unifying Framework for Probabilistic Inference(b) Class Notes (1-2)
            
             Week 4  10/22 
            Reasoning with probabilistic networks (continued).
            (a) Koller chapter 8
            Homework 3
            
            Due 10/29Class Slides 2
                10/24 
            Reasoning with Probabilistic networks (continued).
            
            
             Week 5  10/29 
            Inference augmented with simple search: The loop-cutset and w-cutset schemes, The MPE and MAP queries. 
            
            Homework 4Due 11/07Class Slides 3 (continued)
                10/31 
            Approximate reasoning by bounded inference: mini-bucket, mini-clustering, belief propagation schemes.
            
            
             Week 6  11/5 
            Approximate reasoning by sampling: MCMC methods (Gibbs sampling), importance sampling. Custet conditioning sampling. 
            (a) Pearl, Chapter 4 (b) Cutset sampling in Bayesian networks(c) Koller, Chapter 10
            Homework 5Due 11/14Class Slides 4 (a)
                11/7 
            Sampling (continued)
            
            Class Slides 4 (b)
             Week 7  11/12 
             No class. Veteran's day holiday 
            
            
                11/14 
            Representation: Local structures. Causal independance, context-specific and determinism 
            
            
             Week 8  11/19 
            Reasoning Hybrids trading Time and Space: AND/OR Branch and Bound and Best-first with mini-bucket heristics, AND/OR w-cutset, VEC. 
            (a) Class Notes (3)(b) AND/OR Search Spaces for Graphical Models

            (b)AND/OR search space for graphical models
            Homework 6Due 11/28Class Slides 5
                11/21 
            Extended representations: Mixed probabilisic and deterministic networks. Hybrid discrete and continuous networks. Dynamic Bayesian networks. First-order probabilistic languages. 
            
            Class Slides 6
             Week 9  11/26 
            Causal networks
            
            Class Slides 7Class Slides 8Class Slides 9
                11/28 
            Causal networks (continued)
            
            
             Week 10  12/3 
            Project presentations. 
            
            
                12/5 
            Project presentations. 
            
            
            
      
      
      
      Assignments:
      
      There will be homework assignments and
students will also be engaged in projects. 
      
      
      Grading Policy:
      
      Homeworks and projects (70%), midterm (30%)
      
      

School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/Fall-2007/software.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

COMPSCI 276 Fall 2007, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings |
 					software |
 					links |
 					projects|
 					 books ]





Software
	
	



Software Wiki
	  from UCI:
	            	http://graphmod.ics.uci.edu/group/Software/ REES from UCI: 
	            http://www.ics.uci.edu/~radum/rees.html
	          SamIam
	  from UCLA:
	            	http://reasoning.cs.ucla.edu/samiam/ JAVABayes
	  from CMU:
	            http://www.cs.cmu.edu/~javabayes/Home/
	          GeNIe/SMILE
	  from the University
	  of UPitt:
	            
	            http://genie.sis.pitt.edu/
	          Hugin
	            lite from Hugin:
	            
	            http://www.hugin.com MSBN from Microsoft Research:
	            http://research.microsoft.com/adapt/MSBNx/
	          Netica
	  from Norsys:
	            http://www.norsys.com A Matlab/C package for learning Bayes net structures
	  		  from fully observed data (discrete or continuous, static or time
	  		 series) 
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-295/spring-2007/genetic.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-295 Spring 2007, Advanced Topics in
Graphical Models: Reasoning and Modelingmain 


      Genetic Linkage Analysis 
       
      
      SUPERLINK
Homepage Mathematical
and Statistical Methods for Genetic Analysis .
Kenneth Lange.  An Introduction to
Genetic Analysis . A.J.F. Griffiths et al.Cornelia de Lange syndrome is
caused by mutations in NIPBL, the human homolog of Drosophila
melanogaster Nipped-B . Ian D. Krantz et al.
          A
Novel Markov Chain Monte Carlo Approach for Constructing Accurate
Meiotic Maps by Andrew W. George
        
      
      


School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2004/domain-ideas.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Bayesian and Constraint Networks, Spring 2003
  overview | 
  announcements | 
  home work |
  lecture notes




Ideas For Domain Modeling In Bayesian Networks
Your selection of any domain must be involved enough varaibales (at least 50 variables). Students must show that their model is valid. This can be done by connecting with an expert in the domain or by having data. Once you have the Bayesian network, you should propose what kinds of experiments to conduct over it. You may want to use REES to experiment with diffrent algorithms.

Here are a few ideas for domains:

  Advising a first year student: a freshman student needs to make many decisions in his first year (what is his major, what classes to take, etc.) Build a Bayesian network, based on your own expertise, that will advise a first year student in his first steps oncampus.Advising a busy agent: (example: an ICS Faculty prfessor) regarding the task they should or should not commit to. Consider a faculty prfessor that gets constantly requests to perform all sorts of activites, such as: participate in conference committees, reviews of papers, give invited talks at various parts of the world, write letters of recommendations, participate in committees in his campus and in the department, participate in students candidacy exams.  Each arriving request is can be characterized by a job-type, has a deadline, and has activity nature (how much time it takes to do the job for example). There are also self-imposed tasks (e.g., submit a paper to a conference, write a journal paper, go to a conference.) In addition, there are regular periodical activities (e.g., teaching, department meetings, etc.). There could be utility and costsdescribing the rewards of performing the various activities. The Bayes network should model this situation. Given a new request it should predict a "load" variable which is a function of time. Based on this load the agent can decide whether or not to commit to the task. This problem can be a variation on job-shop scheduling. But here, the main task is to decide whether or not to accept a job and determine the load, rather than to schedule the jobs. Modeling a carpool driver: 
  The carpool agent: Assume a driver in a carpool.
The driver drives a few times a week from LA to Irvine mostly in a carpool. We want to model in a Bayes network and a constraint network the knowledge of the driver accumulated over time that allows him to make decision each week on the days and time in which he wants to go to Irvine.  We want to have enough information about the freeway system, about traffic patterns during the day, during the week and during the year. The driver has constraints: his teaching time, meeting times, etc the work place. Some of these are fixed, some are changing everyweek. The main decision points each week is what days to drive, what times to tell the carpool manager they should leave from LA and depart from Irvine.  The driver has knowledge about other drivers constraints and preferences which can use.  Project: model a driver agents by acquiring information from the real agent and from data over time. Can we show how the agent learns? The driver want to drive as little as possible as the driver of the carpool. Can we develop a system that help makes this decisions? 
Input: The driver constraints for the week, the time of the week
Output: decide what days/time to send the scheduler of the carpool
for that week.  The knowledge-bases should have general information:
about time to drive LA-Irvine, traffic pattern as a function of
time (day/hour,season/holiday, etc) Information about other agents
constraints.  

  Recognizing agent's (terrorist) activities: Build a Bayesian network that can recognize terrorits activity and terorists. if you can have access to this domain, either based on some book on the subject or by geting in touch with an expert. 




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/books/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI :: Constraint Processing, the book
##------------------TEXT------------------------##
Prof. Rina Dechter, Ph.D 
Artificial Intelligence
Office: DBH 4232
Phone: 1.949.824.6556
Email: dechter_at_ics.uci.edu



  Highlights and News  
BOOK (2013) Reasoning with Probabilistic and Deterministic Graphical Models: Exact Algorithms AWARD 
2013 ACM Fellow
(link 1 /
link 2)

PASCAL CHALLENGE (2012)Solvers by current and former students won first places in all nine categories of the 2011 PASCAL Probabilistic Inference Challenge. (link 1 / link 2)UAI COMPETITION (2010)Our solvers IJGP and FormulaSampleSearch won first places in two categories each, Daoopt won third place in three categories. (link 1 / link 2)
CS 275
Constraint Networks Course PageMINI-SCHOOLUCI Lifted Algorithms Mini-School (November 3-6)BOOK (2010)'Heuristic, probability and Causality: a tribute to Judea Pearl' (link)IJCAI 2013 TUTORIAL Constraint Processing and Probabilistic Reasoning More















Home
Biographical

Research Overview
My Group

Publications 
Selected Talks


Awards

Software 
Courses
My Books









				
					
						
							Constraint Processing
						
						
							by Rina Dechter
						
						
							Published by Morgan Kaufmann
						
						
						
									
										About the Book
									
									
										Material for Instructors
									
									
										Commentary
									
									
										Review (Journal of Logic Programming, by Roland H.C. Yap)
									
									
										Review (Artificial Intelligence Journal, by Roman Bart�k)
									
									
										Review (SIAM Review, by Maarten van Emden)
									
									
										Review (AI Magazine, by Peter van Beek and Toby Walsh)
									
									
										Buy Online:
									
									
										Morgan Kaufmann
									
									
										Amazon.com
									
								
									
								
					
				
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2004/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Constraint Networks, Spring 2003
  overview | 
  announcements | 
  lecture notes | 
  projects




Home Work





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2004/grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 
    
    
    ICS-175A, Constraint Networks, Spring 2003
            overview |
            home work |
            lecture notes
          
    
    
          Grades
          
          Sorted by the last three digits of the student I.D. numbers.  The grades are on a scale from 1 - 10 
    
    
    
            Student ID
            last 3 digits
          
            Grade

          
    
    
    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2004/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Bayesian and Constraint Networks, Spring 2003
  overview | 
  home work
  





Lecture Notes





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2004/modeling-projects.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Bayesian and Constraint Networks, Spring 2003
  overview | 
  announcements | 
  home work |
  lecture notes




Requirements for the Bayesian Modeling Project
The project has 3 requirements:

 Building the Bayesian network and implementing in one of the tools
   Verifying andevaluating the generated Bayesian networks
   Experimenting and analyzing the Bayesian networks.


 Building the network: requires the generation of the graph (from an expert, or other source) and generating the tables (from an expert or from data). You should determine which variables are observed normally, which are hidden and which are likely to be queried.
  
   Verifying the network includes first verifying all the tests of conditional independencies: arguing convincingly that  each parents makes a child node independent of the rest of the ancestors and making sure that the parent set is minimal. Then showing and justifying how the CPTs were created (from data? from expert? ) Basic evaluation include running queries and showing that the answers are reasonable and making sure that it all work properly.
  
   Network analysis and addition to Benchmark:
  Make a set of experiments with your network and analyze performance. First determine its tree-width. Second run various algorithms and compare their run time. report the results. This portion is best done with REES. So you may need to compile your network so it is recognized by REES. You report the results using REES.
  You make your network available on REES benchmarks.

  





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-295/winter-2011/resources.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CS-295 Reasoning and Modeling with Graphical
Models: Sampling and Parallel computation, Spring 2008  main 


  Link to CS 295 seminar offered in Spring 2007 Resources for Sampling.
      
      “Monte Carlo
Strategies in Scientific Computing” by J. S. Liu, Springer,E. Thompson Tutorial
      Resources for Parallel
Processing.
      
      Ydo Wexler, Dan Geiger: Variational Upper Bounds for
Probabilistic Phylogenetic Models. RECOMB 2007: 226-237,Ron Zohar, Dan Geiger: Estimation of flows in flow
networks. European Journal of Operational Research 176(2): 691-706
(2007).Mark Silberstein, Dan Geiger, Assaf Schuster: A
Distributed System for Genetic Linkage Analysis. GCCB 2006: 110-123.Dan Geiger, Christopher Meek, Ydo Wexler: A Variational
Inference Procedure Allowing Internal Structure for Overlapping
Clusters and
Deterministic Constraints. J. Artif. Intell. Res. (JAIR) 27: 1-23
(2006). Class notes by Prof. VishkinX. Wen and U. Vishkin  “Parallel
computation for Graphical models PFGA-Based
Prototype of a
PRAM-On-Chip Processor”, 2007.M. Silberstein et al. "Efficient Sum Product
computations on GPUs", 2008. PDF
          
      Resources for Inference.
      
      Mark Chavira and Adnan Darwiche “On Probabilistic
Inference by Weighted Model Counting”  in
Artificial Intelligence Journal (AIJ), 2008. Joris Mooij “Understanding and improving Belief
propagation, Phd thesis, 2008A. Ihler, John Fisher, A. Willskey Loopy belief
propagation: Convergence and effects of message errors” JAIR 2005A Globerson and T Jaakola “Convergent Propagation
algorithms via oriented Trees” 2007D Sontag and T. Jaakola “New Outer Bounds on the
marginal polytope”Amir Globerson and Tommi Jaakkola, Approximate
inference using conditional entropy decompositions, AISTATS 2007. 
        Timothee Cour and Jianbo Shi, Solving Markov Random
Fields with Spectral Relaxation, AISTATS 2007. 
        Joris Mooij, Bastian Wemmenhove, Bert Kappen and
Tommaso Rizzo, Loop Corrected Belief
Propagation, AISTATS 2007. 
        Edward Snelson and Zoubin Ghahramani, Local and global
sparse Gaussian process approximations. AISTATS 2007. 
        Gregory Druck, Mukund Narasimhan and Paul Viola.
Learning A* underestimates: Using inference to guide inference. AISTATS
2007. 
        M. J. Wainwright, T. Jaakkola and A. S. Willsky. A
new class of upper bounds on the log partition function. IEEE Trans. on
Information Theory, vol. 51, page 2313--2335, July 2005. 
        M. J. Wainwright, and M. I. Jordan. Graphical models,
exponential families, and variational inference. UC Berkeley, Dept. of
Statistics, Technical Report 649. September, 2003. 
        Paper
on Graph cuts by Ramin Zabih
        Vladimir
Kolmogorov and Ramin Zabih. "Graph Cut Algorithms for Binocular Stereo
with Occlusions'', . In: Mathematical Models in Computer Vision:
The Handbook, Springer-Verlag (2005). Vladimir
Kolmogorov and Ramin Zabih. "What Energy Functions can be Minimized via
Graph Cuts?'',  IEEE Transactions on Pattern Analysis and
Machine Intelligence, vol. 26, no. 2 pages 147-159
(2004). 
      Resources for Linkage Analysis.
      
       Eric S. Lander and Philip Green. Construction of
multilocus genetic linkage maps in humans. Genetics. April 1987. 
        Goncalo R. Abecasis and Janis E. Wigginton. Handling
Marker-Marker Linkage Disequilibrium: Pedigree Analysis with Clustered
Markers,
American Journal of Human Genetics. Sept 2005. 
        P Stuart et al. Analysis of RUNX1 binding site
and
RAPTOR polymorphisms in psoriasis: no evidence for association despite
adequate
power and evidence for linkage. American Journal of Human Genetics.
Sept 2006.Joshua T Burdick, Wei-Min Chen, Gonc¸alo R Abecasis
and Vivian G Cheung, In silico method for inferring genotypes in
pedigrees,
Nature genetics.August 2006. Download hereGonçalo R. Abecasis, Stacey S. Cherny, William O.
Cookson1 & Lon R. Cardon. Merlin—rapid analysis of dense genetic
maps using
sparse gene flow trees. Nature Genetics.Dec 2001. Scheet, P and Stephens, M A Fast and Flexible
Statistical Model for Large-Scale Population Genotype Data:
Applications to
Inferring Missing Genotypes and Haplotypic Phase.  American
Journal of
Human Genetics. 2006. Stephens, M and Scheet, P. Accounting for Decay of
Linkage Disequilibrium in Haplotype Inference and Missing-Data
Imputation,
American Journal of Human Genetics. 2005. M. Fishelson and D. Geiger. Exact Genetic Linkage
Computations for General Pedigrees.  Bioinformatics, Volume 18
Suppl. 1:
S189-S198 (July 2002). Also presented in ISMB2002 (August, 2002). M. Fishelson and D. Geiger Optimizing Exact Genetic
Linkage Computations.  Journal of Computational Biology Volume
11(2-3):
263-75 (2004). Also presented in RECOMB2003 (April, 2003).M. Fishelson, N. Dovgolevsky and D. Geiger. Maximum
Likelihood Haplotyping for General Pedigrees. Technical Report
CS-2004-13. To
appear in Human Heredity, 2005. M. Fishelson, N. Dovgolevsky and D. Geiger. Maximum
Likelihood Haplotyping for General Pedigrees. Human Heredity 2004. Yun Ju Sung, Elizabeth A. Thompson and Ellen M.
Wijsman MCMC-Based Linkage Analysis for Complex Traits on General
Pedigrees: Multipoint
          Analysis
With a Two-Locus Model and a
Polygenic Component, Genetic Epidemiology 2007. 
         Hot topics: Essay on Computational Intelligence in Human Genetics Exciting
 
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-08/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-271, Introduction to Artificial Intelligence, Fall 2008
    main |
    announcements |
    lecture notes |
    project




Homework
  Homework 1
  Homework 2 (updated 10/14)
  Homework 3
  Homework 4
  Homework 5
  Homework 6
  Homework 7 (updated 11/19)

  






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-08/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Fall 2008
    main |
    lecture notes |
    homework |
    project



Announcements
    
  




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-08/project/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-271, Introduction to Artificial Intelligence, Fall 2008
  main |
  announcements |
  home work |
  lecture notes



Project
Selected papers
Anytime search in dynamic graphs, Likhachev et al. AIJ 172 (2008).From One to Many: Planning for Loosely Coupled Multi-Agent Systems, Ronen I. Brafman, Carmel Domshlak. ICAPS 2008.Causal Graphs and Structurally Restricted Planning, Hubie Chen, Omer Giménez. ICAPS 2008.Additive-Disjunctive Heuristics for Optimal Planning, Andrew Coles, Maria Fox, Derek Long, Amanda Smith. ICAPS 2008.A Hybrid Relaxed Planning Graph-LP Heuristic for Numeric Planning Domains, Andrew Coles, Maria Fox, Derek Long, Amanda Smith. ICAPS 2008.Learning Relational Decision Trees for Guiding Heuristic Planning, Tomás de la Rosa, Sergio Jiménez, Daniel Borrajo. ICAPS 2008.In Search of the Tractability Boundary of Planning Problems, Omer Giménez, Anders Jonsson. ICAPS 2008.A New Approach to Tractable Planning, Patrik Haslum. ICAPS 2008.Unifying the Causal Graph and Additive Heuristics, Malte Helmert, Héctor Geffner. ICAPS 2008.Optimal Additive Composition of Abstraction-based Admissible Heuristics, Michael Katz, Carmel Domshlak. ICAPS 2008.Structural Patterns Heuristics via Fork Decomposition, Michael Katz, Carmel Domshlak. ICAPS 2008.Angelic Hierarchical Planning: Optimal and Online Algorithms, Bhaskara Marthi, Stuart Russell, Jason Wolfe. ICAPS 2008.Learning Heuristic Functions through Approximate Linear Programming, Marek Petrik, Shlomo Zilberstein. ICAPS 2008.P3C: A New Algorithm for the Simple Temporal Problem, Léon Planken, Mathijs de Weerdt, Roman van der Krogt. ICAPS 2008.Using Constraint Networks on Timelines to Model and Solve Planning and Scheduling Problems, Cédric Pralet, Gérard Verfaillie. ICAPS 2008.The Complexity of Optimal Planning and a More Efficient Method for Finding Solutions, Katrina Ray, Matthew L. Ginsberg. ICAPS 2008.Effective Information Value Calculation for Interruption Management in Multi-Agent Scheduling, David Sarne, Barbara J. Grosz, Peter Owotoki. ICAPS 2008.Fast Dynamic Scheduling of Disjunctive Temporal Constraint Networks through Incremental Compilation, Julie A. Shah, Brian C. Williams. ICAPS 2008.Efficient ADD Operations for Point-Based Algorithms, Guy Shani, Pascal Poupart, Ronen I. Brafman, Solomon E. Shimony. ICAPS 2008.Faster than Weighted A*: An Optimistic Approach to Bounded Suboptimal Search, Jordan T. Thayer, Wheeler Ruml. ICAPS 2008.Fast and Memory-Efficient Multi-Agent Pathfinding, Ko-Hsin Cindy Wang, Adi Botea. ICAPS 2008.Dynamic Control in Path-Planning with Real-Time Heuristic Search,
Vadim Bulitko, Yngvi Bjornsson, Mitja Lustrek, Jonathan Schaeffer, Sverrir Sigmundarson. ICAPS 2007.Online Planning for Resource Production in Real-Time Strategy Games,
Hei Chan, Alan Fern, Soumya Ray, Nick Wilson, Chris Ventura. ICAPS 2007.Act Local, Think Global: Width Notions for Tractable Planning,
Hubie Chen, Omer Gimenez. ICAPS 2007.External Memory Value Iteration,
Stefan Edelkamp, Shahid Jabbar, Blai Bonet. ICAPS 2007.On the Hardness of Planning Problems With Simple Causal Graphs,
Anders Jonsson, Omer Gimenez. ICAPS 2007.Flexible Abstraction Heuristics for Optimal Sequential Planning,
Malte Helmert, Patrik Haslum, Joerg Hoffmann. ICAPS 2007.Temporally-expressive Planning as Constraint Satisfaction Problems,
Yuxiao Hu. ICAPS 2007.Structural Patterns of Tractable Sequentially-Optimal Planning,
Michael Katz, Carmel Domshlak. ICAPS 2007.Angelic Semantics for High-level Actions,
Bhaskara Marthi, Jason Wolfe, Stuart Russell. ICAPS 2007.From Conformant into Classical Planning: Efficient Translations That May be Complete Too,
Hector Palacios, Hector Geffner. ICAPS 2007.Managing Personal Tasks with Time Constraints and Preferences,
Ioannis Refanidis. ICAPS 2007.Approximate Solution Techniques for Factored First-order MDPs,
Scott Sanner, Craig Boutilier. ICAPS 2007.Discovering Relational Domain Features for Probabilistic Planning,
Jia-Hong Wu, Bob Givan. ICAPS 2007.

ICAPS 2008
Accepted papersFull ICAPS/CP/KR conference program PDFConference website

ICAPS 2007
Accepted papersConference website


Homepages of selected researchers:
Alessandro Cimatti's homepageHector Geffner's homepageMalte Helmert's homepageJörg Hoffmann's homepage

Projects from previous years

ICAPS 2006
Accepted papers


ICAPS 2005
Accepted papers (Program)


ICAPS 2004
Accepted papers
	Selected papers:Ronen I. Brafman and Joerg Hoffmann Conformant Planning via Heuristic Forward Search: A New Approach (in ICAPS'04)
	  Malte Helmert A Planning Heuristic Based on Causal Graph Analysis (in ICAPS'04)
	  Jussi Rintanen Complexity of Planning with Partial Observability (in ICAPS'04)
	  Ronald P. A. Petrick and Fahiem Bacchus Extending the Knowledge-Based Approach to Planning with Incomplete Information and Sensing (in ICAPS'04)
	







    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-08/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 


ICS-271, Intorduction to Artificial
Intelligence, Fall 2008 main | announcements | homework
| project


      Lecture Notes
      
      Lecture notes 1 Lecture notes 2 Lecture notes 3Lecture notes 4 (updated 10/19)Lecture notes 5Lecture notes 6Lecture notes 7Lecture notes 8Lecture notes 9Lecture notes 10
      




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-08/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 


ICS-271, Intorduction to Artificial
Intelligence, Fall 2008 main | announcements | 
      lecture notes | homework
| project


      ReadingsDisjoint
        Pattern Database Heuristics
        Design of Heuristic Functions
      
       




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~welling/classnotes/classnotes.html
##-----------------TITLE------------------------##
Max Welling's Home Page
##------------------TEXT------------------------##
  


   
  
   
  
   
  
   
  
  
   
  Max
  Welling's Classnotes in Machine Learning
  Statistical Estimation [ps]
  - bayesian estimation
  - maximum a posteriori (MAP) estimation
  - maximum likelihood (ML) estimation
  - Bias/Variance tradeoff & minimum description length (MDL)
  Expectation Maximization
  (EM) Algorithm [ps]
  - detailed
  derivation plus some examples
  Supervised Learning
  (Function Approximation)
  [ps]
  - mixture of experts (MoE)
  - cluster weighted modeling (CWM)
  Clustering [ps]
  - mixture of gaussians (MoG)
  - vector quantization (VQ) with k-means.
  Linear Models [ps]
  - factor analysis (FA)
  - probabilistic principal component analysis (PPCA)
  - principal component analysis (PCA)
  Independent Component
  Analysis (ICA) [ps]
  - noiseless ICA
  - noisy ICA
  - variational ICA
  Mixture of Factor Analysers
  (MoFA) [ps]
  - derivation of learning algorithm
  Hidden Markov Models (HMM) [ps]
  - viterbi decoding algorithm
  - Baum-Welch learning algorithm
  Kalman Filters (KF) [ps]
  - kalman filter algorithm (very detailed derivation)
  - kalman smoother algorithm (very detailed derivation)
  Approximate Inference
  Algorithms [ps]
  - variational EM
  - laplace approximation
  - importance sampling
  - rejection sampling
  - markov chain monte carlo (MCMC) sampling
  - gibbs sampling
  - hybrid monte carlo
  sampling (HMC)
  Belief Propagation (BP) [ps]
  - Introduction to BP and GBP:
  powerpoint presentation [ppt]
										- converting directed acyclic graphical models (DAG) into junction trees
  (JT)
  - Shafer-Shenoy belief propagation on junction trees
  - some examples
  Boltzmann Machine (BM) [ps]
  - derivation of learning algorithm
  Generative Topographic
  Mapping (GTM) [ps]
  - derivation of learning algorithm
  Introduction
  to Kernel Methods: powerpoint presentation [ppt]
  Kernel
  Principal Components Analysis [pdf]
  Kernel
  Canonical Correlation Analysis [pdf]
  Kernel
  Support Vector Machines [pdf]
  Kernel
  Ridge-Regression [pdf]
  Kernel
  Support Vector Regression [pdf]
  Convex
  Optimization [pdf]
  A brief
  introduction based on Stephan Boyd’s book, chapter 5.
							Fisher
  Linear Discriminant Analysis [pdf]
							
  
  
										
										
											This material is based upon work supported by the National Science Foundation under Grant No. 0447903. and Grant No. 0535278. Any opinions, findings and conclusions or recomendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF).
											
										
									
  
  
							[Back to Max
  Welling's's home page] 
  
  
   
  
   
  
   
  
   
  

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-04/schedule.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2004, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Schedule
          The following list of topics and corresponding readings is subject to change. All readings refer to the textbook: K. H. Rosen, Discrete Mathematics and its Applications, Fourth Edition, McGraw-Hill, 1995.
          
          Homework assignments will be available starting each Tuesday in most weeks 1 - 9.  There will be a quiz in lecture on Thursday in weeks 2, 3,  5, 7, 8, 9, 10. 
          
          Week 1. Introduction to the course: Logic (1.1 -1.4, sets 1.6) Week 2.  Sets and Set operations (1.7) Counting basics (4.1,4.2)  Week 3. Permutation and combinations ( 4.3-- 4.5)  Week 4. Probability (5.1, 5.2)  Week 5. Probability cont. (5.2,5.3)  Week 6.  Methods of proofs (1.5, 3.1) ;  Midterm, Thursday February 19  ;  Week 7. Mathematical induction, sequence and summation (3.3, 3.2), Review of Logarithms (A.1), self-reading Week 8. Recursive definitions and algorithms (3.4,3.5), recurrence relations (6.1)Week 9. Recurrence relations, continued (6.1), solving resurrence relations (6.2) Week 10. Solving recurrence relations cont. (6.2, part of 6.3 ) Week 11. Final Exam 
        
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-04/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2004, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Homework
          Homework 1 ps - pdf
       	  Homework 2 ps - pdf
          Homework 3 ps - pdf
          Homework 4 ps - pdf
          Homework 5 pdf
          Homework 6 ps - pdf
          Homework 7 ps - pdf
          Homework 8 ps - pdf
          Homework 9 ps - pdf

        
          Solution 1  ps - pdf
          | questions 5-8 pdf
          
          Solution 2 ps - pdf
          Solution 3 ps - pdf
          Solution 4 pdf
          Solution 5 pdf
          Solution 6 ps - pdf
          Solution 7 ps - pdf
          Solution 8 ps - pdf
          Solution 9 ps - pdf

        
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-04/exams.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2004, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Exams
        Sample Final Exam [ pdf | ps ]

        Sample Final Exam Solutions [ pdf | ps ]

          Sample Midterm Exam [ pdf | ps ]

          Sample Midterm Solutions [ pdf | ps ]
        
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-04/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2004, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    
	          Sample final exam posted
	          
      

      Course Reference
          
          Instructor
          Dr. Rina Dechter, 424E Computer Science
          dechter@ics.uci.edu

          Teaching Assistants
          
          Chris Wesson ( cwesson@uci.edu  )
          

          Readers
          
          Ming Bi ( mbi@ics.uci.edu )

          

          Course Home Page
           http://www.ics.uci.edu/~dechter/ics-6a/winter-04/index.html

          Office Hours
          
           Proffesor  Office  Hours

            Dr. Rina Dechter:CS 424ETue. and Thurs. 01:00pm - 02:00pm, and by appointment.TAsChris Wesson:ETC 116Monday 2:00-3:00, Thursday 12:00-1:00, 116 Readers

          Lecture
          Time:Tuesday & Thursday, 02:00am - 03:20pmLocation:ICS  180
          

         Discussion Sections
         Chris Wesson Mondays/wednesdays 3:00-3:50pmEIC 120
        

        Text
        
        There is one required text for the course: Discrete Mathematics and its applications, Fifth Edition, by Kenneth H. Rosen (McGraw-Hill 1995).

        Course Grades
         index
        There will be 8-9 homeworks and 7-8 quizzes. Most homeworks will be given on Tuesday and scheduled the following week. Quizzes will be given on Thursdays at the beginning of class. There will be one midterm and a final. The grading criteria for the course is:

        Homework assignments 10%
          Quizzes 40%
          Midterm 15%
          Final 35%
        

        We will drop the two lowest quiz scores and the two lowest homework scores in determining your final grade.
        

        Obtaining Assistance
        
        The best way to get your questions answered is by coming to lecture, section or office hours and asking them there. In addition, you can send email to ics6a-questions-dechter@ics.uci.edu which will automatically forward the mail to the TAs and myself. It is generally preferable to use this email address instead of our personal addresses because you are likely to get an answer to your question faster if it is sent to the three of us. If you ask a question by email which requires a lengthy response, we are likely to ask you to come in to discuss the answer in person.

        Announcements
        
        Class announcements will be made in lecture and in section. Important announcements will also be posted on the class web page. The web page will contain the most up-to-date course information. Any corrections or additional explanations  for the homework assignments will also be posted there, so please check the web page occasionally to stay up to date.

        Handouts
        
        The homework solutions  and other handouts will be made available at the lecture or on the course webpage. 

        Homework And Quizes
        
        On each Tuesday, a new homework assignment and the solution for the previous homework will be available after lecture. The new homework which is distributed in a given week will cover material covered in lecture that week and will be due the following Tuesday. This means that when you receive a new homework assignment, we will not have covered all of the material in lecture necessary to do the assignment, but will have covered everything by the end of
Thursday's lecture. A quiz covering the same material will be given in class the following Thursday (two days, after handing out the solutions).

        You should hand your homework in to class by 02:00 PM on Tuesday .  Absolutely no homework assignments will be accepted after 02:00PM .

        You can pick up your graded homeworks and quizes from the distribution center which is located in the ICS Trailers. The office hours for the distribution center are:

        Monday and Wednesday 11:00 - 3:00, Tuesday, 10:00-1:00, and Thursday and Friday, 12:00 - 3:00

        Each homework assignment and quiz will be available a week after it was handed in.
        
        

        Questions On Grading
        
        If you have a question on how any of your quizzes or homeworks were graded, talk to the TAs, grader, or me during office hours or after section.

        Collaboration
        
        You are allowed, and even encouraged, to discuss the solutions to the homework with your fellow classmates.  However, you are required to sit down and write up your own solutions independently. In addition, you need to write down the names of any classmates with whom you have collaborated on a given assignment, clearly indicating that they are your collaborators.  Copying the homework assignment of another student is considered cheating.  Keep in mind that the homework contributes little to your final grade in comparison to the quizzes. Thus, it is very much in your own best interest to have a thorough understanding of the homework assignments before the quiz.

        Academic Honesty
        
        All work done on quizzes, midterms and finals should be your own work. Cheating on any kind of in class examination will be taken very seriously. Any such incident will result in a letter describing the incident which is placed in your file on campus. Depending on the severity of the incident, the resulting grade can range from an F on the particular examination to an automatic F in the course. Very severe incidents of academic dishonesty can result in suspension or expulsion from the university.
      
    
  
  
  

  
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/winter-04/handout.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]
    

ICS-6A Winter 2004, Discrete Mathematics for Computer Science
  [ course reference | schedule |
  homework |  handouts | grades | exams ]



    
    
    Handouts
          
          Notes On Discrete Probability - 
          ps - 
          pdf
          
        
    
    

    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-12/grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Grades



IDHW %Exam %Project %Letter Grade7140442396.9087.69100.00A8740831597.0186.92100.00A2576514892.6793.85100.00A+8816533689.1970.00100.00B3784578496.5664.62100.00B7464978093.9393.0890.00A1180727375.8151.5490.00C4912460895.1889.2393.33A8620456194.1969.2393.33B9372775388.2545.3890.00C7672841497.6782.3186.67A-3384871892.9476.9290.00B+7152338493.6876.9293.33B+1588205996.5583.8593.33A4708135590.5993.0896.67A8292881584.3980.0093.33B+6444406994.6390.7790.00A8980329196.1576.15100.00A-3312839696.8588.46100.00A3368216862.8859.2390.00C2292380791.1181.5493.33A-8280855692.8368.4693.33B7972536593.2480.7790.00B+1840244080.8559.23100.00B6448963286.1980.7796.67A-3300632795.9890.7786.67A9591188089.8880.0093.33B+9504428492.2873.8590.00B1668354396.3485.3886.67A-8136832093.4981.5493.33A-1540475294.0776.9293.33B+3020441790.0773.0890.00B1528948685.4583.0886.67B+6928104893.5966.9290.00B3632658493.9075.3896.67B+7948269390.9580.77100.00A-7808490895.3679.2383.33B+3152387294.3175.3890.00B+3736491891.8493.8593.33A3508699597.7782.3186.67A-4084728393.2083.8590.00A-5244225783.6590.7790.00A8592396498.1976.1593.33B+8604949780.6471.5490.00B8852559192.2663.0890.00BMean91.4178.0992.81
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-12/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Project Presentation Schedule/List

Project Information
Students should form teams of 2 or 3 students (preferable 3) for each project.
Project can be of two types:

a) Article-centered project
 A project can be centered on 1-2 primary articles selected from the recent conferences that are listed.
 The idea is that the paper will open a window to a subject that the students read and  explore also  background and information reading earlier  papers (that appear in the citations of the primary papers. ) Students  may investigate the validity of paper by running code developed on some benchmarks whenever relevant.

Students can communicate with authors to get slides for presentations and code.

 The team will present the paper to the class (20-30 minutes depending on the team size) and write a project report to be handed in on Monday of the 11th week. The project report should include a description and evaluation of the paper and any creative independent work carried out by the team.

b) Your own project idea 
Any other idea for a project will be considered but need to be approved. (e.g., implementing algorithms and applying to some domain).

Selected Papers
 Below are selected  papers from the conferences listed below that caught my eye. Feel free to consider the full lists of at least SoCS 2012/2011 and ICAPS 2012/2011.

 Project proposals and teams should be handed in on Wednesday November 14th. Provide two proposals in order of your preference.


Width and Serialization of Classical Planning Problems (in ECAI 2012)
Nir Lipovetzky and Hector Geffner


Width and Complexity of Belief Tracking in Non-Deterministic Conformant and Contingent Planning (in AAAI 2012)
Blai Bonet and Hector Geffner


Action Selection for MDPs: Anytime AO* vs. UCT (in AAAI 2012)
Blai Bonet and Hector Geffner


Planning as Satisfiability: Heuristics (in AIJ 2012)
Jussi Rintanen


SoCS 2012


Are We There Yet? - Estimating Search Progress
Jordan T. Thayer, Roni Stern, and Levi H. S. Lelis 


Real-Time Motion Planning with Dynamic Obstacles
Jarad Cannon, Kevin Rose, and Wheeler Ruml


Execution Ordering in AND/OR Graphs with Failure Probabilities
Priyankar Ghosh, P. P. Chakrabarti, and Pallab Dasgupta


Performance Analysis of Planning Portfolios
Sergio Núñez, Daniel Borrajo, and Carlos Linares López


Multimapping Abstractions and Hierarchical Heuristic Search
Bo Pang and Robert C. Holte


When does Weighted A* Fail?
Christopher Wilt and Wheeler Ruml

SoCS 2011


Cost-Based Heuristic Search Is Sensitive to the Ratio of Operator Costs
Christopher Makoto Wilt, Wheeler Ruml


Adapting a Rapidly-Exploring Random Tree for Automated Planning
Vidal Alcázar, Manuela Veloso, Daniel Borrajo


Best-First Search for Bounded-Depth Trees
Kevin Rose, Ethan Burns, Wheeler Ruml


All PSPACE-Complete Planning Problems Are Equal but Some Are More Equal than Others
Christer Backstrom, Peter Jonsson


Degrees of Separation in Social Networks
Reza Bakhshandeh, Mehdi Samadi, Zohreh Azimifar, Jonathan Schaeffer


Automatic Move Pruning in General Single-Player Games
Neil Burch, Robert C. Holte


Deadline-Aware Search Using On-Line Measures of Behavior
Austin J. Dionne, Jordan Tyler Thayer, Wheeler Ruml

These two papers can be a single project for a team of 3.
Path Planning with Adaptive Dimensionality
Kalin Gochev, Benjamin Cohen, Jonathan Butzke, Alla Safonova, Maxim Likhachev

Search-Based Planning with Provable Suboptimality Bounds for Continuous State Spaces
Juan Pablo Gonzalez, Maxim Likhachev


A Novel Technique for Compressing Pattern Databases in the Pancake Sorting Problems
Morteza Keshtkaran, Roohollah Taghizadeh, Koorush Ziarati


A Preliminary Evaluation of Machine Learning in Algorithm Selection for Search Problems
Lars Kotthoff, Ian P. Gent, Ian Miguel


Faster Optimal and Suboptimal Hierarchical Search
Michael J. Leighton, Wheeler Ruml, Robert C. Holte

These two papers are a single project.
Predicting Solution Cost with Conditional Probabilities
Levi Lelis, Roni Stern, Shahab Jabbari Arfaee

Improved Prediction of IDA*'s Performance via Epsilon-Truncation
Levi Lelis, Sandra Zilles, Robert Craig Holte


State-Set Search
Bo Pang, Robert C. Holte


Size-Independent Additive Pattern Databases for the Pancake Problem
Álvaro Torralba Arias de Reyna, Carlos Linares López


Scalable Distributed Monte-Carlo Tree Search
Kazuki Yoshizoe, Akihiro Kishimoto, Tomoyuki Kaneko, Haruhiro Yoshimoto, Yutaka Ishikawa


ICAPS 2012

Tractable Monotone Temporal Planning [PDF]
Martin C. Cooper, Frederic Maris, Pierre Regnier


Sampling-Based Coverage Path Planning for Inspection of Complex Structures [PDF]
Brendan J. Englot, Franz S. Hover


Pruning Methods for Optimal Delete-Free Planning [PDF]
Avitan Gefen, Ronen Brafman


Incremental Lower Bounds for Additive Cost Planning Problems [PDF]
Patrik Haslum


Optimal Search with Inadmissible Heuristics [PDF]
Erez Karpas, Carmel Domshlak


PROST: Probabilistic Planning Based on UCT [PDF]
Thomas Keller, Patrick Eyerich


Semi-Relaxed Plan Heuristics [PDF]
Emil Ragip Keyder, Joerg Hoffmann, Patrik Haslum


Reverse Iterative Deepening for Finite-Horizon MDPs with Large Branching Factors [PDF]
Andrey Kolobov, Peng Dai, Mausam Mausam, Daniel S. Weld


Predicting Optimal Solution Cost with Bidirectional Stratified Sampling [PDF]
Levi Lelis, Roni Stern, Ariel Felner, Sandra Zilles, Robert C. Holte


On Computing Conformant Plans Using Classical Planners: A Generate-And-Complete Approach [PDF]
Khoi Hoang Nguyen, Vien Dang Tran, Tran Cao Son, Enrico Pontelli


Incremental ARA*: An Incremental Anytime Search Algorithm for Moving-Target Search [PDF]
Xiaoxun Sun, William Yeoh, Tansel Uras, Sven Koenig


Faster Bounded-Cost Search Using Inadmissible Estimates [PDF]
Jordan Tyler Thayer, Roni Stern, Ariel Felner, Wheeler Ruml


Short-Sighted Stochastic Shortest Path Problems [PDF]
Felipe W. Trevizan, Manuela M. Veloso


Bandit-Based Planning and Learning in Continuous-Action Markov Decision Processes [PDF]
Ari Weinstein, Michael L. Littman


Planning Via Random Walk-Driven Local Search [PDF]
Fan Xie, Hootan Nakhost, Martin Müller



Links to Conferences

SoCS 2012
Website
  Proceedings


SoCS 2011
Website
  Proceedings


ICAPS 2012
WebsiteProceedings

ICAPS 2011
WebsiteProceedings

ICAPS 2008
Accepted papersFull ICAPS/CP/KR conference program PDFConference website

ICAPS 2007
Accepted papersConference website


Publications of selected researchers:
Wheeler Ruml
Malte HelmertHector Geffner
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-06/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 


ICS-271, Intorduction to Artificial
Intelligence, Fall 2006 main | announcements | homework
| project


      Lecture Notes
      
      Lecture notes
1  Lecture notes
2  Lecture notes 3Lecture notes 4Lecture notes 5Lecture notes 6Lecture notes 7Lecture notes 8Lecture notes 9Lecture notes 10
      




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-06/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-271, Intorduction to Artificial Intelligence, Fall 2006
    main |
    announcements |
    lecture notes |
    project




Homework
  Homework 1
  Homework 2
  Homework 3
  Homework 4
  Homework 5
  Homework 6
  Homework 7


  
  




  
  






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-06/project/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-271, Introduction to Artificial Intelligence, Fall 2006
  main |
  announcements |
  home work |
  lecture notes



Project
Project Teams

ICAPS 2006
Accepted papers
	ICAPS'06 Schedule
	Allen Chang, Eyal Amir Goal Achievement in Partially Known, Partially Observable Domains (in ICAPS'06)
	Blai Bonet, Hector Geffner Learning Depth-First Search (in ICAPS'06)
	Carmel Domshlak, Joerg Hoffmann Fast Probabilistic Planning Through Weighted Model Counting (in ICAPS'06)
	Rune Jensen, Eric Hansen, Simon Richards, Rong Zhou Memory-Efficient Symbolic Heuristic Search (in ICAPS'06)
	H. Palacios and H. Geffner Compiling Uncertainty Away: Solving Conformant Planning Problems Using a Classical Planner (in AAAI'06)
	B. Bonet and H. Geffner Heuristics for Planning with Penalties and Rewards using Compiled Knowledge (in KR'06)
	R. Korf Design of Heuristic Functions (2006)
	R. Korf Disjoint Pattern Database Heuristics (2001)

	R. Zhou and E. Hansen Domain-Independent Structured Duplicated Detection (AAAI'06)
	R. Zhou and E. Hansen External-Memory Pattern Databases Using Structured Duplicate Detection (AAAI'05)
	R. Zhou and E. Hansen Beam-Stack: Integrating Backtracking with Beam Search (ICAPS'05)

	J. Huang Combining Knowledge Compilation and Search for Conformant Probabilistic Planning (ICAPS'06)
	I. Little and S. Thiebaux Concurrent Probabilistic Planning in the Graphplan Framework (ICAPS'06)



Alessandro Cimatti's homepage


Hector Geffner's homepage



Jussi Rintanen's homepage
Malte Helmert's homepage
Jörg Hoffmann's homepage


Project 270A, 2004

ICAPS 2005
Accepted papers (Program)


ICAPS 2004
Accepted papers
	Ronen I. Brafman and Joerg Hoffmann Conformant Planning via Heuristic Forward Search: A New Approach (in ICAPS'04)
	Malte Helmert A Planning Heuristic Based on Causal Graph Analysis (in ICAPS'04)
	Jussi Rintanen Complexity of Planning with Partial Observability (in ICAPS'04)
	Ronald P. A. Petrick and Fahiem Bacchus Extending the Knowledge-Based Approach to Planning with Incomplete Information and Sensing (in ICAPS'04)







    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-06/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 


ICS-271, Intorduction to Artificial
Intelligence, Fall 2006 main | announcements | 
      lecture notes | homework
| project


      ReadingsDisjoint
        Pattern Database Heuristics
        Design of Heuristic Functions
      
       




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-271/fall-06/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Fall 2004
    main |
    lecture notes |
    homework |
    project



Announcements
    
  




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/fall-00/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-6A Fall 2000, Discrete Mathematics for Computer Science
  course reference | schedule | 
  homework |  
  exam samples | handouts




Homework & SolutionsHomeworkSolutions
Homework 1 - ps - pdf
Homework 2 - ps - pdf
Homework 3 - ps - pdf
Homework 4 - ps - pdf
Homework 5 - ps - pdf
Homework 6 - ps - pdf
Homework 7 - ps - pdf
Homework 8 - ps - pdf
Homework 9 - ps - pdf



HW1 Solution - ps - pdf
HW2 Solution - ps - pdf
HW3 Solution - ps - pdf
HW4 Solution - ps - pdf
HW5 Solution - ps - pdf
HW6 Solution - ps - pdf
HW7 Solution - ps - pdf
HW8 Solution - ps - pdf
HW9 Solution - ps - pdf




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/fall-00/cr.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-6A Fall 2000, Discrete Mathematics for Computer Science
  course reference | schedule | 
  homework |  
  exam samples | handouts




Course ReferenceInstructor
      Dr. Rina Dechter, 424E Computer Science, 824-6556,
      dechter@ics.uci.edu
      
      Teaching Assistants
      Robert Mateescu 
      Dmitry Pavlov - pavlovd@ics.uci.edu
      Anton Sazhin - sazhin@ics.uci.edu
      Jiajie Li - jli@ics.uci.edu
      
      Course Home Page
      http://www.ics.uci.edu/~dechter/ics-6a/fall-00/ics-6a-f2000.html
      
      Office Hours

      Prof. Dechter:CS 424EMon 3:00 - 4:00, Th 3:30 - 4:30 and by appointment.Dmitry Pavlov:CSE 334Mon 10:50 - 11:50 and by appointment.Anton Sazhin:CSE 322Wednesday 3:00 - 5:00 and by appointment.Robert Mateescu:CSE 332Tuesday, Thursday 3:30 - 4:30 and by appointment.Jiajie Li:CST 2Wednesday 12:00-2:00pm and by appointment.

      
      Course E-mail
      
      ics6a-questions-dechter@ics.uci.edu
      
      Lecture

      
            Time:
            Tuesday and Thursday, 11:00am - 12:20pm
            Location:ELH 100

      
       Discussion Sections

      
            A1Jiajie LiMonday - 09:00-09:50 - IERF B015
          A2Dmitry PavlovMonday - 10:00-10:50 - IERF B015
          A3Robert Mateescu
          Wednesday - 09:00-09:50 - IERF B015
          A4Anton Sazhin
          Wednesday - 10:00-10:50 - SH-174

    
    Text
    There is one required text for the course:
    Discrete Mathematics and its applications,
    Fourth Edition, by Kenneth H. Rosen (McGraw-Hill 1995).
    
    Course Grades

There will be 7-8 homeworks and 7-8 quizzes.
Homeworks will be given each Tuesday and scheduled the following week.
Quizzes will be given every Thursday at the beginning of class.
There will be one midterm and a final.
The grading criteria for the course is:
Homework assignments 10%
Quizzes 40%
Midterm 20%
Final 30%

We will drop the two lowest quiz
scores and the two lowest homework scores in determining your
final grade.

Obtaining Assistance
The best way to get your questions answered is by coming
to lecture, section or office hours and asking them there.
In addition, you can send email to 6a-questions@ics.uci.edu
which will automatically
forward the mail to the TAs and myself.
It is generally preferable to use this email address instead of our
personal addresses because you are likely to get an answer to
your question faster if it is sent to the three of us.
If you ask a question by email which requires a lengthy response,
we are likely to ask you to come in to discuss the answer in person.

Announcements
Class announcements will be made in lecture and in section.
Important announcements will also be posted on the class web page.
The web page will contain the most up-to-date
course information. Any corrections or additional explanations  for
the homework
assignments will also be posted there, so please check the web page
occasionally to stay up to date.

Handouts
The homework solutions  and other handouts
will be made available at the lecture or on the
course webpage.

Homework And Quizes
On each Tuesday, a new homework assignment and the solution for
the previous homework will be available after lecture.
The new homework which is distributed in a given week
will cover material covered in lecture that week and will be
due the following Tuesday.
This means that when you receive a new homework assignment,
we will not have covered all of the material in lecture
necessary to do the assignment, but will have covered
everything by the end of Thursday's lecture.
A quiz covering the same material will be given in
class the following Thursday (two days, after handing out the solutions).

You should hand your homework in to class by 11:00 AM on Tuesday.
 Absolutely no homework assignments will be accepted after
11:00AM .


You can pick up your graded homeworks and quizes from
the distribution center which is located in the
ICS Trailers. The office hours for the distribution center are:
Monday and Wednesday 1:00 - 4:00, Tuesday and Thursday, 10:00 - 10:50, 12:00 - 4:00

Each homework assignment and quiz will be available
by the second Tuesday after it was handed in.


Questions On Grading
If you have a question on how any of your quizzes or homeworks were
graded, talk to the TAs, grader, or me during office hours or after section.

Collaboration
You are allowed, and even encouraged, to discuss the solutions to
the homework with your fellow classmates.  However, you are required to
sit down and write up your own solutions independently.
In addition, you need to write down the names of any classmates with
whom you have collaborated on a given assignment, clearly indicating
that they are your collaborators.  Copying the homework assignment of
another student is considered cheating.  Keep in mind that the homework
contributes little to your final grade in comparison to the quizzes.
Thus, it is very much in your own best interest to have a thorough
understanding of the homework assignments before the quiz.

Academic Honesty
All work done on quizzes, midterms and finals should be your own work.
Cheating on any kind of in class examination will be taken very seriously.
Any such incident will result in a letter describing the incident
which is placed in your file on campus. Depending on the severity of the
incident, the resulting grade can range from an F on the particular
examination to an automatic F in the course.
Very severe incidents of academic dishonesty can result in suspension or
expulsion from the university.




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/fall-00/exam-samples.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-6A Fall 2000, Discrete Mathematics for Computer Science
  course reference | schedule | 
  homework |  
  exam samples | handouts




Exam Samples
Midterm Sample - ps - pdf
Midterm Sample Solutions- ps - pdf
Final Sample - ps - pdf
Final Sample Solutions- ps - pdf





     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-6a/fall-00/schedule.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-6A Fall 2000, Discrete Mathematics for Computer Science
  course reference | schedule | 
  homework |  
  exam samples | handouts




Schedule
      The following list of topics and corresponding readings is subject
      to change. All readings refer to the textbook: K. H. Rosen, 
       Discrete Mathematics and its Applications , Fourth Edition, McGraw-Hill, 1995.
      
      Homework assignments will be available starting each Tuesday in weeks 1--9.
      There will be a quiz in lecture on Thursday in weeks 2, 3, 4, 5, 7, 8, 9, 10.
      
      Week 1. Introduction to the course: Logic (1.1 -1.3); Sets (1.4) Week 2.  Set operations (1.5) Counting basics (4.1, 4.2) Week 3. Permutation and combinations (4.3, 4.6) Week 4. Probability (4.4, 4.5, handouts) Week 5. Probability cont. (4.4,4.5, handouts)  Week 6. Methods of proof (3.1);  Midterm,  ; Thursday, November 2nd, in class Week 7.  Mathematical induction (3.2) Week 8. Sequence and summation (1.7); Review of logarithms (A.1);
          Recursive definitions (3.3)Week 9. Setting up recurrence relations ( 5.1) Week 10.  Solving recurrence relations (5.1,5.2 through page 323) Week 11. Final Exam Tuesday, December 5
    




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-09/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]


CompSci-276 Fall 2009, Belief Networks
  [ main |
  					homework |
  					software |
 					
 					references ]








        New: info about projects 
   
  Course Reference
  
  
  Days: Monday/Wednesday
   Time: 11:00 p.m. - 12:20 p.m.
   Room: DBH 1423
   Instructor: Rina Dechter
   Office hours: Wed. 2-3pm, DBH 4232
  

  

  
  Course Description

  One of the main challenges in building intelligent systems
  is the ability to reason under uncertainty, and one of the most successful
  approaches for dealing with this challenge is based on the framework of
  Bayesian networks, also called graphical models. Intelligent systems based on
  Bayesian networks are being used in a variety of real-world applications
  including diagnosis, sensor fusion, on-line help systems, credit assessment,
  bioinformatics and data mining.

  The objective of this class is to provide an in-depth exposition of
  knowledge representation and reasoning under uncertainty using the framework
  of Bayesian networks.  Both theoretical underpinnings and practical
  considerations will be covered, with a special emphasis on dependency and
  independency models, on construction Bayesian graphical models and on exact
  and approximate probabilistic reasoning algorithms. Additional topics
  include: causal networks, learning Bayesian network parameters from data and
  dynamic Bayesian networks.
  


  


  
  Prerequisites
  
  Familiarity with basic concepts of probability theory. Knowledge of basic computer science, algorithms and programming principles. Previous exposure to AI is desirable but not essential. 


  

      
      Course material
      
		The course will be based mostly on three sources:
		
		Adnan Darwiche,
			"Modeling and Reasoning with Bayesian Networks" Judea Pearl,
			"Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference"Class notes (download links will be published below)
		
		Additional sources:
		Russell and Norvig, Artificial Intelligence: A Modern ApproachDaphne Koller and Nier Friedman, 
  				 Probabilistic Graphical Models: Principles and Techniques
		
		A longer list including secondary references.
		
		Some links to software and tools.
		
		

  

      
      Tentative Syllabus
		
      
       Week     Date  TopicReadings          
            Files
             Week 1  9/28 
             Introduction to Bayesian networks. 
            
            (a) Pearl 1-2
            (b) Darwiche 1-3
            (c) Russell-Norvig 13Homework 1
            
            Class Slides 1
                9/30 
            Probabilistic networks representation: Independence properties. 
            
            (a) Pearl 3
            (b) Darwiche 4
            
             Week 2  10/5 
            Markov networks: Undirected graphical models of independence.
             (a) Pearl 3
            (b) Darwiche 4
            
              Homework 2
              Slides 2 (final)
            
            
                10/7 
            Bayesian networks: Directed graphical models of independence. 
              
            
             Week 3  10/12 
            Bayesian networks: Directed graphical models  (continued)
            
            
            Slides 3 (updated)
                10/14
            Building Bayesian networks
            
            (a) Darwiche 5
            
            Week 410/19Exact inference: Variable elimination(a) Notes 1-5(b) Darwiche 6Homework 3   10/21 
            Optimization queries: MPE and MAP
             
            
            Class Slides 4
             Week 5  10/26 
            Tree-decompositions: bucket trees, join-trees and polytrees. Cluster tree elimination and propagation algorithms.
            (a) Notes 
            Class Slides 5 (updated 11/3)
               10/28 
            Search and Inference: The loop-cutset and w-cutset schemes, 
            (a) Notes 5-6 
            (b) Darwiche 7
              (c) Pearl 4
            Homework 4 (updated 11/4)
               
             Week 6  11/2 
            Bounded inference: mini-bucket, mini-clustering, belief propagation schemes.
            (a) Notes 7
            (b) Darwiche 14 (c) Pearl 4
            Class Slides 6
               11/4 
            Bounded Inference continued
             
            
            
             Week 7  11/9 
            Approximate reasoning by sampling: MCMC methods (Gibbs sampling), importance sampling. Custet conditioning sampling. 
            (a) Notes
            (b) Pearl 4 
            (c) Darwiche 15	
            Homework 5
            Class Slides 7
               11/11  No class. Veteran's day holiday
            
             Week 8  11/16 
            Sampling continuedRepresentation: Local structures. Causal independance, context-specific and determinism 
            (a) Notes (Cutset paper) 
            (b) Darwiche 15
            Homework 6 (updated 11/18)
               11/18 
            Advanced Search and Inference: AND/OR Search
            (a) Notes (AND/OR paper)
            
            Class Slides 8
             Week 9  11/23 
            Extended representations: Mixed probabilisic and deterministic networks. Hybrid discrete and continuous networks. Dynamic Bayesian networks. First-order probabilistic languages. 
            (a) Notes
            Class Slides 9
               11/25 
            Learning / Causality (TBD)
            
            
             
            
             Week 10  11/30 
            Project presentations.
            
            
               12/2 
            Project presentations. 
            
            
            

  

  

 
  Assignments:
  
  There will be homework assignments and students will also
  be engaged in projects. 

  

  
  Grading Policy:
  
  Homework
  and exam (75%), class project (25%)
  





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-09/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Fall 2009, Belief Networks
  [ main |
  					homework |
  					software |
 					
 					references ]





Homeworks
	
	Homework 1 - pdf
	Homework 2 - pdf
	Homework 3 - pdf
	Homework 4 - pdf (updated 11/4)
	Homework 5 - pdf
	Homework 6 - pdf (updated 11/18)
	
	
	
		
		
	



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-09/software.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Fall 2009, Belief Networks
  [ main |
  					homework |
  					software |
 					
 					references ]





Tools and Software
  Some software links:
  
  JAVABayes from CMU:
       http://www.cs.cmu.edu/~javabayes/Home/
       GraphModAlg@UCI, Prof. Dechter's group webpage:http://graphmod.ics.uci.edu/GeNIe/SMILE from the University of Pittsburgh:
       
       http://genie.sis.pitt.edu/
       SamIam from UCLA: http://reasoning.cs.ucla.edu/samiam/Hugin lite from Hugin: 
       http://www.hugin.com MSBN from Microsoft Research:
       http://research.microsoft.com/en-us/um/redmond/groups/adapt/msbnx/
       REES:  http://www.ics.uci.edu/~radum/rees.html
       Netica from Norsys:
       http://www.norsys.com 
  
  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-09/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Fall 2009, Belief Networks
  [ main |
  					homework |
  					software |
 					
 					references ]





References and Related Links
			The course will be based mostly on three sources:
		
		Judea Pearl, "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference"Adnan Darwiche, "Modeling and Reasoning with Bayesian Networks" Class notes (downloads linked in schedule on main page)
		
		Two additional (new) books:
		Daphne Koller and Nier Friedman, 
  				 Probabilistic Graphical Models: Principles and Techniques. The MIT Press, 2009Richard E. Neapolitan, Learning
  		 		 Bayesian Networks. Prentice Hall, 2003.
		
		
		
		The following is a (partial) list of secondary reading material:
		
		Books:K.B. Korb and A. E. Nicholson, Bayesian Artificial
       Intelligence. Chapman and
       Hall/CRC, 2004Finn V. Jensen. An
       introduction to Bayesian networks. UCL Press, 1996. Russell and Norvig, Artificial intelligence, a modern
       approach (chapters, 13,14,15)J. Pearl, Causality,
       Models, Reasoning and Inference, Cambridge University Press, 2000Castillo, E.;
       Gutierrez, J.M.; Hadi, A.S., Expert Systems
       and Probabilistic Network Models, Springer-Verlag
       1997 Robert G. Cowell, A. Philip Dawid,
       Steffen L. Lauritzen, David J. Spiegelhalter Probabilistic Networks and Expert
       Systems Springer-Verlag, 1999.
			
		Articles:Daphne Koller, Nir Friedman, Lise Getoor and Ben Taskar,
       
       Graphical Models in a Nutshell.Heckerman and Breese, Causal
       Independence for Probability Assessment and Inference Using Bayesian
       Networks. Boutilier,
       Friedman, Goldszmidt and Koller,
       Context-Specific
       Independence in Bayesian Networks. Dechter,
       Bucket Elimination: A
       Unifying Framework for Probabilistic Inference. 1998.Dechter,
       "AAAI98
       tutorial on reasoning." Heckerman, 
       A Tutorial on Learning with Bayesian
       Networks. Kjaerulff,
       
       dHugin: A Computational System for Dynamic
       Time-Sliced Bayesian Networks. Pearl, Causation,
       Action and Counterfactuals. Dechter,Mini-buckets:
       a general scheme for approximating inference.
       Extended report.  Darwiche,
       Recursive
       Conditioning: Any-space conditioning algorithm with treewidth-bounded
       complexity. Darwiche,Any-space
       probabilistic inference. Darwiche,On the role of
       partial differentiation in probabilistic inference. Horvitz, Breese,
       Heckerman, Hovel & Rommelse. The Lumiere Project: Bayesian User Modeling for
       Inferring the Goals and Needs of Software Users. Binder, Murphy,
       Russell. Space-efficient
       inference in dynamic probabilistic networks. Russell, Binder, Koller, Kanazawa.
       Local
       learning in probabilistic networks with hidden variables. Dugad
       & Desai. A
       Tutorial on Hidden Markov Models. Friedman, Geiger, Goldszmidt. Bayesian
       Network Classifiers. Dechter,
       R., El Fattah, Y.,
       Topological Parameters For Time-Space Tradeoff Gagliardi,
       F., Generalizing
       Variable Elimination In Bayesian Networks Rish, I. and Dechter, R., AAAI
       2000 Tutorial 
  

  
  Other related links:A Brief
       Introduction to Graphical Models and Bayesian Networks The Association for Uncertainty in Artificial
       Intelligence 
       Sponsors the conference on Uncertainty in
       Artificial Intelligence (UAI), which is the main yearly forum for
       reporting research results relating to Bayesian networks. Free Bayesian Network Packages
       Artificial
       Intelligence: Probability studies may give computers a chance to learn,
       by Kevin J. Delaney in Cambridge, England.
       The Wall Street Journal Europe. AI on the web UAI
       repository 

  

  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2010/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Sec. A, Constraint Networks, Fall 2010 main | homework | readings
| slides


      Possible projects: 
	 Recommented literature:Francesca Rossi, Peter van Beek, Toby Walsh. Handbook of Constraint Programming. Elsevier Science, 2006 Armin Biere, Marijn Heule, Hans van Maaren, and Toby Walsh. Handbook of Satisfiability. IOS Press, 2009 
		 Recommended papers:Albert Atserias et al. Clause-Learning Algorithms with Many Restarts and Bounded-Width Resolution
				Huayue Wu and Peter van Beek. On Universal Restart Strategies for Backtracking Search
				Knot Pipatsrisawat and Adnan Darwiche. A Lower Bound on the Size of Decomposable Negation Normal Form
				Knot Pipatsrisawat and Adnan Darwiche. On Modern Clause-Learning Satisfiability Solvers
				Knot Pipatsrisawat, Akop Palyan, Mark Chavira, Arthur Choi, and Adnan Darwiche. Solving Weighted Max-SAT Problems in a Reduced Search Space: A Performance Analysis
				Jinbo Huang. Extended Clause Learning
				G. Pinkas and R. Dechter. On Improving Connectionist Energy Minimization.Kalev Kask and Rina Dechter. GSAT and Local ConsistencyKalev Kask and Rina Dechter. Graph-based methods for improving GSATIrina Rish and Rina Dechter. Resolution versus Search: Two Strategies for SATRina Dechter and Robert Mateescu. The Impact of AND/OR Search Spaces on Constraint Satisfaction and Counting"

		SAT2010 conference proceedings: Conference programme and list of accepted papers.
		CP2010 conference proceedings. Proceedings and download available online (need to be on UCI network), list of papers below. A few suggested ones are marked with "(*)" : Barnaby Martin. The lattice structure of sets of surjective hyper-operations  Justin Yip and Pascal Van Hentenryck. Exponential Propagation for Set Variables  (*) Justyna Petke and Peter Jeavons. Local consistency and SAT-solvers  (*) Yves Deville and Pascal Van Hentenryck. Domain Consistency with Forbidden Values  (*) David Allouche, Simon de Givry and Thomas Schiex. Towards Parallel Non Serial Dynamic Programming for Solving Hard Weighted CSP  Karl Sundequist Blomdahl, Pierre Flener and Justin Pearson. Contingency Plans for Air Traffic Management  (*) Martin C. Cooper and Stanislav Zivny. A new hybrid tractable class of soft constraint problems  Ross Willard. Testing expressibility is hard  Florent Madelaine. On the containment of forbidden patterns problems  Soulignac Michaël, Rueher Michel and Taillibert Patrick. A Safe and Flexible CP-based Approach for Velocity Tuning Problems  (*) Long Guo, Youssef Hamadi, Said Jabbour and Lakhdar Sais. Diversification and Intensification in Parallel SAT Solving  (*) Tommi Junttila and Petteri Kaski. Exact Cover via Satisfiability: An Empirical Study  Gilles Trombettoni, Yves Papegay, Gilles Chabert and Odile Pourtallier. A Box-Consistency Contractor Based on Extremal Functions  Mehdi Khiari, Patrice Boizumault and Bruno Cremilleux. Constraint Programming for Mining n-ary Patterns  Ignacio Araya, Gilles Trombettoni and Bertrand Neveu. Making Adaptive an Interval Constraint Propagation Algorithm Exploiting Monotonicity  Chris Beck. Checking-up on Branch-and-Check  George Katsirelos, Nina Narodytska and Toby Walsh. Static Constraints for Breaking Row and Column Symmetry  (*) Yevgeny Schreiber. Value-Ordering Heuristics: Search Performance vs. Solution Diversity  Christian Bessiere, George Katsirelos, Nina Narodytska, Claude-Guy Quimper and Toby Walsh. Decomposition of the NValue Constraint  Andreas Bauer, Viorica Botea, Mark Brown, Matt Gray, Daniel Harabor and John Slaney. An Integrated Modelling, Debugging, and Visualisation Environment for G12  Lazaar Nadjib, Gotlieb Arnaud and Lebbah Yahia. On Testing Constraint Programs  Christian Schulte, Roberto Castañeda Lozano and Lars Wahlberg. Testing Continuous Double Auctions with a Constraint-based Oracle  Bruno Marre and Claude Michel. Improving the floating point addition and subtraction constraints  Stefano Ermon, Carla Gomes and Bart Selman. Computing the Density of States of Boolean Formulas  Sigal Asaf, Haggai Eran, Yossi Richter, Daniel P. Connors, Donna L. Gresh, Julio Ortega and Michael J Mcinnis. Optimatch: Applying Constraint Programming to Identification and Assignment of Service Professionals  Roman van der Krogt, Jacob Feldman, James Little and David Stynes. An Integrated Business Rules and Constraints Approach to Data Centre Capacity Management  Gilles Chabert and Nicolas Beldiceanu. Sweeping with Continuous Domains  Helmut Simonis, Paul Davern, Jacob Feldman, Deepak Mehta, Luis Quesada and Mats Carlsson. A Generic Visualization Platform for CP  Ahmet Serkan Karata., Halit O.uztüzün and Ali Do.ru. Global Constraints on Feature Models  Goldsztejn Alexandre, Olivier Mullier, Damien Eveillard and Hiroshi Hosobe. Including Ordinary Differential Equations Based Constraints in the Standard CP Framework  (*) Jussi Rintanen. Heuristics for Planning with SAT  Eoin O'Mahony, Siddhartha Jain and Meinolf Sellmann. A Complete Multi-Valued SAT Solver  Samid Hoda, Willem-Jan van Hoeve and John Hooker. A Systematic Approach to MDD-Based Constraint Programming  Thanasis Balafoutis, Anastasia Paparrizou, Kostas Stergiou and Toby Walsh. Improving the Performance of maxRPC  Russell Bent and Pascal Van Hentenryck. Spatial, Temporal, and Hybrid Decompositions For Large-Scale Vehicle Routing with TimeWindows  Laurent Michel, Alexander Shvartsman, Elaine Sonderegger and Pascal Van Hentenryck. Load Balancing and Almost Symmetries for RAMBO Quorum Hosting  David Lesaint, Deepak Mehta, Barry O'Sullivan, Nic Wilson and Luis Quesada. Context-Sensitive Call Control using Constraints and Rules  Balder ten Cate, Phokion Kolaitis and Wang-Chiew Tan. Database Constraints and Homomorphism Dualities  Andreas Schutt and Armin Wolf. A New O(n^2 log n) Not-First/Not-Last Pruning Algorithm for Cumulative Resource Constraints  Gianluigi Greco and Francesco Scarcello. Structural Tractability of Enumerating CSP Solutions  Lars Kotthoff, Ian Miguel and Peter Nightingale. Ensemble classification for constraint solver configuration  Alessandro Dal Palu, Mathias Möhl and Sebastian Will. A Propagator for Maximum Weight String Matching with Arbitrary Pairwise Dependencies  Ian Gent, Chris Jefferson, Ian Miguel and Peter Nightingale. Generating Special-purpose Stateless Propagators for Arbitrary Constraints  Hadrien Cambazard and Barry O'Sullivan. Propagating the Bin Packing Constraint using Linear Programming  Michela Milano and Michele Lombardi. Constraint Based Scheduling to deal with Uncertain Durations and Self-Timed Execution  (*) Jessica Davies, Jeremy Cho and Fahiem Bacchus. Using Learnt Clauses in Max-SAT  Kiyan Ahmadizadeh, Bistra Dilkina, Carla Gomes and Ashish Sabharwal. An Empirical Study of Optimization for Maximizing Diffusion in Networks 

	
					



      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2010/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Constraint Networks, Spring 2009 main | slides | readings
| project


      Home Work
      
       Homework 1 Homework 2, due Oct 12Homework 3, due Oct 19



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2010/slides.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Sec. A, Constraint Networks, Spring 2009 main | homework | readings
| project


      Slides
       
      
	Class 1

    
      
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-2010/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Sec. A, Constraint Networks, Spring 2009
  main |
  homework |
  slides |
  project










School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2014/code/
##-----------------TITLE------------------------##
Index of /~dechter/courses/ics-275a/spring-2014/code
##------------------TEXT------------------------##
Index of /~dechter/courses/ics-275a/spring-2014/code
NameLast modifiedSizeDescriptionParent Directory   -  coloring.py02-Apr-2014 14:59  1.0K msq.py02-Apr-2014 14:59  591  nq.py02-Apr-2014 14:59  770  
Apache/2.2.15 (CentOS) Server at www.ics.uci.edu Port 80
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2014/index.shtml
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Dr. Rina Dechter - University of California at Irvinehome |
    publications |
    book |
		courses |
    researchRevised on
      
      Nov. 24, 2015





CompSci 275 Spring 2014, Constraint Networks
  [ main |
  project |
  					
 					
 					




      Instructor: Rina Dechter Section: 35300 Classoom: ICS 243 Days: Monday & WednesdayTime: 11:00 am - 12:20 pm  Office hours: Monday 2:00pm - 3:00pm  
      
      
      
      Course Goals
       Constraint satisfaction is a
simple but powerful tool. Constraints identify the impossible and
reduce the realm of possibilities to effectively focus on the possible,
allowing for a natural declarative formulation of what must be
satisfied, without expressing how. The field of constraint reasoning
has matured over the last three decades with contributions from a
diverse community of researchers in artificial intelligence, databases
and programming languages, operations research, management science, and
applied mathematics.
      The purpose of this course is to familiarize students with the
theory and techniques of constraint processing, using the constraint
graphical model. This model offers a natural language for encoding
world knowledge in areas such as scheduling, vision, diagnosis,
prediction, design, hardware and software verification, and bio-informatics, and it
facilitates many computational tasks relevant to these domains such as
constraint satisfaction, constraint optimization, counting and sampling


. The course will
focus on techniques for constraint processing. It will cover search and
inference algorithms, consistency algorithms and structure based
techniques and will focus on properties that facilitate efficient
solutions. Extensions to general graphical models
such as probabilistic networks, cost networks, and influence diagrams
will be discussed
as well as example applications such as temporal reasoning, diagnosis,
scheduling, and prediction.
      
      
      Textbook
       Required textbook: Rina Dechter, Constraint
Processing, Morgan Kaufmann 
      

      
      
      Grading Policy
      Homeworks and projects (80%), midterm  (20%).
      
      
      Assignments:
      There will be weekly homework-assignments, a
project, and an exam. 
      
      
      Syllabus:
      Subject to changes
      
      Project Page
      
      WeekTopicSlides
            Lecture
            Homework
            Additional Reading
            Date  Week 1
            Chapters 1,2: Introductions
to constraint network model. Graph
representations, binary constraint networks. 
                
            
	    Set 1
	    Numberjack Tutorial / Code Examples
            
	    
	    Homework 1(due 04-09)
            
            
	    03-31
            
	    04-02
            Week 2
           Chapter 3:
Constraint propagation and consistency enforcing
algorithms, arc, path and i-consistency 
            
	    Set 2
            
	    
	    Homework 2(due 04-16)
            
	    Constraint Propragation, by Christian Bessiere
            
	    04-07
            
	    04-09
            
            Week 3
            Chapter 4: Graph concepts
(induced-width), Directional consistency, Adaptive-consistency,
bucket-elimination. 
            
	    Set 3
	    
	    
	    Lecture
	    
	    Homework 3(due 04-23)
            
            
	    04-14
            
	    04-16
            Week 4
              Chapter 5: Backtracking
search: Look-ahead schemes: forward-checking, variable and value
orderings. DPLL.
                 
            
	    Set 4
	    
	    Lecture
	    
	    Lecture
            
	    Homework 4(due 04-30)
             
            
	    04-21
            
	    04-23
            Week 5
            Chapter 6: Backtracking
search; Look-back schemes: backjumping, constraint learning. SAT solving and solvers (e.g., MAC, Minisat). 
             
	    Set 5
            
	    Lecture
	    
	    
	    Homework 5(due 05-12)
            Minisat
            WALKSAT
            RSAT
	    
            
	    04-28
            
	    04-30
            Week 6
         Chapter 7: Stochastic local search, SLS, GSAT, WSAT Satisfiability solving 
            
	    Set 6
            
	    Lecture
	    
	    Lecture
	    
            
            
	    05-05
            
	    05-07
            Week 7
          Chapter 8: Advanced consistency methods; relational consistency
and bucket-elimination, row-convexity, tightness, looseness.
                
            
	    Set 7
            
	    Lecture
	    
	    Lecture
	    
	    Homework 6(due 05-21)
            
            
	    05-12
	    
	    05-14
 
            Week 8
           Chapter 13: Constraint Optimization, soft constraints 
            
	    Set 8
            
	    Lecture
	     
            
            
	    05-19
            
	    05-21
            Week 9
            No class 05/26 - Memorial DayChapter 13: Constraint
Optimization, soft constraints (continued) 
		
            
            
	    
	    Lecture
	    
	    Homework 7(due 06-04)
            
            
	    05-26
	    
	    05-28
  
            Week 10
          
            
            
	    
            
            
	    06-02
            
	    06-04
            Week 11
          
            
            
	    
            
            
	    06-10
            
            
      
      Resources on the
Internet
     
 Books Francesca Rossi, Peter van Beek, Toby Walsh. Handbook of Constraint Programming. Elsevier Science, 2006  Kimball Marriott, Peter Stuckey. Programming with Constraints: An Introduction. The MIT Press, 1998
	 Software links Numberjack modeling language
		  Numberjack main page Tutorial
		 MiniZinc modeling language
		 MiniZinc page
	
	 Links for SatisfiabilitySatisfiability tutorials by Joao Marques-SilvaSAT Solving : A Mini CourseA satisfiability tutorial by Youssef Hamadi
      
      
      
      
    
  




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2014/project.shtml
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Dr. Rina Dechter - University of California at Irvinehome |
    publications |
    book |
		courses |
    researchRevised on
      
      May. 27, 2014





CompSci 275 Spring 2014, Constraint Networks
  [ main |
  project |
  					
 					
 					




      Projects from Fall 2010:
      Petke, J. and Jeavons, P. Local Consistency and SAT-Solvers. CP 2010.
      report | 
      slides
      Mateescu, R., and Dechter, R. Compiling Constraint Networks into AND/OR Multi-valued Decision Diagrams (AOMDDs). CP 2006.
      report | 
      slides
      Schreiber, Y. Value-Ordering Heuristics: Search Performance vs. Solution Diversity. CP 2010.
      report | 
      slides
 
      
      Possible projects: 
	Conference LinksCP 2013 | Papers
		CP 2012 | Papers
		CPAIOR 2013 | Papers
		

		CP 2013 Paper List (recommended with ***)Technical Track
		Ignasi Abío, Robert Nieuwenhuis, Albert Oliveras and Enric Rodríguez Carbonell
A Parametric Approach for Smaller and Better Encodings of Cardinality Constraints
 Ignasi Abío, Robert Nieuwenhuis, Albert Oliveras, Enric Rodríguez Carbonell and Peter J. Stuckey
 To Encode or to Propagate? The Best Choice for Each Constraint in SAT
 Ozgur Akgun, Alan Frisch, Ian Gent, Bilal Hussain, Christopher Jefferson, Lars Kotthoff, Ian Miguel and Peter Nightingale
 Automated Symmetry Breaking and Model Selection in Conjure
 Carlos Ansótegui, Maria Luisa Bonet, Joel Gabàs and Jordi Levy
 Improving WPM2 for (Weighted) Partial MaxSAT
 Josep Argelich, Chu-Min Li, Felip Manyà and Zhu Zhu
 MinSAT versus MaxSAT for Optimization Problems
 Amine Balafrej, Christian Bessiere, Remi Coletta and El Houssine Bouyakhf
 Adaptive Parameterized Consistency
 Christian Bessiere, Hélène Fargier and Christophe Lecoutre
 (**) Global Inverse Consistency for Interactive Constraint Satisfaction
 Simon Brockbank, Gilles Pesant and Louis-Martin Rousseau
 Counting Spanning Trees to Guide Search in Constrained Spanning Tree Problems
 Jakub Bulín, Dejan Delić, Marcel Jackson and Todd Niven
 On the reduction of the CSP dichotomy conjecture to digraphs
 Supratik Chakraborty, Kuldeep S. Meel and Moshe Vardi
 (****) A Scalable Approximate Model Counter
 Geoffrey Chu and Peter J. Stuckey
 Dominance Driven Search
 David Cohen, Peter Jeavons, Evgenij Thorstensen and Stanislav Živný
 Tractable Combinations of Global Constraints
 Jessica Davies and Fahiem Bacchus
 Postponing Optimization to Speed Up MAXSAT Solving
 Simon de Givry, Steven Prestwich and Barry O'Sullivan
 Dead-End Elimination for Weighted CSP
 Erin Delisle and Fahiem Bacchus
 (***) Solving weighted CSPs by Successive Relaxations
 Gregory Duck, Joxan Jaffar and Nicolas Koh
 Constraint-based Program Reasoning with Heaps and Separation
 Jean-Guillaume Fages and Tanguy Lapègue
 Filtering AtMostNValue with difference constraints: application to the Shift Minimisation Personnel Task Scheduling Problem
 Daniel Fontaine, Laurent Michel and Pascal Van Hentenryck
 (***) Model Combinators for Hybrid Optimization
 Kathryn Francis, Jorge Navas and Peter J. Stuckey
 Modelling Destructive Assignments
 Alex Fukunaga
 An Improved Search Algorithm for Min-Perturbation
 Graeme Gange, Peter J. Stuckey and Pascal Van Hentenryck
 Explaining Propagators for Edge-valued Decision Diagrams
 Stefano Gualandi and Michele Lombardi
 A Simple and Effective Decomposition for the Multidimensional Binpacking Constraint
 Patricia Gutierrez, Jimmy H.M. Lee, Ka Man Lei, Terrence W.K. Mak and Pedro Meseguer
 (***) Maintaining Soft Arc Consistencies in BnB-ADOPT+ During Search
 Jun He, Pierre Flener, Justin Pearson and Wei Ming Zhang
 Solving String Constraints: The Case for Constraint Programming
 Peter Jonsson, Victor Lagerkvist and Gustav Nordh
 Blowing Holes in Various Aspects of Computational Problems, with Applications to Constraint Satisfaction
 William Klieber, Mikoláš Janota, Joao Marques-Silva and Edmund Clarke
 (***) Solving QBF with Free Variables
 Kevin Leo, Christopher Mears, Guido Tack and Maria Garcia de La Banda
 Globalizing Constraint Models
 Michele Lombardi and Stefano Gualandi
 A New Propagator for Two-Layer Neural Networks in Empirical Model Learning
 Manuel Loth, Michèle Sebag, Youssef Hamadi and Marc Schoenauer
 Bandit-based Search for Constraint Programming
 Chuan Luo, Shaowei Cai, Wei Wu and Kaile Su
 Focused Random Walk with Configuration Checking and Break Minimum for Satisfiability
 Radu Marinescu, Razak Abdul and Nic Wilson
 (***) Multi-objective Constraint Optimization with Tradeoffs
 Thierry Moisan, Jonathan Gaudreault and Claude-Guy Quimper
 (***) Parallel Discrepancy-Based Search
 Michael D. Moffitt
 Multidimensional Bin Packing Revisited
 Jean-Noël Monette, Nicolas Beldiceanu, Pierre Flener and Justin Pearson
 A Parametric Propagator for Discretely Convex Pairs of Sum Constraints
 Nina Narodytska and Toby Walsh
 Breaking Symmetry with Different Orderings
 Pierre Ouellet and Claude-Guy Quimper
 Time-Table-Extended-Edge-Finding for the Cumulative Constraint
 François Pelsser, Pierre Schaus and Jean-Charles Régin
 Revisiting the cardinality reasoning for BinPacking constraint
 Steven Prestwich, Marco Laumanns and Ban Kawas
 Value Interchangeability in Scenario Generation
 Jean-Charles Régin, Mohamed Rezgui and Arnaud Malapert
 (***) Embarrassingly parallel search
 Pierre Schaus and Renaud Hartert
 (***) Multi-Objective Large Neighborhood Search
 Andreas Schutt, Thibaut Feydy and Peter J. Stuckey
 Scheduling Optional Tasks with Explanation
 Paul Scott, Sylvie Thiébaux, Menkes van Den Briel and Pascal Van Hentenryck
 Residential Demand Response under Uncertainty
 Evgenij Thorstensen
 Lifting structural tractability to CSP with global constraints
 Djamal Habet and Donia Toumi
 (***) Empirical Study of the Behavior of Conflict Analysis in CDCL Solvers
 Allen Van Gelder
 (***) Primal and Dual Encoding from Applications into Quantified Boolean Formulas
 Mohamed Wahbi, Redouane Ezzahir and Christian Bessiere
 Asynchronous Forward Bounding Revisited
 Wei Xia and Roland Yap
 Optimizing STR Algorithms with Tuple Compression

 Application Track
 Nicolas Beldiceanu, Georgiana Ifrim, Arnaud Lenoir and Helmut Simonis
 Describing and Generating Solutions for the EDF Unit Commitment Problem with the ModelSeeker
 Quoc Trung Bui, Quang Dung Pham and Yves Deville
 Solving the Agricultural Land Allocation Problem by Constraint-Based Local Search
 Hadrien Cambazard, Deepak Mehta, Barry O'Sullivan and Helmut Simonis
 Bin Packing with Linear Usage Costs -- An Application to Energy Management in Data Centres
 Luca Di Gaspero, Andrea Rendl and Tommaso Urli
 Constraint-based approaches for Balancing Bike Sharing Systems
 Alexandre Goldsztejn, Laurent Granvilliers and Christophe Jermann
 Constraint Based Computation of Periodic Orbits of Chaotic Dynamical Systems
 Mikael Z. Lagerkvist, Martin Nordkvist and Magnus Rattfeldt
 Laser Cutting Path Planning using CP
 Martin Mann, Feras Nahar, Heinz Ekker, Rolf Backofen, Peter Stadler and Christoph Flamm
 Atom Mapping with Constraint Programming
 Reuven Naveh and Amit Metodi
 (***) Beyond Feasibility: CP Usage in Constrained-Random Functional Hardware Verification
 Ma Hakim Newton, Duc Nghia Pham, Wee Lum Tan, Marius Portmann and Abdul Sattar
 Stochastic Local Search based Channel Assignment in Wireless Mesh Networks
 Ana Paula Tomás and José Paulo Leal
 Automatic generation and delivery of multiple choice math quizzes
 Philippe Vismara, Remi Coletta and Gilles Trombettoni
 Constrained Wine Blending
 Stéphane Zampelli, Yannis Vergados, Rowan Van Schaeren, Wout Dullaert and Birger Raa
 The berth allocation and quay crane assignment problem using a CP approach
		
		CPAIOR 2013 Papers (recommended with ***)		Elena Kelareva, Kevin Tierney and Philip Kilby
		Scheduling and Routing with Time-Dependent Task Costs

		Laura Climent, Richard J. Wallace, Miguel A. Salido and Federico Barber
		(***)Modeling Robustness in CSPs as Weighted CSPs

		John Hooker
		(*****) Decision diagrams and dynamic programming

		Marijn Heule, Matti Järvisalo and Armin Biere
		Revisiting Hyper Binary Resolution

		Domenico Salvagnin
		Orbital Shrinking: a new tool for hybrid MIP/CP methods

		Peter Stuckey and Guido Tack
		MiniZinc with Functions

		Arnaud Letort, Nicolas Beldiceanu and Mats Carlsson
		A Synchronized Sweep Algorithm for the k-dimensional cumulative Constraint

		Andreas Schutt, Thibaut Feydy and Peter Stuckey
		Explaining Time-Table-Edge-Finding Propagation for the Cumulative Resource Constraint

		Axel Nyberg, Tapio Westerlund and Andreas Lundell
		Improved Discrete Reformulations for the Quadratic Assignment Problem

		Brian Kell and Willem-Jan van Hoeve
		An MDD Approach to Multidimensional Bin Packing

		Eduardo Álvarez-Miranda, Ivana Ljubic and Petra Mutzel
		The Rooted Maximum Node-Weight Connected Subgraph Problem

		Achref El Mouelhi, Philippe Jegou, Cyril Terrioux and Bruno Zanuttini
		(***) Some New Tractable Classes of CSPs and their Relations with Backtracking Algorithms

		Timo Berthold and Domenico Salvagnin
		Cloud branching

		Mark Liffiton and Ammar Malik
		Enumerating Infeasibility: Finding Multiple MUSes Quickly

		Marla Slusky and Willem-Jan Van Hoeve
		A Lagrangean Relaxation for Golomb Rulers

		Tobias Achterberg, Ashish Sabharwal and Horst Samulowitz
		Stronger Inference Through Implied Literals From Conflicts and Knapsack Covers

		Hermann Schichl, Arnold Neumaier, Mihaly Csaba Markot and Ferenc Domes
		Projective and asymptotic constraint propagation and relaxation methods for unbounded mixed-integer CSPs

		Yuri Malitsky, Deepak Mehta, Barry O'Sullivan and Helmut Simonis
		(***) Tuning Parameters of Large Neighborhood Search for the Machine Reassignment Problem

		Peter Y. Zhang, David A. Romero, J. Christopher Beck and Cristina H. Amon
		Solving Wind Farm Layout Optimization with Mixed Integer Programming and Constraint Programming

		Stefan Heinz, Wen-Yang Ku and Chris Beck
		Recent improvements using constraint integer programming for resource allocation and scheduling problems

		Andre Cire, Elvin Coban and John Hooker
		Mixed integer programming vs logic-based Benders decomposition for planning and scheduling

		Udara Weerakoon and Vicki Allan
		Coalition Formation for Servicing Dynamic Motion Tasks

		Hanyu Gu, Andreas Schutt and Peter Stuckey
		A Lagrangian Relaxation Based Forward-backward Improvement Heuristic for Maximising the Net Present Value of Resource-Constrained Projects

		Nina Narodytska and Toby Walsh
		An Adaptive Model Restarts Heuristic

		Ioannis Mourtos
		Tight LP-relaxations of overlapping global cardinality constraints

		Ambros Gleixner and Stefan Weltge
		Learning and Propagating Lagrangian Variable Bounds for Mixed-Integer Nonlinear Programming

		Roberto Amadini, Maurizio Gabbrielli and Jacopo Mauro
		(***) An Empirical Evaluation of Portfolios Approaches for solving CSPs

		Duc-Cuong Dang, Racha El Hajj and Aziz Moukrim
		A branch-and-Cut algorithm for solving the Team Orienteering Problem

		Gerald Gamrath
		Improving strong branching by propagation

		Jiadong Wang and Ted Ralphs
		Computational Experience with Hypergraph-based Methods for Automatic Decomposition in Integer Programming

		Abdelilah Sakti, Yann-Gaël Guéhéneuc and Gilles Pesant
		Constraint-Based Fitness Function for Search-Based Software Testing

		Carlos Ansótegui and Joel Gabàs
		(***) Solving (Weighted) Partial MaxSAT with ILP
		
		Additional Papers
		Ian P. Gent, Christopher Jefferson, Steve Linton, Ian Miguel, and Peter Nightingale
		Generating Custom Propagators for Arbitrary Constraints | [pdf]
		Thierry Moisan, Claude-Guy Quimper, and Jonathan Gaudreault
		PDS: A scalable, communication-free search strategy for massively parallel supercomputers that provides intrinsic load-balancing | 
		[pdf]
		

      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/winter-2010/grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive] 
    
    
    ICS-175, Project in AI, Winter 2010
            overview |
            home work |
            lecture notes
          
    
    
          Grades
          
          Sorted by the last three digits of the student I.D. numbers.  The grades are on a scale from 1 - 10 
    
    
    
            Student ID
            last 3 digits
          
            Grade

          
    
    
    
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/winter-2010/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175, Project in AI, Winter 2010
  overview | 
  announcements | 
  lecture notes | 
  projects




	Assignments
		For any assignment that you submit you should always state at the top of the report:
the team number, the names of team members and the project title.
		 Progress report 1. Due February 2
		
		For the first report  should be a two page progress report.  The first half/full page of background on your project,
		including references wherever relevant.
		
		The second page ahould describe your progress.
		
		In your progress you should  explain:
		 How does the project  built upon what is available in the literature, and out there.
		  what is the architecture of your project (different modules and who is doing what on the team)?
		 what tools will you use, or have started to use.
		 Is there any data that you need to access?
		 How would you evaluate your project. What is the criteria for success.
		 What initial code you started to develop.
		
		


The presentation order:
 Team 10 
 Team 15 
  Team 4 
 Team 16 
 Team 5 
 Team 17 
 Team 9 
 Team 8 
 Team 18
 Team 6 
 Team 3 
 Team 1 
 Team 7 
 Team 11 
 Team 2 
 Team 13 
 Team 14 
 Team 12
 

	 Midterm report. For groups presenting week 7 - due Thursday Feb 18
		
		  Midterm report should be handed in in class, printed and  stapled together. Length: 3-4 pages. 
		  
		    On the first page you should indicate your team number, the title of your project and names of the team mates.
		    
		      Your report is a logical continuation of your progress report. Your report should contain:
		       Description of your problem
			 Detailed background - previously done research in the area (1 page). You must provide citations and set of references at the end of your report.
			 Tools that you are using (including all previously written code, GUI and third party programs that you use)
			 If applicable, data that you need and the source of it.
			 Input/output of your software
			 Current state of your project - detailed report on the progress you have made so far
			


	 Midterm presentation.
	
	  Presentation shall be given on 7th and 8th week. Attendance is mandatory for all students.
	
	  Some  requirements:
	   Presentations should last 15 minutes - time limit shall be reinforced. How well you can plan your presentation will be counted towards your grade.
	     You should use slides in your presentation: ppt/pdf.
	     At the start of your presentation you should fully describe your problem (even if you did it before in class presentations)
	     The main topic of your presentation should be your progress so far
	     Talk about concepts and high-level algorithms, not about code
	    








School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/winter-2010/Projects_list.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175, Project in AI, Winter 2010
  overview | 
  announcements | 
  lecture notes  
  





Project ideas for CompSci175 class


Next are some project ideas in Bayesian networks constraint networks and games.



When you select a project provide:
Project title
  Project idea
  Methodology (Constraint processing, Bayesian networks, Games, search, planning, learning)
  Data source you will use
  Tools you will use
  Software you will have to write
  Background material to read. Read relevant papers. Find out available systems.
  Teammate: optimal number of team mates is 3
  Expected output (experiments, demo)


Note: During week 2 you only need to provide the project title and list of your teammates.





In Bayesian network projects you will build a Bayesian network that models a domain and makes some inferences.
  Available tools such as SamIam,  REES, Hugin and JavaBayes can be used. The system can be built using knowledge
 acquisition from expert in the domain or by learning from data or both. Some domains used in the past are:
 Admission to a Phd program, Loan expert advisor, Basketball simulator, Handicappers (picking winners in horseracing).

The domain you select should be sufficiently complex. It should have enough variables (at least 50 variables).
 You would need to validate the model somehow. This can be done by connecting with an expert in the domain or
 by having data. Once you have the Bayesian network, you should propose what kinds of experimental evaluation 
 to conduct over it.  The projects below are not well defined. They are ideas. Part of your project task is to
 define the scope and provide the details of your project.

In constraint networks projects, you will also need to model your domain using a collection of constraints  and
 perhaps using some objective functions, using one of the tools for constraints and then show how you solve the
 problem and how you evaluate the quality of your model and solutions.


1.    Email management project.
The problem: people receive thousands of emails which require some action
(answer, discard and file). 
 
Email management becomes unmanageable.

The project: build a system that help decide:

   what email to answer next (prioritize emails)
  What emails to discard and what to file to other folders. 


The input is a collection of emails that were received. Each message should have a collection of features
 (time of arrival, sender, title, length, number of recipients, topic and response time).

Methodology: learning: look at past messages received and the decisions made.

See Padhraic Smyth's topic modelling page. Also, topic modelling tutorials: Steyvers and Griffiths and Blei and Lafferty

More links on text classification and topic modelling:
Paul Graham, Better Bayesian filtering (for spam classification)




2. TA assignments.

 Given class schedules for quarter, the number of TA needed for each class, TA's preferences and qualification,
 and instructors' choice of preferred TA, schedule the TA's in a way that maximize some measure of satisfaction.
 (Real data may be available, talk to Mark Cartnal). See the page for the  PATAT - International conference on the practice and theory automated timetabling.  

 3. Class scheduling.

 The problem is to find a schedule for classes, classrooms, and teachers for a teaching setting
 (e.g., a high school, a computer science department). Measure of satisfaction can be to
 minimize the number of weighted constraints violated. Students can use the REES tool to model and
 run their algorithms. See papers by  Saleh Elmohamed et al., Dimopoulou et al.,  Badri et al. and Dinkel et al. Also see the link for the PATAT above.
UPDATE! Actual data from chair of CS department:  class schedule for next two years
 
4. Advising a first year student.

A freshman student needs to make many decisions in his first year (what is his major, what classes to take, etc.)
 Build a Bayesian network or a constraint network (or a mixture of both),
 based on your own expertise that will advise a first year student in his first steps on campus.
 See paper by Avi Dechter.
 
5. Magnetic Tower of Hanoi project.

 Variation of Tower of Hanoi puzzle that uses multicolored disks. See paper by Uri Levy.

6. RoboSoccer game simulation.

 Investigate different policies for keepaway RoboSoccer game simulation.
 See Peter Stone's site for keepaway.
  Investigate influence of total number of players, ratio between keepers and takers and field size on the effectiveness of certain policies.


    Develop new policies for the keepers, using various machine learning techniques and compare to the ones presented by Peter Stone's group.
    Develop policies for the takers. Prove that your policies work better then the handcoded one used by Peter Stone.

7. Games development.


Othello game
 Checkers
 Go
 Japanese crossword
 Generating ordinary crosswords

8. Sudoku. 

 Develop both solver and generator of the game instances. See  Sudoku online
 and slides
on sudoku modelling. Another useful paper

9. Image recognition project.

 Develop system capable of recognising  so-called CAPCHA - numbers that you need to input when you register for a forum or ticketmaster.











School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/winter-2010/projects.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175, Project in AI, Winter 2010
  overview |   
  home work |
  lecture notes




Teams and projects list:  





 Team: Jeff Kao, Tzu Yang Huang  (managed by Rina)

 Anteater Course Scheduler : the College Course Planning System


 Team: Victoria Ju, Jason Les, Matthew Vanthaneeyakul (m.b. Rina)

                   E-mail management 

               

Team: Matt Crain, John Cheng, Rabih Sallman (m.b. Rina)

                Sudoku

              

 Team: Daniel Hebert, Bryant Yao  (m.b. Rina)

                Generalization of the Eight Queens problem 

               

 Team: Adam Tsang, Ted Kim, and Joe McCarthy  (m.b. Rina)

       SpamAssassin filter

 

 Team: Jacob Marash, Matt Curcio, Jason Mooradian (m.b. Rina)

                First year student advisor

         

 Team: Michael Scipione, Feliks Sharikov, Mathew Tinsley (m.b. Natasha)

                Robot Soccer -  Keep Away  

           

 Team: Stuart Yang, Brian Chow, and Trevor Martin (m.b. Natasha)

                 Minesweeper solver 

             

 Team: Christopher Larsen, Mathew Gee, Austin Liou (m.b. Natasha)

                 Chinese Chess 

          

 Team: Anthony Wang, Collins Chang, Pridcilla Tong   (m.b. Rina ) 

                 Checkers

             

Team: David Peng   (m.b. Rina)

                 Rush Hour solver and generator

             

 Team: Chris Chen, Vincent Nguyen (m.b. Natasha)

             Othello

 Team: Andrew Isbell, Denise Ma, Christopher Pestano (m.b. Natasha)

                Chess

            

 Team: Jonathan Chuang, Romain Ducout  (m.b. Natasha)

                Text Recognition 

    

 Team: Shenghe Xi, Benny Wong, Jihoon Lee  (m.b. Natasha)

  Free Cell card game -  Not approved yet!


 Team: Karl Saldivar, Alexander Kindel, Jakkree Janchoi, Aamir Shah (m.b. Natasha)

Go


 Team: Jeff Cardenas, Kevin Wilkinson, Mike Tasch (m.b. Natasha)

Checkers


 Team: Edward Fleischman, Jay Igarashi, Joel Cruz (m.b. Rina)

 Japanese crossword 








School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/winter-2010/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175, Project in AI, Winter 2010
  overview | 
  home work
  





Lecture Notes


Lecture 1: Constraint networks overview
      
   Lecture 2: Bayesian networks overview
      
   Lecture 2: Learning and inference in Bayesian networks
 Lecture 3: Building Bayesian networks
      






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-05/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-275B Spring 2005, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings ]





Homeworks
		
			Projects - pdf
			
		
	
	
	Homework 1 - pdf
	Homework 2 - pdf
	Homework 3 - pdf
	Homework 4 - pdf
	Homework 5 - pdf
	Homework 6 - pdf
	Homework 7 - pdf
	Homework 8 - pdf
	
		Solution 1 - ps
		Solution 2 - ps
	



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-05/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-275B Spring 2005, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings ]





Readings
	
	



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-05/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]


ICS-275B Spring 2005, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings ]








		
		
        Projects - pdf
        
    
  Course Reference
  
  
  Days: Monday/Wednesday
   Time: 11:00 p.m. - 12:20 p.m.
   Room: SE2 1304
   Instructor: Rina Dechter
  

  

  
  Course Description

  One of the main challenges in building intelligent systems
  is the ability to reason under uncertainty, and one of the most successful
  approaches for dealing with this challenge is based on the framework of
  Bayesian networks, also called graphical models. Intelligent systems based on
  Bayesian networks are being used in a variety of real-world applications
  including diagnosis, sensor fusion, on-line help systems, credit assessment,
  bioinformatics and data mining.

  The objective of this class is to provide an in-depth exposition of
  knowledge representation and reasoning under uncertainty using the framework
  of Bayesian networks.  Both theoretical underpinnings and practical
  considerations will be covered, with a special emphasis on dependency and
  independency models, on construction Bayesian graphical models and on exact
  and approximate probabilistic reasoning algorithms. Additional topics
  include: causal networks, learning Bayesian network parameters from data and
  dynamic Bayesian networks.
  


  


  
  Prerequisites
  
  Familiarity with basic concepts of probability theory. Knowledge of basic computer science, algorithms and programming principles. Previous exposure to AI is desirable but not essential. 


  

  
  Tentative Syllabus
  



			Week          
		
			Date
		
			Topic
		
			Readings
		
			Homeworks
		
			Week 1
		
			4/4
		
			Introduction and background.
			
		
			Pearl's book, chapters 1-2. Russell chapter 13.
			Koller chapter 3 (optional).
		
			Homework 1
		
			 
		
			4/6
		
			Bayesian network representation: Independence properties.
		
			Pearl chapter 3.
		
			 
		
			Week 2
		
			4/11
		
			Bayesian network: Directed graphical models of independence.
			
		
			 
		
			Homework 2
		
			 
		
			4/13
		
			Markov network: Undirected graphical models of independence. Knowledge engineering.
			

		
			Koller chapter 5.
		
			 
		
			Week 3
		
			4/18
		
			Exact reasoning by inference: variable elimination.
			

		
			Bucket Elimination. R. Dechter.
			
			AAAI98 Tutorial on Reasoning.
		
			Homework 3
		
			 
		
			4/20
		
			Exact reasoning by inference: bucket trees, join-trees and polytrees propagation algorithms.
			

		
			Pearl chapter 4.
			
			A Note on Bucket Elimination. R. Dechter.
			Exact inference (slides).
		
			 
		
			Week 4
		
			4/25
		
			Hybrids of search and inference schemes.
				The reasoning tasks of MPE and MAP.
			

		
			 Pearl chapter 5.
		
			Homework 4
		
			 
		
			4/27
		
			Exact reasoning by search: AND/OR search spaces.
			

		
			Koller chapter 8.
			AND/OR Search Spaces for Graphical Models. R. Dechter
			Recursive Conditioning. A. Darwiche
			Exact inference (slides).
		
			 
		
			Week 5
		
			5/2
		
			Approximate  reasoning by sampling: MCMC methods (Gibbs sampling), importance sampling.
				Rao-Blackwellised, custet conditioning sampling.
			
		
			Sampling Bayesian Networks (slides)
			Particle Filtering (slides)
			AIS-BN. M. Druzdzel and J. Cheng
			Rao-Blackwellised Particle Filtering for Dynamic Bayesian Networks. A. Doucet et al.
		
			Homework 5
		
			 
		
			5/4
		
			Discussion section.
			

		
			 
		
			 
		
			Week 6
		
			5/9
		
			Approximate reasoning by bounded inference: mini-bucket and mini-clustering,
				Generalized belief propagation.
			

		
			Bounded inference (slides).
		
			Homework 6
		
			 
		
			5/11
		
			Canonical models; local structures.
			

		
			On the impact of causal independence. I. Rish and R. Dechter.
		
			 
		
			Week 7
		
			5/16
		
			Continuous and hybrid Bayesian networks.
			

		
			Russell chapter 15.
			Koller chapter 4.
			Lauritzen paper.
			Murphy paper.
			Inference in Continuous and Hybrid Networks (slides).
		
			Homework 7
		
			 
		
			5/18
		
			Causal networks.
			

		
			 Pearl's book on causal reasoning.
		
			 
		
			Week 8
		
			5/23
		
			Causal networks.
			

		
			Pearl's book on causal reasoning.
			Slides 1
		
			 
		
			 
		
			5/25
		
			Causal networks.
			

		
			Pearl's book on causal reasoning.
			Slides 2
		
			 
		
			Week 9
		
			5/30
		
			Memorial weekend.
			

		
			 
		
			 
		
			 
		
			6/1
		
			Causal networks.
			

		
			Pearl's book on causal reasoning.
		
			Homework 8
		
			Week 10
		
			6/6
		
			Causal networks.
			

		
			Pearl's book on causal reasoning.
		
			 
		
			 
		
			6/8
		
			Project presentations.
			

		
			 
		
			 
		












  

  

  
  Readings (partial list)
  
  Judea
       Pearl, Probabilistic Reasoning in Intelligent Systems. Heckerman
       & Breese, Causal
       Independence for Probability Assessment and Inference Using Bayesian
       Networks. Boutilier,
       Friedman, Goldszmidt & Koller,
       Context-Specific
       Independence in Bayesian Networks. Dechter,
       Bucket Elimination: A
       Unifying Framework for Probabilistic Inference. 1998.Dechter,
       "AAAI98
       tutorial on reasoning." Heckerman, A Tutorial on Learning with Bayesian
       Networks. Kjaerulff,
       dHugin: A Computational System for Dynamic
       Time-Sliced Bayesian Networks. Pearl, Causation,
       Action and Counterfactuals. Dechter,  Mini-buckets:
       a general scheme for approximating inference.
       Extended report.  Darwiche,
       Recursive
       Conditioning: Any-space conditioning algorithm with treewidth-bounded
       complexity. Darwiche,  Any-space
       probabilistic inference. Darwiche,  On the role of
       partial differentiation in probabilistic inference. Horvitz, Breese,
       Heckerman, Hovel & Rommelse. The Lumiere Project: Bayesian User Modeling for
       Inferring the Goals and Needs of Software Users. Binder, Murphy,
       Russell. Space-efficient
       inference in dynamic probabilistic networks. Russell, Binder, Koller, Kanazawa.
       Local
       learning in probabilistic networks with hidden variables. Dugad
       & Desai. A
       Tutorial on Hidden Markov Models. Friedman, Geiger, Goldszmidt. Bayesian
       Network Classifiers. Dechter,
       R., El Fattah, Y.,
       Topological Parameters For Time-Space Tradeoff Gagliardi,
       F., Generalizing
       Variable Elimination In Bayesian Networks Rish,
       I; Dechter, R, AAAI
       2000 Tutorial 


  

  
  Books:
  
  Judea Pearl.
       Probabilistic Reasoning in Intelligent Systems. Morgan Kaufmann, 1990. K. B. Korb and A. E. Nicholson, Bayesian Artificial
       Intelligence,  Chapman and
       Hall/CRC, 2004Finn V. Jensen. An
       introduction to Bayesian networks. UCL Press, 1996. Russell
       and Norvig, Artificial intelligence, a modern
       approach (chapters, 13,14,15)J. Pearl, Causality,
       Models, Reasoning and Inference, Cambridge University Press, 2000Castillo, E.;
       Gutierrez, J.M.; Hadi, A.S., Expert Systems
       and Probabilistic Network Models, Springer-Verlag
       1997 Robert G. Cowell, A. Philip Dawid,
       Steffen L. Lauritzen, David J. Spiegelhalter Probabilistic Networks and Expert
       Systems Springer-Verlag, 1999 


  

  
  Free Software
  
  REES: 
       http://www.ics.uci.edu/~radum/rees.html
       GeNIe/SMILE
       from the University
        of UPitt:
       
       http://www2.sis.pitt.edu/~genie/
       Hugin
       lite from Hugin: 
       http://www.hugin.com MSBN from Microsoft
       Research:
       http://www.research.microsoft.com/dtas/msbn/
       JAVABayes
       from CMU:
       http://www.cs.cmu.edu/~javabayes/Home/
       Netica
       from Norsys:
       http://www.norsys.com 

  

  
  Related Links
  
  A Brief
       Introduction to Graphical Models and Bayesian Networks The Association for Uncertainty in Artificial
       Intelligence 
       Sponsors the conference on Uncertainty in
       Artificial Intelligence (UAI), which is the main yearly forum for
       reporting research results relating to Bayesian networks. FreeBayesian Network Packages 
       A Brief
       Introduction to Graphical Models and Bayesian Networks Artificial
       Intelligence: Probability studies may give computers a chance to learn,
       by Kevin J. Delaney in Cambridge,
        England.
       The Wall Street Journal Europe. AI on the web UAI
       repository More
       Inference Algorithms 

  

 
  Assignments:
  
  There will be homework assignments and students will also
  be engaged in projects. 

  

  
  Grading Policy:
  
  Homeworks
  and projects (50%), midterm (50%)
  





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-05/handouts.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]


ICS-275B Spring 2005, Network-Based Reasoning - Bayesian Networks
  [ main |
  					homework |
 					handouts |
 					readings ]





Handouts
		A Note on Bucket Elimination.
		Exact inference (slides).
		Bounded inference (slides).
		Lauritzen paper.
		Murphy paper.
		Inference in Continuous and Hybrid Networks (slides).
		Causality - slides 1.
		Causality - slides 2.
	




School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/spring-01/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Spring 2001
    main | 
    announcements | 
    homework | 
    project



Lecture Notes
Lecture notes 1 - [ pdf | ppt]
  Lecture notes 2 - [ pdf | ppt]
  Lecture notes 3 - [ pdf | ppt]
  Lecture notes 4 - [ pdf | ppt]
  Lecture notes 5 - [ pdf | ppt]
  Lecture notes 6 - [ pdf | ppt]
  Lecture notes 7 - [ pdf | ppt]
  Lecture notes 8 - [ pdf | ppt]
  Lecture notes 9 - [ pdf | ppt]






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/spring-01/home-work.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-270A, Intorduction to Artificial Intelligence, Spring 2001
    main | 
    announcements | 
    lecture notes | 
    project



Home Works
Home Work 1 - [ PS | PDF ]
  
  Home Work 2 - [ PS | PDF ]
  
  Home Work 3 - [ PS | PDF ]
  
  Home Work 4 - [ PS | PDF ]		

  Home Work 5 - [ PS | PDF ]		
  
  Home Work 6 - [ PS | PDF ]

  Home Work 7 - [ PS | PDF ]






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/spring-01/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Spring 2001
    main | 
    lecture notes | 
    homework | 
    project



Announcements
May 31st, 2001:
    The lecture on Monday, June 4, will be in CS 225 from 1pm - 3:30pm.
	  The lecture on Wednesday, June 6, will be in CS 259 from 1pm - 3:30pm.
    
    

    May 21st, 2001:
    The lecture on Wednesday, May 23, will be in CS 259 from 1pm - 3pm..
    
    

    April 9th, 2001:
    Lecture meeting place has been changed to CS 243.
    
    
  April 5th, 2001:
    Lecture notes 1 and 2 are now available online.
    






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-04/hmwk_proj.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-171, Intorduction to Artificial Intelligence, Fall 2004






Homework


  Homework 1
  Homework 2
  Homework 3
  Homework 4
  Homework 5
  Homework 6
  Homework 7
   
  


Homework Solutions


  Homework 1 Solutions [ ps | pdf ]
  Homework 2 Solutions [ pdf ]
  Homework 3 Solutions [ pdf ]
  Homework 4 Solutions [ pdf ]
  Homework 5 Solutions [ pdf ]
  Homework 6 Solutions [ pdf ]
  Homework 7 Solutions [ pdf ]
  



Project


  Path Planning [ pdf ]
  








     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-04/outline_syl.html
##-----------------TITLE------------------------##
ICS 171: Introduction to Artificial Intelligence - Fall 2004
##------------------TEXT------------------------##
[an error occurred while processing this directive]




 171 Course Outline, Fall 2004

Professor: Rina
Dechter Electronic Mail: dechter@ics.uci.edu Place: RH 101 Time: TuTh 02:00 to 03:20p Office: ICS 424E Office Hours: Monday, Thursday, 1:00 to 2:00 pm. Textbooks: Artificial Intelligence: A Modern Approach, by Russell and Norvig.

Classnotes

Teaching Assistants  Lucas Scharenbroich lscharen@uci.edu .   Office hours, uesday,Thursday 10-11, CSE 301.
 Andrew Felch afelch@uci.edu
Office hours are 3:30-4:30 Tuesday (after class) and 5:00-6:00 Thursday (after discussion), ETC 105  

Discussion Sections  36471 DIS 1:  MO, 10:00-10:50 in ICF 101 36472 DIS 2: Wed 02:00-02:50 in ICF 101 36473 DIS 3: Thur 4:00-04:50 in ICF 101 




Course Goals: 


Learn the basic AI techniques, the problems for which they
are applicable and their limitations. Topics covered include
heuristic search algorithms,
Knowledge-representation (logic-based and probabilistic-based)
 inference and  learning algorithms.



Academic Honesty:
Academic honesty is taken seriously. It is the responsibility of
each student to be familiar with UCI's current academic honesty
policies. Please take the time to read the current UCI Senate
Academic Honesty Policies. 


Assignments:


There will be weekly homeworks, about 7-8 throughout the quarter, each
on the material covered in class up to that time. Homeworks will account for 25-30%
of the grade. Homeworks will be assigned on Tuesday and will be due to following Thursday at 2:00 pm in class (stay tuned for changes towards the end of the quarter)
The lowest scored homework will be dropped.
There will be no make-ups for homeworks.

There will be 1 project which will
account for 10-15% of the grade.

There will be one midterm exam, closed books which will account for
20% of the grade.

There will be a final exam, closed books during the final week
which will account for 40% of the grade.



  Bulletin Board:  

Read ics.171 for announcements, answers to homework etc.
Also, please post
questions about homework or anything else there.
If you don't understand something, others probably don't either
and will have the same question.



Procedures:

Some handouts will be distributed during the quarter by the
Distribution Center, others will be available to buy in the Engineering
Copy Center.


Syllabus:

Lecture 1. Introduction, history, intelligent agents. Chapters 1, 2.
 Lecture 2. Problem formulation: State-spaces, search graphs,
problem spaces, problem types. Chapter 3 .
Lectures 3. Uninformed search:  breadth-first,
depth-first, iterative deepening, bidirectional search. Chapter 3.Lectures 4.  Informed Heuristic search: Greedy, Best-First, A*,
Properties of A*.  Chapter 4.Lectures 5.  Informed Heuristic search, Properties and generating heauristics,  constraint satisfaction. Chapters 4,5.Lecture 6. Constraint satisfaction. Chapter 5.Lecture 7. Constraint satisfaction. Game playing Chapter 6.Lecture 8. Game playing. Chapter 6.Lecture 9. Representation and Reasoning: Propositional
logic. Chapter 7.Lecture 10. Representation and Reasoning: Inference in propositional
logic. Chapter 7.Lecture 11. Midterm
Lecture 12. First order logic.  Chapter. 9.Lecture 13. Inference in first order logic. Chapter 9. Lecture 14. Veteran day Lecture 15. Learning from observations. Chapter 18.Lecture 16. Neural networks. Chapter, 20.5 
 Lecture 17.  Handling uncertainty. Chapter 13  Lecture 18.  Thanksgiving  Lecture 19.  Bayesian networks. Chapter 14  Lecture 20.  Assorted topics 



Resources on the Internet 

A list of Web
resources about AI . Computing Machinery and Intelligence, A.M. Turing

 
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-04/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-171, Intorduction to Artificial Intelligence, Fall2004



Lecture Notes
Lecture notes 1 - [ pdf ]
  Lecture notes 2 - [ Stuart Russell's slides ]
  Lecture notes 3 - [ ppt ]
  Lecture notes 4 - [ ppt ]
  Lecture notes 5 - [ ppt ]
  Lecture notes 6 - [ ppt ]
  Lecture notes 7 - [ ppt ]
  Lecture notes 8 - [ ppt ]
  Lecture notes 9 - [ ppt ]
  Lecture notes 10 - [ ppt ]
  Lecture notes 11 - [ ppt ]

  






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/fall-04/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Fall 2004
    main |
    lecture notes |
    homework |
    project



Announcements
     Homework 1 posted (Wed, 09/29); due 10/07
    
  




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/fall-04/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-270A, Intorduction to Artificial Intelligence, Fall 2004
    main |
    announcements |
    homework |
    project



Lecture Notes
Lecture notes 1 - [ pdf ]
  Lecture notes 2 - [ Stuart Russell's slides ]
  Lecture notes 3 - [ ppt ]
  Lecture notes 4 - [ ppt ]
  Lecture notes 5 - [ ppt ]
  Lecture notes 6 - [ ppt ]
  Lecture notes 7 - [ ppt ]
  Lecture notes 8 - [ ppt ]
  Lecture notes 9 - [ ppt ]
  Lecture notes 10 - [ ppt ]







     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-270a/fall-04/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]






ICS-270A, Intorduction to Artificial Intelligence, Fall 2004
    main |
    announcements |
    lecture notes |
    project




Homework


  Homework 1
  Homework 2
  Homework 3
  Homework 4
  Homework 5
  Homework 6
  Homework 7
  
  


Homework Solutions


  Homework 1 Solutions
  Homework 2 Solutions
  Homework 3 Solutions
  Homework 5 Solutions
  
  






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/fall-2001/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Constraint Networks, Fall 2001
  overview | 
  announcements | 
  home work | 
  projects




Lecture Notes





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/fall-2001/projects.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Constraint Networks, Fall 2001
  overview | 
  announcements | 
  home work |
  lecture notes




Projects

Slides for graph-based project PDF






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/fall-2001/announcements.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Constraint Networks, Fall 2001
  overview | 
  home work | 
  lecture notes | 
  projects




Announcements





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/fall-2001/grades.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Constraint Networks, Fall 2001
  overview | 
  announcements | 
  home work |
  lecture notes




Grades

Sorted by the last three digits of the student I.D. numbers.
043A053A056A+064B102A160A183A213A239A259A+272A348A-356A+409A450A453P469A477A+517A518A-531A552A590C640A669A+692A694A741A775A887A934A964A



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/fall-2001/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-175A, Constraint Networks, Fall 2001
  overview | 
  announcements | 
  lecture notes | 
  projects




Home Work





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-295/spring-2008/resources.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CS-295 Reasoning and Modeling with Graphical
Models: Sampling and Parallel computation, Spring 2008  main 


  Link to CS 295 seminar offered in Spring 2007 Resources for Sampling.
      
      “Monte Carlo
Strategies in Scientific Computing” by J. S. Liu, Springer,E. Thompson Tutorial
      Resources for Parallel
Processing.
      
      Ydo Wexler, Dan Geiger: Variational Upper Bounds for
Probabilistic Phylogenetic Models. RECOMB 2007: 226-237,Ron Zohar, Dan Geiger: Estimation of flows in flow
networks. European Journal of Operational Research 176(2): 691-706
(2007).Mark Silberstein, Dan Geiger, Assaf Schuster: A
Distributed System for Genetic Linkage Analysis. GCCB 2006: 110-123.Dan Geiger, Christopher Meek, Ydo Wexler: A Variational
Inference Procedure Allowing Internal Structure for Overlapping
Clusters and
Deterministic Constraints. J. Artif. Intell. Res. (JAIR) 27: 1-23
(2006). Class notes by Prof. VishkinX. Wen and U. Vishkin  “Parallel
computation for Graphical models PFGA-Based
Prototype of a
PRAM-On-Chip Processor”, 2007.M. Silberstein et al. "Efficient Sum Product
computations on GPUs", 2008. PDF
          
      Resources for Inference.
      
      Mark Chavira and Adnan Darwiche “On Probabilistic
Inference by Weighted Model Counting”  in
Artificial Intelligence Journal (AIJ), 2008. Joris Mooij “Understanding and improving Belief
propagation, Phd thesis, 2008A. Ihler, John Fisher, A. Willskey Loopy belief
propagation: Convergence and effects of message errors” JAIR 2005A Globerson and T Jaakola “Convergent Propagation
algorithms via oriented Trees” 2007D Sontag and T. Jaakola “New Outer Bounds on the
marginal polytope”Amir Globerson and Tommi Jaakkola, Approximate
inference using conditional entropy decompositions, AISTATS 2007. 
        Timothee Cour and Jianbo Shi, Solving Markov Random
Fields with Spectral Relaxation, AISTATS 2007. 
        Joris Mooij, Bastian Wemmenhove, Bert Kappen and
Tommaso Rizzo, Loop Corrected Belief
Propagation, AISTATS 2007. 
        Edward Snelson and Zoubin Ghahramani, Local and global
sparse Gaussian process approximations. AISTATS 2007. 
        Gregory Druck, Mukund Narasimhan and Paul Viola.
Learning A* underestimates: Using inference to guide inference. AISTATS
2007. 
        M. J. Wainwright, T. Jaakkola and A. S. Willsky. A
new class of upper bounds on the log partition function. IEEE Trans. on
Information Theory, vol. 51, page 2313--2335, July 2005. 
        M. J. Wainwright, and M. I. Jordan. Graphical models,
exponential families, and variational inference. UC Berkeley, Dept. of
Statistics, Technical Report 649. September, 2003. 
        Paper
on Graph cuts by Ramin Zabih
        Vladimir
Kolmogorov and Ramin Zabih. "Graph Cut Algorithms for Binocular Stereo
with Occlusions'', . In: Mathematical Models in Computer Vision:
The Handbook, Springer-Verlag (2005). Vladimir
Kolmogorov and Ramin Zabih. "What Energy Functions can be Minimized via
Graph Cuts?'',  IEEE Transactions on Pattern Analysis and
Machine Intelligence, vol. 26, no. 2 pages 147-159
(2004). 
      Resources for Linkage Analysis.
      
       Eric S. Lander and Philip Green. Construction of
multilocus genetic linkage maps in humans. Genetics. April 1987. 
        Goncalo R. Abecasis and Janis E. Wigginton. Handling
Marker-Marker Linkage Disequilibrium: Pedigree Analysis with Clustered
Markers,
American Journal of Human Genetics. Sept 2005. 
        P Stuart et al. Analysis of RUNX1 binding site
and
RAPTOR polymorphisms in psoriasis: no evidence for association despite
adequate
power and evidence for linkage. American Journal of Human Genetics.
Sept 2006.Joshua T Burdick, Wei-Min Chen, Gonc¸alo R Abecasis
and Vivian G Cheung, In silico method for inferring genotypes in
pedigrees,
Nature genetics.August 2006. Download hereGonçalo R. Abecasis, Stacey S. Cherny, William O.
Cookson1 & Lon R. Cardon. Merlin—rapid analysis of dense genetic
maps using
sparse gene flow trees. Nature Genetics.Dec 2001. Scheet, P and Stephens, M A Fast and Flexible
Statistical Model for Large-Scale Population Genotype Data:
Applications to
Inferring Missing Genotypes and Haplotypic Phase.  American
Journal of
Human Genetics. 2006. Stephens, M and Scheet, P. Accounting for Decay of
Linkage Disequilibrium in Haplotype Inference and Missing-Data
Imputation,
American Journal of Human Genetics. 2005. M. Fishelson and D. Geiger. Exact Genetic Linkage
Computations for General Pedigrees.  Bioinformatics, Volume 18
Suppl. 1:
S189-S198 (July 2002). Also presented in ISMB2002 (August, 2002). M. Fishelson and D. Geiger Optimizing Exact Genetic
Linkage Computations.  Journal of Computational Biology Volume
11(2-3):
263-75 (2004). Also presented in RECOMB2003 (April, 2003).M. Fishelson, N. Dovgolevsky and D. Geiger. Maximum
Likelihood Haplotyping for General Pedigrees. Technical Report
CS-2004-13. To
appear in Human Heredity, 2005. M. Fishelson, N. Dovgolevsky and D. Geiger. Maximum
Likelihood Haplotyping for General Pedigrees. Human Heredity 2004. Yun Ju Sung, Elizabeth A. Thompson and Ellen M.
Wijsman MCMC-Based Linkage Analysis for Complex Traits on General
Pedigrees: Multipoint
          Analysis
With a Two-Locus Model and a
Polygenic Component, Genetic Epidemiology 2007. 
         Hot topics: Essay on Computational Intelligence in Human Genetics Exciting
 
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-14/software.shtml
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Dr. Rina Dechter - University of California at Irvinehome |
    publications |
    book |
		courses |
    researchRevised on
      
      Oct. 06, 2014





    

CompSci-276 Fall 2014, Belief Networks
  [ main |
  					software |
 					
 					references ]






Tools and Software
  Some software links:
  
  SamIam from UCLA: http://reasoning.cs.ucla.edu/samiam/
   Tutorial Videos
   JAVABayes from CMU:
       http://www.cs.cmu.edu/~javabayes/Home/
       GraphModAlg@UCI, Prof. Dechter's group webpage:http://graphmod.ics.uci.edu/GeNIe/SMILE from the University of Pittsburgh:
       
       http://genie.sis.pitt.edu/
       Hugin lite from Hugin: 
       http://www.hugin.com MSBN from Microsoft Research:
       http://research.microsoft.com/en-us/um/redmond/groups/adapt/msbnx/
       REES:  http://graphmod.ics.uci.edu/group/REES
       Netica from Norsys:
       http://www.norsys.com 
  
  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-14/index.shtml
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Dr. Rina Dechter - University of California at Irvinehome |
    publications |
    book |
		courses |
    researchRevised on
      
      Dec. 31, 2014



CompSci-276 Fall 2014, Belief Networks
  [ main |
  					software |
 					
 					references ]









	Project Proposals
	Project Information
   
  Course Reference
  
  
  Lecture
   Days: Monday/Wednesday
   Time: 2:00 pm - 3:20 pm
   Room: ICS 180

   Discussion
   Days: Wednesday
   Time: 3:30 pm - 4:20 pm
   Room: ET 201

   Instructor: Rina Dechter
   Office hours: Thursday 2:00 pm - 3:00pm
  

  

  
  Course Description

  One of the main challenges in building intelligent systems
  is the ability to reason under uncertainty, and one of the most successful
  approaches for dealing with this challenge is based on the framework of
  Bayesian networks, also called graphical models. Intelligent systems based on
  Bayesian networks are being used in a variety of real-world applications
  including diagnosis, sensor fusion, on-line help systems, credit assessment,
  bioinformatics and data mining.

  The objective of this class is to provide an in-depth exposition of
  knowledge representation and reasoning under uncertainty using the framework
  of Bayesian networks.  Both theoretical underpinnings and practical
  considerations will be covered, with a special emphasis on dependency and
  independency models, on construction Bayesian graphical models and on exact
  and approximate probabilistic reasoning algorithms. Additional topics
  include: causal networks, learning Bayesian network parameters from data and
  dynamic Bayesian networks.
  


  


  
  Prerequisites
  
  Familiarity with basic concepts of probability theory. Knowledge of basic computer science, algorithms and programming principles. Previous exposure to AI is desirable but not essential. 


  

      
      Course material
      
		The course will be based mostly on three sources:
		
		Adnan Darwiche,
			"Modeling and Reasoning with Bayesian Networks" Rina Dechter, "Reasoning with Probabilistic and Deterministic Graphical Models: Exact Algorithms"Judea Pearl,
			"Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference"
		
		Additional sources:
		Russell and Norvig, Artificial Intelligence: A Modern ApproachDaphne Koller and Nir Friedman, 
  				 Probabilistic Graphical Models: Principles and Techniques
		
		A longer list including secondary references.
		
		Some links to software and tools.
		
		

  

      
      Syllabus
		
      
       Week       Date  TopicReadings          
            Files        
             Week 1  10/6 
             Introduction and Background.  Lecture 1
          
            
            (a) Pearl 1-2
            (b) Darwiche 1-3
            (c) Russell-Norvig 13
            (d) Darwiche. Bayesian Networks	

	    Homework 1
		Slides 1
                10/8 
            Markov networks:  undirected graphical Models.  Lecture 2
            
            
           
            
			Slides 2
             Week 2  10/13 
            Bayesian networks: directed graphical models. Lecture 3
            
             
	    
            
			Homework 2
                10/15 
            Bayesian networks: directed graphical models of independence.  Lecture 4
            
            
	    Pearl Ch.3
            
			Slides 3
	    
             Week 3  10/20 
            Building Bayesian networks. Lecture 5
            
            
	    Darwiche Ch. 5
            
			Slides 4a
                10/22 
            Building Bayesian networks. Lecture 6
            
             
			
             
			Homework 3
			Slides 4b
             Week 4  10/27 
	  Exact inference by variable elimination. Lecture 7
	  
	  
	  Dechter Ch. 4,  Darwiche Ch. 6
	  
	  Slides 5
	     10/29 
	  Optimization queries: MPE and MAP. Lecture 8
	   
            
			Homework 4
             Week 5  11/3 
            Exact inference by Tree-decompositions: Join-tree/Junction-tree algorithm. Cluster tree elimination. Lecture 9
            
            Dechter Ch. 5, Darwiche Ch. 7-8
            
			Homework 5
            Slides 6
	       11/5 
            Exact inference by tree-decomposition, cutset-conditioning scheme.
			   Lecture 10
            
            
            
			Project Homework
             Week 6  11/10 
            AND/OR search spaces.Veteran's Day.
            
	    
            
               11/12 
            AND/OR search spaces. Lecture 12
            
            
            
			Slides 7
             Week 7  11/17 
            Approximate algorithms by Sampling: MCMC schemes. Lecture 13
            
              
	    
            
			Slides 8
               11/19  
            Approximate algorithms by Sampling: advanced schemes. Lecture 14
            
	      
			Cutset sampling
            
			Homework 6
			Slides 9
             Week 8  11/24 
	    Approximate algorithms by Bounded Inference.  Lecture 15
	    
            
	    
            
			Slides 10a
               11/26 
            Approximate algorithms by Bounded Inference (continued). Lecture 16
            
               
	    
            
             Week 9  12/1 
            Approximate algorithms by Bounded Inference (continued). Lecture 17
            
             
			Class Notes Ch.8-9
            
			Homework 7
			Slides LoopyBP
               12/3 
            Approximate algorithms by Bounded Inference (continued). Lecture 18
            
            
            
			Slides 10b
			Slides 10c
             Week 10  12/8 
            Project presentations.
            
            
               12/10 
            Project presentations. 
            
            
             Week 11  12/15  
            Project presentations.
            
            
            

  

 
  Assignments:
  
  There will be homework assignments and students will also
  be engaged in projects. 

  

  
  Grading Policy:
  
  Homework
  and exam (75%), class project (25%)
  
 






School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-14/readings.shtml
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
Dr. Rina Dechter - University of California at Irvinehome |
    publications |
    book |
		courses |
    researchRevised on
      
      Aug. 31, 2014





    

CompSci-276 Fall 2014, Belief Networks
  [ main |
  					software |
 					
 					references ]






References and Related Links
			The course will be based mostly on three sources:
		
		Judea Pearl, "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference"Adnan Darwiche, "Modeling and Reasoning with Bayesian Networks" Class notes (downloads linked in schedule on main page)
		
		Two additional (new) books:
		Daphne Koller and Nier Friedman, 
  				 Probabilistic Graphical Models: Principles and Techniques. The MIT Press, 2009Richard E. Neapolitan, Learning
  		 		 Bayesian Networks. Prentice Hall, 2003.
		
		
		
		The following is a (partial) list of secondary reading material:
		
		Books:K.B. Korb and A. E. Nicholson, Bayesian Artificial
       Intelligence. Chapman and
       Hall/CRC, 2004Finn V. Jensen. An
       introduction to Bayesian networks. UCL Press, 1996. Russell and Norvig, Artificial intelligence, a modern
       approach (chapters, 13,14,15)J. Pearl, Causality,
       Models, Reasoning and Inference, Cambridge University Press, 2000Castillo, E.;
       Gutierrez, J.M.; Hadi, A.S., Expert Systems
       and Probabilistic Network Models, Springer-Verlag
       1997 Robert G. Cowell, A. Philip Dawid,
       Steffen L. Lauritzen, David J. Spiegelhalter Probabilistic Networks and Expert
       Systems Springer-Verlag, 1999.
			
		Articles:Daphne Koller, Nir Friedman, Lise Getoor and Ben Taskar,
       
       Graphical Models in a Nutshell.Heckerman and Breese, Causal
       Independence for Probability Assessment and Inference Using Bayesian
       Networks. Boutilier,
       Friedman, Goldszmidt and Koller,
       Context-Specific
       Independence in Bayesian Networks. Dechter,
       Bucket Elimination: A
       Unifying Framework for Probabilistic Inference. 1998.Dechter,
       "AAAI98
       tutorial on reasoning." Heckerman, 
       A Tutorial on Learning with Bayesian
       Networks. Kjaerulff,
       
       dHugin: A Computational System for Dynamic
       Time-Sliced Bayesian Networks. Pearl, Causation,
       Action and Counterfactuals. Dechter,Mini-buckets:
       a general scheme for approximating inference.
       Extended report.  Darwiche,
       Recursive
       Conditioning: Any-space conditioning algorithm with treewidth-bounded
       complexity. Darwiche,Any-space
       probabilistic inference. Darwiche,On the role of
       partial differentiation in probabilistic inference. Horvitz, Breese,
       Heckerman, Hovel & Rommelse. The Lumiere Project: Bayesian User Modeling for
       Inferring the Goals and Needs of Software Users. Binder, Murphy,
       Russell. Space-efficient
       inference in dynamic probabilistic networks. Russell, Binder, Koller, Kanazawa.
       Local
       learning in probabilistic networks with hidden variables. Dugad
       & Desai. A
       Tutorial on Hidden Markov Models. Friedman, Geiger, Goldszmidt. Bayesian
       Network Classifiers. Dechter,
       R., El Fattah, Y.,
       Topological Parameters For Time-Space Tradeoff Gagliardi,
       F., Generalizing
       Variable Elimination In Bayesian Networks Rish, I. and Dechter, R., AAAI
       2000 Tutorial 
  

  
  Other related links:A Brief
       Introduction to Graphical Models and Bayesian Networks The Association for Uncertainty in Artificial
       Intelligence 
       Sponsors the conference on Uncertainty in
       Artificial Intelligence (UAI), which is the main yearly forum for
       reporting research results relating to Bayesian networks. Free Bayesian Network Packages
       Artificial
       Intelligence: Probability studies may give computers a chance to learn,
       by Kevin J. Delaney in Cambridge, England.
       The Wall Street Journal Europe. AI on the web UAI
       repository 

  

  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2011/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

  
  
  
        CompSci-175, Project in AI, Spring 2011
      [ main |
      lecture notes |
      projects ]
  
  

  




Lecture Notes



Lecture 1: Constraint networks overview
Tutorial: Numberjack








School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2011/Projects_list.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

  
  
  
        CompSci-175, Project in AI, Spring 2011
      [ main |
      lecture notes |
      projects ]
  
  





Project Ideas


Next are some project ideas in Bayesian networks, constraint networks, and games.




When you select a project provide:
Project title
  Project idea
  Methodology (Constraint processing, Bayesian networks, Games, search, planning, learning)
  Data source you will use
  Tools you will use
  Software you will have to write
  Background material to read. Read relevant papers. Find out available systems.
  Teammates: optimal number of team mates is 3
  Expected output (experiments, demo)






In constraint network projects, you will need to model your domain using 
a collection of constraints and cost functions using one of the tools for constraint processing. You will need to show how you solve the
 problem and how you evaluate the quality of your model and solutions.


In Bayesian network projects you will build a Bayesian network that 
models a domain and makes some inferences. Available tools such as SamIam,
REES, Hugin and JavaBayes can be used. The system can be built using 
knowledge acquisition from expert in the domain or by learning from data 
or both. Some domains used in the past are: Admission to a Phd program, 
Loan expert advisor, Basketball simulator, Handicappers (picking winners 
in horseracing).

The domain you select should be sufficiently complex. It should have enough variables (at least 50 variables).
 You would need to validate the model somehow. This can be done by connecting with an expert in the domain or
 by having data. Once you have the network model, you should propose what 
 kinds of experimental evaluation to conduct over it.  



Examples of projects:



1. Class scheduling.

 The problem is to find a schedule for classes, classrooms, and teachers for a teaching setting
 (e.g., a high school, a computer science department). A measure of satisfaction can be to
 minimize the number of weighted constraints violated. Students can use the REES tool to model and
 run their algorithms. See papers by  Saleh Elmohamed et al., Dimopoulou et al.,  Badri et al. and Dinkel et al. Also see the link for the PATAT above.
Actual data from the chair of the CS department:  class schedule for next two years
 

2. TA assignments.

 Given class schedules for quarter, the number of TAs needed for each class, TAs' preferences and qualification,
 and instructors' choice of preferred TA, schedule the TAs in a way that maximize some measure of satisfaction.
 (Real data may be available, talk to Mark Cartnal). See the page for the PATAT - International conference on the practice and theory automated timetabling.  

3. Advising a first year student.

A freshman student needs to make many decisions in his first year (what is his major, what classes to take, etc.)
 Build a Bayesian network or a constraint network (or a mixture of both),
 based on your own expertise that will advise a first year student in his first steps on campus.
 See paper by Avi Dechter.
 
4. Magnetic Tower of Hanoi project.

A variation of the Tower of Hanoi puzzle that uses multicolored disks. See paper by Uri Levy.

5. RoboSoccer game simulation.

 Investigate different policies for keepaway RoboSoccer game simulation.
 See Peter Stone's site for keepaway.
  Investigate the influence of the total number of players, ratio between keepers and takers, and field size on the effectiveness of certain policies.


    Develop new policies for the keepers, using various machine learning techniques and compare to the ones presented by Peter Stone's group.
    Develop policies for the takers. Prove that your policies work better than the handcoded one used by Peter Stone.


6. Sudoku. 

 Develop both a solver and generator of the game instances. See  Sudoku online
 and slides
on sudoku modelling. Another useful paper.


7. Game development.


Othello
 Checkers
 Go


8. Email management project.
The problem: people receive thousands of emails which require some action
(answer, discard and file). 
 
Email management becomes unmanageable.

The project: build a system that helps decide:

   What email to answer next (prioritize emails)
  What emails to discard and what to file to other folders. 


The input is a collection of emails that were received. Each message should have a collection of features
 (time of arrival, sender, title, length, number of recipients, topic and response time).

Methodology: learning: look at past messages received and the decisions made.

See Padhraic Smyth's topic modelling page. Also, topic modelling tutorials: Steyvers and Griffiths and Blei and Lafferty

More links on text classification and topic modelling:
Paul Graham, Better Bayesian filtering (for spam classification)



9. Work on research with a grad student.

You will have the opportunity to be engaged in a current project, running 
experiments and reporting results. The task is to evaluate a piece of 
software for processing Bayesian networks called BEEM that uses external 
memory. We want to test BEEM for optimization and for approximation. You 
will need to read some papers.





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-175a/spring-2011/index.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

    
  
  
        CompSci-175, Project in AI, Spring 2011
      [ main |
      lecture notes |
      projects ]
  
  


  
        Classroom: ICS 180
          Days: Tuesday & Thursday
          Time: 2:00pm - 3:20pm
          Instructor: Rina Dechter - dechter@ics.uci.edu
              Office: DBH 4232 
              Hours: TBA
          TA: William Lam - willmlam@ics.uci.edu
          	  Office: DBH 4099 
              Hours: TBA


        
		
        


        Requirements:

        Students are required to do a project in Artificial Intelligence.

        Final project: submit a report + code + demo + presentation.

        Students will be required to work independently and be expected to acquire all the knowledge necessary for the project. They will have to fill in the necessary gaps in their background. 
        
        

        

        Grading:
        
        Midterm report: 30%
        Demo-presentation: 35%
        Final report: 35%
        

        


          Specific ideas for projects: see the projects page
	  Discussion Board

		Assignments and progress reports
		For any assignment that you submit you should always state at the top of the report:
the team number, the names of team members and the project title.
		
		Be sure to address the following questions:
		 How does the project build upon what is available in the literature and out there?
		 Important: What is the architecture of your project (different modules and who is doing what on the team)?
		 What AI algorithms will you be using?
		 what tools will you use, or have started to use?
		 Is there any data that you need to access?
		 How would you evaluate your project? What is the criteria for success?
		 What initial code have you started to develop?
		
		
		

		Past Projects
		Sudoku madness
		
		Rapier: a chess engine
		Freshman course counseling system
		Board game Go
		
		RoboSoccer: automated KeepAway game
		

        Resources on the Internet

          Books
              Constraint Processing by  Rina Dechter, Morgan Kaufmann 2003
            	  Artificial Intelligence: A Modern Approach, by Stuart Russell and Peter Norvig. Chapter 14, 15a, 15b
            	  Probabilistic Reasoning in Intelligent Systems, by Judea Pearl, Morgan Kaufmann, 1990.
		    Modeling and Reasoning with Bayesian Networks by Adnan Darwiche, Campbridge University Press, 2009

            	

          Surveys on Constraint Processing
              Artificial Intelligence: A Modern Approach, Chapter 5: Constraint Satisfaction Problems
              Dechter, R., "Constraint Networks (Survey)". In  Encyclopedia of Artificial Intelligence, 2nd edition, 1992, John Wiley & Sons, Inc., pp. 276-285.

              Dechter, R., Rossi, F., "Constraint Satisfaction". Survey ECS, March, 2000.

              

              ICS-270A: Lecture 5

         
              

            Survey Papers on Bayesian Networks
              Introduction to Bayesian Networks: Practical and Technical Perspectives by Stefan Conrady and Lionel Jouffe
              Bayesian Networks by Adnan Darwiche
              CACM, December 2010.
              Bayesian Networks Without Tears, by Eugene Charniak
          AI Magazine, vol. 12, 1991.
		 Graphical models in a nutshell
                 A Brief Introduction to Graphical Models and Bayesian Networks by Kevin Murphy
                

          Bayesian Networks, by Judea Pearl and Stuart Russell
	   


          


          Tutorials
           AAAI-98 Tutorial: Learning Bayesian Networks From Data

        	
           
           Tools
          Numberjack (constraint programming platform for Python):
        http://4c110.ucc.ie/numberjack/
	     SamIam by Darwiche (see books section for the companion textbook) :
        http://reasoning.cs.ucla.edu/samiam/
          REES
         JAVABayes from CMU:
        http://www.cs.cmu.edu/~javabayes/Home/
         Hugin lite from Hugin:
        http://www.hugin.com
        	GeNIe/SMILE from the University of UPitt:
        http://genie.sis.pitt.edu/
       
        MSBNx from Microsoft Research:
        http://research.microsoft.com/en-us/um/redmond/groups/adapt/msbnx/
        BNT (Bayes Net Toolbox for Matlab):
        http://bnt.googlecode.com/
       
        Netica from Norsys:
        http://www.norsys.com

        BayesiaLab:
        http://www.conradyscience.com
	



          
	  Related project classes at other universities
          University of Pennsylvania
	   Carnegie Mellon
         

          

          

        

        

        Schedule:
        
        

        WeekTopicDate  Information   AssignmentWeek 1
          Overview of constraint networks
          
        03-29Slides
        Week 2
          Numberjack tutorial
          
        04-05SlidesProject ProposalsWeek 3
          
        04-12Week 4
          Overview of Bayesian networks
          
        04-19SlidesWeek 5
          Paper presentations
          
        04-26Draft progress report(due Tuesday)Week 6
          Midterm reports and presentations
          
        05-03Week 7
          
        05-10Week 8
          
        05-17Week 9
          
        05-24Week 10
          Demo-presentations
          
        05-31Week 11
          (Finals): final report + code + demo-presentation
          
        06-09
        

        
        
  

  
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-295/fall-2013/resources.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
CS-295 Reasoning and Modeling with Graphical
Models: Sampling and Parallel computation, Spring 2008  main 


  Link to CS 295 seminar offered in Spring 2007 Resources for Sampling.
      
      “Monte Carlo
Strategies in Scientific Computing” by J. S. Liu, Springer,E. Thompson Tutorial
      Resources for Parallel
Processing.
      
      Ydo Wexler, Dan Geiger: Variational Upper Bounds for
Probabilistic Phylogenetic Models. RECOMB 2007: 226-237,Ron Zohar, Dan Geiger: Estimation of flows in flow
networks. European Journal of Operational Research 176(2): 691-706
(2007).Mark Silberstein, Dan Geiger, Assaf Schuster: A
Distributed System for Genetic Linkage Analysis. GCCB 2006: 110-123.Dan Geiger, Christopher Meek, Ydo Wexler: A Variational
Inference Procedure Allowing Internal Structure for Overlapping
Clusters and
Deterministic Constraints. J. Artif. Intell. Res. (JAIR) 27: 1-23
(2006). Class notes by Prof. VishkinX. Wen and U. Vishkin  “Parallel
computation for Graphical models PFGA-Based
Prototype of a
PRAM-On-Chip Processor”, 2007.M. Silberstein et al. "Efficient Sum Product
computations on GPUs", 2008. PDF
          
      Resources for Inference.
      
      Mark Chavira and Adnan Darwiche “On Probabilistic
Inference by Weighted Model Counting”  in
Artificial Intelligence Journal (AIJ), 2008. Joris Mooij “Understanding and improving Belief
propagation, Phd thesis, 2008A. Ihler, John Fisher, A. Willskey Loopy belief
propagation: Convergence and effects of message errors” JAIR 2005A Globerson and T Jaakola “Convergent Propagation
algorithms via oriented Trees” 2007D Sontag and T. Jaakola “New Outer Bounds on the
marginal polytope”Amir Globerson and Tommi Jaakkola, Approximate
inference using conditional entropy decompositions, AISTATS 2007. 
        Timothee Cour and Jianbo Shi, Solving Markov Random
Fields with Spectral Relaxation, AISTATS 2007. 
        Joris Mooij, Bastian Wemmenhove, Bert Kappen and
Tommaso Rizzo, Loop Corrected Belief
Propagation, AISTATS 2007. 
        Edward Snelson and Zoubin Ghahramani, Local and global
sparse Gaussian process approximations. AISTATS 2007. 
        Gregory Druck, Mukund Narasimhan and Paul Viola.
Learning A* underestimates: Using inference to guide inference. AISTATS
2007. 
        M. J. Wainwright, T. Jaakkola and A. S. Willsky. A
new class of upper bounds on the log partition function. IEEE Trans. on
Information Theory, vol. 51, page 2313--2335, July 2005. 
        M. J. Wainwright, and M. I. Jordan. Graphical models,
exponential families, and variational inference. UC Berkeley, Dept. of
Statistics, Technical Report 649. September, 2003. 
        Paper
on Graph cuts by Ramin Zabih
        Vladimir
Kolmogorov and Ramin Zabih. "Graph Cut Algorithms for Binocular Stereo
with Occlusions'', . In: Mathematical Models in Computer Vision:
The Handbook, Springer-Verlag (2005). Vladimir
Kolmogorov and Ramin Zabih. "What Energy Functions can be Minimized via
Graph Cuts?'',  IEEE Transactions on Pattern Analysis and
Machine Intelligence, vol. 26, no. 2 pages 147-159
(2004). 
      Resources for Linkage Analysis.
      
       Eric S. Lander and Philip Green. Construction of
multilocus genetic linkage maps in humans. Genetics. April 1987. 
        Goncalo R. Abecasis and Janis E. Wigginton. Handling
Marker-Marker Linkage Disequilibrium: Pedigree Analysis with Clustered
Markers,
American Journal of Human Genetics. Sept 2005. 
        P Stuart et al. Analysis of RUNX1 binding site
and
RAPTOR polymorphisms in psoriasis: no evidence for association despite
adequate
power and evidence for linkage. American Journal of Human Genetics.
Sept 2006.Joshua T Burdick, Wei-Min Chen, Gonc¸alo R Abecasis
and Vivian G Cheung, In silico method for inferring genotypes in
pedigrees,
Nature genetics.August 2006. Download hereGonçalo R. Abecasis, Stacey S. Cherny, William O.
Cookson1 & Lon R. Cardon. Merlin—rapid analysis of dense genetic
maps using
sparse gene flow trees. Nature Genetics.Dec 2001. Scheet, P and Stephens, M A Fast and Flexible
Statistical Model for Large-Scale Population Genotype Data:
Applications to
Inferring Missing Genotypes and Haplotypic Phase.  American
Journal of
Human Genetics. 2006. Stephens, M and Scheet, P. Accounting for Decay of
Linkage Disequilibrium in Haplotype Inference and Missing-Data
Imputation,
American Journal of Human Genetics. 2005. M. Fishelson and D. Geiger. Exact Genetic Linkage
Computations for General Pedigrees.  Bioinformatics, Volume 18
Suppl. 1:
S189-S198 (July 2002). Also presented in ISMB2002 (August, 2002). M. Fishelson and D. Geiger Optimizing Exact Genetic
Linkage Computations.  Journal of Computational Biology Volume
11(2-3):
263-75 (2004). Also presented in RECOMB2003 (April, 2003).M. Fishelson, N. Dovgolevsky and D. Geiger. Maximum
Likelihood Haplotyping for General Pedigrees. Technical Report
CS-2004-13. To
appear in Human Heredity, 2005. M. Fishelson, N. Dovgolevsky and D. Geiger. Maximum
Likelihood Haplotyping for General Pedigrees. Human Heredity 2004. Yun Ju Sung, Elizabeth A. Thompson and Ellen M.
Wijsman MCMC-Based Linkage Analysis for Complex Traits on General
Pedigrees: Multipoint
          Analysis
With a Two-Locus Model and a
Polygenic Component, Genetic Epidemiology 2007. 
         Hot topics: Essay on Computational Intelligence in Human Genetics Exciting
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2007/slides.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275, Constraint Networks, Spring 2007 main | homework | readings
| project


      Slides
       
      
      
      Chapter 1 and 2
      Chapter 3
      Chapter 4
      Chapter 5
      Chapter 6
      Chapter 7
      Chapter 8
      Chapter 9
      Chapter 10
Chapter 13
      
      
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2007/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275, Constraint Networks, Spring 2007 main | homework | readings
| slides


      
      
Project:
      
      Chu Min Li, Felip Many, and Jordi Planes, New Inference Rules for Max-SAT,
Technical Report, 2007, PDF.
        Yong Gao and Joseph Culberson, Consistency and Random Constraint
Satisfaction Models, Journal of Artificial Intelligence
Research, 2006, PDF. 
        J. Larrosa, F. Heras & S. de Givry. A Logical Approach
to Efficient Max-SAT Solving. Artificial Intelligence. An International
Journal. (In press).
          PDFDechter, R., "On the expressiveness of networks with hidden
variables." In Proceedings of the Eighth National Conference on
Artificial Intelligence (AAAI-90), July 1990, Boston, MA, pp.
556-562. 
          PDF
        Papers from CP-2006 link: http://www.sciences.univ-nantes.fr/cp06/
          
        A.Meisels & Roie Zivan, Asynchronous Forward Checking
for DisCSPs , Constraints Journal 2005. PDF
 
      
      
      
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2007/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275, Constraint Networks, Spring 2007 main | slides | readings
| project


      Home Work
      
      Homework 1  (Due: 04/16)Homework 2  (Due: 04/23)Homework 3  (Due: 04/30)Homework 4  (Due:05/07)Homework 5 (Due: 05/14)  
The source code of the
SAT solvers used in this homework are linked below.Solvers
          
        Minisat
          WALKSAT
          Satz
        
        Langford problemsDescription
of the encodingsDownload
the
problems here
        
        Homework
6 (Due: 05/21)Homework 7 (Due: 06/03)
        
       
       
      
      
      Home Work
Solutions
      Homework 2 solutionsHomework 3 solutionsHomework 4 solutions
        
      
       
      
      
      
      
      
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2007/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



ICS-275, Constraint Networks, Spring 2007
  main |
  homework |
  slides |
  project










School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-11/software.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Spring 2011, Belief Networks
  [ main |
  					homework |
  					software |
 					
 					references ]





Tools and Software
  Some software links:
  
  JAVABayes from CMU:
       http://www.cs.cmu.edu/~javabayes/Home/
       GraphModAlg@UCI, Prof. Dechter's group webpage:http://graphmod.ics.uci.edu/GeNIe/SMILE from the University of Pittsburgh:
       
       http://genie.sis.pitt.edu/
       SamIam from UCLA: http://reasoning.cs.ucla.edu/samiam/Hugin lite from Hugin: 
       http://www.hugin.com MSBN from Microsoft Research:
       http://research.microsoft.com/en-us/um/redmond/groups/adapt/msbnx/
       REES:  http://www.ics.uci.edu/~radum/rees.html
       Netica from Norsys:
       http://www.norsys.com 
  
  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-11/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Spring 2011, Belief Networks
  [ main |
  					homework |
  					software |
 					
 					references ]





References and Related Links
			The course will be based mostly on three sources:
		
		Judea Pearl, "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference"Adnan Darwiche, "Modeling and Reasoning with Bayesian Networks" Class notes (downloads linked in schedule on main page)
		
		Two additional (new) books:
		Daphne Koller and Nier Friedman, 
  				 Probabilistic Graphical Models: Principles and Techniques. The MIT Press, 2009Richard E. Neapolitan, Learning
  		 		 Bayesian Networks. Prentice Hall, 2003.
		
		
		
		The following is a (partial) list of secondary reading material:
		
		Books:K.B. Korb and A. E. Nicholson, Bayesian Artificial
       Intelligence. Chapman and
       Hall/CRC, 2004Finn V. Jensen. An
       introduction to Bayesian networks. UCL Press, 1996. Russell and Norvig, Artificial intelligence, a modern
       approach (chapters, 13,14,15)J. Pearl, Causality,
       Models, Reasoning and Inference, Cambridge University Press, 2000Castillo, E.;
       Gutierrez, J.M.; Hadi, A.S., Expert Systems
       and Probabilistic Network Models, Springer-Verlag
       1997 Robert G. Cowell, A. Philip Dawid,
       Steffen L. Lauritzen, David J. Spiegelhalter Probabilistic Networks and Expert
       Systems Springer-Verlag, 1999.
			
		Articles:Daphne Koller, Nir Friedman, Lise Getoor and Ben Taskar,
       
       Graphical Models in a Nutshell.Heckerman and Breese, Causal
       Independence for Probability Assessment and Inference Using Bayesian
       Networks. Boutilier,
       Friedman, Goldszmidt and Koller,
       Context-Specific
       Independence in Bayesian Networks. Dechter,
       Bucket Elimination: A
       Unifying Framework for Probabilistic Inference. 1998.Dechter,
       "AAAI98
       tutorial on reasoning." Heckerman, 
       A Tutorial on Learning with Bayesian
       Networks. Kjaerulff,
       
       dHugin: A Computational System for Dynamic
       Time-Sliced Bayesian Networks. Pearl, Causation,
       Action and Counterfactuals. Dechter,Mini-buckets:
       a general scheme for approximating inference.
       Extended report.  Darwiche,
       Recursive
       Conditioning: Any-space conditioning algorithm with treewidth-bounded
       complexity. Darwiche,Any-space
       probabilistic inference. Darwiche,On the role of
       partial differentiation in probabilistic inference. Horvitz, Breese,
       Heckerman, Hovel & Rommelse. The Lumiere Project: Bayesian User Modeling for
       Inferring the Goals and Needs of Software Users. Binder, Murphy,
       Russell. Space-efficient
       inference in dynamic probabilistic networks. Russell, Binder, Koller, Kanazawa.
       Local
       learning in probabilistic networks with hidden variables. Dugad
       & Desai. A
       Tutorial on Hidden Markov Models. Friedman, Geiger, Goldszmidt. Bayesian
       Network Classifiers. Dechter,
       R., El Fattah, Y.,
       Topological Parameters For Time-Space Tradeoff Gagliardi,
       F., Generalizing
       Variable Elimination In Bayesian Networks Rish, I. and Dechter, R., AAAI
       2000 Tutorial 
  

  
  Other related links:A Brief
       Introduction to Graphical Models and Bayesian Networks The Association for Uncertainty in Artificial
       Intelligence 
       Sponsors the conference on Uncertainty in
       Artificial Intelligence (UAI), which is the main yearly forum for
       reporting research results relating to Bayesian networks. Free Bayesian Network Packages
       Artificial
       Intelligence: Probability studies may give computers a chance to learn,
       by Kevin J. Delaney in Cambridge, England.
       The Wall Street Journal Europe. AI on the web UAI
       repository 

  

  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-00/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-275B Fall 2000, Network-Based Reasoning - Belief Networks


    

Homework Assignments & Projectscourse reference | handouts

Homework 1 - ps - pdf
Homework 2 - ps - pdf
Homework 3 - ps - pdf
Homework 4 - ps - pdf
Homework 5 - ps - pdf
Homework 6 - ps - pdf
Homework 7 - ps - pdf

Project 1 - ps pdf




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-00/handouts.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




ICS-275B Fall 2000, Network-Based Reasoning - Belief Networks


    

Handoutscourse reference | homework & projects
Koller Handouts

Bucket Elimination: A Unifying Framework for Probabilistic Inference 
[ ps ]
[ pdf ]

Transperencies from the Tuesday, Oct. 24th lecture. [ ps ] [ pdf ]

Belief Propagation In A Bucket-Tree [ ps ] [ pdf ]

Dechter, R., 
"Mini-Buckets: A General Scheme For Approximating Inference", 
An ICS Technical Report, October, 2000

Dechter, R., Smyth, P., "Processing Boolean Queries Over Belief Networks"An ICS Technical report. 
[ ps ]
[ pdf ]

Kask, K., and Dechter, R., "Mini-Bucket Heuristics for Improved Search" In proceedings of "Uncertainty in AI", February, 1999. 
[  ps  ]
[ pdf ]

Rish, I., "Advances In Bayesian Learning"
[ ps ] [ pdf ]


AAAI-98 Tutorial: Learning Bayesian Networks From Data

[R82]
PostScript | 
PDF
Dechter, R., "A New Perspective on Algorithims for Optimizing Policies Under Uncertainty" 
In "AI and Planning" (AIPS2000) April, 2000. Technical Reports (AIPS-2000)".





School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-13/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Spring 2013, Belief Networks
  [ main |
  					software |
 					
 					references ]






References and Related Links
			The course will be based mostly on three sources:
		
		Judea Pearl, "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference"Adnan Darwiche, "Modeling and Reasoning with Bayesian Networks" Class notes (downloads linked in schedule on main page)
		
		Two additional (new) books:
		Daphne Koller and Nier Friedman, 
  				 Probabilistic Graphical Models: Principles and Techniques. The MIT Press, 2009Richard E. Neapolitan, Learning
  		 		 Bayesian Networks. Prentice Hall, 2003.
		
		
		
		The following is a (partial) list of secondary reading material:
		
		Books:K.B. Korb and A. E. Nicholson, Bayesian Artificial
       Intelligence. Chapman and
       Hall/CRC, 2004Finn V. Jensen. An
       introduction to Bayesian networks. UCL Press, 1996. Russell and Norvig, Artificial intelligence, a modern
       approach (chapters, 13,14,15)J. Pearl, Causality,
       Models, Reasoning and Inference, Cambridge University Press, 2000Castillo, E.;
       Gutierrez, J.M.; Hadi, A.S., Expert Systems
       and Probabilistic Network Models, Springer-Verlag
       1997 Robert G. Cowell, A. Philip Dawid,
       Steffen L. Lauritzen, David J. Spiegelhalter Probabilistic Networks and Expert
       Systems Springer-Verlag, 1999.
			
		Articles:Daphne Koller, Nir Friedman, Lise Getoor and Ben Taskar,
       
       Graphical Models in a Nutshell.Heckerman and Breese, Causal
       Independence for Probability Assessment and Inference Using Bayesian
       Networks. Boutilier,
       Friedman, Goldszmidt and Koller,
       Context-Specific
       Independence in Bayesian Networks. Dechter,
       Bucket Elimination: A
       Unifying Framework for Probabilistic Inference. 1998.Dechter,
       "AAAI98
       tutorial on reasoning." Heckerman, 
       A Tutorial on Learning with Bayesian
       Networks. Kjaerulff,
       
       dHugin: A Computational System for Dynamic
       Time-Sliced Bayesian Networks. Pearl, Causation,
       Action and Counterfactuals. Dechter,Mini-buckets:
       a general scheme for approximating inference.
       Extended report.  Darwiche,
       Recursive
       Conditioning: Any-space conditioning algorithm with treewidth-bounded
       complexity. Darwiche,Any-space
       probabilistic inference. Darwiche,On the role of
       partial differentiation in probabilistic inference. Horvitz, Breese,
       Heckerman, Hovel & Rommelse. The Lumiere Project: Bayesian User Modeling for
       Inferring the Goals and Needs of Software Users. Binder, Murphy,
       Russell. Space-efficient
       inference in dynamic probabilistic networks. Russell, Binder, Koller, Kanazawa.
       Local
       learning in probabilistic networks with hidden variables. Dugad
       & Desai. A
       Tutorial on Hidden Markov Models. Friedman, Geiger, Goldszmidt. Bayesian
       Network Classifiers. Dechter,
       R., El Fattah, Y.,
       Topological Parameters For Time-Space Tradeoff Gagliardi,
       F., Generalizing
       Variable Elimination In Bayesian Networks Rish, I. and Dechter, R., AAAI
       2000 Tutorial 
  

  
  Other related links:A Brief
       Introduction to Graphical Models and Bayesian Networks The Association for Uncertainty in Artificial
       Intelligence 
       Sponsors the conference on Uncertainty in
       Artificial Intelligence (UAI), which is the main yearly forum for
       reporting research results relating to Bayesian networks. Free Bayesian Network Packages
       Artificial
       Intelligence: Probability studies may give computers a chance to learn,
       by Kevin J. Delaney in Cambridge, England.
       The Wall Street Journal Europe. AI on the web UAI
       repository 

  

  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/spring-13/software.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

CompSci-276 Spring 2013, Belief Networks
  [ main |
  					software |
 					
 					references ]






Tools and Software
  Some software links:
  
  SamIam from UCLA: http://reasoning.cs.ucla.edu/samiam/
   Tutorial Videos
   JAVABayes from CMU:
       http://www.cs.cmu.edu/~javabayes/Home/
       GraphModAlg@UCI, Prof. Dechter's group webpage:http://graphmod.ics.uci.edu/GeNIe/SMILE from the University of Pittsburgh:
       
       http://genie.sis.pitt.edu/
       Hugin lite from Hugin: 
       http://www.hugin.com MSBN from Microsoft Research:
       http://research.microsoft.com/en-us/um/redmond/groups/adapt/msbnx/
       REES:  http://www.ics.uci.edu/~radum/rees.html
       Netica from Norsys:
       http://www.norsys.com 
  
  



     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2009/readings.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Sec. A, Constraint Networks, Spring 2009
  main |
  homework |
  slides |
  project










School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2009/slides.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Sec. A, Constraint Networks, Spring 2009 main | homework | readings
| project


      Slides
       
      
      Chapter 1 and 2
		Emma Rollon guest lecture
		Chapter 3
      Chapter 4
      Chapter 5
      Chapter 6
      Chapter 7
      Chapter 8
      Chapter 9
      Chapter 10
      Chapter 13
      
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2009/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Constraint Networks, Spring 2009 main | slides | readings
| project


      Home Work
      
      Homework 1  (Due: 04/13)Homework 2  (Due: 04/20)Homework 3  (Due: 04/27)Homework 4  (Due: 05/04)Homework 5  (Due: 05/11) -- updated 5/7.
The source code of the
SAT solvers used in this homework are linked below.Solvers
          
        Minisat
          WALKSAT
          RSAT
        
        Langford problemsDescription
of the encodingsDownload
the
problems here
        
        Homework 6 (Due:
        05/18) -- updated 5/14, 7pm
	  Link for REES applicationHomework 7  (Due: 06/01) -- updated 5/29.
      
      
      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/spring-2009/project.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]



CompSci 275, Sec. A, Constraint Networks, Spring 2009 main | homework | readings
| slides


      Possible projects:  
Recommended journal papers:Efficient Sequence Alignment with Side-Constraints by Cluster Tree Elimination, Sebastian Will, Anke Busch and Rolf Backofen, Constraints Vol. 13, 1-2
Recommended papers from CP Conference 2008:Cost-based Domain Filtering for Stochastic Constraint Programming, Roberto Rossi, S. Armagan Tarim, Brahim Hnich, Steven PrestwichA Framework for Hybrid Tractability Results in Boolean Weighted Constraint Satisfaction Problems, T. K. Satish Kumar Exploiting Decomposition in Constraint Optimization Problems, Matthew Kitching, Fahiem Bacchus
Other possibly interesting journal papers:Compiling finite linear CSP into SAT, Naoyuki Tamura, Akiko Taga, Satoshi Kitagawa and Mutsunori Banbara, Constraints Vol 14, 2Theoretical analysis of singleton arc consistency and its extensions, Christian Bessiere and Romuald Debruyne, Artificial Intelligence Vol. 172, 1Understanding the role of noise in stochastic local search: Analysis and experiments, Ole J. Mengshoel, Artificial Intelligence Vol. 172, 8-9A comparative runtime analysis of heuristic algorithms for satisfiability problems, Yuren Zhou, Jun He, and Qing Nie, Artificial Intelligence Vol. 173, 2Generalised arc consistency for the AllDifferent constraint: An empirical survey, Ian P. Gent, Ian Miguel, Peter Nightingale, Artificial Intelligence Vol. 172, 18Relatively Quantified Constraint Satisfaction, Manuel Bodirsky, Hubie Chen, Constraints Vol. 14, 1Value Ordering for Quantified CSPs, David Stynes and Kenneth Brown, Constraints Vol. 14, 1A Solver for QBFs in Negation Normal Form, Uwe Egly, Martina Seidl, Stefan Woltran, Constraints Vol. 14, 1 A Self-Adaptive Multi-Engine Solver for Quantified Boolean Formulas, Lucas Pulina and Armando Tacchella, Constraints Vol. 14, 1Efficient Handling of Universally Quantified Inequalities, Alexandre Goldsztejn, Claude Michel, Michel Rueher, Constraints Vol. 14, 1 
Other papers from CP Conference 2008:An Application of Constraint Programming to Superblock Instruction Scheduling, Abid M. Malik, Michael Chase, Tyrel Russell, Peter van Beek Classes of Submodular Constraints Expressible by Graph Cuts, Stanislav Zivny, Peter G. Jeavons PPT |+| PDF_GoogleBooksOptimization of Simple Tabular Reduction for Table Constraints, Christophe LecoutreDichotomic Search Protocols for Constrained Optimization, Meinolf Sellmann, Serdar Kadioglu From High Girth Graphs to Hard Instances, Carlos Ansótegui, Ramón Béjar, César Fernàndez, Carles Mateu A Constraint-Programming Framework for Bounded Program Verification, Héléne Collavizza, Michel Rueher, Pascal Van HentenryckApproximate Compilation of Constraints into Multivalued Decision Diagrams, Tarik Hadzic, John N. Hooker, Barry O'Sullivan, Peter Tiedemann Quantified Constraint Optimization, Marco Benedetti, Arnaud Lallouet, Jérémie VautardMaintaining Generalized Arc Consistency on Ad Hoc r-ary Constraints, Kenil C.K. Cheng, Roland H.C. Yap


      



School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/links.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

		


 Links 

Constraint Programming 1999 (CP99)
 The constraint language Eclipse 

 CSPlib of benchmark CSPs
"Bucket Elimination: A unifying framework for structure-driven inference"
"Bucket Tutorial"
Eclipse Manual  






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

		


ICS 275A, Fall, 1999
Homework Assignments 



 Homework 1 
Solution for Homework 1
 Homework 2 
Solution for Homework 2
Homework 3
Homework 4
Homework 5
Homework 6






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/outline.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

		

			
 Instructor: Rina Dechter 
Days: Tuesday/Thursday  
Time: 11:00a.m.-12:20p.m. 
Location: CS 259   




 Course Goals  



The purpose of this course is to familiarize students with the 
theory and techniques of constraint processing, using the constraint 
network model.  This model offers a natural language
for encoding world knowledge in areas such as scheduling, 
vision, diagnosis, prediction and design, and it facilitates many 
computational tasks relevant to these domains.

The course will focus on techniques for constraint processing.
It will cover search techniques, consistency algorithms and
structure based techniques, and will focus on 
properties that facilitate efficient solutions.
Extensions will be given into applications such as 
temporal reasoning, diagnosis, scheduling, 
and probabilistic Bayes networks.
The constraint language
Eclipse will be used for modelling and solving constraint problems.
The topics covered will be taken from the following list.
    


 Outline: 



The constraint network model, examples.  Graph representations,
partial orders between networks of constraints, the minimal network.


Constraint Programming using Eclipse


Approximation algorithms: local-consistency vs. global-consistency, 
arc and path-consistency, directional-consistency, relational-consistency,
adaptive-relational-consistency. 



Backtracking strategies: Look-back schemes: backjumping, constraint learning.  
Look-ahead schemes: forward-checking, variable and value orderings, 
constraint propagation.  The Davis-Putnam algorithms.



Local search greedy algorithms: GSAT



Topology-based concepts and algorithms: tree-width vs. local-consistency, 
tree-solving algorithm, adaptive-consistency, tree-clustering, 
the bi-connected component, cycle-cutset, optimization
the bucket-elimination-conditioning framework.



Constraint-based tractable classes: row-convexity, tightness, looseness,
implicational and functional constraints, Horn clauses.



Temporal constraint networks: quantitative, qualitative, and integrated 
temporal networks.



Constraint Logic Programming



Moving from constraint satisfaction to constraint optimization.



Bayes networks vs. constraint networks.


 Readings: 


Class notes, collection of papers.

"Programming with Constraints:  An Introduction," by Kim Marriott and
Peter J. Stuckley, 1998.



 Requirements: 



Homeworks 


Midterm 


A term project which may consist of a programming project
and/or a paper presentation,
and critique, empirical evaluation of methods,
experimenting with existing tools, etc.) 
The last two weeks will be devoted to paper and project presentations.



 Some useful links: 

 
 AI on the web 

 
 The constraint language Eclipse 

 
On-line documentation 

 
 CSPlib
of benchmark CSPs

 
"Bucket Elimination: A unifying 
framework for structure-driven inference," R. Dechter.

 
"Bucket Tutorial."



 Grading Policy: 


Homeworks and projects (60%), Midterm (40%).




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/projects.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]

		


ICS 275A, Fall, 1999
Projects  



 Project
 Sazhin's Project
 Rob Menke 






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-02/handouts.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




ICS-275B Fall 2002, Network-Based Reasoning - Belief Networks


    

Handoutscourse reference | homework & projects

Learning

Koller Handouts

Bucket Elimination: A Unifying Framework for Probabilistic Inference

Slides on Bucket-Tree Elimination

Belief Propagation In A Bucket-Tree

Bucket-Tree Elimination for Automated Reasoning


Dechter, R., "Mini-Buckets: A General Scheme For Approximating Inference", To appear in Journal of the ACM, 2003.



[R67] PostScript |
PDF
Dechter, R., and I. Rish, "On The Impact Of Causal Independence"
An ICS Technical Report, October 1998.



[R99] PostScript |
PDF
Robert Mateescu, Rina Dechter, Kalev Kask. "Tree Approximation for Belief Updating", In proceedings of AAAI-2002, forthcoming.



[R101] PostScript
PDF
Rina Dechter, Kalev Kask and Robert Mateescu. "Iterative Join-Graph Propagation", In proceeding of Uncertainty in Artificial Intelligence (UAI 2002), pp. 128-136.



Powerpoint slides on Approximate Algorithms for Belief Updating
MC
IJGP



A tutorial on learning with bayesian networks PS




Rao-Blackwellised Particle Filtering for Fault Diagnosis PDF



An Introduction to Hidden Markov Models and Bayesian Networks PDF



[R102] Abstract |
PostScript |
PDF
Bozhena Bidyuk, and Rina Dechter. "Rao-Blackwellised sampling for Bayesian networks", UCI technical report, February, 2002.








School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-275b/fall-02/homework.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]




    

ICS-275B Fall 2002, Network-Based Reasoning - Belief Networks


    

Homework Assignments & Projectscourse reference | handouts


Homework 1 - pdf
Homework 2 - pdf
Homework 3 - pdf
Homework 4 - pdf
Homework 5 - pdf
Homework 6 - pdf
Homework 7 - pdf (useful reading)

Project 1 - pdf 




     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-06/hmwk_proj.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
 




  
  
  ICS-171, Intorduction to
  Artificial Intelligence, Fall 2006
  
  
  



 




  
  Homework
   
  Homework 1
   
  Homework 2
   
  Homework 3 (due
  Tuesday, October 24th)
   
  Homework 4
   
  Homework 5
   
  Homework 6
   
  Homework 7
   
  
  
  Homework Solutions
   
  
  
  Project
   
  








School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-06/grades/CS171-Fall2006-FinalGrades.htm
##-----------------TITLE------------------------##
null
##------------------TEXT------------------------##
ID last 4final (106)midterm (100)proj part 1 (40)proj part 2 (60)hw 1 (50)hw 2 (40)hw 3 (60)hw 4 (40)hw 5 (60)hw6 (50)hw7 (40)final score %letter-grade1010000000000000.00F118807420031270000023.20F1194737135454132542547483274.84B-1234858640604030552843303083.58A-14028369.500032383857444066.94C-142949.579.54060453959054482571.84C1715646620303337323048362263.21C-17656780.520303531533058342768.70C1778897540604842503960494088.44A2018637930304537553150483571.12C20476769.535454342604556504076.63B-2168526420303834593860492962.94D+2210536820354837553658493565.38C-236998693030030480300068.32C2428679237503838493051392977.18B2444697935304337552952483674.21B-249975702030404254051494073.05B-2544879740604642604260494092.56A+2760847940604744593060493987.41A28527992.540603630243244403682.91B+28997471.540504031453051182674.79B-30889271.520404134493151403278.59B3151566440404335543659453968.99C320681704050422803247324077.91B3541828240504125463639373780.85B370958784060473960335903675.92B-38137675.540453937593655391578.55B41616374.540452922003703061.83D4378828140304332472652413778.71B502575924060454154406046085.64A-5046797640604438553448453882.71B+51067180.535454642573055353677.75B5247798025453522453447253975.51B-52638074.525603835593359433880.66B527966623004537593758503565.56C-5338518000420022510044.58F5392065.500000000013.10F5476568630304740603959504072.16C+55423056.530504241603556492658.18D56227782384533395636048076.36B-5704816920025393405039062.60D+57691018940604538563749454094.28A+5806488620304332523155383864.35C-6193717540600164505003068.18C6239897640604234432952313684.19A-63955969.520304130303857483866.08C-6459517340304130553058483566.38C-66778080.54050474260366046084.00A-67234575.540504333523053433567.12C67678886.540604334494058413988.31A678051.58340454643554260493573.54B-68098479.52003922473651473872.28C+6923778032453532543050273176.43B-69277861.5360373403154253065.95C-69417075406028210045302569.17C71447083.520031001200049.95F72828757.5200332553314730065.36C-74046781.538304029533153383672.62C+74504265.5405040 513356464064.65C-748844.56820304842513049403059.67D76274677253001632182412049.44F77137664.54050342227042282069.41C778588763740353955058483682.53B+78110000031000003.23F79364277.50604024004002851.88F79544570.52058424153255032062.98D+82748291405039 553442453583.57A-835684793830383447260363577.02B8500768540604230453253423981.88B8637707035600036020201461.68D8668055.50026000050017.43F87537188.540603934513852403881.44B90395674.52030403603560453866.14C-93906064.530303833482757343264.60C-94707185.53530494059386048078.11B94924571.520304439554460493763.35C-949797904030022452639442982.62B+954147.565.540603635453357502667.36C96048164.535452030341230321368.72C96837779.52545383347048423976.22B-972497804060494150265445089.64A97678990.540584132513056423387.50A98237179.520304228332648121866.82C-9938597435303932562456362766.99C-99647358.525503124461651323468.52C
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-06/lecture-notes.html
##-----------------TITLE------------------------##
Dr. Rina Dechter @ UCI
##------------------TEXT------------------------##
[an error occurred while processing this directive]







ICS-171, Intorduction to Artificial Intelligence, Fall2006



Lecture Notes 
  Lecture Notes 1
  Lecture Notes 2
  Lecture Notes 3
  Lecture Notes 4
  Lecture Notes 5
  Lecture Notes 6
  Lecture Notes 7
  Lecture Notes 8
  Lecture Notes 9
  Lecture Notes 10
  Lecture Notes 11
  Lecture Notes 12
  Lecture Notes 13






     
School of Information and Computer Science
University of California, Irvine, CA 92697-3435
Dr. Rina Dechter

dechter at ics.uci.edu
##------------------URL-------------------------##
http://www.ics.uci.edu/~dechter/courses/ics-171/fall-06/outline_syl.html
##-----------------TITLE------------------------##
ICS 171: Introduction to Artificial Intelligence - Fall 2004
##------------------TEXT------------------------##
171 Course Outline, Fall 2006
Professor: Rina
    Dechter Email: dechter@ics.uci.edu Place: CS 174Time: Tuesday and Thursday 2:00 to
03:20 pmOffice: ICS 424E Office Hours: Monday 2-3 pm and
Thursday 1-2 pmTextbooks: Artificial Intelligence: A Modern
Approach, by Russell and Norvig
(second edition). Classnotes
  Teaching Assistants Vadim Bichutskiy  Email: vbichuts@uci.edu 
      Office Hours: Tuesday 10-11am and Friday 10-11am in CST 127A
  ReaderJingjing Li  Email: jingjing@uci.edu.
    
  Discussion Sections 
    (Note that there will be no discussion on 09/25/2006)Monday 12:00-12:50pm  Location: HIB 110Monday  9:00- 9:50 am   Location: HIB 110  



Course Goals: 
Learn the basic AI
techniques, the
problems for which they are applicable and their limitations. Topics
covered
include heuristic search algorithms, Knowledge-representation
(logic-based and
probabilistic-based) inference and learning algorithms. 


Academic Honesty:
Academic honesty is
taken
seriously. It is the responsibility of each student to be familiar with
UCI's current academic honesty policies.
Please take the
time to read the current
UCI Senate Academic Honesty Policies. 


Assignments:
There will be weekly homeworks, about 7-8 throughout the quarter,
each on the material covered in class up to that time. Homeworks will account for 25-30% of the grade. Homeworks will be assigned on Tuesday and will
be due to following Thursday at 2:00 pm in class (stay tuned for
changes towards the end of the quarter) The
lowest scored homework will be dropped. There will be no make-ups for homeworks. There will be 1 project which will
account for 10-15% of the grade. There will be one midterm exam, closed
books which will account for 20% of the grade. There will be a final exam, closed
books during the final week which will account for 40% of the grade. 


Bulletin Board: 
Read ics.171 for
announcements,
answers to homework etc. Also, please post questions about homework or
anything
else there. If you don't understand something, others probably don't
either and
will have the same question. 


Procedures:
Some handouts will be
distributed
during the quarter by the Distribution
Center, others will be available to buy in the Engineering Copy Center.



Schedule:
Note that the
schedule is only tentative and will be
subject to change during the quarter
Lecture 1. Introduction, history,
intelligent agents. Chapters 1, 2. Lecture 2. Problem formulation:
State-spaces, search graphs, problem spaces, problem types. Chapter 3 .
  Lectures 3. Uninformed search:
breadth-first, depth-first, iterative deepening, bidirectional search.
Chapter 3.Lectures 4. Informed Heuristic search:
Greedy, Best-First, A*, Properties of A*. Chapter 4.Lectures 5. Informed Heuristic search,
Properties and generating heuristics, constraint satisfaction. Chapters
4,5.Lecture 6. Constraint satisfaction.
Chapter 5.Lecture 7. Constraint satisfaction.
Game playing Chapter 6.Lecture 8. Game playing. Chapter 6.Lecture 9. Representation and
Reasoning: Propositional logic. Chapter 7.Lecture 10. Representation and
Reasoning: Inference in propositional logic. Chapter 7.Lecture 11. Midterm Lecture 12. First order logic.
Chapter. 9.Lecture 13. Inference in first order
logic. Chapter 9. Lecture 14. Learning from
observations. Chapter 18
  Lecture 15. Learning from
observations. Chapter 18 continued
  Lecture 16. Neural networks. Chapter,
20.5 Lecture 17. Handling uncertainty.
Chapter 13 Lecture 18. Thanksgiving Lecture 19.
Bayesian networks. Chapter 14 Lecture 20.
Assorted topics Lecture 21:
Assorted topics


Resources on the Internet 
A list of Web
resources about AI . Computing
Machinery and Intelligence, A.M. TuringAI
on yahooAI
journalSome
links for Robocuphttp://www.cs.utexas.edu/~AustinVilla/?p=downloads
      
    http://www.robocup2004.pt/photosAndVideos/
      
    http://www.cs.utexas.edu/~AustinVilla/legged/AmericanOpen2003/
      
    http://robocup.mae.cornell.edu/RoboCup_Media_Archive.html
      
    http://www.cs.utexas.edu/~AustinVilla/?p=papers
  Some links on DARPA Grand Challenge: 
  http://www.stanfordracing.org/
      
    http://www.mobilerobot.org/DARPA.htm
      
    http://www.darpa.mil/grandchallenge05/techpapers.html
##------------------URL-------------------------##
http://www.ics.uci.edu/~nflerova/cs175/projects_page.html
##-----------------TITLE------------------------##
CS 175 projects page
##------------------TEXT------------------------##
Project
                  list
                
      
      
        
          
            
              
              When you select a project consider:
              Project titleProject ideaMethodology (Constraint processing, Bayesian networks,
                  Games, search, planning, learning)Data source you will useTools you will useSoftware you will have to writeBackground material to read. Read relevant papers. Find out
                  available systems.Teammate: optimal number of team mates is 3Expected output (experiments, demo)
              Important: make sure that your project employs Artificial
                  Intelligence techniques.
              
              
              Possible project ideas:
              1. TA assignments. 
               Given class schedules for quarter, the number of TA needed for
                each class, TA's preferences and qualification, and instructors'
                choice of preferred TA, schedule the TA's in a way that maximize
                some measure of satisfaction.. See the page for the PATAT
                - International conference on the practice and theory automated
                timetabling. 
              
              
               2. Class scheduling.
               The problem is to find a schedule for classes, classrooms, and
                teachers for a teaching setting (e.g., a high school, a computer
                science department). Measure of satisfaction can be to minimize
                the number of weighted constraints violated. Students can use
                the REES tool to model and run their algorithms. See papers by Saleh
                  Elmohamed et al., Dimopoulou
                  et al., Badri
                  et al. and Dinkel
                  et al. Also see the link for the PATAT.
                
                Actual data from chair of CS department: class
                  schedule for 2011-2012 
              
              
               3. Image classification.
              Develop system for image classification. You can choose any
              dataset you want, here is a good starting point: Flower
                dataset (the one with 17 categories) Use cross-validation to
              assess your classifier. See thesis
                on features for image retriaval. Another interesting paper.
              Additionally, see references on the Flower dataset page. Also see
              datasets on Caltech
                computation vision page
              Possible image features to check out:
              Color HistogramsHistograms of Scale Invariant Features (SIFT)Histograms of Image GradientsGist Features etc.
              Ideas to think about:
              Nearest neighbor classifier (very simple, good to use as a
                baseline)
              Support Vector Machine (SVM) classifier (experiment with
                different kernels)
              Spartial pyramid matching (see paper)
              
              
              
               
              
              
               4. Games development.
               Othello (Reversi)Checkers GoJapanese crosswordGenerating ordinary crosswordsChinese chessMancalaStratego
              
              
              5. Advising a first year student.
               A freshman student needs to make many decisions in his first
                year (what is his major, what classes to take, etc.) Build a
                Bayesian network or a constraint network (or a mixture of both),
                based on your own expertise that will advise a first year
                student in his first steps on campus. See paper
                by Avi Dechter. 
              
              
               6. Magnetic Tower of Hanoi project.
               Variation of Tower of Hanoi puzzle that uses multicolored
                disks. See paper
                by Uri Levy. 
              
              
               7. RoboSoccer game simulation.
               Investigate different policies for keepaway RoboSoccer game
                simulation. See Peter Stone's site
                  for keepaway. Investigate influence of total number of
                players, ratio between keepers and takers and field size on the
                effectiveness of certain policies. 
              
              Develop new policies for the keepers, using various machine
                  learning techniques and compare to the ones presented by Peter
                  Stone's group.Develop policies for the takers. Prove that your policies
                  work better then the handcoded one used by Peter Stone.
              
              8. Sudoku.
               Develop both solver and
                generator of the game
                instances. See Sudoku
                  online and slides
                  on sudoku modelling. Another useful paper 
              
              
               9. Image recognition project.
               Develop system capable of recognising so-called CAPCHA -
                numbers that you need to input when you register for a forum or
                ticketmaster. 
              
              
              Alternatively: concentrate on handwritten digits recognition.
                You can create your own dataset or consult MNIST
                  database. See MNIST page for many examples of previously
                used classifiers. You can use the same ideas, but be prepared to
                discuss how your classifier compares in terms of test error
                rate.
              
              10. Search space estimation
              Estimate the search space explored by Depth-First Branch and
                Bound. Relevant paper by
                  Pang C. Chen and 
                  by Lars Otten. If you are interested in the project, talk
                to the instructor.
              
              
              11. Sports statistics and prediction.
              
              Based
                on historical data and regular season data predict the results
                of professional sport tournament of your choice.
              In
                this project, teams will be expected to find sports statistics
                online -- perhaps there will be a need to write automated
                scripts in order to obtain the data. Given real-world data,
                relevant prediction tasks can be proposed. A paper
              on
                prediction of winners of March Madness. Also of interest: MIT
                  Sloan Sports Analytics Conference and Australian
                  Football League competition being run by Monash University in
                  Australia 
              
              12.Object detection
              Implement an object detector, for example, a variant of
                Histograms of Oriented Gradients (HOG) object detector by Dalal
                & Triggs. See PASCAL Visual Object Classes Challenge page
                for possible datasets.
              13. Email management project.
               The problem: people receive thousands of emails which require
                some action (answer, discard and file).
                Email management becomes unmanageable.
                
                The project: build a system that help decide:
               what email to answer next (prioritize emails) what emails to discard and what to file to other folders
               The input is a collection of emails that were received. Each
                message should have a collection of features (time of arrival,
                sender, title, length, number of recipients, topic and response
                time).
                
                Methodology: learning: look at past messages received and the
                decisions made. 
                See Padhraic
                  Smyth's topic modelling page. Also, topic modelling
                tutorials: Steyvers
                  and Griffiths and Blei
                  and Lafferty, Paul
                  Graham, Better Bayesian filtering (for spam classification)
              
              You can also use CMU
                  project in AI website and Kaggle
                  competitions website for ideas and inspiration.
              
               
              
              
              Back to top
            
          
        
        Useful links
            
          Main CS 175 website
          
          CS 175 Schedule
##------------------URL-------------------------##
http://www.ics.uci.edu/~rkwang/Winter_2016_ICS167/ics167coursepage.html
##-----------------TITLE------------------------##
ICS 167
##------------------TEXT------------------------##
ICS 167: Multiplayer Game Systems
      Course Webpage
    
    Contact Information
    
     Richert Wang (rkwang at uci dot edu)
      Office Hours:
      ICS 424D, Tu/Th 11AM - 12PM or by appointment.
    Te-Yu Chen (teyuc at uci dot edu)
      Office Hours:
      DBH 3219, Tu 2:30 - 4PM or by appointment.
     Please prefix all emails for this class with "ICS 167"
      in the subject line.
    
    Multiplayer Online Systems Project
    Resources
    Client
        Server Socket Notes
      Demo 1
        Folder
      Demo 2
        Folder
      Demo 3
        Folder
    WebSocket
        Tutorial
      ChatRoom
        Demo Zip (updated 2/5)
      
    Milestones
    Milestone
        1 - Due 2/10
      Milestone
        2 - Due 2/17
      Milestone
        3 - Due 2/24
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/ics167/Project_Rules.html
##-----------------TITLE------------------------##
project_rules
##------------------TEXT------------------------##
Project Rules
Students may work in groups: Maximum size 3 students.Group members may change between projects.Project
code to be submitted as a zip file to dropbox on due date. Project has
multiple milestones. Each milestone to be submitted on time or "0"
grade for that milestone.
Project
grade given based on: Playability 75%, User Guide 5% and Documentation
20%. Game demo during week 10 and finals period. All group members have to be
present.
  Extra credit given for additional work.Copying strictly forbidden and if caught will result in a grade of "0" for all parties concerned.Have a USB drive of atleast 8GB to save your work in the lab.
##------------------URL-------------------------##
http://www.ics.uci.edu/~magda/Courses/ics167/COGSlab_rules.html
##-----------------TITLE------------------------##
cogslab_rules
##------------------TEXT------------------------##
COGS Lab Rules
As a student in a course that is using the COGS Lab, you will have
unrestricted access to the lab for the Winter quarter.  It is
important that the rules listed below are followed.

No food or drink of any kind, including bottled water, is permitted in the COGS Lab.When you leave the COGS Lab, make sure that your computer is
turned off, that the room is neat, and that the door closes behind you.After 6:00pm and before 8:00am, and always during weekends, use
your access code to enter the COGS Lab, even if the door is propped
open.  After hours, do not allow anyone into the lab who does not
have an access code.  If someone entering does have an access
code, he or she should use it.  Do not give your access code to
anyone else.Course labs and discussions are scheduled at certain times during
the week; you should not plan to use the COGS lab during those times
unless it is your scheduled lab period.Permission to use the COGS Lab lasts through the end of the
quarter; your access code will stop working on Friday of Finals
week.  Permission may be revoked at any time.
